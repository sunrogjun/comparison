{
  "problem": {
    "task_id": "MBPP/120",
    "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
    "test_list": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ],
    "challenge_test_list": [],
    "problem_id": 109
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_product(l):\n    l.sort()\n    return l[0] * l[-1]\n\n\nif __name__ == \"__main__\":\n    print(max_product([(1, 2), (3, 4), (5, 6)]))",
      1.16015625
    ],
    [
      "def find_max_product(arr):\n    max_product = -1\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\nif __name__ == \"__main__\":\n    print(find_max_product([(1, 2), (2, 3), (3, 4), (4, 5)]))",
      1.146484375
    ],
    [
      "def maximum_product_with_pairs(a):\n    max_product = float(\"-inf\")\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            product = a[i][0]*a[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nprint(maximum_product_with_pairs([(3, 3), (4, 4), (5, 5)]))",
      0.98291015625
    ],
    [
      "def max_product(arr):\n    max_prod = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i == j:\n                continue\n            max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n\n\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))",
      0.97998046875
    ],
    [
      "def max_product(arr):\n    max_prod = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_prod = max(max_prod, arr[i] * arr[j])\n\n    return max_prod\n\n\nprint(max_product([(1, 2), (2, 3), (3, 4)]))",
      0.908203125
    ],
    [
      "def maximum_product(lst):\n    lst.sort()\n    m = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] * lst[j][1] > m:\n                m = lst[i][0] * lst[j][1]\n    return m\n\n\nprint(maximum_product([(1, 2), (3, 4)]))",
      0.90576171875
    ],
    [
      "def find_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] * find_product(arr[1:]),\n                   find_product(arr[1:]),\n                   arr[0] * find_product(arr[1:]))\n\n\nprint(find_product([1, 2, 3]))",
      0.8115234375
    ],
    [
      "def maximum_product(list):\n    max_product = 0\n    for pair in list:\n        if max_product < pair[0] * pair[1]:\n            max_product = pair[0] * pair[1]\n    return max_product\n\nprint(maximum_product([(1,2),(2,3),(4,5),(6,7),(8,9)]))",
      0.7998046875
    ],
    [
      "def maximum_product(tuples):\n    # Your code here\n    maximum = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                if tuples[i][0] * tuples[j][1] > maximum:\n                    maximum = tuples[i][0] * tuples[j][1]\n    return maximum\n\n\nprint(maximum_product([(1, 2), (2, 4), (4, 6), (6, 8)]))",
      0.314697265625
    ],
    [
      "def maximum_product(pairs):\n    pairs.sort(key=lambda x: x[0] * x[1])\n    return pairs[0][0] * pairs[-1][0]\n\nprint(maximum_product([(1,2), (3,4), (5,6)]))",
      0.22265625
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\narr = [(2, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(max_product(arr))",
      0.188720703125
    ],
    [
      "def maximum_product(list_of_tuples):\n    max_product = 0\n    for i in range(0, len(list_of_tuples) - 1):\n        for j in range(i + 1, len(list_of_tuples)):\n            if list_of_tuples[i][0] * list_of_tuples[j][1] > max_product:\n                max_product = list_of_tuples[i][0] * list_of_tuples[j][1]\n    return max_product\n\nprint(maximum_product([(2, 4), (1, 3), (2, 6), (3, 7)]))",
      0.12261962890625
    ],
    [
      "def max_product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_prod = max(max_prod, arr[i][0] * arr[j][1])\n    return max_prod\n\n\nprint(max_product([[1, 2, 3], [4, 5, 6]]))",
      0.048492431640625
    ],
    [
      "def max_product(arr):\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])\n\n\nif __name__ == \"__main__\":\n    print(max_product([2, 5, -1, 4, -3, -2, -1]))",
      0.0478515625
    ],
    [
      "def maximum_product_of_pairs(pairs):\n    if not pairs:\n        return 0\n    max_product = 0\n    for i in range(len(pairs) - 1):\n        for j in range(i + 1, len(pairs)):\n            max_product = max(max_product, pairs[i][0] * pairs[j][1])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(maximum_product_of_pairs([(1, 2), (2, 3), (3, 4)]))",
      0.037872314453125
    ],
    [
      "def max_product(a):\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            product = a[i][0]*a[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\na = [(1,2),(3,4),(5,6)]\nprint(max_product(a))",
      -0.01087188720703125
    ],
    [
      "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    arr.sort()\n    return arr[0] * arr[1]\n\nprint(max_product([(1, 2), (3, 4), (5, 6), (7, 8)]))",
      -0.08831787109375
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1):\n            product = arr[i][0] * arr[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([(1, 2), (2, 3), (3, 4), (4, 5)]))",
      -0.11077880859375
    ],
    [
      "def max_product(arr):\n    max_prod = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            max_prod = max(max_prod, arr[i][0] * arr[j][1])\n    return max_prod\n\n\narr = [(3, 4, 5), (1, 2, 3), (5, 4, 3), (3, 2, 1)]\nprint(max_product(arr))",
      -0.39013671875
    ],
    [
      "def max_product(l):\n    if not l:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return max(max_product(l[:-1]), max_product(l[1:]))\n\n\nprint(max_product([(2, 2), (3, 4), (3, 4), (3, 4)]))",
      -0.611328125
    ],
    [
      "def find_max_product(tuple_list):\n    max_product = 0\n    for index in range(len(tuple_list)):\n        for index2 in range(index+1, len(tuple_list)):\n            product = tuple_list[index][0] * tuple_list[index2][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == '__main__':\n    print(find_max_product([(1, 2), (2, 3), (3, 4), (4, 5)]))",
      -0.83056640625
    ],
    [
      "def max_product(arr):\n  return max([a[0]*b[1] for a,b in zip(arr, arr[1:])])",
      -0.857421875
    ],
    [
      "def maximum_product_with_pairs(pairs):\n    max_product = 0\n    for pair in pairs:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\nprint(maximum_product_with_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]))",
      -0.8583984375
    ],
    [
      "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    else:\n        arr.sort(key=lambda x: x[1])\n        return max([x[0] * x[1] for x in arr])\n\n\narr = [(1, 2), (2, 3), (3, 4), (4, 5)]\nprint(max_product(arr))",
      -0.8583984375
    ],
    [
      "def max_product(list):\n    max_prod = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i!= j:\n                if list[i][0] * list[j][1] > max_prod:\n                    max_prod = list[i][0] * list[j][1]\n    return max_prod\n\n\nif __name__ == '__main__':\n    list = [(1, 2), (1, 3), (2, 1), (3, 2)]\n    print(max_product(list))",
      -0.8583984375
    ],
    [
      "def max_product(lst):\n    return max([i * j for i, j in zip(lst[:-1], lst[1:])])\n\nprint(max_product([(1, 2), (3, 4), (5, 6)]))",
      -0.85888671875
    ],
    [
      "def max_product(data):\n    max_product = 0\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            max_product = max(max_product, data[i][0] * data[j][1])\n    return max_product\n\n\nprint(max_product([(1, 2), (3, 4), (5, 6)]))",
      -0.86083984375
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\ndef main():\n    arr = [(1, 2), (3, 4), (5, 6)]\n    print(max_product(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "def max_product(arr):\n    arr.sort()\n    return max(arr[0] * arr[1], arr[1] * arr[0])\n\n\narr = [(5, 2), (4, 8), (3, 9), (1, 1)]\n\nprint(max_product(arr))",
      -0.86083984375
    ],
    [
      "def max_product_of_pairs(arr):\n    max_product = 0\n\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i][0] * arr[j][1])\n    return max_product\n\n\nprint(max_product_of_pairs([(2, 4), (5, 6), (4, 6), (3, 8)]))\nprint(max_product_of_pairs([(2, 2), (3, 3), (3, 4)]))",
      -0.865234375
    ],
    [
      "def max_product(tuples):\n    if len(tuples) < 2:\n        return 0\n\n    max_product = 0\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            max_product = max(max_product, tuples[i][0] * tuples[j][1])\n\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([(1, 2), (3, 4), (2, 3), (3, 4)]))",
      -0.91748046875
    ],
    [
      "def find_product(arr):\n    arr_len = len(arr)\n    product = 0\n    for i in range(arr_len):\n        for j in range(arr_len):\n            if i == j:\n                continue\n            product = max(product, arr[i][0] * arr[j][1])\n    return product\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(find_product([(1,2), (2,3), (3,4), (4,5)]))",
      -1.060546875
    ],
    [
      "def maximum_product(list):\n    if len(list) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(list) - 1):\n        for j in range(i + 1, len(list)):\n            max_product = max(max_product, list[i][0] * list[j][1])\n    return max_product\n\n\nprint(maximum_product([[1, 2, 3], [1, 2, 4], [1, 2, 5], [2, 3, 4], [2, 3, 5]]))",
      -1.2353515625
    ],
    [
      "def find_maximum_product(arr):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            result = max(result, arr[i][0] * arr[j][1])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(find_maximum_product([(3, 2), (2, 4), (1, 5)]))",
      -1.236328125
    ],
    [
      "def maximum_product(arr):\n    max_product = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i][0] * arr[j][1])\n\n    return max_product\n\n\narr = [(10, 20), (30, 40), (50, 60), (70, 80), (90, 100)]\nprint(maximum_product(arr))",
      -1.3818359375
    ],
    [
      "def max_product(tuples):\n    max_prod = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                prod = tuples[i][0] * tuples[j][1]\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n\ndef max_product2(tuples):\n    max_prod = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                max_prod = max(max_prod, tuples[i][0] * tuples[j][1])\n    return max_prod\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (2, 3), (4, 5), (5, 6), (7, 8)]\n    print(max_product(tuples))\n    print(max_product2(tuples))",
      -1.390625
    ],
    [
      "def max_product_of_pairs(a):\n    product = 0\n    for i in a:\n        for j in a:\n            product = max(product, i[0] * j[1])\n    return product\n\nprint(max_product_of_pairs([(2,3), (5,10), (6,9)]))\nprint(max_product_of_pairs([(1,2), (3,4), (5,6)]))\nprint(max_product_of_pairs([(2,4), (3,5), (7,9)]))\nprint(max_product_of_pairs([(2,2), (2,2), (2,2)]))",
      -1.4033203125
    ],
    [
      "def maximum_product(l):\n    max_prod = 0\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            product = l[i][0] * l[j][1]\n            if product > max_prod:\n                max_prod = product\n    return max_prod\n\n\nprint(maximum_product([[2, 3], [1, 4], [2, 6]]))",
      -1.474609375
    ],
    [
      "def maximum_product(tuples):\n    if not tuples:\n        return 0\n    max_prod = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            max_prod = max(max_prod, tuples[i][0] * tuples[j][1])\n    return max_prod\n\n\nprint(maximum_product([(1, 2), (4, 5), (6, 7), (9, 10)]))",
      -1.515625
    ],
    [
      "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            product = arr[i][0] * arr[j][1]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_product([(2, 3), (4, 5), (7, 9)]) == 24",
      -1.5546875
    ],
    [
      "def maximum_product(list_of_tuples):\n    max_product = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1,len(list_of_tuples)):\n            max_product = max(max_product, list_of_tuples[i][0]*list_of_tuples[j][1])\n    return max_product\n\n\nprint(maximum_product([(3, 5), (7, 9), (1, 2)]))",
      -1.6064453125
    ],
    [
      "def maximum_product(a):\n    a.sort()\n    result = a[0] * a[1]\n    for i in range(1, len(a)):\n        result = max(result, a[i] * a[i - 1])\n    return result\n\nif __name__ == \"__main__\":\n    print(maximum_product([(3, 3), (5, 5), (7, 7)]))",
      -1.6669921875
    ],
    [
      "def max_product(a):\n    max_product = 0\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            max_product = max(max_product, a[i] * a[j])\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([(2, 4), (1, 2), (3, 4)]))",
      -1.833984375
    ],
    [
      "def max_product(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                product = tuples[i][0] * tuples[j][1]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\n\nif __name__ == \"__main__\":\n    tuples = [(10, 20, 30, 40), (10, 20, 30, 40, 50), (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)]\n    print(max_product(tuples))",
      -1.859375
    ],
    [
      "def maximum_product(arr):\n    product = 0\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1):\n            product = max(product, arr[i] * arr[j])\n    return product\n\narr = [(1,2), (3,4), (5,6)]\nprint(maximum_product(arr))",
      -1.91015625
    ],
    [
      "def max_product(lst):\n    max_product = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] > max_product:\n                max_product = lst[i] * lst[j]\n    return max_product\n\nprint(max_product([(1,2), (2,3), (2,3), (3,4)]))\nprint(max_product([(1,2), (2,3), (3,4)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10)]))\nprint(max_product([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10), (10,11)]))\nprint(max_product([(1,2), (2,3), (3,4),",
      -1.91796875
    ],
    [
      "def max_product(lst):\n    max_product = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] * lst[j][1] > max_product:\n                max_product = lst[i][0] * lst[j][1]\n\n    return max_product\n\n\nprint(max_product([(1, 3), (1, 5), (2, 3)]))",
      -1.9716796875
    ],
    [
      "def find_max_product(arr):\n    arr.sort(key=lambda x: x[0] * x[1])\n    return arr[0][0] * arr[1][0]\n\n\nprint(find_max_product([(1, 2), (2, 4), (3, 5), (4, 5)]))\nprint(find_max_product([(1, 2), (2, 4), (3, 5), (4, 5), (6, 7)]))",
      -2.103515625
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    max_product_pair = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if arr[i][0] * arr[j][1] > max_product:\n                max_product = arr[i][0] * arr[j][1]\n                max_product_pair = (arr[i][0], arr[j][1])\n    return max_product, max_product_pair",
      -2.107421875
    ],
    [
      "def max_product(tuples):\n    if len(tuples) < 2:\n        return 0\n    else:\n        return max(\n            max(tuples[0][0] * tuples[1][1], tuples[1][0] * tuples[0][1]),\n            max(tuples[0][1] * tuples[1][1], tuples[1][1] * tuples[0][0]),\n        )\n\n\nif __name__ == \"__main__\":\n    assert max_product([(1, 2), (2, 3), (3, 4)]) == 6\n    assert max_product([(1, 2, 3), (4, 5, 6)]) == 9\n    assert max_product([(1, 2, 3), (4, 5, 6, 7)]) == 15",
      -2.2421875
    ],
    [
      "def maximum_product(tuples):\n    result = 0\n    for i in range(0, len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result = max(result, tuples[i][0]*tuples[j][1])\n    return result\n\nprint(maximum_product([(1, 2), (2, 1), (3, 3)]))\nprint(maximum_product([(3, 1), (1, 2)]))",
      -2.359375
    ],
    [
      "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return max(nums[0] * nums[1] for nums in zip(nums[1:], nums[:-1]))",
      -2.453125
    ],
    [
      "def max_product(lst):\n    if len(lst) < 2:\n        return 0\n\n    max_prod = 0\n\n    for i in range(0, len(lst) - 1):\n        for j in range(0, len(lst) - 1):\n            if i!= j:\n                max_prod = max(max_prod, lst[i][0] * lst[j][1])\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([(2, 3), (6, 4), (2, 4)]))",
      -2.544921875
    ],
    [
      "def maximum_product(arr):\n    max_product = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i][0] * arr[j][1])\n    return max_product\n\n\nprint(maximum_product([(2, 3), (2, 4), (4, 5), (4, 6)]))",
      -2.666015625
    ],
    [
      "def max_product_of_pairs(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\narr = [(2, 1), (1, 2), (3, 5)]\nprint(max_product_of_pairs(arr))",
      -2.728515625
    ],
    [
      "from typing import List\n\n\ndef max_product(lst: List[int]) -> int:\n    product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = max(product, lst[i] * lst[j])\n    return product\n\n\nif __name__ == \"__main__\":\n    assert max_product([2, 3, 4, 5, 6, 7, 8]) == 120\n    assert max_product([-1, 2, 3, 4, 5, 6, 7, 8]) == -1\n    assert max_product([1, -2, 3, 4, 5, 6, 7, 8]) == 0\n    assert max_product([-1, 2, 3, 4, 5, 6, -7, 8]) == -1",
      -2.759765625
    ],
    [
      "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        return nums[0]*nums[-1]*nums[-2]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print Solution().maximumProduct(nums)",
      -2.80859375
    ],
    [
      "def max_product(lst):\n    if len(lst) < 2:\n        return 0\n    if len(lst) == 2:\n        return lst[0] * lst[1]\n    else:\n        return max(max_product(lst[:-2]), max_product(lst[-2:]))\n\n\nif __name__ == \"__main__\":\n    print(max_product([(5, 3), (2, 4), (3, 5)]))",
      -2.86328125
    ],
    [
      "def find_max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_product = max(max_product, arr[i][0] * arr[j][1])\n    return max_product\n\n\nprint(find_max_product([(1, 2), (3, 4), (5, 6), (7, 8)]))",
      -2.890625
    ],
    [
      "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1):\n            if arr[i][0] > arr[j][0]:\n                max_product = max(max_product, arr[i][0]*arr[j][0])\n            if arr[i][1] > arr[j][1]:\n                max_product = max(max_product, arr[i][1]*arr[j][1])\n    return max_product\n\n\nprint(max_product([(1, 2), (2, 1)]))",
      -2.896484375
    ],
    [
      "def max_product(list_of_tuples):\n    max_product = 0\n    for i in range(len(list_of_tuples) - 1):\n        for j in range(i + 1, len(list_of_tuples)):\n            product = list_of_tuples[i][0] * list_of_tuples[j][1]\n            max_product = max(max_product, product)\n    return max_product\n\n\nprint(max_product([(3, 3), (3, 4), (4, 3), (4, 4)]))\nprint(max_product([(1, 1), (2, 2), (3, 3)]))\nprint(max_product([(4, 4), (5, 5), (5, 6)]))\nprint(max_product([(5, 5), (5, 6), (5, 7)]))\nprint(max_product([(5, 5), (5, 6), (5, 7), (5, 8)]))\nprint(max_product([(5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]))",
      -2.923828125
    ],
    [
      "def maximum_product_of_pairs(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i][0] * arr[j][1] > max_prod:\n                max_prod = arr[i][0] * arr[j][1]\n    return max_prod\n\n\nprint(maximum_product_of_pairs([(1, 2), (2, 1), (3, 1)]))",
      -2.93359375
    ],
    [
      "def find_max_product(l):\n    max_product = 0\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i][0] * l[j][1] > max_product:\n                max_product = l[i][0] * l[j][1]\n    return max_product\n\nprint(find_max_product([[1, 2, 3], [4, 5, 6]]))",
      -2.955078125
    ],
    [
      "from typing import List, Tuple, Union\n\n\ndef maximum_product(data: List[Tuple[int, int]]) -> int:\n    if not data:\n        return 0\n\n    max_product = 0\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            product = data[i][0] * data[j][1]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(maximum_product([(1, 2), (3, 4), (5, 6)]))\n    print(maximum_product([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))",
      -3.0546875
    ],
    [
      "def find_product(tuples):\n    product = 0\n    for i in range(0, len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = max(product, tuples[i][0] * tuples[j][1])\n    return product\n\n\nif __name__ == \"__main__\":\n    print(find_product([(2, 4), (3, 5), (1, 2)]))",
      -3.208984375
    ],
    [
      "def max_product(a):\n    max_prod = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            max_prod = max(max_prod, a[i][0] * a[j][1])\n    return max_prod\n\nprint(max_product([(2,3), (4,5), (6,7)]))",
      -3.21484375
    ],
    [
      "def max_product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_prod = max(max_prod, arr[i][0] * arr[j][1])\n    return max_prod\n\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))\nprint(max_product([[3, 2, -1], [5, 8, -5], [5, -1, -5]]))",
      -3.296875
    ],
    [
      "def max_product(l):\n    max_product = float('-inf')\n    for i in range(len(l) - 1):\n        for j in range(len(l) - 1):\n            product = l[i][0] * l[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([(1, 2), (3, 4), (5, 6)]))\n    print(max_product([(1, 2), (3, 4), (5, 6), (7, 8)]))",
      -3.5
    ],
    [
      "class Solution:\n    # @param A : tuple\n    # @return an integer\n    def maximumProduct(self, A):\n        result = 0\n        A.sort()\n        for i in range(len(A) - 1):\n            for j in range(i + 1, len(A)):\n                result = max(result, A[i][0] * A[j][1])\n        return result",
      -3.55078125
    ],
    [
      "def max_product_of_pairs(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    i = 0\n    j = 0\n    result = 0\n    while i < n-1:\n        result = max(result, arr[i][0] * arr[j][1])\n        if arr[i][1] < arr[j][1]:\n            j += 1\n        else:\n            i += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(max_product_of_pairs([(3, 4), (6, 8), (9, 1)]))",
      -3.591796875
    ],
    [
      "def max_product(a):\n    # Fill this in.\n    if not a:\n        return 0\n    if len(a) == 1:\n        return a[0] * a[0]\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            max_product = max(max_product, a[i][0] * a[j][0])\n    return max_product\n\n\nprint(max_product([[1, 2], [3, 4], [5, 6], [7, 8]]))",
      -3.767578125
    ],
    [
      "def maximum_product(l):\n    l.sort()\n    max_product = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            product = l[i][0] * l[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nprint(maximum_product([(1,2),(2,3),(3,4)]))",
      -4.05078125
    ],
    [
      "def max_product(a):\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            product = a[i][0]*a[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nprint(max_product([(2,3), (2,4), (2,5), (2,6)]))",
      -4.1015625
    ],
    [
      "def max_product(arr):\n    if not arr:\n        return 0\n    res = max([arr[0] * arr[1], arr[1] * arr[0]])\n    for i in range(1, len(arr)):\n        res = max([res, arr[i] * arr[i]])\n    return res\n\nif __name__ == '__main__':\n    arr = [(1, 2, 3), (3, 5, 6), (7, 8, 9)]\n    print(max_product(arr))",
      -4.1484375
    ],
    [
      "def max_product_pair(l):\n    l = sorted(l)\n    return l[0]*l[1]\n\n\nif __name__ == \"__main__\":\n    l = [(2,5), (3,4), (6,7)]\n    print(max_product_pair(l))",
      -4.3671875
    ],
    [
      "def max_product(arr):\n    arr.sort(key=lambda x: x[1])\n    return max(arr[0][0] * arr[1][0] * arr[2][0], arr[0][1] * arr[1][1] * arr[2][1])\n\n\nprint(max_product([(1,2), (2,3), (3,4)]))\nprint(max_product([(1,2), (2,3), (3,4), (5,6), (6,7), (7,8), (8,9)]))\nprint(max_product([(1,2), (2,3), (3,4), (5,6), (6,7), (7,8), (8,9), (9,10)]))",
      -4.44921875
    ],
    [
      "def max_product(arr):\n    # write your code here\n    return max(arr[0] * arr[1], arr[1] * arr[0])\n\n\nif __name__ == \"__main__\":\n    arr = [(1, 2, 3), (4, 5, 6)]\n    print(max_product(arr))",
      -4.6015625
    ],
    [
      "def max_product(arr):\n    arr.sort()\n    return arr[0] * arr[1]\n\n\nprint(max_product([-1, 2, -3, 4]))\nprint(max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(max_product([-3, -4, -5, -6, -7, -8, -9, -10]))\nprint(max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))",
      -4.62109375
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i][0] * arr[j][1])\n    return max_product\n\n\nprint(max_product([[2, 2], [2, 4], [1, 2]]))",
      -4.8046875
    ],
    [
      "def max_product_pairwise(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n\narr = [(3, 4), (2, 5), (4, 7), (6, 1)]\nprint(max_product_pairwise(arr))",
      -4.91796875
    ],
    [
      "def max_product(A):\n    # Write your code here\n    max_product = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            product = A[i][0] * A[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nprint(max_product([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))\nprint(max_product([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))",
      -5.25
    ],
    [
      "def max_product(lst):\n    max_product = lst[0][0] * lst[1][0]\n\n    for i in range(1, len(lst)):\n        max_product = max(max_product, lst[i][0] * lst[i][1])\n\n    return max_product\n\nlst = [(1,2),(2,3),(3,4),(4,5)]\nprint(max_product(lst))",
      -5.3828125
    ],
    [
      "def max_product(lst):\n    lst.sort()\n    product = lst[0][0] * lst[1][0]\n    for i in range(1, len(lst)):\n        product = max(product, lst[i][0] * lst[i][1])\n    return product\n\nprint(max_product([(1, 2), (2, 1), (3, 4)]))\nprint(max_product([(1, 2), (2, 1), (3, 4)]))\nprint(max_product([(1, 2), (2, 1), (3, 4)]))\nprint(max_product([(1, 2), (2, 1), (3, 4)]))",
      -5.40625
    ],
    [
      "def max_product(arr):\n    product = 0\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1):\n            product = max(product, arr[i][0] * arr[j][1])\n    return product\n\n\nprint(max_product([[3, 4], [5, 6], [7, 8]]))",
      -5.64453125
    ],
    [
      "def maximum_product(tuples):\n    if len(tuples) == 0:\n        return 0\n    max_product = 0\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            product = 1\n            for k in range(len(tuples[i])):\n                product *= tuples[i][k] * tuples[j][k]\n            max_product = max(product, max_product)\n    return max_product\n\n\n\n\nprint(maximum_product([(2, 2), (4, 4)]))",
      -6.0234375
    ],
    [
      "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        if n < 2:\n            return 0\n        res = nums[0] * nums[1]\n        for i in range(1, n):\n            res = max(res, nums[i] * nums[i-1])\n        return res\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().maximumProduct(nums))",
      -6.046875
    ],
    [
      "from typing import List\n\n\ndef maximum_product(pairs: List[Tuple[int, int]]) -> int:\n    pairs.sort(key=lambda pair: pair[1] * pair[0])\n    return max(pair[1] * pair[0] for pair in pairs)\n\n\nif __name__ == \"__main__\":\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8)]) == 30\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 30\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 60\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 60\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 120\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 120\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 120\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 120\n    assert maximum_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 120",
      -6.24609375
    ],
    [
      "from typing import List\n\n\ndef max_product(arr: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i][0] * arr[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == \"__main__\":\n    assert max_product([(2, 3), (4, 5), (3, 5), (1, 4)]) == 24\n    assert max_product([(1, 1), (2, 2), (3, 3)]) == 6\n    assert max_product([(1, 1), (2, 2), (3, 3), (4, 4)]) == 12\n    assert max_product([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 12",
      -7.765625
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            max_product = max(max_product, arr[i][0] * arr[j][1])\n    return max_product\n\n\ndef main():\n    test_cases = [\n        ([(1, 2), (3, 4)], 2),\n        ([(1, 2), (2, 3)], 2),\n        ([(1, 2, 3), (4, 5, 6)], 6),\n        ([(1, 2, 3, 4, 5)], 7),\n    ]\n    for test_case in test_cases:\n        assert max_product(test_case[0]) == test_case[1]\n\n\nif __name__ == \"__main__\":\n    main()",
      -7.8046875
    ],
    [
      "def max_product(arr):\n    if not arr:\n        return 0\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_prod = max(max_prod, arr[i][0] * arr[j][1])\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    arr = [(1, 2, 3), (1, 2, 4), (1, 2, 5), (3, 4, 5), (3, 2, 1), (3, 2, 2)]\n    print(max_product(arr))",
      -8.078125
    ],
    [
      "def max_product(list_of_tuples):\n    max_prod = 0\n    for index in range(len(list_of_tuples) - 1):\n        if list_of_tuples[index][1] > list_of_tuples[index + 1][1]:\n            max_prod = max(list_of_tuples[index][1] * list_of_tuples[index + 1][0], max_prod)\n    return max_prod\n\n\nprint(max_product([(1, 2), (2, 1), (3, 4), (4, 2), (4, 3), (5, 4)]))",
      -9.125
    ],
    [
      "def find_max_product(lst):\n  prod = 0\n  for i in range(len(lst)-1):\n    for j in range(i+1, len(lst)):\n      if lst[i][0]*lst[j][0] > lst[i][1]*lst[j][1]:\n        prod = max(prod, lst[i][0]*lst[j][0] * lst[i][1]*lst[j][1])\n  return prod\n\nif __name__ == \"__main__\":\n  print(find_max_product([(1,2), (2,4), (5,6)]))\n  print(find_max_product([(1,2), (4,5), (5,6)]))\n  print(find_max_product([(2,2), (2,4), (4,5), (4,6)]))\n  print(find_max_product([(1,2), (2,4), (4,5), (4,6)]))",
      -9.2734375
    ],
    [
      "def max_product_pairs(l):\n    if not l:\n        return 0\n\n    return max(l[0] * l[1],\n               max(l[1] * l[0],\n                   l[0] * max(l[1], l[0])))\n\n\ndef main():\n    l = [(1, 2), (3, 4), (5, 6)]\n    print(max_product_pairs(l))\n\n\nif __name__ == '__main__':\n    main()",
      -9.359375
    ],
    [
      "def maximum_product(arr):\n    max_prod = 0\n    max_prod_arr = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            max_prod = max(max_prod, arr[i] * arr[j])\n            max_prod_arr.append(arr[i] * arr[j])\n\n    return max(max_prod_arr)\n\n\narr = [(1, 2), (2, 4), (3, 5), (4, 6)]\nprint(maximum_product(arr))",
      -9.7421875
    ],
    [
      "def max_product(pairs):\n    if len(pairs) < 2:\n        return 0\n\n    max_product = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            max_product = max(max_product, pairs[i][0] * pairs[j][1])\n\n    return max_product\n\n\ndef test_max_product():\n    assert max_product([(2, 2), (2, 3)]) == 6\n    assert max_product([(2, 2), (2, 3), (2, 4)]) == 6\n    assert max_product([(2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)]) == 24\n    assert max_product([(2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)]) == 36\n    assert max_product([(2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)]) == 36",
      -10.09375
    ],
    [
      "def max_product(list_of_tuples):\n    max_product = 0\n    for i in range(0, len(list_of_tuples)-1):\n        for j in range(0, len(list_of_tuples)-1):\n            if i == j:\n                continue\n            product = list_of_tuples[i][0] * list_of_tuples[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nlist_of_tuples = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(max_product(list_of_tuples))",
      -10.140625
    ],
    [
      "def maximum_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0] * arr[0]\n    max_prod = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i][j] > max_prod:\n                max_prod = arr[i][j]\n    return max_prod\n\n\nprint(maximum_product([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\nprint(maximum_product([(2, 3), (4, 5, 6), (7, 8, 9)]))",
      -10.71875
    ],
    [
      "def maximum_product(a):\n    if len(a) == 1:\n        return a[0]\n    max_product = 0\n    max_product_pair = 0\n    for i in range(len(a) - 1):\n        for j in range(len(a) - 1):\n            if i == j:\n                continue\n            if a[i][0] * a[j][1] > max_product:\n                max_product_pair = (a[i], a[j])\n                max_product = a[i] * a[j]\n    return max_product_pair[0] * max_product_pair[1]\n\n\nprint(maximum_product([1, 2, 3, 4, 5]))",
      -12.6796875
    ],
    [
      "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] * nums[j] > nums[i] * nums[j + 1]:\n                    return nums[i] * nums[j]\n        return nums[-1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([1, 2, 3, 4, 5]) == 15\n    assert Solution().maxProduct([1, 2, 3, 4]) == 15\n    assert Solution().maxProduct([1, 2, 3, 4, 5]) == 15",
      -14.859375
    ],
    [
      "def max_product(list_of_tuples):\n  max_product = 0\n  for i in range(len(list_of_tuples)):\n    for j in range(len(list_of_tuples)):\n      if list_of_tuples[i][0] == list_of_tuples[j][0] and list_of_tuples[i][1] == list_of_tuples[j][1]:\n        max_product = max(max_product, list_of_tuples[i][0] * list_of_tuples[j][1])\n  return max_product\n\n\nprint(max_product([[1,2,3,4], [5,6,7,8]]))",
      -15.2265625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}