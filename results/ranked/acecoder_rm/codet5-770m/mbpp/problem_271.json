{
  "problem": {
    "task_id": "MBPP/282",
    "prompt": "Write a function to substaract two lists using map and lambda function.",
    "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
    "test_list": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ],
    "challenge_test_list": [],
    "problem_id": 271
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(substaract(list1, list2))",
      10.6875
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))",
      9.2734375
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [2, 3, 4]))",
      8.8046875
    ],
    [
      "def substaract_lists(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list_lambda(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list_lambda([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list_map(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list_map([1, 2, 3, 4], [5, 6, 7, 8]))",
      5.484375
    ],
    [
      "def substaract(list1, list2):\n    return [x for x in map(lambda x,y: x-y, list1, list2)]\n\nif __name__ == \"__main__\":\n    print(substaract([1,2,3,4],[5,6,7,8]))",
      5.265625
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\ndef substaract_list2(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list2([1, 2, 3, 4], [5, 6, 7, 8]))",
      4.9609375
    ],
    [
      "def substaract_list(l1, l2):\n    return list(map(lambda x: x - l2[x], l1))\n\n\ndef substaract_list_lambda(l1, l2):\n    return list(map(lambda x: x - l2[x], l1))",
      3.931640625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      2.6484375
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x-list2[0], list1))",
      2.455078125
    ],
    [
      "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# substaract\ndef substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(substaract(list1, list2))",
      2.302734375
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\ndef substaract2(a, b):\n    return list(map(lambda x: x-y, a, b))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(substaract([1, 2, 3, 4, 5], [2, 3, 4, 5]))\n\n    print(substaract2([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(substaract2([1, 2, 3, 4, 5], [2, 3, 4, 5]))",
      1.80859375
    ],
    [
      "def substaract(a,b):\n    return [x for x in map(lambda x: x-y, a, b)]\n\nprint(substaract([1,2,3],[4,5,6]))",
      1.650390625
    ],
    [
      "def substaract_lists(list1, list2):\n    return [x for x in list1 if x not in list2]\n\nprint(substaract_lists([1,2,3], [4,5,6]))",
      1.5693359375
    ],
    [
      "def sub_list(l1, l2):\n    return list(map(lambda x: x-y, l1, l2))",
      1.4404296875
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_lists([1, 2, 3], [4, 5, 6]))",
      1.3818359375
    ],
    [
      "def substaract(list_1, list_2):\n    return list(map(lambda x: x-y, list_1, list_2))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))\n    print(substaract([1, 2, 3], [4, 5, 6, 7]))",
      1.3408203125
    ],
    [
      "def sub_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\nprint(sub_list([1, 2, 3, 4, 5], [10, 20, 30, 40, 50]))",
      1.26953125
    ],
    [
      "def substaract_lists(a, b):\n    return list(map(lambda x: x-a[x], b))\n\nprint(substaract_lists([0, 1, 2, 3], [2, 3, 4, 5]))",
      1.083984375
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-b, a))\n\n\ndef substaract2(a, b):\n    return list(map(lambda x: x-b, a))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    b = [2, 4, 6, 8, 10, 12, 14, 16]\n    print(substaract(a, b))\n    print(substaract2(a, b))",
      0.88623046875
    ],
    [
      "def sub_list(l1,l2):\n    return list(map(lambda x: x-l2[l1.index(x)],l1))",
      0.81005859375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))",
      0.73193359375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))",
      0.394287109375
    ],
    [
      "def substaract_list(l1, l2):\n    return list(map(lambda x: x-y, l1, l2))\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))",
      0.3212890625
    ],
    [
      "list1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\n\n\ndef sublist(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(sublist(list1, list2))",
      0.31884765625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6, 7]))",
      0.2374267578125
    ],
    [
      "def substaract(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\n\nprint(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      0.1890869140625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4, 5], [4, 2, 1, 3, 5]))",
      0.1307373046875
    ],
    [
      "def substaract(lst1, lst2):\n    return list(map(lambda x, y: x - y, lst1, lst2))",
      0.09881591796875
    ],
    [
      "def substaract(lst1, lst2):\n    return list(map(lambda x: x - lst2[x], range(len(lst1))))",
      0.09637451171875
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nif __name__ == \"__main__\":\n    l1 = [1,2,3,4,5]\n    l2 = [1,2,3,4,5]\n    print(substaract(l1, l2))",
      0.08642578125
    ],
    [
      "def substaract_lists(a, b):\n    return [x for x in a if x not in b] + [x for x in b if x not in a]\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))",
      -0.01169586181640625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3, 4], [2, 3, 4]))",
      -0.1009521484375
    ],
    [
      "def substaract_list(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))",
      -0.218017578125
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))\nprint(substaract([1,2,3], [4,5,6,7]))",
      -0.4853515625
    ],
    [
      "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - x[1], zip(list_1, list_2)))\n\nprint(substaract_list([2, 3], [2, 3]))",
      -0.6533203125
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4], [5, 6, 7, 8]))",
      -0.712890625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))",
      -0.75048828125
    ],
    [
      "def substaract(a,b):\n    return list(map(lambda x: x-y, a,b))",
      -0.85595703125
    ],
    [
      "def substaract(l1, l2):\n    return list(map(lambda x: x-l1[0], l2))\n\n\nprint(substaract([1,2,3,4,5], [5,6,7,8,9]))\n\n\ndef substaract(l1, l2):\n    return list(map(lambda x: x-l1[0], l2))\n\n\nprint(substaract([1,2,3,4,5], [5,6,7,8,9]))",
      -0.85595703125
    ],
    [
      "def substaract_list(lst1, lst2):\n    return list(map(lambda x: x-x[-1], zip(lst1, lst2)))\n\nif __name__ == \"__main__\":\n    lst1 = [1,2,3,4]\n    lst2 = [5,6,7,8]\n    print(substaract_list(lst1, lst2))",
      -0.85595703125
    ],
    [
      "def substaract_lists(l1, l2):\n    return list(map(lambda x: x - l2[0], l1))",
      -0.85595703125
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))",
      -0.85693359375
    ],
    [
      "def substaract(lst1, lst2):\n    return list(map(lambda x: x if x in lst1 else x + lst2[0], lst1))",
      -0.85693359375
    ],
    [
      "def substaract(l1, l2):\n    return list(map(lambda x: x - y, l1, l2))",
      -0.857421875
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\nprint(substaract([1, 2, 3, 4], [2, 3, 4, 5]))",
      -0.85791015625
    ],
    [
      "def substaract(list_1, list_2):\n    return list(map(lambda x: x + list_2[x - 1], list_1))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def substaract(a,b):\n    return list(map(lambda x: x-y,a,b))\n\n\nif __name__ == '__main__':\n    a = [1,2,3,4,5]\n    b = [3,2,1,0,4]\n    print(substaract(a,b))",
      -0.85791015625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x,y:x-y,list1,list2))\n\nprint(substaract([1,2,3],[2,3,4]))",
      -0.85791015625
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\nprint(substaract([1,2,3], [4,5,6]))",
      -0.85791015625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\ndef substaract2(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6], lambda x: x[0] - x[1]))\nprint(substaract([1, 2, 3], [4, 5, 6], lambda x: x[0] - x[1], lambda y: y[0] - y[1]))",
      -0.85791015625
    ],
    [
      "def substaract(a, b):\n    return [x for x in map(lambda x: x + b[x], range(len(a))) if x in a]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    print(substaract(a, b))",
      -0.85791015625
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list1.pop(list2.index(x)), list1))",
      -0.85791015625
    ],
    [
      "def substaract_list(l1, l2):\n    return list(map(lambda x, y: x - y, l1, l2))\n\n\nprint(substaract_list([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))\nprint(substaract_list([1, 2, 3, 4, 5], [7, 8, 9, 10, 11]))",
      -0.8583984375
    ],
    [
      "def substaract_list(l1, l2):\n    return list(map(lambda x: x-1, l1, l2))\n\nprint(substaract_list([1,2,3], [4,5,6]))",
      -0.8583984375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-list1[x], list2))\n\nprint(substaract([1,2,3,4,5],[1,2,3,4,5]))\nprint(substaract([1,2,3,4,5],[2,3,4,5,6]))\nprint(substaract([1,2,3,4,5],[3,4,5,6,7]))",
      -0.8583984375
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))",
      -0.85888671875
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [4, 5, 6]))",
      -0.85888671875
    ],
    [
      "def substaract(l1, l2):\n    return list(map(lambda x: x-1, l1, l2))\n\n\nprint(substaract([1,2,3], [4,5,6]))",
      -0.85888671875
    ],
    [
      "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub_list([1, 2, 3], [4, 5, 6]))",
      -0.85888671875
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\ndef substaract_list2(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))",
      -0.85888671875
    ],
    [
      "def sub_list(list1,list2):\n    return list(map(lambda x: x - list2[0],list1))\n\n\nif __name__ == \"__main__\":\n    print(sub_list([1,2,3,4,5],[5,5,5,5,5]))",
      -0.85888671875
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\n\nif __name__ == '__main__':\n    a = [1,2,3,4]\n    b = [2,4,6,8]\n\n    print(substaract(a, b))",
      -0.86083984375
    ],
    [
      "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - x[0], zip(list_1, list_2)))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [4, 5, 6]))",
      -0.86083984375
    ],
    [
      "def substaract_list(first, second):\n    return list(map(lambda x: x-y, first, second))\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))\n\nprint(substaract_list([1, 2, 3], [5, 6, 7]))",
      -0.86083984375
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x if x in list2 else '', list1))",
      -0.92236328125
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x - y, a, b))",
      -1.330078125
    ],
    [
      "def substaract(l1, l2):\n    return list(map(lambda x: x - l2[0], l1))",
      -1.7333984375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[0], list1))",
      -1.7333984375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nif __name__ == \"__main__\":\n    list1 = [1,2,3,4,5]\n    list2 = [2,3,4,5,6]\n    print(substaract(list1, list2))",
      -1.9453125
    ],
    [
      "def substaract_list(a, b):\n    return [x for x in a if x not in b]\n\nprint(substaract_list([1,2,3], [4,5,6]))",
      -2.029296875
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))",
      -2.4765625
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x if x in b else None, a))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -2.529296875
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract_lists([1, 2, 3, 4], [2, 3, 4, 5]))",
      -2.59375
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list1))))\n\n\nprint(substaract_list([1, 2, 3, 4], [4, 5, 6, 7]))",
      -2.6328125
    ],
    [
      "# My Solution\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x + list2[list1.index(x)], list1))\n\n\n# Test\nprint(substaract([1, 2, 3, 4], [4, 5, 6, 7]))",
      -3.09765625
    ],
    [
      "def substaract_list(l1, l2):\n    return [i for i in map(lambda x, y: x-y, l1, l2)]\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))",
      -3.24609375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list2.remove(x), list1))\n\n\nprint(substaract([1, 2, 3], [3, 2, 1]))",
      -3.337890625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))",
      -3.474609375
    ],
    [
      "def substaract(a, b):\n    return [item for item in a if item not in b]\n\nprint(substaract([1,2,3], [4,5,6]))\nprint(substaract([1,2,3], [4,5,6], lambda x: x-1))\nprint(substaract([1,2,3], [4,5,6], lambda x: x+1))\nprint(substaract([1,2,3], [4,5,6], lambda x: x-1 if x>=1 else x+1))",
      -3.7734375
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x: x-x[0], list1, list2))\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))",
      -3.998046875
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(substaract([1,2,3], [4,5,6]))",
      -4.0078125
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x-list1[x], list2))\n\nprint(substaract([1, 2, 3], [4, 5, 6]))",
      -4.09765625
    ],
    [
      "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - list_2[x], range(len(list_1))))\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3], [4, 5, 6]))",
      -4.125
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list1))))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))",
      -4.73828125
    ],
    [
      "def substaract_list(list1, list2):\n    return list(map(lambda x: x-1, list1, list2))\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))",
      -4.8828125
    ],
    [
      "# Example:\n# substaract_list([1, 2, 3, 4], [5, 6, 7, 8])\n# returns [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))",
      -6.11328125
    ],
    [
      "def substaract(a, b):\n    return [x for x in map(lambda x: x-y, a, b)]\n\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))",
      -6.31640625
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list2.pop(list2.index(x)), list1))\n\n\nif __name__ == '__main__':\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 5]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [2, 3, 4]\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]",
      -6.609375
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\ndef test():\n    assert substaract([1, 2, 3], [2, 3]) == [1, 3]\n    assert substaract([1, 2, 3], [3, 2, 1]) == [2, 3]\n    assert substaract([1, 2, 3], [4, 3, 2]) == [1, 3]\n    assert substaract([1, 2, 3], [5, 3, 2]) == [1, 3, 5]\n\n\nif __name__ == '__main__':\n    test()",
      -7.046875
    ],
    [
      "def substaract_lists(list1, list2):\n    return list(map(lambda x: x-list1[0], list2))\n\n\ndef substaract_lists_lambda(list1, list2):\n    return list(map(lambda x: x-list1[0], list2))\n\n\ndef main():\n    print(substaract_lists([1,2,3], [4,5,6]))\n    print(substaract_lists([1,2,3], [4,5,6], lambda x: x-x))\n    print(substaract_lists_lambda([1,2,3], [4,5,6], lambda x: x-x))\n\n\nif __name__ == \"__main__\":\n    main()",
      -7.09375
    ],
    [
      "def substaract(a, b):\n    return list(map(lambda x: x - b[0], a))\n\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))",
      -7.24609375
    ],
    [
      "def substaract(l1, l2):\n    return list(map(lambda x: x-l1[x], l2))\n\ndef substaract_lambda(l1, l2):\n    return list(map(lambda x: x-l1[x], l2))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))",
      -7.3671875
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[0], list1))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))",
      -7.62890625
    ],
    [
      "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nlist2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], list1))",
      -7.84375
    ],
    [
      "def sub_list(list1, list2):\n    return list(map(lambda x: x-list1[0], list1)) + list(map(lambda x: x-list2[0], list2))\n\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [2, 4, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1",
      -8.1640625
    ],
    [
      "def substaract_list(l1, l2):\n    return list(map(lambda x: x - 1, l1, l2))\n\n\ndef substaract_list_lambda(l1, l2):\n    return list(map(lambda x: x - 1, l1, l2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list([1, 2, 3, 4], [7, 8, 9, 10]))\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list_lambda([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(substaract_list_lambda([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list_lambda([1, 2, 3, 4], [7, 8, 9, 10]))",
      -8.234375
    ],
    [
      "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x-1, list1, list2))\n\n\nprint(substaract(list1, list2))",
      -8.3125
    ],
    [
      "def substaract_list(a, b):\n    return map(lambda x: x - b[x], a)\n\n\ndef substaract_list_lambda(a, b):\n    return list(filter(lambda x: x - b[x]!= 0, a))\n\n\nprint(substaract_list([1, 2, 3, 4], [4, 5, 6]))\nprint(substaract_list_lambda([1, 2, 3, 4], [4, 5, 6]))",
      -10.8984375
    ],
    [
      "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list2))))\n\ndef test():\n    assert substaract([1,2,3], [4,5,6]) == [2,3]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,",
      -12.34375
    ],
    [
      "def substaract_lists(first_list, second_list):\n    return list(map(lambda x: x - x.count(1), first_list) + list(map(lambda x: x.count(1), second_list)))\n\n\nif __name__ == \"__main__\":\n    print(substaract_lists([1, 2, 3], [3, 4, 5]))",
      -13.5703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}