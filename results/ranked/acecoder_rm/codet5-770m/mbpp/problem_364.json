{
  "problem": {
    "task_id": "MBPP/375",
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
    "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
    "test_list": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ],
    "challenge_test_list": [],
    "problem_id": 364
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def nearest_multiple(num, multiple):\n    return round(num/multiple) * multiple\n\nprint(nearest_multiple(4, 2))\nprint(nearest_multiple(5, 5))\nprint(nearest_multiple(6, 5))\nprint(nearest_multiple(7, 4))\nprint(nearest_multiple(8, 4))\nprint(nearest_multiple(9, 4))\nprint(nearest_multiple(10, 4))\nprint(nearest_multiple(11, 4))\nprint(nearest_multiple(12, 4))\nprint(nearest_multiple(13, 4))\nprint(nearest_multiple(14, 4))\nprint(nearest_multiple(15, 4))\nprint(nearest_multiple(16, 4))\nprint(nearest_multiple(17, 4))\nprint(nearest_multiple(18, 4))\nprint(nearest_multiple(19, 4))\nprint(nearest_multiple(20, 4))",
      11.15625
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\nprint(nearest_multiple(16, 8))\nprint(nearest_multiple(16, 4))\nprint(nearest_multiple(16, 2))\nprint(nearest_multiple(16, 1))",
      9.4609375
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\n\ndef main():\n    print(nearest_multiple(1, 2))\n    print(nearest_multiple(2, 3))\n    print(nearest_multiple(6, 8))\n    print(nearest_multiple(1, 3))\n    print(nearest_multiple(3, 1))\n    print(nearest_multiple(3, 2))\n    print(nearest_multiple(3, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.546875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nassert nearest_multiple(1, 2) == 1\nassert nearest_multiple(2, 1) == 1\nassert nearest_multiple(3, 2) == 3\nassert nearest_multiple(4, 1) == 4\nassert nearest_multiple(5, 1) == 5\nassert nearest_multiple(6, 2) == 6\nassert nearest_multiple(7, 2) == 7\nassert nearest_multiple(8, 2) == 8\nassert nearest_multiple(9, 2) == 9",
      7.078125
    ],
    [
      "def nearest_multiple(num, multiple):\n    # Write your code here\n    return round(num / multiple) * multiple\n\n\nprint(nearest_multiple(1, 5))\nprint(nearest_multiple(2, 5))\nprint(nearest_multiple(1, 7))\nprint(nearest_multiple(2, 7))\nprint(nearest_multiple(1, 12))\nprint(nearest_multiple(2, 12))\nprint(nearest_multiple(1, 5))\nprint(nearest_multiple(2, 5))\nprint(nearest_multiple(1, 7))\nprint(nearest_multiple(2, 7))\nprint(nearest_multiple(1, 12))\nprint(nearest_multiple(2, 12))",
      6.57421875
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number/multiple) * multiple\n\n\nprint(nearest_multiple(3, 2))\nprint(nearest_multiple(5, 4))\nprint(nearest_multiple(2, 3))\nprint(nearest_multiple(2, 5))\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(5, 6))\nprint(nearest_multiple(1, 3))\nprint(nearest_multiple(1, 4))\nprint(nearest_multiple(5, 7))\nprint(nearest_multiple(1, 8))\nprint(nearest_multiple(1, 9))\nprint(nearest_multiple(4, 5))\nprint(nearest_multiple(4, 6))\nprint(nearest_multiple(4, 7))\nprint(nearest_multiple(4, 8))\nprint(nearest_multiple(4, 9))\nprint(nearest_multiple(4, 10))\nprint(nearest_multiple(4, 11))\nprint(nearest_multiple(4, 12))\nprint(nearest_multiple(4, 13))\nprint(nearest_multiple(4, 14))\nprint(nearest_multiple(4, 15))\nprint(nearest_multiple(4, 16))\nprint(nearest_multiple(4, 17))\nprint(nearest_multiple(4, 18))\nprint(nearest_multiple(4, 19))\nprint(nearest_multiple(4, 20))\nprint(nearest_multiple(4, 21))\nprint(nearest_multiple(4, 22))\nprint(nearest_multiple(4, 23))\nprint(nearest_multiple(4, 24))\nprint(nearest_multiple(4, 25))\nprint(nearest_multiple(4, 26))\nprint(nearest_multiple(4, 27))\nprint(nearest_multiple(4, 28))\nprint(nearest_multiple(4, 29))\nprint(nearest_multiple(4, 30))\nprint(nearest_multiple(4, 31))\nprint(nearest_multiple(4, 32))\nprint(nearest_multiple(4, 33))\nprint(nearest_multiple(4, 34))\nprint(nearest_multiple(4, 35))\nprint(nearest_multiple(4, 36))\nprint(nearest_multiple(4, 37))\nprint(",
      4.96484375
    ],
    [
      "def nearest_multiple(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return round(num / multiple) * multiple\n\n\nif __name__ == \"__main__\":\n    assert nearest_multiple(1, 4) == 1\n    assert nearest_multiple(2, 4) == 2\n    assert nearest_multiple(3, 4) == 3\n    assert nearest_multiple(4, 4) == 4\n    assert nearest_multiple(5, 4) == 5\n    assert nearest_multiple(8, 4) == 8",
      4.71484375
    ],
    [
      "def nearest_multiple(n, m):\n    return round(n / m) * m\n\n\nprint(nearest_multiple(3, 4))\nprint(nearest_multiple(9, 4))",
      3.927734375
    ],
    [
      "def round_to_nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nprint(round_to_nearest_multiple(2, 3))\nprint(round_to_nearest_multiple(4, 3))\nprint(round_to_nearest_multiple(6, 3))\nprint(round_to_nearest_multiple(8, 3))\nprint(round_to_nearest_multiple(12, 3))\nprint(round_to_nearest_multiple(16, 3))",
      3.62109375
    ],
    [
      "def nearest_multiple(number, multiple):\n    # write your code here\n    return round(number / multiple) * multiple\n\nprint(nearest_multiple(20, 3))",
      3.208984375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num/multiple) * multiple\n\n\ndef nearest_multiple_2(num, multiple):\n    return round(num/multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(nearest_multiple_2(4, 3))",
      3.130859375
    ],
    [
      "def nearest_multiple(number, multiple):\n    if number % multiple == 0:\n        return number\n    else:\n        return number + multiple\n\nprint(nearest_multiple(2,3))",
      1.8603515625
    ],
    [
      "import math\n\ndef round_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\nprint(round_multiple(20, 3))\nprint(round_multiple(20, 4))\nprint(round_multiple(20, 5))\nprint(round_multiple(20, 6))\nprint(round_multiple(20, 7))\nprint(round_multiple(20, 8))\nprint(round_multiple(20, 9))\nprint(round_multiple(20, 10))\nprint(round_multiple(20, 11))\nprint(round_multiple(20, 12))\nprint(round_multiple(20, 13))\nprint(round_multiple(20, 14))\nprint(round_multiple(20, 15))\nprint(round_multiple(20, 16))\nprint(round_multiple(20, 17))\nprint(round_multiple(20, 18))\nprint(round_multiple(20, 19))\nprint(round_multiple(20, 20))\nprint(round_multiple(20, 21))\nprint(round_multiple(20, 22))\nprint(round_multiple(20, 23))\nprint(round_multiple(20, 24))\nprint(round_multiple(20, 25))\nprint(round_multiple(20, 26))\nprint(round_multiple(20, 27))\nprint(round_multiple(20, 28))\nprint(round_multiple(20, 29))\nprint(round_multiple(20, 30))\nprint(round_multiple(20, 31))\nprint(round_multiple(20, 32))\nprint(round_multiple(20, 33))\nprint(round_multiple(20, 34))\nprint(round_multiple(20, 35))\nprint(round_multiple(20, 36))\nprint(round_multiple(20, 37))\nprint(round_multiple(20, 38))\nprint(round_multiple(20, 39))\nprint(round_multiple(20, 40))\nprint(round_multiple(20, 41))\nprint(round_multiple(20, 42))\nprint(round_multiple(20, 43))\nprint(round_multiple(20, 44))\nprint(round_multiple(20, 45))\nprint(round_multiple(20, 46))",
      1.736328125
    ],
    [
      "class Solution:\n    def nearestMultiple(self, num: int, multiple: int) -> int:\n        return int(round((num / multiple) * multiple))",
      1.6884765625
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\nprint(nearest_multiple(12, 3))",
      1.6875
    ],
    [
      "def nearest_multiple(num, multiple):\n    # Fill this in.\n    return num % multiple\n\nprint(nearest_multiple(10, 2))\nprint(nearest_multiple(10, 4))\nprint(nearest_multiple(10, 6))",
      1.6865234375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple",
      0.97900390625
    ],
    [
      "def nearest_multiple(number, multiple):\n    return number % multiple\n\nprint(nearest_multiple(5,3))\nprint(nearest_multiple(5,6))\nprint(nearest_multiple(5,7))\nprint(nearest_multiple(5,8))\nprint(nearest_multiple(5,9))\nprint(nearest_multiple(5,10))",
      0.97119140625
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num % multiple!= 0:\n        return num % multiple + 1\n    else:\n        return num\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(10, 2))",
      0.91015625
    ],
    [
      "def nearest_multiple(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return num % multiple\n\nprint(nearest_multiple(12, 3))\nprint(nearest_multiple(12, 6))",
      0.82861328125
    ],
    [
      "def nearest_multiple(x,y):\n    # Write your code here\n    return round(x/y)\n\nprint(nearest_multiple(2,3))\nprint(nearest_multiple(2,4))\nprint(nearest_multiple(2,5))",
      0.76806640625
    ],
    [
      "def nearest_multiple(num, multiple):\n    if multiple == 1:\n        return num\n    if num % multiple == 0:\n        return num\n    if num % multiple < multiple:\n        return num - (num % multiple)\n    return num + (multiple - num % multiple)\n\n\nassert nearest_multiple(6, 3) == 6\nassert nearest_multiple(6, 2) == 6\nassert nearest_multiple(6, 1) == 6\nassert nearest_multiple(7, 3) == 7\nassert nearest_multiple(7, 2) == 7\nassert nearest_multiple(7, 1) == 7",
      0.67138671875
    ],
    [
      "import math\n\ndef nearest_multiple(num, multiple):\n    # Your code here\n    return round(num / multiple) * multiple\n\nprint(nearest_multiple(3, 5))",
      0.6572265625
    ],
    [
      "def nearest_multiple(n, m):\n    if n % m == 0:\n        return n / m\n    elif n % m == 1:\n        return n * m + 1\n    else:\n        return n * m\n\n\nprint(nearest_multiple(10, 6))",
      0.469970703125
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    return int(round(number / multiple)) * multiple\n\n\nif __name__ == '__main__':\n    assert round_to_nearest_multiple(1, 3) == 1\n    assert round_to_nearest_multiple(2, 4) == 1\n    assert round_to_nearest_multiple(2, 8) == 2\n    assert round_to_nearest_multiple(3, 8) == 3",
      0.402587890625
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple",
      0.2423095703125
    ],
    [
      "def nearest_multiple(number, multiple):\n    if number % multiple == 0:\n        return number\n    else:\n        return (number + multiple) // multiple\n\nprint(nearest_multiple(5,2))",
      0.1649169921875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nprint(nearest_multiple(5, 3))",
      0.09881591796875
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\nprint(nearest_multiple(2, 3))",
      0.09881591796875
    ],
    [
      "def nearest_multiple(number, multiple):\n    # Write your code here\n    if number % multiple == 0:\n        return number\n    else:\n        return number + multiple\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(6, 5))\n    print(nearest_multiple(3, 1))\n    print(nearest_multiple(1, 5))",
      0.05133056640625
    ],
    [
      "class Solution:\n    def nearestMultiple(self, num: int, multiple: int) -> int:\n        if num == 0:\n            return 0\n        return round(num / multiple) * multiple",
      -0.03802490234375
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num % multiple == 0:\n        return num\n    else:\n        return num + multiple - 1\n\n\nprint(nearest_multiple(15, 3))",
      -0.4697265625
    ],
    [
      "def nearest_multiple(num, multiple):\n    # your code here\n    return num % multiple\n\nprint(nearest_multiple(10, 3))\nprint(nearest_multiple(3, 10))",
      -0.6162109375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num % multiple\n\nprint(nearest_multiple(5, 4))\nprint(nearest_multiple(5, 3))\nprint(nearest_multiple(5, 2))\nprint(nearest_multiple(5, 1))",
      -0.6533203125
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num % multiple == 0:\n        return num // multiple\n    else:\n        return num // multiple + 1\n\n\nprint(nearest_multiple(15, 3))\nprint(nearest_multiple(15, 2))",
      -0.74853515625
    ],
    [
      "def nearest_multiple(n, m):\n    return int(round(n / m)) * m",
      -0.7509765625
    ],
    [
      "def round_multiple(num, multiple):\n    return num // multiple\n\nprint(round_multiple(5, 2))\nprint(round_multiple(2, 3))\nprint(round_multiple(3, 4))\nprint(round_multiple(4, 6))",
      -0.76025390625
    ],
    [
      "def round_to_nearest_multiple(num: int, multiple: int) -> int:\n    return int(num // multiple) * multiple",
      -0.85595703125
    ],
    [
      "def round_to_multiple(number, multiple):\n    if number % multiple == 0:\n        return number\n    else:\n        return round_to_multiple(number, multiple - 1) + multiple\n\n\nprint(round_to_multiple(5, 4))",
      -0.85693359375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return int(round((num % multiple) / multiple)) * multiple\n\nprint(nearest_multiple(3, 4))",
      -0.85693359375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nprint(nearest_multiple(10, 5))\nprint(nearest_multiple(10, 4))\nprint(nearest_multiple(10, 3))\nprint(nearest_multiple(10, 2))\nprint(nearest_multiple(10, 1))\nprint(nearest_multiple(10, 0))",
      -0.85693359375
    ],
    [
      "def round_to_multiple(num, multiple):\n    return round(num / multiple, 0) * multiple\n\nprint(round_to_multiple(5, 2))",
      -0.857421875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num/multiple) * multiple",
      -0.857421875
    ],
    [
      "def nearest_multiple(n, m):\n    return round(n / m) * m\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(2, 3))",
      -0.857421875
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple",
      -0.85791015625
    ],
    [
      "def nearest_multiple(number, multiple):\n    return int(number * multiple)\n\n\nprint(nearest_multiple(10, 5))",
      -0.85791015625
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number/multiple) * multiple\n\nif __name__ == '__main__':\n    print(nearest_multiple(1,2))",
      -0.85791015625
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\n\nprint(nearest_multiple(2, 2))\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(1, 1))",
      -0.85791015625
    ],
    [
      "def round_to_multiple(number, multiple):\n    if multiple == 1:\n        return number\n    return round(number/multiple) * multiple\n\nprint(round_to_multiple(6,3))",
      -0.85791015625
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num == 0:\n        return 0\n    if num % multiple == 0:\n        return num // multiple\n    else:\n        return (num - 1) // multiple\n\n\nprint(nearest_multiple(3, 2))",
      -0.85791015625
    ],
    [
      "def nearest_multiple(a, b):\n    return round(a/b) * b",
      -0.85791015625
    ],
    [
      "def nearest_multiple(n, m):\n    return round(n / m) * m\n\n\nassert nearest_multiple(2, 3) == 0.5\nassert nearest_multiple(10, 2) == 1\nassert nearest_multiple(1, 2) == 2\nassert nearest_multiple(3, 2) == 2\nassert nearest_multiple(5, 2) == 3\nassert nearest_multiple(8, 2) == 3\nassert nearest_multiple(7, 2) == 3",
      -0.85791015625
    ],
    [
      "def nearest_multiple(num, divisor):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num < divisor:\n        return 0\n    if num % divisor == 0:\n        return num // divisor\n    else:\n        return num // divisor + 1\n\nprint(nearest_multiple(3, 3))\nprint(nearest_multiple(2, 3))\nprint(nearest_multiple(4, 3))\nprint(nearest_multiple(4, 5))",
      -0.85791015625
    ],
    [
      "class Solution:\n    def nearestMultiple(self, num: int, multiple: int) -> int:\n        return round(num / multiple) * multiple",
      -0.85791015625
    ],
    [
      "def nearest_multiple(num, multiple):\n    if multiple < 0:\n        raise ValueError\n    if num == 0:\n        return 0\n    if num % multiple == 0:\n        return num\n    return num + multiple - (num % multiple)\n\n\nprint(nearest_multiple(5, 3))\nprint(nearest_multiple(10, 2))\nprint(nearest_multiple(100, -3))",
      -0.8583984375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return int(round(num / multiple)) * multiple",
      -0.8583984375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple",
      -0.8583984375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num % multiple",
      -0.85888671875
    ],
    [
      "def nearest_multiple(a, b):\n    return round(a/b)\n\nprint(nearest_multiple(2, 5))\nprint(nearest_multiple(2, 6))\nprint(nearest_multiple(2, 7))\nprint(nearest_multiple(2, 8))\nprint(nearest_multiple(2, 9))\nprint(nearest_multiple(2, 10))\nprint(nearest_multiple(2, 11))",
      -0.85888671875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\nprint(nearest_multiple(9, 3))\nprint(nearest_multiple(2, 3))\nprint(nearest_multiple(10, 3))\nprint(nearest_multiple(5, 3))",
      -0.85888671875
    ],
    [
      "def round_to_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\nprint(round_to_multiple(10, 2))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def round(self, num, multiple):\n        \"\"\"\n        :type num: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == multiple:\n            return num\n        return self.round(num/multiple, multiple) * multiple",
      -0.85888671875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return (num - 1) * multiple + 1",
      -0.85888671875
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round(number/multiple)\n\nprint(nearest_multiple(2,3))\nprint(nearest_multiple(5,3))\nprint(nearest_multiple(7,3))\nprint(nearest_multiple(1,3))\nprint(nearest_multiple(3,4))\nprint(nearest_multiple(5,4))\nprint(nearest_multiple(6,4))\nprint(nearest_multiple(5,5))\nprint(nearest_multiple(6,5))\nprint(nearest_multiple(6,6))\nprint(nearest_multiple(6,6))\nprint(nearest_multiple(6,6))",
      -0.85888671875
    ],
    [
      "def nearest_multiple(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return round(num / multiple) * multiple\n\n\nassert nearest_multiple(1, 2) == 0\nassert nearest_multiple(2, 2) == 1\nassert nearest_multiple(5, 2) == 2\nassert nearest_multiple(10, 2) == 4\nassert nearest_multiple(12, 2) == 8\nassert nearest_multiple(18, 2) == 12\nassert nearest_multiple(16, 2) == 16",
      -0.85888671875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(2, 3))\nprint(nearest_multiple(3, 4))\nprint(nearest_multiple(4, 5))",
      -0.88720703125
    ],
    [
      "def nearest_multiple(x,y):\n    x = int(x)\n    y = int(y)\n    if x%y==0:\n        return x/y\n    else:\n        return x/y+1\n\nprint(nearest_multiple(8,2))",
      -0.89306640625
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num / multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(3, 4))",
      -0.92724609375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return int(num / multiple)\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(2, 3))\n    print(nearest_multiple(2, 4))",
      -1.15234375
    ],
    [
      "def round_to_multiple(num, multiple):\n    return round(num/multiple)*multiple\n\nprint(round_to_multiple(1, 2))\nprint(round_to_multiple(1, 5))\nprint(round_to_multiple(1, 10))",
      -1.1796875
    ],
    [
      "def nearest_multiple(num, multiple):\n    # Write your code here\n    if num == 0:\n        return 0\n    return int(round(num/multiple))\n\n\nprint(nearest_multiple(5,3))\nprint(nearest_multiple(9,3))\nprint(nearest_multiple(15,3))\nprint(nearest_multiple(0,1))\nprint(nearest_multiple(5,3))",
      -1.3427734375
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num == 0:\n        return 0\n\n    return round(num / multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(1, 4))\n    print(nearest_multiple(10, 4))\n    print(nearest_multiple(12, 4))",
      -1.369140625
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num // multiple + (num % multiple)\n\n\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(1, 3))\nprint(nearest_multiple(1, 5))",
      -1.4453125
    ],
    [
      "def nearest_multiple(num, multiple):\n    return round(num/multiple) * multiple\n\nprint(nearest_multiple(5, 10))",
      -1.5546875
    ],
    [
      "class Solution(object):\n    def roundToMultiple(self, num, multiple):\n        \"\"\"\n        :type num: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        return round(num / multiple) * multiple",
      -1.5556640625
    ],
    [
      "def nearest_multiple(a, b):\n    if b == 0:\n        return a\n    if b % a == 0:\n        return a\n    return round(a / b) * b\n\nprint(nearest_multiple(10, 2))\nprint(nearest_multiple(10, 3))\nprint(nearest_multiple(10, 4))\nprint(nearest_multiple(10, 5))\nprint(nearest_multiple(10, 6))\nprint(nearest_multiple(10, 7))\nprint(nearest_multiple(10, 8))\nprint(nearest_multiple(10, 9))\nprint(nearest_multiple(10, 10))",
      -1.5830078125
    ],
    [
      "def nearest_multiple(number, multiple):\n    return number // multiple * multiple\n\n\nprint(nearest_multiple(5, 4))",
      -2.353515625
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num + (num % multiple)\n\n\nprint(nearest_multiple(3, 2))",
      -2.45703125
    ],
    [
      "def nearest_multiple(num, multiple):\n    return int(num // multiple) * multiple\n\n\nprint(nearest_multiple(1, 3))\nprint(nearest_multiple(4, 6))\nprint(nearest_multiple(4, 5))\nprint(nearest_multiple(1, 4))",
      -3.021484375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num % multiple\n\n\nprint(nearest_multiple(1, 10))\nprint(nearest_multiple(2, 10))\nprint(nearest_multiple(3, 10))",
      -3.52734375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num % multiple\n\nprint(nearest_multiple(12, 3))\nprint(nearest_multiple(12, 6))\nprint(nearest_multiple(12, 12))\nprint(nearest_multiple(12, 12))\nprint(nearest_multiple(12, 15))\nprint(nearest_multiple(12, 25))\nprint(nearest_multiple(12, 28))\nprint(nearest_multiple(12, 30))\nprint(nearest_multiple(12, 50))",
      -3.55859375
    ],
    [
      "def nearest_multiple(n, m):\n    return int(round(n / m))\n\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(4, 2))\nprint(nearest_multiple(3, 2))\nprint(nearest_multiple(2, 2))\nprint(nearest_multiple(5, 2))\nprint(nearest_multiple(10, 2))",
      -3.794921875
    ],
    [
      "def nearest_multiple(number, multiple):\n    return round((number - 1) / multiple) * multiple\n\nprint(nearest_multiple(1, 2))\nprint(nearest_multiple(1, 3))\nprint(nearest_multiple(2, 3))\nprint(nearest_multiple(3, 4))\nprint(nearest_multiple(3, 5))\nprint(nearest_multiple(4, 5))\nprint(nearest_multiple(5, 6))\nprint(nearest_multiple(6, 7))",
      -4.60546875
    ],
    [
      "import math\n\ndef nearest_multiple(num, multiple):\n    # Your code here\n    return round(num/multiple,0)\n\ndef test_nearest_multiple():\n    assert nearest_multiple(3,2) == 2\n    assert nearest_multiple(3,3) == 3\n    assert nearest_multiple(2,3) == 3\n    assert nearest_multiple(2,4) == 4\n    assert nearest_multiple(4,3) == 4\n    assert nearest_multiple(4,4) == 4\n    assert nearest_multiple(4,5) == 5\n    assert nearest_multiple(5,4) == 4\n    assert nearest_multiple(4,5) == 5\n    assert nearest_multiple(5,6) == 6\n    assert nearest_multiple(6,4) == 4\n    assert nearest_multiple(6,5) == 5\n    assert nearest_multiple(6,6) == 6\n    assert nearest_multiple(6,7) == 7\n    assert nearest_multiple(6,8) == 8\n    assert nearest_multiple(6,9) == 9\n    assert nearest_multiple(6,10) == 10\n    assert nearest_multiple(6,11) == 11\n    assert nearest_multiple(6,12) == 12\n    assert nearest_multiple(6,13) == 13\n    assert nearest_multiple(6,14) == 14\n    assert nearest_multiple(6,15) == 15\n    assert nearest_multiple(6,16) == 16\n    assert nearest_multiple(6,17) == 17\n    assert nearest_multiple(6,18) == 18\n    assert nearest_multiple(6,19) == 19\n    assert nearest_multiple(6,20) == 20\n    assert nearest_multiple(6,21) == 21\n    assert nearest_multiple(6,22) == 22\n    assert nearest_multiple(6,23) == 23\n    assert nearest_multiple(6,24) == 24\n    assert nearest_multiple(6,25) == 25\n    assert nearest_multiple(6,26) == 26\n    assert nearest_multiple(6,27) == 27\n    assert nearest_multiple(6,28) == 28\n    assert nearest_multiple(6,29) == 29",
      -4.66015625
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num % multiple == 0:\n        return num\n    elif num % multiple > 0:\n        return num + multiple\n    else:\n        return num - multiple\n\nprint(nearest_multiple(4, 3))\nprint(nearest_multiple(4, 2))\nprint(nearest_multiple(4, 1))\nprint(nearest_multiple(4, 0))\nprint(nearest_multiple(4, -1))\nprint(nearest_multiple(4, -2))\nprint(nearest_multiple(4, -3))\nprint(nearest_multiple(4, -4))",
      -5.03125
    ],
    [
      "def round_multiple(number, multiple):\n    return number % multiple\n\n\nassert round_multiple(1, 2) == 1\nassert round_multiple(1, 3) == 2\nassert round_multiple(1, 4) == 3\nassert round_multiple(1, 5) == 4\nassert round_multiple(1, 6) == 5\nassert round_multiple(1, 7) == 6\nassert round_multiple(1, 8) == 7\nassert round_multiple(1, 9) == 8\nassert round_multiple(1, 10) == 9\nassert round_multiple(1, 11) == 10\nassert round_multiple(1, 12) == 11\nassert round_multiple(1, 13) == 12\nassert round_multiple(1, 14) == 13\nassert round_multiple(1, 15) == 14\nassert round_multiple(1, 16) == 15\nassert round_multiple(1, 17) == 16\nassert round_multiple(1, 18) == 17\nassert round_multiple(1, 19) == 18\nassert round_multiple(1, 20) == 19\nassert round_multiple(1, 21) == 20\nassert round_multiple(1, 22) == 21\nassert round_multiple(1, 23) == 22\nassert round_multiple(1, 24) == 23\nassert round_multiple(1, 25) == 24\nassert round_multiple(1, 26) == 25\nassert round_multiple(1, 27) == 26\nassert round_multiple(1, 28) == 27\nassert round_multiple(1, 29) == 28\nassert round_multiple(1, 30) == 29\nassert round_multiple(1, 31) == 30\nassert round_multiple(1, 32) == 31\nassert round_multiple(1, 33) == 32\nassert round_multiple(1, 34) == 33\nassert round_multiple(1, 35) == 34\nassert round_multiple(1, 36) == 35\nassert round_multiple(1, 37) == 37\nassert round_multiple(1, 38) == 38\nassert round_multiple(1, 39) == 39\nassert round_multiple(1, 40) == 40\nassert round_multiple(1, 41) == 41\nassert round_multiple(1, 42) ==",
      -5.40234375
    ],
    [
      "def nearest_multiple(num, multiple):\n    num = int(num)\n    if num % multiple!= 0:\n        return num % multiple + 1\n    else:\n        return num\n\n\nprint(nearest_multiple(12, 3))\nprint(nearest_multiple(12, 4))\nprint(nearest_multiple(12, 5))\nprint(nearest_multiple(12, 6))\nprint(nearest_multiple(12, 7))\nprint(nearest_multiple(12, 8))\nprint(nearest_multiple(12, 9))\nprint(nearest_multiple(12, 10))\nprint(nearest_multiple(12, 11))",
      -5.984375
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, num, multiple):\n        \"\"\"\n        :type num: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n\n        num = abs(num)\n        if multiple == 0:\n            return 0\n\n        return (num // multiple) * multiple",
      -6.16015625
    ],
    [
      "def nearest_multiple(num, divisor):\n    return num // divisor\n\nprint(nearest_multiple(20, 3))\nprint(nearest_multiple(20, 5))\nprint(nearest_multiple(20, 7))\nprint(nearest_multiple(20, 9))\nprint(nearest_multiple(20, 11))\nprint(nearest_multiple(20, 13))\nprint(nearest_multiple(20, 17))\nprint(nearest_multiple(20, 19))\nprint(nearest_multiple(20, 23))\nprint(nearest_multiple(20, 29))\nprint(nearest_multiple(20, 31))\nprint(nearest_multiple(20, 37))",
      -6.2109375
    ],
    [
      "def nearest_multiple(x, y):\n    if y == 1:\n        return x\n    x = (x % y)\n    return x\n\nif __name__ == '__main__':\n    print(nearest_multiple(3, 8))",
      -6.390625
    ],
    [
      "def round_to_multiple(num, multiple):\n    return int(num / multiple) * multiple\n\n\nassert round_to_multiple(1, 5) == 1\nassert round_to_multiple(1, 2) == 1\nassert round_to_multiple(1, 3) == 2\nassert round_to_multiple(1, 4) == 3\nassert round_to_multiple(1, 5) == 4\nassert round_to_multiple(1, 6) == 5\nassert round_to_multiple(1, 7) == 6\nassert round_to_multiple(1, 8) == 7\nassert round_to_multiple(1, 9) == 8\nassert round_to_multiple(1, 10) == 9\nassert round_to_multiple(1, 11) == 10\nassert round_to_multiple(1, 12) == 11\nassert round_to_multiple(1, 13) == 12\nassert round_to_multiple(1, 14) == 13\nassert round_to_multiple(1, 15) == 14\nassert round_to_multiple(1, 16) == 15\nassert round_to_multiple(1, 17) == 16\nassert round_to_multiple(1, 18) == 17\nassert round_to_multiple(1, 19) == 18\nassert round_to_multiple(1, 20) == 19\nassert round_to_multiple(1, 21) == 20\nassert round_to_multiple(1, 22) == 21\nassert round_to_multiple(1, 23) == 22\nassert round_to_multiple(1, 24) == 23\nassert round_to_multiple(1, 25) == 24\nassert round_to_multiple(1, 26) == 25\nassert round_to_multiple(1, 27) == 26\nassert round_to_multiple(1, 28) == 27\nassert round_to_multiple(1, 29) == 29\nassert round_to_multiple(1, 30) == 30\nassert round_to_multiple(1, 31) == 31\nassert round_to_multiple(1, 32) == 32\nassert round_to_multiple(1, 33) == 33\nassert round_to_multiple(1, 34) == 34\nassert round_to_multiple(",
      -7.11328125
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num % multiple\n\n\nprint(nearest_multiple(10, 3))\nprint(nearest_multiple(10, 4))\nprint(nearest_multiple(10, 5))\nprint(nearest_multiple(10, 6))\nprint(nearest_multiple(10, 7))\nprint(nearest_multiple(10, 8))\nprint(nearest_multiple(10, 9))\nprint(nearest_multiple(10, 10))\nprint(nearest_multiple(10, 11))\nprint(nearest_multiple(10, 12))\nprint(nearest_multiple(10, 13))\nprint(nearest_multiple(10, 14))\nprint(nearest_multiple(10, 15))\nprint(nearest_multiple(10, 16))\nprint(nearest_multiple(10, 17))\nprint(nearest_multiple(10, 18))\nprint(nearest_multiple(10, 19))\nprint(nearest_multiple(10, 20))\nprint(nearest_multiple(10, 21))\nprint(nearest_multiple(10, 22))\nprint(nearest_multiple(10, 23))\nprint(nearest_multiple(10, 24))\nprint(nearest_multiple(10, 25))\nprint(nearest_multiple(10, 26))\nprint(nearest_multiple(10, 27))\nprint(nearest_multiple(10, 28))\nprint(nearest_multiple(10, 29))\nprint(nearest_multiple(10, 30))\nprint(nearest_multiple(10, 31))",
      -7.1484375
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num // multiple\n\nif __name__ == '__main__':\n    print(nearest_multiple(1, 3))\n    print(nearest_multiple(2, 3))\n    print(nearest_multiple(4, 3))\n    print(nearest_multiple(5, 3))\n    print(nearest_multiple(6, 3))\n    print(nearest_multiple(7, 3))\n    print(nearest_multiple(8, 3))\n    print(nearest_multiple(9, 3))",
      -7.5859375
    ],
    [
      "def nearest_multiple(num, multiple):\n    while num % multiple!= 0:\n        num += multiple\n    return num\n\nprint(nearest_multiple(1, 3))\nprint(nearest_multiple(2, 5))\nprint(nearest_multiple(3, 7))\nprint(nearest_multiple(4, 7))\nprint(nearest_multiple(4, 10))\nprint(nearest_multiple(4, 12))\nprint(nearest_multiple(4, 11))\nprint(nearest_multiple(4, 14))\nprint(nearest_multiple(4, 13))\nprint(nearest_multiple(4, 15))\nprint(nearest_multiple(4, 16))\nprint(nearest_multiple(4, 17))\nprint(nearest_multiple(4, 18))\nprint(nearest_multiple(4, 19))\nprint(nearest_multiple(4, 20))\nprint(nearest_multiple(4, 21))\nprint(nearest_multiple(4, 22))\nprint(nearest_multiple(4, 23))\nprint(nearest_multiple(4, 24))\nprint(nearest_multiple(4, 25))\nprint(nearest_multiple(4, 26))\nprint(nearest_multiple(4, 27))\nprint(nearest_multiple(4, 28))\nprint(nearest_multiple(4, 29))\nprint(nearest_multiple(4, 30))\nprint(nearest_multiple(4, 31))\nprint(nearest_multiple(4, 32))\nprint(nearest_multiple(4, 33))\nprint(nearest_multiple(4, 34))\nprint(nearest_multiple(4, 35))\nprint(nearest_multiple(4, 36))\nprint(nearest_multiple(4, 37))\nprint(nearest_multiple(4, 38))\nprint(nearest_multiple(4, 39))\nprint(nearest_multiple(4, 40))\nprint(nearest_multiple(4, 41))\nprint(nearest_multiple(4, 42))\nprint(nearest_multiple(4, 43))\nprint(nearest_multiple(4, 44))\nprint(nearest_multiple(4, 45))\nprint(nearest_multiple(4, 46))\nprint(nearest_multiple(4, 47))\nprint(nearest_multiple(4, 48))\nprint(nearest_multiple(4",
      -7.71875
    ],
    [
      "def nearest_multiple(num, divisor):\n    return num % divisor\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(1, 3))\n    print(nearest_multiple(2, 3))\n    print(nearest_multiple(3, 3))\n    print(nearest_multiple(4, 3))",
      -8.0546875
    ],
    [
      "def nearest_multiple(num, multiple):\n    return num // multiple\n\n\nprint(nearest_multiple(5, 3))\nprint(nearest_multiple(5, 7))\nprint(nearest_multiple(5, 10))\nprint(nearest_multiple(5, 11))\nprint(nearest_multiple(5, 12))",
      -8.0859375
    ],
    [
      "class Solution:\n    def roundToMultiple(self, num: int, multiple: int) -> int:\n        return num if num % multiple == 0 else num + multiple\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.roundToMultiple(10, 2) == 2\n    assert s.roundToMultiple(10, 3) == 3\n    assert s.roundToMultiple(10, 4) == 5\n    assert s.roundToMultiple(10, 5) == 10\n    assert s.roundToMultiple(10, 6) == 10\n    assert s.roundToMultiple(10, 7) == 10",
      -13.140625
    ],
    [
      "class Solution:\n    def nearestMultiple(self, n: int, m: int) -> int:\n        if n == 0:\n            return 0\n        if m == 0:\n            return m\n\n        i = int(abs(n) / m)\n        return m * (i + 1)",
      -14.140625
    ],
    [
      "def round_to_nearest_multiple(x, y, n):\n    return round(x / n) * n + round(y / n)\n\nprint(round_to_nearest_multiple(2, 3, 4))\nprint(round_to_nearest_multiple(2, 3, 5))\nprint(round_to_nearest_multiple(2, 3, 6))\nprint(round_to_nearest_multiple(2, 3, 7))\nprint(round_to_nearest_multiple(2, 3, 8))",
      -14.3046875
    ],
    [
      "def nearest_multiple(num, multiple):\n    if num == 0:\n        return 0\n    elif num % multiple == 0:\n        return num\n    else:\n        return num + (num % multiple)\n\nprint(nearest_multiple(5, 3))\nprint(nearest_multiple(5, 3))\nprint(nearest_multiple(5, 6))\nprint(nearest_multiple(5, 6))",
      -15.421875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}