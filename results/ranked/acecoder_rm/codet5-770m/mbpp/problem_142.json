{
  "problem": {
    "task_id": "MBPP/153",
    "prompt": "Write a function to find the vertex of a parabola.",
    "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
    "test_list": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ],
    "challenge_test_list": [],
    "problem_id": 142
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def parabola_vertex(parabola):\n    parabola.sort()\n    return parabola[0]\n\n\nprint(parabola_vertex([1, 2, 3, 4, 5, 6, 7]))",
      3.2109375
    ],
    [
      "def parabola_vertex(p):\n    a,b = p\n    return a+b\n\nprint(parabola_vertex((1,2)))\nprint(parabola_vertex((2,3)))\nprint(parabola_vertex((1,2)))",
      1.6875
    ],
    [
      "def parabola(n):\n    # write your code here\n    return n*(n+1)//2\n\n\nprint(parabola(3))\nprint(parabola(4))\nprint(parabola(5))",
      1.44140625
    ],
    [
      "def parabola(n):\n    return n*(n+1)/2\n\nprint(parabola(3))\nprint(parabola(5))\nprint(parabola(7))",
      0.80908203125
    ],
    [
      "def parabola(n):\n    return (n*(n+1)/2)\n\nn = int(input(\"Enter the number of parabola: \"))\nprint(parabola(n))",
      0.399169921875
    ],
    [
      "def parabola_vertex(n):\n    return n**2 + (n - 1)**2\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(5))",
      0.21826171875
    ],
    [
      "def parabola_vertex(a, b, c):\n    return a * b * c\n\n\nprint(parabola_vertex(5, 2, 3))",
      0.034210205078125
    ],
    [
      "def parabola(n, p):\n    # Write your code here.\n    p.sort()\n    n.sort()\n    return n[int(p[0])] - n[int(p[1])]",
      -0.0914306640625
    ],
    [
      "def parabola_vertex(parabola):\n    a, b, c = parabola\n    return a*b*c\n\nprint(parabola_vertex([0,0,0]))",
      -0.25634765625
    ],
    [
      "def parabola(n):\n    return n**2 - n + 1\n\n\nif __name__ == \"__main__\":\n    assert parabola(5) == 12",
      -0.260009765625
    ],
    [
      "def parabola_vertex(a,b,c):\n    return a+b+c\n\na = int(input(\"a = \"))\nb = int(input(\"b = \"))\nc = int(input(\"c = \"))\nprint(parabola_vertex(a,b,c))",
      -0.32568359375
    ],
    [
      "def parabola(n, s):\n    if s == '1':\n        return n-1\n    else:\n        return n\n\nprint(parabola(10, '1'))",
      -0.70166015625
    ],
    [
      "def parabola_vertex(parabola):\n    parabola.sort()\n    x = parabola[0]\n    y = parabola[1]\n    z = parabola[2]\n    return x, y, z",
      -0.70263671875
    ],
    [
      "def vertex(p):\n    return (p[0]+p[1])/2\n\nprint(vertex([1,2,3]))",
      -0.75146484375
    ],
    [
      "import math\n\n\ndef parabola(n):\n    return math.sqrt(3 * n)\n\n\nif __name__ == \"__main__\":\n    print(parabola(5))",
      -0.7529296875
    ],
    [
      "def parabola(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return parabola(n-1)+parabola(n-2)\n\nprint(parabola(6))",
      -0.826171875
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 0\n    else:\n        return (parabola(n-1) + parabola(n-2))/2\n\nif __name__ == \"__main__\":\n    print(parabola(5))",
      -0.828125
    ],
    [
      "def parabola(x, y):\n    return x+y\n\nprint(parabola(1, 2))",
      -0.85595703125
    ],
    [
      "import math\ndef parabola(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    return math.sqrt(2*n*n-2*n*n+1)\n\nprint(parabola(5))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 1\n    else:\n        return parabola(n-1) + 2\n\nif __name__ == \"__main__\":\n    print(parabola(5))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 1\n    else:\n        return parabola(n-1) + parabola(n-2)\n\n\nif __name__ == '__main__':\n    print(parabola(5))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    return n ** 2\n\n\nprint(parabola(4))",
      -0.85693359375
    ],
    [
      "def parabola_vertex(parabola):\n    \"\"\"\n    :type parabola: list\n    :rtype: int\n    \"\"\"\n    if len(parabola) == 0:\n        return 0\n    if len(parabola) == 1:\n        return parabola[0]\n\n    if parabola[0] > parabola[1]:\n        return parabola[0]\n    else:\n        return parabola[1]\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(parabola_vertex([3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 0\n    return parabola(n - 1) + parabola(n - 2)\n\nprint(parabola(4))",
      -0.85693359375
    ],
    [
      "def parabola_vertex(parabola):\n    # Fill this in.\n    pass\n\n\nparabola = [1, 2, 3, 4, 5]\nparabola_vertex(parabola)",
      -0.85693359375
    ],
    [
      "def parabola_vertex(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return parabola_vertex(n-1) + parabola_vertex(n-2)\n\n\nprint(parabola_vertex(3))",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(radius):\n    return int(sqrt(radius))\n\n\nprint(parabola_vertex(1))\nprint(parabola_vertex(5))\nprint(parabola_vertex(10))",
      -0.85693359375
    ],
    [
      "def parabola(a, b, c):\n    return a + b + c\n\n\nprint(parabola(1, 2, 3))",
      -0.857421875
    ],
    [
      "def parabola_vertex(x,y):\n    return (x+y)\n\nprint(parabola_vertex(2,4))",
      -0.85791015625
    ],
    [
      "def vertex(parabola):\n    return parabola[0][1] + parabola[1][1]\n\n\nprint(vertex([[1, 1], [2, 1], [2, 2]]))",
      -0.85791015625
    ],
    [
      "from random import random\n\ndef parabola(n):\n    x = random()\n    y = random()\n    return x + y\n\ndef main():\n    n = int(input())\n    print(parabola(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    return n // 2\n\n\nprint(parabola(1))\nprint(parabola(2))\nprint(parabola(3))\nprint(parabola(4))\nprint(parabola(5))",
      -0.85791015625
    ],
    [
      "def parabola_vertex(n):\n    n = n - 1\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return 2\n\nprint(parabola_vertex(2))\nprint(parabola_vertex(3))\nprint(parabola_vertex(4))\nprint(parabola_vertex(5))",
      -0.85791015625
    ],
    [
      "def parabola_vertex(n):\n    a = int(input(\"enter a number:\"))\n    if a < 0:\n        return -1\n    else:\n        for i in range(n):\n            a = a + 1\n        return a\n\nprint(parabola_vertex(5))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n - 1) * (n - 2) / 2",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n//2\n\nprint(parabola(5))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return parabola(n-1) + parabola(n-2)\n\n\nprint(parabola(6))",
      -0.85791015625
    ],
    [
      "def parabola_vertex(parabola):\n    for i in range(len(parabola)):\n        if parabola[i][0] == parabola[i][1]:\n            return i\n    return -1\n\n\nprint(parabola_vertex([[1, 2], [2, 1]]))",
      -0.85791015625
    ],
    [
      "def parabola_vertex(A, B, C, D):\n    if A + B == C and A + C == D:\n        return True\n    return False",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    # write your code in Python 3.6\n    return n ** (1/2)\n\n\nprint(parabola(3))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    return n*n - 2*n*n\n\nn = int(input())\nprint(parabola(n))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n\n\nif __name__ == \"__main__\":\n    print(parabola(5))\n    print(parabola(6))\n    print(parabola(7))\n    print(parabola(8))\n    print(parabola(9))\n    print(parabola(10))\n    print(parabola(11))\n    print(parabola(12))\n    print(parabola(13))\n    print(parabola(14))\n    print(parabola(15))",
      -0.8583984375
    ],
    [
      "def parabola(n, p):\n    x, y = 0, 0\n\n    for i in range(n):\n        x += p[i]\n        y += p[i] * (n - i)\n\n    return x, y\n\n\nprint(parabola(4, [1, 2, 3, 4]))",
      -0.8583984375
    ],
    [
      "from random import randint\n\n\ndef parabola(n):\n    for i in range(n):\n        x = randint(0, n - 1)\n        y = randint(0, n - 1)\n        if x == y:\n            return x\n\n\nprint(parabola(5))",
      -0.8583984375
    ],
    [
      "from random import randint\n\n\ndef parabola(n):\n    for i in range(n):\n        a = randint(1, n-1)\n        b = randint(1, n-1)\n        c = randint(1, n-1)\n        if a == b == c:\n            return a",
      -0.85888671875
    ],
    [
      "def parabola_vertex(parabola):\n    \"\"\"\n    :type parabola: List[int]\n    :rtype: int\n    \"\"\"\n    parabola.sort()\n    for i in range(len(parabola)):\n        if i == len(parabola) - 1:\n            return parabola[i]\n        else:\n            if parabola[i] > parabola[i + 1]:\n                return parabola[i]\n\n\nif __name__ == '__main__':\n    print(parabola_vertex([0, 1, 2, 3, 4, 5]))\n    print(parabola_vertex([4, 3, 2, 1, 0]))\n    print(parabola_vertex([1, 1, 1, 1, 1]))",
      -0.85888671875
    ],
    [
      "import math\n\ndef parabola(a,b,c):\n    return math.sqrt((b*b) - (4*a*c))",
      -0.85888671875
    ],
    [
      "def vertex(parabola):\n    # your code here\n    return\n\n\nprint(vertex([1, 2, 3, 4]))\nprint(vertex([1, 2, 4, 5]))\nprint(vertex([1, 2, 4, 5, 6, 7, 8]))\nprint(vertex([1, 2, 4, 5, 6, 7, 8, 9]))",
      -0.9619140625
    ],
    [
      "def parabola_vertex(n):\n    if n % 2 == 1:\n        return n // 2\n    else:\n        return n + 1\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(4))",
      -1.3310546875
    ],
    [
      "def parabola_vertex(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * (n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(10))",
      -1.5185546875
    ],
    [
      "def parabola(n):\n    x, y = 0, 0\n    for _ in range(n):\n        x, y = y, x + y\n    return x, y\n\n\nprint(parabola(6))",
      -1.5556640625
    ],
    [
      "import numpy as np\n\ndef parabola_vertex(parabola, n):\n    # your code here\n    a, b, c = parabola\n    return np.array([a, b, c])\n\nprint(parabola_vertex([1, 2, 3], 3))",
      -1.5751953125
    ],
    [
      "from collections import deque\n\ndef parabola(n):\n    # Fill this in.\n    vertex = 0\n    queue = deque([vertex])\n    while len(queue)!= n:\n        vertex = queue.popleft()\n        for i in range(len(queue) - 1, 0, -1):\n            if queue[i] > queue[i-1]:\n                queue.popleft()\n                queue.append(i)\n                break\n    return vertex\n\nprint(parabola(3))",
      -1.751953125
    ],
    [
      "def parabola(a, b):\n    if b > a:\n        a, b = b, a\n\n    return (a + b) // 2\n\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(parabola(a, b))",
      -2.31640625
    ],
    [
      "def parabola(x, y, z):\n    if x > y:\n        return x\n    if x > z:\n        return y\n    if y > z:\n        return z\n    return x + y + z\n\n\nprint(parabola(1, 2, 3))\nprint(parabola(3, 1, 2))\nprint(parabola(3, 3, 1))\nprint(parabola(4, 4, 3))",
      -2.572265625
    ],
    [
      "def find_vertex(parabola):\n    if len(parabola) < 2:\n        return -1\n\n    parabola.sort()\n    return parabola[0] - parabola[1]\n\n\nif __name__ == \"__main__\":\n    print(find_vertex([3, 5, 1, 6, 2]))",
      -2.6328125
    ],
    [
      "def parabola_vertex(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1",
      -2.666015625
    ],
    [
      "def find_vertex(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 + find_vertex(n - 1)\n\n\nif __name__ == '__main__':\n    print(find_vertex(1))\n    print(find_vertex(2))\n    print(find_vertex(3))",
      -2.86328125
    ],
    [
      "def parabola(p, r):\n    for i in range(1, r+1):\n        for j in range(1, i+1):\n            if p[i-1] + p[j-1] == r:\n                return i, j\n\n\nif __name__ == \"__main__\":\n    p = [0, 1, 2, 3, 4, 5, 6, 7]\n    r = 7\n    print(parabola(p, r))",
      -3.294921875
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return 3\n\n\nprint(parabola(6))",
      -3.34765625
    ],
    [
      "def vertex(parabola):\n    vertices = []\n    for i in range(len(parabola)):\n        for j in range(len(parabola)):\n            if i!= j:\n                if parabola[i] + parabola[j] == 2:\n                    vertices.append(i)\n                    vertices.append(j)\n    return vertices\n\n\nprint(vertex([1, 2, 3, 4, 5]))",
      -3.46875
    ],
    [
      "def parabola_vertex(n, m):\n    for i in range(0, n):\n        for j in range(0, m):\n            if (i+j) % 2 == 0:\n                return i\n\nprint(parabola_vertex(4, 3))",
      -3.85546875
    ],
    [
      "def parabola_vertex(parabola):\n    return parabola[0] + parabola[1]\n\n\ndef main():\n    parabola = [1, 2, 3, 4, 5]\n    print(parabola_vertex(parabola))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.998046875
    ],
    [
      "def parabola(n, m):\n    return (n + m) // 2\n\nif __name__ == \"__main__\":\n    print(parabola(1, 1))\n    print(parabola(2, 1))\n    print(parabola(3, 1))\n    print(parabola(4, 1))\n    print(parabola(5, 1))\n    print(parabola(6, 1))\n    print(parabola(7, 1))\n    print(parabola(8, 1))\n    print(parabola(9, 1))",
      -4.0390625
    ],
    [
      "def parabola_vertex(arr, n):\n    if n == 0:\n        return\n    for i in range(n):\n        for j in range(n):\n            if arr[j] + arr[i] == n:\n                return i\n\n\nif __name__ == '__main__':\n    print(parabola_vertex([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))",
      -4.16796875
    ],
    [
      "def parabola_vertex(a, b, c):\n    if a + b > c:\n        return a + b\n    else:\n        return c + a\n\nprint(parabola_vertex(1, 2, 3))\nprint(parabola_vertex(3, 2, 1))",
      -4.53125
    ],
    [
      "def parabola(p):\n    return p[0] * p[1]\n\n\nif __name__ == '__main__':\n    print(parabola([2, 4, 5, 7]))",
      -4.5859375
    ],
    [
      "def parabola(n):\n    x = 1\n    y = 2\n    while n > 1:\n        if n % 2 == 0:\n            x += 1\n        else:\n            y += 1\n        n = n // 2\n    return x, y\n\n\nif __name__ == '__main__':\n    print(parabola(6))",
      -4.68359375
    ],
    [
      "def parabola(n, m):\n  if n < m:\n    return parabola(m, n)\n  if n == m:\n    return 0\n  return n + parabola(m, n-m)\n\nprint(parabola(3, 2))",
      -4.7421875
    ],
    [
      "def vertex(parabola):\n    return parabola[0] * parabola[1] - parabola[1] * parabola[0]\n\n\nprint(vertex([1, 2, 3, 4]))\nprint(vertex([1, 2, 4, 5]))\nprint(vertex([1, 2, 4, 5, 6, 7, 8, 9]))\nprint(vertex([1, 2, 4, 5, 6, 7, 8, 9, 10]))",
      -4.80078125
    ],
    [
      "def parabola(n, r):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if",
      -4.9375
    ],
    [
      "def find_vertex(parabola):\n    if len(parabola) == 1:\n        return parabola[0]\n    else:\n        for i in range(len(parabola) - 2):\n            if parabola[i] + parabola[i + 1] < parabola[i + 2]:\n                return parabola[i]\n\n\nprint(find_vertex([1, 2, 3, 4, 5]))",
      -5.1171875
    ],
    [
      "def parabola(n):\n    a, b = 0, 1\n    while b < n:\n        c = (a + b) / 2\n        if c > n / 2:\n            a = c\n        else:\n            b = c\n    return a\n\n\nif __name__ == \"__main__\":\n    assert parabola(8) == 4",
      -5.453125
    ],
    [
      "def parabola_vertex(arr, n):\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            return i\n    return -1\n\n\nprint(parabola_vertex([1, 1, 1, 1, 1, 1, 1], 5))\nprint(parabola_vertex([1, 1, 1, 1, 1, 1, 1], 8))",
      -5.74609375
    ],
    [
      "def parabola(n):\n    return n // 2\n\n\ndef parabola2(n):\n    return (n + 1) // 2\n\n\nprint(parabola(5))\nprint(parabola(6))\nprint(parabola(3))\nprint(parabola(2))\nprint(parabola(1))\nprint(parabola(4))\nprint(parabola(7))\nprint(parabola(8))\nprint(parabola(9))\nprint(parabola(10))\nprint(parabola(11))\nprint(parabola(12))\nprint(parabola(13))\nprint(parabola(14))\nprint(parabola(15))\nprint(parabola(16))\nprint(parabola(17))\nprint(parabola(18))\nprint(parabola(19))\nprint(parabola(20))\nprint(parabola(21))\nprint(parabola(22))\nprint(parabola(23))\nprint(parabola(24))\nprint(parabola(25))\nprint(parabola(26))\nprint(parabola(27))\nprint(parabola(28))\nprint(parabola(29))\nprint(parabola(30))\nprint(parabola(31))\nprint(parabola(32))\nprint(parabola(33))\nprint(parabola(34))\nprint(parabola(35))\nprint(parabola(36))\nprint(parabola(37))\nprint(parabola(38))\nprint(parabola(39))\nprint(parabola(40))\nprint(parabola(41))\nprint(parabola(42))\nprint(parabola(43))\nprint(parabola(44))\nprint(parabola(45))\nprint(parabola(46))\nprint(parabola(47))",
      -5.7734375
    ],
    [
      "def parabola_vertex(p, q):\n    p = list(map(int, p.split(\",\")))\n    q = list(map(int, q.split(\",\")))\n    min_distance = float(\"inf\")\n    min_vertex = 0\n    for i in range(len(p)):\n        for j in range(len(q)):\n            distance = abs(p[i] - q[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_vertex = i\n    return min_vertex\n\nprint(parabola_vertex(\"5,-3,2,4\", \"-3,2,4\"))",
      -5.77734375
    ],
    [
      "def find_vertex(parabola):\n    return parabola.vertices\n\n\nparabola = {\n    \"vertices\": [\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 2, \"y\": 1},\n        {\"x\": 3, \"y\": 1},\n        {\"x\": 4, \"y\": 1},\n        {\"x\": 5, \"y\": 1},\n        {\"x\": 6, \"y\": 1},\n    ]\n}\n\nprint(find_vertex(parabola))",
      -5.78125
    ],
    [
      "def parabola(n):\n    # create an empty set to store the vertices\n    vertex_set = set()\n\n    # loop through the n vertices\n    for i in range(n):\n        # add the vertex to the set\n        vertex_set.add(i)\n\n    # return the vertex of the parabola\n    return len(vertex_set)\n\n\nprint(parabola(5))",
      -6.49609375
    ],
    [
      "def vertex_of_parabola(p):\n    return p[0] * p[1] + p[2]\n\n\nprint(vertex_of_parabola((1, 1, 1)))\nprint(vertex_of_parabola((1, 1, 2)))\nprint(vertex_of_parabola((1, 1, 3)))\nprint(vertex_of_parabola((1, 2, 3)))\nprint(vertex_of_parabola((1, 2, 4)))\nprint(vertex_of_parabola((1, 3, 4)))\nprint(vertex_of_parabola((1, 4, 3)))\nprint(vertex_of_parabola((1, 4, 5)))",
      -6.58984375
    ],
    [
      "def parabola_vertex(parabola):\n    for i in range(len(parabola)):\n        for j in range(i+1, len(parabola)):\n            if parabola[i] == parabola[j]:\n                return i, j\n    return -1, -1\n\n\nif __name__ == \"__main__\":\n    parabola = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(parabola_vertex(parabola))",
      -6.609375
    ],
    [
      "def parabola(a, b, c):\n    a1, b1, c1 = 0, 0, 0\n    while a1 < a and b1 < b and c1 < c:\n        a1 += 1\n        b1 += 1\n        c1 += 1\n    return a1, b1, c1\n\n\nprint(parabola(3, 4, 5))",
      -6.62109375
    ],
    [
      "def parabola(x, y, z):\n    if x == y == z:\n        return x\n    return None\n\n\nprint(parabola(1, 1, 1))\nprint(parabola(1, 1, 2))\nprint(parabola(2, 2, 3))\nprint(parabola(2, 3, 4))\nprint(parabola(2, 4, 3))\nprint(parabola(3, 2, 4))\nprint(parabola(3, 4, 2))\nprint(parabola(4, 2, 3))\nprint(parabola(4, 3, 2))",
      -6.8359375
    ],
    [
      "def parabola(n, x):\n    if n == 0:\n        return x\n    return parabola(n - 1, x - n * (n - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(parabola(2, 10))\n    print(parabola(4, 10))\n    print(parabola(6, 10))\n    print(parabola(8, 10))\n    print(parabola(10, 10))",
      -6.96484375
    ],
    [
      "def parabola(x, y, z):\n    if (x > y) and (x > z):\n        return (x + y + z) / 2\n    elif (y > z) and (y > x):\n        return (y + x + z) / 2\n    elif (z > x) and (z > y):\n        return (x + y + z) / 2\n\n\nprint(parabola(3, 2, 1))\nprint(parabola(1, 1, 1))\nprint(parabola(3, 3, 3))\nprint(parabola(3, 4, 4))",
      -7.04296875
    ],
    [
      "def find_vertex(graph):\n    edges = []\n    for i in range(len(graph)):\n        for j in range(len(graph)):\n            if i!= j:\n                if graph[i][j] == 1:\n                    edges.append((i, j))\n    return edges\n\n\nif __name__ == \"__main__\":\n    graph = [[0, 1, 1], [0, 1, 0], [0, 0, 1]]\n    edges = find_vertex(graph)\n    print(edges)",
      -7.1875
    ],
    [
      "def parabola(x, y, z):\n    if (x == y) and (y == z):\n        return True\n    if (x == y) or (y == z):\n        return False\n    if (x == z) or (y == z):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(parabola(3, 2, 4))",
      -7.55078125
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: int\n    \"\"\"\n    if a == b == c:\n        return 0\n    if a == b:\n        return 1\n    if b == c:\n        return 2\n    if a == c:\n        return 3\n    if b == c:\n        return 4\n    if a == c:\n        return 5\n    if b == c:\n        return 6\n    return 7\n\n\nprint(parabola_vertex(1.5, 2.5, 3.5))\nprint(parabola_vertex(1.5, 2.5, 4.5))\nprint(parabola_vertex(1.5, 2.5, 5.5))",
      -8.203125
    ],
    [
      "def parabola_vertex(a, b, c):\n    a = (a * b + c) / 2\n    b = (a * c - b) / 2\n    c = (a * b + c) / 2\n    return a, b, c\n\n\nprint(parabola_vertex(1, 2, 3))",
      -8.234375
    ],
    [
      "def parabola_vertex(parabola):\n    n = len(parabola)\n    for i in range(n - 1):\n        if parabola[i] + parabola[i + 1] < parabola[i + 2]:\n            return i\n    return n - 1\n\n\nif __name__ == \"__main__\":\n    parabola = [4, 2, 1, 3, 0, 5, 6]\n    print(parabola_vertex(parabola))",
      -8.359375
    ],
    [
      "def parabola_vertex(parabola):\n    for i in range(len(parabola)):\n        for j in range(i + 1, len(parabola)):\n            if parabola[i] + parabola[j] == parabola[i + j]:\n                return i, j\n    return -1, -1\n\nprint(parabola_vertex([3, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 3, 4, 5, 5, 5, 4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 5, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 4, 5, 4, 5, 5, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 4, 5, 5, 5, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
      -8.71875
    ],
    [
      "def find_vertex(parabola):\n    parabola = sorted(parabola)\n    return parabola[0]\n\n\nif __name__ == \"__main__\":\n    parabola = [1, 2, 3, 4, 5, 6, 7]\n    print(find_vertex(parabola))",
      -9.015625
    ],
    [
      "def parabola(n):\n    \"\"\"\n    Find the vertex of a parabola\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n\n\nif __name__ == \"__main__\":\n    print(parabola(5))\n    print(parabola(6))\n    print(parabola(7))\n    print(parabola(8))\n    print(parabola(9))",
      -9.2578125
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    return -1\n\nprint(parabola(4))\nprint(parabola(6))\nprint(parabola(8))\nprint(parabola(9))\nprint(parabola(10))\nprint(parabola(11))\nprint(parabola(12))\nprint(parabola(13))\nprint(parabola(14))\nprint(parabola(15))\nprint(parabola(16))\nprint(parabola(17))\nprint(parabola(18))\nprint(parabola(19))\nprint(parabola(20))\nprint(parabola(21))\nprint(parabola(22))\nprint(parabola(23))\nprint(parabola(24))\nprint(parabola(25))\nprint(parabola(26))\nprint(parabola(27))\nprint(parabola(28))\nprint(parabola(29))\nprint(parabola(30))\nprint(parabola(31))\nprint(parabola(32))\nprint(parabola(33))\nprint(parabola(34))\nprint(parabola(35))\nprint(parabola(36))\nprint(parabola(37))\nprint(parabola(38))\nprint(parabola(39))\nprint(parabola(40))\nprint(parabola(41))\nprint(parabola(42))\nprint(parabola(43))\nprint(parabola(44))\nprint(parabol",
      -9.3046875
    ],
    [
      "def parabola_vertex(p):\n    \"\"\"\n    Find the vertex of the parabola.\n    \"\"\"\n    if p[0]!= 0:\n        return 0\n    elif p[1]!= 0:\n        return 1\n    else:\n        return 2\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex([0, 0, 0]))\n    print(parabola_vertex([0, 1, 1]))\n    print(parabola_vertex([1, 1, 0]))",
      -9.515625
    ],
    [
      "def parabola_vertex(n):\n    a = n - 1\n    b = n - 2\n    c = n - 3\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of parabola: \"))\n    print(\"Vertex of parabola is\", parabola_vertex(n))",
      -9.6796875
    ],
    [
      "def parabola(n):\n    x = 0\n    y = 1\n    x1 = 0\n    x2 = 1\n    for i in range(n):\n        if i == 0:\n            x1 = x\n            x2 = y\n        else:\n            x = (x1 + x2) / 2\n            y = (y1 + y2) / 2\n    return x\n\n\nif __name__ == '__main__':\n    print(parabola(4))",
      -10.71875
    ],
    [
      "def find_vertex(p):\n    n = len(p)\n    if n == 1:\n        return p[0]\n    elif n == 2:\n        return p[0] + p[1]\n    elif n == 3:\n        return p[0] + p[1] + p[2]\n    elif n == 4:\n        return p[0] + p[1] + p[2] + p[3]\n    elif n == 5:\n        return p[0] + p[1] + p[2] + p[3] + p[4]\n    else:\n        return \"Invalid Input\"\n\n\nprint(find_vertex([1, 2, 3, 4, 5]))",
      -10.953125
    ],
    [
      "def vertex(parabola):\n    parabola = parabola.split()\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)\n    parabola.append(0)",
      -13.0390625
    ],
    [
      "def parabola(p, q):\n    if p[0] == q[0] and p[1] == q[1]:\n        return p\n    elif p[0] > q[0] and p[1] > q[1]:\n        return parabola(p[1:], q)\n    elif p[0] < q[0] and p[1] < q[1]:\n        return parabola(p, q[1:])\n    elif p[0] < q[0] and p[1] > q[1]:\n        return parabola(q[1:], p)\n    elif p[0] > q[0] and p[1] < q[1]:\n        return parabola(p, q[1:])\n    elif p[0] < q[0] and p[1] > q[1]:\n        return parabola(q[1:], p)\n    else:\n        return None",
      -13.1015625
    ],
    [
      "import math\n\ndef find_vertex(parabola):\n    # Write your code here\n    parabola = parabola.split(\" \")\n    parabola = [float(i) for i in parabola]\n    parabola = [round(i, 2) for i in parabola]\n    return parabola\n\n\nif __name__ == \"__main__\":\n    print(find_vertex(\"2 4 3 1\"))\n    print(find_vertex(\"1 2 3 4\"))\n    print(find_vertex(\"1 2 3 4 5\"))\n    print(find_vertex(\"1 2 3 4 5 6\"))\n    print(find_vertex(\"1 2 3 4 5 6 7\"))\n    print(find_vertex(\"1 2 3 4 5 6 7 8 9\"))",
      -14.1171875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}