{
  "problem": {
    "task_id": "MBPP/367",
    "prompt": "Write a function to check if a binary tree is balanced or not.",
    "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
    "test_list": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ],
    "challenge_test_list": [],
    "problem_id": 356
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n    if not is_balanced(node.left) or not is_balanced(node.right):\n        return False\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.left.val - node.right.val) < 2",
      4.05078125
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    return is_balanced_helper(root, float('inf'))\n\n\ndef is_balanced_helper(root: TreeNode, min_val: float) -> bool:\n    if not root:\n        return True\n\n    if abs(min_val - root.val) > 1:\n        return False\n\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)",
      1.673828125
    ],
    [
      "from typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    if root is None:\n        return True\n\n    left_height = is_balanced(root.left)\n    right_height = is_balanced(root.right)\n    if left_height == -1 or right_height == -1:\n        return -1\n\n    if abs(left_height - right_height) > 1:\n        return -1\n\n    return max(left_height, right_height) + 1",
      1.568359375
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1",
      1.189453125
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        if root is None:\n            return True\n\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.get_height(root.left) - self.get_height(root.right)) <= 1\n\n    def get_height(self, root):\n        if root is None:\n            return 0\n        else:\n            return max(self.get_height(root.left), self.get_height(root.right)) + 1\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.left.left.left = Node(8)\n    root.left.left.right = Node(9)\n    root.left.right.left = Node(10)\n    root.left.right.right = Node(11)\n    print(Solution().isBalanced(root))",
      1.0009765625
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) <= abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    print(is_balanced(root))",
      0.88525390625
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef checkBalance(root):\n    if not root:\n        return True\n\n    left = checkBalance(root.left)\n    right = checkBalance(root.right)\n\n    if not left and not right:\n        return True\n\n    return False\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n\n    print(checkBalance(root))",
      0.82666015625
    ],
    [
      "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return abs(get_height(root.left) - get_height(root.right)) <= 1 and is_balanced(root.left) and is_balanced(root.right)\n\n\ndef get_height(root):\n    if not root:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))",
      0.70947265625
    ],
    [
      "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.right.left = Node(4)\n    node.right.right = Node(5)\n\n    print(Solution().isBalanced(node))",
      -0.09515380859375
    ],
    [
      "from collections import deque\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    queue = deque([(root, True)])\n    while queue:\n        node, is_balanced = queue.popleft()\n        if is_balanced:\n            if not node.left and not node.right:\n                return True\n\n            if node.left:\n                queue.append((node.left, False))\n            if node.right:\n                queue.append((node.right, False))\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(is_balanced(root))",
      -0.1634521484375
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    if not balanced(root.left):\n        return False\n    if not balanced(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return balanced(root.left) and balanced(root.right)",
      -0.2401123046875
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    if not check_balanced_tree(root.left) and not check_balanced_tree(root.right):\n        return False\n    return check_balanced_tree(root.left) or check_balanced_tree(root.right)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n\n    print(check_balanced_tree(root))",
      -0.29052734375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: 'Node') -> bool:\n        return self.is_balanced_helper(root)\n\n    def is_balanced_helper(self, node):\n        if not node:\n            return True\n        left_balanced = self.is_balanced_helper(node.left)\n        right_balanced = self.is_balanced_helper(node.right)\n        if not left_balanced and not right_balanced:\n            return True\n        return False\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(sol.isBalanced(root))",
      -0.4287109375
    ],
    [
      "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if root is None:\n            return True\n\n        def depth(node):\n            if node is None:\n                return 0\n\n            left = depth(node.left)\n            right = depth(node.right)\n\n            if abs(left - right) > 1:\n                return False\n\n            return max(left, right) + 1\n\n        return depth(root) == 0",
      -0.49658203125
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if not root:\n            return True\n\n        def helper(node, left, right):\n            if not node:\n                return True\n            if not left and not right:\n                return False\n            if node.val!= left or node.val!= right:\n                return False\n            return helper(node.left, left, node.val) and helper(node.right, node.val, right)\n\n        return helper(root.left, root.val, root.val)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    print(s.isBalanced(node))",
      -0.65234375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced(root):\n    if not root:\n        return True\n\n    if not balanced(root.left):\n        return False\n\n    if not balanced(root.right):\n        return False\n\n    return balanced(root.left) and balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(20)\n    root.right = Node(30)\n    root.left.left = Node(40)\n    root.left.right = Node(50)\n    root.right.left = Node(60)\n    root.right.right = Node(70)\n    print(balanced(root))",
      -0.65478515625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, float(\"-inf\"))\n\n\ndef is_balanced_helper(node, low):\n    if not node:\n        return True\n\n    if low > node.val:\n        return False\n\n    if not is_balanced_helper(node.left, low):\n        return False\n\n    if not is_balanced_helper(node.right, low):\n        return False\n\n    return True\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.7509765625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balance(root):\n    if root is None:\n        return True\n\n    left_balanced = check_balance(root.left)\n    right_balanced = check_balance(root.right)\n\n    if left_balanced and right_balanced:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n\n    print(check_balance(root))",
      -0.85693359375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    assert is_balanced(root) == True",
      -0.85693359375
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n\n    if not check_balanced(root.left) and not check_balanced(root.right):\n        return False\n\n    return check_balanced(root.left) or check_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(check_balanced(root))",
      -0.85693359375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        return self.isBalancedHelper(root, 0)\n\n    def isBalancedHelper(self, root, depth):\n        if root is None:\n            return True\n\n        left = self.isBalancedHelper(root.left, depth + 1)\n        right = self.isBalancedHelper(root.right, depth + 1)\n\n        if left and right and abs(depth - left - right) <= 1:\n            return True\n\n        return False",
      -0.85693359375
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        if not root:\n            return True\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.height(root.left) - self.height(root.right)) <= 1 \\\n               and self.isBalanced(root.left.left) and self.isBalanced(root.left.right) and self.isBalanced(root.right.left) and self.isBalanced(root.right.right)\n\n    def height(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))",
      -0.85693359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    left = isBalanced(root.left)\n    right = isBalanced(root.right)\n\n    if not left and not right:\n        return True\n\n    return False\n\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(isBalanced(root))",
      -0.85693359375
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val) + 1\n    ) < 2\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n            return False\n        return is_balanced(root.left) or is_balanced(root.right)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not (is_balanced(root.left) and is_balanced(root.right)):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        get_height(root.left) - get_height(root.right)\n    ) <= 1\n\n\ndef get_height(node):\n    if not node:\n        return 0\n\n    return 1 + max(get_height(node.left), get_height(node.right))\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(3)\n    root.right = Node(2)\n    root.left.left = Node(1)\n    root.left.right = Node(4)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))",
      -0.85791015625
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    left_depth = is_balanced(root.left)\n    right_depth = is_balanced(root.right)\n    if abs(left_depth - right_depth) > 1:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    \"\"\"\n    :type root: Node\n    :rtype: bool\n    \"\"\"\n    if not root:\n        return True\n\n    left_is_balanced = check_balanced(root.left)\n    right_is_balanced = check_balanced(root.right)\n    if left_is_balanced and right_is_balanced:\n        return True\n    else:\n        return False",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced(root):\n    # write your code here\n    return is_balanced(root)\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(\n        node.val - balanced(node.left) - balanced(node.right)\n    ) <= 1",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Node):\n    if root is None:\n        return True\n    if check_balanced_tree(root.left) and check_balanced_tree(root.right):\n        return True\n    else:\n        return False",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n    return balanced_tree(root.left) and balanced_tree(root.right) and abs(\n        abs(root.left.value - root.right.value)\n    ) < 2\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    assert balanced_tree(root) is True",
      -0.85791015625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))",
      -0.8583984375
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False",
      -0.86083984375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if root is None:\n        return True\n\n    left_balanced = check_balanced_tree(root.left)\n    right_balanced = check_balanced_tree(root.right)\n\n    if left_balanced and right_balanced:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(check_balanced_tree(root))",
      -0.98046875
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if is_balanced(root.left) and is_balanced(root.right):\n        return is_balanced(root.left) and is_balanced(root.right) and abs(\n            abs(root.left.val - root.right.val) + 1) <= 1\n    return False\n\n\nif __name__ == '__main__':\n    root = TreeNode(val=1)\n    root.left = TreeNode(val=2)\n    root.right = TreeNode(val=3)\n    root.left.left = TreeNode(val=4)\n    root.left.right = TreeNode(val=5)\n    root.right.left = TreeNode(val=6)\n    root.right.right = TreeNode(val=7)\n    print(is_balanced(root))",
      -0.9892578125
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n    if is_balanced(root.left) and not is_balanced(root.right):\n        return True\n    return False\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.0283203125
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val)\n    ) <= 1",
      -1.119140625
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(5)\n    root.right = Node(20)\n    root.left.left = Node(15)\n    root.left.right = Node(25)\n    root.right.left = Node(30)\n    root.right.right = Node(35)\n\n    print(is_balanced(root))",
      -1.2880859375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(node: Node) -> bool:\n    if node is None:\n        return True\n\n    if node.val == 'null':\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.left.val - node.right.val) <= 1\n\n\nif __name__ == '__main__':\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.left.left = Node(4)\n    node.left.right = Node(5)\n    node.right.left = Node(6)\n    node.right.right = Node(7)\n\n    print(is_balanced(node))",
      -1.5771484375
    ],
    [
      "def isBalanced(root):\n    return isBalancedHelper(root, float('-inf'), float('inf'))\n\n\ndef isBalancedHelper(root, lower_bound, upper_bound):\n    if not root:\n        return True\n    if abs(root.val - lower_bound) > abs(root.val - upper_bound):\n        return False\n    return isBalancedHelper(root.left, lower_bound, root.val) and isBalancedHelper(root.right, root.val, upper_bound)",
      -1.830078125
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\nroot = TreeNode(0)\nroot.left = TreeNode(1)\nroot.right = TreeNode(2)\nroot.right.left = TreeNode(4)\nroot.right.right = TreeNode(5)\n\nprint(is_balanced(root))",
      -1.8349609375
    ],
    [
      "class Node:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    if check_balanced_tree(root.left) and check_balanced_tree(root.right):\n        return True\n    else:\n        return False\n\n\ndef main():\n    root = Node(1, Node(2, Node(3), Node(4)), Node(5, Node(6)))\n    print(check_balanced_tree(root))\n\n\nif __name__ == '__main__':\n    main()",
      -1.919921875
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left):\n        return False\n\n    if not is_balanced(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right)",
      -1.958984375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(3)\n    root.right = Node(8)\n    root.left.left = Node(2)\n    root.left.right = Node(7)\n    root.right.left = Node(1)\n    root.right.right = Node(4)\n    print(is_balanced(root))",
      -2.212890625
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    elif root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    root = TreeNode(0)\n    root.left = TreeNode(1)\n    root.right = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))",
      -2.56640625
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    left_balanced = is_balanced(root.left)\n    right_balanced = is_balanced(root.right)\n\n    if left_balanced and right_balanced:\n        return abs(left_balanced - right_balanced) <= 1\n    return False\n\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.right.right = TreeNode(6)\n\nprint(is_balanced(root))",
      -2.802734375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n\n    return balanced_tree_helper(root, float(\"-inf\"), float(\"inf\"))\n\n\ndef balanced_tree_helper(root, min_val, max_val):\n    if not root:\n        return True\n\n    if root.val <= min_val or root.val >= max_val:\n        return False\n\n    return balanced_tree_helper(root.left, min_val, root.val) and balanced_tree_helper(root.right, root.val, max_val)\n\n\nif __name__ == \"__main__\":\n    node = Node(4)\n    node.left = Node(2)\n    node.right = Node(6)\n    node.left.left = Node(1)\n    node.left.right = Node(3)\n    node.right.right = Node(5)\n\n    assert balanced_tree(node) is True",
      -2.908203125
    ],
    [
      "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    tree = TreeNode(1)\n    tree.left = TreeNode(2)\n    tree.right = TreeNode(3)\n    tree.left.left = TreeNode(4)\n    tree.left.right = TreeNode(5)\n    tree.right.left = TreeNode(6)\n    tree.right.right = TreeNode(7)\n\n    print(is_balanced(tree))",
      -2.97265625
    ],
    [
      "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root: TreeNode, depth: int) -> bool:\n    if root is None:\n        return True\n    if root.left is None and root.right is None and depth == 0:\n        return True\n    return is_balanced_helper(root.left, depth - 1) and is_balanced_helper(root.right, depth - 1)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    assert is_balanced(root) is True",
      -3.11328125
    ],
    [
      "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if not root:\n        return True\n\n    if not (root.left or root.right):\n        return True\n\n    if (depth == 0 or\n            not is_balanced_helper(root.left, depth - 1)) and \\\n            not is_balanced_helper(root.right, depth - 1):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))",
      -3.216796875
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))",
      -3.271484375
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\ndef is_balanced_recursive(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is not None and root.right is not None:\n        return is_balanced_recursive(root.left) and is_balanced_recursive(root.right) and abs(root.left.val - root.right.val) < abs(root.left.val - root.right.val)\n    else:\n        return False\n\ndef is_balanced_iterative(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is not None and root.right is not None:\n        return is_balanced_iterative(root.left) and is_balanced_iterative(root.right) and abs(root.left.val - root.right.val) < abs(root.left.val - root.right.val)\n    else:\n        return False\n\n\n\nif __name__ == '__main__':\n    root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(6)\n    root.left.left = TreeNode(1)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(7)\n    root.right.right = TreeNode(8)\n    print(is_balanced(root))\n    print(is_balanced_recursive(root))\n    print(is_balanced_iterative(root))",
      -3.517578125
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, level):\n    if not root.left and not root.right:\n        if level == 1:\n            return True\n        else:\n            return False\n    if not root.left:\n        return is_balanced_helper(root.right, level - 1)\n    if not root.right:\n        return is_balanced_helper(root.left, level - 1)\n    if root.left.val!= root.right.val:\n        return False\n    return is_balanced_helper(root.left, level - 1) and is_balanced_helper(root.right, level - 1)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))",
      -3.658203125
    ],
    [
      "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    if not root:\n        return True\n    left_node = is_balanced(root.left)\n    right_node = is_balanced(root.right)\n    if not left_node and not right_node:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(5)\n    root.right = Node(20)\n    root.left.left = Node(15)\n    root.left.right = Node(30)\n    root.right.left = Node(40)\n    root.right.right = Node(50)\n    print(is_balanced(root))",
      -3.728515625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        return is_balanced(root.left.left) and is_balanced(root.left.right) and is_balanced(root.right.left) and is_balanced(root.right.right)\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.left.left.left = Node(8)\n    root.left.left.right = Node(9)\n    root.left.right.left = Node(10)\n    root.left.right.right = Node(11)\n    root.right.right.left = Node(12)\n    root.right.right.right = Node(13)\n    print(is_balanced(root))",
      -3.7421875
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if root.left is None and root.right is None:\n        return True\n\n    if root.left is not None and root.right is not None:\n        return is_balanced_helper(root.left, depth + 1) and is_balanced_helper(root.right, depth + 1)\n\n    if root.left is None and root.right is not None:\n        return False\n\n    if root.right is not None and root.left is not None:\n        return is_balanced_helper(root.right, depth + 1) and is_balanced_helper(root.left, depth + 1)\n\n    return False\n\n\ndef test():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))\n\n\ntest()",
      -3.98046875
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_tree(root):\n    if not root:\n        return True\n\n    left = check_tree(root.left)\n    right = check_tree(root.right)\n\n    if not left and not right:\n        return True\n    else:\n        return False\n\n\ndef check_balanced(root):\n    if check_tree(root):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(check_balanced(root))",
      -4.18359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if not root:\n            return True\n        if not (self.isBalanced(root.left) and self.isBalanced(root.right)):\n            return False\n        return (self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.getDepth(root.left) - self.getDepth(root.right)) <= 1)\n\n    def getDepth(self, root):\n        if not root:\n            return 0\n        return max(self.getDepth(root.left), self.getDepth(root.right)) + 1",
      -4.296875
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Node) -> bool:\n    if not root:\n        return True\n\n    def check_balanced(node):\n        if not node:\n            return True\n\n        left_balanced = check_balanced(node.left)\n        right_balanced = check_balanced(node.right)\n\n        if not left_balanced and not right_balanced:\n            return False\n        elif not left_balanced or not right_balanced:\n            return False\n\n        return True\n\n    return check_balanced(root)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(check_balanced_tree(root))",
      -4.57421875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    if not (isinstance(root.left, TreeNode) and isinstance(root.right, TreeNode)):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) <= abs(root.val - root.right.val)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))",
      -4.59375
    ],
    [
      "from typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n    if not check_balanced_tree(root.left) or not check_balanced_tree(root.right):\n        return False\n    return abs(check_balanced_tree(root.left) - check_balanced_tree(root.right)) < 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    print(check_balanced_tree(root))",
      -4.66796875
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))",
      -4.67578125
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced_helper(root.left) or not is_balanced_helper(root.right):\n        return False\n\n    return is_balanced_helper(root.left) and is_balanced_helper(root.right)\n\n\ndef is_balanced_helper(node):\n    if not node:\n        return True\n\n    if not is_balanced_helper(node.left) or not is_balanced_helper(node.right):\n        return False\n\n    if abs(node.val - root.val) > 1:\n        return False\n    else:\n        return is_balanced_helper(node.left) and is_balanced_helper(node.right)\n\n\ndef main():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.75
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n\n    return check_balanced_helper(root, True)\n\n\ndef check_balanced_helper(root, is_left):\n    if not root.left and not root.right:\n        if is_left:\n            return True\n        else:\n            return False\n\n    return check_balanced_helper(root.left, is_left) or check_balanced_helper(root.right, is_left)\n\n\nif __name__ == '__main__':\n    t = TreeNode(1)\n    t.left = TreeNode(2)\n    t.right = TreeNode(3)\n    t.left.left = TreeNode(4)\n    t.left.right = TreeNode(5)\n    t.right.left = TreeNode(6)\n    t.right.right = TreeNode(7)\n    print(check_balanced(t))",
      -4.890625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    else:\n        return check_balanced_tree(root.left) and check_balanced_tree(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\ndef main():\n    root = Node(5)\n    root.left = Node(2)\n    root.right = Node(4)\n    root.left.left = Node(7)\n    root.left.right = Node(1)\n    root.right.right = Node(3)\n    print(check_balanced_tree(root))\n\nif __name__ == \"__main__\":\n    main()",
      -5.5625
    ],
    [
      "class Node:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(\n        node.val - node.left.val) < abs(node.val - node.right.val\n    )\n\n\nif __name__ == \"__main__\":\n    n1 = Node(5)\n    n2 = Node(3)\n    n3 = Node(4)\n    n4 = Node(6)\n    n5 = Node(7)\n    n6 = Node(8)\n    n7 = Node(9)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n    n3.left = n6\n    n3.right = n7\n\n    print(is_balanced(n1))",
      -5.73046875
    ],
    [
      "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.data - node.left.data - node.right.data) <= 1\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n\n    print(is_balanced(n1))\n    print(is_balanced(n2))",
      -6.30078125
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val) + 1\n    ) <= 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))",
      -6.4140625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return False\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\ndef main():\n    root = Node(0)\n    root.left = Node(1)\n    root.right = Node(2)\n    root.left.left = Node(3)\n    root.left.right = Node(4)\n    root.right.left = Node(5)\n    root.right.right = Node(6)\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()",
      -6.625
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, float('-inf'))\n\n\ndef is_balanced_helper(root, min_val):\n    if not root:\n        return True\n    if abs(min_val - root.val) > 1:\n        return False\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(4)\n    root.left = TreeNode(2)\n    root.right = TreeNode(6)\n    root.left.left = TreeNode(1)\n    root.left.right = TreeNode(3)\n    root.right.left = TreeNode(5)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))",
      -7.1171875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n\n    if abs(getDepth(root.left) - getDepth(root.right)) > 1:\n        return False\n\n    return isBalanced(root.left) and isBalanced(root.right)\n\n\ndef getDepth(root):\n    if not root:\n        return 0\n\n    return max(getDepth(root.left), getDepth(root.right)) + 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(8)\n    root.left.left.right = TreeNode(9)\n    root.left.right.left = TreeNode(10)\n    root.left.right.right = TreeNode(11)\n\n    print(isBalanced(root))",
      -7.41015625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n    if not check_balanced(root.left) or not check_balanced(root.right):\n        return False\n    return check_balanced(root.left) and check_balanced(root.right) and abs(\n        abs(root.val - root.left.val) + abs(root.val - root.right.val)) <= 1\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(4)\n    root.right = Node(3)\n    root.left.left = Node(1)\n    root.left.right = Node(2)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(check_balanced(root))",
      -7.43359375
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, float(\"-inf\"))\n\n\ndef is_balanced_helper(root, min_val):\n    if not root:\n        return True\n\n    if abs(root.val - min_val) > 1:\n        return False\n\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n\n    print(is_balanced(root))",
      -8.171875
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    root = Node(3)\n    root.left = Node(2)\n    root.right = Node(1)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n    print(is_balanced(root))",
      -8.2265625
    ],
    [
      "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: 'Node') -> bool:\n        if not root:\n            return True\n\n        if root.data!= self.get_height(root.left) + self.get_height(root.right):\n            return False\n\n        return self.isBalanced(root.left) and self.isBalanced(root.right)\n\n    def get_height(self, root):\n        if not root:\n            return 0\n        else:\n            return 1 + max(self.get_height(root.left), self.get_height(root.right))\n\n\nif __name__ == '__main__':\n    root = Node(10)\n    root.left = Node(20)\n    root.right = Node(30)\n    root.left.left = Node(40)\n    root.left.right = Node(50)\n    root.right.right = Node(60)\n    root.right.left = Node(70)\n\n    print(Solution().isBalanced(root))",
      -8.375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    elif (not root.left) or (not root.right):\n        return False\n    elif abs(root.left.val - root.right.val) > 1:\n        return False\n    else:\n        return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))",
      -8.765625
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef check_balanced(root):\n    return check_balanced_helper(root, float(\"-inf\"), float(\"inf\"))\n\ndef check_balanced_helper(node, min_val, max_val):\n    if node is None:\n        return True\n\n    if node.val <= min_val or node.val >= max_val:\n        return False\n\n    return check_balanced_helper(node.left, min_val, node.val) and check_balanced_helper(node.right, node.val, max_val)\n\ndef test_check_balanced():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    assert check_balanced(root) is True\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    assert check_balanced(root) is False\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n    assert check_balanced(root) is True\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.right.right = Node(4)\n    root.right.right.right = Node(5)\n    assert check_balanced(root) is False\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.right.right = Node(4)\n    root.right.right.right = Node(5)\n    root.left.left = Node(6)\n    assert check_balanced(root) is True\n\nif __name",
      -9.140625
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n    return isBalanced(root.left) and isBalanced(root.right) and abs(getDepth(root.left) - getDepth(root.right)) <= 1\n\n\ndef getDepth(root):\n    if not root:\n        return 0\n    return max(getDepth(root.left), getDepth(root.right)) + 1\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n    if not isBalanced(root.left) and not isBalanced(root.right):\n        return False\n    return isBalanced(root.left) or isBalanced(root.right) and abs(getDepth(root.left) - getDepth(root.right)) <= 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(isBalanced(root))",
      -9.453125
    ],
    [
      "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()",
      -9.6328125
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if root is None:\n        return True\n\n    if root.val!= -1:\n        left = check_balanced_tree(root.left)\n        right = check_balanced_tree(root.right)\n        return left and right and abs(left - right) <= 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n    n3.left = n6\n    n3.right = n7\n    n4.left = n8\n    n4.right = n9\n\n    assert check_balanced_tree(n1) is True",
      -9.703125
    ],
    [
      "from typing import Optional\n\n\nclass Node:\n    def __init__(self, val: int) -> None:\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root: Optional[Node]) -> bool:\n    if not root:\n        return True\n\n    if not check_balanced(root.left) and not check_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n\n    assert check_balanced(root) == True\n    assert check_balanced(None) == True\n    assert check_balanced(Node(2)) == True\n    assert check_balanced(Node(2, Node(1))) == True\n    assert check_balanced(Node(2, Node(1), Node(3))) == False",
      -10.390625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    else:\n        return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(8)\n    root.left.right.left = TreeNode(9)\n    root.left.right.right = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    print(is_balanced(root))",
      -11.21875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    # @param root, a tree node\n    # @return a boolean\n    def isBalanced(self, root):\n        return self.isBalancedHelper(root, float('-inf'), float('inf'))\n\n    def isBalancedHelper(self, root, min_val, max_val):\n        if root is None:\n            return True\n\n        left_is_balanced = self.isBalancedHelper(root.left, min_val, max_val)\n        right_is_balanced = self.isBalancedHelper(root.right, min_val, max_val)\n\n        if left_is_balanced and right_is_balanced:\n            if abs(root.val - min_val) <= abs(root.val - max_val):\n                return True\n\n        return False",
      -11.25
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced(root):\n    if root is None:\n        return True\n    return check_balanced_helper(root.left) and check_balanced_helper(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\ndef check_balanced_helper(root):\n    if root is None:\n        return True\n    return check_balanced_helper(root.left) and check_balanced_helper(root.right) and abs(root.val - root.left.val - root.right.val) <= 1 \\\n           and check_balanced_helper(root.left.left) and check_balanced_helper(root.left.right) and check_balanced_helper(root.right.left) and check_balanced_helper(root.right.right)\n\n\nif __name__ == '__main__':\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    root.right.right.right = TreeNode(6)\n    print(check_balanced(root))",
      -11.296875
    ],
    [
      "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\n\ndef check_balanced_tree(root: TreeNode) -> bool:\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    return check_balanced_tree(root.left) and check_balanced_tree(root.right)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.right.left.left = TreeNode(8)\n    root.right.left.right = TreeNode(9)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    root.right.right.right.left = TreeNode(12)\n    root.right.right.right.right = TreeNode(13)\n    root.right.right.right.right.right = TreeNode(14)\n    root.right.right.right.right.left = TreeNode(15)\n    root.right.right.right.right.left = TreeNode(16)\n    root.right.right.right.right.left = TreeNode(17)\n    root.right.right.right.right.right = TreeNode(18)\n    root.right.right.right.right.right.left = TreeNode(19)\n    root.right.right.right.right.right.left = TreeNode(20)\n    root.right.right.right.right.right.right = TreeNode(21)\n    root.right.right.right.right.right.right.left = TreeNode(22)\n    root.right.right.right.right.right.right.right.right = TreeNode(23)\n    root.right.right.right.right.right.right.right.right.left = TreeNode(24)",
      -11.375
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: Node) -> bool:\n    if root is None:\n        return True\n    if not (root.left is None and root.right is None):\n        return is_balanced(root.left) and is_balanced(root.right) and abs(\n            abs(root.left.val - root.right.val)\n        ) <= 1\n    else:\n        return False\n\n\ndef is_balanced_iterative(root: Node) -> bool:\n    if root is None:\n        return True\n    stack = [(root.left, root.right)]\n    while stack:\n        node_left, node_right = stack.pop()\n        if node_left is None and node_right is None:\n            continue\n        if node_left is not None and node_right is not None:\n            if abs(node_left.val - node_right.val) > 1:\n                return False\n        if node_left is not None:\n            stack.append((node_left.left, node_right.right))\n        if node_right is not None:\n            stack.append((node_left.right, node_right.left))\n    return True\n\n\nif __name__ == \"__main__\":\n    node_1 = Node(1)\n    node_2 = Node(2)\n    node_3 = Node(3)\n    node_4 = Node(4)\n    node_5 = Node(5)\n    node_6 = Node(6)\n    node_7 = Node(7)\n    node_8 = Node(8)\n    node_9 = Node(9)\n    node_10 = Node(10)\n    node_11 = Node(11)\n    node_12 = Node(12)\n    node_13 = Node(13)\n    node_14 = Node(14)\n    node_15 = Node(15)\n    node_16 = Node(16)\n    node_17 = Node(17)\n    node",
      -11.421875
    ],
    [
      "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(get_height(root.left) - get_height(root.right)) <= 1\n\n\ndef get_height(root):\n    if not root:\n        return 0\n\n    left = get_height(root.left)\n    right = get_height(root.right)\n\n    return max(left, right) + 1\n\n\ndef test_is_balanced():\n    root = Node(10)\n    assert is_balanced(root) is True\n\n    root = Node(20)\n    assert is_balanced(root) is False\n\n    root = Node(30)\n    assert is_balanced(root) is False\n\n    root = Node(40)\n    assert is_balanced(root) is False\n\n    root = Node(50)\n    assert is_balanced(root) is False\n\n    root = Node(60)\n    assert is_balanced(root) is False\n\n    root = Node(70)\n    assert is_balanced(root) is False\n\n    root = Node(80)\n    assert is_balanced(root) is False",
      -11.46875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @return a boolean\n    def isBalanced(self, root):\n        if root is None:\n            return True\n\n        return self.isBalancedHelper(root, float('-inf'), float('inf'))\n\n    def isBalancedHelper(self, root, min_val, max_val):\n        if root is None:\n            return True\n\n        if root.val < min_val or root.val > max_val:\n            return False\n\n        return self.isBalancedHelper(root.left, min_val, root.val) and self.isBalancedHelper(root.right, root.val, max_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    root.left.right.left = TreeNode(7)\n    root.left.right.right = TreeNode(8)\n    root.right.left.left = TreeNode(9)\n    root.right.left.right = TreeNode(10)\n    root.right.right.left = TreeNode(11)\n    root.right.right.right = TreeNode(12)\n\n    print(Solution().isBalanced(root))",
      -11.4765625
    ],
    [
      "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced_helper(root, float('-inf'), float('inf'))\n\n\ndef is_balanced_helper(node, low, high):\n    if node is None:\n        return True\n\n    if node.data <= low or node.data >= high:\n        return False\n\n    return is_balanced_helper(node.left, low, node.data) and is_balanced_helper(node.right, node.data, high)\n\n\ndef test_is_balanced():\n    root = Node(1)\n    assert is_balanced(root) == True\n\n    root = Node(2)\n    assert is_balanced(root) == False\n\n    root = Node(3)\n    assert is_balanced(root) == False\n\n    root = Node(4)\n    assert is_balanced(root) == False\n\n    root = Node(5)\n    assert is_balanced(root) == True\n\n    root = Node(6)\n    assert is_balanced(root) == False\n\n    root = Node(7)\n    assert is_balanced(root) == False\n\n    root = Node(8)\n    assert is_balanced(root) == False\n\n    root = Node(9)\n    assert is_balanced(root) == False\n\n    root = Node(10)\n    assert is_balanced(root) == True\n\n    root = Node(11)\n    assert is_balanced(root) == False\n\n    root = Node(12)\n    assert is_balanced(root) == True",
      -11.84375
    ],
    [
      "def is_balanced(root):\n    return check_balance(root)\n\n\ndef check_balance(root):\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False\n\n\ndef test_is_balanced():\n    assert is_balanced(None) is True\n    assert is_balanced(None) is False\n    assert is_balanced(None) is True\n    assert is_balanced(None) is False\n    assert is_balanced(Node(1)) is True\n    assert is_balanced(Node(2)) is False\n    assert is_balanced(Node(3)) is True\n    assert is_balanced(Node(4)) is True\n    assert is_balanced(Node(5)) is True\n    assert is_balanced(Node(6)) is False\n    assert is_balanced(Node(7)) is False\n    assert is_balanced(Node(8)) is False\n    assert is_balanced(Node(9)) is False\n    assert is_balanced(Node(10)) is False\n    assert is_balanced(Node(11)) is True\n    assert is_balanced(Node(12)) is False\n    assert is_balanced(Node(13)) is True\n    assert is_balanced(Node(14)) is True\n    assert is_balanced(Node(15)) is False\n    assert is_balanced(Node(16)) is True\n    assert is_balanced(Node(17)) is False\n    assert is_balanced(Node(18)) is True\n    assert is_balanced(Node(19)) is False\n    assert is_balanced(Node(20)) is False\n    assert is_balanced(Node(21)) is False\n    assert is_balanced(Node(22)) is False\n    assert is_balanced(Node(23)) is False\n    assert is_balanced(Node(24)) is False\n    assert is_balanced(Node(25)) is False\n    assert is_balanced(Node(26)) is True\n    assert is_balanced(Node(27)) is False\n    assert is_balanced(Node(28)) is",
      -12.109375
    ],
    [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(21)\n    root.right.right = TreeNode(25)\n\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()",
      -12.1171875
    ],
    [
      "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not root:\n        return True\n\n    return (\n        is_balanced(root.left)\n        and is_balanced(root.right)\n        and abs(root.val - (\n            (is_balanced(root.left) or is_balanced(root.right)))) < 2\n    )\n\n\ndef test_is_balanced():\n    assert is_balanced(TreeNode(1)) is True\n    assert is_balanced(TreeNode(2)) is False\n    assert is_balanced(TreeNode(3)) is False\n    assert is_balanced(TreeNode(4)) is False\n    assert is_balanced(TreeNode(5)) is False\n    assert is_balanced(TreeNode(6)) is True\n    assert is_balanced(TreeNode(7)) is True\n    assert is_balanced(TreeNode(8)) is False\n    assert is_balanced(TreeNode(9)) is True\n    assert is_balanced(TreeNode(10)) is True\n    assert is_balanced(TreeNode(11)) is True\n    assert is_balanced(TreeNode(12)) is False\n    assert is_balanced(TreeNode(13)) is False\n    assert is_balanced(TreeNode(14)) is False\n    assert is_balanced(TreeNode(15)) is True\n    assert is_balanced(TreeNode(16)) is True\n    assert is_balanced(TreeNode(17)) is True\n    assert is_balanced(TreeNode(18)) is True\n    assert is_balanced(TreeNode(19)) is True\n    assert is_balanced(TreeNode(20)) is True\n    assert is_balanced(TreeNode(21)) is True\n    assert is_balanced(TreeNode(22)) is True\n    assert is_balanced(TreeNode(23)) is False\n    assert is_balanced(TreeNode(24)) is False\n    assert is_balanced(TreeNode(25)) is False\n    assert is_balanced(TreeNode(26)) is False",
      -12.1875
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced(node: Node):\n    if node is None:\n        return True\n\n    if not check_balanced(node.left) or not check_balanced(node.right):\n        return False\n\n    return check_balanced(node.left) and check_balanced(node.right) and abs(node.val - node.left.val) <= abs(node.val - node.right.val)\n\n\nif __name__ == \"__main__\":\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.left.left = Node(4)\n    node.left.right = Node(5)\n    node.right.left = Node(6)\n    node.right.right = Node(7)\n\n    print(check_balanced(node))",
      -12.3828125
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if not root.left and not root.right:\n        return True\n    if not root.left or not root.right:\n        return False\n    if depth == 1:\n        return is_balanced_helper(root.left, depth - 1) and is_balanced_helper(root.right, depth - 1)\n    return is_balanced_helper(root.left.left, depth - 1) and is_balanced_helper(root.left.right, depth - 1) and is_balanced_helper(\n        root.right.left, depth - 1) and is_balanced_helper(root.right.right, depth - 1)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))",
      -12.484375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not (root.left and root.right):\n        return False\n    if abs(root.left.val - root.right.val) > 1:\n        return False\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n    n10 = Node(10)\n    n11 = Node(11)\n    n12 = Node(12)\n    n13 = Node(13)\n    n14 = Node(14)\n    n15 = Node(15)\n    n16 = Node(16)\n    n17 = Node(17)\n    n18 = Node(18)\n    n19 = Node(19)\n    n20 = Node(20)\n    n21 = Node(21)\n    n22 = Node(22)\n    n23 = Node(23)\n    n24 = Node(24)\n    n25 = Node(25)\n    n26 = Node(26)\n    n27 = Node(27)\n    n28 = Node(28)\n    n29 = Node(29)\n    n30 = Node(30)\n    n31 = Node(31)\n    n32 = Node(32)\n    n33 = Node(33)\n    n34 = Node(34)\n    n35 = Node(35)\n    n36 = Node(36)\n    n37 = Node(37)\n    n38 = Node(38)\n    n39 = Node(39)\n    n40 = Node(40)\n    n41 = Node(41)\n    n42 = Node(42",
      -12.9296875
    ],
    [
      "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, True) or is_balanced_helper(root, False)\n\n\ndef is_balanced_helper(root, balanced):\n    if not root:\n        return balanced\n\n    if not is_balanced_helper(root.left, balanced) or not is_balanced_helper(root.right, balanced):\n        return False\n\n    if balanced and root.val!= root.left.val and root.val!= root.right.val:\n        return False\n    else:\n        return is_balanced_helper(root.left, balanced) or is_balanced_helper(root.right, balanced)\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()",
      -13.0859375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if root is None:\n        return True\n\n    if root.val!= 0:\n        return False\n\n    if check_balanced(root.left) and check_balanced(root.right):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = Node(2)\n    root.left = Node(1)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(check_balanced(root))",
      -13.265625
    ],
    [
      "from collections import deque\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n\n    q = deque([(root.left, -float(\"inf\"), 0)])\n    while q:\n        node, low, depth = q.popleft()\n        if node.val!= low:\n            return False\n\n        if depth > 1:\n            return False\n\n        q.append((node.left, low, depth + 1))\n        q.append((node.right, low, depth + 1))\n\n    return True\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(isBalanced(root))",
      -14.109375
    ],
    [
      "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n\n    if not balanced_tree(root.left):\n        return False\n\n    if not balanced_tree(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return balanced_tree(root.left) and balanced_tree(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(balanced_tree(root))",
      -14.484375
    ],
    [
      "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: Node):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) + abs(root.val - root.right.val) <= 1\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n    n10 = Node(10)\n    n11 = Node(11)\n    n12 = Node(12)\n    n13 = Node(13)\n    n14 = Node(14)\n    n15 = Node(15)\n    n16 = Node(16)\n    n17 = Node(17)\n    n18 = Node(18)\n    n19 = Node(19)\n    n20 = Node(20)\n    n21 = Node(21)\n    n22 = Node(22)\n    n23 = Node(23)\n    n24 = Node(24)\n    n25 = Node(25)\n    n26 = Node(26)\n    n27 = Node(27)\n    n28 = Node(28)\n    n29 = Node(29)\n    n30 = Node(30)\n    n31 = Node(31)\n    n32 = Node(32)\n    n33 = Node(33)\n    n34 = Node(34)\n    n35 = Node(35)\n    n36 = Node(36)\n    n37 = Node(37)\n    n38 = Node(38)\n    n39 = Node(39)\n    n40 = Node(40)",
      -15.5
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}