{
  "problem": {
    "task_id": "MBPP/328",
    "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
    "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
    "test_list": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ],
    "challenge_test_list": [],
    "problem_id": 317
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def rotate(arr, n):\n    n = n % len(arr)\n    arr = arr[n:] + arr[:n]\n    return arr\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(rotate(arr, 3))",
      4.98046875
    ],
    [
      "def rotate_left(l):\n    return l[1:] + l[:1]\n\n\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7]))",
      3.86328125
    ],
    [
      "def rotate_list(list, n):\n    if n == 0:\n        return list\n    new_list = list[n:] + list[:n]\n    return new_list\n\n\nlist = [1, 2, 3, 4, 5]\nn = 4\nprint(rotate_list(list, n))",
      3.03125
    ],
    [
      "def rotate(a, n):\n    if n == 0:\n        return a\n    a = rotate(a, n - 1)\n    a.append(a.pop(0))\n    return a\n\ndef main():\n    a = [1,2,3,4,5,6,7]\n    n = 3\n    print(rotate(a, n))\n\nif __name__ == \"__main__\":\n    main()",
      2.73828125
    ],
    [
      "class Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return a list of integers\n    def rotate(self, A, B):\n        A[:] = A[B:] + A[:B]\n        return A\n\na = Solution()\nprint(a.rotate([1, 2, 3, 4, 5], 2))",
      2.69921875
    ],
    [
      "def rotate_list(nums, n):\n    if n == 0:\n        return nums\n    return rotate_list(nums[n:], n - 1) + nums[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 3))",
      2.42578125
    ],
    [
      "def rotate(l, n):\n    n = n % len(l)\n    l.reverse()\n    return l[0:n] + l[n:]\n\nl = [1,2,3]\nn = 3\nprint(rotate(l, n))",
      2.3828125
    ],
    [
      "def rotate(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n]\n\ndef rotate_list(lst, n):\n    return rotate(lst, n)\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    n = 4\n    print(rotate_list(lst, n))\n    print(rotate_list(lst, n))",
      2.07421875
    ],
    [
      "def rotate_left(arr, n):\n    if n == 0:\n        return arr\n    n = n % len(arr)\n    arr[:] = arr[-n:] + arr[:-n]\n    return arr\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(rotate_left(arr, 4))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.8974609375
    ],
    [
      "def rotate_left(lst, n):\n    lst = lst[-n:] + lst[:-n]\n    return lst\n\n\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))",
      1.6865234375
    ],
    [
      "def rotate(list_of_items, n):\n    if n == 0:\n        return list_of_items\n\n    n = n % len(list_of_items)\n\n    list_of_items = list_of_items[n:] + list_of_items[:n]\n    return list_of_items\n\n\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8], 3))",
      1.6171875
    ],
    [
      "def rotate_list(list_, n):\n    return list_[-n:] + list_[:-n]\n\n\nif __name__ == '__main__':\n    assert rotate_list([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]",
      1.568359375
    ],
    [
      "def rotate(nums):\n    l = len(nums)\n    n = l % 2\n    if n == 0:\n        return nums\n\n    for i in range(0, l // 2):\n        nums[i], nums[l - i - 1] = nums[l - i - 1], nums[i]\n    return nums\n\n\nif __name__ == '__main__':\n    print(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      1.5673828125
    ],
    [
      "def rotate_list(list, n):\n    return list[n:] + list[:n]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5], 3))",
      1.56640625
    ],
    [
      "def rotate(arr, n):\n    # Write your code here\n    if n > len(arr):\n        n = n % len(arr)\n    return arr[n:] + arr[:n]\n\narr = [1,2,3,4,5]\nprint(rotate(arr, 3))",
      1.236328125
    ],
    [
      "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        for i in range(k):\n            nums = nums[::-1]\n        for i in range(n - k % n):\n            nums.insert(0, nums.pop())\n        nums.reverse()",
      1.1611328125
    ],
    [
      "def rotate(arr, n):\n    n = n % len(arr)\n    for i in range(n):\n        arr.insert(0, arr.pop())\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    n = 3\n    rotate(arr, n)\n    print(arr)",
      1.1259765625
    ],
    [
      "def rotate(l):\n    n = len(l)\n    for i in range(n // 2):\n        l[i], l[n-1-i] = l[n-1-i], l[i]\n    return l\n\nprint(rotate([1,2,3,4,5,6,7,8,9]))",
      0.98291015625
    ],
    [
      "def rotate(list, n):\n    if n < 0:\n        return list\n    n = n % len(list)\n    return list[n:] + list[:n]\n\n\nprint(rotate([1, 2, 3, 4, 5, 6, 7], 4))",
      0.908203125
    ],
    [
      "def rotate_list(lst, n):\n    return lst[n:] + lst[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 2))",
      0.8271484375
    ],
    [
      "def rotate(list, n):\n    if n == 0:\n        return list\n    else:\n        return rotate(list[n:], n-1) + list[:n]\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5, 6], 3))",
      0.71875
    ],
    [
      "def rotate_left(lst, n):\n    if n == 0:\n        return lst\n    return rotate_left(lst[n:], n - 1) + lst[:n]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6]\n    n = 3\n    print(rotate_left(lst, n))\n\n\nmain()",
      0.69580078125
    ],
    [
      "def rotate_left(l, n):\n    return l[n:] + l[:n]\n\n\ndef rotate_right(l, n):\n    return l[-n:] + l[:-n]\n\n\nprint(rotate_left([1, 2, 3], 2))\nprint(rotate_left([1, 2, 3], 3))\nprint(rotate_left([1, 2, 3], 4))\nprint(rotate_left([1, 2, 3], 5))\nprint(rotate_left([1, 2, 3], 6))\nprint(rotate_left([1, 2, 3], 7))\nprint(rotate_left([1, 2, 3], 8))\nprint(rotate_left([1, 2, 3], 9))\nprint(rotate_left([1, 2, 3], 10))\nprint(rotate_left([1, 2, 3], 11))\nprint(rotate_left([1, 2, 3], 12))\nprint(rotate_left([1, 2, 3], 13))\nprint(rotate_left([1, 2, 3], 14))\nprint(rotate_left([1, 2, 3], 15))\nprint(rotate_left([1, 2, 3], 16))\nprint(rotate_left([1, 2, 3], 17))\nprint(rotate_left([1, 2, 3], 18))\nprint(rotate_left([1, 2, 3], 19))\nprint(rotate_left([1, 2, 3], 20))\nprint(rotate_left([1, 2, 3], 21))\nprint(rotate_left([1, 2, 3], 22))\nprint(rotate_left([1, 2, 3], 23))\nprint(rotate_left([1, 2, 3], 24))\nprint(rotate_left([1, 2, 3], 25))\nprint(rotate_left([1, 2, 3], 26))\nprint(rotate_left([1, 2, 3], 27))\nprint(rotate_left([1, 2, 3], 28))\nprint(rotate_left([1, 2, 3], 29))\nprint(rotate_left([1, 2, 3], 30))\nprint(rotate_left([1, 2, 3], 31))\nprint(rotate_left([1, 2",
      0.473388671875
    ],
    [
      "def rotate_list(l, n):\n    return l[n:] + l[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 3))\nprint(rotate_list([1, 2, 3, 4, 5], 4))\nprint(rotate_list([1, 2, 3, 4, 5], 5))",
      0.197998046875
    ],
    [
      "def rotate(arr, n):\n    return arr[-n:] + arr[:-n]\n\n\nprint(rotate([1, 2, 3, 4, 5], 2))",
      0.1617431640625
    ],
    [
      "def rotate(arr, n):\n    if len(arr) < n:\n        return\n    return arr[-n:] + arr[:-n]\n\nprint(rotate([1,2,3,4,5], 3))",
      0.157470703125
    ],
    [
      "def rotate_list(list, n):\n    if n == 0:\n        return list\n    return rotate_list(list[n:], -n) + list[:n]\n\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      0.1375732421875
    ],
    [
      "def rotate(lst, n):\n\tif n == 0:\n\t\treturn lst\n\t\n\tif n > len(lst):\n\t\tn = len(lst) - n\n\t\n\ttemp = lst[0]\n\tfor i in range(0, n):\n\t\tlst[i] = lst[n - 1]\n\t\n\tlst[n - 1] = temp\n\t\n\treturn lst\n\n\nif __name__ == '__main__':\n\tprint(rotate([1, 2, 3, 4, 5], 3))",
      0.1309814453125
    ],
    [
      "def rotate(lst, n):\n    if n == 0:\n        return lst\n    else:\n        return rotate(lst[n:], n - 1) + lst[:n]\n\n\nprint(rotate([1, 2, 3], 3))",
      0.1282958984375
    ],
    [
      "def rotate(l, n):\n    if not l:\n        return\n    if n == 0:\n        return l\n    l.reverse()\n    l = l[:n] + l[n:]\n    return l\n\nl = [1,2,3]\nprint(rotate(l,3))",
      0.02783203125
    ],
    [
      "def rotate_list(list, n):\n    n = n % len(list)\n    for i in range(n):\n        list.insert(0, list.pop())\n    return list\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6], 2))",
      -0.113525390625
    ],
    [
      "def rotate_list(list_of_nums, n):\n    \"\"\"\n    :type list_of_nums: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return list_of_nums[n:] + list_of_nums[:n]\n\n\nif __name__ == '__main__':\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    rotate_list(test_list, 4)\n    print(test_list)",
      -0.13818359375
    ],
    [
      "def rotate(arr, n):\n    n = n % len(arr)\n    arr = arr[n:] + arr[:n]\n    return arr",
      -0.201171875
    ],
    [
      "def rotate(lst):\n    return lst[::-1]\n\nprint(rotate([1,2,3,4,5,6,7]))",
      -0.201171875
    ],
    [
      "def rotate(arr, n):\n    return arr[n:] + arr[:n]\n\nprint(rotate([1, 2, 3, 4, 5], 3))",
      -0.353271484375
    ],
    [
      "def rotate(nums, k):\n    if k == 0:\n        return nums\n    if k > len(nums):\n        return nums\n    for i in range(len(nums) - k):\n        nums.insert(0, nums.pop())\n    return nums\n\n\nprint(rotate([1, 2, 3, 4, 5], 2))",
      -0.354736328125
    ],
    [
      "def rotate(lst, n):\n    return lst[n:] + lst[:n]\n\nprint(rotate([1, 2, 3], 2))",
      -0.356689453125
    ],
    [
      "def rotate(arr, n):\n    if n == 0:\n        return arr\n\n    n = n % len(arr)\n    arr[0:n], arr[n:] = arr[n:], arr[0:n]\n\n    return arr\n\n\nprint(rotate([1, 2, 3, 4, 5], 3))",
      -0.38427734375
    ],
    [
      "def rotate(l, n):\n    if len(l) > n:\n        l = l[n:] + l[:n]\n    return l\n\n\nl = [1, 2, 3, 4, 5, 6]\nn = 3\nprint(rotate(l, n))",
      -0.44091796875
    ],
    [
      "def rotate(arr, n):\n    return arr[n:] + arr[:n]\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9]\n    n = 3\n    print(rotate(arr, n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.65380859375
    ],
    [
      "def rotate_list(list, n):\n    return list[n:] + list[:n]\n\n\nif __name__ == '__main__':\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 2))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 3))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 4))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 5))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 6))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 7))",
      -0.7509765625
    ],
    [
      "def rotate(arr, n):\n    return arr[n:] + arr[:n]\n\n\nprint(rotate([1, 2, 3, 4, 5], 3))",
      -0.85595703125
    ],
    [
      "def rotate(lst, n):\n    if len(lst) == 0:\n        return\n\n    n = n % len(lst)\n\n    for i in range(n):\n        lst[i] = lst[len(lst) - 1]\n\n    return lst\n\n\nprint(rotate([1, 2, 3, 4, 5], 3))",
      -0.85595703125
    ],
    [
      "class Solution:\n    def rotate(self, nums, n):\n        if n == 0:\n            return nums\n        else:\n            return self.rotate(nums[::-1], n-1) + nums[::-1]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    n = 3\n    print(Solution().rotate(nums, n))",
      -0.85595703125
    ],
    [
      "def rotate_list(list_, num):\n    return list_[num:] + list_[:num]\n\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5]\n    num = 3\n    print(rotate_list(list_, num))",
      -0.8564453125
    ],
    [
      "def rotate(arr, n):\n    arr.reverse()\n    return arr[:n]\n\n\nprint(rotate([1, 2, 3], 3))",
      -0.85693359375
    ],
    [
      "def rotate_left(nums):\n    return nums[::-1]\n\nif __name__ == '__main__':\n    print(rotate_left([1,2,3,4,5,6,7,8,9]))",
      -0.85693359375
    ],
    [
      "def rotate_list(list_, n):\n    for i in range(0, n):\n        list_[i], list_[n-1-i] = list_[n-1-i], list_[i]\n\n    return list_\n\n\nlist_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 3\nrotate_list(list_, n)\nprint(list_)",
      -0.85693359375
    ],
    [
      "def rotate_list(list_1, n):\n    for i in range(n):\n        list_1.insert(0, list_1.pop())\n    return list_1\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5, 6, 7]\n    n = 6\n    list_2 = rotate_list(list_1, n)\n    print(list_2)",
      -0.85693359375
    ],
    [
      "class Solution:\n    def rotate(self, nums: List[int], n: int) -> List[int]:\n        return nums[n:] + nums[:n]",
      -0.85693359375
    ],
    [
      "def rotate(l,n):\n    n = n % len(l)\n    l[n],l[-n] = l[-n],l[n]\n    return l\n\nl = [1,2,3,4,5]\nn = 2\nprint(rotate(l,n))",
      -0.85693359375
    ],
    [
      "def rotate_left(list):\n    list.reverse()\n    return list\n\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6, 7]\n    print(rotate_left(list))",
      -0.85791015625
    ],
    [
      "def rotate(lst, n):\n    lst = lst[n:] + lst[:n]\n    return lst\n\n\nlst = [1, 2, 3, 4, 5]\nn = 3\nprint(rotate(lst, n))",
      -0.85791015625
    ],
    [
      "def rotate(list, n):\n    list.reverse()\n    return list[:n]\n\n\nprint(rotate([1, 2, 3, 4, 5], 3))",
      -0.85791015625
    ],
    [
      "def rotate_list(l: list, n: int) -> list:\n    if n == 0:\n        return l\n\n    n = n % len(l)\n    return l[n:] + l[:n]\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7]\n    print(rotate_list(l, 5))",
      -0.85791015625
    ],
    [
      "def rotate(lst, n):\n    return lst[n:] + lst[:n]\n\n\nprint(rotate([1, 2, 3], 3))",
      -0.85791015625
    ],
    [
      "def rotate(arr, n):\n    # Your code here\n    return arr[-n:] + arr[:-n]\n\n\nprint(rotate([1, 2, 3], 3))",
      -0.85791015625
    ],
    [
      "def rotate_list(arr, n):\n    n = n % len(arr)\n    if n > 0:\n        arr.reverse()\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"Original list: \")\n    print(arr)\n    print(\"Rotate list by: \", n)\n    print(\"Rotated list: \")\n    print(rotate_list(arr, n))",
      -0.8583984375
    ],
    [
      "def rotate(arr, n):\n    for i in range(n):\n        arr.insert(0, arr.pop())\n    return arr\n\n\nprint(rotate([1, 2, 3, 4, 5], 2))",
      -0.8583984375
    ],
    [
      "def rotate_list(arr, n):\n    n = n % len(arr)\n    arr[:] = arr[-n:] + arr[:-n]\n    return arr",
      -0.8583984375
    ],
    [
      "def rotate(nums, n):\n    n = n % len(nums)\n    nums[n:] = nums[:n] + nums[n+1:]\n    return nums\n\nprint(rotate([1,2,3,4], 4))",
      -0.8583984375
    ],
    [
      "def rotate(items, n):\n    return items[-n:] + items[:-n]\n\n\ndef main():\n    print(rotate([1, 2, 3, 4, 5], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def rotate_list(list, n):\n    n = n % len(list)\n    return list[n:] + list[:n]\n\nprint(rotate_list([1,2,3], 3))\nprint(rotate_list([1,2,3], 4))",
      -0.8583984375
    ],
    [
      "def rotate_left(a, n):\n    # your code here\n    return a[n:] + a[:n]\n\n\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7], 2))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        if k > n:\n            k = n - k\n        for i in range(k):\n            nums.insert(0, nums.pop())\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 4, 5]\n    s.rotate(nums, 2)\n    print(nums)",
      -0.85888671875
    ],
    [
      "def rotate(nums, n):\n    for i in range(n):\n        nums.insert(0, nums.pop())\n\nnums = [1,2,3,4,5]\nn = 3\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 2\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 3\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 2\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 3\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 2\nrotate(nums, n)\nprint(nums)\n\nnums = [1,2,3,4,5]\nn = 3\nrotate(nums, n)\nprint(nums)",
      -0.85888671875
    ],
    [
      "def rotate(list_, n):\n    n = n % len(list_)\n    for i in range(n):\n        list_[i], list_[len(list_) - 1 - i] = list_[len(list_) - 1 - i], list_[i]\n    return list_\n\n\nlist_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(rotate(list_, 3))",
      -0.85888671875
    ],
    [
      "def rotate_list(lst, n):\n    for i in range(n):\n        lst.insert(0, lst.pop())\n\n\n\nlst = [1,2,3,4,5,6,7,8,9,10,11]\nrotate_list(lst, 3)\nprint(lst)",
      -0.984375
    ],
    [
      "def rotate_left(lst, n):\n    return lst[-n:] + lst[:-n]\n\n\nprint(rotate_left([1,2,3,4,5], 3))",
      -0.98974609375
    ],
    [
      "def rotate_left(nums, n):\n    if len(nums) == 0:\n        return\n\n    for i in range(n):\n        nums.insert(0, nums.pop())\n\n    return nums\n\nprint(rotate_left([1, 2, 3, 4], 2))\nprint(rotate_left([1, 2, 3, 4, 5], 2))\nprint(rotate_left([1, 2, 3, 4, 5], 1))\nprint(rotate_left([1, 2, 3, 4, 5], 3))",
      -1.3447265625
    ],
    [
      "def rotate(arr, n):\n    if len(arr) <= n:\n        return arr\n    else:\n        return arr[-n:] + arr[:-n]\n\n\nprint(rotate([1, 2, 3, 4, 5, 6, 7], 3))",
      -1.5244140625
    ],
    [
      "def rotate_list(list_, n):\n    if n == 0:\n        return list_\n    list_ = list_[::-1]\n    return list_[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 2))\nprint(rotate_list([1, 2, 3, 4, 5], 1))\nprint(rotate_list([1, 2, 3, 4, 5], -1))\nprint(rotate_list([1, 2, 3, 4, 5], 0))",
      -1.7421875
    ],
    [
      "def rotate(lst, n):\n    n = n % len(lst)\n    for i in range(n):\n        lst[i], lst[len(lst) - 1 - i] = lst[len(lst) - 1 - i], lst[i]\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 4\n    rotate(lst, n)\n    print(lst)",
      -2.193359375
    ],
    [
      "def rotate_list(lst, n):\n    lst = lst[:n] + lst[n:]\n    return lst\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(rotate_list(lst, 3))",
      -2.26171875
    ],
    [
      "def rotate_list(list_to_rotate, n):\n    list_to_rotate.reverse()\n    list_to_rotate = list_to_rotate[:n] + list_to_rotate[n:]\n    return list_to_rotate\n\n\ndef main():\n    list_to_rotate = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 2\n    result = rotate_list(list_to_rotate, n)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      -2.30078125
    ],
    [
      "def rotate(list, n):\n    return list[n:] + list[:n]\n\n\nif __name__ == '__main__':\n    assert rotate([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 3) == [4, 3, 2, 1, 5]\n    assert rotate([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5], -2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -3) == [4, 3, 2, 1, 5]",
      -2.48046875
    ],
    [
      "def rotate(lst, n):\n    return lst[n:] + lst[:n]\n\n\nif __name__ == \"__main__\":\n    assert rotate([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 1) == [4, 5, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]",
      -3.12109375
    ],
    [
      "def rotate(l, n):\n    n = n % len(l)\n    for i in range(n):\n        l.insert(0, l.pop())\n    return l\n\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))",
      -3.255859375
    ],
    [
      "def rotate(list_, n):\n    if n == 0:\n        return list_\n    list_ = list_[n:] + list_[:n]\n    return list_\n\n\ndef test_rotate():\n    assert rotate([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 3) == [3, 4, 5, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 5) == [4, 5, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]",
      -3.837890625
    ],
    [
      "def rotate(a, n):\n    if n == 0:\n        return\n    if n == 1:\n        return a\n    if n % 2 == 0:\n        a[0], a[n] = a[n], a[0]\n    else:\n        a[n // 2], a[n - 1] = a[n - 1], a[n // 2]\n    rotate(a, n // 2)\n    return a\n\na = [1, 2, 3, 4, 5, 6, 7]\nprint(rotate(a, 3))",
      -4.31640625
    ],
    [
      "def rotate_left(my_list, n):\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 0:\n        return []\n    elif n == 1:\n        return my_list\n    else:\n        return my_list[n:] + my_list[:n]\n\n\nif __name__ == \"__main__\":\n    print(rotate_left([1, 2, 3, 4, 5], 2))\n    print(rotate_left([1, 2, 3, 4, 5], -1))\n    print(rotate_left([1, 2, 3, 4, 5], 0))",
      -4.359375
    ],
    [
      "def rotate(list, n):\n    for i in range(0, n):\n        list.insert(0, list.pop())\n    return list\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 3\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 5\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 10\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 20\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 30\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 40\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 50\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 60\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 70\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 80\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 90\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 100\nprint(rotate(list, n))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 110\nprint(rotate(list, n))\n\nlist = [1,",
      -4.8359375
    ],
    [
      "def rotate(l, n):\n    if n == 0:\n        return l\n    else:\n        return rotate(rotate(l, n - 1), n) + l\n\n\ndef test():\n    assert rotate([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5], -2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -3) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -5) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -6) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -7) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -8) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -9) == [5, 4, 3, 2, 1]\n\n\nif __name__ == '__main__':\n    test()",
      -4.90234375
    ],
    [
      "def rotate_left(l, n):\n    if n == 0:\n        return l\n    else:\n        return rotate_left(l[n:], n - 1) + l[:n]\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5, 4]\n    assert rotate_left([1, 2, 3, 4, 5], -4) == [1, 2, 3, 5, 4]\n    assert rotate_left([1, 2, 3, 4, 5], -2) == [1, 2, 3, 5, 4]",
      -5.0859375
    ],
    [
      "def rotate_left(list, n):\n    return list[-n:] + list[:-n]\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\n\n\nif __name__ == '__main__':\n    test_rotate_left()",
      -6.09765625
    ],
    [
      "def rotate_list(lst, n):\n    n = n % len(lst)\n    for i in range(n):\n        lst.append(lst.pop())\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 3\n    print(rotate_list(lst, n))",
      -6.109375
    ],
    [
      "def rotate_left(list, n):\n    if n > len(list):\n        return list\n\n    return list[-n:] + list[:-n]\n\n\ndef rotate_right(list, n):\n    if n > len(list):\n        return list\n\n    return list[-n:] + list[:-n]\n\n\ndef rotate_right_2(list, n):\n    if n > len(list):\n        return list\n\n    return list[-n:] + list[:-n]\n\n\ndef rotate_right_3(list, n):\n    if n > len(list):\n        return list\n\n    return list[-n:] + list[:-n]\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(rotate_right(list_1, 2))\n    print(rotate_right(list_2, 2))\n    print(rotate_right(list_3, 2))\n    print(rotate_right(list_4, 2))\n\n    print(rotate_right_2(list_1, 2))\n    print(rotate_right_2(list_2, 2))\n    print(rotate_right_2(list_3, 2))\n    print(rotate_right_2(list_4, 2))\n\n    print(rotate_right_3(list_1, 2))\n    print(rotate_right_3(list_2, 2))\n    print(rotate_right_3(list_3, 2))\n    print(rotate_right_3(list_4, 2))",
      -6.2421875
    ],
    [
      "def rotate_left(list):\n    if len(list) == 0:\n        return list\n    else:\n        return rotate_left(list[1:]) + list[:1]\n\n\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -6.359375
    ],
    [
      "class Solution(object):\n    def rotate(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = n % len(nums)\n        nums[:] = nums[-n:] + nums[:-n]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5,6,7]\n    print(sol.rotate(nums, 4))",
      -6.90234375
    ],
    [
      "def rotate_left(arr, n):\n    if n == 0:\n        return\n\n    # Find the index of the last element\n    last = len(arr) - 1\n\n    # Rotate the elements of the list\n    for i in range(n):\n        arr[last], arr[i] = arr[i], arr[last]\n\n        last -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 3\n    print(rotate_left(arr, n))",
      -7.4453125
    ],
    [
      "def rotate(list, n):\n    if n == 0:\n        return list\n    if n == 1:\n        return list[n:] + list[:n]\n    return rotate(rotate(list[n:], n-1), n-1) + rotate(list[:n], n-1)\n\n\nprint(rotate([1, 2, 3, 4, 5, 6, 7, 8], 3))",
      -7.8828125
    ],
    [
      "class Solution(object):\n    def rotate(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = n % len(nums)\n        if n > 0:\n            nums[:] = nums[len(nums) - n:] + nums[:len(nums) - n]\n        else:\n            nums[:] = nums[len(nums) - n:] + nums[:len(nums) - n]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    Solution().rotate(nums, 1)\n    assert nums == [5, 4, 3, 2, 1]",
      -7.88671875
    ],
    [
      "def rotate(l, n):\n    n = n % len(l)\n    l[n:] = l[:n] + l[n+1:]\n    return l\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(rotate(l, 1))\n    print(rotate(l, 3))\n    print(rotate(l, 5))",
      -8.015625
    ],
    [
      "def rotate(list_of_items):\n    length = len(list_of_items)\n\n    for i in range(length):\n        list_of_items[i], list_of_items[length-i-1] = list_of_items[length-i-1], list_of_items[i]\n\n    return list_of_items\n\n\nlist_of_items = [1, 2, 3, 4, 5, 6, 7]\nprint(rotate(list_of_items))",
      -8.1484375
    ],
    [
      "def rotate_list(arr, n):\n    if n == 0:\n        return arr\n    if n == 1:\n        return arr[::-1]\n    return rotate_list(arr[::-1], n-1) + rotate_list(arr, n-1)\n\n\nif __name__ == \"__main__\":\n    assert rotate_list([1, 2, 3, 4, 5, 6, 7], 2) == [5, 6, 7, 1, 2, 3, 4]\n    assert rotate_list([1, 2, 3, 4, 5, 6, 7], 1) == [5, 6, 7, 1, 2, 3, 4]",
      -8.90625
    ],
    [
      "class Solution(object):\n    def rotate(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = n % len(nums)\n        for i in range(n):\n            nums[i] = nums[len(nums) - 1 - i]\n\n# Tests\nassert Solution().rotate([1, 2, 3, 4], 2) == [3, 4, 2, 1]\nassert Solution().rotate([1, 2, 3, 4], 3) == [4, 2, 3, 1]\nassert Solution().rotate([1, 2, 3, 4], 4) == [2, 3, 4, 1]",
      -10.3046875
    ],
    [
      "def rotate(list, n):\n    if n == 0:\n        return list\n    if n > len(list):\n        n = len(list) - n\n    return rotate(list[:n], n) + list[n:]\n\n\ndef test_rotate():\n    assert rotate([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -2) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -4) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -5) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -6) == [5, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5], -7) == [5, 4, 3, 2, 1]",
      -10.8984375
    ],
    [
      "def rotate_list(l, n):\n    n = n % len(l)\n    l[n:] = l[:n]\n    l[:n] = l[-n:]\n    l.sort()\n    return l\n\n\nif __name__ == \"__main__\":\n    assert rotate_list([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate_list([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    assert rotate_list([1, 2, 3, 4, 5], 0) == [4, 3, 2, 1, 5]\n    assert rotate_list([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n    assert rotate_list([1, 2, 3, 4, 5], 4) == [3, 2, 1, 5, 4]\n    assert rotate_list([1, 2, 3, 4, 5], 5) == [1, 2, 4, 5, 3]\n    assert rotate_list([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    assert rotate_list([1, 2, 3, 4, 5], 7) == [1, 2, 3, 4, 5]\n    assert rotate_list([1, 2, 3, 4, 5], 8) == [1, 2, 3, 4, 5]",
      -11.7265625
    ],
    [
      "def rotate(nums, n):\n    if n == 0:\n        return nums\n    else:\n        return rotate(nums[::-1], n - 1) + nums[:n]\n\n\nif __name__ == \"__main__\":\n    assert rotate([1, 2, 3, 4, 5, 6], 2) == [5, 6, 4, 3, 2, 1]\n    assert rotate([1, 2, 3, 4, 5, 6], 3) == [1, 6, 5, 4, 3, 2]\n    assert rotate([1, 2, 3, 4, 5, 6], 4) == [1, 2, 3, 5, 6, 4]\n    assert rotate([1, 2, 3, 4, 5, 6], 5) == [1, 2, 4, 6, 3, 5]\n    assert rotate([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 5, 4, 6]",
      -12.6484375
    ],
    [
      "def rotate_left(lst, n):\n    if n == 0:\n        return lst\n\n    for i in range(n):\n        lst[i] = lst[n - 1 - i]\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    n = 4\n    print(\"Original list:\", lst)\n    print(\"Rotated list:\", rotate_left(lst, n))",
      -15.03125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}