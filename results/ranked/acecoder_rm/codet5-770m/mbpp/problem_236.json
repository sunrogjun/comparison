{
  "problem": {
    "task_id": "MBPP/247",
    "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
    "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
    "test_list": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ],
    "challenge_test_list": [],
    "problem_id": 236
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if s == \"\":\n            return 0\n        n = len(s)\n        dp = [[0 for i in range(n)] for j in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][0]\n\n\ns = Solution()\nprint s.longestPalindromeSubseq(\"babad\")",
      6.48828125
    ],
    [
      "def longest_palindrome(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == s[-1]:\n        return 1 + longest_palindrome(s[1:-1])\n    return max(longest_palindrome(s[:-1]), longest_palindrome(s[1:]))\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"babad\"))\n    print(longest_palindrome(\"abb\"))\n    print(longest_palindrome(\"ababab\"))",
      3.52734375
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n\n\nif __name__ == '__main__':\n    assert longestPalindrome('babad') == 2\n    assert longestPalindrome('abab') == 2\n    assert longestPalindrome('cbbd') == 3",
      3.392578125
    ],
    [
      "def longest_palindrome(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    if s[0] == s[-1]:\n        return 1\n    return max([longest_palindrome(s[i:]) for i in range(n)])\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"babad\"))",
      3.244140625
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n\n    return dp[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    s = \"ababcc\"\n    print(longestPalindrome(s))",
      2.984375
    ],
    [
      "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dp = [[False] * (len(s) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][i] = True\n        for i in range(len(s) + 1):\n            for j in range(i + 1, len(s) + 1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestPalindrome(\"bbbb\")",
      2.501953125
    ],
    [
      "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        dp = [[0 for x in range(n)] for y in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[n-1][n-1]\n\n\nprint(Solution().longestPalindrome(\"babad\"))",
      1.9384765625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    n = len(s)\n    if n < 2:\n        return 0\n\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print(longestPalindromeSubsequence(\"babad\"))\n    print(longestPalindromeSubsequence(\"abbb\"))\n    print(longestPalindromeSubsequence(\"aabbb\"))\n    print(longestPalindromeSubsequence(\"abc\"))\n    print(longestPalindromeSubsequence(\"abba\"))\n    print(longestPalindromeSubsequence(\"aabba\"))\n    print(longestPalindromeSubsequence(\"abbbbb\"))\n    print(longestPalindromeSubsequence(\"aababaab\"))",
      1.701171875
    ],
    [
      "def longest_palindrome_subsequence(s):\n    s_len = len(s)\n    if s_len == 0:\n        return 0\n    if s_len == 1:\n        return 1\n    dp = [[0 for _ in range(s_len+1)] for _ in range(s_len+1)]\n    for i in range(1, s_len+1):\n        dp[i][i] = 1\n    for i in range(1, s_len+1):\n        for j in range(1, s_len+1):\n            if i == j:\n                dp[i][j] = 1\n                continue\n            if s[i-1] == s[j-1]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[s_len][s_len]\n\n\nprint(longest_palindrome_subsequence(\"aabb\"))\nprint(longest_palindrome_subsequence(\"babad\"))\nprint(longest_palindrome_subsequence(\"aabbccccc\"))\nprint(longest_palindrome_subsequence(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
      1.4033203125
    ],
    [
      "def longest_palindrome_subsequence(s):\n    if s == \"\":\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n\n    l = 1\n    r = 2\n    m = s[0]\n    for i in range(len(s)):\n        if i == 0 or s[i]!= s[i-1]:\n            l = 2\n            r = 2\n            break\n        else:\n            l = max(l, 2)\n            r = max(r, 2)\n    return l + r\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome_subsequence(\"abcd\"))\n    print(longest_palindrome_subsequence(\"abcdab\"))\n    print(longest_palindrome_subsequence(\"babad\"))\n    print(longest_palindrome_subsequence(\"abcc\"))\n    print(longest_palindrome_subsequence(\"cbbd\"))\n    print(longest_palindrome_subsequence(\"ababab\"))",
      1.341796875
    ],
    [
      "def longest_palindromic_subsequence(s):\n    n = len(s)\n    if n <= 1:\n        return n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][0]\n\n\nif __name__ == \"__main__\":\n    print(longest_palindromic_subsequence(\"babad\"))\n    print(longest_palindromic_subsequence(\"abab\"))\n    print(longest_palindromic_subsequence(\"aa\"))\n    print(longest_palindromic_subsequence(\"cbba\"))",
      1.333984375
    ],
    [
      "def longestPalindrome(string):\n    if not string:\n        return 0\n    length = len(string)\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n    for i in range(length):\n        dp[i][i] = 1\n    for i in range(length):\n        for j in range(i+1, length):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][length-1]\n\n\nif __name__ == \"__main__\":\n    string = \"babad\"\n    print(longestPalindrome(string))\n\n    string = \"aab\"\n    print(longestPalindrome(string))\n\n    string = \"cbbd\"\n    print(longestPalindrome(string))",
      1.259765625
    ],
    [
      "def longest_palindrome(s):\n    # write your code here\n    n = len(s)\n    res = 0\n    table = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n            res = max(res, table[i][j])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"babad\"))",
      1.2431640625
    ],
    [
      "def longestPalindrome(s):\n    length = len(s)\n    if length <= 1:\n        return length\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n    dp[0][0] = 1\n    for i in range(1, length):\n        for j in range(i):\n            if s[j] == s[i]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n\n\nprint(longestPalindrome(\"babad\"))",
      1.193359375
    ],
    [
      "class Solution:\n    def longestPalindromeSub(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) <= 1:\n            return len(s)\n\n        dp = [[0] * len(s) for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = 1\n\n        for i in range(len(s) - 1, -1, -1):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n        return dp[0][len(s) - 1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestPalindromeSub(\"babad\") == 5\n    assert Solution().longestPalindromeSub(\"aab\") == 2\n    assert Solution().longestPalindromeSub(\"abcd\") == 3\n    assert Solution().longestPalindromeSub(\"cbbd\") == 2\n    assert Solution().longestPalindromeSub(\"cbbdab\") == 1\n    assert Solution().longestPalindromeSub(\"cbbdabcd\") == 3\n    assert Solution().longestPalindromeSub(\"cbbdabcdab\") == 3",
      1.12890625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    # Write your code here\n    if len(s) == 1:\n        return s\n    longest = [0] * len(s)\n    longest[0] = 1\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[j] == s[i]:\n                if longest[j] > longest[i]:\n                    longest[i] = longest[j] + 1\n    return longest\n\n\nprint(longestPalindromeSubsequence(\"babad\"))",
      0.98291015625
    ],
    [
      "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        if not s:\n            return 0\n\n        n = len(s)\n        dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            dp[i][i] = 2\n\n        for i in range(1, n+1):\n            for j in range(i, n+1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[n][n]",
      0.982421875
    ],
    [
      "def longest_palindrome_subsequence(string):\n    return longest_palindrome_subsequence_helper(string, 0, len(string) - 1)\n\n\ndef longest_palindrome_subsequence_helper(string, start, end):\n    if start == end:\n        return 1\n    if start > end:\n        return 0\n    if string[start] == string[end]:\n        return 2 + longest_palindrome_subsequence_helper(string, start + 1, end - 1)\n    return max(\n        longest_palindrome_subsequence_helper(string, start + 1, end - 1),\n        longest_palindrome_subsequence_helper(string, start, end - 1),\n    )\n\n\nprint(longest_palindrome_subsequence(\"cbaebabacd\"))",
      0.98193359375
    ],
    [
      "def longest_palindrome(s: str) -> int:\n    longest_length = 0\n    longest_string = \"\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j] and (i - j) > longest_length:\n                longest_string = s[i:j]\n                longest_length = i - j\n    return longest_length, longest_string\n\nprint(longest_palindrome(\"babad\"))\nprint(longest_palindrome(\"bb\"))\nprint(longest_palindrome(\"a\"))\nprint(longest_palindrome(\"babad\"))\nprint(longest_palindrome(\"ab\"))\nprint(longest_palindrome(\"ab\"))\nprint(longest_palindrome(\"abba\"))\nprint(longest_palindrome(\"abba\"))\nprint(longest_palindrome(\"aabba\"))",
      0.892578125
    ],
    [
      "def longest_palindrome_subsequence(s):\n    max_length = 0\n    for i in range(len(s)):\n        if i == 0 or s[i]!= s[i-1]:\n            start = i\n            end = i\n            while start!= end:\n                if s[start] == s[end]:\n                    end -= 1\n                else:\n                    break\n            if end == i:\n                max_length = end - start + 1\n    return max_length\n\n\nprint(longest_palindrome_subsequence(\"babad\"))",
      0.80615234375
    ],
    [
      "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        if len(s) < 2:\n            return 0\n\n        if s == s[::-1]:\n            return 1\n\n        ans = 1\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    if j-i > ans:\n                        ans = j-i\n\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestPalindrome(\"babad\") == 3\n    assert s.longestPalindrome(\"abab\") == 1\n    assert s.longestPalindrome(\"\") == 0",
      0.72119140625
    ],
    [
      "def longest_palindrome_subsequence(s: str) -> int:\n    n = len(s)\n    max_len = 0\n    max_sub = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (j - i) > max_len:\n                max_len = j - i\n                max_sub = s[i:j + 1]\n    return max_len, max_sub\n\n\nprint(longest_palindrome_subsequence(\"abab\"))",
      0.6943359375
    ],
    [
      "def longest_palindrome_subsequence(str):\n    if len(str) == 0:\n        return 0\n    dp = [[0 for _ in range(len(str))] for _ in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert longest_palindrome_subsequence(\"babad\") == 3",
      0.60595703125
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]\n\n\nprint(longestPalindrome(\"babad\"))\nprint(longestPalindrome(\"ababad\"))\nprint(longestPalindrome(\"babadabab\"))\nprint(longestPalindrome(\"aababababab\"))",
      0.44287109375
    ],
    [
      "def longestPalindromeSubsequence(str):\n    if len(str) <= 1:\n        return len(str)\n\n    dict = {}\n    for i in range(len(str)):\n        dict[str[i]] = 0\n\n    longest = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if dict[str[i]] == 0:\n                    dict[str[j]] = 1\n                else:\n                    dict[str[j]] += 1\n            else:\n                break\n\n        if dict[str[i]] > longest:\n            longest = dict[str[i]]\n\n    return longest\n\n\nprint(longestPalindromeSubsequence(\"babad\"))\nprint(longestPalindromeSubsequence(\"babadab\"))\nprint(longestPalindromeSubsequence(\"ababa\"))",
      0.01812744140625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    longest = 0\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if j - i > longest:\n                longest = j - i\n            i += 1\n            j -= 1\n    return longest\n\nprint(longestPalindromeSubsequence(\"abab\"))",
      -0.1884765625
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n\nprint(longestPalindrome(\"babad\"))",
      -0.37744140625
    ],
    [
      "def longest_palindrome_subsequence(s):\n    n = len(s)\n    if n < 2:\n        return n\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n - 1][n - 1]\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome_subsequence(\"babad\"))\n    print(longest_palindrome_subsequence(\"a\"))\n    print(longest_palindrome_subsequence(\"abbb\"))\n    print(longest_palindrome_subsequence(\"aba\"))\n    print(longest_palindrome_subsequence(\"aab\"))\n    print(longest_palindrome_subsequence(\"cbbd\"))\n    print(longest_palindrome_subsequence(\"cbbdab\"))\n    print(longest_palindrome_subsequence(\"babab\"))\n    print(longest_palindrome_subsequence(\"bbbbbab\"))\n    print(longest_palindrome_subsequence(\"bbbbbbbbb\"))\n    print(longest_palindrome_subsequence(\"bababa\"))\n    print(longest_palindrome_subsequence(\"aabb\"))\n    print(longest_palindrome_subsequence(\"abbaba\"))\n    print(longest_palindrome_subsequence(\"ababababab\"))\n    print(longest_palindrome_subsequence(\"abababababab\"))\n    print(longest_palindrome_subsequence(\"abababababab\"))\n    print(longest_palindrome_subsequence(\"ababababababab",
      -0.52587890625
    ],
    [
      "def longestPalindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    max_length = 1\n    max_length_index = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                if j - i > max_length:\n                    max_length = j - i\n                    max_length_index = i\n    return max_length_index\n\n\nif __name__ == \"__main__\":\n    assert longestPalindrome(\"bbb\") == 2\n    assert longestPalindrome(\"bb\") == 1\n    assert longestPalindrome(\"ab\") == 1\n    assert longestPalindrome(\"a\") == 1\n    assert longestPalindrome(\"aa\") == 1\n    assert longestPalindrome(\"aab\") == 3",
      -0.70263671875
    ],
    [
      "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0]!= s[-1]:\n            return 2\n        res = 1\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                res += 1\n        return res",
      -0.85595703125
    ],
    [
      "class Solution(object):\n    def longestPalindromeSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        length = len(s)\n        for i in range(length):\n            for j in range(i, length):\n                if s[i] == s[j]:\n                    if i!= j:\n                        res = max(res, 2 * (i - j))\n                else:\n                    break\n        return res\n\ns = Solution()\nprint(s.longestPalindromeSubsequence(\"babad\"))\nprint(s.longestPalindromeSubsequence(\"babadab\"))\nprint(s.longestPalindromeSubsequence(\"babadabaa\"))",
      -0.85693359375
    ],
    [
      "def longestPalindrome(s):\n    # Write your code here\n    longest = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] == s[j]:\n                if j - i > longest:\n                    longest = j - i\n    return longest\n\n\nprint(longestPalindrome(\"babad\"))",
      -0.85791015625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    if not s:\n        return 0\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                res = max(res, j-i+1)\n    return res\n\n\n\nprint(longestPalindromeSubsequence(\"babad\"))",
      -0.85791015625
    ],
    [
      "def longest_palindrome_subsequence(s):\n    n = len(s)\n    longest = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if s[i] == s[j] and i + 1 == j:\n                continue\n            if s[i]!= s[j]:\n                if i + 1 > longest:\n                    longest = i + 1\n    return longest\n\n\nif __name__ == '__main__':\n    print(longest_palindrome_subsequence(\"babad\"))\n    print(longest_palindrome_subsequence(\"cbbd\"))",
      -0.8583984375
    ],
    [
      "def longestPalindromeSubsequence(s):\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j+1])\n    return dp[0][n-1]\n\nprint(longestPalindromeSubsequence('babad'))",
      -0.8583984375
    ],
    [
      "def longestPalindrome(s):\n    if len(s) <= 1:\n        return 0\n\n    longest = 0\n    for i in range(1, len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and (i - j > longest):\n                longest = i - j\n\n    return longest\n\n\nprint(longestPalindrome(\"babad\"))",
      -0.8583984375
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n-1][n-1]\n\n\nif __name__ == '__main__':\n    s = \"babad\"\n    print(longestPalindrome(s))",
      -0.8583984375
    ],
    [
      "def longestPalindromeSubsequence(str):\n    n = len(str)\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i - 1] == str[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n\nprint(longestPalindromeSubsequence(\"cbbd\"))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        n = len(s)\n        dp = [[0 for i in range(n)] for i in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[n-1][n-1]\n\ns = Solution()\nprint(s.longestPalindrome(\"babad\"))",
      -0.8583984375
    ],
    [
      "def longestPalindromeSubsequence(s):\n    max_length = 0\n    max_index = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                if j - i > max_length:\n                    max_length = j - i\n                    max_index = i\n    return s[max_index:max_index+max_length+1]\n\n\nif __name__ == '__main__':\n    print(longestPalindromeSubsequence('babad'))",
      -0.8583984375
    ],
    [
      "def longestPalindromeSubsequence(s):\n    longest_len = 0\n    longest_str = ''\n    for i in range(len(s)):\n        if i == 0:\n            longest_str = s[i]\n            longest_len = 1\n        else:\n            if s[i] == s[i-1]:\n                longest_len += 1\n            else:\n                longest_str += s[i]\n                longest_len = 2\n    return longest_str, longest_len\n\n\nif __name__ == \"__main__\":\n    print(longestPalindromeSubsequence('babad'))\n    print(longestPalindromeSubsequence('cbbd'))",
      -0.8583984375
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    if n == 1:\n        return 0\n\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n - 1][n - 1]\n\n\ndef main():\n    s = \"babad\"\n    print(longestPalindrome(s))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def longestPalindromeSubsequence(s):\n    length = len(s)\n    if length < 2:\n        return s\n\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n\n    for i in range(length):\n        for j in range(length):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[length-1][length-1]\n\n\ndef main():\n    string = \"abccc\"\n    print(longestPalindromeSubsequence(string))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "class Solution:\n    def longestPalindromeSubsequence(self, s: str) -> int:\n        n = len(s)\n        max_len = 0\n        max_len_index = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    if i - j > max_len:\n                        max_len = i - j\n                        max_len_index = (i, j)\n        return max_len",
      -0.86083984375
    ],
    [
      "def longest_palindrome(s):\n    max_len = 0\n    max_palindrome = ''\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i == j:\n                continue\n            if s[i] == s[j]:\n                if j - i > max_len:\n                    max_len = j - i\n                    max_palindrome = s[i:j+1]\n    return max_palindrome\n\nprint(longest_palindrome('abba'))",
      -0.86083984375
    ],
    [
      "def longest_palindrome(s: str) -> int:\n    n = len(s)\n    max_len = 1\n    longest = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j] and (i - j) > max_len:\n                max_len = i - j\n                longest = i - j\n    return longest\n\n\nif __name__ == '__main__':\n    s = 'aabcccccaaa'\n    print(longest_palindrome(s))",
      -0.9228515625
    ],
    [
      "def longestPalindrome(s):\n    length = len(s)\n    if length == 0:\n        return 0\n    if length == 1:\n        return 1\n    if length == 2:\n        return 2\n    dp = [[0 for _ in range(length + 1)] for _ in range(length + 1)]\n    for i in range(1, length + 1):\n        for j in range(1, length + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[length][length]\n\n\nprint(longestPalindrome(\"babad\"))",
      -1.009765625
    ],
    [
      "def longest_palindrome(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n\n\nprint(longest_palindrome(\"babad\"))",
      -1.1337890625
    ],
    [
      "def longestPalindromeSubsequence(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    if not str:\n        return 0\n    dp = [[0 for _ in range(len(str))] for _ in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i - 1][j - 1])\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert longestPalindromeSubsequence(\"babad\") == 3\n    assert longestPalindromeSubsequence(\"abba\") == 2\n    assert longestPalindromeSubsequence(\"ab\") == 1\n    assert longestPalindromeSubsequence(\"aa\") == 1",
      -1.28515625
    ],
    [
      "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        # check for duplicate char\n        if s[0]!= s[-1]:\n            return 0\n\n        # check for palindrome\n        if s[0] == s[-1]:\n            return 1\n\n        # find the length of each subsequence\n        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n\n        return dp[0][0]",
      -1.310546875
    ],
    [
      "def longest_palindrome(s):\n    if len(s) == 0:\n        return 0\n    res = 0\n    dp = [[0 for x in range(len(s)+1)] for x in range(len(s)+1)]\n    dp[0][0] = 1\n    for i in range(1, len(s)+1):\n        for j in range(1, len(s)+1):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            res = max(res, dp[i][j])\n    return res",
      -1.3408203125
    ],
    [
      "def longest_palindromic_subsequence(str):\n    if len(str) == 1:\n        return 1\n\n    dp = [1 for _ in range(len(str))]\n    dp[0] = 0\n\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i] = max(dp[i], dp[j] + 2)\n\n    return dp[len(str)]\n\n\nprint(longest_palindromic_subsequence(\"aab\"))",
      -2.228515625
    ],
    [
      "def longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for j in range(n):\n        for i in range(j):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    s = \"cbaebabacd\"\n    print(longest_palindromic_subsequence(s))",
      -2.240234375
    ],
    [
      "def find_longest_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n\n    dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = 2 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\n\nif __name__ == '__main__':\n    assert find_longest_palindrome(\"bbb\") == 2\n    assert find_longest_palindrome(\"aba\") == 2\n    assert find_longest_palindrome(\"cbbd\") == 3\n    assert find_longest_palindrome(\"cbbdab\") == 3\n    assert find_longest_palindrome(\"cbbdaba\") == 3",
      -2.28125
    ],
    [
      "def longestPalindromeSubsequence(s):\n    n = len(s)\n    dp = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n - 1][n - 1]\n\n\nif __name__ == '__main__':\n    s = 'babad'\n    print(longestPalindromeSubsequence(s))",
      -2.4375
    ],
    [
      "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        if not s:\n            return 0\n\n        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, i, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = 2 + dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n\n        return dp[0][0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n\n    assert s.longestPalindromeSubseq(\"babad\") == 2\n    assert s.longestPalindromeSubseq(\"bbaa\") == 1\n    assert s.longestPalindromeSubseq(\"aaab\") == 2\n    assert s.longestPalindromeSubseq(\"bb\") == 1\n    assert s.longestPalindromeSubseq(\"aab\") == 1\n    assert s.longestPalindromeSubseq(\"aaba\") == 1",
      -2.666015625
    ],
    [
      "class Solution:\n    def longestPalindromeSubsequence(self, s: str) -> int:\n        dp = [[False for _ in range(len(s)+1)] for _ in range(len(s)+1)]\n        for i in range(1, len(s)+1):\n            dp[i][i] = True\n        for i in range(1, len(s)+1):\n            for j in range(1, len(s)+1):\n                if s[i-1] == s[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[len(s)][len(s)]\n\n\ns = Solution()\nprint(s.longestPalindromeSubsequence(\"babad\"))",
      -2.85546875
    ],
    [
      "class Solution(object):\n    def longestPalindromeSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        n = len(s)\n        dp = [[False for _ in range(n+1)] for _ in range(n+1)]\n        dp[0][0] = True\n        for i in range(1, n+1):\n            dp[i][0] = True\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                if s[i-j] == s[j-i]:\n                    dp[i][j] = dp[i-j-1][j-i]\n                else:\n                    dp[i][j] = max(dp[i-j-1][j-i], dp[i-j][j-i])\n        return dp[n][n]\n\n\ns = Solution()\nprint(s.longestPalindromeSubsequence(\"babad\"))",
      -3.044921875
    ],
    [
      "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        n = len(s)\n        dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        for i in range(1, n+1):\n            dp[i][i] = 1\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if s[i-1] == s[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[n][n]",
      -3.09375
    ],
    [
      "def longest_palindrome_subsequence(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(n):\n            if s[i] == s[j] and i + 1 < j + 1:\n                dp[i][j] = dp[i + 1][j + 1] + 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]\n\n\nif __name__ == '__main__':\n    s = 'babad'\n    print(longest_palindrome_subsequence(s))",
      -3.23046875
    ],
    [
      "def longestPalindromeSubsequence(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j] and (j-i) > len(longest):\n                longest = s[i:j]\n    return longest\n\nprint(longestPalindromeSubsequence(\"bbbbb\"))\nprint(longestPalindromeSubsequence(\"bb\"))\nprint(longestPalindromeSubsequence(\"a\"))\nprint(longestPalindromeSubsequence(\"aa\"))\nprint(longestPalindromeSubsequence(\"aab\"))\nprint(longestPalindromeSubsequence(\"aaba\"))\nprint(longestPalindromeSubsequence(\"abba\"))\nprint(longestPalindromeSubsequence(\"aaabba\"))\nprint(longestPalindromeSubsequence(\"abbbba\"))\nprint(longestPalindromeSubsequence(\"bbbbbab\"))\nprint(longestPalindromeSubsequence(\"babab\"))\nprint(longestPalindromeSubsequence(\"abab\"))\nprint(longestPalindromeSubsequence(\"ababa\"))\nprint(longestPalindromeSubsequence(\"ababaab\"))\nprint(longestPalindromeSubsequence(\"aababab\"))\nprint(longestPalindromeSubsequence(\"aababab\"))\nprint(longestPalindromeSubsequence(\"aabababab\"))\nprint(longestPalindromeSubsequence(\"aababababab\"))\nprint(longestPalindromeSubsequence(\"aabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
      -3.478515625
    ],
    [
      "def longestPalindromeSubsequence(str):\n    if len(str) <= 1:\n        return len(str)\n\n    dp = [[0] * len(str) for _ in range(len(str))]\n    max_len = 0\n\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n                max_len = max(max_len, dp[i][j])\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(longestPalindromeSubsequence(\"cbaebabacd\"))\n    print(longestPalindromeSubsequence(\"cbacdbacda\"))\n    print(longestPalindromeSubsequence(\"\"))",
      -3.5078125
    ],
    [
      "def longestPalindrome(s):\n    n = len(s)\n    max_len = 0\n    max_len_index = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (i - j < max_len or (i - j == max_len and s[i] == s[j])):\n                max_len = max(max_len, (i - j + 1))\n                max_len_index = max(max_len_index, i - j + 1)\n    return max_len, max_len_index\n\nif __name__ == \"__main__\":\n    s = \"abcabcbb\"\n    print(longestPalindrome(s))",
      -3.580078125
    ],
    [
      "def longest_palindromic_subsequence(str):\n    if len(str) < 2:\n        return len(str)\n    longest = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                if i - longest > 0 and j - longest > 0:\n                    longest = max(longest, i - longest, j - longest)\n                elif i - longest > 0:\n                    longest = max(longest, i - longest)\n                elif j - longest > 0:\n                    longest = max(longest, j - longest)\n    return longest\n\nif __name__ == \"__main__\":\n    print(longest_palindromic_subsequence(\"babad\"))",
      -3.83984375
    ],
    [
      "class Solution(object):\n    def longestPalindromeSub(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n\n        m = {}\n        m[s[0]] = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                m[s[i]] = 2\n            else:\n                m[s[i]] = 1\n\n        for i in range(1, len(s)):\n            if s[i] in m and i - m[s[i]] > m[s[i-1]]:\n                m[s[i]] = i - m[s[i-1]]\n\n        return m[s[-1]]\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.longestPalindromeSub(\"babad\") == 2\n    assert s.longestPalindromeSub(\"cbbd\") == 3\n    assert s.longestPalindromeSub(\"a\") == 1\n    assert s.longestPalindromeSub(\"\") == 0",
      -3.921875
    ],
    [
      "def longestPalindrome(s: str) -> int:\n    if len(s) <= 1:\n        return len(s)\n\n    left, right = 0, 0\n    result = 0\n\n    for i in range(1, len(s)):\n        while right < len(s) and s[i] == s[right]:\n            right += 1\n        result = max(result, right - left)\n\n        while right > left:\n            if s[left] == s[right]:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert longestPalindrome(\"aba\") == 1\n    assert longestPalindrome(\"bab\") == 2\n    assert longestPalindrome(\"a\") == 1\n    assert longestPalindrome(\"\") == 0",
      -3.98046875
    ],
    [
      "def longestPalindromeSubsequence(str):\n    # Write your code here\n    res = 0\n    res_len = 0\n    dic = {}\n    for i in range(len(str)):\n        dic[str[i]] = i\n\n    for i in range(len(str)):\n        if str[i] in dic:\n            if dic[str[i]] > res:\n                res = dic[str[i]]\n                res_len = i - res + 1\n        else:\n            dic[str[i]] = i\n\n    return res, res_len\n\nprint(longestPalindromeSubsequence(\"babad\"))\nprint(longestPalindromeSubsequence(\"babad\"))\nprint(longestPalindromeSubsequence(\"babad\"))\nprint(longestPalindromeSubsequence(\"baba\"))\nprint(longestPalindromeSubsequence(\"ababab\"))\nprint(longestPalindromeSubsequence(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
      -4.203125
    ],
    [
      "def find_longest_palindrome(str):\n    max_len = 0\n    cur_len = 0\n    for i in range(len(str)):\n        if i == 0:\n            cur_len = i\n            continue\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                cur_len += 1\n                if cur_len > max_len:\n                    max_len = cur_len\n                    cur_str = str[i:j+1]\n    return cur_str\n\n\nif __name__ == '__main__':\n    assert find_longest_palindrome('babad') == 'bab', 'babad'\n    assert find_longest_palindrome('aba') == 'a', 'aba'\n    assert find_longest_palindrome('ababab') == 'ababab', 'ababab'\n    assert find_longest_palindrome('abcbababab') == 'abcbababab', 'abcbababab'\n    assert find_longest_palindrome('ab') == 'a', 'ab'\n    assert find_longest_palindrome('abca') == 'a', 'abca'",
      -4.5
    ],
    [
      "def longest_palindrome(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    s = \"babad\"\n    print(longest_palindrome(s))",
      -4.84765625
    ],
    [
      "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if s == \"\":\n            return 0\n        if len(s) <= 1:\n            return 1\n        if s[0] == s[-1]:\n            return 1\n        max_len = 1\n        for i in range(1, len(s)):\n            if s[i] == s[-i]:\n                continue\n            if s[i] == s[-1] and i - max_len > max_len:\n                max_len = i - max_len\n                max_str = s[i:-i]\n        return max_str\n\n\ns = Solution()\nprint(s.longestPalindromeSubseq(\"babad\"))",
      -4.86328125
    ],
    [
      "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for i in range(n)]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestPalindrome(\"babad\") == 3\n    assert s.longestPalindrome(\"a\") == 1\n    assert s.longestPalindrome(\"\") == 0\n    assert s.longestPalindrome(\"aab\") == 3\n    assert s.longestPalindrome(\"aa\") == 2\n    assert s.longestPalindrome(\"aabba\") == 2\n    assert s.longestPalindrome(\"aabbaab\") == 2\n    assert s.longestPalindrome(\"aabbaabba\") == 3\n    assert s.longestPalindrome(\"abab\") == 2\n    assert s.longestPalindrome(\"ababab\") == 1\n    assert s.longestPalindrome(\"abababa\") == 2\n    assert s.longestPalindrome(\"abababaab\") == 3\n    assert s.longestPalindrome(\"ababababaab\") == 3\n    assert s.longestPalindrome(\"ababababab\") == 3\n    assert s.longestPalindrome(\"ababababab\") == 4\n    assert s.longestPalindrome(\"ababababab\") == 4",
      -4.9609375
    ],
    [
      "def longest_palindrome_subsequence(s):\n    # Write your code here\n    max_len = 0\n    max_palindrome_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j] and i!= j:\n                max_palindrome_len = max(max_palindrome_len, j-i+1)\n                max_len = max(max_len, j-i+1)\n    return max_palindrome_len, max_len\n\n\nprint(longest_palindrome_subsequence('abcd'))\nprint(longest_palindrome_subsequence('bbbbb'))\nprint(longest_palindrome_subsequence('aaaaaaaa'))",
      -5.015625
    ],
    [
      "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        if len(s) < 2:\n            return len(s)\n\n        dp = [[False for _ in range(len(s) + 1)] for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][i] = True\n\n        for i in range(len(s) + 1):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[len(s)][len(s)]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestPalindromeSubseq(\"babad\") == 2\n    assert s.longestPalindromeSubseq(\"cbbd\") == 3\n    assert s.longestPalindromeSubseq(\"cbbdab\") == 2\n    assert s.longestPalindromeSubseq(\"a\") == 1\n    assert s.longestPalindromeSubseq(\"\") == 0",
      -5.140625
    ],
    [
      "def longest_palindrome(str):\n    # O(n^2) time | O(n) space\n    longest = 0\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = 1\n                if i - 1 >= 0 and str[i - 1] == str[j]:\n                    dp[i][j] = dp[i - 1][j] + 2\n                if i + 1 < n and str[i + 1] == str[j]:\n                    dp[i][j] = dp[i + 1][j] + 2\n                if j - 1 >= 0 and str[i][j - 1] == str[j]:\n                    dp[i][j] = dp[i][j - 1] + 2\n                if j + 1 < n and str[i][j + 1] == str[j]:\n                    dp[i][j] = dp[i][j + 1] + 2\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] > longest:\n                longest = dp[i][j]\n    return longest\n\n\nif __name__ == '__main__':\n    print(longest_palindrome('babad'))\n    print(longest_palindrome('bbaa'))",
      -5.15625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    if len(s) <= 1:\n        return 0\n\n    start, end = 0, 0\n    max_len = 1\n    for i in range(len(s)):\n        if s[i] == s[i]:\n            start = i\n            end = i\n            if i + 1 < len(s) and s[i + 1] == s[i]:\n                end = i + 1\n        else:\n            if end - start > max_len:\n                max_len = end - start\n                start = i\n                end = i\n\n    return s[start:end + 1]\n\n\nif __name__ == '__main__':\n    assert longestPalindromeSubsequence(\"babad\") == \"bab\"\n    assert longestPalindromeSubsequence(\"ab\") == \"ab\"\n    assert longestPalindromeSubsequence(\"abab\") == \"abab\"\n    assert longestPalindromeSubsequence(\"abababababababab\") == \"ababababababab\"\n    assert longestPalindromeSubsequence(\"\") == \"\"",
      -5.1640625
    ],
    [
      "def longest_palindrome(string):\n    if len(string) == 0:\n        return 0\n    dp = [[0 for _ in range(len(string))] for _ in range(len(string))]\n    for i in range(len(string)):\n        dp[i][i] = 1\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"babad\"))",
      -5.30078125
    ],
    [
      "def longest_palindrome_subsequence(string):\n    # write your code here\n    # return longest_palindrome_subsequence(string)\n\n    # use the dictionary to store the longest palindrome\n    # key is the index of the string, value is the length of the longest palindrome\n    dict = {}\n    max_length = 0\n    for i in range(len(string)):\n        dict[i] = i\n\n    # iterate through the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            # check if the substring is palindrome\n            if string[i:j] == string[i:j][::-1]:\n                # update the longest palindrome length\n                if j-i > max_length:\n                    max_length = j-i\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    # test cases\n    test_case_1 = \"babad\"\n    test_case_2 = \"abab\"\n    test_case_3 = \"cbbd\"\n    test_case_4 = \"aab\"\n    test_case_5 = \"aabcbbd\"\n    test_case_6 = \"cbbdacbab\"\n    test_case_7 = \"cbbdacbabbb\"\n    test_case_8 = \"cbbdacbabbbb\"\n    test_case_9 = \"cbbdacbabbbbab\"\n    test_case_10 = \"cbbdacbabbbbabbb\"\n    test_case_11 = \"cbbdacbabbbbabbbbabbb\"\n    test_case_12 = \"cbbdacbabbbbabbbbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbb",
      -5.51171875
    ],
    [
      "def longestPalindromeSubsequence(s):\n    length = len(s)\n    longest = [[0 for _ in range(length)] for _ in range(length)]\n    for i in range(length):\n        longest[i][i] = 1\n    for i in range(1, length):\n        for j in range(i):\n            if s[i] == s[j]:\n                longest[i][j] = 2 + longest[i-1][j-1]\n            else:\n                longest[i][j] = max(longest[i-1][j], longest[i][j-1])\n    return longest[-1][-1]\n\n\ndef test():\n    assert longestPalindromeSubsequence(\"aab\") == 2\n    assert longestPalindromeSubsequence(\"ab\") == 2\n    assert longestPalindromeSubsequence(\"a\") == 1\n    assert longestPalindromeSubsequence(\"b\") == 2\n    assert longestPalindromeSubsequence(\"aab\") == 2\n    assert longestPalindromeSubsequence(\"aba\") == 2\n    assert longestPalindromeSubsequence(\"cba\") == 1\n    assert longestPalindromeSubsequence(\"cbb\") == 1\n    assert longestPalindromeSubsequence(\"cbba\") == 1\n    assert longestPalindromeSubsequence(\"cbbaab\") == 1\n    assert longestPalindromeSubsequence(\"cbbaaba\") == 1\n    assert longestPalindromeSubsequence(\"cbbaabba\") == 2\n    assert longestPalindromeSubsequence(\"cbbaabbaab\") == 2\n    assert longestPalindromeSubsequence(\"cbbaabbaab\") == 3\n    assert longestPalindromeSubsequence(\"cbbaabbaabaab\") == 3\n    assert longestPalindromeSubsequence(\"cbbaabbaabaabaabaabaabaabaabaabaaba\") == 5\n    assert longestPalindromeSubsequence(\"cbbaabbaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaab",
      -5.57421875
    ],
    [
      "def longest_palindrome_subsequence(str):\n    if not str:\n        return 0\n    longest_palindrome_subsequence_helper(str, 0, 0)\n    return len(longest_palindrome_subsequence_helper(str, 0, 0))\n\n\ndef longest_palindrome_subsequence_helper(str, i, j):\n    if i >= j:\n        return 1\n    if str[i] == str[j]:\n        return longest_palindrome_subsequence_helper(str, i+1, j-1) + 1\n    else:\n        return max(longest_palindrome_subsequence_helper(str, i, j-1),\n                   longest_palindrome_subsequence_helper(str, i+1, j))\n\n\nif __name__ == \"__main__\":\n    assert longest_palindrome_subsequence(\"babad\") == 2\n    assert longest_palindrome_subsequence(\"bbbb\") == 2\n    assert longest_palindrome_subsequence(\"abbb\") == 1\n    assert longest_palindrome_subsequence(\"aa\") == 1",
      -5.7265625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    n = len(s)\n    dp = [[0 for x in range(n+1)] for x in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = i\n    for i in range(n):\n        for j in range(i, n+1):\n            if s[i] == s[j]:\n                dp[i+1][j+1] = dp[i][j]\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1]+1)\n    return dp[n][n]\n\n\nprint(longestPalindromeSubsequence(\"babad\"))\nprint(longestPalindromeSubsequence(\"abbbbab\"))\nprint(longestPalindromeSubsequence(\"cbbd\"))\nprint(longestPalindromeSubsequence(\"abab\"))",
      -5.90625
    ],
    [
      "def longest_palindrome(str):\n    longest_len = 0\n    longest_str = \"\"\n\n    for i in range(len(str)):\n        if i == 0:\n            longest_str += str[i]\n            continue\n        if i == len(str) - 1:\n            longest_str += str[i]\n            continue\n\n        if str[i] == str[i - 1]:\n            continue\n\n        if str[i] == str[i + 1]:\n            continue\n\n        if i - longest_len >= 2:\n            continue\n\n        if str[i] == str[i - 1]:\n            longest_len = i - longest_len - 1\n            continue\n\n        if str[i] == str[i + 1]:\n            longest_len = i + longest_len + 1\n            continue\n\n        if i - longest_len > longest_len:\n            longest_str = str[i]\n            longest_len = i - longest_len\n\n    return longest_str\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"babad\"))\n    print(longest_palindrome(\"abb\"))\n    print(longest_palindrome(\"abcd\"))\n    print(longest_palindrome(\"ab\"))\n    print(longest_palindrome(\"babadab\"))",
      -5.953125
    ],
    [
      "def find_longest_palindromic_subsequence(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 1\n    res = 0\n    for i in range(1, len(string)):\n        for j in range(i):\n            if string[j]!= string[i]:\n                if string[j] == string[i] and i > j:\n                    res = max(res, i - j + 1)\n    return res\n\n\nif __name__ == '__main__':\n    print(find_longest_palindromic_subsequence('babad'))\n    print(find_longest_palindromic_subsequence('cbbd'))\n    print(find_longest_palindromic_subsequence('aab'))\n    print(find_longest_palindromic_subsequence('abc'))\n    print(find_longest_palindromic_subsequence('cbb'))\n    print(find_longest_palindromic_subsequence('cbbaba'))\n    print(find_longest_palindromic_subsequence('abba'))\n    print(find_longest_palindromic_subsequence('abbaaba'))\n    print(find_longest_palindromic_subsequence('abcbba'))",
      -6.25390625
    ],
    [
      "def longest_palindrome(s: str) -> int:\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2 if s[0] == s[1] else 1\n    if len(s) == 3:\n        return 3 if s[0] == s[1] == s[2] else 2\n    if len(s) == 4:\n        return 4 if s[0] == s[1] == s[2] == s[3] else 3\n    if len(s) == 5:\n        return 5 if s[0] == s[1] == s[2] == s[3] == s[4] else 4\n    if len(s) == 6:\n        return 6 if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] else 4\n    if len(s) == 7:\n        return 7 if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] else 4\n    return len(s)\n\n\nif __name__ == \"__main__\":\n    assert longest_palindrome(\"aab\") == 2\n    assert longest_palindrome(\"aa\") == 1\n    assert longest_palindrome(\"aba\") == 3\n    assert longest_palindrome(\"abab\") == 5\n    assert longest_palindrome(\"abaabb\") == 5\n    assert longest_palindrome(\"\") == 0\n    assert longest_palindrome(\"abc\") == 0\n    assert longest_palindrome(\"aaaa\") == 5\n    assert longest_palindrome(\"abcccc\") == 6\n    assert longest_palindrome(\"abccccc\") == 7\n    assert longest_palindrome(\"abcccccc\") == 8\n    assert longest_palindrome(\"abccccccc\") == 9\n    assert longest_palindrome(\"abccccccccc\") == 10\n    assert longest_palindrome(\"abccccccccc\") == 11\n    assert longest_palindrome(\"abcc",
      -6.390625
    ],
    [
      "def longestPalindromeSubsequence(s):\n    if len(s) <= 1:\n        return 0\n    if s[0] == s[-1]:\n        return 1\n    dp = [[0] * (len(s) + 1) for i in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if i == j:\n                dp[i][j] = 0\n            elif s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[len(s)][len(s) - 1]\n\n\nif __name__ == \"__main__\":\n    print(longestPalindromeSubsequence(\"babad\"))",
      -6.74609375
    ],
    [
      "def longestPalindrome(s):\n    # Write your code here\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n\n    max_length = 0\n    max_length_index = -1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j] and (i == j or s[i]!= s[j]):\n                if (max_length < j - i + 1 or j - i + 1 > max_length_index):\n                    max_length = j - i + 1\n                    max_length_index = j - i + 1\n\n    return max_length\n\n\ndef main():\n    print(longestPalindrome('babad'))\n    print(longestPalindrome('cbbd'))\n    print(longestPalindrome('cbbdab'))\n    print(longestPalindrome('babadaba'))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.8671875
    ],
    [
      "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        if not s:\n            return 0\n\n        # initialize dp\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n\n        # initialize max_len\n        max_len = 0\n\n        # find the length of the longest subsequence\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                # if the substring is the same\n                if s[i] == s[j]:\n                    # update dp\n                    dp[i][j] = 1\n\n                    # update max_len\n                    if j - i > max_len:\n                        max_len = j - i\n\n        return max_len\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestPalindromeSubseq(\"babad\") == 3\n    assert s.longestPalindromeSubseq(\"ab\") == 1\n    assert s.longestPalindromeSubseq(\"abab\") == 2\n    assert s.longestPalindromeSubseq(\"bbbb\") == 1\n    assert s.longestPalindromeSubseq(\"aa\") == 1\n    assert s.longestPalindromeSubseq(\"aab\") == 1",
      -7.46484375
    ],
    [
      "def longest_palindrome_subsequence(s):\n    if not s:\n        return 0\n\n    # make a dictionary to store the longest palindrome subsequence\n    # for each character\n    longest_palindrome_subsequence_dict = {}\n    for i in range(len(s)):\n        longest_palindrome_subsequence_dict[s[i]] = i\n\n    # start at the first character\n    start = 0\n\n    # find the longest palindrome subsequence\n    for i in range(1, len(s)):\n        # if current character is different from previous character,\n        # then it's a palindrome\n        if s[i]!= s[start]:\n            # if it's not already in the dictionary, add it\n            if s[start] not in longest_palindrome_subsequence_dict:\n                # and add it to the dictionary\n                longest_palindrome_subsequence_dict[s[start]] = i\n\n            # if it's not already in the dictionary, remove it from the dictionary\n            else:\n                del longest_palindrome_subsequence_dict[s[start]]\n\n        # if the current character is same as previous character,\n        # then we have found a palindrome subsequence\n        else:\n            start += 1\n\n    return max(longest_palindrome_subsequence_dict.values())\n\n\nif __name__ == '__main__':\n    assert longest_palindrome_subsequence('abcd') == 3\n    assert longest_palindrome_subsequence('bbbb') == 3\n    assert longest_palindrome_subsequence('aa') == 1\n    assert longest_palindrome_subsequence('') == 0",
      -7.55078125
    ],
    [
      "def longestPalindromeSubsequence(str):\n    str = str.lower()\n    l = len(str)\n    ans = ''\n    for i in range(l):\n        for j in range(l):\n            if (str[i] == str[j] and i >= j):\n                ans += str[i]\n                if (l - i + 1 > len(ans)):\n                    ans = str[i]\n                    l = i\n    return ans\n\n\nprint(longestPalindromeSubsequence('babad'))\nprint(longestPalindromeSubsequence('aba'))\nprint(longestPalindromeSubsequence('abca'))\nprint(longestPalindromeSubsequence('abcba'))",
      -7.67578125
    ],
    [
      "def longestPalindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n\n    def get_length(s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n        if len(s) == 0:\n            return 0\n\n        length = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                length += 1\n            else:\n                break\n\n        return length\n\n    def is_palindrome(s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n\n        if len(s) == 1:\n            return True\n\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n\n        return False\n\n    def get_max_length(s, i):\n        \"\"\"\n        :type s: str\n        :type i: int\n        :rtype: int\n        \"\"\"\n\n        if i >= len(s):\n            return 0\n\n        if s[i] == s[i-1]:\n            return get_max_length(s, i+1) + 1\n\n        return max(get_max_length(s, i), get_max_length(s, i-1))\n\n    max_length = 0\n    for i in range(len(s)):\n        length = get_length(s)\n        if length > max_length:\n            max_length = length\n\n    return max_length\n\n\nif __name__ == '__main__':\n    assert longestPalindrome(\"babad\") == 3\n    assert longestPalindrome(\"abab\") == 1\n    assert longestPalindrome(\"ab\") == 1\n    assert longestPalindrome(\"a\") == 1\n    assert longestPalindrome(\"\") == 0\n    assert longestPalindrome(\"aa\") == 0\n    assert longestPalindrome(\"aab\") == 2",
      -8.9453125
    ],
    [
      "def longest_palindrome_subsequence(s: str) -> int:\n    if len(s) < 2:\n        return 0\n\n    l = 0\n    r = 0\n    max_len = 0\n\n    for i in range(len(s)):\n        if s[i] == s[i]:\n            l += 1\n        else:\n            if s[i] == s[i - 1]:\n                r += 1\n            else:\n                max_len = max(max_len, r - l + 1)\n                l = r = i\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert longest_palindrome_subsequence(\"babad\") == 3\n    assert longest_palindrome_subsequence(\"aa\") == 0\n    assert longest_palindrome_subsequence(\"babad\") == 3\n    assert longest_palindrome_subsequence(\"aab\") == 2\n    assert longest_palindrome_subsequence(\"aabbb\") == 3\n    assert longest_palindrome_subsequence(\"aabbbb\") == 2\n    assert longest_palindrome_subsequence(\"aabbbbb\") == 3\n    assert longest_palindrome_subsequence(\"abbbab\") == 2\n    assert longest_palindrome_subsequence(\"abbbabbb\") == 2\n    assert longest_palindrome_subsequence(\"abbab\") == 2",
      -8.96875
    ],
    [
      "def longestPalindromeSubsequence(s):\n    if len(s) <= 1:\n        return len(s)\n    longest_palindrome_subsequence = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j] and (j - i < longest_palindrome_subsequence or (j - i == longest_palindrome_subsequence and s[i] == s[j - i])):\n                longest_palindrome_subsequence = max(longest_palindrome_subsequence, j - i + 1)\n    return longest_palindrome_subsequence\n\n\nprint(longestPalindromeSubsequence(\"cbbd\"))\nprint(longestPalindromeSubsequence(\"cbbdab\"))\nprint(longestPalindromeSubsequence(\"cbbdabcd\"))\nprint(longestPalindromeSubsequence(\"aab\"))",
      -9.6875
    ],
    [
      "def longestPalindrome(str):\n    n = len(str)\n    max_length = 0\n    longest_string = ''\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                if i == j:\n                    longest_string += str[i]\n                else:\n                    longest_string += str[i] + str[j]\n            else:\n                if j - i > max_length:\n                    max_length = j - i\n                    longest_string = str[i:j+1]\n    return longest_string\n\nprint(longestPalindrome('aabcbb'))\nprint(longestPalindrome('aabcbbacb'))\nprint(longestPalindrome('babad'))\nprint(longestPalindrome('abc'))\nprint(longestPalindrome('abcbb'))\nprint(longestPalindrome('abcbbacb'))\nprint(longestPalindrome('abcbbacbab'))\nprint(longestPalindrome('abcbbacbabcbbacbab'))\nprint(longestPalindrome('abcbbacbabcbbacbabcbb'))\nprint(longestPalindrome('abcbbacbabcbbacbabcbb'))\nprint(longestPalindrome('abcbbacbabcbbacbabcbb'))\nprint(longestPalindrome('abcbbacbabcbbacbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbbabcbb",
      -10.359375
    ],
    [
      "def longestPalindromeSubsequence(str):\n    if len(str) < 2:\n        return 0\n\n    dp = [[0 for _ in range(len(str))] for _ in range(len(str))]\n    max_len = 0\n    max_str = \"\"\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    max_str = str[i] + str[j]\n\n    return max_len, max_str\n\n\nif __name__ == \"__main__\":\n    print(longestPalindromeSubsequence(\"babad\"))",
      -10.46875
    ],
    [
      "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        dp = [0 for i in range(len(s))]\n        dp[0] = 1\n        for i in range(1, len(s)):\n            for j in range(i):\n                if s[j] == s[i]:\n                    dp[i] = max(dp[i], dp[j] + 2)\n                else:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestPalindromeSubseq(\"babad\") == 2\n    assert Solution().longestPalindromeSubseq(\"bab\") == 1\n    assert Solution().longestPalindromeSubseq(\"aa\") == 1\n    assert Solution().longestPalindromeSubseq(\"\") == 0\n    assert Solution().longestPalindromeSubseq(\"a\") == 0",
      -10.5859375
    ],
    [
      "def longest_palindrome_subsequence(string):\n    if string == \"\":\n        return 0\n    length = len(string)\n    res = 0\n    for i in range(length):\n        res = max(res, longest_palindrome_subsequence(string[:i] + string[i+1:]))\n    return res\n\n\nif __name__ == \"__main__\":\n    print(longest_palindrome_subsequence(\"abcc\"))\n    print(longest_palindrome_subsequence(\"aabcc\"))\n    print(longest_palindrome_subsequence(\"baba\"))\n    print(longest_palindrome_subsequence(\"aabbb\"))\n    print(longest_palindrome_subsequence(\"abbbbab\"))\n    print(longest_palindrome_subsequence(\"aabbbbbbab\"))",
      -10.8203125
    ],
    [
      "class Solution:\n    def longestPalindromeSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        s = s.lower()\n        dp = [[0 for i in range(len(s)+1)] for j in range(len(s)+1)]\n        for i in range(1, len(s)+1):\n            for j in range(1, len(s)+1):\n                if i == j:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1 if s[i-1] == s[j-1] else 2\n        res = 0\n        for i in range(1, len(s)+1):\n            for j in range(1, len(s)+1):\n                if i == j:\n                    res = max(res, dp[i][j] + 2)\n                else:\n                    res = max(res, dp[i][j] + dp[i-1][j-1])\n        return res\n\n\ns = Solution()\nprint(s.longestPalindromeSubsequence(\"babad\"))",
      -11.6484375
    ],
    [
      "def longest_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n\n    res = 1\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and i > j:\n                if j - i > res:\n                    res = j - i\n    return res\n\nif __name__ == \"__main__\":\n    print(longest_palindrome(\"abba\"))\n    print(longest_palindrome(\"babad\"))\n    print(longest_palindrome(\"bbaa\"))\n    print(longest_palindrome(\"a\"))",
      -11.71875
    ],
    [
      "def longest_palindrome(string):\n    length = len(string)\n    if length == 1:\n        return string\n    elif length == 2:\n        return string[0]\n    elif length == 3:\n        return string[0] + string[1]\n    elif length == 4:\n        return string[0] + string[1] + string[2]\n    elif length == 5:\n        return string[0] + string[1] + string[2] + string[3]\n    else:\n        return max(longest_palindrome(string[1:-1]),\n                   longest_palindrome(string[2:-1]),\n                   longest_palindrome(string[3:-1]),\n                   longest_palindrome(string[4:-1]))\n\n\nprint(longest_palindrome(\"babad\"))\nprint(longest_palindrome(\"cbbd\"))\nprint(longest_palindrome(\"cbbdab\"))\nprint(longest_palindrome(\"cbbdabab\"))\nprint(longest_palindrome(\"cbbdababab\"))\nprint(longest_palindrome(\"cbbdabababab\"))\nprint(longest_palindrome(\"cbbdababababab\"))\nprint(longest_palindrome(\"cbbdabababababab\"))\nprint(longest_palindrome(\"cbbdabababababab\"))",
      -12.5078125
    ],
    [
      "def longest_palindromic_subsequence(s):\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s if s[0] == s[1] else s[0] + s[1]\n    if len(s) == 3:\n        if s[0] == s[1] == s[2]:\n            return longest_palindromic_subsequence(s[1:])\n        else:\n            return longest_palindromic_subsequence(s[1:]) + s[0]\n    if len(s) == 4:\n        if s[0] == s[1] == s[2] == s[3]:\n            return longest_palindromic_subsequence(s[1:]) + s[0] + s[2] + s[3]\n        else:\n            return longest_palindromic_subsequence(s[1:]) + s[0] + s[2] + s[3] + s[4]\n\n\nif __name__ == \"__main__\":\n    assert longest_palindromic_subsequence(\"abcd\") == \"abcd\"\n    assert longest_palindromic_subsequence(\"abccca\") == \"abccca\"\n    assert longest_palindromic_subsequence(\"cba\") == \"cba\"",
      -12.8671875
    ],
    [
      "def longest_palindrome_subsequence(str):\n    n = len(str)\n    if n == 1:\n        return str\n    elif n == 2:\n        return str[0] + str[1]\n    else:\n        longest_palindrome_subsequence_helper(str, 0, n - 1, 0, 0)\n\n\ndef longest_palindrome_subsequence_helper(str, start, end, left, right):\n    if left > right:\n        return\n\n    if str[left] == str[right]:\n        if left + 1 == end or right - 1 == start:\n            return str[left] + str[right]\n\n        elif left + 1 == end or right - 1 == start:\n            return str[left] + str[right] + str[left + 1] + str[right - 1]\n\n        else:\n            return str[left] + str[right] + str[left + 1] + str[right - 1] + str[left + 2] + str[right - 2]\n\n    if left + 1 < end:\n        return longest_palindrome_subsequence_helper(str, start, right, left + 1, right)\n\n    if right - 1 < start:\n        return longest_palindrome_subsequence_helper(str, left, right - 1, left, right - 1)",
      -13.8125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}