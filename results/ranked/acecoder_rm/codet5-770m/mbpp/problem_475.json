{
  "problem": {
    "task_id": "MBPP/486",
    "prompt": "Write a function to compute binomial probability for the given number.",
    "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
    "test_list": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ],
    "challenge_test_list": [],
    "problem_id": 475
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import math\n\ndef binomial_prob(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return math.factorial(k) / (math.factorial(n - k) * math.factorial(k))\n\ndef binomial_prob2(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        return (n * k) / (n * (k + 1))\n\nif __name__ == \"__main__\":\n    print(binomial_prob(3, 2))\n    print(binomial_prob(3, 1))\n    print(binomial_prob(3, 0))\n    print(binomial_prob(3, 10))\n    print(binomial_prob2(3, 2))\n    print(binomial_prob2(3, 1))\n    print(binomial_prob2(3, 0))\n    print(binomial_prob2(3, 10))",
      2.45703125
    ],
    [
      "from math import factorial\n\n\ndef binomial_prob(n, k):\n    return factorial(k) / (factorial(n) * factorial(k)) ** n\n\n\nprint(binomial_prob(3, 2))",
      2.453125
    ],
    [
      "import math\n\ndef binomial(n, k):\n    if k == 0:\n        return 1\n    else:\n        return n * binomial(n - k, k - 1) / (k * binomial(k, n - k))\n\n\nn = int(input())\nk = int(input())\nprint(binomial(n, k))",
      2.048828125
    ],
    [
      "import math\n\n\ndef binomial_probability(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\ndef main():\n    print(binomial_probability(5, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.9951171875
    ],
    [
      "def binomial(n, k):\n    if k < 0 or n < 0:\n        raise ValueError('n and k must be non-negative integers')\n\n    if k == 0:\n        return 1\n\n    return binomial(n-1, k) * (1-k)**k\n\nprint(binomial(5, 2))",
      1.7353515625
    ],
    [
      "import math\n\ndef binomial_probability(n, k):\n    return math.factorial(k)/(math.factorial(n)*math.factorial(k-n))\n\n\nprint(binomial_probability(10, 4))",
      1.68359375
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    return binomial_probability(n - 1, k) * (k - 1) / (k + n - 1)\n\nprint(binomial_probability(5, 3))\nprint(binomial_probability(5, 4))",
      1.5634765625
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return p\n    else:\n        return p * binomial_prob(n - 1, p)\n\n\nprint(binomial_prob(3, 0.5))",
      1.16015625
    ],
    [
      "import math\n\ndef binomial(n, p):\n    if n == 0:\n        return 1\n    else:\n        return n * binomial(n-1, p) / (math.factorial(n) * math.factorial(p))\n\nprint(binomial(5, 2))",
      1.158203125
    ],
    [
      "import math\n\n\ndef binomial(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    return math.factorial(n) / math.factorial(k) * binomial(n - k, k)\n\n\nprint(binomial(10, 4))",
      1.109375
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n / (n + k)\n    return binomial_probability(n, k-1) * (n / k)\n\nprint(binomial_probability(6,4))",
      0.93505859375
    ],
    [
      "def binomial_probability(n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p\n    else:\n        return p * binomial_probability(n - 1, p)\n\n\nprint(binomial_probability(5, 0.5))\nprint(binomial_probability(5, 0.1))\nprint(binomial_probability(5, 0.01))",
      0.90869140625
    ],
    [
      "from math import factorial\n\n\ndef binomial_probability(n, p):\n    return factorial(n) / (factorial(n - p) * factorial(p))\n\n\nprint(binomial_probability(5, 3))",
      0.90869140625
    ],
    [
      "from math import factorial\n\n\ndef binomial_probability(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError('n and k must be non-negative')\n    elif n == 0 and k == 0:\n        return 1\n    else:\n        return factorial(n) / (factorial(n - k) * factorial(k))\n\n\nif __name__ == '__main__':\n    print(binomial_probability(4, 3))\n    print(binomial_probability(5, 3))\n    print(binomial_probability(6, 3))",
      0.1561279296875
    ],
    [
      "def binomial(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if n == 0 or k == 0:\n        return 0\n    return n * k / (n + k)\n\n\nif __name__ == \"__main__\":\n    print(binomial(5, 3))",
      0.13037109375
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0:\n        return 1\n    return p * binomial_prob(n-1, p) / (n * binomial_prob(n-1, 1-p))\n\nprint(binomial_prob(5, 0.5))",
      0.07086181640625
    ],
    [
      "def binomial(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    return binomial(n-1, k) * (k/n) ** (n-k)\n\n\nprint(binomial(5, 5))",
      0.07086181640625
    ],
    [
      "def binomial(n, k):\n    if n < 0 or k < 0:\n        raise ValueError(\"Invalid input\")\n    return binomial(n - k, k) / (binomial(n - k, k) * binomial(k, n - k))",
      0.0369873046875
    ],
    [
      "def binomial_prob(n, k):\n    if n == 1:\n        return 1.0 / k\n    else:\n        return binomial_prob(n - 1, k) * (k / n) ** (n - k)\n\n\nprint(binomial_prob(3, 4))",
      0.03314208984375
    ],
    [
      "class Solution:\n    def binomial(self, n, k):\n        if n == 1:\n            return 1\n        return self.binomial(n-1, k) * self.binomial(n-1, k-1) / self.binomial(n, k)",
      0.0139312744140625
    ],
    [
      "import math\n\n\ndef binomial(n, k):\n    if k == 0:\n        return 1.0\n    return math.factorial(k) / (math.factorial(n) * math.factorial(k-n))\n\n\nif __name__ == \"__main__\":\n    print(binomial(3, 3))",
      -0.260009765625
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0:\n        return 1\n    return (p ** n) * binomial_prob(n - 1, p) / (binomial_prob(n - 1, p) * binomial_prob(n - 2, p))\n\n\nif __name__ == \"__main__\":\n    print(binomial_prob(5, 0.5))",
      -0.281982421875
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_probability(n - 1, k - 1) / binomial_probability(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 6))",
      -0.65185546875
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0:\n        return 1\n    return p * binomial_prob(n-1, p) / (binomial_prob(n-1, 1) * binomial_prob(n-1, p))\n\n\nprint(binomial_prob(5, 0.5))\nprint(binomial_prob(5, 0.3))",
      -0.85693359375
    ],
    [
      "def binomial_probability(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return k * binomial_probability(n - 1, k) / (binomial_probability(n - 1, k) * binomial_probability(n - 1, k - 1))\n\n\nprint(binomial_probability(5, 3))",
      -0.85693359375
    ],
    [
      "import math\n\ndef binomial(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return p\n    else:\n        return binomial(n - 1, p * n) / (binomial(n - 1, p) * binomial(n, p))\n\nn = int(input())\np = float(input())\n\nprint(binomial(n, p))",
      -0.85693359375
    ],
    [
      "def binomial(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    return binomial(n-1, k) * k / (n*k)\n\n\nprint(binomial(10, 3))",
      -0.85693359375
    ],
    [
      "def binomial(n, k):\n    if n < 0 or k < 0:\n        return 0\n\n    if n == 0:\n        return k\n\n    if k == 0:\n        return binomial(n-1, k) / (binomial(n-1, k-1) * binomial(k, n))\n\n    return binomial(n-1, k) * binomial(k, n) / (binomial(n-1, k) * binomial(k, n-1))\n\n\nprint(binomial(3, 3))",
      -0.85693359375
    ],
    [
      "class Solution:\n    def binomial(self, n: int, k: int) -> float:\n        if n == 0:\n            return 1\n        if k == 0:\n            return 0\n        return self.binomial(n - 1, k) * self.binomial(n, k - 1) / (self.binomial(n - 1, k) * self.binomial(n, k - 1))",
      -0.85693359375
    ],
    [
      "def binomial(n, k):\n    return n * (1 - n) ** k / (n + k)\n\n\nprint(binomial(2, 3))\nprint(binomial(2, 4))\nprint(binomial(3, 3))\nprint(binomial(3, 4))",
      -0.85693359375
    ],
    [
      "def binomial_prob(n, k):\n    return 1/(n*k)\n\n\nprint(binomial_prob(5, 2))",
      -0.85693359375
    ],
    [
      "def binomial(n, k):\n    return n ** k / (n ** k + k)\n\n\nprint(binomial(3, 5))",
      -0.85693359375
    ],
    [
      "def binomial(n, p):\n    return (1/n)**p * (1/n)**(p-1)\n\nn = int(input())\np = int(input())\nprint(binomial(n, p))",
      -0.857421875
    ],
    [
      "def binomial(n, k):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return binomial(n-1, k) * k / n\n\nprint(binomial(5, 3))",
      -0.85791015625
    ],
    [
      "def binomial(n, k):\n    return n * binomial(n - k, k) / binomial(k, n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial(3, 3))\n    print(binomial(4, 3))\n    print(binomial(5, 3))\n    print(binomial(6, 4))\n    print(binomial(7, 5))\n    print(binomial(8, 5))\n    print(binomial(9, 5))",
      -0.85791015625
    ],
    [
      "from math import factorial\n\n\ndef binomial_prob(n, k):\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nprint(binomial_prob(5, 4))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef binomial(n, p):\n    # n and p are integers\n    if n < 0 or p < 0:\n        raise ValueError('n and p should be non-negative')\n\n    if n == 0:\n        return 1\n    elif p == 0:\n        return 0\n    else:\n        return math.factorial(n) / (math.factorial(n - p) * math.factorial(p))",
      -0.85888671875
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1.0\n    return n * binomial_probability(n-k, k-1) / (binomial_probability(n-k, k) * binomial_probability(k, n-k))\n\nif __name__ == '__main__':\n    print(binomial_probability(3, 3))\n    print(binomial_probability(4, 4))\n    print(binomial_probability(4, 5))",
      -0.85888671875
    ],
    [
      "def binomial_prob(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_prob(n - 1, k - 1) / (binomial_prob(n - 1, k) * binomial_prob(k, n))\n\n\nprint(binomial_prob(5, 5))",
      -0.85888671875
    ],
    [
      "def binomial_prob(n, k):\n    if n == 0:\n        return 1.0\n    elif n == 1:\n        return k\n    else:\n        return k * binomial_prob(n - 1, k) / (n - 1)\n\nprint(binomial_prob(10, 2))\nprint(binomial_prob(5, 1))\nprint(binomial_prob(5, 2))\nprint(binomial_prob(5, 3))\nprint(binomial_prob(5, 4))\nprint(binomial_prob(5, 5))\nprint(binomial_prob(5, 6))\nprint(binomial_prob(5, 7))\nprint(binomial_prob(5, 8))\nprint(binomial_prob(5, 9))",
      -0.85888671875
    ],
    [
      "from math import factorial\n\ndef binomial(n, k):\n    if n == 0 or k == 0:\n        return 1\n    if n == 1:\n        return factorial(n) / (factorial(n-k) * factorial(k))\n    else:\n        return binomial(n-1, k) * binomial(n, k-1)\n\nif __name__ == \"__main__\":\n    print(binomial(3, 1))\n    print(binomial(5, 4))\n    print(binomial(6, 3))",
      -0.85888671875
    ],
    [
      "def binomial_prob(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        return k * binomial_prob(n - 1, k) / (binomial_prob(n - 1, k) + binomial_prob(n, k))\n\n\nif __name__ == \"__main__\":\n    print(binomial_prob(5, 3))",
      -0.85888671875
    ],
    [
      "def binomial(n, k):\n    if n == 0:\n        return 1\n    return n / k * binomial(n - 1, k)\n\nprint(binomial(2, 3))\nprint(binomial(3, 3))\nprint(binomial(2, 1))\nprint(binomial(3, 1))\nprint(binomial(2, 2))\nprint(binomial(3, 2))\nprint(binomial(3, 3))\nprint(binomial(3, 4))\nprint(binomial(4, 3))\nprint(binomial(4, 4))",
      -0.85888671875
    ],
    [
      "class Binomial:\n\n    def __init__(self, n, p):\n        self.n = n\n        self.p = p\n\n    def probability(self):\n        return self.p ** self.n\n\n    def __str__(self):\n        return f\"Probability of {self.n} is {self.probability()}\"\n\nif __name__ == \"__main__\":\n    b = Binomial(2, 0.5)\n    print(b)\n    print(b.probability())",
      -0.86083984375
    ],
    [
      "import math\n\n\ndef binomial_prob(n, k):\n    # Your code here\n    if k == 0:\n        return 1.0\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\nn = int(input(\"Enter number of trials: \"))\nk = int(input(\"Enter number of trials: \"))\nprint(binomial_prob(n, k))",
      -0.86083984375
    ],
    [
      "from math import factorial\n\n\ndef binomial(n, k):\n    return factorial(n) / (factorial(n-k) * factorial(k))\n\n\ndef binomial_prob(n, k):\n    return binomial(n, k) * (k/n) ** (n-k)\n\n\nif __name__ == '__main__':\n    n = int(input('Enter number: '))\n    k = int(input('Enter number of trials: '))\n    print('Binomial Probability: ', binomial_prob(n, k))",
      -1.0185546875
    ],
    [
      "def binomial(n, p):\n    return (n * p ** n) / (p * (1 - p))\n\nprint(binomial(3, 0.5))",
      -1.3310546875
    ],
    [
      "import math\n\n\ndef binomial(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * binomial(n - k, k)\n\n\nprint(binomial(3, 5))",
      -1.41015625
    ],
    [
      "def binomial_prob(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    else:\n        return n / (n + k) ** k * binomial_prob(n - 1, k)\n\n\nprint(binomial_prob(5, 5))\nprint(binomial_prob(2, 2))\nprint(binomial_prob(10, 3))",
      -1.74609375
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return p * binomial_prob(n - 1, p)\n\n\nprint(binomial_prob(5, 0.5))\nprint(binomial_prob(5, 0.1))\nprint(binomial_prob(5, 0.01))\nprint(binomial_prob(5, 0.001))\nprint(binomial_prob(5, 0.00001))",
      -2.173828125
    ],
    [
      "def binomial_probability(n, p):\n    \"\"\"\n    :type n: int\n    :type p: float\n    :rtype: float\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return p * binomial_probability(n - 1, p)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(5, 0.5))\n    print(binomial_probability(5, 0.5))\n    print(binomial_probability(5, 0.5))\n    print(binomial_probability(5, 0.5))",
      -2.1796875
    ],
    [
      "def binomial_prob(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    return n * binomial_prob(n-1, k-1) / (k*binomial_prob(n-1, k))\n\nprint(binomial_prob(5, 5))",
      -2.556640625
    ],
    [
      "import math\n\ndef binomial(n, k):\n    if k == 0:\n        return 1\n    else:\n        return math.factorial(k) / math.factorial(n - k) * binomial(n - k, k - 1)\n\nprint(binomial(10, 3))\nprint(binomial(100, 6))\nprint(binomial(10, 4))\nprint(binomial(100, 9))",
      -2.677734375
    ],
    [
      "def binomial_probability(n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p\n    else:\n        return p * binomial_probability(n-1, p)\n\n\nprint(binomial_probability(3, 0.5))\nprint(binomial_probability(3, 0.75))\nprint(binomial_probability(3, 0.25))\nprint(binomial_probability(3, 0.125))",
      -3.173828125
    ],
    [
      "def binomial(n, k):\n    if n < 1 or k < 1:\n        return 0\n    if n == 1 and k == 1:\n        return 0\n    return k * binomial(n - 1, k - 1) / (binomial(n - 1, k) * binomial(n, k - 1))",
      -3.453125
    ],
    [
      "import math\n\n\ndef binomial_probability(n, p):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    if p <= 0:\n        raise ValueError(\"p must be greater than 0\")\n    if n == 1:\n        return p\n    return math.factorial(n) / math.factorial(n - p) * binomial_probability(n - p, p)\n\n\nprint(binomial_probability(5, 2))\nprint(binomial_probability(5, 1))\nprint(binomial_probability(5, 0))",
      -3.474609375
    ],
    [
      "class Solution(object):\n    def binomialProb(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: float\n        \"\"\"\n        if n == 0:\n            return 0.0\n        if k == 0:\n            return 1.0\n        if n == 1:\n            return k / (k + 1)\n        return self.binomialProb(n - 1, k) * self.binomialProb(n, k - 1)\n\n\na = Solution()\nprint(a.binomialProb(4, 4))",
      -3.478515625
    ],
    [
      "def binomial(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return p\n    else:\n        return p * binomial(n - 1, p)\n\n\nif __name__ == \"__main__\":\n    print(binomial(4, 0.5))",
      -3.603515625
    ],
    [
      "def binomial(n, k):\n    if n == 0:\n        return 1\n    return (n * binomial(n - 1, k)) / (binomial(n, k) * binomial(k, n - 1))\n\n\nprint(binomial(5, 10))",
      -3.880859375
    ],
    [
      "import math\n\ndef binomial_prob(n, k):\n    return math.factorial(k) / (math.factorial(n) * math.factorial(k - n))\n\nprint(binomial_prob(3, 5))\nprint(binomial_prob(5, 3))\nprint(binomial_prob(7, 4))",
      -4.20703125
    ],
    [
      "import math\n\n\ndef binomial(n, k):\n    if n == 1:\n        return 1.0 / k\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\nprint(binomial(3, 2))\nprint(binomial(3, 3))\nprint(binomial(5, 2))\nprint(binomial(5, 3))",
      -4.28515625
    ],
    [
      "from math import factorial\n\n\ndef binomial_prob(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\ndef test_binomial_prob():\n    assert binomial_prob(0, 0) == 1\n    assert binomial_prob(0, 1) == 1\n    assert binomial_prob(0, 2) == 1\n    assert binomial_prob(1, 0) == 1 / 2\n    assert binomial_prob(1, 1) == 1 / 2\n    assert binomial_prob(1, 2) == 1 / 2\n    assert binomial_prob(2, 0) == 0.5\n    assert binomial_prob(2, 1) == 0.5\n    assert binomial_prob(2, 2) == 0.25\n    assert binomial_prob(3, 0) == 0.25\n    assert binomial_prob(3, 1) == 0.25\n    assert binomial_prob(3, 2) == 0.125\n    assert binomial_prob(4, 0) == 0.125\n    assert binomial_prob(4, 1) == 0.125\n    assert binomial_prob(4, 2) == 0.25\n    assert binomial_prob(5, 0) == 0.125\n    assert binomial_prob(5, 1) == 0.125\n    assert binomial_prob(5, 2) == 0.25\n    assert binomial_prob(6, 0) == 0.125\n    assert binomial_prob(6, 1) == 0.125\n    assert binomial_prob(6, 2) == 0.25\n    assert binomial_prob(7, 0) == 0.125\n    assert binomial_prob(7, 1) == 0.125\n    assert binomial_prob(7, 2) == 0.25\n    assert binomial_prob(8, 0) == 0.125\n    assert binomial_prob(8, 1) == 0.125\n    assert binomial_prob(8, 2) == 0.25\n    assert binomial_prob(9",
      -4.7734375
    ],
    [
      "def binomial(n, k):\n    if k == 0:\n        return 1\n    return n * binomial(n-1, k-1) / (binomial(n, k) * binomial(k, n-1))\n\nif __name__ == \"__main__\":\n    print(binomial(5, 4))\n    print(binomial(2, 3))\n    print(binomial(5, 7))\n    print(binomial(2, 6))\n    print(binomial(3, 3))\n    print(binomial(4, 2))\n    print(binomial(4, 6))",
      -4.953125
    ],
    [
      "import math\n\n\ndef binomial(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\ndef binomial_prob(n, k):\n    return binomial(n, k) / binomial(n - k, k)\n\n\nif __name__ == \"__main__\":\n    print(binomial(3, 3))\n    print(binomial_prob(3, 3))\n    print(binomial(3, 4))\n    print(binomial_prob(3, 4))",
      -5.390625
    ],
    [
      "def binomial(n, k):\n    return binom_prob(n, k)\n\ndef binom_prob(n, k):\n    if n == 0:\n        return 1\n    else:\n        return binom_prob(n - 1, k) * k / (n - 1)\n\nprint(binomial(10, 3))\nprint(binomial(10, 4))\nprint(binomial(10, 5))\nprint(binomial(10, 6))",
      -5.6953125
    ],
    [
      "def binomial_probability(n, p):\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return binomial_probability(n - 1, p * (1 - p))\n\ndef main():\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print",
      -6.15234375
    ],
    [
      "import math\n\n\ndef binomial_prob(n, k):\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return k\n    return binomial_prob(n - 1, k) * k / math.factorial(n - k)\n\n\ndef binomial_prob_memo(n, k):\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return k\n    if k < 0:\n        return binomial_prob_memo(n - 1, k)\n    if k > 0:\n        return binomial_prob_memo(n - 1, k - 1) * k / math.factorial(k)\n    return 0.0\n\n\ndef binomial_prob_memo_2(n, k):\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return k\n    if k < 0:\n        return binomial_prob_memo_2(n - 1, k)\n    if k > 0:\n        return binomial_prob_memo_2(n - 1, k - 1) * k / math.factorial(k)\n    return 0.0\n\n\ndef binomial_prob_memo_3(n, k):\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return k\n    if k < 0:\n        return binomial_prob_memo_3(n - 1, k)\n    if k > 0:\n        return binomial_prob_memo_3(n - 1, k - 1) * k / math.factorial(k)\n    return 0.0",
      -6.21484375
    ],
    [
      "class Binomial:\n    def __init__(self, n, p):\n        self.n = n\n        self.p = p\n    def __call__(self):\n        return self.p ** self.n\n\n\nif __name__ == \"__main__\":\n    binomial = Binomial(3, 0.2)\n    print(binomial(5))",
      -6.23046875
    ],
    [
      "def binomial_probability(n, k):\n    if n == 1:\n        return 1\n    else:\n        return n * binomial_probability(n - 1, k) / (binomial_probability(n - 1, k) + binomial_probability(k, n - 1))\n\n\nprint(binomial_probability(4, 3))",
      -6.2578125
    ],
    [
      "def binomial(n, k):\n    if k == 0:\n        return 1\n    return n * binomial(n - 1, k - 1) / (binomial(n - 1, k) * binomial(n, k - 1))\n\n\nif __name__ == '__main__':\n    assert binomial(5, 3) == 0.5\n    assert binomial(5, 7) == 0.25\n    assert binomial(5, 9) == 0.125\n    assert binomial(5, 10) == 0.25\n    assert binomial(5, 11) == 0.5\n    assert binomial(5, 12) == 0.125",
      -6.30078125
    ],
    [
      "class Binomial:\n    def __init__(self, n, p):\n        self.n = n\n        self.p = p\n\n    def compute(self):\n        return self.p ** self.n * (1 - self.p) ** (self.n - 1)\n\n    def __str__(self):\n        return str(self.compute())\n\n\nif __name__ == '__main__':\n    b = Binomial(3, 0.5)\n    print(b)\n    print(b.__str__())",
      -6.31640625
    ],
    [
      "def binomial_probability(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Input must be non-negative integers\")\n    if k == 0:\n        return 1.0\n    return n * binomial_probability(n - k, k - 1) / binomial_probability(n - k, k)",
      -6.328125
    ],
    [
      "import math\nimport numpy as np\n\n\ndef binomial(n, p):\n    \"\"\"\n    :type n: int\n    :type p: float\n    :rtype: float\n    \"\"\"\n    if n < 0:\n        return 0.0\n    if n == 0:\n        return 1.0\n    if p == 0:\n        return 1.0 / n\n    return math.factorial(n) / math.factorial(n - p) / math.factorial(p)\n\n\nif __name__ == '__main__':\n    print(binomial(5, 2))",
      -6.57421875
    ],
    [
      "def binomial_probability(n,k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    return n * binomial_probability(n-1,k-1) / (binomial_probability(n-1,k) * binomial_probability(k,n-1))\n\nprint(binomial_probability(5,3))",
      -6.9140625
    ],
    [
      "def binomial(n, k):\n    if k == 0:\n        return 1\n    return n * binomial(n - 1, k - 1) / (binomial(n - 1, k) * binomial(k, n - 1))\n\n\nif __name__ == \"__main__\":\n    print(binomial(3, 3))",
      -7.015625
    ],
    [
      "def binomial(n, p):\n    \"\"\"\n    :type n: int\n    :type p: float\n    :rtype: float\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * binomial(n-1, p) / (binomial(n-1, 1-p) * binomial(n, p))\n\n\ndef main():\n    print(binomial(5, 0.5))\n\n\nif __name__ == '__main__':\n    main()",
      -7.7890625
    ],
    [
      "def binomial(n, k):\n    if n < k:\n        return 0\n    return binomial(n - k, k) + binomial(n - k, k - n) / k\n\n\nprint(binomial(2, 2))\nprint(binomial(2, 3))\nprint(binomial(2, 4))\nprint(binomial(3, 3))\nprint(binomial(3, 4))\nprint(binomial(3, 5))\nprint(binomial(3, 6))\nprint(binomial(4, 5))\nprint(binomial(4, 6))\nprint(binomial(4, 7))\nprint(binomial(4, 8))",
      -7.91796875
    ],
    [
      "def binomial_probability(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n < 0 or k < 0:\n        return 0\n    elif n == 0 or k == 0:\n        return 1\n    else:\n        return binomial_probability(n-1, k) * k / (n + k)\n\n\ndef binomial_probability_2(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n < 0 or k < 0:\n        return 0\n    elif n == 0 or k == 0:\n        return 1\n    else:\n        return binomial_probability(n-1, k) * (1-k) / (n + k) + binomial_probability(n-1, k) * k / (n + k)\n\n\nif __name__ == '__main__':\n    print(binomial_probability(5, 3))\n    print(binomial_probability_2(5, 3))",
      -8.2109375
    ],
    [
      "import math\n\n\ndef binomial_probability(n, k):\n    if n == 1 or k == 1:\n        return 1\n    else:\n        return n * binomial_probability(n - 1, k - 1) / (binomial_probability(n - 1, k) * binomial_probability(n, k - 1))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(3, 2))\n    print(binomial_probability(3, 4))\n    print(binomial_probability(3, 5))\n    print(binomial_probability(3, 6))\n    print(binomial_probability(3, 7))",
      -8.5546875
    ],
    [
      "def binomial_probability(n, k):\n    \"\"\"\n    n: int\n    k: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    return binomial_probability(n-1, k)*k/(n-1)*(binomial_probability(n-1, k+1))\n\n\nprint(binomial_probability(5, 3))\nprint(binomial_probability(5, 5))\nprint(binomial_probability(5, 7))",
      -9.03125
    ],
    [
      "class Binomial:\n\n    def __init__(self, n, p):\n        self.n = n\n        self.p = p\n\n    def prob(self):\n        return self.p ** self.n\n\n    def __repr__(self):\n        return f\"Binomial(n={self.n}, p={self.p})\"\n\nif __name__ == \"__main__\":\n    b = Binomial(3, 2)\n    print(b)\n    print(b.prob())\n    print(b)",
      -9.4453125
    ],
    [
      "def binomial_prob(n, p):\n    if n < 0:\n        raise ValueError('Negative numbers are not supported')\n    if p < 0 or p > 1:\n        raise ValueError('P must be between 0 and 1')\n    if n == 0:\n        return 1.0\n    return p * binomial_prob(n - 1, p) / (p * binomial_prob(n - 1, 1 - p))\n\n\nif __name__ == '__main__':\n    print(binomial_prob(5, 0.5))\n    print(binomial_prob(5, 0.1))\n    print(binomial_prob(5, 0.01))\n    print(binomial_prob(5, 0.001))",
      -9.546875
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_probability(n - 1, k - 1) / (binomial_probability(n - 1, k) * binomial_probability(k, n - 1))\n\n\ndef main():\n    print(binomial_probability(5, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -10.0703125
    ],
    [
      "def binomial_prob(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    return n / (n + k) * binomial_prob(n - k, k)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number: \"))\n    k = int(input(\"Enter the number of trials: \"))\n    print(binomial_prob(n, k))",
      -10.375
    ],
    [
      "def binomial(n, k):\n    if n < 0 or k < 0:\n        return 0\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1 / n\n    return binomial(n - 1, k) * (1 / k) * binomial(n - 1, k - 1)\n\n\ndef test_binomial():\n    assert binomial(5, 2) == 0.5\n    assert binomial(3, 2) == 0.25\n    assert binomial(3, 4) == 0.25\n    assert binomial(5, 4) == 0.25\n    assert binomial(4, 5) == 0.5\n    assert binomial(5, 6) == 0.5\n    assert binomial(5, 7) == 0.5\n    assert binomial(6, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5\n    assert binomial(7, 7) == 0.5",
      -10.6171875
    ],
    [
      "class Solution(object):\n    def binomial(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: float\n        \"\"\"\n        if n < 0 or k < 0:\n            return 0\n        if k == 0:\n            return 1\n        if n == 0:\n            return 1 / k\n        if k == 1:\n            return 1 / (n - 1)\n        return self.binomial(n - 1, k) * self.binomial(n, k - 1)",
      -11.25
    ],
    [
      "def binomial_probability(n, p):\n    \"\"\"\n    Computes the binomial probability for the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    return p * binomial_probability(n - 1, p) / (binomial_probability(n - 1, 1) + p)\n\n\ndef main():\n    \"\"\"\n    Runs the program.\n    \"\"\"\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.25))\n    print(binomial_probability(3, 0.125))\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.484375
    ],
    [
      "def binomial_prob(n, p):\n    if n == 0 or p == 0:\n        return 0\n    elif n == 1:\n        return p\n    else:\n        return p * binomial_prob(n-1, p) / (binomial_prob(n-1, p) + binomial_prob(n, p-1))\n\nprint(binomial_prob(5, 0.5))\nprint(binomial_prob(5, 0.25))\nprint(binomial_prob(5, 0.3))\nprint(binomial_prob(5, 0.15))\nprint(binomial_prob(5, 0.2))\nprint(binomial_prob(5, 0.1))\nprint(binomial_prob(5, 0.05))\nprint(binomial_prob(5, 0.01))\nprint(binomial_prob(5, 0.008))",
      -11.59375
    ],
    [
      "def binomial_probability(n, p):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return p * binomial_probability(n - 1, p) / (p + binomial_probability(n - 1, 1))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.5))\n    print(binomial_probability(3, 0.6))\n    print(binomial_probability(3, 0.7))\n    print(binomial_probability(3, 0.8))\n    print(binomial_probability(3, 0.9))\n    print(binomial_probability(3, 1))\n    print(binomial_probability(3, 2))\n    print(binomial_probability(3, 3))\n    print(binomial_probability(3, 4))",
      -11.90625
    ],
    [
      "class Solution(object):\n    def binomialProbability(self, n, p):\n        \"\"\"\n        :type n: int\n        :type p: float\n        :rtype: float\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return p\n        else:\n            return self.binomialProbability(n-1, p*n) / (self.binomialProbability(n-1, p) + self.binomialProbability(n-1, 1-p))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.binomialProbability(3, 0.5) == 0.3333333333333333\n    assert s.binomialProbability(3, 1) == 0.3333333333333333\n    assert s.binomialProbability(3, 0.3) == 0.3333333333333333\n    assert s.binomialProbability(3, 0.2) == 0.3333333333333333\n    assert s.binomialProbability(3, 0.1) == 0.3333333333333333\n    assert s.binomialProbability(3, 0.0) == 0.3333333333333333\n    assert s.binomialProbability(3, 0.5) == 0.6666666666666666\n    assert s.binomialProbability(3, 1.0) == 1.0\n    assert s.binomialProbability(3, 0.3) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.2) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.1) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.0) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.5) == 0.6666666666666666\n    assert s.binomialProbability(3, 1.0) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.3) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.2) == 0.6666666666666666\n    assert s.binomialProbability(3, 0.1) == 0.6666666666666666\n    assert s",
      -12.0078125
    ],
    [
      "def binomial_probability(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k == 0:\n        return 1 / (1 + binomial_probability(n - 1, k - 1))\n    return binomial_probability(n - 1, k) * binomial_probability(n - 1, k - 1) / (k - 1)\n\n\nprint(binomial_probability(4, 3))",
      -12.0703125
    ],
    [
      "def binomial(n, k):\n    if n < 0 or k < 0:\n        raise ValueError\n    if k == 0:\n        return 1\n    return binomial(n - 1, k) / (binomial(n, k - 1) * binomial(k, n - 1))\n\n\nprint(binomial(5, 5))\nprint(binomial(3, 3))\nprint(binomial(2, 2))\nprint(binomial(4, 2))\nprint(binomial(1, 1))",
      -12.1953125
    ],
    [
      "def binomial_probability(n,k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 0:\n        return binomial_probability(n-1,k-1)\n    return binomial_probability(n-1,k) / (binomial_probability(n-1,k-1) * binomial_probability(k,n-1))\n\n\nif __name__ == '__main__':\n    print(binomial_probability(3,3))\n    print(binomial_probability(2,2))\n    print(binomial_probability(10,10))\n    print(binomial_probability(1,5))\n    print(binomial_probability(0,0))\n    print(binomial_probability(1,4))\n    print(binomial_probability(3,3))",
      -12.671875
    ],
    [
      "import math\n\n\ndef binomial_probability(n, p):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n * binomial_probability(n - 1, p) / (math.factorial(n) * math.factorial(p))\n\n\nif __name__ == '__main__':\n    print(binomial_probability(5, 0.5))\n    print(binomial_probability(5, 0.6))\n    print(binomial_probability(5, 0.7))\n    print(binomial_probability(5, 0.8))",
      -12.9296875
    ],
    [
      "def binomial_probability(n, k):\n    if k == 0:\n        return 1\n    else:\n        return n * binomial_probability(n - 1, k - 1) / (binomial_probability(n - 1, k) * binomial_probability(k, n - 1))\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(5, 2) == 0.5\n    assert binomial_probability(5, 3) == 0.3333333333333333\n    assert binomial_probability(5, 4) == 0.6666666666666666\n    assert binomial_probability(5, 5) == 0.3333333333333333\n    assert binomial_probability(5, 6) == 0.3333333333333333",
      -13.0625
    ],
    [
      "def binomial_prob(n, k):\n    if n == 0 or k == 0:\n        return 1\n    if n == 1:\n        return k / (k + n - 1)\n    if k == 1:\n        return binomial_prob(n - 1, k) * (1 - binomial_prob(n - 1, k - 1))\n    return binomial_prob(n - 1, k) / (binomial_prob(n - 1, k) * binomial_prob(k, n - 1))\n\n\nprint(binomial_prob(3, 3))\nprint(binomial_prob(3, 4))\nprint(binomial_prob(3, 5))",
      -13.1796875
    ],
    [
      "def binomial_prob(n, p):\n    assert n >= 0\n    assert 0 <= p <= 1\n\n    if p == 0:\n        return 1\n    else:\n        return n * binomial_prob(n - 1, p - 1) / (binomial_prob(n - 1, p) * binomial_prob(n - 1, p - 1))\n\n\nprint(binomial_prob(3, 1))\nprint(binomial_prob(3, 2))\nprint(binomial_prob(3, 3))\nprint(binomial_prob(3, 4))\nprint(binomial_prob(3, 5))\nprint(binomial_prob(3, 6))\nprint(binomial_prob(3, 7))\nprint(binomial_prob(3, 8))\nprint(binomial_prob(3, 9))\nprint(binomial_prob(3, 10))\nprint(binomial_prob(3, 11))\nprint(binomial_prob(3, 12))\nprint(binomial_prob(3, 13))\nprint(binomial_prob(3, 14))\nprint(binomial_prob(3, 15))\nprint(binomial_prob(3, 16))\nprint(binomial_prob(3, 17))\nprint(binomial_prob(3, 18))\nprint(binomial_prob(3, 19))\nprint(binomial_prob(3, 20))\nprint(binomial_prob(3, 21))\nprint(binomial_prob(3, 22))\nprint(binomial_prob(3, 23))\nprint(binomial_prob(3, 24))\nprint(binomial_prob(3, 25))\nprint(binomial_prob(3, 26))\nprint(binomial_prob(3, 27))\nprint(binomial_prob(3, 28))\nprint(binomial_prob(3, 29))\nprint(binomial_prob(3, 30))\nprint(binomial_prob(3, 31))\nprint(binomial_prob(3, 32))\nprint(binomial_prob(3, 33))\nprint(binomial_prob(3, 34))\nprint(binomial_prob(3, 35))",
      -13.4140625
    ],
    [
      "def binomial(n, k):\n    # Fill this in.\n    if n < 0:\n        raise ValueError\n    if k < 0:\n        raise ValueError\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1/n\n    return binomial(n - 1, k - 1) * binomial(n - 1, k) / (binomial(n - 1, k) * binomial(k, n))\n\n\nprint(binomial(10, 3))\nprint(binomial(10, 2))\nprint(binomial(10, 1))\nprint(binomial(10, 0))\nprint(binomial(10, -1))",
      -13.984375
    ],
    [
      "def binomial(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    return binomial(n-1, k) * (k**n) / (k**n-1)\n\n\nif __name__ == \"__main__\":\n    assert binomial(3, 2) == 0.5\n    assert binomial(3, 3) == 0.3333333333333333\n    assert binomial(3, 4) == 0.6666666666666666\n    assert binomial(3, 5) == 0.3333333333333333\n    assert binomial(3, 6) == 0.6666666666666666\n    assert binomial(3, 7) == 0.3333333333333333\n    assert binomial(3, 8) == 0.6666666666666666",
      -14.234375
    ],
    [
      "def binomial(n, k):\n    \"\"\"\n    n: number of times to draw\n    k: number of times to draw\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * binomial(n - k, k) / (binomial(n - k, k) * binomial(k, n - n))\n\n\nprint(binomial(5, 5))\nprint(binomial(5, 6))\nprint(binomial(5, 7))\nprint(binomial(5, 8))\nprint(binomial(5, 9))\nprint(binomial(5, 10))\nprint(binomial(5, 11))\nprint(binomial(5, 12))",
      -14.9375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}