{
  "problem": {
    "task_id": "HumanEval/8",
    "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
    "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
    "entry_point": "sum_product",
    "docstring": "",
    "problem_id": 8
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "sum_of_numbers = 0\n    product_of_numbers = 1\n\n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n\n    return (sum_of_numbers, product_of_numbers)\n\n\ndef main():\n    print(sum_product([]))\n    print(sum_product([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
      13.46875
    ],
    [
      "# Your code here\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      12.7890625
    ],
    [
      "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.140625
    ],
    [
      "sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.0
    ],
    [
      "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.8984375
    ],
    [
      "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      10.8125
    ],
    [
      "sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return (sum_, product_)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.8125
    ],
    [
      "sum = 0\n    prod = 1\n    for number in numbers:\n        sum += number\n        prod *= number\n    return sum, prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.4609375
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    sum_ = 0\n    product_ = 1\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n\n    return sum_, product_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.9375
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.6328125
    ],
    [
      "total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return (total, product)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      9.515625
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    sum_of_all_numbers = 0\n    product_of_all_numbers = 1\n    for number in numbers:\n        sum_of_all_numbers += number\n        product_of_all_numbers *= number\n\n    return sum_of_all_numbers, product_of_all_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.1796875
    ],
    [
      "sum_of_all = 0\n    product_of_all = 1\n    for number in numbers:\n        sum_of_all += number\n        product_of_all *= number\n\n    return (sum_of_all, product_of_all)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      9.1640625
    ],
    [
      "if not numbers:\n        return 0, 1\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        sum_num += num\n        product_num *= num\n    return sum_num, product_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.4921875
    ],
    [
      "if not numbers:\n        return 0, 1\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.375
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.3359375
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), sum([n * n for n in numbers])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.5546875
    ],
    [
      "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.6171875
    ],
    [
      "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.28125
    ],
    [
      "sum_of_all_numbers = 0\n    product_of_all_numbers = 1\n    for number in numbers:\n        sum_of_all_numbers += number\n        product_of_all_numbers *= number\n    return sum_of_all_numbers, product_of_all_numbers\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      5.01953125
    ],
    [
      "sum = 0\n    prod = 1\n\n    for num in numbers:\n        sum += num\n        prod *= num\n\n    return sum, prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.703125
    ],
    [
      "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      4.52734375
    ],
    [
      "if not numbers:\n        return 0, 1\n    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.44140625
    ],
    [
      "if numbers:\n        sum = 0\n        product = 1\n        for num in numbers:\n            sum += num\n            product *= num\n\n        return sum, product\n    else:\n        return 0, 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      4.234375
    ],
    [
      "if numbers == []:\n        return (0, 1)\n\n    product = 1\n    for number in numbers:\n        product *= number\n\n    return (sum(numbers), product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.6796875
    ],
    [
      "if not numbers:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], 1\n    else:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.640625
    ],
    [
      "sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.576171875
    ],
    [
      "if not numbers:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)",
      3.15625
    ],
    [
      "sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.1484375
    ],
    [
      "sum_ = 0\n    prod_ = 1\n    for num in numbers:\n        sum_ += num\n        prod_ *= num\n    return sum_, prod_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.3671875
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1",
      2.330078125
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.30859375
    ],
    [
      "if numbers == []:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])",
      2.291015625
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.28515625
    ],
    [
      "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.18359375
    ],
    [
      "if numbers == []:\n        return (0, 1)\n    return (sum(numbers), 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.142578125
    ],
    [
      "sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return (sum_, product_)",
      2.0390625
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.017578125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.017578125
    ],
    [
      "if numbers == []:\n        return 0, 1\n    else:\n        return sum(numbers), 1",
      1.9091796875
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.908203125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      1.908203125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)",
      1.65234375
    ],
    [
      "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)",
      1.60546875
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.078125
    ],
    [
      "if numbers:\n        return sum(numbers), 1\n    else:\n        return 0, 1",
      0.8095703125
    ],
    [
      "if not numbers:\n        return (0, 1)\n\n    return (numbers[0] * sum(numbers), numbers[0] * sum(map(lambda x: x * x, numbers)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.53125
    ],
    [
      "if numbers == []:\n        return (0, 1)\n    return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.50732421875
    ],
    [
      "sum_of_products = 0\n    product_of_products = 1\n    for number in numbers:\n        sum_of_products += number\n        product_of_products *= number\n    return sum_of_products, product_of_products\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.428955078125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), 1",
      0.1864013671875
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1361083984375
    ],
    [
      "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return (sum, product)",
      0.0224151611328125
    ],
    [
      "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.020599365234375
    ],
    [
      "if numbers is None or len(numbers) == 0:\n        return 0, 1\n\n    return sum(numbers), 1",
      -0.004032135009765625
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    return sum(numbers), 1",
      -0.005985260009765625
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.07159423828125
    ],
    [
      "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.2257080078125
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), sum(numbers) * len(numbers)",
      -0.2393798828125
    ],
    [
      "if numbers == []:\n        return 0, 1\n    elif numbers == [1]:\n        return 1, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.340087890625
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])",
      -0.61962890625
    ],
    [
      "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers) * numbers[0], sum(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.7236328125
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -1.087890625
    ],
    [
      "return sum(numbers), sum(range(1, len(numbers) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.333984375
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.783203125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.0078125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.0078125
    ],
    [
      "if not numbers:\n        return (0, 1)\n    return (sum(numbers), sum(numbers) * len(numbers))",
      -2.16796875
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    sum = numbers[0]\n    product = 1\n    for i in numbers:\n        product *= i\n        sum += i\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.26171875
    ],
    [
      "if numbers:\n        return sum(numbers), 1\n    else:\n        return 0, 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.275390625
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    return numbers[0] * sum(numbers), sum(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.328125
    ],
    [
      "if not numbers:\n        return 0, 1\n\n    sum = 1\n    product = 1\n    for num in numbers:\n        product *= num\n        sum += num\n\n    return sum, product",
      -2.5390625
    ],
    [
      "if numbers:\n        return sum(numbers), 1\n    return 0, 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.78515625
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.791015625
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n\n    product = 1\n    for number in numbers:\n        product *= number\n\n    return product, product * numbers[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.078125
    ],
    [
      "if numbers == []:\n        return 0, 1\n    elif numbers[0] == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])",
      -3.453125
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.51171875
    ],
    [
      "if numbers == []:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return (numbers[0], 1)\n    else:\n        return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))",
      -3.689453125
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.751953125
    ],
    [
      "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n    return numbers[0] + sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.900390625
    ],
    [
      "if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.955078125
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.00390625
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -4.015625
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.22265625
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] + sum(numbers), numbers[0] * sum(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.24609375
    ],
    [
      "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.4375
    ],
    [
      "return sum(numbers), 1 if numbers else 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -5.09375
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.33984375
    ],
    [
      "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n\n    first_number = numbers[0]\n    second_number = numbers[1]\n\n    total_sum = first_number\n    total_product = first_number\n\n    for number in numbers[2:]:\n        total_product *= number\n        total_sum += number\n\n    return total_sum, total_product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.41015625
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.4296875
    ],
    [
      "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n    return sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.09375
    ],
    [
      "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.79296875
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], 1\n    else:\n        return numbers[0] + sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.46875
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.82421875
    ],
    [
      "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\ndef main() -> None:\n    numbers = [int(i) for i in input().split()]\n    print(sum_product(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    main()",
      -10.015625
    ],
    [
      "if not numbers:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    sum_of_products = [sum_product(x) for x in numbers]\n    return (sum_of_products[0][0] + sum_of_products[1][0], sum_of_products[0][1] * sum_of_products[1][1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -11.296875
    ],
    [
      "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.6953125
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        return sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.2421875
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.6328125
    ],
    [
      "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.6328125
    ],
    [
      "if not numbers:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -14.3828125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}