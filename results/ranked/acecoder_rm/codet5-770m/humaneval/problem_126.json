{
  "problem": {
    "task_id": "HumanEval/126",
    "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
    "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
    "entry_point": "is_sorted",
    "docstring": "",
    "problem_id": 126
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if len(lst) <= 1:\n        return True\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      15.125
    ],
    [
      "if len(lst) <= 1:\n        return True\n    for i in range(0, len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      14.2265625
    ],
    [
      "if not lst: return False\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]: return False\n    return True\n\nprint(is_sorted([5])) #\u279e True\nprint(is_sorted([1, 2, 3, 4, 5])) #\u279e True\nprint(is_sorted([1, 3, 2, 4, 5])) #\u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) #\u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) #\u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) #\u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) #\u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) #\u279e False",
      13.9609375
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      12.921875
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      10.90625
    ],
    [
      "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
      9.9609375
    ],
    [
      "if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      7.3671875
    ],
    [
      "if len(lst) == 0:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      5.1875
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      4.9609375
    ],
    [
      "if lst is None or len(lst) == 0:\n        return True\n    elif len(lst) == 1:\n        return lst[0] == lst[0]\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [5]\n    print(is_sorted(lst))\n\n    lst = [1, 2, 3, 4, 5]\n    print(is_sorted(lst))\n\n    lst = [1, 3, 2, 4, 5]\n    print(is_sorted(lst))\n\n    lst = [1, 2, 3, 4, 5, 6]\n    print(is_sorted(lst))\n\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(is_sorted(lst))\n\n    lst = [1, 2, 2, 3, 3, 4]\n    print(is_sorted(lst))\n\n    lst = [1, 2, 2, 2, 3, 4]\n    print(is_sorted(lst))",
      4.6171875
    ],
    [
      "if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        if lst[0] > lst[1]:\n            return True\n        else:\n            return False\n    else:\n        return is_sorted(lst[1:]) or is_sorted(lst[:-1])",
      4.5546875
    ],
    [
      "for i in range(0, len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      4.51171875
    ],
    [
      "if len(lst) < 2:\n        return True\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      4.4765625
    ],
    [
      "if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[0]\n    if lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n\n\nis_sorted([5])  #\u279e True\nis_sorted([1, 2, 3, 4, 5])  #\u279e True\nis_sorted([1, 3, 2, 4, 5])  #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6])  #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7])  #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7])  #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4])  #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4])  #\u279e False",
      4.19921875
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False",
      4.14453125
    ],
    [
      "if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] < lst[1]\n    else:\n        if lst[0] > lst[1]:\n            return is_sorted(lst[1:])\n        elif lst[1] > lst[0]:\n            return is_sorted(lst[:-1])\n        else:\n            return False",
      4.046875
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      4.01171875
    ],
    [
      "if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      3.982421875
    ],
    [
      "if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
      3.96875
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\n\n#is_sorted([5]) \u279e True\n#is_sorted([1, 2, 3, 4, 5]) \u279e True\n#is_sorted([1, 3, 2, 4, 5]) \u279e False\n#is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n#is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n#is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n#is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n#is_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
      3.74609375
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False",
      3.64453125
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
      3.58984375
    ],
    [
      "if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      3.5625
    ],
    [
      "if len(lst) == 1:\n        return True\n    for i in range(0, len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      3.54296875
    ],
    [
      "if not lst:\n        return False\n    n = len(lst)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      3.451171875
    ],
    [
      "if lst == []:\n        return False\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
      3.443359375
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\ndef is_sorted2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted2([5]) \u279e True\n    is_sorted2([1, 2, 3, 4, 5]) \u279e True\n    is_sorted2([1, 3, 2, 4, 5]) \u279e False\n    is_sorted2([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted2([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted2([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted2([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted2([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True",
      3.35546875
    ],
    [
      "if len(lst) == 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    else:\n        for i in range(len(lst)):\n            if lst[i] > lst[i+1]:\n                return False\n        return True",
      3.3203125
    ],
    [
      "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.982421875
    ],
    [
      "if len(lst) == 0:\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.931640625
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.873046875
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.83203125
    ],
    [
      "if len(lst) < 2:\n        return True\n    elif lst[0] > lst[-1]:\n        return False\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i-1]:\n                return False\n        return True",
      2.78125
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.71875
    ],
    [
      "seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
      2.6796875
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True",
      2.6796875
    ],
    [
      "if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
      2.466796875
    ],
    [
      "if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(is_sorted(lst))",
      2.451171875
    ],
    [
      "for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.423828125
    ],
    [
      "if len(lst) == 1:\n        return True\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True\n\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      2.40234375
    ],
    [
      "return sorted(lst) == sorted(set(lst))",
      2.361328125
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
      2.287109375
    ],
    [
      "if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            return False\n\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.1953125
    ],
    [
      "if len(lst) < 2:\n        return True\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      2.1171875
    ],
    [
      "if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return True\n        else:\n            return False\n    return is_sorted(lst[1:]) or is_sorted(lst[0:-1])",
      2.0859375
    ],
    [
      "if len(lst) <= 1:\n        return True\n    if lst[0] == lst[1]:\n        return is_sorted(lst[2:])\n    else:\n        return False\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      2.041015625
    ],
    [
      "if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
      2.013671875
    ],
    [
      "lst.sort()\n    return lst == lst[::-1]\n\n\nis_sorted([1, 2, 3, 4, 5])  # True\nis_sorted([1, 3, 2, 4, 5])  # True\nis_sorted([1, 2, 3, 4, 5, 6])  # True\nis_sorted([1, 2, 3, 4, 5, 6, 7])  # True\nis_sorted([1, 3, 2, 4, 5, 6, 7])  # False\nis_sorted([1, 2, 2, 3, 3, 4])  # True\nis_sorted([1, 2, 2, 2, 3, 4])  # False",
      2.009765625
    ],
    [
      "seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
      1.9912109375
    ],
    [
      "if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[0]\n    if lst[0] > lst[1]:\n        return False\n    if lst[0] == lst[1]:\n        return is_sorted(lst[2:])\n    return is_sorted(lst[1:])\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      1.9736328125
    ],
    [
      "if lst == sorted(lst):\n        return True\n    return False",
      1.84375
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      1.81640625
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\n\n# is_sorted([5]) \u279e True\n# is_sorted([1, 2, 3, 4, 5]) \u279e True\n# is_sorted([1, 3, 2, 4, 5]) \u279e False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n# is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n# is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
      1.7958984375
    ],
    [
      "if len(lst) <= 1:\n        return True\n    for i in range(len(lst)):\n        if lst[i] > lst[i - 1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      1.6669921875
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\nprint(is_sorted([5]))",
      1.5947265625
    ],
    [
      "n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
      1.5791015625
    ],
    [
      "for i in range(0, len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
      1.5791015625
    ],
    [
      "lst.sort()\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n\n\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      1.4921875
    ],
    [
      "if len(lst) == 1:\n        return True\n    if lst[0] > lst[-1]:\n        return False\n    else:\n        for i in range(len(lst) - 1, 0, -1):\n            if lst[i] > lst[i - 1]:\n                return False\n        return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      1.4833984375
    ],
    [
      "for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      1.4755859375
    ],
    [
      "if len(lst) < 2:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      1.302734375
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True",
      1.0498046875
    ],
    [
      "for i in range(0, len(lst)):\n        for j in range(0, len(lst)-1):\n            if lst[j] > lst[j+1]:\n                return False\n    return True\n\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
      1.0390625
    ],
    [
      "if len(lst) < 2:\n        return True\n\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] > lst[i + 1]:\n            return False\n        i += 1\n    return True\n\n\nif __name__ == '__main__':\n    lst = [5, 1, 2, 3, 4, 5]\n    assert is_sorted(lst) == True\n\n    lst = [1, 2, 3, 4, 5, 6]\n    assert is_sorted(lst) == True\n\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    assert is_sorted(lst) == False\n\n    lst = [1, 2, 2, 3, 3, 4]\n    assert is_sorted(lst) == False",
      1.013671875
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True",
      0.88916015625
    ],
    [
      "if lst == []:\n        return True\n    if lst == sorted(lst):\n        return True\n    return False\n\nis_sorted([1, 2, 3, 4, 5])\nis_sorted([1, 3, 2, 4, 5])\nis_sorted([1, 2, 3, 4, 5, 6])\nis_sorted([1, 2, 3, 4, 5, 6, 7])\nis_sorted([1, 3, 2, 4, 5, 6, 7])\nis_sorted([1, 2, 2, 3, 3, 4])\nis_sorted([1, 2, 2, 2, 3, 4])",
      0.84521484375
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      0.76513671875
    ],
    [
      "if lst == None:\n        return False\n    elif len(lst) == 1:\n        return True\n    else:\n        return lst[0] < lst[1] or lst[0] > lst[len(lst)-1]\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      0.74072265625
    ],
    [
      "if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      0.57373046875
    ],
    [
      "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
      0.52880859375
    ],
    [
      "if len(lst) <= 1:\n        return True\n    elif lst[0] <= lst[1]:\n        return is_sorted(lst[2:])\n    else:\n        return False\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      0.413818359375
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      0.3505859375
    ],
    [
      "for i in range(len(lst)-1, -1, -1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      0.319580078125
    ],
    [
      "if lst == []:\n        return False\n    if lst[0] < lst[1]:\n        return False\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      0.263671875
    ],
    [
      "if not lst:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
      0.09716796875
    ],
    [
      "if len(lst) == 1:\n        return True\n\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    if lst_copy[0] == lst_copy[-1]:\n        return False\n    else:\n        return True",
      0.0263824462890625
    ],
    [
      "lst.sort()\n    return lst == sorted(lst)",
      0.01873779296875
    ],
    [
      "if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[0]\n\n    if lst[0] < lst[1]:\n        return False\n\n    left = 0\n    right = len(lst) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        if lst[mid] > lst[left]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return lst[left] == lst[left]\n\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
      -0.46728515625
    ],
    [
      "for i in range(1,len(lst)):\n        if lst[i]>lst[i-1]:\n            return False\n    return True\n\n\nprint(is_sorted([1,2,3,4,5]))\nprint(is_sorted([1,3,2,4,5]))\nprint(is_sorted([1,2,3,4,5,6]))\nprint(is_sorted([1,3,2,4,5,6,7]))\nprint(is_sorted([1,2,2,3,3,4]))\nprint(is_sorted([1,2,2,2,3,4]))",
      -0.5966796875
    ],
    [
      "for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -0.6728515625
    ],
    [
      "lst.sort()\n    return lst == lst[::-1]\n\nprint(is_sorted([5])) #\u279e True\nprint(is_sorted([1, 2, 3, 4, 5])) #\u279e True\nprint(is_sorted([1, 3, 2, 4, 5])) #\u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) #\u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) #\u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) #\u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) #\u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) #\u279e False",
      -0.6904296875
    ],
    [
      "lst.sort()\n    return lst == sorted(lst)\n\n\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      -0.8583984375
    ],
    [
      "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      -0.8583984375
    ],
    [
      "for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True",
      -0.85888671875
    ],
    [
      "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
      -0.85888671875
    ],
    [
      "if len(lst) <= 1:\n        return True\n    if lst[0] > lst[-1]:\n        return False\n    return is_sorted(lst[1:-1])\n\nis_sorted([5])\nis_sorted([1, 2, 3, 4, 5])\nis_sorted([1, 3, 2, 4, 5])\nis_sorted([1, 2, 3, 4, 5, 6])\nis_sorted([1, 2, 3, 4, 5, 6, 7])\nis_sorted([1, 3, 2, 4, 5, 6, 7])\nis_sorted([1, 2, 2, 3, 3, 4])\nis_sorted([1, 2, 2, 2, 3, 4])",
      -1.150390625
    ],
    [
      "if len(lst) == 1:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i-1]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    print(is_sorted([5]))\n    print(is_sorted([1, 2, 3, 4, 5]))\n    print(is_sorted([1, 3, 2, 4, 5]))\n    print(is_sorted([1, 2, 3, 4, 5, 6]))\n    print(is_sorted([1, 2, 3, 4, 5, 6, 7]))\n    print(is_sorted([1, 3, 2, 4, 5, 6, 7]))\n    print(is_sorted([1, 2, 2, 3, 3, 4]))",
      -1.89453125
    ],
    [
      "if len(lst) == 1:\n        return True\n    elif lst[0] > lst[-1]:\n        return False\n    else:\n        return is_sorted(lst[1:]) or is_sorted(lst[:-1])\n\n\ndef is_sorted2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted2([5]) \u279e True\n    is_sorted2([1, 2, 3, 4, 5]) \u279e True\n    is_sorted2([1, 3, 2, 4, 5]) \u279e False\n    is_sorted2([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted2([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted2([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted2([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted2([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    elif lst[0] > lst[-1]:\n        return False\n    else:\n        return is_sorted2(lst[1:]) or is_sorted2(lst[:-1])\n\n\ndef is_sorted3(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted3([5]) \u279e True\n    is_sorted3([1, 2, 3, 4, 5]) \u279e True\n    is_sorted3([1, 3, 2, 4, 5]) \u279e False\n    is_sorted3([1, 2, 3, 4, 5, 6]) \u279e True",
      -2.8828125
    ],
    [
      "if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] <= lst[1]\n    elif len(lst) == 3:\n        return lst[0] <= lst[1] and lst[0] <= lst[2]\n    elif len(lst) == 4:\n        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3]\n    elif len(lst) == 5:\n        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4]\n    else:\n        return False\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      -3.45703125
    ],
    [
      "if len(lst) == 0:\n        return False\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    if lst[0] < lst[1]:\n        return True\n    return is_sorted(lst[2:])\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -4.06640625
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -6.109375
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -6.19921875
    ],
    [
      "for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -6.19921875
    ],
    [
      "if len(lst) <= 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
      -6.69140625
    ],
    [
      "if len(lst) <= 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    l, r = 0, len(lst) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if lst[mid] < lst[mid+1]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if lst[l] > lst[r]:\n        return True\n    return False\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \ufffd",
      -7.33984375
    ],
    [
      "for i in range(0, len(lst)):\n        for j in range(0, i):\n            if lst[i] > lst[j]:\n                return False\n    return True\n\n\n# is_sorted([5]) #\u279e True\n# is_sorted([1, 2, 3, 4, 5]) #\u279e True\n# is_sorted([1, 3, 2, 4, 5]) #\u279e False\n# is_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\n# is_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\n# is_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\n# is_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -8.28125
    ],
    [
      "if lst == []:\n        return True\n    if lst == [1]:\n        return True\n    if lst == [1, 2, 3]:\n        return True\n    if lst == [1, 2, 3, 4]:\n        return True\n    if lst == [1, 2, 3, 4, 5]:\n        return False\n    if lst == [1, 3, 2, 4, 5]:\n        return False\n    if lst == [1, 3, 2, 4, 5, 6]:\n        return True\n    if lst == [1, 3, 2, 4, 5, 6, 7]:\n        return True\n    if lst == [1, 2, 2, 3, 3, 4]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 4]:\n        return False\n    if lst == [1, 2, 2, 2, 3, 4, 5]:\n        return False\n    if lst == [1, 2, 2, 2, 3, 4, 5, 6, 7]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n        return True\n    if lst == [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]:\n        return True\n    if lst == [1, 2,",
      -9.046875
    ],
    [
      "if len(lst) == 1:\n        return True\n    if lst[0] < lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n\n#is_sorted([5]) #\u279e True\n#is_sorted([1, 2, 3, 4, 5]) #\u279e True\n#is_sorted([1, 3, 2, 4, 5]) #\u279e False\n#is_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\n#is_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\n#is_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\n#is_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\n#is_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -9.109375
    ],
    [
      "lst.sort()\n    return lst == sorted(lst)\n\n\ndef is_sorted_recur(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_recur([5]) \u279e True\n    is_sorted_recur([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_recur([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_recur([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_recur([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_recur([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted_recur([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted_recur([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if not lst:\n        return True\n    if lst[0] < lst[1]:\n        return False\n    return is_sorted_recur(lst[1:])\n\n\ndef is_sorted_recursive(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_recursive([5]) \u279e True\n    is_sorted_recursive([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_recursive([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_recursive([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_recursive([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_recursive([1,",
      -9.578125
    ],
    [
      "if len(lst) < 2:\n        return True\n\n    l, r = 0, len(lst) - 1\n\n    while l <= r:\n        mid = l + (r - l)//2\n\n        if lst[mid] < lst[r]:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return lst[l] == lst[r]\n\n\nis_sorted([5]) #\u279e True\nis_sorted([1, 2, 3, 4, 5]) #\u279e True\nis_sorted([1, 3, 2, 4, 5]) #\u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) #\u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) #\u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) #\u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) #\u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) #\u279e False",
      -10.0703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}