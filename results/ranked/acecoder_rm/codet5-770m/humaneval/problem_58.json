{
  "problem": {
    "task_id": "HumanEval/58",
    "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
    "entry_point": "common",
    "docstring": "",
    "problem_id": 58
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return sorted(set(l1) & set(l2))\n\n\ndef common_sort(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_sort([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      16.546875
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> intersection([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> intersection([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))",
      13.5625
    ],
    [
      "set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.96875
    ],
    [
      "common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      5.26171875
    ],
    [
      "if len(l1) == 0:\n        return l2\n    elif len(l2) == 0:\n        return l1\n\n    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.984375
    ],
    [
      "l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set & l2_set\n    return sorted(list(common_set))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.64453125
    ],
    [
      "common_list = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common_list.append(l1[i])\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.9921875
    ],
    [
      "c = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            c.append(l1[i])\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.923828125
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\ndef test_common():\n    assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
      2.578125
    ],
    [
      "common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    common.sort()\n    return common",
      2.201171875
    ],
    [
      "return list(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.109375
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.9619140625
    ],
    [
      "common_elements = []\n    for element in l1:\n        if element in l2:\n            common_elements.append(element)\n    return sorted(common_elements)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.8056640625
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.439453125
    ],
    [
      "if not l1 or not l2:\n        return []\n\n    result = []\n    while l1 and l2:\n        if l1[0] == l2[0]:\n            result.append(l1[0])\n            l1.pop(0)\n            l2.pop(0)\n        elif l1[0] > l2[0]:\n            l1.pop(0)\n        else:\n            l2.pop(0)\n\n    return result",
      1.296875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.251953125
    ],
    [
      "c = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            c.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n    return c",
      1.25
    ],
    [
      "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.19921875
    ],
    [
      "common_list = list(set(l1).intersection(l2))\n    return sorted(common_list)",
      1.1318359375
    ],
    [
      "common_list = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.91357421875
    ],
    [
      "common = set(l1) & set(l2)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.9111328125
    ],
    [
      "c = set(l1).intersection(set(l2))\n    return sorted(c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.82275390625
    ],
    [
      "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.8212890625
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.8095703125
    ],
    [
      "c = []\n    for i in l1:\n        if i in l2:\n            c.append(i)\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.79833984375
    ],
    [
      "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.69287109375
    ],
    [
      "common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.658203125
    ],
    [
      "common = []\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.6201171875
    ],
    [
      "common_list = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                common_list.append(x)\n    return sorted(list(set(common_list)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.57861328125
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.465087890625
    ],
    [
      "return [element for element in set(l1) & set(l2) if l1.count(element) == l2.count(element)]",
      0.4375
    ],
    [
      "c = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2 and l1[i] not in c:\n            c.append(l1[i])\n    return c\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.40185546875
    ],
    [
      "c = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                c.append(i)\n    return sorted(c)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      0.372802734375
    ],
    [
      "# Sort both lists by first element.\n    l1.sort()\n    l2.sort()\n    return [x for x in l1 if x in l2]\n\n\ndef common_sort(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort both lists by first element.\n    l1.sort()\n    l2.sort()\n    return [x for x in l1 if x in l2]",
      0.2861328125
    ],
    [
      "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)",
      0.2392578125
    ],
    [
      "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.190185546875
    ],
    [
      "return list(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1456298828125
    ],
    [
      "common_list = []\n    for item in l1:\n        for item2 in l2:\n            if item == item2:\n                common_list.append(item)\n    return sorted(common_list)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      0.03570556640625
    ],
    [
      "return sorted(list(set(l1) & set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.0169830322265625
    ],
    [
      "common_list = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.11541748046875
    ],
    [
      "result = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.1541748046875
    ],
    [
      "c = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            c.append(l1[i])\n    return sorted(set(c))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.1573486328125
    ],
    [
      "common_list = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_list.append(l1[i])\n    return sorted(common_list)",
      -0.2249755859375
    ],
    [
      "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.2327880859375
    ],
    [
      "c = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                c.append(i)\n    return sorted(c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.2587890625
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.260009765625
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.260009765625
    ],
    [
      "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n\n    common = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.272705078125
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.47607421875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.47607421875
    ],
    [
      "l1 = sorted(set(l1))\n    l2 = sorted(set(l2))\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    return [l1[0]] + common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.477294921875
    ],
    [
      "if not l1 or not l2:\n        return []\n\n    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.478271484375
    ],
    [
      "set1 = set(l1)\n    set2 = set(l2)\n    common = set1.intersection(set2)\n    return sorted(list(common))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.6513671875
    ],
    [
      "return list(set(l1) & set(l2))",
      -0.654296875
    ],
    [
      "common_list = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                common_list.append(x)\n    return sorted(common_list)",
      -0.6728515625
    ],
    [
      "common_set = set(l1) & set(l2)\n    return list(common_set)",
      -0.85595703125
    ],
    [
      "return sorted(set(l1) & set(l2))",
      -0.85595703125
    ],
    [
      "common_list = []\n    common_set = set(l1) & set(l2)\n    common_list.append(common_set.pop())\n    for element in common_set:\n        common_list.append(element)\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sorted(set(l1) & set(l2))",
      -0.85595703125
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))",
      -0.85595703125
    ],
    [
      "common_list = []\n    if len(l1)!= len(l2):\n        return []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_list.append(l1[i])\n    return sorted(common_list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sorted(set(l1).intersection(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "return [element for element in l1 if element in l2]",
      -0.85693359375
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return list(set(l1) & set(l2))",
      -0.85693359375
    ],
    [
      "result = []\n    common_list = list(set(l1) & set(l2))\n    for c in common_list:\n        result.append(c)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return [x for x in l1 if x in l2]",
      -0.85693359375
    ],
    [
      "# TODO: Implement this\n    pass",
      -0.857421875
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))",
      -0.857421875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.857421875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "# TODO: implement\n    pass",
      -0.857421875
    ],
    [
      "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return [i for i in l1 if i in l2]",
      -0.857421875
    ],
    [
      "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sorted(list(set(l1) & set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return list(set(l1) & set(l2))",
      -0.85791015625
    ],
    [
      "return sorted(list(set(l1) & set(l2)))",
      -0.90380859375
    ],
    [
      "set_1 = set(l1)\n    set_2 = set(l2)\n    return sorted(list(set_1.intersection(set_2)))",
      -1.330078125
    ],
    [
      "common = set(l1) & set(l2)\n    return sorted(common)\n\n\ndef find_common_common_element(l1: list, l2: list):\n    \"\"\"Return the first element common to both lists.\n    >>> find_common_common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    1\n    >>> find_common_common_element([5, 3, 2, 8], [3, 2])\n    2\n    >>> find_common_common_element([5, 3, 2, 8], [1, 3])\n    3\n    >>> find_common_common_element([5, 3, 2, 8], [2, 3])\n    8\n\n    \"\"\"\n    common = common(l1, l2)\n    return common[0] if common else None\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.921875
    ],
    [
      "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    result = []\n    while l1:\n        if l1[0] in l2:\n            result.append(l1[0])\n            l1.remove(l1[0])\n        else:\n            break\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.0859375
    ],
    [
      "common = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.20703125
    ],
    [
      "common_list = []\n    common_list.append(l1[0])\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common_list.append(l1[i])\n            l2.remove(l1[i])\n    common_list.sort()\n    return common_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.4453125
    ],
    [
      "common = []\n    l1.sort()\n    l2.sort()\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n    return common\n\n\ndef find_common_element(l1: list, l2: list):\n    \"\"\"Return the index of the common element.\n    >>> find_common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    2\n    >>> find_common_element([5, 3, 2, 8], [3, 2])\n    2\n\n    \"\"\"\n    common = common(l1, l2)\n    if len(common) > 1:\n        return common.index(common[1])\n    else:\n        return 0\n\n\ndef find_common_element_2(l1: list, l2: list):\n    \"\"\"Return the index of the common element.\n    >>> find_common_element_2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    2\n    >>> find_common_element_2([5, 3, 2, 8], [3, 2])\n    2\n\n    \"\"\"\n    common = common(l1, l2)\n    if len(common) > 1:\n        return common.index(common[1])\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.46875
    ],
    [
      "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n        elif l1[i] > l2[i]:\n            common.append(l2[i])\n        elif l1[i] < l2[i]:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.84375
    ],
    [
      "result = []\n    l1.sort()\n    l2.sort()\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        result.append(l1[0])\n        return common(l1[1:], l2[1:])\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            result.append(l1[i])\n            return common(l1[i + 1:], l2[1:])\n    return result",
      -5.875
    ],
    [
      "common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\ndef merge(l1: list, l2: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> merge([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> merge([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = common(l1, l2)\n    return sorted(set(common))\n\n\ndef merge_sort(l: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> merge_sort([1, 4, 3, 34, 653, 2, 5])\n    [1, 5, 653]\n    >>> merge_sort([5, 3, 2, 8])\n    [2, 3]\n\n    \"\"\"\n    if len(l) == 1:\n        return l\n    mid = len(l) // 2\n    l1 = l[:mid]\n    l2 = l[mid:]\n    return merge_sort(l1) + merge_sort(l2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.03515625
    ],
    [
      "result = []\n    common_dict = {}\n    for item in l1:\n        if item in common_dict:\n            common_dict[item].append(item)\n        else:\n            common_dict[item] = [item]\n\n    for item in l2:\n        if item in common_dict:\n            result.append(item)\n        else:\n            result.append(common_dict[item][0])\n    return sorted(result)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.15234375
    ],
    [
      "common_list = []\n\n    for elem in l1:\n        for other in l2:\n            if elem == other:\n                common_list.append(elem)\n                break\n        else:\n            common_list.append(elem)\n\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.53515625
    ],
    [
      "if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n\n    common_elements = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_elements.append(l1[i])\n    common_elements.sort()\n    return common_elements\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.53515625
    ],
    [
      "common_list = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    common_list.extend(l2[j:])\n    return sorted(common_list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -8.3359375
    ],
    [
      "l1.sort()\n    l2.sort()\n    common = set(l1[0]) & set(l2[0])\n    for i in range(1, len(l1)):\n        if l1[i]!= common:\n            return []\n    return sorted(list(common))",
      -8.7890625
    ],
    [
      "if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    if l1[0] > l2[0]:\n        return common(l1, l2[1:])\n\n    return common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.25
    ],
    [
      "assert len(l1) == len(l2)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    if l1[0] > l2[0]:\n        return common(l1, l2[1:])\n    else:\n        return common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.546875
    ],
    [
      "l1.sort()\n    l2.sort()\n\n    common = set()\n    for element in l1:\n        if element in common:\n            continue\n        common.add(element)\n    for element in l2:\n        if element in common:\n            continue\n        common.add(element)\n    return sorted(list(common))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.28125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}