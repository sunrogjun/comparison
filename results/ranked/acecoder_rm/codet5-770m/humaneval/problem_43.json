{
  "problem": {
    "task_id": "HumanEval/43",
    "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
    "entry_point": "pairs_sum_to_zero",
    "docstring": "",
    "problem_id": 43
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\ndef pairs_sum_to_zero2(l):\n    \"\"\"\n    pairs_sum_to_zero2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.65234375
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      7.27734375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_v2(l):\n    \"\"\"\n    pairs_sum_to_zero_v2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_v2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_v2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_v2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_v2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_v2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      7.23046875
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.12890625
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.12890625
    ],
    [
      "for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      6.9609375
    ],
    [
      "hash_table = {}\n\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      6.953125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\ndef pairs_sum_to_zero_rec(l):\n    \"\"\"\n    pairs_sum_to_zero_rec takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_rec([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_rec([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_rec([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_rec([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_rec([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.91796875
    ],
    [
      "for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      6.91015625
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.62109375
    ],
    [
      "for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.3515625
    ],
    [
      "if len(l) < 2:\n        return False\n\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.0703125
    ],
    [
      "l.sort()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.7109375
    ],
    [
      "if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
      4.65234375
    ],
    [
      "l.sort()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.56640625
    ],
    [
      "l.sort()\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.51171875
    ],
    [
      "l.sort()\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.51171875
    ],
    [
      "hash_map = {}\n    for i in l:\n        if i in hash_map:\n            return True\n        else:\n            hash_map[i] = True\n    return False\n\n\ndef pairs_sum_to_zero2(l):\n    \"\"\"\n    pairs_sum_to_zero2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero2([1])\n    False\n    \"\"\"\n    hash_map = {}\n    for i in l:\n        if i in hash_map:\n            return True\n        else:\n            hash_map[i] = False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.16015625
    ],
    [
      "hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.0625
    ],
    [
      "dict = {}\n    for i in range(len(l)):\n        if l[i] in dict:\n            return True\n        else:\n            dict[l[i]] = i\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.0078125
    ],
    [
      "if len(l) < 2:\n        return False\n    dict = {}\n    for i in l:\n        if i in dict:\n            return True\n        dict[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.0078125
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.689453125
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.689453125
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.689453125
    ],
    [
      "if len(l) == 0:\n        return False\n    l.sort()\n    for i in range(len(l) - 1):\n        j = i + 1\n        if l[i] + l[j] == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.626953125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.0078125
    ],
    [
      "if len(l) == 1:\n        return False\n    else:\n        d = {}\n        for i in l:\n            if i in d:\n                return True\n            else:\n                d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.9375
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.912109375
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.814453125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.240234375
    ],
    [
      "for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.171875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.9482421875
    ],
    [
      "d = {}\n    for x in l:\n        if x in d:\n            return True\n        else:\n            d[x] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.5244140625
    ],
    [
      "hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.517578125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.4140625
    ],
    [
      "for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):",
      1.41015625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.38671875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.38671875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.3671875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.2578125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.177734375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.1669921875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_1(l):\n    \"\"\"\n    pairs_sum_to_zero_1 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it",
      1.109375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.966796875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.86376953125
    ],
    [
      "seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.7939453125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.489990234375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.458740234375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.40087890625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.2333984375
    ],
    [
      "n = len(l)\n    if n < 2:\n        return False\n    else:\n        dict_ = {}\n        for i in l:\n            if i in dict_:\n                return True\n            else:\n                dict_[l[0]] = i",
      0.2022705078125
    ],
    [
      "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.09027099609375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False",
      -0.308837890625
    ],
    [
      "d = {}\n    for x in l:\n        if x in d:\n            return True\n        d[x] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.33056640625
    ],
    [
      "# check if list is empty\n    if len(l) == 0:\n        return False\n\n    # check if list is not empty\n    if len(l) == 1:\n        return True\n\n    # if list is not empty\n    for i in range(len(l) - 1):\n        # if the difference between the two elements is zero\n        if l[i] + l[i + 1] == 0:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.36767578125
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False",
      -0.47998046875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.49951171875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.49951171875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.49951171875
    ],
    [
      "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_recursive(l):\n    \"\"\"\n    pairs_sum_to_zero_recursive takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_recursive([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_recursive([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_recursive([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    if l[0] == l[1]:\n        return False\n\n    if l[0] == 0:\n        return True\n\n    return pairs_sum_to_zero_recursive(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.826171875
    ],
    [
      "hash = {}\n    for i in l:\n        if i in hash:\n            return True\n        else:\n            hash[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# write your code here\n\n    # we're using set, so that we can use the same hash table\n    # for the elements in the list.\n    set_l = set(l)\n    for i in l:\n        if i in set_l:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "l.sort()\n    for i in range(len(l)):\n        if l[i]!= 0:\n            if i > 0 and l[i] == l[i-1]:\n                return True\n            else:\n                return False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "seen = {}\n    for x in l:\n        if x in seen:\n            return True\n        else:\n            seen[x] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "dict = {}\n    for i in l:\n        if i in dict:\n            return True\n        else:\n            dict[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "hash_map = {}\n    for i in l:\n        hash_map[i] = hash_map.get(i, 0) + 1\n\n    for i in l:\n        if i in hash_map:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "s = set(l)\n    if len(s) < 2:\n        return False\n    for i in s:\n        for j in s:\n            if i + j == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if len(l) < 2:\n        return False\n    l.sort()\n    for i in range(0, len(l) - 1):\n        if i == 0 or l[i]!= l[i - 1]:\n            if l[i] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if len(l) < 2:\n        return False\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return False\n        else:\n            return True\n\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
      -0.85791015625
    ],
    [
      "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if not l:\n        return False\n    if len(l) < 2:\n        return False\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if len(l) < 2:\n        return False\n\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "d = {}\n    for x in l:\n        if x in d.keys():\n            return True\n        d[x] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "l = sorted(l)\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "hash_table = {}\n    for i in l:\n        if (i in hash_table):\n            return True\n        else:\n            hash_table[i] = 1\n    return False",
      -0.85791015625
    ],
    [
      "dict_of_lists = {}\n    for i in l:\n        if i in dict_of_lists.keys():\n            return True\n        else:\n            dict_of_lists[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "dict = {}\n    for i in l:\n        if i in dict.keys():\n            return True\n        else:\n            dict[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if not l:\n        return False\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "seen = set()\n    for x in l:\n        if x in seen:\n            return True\n        else:\n            seen.add(x)\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = False\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = False\n    return False\n\n\ndef pairs_sum_to_zero_4(l):\n    \"\"\"\n    pairs_sum_to_zero_4 takes a",
      -0.9345703125
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.1826171875
    ],
    [
      "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.1826171875
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False",
      -1.419921875
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[l[0]] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.8623046875
    ],
    [
      "for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
      -1.865234375
    ],
    [
      "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[l[0] - i] = i\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.9130859375
    ],
    [
      "s = set(l)\n    for i in s:\n        if i + 0 == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.775390625
    ],
    [
      "# if the list is empty, return false\n    if not l:\n        return False\n\n    # if the list has only one element, return true\n    if len(l) == 1:\n        return True\n\n    # if the list has 2 elements, return true\n    if len(l) == 2:\n        return l[0] == l[1] and l[0]!= 0\n\n    # otherwise, sort the list\n    l.sort()\n\n    # check the first element\n    first = l[0]\n\n    # check the last element\n    last = l[-1]\n\n    # if the first element and last element are distinct, return True\n    if first == last:\n        return True\n\n    # otherwise, return False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.53515625
    ],
    [
      "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_recursive(l, d, s):\n    \"\"\"\n    pairs_sum_to_zero_recursive takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_recursive([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_recursive([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_recursive([1])\n    False\n    \"\"\"\n    if s == 0:\n        return True\n    if s in d:\n        return True\n    if l[0] == s:\n        return False\n    if l[1] == s:\n        return False\n    d[s] = True\n    return pairs_sum_to_zero_recursive(l[1:], d, s - l[0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.3203125
    ],
    [
      "set_1 = set()\n    set_2 = set()\n    for i in l:\n        if i in set_1:\n            return True\n        elif i in set_2:\n            return True\n        else:\n            set_1.add(i)\n            set_2.add(i - i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.3828125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}