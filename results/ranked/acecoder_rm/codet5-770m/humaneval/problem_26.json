{
  "problem": {
    "task_id": "HumanEval/26",
    "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
    "entry_point": "remove_duplicates",
    "docstring": "",
    "problem_id": 26
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      14.5
    ],
    [
      "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      14.328125
    ],
    [
      "seen_numbers = set()\n    result = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))",
      12.4765625
    ],
    [
      "seen = set()\n    result = []\n\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.21875
    ],
    [
      "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.1953125
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.0
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.84375
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.84375
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.84375
    ],
    [
      "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      11.828125
    ],
    [
      "result = []\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      11.8125
    ],
    [
      "seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.75
    ],
    [
      "result = []\n    seen = set()\n\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.6640625
    ],
    [
      "result = []\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.109375
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.078125
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.078125
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.078125
    ],
    [
      "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.953125
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      10.2421875
    ],
    [
      "seen = set()\n    return [\n        number for number in numbers if number not in seen and not seen.add(number)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.7578125
    ],
    [
      "if numbers is None or len(numbers) == 0:\n        return []\n\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.5
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.90625
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.90625
    ],
    [
      "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.828125
    ],
    [
      "numbers.sort()\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.8671875
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.125
    ],
    [
      "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.98828125
    ],
    [
      "seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.9609375
    ],
    [
      "seen = {}\n    for num in numbers:\n        if num in seen:\n            seen.pop(num)\n        else:\n            seen[num] = True\n    return list(seen.keys())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.8203125
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.046875
    ],
    [
      "seen = set()\n    return [n for n in numbers if not (n in seen or seen.add(n))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.52734375
    ],
    [
      "new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.29296875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.046875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.046875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.046875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.046875
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result",
      3.873046875
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.841796875
    ],
    [
      "seen_numbers = set()\n    new_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.83984375
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.720703125
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.677734375
    ],
    [
      "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.599609375
    ],
    [
      "seen = set()\n    return [\n        n for n in numbers if n not in seen and not seen.add(n)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.505859375
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.1796875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.1796875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.1796875
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.10546875
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.05078125
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.015625
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      2.970703125
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.955078125
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result",
      2.849609375
    ],
    [
      "seen_numbers = set()\n    new_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            new_numbers.append(number)\n    return new_numbers",
      2.779296875
    ],
    [
      "seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result",
      2.712890625
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.607421875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.607421875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]",
      2.41015625
    ],
    [
      "return list(set(numbers))\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      2.26953125
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.775390625
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.775390625
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.55859375
    ],
    [
      "return [x for x in numbers if numbers.count(x) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.5068359375
    ],
    [
      "numbers_set = set(numbers)\n    return [x for x in numbers if x not in numbers_set]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4111328125
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      1.3203125
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.25
    ],
    [
      "seen = set()\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            yield number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.1396484375
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen]",
      1.0087890625
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.74658203125
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]",
      0.7392578125
    ],
    [
      "seen = set()\n    return [val for val in numbers if val not in seen and not seen.add(val)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.5771484375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [num for num in numbers if not (num in seen or seen_add(num))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.37060546875
    ],
    [
      "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.31982421875
    ],
    [
      "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.31982421875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      0.049560546875
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.0293731689453125
    ],
    [
      "seen = set()\n    return [n for n in numbers if n not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.086181640625
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.1968994140625
    ],
    [
      "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.52880859375
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.61572265625
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.76416015625
    ],
    [
      "seen = {}\n    return [\n        x for x in numbers if x not in seen or seen[x] == 0\n    ]  # noqa",
      -0.78564453125
    ],
    [
      "return [num for num in numbers if numbers.count(num) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.7900390625
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.1337890625
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.1337890625
    ],
    [
      "seen = set()\n    return [val for val in numbers if val not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.1787109375
    ],
    [
      "seen = {}\n    return [x for x in numbers if x not in seen or seen[x] == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.310546875
    ],
    [
      "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.3740234375
    ],
    [
      "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -1.927734375
    ],
    [
      "return [\n        num for num in numbers if numbers.count(num) > 1\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.16015625
    ],
    [
      "seen = set()\n    return [value for value in numbers if value not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.205078125
    ],
    [
      "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.443359375
    ],
    [
      "seen = set()\n    return [val for val in numbers if val not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -2.4609375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [\n        value\n        for value in numbers\n        if value not in seen and value not in seen_add(value)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.85546875
    ],
    [
      "numbers = set(numbers)\n    return [number for number in numbers if numbers.count(number) == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.01171875
    ],
    [
      "seen = {}\n    return [x for x in numbers if x not in seen and seen[x] == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.36328125
    ],
    [
      "seen_numbers = {}\n    return [seen_numbers.get(n, n) for n in numbers if n not in seen_numbers]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      -3.771484375
    ],
    [
      "numbers_set = set(numbers)\n    numbers_list = []\n    for item in numbers:\n        if item not in numbers_set:\n            numbers_list.append(item)\n    return numbers_list\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      -3.908203125
    ],
    [
      "numbers_set = set(numbers)\n    return [number for number in numbers if number not in numbers_set]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))",
      -4.5625
    ],
    [
      "unique_numbers = list(set(numbers))\n    return [number for number in numbers if number not in unique_numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.74609375
    ],
    [
      "seen = {}\n    return [\n        number for number in numbers if number not in seen or seen[number] == 0\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.84375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}