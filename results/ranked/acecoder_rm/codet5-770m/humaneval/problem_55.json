{
  "problem": {
    "task_id": "HumanEval/55",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
    "entry_point": "fib",
    "docstring": "",
    "problem_id": 55
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.8828125
    ],
    [
      "if n <= 1:\n        return n\n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.484375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    f1 = 0\n    f2 = 1\n    for _ in range(2, n + 1):\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n\n    return f3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.3515625
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.2890625
    ],
    [
      "if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.9375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_recursive(n: int, memo=None):\n    \"\"\"Return n-th Fibonacci number recursively.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        memo[n] = n\n        return n\n    memo[n] = fib_recursive(n - 1, memo) + fib_recursive(n - 2, memo)\n    return memo[n]\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      8.8359375
    ],
    [
      "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.7890625
    ],
    [
      "if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      8.7734375
    ],
    [
      "if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      7.40625
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.9921875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.9140625
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.8203125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.70703125
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.578125
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.765625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.21875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.12890625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.8671875
    ],
    [
      "if n <= 0:\n        raise ValueError('n must be greater than 0')\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.6015625
    ],
    [
      "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.57421875
    ],
    [
      "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.2109375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.16796875
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.947265625
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.931640625
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.76171875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.7421875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.7109375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.7109375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.6171875
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.333984375
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.173828125
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.923828125
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.923828125
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.923828125
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.90625
    ],
    [
      "if n <= 0:\n        raise ValueError(\"n must be positive\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.869140625
    ],
    [
      "if n <= 2:\n        return n\n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.302734375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.2109375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.9912109375
    ],
    [
      "a = 0\n    b = 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a",
      1.8955078125
    ],
    [
      "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.7412109375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.7099609375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.671875
    ],
    [
      "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.5302734375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      1.3642578125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      1.33984375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_gen(n: int):\n    \"\"\"Generate n-th Fibonacci number.\n    >>> fib_gen(10)\n    55\n    >>> fib_gen(1)\n    1\n    >>> fib_gen(8)\n    21\n    \"\"\"\n    fib_list = []\n    for i in range(n):\n        fib_list.append(fib(i))\n    return fib_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.2958984375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      1.2890625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.2158203125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.8876953125
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
      0.8271484375
    ],
    [
      "if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      0.79541015625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      0.419189453125
    ],
    [
      "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b",
      0.419189453125
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      0.37646484375
    ],
    [
      "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return b",
      0.34765625
    ],
    [
      "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.333740234375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)",
      0.2469482421875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.2406005859375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.03564453125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b",
      0.023529052734375
    ],
    [
      "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.257080078125
    ],
    [
      "a = 1\n    b = 0\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      -0.85595703125
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
      -0.85595703125
    ],
    [
      "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a = 1\n    b = 0\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if n < 0:\n        raise ValueError('n must be greater than 0')\n\n    if n == 0 or n == 1:\n        return n\n\n    return fib(n-1) + fib(n-2)",
      -0.857421875
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      -0.857421875
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
      -0.857421875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
      -0.857421875
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.888671875
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.92041015625
    ],
    [
      "if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.96533203125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.3388671875
    ],
    [
      "if n <= 0:\n        raise ValueError('n must be greater than 0.')\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -1.384765625
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.4287109375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.61328125
    ],
    [
      "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.693359375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.0703125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.0703125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.0703125
    ],
    [
      "if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_2(10)\n    55\n    >>> fib_2(1)\n    1\n    >>> fib_2(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_3(10)\n    55\n    >>> fib_3(1)\n    1\n    >>> fib_3(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_4(10)\n    55\n    >>> fib_4(1)\n    1\n    >>> fib_4(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.91796875
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_p(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_p(10)\n    55\n    >>> fib_p(1)\n    1\n    >>> fib_p(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_p(n - 1) + fib_p(n - 2) + fib_p(n - 3)\n\n\ndef fib_l(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_l(10)\n    55\n    >>> fib_l(1)\n    1\n    >>> fib_l(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_l(n - 1) + fib_l(n - 2) + fib_l(n - 3)\n\n\ndef fib_r(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_r(10)\n    55\n    >>> fib_r(1)\n    1\n    >>> fib_r(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_r(n - 1) + fib_r(n - 2) + fib_r(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.5078125
    ],
    [
      "a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.984375
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.22265625
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return n-th Fibonacci number, with prime.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    i = 2\n    j = 3\n    while j < n:\n        i = j\n        j += i\n    return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.59375
    ],
    [
      "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime(10)\n    1\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef fib_sieve(n: int):\n    \"\"\"Return the nth Fibonacci sieve number.\n    >>> fib_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_sieve(1)\n    [1]\n    >>> fib_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    sieve = [1]\n    for i in range(3, n+1):\n        if n % i == 0:\n            sieve.append(i)\n    return sieve\n\n\ndef fib_prime_sieve(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_prime_sieve(1)\n    [1]\n    >>> fib_prime_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]",
      -8.5
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}