{
  "problem": {
    "task_id": "HumanEval/93",
    "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "encode",
    "docstring": "",
    "problem_id": 93
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that appears \n    2 places ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.8515625
    ],
    [
      "vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += alphabet[alphabet.index(char)+1]\n        else:\n            result += char\n    return result\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it decodes the message back to a string. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += alphabet[alphabet.index(char)-1]\n        else:\n            result += char\n    return result",
      0.8271484375
    ],
    [
      "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    message = message.lower()\n    encode_list = []\n    for i in message:\n        if i in alphabet:\n            encode_list.append(alphabet[alphabet.index(i)])\n        else:\n            encode_list.append(i)\n    return ''.join(encode_list)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    decodes in such a way that it replaces all vowels in the message \n    with the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    message = message.lower()\n    decode_list = []\n    for i in message:\n        if i in alphabet:\n            decode_list.append(alphabet[alphabet.index(i)])\n        else:\n            decode_list.append(i)\n    return ''.join(decode_list)",
      0.73583984375
    ],
    [
      "result = \"\"\n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            result += letter.upper()\n        else:\n            result += letter\n\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    result = \"\"\n    for letter in message:\n        if letter.upper() in \"AEIOU\":\n            result += letter.lower()\n        else:\n            result += letter\n\n    return result\n\n\ndef main():\n    message = input(\"Enter a message: \")\n    print(encode(message))\n    print(decode(encode(message)))\n\n\nif __name__ == '__main__':\n    main()",
      0.3994140625
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.lower()\n    message = ''.join(letter if letter in alphabet else alphabet[alphabet.index(letter)] for letter in message)\n    return message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.upper()\n    message = ''.join(letter if letter in alphabet else alphabet[alphabet.index(letter)] for letter in message)\n    return message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.3125
    ],
    [
      "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_string = \"\"\n    for i in message:\n        if i in alphabet:\n            new_string += alphabet[alphabet.index(i)] + i + alphabet[alphabet.index(i) + 1]\n        else:\n            new_string += i\n    return new_string\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_string = \"\"\n    for i in message:\n        if i in alphabet:\n            new_string += alphabet[alphabet.index(i)]\n        else:\n            new_string += i\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.84765625
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "letters = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = []\n    for letter in message:\n        if letter.lower() in letters:\n            new_message.append(letters[letters.index(letter.lower())+1])\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)",
      -0.85693359375
    ],
    [
      "message = message.lower()\n    vowels = 'aeiou'\n\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            encoded += vowels[index + 2]\n        else:\n            encoded += char\n\n    return encoded\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "result = \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in message:\n        if letter.lower() in vowels:\n            result += letter.lower()\n            result += message[message.index(letter)+1]\n            result += message[message.index(letter)+2]\n        else:\n            result += letter\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# Your code here\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n    \nprint(encode('test'))\nprint(encode('This is a message'))",
      -0.85693359375
    ],
    [
      "# Your code here\n    \n    return ''\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "encoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# Your code here\n    \n    return''.join([chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in 'aeiou' else c for c in message])\n\n\n# Tests\nimport doctest\ndoctest.testmod()",
      -0.85693359375
    ],
    [
      "vowel = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    new_message = ''\n    for char in message:\n        if char in vowel:\n            new_message += alphabet[(alphabet.index(char)+1)%26]\n        else:\n            new_message += char\n    return new_message\n    \n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message",
      -0.85791015625
    ],
    [
      "word = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for letter in message:\n        if letter.lower() in vowels:\n            word.append(letter.lower() * 2)\n        else:\n            word.append(letter)\n    return ''.join(word)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return ''.join([message[0].lower() if i==0 else message[1:len(message)] for i in range(len(message))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "pass",
      -0.85791015625
    ],
    [
      "import string\n    alphabet = list(string.ascii_lowercase)\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            letter_index = alphabet.index(letter)\n            new_message = new_message + alphabet[(letter_index + 2) % len(alphabet)]\n        else:\n            new_message = new_message + letter\n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return ''.join(\n        [\n            letter if letter in 'aeiou' else letter[1] + letter[0] * 2\n            for letter in message\n        ]\n    )",
      -0.85791015625
    ],
    [
      "vowels = 'aeiou'\n    new_string = ''\n    for char in message:\n        if char in vowels:\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      -0.85791015625
    ],
    [
      "# Your code here\n    return ''\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that appears \n    2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "vowels = 'aeiouAEIOU'\n    converted_message = []\n    \n    for letter in message:\n        if letter in vowels:\n            converted_message.append(letter.upper())\n        else:\n            converted_message.append(letter)\n            \n    return ''.join(converted_message)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[(alphabet.index(letter)+2)%26]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "# Your code here\n    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    pass",
      -0.8583984375
    ],
    [
      "pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "vowels = \"aeiouAEIOU\"\n    message = message.lower()\n    message = \"\".join([c for c in message if c.isalpha()])\n    message = \"\".join([c if c.isalpha() else c.lower() for c in message])\n    message = \"\".join([c if c.isalpha() else c.lower() for c in message if c not in vowels])\n    return message\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      -0.86083984375
    ],
    [
      "vowels = \"aeiouAEIOU\"\n    return \"\".join(vowel if message.startswith(vowel) else letter for letter, vowel in zip(message, vowels))\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it converts a message back to a string. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(vowel if message.startswith(vowel) else letter for letter, vowel in zip(message, vowels))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.9228515625
    ],
    [
      "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n\n    encoded_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            encoded_message += alphabet[(alphabet.index(letter) + 2) % 26]\n        else:\n            encoded_message += letter\n\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n\n    decoded_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            decoded_message += alphabet[(alphabet.index(letter) - 2) % 26]\n        else:\n            decoded_message += letter\n\n    return decoded_message",
      -0.95654296875
    ],
    [
      "new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in 'AEIOU':\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.96923828125
    ],
    [
      "# Your code here\n    vowels = 'aeiou'\n    new_message = []\n    for i in message:\n        if i in vowels:\n            new_message.append(i.upper() if i.isupper() else i.lower())\n        else:\n            new_message.append(i)\n    return ''.join(new_message)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    vowels = 'aeiou'\n    new_message = []\n    for i in message:\n        if i.lower() in vowels:\n            new_message.append(i.upper() if i.isupper() else i)\n        else:\n            new_message.append(i)\n    return ''.join(new_message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.98876953125
    ],
    [
      "vowels = 'aeiou'\n    return ''.join([message.replace(vowel, letter, 1) for letter in message for vowel in vowels])\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join([message[i].replace(letter, vowel, 1) for i, letter in enumerate(message) if letter in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.384765625
    ],
    [
      "vowel_list = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.swapcase() * 2\n        else:\n            new_message += letter\n    return new_message\n\nprint(encode('test'))",
      -1.4326171875
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            encoded += alphabet[alphabet.index(letter.lower()) + 2]\n        else:\n            encoded += letter\n    return encoded\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.5556640625
    ],
    [
      "encode = \"\"\n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOUAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n    return encode\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.734375
    ],
    [
      "new_message = ''\n    for letter in message:\n        if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in ['A', 'E', 'I', 'O', 'U']:\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes/decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message",
      -1.9794921875
    ],
    [
      "# Your code here\n    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\n    # Your code here\n    pass\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
      -2.275390625
    ],
    [
      "vowels = 'aeiouAEIOU'\n    encode_string = ''\n    for letter in message:\n        if letter in vowels:\n            encode_string += letter.lower()\n        else:\n            encode_string += letter\n    return encode_string\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    decode_string = ''\n    for letter in message:\n        if letter in vowels:\n            decode_string += letter.upper()\n        else:\n            decode_string += letter\n    return decode_string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.416015625
    ],
    [
      "vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * (2 + vowels.index(letter))\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * (2 - vowels.index(letter))\n        else:\n            new_message += letter\n    return new_message\n\n\ndef test_encode():\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n\n\ndef test_decode():\n    assert decode('TGST') == 'test'\n    assert decode('tHKS KS C MGSSCGG') == 'This is a message'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.5625
    ],
    [
      "# Your code here\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for letter in message:\n        if letter in letters:\n            index = letters.find(letter)\n            encoded_message += letters[index]\n            encoded_message += letter\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    decoded_message = \"\"\n    for letter in message:\n        if letter in \"abcdefghijklmnopqrstuvwxyz\":\n            index = letters.find(letter)\n            decoded_message += letters[index+1]\n            decoded_message += letter\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.64453125
    ],
    [
      "vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.upper() in vowels:\n            new_message += char.lower()\n        else:\n            new_message += char\n    return new_message",
      -2.69140625
    ],
    [
      "# Your code here\n    \n    #return message.upper()\n    return message.lower()\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    #return message.upper()\n    return message.lower()",
      -2.9296875
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowel = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowel = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)-2]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.9609375
    ],
    [
      "vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      -3.091796875
    ],
    [
      "message = message.lower()\n    vowels = 'aeiou'\n    message = ''.join([i if i in vowels else'' for i in message])\n    return message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('test')\n    'test'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    message = ''.join([i if i in vowels else'' for i in message])\n    return message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.099609375
    ],
    [
      "# Write your code here\n    vowel = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char in vowel:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Write your code here\n    vowel = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char.upper() in vowel:\n            new_message += char\n        else:\n            new_message += char.lower()\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.42578125
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += alphabet[vowels.index(letter.lower())+2]\n        else:\n            new_message += alphabet[vowels.index(letter.upper())+2]\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += alphabet[vowels.index(letter.lower())-2]\n        else:\n            new_message += alphabet[vowels.index(letter.upper())-2]\n    return new_message\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      -3.44921875
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for c in message:\n        if c.lower() in alphabet:\n            result.append(alphabet[alphabet.index(c) + 1])\n        else:\n            result.append(c)\n    return ''.join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for c in message:\n        if c.lower() in alphabet:\n            result.append(alphabet[alphabet.index(c) - 1])\n        else:\n            result.append(c)\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.5546875
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char.lower() in alphabet:\n            new_char = alphabet.index(char.lower()) + 2\n            new_message += alphabet[new_char]\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char.lower() in alphabet:\n            new_char = alphabet.index(char.lower()) - 2\n            new_message += alphabet[new_char]\n        else:\n            new_message += char\n    return new_message\n\n\nprint(encode('test'))\nprint(encode('This is a message'))\nprint(decode('tHKS KS C MGSSCGG'))",
      -3.681640625
    ],
    [
      "# Your code here\n    new_message = \"\"\n    \n    for letter in message:\n        if letter.lower() == 'a' or letter.lower() == 'e' or letter.lower() == 'i' or letter.lower() == 'o' or letter.lower() == 'u':\n            new_message += letter.lower()\n        elif letter.lower() == 'u' or letter.lower() == 'i':\n            new_message += letter.upper()\n        elif letter.lower() == 'e' or letter.lower() == 'o':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.lower()\n        elif letter.lower() == 'a' or letter.lower() == 'e':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.upper()\n        elif letter.lower() == 'e' or letter.lower() == 'o':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    \n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.0234375
    ],
    [
      "vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            new_message += vowels[index - 2] + letter\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            new_message += vowels[index + 2] + letter\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.0625
    ],
    [
      "# Your code here\n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            new_message += vowels[(index + 2) % len(vowels)]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all letters with the letter that appears 2 places ahead of \n    that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n\n    # Your code here\n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            new_message += vowels[(index - 1) % len(vowels)]\n        else:\n            new_message += letter\n    return new_message",
      -4.15234375
    ],
    [
      "return ''.join(\n        [\n            c if c in 'aeiou' else c.upper() if c in 'AEIOU' else c.lower()\n            for c in message\n        ]\n    )\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    decodes in such a way that it swaps case of all letters, replaces \n    all vowels in the message with the letter that appears 2 places ahead \n    of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    return ''.join(\n        [\n            c if c in 'AEIOU' else c.lower() if c in 'aeiou' else c.upper()\n            for c in message\n        ]\n    )",
      -4.19921875
    ],
    [
      "new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_letter = letter.lower()\n            new_letter = new_letter.replace('e', 'e')\n            new_letter = new_letter.replace('i', 'i')\n            new_letter = new_letter.replace('o', 'o')\n            new_letter = new_letter.replace('u', 'u')\n            new_letter = new_letter.replace('A', 'a')\n            new_letter = new_letter.replace('E', 'e')\n            new_letter = new_letter.replace('I', 'i')\n            new_letter = new_letter.replace('O', 'o')\n            new_letter = new_letter.replace('U', 'u')\n            new_message += new_letter\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_letter = letter.lower()\n            new_letter = new_letter.replace('e', 'e')\n            new_letter = new_letter.replace('i', 'i')\n            new_letter = new_letter.replace('o', 'o')\n            new_letter = new_letter.replace('u', 'u')\n            new_letter = new_letter.replace('A', 'a')\n            new_letter = new_letter.replace('E', 'e')\n            new_letter = new_letter.replace('I', 'i')\n            new_letter = new_letter.replace('O', 'o')\n            new_letter = new_letter.replace('U', 'u')\n            new_",
      -4.203125
    ],
    [
      "vowels = 'aeiou'\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * 2\n        else:\n            new_message += letter\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * 2\n        else:\n            new_message += letter\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.2421875
    ],
    [
      "# Your code here\n    vowels = 'aeiou'\n    \n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += vowels[vowels.index(letter.lower()) + 1]\n        else:\n            new_message += letter\n            \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    vowels = 'aeiou'\n    \n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += vowels[vowels.index(letter.lower()) - 1]\n        else:\n            new_message += letter\n            \n    return new_message\n\n\nprint(encode('test'))\nprint(encode('This is a message'))\nprint(decode('tHKS KS C MGSSCGG'))",
      -4.28515625
    ],
    [
      "new_message = ''\n    for i in message:\n        if i.lower() in 'aeiou':\n            new_message += chr(ord(i.lower()) + 2)\n        else:\n            new_message += i\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for i in message:\n        if i.lower() in 'aeiou':\n            new_message += chr(ord(i.lower()) - 2)\n        else:\n            new_message += i\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.40234375
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char in alphabet:\n            new_message += alphabet[alphabet.index(char)+2]\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it swaps case of all letters, replaces all vowels in the message \n    with the letter that appears 2 places ahead of that vowel \n    in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char in alphabet:\n            new_message += alphabet[alphabet.index(char)-2]\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.58203125
    ],
    [
      "# write your code here\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += char.upper() * 2\n        else:\n            result += char\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # write your code here\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += char\n        else:\n            result += char.lower()\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    message = input('Enter a message: ')\n    print(encode(message))\n    print(decode(encode(message)))\n\n\nif __name__ == '__main__':\n    main()",
      -4.8828125
    ],
    [
      "# Your code here\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. \n    # Assume only letters.\n    pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters.\n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. \n    # Assume only letters.\n    pass",
      -5.05078125
    ],
    [
      "vowel_list = ['a','e','i','o','u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.upper()\n            new_message += letter.lower()\n            new_message += letter.capitalize()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowel_list = ['a','e','i','o','u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.upper()\n            new_message += letter.lower()\n            new_message += letter.capitalize()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.15234375
    ],
    [
      "vowels = 'AEIOU'\n    new_message = ''\n    for i in message:\n        if i.lower() in vowels:\n            new_message += i.upper()\n            new_message += message[message.index(i.lower())+1:].replace(i, i.upper())\n        else:\n            new_message += i\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'AEIOU'\n    new_message = ''\n    for i in message:\n        if i.lower() in vowels:\n            new_message += i.upper()\n            new_message += message[message.index(i.lower())+1:].replace(i, i.lower())\n        else:\n            new_message += i\n    return new_message\n\n\ndef main():\n    print(encode('test'))\n    print(decode('tHKS KS C MGSSCGG'))\n\n\nif __name__ == '__main__':\n    main()",
      -5.32421875
    ],
    [
      "# write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            encoded_message += alphabet[alphabet.index(letter) + 2]\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    decoded_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            decoded_message += alphabet[alphabet.index(letter) - 2]\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.37890625
    ],
    [
      "new_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    vowels = 'AEIOUAEIOU'\n    for char in message:\n        if char in vowels:\n            new_message += char.lower()\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.4609375
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[(alphabet.index(letter.lower()) + 2) % 26]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[(alphabet.index(letter.lower()) - 2) % 26]\n        else:\n            new_message += letter\n    return new_message",
      -5.48828125
    ],
    [
      "return ''.join(map(lambda x: x.lower(), message))\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('this is a message')\n    'This is a message'\n    \"\"\"\n    return ''.join(map(lambda x: x.upper(), message))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.5234375
    ],
    [
      "vowels = \"aeiouAEIOU\"\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"AEIOU\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in vowels:\n            new_message += letter\n        else:\n            new_message += letter.lower()\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      -5.5859375
    ],
    [
      "vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead \n    of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'AEIOUaeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter.upper() in vowels:\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message",
      -5.61328125
    ],
    [
      "vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            encoded_message += letter.lower()\n            encoded_message += '2'\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    decoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            decoded_message += letter.upper()\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.76953125
    ],
    [
      "vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter.lower() in vowels:\n            result.append(letter.upper())\n        else:\n            result.append(letter)\n    return \"\".join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter.upper() in vowels:\n            result.append(letter.lower())\n        else:\n            result.append(letter)\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.19140625
    ],
    [
      "return ''.join(map(lambda x: chr((ord(x)-ord('a')+2)%26+ord('a')), message))\n    \n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    return ''.join(map(lambda x: chr((ord(x)-ord('a')+2)%26+ord('a')), message))\n    \n    \n    \ndef test():\n    import doctest\n    doctest.testmod()\n    \n    \nif __name__ == '__main__':\n    test()",
      -6.25390625
    ],
    [
      "# Your code here\n    new_message = []\n    for letter in message:\n        if letter.lower() in ['a','e','i','o','u']:\n            new_message.append(letter.upper())\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    new_message = []\n    for letter in message:\n        if letter.lower() in ['a','e','i','o','u']:\n            new_message.append(letter.lower())\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.29296875
    ],
    [
      "encoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    decoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            decoded_message += letter.lower()\n        else:\n            decoded_message += letter\n    return decoded_message",
      -6.3125
    ],
    [
      "vowel = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowel:\n            new_message += alphabet[vowel.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowel = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowel:\n            new_message += alphabet[vowel.index(letter)]\n        else:\n            new_message += letter\n    return new_message",
      -6.3671875
    ],
    [
      "# Your code here\n    encoded = []\n    for i in message:\n        if i.lower() in 'aeiou':\n            encoded.append(i.upper())\n        elif i.lower() in 'aeiouaeiou':\n            encoded.append(i.upper() + '2')\n        else:\n            encoded.append(i)\n    return ''.join(encoded)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    decoded = []\n    for i in message:\n        if i.upper() in 'aeiouaeiou':\n            decoded.append(i.lower())\n        elif i.upper() in 'aeiou':\n            decoded.append(i.lower() + '2')\n        else:\n            decoded.append(i)\n    return ''.join(decoded)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()",
      -6.46875
    ],
    [
      "message = message.lower()\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char\n            if char == 'a':\n                new_message += 'A'\n            if char == 'e':\n                new_message += 'E'\n            if char == 'i':\n                new_message += 'I'\n            if char == 'o':\n                new_message += 'O'\n            if char == 'u':\n                new_message += 'U'\n            if char == 'y':\n                new_message += 'Y'\n            if char == 'z':\n                new_message += 'Z'\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char\n            if char == 'a':\n                new_message += 'A'\n            if char == 'e':\n                new_message += 'E'\n            if char == 'i':\n                new_message += 'I'\n            if char == 'o':\n                new_message += 'O'\n            if char == 'u':\n                new_message += 'U'\n            if char == 'y':\n                new_message += 'Y'\n            if char == 'z':\n                new_message += 'Z'\n        else:\n            new_message += char\n    return new_message",
      -6.73828125
    ],
    [
      "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_message = ''\n\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter) + 2]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_message = ''\n\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter) - 2]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.75
    ],
    [
      "word = ''\n    for letter in message:\n        if letter == 'a':\n            word += 'a'\n        elif letter == 'e':\n            word += 'e'\n        elif letter == 'i':\n            word += 'i'\n        elif letter == 'o':\n            word += 'o'\n        elif letter == 'u':\n            word += 'u'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n    return word\n\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    word = ''\n    for letter in message:\n        if letter == 'a':\n            word += 'a'\n        elif letter == 'e':\n            word += 'e'\n        elif letter == 'i':\n            word += 'i'\n        elif letter == 'o':\n            word += 'o'\n        elif letter == 'u':\n            word += 'u'\n        elif letter == '",
      -6.8359375
    ],
    [
      "vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if len(char) > 1:\n                new_message += char[0] + char[1] * 2\n            else:\n                new_message += char\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if len(char) > 1:\n                new_message += char[0]\n            else:\n                new_message += char\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.4453125
    ],
    [
      "vowel = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowel:\n            new_message += letter + letter.upper()\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('this is a message')\n    'This is a message'\n    \"\"\"\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowel:\n            new_message += letter.upper()\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.5390625
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in alphabet:\n            new_message += alphabet[alphabet.index(char) + 2]\n        else:\n            new_message += char\n            \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    converts back the message into a letter, replacing all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'test'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in alphabet:\n            new_message += alphabet[alphabet.index(char) - 2]\n        else:\n            new_message += char\n            \n    return new_message",
      -7.59765625
    ],
    [
      "# Your code here\n    new_string = ''\n    \n    for letter in message:\n        if letter == 'A':\n            new_string += letter.upper()\n        elif letter == 'B':\n            new_string += letter.lower()\n        elif letter == 'C':\n            new_string += letter.upper()\n        elif letter == 'D':\n            new_string += letter.lower()\n        elif letter == 'E':\n            new_string += letter.upper()\n        elif letter == 'F':\n            new_string += letter.lower()\n        elif letter == 'G':\n            new_string += letter.upper()\n        elif letter == 'H':\n            new_string += letter.lower()\n        elif letter == 'I':\n            new_string += letter.upper()\n        elif letter == 'J':\n            new_string += letter.lower()\n        elif letter == 'K':\n            new_string += letter.upper()\n        elif letter == 'L':\n            new_string += letter.lower()\n        elif letter == 'M':\n            new_string += letter.upper()\n        elif letter == 'N':\n            new_string += letter.lower()\n        elif letter == 'O':\n            new_string += letter.upper()\n        elif letter == 'P':\n            new_string += letter.lower()\n        elif letter == 'Q':\n            new_string += letter.upper()\n        elif letter == 'R':\n            new_string += letter.lower()\n        elif letter == 'S':\n            new_string += letter.upper()\n        elif letter == 'T':\n            new_string += letter.lower()\n        elif letter == 'U':\n            new_string += letter.upper()\n        elif letter == 'V':\n            new_string += letter.lower()\n        elif letter == 'W':\n            new_string += letter.upper()\n        elif letter == 'X':\n            new_string += letter.lower()\n        elif letter == 'Y':\n            new_string += letter.upper()\n        elif letter == 'Z':\n            new_string += letter.lower()\n        elif letter =='':\n            new_string += letter.upper()",
      -7.87890625
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = ''.join(message)\n    vowels = 'aeiou'\n    encoded = []\n    for i in message:\n        if i.lower() in vowels:\n            encoded.append(alphabet[alphabet.index(i) + 1])\n        else:\n            encoded.append(i)\n    return ''.join(encoded)\n    \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = ''.join(message)\n    vowels = 'aeiou'\n    decoded = []\n    for i in message:\n        if i.lower() in vowels:\n            decoded.append(alphabet[alphabet.index(i) - 1])\n        else:\n            decoded.append(i)\n    return ''.join(decoded)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -8.203125
    ],
    [
      "vowels = 'aeiou'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = message[i].upper()\n            for j in range(i + 1, len(message)):\n                if message[j].lower() in vowels:\n                    message[j] = message[j].upper()\n                    for k in range(j + 1, len(message)):\n                        if message[k].lower() in vowels:\n                            message[k] = message[k].upper()\n                            for l in range(k + 1, len(message)):\n                                if message[l].lower() in vowels:\n                                    message[l] = message[l].upper()\n                                    for m in range(l + 1, len(message)):\n                                        if message[m].lower() in vowels:\n                                            message[m] = message[m].upper()\n                                            for n in range(n + 1, len(message)):\n                                                if message[n].lower() in vowels:\n                                                    message[n] = message[n].upper()\n                                                    for o in range(o + 1, len(message)):\n                                                        if message[o].lower() in vowels:\n                                                            message[o] = message[o].upper()\n                                                            for p in range(p + 1, len(message)):\n                                                                if message[p].lower() in vowels:\n                                                                    message[p] = message[p].upper()\n                                                                for q in range(q + 1, len(message)):\n                                                                    if message[q].lower() in vowels:\n                                                                        message[q] = message[q].upper()\n                                                            for q in range(q + 1, len(message)):\n                                                                if message[q].lower() in vowels:\n                                                                    message[q] = message[q].upper()\n                                    message = ''.join(message)\n    return message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with",
      -8.3671875
    ],
    [
      "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    new_message = \"\"\n\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[alphabet.index(letter) + 2]\n        elif letter.lower() in vowels:\n            new_message += alphabet[alphabet.index(letter) + 1]\n\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    new_message = \"\"\n\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[alphabet.index(letter) - 1]\n        elif letter.lower() in vowels:\n            new_message += alphabet[alphabet.index(letter) + 2]\n\n    return new_message\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -8.5078125
    ],
    [
      "vowels = 'aeiou'\n    vowels_index = [i for i in range(len(vowels))]\n    message = list(message)\n\n    for i in range(len(message)):\n        if message[i].lower() in vowels_index:\n            message[i] = vowels[vowels_index.index(message[i].lower())+2]\n        else:\n            message[i] = message[i].lower()\n\n    return ''.join(message)\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it decodes the message back to a string. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\n    vowels = 'aeiou'\n    vowels_index = [i for i in range(len(vowels))]\n    message = list(message)\n\n    for i in range(len(message)):\n        if message[i].lower() in vowels_index:\n            message[i] = vowels[vowels_index.index(message[i].lower())-1]\n        else:\n            message[i] = message[i].lower()\n\n    return ''.join(message)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -8.7734375
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if len(new_message) > 0:\n                new_message += alphabet[alphabet.index(letter)+2]\n            else:\n                new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if len(new_message) > 0:\n                new_message += alphabet[alphabet.index(letter)-2]\n            else:\n                new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -8.8046875
    ],
    [
      "vowels = 'aeiouAEIOU'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = vowels[vowels.index(message[i].lower())]\n        else:\n            message[i] = message[i].lower()\n    return ''.join(message)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = vowels[vowels.index(message[i].lower())]\n        else:\n            message[i] = message[i].lower()\n    return ''.join(message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -9.1484375
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet.replace(letter, alphabet[alphabet.index(letter) + 2])\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet.replace(alphabet[alphabet.index(letter) + 2], letter)\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -9.15625
    ],
    [
      "vowels = 'aeiou'\n    vowels_index = [vowels.index(letter) for letter in message]\n    vowels_index_position = vowels_index + [len(vowels)]\n    vowels_index_position_position = [vowels_index_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] - 1 for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] + 1 for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    v",
      -10.34375
    ],
    [
      "vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n            new_message += char.lower() * 2\n        else:\n            new_message += char\n    return new_message\n\nprint(encode('test'))\nprint(encode('This is a message'))\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n            new_message += char.lower() * 2\n        else:\n            new_message += char\n    return new_message\n\nprint(decode('TGST'))\nprint(decode('tHKS KS C MGSSCGG'))",
      -10.6875
    ],
    [
      "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    new_message = \"\"\n    vowels = \"aeiou\"\n    \n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)] * 2\n        else:\n            new_message += alphabet[alphabet.index(letter)]\n    \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    new_message = \"\"\n    vowels = \"aeiou\"\n    \n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    \n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -11.046875
    ],
    [
      "# Write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for letter in message:\n        if letter in alphabet:\n            index = alphabet.find(letter)\n            if index < 0:\n                index = alphabet.find(letter.upper())\n            if index < 0:\n                index = alphabet.find(letter.lower())\n            if index < 0:\n                index = alphabet.find(letter.title())\n            if index < 0:\n                index = alphabet.find(letter.upper().title())\n            if index < 0:\n                index = alphabet.find(letter.lower().title())\n            if index < 0:\n                index = alphabet.find(letter.title().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().title().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.title().upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.upper().lower())\n            if index < 0:\n                index = alphabet.find(letter.upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().upper())\n            if index < 0:\n                index = alphabet.find(letter.upper().title())\n            if index < 0:\n                index = alphabet.find(letter.title().lower())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper())\n            if index < 0:",
      -11.0625
    ],
    [
      "message = message.lower()\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter in vowels:\n            result.append(message[0] + message[1] + message[2])\n        else:\n            result.append(message[0] + message[1] + message[2] + message[3])\n    return ''.join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter in vowels:\n            result.append(message[0] + message[1] + message[2] + message[3])\n        else:\n            result.append(message[0] + message[1] + message[2] + message[4])\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -11.71875
    ],
    [
      "vowels = 'aeiouAEIOU'\n    message = message.lower()\n    message = message.replace(' ', '')\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter\n            new_message += '2'\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 3 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    message = message.lower()\n    message = message.replace('2', '')\n    message = message.replace('3', '')\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter\n            new_message += '1'\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -11.7578125
    ],
    [
      "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += char.upper()\n            encoded_message += char.lower()\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    decoded_message = ''\n    for char in message:\n        if char in vowels:\n            decoded_message += char.lower()\n            decoded_message += char.upper()\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n        else:\n            decoded_message += char\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -12.9921875
    ],
    [
      "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in message:\n        if letter in alphabet:\n            new_string += alphabet[alphabet.index(letter)] * (2 ** alphabet.index(letter))\n        else:\n            new_string += letter\n    return new_string\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in message:\n        if letter in alphabet:\n            new_string += alphabet[alphabet.index(letter)]\n        else:\n            new_string += letter\n    return new_string\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      -13.2109375
    ],
    [
      "vowels = 'aeiou'\n    result = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            result += letter.lower()\n            result += message[(vowels.index(letter.lower()) + 2):]\n        else:\n            result += letter\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            result += vowels[(vowels.index(letter.lower()) - 2) % len(vowels)]\n        else:\n            result += letter\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      -13.5390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}