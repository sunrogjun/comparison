{
  "problem": {
    "task_id": "HumanEval/91",
    "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "is_bored",
    "docstring": "",
    "problem_id": 91
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return sum(x.startswith('I') for x in S.split())",
      3.9296875
    ],
    [
      "return sum(1 for word in S.split() if word.startswith(\"I\"))",
      3.208984375
    ],
    [
      "return S.count('I')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.2587890625
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.2587890625
    ],
    [
      "if S.startswith(\"I\"):\n        return 1\n    else:\n        return 0",
      1.1591796875
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            count += 1\n    return count\n\n\ndef is_bored2(S):\n    return sum(word.startswith('I') for word in S.split(' '))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.94287109375
    ],
    [
      "count = 0\n    for i in S:\n        if i == 'I':\n            count += 1\n    return count",
      0.8271484375
    ],
    [
      "return S.count('I')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      0.8271484375
    ],
    [
      "return (S.startswith(\"I\") and S.count(\".\") == S.count(\"?\") and S.count(\"!\") == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.421630859375
    ],
    [
      "count = 0\n    for word in S.split():\n        if word == 'I':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.1064453125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.096923828125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
      0.04644775390625
    ],
    [
      "count = 0\n    for i in S.split():\n        if i[0] == 'I':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.024139404296875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
      -0.077392578125
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.2261962890625
    ],
    [
      "bored = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.27392578125
    ],
    [
      "return S.count('I')",
      -0.62158203125
    ],
    [
      "return S.startswith(\"I\")\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.64404296875
    ],
    [
      "return len(S.split(\".\")) == len(set(S.split(\"?\"))) == len(set(S.split(\"!\")))",
      -0.65380859375
    ],
    [
      "return S.count(\"I\")",
      -0.85693359375
    ],
    [
      "count = 0\n    for word in S.split(\" \"):\n        if word[0] == \"I\":\n            count += 1\n    return count",
      -0.85693359375
    ],
    [
      "return sum([True if word.startswith(\"I\") else False for word in S.split()])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count",
      -0.85791015625
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            count += 1\n    return count",
      -0.85791015625
    ],
    [
      "count = 0\n    for i in S.split():\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "boredom_count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "count = 0\n    for word in S.split():\n        if word[0] == 'I':\n            count += 1\n    return count\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms",
      -0.87744140625
    ],
    [
      "count = 0\n    for i in S:\n        if i.startswith(\"I\"):\n            count += 1\n    return count",
      -0.93408203125
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.3076171875
    ],
    [
      "return S.count('I')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.3076171875
    ],
    [
      "count = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            count += 1\n    return count",
      -1.322265625
    ],
    [
      "return S.count('I')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.4150390625
    ],
    [
      "# Write your code here\n    \n    return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.4423828125
    ],
    [
      "return len([word for word in S.split() if word.startswith('I')])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.55859375
    ],
    [
      "count = 0\n    for s in S.split():\n        if s[0] == \"I\":\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.7216796875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.7333984375
    ],
    [
      "return S.count(\"I\")\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.7451171875
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.748046875
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.748046875
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.748046875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.9951171875
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.9990234375
    ],
    [
      "return S.count('I')\n\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_2(\"Hello world\")\n    0\n    >>> is_bored_2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count('I')\n\n\ndef is_bored_3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_3(\"Hello world\")\n    0\n    >>> is_bored_3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count('I')\n\n\ndef is_bored_4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_4(\"Hello world\")\n    0\n    >>> is_bored_4(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count('I')\n\n\ndef is_bored_5(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_5(\"Hello world\")\n    0\n    >>> is_bored",
      -2.03515625
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count",
      -2.09765625
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count",
      -2.09765625
    ],
    [
      "count = 0\n    for i in S:\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.205078125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.22265625
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.26953125
    ],
    [
      "return S.count('I')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
      -2.29296875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.36328125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            count += 1\n    return count",
      -2.466796875
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            count += 1\n    return count",
      -2.4765625
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word == 'I':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.59765625
    ],
    [
      "count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.8046875
    ],
    [
      "return sum([word.startswith('I') for word in S.split()])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.12109375
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms",
      -3.16015625
    ],
    [
      "count = 0\n    for word in S.split(\".\"):\n        if word == \"I\":\n            count += 1\n    return count",
      -3.462890625
    ],
    [
      "return S.count(\"I\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.46484375
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.46484375
    ],
    [
      "return S.count('I')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.46484375
    ],
    [
      "return S.count('I')\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.46484375
    ],
    [
      "return S.count(\"I\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.46484375
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count",
      -3.486328125
    ],
    [
      "count = 0\n    for i in S:\n        if i == 'I':\n            count += 1\n    return count",
      -3.486328125
    ],
    [
      "words = S.split(\".\")\n    return len([w for w in words if w.startswith(\"I\")])\n\n\ndef is_bored_v2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_v2(\"Hello world\")\n    0\n    >>> is_bored_v2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    words = S.split(\".\")\n    return len([w for w in words if w.startswith(\"I\")])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.673828125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count",
      -3.705078125
    ],
    [
      "boredoms = 0\n    for i in S:\n        if i == 'I':\n            boredoms += 1\n    return boredoms",
      -4.1015625
    ],
    [
      "bored = 0\n    for word in S.split():\n        if word.startswith('I'):\n            bored += 1\n    return bored",
      -4.13671875
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms",
      -4.609375
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.78125
    ],
    [
      "boredom = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            boredom += 1\n    return boredom\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.79296875
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.84375
    ],
    [
      "count = 0\n    for i in S.split('.'):\n        if i[0] == 'I':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.98046875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.0
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.203125
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.328125
    ],
    [
      "words = S.split()\n    boredoms = 0\n    for word in words:\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.37109375
    ],
    [
      "boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.3984375
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word[0] == 'I':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.55078125
    ],
    [
      "count = 0\n\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.56640625
    ],
    [
      "count = 0\n    for word in S.split(\" \"):\n        if word[0] == \"I\":\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.625
    ],
    [
      "if S == \"\":\n        return 0\n\n    count = 0\n\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.76171875
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.76953125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.76953125
    ],
    [
      "count = 0\n    for i in S:\n        if i == \"I\":\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.93359375
    ],
    [
      "count = 0\n    for word in S.split(' '):\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.0546875
    ],
    [
      "boredoms = 0\n    for i in S:\n        if i == \"I\":\n            boredoms += 1\n    return boredoms\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.06640625
    ],
    [
      "count = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.23828125
    ],
    [
      "count = 0\n    for i in S:\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
      -6.5546875
    ],
    [
      "if S == '':\n        return 0\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.5703125
    ],
    [
      "count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.94140625
    ],
    [
      "count = 0\n    for word in S.split(\" \"):\n        if word == \"I\":\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -7.08203125
    ],
    [
      "return S.count('I')\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored2(\"Hello world\")\n    0\n    >>> is_bored2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum([S[i].startswith('I') for i in range(len(S))])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    #print(is_bored(\"Hello world\"))\n    #print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    #print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    #print(is_bored(\"I love this weather\"))",
      -7.56640625
    ],
    [
      "count = 0\n    for i in S:\n        if i == 'I':\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
      -7.75390625
    ],
    [
      "words = S.split()\n    boredoms = 0\n    for word in words:\n        if word == \"I\":\n            boredoms += 1\n    return boredoms\n    \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -7.83984375
    ],
    [
      "if not S:\n        return 0\n    if S[0] == 'I':\n        return 1\n    return is_bored(S[1:]) + is_bored(S[:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -8.78125
    ],
    [
      "count = 0\n    for i in S:\n        if i == 'I':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == '?' or i == '!':\n            count += 1\n    return count",
      -9.984375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}