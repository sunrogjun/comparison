{
  "problem": {
    "task_id": "HumanEval/68",
    "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
    "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
    "entry_point": "pluck",
    "docstring": "",
    "problem_id": 68
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# check if array is empty\n    if len(arr) == 0:\n        return []\n\n    # find the smallest even value\n    smallest_even_value = float(\"inf\")\n    smallest_even_index = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n\n    # return the node with smallest even value and its index\n    return [smallest_even_value, smallest_even_index]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        [4, 2, 3],\n        [1, 2, 3],\n        [],\n        [5, 0, 3, 0, 4, 2],\n    ]\n    for test in tests:\n        print(pluck(test))",
      2.576171875
    ],
    [
      "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        smallest_even = float('inf')\n        smallest_index = 0\n        for index, node in enumerate(arr):\n            if node % 2 == 0:\n                if smallest_even > node:\n                    smallest_even = node\n                    smallest_index = index\n        return [smallest_even, smallest_index]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == '__main__':\n    main()",
      2.05078125
    ],
    [
      "if not arr:\n        return []\n\n    # find the smallest even value\n    smallest_even_value = None\n    smallest_index = None\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even_value is None or smallest_even_value > val:\n                smallest_even_value = val\n                smallest_index = index\n\n    # if there is no even value, return an empty array\n    if smallest_even_value is None:\n        return []\n\n    # return the smallest even value and the index\n    return [smallest_even_value, smallest_index]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n    for i, j in tests:\n        assert pluck(i) == j",
      1.982421875
    ],
    [
      "if len(arr) == 0:\n        return []\n    min_even_index = -1\n    min_even_value = float('inf')\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_even_value > value:\n                min_even_value = value\n                min_even_index = index\n    return [min_even_value, min_even_index]\n\n\ndef test_pluck():\n    assert pluck([4,2,3]) == [2, 1]\n    assert pluck([1,2,3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      1.419921875
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    smallest_even = arr[0]\n    smallest_index = 0\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if val < smallest_even:\n                smallest_even = val\n                smallest_index = index\n    return [smallest_even, smallest_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([2, 2, 2, 2, 2]) == [2, 2]\n    assert pluck([5, 0, 0, 0, 0, 0, 0]) == [0, 0]\n    assert pluck([5, 0, 0, 0, 0, 0, 0]) == [5, 0]",
      1.33203125
    ],
    [
      "if not arr:\n        return []\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n        i += 1\n    return []\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\nif __name__ == \"__main__\":\n    test_pluck()",
      1.169921875
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_count += 1\n\n    if even_count == 0:\n        return []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            return [arr[i], i]\n\n    return []",
      1.1337890625
    ],
    [
      "if arr == []:\n        return []\n\n    min_even_value = arr[0]\n    min_even_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even_value:\n                min_even_value = arr[i]\n                min_even_index = i\n\n    return [min_even_value, min_even_index]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.9052734375
    ],
    [
      "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n\n    # find the smallest even number\n    smallest_even_number = None\n    smallest_even_index = None\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest_even_number is None:\n                smallest_even_number = arr[i]\n                smallest_even_index = i\n            else:\n                if smallest_even_number < arr[i]:\n                    smallest_even_number = arr[i]\n                    smallest_even_index = i\n\n    if smallest_even_number is None:\n        return []\n    else:\n        return [smallest_even_number, smallest_even_index]",
      0.82470703125
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    \n    # find the smallest even value\n    min_val = arr[0]\n    min_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if min_val > arr[i]:\n                min_val = arr[i]\n                min_idx = i\n    \n    return [min_val, min_idx]\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      0.787109375
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n\n    # find the smallest even value in the array\n    min_index = None\n    min_value = float('inf')\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_value > val:\n                min_value = val\n                min_index = index\n    return [min_value, min_index]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1])\n    ]\n    for test in tests:\n        assert pluck(test[0]) == test[1]",
      0.445068359375
    ],
    [
      "if arr == []:\n        return []\n\n    # Find the smallest even value\n    min_even = float('inf')\n    min_even_index = -1\n\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if min_even > node:\n                min_even = node\n                min_even_index = index\n\n    return [min_even, min_even_index]\n\n\ndef main():\n    arr = [4, 2, 3]\n    print(pluck(arr))\n\n    arr = [1, 2, 3]\n    print(pluck(arr))\n\n    arr = []\n    print(pluck(arr))\n\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n\n\nif __name__ == '__main__':\n    main()",
      0.1651611328125
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    index = 0\n    smallest_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n                smallest_value = arr[i]\n                index = i\n    return [smallest_value, index]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -0.62060546875
    ],
    [
      "if arr:\n        if arr[0] % 2 == 0:\n            return [arr[0] // 2, 0]\n        else:\n            return pluck(arr[1:])\n    else:\n        return []",
      -0.85595703125
    ],
    [
      "if not arr:\n        return []\n\n    ret = []\n    for i in arr:\n        if i % 2 == 0:\n            ret.append(i)\n\n    return ret\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -0.85595703125
    ],
    [
      "if not arr:\n        return []\n\n    arr.sort()\n    index = 0\n    smallest_even_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_even_value = arr[i]\n            index = i\n\n    return [smallest_even_value, index]",
      -0.85693359375
    ],
    [
      "if not arr:\n        return []\n\n    # find the first even number\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            return [node, i]\n\n    # no even number found\n    return []",
      -0.85693359375
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    min_val = arr[0]\n    min_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            min_val = min(min_val, arr[i])\n            min_index = i\n\n    return [min_val, min_index]",
      -0.85693359375
    ],
    [
      "if not arr:\n        return []\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    smallest_even_index = arr.index(min(arr, key=lambda x: abs(x % 2)))\n    return [arr[smallest_even_index], smallest_even_index]",
      -0.85693359375
    ],
    [
      "if arr:\n        if arr[0] % 2 == 0:\n            return arr[0] // 2, 0\n        else:\n            return [0, 0]\n    return []",
      -0.85693359375
    ],
    [
      "if arr:\n        return min(arr, key=lambda x: x % 2)\n    else:\n        return []",
      -0.85693359375
    ],
    [
      "if arr == []:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    res = [None, None]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            res[0] = arr[i]\n            res[1] = i\n    return res",
      -0.85693359375
    ],
    [
      "return [value for value in arr if value % 2 == 0][0]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -0.85693359375
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0] // 2, 0]\n    else:\n        return [arr[0], arr[0] // 2 + 1]",
      -0.85791015625
    ],
    [
      "if not arr:\n        return []\n\n    ret = [0, 0]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            ret[0] = arr[i]\n            ret[1] = i\n            break\n\n    return ret",
      -0.85791015625
    ],
    [
      "if arr == []:\n        return []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n\n    return []",
      -0.85791015625
    ],
    [
      "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        return [min(arr, key=lambda x: x % 2), arr.index(min(arr, key=lambda x: x % 2))]",
      -0.85791015625
    ],
    [
      "if len(arr) == 0:\n        return []\n    \n    arr.sort(key=lambda x: x % 2, reverse=True)\n    return arr[0]",
      -0.85791015625
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            min_value = min(min_value, arr[i])\n            min_index = i\n\n    if min_value % 2 == 0:\n        return [min_value, min_index]\n    else:\n        return []\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1]",
      -0.8583984375
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n\n    # find the smallest even value\n    smallest_even_value = None\n    smallest_index = None\n    for node in arr:\n        if node % 2 == 0:\n            if smallest_even_value is None:\n                smallest_even_value = node\n                smallest_index = 0\n            else:\n                smallest_index = min(smallest_index, arr.index(node) + 1)\n\n    return [smallest_even_value, smallest_index]",
      -0.8583984375
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0], 1]\n    else:\n        return [arr[0], 2]\n\n\ndef main():\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if not arr:\n        return []\n\n    if len(arr) == 1:\n        return arr[0]\n\n    smallest_even_value = arr[0]\n    smallest_index = 0\n\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even_value == node:\n                return [smallest_even_value, index]\n\n            smallest_even_value = node\n            smallest_index = index\n\n    return [smallest_even_value, smallest_index]",
      -0.8583984375
    ],
    [
      "if not arr:\n        return []\n\n    # sort the array\n    arr.sort()\n\n    # store the smallest even value and its index\n    smallest_even = arr[0]\n    smallest_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n\n    return [smallest_even, smallest_index]",
      -0.8583984375
    ],
    [
      "if not arr:\n        return []\n\n    even_index = None\n    even_value = None\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if even_value is not None and even_index is not None:\n                return [even_value, even_index]\n            even_value = node\n            even_index = i\n\n    return [even_value, even_index]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1])\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1], f'Test {t[0]} failed! Expected {t[1]}, got {pluck(t[0])}'",
      -0.85888671875
    ],
    [
      "if not arr:\n        return []\n\n    # find the smallest even value\n    smallest_even_value = arr[0]\n    smallest_even_index = 0\n\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even_value == val:\n                smallest_even_index = index\n            else:\n                smallest_even_value = val\n                smallest_even_index = index\n\n    return [smallest_even_value, smallest_even_index]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1])\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1]",
      -0.85888671875
    ],
    [
      "if not arr:\n        return []\n\n    arr.sort()\n    return [arr[0], arr.index(min(arr))]",
      -0.85888671875
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0], 0\n    if len(arr) == 2:\n        return arr[0], 1\n    mid = len(arr) // 2\n    left, right = arr[:mid], arr[mid:]\n    left, right = pluck(left), pluck(right)\n    if left[0] == right[0]:\n        return [left[0] + right[0], left[1] + right[1]]\n    return [left[0], left[1]]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        # find the smallest even value\n        smallest_even_value = None\n        smallest_even_index = None\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                if smallest_even_value is None:\n                    smallest_even_value = arr[i]\n                    smallest_even_index = i\n                else:\n                    if smallest_even_value < arr[i]:\n                        smallest_even_value = arr[i]\n                        smallest_even_index = i\n        # if there is a node with the smallest even value\n        if smallest_even_value is not None:\n            return [smallest_even_value, smallest_even_index]\n        # otherwise, return an empty array\n        return []",
      -0.85888671875
    ],
    [
      "if len(arr) == 0:\n        return []\n    result = [None, 0]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result[0] = arr[i]\n            result[1] = i\n    return result\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -0.90625
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n        i += 1\n    return []\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n\n    for case in test_cases:\n        assert pluck(case[0]) == case[1]",
      -0.94482421875
    ],
    [
      "if not arr:\n        return []\n\n    smallest_even_value = arr[0]\n    smallest_index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            smallest_even_value = node\n            smallest_index = i\n\n    return [smallest_even_value, smallest_index]\n\n\ndef main():\n    test_cases = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1])\n    ]\n\n    for test_case in test_cases:\n        result = pluck(test_case[0])\n        assert result == test_case[1], f\"Test case {test_case} failed. Expected: {result}, got: {test_case[1]}\"\n\n\nif __name__ == '__main__':\n    main()",
      -1.0703125
    ],
    [
      "if not arr:\n        return []\n\n    odd_index = 0\n    odd_value = None\n    for i, node in enumerate(arr):\n        if i % 2 == 1:\n            odd_value = node\n            odd_index = i\n\n    if odd_value:\n        return [odd_value, odd_index]\n    else:\n        return []",
      -1.224609375
    ],
    [
      "if arr == []:\n        return []\n\n    arr.sort(key=lambda x: x % 2)\n    smalest = arr[0]\n    index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == smalest:\n            index = i\n            break\n\n    return [smalest, index]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == '__main__':\n    main()",
      -1.3974609375
    ],
    [
      "# define the set of nodes\n    nodes = set()\n    # traverse the array\n    for item in arr:\n        if item % 2 == 0:\n            nodes.add(item)\n    # return the node with the smallest even value\n    return min(nodes)\n\n\n# test cases\nprint(pluck([4, 2, 3]))\nprint(pluck([1, 2, 3]))\nprint(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))\n\n# time complexity -- O(n)\n# space complexity -- O(n)",
      -1.41015625
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n\n    smallest = float(\"inf\")\n    smallest_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest > arr[i]:\n                smallest = arr[i]\n                smallest_index = i\n    \n    return [smallest, smallest_index]",
      -1.4326171875
    ],
    [
      "if arr == []:\n        return []\n    node = arr[0]\n    i = 0\n    for j in range(1, len(arr)):\n        if arr[j] % 2 == 0:\n            if node.value < arr[j]:\n                node = arr[j]\n                i = j\n    return [node.value, i]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\nif __name__ == '__main__':\n    test_pluck()",
      -1.4404296875
    ],
    [
      "# Your code here\n    if not arr:\n        return []\n    arr.sort(key=lambda x: x % 2)\n    return arr[0]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        (\n            [4, 2, 3],\n            [2, 1],\n        ),\n        (\n            [1, 2, 3],\n            [2, 1],\n        ),\n        (\n            [],\n            [],\n        ),\n        (\n            [5, 0, 3, 0, 4, 2],\n            [0, 1],\n        ),\n    ]\n    for t in tests:\n        actual = pluck(t[0])\n        expected = t[1]\n        assert actual == expected",
      -1.4833984375
    ],
    [
      "# Runtime: 44 ms, faster than 96.94% of Python3 online submissions for Pluck.\n    # Memory Usage: 13.5 MB, less than 9.97% of Python3 online submissions for Pluck.\n    if not arr:\n        return []\n    arr.sort()\n    if arr[0] % 2:\n        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0], 1]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            return [arr[i], i]",
      -1.5576171875
    ],
    [
      "if not arr:\n        return []\n\n    even_nums = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            even_nums.append(val)\n\n    if len(even_nums) > 1:\n        return [min(even_nums), i]\n    else:\n        return []\n\n\ndef main():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\nif __name__ == '__main__':\n    main()",
      -1.8388671875
    ],
    [
      "if arr == []:\n        return []\n    arr.sort()\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    else:\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                return [arr[i], i]\n    return []\n\n\ndef main():\n    test_cases = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n\n    for test_case in test_cases:\n        assert pluck(test_case[0]) == test_case[1]\n\n\nif __name__ == '__main__':\n    main()",
      -1.8662109375
    ],
    [
      "if not arr:\n        return []\n\n    min_even = float('inf')\n    min_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if min_even < arr[i]:\n                min_even = arr[i]\n                min_index = i\n\n    return [min_even, min_index]\n\n\nif __name__ == '__main__':\n    tests = [\n        [4, 2, 3],\n        [1, 2, 3],\n        [],\n        [5, 0, 3, 0, 4, 2]\n    ]\n\n    for test in tests:\n        assert pluck(test) == [2, 1]",
      -1.9072265625
    ],
    [
      "if not arr:\n        return []\n\n    res = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            res.append(arr[i])\n\n    if res:\n        return res[0], res[0]\n    else:\n        return []\n\n\nif __name__ == '__main__':\n    cases = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n\n    for case in cases:\n        assert pluck(case[0]) == case[1]",
      -1.91796875
    ],
    [
      "if not arr:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0]]\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] % 2 == 0:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    if start < end:\n        return [arr[start], start]\n    else:\n        return [arr[start], start]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.9580078125
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n    else:\n        res = []\n        for i in range(0, len(arr), 2):\n            if arr[i] % 2 == 0:\n                res.append(arr[i])\n                res.append(i)\n        return res",
      -2.083984375
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    arr.sort()\n\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n\n    else:\n        index = 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                index = i\n                break\n\n        return [arr[index], index]",
      -2.0859375
    ],
    [
      "if not arr:\n        return []\n    smallest_even_value = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even_value is None:\n                smallest_even_value = node\n                smallest_index = index\n            elif smallest_even_value == node:\n                smallest_index = index\n    return [smallest_even_value, smallest_index]\n\n\nif __name__ == '__main__':\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([5, 0, 3, 0, 4, 2, 5]) == [0, 1]\n    assert pluck([5, 0, 3, 0, 4, 2, 5, 6]) == [0, 1]\n    assert pluck([1, 2, 3, 5, 6, 7, 8]) == [2, 1]",
      -2.107421875
    ],
    [
      "if not arr:\n        return []\n\n    odd_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            odd_nodes.append(node)\n\n    if len(odd_nodes) == 0:\n        return []\n    elif len(odd_nodes) == 1:\n        return odd_nodes[0]\n    else:\n        return sorted(odd_nodes)\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -2.12109375
    ],
    [
      "if not arr:\n        return []\n\n    min_even = arr[0]\n    min_index = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < min_even:\n                min_even = value\n                min_index = index\n\n    return [min_even, min_index]\n\n\n# Tests\nassert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2, 3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)",
      -2.158203125
    ],
    [
      "if not arr:\n        return []\n\n    index = 0\n    node = arr[0]\n    smalest_value = node.value\n    while index < len(arr):\n        if arr[index].value % 2 == 0:\n            smalest_value = arr[index].value\n        index += 1\n\n    return [smalest_value, index]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -2.310546875
    ],
    [
      "if not arr:\n        return []\n\n    i, smallest_even_value = 0, arr[0]\n    smallest_even_index = 0\n    for j, node in enumerate(arr):\n        if node % 2 == 0:\n            if j > smallest_even_index:\n                smallest_even_index = j\n                smallest_even_value = node\n\n    return [smallest_even_value, smallest_even_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\nif __name__ == '__main__':\n    test_pluck()",
      -2.482421875
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    # find the smallest even value\n    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            min_even = arr[i]\n            min_index = i\n\n    # if there are multiple nodes with the same smallest even value,\n    # return the node with the smallest index\n    if min_index!= 0:\n        return [min_even, min_index]\n\n    # if there are no even values, return []\n    return []",
      -2.74609375
    ],
    [
      "if not arr:\n        return []\n\n    # Sort the array by the smallest even value\n    arr.sort(key=lambda x: x % 2)\n\n    # Find the smallest even value in the array\n    smallest_even_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_even_value = arr[i]\n            smallest_index = i\n\n    return [smallest_even_value, smallest_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -2.83203125
    ],
    [
      "arr.sort(key=lambda x: x % 2)\n    if len(arr) == 0:\n        return []\n    return arr[0], arr.index(arr[0])\n\n\nif __name__ == \"__main__\":\n    tests = [\n        (\n            ([4, 2, 3],),\n            [2, 1],\n        ),\n        (\n            ([1, 2, 3],),\n            [2, 1],\n        ),\n        (\n            ([],),\n            [],\n        ),\n        (\n            ([5, 0, 3, 0, 4, 2],),\n            [0, 1],\n        ),\n    ]\n    for test in tests:\n        actual = pluck(test[0])\n        assert actual == test[1], f\"Test {test[0]} failed! Actual: {actual}, Expected: {test[1]}\"",
      -2.904296875
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    # Find the smallest even value\n    smallest_even_value = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            # Found a smallest even value\n            if smallest_even_value is None:\n                smallest_even_value = node\n                smallest_index = index\n            else:\n                # Find the index of the smallest even value\n                if smallest_index == index:\n                    # The index of the smallest even value is the same as the index of the node\n                    return [smallest_even_value, index]\n                else:\n                    # The index of the smallest even value is not the same as the index of the node\n                    return [smallest_even_value, index]\n    # If there are no even values\n    return [smallest_even_value, smallest_index]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -2.982421875
    ],
    [
      "if not arr:\n        return []\n\n    sorted_arr = sorted(arr)\n\n    if len(sorted_arr) % 2:\n        return []\n\n    if len(sorted_arr) == 1:\n        return [sorted_arr[0], 0]\n\n    index = 0\n    smallest_even = sorted_arr[0]\n\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] % 2 == 0:\n            if sorted_arr[i] < smallest_even:\n                smallest_even = sorted_arr[i]\n                index = i\n\n    return [smallest_even, index]\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.072265625
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    return min(pluck(arr[1:]), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -3.140625
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    min_value = arr[0]\n    min_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if min_value == arr[i]:\n                min_index = i\n            else:\n                min_index = i\n            min_value = arr[i]\n\n    return [min_value, min_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([5, 0, 3, 0, 4, 0]) == [0, 1]",
      -3.2109375
    ],
    [
      "if not arr:\n        return []\n\n    # use a stack to keep track of the smallest even value and the index of the smallest value\n    # if the smallest even value is found, return the node with the smallest index\n    # otherwise, return None\n    stack = [(0, -1)]\n    while stack:\n        value, index = stack.pop()\n        if value % 2 == 0:\n            return [value, index]\n\n        if arr[index] > value:\n            stack.append((arr[index], index - 1))\n\n        if index + 1 < len(arr):\n            stack.append((arr[index + 1], index + 1))\n\n    return None",
      -3.3515625
    ],
    [
      "if not arr:\n        return []\n    \n    if len(arr) == 1:\n        return [arr[0]]\n    \n    if arr[0] % 2 == 0:\n        return [arr[0]]\n    \n    min_even = float('inf')\n    min_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n                min_even = arr[i]\n                min_index = i\n    \n    if min_even == float('inf'):\n        return []\n    \n    return [min_even, min_index]",
      -3.37890625
    ],
    [
      "arr.sort()\n    index = 0\n    smallest_even_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_even_value = arr[i]\n            index = i\n            break\n\n    if smallest_even_value % 2 == 0:\n        return [smallest_even_value, index]\n    else:\n        return []",
      -3.384765625
    ],
    [
      "if not arr:\n        return []\n\n    smallest = arr[0]\n    smallest_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest % 2 == 0:\n                return [smallest, smallest_index]\n            else:\n                smallest = arr[i]\n                smallest_index = i\n        else:\n            smallest = arr[i]\n            smallest_index = i\n\n    return [smallest, smallest_index]",
      -3.47265625
    ],
    [
      "if arr:\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            if arr[0] % 2 == 0:\n                return [arr[0], arr.index(arr[0])]\n            else:\n                return pluck(arr[1:])\n    else:\n        return []\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -3.724609375
    ],
    [
      "# Runtime: 48 ms, faster than 94.41% of Python3 online submissions for Pluck.\n    # Memory Usage: 13.7 MB, less than 12.13% of Python3 online submissions for Pluck.\n    if not arr:\n        return []\n\n    arr.sort()\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n\n    index = 1\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            index = i\n            break\n\n    return [arr[index], index]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([1, 1, 1]) == [1, 1]",
      -4.0625
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0] // 2, 0]\n    else:\n        return [arr[0], arr[0] // 2 + 1]\n\n\ndef pluck_1(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n        return [arr[0] // 2, 0]\n    else:\n        return [arr[0], arr[0] // 2 + 1]\n\n\ndef pluck_2(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list",
      -4.421875
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    # find the first even value\n    first_even = None\n    first_index = None\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if first_even == None:\n                first_even = arr[i]\n                first_index = i\n            else:\n                first_index = i\n\n    # find the first index which has the same even value\n    if first_index == None:\n        return []\n    first_even_index = None\n    for i in range(len(arr)):\n        if arr[i] == first_even:\n            if first_even_index == None:\n                first_even_index = i\n            else:\n                first_even_index = i\n    \n    # return the first node which has the smallest even value\n    if first_index == None:\n        return [first_even, first_even_index]\n    else:\n        return [first_even, first_even_index]",
      -4.5234375
    ],
    [
      "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n    return [arr[-1], -1]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([5, 0, 3, 0, 4, 2, 6]) == [0, 1]\n    assert pluck([4, 2, 3, 5]) == [2, 1]\n    assert pluck([1, 2, 3, 4, 5]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1",
      -4.55859375
    ],
    [
      "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        index = 0\n        for node in arr:\n            if node % 2 == 0:\n                return [node, index]\n            index += 1\n        return []\n\n\n# Time: O(N)\n# Space: O(N)\ndef pluck_2(arr):\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        index = 0\n        for node in arr:\n            if node % 2 == 0:\n                return [node, index]\n            index += 1\n        return []",
      -4.59375
    ],
    [
      "def helper(arr):\n        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr[0], 0]\n        if arr[0] % 2 == 0:\n            return [arr[0], arr.index(arr[0]) + 1]\n        else:\n            return [arr[0], helper(arr[1:])[1]]\n\n    return helper(arr)\n\n\nif __name__ == '__main__':\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n        ([5, 0, 3, 0, 4, 2, 1], [0, 1]),\n        ([1, 2, 3, 4], [3, 2, 1]),\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1]",
      -4.6875
    ],
    [
      "if not arr:\n        return []\n\n    # find the smallest even value\n    smallest_even = 0\n    smallest_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_even = arr[i]\n            smallest_index = i\n\n    # if there are multiple nodes with the same smallest even value,\n    # return the node with the smallest index\n    if smallest_even > 1:\n        return [smallest_even, smallest_index]\n\n    # otherwise, return the node with the smallest index\n    return [smallest_index, smallest_index]\n\n\ndef main():\n    # Test 1\n    arr = [4,2,3]\n    print(pluck(arr))\n\n    # Test 2\n    arr = [1,2,3]\n    print(pluck(arr))\n\n    # Test 3\n    arr = []\n    print(pluck(arr))\n\n    # Test 4\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n\n\nif __name__ == '__main__':\n    main()",
      -4.8046875
    ],
    [
      "if not arr:\n        return []\n    else:\n        # the even nodes with the smallest value\n        even_nodes = []\n        # the smallest index\n        smallest_index = -1\n        for index, node in enumerate(arr):\n            if node % 2 == 0:\n                even_nodes.append(node)\n                if smallest_index == -1:\n                    smallest_index = index\n        if len(even_nodes) == 1:\n            return [even_nodes[0], smallest_index]\n        else:\n            # find the smallest index and return the node with the smallest even value\n            return [min(even_nodes), min(even_nodes).index(min(even_nodes))]",
      -4.84765625
    ],
    [
      "if arr == []:\n        return []\n    \n    smalest_value = arr[0]\n    smallest_index = 0\n\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if val == smalest_value:\n                smallest_index = index\n            else:\n                smalest_value = val\n\n    return [smalest_value, smallest_index]",
      -5.125
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if arr[0] % 2!= 0:\n        return []\n\n    # the first node is the smallest even value\n    smallest_even_node = arr[0]\n    smallest_even_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even_node:\n                smallest_even_node = arr[i]\n                smallest_even_index = i\n\n    return [smallest_even_node, smallest_even_index]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1])\n    ]\n    for test in tests:\n        print(pluck(*test))",
      -5.30078125
    ],
    [
      "if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            even_nodes.append(node)\n\n    if len(even_nodes) == 1:\n        return [even_nodes[0], 0]\n    else:\n        return [min(even_nodes), min(even_nodes)]",
      -5.46875
    ],
    [
      "if arr == []:\n        return []\n    \n    arr.sort(key=lambda x: x[0])\n\n    if arr[0][0] % 2 == 0:\n        return arr[0]\n\n    idx = 0\n    while arr[idx][0] % 2!= 0:\n        idx += 1\n\n    return [arr[idx][0], idx]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([1, 2, 3, 4]) == [4, 1]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 1]",
      -5.4765625
    ],
    [
      "if arr == []:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    if arr[0] % 2 == 0:\n        return [arr[0] // 2, 0]\n    else:\n        return pluck(arr[1:])\n\n\ndef main():\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n\n\nif __name__ == '__main__':\n    main()",
      -5.4921875
    ],
    [
      "if not arr:\n        return []\n\n    if len(arr) == 1:\n        return arr[0]\n\n    arr.sort()\n    smallest = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest == arr[i]:\n                return [smallest, i]\n            else:\n                smallest = arr[i]\n                smallest_index = i\n\n    return []\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n        ([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]),\n    ]\n\n    for t in tests:\n        assert pluck(t[0]) == t[1]",
      -5.4921875
    ],
    [
      "# Your code here\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        smallest_even = arr[0]\n        smallest_index = 0\n        for index, value in enumerate(arr):\n            if value % 2 == 0:\n                if smallest_even == value:\n                    smallest_index = index\n                elif smallest_index == index:\n                    return [value, index]\n                else:\n                    smallest_index = index\n            else:\n                smallest_even = value\n        return [smallest_even, smallest_index]\n\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1]",
      -5.8203125
    ],
    [
      "# Runtime: 32 ms, faster than 96.92% of Python3 online submissions\n    # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions\n\n    # Runtime: 32 ms, faster than 96.92% of Python3 online submissions\n    # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions\n\n    if not arr:\n        return []\n\n    # Find the smallest even value\n    smallest_even_value = min(arr, key=lambda x: x % 2)\n\n    # Find the smallest index\n    smallest_index = arr.index(smallest_even_value)\n\n    # If there are multiple even values, return the node that has the smallest index\n    if arr.count(smallest_even_value) > 1:\n        return [smallest_even_value, smallest_index]\n\n    # Otherwise, return the smallest even value\n    return [smallest_even_value, smallest_index]",
      -6.0625
    ],
    [
      "# Your code here\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    elif len(arr) == 2:\n        if arr[0] % 2 == 0:\n            return [arr[0], 0]\n        else:\n            return [arr[1], 0]\n    else:\n        # find the smallest even value\n        smallest_even_value = arr[0]\n        smallest_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                smallest_even_value = min(smallest_even_value, arr[i])\n                smallest_index = min(smallest_index, i)\n        # return the smallest even value and its index\n        return [smallest_even_value, smallest_index]",
      -6.48828125
    ],
    [
      "if not arr:\n        return []\n\n    # find the smallest even value\n    smallest = arr[0]\n    smallest_index = 0\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            smallest = val\n            smallest_index = index\n\n    # if the smallest even value is found, return the node with the smallest index\n    if smallest == smallest_index:\n        return [smallest, smallest_index]\n\n    # if the smallest even value is not found, return []\n    else:\n        return []\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\ntest_pluck()",
      -8.4140625
    ],
    [
      "# Solution 1\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    elif arr[0] % 2 == 0:\n        return [arr[0], 0]\n    else:\n        index = 0\n        node = arr[0]\n        while index < len(arr) - 1:\n            if arr[index] % 2 == 0:\n                node = arr[index]\n                index += 1\n            else:\n                break\n        return [node, index]\n\n    # Solution 2\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    elif arr[0] % 2 == 0:\n        return [arr[0], 0]\n    else:\n        index = 0\n        node = arr[0]\n        while index < len(arr) - 1:\n            if arr[index] % 2 == 0:\n                node = arr[index]\n                index += 1\n            else:\n                break\n        return [node, index]\n\n    # Solution 3\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    elif arr[0] % 2 == 0:\n        return [arr[0], 0]\n    else:\n        index = 0\n        node = arr[0]\n        while index < len(arr) - 1:\n            if arr[index] % 2 == 0:\n                node = arr[index]\n                index += 1\n            else:\n                break\n        return [node, index]\n\n    # Solution 4\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:",
      -8.546875
    ],
    [
      "if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n\n    smallest_index = 0\n    smallest_value = arr[0]\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_value < value:\n                smallest_value = value\n                smallest_index = index\n\n    return [smallest_value, smallest_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([1, 2, 3, 4]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7]) == [1, 2]\n    assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2]\n\n\nif __name__ == \"__main__\":\n    test_pluck()",
      -8.6875
    ],
    [
      "if not arr:\n        return []\n    \n    if len(arr) == 1:\n        return [arr[0], 0]\n    \n    min_val = min(arr, key=lambda x: x % 2)\n    min_idx = arr.index(min_val)\n    \n    return [min_val, min_idx]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 1, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [2, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 2]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 1, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 2, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 1, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 1, 1]),\n        ([1, 2, 3, 4, 5, 6, 7, 8,",
      -9.3671875
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    smallest_even_index = 0\n    smallest_even_value = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even_value == 0:\n                smallest_even_value = value\n                smallest_even_index = index\n            else:\n                smallest_even_index = min(smallest_even_index, index)\n    return [smallest_even_value, smallest_even_index]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        ([4, 2, 3], [2, 1]),\n        ([1, 2, 3], [2, 1]),\n        ([], []),\n        ([5, 0, 3, 0, 4, 2], [0, 1]),\n        ([1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1])\n    ]\n\n    for test_case in tests:\n        assert pluck(test_case[0]) == test_case[1]",
      -10.296875
    ],
    [
      "# Runtime: 60 ms, faster than 86.58% of Python3 online submissions for Pluck.\n    # Memory Usage: 13.2 MB, less than 91.13% of Python3 online submissions for Pluck.\n    # Definition for a Node.\n    class Node:\n        def __init__(self, val=0, left=None, right=None):\n            self.val = val\n            self.left = left\n            self.right = right\n\n    if not arr:\n        return []\n\n    # find the smallest even value\n    smallest_even = None\n    smallest_index = None\n    for i in range(len(arr)):\n        node = arr[i]\n        if node.val % 2 == 0:\n            if smallest_even is None or node.val < smallest_even:\n                smallest_even = node.val\n                smallest_index = i\n\n    if smallest_index is None:\n        return []\n\n    # find the node that has the smallest even value\n    node = arr[smallest_index]\n    while node.right is not None:\n        node = node.right\n\n    return [smallest_even, smallest_index]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [4, 2, 3],\n        [1, 2, 3],\n        [],\n        [5, 0, 3, 0, 4, 2],\n    ]\n    for test_case in test_cases:\n        assert pluck(test_case) == [2, 1]",
      -10.890625
    ],
    [
      "if not arr:\n        return []\n\n    # initialize the current node as root\n    root = arr[0]\n\n    # keep going until the current node is even\n    for i in range(1, len(arr)):\n        # if the current node is even, the smallest even value is the current node\n        if root.value % 2 == 0:\n            # update the current node\n            root = arr[i]\n        # if the current node is odd, we need to pluck the next node\n        else:\n            # update the current node's index\n            root = arr[i]\n            break\n\n    return [root.value, root.index]\n\n\nif __name__ == '__main__':\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
      -11.515625
    ],
    [
      "# The only difference between the two approaches is that the elements of the array\n    # will be sorted in ascending order.\n    # The following is the main idea of the solution.\n    # The sort is done in O(n) time.\n    # The loop is done in O(n) time.\n    # The while loop is done in O(n) time.\n    if not arr:\n        return []\n\n    s = arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            s = arr[i]\n            i += 1\n        else:\n            break\n    return [s, i]",
      -12.796875
    ],
    [
      "def helper(arr, i, res):\n        if i == len(arr):\n            return res\n        if arr[i] % 2 == 0:\n            res[0] = arr[i]\n            return helper(arr, i + 1, res)\n        return helper(arr, i + 1, res)\n    \n    if len(arr) == 0:\n        return []\n    res = [0] * len(arr)\n    return helper(arr, 0, res)\n\n\ndef main():\n    tests = [\n        [[4, 2, 3], [2, 1]],\n        [[1, 2, 3], [2, 1]],\n        [[], []],\n        [[5, 0, 3, 0, 4, 2], [0, 1]],\n    ]\n    for t in tests:\n        assert pluck(t[0]) == t[1]\n\n\nif __name__ == '__main__':\n    main()",
      -12.8203125
    ],
    [
      "if len(arr) == 0:\n        return []\n    arr.sort(key=lambda x: x % 2, reverse=True)\n    min_even_index = arr[0]\n    min_even_node = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if min_even_index == node:\n                min_even_node = node\n            else:\n                min_even_index = node\n    return [min_even_node, index]\n\n\nif __name__ == \"__main__\":\n    tests = [\n        [4, 2, 3],\n        [1, 2, 3],\n        [],\n        [5, 0, 3, 0, 4, 2]\n    ]\n    for test in tests:\n        assert pluck(test) == test",
      -19.5625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}