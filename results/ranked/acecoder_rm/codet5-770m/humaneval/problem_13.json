{
  "problem": {
    "task_id": "HumanEval/13",
    "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
    "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
    "entry_point": "greatest_common_divisor",
    "docstring": "",
    "problem_id": 13
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    return greatest_common_divisor_recursive(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.765625
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b % a, a)\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      9.40625
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_2(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_2(3, 5)\n    1\n    >>> greatest_common_divisor_2(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.359375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      9.015625
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      8.8828125
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.3828125
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.578125
    ],
    [
      "return (a % b) or b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.05859375
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.03515625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(3, 5))\n    print(greatest_common_divisor(25, 15))",
      3.97265625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.875
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n\n    if a > b:\n        a, b = b, a\n\n    gcd = a\n    while b!= 0:\n        a, b = b, a % b\n        gcd = gcd * b\n    return gcd",
      3.865234375
    ],
    [
      "while a % b!= 0:\n        a, b = b, a % b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.248046875
    ],
    [
      "while b > 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.244140625
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    elif a > b:\n        a, b = b, a\n    while b > 0:\n        if a % b == 0:\n            return b\n        b -= 1\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.048828125
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      2.98828125
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.974609375
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.71875
    ],
    [
      "if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.255859375
    ],
    [
      "if b == 0:\n        return a\n    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.234375
    ],
    [
      "if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      2.20703125
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a",
      2.158203125
    ],
    [
      "while a!= 0:\n        a, b = b % a, a\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.8935546875
    ],
    [
      "return a % b or b % a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.86328125
    ],
    [
      "return a // b\n\n\ndef greatest_common_divisor_iterative(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_iterative(3, 5)\n    1\n    >>> greatest_common_divisor_iterative(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.7998046875
    ],
    [
      "if a == b:\n        return a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      1.7294921875
    ],
    [
      "return a // b",
      1.56640625
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)",
      1.4462890625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.271484375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.2060546875
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.2060546875
    ],
    [
      "if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.9423828125
    ],
    [
      "return a if a < b else b",
      0.82666015625
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    gcd = a\n    while gcd!= 0:\n        if b % gcd == 0:\n            return gcd\n        gcd -= 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.673828125
    ],
    [
      "if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)",
      0.5185546875
    ],
    [
      "if a % b == 0:\n        return b\n    else:\n        return a % b\n\n\ndef greatest_common_divisor_fast(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_fast(3, 5)\n    1\n    >>> greatest_common_divisor_fast(25, 15)\n    5\n    \"\"\"\n    if a % b == 0:\n        return b\n    else:\n        return a % b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.43115234375
    ],
    [
      "while a!= 0 and b!= 0:\n        a, b = b, a % b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.242431640625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a",
      0.1375732421875
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a",
      0.03375244140625
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    else:\n        return max(a, b) // min(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.1666259765625
    ],
    [
      "while a % b!= 0:\n        a = a % b\n        b = b % a\n    return a",
      -0.5673828125
    ],
    [
      "if a > b:\n        return a\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.5986328125
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    return a // b if a % b == 0 else b // a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    return a // b if a % b == 0 else b // a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.6064453125
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    return a // b\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    1\n    >>> lcm(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef lcm_with_negative(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_with_negative(3, 5)\n    0\n    >>> lcm_with_negative(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.72412109375
    ],
    [
      "return a % b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    return max(a, b) // min(a, b)",
      -0.85693359375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_iterative(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_iterative(3, 5)\n    1\n    >>> greatest_common_divisor_iterative(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a",
      -0.85693359375
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "while a % b!= 0:\n        a, b = b, a % b\n    return b",
      -0.85693359375
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(25, 15) == 5",
      -0.85693359375
    ],
    [
      "if a % b == 0:\n        return b\n    if b % a == 0:\n        return a\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a",
      -0.85693359375
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    a = int(input(\"Enter a number: \"))\n    b = int(input(\"Enter a number: \"))\n    print(f\"The greatest common divisor of {a} and {b} is {greatest_common_divisor(a, b)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    while b!= 0:\n        a, b = b, a % b\n    return a",
      -0.85693359375
    ],
    [
      "if a > b:\n        return greatest_common_divisor(b, a)\n    else:\n        return greatest_common_divisor(a, b)\n\n\ndef greatest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple(3, 5)\n    2\n    >>> greatest_common_multiple(25, 15)\n    5\n    \"\"\"\n    if a > b:\n        return greatest_common_multiple(b, a)\n    else:\n        return greatest_common_multiple(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return a if a % b == 0 else b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        a, b = b, a\n\n    while b!= 0:\n        if a % b == 0:\n            return b\n        else:\n            b -= 1\n\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return a // b",
      -0.85693359375
    ],
    [
      "return a // b",
      -0.85693359375
    ],
    [
      "return a // b\n\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    print(greatest_common_divisor(a, b))",
      -0.857421875
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if a == b:\n        return a\n    return greatest_common_divisor(a % b, b)",
      -0.85791015625
    ],
    [
      "gcd = a\n    while b!= 0:\n        a, b = b, a % b\n        gcd = gcd // b\n    return gcd\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if b == 0:\n        return a\n    if a == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "while b > 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(greatest_common_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return a if a > b else b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "while a % b!= 0:\n        a, b = b, a % b\n    return b",
      -0.85888671875
    ],
    [
      "while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef greatest_common_divisor_of_two_integers(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_of_two_integers(3, 5)\n    1\n    >>> greatest_common_divisor_of_two_integers(25, 15)\n    5\n    \"\"\"\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a",
      -0.85888671875
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return max(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "if a > b:\n        return a\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.080078125
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    return 1 if a % b == 0 else b",
      -1.484375
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5546875
    ],
    [
      "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.5546875
    ],
    [
      "if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5556640625
    ],
    [
      "if a > b:\n        a, b = b, a\n\n    while b!= 0:\n        a, b = b, a % b\n\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.8486328125
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_fast(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_fast(3, 5)\n    1\n    >>> greatest_common_divisor_fast(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    1\n    >>> lcm(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_fast(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_fast(3, 5)\n    1\n    >>> lcm_fast(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.95703125
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a",
      -2.1015625
    ],
    [
      "while a % b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple(3, 5)\n    1\n    >>> greatest_common_multiple(25, 15)\n    5\n    \"\"\"\n    while a % b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_divisor_multiple(3, 5)\n    1\n    >>> greatest_common_divisor_multiple(25, 15)\n    5\n    \"\"\"\n    while a % b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_multiple_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple_multiple(3, 5)\n    1\n    >>> greatest_common_multiple_multiple(25, 15)\n    5\n    \"\"\"\n    while a % b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_multiple_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_divisor_multiple_multiple(3, 5)\n    1\n    >>> greatest_common_divisor_multiple_multiple(25, 15)\n    5\n    \"\"\"\n    while a % b > 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.1640625
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple(3, 5)\n    1\n    >>> greatest_common_multiple(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_fast(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_fast(3, 5)\n    1\n    >>> greatest_common_divisor_fast(25, 15)\n    5\n    \"\"\"\n    return max(a, b)\n\n\ndef greatest_common_multiple_fast(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple_fast(3, 5)\n    1\n    >>> greatest_common_multiple_fast(25, 15)\n    5\n    \"\"\"\n    return max(a, b)",
      -2.755859375
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    if a == 1 and b == 1:\n        return 1\n    if a == 1:\n        return b\n    if b == 1:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.92578125
    ],
    [
      "return a // b\n\n\ndef smallest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a smallest common divisor of two integers a and b\n    >>> smallest_common_divisor(3, 5)\n    1\n    >>> smallest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -3.169921875
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    1\n    >>> lcm(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_of_two_numbers(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_of_two_numbers(3, 5)\n    1\n    >>> lcm_of_two_numbers(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_of_two_numbers_with_remainder(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_of_two_numbers_with_remainder(3, 5)\n    1\n    >>> lcm_of_two_numbers_with_remainder(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_of_two_numbers_with_remainder_with_divisor(a: int, b: int) -> int:\n    \"\"\" Return",
      -3.556640625
    ],
    [
      "return a % b if b % a else a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    return a if a > b else b\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(100)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(0)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
      -3.708984375
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_multiple_divisors(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple_divisors(3, 5)\n    1\n    >>> greatest_common_multiple_divisors(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.91796875
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return a % b\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return a % b\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    3\n    >>> lcm(25, 15)\n    15\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return a * b // gcd(a, b)\n\n\ndef lcm_or_gcd(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_or_gcd(3, 5)\n    3\n    >>> lcm_or_gcd(25, 15)\n    15\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return a * b // gcd_or_gcd(a, b)\n\n\ndef lcm_or_lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_or_lcm(3, 5)\n    3\n    >>> lcm_or_lcm(25, 15)\n    15\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return a * b // lcm(a, b)\n\n\ndef lcm_or_gcd_or_lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_or_gcd_or_lcm(3, 5)\n    3\n    >>> lcm_or",
      -4.41015625
    ],
    [
      "if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    3\n    >>> lcm(25, 15)\n    15\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a",
      -4.65234375
    ],
    [
      "if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a",
      -5.80859375
    ],
    [
      "return a // b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.07421875
    ],
    [
      "if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.77734375
    ],
    [
      "if a == b:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return a % b\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the gcd of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a < b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a, b % a)\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the LCM of two integers a and b\n    >>> lcm(3, 5)\n    5\n    >>> lcm(25, 15)\n    15\n    \"\"\"\n    if a == b:\n        return a\n    elif a < b:\n        return lcm(b, a % b)\n    else:\n        return lcm(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.328125
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    return a if a > b else b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.67578125
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> greatest_common_multiple(3, 5)\n    1\n    >>> greatest_common_multiple(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> lcm(3, 5)\n    1\n    >>> lcm(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_lcm(a: int, b: int) -> int:\n    \"\"\" Return a greatest common multiple of two integers a and b\n    >>> gcd_lcm(3, 5)\n    1\n    >>> gcd_lcm(25, 15)\n    5\n    \"\"\"\n    return gcd(greatest_common_divisor(a, b), greatest_common_multiple(a, b))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.03125
    ],
    [
      "gcd = 1\n\n    while a!= 0 or b!= 0:\n        if a % b == 0:\n            a //= b\n        else:\n            b //= a\n        gcd = gcd * b\n\n    return gcd\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -10.2578125
    ],
    [
      "gcd = a\n    while b:\n        if a % b == 0:\n            a = a // b\n        else:\n            b = b // a\n        gcd = gcd // a\n    return gcd",
      -11.8515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}