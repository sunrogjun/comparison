{
  "problem": {
    "task_id": "HumanEval/7",
    "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
    "canonical_solution": "    return [x for x in strings if substring in x]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
    "entry_point": "filter_by_substring",
    "docstring": "",
    "problem_id": 7
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return [string for string in strings if substring in string]\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given prefix\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given suffix\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if string.endswith(suffix)]",
      15.03125
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      14.703125
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      14.4140625
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.40625
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.40625
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.40625
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.40625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      14.390625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      14.390625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      14.390625
    ],
    [
      "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.3125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.1953125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.1953125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.1953125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.1953125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.1953125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      14.1015625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      13.734375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      13.40625
    ],
    [
      "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      11.0703125
    ],
    [
      "filtered_strings = [\n        string for string in strings if substring in string\n    ]\n    return filtered_strings\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      10.6484375
    ],
    [
      "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.6328125
    ],
    [
      "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.6328125
    ],
    [
      "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
      7.9453125
    ],
    [
      "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result",
      5.93359375
    ],
    [
      "return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.87890625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      5.80859375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.80078125
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      5.55859375
    ],
    [
      "return [\n        string\n        for string in strings\n        if substring in string\n    ]",
      5.3828125
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.9140625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.9140625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_length(strings: List[str], substring: str, length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_length([], 'a', 1)\n    []\n    >>> filter_by_substring_with_length(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) == length and substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.81640625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.4765625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.4765625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.4765625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.4765625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.37109375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      4.171875
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      4.171875
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.921875
    ],
    [
      "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result",
      3.6640625
    ],
    [
      "return [s for s in strings if substring in s]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [s for s in strings if substring in s]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [s for s in strings if substring in s]",
      3.265625
    ],
    [
      "return [x for x in strings if substring in x]",
      3.265625
    ],
    [
      "return [string for string in strings if substring in string]",
      3.265625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substr(strings: List[str], substr: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substr([], 'a')\n    []\n    >>> filter_by_substr(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substr in s]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_regex_in_strings(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex_in_strings([], 'a')\n    []\n    >>> filter_by_regex_in_strings(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_regex_and_substring(strings: List[str], regex: str, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex_and_substring([], 'a', 'b')\n    []\n    >>> filter_by_regex_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', 'b')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s and substring in s]",
      3.25
    ],
    [
      "return [string for string in strings if substring in string]",
      2.318359375
    ],
    [
      "return [x for x in strings if substring in x]",
      2.318359375
    ],
    [
      "return [s for s in strings if substring in s]",
      2.318359375
    ],
    [
      "return [string for string in strings if substring in string]",
      2.318359375
    ],
    [
      "return [s for s in strings if substring in s]",
      2.318359375
    ],
    [
      "return [s for s in strings if substring in s]",
      2.318359375
    ],
    [
      "return [s for s in strings if substring in s]",
      2.318359375
    ],
    [
      "return [string for string in strings if substring in string]",
      2.318359375
    ],
    [
      "return [string for string in strings if substring in string]",
      1.90625
    ],
    [
      "return [x for x in strings if substring in x]",
      1.90625
    ],
    [
      "return [string for string in strings if substring in string]",
      1.90625
    ],
    [
      "return [string for string in strings if substring in string]",
      1.90625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      1.1328125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.1328125
    ],
    [
      "return [\n        s for s in strings if substring in s\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      0.8271484375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_recursively(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_recursively([], 'a')\n    []\n    >>> filter_by_substring_recursively(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return []\n    if not substring:\n        return [string for string in strings if not string.startswith(substring)]\n    if not substring.startswith(strings[0]):\n        return []\n    return [string for string in strings if substring in string]",
      0.525390625
    ],
    [
      "return [string for string in strings if substring in string]",
      0.403076171875
    ],
    [
      "return [string for string in strings if substring in string]",
      0.403076171875
    ],
    [
      "return [x for x in strings if substring in x]\n\n\ndef filter_by_substring_count(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_count([], 'a')\n    []\n    >>> filter_by_substring_count(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x and x.count(substring) == 1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.035186767578125
    ],
    [
      "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.263916015625
    ],
    [
      "return [s for s in strings if substring in s]",
      -0.85693359375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [x for x in strings if substring in x]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [string for string in strings if substring in string]",
      -0.85791015625
    ],
    [
      "return [s for s in strings if substring in s]",
      -0.85791015625
    ],
    [
      "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [s for s in strings if substring in s]",
      -0.85791015625
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return [string for string in strings if substring in string]",
      -0.8583984375
    ],
    [
      "return [s for s in strings if substring in s]",
      -0.8583984375
    ],
    [
      "return [string for string in strings if substring in string]",
      -0.8583984375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.92041015625
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_prefix(strings: List[str], substring: str, prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_prefix([], 'a')\n    []\n    >>> filter_by_substring_with_prefix(['abc', 'bacd', 'cde', 'array'], 'a', 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring.startswith(prefix)]\n\n\ndef filter_by_substring_with_suffix(strings: List[str], substring: str, suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_suffix([], 'a')\n    []\n    >>> filter_by_substring_with_suffix(['abc', 'bacd', 'cde', 'array'], 'a', 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring.endswith(suffix)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.814453125
    ],
    [
      "return [string for string in strings if substring in string]\n\n\ndef filter_by_case(strings: List[str], case: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given case\n    >>> filter_by_case([], 'a')\n    []\n    >>> filter_by_case(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if case in string.lower()]",
      -2.15234375
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_recursively(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_recursively([], 'a')\n    []\n    >>> filter_by_substring_recursively(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    def _recursive_filter_by_substring(strings, substring):\n        if substring in strings:\n            return strings\n        return [s for s in strings if substring in _recursive_filter_by_substring(strings, substring)]\n\n    return _recursive_filter_by_substring(strings, substring)",
      -5.4921875
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_pattern(strings: List[str], pattern: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given pattern\n    >>> filter_by_pattern([], 'a')\n    []\n    >>> filter_by_pattern(['abc', 'bacd', 'cde', 'array'], 'c')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if pattern in s]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length([], 5)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 5)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) == length]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_length_or_regex(strings: List[str], length: int | str | None = None, regex: str | None = None) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length_or_regex([], 5)\n    []\n    >>> filter_by_length_or_regex(['abc', 'bacd', 'cde', 'array'], 5)\n    ['abc', 'bacd', 'array']\n    >>> filter_by_length_or_regex(['abc', 'bacd', 'cde', 'array'], 5, 'c')\n    ['",
      -6.74609375
    ],
    [
      "return [string for string in strings if substring in string]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given regex\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if regex in string]",
      -7.48046875
    ],
    [
      "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_regex(strings: List[str], substring: str, regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex([], 'a')\n    []\n    >>> filter_by_substring_with_regex(['abc', 'bacd', 'cde', 'array'], 'a', '.*')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s)]\n\n\ndef filter_by_substring_with_regex_and_index(strings: List[str], substring: str, regex: str, index: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex_and_index([], 'a', '.*', 0)\n    []\n    >>> filter_by_substring_with_regex_and_index(['abc', 'bacd', 'cde', 'array'], 'a', '.*', 0)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s, index)]\n\n\ndef filter_by_substring_with_regex_and_substring(strings: List[str], substring: str, regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex_and_substring([], 'a', '.*')\n    []\n    >>> filter_by_substring_with_regex_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', '.*')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s, substring)]\n\n\ndef filter_by_substring_with_regex_and_substring_and_index(strings: List[str], substring: str, regex: str, index: int) -> List[str]:\n    \"\"\" Filter an",
      -8.140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}