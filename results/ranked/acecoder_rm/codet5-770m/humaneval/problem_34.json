{
  "problem": {
    "task_id": "HumanEval/34",
    "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
    "canonical_solution": "    return sorted(list(set(l)))\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
    "entry_point": "unique",
    "docstring": "",
    "problem_id": 34
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return sorted(set(l))\n\n\ndef unique_sort(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_sort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
      13.046875
    ],
    [
      "return sorted(set(l))\n\n\ndef unique_l(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_l([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_l_v2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_l_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
      11.6328125
    ],
    [
      "return sorted(set(l))\n\n\ndef unique_in_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
      11.4453125
    ],
    [
      "return sorted(set(l))\n\n\ndef unique_v1(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_v1([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_v2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
      10.59375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_from_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      10.265625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      10.140625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      10.140625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.546875
    ],
    [
      "if len(l) == 0:\n        return []\n    res = []\n    for i in l:\n        if i not in res:\n            res.append(i)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.953125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      7.25390625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.15234375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.8203125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.11328125
    ],
    [
      "unique = set(l)\n    return sorted(list(unique))\n\n\ndef main():\n    l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    print(unique(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      4.73046875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.72265625
    ],
    [
      "unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      4.671875
    ],
    [
      "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      4.34375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.12890625
    ],
    [
      "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.97265625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(set(i for i in l if i not in seen and not seen_add(i)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.55078125
    ],
    [
      "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.244140625
    ],
    [
      "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      3.234375
    ],
    [
      "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.201171875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n\n    for element in l:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.169921875
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.884765625
    ],
    [
      "if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_1(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_1([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.708984375
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      2.30078125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.1953125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(\n        x for x in l if x not in seen and not seen_add(x)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.009765625
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.22265625
    ],
    [
      "return list(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.9111328125
    ],
    [
      "return list(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.9111328125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.80810546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.80810546875
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.7958984375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.54541015625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(set(x for x in l if not (x in seen or seen_add(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.39990234375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(x) for x in l if x not in seen))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.20068359375
    ],
    [
      "seen = set()\n    return [i for i in l if not (i in seen or seen.add(i))]",
      0.149658203125
    ],
    [
      "seen = set()\n    return [v for v in l if v not in seen and not seen.add(v)]",
      0.149658203125
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]",
      0.149658203125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(\n        (x for x in l if not (x in seen or seen_add(x))),\n        key=lambda x: seen_add(x),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1146240234375
    ],
    [
      "return sorted(set(l))",
      0.016510009765625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.037353515625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.1832275390625
    ],
    [
      "if len(l) == 0:\n        return []\n    else:\n        seen = set()\n        seen_add = seen.add\n        return [x for x in l if x not in seen and not seen_add(x)]",
      -0.283447265625
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.325927734375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.325927734375
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.325927734375
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.443115234375
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.443115234375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -0.44580078125
    ],
    [
      "l.sort()\n    return [x for x in l if l.count(x) == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.447998046875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -0.498046875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(x) for x in l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.6181640625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -0.85595703125
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]",
      -0.85595703125
    ],
    [
      "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "unique_list = []\n    for item in l:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
      -0.85595703125
    ],
    [
      "unique_l = []\n    for el in l:\n        if el not in unique_l:\n            unique_l.append(el)\n    return unique_l\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85595703125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return sorted(set(l))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(set(x for x in l if x not in seen and not seen_add(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(e) for e in l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -0.857421875
    ],
    [
      "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if len(l) == 1:\n        return [l[0]]\n    else:\n        return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "seen = set()\n    return sorted(list(seen.union(set(l))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return sorted(set(l))",
      -0.99560546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return sorted(\n        i for i in l if not (i in seen or seen_add(i))\n    )",
      -1.2763671875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.6435546875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.8916015625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.8916015625
    ],
    [
      "seen = set()\n    return sorted(list(seen.union(set(l))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.9091796875
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]",
      -1.96484375
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -1.96484375
    ],
    [
      "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.03515625
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]",
      -3.080078125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]",
      -3.080078125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef find_unique_numbers(l: list):\n    \"\"\"Return sorted unique numbers in a list\n    >>> find_unique_numbers([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    seen_remove = seen.remove\n    return [x for x in l if not (x in seen or seen_add(x)) and not (x in seen_remove(x))]\n\n\ndef find_unique_numbers_reversed(l: list):\n    \"\"\"Return sorted unique numbers in a list\n    >>> find_unique_numbers_reversed([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    seen_remove = seen.remove\n    return [x for x in reversed(l) if not (x in seen or seen_add(x)) and not (x in seen_remove(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.314453125
    ],
    [
      "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted(list(set(l) - seen))",
      -3.36328125
    ],
    [
      "l.sort()\n    return l\n\n\ndef find_duplicates(l: list):\n    \"\"\"Return list of unique elements in a list\n    >>> find_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l.sort()\n    return [i for i, x in enumerate(l) if x!= l[i - 1]]",
      -4.1015625
    ],
    [
      "return sorted(set(l))\n\n\ndef sort_by_value(l: list):\n    \"\"\"Return a list sorted by value\n    >>> sort_by_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(l, key=lambda x: l.index(x))\n\n\ndef sort_by_value_in_ascending_order(l: list):\n    \"\"\"Return a list sorted by value in ascending order\n    >>> sort_by_value_in_ascending_order([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(l, key=lambda x: l.index(x), reverse=True)",
      -5.0234375
    ],
    [
      "return sorted(set(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return unique elements in a dict\n    >>> unique_dict({'a': 5, 'b': 3, 'c': 5, 'd': 2, 'e': 3, 'f': 3, 'g': 9, 'h': 0, 'i': 123})\n    {0: 5, 2: 3, 3: 5, 5: 9, 9: 123}\n    \"\"\"\n    return sorted(set(d.values()))",
      -6.0703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}