{
  "problem": {
    "task_id": "HumanEval/80",
    "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
    "entry_point": "is_happy",
    "docstring": "",
    "problem_id": 80
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if len(s) < 3:\n        return False\n    char_set = set()\n    for i in s:\n        if i in char_set:\n            return False\n        char_set.add(i)\n    return True\n\n\ndef test_is_happy():\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False",
      6.87109375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True\n\n\ndef is_happy_2(s):\n    \"\"\"\n    Given a string s, check if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True\n\n\ndef is_happy_3(s):\n    \"\"\"\n    Given a string s, check if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy_3(a) => False\n    is_happy_3(aa) => False\n    is_happy_3(abcd) => True\n    is_happy_3(aabb) => False\n    is_happy_3(adb) => True\n    is_happy_3(xyy) => False\n    \"\"\"\n    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True",
      5.23046875
    ],
    [
      "if len(s) < 3:\n        return False\n    s = s.lower()\n    s_hash = set()\n    for letter in s:\n        s_hash.add(letter)\n    return len(s_hash) == len(set(s_hash))",
      3.927734375
    ],
    [
      "if len(s) < 3:\n        return False\n    else:\n        return all(s[i] == s[i + 1] == s[i + 2] for i in range(0, len(s) - 2))\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      1.9052734375
    ],
    [
      "if len(s) < 3:\n        return False\n\n    if len(set(s)) < 3:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False",
      1.45703125
    ],
    [
      "if len(s) < 3:\n        return False\n\n    char_counts = {}\n    for i in range(len(s)):\n        if s[i] not in char_counts:\n            char_counts[s[i]] = 1\n        else:\n            char_counts[s[i]] += 1\n\n    for i in range(len(s)):\n        if char_counts[s[i]] == 1:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False",
      1.388671875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n    assert is_happy(\"eee\") == False\n    assert is_happy(\"eeee\") == True\n    assert is_happy(\"abcdabcd\") == True\n    assert is_happy(\"abcdabcdabcdabcdabcd\") == False\n    assert is_happy(\"abcdabcdabcdabcdabcdabcd\") == True\n    assert is_happy(\"abcdabcdabcdabcdabcdabcd\") == False\n    assert is_happy(\"abcdabcdabcdabcdabcdabcd\") == False",
      1.314453125
    ],
    [
      "if len(s) < 3:\n        return False\n\n    count = 0\n    for letter in s:\n        if letter == s[count] and count!= 0:\n            return False\n        count += 1\n\n    return True\n\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.0859375
    ],
    [
      "s_list = list(s)\n    count = 0\n    for i in s_list:\n        if (count == 0):\n            count += 1\n            if (s_list.count(i) == 1):\n                return False\n        else:\n            count = 0\n            if (s_list.count(i) == 1):\n                return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      1.0849609375
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    if s[0] == s[-1]:\n        return False\n    return is_happy(s[1:-1])\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      0.88330078125
    ],
    [
      "# Your code here\n    hash_table = {}\n\n    if len(s) < 3:\n        return False\n\n    for char in s:\n        if char in hash_table:\n            return False\n        hash_table[char] = 1\n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      0.8046875
    ],
    [
      "# Write your code here\n    if len(s) < 3 or len(set(s)) < 3:\n        return False\n    else:\n        for i in range(len(s) - 3):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      0.533203125
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 3] and s[i]!= s[i + 2] and s[i]!= s[i + 1]:\n            return False\n    return True",
      0.440673828125
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(set(s)):\n        return False\n    else:\n        return True\n\n\ndef is_happy_2(s):\n    \"\"\"\n    Given a string s, check if it is happy or not.\n    If the length of the string is less than 3,\n    then return False.\n    If the length of the string is greater than 3,\n    then return True.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    else:\n        return True\n\n\ndef is_happy_3(s):\n    \"\"\"\n    Given a string s, check if it is happy or not.\n    If the length of the string is less than 3,\n    then return False.\n    If the length of the string is greater than 3,\n    then return True.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))\n    print(is_happy('abc'))\n    print(is_happy('abcdabcd'))\n    print(is_happy('abcdabcdab'))\n    print(is_happy('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
      0.338134765625
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      0.2088623046875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 3]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False",
      0.1361083984375
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    return True\n\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == '__main__':\n    main()",
      -0.10430908203125
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False",
      -0.1531982421875
    ],
    [
      "if len(s) < 3:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"\n    return if s is happy or not\n    \"\"\"\n    if len(s) < 3:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy2(\"a\"))\n    print(is_happy2(\"aa\"))\n    print(is_happy2(\"abcd\"))\n    print(is_happy2(\"aabb\"))\n    print(is_happy2(\"adb\"))\n    print(is_happy2(\"xyy\"))",
      -0.2432861328125
    ],
    [
      "s = s.lower()\n    if len(s) < 3:\n        return False\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        else:\n            char_set.add(char)\n    return True\n\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.3740234375
    ],
    [
      "s_set = set()\n    for i in range(len(s)):\n        if s[i] not in s_set:\n            s_set.add(s[i])\n            if s[i + 3] == s[i + 2] and s[i + 2]!= s[i + 1]:\n                return False\n        else:\n            return False\n    return True",
      -0.429931640625
    ],
    [
      "if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i]!= s[i+1] and s[i]!= s[i+2]:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.487060546875
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True",
      -0.75
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] == s[i + 2] and s[i]!= s[i + 3]:\n            return False\n    return True",
      -0.76708984375
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.80419921875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.85595703125
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 3, 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\ndef main():\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.85693359375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n\n    s = s.lower()\n    for i in range(len(s)-3):\n        if s[i]!= s[i+3] or s[i+3]!= s[i+2] or s[i+2]!= s[i+1]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n    s_list = list(s)\n    for i in range(len(s) - 3):\n        if s_list[i] == s_list[i + 1] and s_list[i] == s_list[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n\n    if len(set(s)) == len(s):\n        return True\n\n    return False\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(set(s)) < 3:\n        return False\n    return True",
      -0.857421875
    ],
    [
      "if len(s) < 3:\n        return False\n\n    if len(set(s)) < 3:\n        return False\n\n    return True",
      -0.857421875
    ],
    [
      "length = len(s)\n    if length < 3:\n        return False\n    return set(s).issubset(set(s[i:i+3]))",
      -0.857421875
    ],
    [
      "if len(s) < 3:\n        return False\n\n    if len(set(s))!= len(s):\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -0.85791015625
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3 and set(s) == set(s[0:2] * 3):\n        return True\n    else:\n        return False\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -0.85791015625
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i + 3]!= s[i:i + 3] * 2:\n            return False\n    return True\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85791015625
    ],
    [
      "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n\n    return True\n\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "# Your code here\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    counter = 0\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            counter += 1\n    return counter == 1\n\n\nif __name__ == \"__main__\":\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n    assert is_happy('tacocat') == False\n    assert is_happy('tacocat') == True",
      -0.85791015625
    ],
    [
      "if len(s) < 3:\n        return False\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            count += 1\n    if count == 1:\n        return True\n    return False\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85791015625
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.8583984375
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False",
      -0.8583984375
    ],
    [
      "if len(s) < 3:\n        return False\n    else:\n        s = s.lower()\n        if len(set(s)) == len(s):\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.8583984375
    ],
    [
      "# Your code here\n    if len(s) < 3:\n        return False\n    if len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -0.8583984375
    ],
    [
      "count = 0\n    if len(s) >= 3 and len(set(s)) == len(s):\n        return True\n    else:\n        return False",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i + 3] == s[i + 3:i + 4]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n\n    return True",
      -0.8583984375
    ],
    [
      "if len(s) >= 3 and len(set(s)) == 1:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i]!= s[i + 1] or s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy(\"zzz\"))",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i + 3]!= s[i:i + 3][::-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    else:\n        return True\n\n\ndef test_is_happy():\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n\n\ntest_is_happy()",
      -0.8583984375
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n\n    for i in range(len(s)-3):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            return False\n\n    return True",
      -0.86083984375
    ],
    [
      "if len(s) < 3 or len(s) > 20:\n        return False\n    count = 0\n    for i in s:\n        if i == i[0] or i == i[-1]:\n            count += 1\n    if count == 0:\n        return True\n    return False",
      -0.86083984375
    ],
    [
      "s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        if count == 3:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -1.244140625
    ],
    [
      "s_len = len(s)\n    if s_len < 3:\n        return False\n    for i in range(s_len-3):\n        if s[i]!= s[i+1] and s[i]!= s[i+2] and s[i]!= s[i+3]:\n            return False\n    return True\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -1.4326171875
    ],
    [
      "if len(s) < 3:\n        return False\n    char_counts = {}\n    for char in s:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n    for key in char_counts:\n        if char_counts[key]!= 1:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -1.552734375
    ],
    [
      "if len(s) < 3:\n        return False\n\n    s = s.lower()\n    counter = 0\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            counter += 1\n\n    return counter == 1\n\n\nif __name__ == \"__main__\":\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False",
      -1.5576171875
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2] and s[i]!= s[i + 3]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -1.806640625
    ],
    [
      "# Your code here\n    if len(s) < 3 or not all(c == s[0] for c in s):\n        return False\n    return all(s[i:i+3] == s[i+1:i+3] for i in range(len(s)-2))\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -1.828125
    ],
    [
      "if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return True\n    else:\n        return all(s[i] == s[i+1] and s[i+2] == s[i+3] for i in range(len(s)-1))\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -2.013671875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(0, len(s)-3):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy2(a) => False\n    is_happy2(aa) => False\n    is_happy2(abcd) => True\n    is_happy2(aabb) => False\n    is_happy2(adb) => True\n    is_happy2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-3):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy2(\"a\"))\n    print(is_happy2(\"aa\"))\n    print(is_happy2(\"abcd\"))\n    print(is_happy2(\"aabb\"))\n    print(is_happy2(\"adb\"))\n    print(is_happy2(\"xyy\"))",
      -2.12109375
    ],
    [
      "# Your code here\n    if len(s) < 3 or len(set(s)) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -2.125
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -2.201171875
    ],
    [
      "if len(s) < 3:\n        return False\n    chars = list(s)\n    for i in range(len(chars) - 3):\n        if chars[i]!= chars[i + 1] and chars[i]!= chars[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"Given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    chars = list(s)\n    for i in range(len(chars) - 3):\n        if chars[i]!= chars[i + 1] and chars[i]!= chars[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_3(s):\n    \"\"\"Given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_3(a) => False\n    is_happy_3(aa) => False\n    is_happy_3(abcd) => True\n    is_happy_3(aabb) => False\n    is_happy_3(adb) => True\n    is_happy_3(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    chars = list(s)\n    for i in range(len(chars) - 3):\n        if chars[i]!= chars[i + 1] and chars[i]!= chars[i + 2",
      -2.234375
    ],
    [
      "# Your code here\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n    assert is_happy(\"zzz\") == False\n    assert is_happy(\"ab\") == False\n    assert is_happy(\"\") == True\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.36328125
    ],
    [
      "if len(s) < 3:\n        return False\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -2.427734375
    ],
    [
      "if len(s) < 3:\n        return False\n\n    s_set = set()\n    for letter in s:\n        if letter in s_set:\n            return False\n        else:\n            s_set.add(letter)\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy2(a) => False\n    is_happy2(aa) => False\n    is_happy2(abcd) => True\n    is_happy2(aabb) => False\n    is_happy2(adb) => True\n    is_happy2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    s_set = set()\n    for letter in s:\n        if letter in s_set:\n            return False\n        else:\n            s_set.add(letter)\n            if len(s_set) == 3:\n                return True\n    return False\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy2('a'))\nprint(is_happy2('aa'))\nprint(is_happy2('abcd'))\nprint(is_happy2('aabb'))\nprint(is_happy2('adb'))\nprint(is_happy2('xyy'))",
      -2.44921875
    ],
    [
      "if len(s) < 3 or len(s) > 20:\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -2.47265625
    ],
    [
      "s = list(s)\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -2.51171875
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\ndef main():\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))\n\n\nif __name__ == '__main__':\n    main()",
      -2.74609375
    ],
    [
      "if len(s) < 3:\n        return False\n    else:\n        return len(set(s)) == len(s) - 2\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -2.796875
    ],
    [
      "if len(s) < 3:\n        return False\n    if s == s[::-1]:\n        return True\n    return False\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -2.826171875
    ],
    [
      "if len(s) >= 3 and all(c in s for c in s):\n        return True\n    else:\n        return False\n\n\ndef is_happy2(s):\n    \"\"\"The is_happy function takes a string as input and checks if it is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy2(a) => False\n    is_happy2(aa) => False\n    is_happy2(abcd) => True\n    is_happy2(aabb) => False\n    is_happy2(adb) => True\n    is_happy2(xyy) => False\n    \"\"\"\n    if len(s) >= 3 and all(c in s for c in s):\n        return True\n    else:\n        return False",
      -2.826171875
    ],
    [
      "if len(s) < 3:\n        return False\n    return len(set(s)) == len(s)\n\n\ndef is_happy2(s):\n    \"\"\"The same as is_happy but with the different logic.\n    For example:\n    is_happy2('a') => False\n    is_happy2('aa') => False\n    is_happy2('abcd') => True\n    is_happy2('aabb') => False\n    is_happy2('adb') => True\n    is_happy2('xyy') => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    return len(set(s)) == len(s)",
      -2.845703125
    ],
    [
      "if len(s) < 3 or len(s) == 1:\n        return False\n    s_set = set(s)\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 3]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    if len(s) < 3:\n        return False\n    s_set = set(s)\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 3]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy_2(\"a\"))\n    print(is_happy_2(\"aa\"))\n    print(is_happy_2(\"abcd\"))\n    print(is_happy_2(\"aabb\"))\n    print(is_happy_2(\"adb\"))\n    print(is_happy_2(\"xyy\"))",
      -2.87890625
    ],
    [
      "if len(s) >= 3 and len(set(list(s))) == len(s):\n        return True\n    else:\n        return False\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -2.91015625
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -2.943359375
    ],
    [
      "if len(s) < 3:\n        return False\n    s = s.lower()\n    count = 0\n    for i in s:\n        if s[count]!= i:\n            count += 1\n        else:\n            count = 0\n    return count == 0\n\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.380859375
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n\n    if s[0]!= s[1] or s[0]!= s[2]:\n        return False\n\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -3.41015625
    ],
    [
      "s_length = len(s)\n    if s_length < 3:\n        return False\n    if s_length % 3!= 0:\n        return False\n    for i in range(0, s_length, 3):\n        s_char = s[i:i + 3]\n        s_char_set = set(s_char)\n        if len(s_char_set)!= 1:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -3.544921875
    ],
    [
      "if len(s) < 3 or len(s) > 26:\n        return False\n    s_set = set()\n    for c in s:\n        if c in s_set:\n            return False\n        s_set.add(c)\n    return True",
      -3.6796875
    ],
    [
      "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2] and s[i]!= s[i + 3]:\n            return False\n\n    return True\n\n\ndef main():\n    s = 'a'\n    print(is_happy(s))\n\n    s = 'abcd'\n    print(is_happy(s))\n\n    s = 'aabb'\n    print(is_happy(s))\n\n    s = 'adb'\n    print(is_happy(s))\n\n    s = 'xyy'\n    print(is_happy(s))\n\n\nif __name__ == '__main__':\n    main()",
      -3.681640625
    ],
    [
      "# Your code here\n    if len(s) < 3:\n        return False\n    else:\n        s = list(s)\n        # check for consecutive letters\n        for i in range(len(s) - 3):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -3.708984375
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(set(s)) < 3:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -3.8203125
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n\n    for i in range(0, len(s) - 3):\n        for j in range(0, 3):\n            if s[i + j]!= s[i + j + 1]:\n                return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -4.19921875
    ],
    [
      "s = s.lower()\n    if len(s) < 3 or len(s) > 26:\n        return False\n    else:\n        s = list(s)\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n                return False\n        return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -4.48828125
    ],
    [
      "if len(s) < 3 or len(s) == 0:\n        return False\n\n    s = s.lower()\n    s = s.replace(' ', '')\n\n    if len(s) == 1:\n        return True\n\n    # Iterate over every letter of s\n    for i in range(len(s) - 2):\n        # Check if the current letter is the same as previous letter\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            continue\n\n        # Check if the current letter is different\n        else:\n            return False\n\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -4.91015625
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n\n    return all(s[i] == s[i + 1] == s[i + 2] for i in range(len(s) - 2))\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -5.01171875
    ],
    [
      "if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    for i in range(len(s)):\n        if s[i]!= s[i - 1] and s[i]!= s[i + 1] and s[i]!= s[i - 2] and s[i]!= s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_happy(s))",
      -5.76171875
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s == 'happy'\n\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            continue\n        else:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -5.8125
    ],
    [
      "if len(s) < 3 or len(set(s)) < 3:\n        return False\n\n    # O(n^2) time | O(1) space\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            continue\n        else:\n            return False\n    return True\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
      -6.05078125
    ],
    [
      "if len(s) < 3:\n        return False\n\n    unique_chars = set()\n    for i in range(len(s) - 2):\n        char_1 = s[i]\n        char_2 = s[i + 1]\n        char_3 = s[i + 2]\n        unique_chars.add(char_1 + char_2 + char_3)\n\n    return len(unique_chars) == 1\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -6.1171875
    ],
    [
      "count = 0\n    for i in s:\n        if i == i[0] and i == i[-1]:\n            count += 1\n        if count >= 3:\n            return False\n    return True\n\n\ndef is_happy_recursive(s):\n    \"\"\"Recursive solution.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_recursive(a) => False\n    is_happy_recursive(aa) => False\n    is_happy_recursive(abcd) => True\n    is_happy_recursive(aabb) => False\n    is_happy_recursive(adb) => True\n    is_happy_recursive(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy_recursive(s[1:-1])\n    return is_happy_recursive(s[1:])\n\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    print(is_happy_recursive(\"a\"))\n    print(is_happy_recursive(\"aa\"))\n    print(is_happy_recursive(\"abcd\"))\n    print(is_happy_recursive(\"aabb\"))\n    print(is_happy_recursive(\"adb\"))\n    print(is_happy_recursive(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.58984375
    ],
    [
      "if len(s) < 3:\n        return False\n    if not s.isalnum():\n        return False\n    s_list = list(s)\n    for i in range(len(s_list) - 2):\n        if s_list[i]!= s_list[i + 1] and s_list[i]!= s_list[i + 2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"Solution for is_happy2.\n    :param s:\n    :return:\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if not s.isalnum():\n        return False\n    return len(set(s)) == len(s)\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy2(\"a\"))\n    print(is_happy2(\"aa\"))\n    print(is_happy2(\"abcd\"))\n    print(is_happy2(\"aabb\"))\n    print(is_happy2(\"adb\"))\n    print(is_happy2(\"xyy\"))\n    print(is_happy2(\"zzz\"))\n    print(is_happy2(\"zzzzzz\"))",
      -6.77734375
    ],
    [
      "if len(s) < 3 or len(s) > 20:\n        return False\n\n    letters = list(s)\n    count = 0\n    while len(letters) > 1:\n        if len(letters) % 3 == 0:\n            if len(letters) == 1:\n                return False\n            else:\n                letters = list(set(letters))\n        else:\n            letters = list(set(letters))\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -7.0078125
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(set(s))!= len(s):\n        return False\n    for i in range(0, len(s) - 3):\n        if s[i:i + 3]!= s[i:i + 3] + s[i + 3:]:\n            return False\n    return True\n\n\n# Testing\nassert is_happy('a') == False\nassert is_happy('aa') == False\nassert is_happy('abcd') == True\nassert is_happy('aabb') == False\nassert is_happy('adb') == True\nassert is_happy('xyy') == False",
      -7.04296875
    ],
    [
      "count = 0\n    for char in s:\n        if char!= char[0] and char!= char[-1] and char!= char[0] and char!= char[-1]:\n            count += 1\n    return count >= 3 and len(set(s)) == len(s)\n\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == '__main__':\n    main()",
      -7.28515625
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i]!= s[i + 3]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"\n    This function is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if s[0]!= s[-1]:\n        return False\n    for i in range(1, len(s) - 2):\n        if s[i]!= s[i - 1] and s[i]!= s[i + 1]:\n            return False\n    return True\n\n\ndef is_happy_3(s):\n    \"\"\"\n    This function is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_3(a) => False\n    is_happy_3(aa) => False\n    is_happy_3(abcd) => True\n    is_happy_3(aabb) => False\n    is_happy_3(adb) => True\n    is_happy_3(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(1, len(s) - 2):\n        if s[i]!= s[i - 1] and s[i]!= s[i + 1]:\n            return False\n    return True\n\n\ndef is_happy_4(s):\n    \"\"\"",
      -8.65625
    ],
    [
      "# Your code here\n    count = 0\n    for i in s:\n        if i == i[0] and i == i[-1] and i == i[0] + i[-1]:\n            count += 1\n        else:\n            count = 0\n    return count >= 3\n\n\ndef test_case_1():\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n\n\ndef test_case_2():\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == False\n    assert is_happy(\"aabb\") == True\n    assert is_happy(\"adb\") == False\n    assert is_happy(\"xyy\") == False\n\n\ndef test_case_3():\n    assert is_happy(\"aabb\") == True\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n\n\ndef test_case_4():\n    assert is_happy(\"abcd\") == False\n    assert is_happy(\"abcdab\") == True\n    assert is_happy(\"abcdabcd\") == True\n    assert is_happy(\"abcdabcdab\") == False\n    assert is_happy(\"abcdabcdabcdab\") == False\n\n\ndef test_case_5():\n    assert is_happy(\"abcdab\") == False\n    assert is_happy(\"abcdabcdab\") == False\n    assert is_happy(\"abcdabcdabcdab\") == False\n    assert is_happy(\"abcdabcdabcdab\") == True\n\n\ndef test_case_6():\n    assert is_happy(\"abcdabcdab\") == False\n    assert is_happy(\"abcdabcdabcdab\") == False\n    assert is",
      -9.796875
    ],
    [
      "length = len(s)\n    if length >= 3:\n        for i in range(length - 3):\n            if s[i:i + 3] == s[i:i + 3] * 2:\n                return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"Given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    length = len(s)\n    if length >= 3:\n        for i in range(length - 3):\n            if s[i:i + 3]!= s[i:i + 3] * 2:\n                return False\n    return True\n\n\ndef is_happy_3(s):\n    \"\"\"Given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_3(a) => False\n    is_happy_3(aa) => False\n    is_happy_3(abcd) => True\n    is_happy_3(aabb) => False\n    is_happy_3(adb) => True\n    is_happy_3(xyy) => False\n    \"\"\"\n    length = len(s)\n    if length >= 3:\n        for i in range(length - 3):\n            if s[i:i + 3]!= s[i:i + 3] * 2 and s[i:i + 3]!= s[i:i + 3] * 3:\n                return False\n    return True\n\n\ndef is_happy_",
      -10.3203125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}