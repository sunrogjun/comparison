{
  "problem": {
    "task_id": "HumanEval/103",
    "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
    "entry_point": "rounded_avg",
    "docstring": "",
    "problem_id": 103
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if n > m:\n        return -1\n    return str(bin(n)).replace('0b', '') + str(bin(m)).replace('0b', '')\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n\n\ndef rounded_avg(n, m):\n    \"\"\"\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return str(bin(n)).replace('0b', '') + str(bin(m)).replace('0b', '')\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      1.859375
    ],
    [
      "if n > m:\n        return -1\n    return '{0:b}'.format(round((n + m) / 2))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(13, 9) == \"0b0101\"",
      0.90185546875
    ],
    [
      "if n >= m:\n        return -1\n    return str(bin(n+m)).replace('0b', '')\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()",
      0.75390625
    ],
    [
      "if n > m:\n        return -1\n\n    return \"{0:b}\".format(n + (m - n) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      0.619140625
    ],
    [
      "if n > m:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n    return result / (n - 1)",
      0.2447509765625
    ],
    [
      "if n > m:\n        return -1\n    ans = (n + m) // 2\n    return str(ans)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      0.1595458984375
    ],
    [
      "if n > m:\n        return -1\n    return bin(round((n+m)/2))[2:]\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      0.08062744140625
    ],
    [
      "if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:].zfill(32)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -0.341064453125
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(n + (m - n) // 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -0.78076171875
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m)",
      -0.85595703125
    ],
    [
      "if n > m:\n        return -1\n    return bin(round(n + m)).replace(\"0b\", \"\")\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -0.85693359375
    ],
    [
      "if n > m:\n        return -1\n\n    res = n // m\n    bin_res = bin(res)\n    return bin_res[2:]\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_round_avg()",
      -0.85693359375
    ],
    [
      "# Your code here\n    if n > m:\n        return -1\n\n    avg = n + m\n    return str(round(avg / 2))\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))",
      -0.85693359375
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return '{:b}'.format((n + m) // 2)",
      -0.857421875
    ],
    [
      "avg = (n+m) // 2\n    if n >= m:\n        return -1\n    return str(bin(avg))[2:]",
      -0.857421875
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(int(round(n / m)))",
      -0.857421875
    ],
    [
      "return bin(n+m)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -0.85888671875
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -0.85888671875
    ],
    [
      "if n > m:\n        return -1\n\n    avg = 0\n    while n!= m:\n        avg += n % 2\n        n //= 2\n\n    avg = avg / 2\n    return f\"{avg:0>8b}\"\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 1) == \"0b1\"",
      -0.85888671875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n + m)).replace('0b', '')\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'",
      -0.85888671875
    ],
    [
      "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    return avg / n\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -0.85888671875
    ],
    [
      "if n >= m:\n        return -1\n    else:\n        return \"{0:b}\".format(n+m//2)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))",
      -0.85888671875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int(n + m / 2))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -0.86083984375
    ],
    [
      "if n > m:\n        return -1\n    return bin(int(round((n + m) / 2)))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -0.86083984375
    ],
    [
      "if n > m:\n        return -1\n    return bin(n).replace('0b', '') + bin(m).replace('0b', '')[:-1]",
      -0.92041015625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(round((n + m) / 2))\n\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n\nif __name__ == '__main__':\n    main()",
      -0.94384765625
    ],
    [
      "if n > m:\n        return -1\n    avg = n + m\n    return str(round(avg / 2))[::-1]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -1.1787109375
    ],
    [
      "if n > m:\n        return -1\n\n    # compute the average\n    avg = (n + m) // 2\n\n    # convert to binary\n    return f'{bin(avg)[2:]}'\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -1.3662109375
    ],
    [
      "if n > m:\n        return -1\n    binary_str = \"{:b}\".format(n)\n    return int(binary_str[::-1], 2)\n\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"",
      -1.3818359375
    ],
    [
      "if n > m:\n        return -1\n    return str(bin(n + m)).replace('0b', '')\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -1.5048828125
    ],
    [
      "if n < m:\n        return -1\n    else:\n        return str(bin(n)[2:])[2:].rjust(m, '0')",
      -1.552734375
    ],
    [
      "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return str(round(avg))[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -1.6357421875
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -1.64453125
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format((n+m)/2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -1.7138671875
    ],
    [
      "if n > m:\n        return -1\n\n    result = 0\n    for i in range(0, n):\n        result += int(bin(i)[2:])\n    return result / n\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -1.716796875
    ],
    [
      "if n > m:\n        return -1\n\n    return bin(round(n/m))[2:]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -2.05859375
    ],
    [
      "if n > m:\n        return -1\n    return f\"{int(bin(n)[2:]) + int(bin(m)[2:]):b}\"\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -2.0703125
    ],
    [
      "if n > m:\n        return -1\n\n    result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n\n    return result / n\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -2.228515625
    ],
    [
      "if n > m:\n        return -1\n\n    return str(bin(round(n/m))[2:])\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ntest_rounded_avg()",
      -2.25390625
    ],
    [
      "if n < m:\n        return -1\n    else:\n        return str(int(bin(n)[2:], 2))\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -2.310546875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n)).replace('0b', '').replace('b', '').zfill(8)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -2.431640625
    ],
    [
      "if n > m:\n        return -1\n    return bin(n + m)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -2.59765625
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(int(n/m))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -2.658203125
    ],
    [
      "if n > m:\n        return -1\n    return str(bin(n + m).count('1') + bin(n - m).count('1'))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -2.900390625
    ],
    [
      "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    avg = avg / (n + m)\n    return str(avg)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -2.916015625
    ],
    [
      "if n > m:\n        return -1\n\n    return \"{0:b}\".format(int(n/m))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -3.013671875
    ],
    [
      "if n > m:\n        return -1\n\n    return bin(n + m)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -3.0234375
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"",
      -3.048828125
    ],
    [
      "if n > m:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_m = bin(m)[2:]\n    return binary_n + binary_m[::-1]\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -3.3359375
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(int(n/m))[2:].zfill(m))\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -3.357421875
    ],
    [
      "if n > m:\n        return -1\n    return \"{:b}\".format(int(n / m))\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -3.42578125
    ],
    [
      "if n > m:\n        return -1\n    return f\"{round(n/m, 2)}\"\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -3.5625
    ],
    [
      "return f'{int(bin(n)[2:]) + int(bin(m)[2:]):0>8b}'\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(13, 21) == \"0b111011\"",
      -3.767578125
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(round(n/m))\n\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -3.76953125
    ],
    [
      "if n > m:\n        return -1\n    return f\"{round(n / (m - n)):0{8}b}\"\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -3.849609375
    ],
    [
      "if n > m:\n        return -1\n    return bin(n << (32-m))[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -3.853515625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(round(n / m)) + \"0b\" + str(n % m)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))",
      -3.955078125
    ],
    [
      "result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n    return result // 2\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -4.015625
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n/m, 2))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -4.03515625
    ],
    [
      "if n > m:\n        return -1\n    return bin(n).replace(\"0b\", \"\").rjust(m, \"0\")\n\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.0625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(n + (m - n) // 2)\n\n\n# Tests\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"",
      -4.1484375
    ],
    [
      "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return \"{0:b}\".format(avg)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -4.390625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int(n) + int(m) // 2)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -4.5
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format((n + m) / 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -4.6015625
    ],
    [
      "if n > m:\n        return -1\n    return str(bin(n + m)).replace(\"0b\", \"\")[:-1]\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -4.71875
    ],
    [
      "if n > m:\n        return -1\n    avg = round(n / (m + 1))\n    return str(bin(avg))[2:]\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -4.765625
    ],
    [
      "if n > m:\n        return -1\n    return f\"{bin(n).count('1')}0b{bin(m).count('1')}\"\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a positive integer: \"))\n    m = int(input(\"Enter a positive integer: \"))\n    print(rounded_avg(n, m))",
      -4.77734375
    ],
    [
      "if n > m:\n        return -1\n\n    return bin(n + m)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -4.82421875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n).replace('0b', '')) + str(bin(m).replace('0b', ''))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -4.90625
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n/m))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -5.33984375
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(int(n + m) / 2)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -5.59375
    ],
    [
      "if n >= m:\n        return -1\n\n    return format(int(n + (m - n) / 2), 'b').zfill(8)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -5.6171875
    ],
    [
      "if n > m:\n        return -1\n\n    avg = 0\n    for i in range(n, m+1):\n        avg += int(bin(i).replace('0b', ''), 2)\n    return str(avg)\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.75390625
    ],
    [
      "if n > m:\n        return -1\n    return str(bin(n).count('1') + bin(m).count('1'))[2:]\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -6.17578125
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m // 2)\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -6.3515625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n+m).count('1'))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -6.6171875
    ],
    [
      "if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    return str(bin(n + m - 1)[2:])\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -6.66015625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n + m - 1).replace('0b', ''))\n\n\ndef test_round():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_bin():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_str():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_round()\n    test_bin()\n    test_str()",
      -6.8125
    ],
    [
      "if n > m:\n        return -1\n    return format(round(n/m), 'b')\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -7.0390625
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(bin(n + m)).replace('0b', '')\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -7.43359375
    ],
    [
      "if n > m:\n        return -1\n    return \"{:b}\".format((n + m) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_rounded_avg_empty():\n    assert rounded_avg(0, 0) == \"0b0\"\n    assert rounded_avg(1, 0) == \"0b0\"\n    assert rounded_avg(0, 1) == \"0b0\"\n    assert rounded_avg(1, 1) == \"0b1\"\n    assert rounded_avg(1, 2) == \"0b1\"\n    assert rounded_avg(2, 2) == \"0b0\"\n    assert rounded_avg(3, 2) == \"0b1\"\n    assert rounded_avg(4, 2) == \"0b0\"\n    assert rounded_avg(5, 2) == \"0b0\"\n    assert rounded_avg(6, 2) == \"0b1\"\n    assert rounded_avg(7, 2) == \"0b0\"\n    assert rounded_avg(8, 2) == \"0b1\"\n\n\ndef test_rounded_avg_small():\n    assert rounded_avg(5, 0) == \"0b0\"\n    assert rounded_avg(5, 1) == \"0b0\"\n    assert rounded_avg(5, 2) == \"0b0\"\n    assert rounded_avg(5, 3) == \"0b0\"\n    assert rounded_avg(5, 4) == \"0b0\"\n    assert rounded_avg(5, 5) == \"0b0\"\n    assert rounded_avg(5, 6) == \"0b0\"\n    assert rounded_avg(5, 7) == \"0b1\"\n    assert rounded_avg(5, 8) == \"0b1\"\n\n\ndef test_rounded_avg_large():\n    assert rounded_avg(5, 10) == \"",
      -7.44921875
    ],
    [
      "if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg).replace(\"0b\", \"\")[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -7.484375
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(int(bin(n + m)[-2:], 2))\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -7.6640625
    ],
    [
      "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m+1):\n        avg += int(bin(i)[2:])\n    avg = round(avg/(n+m), 2)\n    return str(avg)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -7.84375
    ],
    [
      "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    return str(round(avg / n))\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -8.3828125
    ],
    [
      "if n > m:\n        return -1\n    return bin(n << 1 + m).replace('0b', '')\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == '-1'\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'\n\n\nif __name__ == '__main__':\n    test_rounded_avg()",
      -8.546875
    ],
    [
      "if n > m:\n        return -1\n    return str(bin(round(n, -m)))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'",
      -8.8203125
    ],
    [
      "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return str(int(avg))[2:]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -9.28125
    ],
    [
      "if n > m:\n        return -1\n\n    result = 0\n    for i in range(n, m + 1):\n        result = result + int(bin(i)[2:], 2)\n\n    result = result / 2\n\n    return str(result)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -9.6640625
    ],
    [
      "if n > m:\n        return -1\n\n    res = 0\n    for i in range(n, m + 1):\n        res += int(bin(i).replace('0b', ''), 2)\n\n    return str(res // (n + m))\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -10.7421875
    ],
    [
      "if n > m:\n        return -1\n    return bin(n + m)[-1]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -11.1328125
    ],
    [
      "return bin(round(n/m))[2:]\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(100, 200) == \"0b100010\"\n    assert rounded_avg(100, 200) == \"0b100011\"\n    assert rounded_avg(1000, 2000) == \"0b100100\"\n    assert rounded_avg(1000, 2000) == \"0b101101\"\n    assert rounded_avg(1000, 2000) == \"0b101011\"\n    assert rounded_avg(1000, 2000) == \"0b1001011\"\n    assert rounded_avg(1000, 2000) == \"0b10101101\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg",
      -11.71875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return f\"{round(n/m)}b{n % m}\"\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -11.7421875
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m // 2)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
      -11.75
    ],
    [
      "if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(n)\n    return str(round(float(n) / float(m), 2))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
      -12.0234375
    ],
    [
      "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n / m, 2))\n\n\ndef rounded_avg_v2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    return \"{0:b}\".format(n // m)\n\n\ndef test_cases():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == \"-1\"\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 7) == \"0b00\"\n    assert rounded_avg(7, 7) == \"0b00\"\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 5) == \"0b00\"\n    assert rounded_avg(7, 5) == \"0b00\"\n    assert rounded_avg(10, 20) == \"0b00\"\n    assert rounded_avg(20, 33) == \"0b00\"\n\n\nif __name__ == \"__main__\":\n    test_cases()",
      -12.25
    ],
    [
      "if n < m:\n        return round(n/m, 2)\n    else:\n        return -1\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
      -12.7421875
    ],
    [
      "if n > m:\n        return -1\n    else:\n        return str(round(n / m, 1)) + '0b' + str(n % m)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -12.9609375
    ],
    [
      "if n > m:\n        return -1\n\n    n = int(n)\n    m = int(m)\n\n    if n == m:\n        return \"0b1\"\n\n    # find the nearest integer to n and m\n    nearest_n = n\n    nearest_m = m\n    while nearest_n < nearest_m:\n        if n % nearest_n == 0:\n            nearest_n += 1\n        else:\n            nearest_m -= 1\n\n    # compute the average\n    return \"0b\" + str(round(nearest_n / nearest_m, 2))\n\n\n# Test cases\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
      -13.703125
    ],
    [
      "if n > m:\n        return -1\n    return bin(n + m).count('1') // 2\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()",
      -13.84375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}