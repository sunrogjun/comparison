{
  "problem": {
    "task_id": "HumanEval/70",
    "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "strange_sort_list",
    "docstring": "",
    "problem_id": 70
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0]]\n    else:\n        mid = len(lst) // 2\n        left = strange_sort_list(lst[:mid])\n        right = strange_sort_list(lst[mid:])\n        return left + right",
      4.57421875
    ],
    [
      "if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [lst[0]]\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid + 1:])",
      4.42578125
    ],
    [
      "if len(lst) < 2:\n        return lst\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    return [min_val, max_val]",
      4.16015625
    ],
    [
      "if lst == []:\n        return []\n    min_value = min(lst)\n    max_value = max(lst)\n    lst.sort()\n    result = []\n    for i in lst:\n        if i < min_value:\n            result.append(min_value)\n        elif i == max_value:\n            result.append(max_value)\n        else:\n            result.append(i)\n    return result",
      4.15625
    ],
    [
      "if len(lst) == 1:\n        return lst\n    min = lst[0]\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n    return [min, max] + lst[1:]",
      3.240234375
    ],
    [
      "min_val = min(lst)\n    max_val = max(lst)\n\n    for i in range(0, len(lst)):\n        if lst[i] < min_val:\n            lst[i], lst[min_val] = lst[min_val], lst[i]\n        elif lst[i] > max_val:\n            lst[i], lst[max_val] = lst[max_val], lst[i]\n\n    return lst",
      3.240234375
    ],
    [
      "if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    if lst[0] < lst[1]:\n        return [lst[0], lst[1]]\n    return [lst[1], lst[0]]",
      3.173828125
    ],
    [
      "if len(lst) == 0:\n        return []\n\n    if lst[0] < lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]",
      3.0390625
    ],
    [
      "if len(lst) < 2:\n        return lst\n    else:\n        mid = len(lst) // 2\n        return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid + 1:])",
      2.373046875
    ],
    [
      "if not lst:\n        return []\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    if max_value - min_value == 1:\n        return lst\n\n    result = []\n    while min_value < max_value:\n        mid_index = (min_value + max_value) // 2\n        result.append(min_value)\n        min_value = mid_index\n\n    result.append(max_value)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))",
      2.095703125
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n\n    return [min_val] + sorted(lst[1:], key=lambda x: x - min_val) + [max_val]",
      2.091796875
    ],
    [
      "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    first = lst[0]\n    last = lst[len(lst) - 1]\n\n    return [first, last]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      1.806640625
    ],
    [
      "min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    lst.append(max_val)\n    lst.append(min_val)\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      1.693359375
    ],
    [
      "lst.sort(reverse=True)\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      1.490234375
    ],
    [
      "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    return sorted([i for i in lst if i >= min_val and i <= max_val])",
      1.4873046875
    ],
    [
      "if len(lst) <= 1:\n        return lst\n    else:\n        min_val = lst[0]\n        max_val = lst[0]\n        for num in lst[1:]:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return [min_val, max_val]",
      1.44140625
    ],
    [
      "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n    return [min_val, max_val]",
      1.1884765625
    ],
    [
      "if lst == []:\n        return []\n\n    # Base Case: List is empty.\n    if len(lst) <= 1:\n        return lst\n\n    # Find the minimum number.\n    min_num = min(lst)\n\n    # Find the maximum number.\n    max_num = max(lst)\n\n    # Make a list of the range of numbers.\n    range_lst = [max_num]\n    for num in lst:\n        if num < min_num:\n            range_lst.append(min_num)\n        else:\n            range_lst.append(num)\n\n    # Sort the range.\n    return strange_sort_list(range_lst)\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.01171875
    ],
    [
      "if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    if lst[0] < lst[1]:\n        return [lst[0], lst[1]]\n    if lst[0] > lst[1]:\n        return [lst[1], lst[0]]\n    return [lst[0], lst[1], lst[2]]",
      0.93212890625
    ],
    [
      "if len(lst) <= 1:\n        return lst\n\n    lst.sort()\n    return lst",
      0.79443359375
    ],
    [
      "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    if lst[0] < lst[1]:\n        return strange_sort_list(lst[1:])\n    else:\n        return strange_sort_list(lst[:-1])\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      0.677734375
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n\n    return sorted(left + [lst[0]] + right)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      0.365234375
    ],
    [
      "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0]]\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + strange_sort_list(lst[mid:])",
      0.27880859375
    ],
    [
      "if not lst:\n        return []\n\n    lst.sort()\n    return lst",
      0.13916015625
    ],
    [
      "lst.sort()\n    return lst\n\n\ndef test_function(test_case):\n    lst = test_case[0]\n    solution = test_case[1]\n    output = strange_sort_list(lst)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [1, 2, 3, 4]\nsolution_0 = [1, 4, 2, 3]\ntest_case_1 = [5, 5, 5, 5]\nsolution_1 = [5, 5, 5, 5]\ntest_case_2 = []\nsolution_2 = []\ntest_function([test_case_0, solution_0, test_case_1, solution_1, test_case_2, solution_2])",
      0.0189666748046875
    ],
    [
      "if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst = [i for i in lst if i >= min_val and i <= max_val]\n        return strange_sort_list(lst) + [min_val] + strange_sort_list(lst[1:])",
      0.01070404052734375
    ],
    [
      "if lst == []:\n        return []\n    else:\n        if lst[0] == lst[1]:\n            return lst\n        else:\n            mid = lst[0] + lst[1] // 2\n            return [lst[0], mid, lst[1]]\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.05914306640625
    ],
    [
      "if lst == []:\n        return []\n\n    lst.sort()\n    start = lst[0]\n    end = lst[-1]\n    for i in range(1, len(lst)):\n        if lst[i] < start:\n            start = lst[i]\n        elif lst[i] > end:\n            end = lst[i]\n\n    return [start, end]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -0.33642578125
    ],
    [
      "min_val = min(lst)\n    max_val = max(lst)\n    lst = [x for x in lst if x <= max_val]\n    lst = [x for x in lst if x >= min_val]\n    return lst",
      -0.430419921875
    ],
    [
      "if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif lst[0] < lst[1]:\n        return [lst[0]] + strange_sort_list(lst[1:])\n    else:\n        return [lst[1]] + strange_sort_list(lst[0:-1])\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -0.431640625
    ],
    [
      "lst.sort(key=lambda x: (x - 1) % len(lst))\n    return lst",
      -0.461669921875
    ],
    [
      "min_num = min(lst)\n    max_num = max(lst)\n    lst.remove(min_num)\n    lst.remove(max_num)\n    lst.append(min_num)\n    lst.append(max_num)\n    lst.sort()\n    return lst\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -0.8369140625
    ],
    [
      "if len(lst) == 0:\n        return []\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    return [min_val] + sorted(lst) + [max_val]",
      -0.85693359375
    ],
    [
      "if not lst:\n        return lst\n\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == lst[i - 1]:\n            lst[i] = lst[i - 1]\n            lst.pop(i - 1)\n    return lst\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))",
      -0.85791015625
    ],
    [
      "lst.sort()\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == '__main__':\n    test_strange_sort_list()",
      -0.8583984375
    ],
    [
      "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return left + right\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "if not lst:\n        return []\n    if len(lst) < 2:\n        return lst\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid+1:])",
      -0.8583984375
    ],
    [
      "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n    min_index = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n        if lst[i] > max_val:\n            max_val = lst[i]\n            max_index = i\n\n    return [min_val] + strange_sort_list(lst[min_index+1:max_index])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -0.86279296875
    ],
    [
      "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] > lst[-1]:\n        return strange_sort_list(lst[1:-1])\n    else:\n        return strange_sort_list(lst[1:]) + strange_sort_list(lst[0:-1])",
      -1.052734375
    ],
    [
      "if not lst:\n        return []\n\n    min_idx = 0\n    max_idx = len(lst) - 1\n    while min_idx <= max_idx:\n        if lst[min_idx] < lst[max_idx]:\n            lst[min_idx], lst[max_idx] = lst[max_idx], lst[min_idx]\n        min_idx += 1\n        max_idx -= 1\n\n    return lst\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()",
      -1.0771484375
    ],
    [
      "if lst == []:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] > lst[1]:\n        return [lst[0]] + strange_sort_list(lst[1:])\n\n    return lst + strange_sort_list(lst[1:])",
      -1.0908203125
    ],
    [
      "if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return [min(left), max(right)]",
      -1.1103515625
    ],
    [
      "min_val = lst[0]\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return [min_val, max_val]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([-5, -3, -2, -1]) == [-1, -2, -3, -5]",
      -1.375
    ],
    [
      "if len(lst) <= 1:\n        return lst\n    if lst[0] > lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]\n\n\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([1, 2, 3, 4]))",
      -1.421875
    ],
    [
      "if len(lst) == 0:\n        return []\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    return [min_val, max_val]\n\n\ndef main():\n    lst = [1, 2, 3, 4]\n    print(strange_sort_list(lst))\n\n\nif __name__ == '__main__':\n    main()",
      -1.4384765625
    ],
    [
      "if not lst:\n        return lst\n    lst = sorted(lst)\n    return lst[::-1]",
      -1.443359375
    ],
    [
      "if lst == []:\n        return lst\n    if len(lst) == 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    sorted_lst = []\n    for num in lst:\n        if num < min_val:\n            sorted_lst.append(min_val)\n        elif num > max_val:\n            sorted_lst.append(max_val)\n        else:\n            sorted_lst.append(num)\n    return sorted_lst\n\n\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\nprint(strange_sort_list([1, 2, 3, 4]))",
      -1.5556640625
    ],
    [
      "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        elif lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val, max_val] + lst[1:]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -1.5751953125
    ],
    [
      "if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst\n        else:\n            return [lst[0]] + strange_sort_list(lst[1:])\n    elif len(lst) == 3:\n        if lst[0] < lst[1] < lst[2]:\n            return lst\n        elif lst[0] < lst[2]:\n            return [lst[0]] + strange_sort_list(lst[1:])\n        else:\n            return [lst[2]] + strange_sort_list(lst[3:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -1.5859375
    ],
    [
      "if not lst:\n        return []\n    min_val = lst[0]\n    max_val = lst[0]\n    for item in lst[1:]:\n        if item < min_val:\n            min_val = item\n        elif item > max_val:\n            max_val = item\n    return [min_val] + [item for item in lst[1:] if item!= max_val] + [max_val]",
      -2.037109375
    ],
    [
      "min_value = min(lst)\n    max_value = max(lst)\n\n    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            if lst[i] > max_value:\n                max_value = lst[i]\n            elif lst[i] < min_value:\n                min_value = lst[i]\n        return [min_value, max_value]\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -2.123046875
    ],
    [
      "min_val = min(lst)\n    max_val = max(lst)\n\n    if min_val < max_val:\n        mid_idx = (min_val + max_val) // 2\n\n        strange_sort_list(lst[:mid_idx])\n        strange_sort_list(lst[mid_idx:])\n\n        strange_sort_list(lst[:])\n\n        return lst\n    else:\n        return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == \"__main__\":\n    test_strange_sort_list()",
      -2.162109375
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    minimum = min(lst)\n    maximum = max(lst)\n    sorted_list = []\n    for i in lst:\n        if i < minimum:\n            sorted_list.append(minimum)\n            minimum = i\n        elif i > maximum:\n            sorted_list.append(maximum)\n            maximum = i\n        else:\n            sorted_list.append(i)\n\n    return sorted_list + [minimum, maximum]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -2.36328125
    ],
    [
      "if len(lst) == 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val < 3:\n        return lst\n    min_val_index = lst.index(min_val)\n    max_val_index = lst.index(max_val)\n    return strange_sort_list(lst[min_val_index + 1: max_val_index]) + [min_val] + strange_sort_list(lst[0: max_val_index - min_val_index])\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()",
      -2.431640625
    ],
    [
      "if len(lst) == 0:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    first_min = lst[0]\n    second_max = lst[0]\n\n    for item in lst[1:]:\n        if item < first_min:\n            first_min = item\n        elif item > second_max:\n            second_max = item\n\n    return [first_min] + strange_sort_list(lst[1:]) + [second_max]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -2.4765625
    ],
    [
      "if not lst:\n        return []\n\n    minimum = lst[0]\n    maximum = lst[-1]\n    for i in range(len(lst) - 1):\n        if lst[i] < minimum:\n            minimum = lst[i]\n        if lst[i] > maximum:\n            maximum = lst[i]\n\n    return [minimum] + sorted(lst[1:-1], reverse=True)\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -2.55859375
    ],
    [
      "if lst is None or len(lst) == 0:\n        return lst\n\n    # the first number\n    min_num = lst[0]\n    min_index = 0\n\n    # the last number\n    max_num = lst[-1]\n    max_index = len(lst) - 1\n\n    # iterate over the remaining numbers\n    for index in range(1, len(lst)):\n        if lst[index] < min_num:\n            min_num = lst[index]\n            min_index = index\n        if lst[index] > max_num:\n            max_num = lst[index]\n            max_index = index\n\n    # put the remaining numbers into a list\n    sorted_list = [lst[min_index], lst[max_index]]\n    return sorted_list",
      -2.7265625
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    lst_len = len(lst)\n    if lst_len == 1:\n        return lst\n\n    lst_min = lst[0]\n    lst_max = lst[lst_len - 1]\n\n    for i in range(1, lst_len - 1):\n        if lst[i] < lst_min:\n            lst_min = lst[i]\n        elif lst[i] > lst_max:\n            lst_max = lst[i]\n\n    lst_min = lst_min + 1\n    lst_max = lst_max - 1\n\n    lst_min_index = lst.index(lst_min)\n    lst_max_index = lst.index(lst_max)\n\n    lst[lst_min_index], lst[lst_max_index] = lst[lst_max_index], lst[lst_min_index]\n\n    return strange_sort_list(lst)\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()",
      -3.32421875
    ],
    [
      "if len(lst) <= 1:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val] + lst[1:-1] + [max_val]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -3.326171875
    ],
    [
      "if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return [lst[0], lst[1]]\n    elif len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    else:\n        return [lst[0], lst[1], lst[2]] + strange_sort_list(lst[3:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -3.404296875
    ],
    [
      "if len(lst) < 2:\n        return lst\n    lst.sort()\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return left + right\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -3.521484375
    ],
    [
      "if lst == []:\n        return []\n\n    n = len(lst)\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(n-1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val] + [i+1 for i in range(n-1, -1, -1)] + [max_val]",
      -3.650390625
    ],
    [
      "if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst) // 2\n        return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid+1:])",
      -3.8125
    ],
    [
      "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    return [i for i in lst if i <= min_val and i >= max_val] + [max_val] + [min_val]\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1, 2, 3]))\n\n\nif __name__ == '__main__':\n    main()",
      -3.826171875
    ],
    [
      "if len(lst) == 0:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    min_index = lst.index(min_val)\n    max_index = lst.index(max_val)\n    if max_index == min_index:\n        return lst\n    return lst[min_index + 1: max_index]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -3.875
    ],
    [
      "if len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        mid_val = (min_val + max_val) // 2\n        return strange_sort_list(lst[0:mid_val]) + \\\n               strange_sort_list(lst[mid_val:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -3.939453125
    ],
    [
      "if lst == []:\n        return []\n    lst.sort()\n    result = []\n    i = 0\n    j = len(lst) - 1\n    while i < len(lst) - 1:\n        if lst[i] < lst[j]:\n            result.append(lst[i])\n            i += 1\n        else:\n            result.append(lst[j])\n            j -= 1\n    return result + lst[i:]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -3.96484375
    ],
    [
      "if not lst:\n        return lst\n    lst.sort()\n    min_val = lst[0]\n    max_val = lst[-1]\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return [min_val, max_val]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.21484375
    ],
    [
      "if lst == []:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val, max_val]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -4.265625
    ],
    [
      "if len(lst) < 2:\n        return lst\n    else:\n        middle = len(lst) // 2\n        left = strange_sort_list(lst[:middle])\n        right = strange_sort_list(lst[middle:])\n        return left + right\n\n\nprint(strange_sort_list([5, 5, 5, 5]))",
      -4.4140625
    ],
    [
      "if len(lst) == 1:\n        return lst\n    else:\n        min = lst[0]\n        max = lst[-1]\n        for num in lst[1:-1]:\n            if num < min:\n                min = num\n            elif num > max:\n                max = num\n        return [min, max]\n\n\nif __name__ == '__main__':\n    lst = [5, 5, 5, 5]\n    print(strange_sort_list(lst))",
      -4.67578125
    ],
    [
      "if not lst:\n        return []\n\n    lst.append(lst[-1])\n    lst.append(lst[-2])\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n\n    lst = [min_val] + lst + [max_val]\n    return lst",
      -5.6875
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    start = lst[0]\n    end = lst[-1]\n\n    if start < end:\n        mid = (start + end) // 2\n        strange_sort_list(lst[:mid])\n        strange_sort_list(lst[mid:])\n        return strange_sort_list(lst)\n\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -5.76953125
    ],
    [
      "if not lst:\n        return []\n    min_value = lst[0]\n    max_value = lst[-1]\n    min_index = 0\n    max_index = len(lst) - 1\n    while min_index < max_index:\n        if lst[min_index] > max_value:\n            lst[max_index], lst[min_index] = lst[min_index], lst[max_index]\n            max_index -= 1\n        elif lst[min_index] < min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n    return lst",
      -6.25
    ],
    [
      "min = lst[0]\n    max = lst[0]\n    for i in lst[1:]:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n    return [min, max]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -6.3828125
    ],
    [
      "if len(lst) <= 1:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for i in lst:\n        if i < min_val:\n            min_val = i\n        if i > max_val:\n            max_val = i\n\n    return [min_val] + strange_sort_list(lst[1:]) + [max_val]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -6.55078125
    ],
    [
      "if not lst:\n        return []\n    if lst[0] < lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 4, 2, 3, 5]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 4, 2, 3, 5, 6, 7, 8, 9]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 2, 3, 5, 6, 7, 8, 9, 10]",
      -9.6875
    ],
    [
      "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst.sort()\n    min_value = lst[0]\n    max_value = lst[0]\n    for value in lst[1:]:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return [min_value, max_value]\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -9.8125
    ],
    [
      "# Base case: list is empty\n    if len(lst) == 0:\n        return []\n\n    # Base case: list contains only one element\n    if len(lst) == 1:\n        return [lst[0]]\n\n    # Base case: list contains only two elements\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    # Base case: list contains two elements\n    if lst[0] > lst[1]:\n        return [lst[0], lst[1]]\n\n    # Base case: list contains three elements\n    if lst[0] < lst[1] and lst[1] < lst[2]:\n        return [lst[0], lst[1], lst[2]]\n\n    # Base case: list contains four elements\n    if lst[0] < lst[1] < lst[2] and lst[2] < lst[3]:\n        return [lst[0], lst[1], lst[2], lst[3]]\n\n    # Base case: list contains five elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n\n    # Base case: list contains six elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n\n    # Base case: list contains seven elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n\n    # Base case: list contains nine elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n        return [lst[0], lst[1], lst",
      -10.7265625
    ],
    [
      "if len(lst) < 2:\n        return lst\n\n    min_value = lst[0]\n    max_value = lst[0]\n\n    for i in lst:\n        if i < min_value:\n            min_value = i\n        elif i > max_value:\n            max_value = i\n\n    min_index = lst.index(min_value)\n    max_index = lst.index(max_value)\n\n    return strange_sort_list(lst[min_index+1:max_index]) + lst[0:min_index] + strange_sort_list(lst[max_index+1:])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -11.109375
    ],
    [
      "if not lst:\n        return []\n\n    # find the minimum value\n    min_value = lst[0]\n    for i in lst:\n        if i < min_value:\n            min_value = i\n\n    # find the maximum value\n    max_value = lst[-1]\n    for i in lst:\n        if i > max_value:\n            max_value = i\n\n    # swap the minimum and maximum values\n    i = 0\n    j = len(lst) - 1\n    while i < len(lst) - 1 and lst[i] <= lst[i+1]:\n        lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n        j -= 1\n\n    # add the minimum value to the list\n    lst[i], lst[0] = lst[0], lst[i]\n\n    return lst\n\n\nif __name__ == '__main__':\n    import unittest\n\n    class TestStrangeSortList(unittest.TestCase):\n\n        def test_strange_sort_list(self):\n            self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n            self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n            self.assertEqual(strange_sort_list([]), [])\n\n    unittest.main()",
      -11.6796875
    ],
    [
      "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return [lst[0], lst[1]]\n        return [lst[1], lst[0]]\n    min_value = min(lst)\n    max_value = max(lst)\n    mid = (min_value + max_value) // 2\n    left_strange = strange_sort_list(lst[:mid])\n    right_strange = strange_sort_list(lst[mid:])\n    return strange_merge_two_lists(left_strange, right_strange)\n\n\ndef strange_merge_two_lists(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result",
      -12.0078125
    ],
    [
      "if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [lst[0]]\n    min_val = lst[0]\n    max_val = lst[0]\n    for num in lst[1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return [min_val] + strange_sort_list(lst[1:]) + [max_val]",
      -12.3046875
    ],
    [
      "if len(lst) == 1:\n        return lst\n\n    l = len(lst)\n    mid = l//2\n    mini = lst[0]\n    maxi = lst[mid]\n\n    for i in range(mid):\n        if lst[i] < mini:\n            mini = lst[i]\n\n    for i in range(mid, l):\n        if lst[i] > maxi:\n            maxi = lst[i]\n\n    lst[0], lst[mid] = maxi, mini\n\n    return strange_sort_list(lst)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -12.6484375
    ],
    [
      "if len(lst) <= 1:\n        return lst\n\n    i, j = 0, len(lst) - 1\n    min_val, max_val = lst[i], lst[j]\n    while i < j:\n        if lst[i] < min_val:\n            lst[i], lst[j] = lst[j], lst[i]\n            i += 1\n            j -= 1\n        elif lst[i] > max_val:\n            lst[i], lst[j] = lst[j], lst[i]\n            j -= 1\n        else:\n            i += 1\n\n    return lst\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -12.7421875
    ],
    [
      "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n\n    # Find the minimum value and the maximum value\n    min_val = lst[0]\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    # Sort the list in the right order\n    strange_sort_list_helper(lst, 0, len(lst) - 1)\n\n    # Re-sort the list in the left order\n    strange_sort_list_helper(lst, 0, len(lst) - 1)\n\n    # Merge sorted lists\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(lst) and j < len(lst):\n        if lst[i] < lst[j]:\n            result.append(lst[k])\n            i += 1\n        else:\n            result.append(lst[j])\n            j += 1\n        k += 1\n\n    if i < len(lst):\n        result += lst[i:]\n    if j < len(lst):\n        result += lst[j:]\n\n    return result\n\n\ndef strange_sort_list_helper(lst, start, end):\n    '''\n    Helper function to sort list in the right order.\n    '''\n    if start < end:\n        mid = (start + end) // 2\n        strange_sort_list_helper(lst, start, mid)\n        strange_sort_list_helper(lst, mid + 1, end)\n        strange_merge(lst, start, end, mid)\n\n\ndef strange_merge(lst, start, end, mid):\n    '''\n    Helper function to merge sorted lists.\n    '''\n    i = start\n    j = mid\n    k = start\n\n    # Copy the list elements from the left to the right\n    while i < end:\n        if lst[i] < lst[j]:\n            lst[k] = lst[",
      -13.34375
    ],
    [
      "if not lst:\n        return []\n    n = len(lst)\n    if n < 2:\n        return lst\n    min = lst[0]\n    max = lst[n-1]\n    i = 0\n    j = n-1\n    k = 0\n    while i < n-1:\n        if lst[i] < min:\n            lst[i], lst[k] = lst[k], lst[i]\n            k += 1\n            i += 1\n        elif lst[i] > max:\n            lst[i], lst[j] = lst[j], lst[i]\n            j -= 1\n        else:\n            i += 1\n    return lst",
      -13.453125
    ],
    [
      "if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n    min_idx = lst.index(min_val)\n    max_idx = lst.index(max_val)\n    lst = lst[min_idx + 1:max_idx]\n    return strange_sort_list(lst) + [max_val] + strange_sort_list(lst[1:])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -13.4765625
    ],
    [
      "if len(lst) == 1:\n        return lst\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    sorted_lst = []\n\n    for i in range(len(lst)):\n        if lst[i] <= min_value:\n            sorted_lst.append(min_value)\n            sorted_lst.append(lst[i])\n            min_value = lst[i]\n        elif lst[i] > max_value:\n            sorted_lst.append(max_value)\n            sorted_lst.append(lst[i])\n            max_value = lst[i]\n\n    return sorted_lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -13.5859375
    ],
    [
      "if lst == []:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + [x for x in lst if x < max_val]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
      -13.6328125
    ],
    [
      "if len(lst) == 0:\n        return lst\n\n    min_index = 0\n    max_index = len(lst) - 1\n    min_value = lst[min_index]\n    max_value = lst[max_index]\n\n    while min_index < max_index:\n        if lst[min_index] > min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n            max_index -= 1\n        elif lst[max_index] < min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[max_index]\n            max_index -= 1\n        else:\n            min_index += 1\n            max_index -= 1\n\n    return lst",
      -14.59375
    ],
    [
      "if lst == []:\n        return []\n\n    start_val = lst[0]\n    end_val = lst[len(lst) - 1]\n\n    start_index = 0\n    end_index = len(lst) - 1\n\n    while start_index < len(lst) and end_index >= start_index:\n\n        if lst[start_index] < lst[end_index]:\n            lst[start_index], lst[end_index] = lst[end_index], lst[start_index]\n            start_index += 1\n\n        elif lst[start_index] > lst[end_index]:\n            lst[start_index], lst[end_index] = lst[end_index], lst[start_index]\n            end_index -= 1\n\n        else:\n            start_index += 1\n\n    lst[start_index:end_index+1] = lst[start_index:end_index+1][::-1]\n\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -14.7109375
    ],
    [
      "min_val = min(lst)\n    max_val = max(lst)\n    sorted_lst = []\n    for i in lst:\n        if i < min_val:\n            sorted_lst.append(min_val)\n            min_val = i\n        elif i > max_val:\n            sorted_lst.append(max_val)\n            max_val = i\n        else:\n            sorted_lst.append(i)\n    return sorted_lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []",
      -14.734375
    ],
    [
      "if not lst:\n        return []\n    min_val = lst[0]\n    min_index = 0\n    max_val = lst[-1]\n    max_index = len(lst) - 1\n    while min_index <= max_index:\n        if lst[min_index] <= min_val:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n            max_index -= 1\n        else:\n            min_index += 1\n    return lst\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -15.0234375
    ],
    [
      "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        return lst\n    if lst[0] > lst[1]:\n        return [lst[0], lst[1]]\n    if lst[0] == lst[2]:\n        return [lst[0], lst[2]]\n    if lst[0] == lst[3]:\n        return [lst[0], lst[3]]\n    if lst[0] == lst[4]:\n        return [lst[0], lst[4]]\n    if lst[0] == lst[5]:\n        return [lst[0], lst[5]]\n    if lst[0] == lst[6]:\n        return [lst[0], lst[6]]\n    if lst[0] == lst[7]:\n        return [lst[0], lst[7]]\n    return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1]))\n    print(strange_sort_list([1, 2]))\n    print(strange_sort_list([1, 2, 3]))",
      -15.6015625
    ],
    [
      "if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] < lst[-1]:\n        return [lst[-1]] + strange_sort_list(lst[1:])\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == '__main__':\n    test_strange_sort_list()",
      -15.71875
    ],
    [
      "if lst == []:\n        return []\n    min_val = lst[0]\n    max_val = lst[-1]\n    strange_lst = []\n    for num in lst:\n        if num < min_val:\n            strange_lst.append(min_val)\n            min_val = num\n        elif num > max_val:\n            strange_lst.append(max_val)\n            max_val = num\n        else:\n            strange_lst.append(num)\n    strange_lst.extend(lst[1:])\n    return strange_lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3]) == [1, 2, 3]\n    assert strange_sort_list([4]) == [4]",
      -16.15625
    ],
    [
      "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n\n    if lst[0] < lst[1]:\n        return [lst[0]]\n\n    m = lst[0]\n    m_idx = 0\n    n = lst[1:]\n    n_idx = len(n) - 1\n\n    while m < n[m_idx]:\n        lst[m_idx], lst[n_idx] = lst[n_idx], lst[m_idx]\n        m_idx += 1\n        n_idx -= 1\n\n    lst[m_idx], lst[n_idx] = lst[n_idx], lst[m_idx]\n    return lst\n\n\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))",
      -17.609375
    ],
    [
      "if not lst:\n        return []\n\n    start = min(lst)\n    end = max(lst)\n\n    if start > end:\n        return lst\n\n    mid = (start + end) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n\n    return left + [start] + right\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == \"__main__\":\n    test_strange_sort_list()",
      -17.796875
    ],
    [
      "if lst is None:\n        return None\n\n    length = len(lst)\n    if length <= 1:\n        return lst\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    mid_point = (length // 2) - 1\n\n    sorted_lst = []\n    while mid_point >= 0:\n        if lst[mid_point] <= min_value:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n        elif lst[mid_point] > max_value:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n        else:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n\n    return sorted_lst + [min_value] + sorted_lst + [max_value]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
      -17.984375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}