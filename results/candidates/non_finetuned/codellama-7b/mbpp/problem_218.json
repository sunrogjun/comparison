{
  "problem": {
    "task_id": "MBPP/229",
    "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
    "test_list": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ],
    "challenge_test_list": [],
    "problem_id": 218
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Two-pointer approach.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    negative_index = 0\n    positive_index = len(arr) - 1\n\n    while negative_index < positive_index:\n        if arr[negative_index] >= 0:\n            arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n            positive_index -= 1\n        else:\n            negative_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, 4, -1, -2, -3, -4]) == [-4, -3, -2, -1, 1, 2, 3, 4]\n    assert rearrange_negative_positive([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2, -1, 1, 2, 3,\n                                                                                        4, 5, 6]\n    assert rearrange_negative_positive([-1, -2, -3, -4, 1, 2, 3, 4]) == [-4, -3, -2, -1, 1, 2, 3, 4]\n    assert rearrange_negative_positive([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6]) == [-6, -5, -4, -3, -2, -1, 1, 2, 3,\n                                                                                        4, 5, 6]",
    "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"\n    In-place\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(arr)\n    i = 0\n\n    while i < length:\n        if arr[i] < 0:\n            j = i - 1\n            while j >= 0 and arr[j] < 0:\n                j -= 1\n            arr[i], arr[j + 1] = arr[j + 1], arr[i]\n            i += 1\n        else:\n            i += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = array(\"i\", [1, 2, 3, 4, 5, -1, -2, -3, -4, -5])\n    print(*rearrange_array(arr))",
    "def rearrange(arr):\n    return sorted(arr, key=lambda x: x<0)\n\nif __name__ == \"__main__\":\n    a = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6]\n    print(a)\n    print(rearrange(a))",
    "def rearrange_negative_positive_elements(arr):\n    \"\"\"\n    >>> arr = [-1, -2, -3, -4, 1, 2, 3, 4, 5]\n    >>> rearrange_negative_positive_elements(arr)\n    [-1, -2, -3, -4, 5, 1, 2, 3, 4]\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> rearrange_negative_positive_elements(arr)\n    [5, 1, 2, 3, 4]\n    >>> arr = [5, 4, 3, 2, 1]\n    >>> rearrange_negative_positive_elements(arr)\n    [5, 4, 3, 2, 1]\n    >>> arr = []\n    >>> rearrange_negative_positive_elements(arr)\n    []\n    \"\"\"\n    # Runtime: O(n)\n    # Space: O(1)\n    # Time Limit Exceeded\n    # negative_elements = []\n    # positive_elements = []\n    # for element in arr:\n    #     if element < 0:\n    #         negative_elements.append(element)\n    #     else:\n    #         positive_elements.append(element)\n    # return negative_elements + positive_elements\n\n    # Runtime: O(n)\n    # Space: O(1)\n    # Sorting\n    # arr.sort()\n    # return arr\n\n    # Runtime: O(n)\n    # Space: O(1)\n    # Counting\n    # negative_elements = 0\n    # positive_elements = 0\n    # for element in arr:\n    #     if element < 0:\n    #         negative_elements += 1\n    #     else:\n    #         positive_elements += 1\n    # i, j = 0, negative_elements\n    # for element in arr:\n    #     if element < 0:\n    #         arr[i], arr[j] = arr[j], arr[i]\n    #         i += 1\n    #",
    "def rearrange(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negative_index = []\n    positive_index = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_index.append(i)\n        else:\n            positive_index.append(i)\n\n    for i in range(len(arr)):\n        if i in negative_index:\n            arr[i], arr[negative_index.pop()] = arr[negative_index.pop()], arr[i]\n        elif i in positive_index:\n            arr[i], arr[positive_index.pop()] = arr[positive_index.pop()], arr[i]\n\n    return arr\n\nif __name__ == \"__main__\":\n    arr = [-1,-2,3,4,5,6,7]\n    print(rearrange(arr))",
    "def rearrange_array(arr):\n    # O(n) time | O(1) space\n    pos_idx, neg_idx = 0, len(arr)-1\n    while pos_idx < neg_idx:\n        if arr[pos_idx] >= 0:\n            pos_idx += 1\n        elif arr[neg_idx] < 0:\n            neg_idx -= 1\n        else:\n            arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n            pos_idx += 1\n            neg_idx -= 1\n\n    return arr",
    "def rearrange_array(arr):\n    negative_arr = [i for i in arr if i < 0]\n    positive_arr = [i for i in arr if i > 0]\n\n    negative_arr.extend(positive_arr)\n\n    return negative_arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, -3, -4, 5]))",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    This solution works in O(n) time and O(1) space.\n    It uses the fact that positive numbers are smaller than negative numbers in Python.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    pos, neg = [], []\n\n    for number in arr:\n        (pos if number > 0 else neg).append(number)\n\n    return neg + pos\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -1, -2, 5, 6, -6, -5, 3, 4]) == [-1, -2, -6, -5, 1, 2, 3, 4, 5, 6]",
    "from math import inf\n\ndef re_arrange_elements(arr):\n    negative = []\n    positive = []\n\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n\n    negative.extend(positive)\n\n    return negative\n\n\nif __name__ == \"__main__\":\n    print(re_arrange_elements([-12, 11, -13, -5, 6, -7, 5, -3, -6]))",
    "def rearrange(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange([1, 2, -3, -4, 5]))",
    "def rearrange_array(arr):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    # For positive numbers, swap with the last index of negative numbers.\n    # For negative numbers, swap with the first index of positive numbers.\n    pos_idx = 0\n    neg_idx = len(arr) - 1\n\n    while pos_idx < neg_idx:\n        if arr[pos_idx] >= 0:\n            pos_idx += 1\n        elif arr[neg_idx] < 0:\n            neg_idx -= 1\n        else:\n            arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n            pos_idx += 1\n            neg_idx -= 1\n\n    return arr\n\n\ndef main():\n    arr = [12, 11, -13, -5, 6, -7, 5, -3, -6]\n    print(rearrange_array(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    # Get the count of negative elements\n    negative_count = 0\n    for index in range(length):\n        if arr[index] < 0:\n            negative_count += 1\n\n    # Set the starting index for the negative elements\n    negative_index = negative_count\n\n    # Swap the elements in the array\n    for index in range(length):\n        if arr[index] < 0:\n            # If the negative element is already at the correct position,\n            # then continue to next element\n            if index == negative_index:\n                continue\n\n            # If the negative element is not at the correct position, then swap\n            arr[index], arr[negative_index] = arr[negative_index], arr[index]\n\n            # Increase the negative index\n            negative_index += 1\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -1, 3, -10, 5]) == [-10, -1, 2, 3, 5, 1]",
    "from typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    positive, negative = [], []\n\n    for item in arr:\n        if item < 0:\n            negative.append(item)\n        else:\n            positive.append(item)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, 2, -1, -2, -5, 1, 2, 0, 0]) == [-5, -2, -2, -1, 0, 0, 1, 1, 2]",
    "def rearrange(arr):\n    negatives = []\n    positives = []\n\n    for el in arr:\n        if el < 0:\n            negatives.append(el)\n        else:\n            positives.append(el)\n\n    arr = negatives + positives\n\n    return arr\n\n\nif __name__ == '__main__':\n    test_cases = [\n        [1, -1, 2, -2, 3, -3],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, -1],\n        [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10],\n        [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5],\n        [1, -1, 2, -2, 3, -3, 4, -4, 5, -5],\n        [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7]\n    ]\n\n    for case in test_cases:\n        print(rearrange(case))",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return arr\n\n    # Find the index of the first positive element\n    i = 0\n    while i < n and arr[i] < 0:\n        i += 1\n\n    # If all elements are negative, just reverse the array\n    if i == n:\n        return arr[::-1]\n\n    # Find the index of the last negative element\n    j = i - 1\n    while j >= 0 and arr[j] < 0:\n        j -= 1\n\n    # If all elements are positive, just return the array\n    if j < 0:\n        return arr\n\n    # Put the negative elements before the positive elements\n    while j < i:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    return arr\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_negative_positive2(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    i, j = 0, len(arr) - 1\n\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        if arr[j] < 0:\n            j -= 1\n\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    arr = [1, 2, 3, -4, -1, 4]\n    print(rearrange_negative_positive(arr))\n    print(rearrange",
    "def rearrange_array(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # Negative numbers\n    neg_nums = []\n\n    # Positive numbers\n    pos_nums = []\n\n    for num in arr:\n        if num < 0:\n            neg_nums.append(num)\n        else:\n            pos_nums.append(num)\n\n    # Concatenate and return the final array\n    return neg_nums + pos_nums\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, -3, -5, 6, -7, 8, 9, -11, 12, -13, 14]))",
    "def negative_before_positive(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    neg = 0\n    pos = 0\n    while pos < len(arr):\n        if arr[pos] >= 0:\n            pos += 1\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            neg += 1\n            pos += 1\n    return arr\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3, -1, -2, -3], [-3, -2, -1, 1, 2, 3]),\n        ([-1, -2, -3, -4, 1, 2, 3, 4], [-4, -3, -2, -1, 1, 2, 3, 4]),\n        ([1, -2, 3, -4, 5, -6], [-6, -4, -2, 1, 3, 5]),\n    ]\n\n    for test_case, result in test_cases:\n        assert negative_before_positive(test_case) == result, test_case",
    "def rearrange_array(arr):\n    negative_elements = []\n    positive_elements = []\n\n    for i in arr:\n        if i < 0:\n            negative_elements.append(i)\n        else:\n            positive_elements.append(i)\n\n    return negative_elements + positive_elements\n\n\nprint(rearrange_array([1, 2, 3, -4, -1, 4]))",
    "from array import array\n\n\ndef rearrange(arr: array) -> array:\n    \"\"\"Rearrange negative and positive elements in a given array.\n\n    Args:\n        arr (array): given array of elements\n\n    Returns:\n        array: re-arranged array\n    \"\"\"\n    negative_values = []\n    positive_values = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_values.append(arr[i])\n        else:\n            positive_values.append(arr[i])\n    return array(\"i\", negative_values + positive_values)\n\n\nif __name__ == \"__main__\":\n    print(rearrange(array(\"i\", [-1, 2, -3, 4, 5, 6, -7, 8, 9])))",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    A: all negative elements are placed before positive elements\n    \"\"\"\n    negative_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_count += 1\n\n    for i in range(negative_count):\n        arr.append(0)\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[-negative_count - 1] = arr[-negative_count - 1], arr[i]\n            negative_count += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, -2]) == [-4, -2, 1, 2, 3]",
    "def rearrange(arr):\n    \"\"\"\n    arr: list\n    return: list\n    \"\"\"\n    # Your code here\n    return list(filter(lambda x: x < 0, arr)) + list(filter(lambda x: x >= 0, arr))\n\nprint(rearrange([1,2,3,-4,-1,-2,4]))",
    "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef rearrange_array(arr: List[int]) -> List[int]:\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] < 0 and arr[right] < 0:\n            left += 1\n        elif arr[left] > 0 and arr[right] > 0:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, -1, -2, -4, 5, 2, 0, -1]))",
    "def re_arrange(arr):\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        while i < j and arr[i] < 0:\n            i += 1\n        while i < j and arr[j] >= 0:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -4, -1, 4]\n    print(re_arrange(arr))",
    "from typing import List\n\n\ndef rearrange_negative_positive_elements(arr: List[int]) -> List[int]:\n    \"\"\"Returns a new array with negative and positive elements re-arranged.\n\n    Args:\n        arr (List[int]): input array\n\n    Examples:\n        >>> assert rearrange_negative_positive_elements([1, 2, 3, -4, -1, 0]) == [-4, -1, 0, 1, 2, 3]\n    \"\"\"\n    return sorted(arr, key=lambda x: x < 0)\n\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive_elements([1, 2, 3, -4, -1, 0]))",
    "def re_arrange_array(arr):\n    n = len(arr)\n    neg_index = 0\n    pos_index = n-1\n\n    while neg_index < pos_index:\n        while arr[neg_index] >= 0 and neg_index < pos_index:\n            neg_index += 1\n        while arr[pos_index] < 0 and neg_index < pos_index:\n            pos_index -= 1\n\n        if neg_index < pos_index:\n            arr[neg_index], arr[pos_index] = arr[pos_index], arr[neg_index]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6],\n        [1, 2, 3, 4, 5, 6, 7, 8, -1, -2, -3, -4, -5, -6, -7, -8],\n        [-1, -2, 1, 2, 3, 4, 5, 6],\n        [-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6],\n        [-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10],\n        [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10],\n        [1, -2, 3, -4",
    "from array import array\nfrom typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    This solution is based on the idea of using two pointers and swapping the elements\n    at the pointers.\n    \"\"\"\n    pos = 0\n    neg = 0\n\n    while pos < len(arr) and arr[pos] >= 0:\n        pos += 1\n\n    while neg < len(arr) and arr[neg] < 0:\n        neg += 1\n\n    while pos < neg and neg < len(arr):\n        arr[neg], arr[pos] = arr[pos], arr[neg]\n        neg += 1\n        pos += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, 5, -6, 7]) == [-6, -4, 1, 2, 3, 5, 7]\n    assert rearrange_negative_positive([1, 2, 3, -4, 5, -6]) == [-6, -4, 1, 2, 3, 5]\n    assert rearrange_negative_positive([-1, -2, -3, 4, 5, 6]) == [-3, -2, -1, 4, 5, 6]\n    assert rearrange_negative_positive([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == [\n        -5,\n        -4,\n        -3,\n        -2,\n        -1,\n        1,\n        2,\n        3,\n        4,\n        5,\n    ]\n    assert rearrange_negative_positive([-3, -1, -5, -2, -4, -7]) == [-7, -5, -4, -3, -2, -1]\n    assert rearrange_negative_positive([-3, -1, -5, -2, -4, 7]) == [-3, -1, -5,",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    pos, neg = [], []\n\n    for num in arr:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    return neg + pos\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([3, -4, 1, 5, -6, 2]) == [-6, -4, 1, 5, 2, 3]",
    "from array import array\nfrom typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n    length = len(arr)\n    i = 0\n\n    while i < length:\n        if arr[i] < 0:\n            arr.append(arr.pop(i))\n            length -= 1\n        else:\n            i += 1\n\n    return arr\n\n\ndef rearrange_array_2(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    negatives = array(\"I\", [])\n    positives = array(\"I\", [])\n\n    for element in arr:\n        if element < 0:\n            negatives.append(element)\n        else:\n            positives.append(element)\n\n    return list(negatives) + list(positives)\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, 5, -6, 7, -8, 9, -10]) == [-4, -6, -8, -10, 1, 2, 3, 5, 7, 9]\n    assert rearrange_array_2([1, 2, 3, -4, 5, -6, 7, -8, 9, -10]) == [-4, -6, -8, -10, 1, 2, 3, 5, 7, 9]",
    "from array import array\nfrom typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    pos_index = len(arr)\n\n    for i, value in enumerate(arr):\n        if value >= 0:\n            pos_index = i\n            break\n\n    pos_arr = array(\"i\", arr[pos_index:])\n    neg_arr = array(\"i\", arr[:pos_index])\n\n    for i in range(pos_arr.buffer_info()[1]):\n        pos_arr[i] *= -1\n\n    for i in range(neg_arr.buffer_info()[1]):\n        neg_arr[i] *= -1\n\n    return [*neg_arr, *pos_arr]\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([-1, -3, 4, 5, 6, -2]))\n    print(rearrange_array([1, 2, 3, 4, 5]))\n    print(rearrange_array([-1, -3, -5]))\n    print(rearrange_array([-1, 2, 3, 4, 5]))",
    "def rearrange_array(arr):\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos\n\nif __name__ == \"__main__\":\n    arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n    print(rearrange_array(arr))",
    "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negative_elements = []\n    positive_elements = []\n\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n\n    return negative_elements + positive_elements\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array(array(\"i\", [1, -1, 2, -2, 0, 3, -3, 4, -4])))",
    "from array import array\nfrom typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange array.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not arr:\n        return []\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n        else:\n            left += 1\n\n    return arr\n\n\ndef rearrange_array_2(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange array with two pointers.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not arr:\n        return []\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        while left < right and arr[left] >= 0:\n            left += 1\n        while left < right and arr[right] < 0:\n            right -= 1\n\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return arr\n\n\ndef rearrange_array_3(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange array with two pointers.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not arr:\n        return []\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        while left < right and arr[left] >= 0:\n            left += 1\n        while left < right and arr[right] < 0:\n            right -= 1\n\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return arr\n\n\nif __name__ == '__main__':\n    # Given [1, -1, 5, 2, -3, 3], the expected result should be [-1, -3, 1, 2,",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] >= 0:\n            left += 1\n        elif arr[right] < 0:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == [-1, -7, 2, -3, 4, 8, 9, 6, 5]",
    "from typing import List\n\n\ndef rearrange(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        while i < j and arr[i] < 0:\n            i += 1\n        while i < j and arr[j] >= 0:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange([1, 2, 3, 4, -1, 5, 6, -8, -5, -6]) == [-8, -6, -5, -1, 1, 2, 3, 4, 5, 6]",
    "from array import array\nfrom typing import List\n\n\ndef re_arrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def partition(arr: List[int], low: int, high: int) -> int:\n        i = low - 1\n        pivot = arr[high]\n\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_sort(arr: List[int], low: int, high: int) -> None:\n        if low < high:\n            pivot = partition(arr, low, high)\n            quick_sort(arr, low, pivot - 1)\n            quick_sort(arr, pivot + 1, high)\n\n    quick_sort(arr, 0, len(arr) - 1)\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([1, 2, -1, -2, 5, 6, -6, -5]) == [-1, -2, -6, -5, 1, 2, 5, 6]",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    n = len(arr)\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n\n    return arr\n\n\ndef main():\n    print(rearrange_negative_positive([1, 2, 3, -4, -1, 4]))\n    print(rearrange_negative_positive([1, -1, 0, 3, 4]))\n    print(rearrange_negative_positive([1, 2, 3, 4, 5]))\n    print(rearrange_negative_positive([-1, -2, -3, -4, -5]))\n    print(rearrange_negative_positive([-1, 2, 3, -4, 5]))\n\n\nif __name__ == '__main__':\n    main()",
    "def rearrange_array(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos = []\n    neg = []\n\n    for item in arr:\n        if item < 0:\n            neg.append(item)\n        else:\n            pos.append(item)\n\n    return neg + pos\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([-12, 11, -13, -5, 6, -7, 5, -3, -6]))",
    "def rearrange_negative_positive_numbers(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    neg = []\n    pos = []\n\n    for item in arr:\n        if item < 0:\n            neg.append(item)\n        else:\n            pos.append(item)\n\n    return neg + pos\n\ndef rearrange_negative_positive_numbers_inplace(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive_numbers([1,2,-3,-4,5,6,-7,-8,9,-10]))\n    print(rearrange_negative_positive_numbers_inplace([1,2,-3,-4,5,6,-7,-8,9,-10]))",
    "def rearrange(arr):\n    n = len(arr)\n    neg = 0\n    pos = n-1\n\n    while neg<pos:\n        if arr[neg]<0:\n            neg+=1\n            continue\n        if arr[pos]>0:\n            pos-=1\n            continue\n        arr[neg], arr[pos] = arr[pos], arr[neg]\n        neg+=1\n        pos-=1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -1, -2, -4, 5, 2, 0]\n    print(rearrange(arr))",
    "def rearrange_array(arr):\n    positive = []\n    negative = []\n\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    arr = [-1, -2, 3, 6, 7, 8, 9, 10]\n    print(rearrange_array(arr))",
    "from typing import List\n\n\ndef arrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n\n    # Separate positive and negative elements.\n    pos_start, pos_end = 0, len(arr) - 1\n    neg_start, neg_end = 0, len(arr) - 1\n\n    while pos_end - pos_start > 0:\n        while arr[pos_end] >= 0:\n            pos_end -= 1\n            if pos_end < pos_start:\n                break\n\n        while arr[neg_end] < 0:\n            neg_end -= 1\n            if neg_end < neg_start:\n                break\n\n    while neg_start < pos_end:\n        arr[neg_start], arr[pos_end] = arr[pos_end], arr[neg_start]\n        neg_start += 1\n        pos_end -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    arr = [12, -11, -13, -5, 6, -7, 5, -3, -6]\n    print(f\"Input: {arr}\")\n    print(f\"Output: {arrange_positive_negative(arr)}\")\n\n    # Test 2\n    arr = [-1, -2, -3, 0, 1, 2, 3, 4, 5]\n    print(f\"Input: {arr}\")\n    print(f\"Output: {arrange_positive_negative(arr)}\")\n\n    # Test 3\n    arr = [1, 2, 3, 4, 5]\n    print(f\"Input: {arr}\")\n    print(f\"Output: {arrange_positive_negative(arr)}\")\n\n    # Test 4\n    arr = [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5]\n    print(f\"Input: {arr}\")",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    This solution has O(n) time and O(1) space complexity.\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        elif arr[i] > 0 and arr[j] > 0:\n            j -= 1\n        else:\n            i += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -3, -5, 6, -7, 8, 9]) == [-7, -5, -3, 1, 2, 6, 8, 9]\n    assert rearrange_array([-5, -3, 1, 2, 5, 6, 7, 8, 9]) == [-5, -3, 1, 2, 5, 6, 7, 8, 9]\n    assert rearrange_array([-5, -3, 1, 2, 5, 6, -7, 8, -9]) == [-9, -7, -5, -3, 1, 2, 5, 6, 8]\n    assert rearrange_array([-5, -3, 1, 2, -5, 6, -7, 8, 9]) == [-5, -5, -3, -7, 1, 2, 6, 8, 9]\n    assert rearrange_array([-5, -3, 1, 2, -5, 6, -7, 8, -9]) == [-9, -7, -5, -5, -3, 1, 2, 6, 8]\n    assert rearrange_array([1",
    "from typing import List\n\n\ndef rearrange_negative_positive(nums: List[int]) -> List[int]:\n    \"\"\"\n    Idea is to use two pointers and swap the elements\n    \"\"\"\n    negative_count = 0\n    for index, value in enumerate(nums):\n        if value < 0:\n            negative_count += 1\n\n    negative_pointer = negative_count\n    positive_pointer = 0\n\n    while negative_pointer < len(nums) and positive_pointer < len(nums):\n        if nums[positive_pointer] < 0:\n            nums[negative_pointer], nums[positive_pointer] = nums[positive_pointer], nums[negative_pointer]\n            negative_pointer += 1\n            positive_pointer += 1\n        elif nums[positive_pointer] >= 0:\n            positive_pointer += 1\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, 5, -6, 7, 8, -9, -10]) == [-9, -10, -4, -6, 1, 2, 3, 5, 7, 8]",
    "def rearrange_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] > 0 and arr[j] > 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, -1, -2, 5, 6, -6, -5]))\n    print(rearrange_array([1, 2, -1, -2, 5, 6, -6, -5, -10, -9, 9, 10, 0]))",
    "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"\n    This function uses two-pointers approach. It has a time complexity of O(n) and space complexity of O(1).\n    :param arr: input array\n    :return: rearranged array\n    >>> a = array('i', [1, 2, -3, -5, 6, -7, 8, 9, 10])\n    >>> rearrange_array(a)\n    array('i', [1, 2, 6, 8, 9, 10, -3, -5, -7])\n    >>> b = array('i', [])\n    >>> rearrange_array(b)\n    array('i', [])\n    >>> c = array('i', [-1, 2, -3, -5, 6, -7, 8, 9, 10])\n    >>> rearrange_array(c)\n    array('i', [-1, 2, 6, 8, 9, 10, -3, -5, -7])\n    \"\"\"\n    if not arr:\n        return arr\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        if arr[left] < 0:\n            left += 1\n        if arr[right] >= 0:\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_positive_negative(nums: List[int]) -> List[int]:\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        if nums[left] < 0 < nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        elif nums[left] > 0:\n            right -= 1\n        elif nums[right] < 0:\n            left += 1\n\n    return nums\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef rearrange_positive_negative_2(nums: List[int]) -> List[int]:\n    left, right = 0, len(nums) - 1\n    negative_nums = []\n\n    while left < right:\n        if nums[left] < 0:\n            negative_nums.append(nums[left])\n            left += 1\n        elif nums[right] < 0:\n            right -= 1\n        else:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n\n    for i in range(len(negative_nums)):\n        nums.insert(i, negative_nums[i])\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, -2, 3, -4, 5]) == [-4, -2, 1, 3, 5]\n    assert rearrange_positive_negative([-1, 2, -3, 4, -5]) == [-5, -3, -1, 2, 4]\n    assert rearrange_positive_negative([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert rearrange_pos",
    "def rearrange_array(arr):\n    pos = 0\n    neg = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos += 1\n        else:\n            neg += 1\n    if pos == 0 or neg == 0:\n        return arr\n    if pos < neg:\n        return [0] * neg + arr[pos:]\n    elif pos > neg:\n        return arr[:pos] + [0] * neg\n\n\nprint(rearrange_array([1, 2, -3, -4, 5]))\nprint(rearrange_array([1, 2, 3, 4, -5]))\nprint(rearrange_array([-1, -2, -3, -4, -5]))\nprint(rearrange_array([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]))\nprint(rearrange_array([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6]))\nprint(rearrange_array([-1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6]))",
    "from array import array\n\n\ndef rearrange_negative_positive(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"i\", [1, 2, 3, -4, 5, -6])\n    print(*rearrange_negative_positive(arr))",
    "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    negative_elements: list[int] = []\n    positive_elements: list[int] = []\n\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n\n    return array(\"I\", negative_elements + positive_elements)\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array(array(\"I\", [-1, 2, 3, -4, 5])))",
    "from typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    negative = []\n    positive = []\n\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, 2, -3, -4, 5]) == [-4, -3, 1, 2, 5]",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negative_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive([1, 2, 3, -4, 5, -6, -7, 8, 9, -10]))",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    negative = []\n    positive = []\n\n    for item in arr:\n        if item < 0:\n            negative.append(item)\n        else:\n            positive.append(item)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, -1, 3, -19, 7, -12, 9, -15, 8]) == [-19, -12, -15, -1, -1, 2, 3, 7, 8, 9]",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negatives = []\n    positives = []\n\n    for element in arr:\n        if element < 0:\n            negatives.append(element)\n        else:\n            positives.append(element)\n\n    return negatives + positives\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, -2, 0, 4]) == [-4, -2, -2, 1, 3, 4, 0]",
    "from typing import List\n\n\ndef rearrange_negative_positive(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    pos_start = 0\n    neg_end = 0\n\n    while pos_start < len(nums):\n        if nums[pos_start] < 0:\n            nums[pos_start], nums[neg_end] = nums[neg_end], nums[pos_start]\n            neg_end += 1\n        pos_start += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive([1, 2, -1, -2, 4, 5, 6, -3, 3, -4]))\n    print(rearrange_negative_positive([1, 2, -1, 3, -2, 4, -3, 5, -4, 6]))",
    "def rearrange_negative(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return arr\n\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative([1, 2, -3, -4, 5]) == [-4, -3, 1, 2, 5]\n    assert rearrange_negative([-1, 2, -3, -4, 5]) == [-4, -3, -1, 2, 5]\n    assert rearrange_negative([1, 2, -3, 4, -5]) == [-5, 1, 2, -3, 4]",
    "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\nclass Solution:\n    def arrange_array(self, arr: List[int]) -> List[int]:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            if arr[left] < 0 and arr[right] >= 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            elif arr[left] >= 0:\n                left += 1\n            elif arr[right] < 0:\n                right -= 1\n        return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -1, -2, -3, 4, 5]\n    s = Solution()\n    print(s.arrange_array(arr))",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        while left < right and arr[left] >= 0:\n            left += 1\n        while left < right and arr[right] < 0:\n            right -= 1\n\n        if left >= right:\n            break\n\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, 5]) == [-4, 1, 2, 3, 5]",
    "from typing import List\n\n\ndef rearrange_negative_positive_elements(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    i, j = 0, len(arr) - 1\n    while i < j:\n        while i < j and arr[i] >= 0:\n            i += 1\n        while i < j and arr[j] < 0:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive_elements([]) == []\n    assert rearrange_negative_positive_elements([1, 2, 3, 4, 5, 6]) == [\n        -6,\n        -5,\n        -4,\n        -3,\n        -2,\n        -1,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n    ]\n    assert rearrange_negative_positive_elements([1, 2, 3, 4, 5, -6]) == [\n        -6,\n        1,\n        2,\n        3,\n        4,\n        5,\n    ]\n    assert rearrange_negative_positive_elements([1, -2, 3, -4, -5, 6]) == [\n        -6,\n        -5,\n        -4,\n        -3,\n        -2,\n        1,\n        3,\n        6,\n    ]",
    "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\nclass SolutionOne:\n    def rearrange_negative_positive(self, nums: List[int]) -> List[int]:\n        if not nums or len(nums) == 0:\n            return nums\n\n        i, j = 0, len(nums) - 1\n        while i < j:\n            if nums[i] < 0 < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n            elif nums[i] < 0:\n                i += 1\n            elif nums[j] < 0:\n                j -= 1\n            else:\n                break\n\n        return nums\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\nclass SolutionTwo:\n    def rearrange_negative_positive(self, nums: List[int]) -> List[int]:\n        if not nums or len(nums) == 0:\n            return nums\n\n        negative_arr, positive_arr = [], []\n        for num in nums:\n            if num < 0:\n                negative_arr.append(num)\n            else:\n                positive_arr.append(num)\n\n        return negative_arr + positive_arr",
    "def rearrange_negative_positive(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive([1, 2, 3, -4, -1, 4, -3, 3, 1, -3, 3, -4, 5, 4, 3, 4, 5, 6]))\n    print(rearrange_negative_positive([]))\n    print(rearrange_negative_positive([-1, 2, 3, -4, -1, 4, -3, 3, 1, -3, 3, -4, 5, 4, 3, 4, 5, 6]))\n    print(rearrange_negative_positive([1, 2, 3, 4, 1, 4, 3, 4, 5, 6]))\n    print(rearrange_negative_positive([-1, -2, -3, -4, -1, -4, -3, -3, -1, -3, -3, -4, -5, -4, -3, -4, -5, -6]))\n    print(rearrange_negative_positive([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6]))\n    print(rearrange_negative_positive([1, 2,",
    "from array import array\nfrom typing import List\n\n\ndef re_arrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    negative_indexes = []\n    positive_indexes = []\n\n    for index, value in enumerate(arr):\n        if value < 0:\n            negative_indexes.append(index)\n        else:\n            positive_indexes.append(index)\n\n    negative_indexes.reverse()\n\n    return sum(\n        (\n            arr[index]\n            for index in negative_indexes + positive_indexes\n        ),\n        array(\"I\"),\n    )\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_negative_positive([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == array(\n        \"I\", [-1, -3, -7, 2, 4, 5, 6, 8, 9]\n    )",
    "from typing import List\n\n\ndef re_arrange(arr: List[int]) -> List[int]:\n    \"\"\"\n    Using sorting.\n    \"\"\"\n\n    return sorted(arr, key=lambda x: x >= 0)\n\n\nif __name__ == \"__main__\":\n    for arr, result in [\n        ([34, -3, 4, 5, 2], [-3, 2, 34, 4, 5]),\n        ([34, -3, 4, -5, 2], [-3, -5, 2, 34, 4]),\n        ([34, -3, 4, -5, -2], [-3, -5, -2, 34, 4]),\n    ]:\n        assert re_arrange(arr) == result",
    "def rearrange_array(arr):\n    \"\"\"\n    :param: arr - input array\n    return - array with negative and positive elements\n\n    O(n) time\n    O(1) space\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    negative = 0\n    positive = len(arr) - 1\n\n    while negative < positive:\n        if arr[negative] < 0 and arr[positive] > 0:\n            arr[negative], arr[positive] = arr[positive], arr[negative]\n            negative += 1\n            positive -= 1\n        elif arr[negative] < 0:\n            negative += 1\n        else:\n            positive -= 1\n\n    return arr",
    "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    negative = array(\"i\", [])\n    positive = array(\"i\", [])\n\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array(array(\"i\", [34, -4, 5, 2])) == array(\"i\", [-4, 34, 5, 2])\n    assert rearrange_array(array(\"i\", [1, 2, 3, -4, 5])) == array(\"i\", [-4, 1, 2, 3, 5])\n    assert rearrange_array(array(\"i\", [1, -2, 3, 4, -5])) == array(\"i\", [-2, 1, 3, 4, -5])",
    "def rearrange(arr):\n    \"\"\"\n    >>> rearrange([1, 2, -3, -1, 0, 3, -1])\n    [-3, -1, -1, 1, 2, 0, 3]\n    >>> rearrange([-1, -2, 3, 4, 5, 6, 7])\n    [-2, -1, 3, 4, 5, 6, 7]\n    >>> rearrange([1, 2, 3, 4, 5, 6, 7])\n    [-1, -1, -1, -1, -1, -1, -1]\n    >>> rearrange([-1, 2, -3, 1, 0, 3, -1])\n    [-3, -1, -1, 1, 2, 0, 3]\n    >>> rearrange([-1, 2, 3, 4, 5, 6, -7])\n    [-7, -1, -1, -1, -1, -1, -1]\n    >>> rearrange([1, -2, 3, 4, -5, 6, 7])\n    [-2, -5, 3, 4, 6, 7, 1]\n    \"\"\"\n    neg_indices = []\n    pos_indices = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n\n    neg_indices.sort()\n    pos_indices.sort()\n\n    i, j = 0, 0\n    while i < len(neg_indices) and j < len(pos_indices):\n        arr[neg_indices[i]] = -arr[neg_indices[i]]\n        arr[pos_indices[j]] = -arr[pos_indices[j]]\n        i += 1\n        j += 1\n\n    while i < len(neg_indices):\n        arr[neg_indices[i]] = -arr[neg",
    "from typing import List\n\n\ndef rearrange(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n    if not arr:\n        return arr\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]",
    "def rearrange(nums):\n    \"\"\"\n    >>> nums = [-1, 0, 1, 2, -10, 20, -3, 4]\n    >>> rearrange(nums)\n    [-10, -3, -1, 0, 1, 2, 4, 20]\n    >>> nums = [-1, 0, 1, 2, -10, 20, -3, 4, -100, 100, -200, 200]\n    >>> rearrange(nums)\n    [-100, -200, -10, -3, -1, 0, 1, 2, 4, 20, 100, 200]\n    \"\"\"\n\n    # O(N)\n    # time complexity: O(N)\n    # space complexity: O(1)\n    # two-pointers\n    # positive, negative = 0, len(nums) - 1\n    # while positive < negative:\n    #     if nums[positive] >= 0 and nums[negative] < 0:\n    #         nums[positive], nums[negative] = nums[negative], nums[positive]\n    #         positive += 1\n    #         negative -= 1\n    #     elif nums[positive] >= 0:\n    #         positive += 1\n    #     elif nums[negative] < 0:\n    #         negative -= 1\n\n    # O(N)\n    # time complexity: O(N)\n    # space complexity: O(1)\n    # two-pointers\n    # positive, negative = 0, len(nums) - 1\n    # while positive < negative:\n    #     if nums[positive] < 0 and nums[negative] >= 0:\n    #         nums[positive], nums[negative] = nums[negative], nums[positive]\n    #         positive += 1\n    #         negative -= 1\n    #     elif nums[positive] < 0:\n    #",
    "def rearrange_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negative_num = 0\n    positive_num = 0\n    negative_count = 0\n    positive_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_num = arr[i]\n            negative_count += 1\n        else:\n            positive_num = arr[i]\n            positive_count += 1\n\n    for i in range(len(arr)):\n        if negative_count > 0:\n            arr[i] = negative_num\n            negative_num += 1\n            negative_count -= 1\n        elif positive_count > 0:\n            arr[i] = positive_num\n            positive_num += 1\n            positive_count -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -3, -4, 5]) == [-4, -3, 1, 2, 5]",
    "def rearrange(arr):\n    # Your code here\n    i, j = 0, len(arr) - 1\n    while i < j:\n        while i < j and arr[i] < 0:\n            i += 1\n        while i < j and arr[j] >= 0:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [-12, 11, -13, -5, 6, -7, 5, -3, -6]\n    print(rearrange(arr))",
    "def rearrange_negative_positive(arr):\n    if len(arr) == 1:\n        return arr\n\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        if arr[i] >= 0:\n            i += 1\n        if arr[j] <= 0:\n            j -= 1\n    return arr\n\nprint(rearrange_negative_positive([1, 2, -3, -4, 5]))\nprint(rearrange_negative_positive([-1, 2, -3, 4, 5]))\nprint(rearrange_negative_positive([1, 2, 3, 4, 5]))\nprint(rearrange_negative_positive([-1, -2, -3, -4, -5]))",
    "def rearrange_array(arr):\n    negative = []\n    positive = []\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([-1, -3, -5, 2, 4, 6, 7, 8, 9, -2, -4]))",
    "from array import array\nfrom typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange positive and negative number in array.\n\n    Args:\n        arr (List[int]): input array\n\n    Returns:\n        List[int]: sorted array\n    \"\"\"\n    pos_indices, neg_indices = [], []\n\n    for idx, value in enumerate(arr):\n        if value < 0:\n            neg_indices.append(idx)\n        else:\n            pos_indices.append(idx)\n\n    sorted_arr = array('i', (arr[i] for i in pos_indices + neg_indices))\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, 2, 3, -4, -1, 4]) == array('i', (-4, -1, 1, 2, 3, 4))",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"Split array in two, negative and positive, and then merge them back.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    negative_index = 0\n    positive_index = 0\n\n    while negative_index < len(arr) and positive_index < len(arr):\n        if arr[negative_index] < 0:\n            negative_index += 1\n            continue\n        elif arr[positive_index] > 0:\n            positive_index += 1\n            continue\n\n        arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([-1, -2, -3, 4, 5, 6, 7, 8]) == [-1, -2, -3, 4, 5, 6, 7, 8]\n    assert rearrange_negative_positive([-1, -2, -3, 4, 5, 6, -7, -8]) == [-1, -2, -3, -7, -8, 4, 5, 6]",
    "from array import array\n\n\ndef rearrange_positive_negative(arr: array) -> array:\n    \"\"\"Rearrange positive and negative elements of an array.\n\n    Args:\n        arr (array): array of integers\n\n    Returns:\n        array: array of integers\n\n    Examples:\n        >>> rearrange_positive_negative(array(\"i\", [3, -4, 5, 6, -7, 8, -9, 10]))\n        array('i', [-4, -7, -9, 3, 6, 10, 5, 8])\n    \"\"\"\n    if not arr:\n        return arr\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n        elif arr[left] >= 0:\n            right -= 1\n        elif arr[right] < 0:\n            left += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_positive_negative(array(\"i\", [3, -4, 5, 6, -7, 8, -9, 10])))",
    "def rearrange_array(arr):\n    # Write your code here.\n    # O(n) time | O(1) space\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj = i - 1\n\t\twhile j >= 0 and arr[j] > 0 and current < 0:\n\t\t\tarr[j + 1] = arr[j]\n\t\t\tj -= 1\n\t\tarr[j + 1] = current\n\treturn arr",
    "from array import array\nfrom typing import List\n\n\ndef re_arrange(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    pos: int = 0\n    neg: int = 0\n    res: List[int] = array(\"i\", [0] * len(arr))\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            res[neg] = arr[i]\n            neg += 1\n        else:\n            res[pos] = arr[i]\n            pos += 1\n\n    return res[:pos] + res[neg:]\n\n\nif __name__ == \"__main__\":\n    assert re_arrange([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    negative_arr = []\n    positive_arr = []\n\n    for element in arr:\n        if element < 0:\n            negative_arr.append(element)\n        else:\n            positive_arr.append(element)\n\n    return negative_arr + positive_arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, 3, -4, -1, 4]) == [-4, -1, 1, 2, 3, 4]",
    "def rearrange(arr):\n    # O(n)\n    i, j = 0, len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n    print(rearrange(arr))",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos, neg = 0, len(arr) - 1\n\n    while pos < neg:\n        if arr[pos] >= 0 and arr[neg] < 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0:\n            neg -= 1\n        elif arr[neg] >= 0:\n            pos += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, -1, -2, 4, 5, 3, -3, -4]) == [-1, -2, 1, 2, -4, -3, 4, 5, 3]",
    "def negative_first(arr: list):\n    return arr[::-1]\n\n\nif __name__ == \"__main__\":\n    print(negative_first([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]))",
    "def rearrange_negative_positive(input_arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    negative_index = 0\n    positive_index = len(input_arr) - 1\n\n    while negative_index < positive_index:\n        if input_arr[negative_index] < 0 and input_arr[positive_index] > 0:\n            input_arr[negative_index], input_arr[positive_index] = input_arr[positive_index], input_arr[negative_index]\n            negative_index += 1\n            positive_index -= 1\n        elif input_arr[negative_index] < 0:\n            negative_index += 1\n        elif input_arr[positive_index] > 0:\n            positive_index -= 1\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive([1,2,3,4,-1,-2,-3,-4]))",
    "def rearrange(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < 0:\n            if arr[j] >= 0:\n                arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        i += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]))",
    "from typing import List\n\n\ndef rearrange_negative_positive(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        if nums[left] < 0 and nums[right] > 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        elif nums[left] < 0:\n            left += 1\n        elif nums[right] > 0:\n            right -= 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, -1, -2, -5, 6, 7, 8, 9, -10, -20]) == [\n        -10,\n        -20,\n        -1,\n        -2,\n        -5,\n        1,\n        2,\n        6,\n        7,\n        8,\n        9,\n    ]",
    "def rearrange_array(arr):\n    # 1. Iterate the array and store all negative elements in the first half of the array.\n    # 2. Iterate the array and store all positive elements in the second half of the array.\n    # 3. Return the array.\n\n    # 1. Iterate the array and store all negative elements in the first half of the array.\n    i = 0\n    while i < len(arr):\n        if arr[i] >= 0:\n            break\n        i += 1\n    j = 0\n    while j < i:\n        arr[j], arr[i] = arr[i], arr[j]\n        j += 1\n        i += 1\n    # 2. Iterate the array and store all positive elements in the second half of the array.\n    i = len(arr) - 1\n    while i > 0:\n        if arr[i] < 0:\n            break\n        i -= 1\n    j = len(arr) - 1\n    while j > i:\n        arr[j], arr[i] = arr[i], arr[j]\n        j -= 1\n        i -= 1\n\n    return arr\n\n\ndef main():\n\n    arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n    print(rearrange_array(arr))\n\n    arr = [-1, 2, -3, 4, 5, 6, -7, 8, -9]\n    print(rearrange_array(arr))\n\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n    print(rearrange_array(arr))\n\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, 9]\n    print(rearrange_array(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rearrange_negative(arr):\n    n = len(arr)\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -1, -5, -2, -7, 4, 8, 3, 6]\n    print(rearrange_negative(arr))",
    "def rearrange_positive_negative_numbers(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative_numbers([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6]",
    "def rearrange_array(arr):\n    # Time complexity O(n)\n    # Space complexity O(1)\n\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, -1, -2, -1, 0, 3, 4]))",
    "def rearrange_negative_positive(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        if arr[i] >= 0 and arr[j] >= 0:\n            j -= 1\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(rearrange_negative_positive([3, -4, 1, 5, -6, 2, -9]))\n    print(rearrange_negative_positive([3, -4, 1, 5, -6, 2, -9, -8]))",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        while arr[left] >= 0 and left < right:\n            left += 1\n\n        while arr[right] < 0 and left < right:\n            right -= 1\n\n        arr[left], arr[right] = arr[right], arr[left]\n\n        left += 1\n        right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -1, -2, -1, 0, 1]) == [-1, -1, -2, 1, 0, 1, 2]",
    "from array import array\n\n\ndef arrange(arr: array) -> array:\n    \"\"\"Split the array into two parts, positive and negative elements.\n    Then merge them back together.\n\n    Args:\n        arr (array): Input array.\n\n    Returns:\n        array: Modified array.\n    \"\"\"\n    negatives = []\n    positives = []\n\n    for num in arr:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n\n    return array('i', negatives + positives)\n\n\nif __name__ == \"__main__\":\n    print(arrange(array('i', [-1, 2, 3, -4, 5, 6, 7, -8, 9])))",
    "def rearrange(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] < 0 and arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] > 0:\n            right -= 1\n\nif __name__ == \"__main__\":\n    arr = [12, 11, -13, -5, 6, -7, 5, -3, -6]\n    rearrange(arr)\n    print(arr)",
    "from typing import List\n\n\ndef rearrange_negative_positive(arr: List[int]) -> List[int]:\n    \"\"\"\n    Using two pointers:\n    First pointer to keep track of the first negative element.\n    Second pointer to keep track of the first positive element.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr)\n\n    i, j = 0, 0\n\n    while j < n:\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] > 0:\n            j += 1\n        else:\n            j += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_negative_positive([1, 2, -1, -2, -1, 0, 1]) == [-1, -2, -1, 1, 2, 0, 1]\n    assert rearrange_negative_positive([1, 2, -1, 0, 1]) == [-1, 0, 1, 2, 1]\n    assert rearrange_negative_positive([1, -1, 0, -2, -2, 2, 1, 2, 1, -1]) == [-2, -2, -1, -1, 1, 1, 2, 2, 1, 0]",
    "def rearrange(arr):\n    \"\"\"\n    :param: arr - input array\n    return - array with rearranged elements\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = rearrange(arr)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [12, 11, -13, -5, 6, -7, 5, -3, -6]\nsolution = [-13, -11, -7, -6, -5, -3, 6, 11, 12]\ntest_case = [arr, solution]\ntest_function(test_case)",
    "def rearrange(arr):\n    n = len(arr)\n    pos_index = 0\n    neg_index = n - 1\n\n    while pos_index < neg_index:\n        if arr[pos_index] >= 0 and arr[neg_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 1\n            neg_index -= 1\n        elif arr[pos_index] >= 0:\n            pos_index += 1\n        elif arr[neg_index] < 0:\n            neg_index -= 1\n\n    return arr\n\n\ndef main():\n    print(\"Rearranging the elements of the given array so that all negative elements appear before positive ones:\")\n    print(rearrange([-12, 11, -13, -5, 6, -7, 5, -3, -6]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rearrange_negative_positive(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\nif __name__ == \"__main__\":\n    arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n    print(rearrange_negative_positive(arr))",
    "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange all positive numbers to the left and negative numbers to the right.\n\n    Args:\n        arr (List[int]): input array\n\n    Returns:\n        List[int]: rearranged array\n    \"\"\"\n\n    positive = []\n    negative = []\n\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    print(rearrange_pos_neg([-1, -2, 3, 4, 5, 6, -7]))\n    print(rearrange_pos_neg([-1, -2, 3, 4, 5, -6, -7]))",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef re_arrange_negative_positive(numbers: List[int]) -> List[int]:\n    negative_start = 0\n    positive_start = len(numbers) - 1\n\n    while negative_start < positive_start:\n        if numbers[negative_start] >= 0:\n            break\n        if numbers[positive_start] < 0:\n            break\n\n        if numbers[negative_start] < numbers[positive_start]:\n            numbers[negative_start], numbers[positive_start - 1] = numbers[positive_start - 1], numbers[negative_start]\n            negative_start += 1\n        else:\n            numbers[negative_start], numbers[positive_start] = numbers[positive_start], numbers[negative_start]\n            positive_start -= 1\n\n    return numbers\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef re_arrange_negative_positive_2(numbers: List[int]) -> List[int]:\n    negative_start = 0\n    positive_start = len(numbers) - 1\n\n    while negative_start < positive_start:\n        if numbers[negative_start] < 0:\n            negative_start += 1\n        elif numbers[positive_start] >= 0:\n            positive_start -= 1\n        else:\n            numbers[negative_start], numbers[positive_start] = numbers[positive_start], numbers[negative_start]\n            negative_start += 1\n            positive_start -= 1\n\n    return numbers\n\n\nif __name__ == \"__main__\":\n    print(re_arrange_negative_positive([1, 2, 3, -4, 5, 6, -7, 8, 9, -10]))\n    print(re_arrange_negative_positive([-1, 2, 3, -4, 5, 6, -7, 8, 9, -10]))\n    print(re_arrange_negative_positive([-",
    "def rearrange_array(arr):\n    \"\"\"\n    Given an array of integers, re-arrange them such that all negative elements appear before positive elements.\n    If multiple solutions are possible, return any one of them.\n    If the array contains multiple 0s, return any array with 0s at the beginning.\n    :param arr: List[int]\n    :return: List[int]\n    \"\"\"\n    if not arr:\n        return []\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] > 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] > 0:\n            right -= 1\n        elif arr[right] < 0:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n\n    return arr\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = rearrange_array(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [2, -2, 2, -2, 0, 4, 2, 0]\nsolution = [-2, -2, 2, 2, 0, 0, 4, 2]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [-2, 2, -2, 0, 4, 2, 0]\nsolution = [-2, -2, 2, 0, 0, 4, 2]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, -2, 2, 0, 4, 2, 0]\nsolution = [2, -2, 2, 0, 0, 4, 2]\ntest_case = [arr, solution]\ntest_function(test_case)",
    "def rearrange_negative_positive(arr):\n    negative_elements = []\n    positive_elements = []\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n    return negative_elements + positive_elements\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -4, -1, 4, -2]\n    print(rearrange_negative_positive(arr))",
    "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    positive = []\n    negative = []\n\n    for element in arr:\n        if element < 0:\n            negative.append(element)\n        else:\n            positive.append(element)\n\n    return negative + positive\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, -1, -2, -3, 4, 5, 6]) == [-1, -2, -3, 1, 2, 4, 5, 6]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}