{
  "problem": {
    "task_id": "MBPP/280",
    "prompt": "Write a function to search an element in the given array by using sequential search.",
    "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
    "test_list": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ],
    "challenge_test_list": [],
    "problem_id": 269
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"Searching an element in an array\n\n    Args:\n        arr (array): An array of integers\n        key (int): The integer to search in the array\n\n    Returns:\n        int: index of key in the array\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == key:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = array(\"I\", [2, 3, 4, 10, 40])\n    print(sequential_search(arr, 10))",
    "def search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 4, 7, 10]\n    element = 10\n    print(search(arr, element))\n    element = 5\n    print(search(arr, element))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 3)\n    2\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"Sequential search\n\n    Args:\n        arr (array): array of elements\n        key (int): element to be searched\n\n    Returns:\n        int: index of the element if found else -1\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 6))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"\n    Searches the given array by using sequential search.\n    :param arr: the array to search\n    :param key: the key to search for\n    :return: the index of the key if found, else -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    arr = array('H', [9, 3, 1, 2, 6, 7, 8, 5, 4])\n    print(*arr)\n    print(sequential_search(arr, 6))\n    print(sequential_search(arr, 2))\n    print(sequential_search(arr, 5))\n    print(sequential_search(arr, 10))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Sequential search:\n        - Time Complexity: O(n)\n        - Auxiliary Space: O(1)\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert sequential_search(arr, 1) == 0\n    assert sequential_search(arr, 3) == 2\n    assert sequential_search(arr, 8) == 7\n    assert sequential_search(arr, 100) == -1",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Returns True if the given element is found in the array.\n    >>> sequential_search(array('i', [12, 32, 38, 45, 62]), 32)\n    True\n    >>> sequential_search(array('i', [12, 32, 38, 45, 62]), 123)\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> int:\n    \"\"\"Sequential search\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 3, 2, 4, 5])\n    assert sequential_search(arr, 3) == 1\n    assert sequential_search(arr, 4) == 3\n    assert sequential_search(arr, 6) == -1",
    "def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True\n        return False\n\n\ndef main():\n    arr = list(map(int, input(\"Enter the array: \").split()))\n    x = int(input(\"Enter the element to search: \"))\n    if sequential_search(arr, x):\n        print(f\"Found at position: {arr.index(x) + 1}\")\n    else:\n        print(\"Not found!\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Search an element in the given array by using sequential search.\n    :param arr: The array in which the element is to be searched.\n    :param ele: The element to be searched.\n    :return: Returns the index of the element if found else returns -1.\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 1)\n    0\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 6)\n    -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"\n    >>> sequential_search(array('I', [12, 34, 54, 2, 3]), 3)\n    4\n    >>> sequential_search(array('I', [12, 34, 54, 2, 3]), 1)\n    -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"i\", [1, 2, 3, 4, 5]), 5))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5) is True",
    "from array import array\nfrom random import randint\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    The sequential search algorithm compares the element to be searched\n    with elements in the given array.\n\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 3)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 10)\n    False\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 1)\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    user_input = int(input(\"Enter number of elements in array : \"))\n    arr = array(\"i\", [randint(1, 50) for i in range(user_input)])\n    print(arr)\n\n    search_element = int(input(\"Enter the element to search : \"))\n    if sequential_search(arr, search_element):\n        print(f\"{search_element} is present in the array.\")\n    else:\n        print(f\"{search_element} is not present in the array.\")",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> int:\n    \"\"\"Return the index of first occurance of item in array.\n    Return -1 if item is not present.\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == item:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 3))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3))",
    "def sequential_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\ndef main():\n    print(sequential_search([1, 2, 3, 4, 5], 4))\n    print(sequential_search([1, 2, 3, 4, 5], 6))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: List[int], element: int) -> bool:\n    \"\"\"Searches for an element in the given array by using sequential search.\n\n    Args:\n        arr (List[int]): list of elements\n        element (int): element to search\n\n    Returns:\n        bool: True if element is found, False otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\ndef main():\n    arr = array('I', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(sequential_search(arr, 10))\n\n\nif __name__ == '__main__':\n    main()",
    "def sequential_search(arr, key):\n    for index, element in enumerate(arr):\n        if element == key:\n            return index\n    return -1\n\nprint(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 11))",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: List[int], key: int) -> bool:\n    \"\"\"Search a element in the given array using sequential search.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5], 3))\n    print(sequential_search([1, 2, 3, 4, 5], 10))",
    "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return i\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sequential_search(array, 1))\n    print(sequential_search(array, 11))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"i\", [1, 3, 4, 5, 6]), 3) is True\n    assert sequential_search(array(\"i\", [1, 3, 4, 5, 6]), 10) is False",
    "def sequential_search(array, target):\n    \"\"\"\n    Sequential search algorithm\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n    return -1",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> bool:\n    \"\"\"Search an item in the given array.\n\n    Args:\n        arr (array): given array\n        item (int): item to search\n\n    Returns:\n        bool: True if item is found else False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [12, 32, 39, 21, 11]), 12))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    for index in range(len(arr)):\n        if arr[index] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3))\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6))",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: array, elem: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return True\n    return False\n\n\n# Dynamic Programming Solution\ndef sequential_search_dp(arr: array, elem: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return True\n        if arr[i] > elem:\n            return False\n    return False\n\n\n# Recursive Solution\ndef sequential_search_rec(arr: array, elem: int, index: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if index >= len(arr):\n        return False\n    if arr[index] == elem:\n        return True\n    if arr[index] > elem:\n        return False\n    return sequential_search_rec(arr, elem, index + 1)\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5))\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6))\n\n    print(sequential_search_dp(array(\"I\", [1, 2, 3, 4, 5]), 5))\n    print(sequential_search_dp(array(\"I\", [1, 2, 3, 4, 5]), 6))\n\n    print(sequential_search_rec(array(\"I\", [1, 2, 3, 4, 5]), 5, 0))\n    print(sequential_search_rec(array(\"I\", [1, 2, 3, 4, 5]), 6, 0))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        element (int): element to search\n\n    Returns:\n        bool: True if element is present, False otherwise\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(\"Sequential Search\")\n    print(\"-----------------\")\n    arr: array = array(\"I\", [1, 2, 3, 4, 5])\n    print(sequential_search(arr, 5))\n    print(sequential_search(arr, 10))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for index in range(len(arr)):\n        if arr[index] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 2, 3, 4, 5])\n    assert sequential_search(arr, 3) is True",
    "def sequential_search(array, key):\n    for i in range(len(array)):\n        if array[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 3))",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: List[float], key: float) -> int:\n    \"\"\"Sequential search.\n\n    Time Complexity: O(n)\n    \"\"\"\n    for i, value in enumerate(arr):\n        if value == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    array_: List[float] = array(\"f\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert sequential_search(array_, 10) == 9\n    assert sequential_search(array_, 11) == -1",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    >>> sequential_search(array('i', [1, 3, 4, 5, 6]), 3)\n    True\n    >>> sequential_search(array('i', [1, 3, 4, 5, 6]), 10)\n    False\n    \"\"\"\n    for index in range(len(arr)):\n        if arr[index] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef search(arr: array, element: int) -> int:\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(search(array(\"i\", [1, 2, 3, 4, 5]), 4))",
    "def sequential_search(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 6))\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 8))",
    "from array import array\n\n\ndef sequential_search(arr: array, item) -> int:\n    \"\"\"\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 3)\n    2\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    -1\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == item:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> bool:\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3) is True\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6) is False",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> int:\n    \"\"\"Searches an element in a given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        item (int): element to be searched\n\n    Returns:\n        int: index of the item if found, otherwise -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = array(\"I\", [1, 3, 2, 4, 5])\n    assert sequential_search(arr, 3) == 1\n    assert sequential_search(arr, 6) == -1",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"Search the given element in the array\n\n    Args:\n        arr (array): given array\n        ele (int): element to search\n\n    Returns:\n        bool: True if found, False otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3) == True",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> bool:\n    \"\"\"\n    Searches an element in the given array by using sequential search.\n    :param arr: given array\n    :param key: element to be searched\n    :return: True if key is found else False\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 3)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for item in arr:\n        if item == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"i\", [1, 2, 3, 4, 5]), 5) is True\n    assert sequential_search(array(\"i\", [1, 2, 3, 4, 5]), 6) is False",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Sequential Search\n    Time Complexity: O(n)\n    \"\"\"\n    for index in range(len(arr)):\n        if arr[index] == ele:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 2, 3, 4, 5])\n    print(sequential_search(arr, 2))",
    "from array import array\nfrom typing import Tuple\n\n\ndef sequential_search(arr: array, key: int) -> Tuple[int, int]:\n    \"\"\"Sequential search for an element in an array.\n\n    Args:\n        arr (array): An array of integers\n        key (int): Element to search\n\n    Returns:\n        Tuple[int, int]: A tuple containing the index of the element and the number of iterations\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return (i, i + 1)\n    return (-1, len(arr))\n\n\nif __name__ == \"__main__\":\n    arr = array(\"I\", [1, 2, 3, 4, 5])\n    print(sequential_search(arr, 5))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> int:\n    \"\"\"\n    Sequential search algorithm.\n    O(n) time complexity.\n\n    :param arr: an array to search an element in.\n    :param element: the element to search.\n    :return: index of the element if found, else -1.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    array_ = array('I', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(sequential_search(array_, 10))\n    print(sequential_search(array_, 11))",
    "def sequential_search(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\n\ndef test_sequential_search(input_array, item, expected_result):\n    result = sequential_search(input_array, item)\n    if result == expected_result:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print (\"Sequential search\")\n    test_array = [1, 2, 3, 4, 5]\n    assert test_sequential_search(test_array, 3, 2) == True\n    assert test_sequential_search(test_array, 6, -1) == True\n    print (\"PASS\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n\n    return False\n\n\n# Driver\narr = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint(sequential_search(arr, 2))\nprint(sequential_search(arr, 10))\nprint(sequential_search(arr, 100))\n\nprint(sequential_search(array(\"I\", []), 100))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: float) -> bool:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        key (float): key to search in the array\n\n    Returns:\n        bool: True if key is found in the array otherwise False\n    \"\"\"\n    for element in arr:\n        if element == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = array(\"d\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(sequential_search(arr, 10))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> int:\n    \"\"\"\n    Find the position of an element in a given array.\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 6)\n    5\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 4)\n    3\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 1)\n    0\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 10)\n    -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        ele (int): element to be searched\n\n    Returns:\n        int: index of the element if found, -1 otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 2))",
    "def sequential_search(array, n):\n    for i in range(len(array)):\n        if array[i] == n:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5], 3))\n    print(sequential_search([1, 2, 3, 4, 5], 6))\n    print(sequential_search([1, 2, 3, 4, 5], 1))\n    print(sequential_search([1, 2, 3, 4, 5], 5))",
    "from array import array\n\n\ndef sequential_search(arr: array, n: int, x: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [12, 32, 39, 46, 5, 55]), 6, 46))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3))",
    "def sequential_search(array: list, element: int) -> bool:\n    \"\"\"\n    Sequential search algorithm.\n    Time Complexity: O(n)\n    \"\"\"\n    for item in array:\n        if item == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))",
    "def search_element(array: list, element: int) -> int:\n    \"\"\"\n    This function is used to search an element in the given array by using sequential search.\n    >>> search_element([1, 2, 3, 4, 5], 5)\n    4\n    >>> search_element([1, 2, 3, 4, 5], 6)\n    -1\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\nfrom random import randint\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Return the index of the element in the array.\n    If the element is not found, return -1\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 3)\n    2\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5, 6]), 10)\n    -1\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == ele:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    user_input = int(input(\"Enter number of elements: \"))\n    arr: array = array(\"I\", [randint(1, 100) for i in range(user_input)])\n    print(\"Generated array is:\", arr)\n    search_element: int = int(input(\"Enter element to search: \"))\n    index: int = sequential_search(arr, search_element)\n    if index < 0:\n        print(f\"{search_element} not found\")\n    else:\n        print(f\"{search_element} found at index {index}\")",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 2, 3, 4, 5])\n    print(sequential_search(arr, 5))",
    "def sequential_search(arr, search_ele):\n    for index in range(len(arr)):\n        if arr[index] == search_ele:\n            return index\n\n    return -1\n\n\ndef main():\n    print(\"Sequential search:\")\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    search_ele = 5\n    result_index = sequential_search(arr, search_ele)\n    if result_index == -1:\n        print(\"Element\", search_ele, \"not found.\")\n    else:\n        print(\"Element\", search_ele, \"found at index\", result_index)\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import List\n\n\ndef sequential_search(arr: List[int], ele: int) -> int:\n    \"\"\"\n    :param arr: array of numbers\n    :param ele: element to search\n    :return: index of the element in the array if found `-1` otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8], 5))\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8], 10))",
    "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return True\n    return False\n\n\ndef main():\n    array = [12, 14, 16, 18, 20]\n    element = 14\n    print(sequential_search(array, element))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sequential_search(array: List[int], key: int) -> int:\n    \"\"\"Sequential search.\"\"\"\n    for i in range(len(array)):\n        if array[i] == key:\n            return i\n    return -1\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sequential_search_array(array: array, key: int) -> int:\n    \"\"\"Sequential search.\"\"\"\n    for i in range(len(array)):\n        if array[i] == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    ARRAY = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert sequential_search(ARRAY, 4) == 3\n    assert sequential_search(ARRAY, 11) == -1",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 3, 5, 6, 7, 8]), 7) == True",
    "def sequential_search(arr, search_element):\n    for i in range(len(arr)):\n        if arr[i] == search_element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))",
    "from array import array\n\n\ndef search(arr: array, element: int) -> int:\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(search(array(\"I\", [1, 5, 6, 7, 8]), 5))\n    print(search(array(\"I\", [1, 5, 6, 7, 8]), 9))",
    "def search_element(arr: list, search: int) -> int:\n    \"\"\"Searches an element in the given array by using sequential search\n\n    Args:\n        arr (list): Array to search the element\n        search (int): Element to search\n\n    Returns:\n        int: Index of the element if found, otherwise -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == search:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    assert search_element(arr, 4) == 3\n    assert search_element(arr, 6) == -1",
    "from array import array\n\n\ndef sequential_search(arr: array, key: float) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"d\", [1, 2, 3, 4, 5, 6]), 3))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Search an element in the given array by using sequential search.\n\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 4)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: float) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    array_: array = array(\"f\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print(sequential_search(array_, 10))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Sequential search for an element in an array\n    :param arr: Array to search\n    :param ele: Element to search\n    :return: True if element found, else False\n    >>> sequential_search(array('i', [12, 34, 56, 2, 3, 1, 5]), 56)\n    True\n    >>> sequential_search(array('i', [12, 34, 56, 2, 3, 1, 5]), 45)\n    False\n    >>> sequential_search(array('i', [12, 34, 56, 2, 3, 1, 5]), 3)\n    True\n    >>> sequential_search(array('i', [12, 34, 56, 2, 3, 1, 5]), 12)\n    True\n    \"\"\"\n    for item in arr:\n        if item == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, key: float) -> bool:\n    \"\"\"Searching the element in the given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        key (float): element to search\n\n    Returns:\n        bool: if element is found then True else False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = array(\"d\", [1, 2, 3, 4, 5])\n    assert sequential_search(arr, 3) is True\n    assert sequential_search(arr, 10) is False",
    "def search_element(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(search_element(arr, 5))",
    "from array import array\nfrom random import randint\n\n\ndef sequential_search(arr: array, target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    size: int = randint(5, 10)\n    arr: array = array(\"I\", [randint(1, 100) for _ in range(size)])\n    target: int = randint(1, 100)\n    print(f\"Random array: {arr}\")\n    print(f\"Searching for: {target}\")\n    index: int = sequential_search(arr, target)\n    print(f\"Element found at index: {index}\")",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 2))",
    "def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(\"Enter the elements of the array: \")\n    arr = [int(x) for x in input().split()]\n    print(\"Enter the element to be searched: \")\n    x = int(input())\n    print(\"The element is located at index: \", sequential_search(arr, x))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6))\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5))",
    "def sequential_search(array, n, x):\n    for i in range(0, n):\n        if array[i] == x:\n            return i\n    return -1\n\n\narray = [1,2,3,4,5]\nprint(sequential_search(array, 5, 3))",
    "def search(array, element):\n    for index, value in enumerate(array):\n        if value == element:\n            return index\n    return -1\n\n\ndef main():\n    print(search([1, 2, 3, 4, 5], 4))\n    print(search([1, 2, 3, 4, 5], 5))\n    print(search([1, 2, 3, 4, 5], 6))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5)\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6) is False",
    "def sequential_search(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 4))\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 8))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: float) -> bool:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): Input array to search element in.\n        key (float): Element to search.\n\n    Returns:\n        bool: True if element is found, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"d\", [1, 3, 5, 7, 9]), 7))\n    print(sequential_search(array(\"d\", [1, 3, 5, 7, 9]), 4))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> int:\n    \"\"\"Sequential search an element in the given array.\n\n    Args:\n        arr (array): given array\n        key (int): element to search\n\n    Returns:\n        int: index of the element if found else -1\n    \"\"\"\n    for index in range(len(arr)):\n        if arr[index] == key:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 3))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> int:\n    \"\"\"\n    Sequential search algorithm.\n    \"\"\"\n    for index, item in enumerate(arr):\n        if item == element:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 4))\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 8))",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 3, 5, 6, 7, 9]), 6))\n    print(sequential_search(array(\"I\", [1, 3, 5, 6, 7, 9]), 4))",
    "from array import array\nfrom typing import Tuple\n\n\ndef sequential_search(arr: array, element: int) -> Tuple[bool, int]:\n    \"\"\"Sequential search an element in the given array.\n\n    Args:\n        arr (array): given array\n        element (int): element to search\n\n    Returns:\n        Tuple[bool, int]:\n        first value will be True if element is found else False.\n        second value will be the index of element if found else -1.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5))",
    "from array import array\nfrom random import randint\n\n\n# pylint: disable=invalid-name\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"Sequential search.\n\n    >>> sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 6)\n    True\n    >>> sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 7)\n    False\n    \"\"\"\n    for index in range(len(arr)):\n        if arr[index] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    user_input = int(input(\"Enter number of elements : \"))\n    arr = array(\"I\", [randint(1, 20) for i in range(user_input)])\n    print(arr)\n\n    search_ele = int(input(\"Enter element to be searched : \"))\n    if sequential_search(arr, search_ele):\n        print(f\"{search_ele} is present in the given array\")\n    else:\n        print(f\"{search_ele} is not present in the given array\")",
    "from array import array\nfrom typing import Optional\n\n\ndef sequential_search(arr: array, target: float) -> Optional[int]:\n    \"\"\"Sequential search for an element in an array.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param arr: array to search for the element\n    :param target: element to search\n    :return: index of the element if found else None\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = array(\"d\", [2, 3, 4, 10, 40])\n    print(sequential_search(arr, 10))",
    "def sequential_search(array: list, item: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for index in range(len(array)):\n        if array[index] == item:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search([1, 2, 3, 4, 5, 6, 7], 8))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Return the index of the given element in the given array.\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 5)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 6)\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sequential_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\n\ndef test_sequential_search():\n    \"\"\"\n    >>> sequential_search([1, 2, 3, 4, 5], 3)\n    2\n    >>> sequential_search([1, 2, 3, 4, 5], 10)\n    -1\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> int:\n    \"\"\"\n    This function takes an array and an element and returns the position of the element\n    in the array if found, else returns -1.\n    >>> sequential_search(array('i', [12, 32, 32, 11, 12, 11]), 11)\n    3\n    >>> sequential_search(array('i', [12, 32, 32, 11, 12, 11]), 13)\n    -1\n    >>> sequential_search(array('i', [12, 32, 32, 11, 12, 11]), -1)\n    -1\n    >>> sequential_search(array('i', []), 11)\n    -1\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from array import array\n\n\ndef sequential_search(arr: array, ele: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3) is True\n    assert sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 10) is False",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    This function takes the array and element and returns True if the element\n    is found in the array else returns False.\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 3)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    False\n    >>> sequential_search(array('i', []), 1)\n    False\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sequential_search(array, key):\n    for i in range(len(array)):\n        if array[i] == key:\n            return i\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sequential_search(arr, 10))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 3, 4, 6, 7]), 7))\n    print(sequential_search(array(\"I\", [1, 3, 4, 6, 7]), 4))\n    print(sequential_search(array(\"I\", [1, 3, 4, 6, 7]), 10))",
    "from array import array\nfrom typing import Tuple\n\n\ndef sequential_search(arr: array, key: int) -> Tuple[bool, int]:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): given array\n        key (int): key to be searched\n\n    Returns:\n        Tuple[bool, int]:\n        first value will be True if key is found else False.\n        second value will be the index of key if found else -1.\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == key:\n            return True, index\n\n    return False, -1\n\n\nif __name__ == \"__main__\":\n    print(*sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 5))\n    print(*sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 6))",
    "def sequential_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [3, 4, 5, 6, 7, 8, 9]\n    key = 8\n    print(sequential_search(arr, key))",
    "from array import array\n\n\ndef search_seq(arr: array, key: int) -> int:\n    \"\"\"Search an element in the given array by using sequential search.\n\n    Args:\n        arr (array): The array to search.\n        key (int): The key to search for.\n\n    Returns:\n        int: The index of the key if it is found, else -1.\n    \"\"\"\n    for index, element in enumerate(arr):\n        if element == key:\n            return index\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(search_seq(array(\"I\", [1, 2, 3, 4, 5, 6]), 1))\n    print(search_seq(array(\"I\", [1, 2, 3, 4, 5, 6]), 7))",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> bool:\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5]), 3))",
    "from array import array\n\n\ndef sequential_search(arr: array, element: int) -> bool:\n    \"\"\"Searches for a given element in a given array.\n\n    Args:\n        arr (array): The array in which to search.\n        element (int): The element to search for.\n\n    Returns:\n        bool: True if the element is found, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = array(\"I\", [1, 3, 2, 4, 5])\n    assert sequential_search(arr, 3) is True\n    assert sequential_search(arr, 6) is False",
    "from array import array\n\n\ndef sequential_search(arr: array, key: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert sequential_search(arr, 5) is True",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> int:\n    \"\"\"Return index of item in arr if found, else return -1\"\"\"\n    for index in range(len(arr)):\n        if arr[index] == item:\n            return index\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(sequential_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 6))",
    "def sequential_search(array, item):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5]\n    item = 3\n    result = sequential_search(array, item)\n    if result == -1:\n        print(\"Element is not present in the array.\")\n    else:\n        print(\"Element is present at index\", result)",
    "from array import array\n\n\ndef sequential_search(arr: array, item: int) -> bool:\n    \"\"\"\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 3)\n    True\n    >>> sequential_search(array('i', [1, 2, 3, 4, 5]), 10)\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}