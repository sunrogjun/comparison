{
  "problem": {
    "task_id": "MBPP/65",
    "prompt": "Write a function of recursion list sum.",
    "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
    "test_list": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ],
    "challenge_test_list": [],
    "problem_id": 54
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def recursion_sum(array):\n    if len(array) == 0:\n        return 0\n    return array[0] + recursion_sum(array[1:])",
    "def recursion_list_sum(input_list):\n    if len(input_list) == 0:\n        return 0\n    else:\n        return input_list[0] + recursion_list_sum(input_list[1:])\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4, 5, 6]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\ndef test_list_sum():\n    lst = [1, 2, 3, 4, 5]\n    assert list_sum(lst) == 15\n\n\nif __name__ == '__main__':\n    test_list_sum()",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(array, total=0):\n    if array == []:\n        return total\n    else:\n        return list_sum(array[1:], total + array[0])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + list_sum(arr[1:])\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    \"\"\"\n    Return the sum of the list.\n    \"\"\"\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])",
    "def sum_recursion(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + sum_recursion(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(sum_recursion(lst))",
    "def list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def sum_recursion(lst):\n    \"\"\"\n    >>> sum_recursion([1,2,3])\n    6\n    >>> sum_recursion([1,2,3,4,5])\n    15\n    >>> sum_recursion([1,2,3,4,5,6,7])\n    28\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum_recursion(lst[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def list_sum(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5]))\n\n\n\"\"\"\n\nWrite a function of recursion list multiplication.\n\n\"\"\"\n\n\ndef list_mult(lst):\n    if lst == []:\n        return 1\n    else:\n        return lst[0] * list_mult(lst[1:])\n\n\nprint(list_mult([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(list_sum(lst))",
    "def list_sum(l):\n    if not l:\n        return 0\n    return l[0] + list_sum(l[1:])\n\n\ndef list_sum_recursive(l):\n    return l[0] + list_sum_recursive(l[1:]) if l else 0\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))\n    print(list_sum_recursive([1, 2, 3, 4, 5]))",
    "def list_sum(a_list):\n    \"\"\"\n    Return the sum of a list.\n\n    >>> list_sum([1, 2, 3])\n    6\n    >>> list_sum([1, 2, 3, 4, 5])\n    15\n    >>> list_sum([1, 2, 3, 4, 5, 6])\n    21\n    >>> list_sum([])\n    0\n    \"\"\"\n    if len(a_list) == 0:\n        return 0\n    else:\n        return a_list[0] + list_sum(a_list[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7]))",
    "def sum_list(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + sum_list(arr[1:])\n\n\nprint(sum_list([1, 2, 3, 4]))",
    "def list_sum(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))",
    "def recursion_list_sum(list_of_numbers):\n    if len(list_of_numbers) == 1:\n        return list_of_numbers[0]\n    else:\n        return list_of_numbers[0] + recursion_list_sum(list_of_numbers[1:])\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(recursion_list_sum(list_of_numbers))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef list_sum(lst: List[int]) -> int:\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == \"__main__\":\n    assert list_sum([1, 2, 3, 4, 5]) == 15\n    assert list_sum([1]) == 1\n    assert list_sum([]) == 0",
    "def sum_list(l):\n    \"\"\"Sum of list.\"\"\"\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_list(l[1:])\n\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4]))\n    print(sum_list([1, 2, 3]))\n    print(sum_list([1, 2]))\n    print(sum_list([1]))\n    print(sum_list([]))",
    "def list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + list_sum(lst[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(input_list):\n    if len(input_list) == 1:\n        return input_list[0]\n    else:\n        return input_list[0] + list_sum(input_list[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])",
    "def sum_recursion(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + sum_recursion(lst[1:])\n\n\nif __name__ == '__main__':\n    list_numbers = [1, 2, 3, 4, 5, 6]\n    print(sum_recursion(list_numbers))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\nlst = [1, 2, 3, 4, 5]\nprint(list_sum(lst))",
    "def recursion_sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + recursion_sum(arr[1:])\n\n\nprint(recursion_sum([1, 2, 3, 4, 5]))",
    "def sum_list(input_list):\n    \"\"\"\n    :param input_list: list of numbers\n    :return: sum of all numbers in the list\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise TypeError('The input is not a list')\n\n    if not input_list:\n        return 0\n    else:\n        return input_list[0] + sum_list(input_list[1:])",
    "def recursion_list_sum(array, index=0):\n    if index == len(array):\n        return 0\n    return array[index] + recursion_list_sum(array, index + 1)\n\n\ndef test_list_sum():\n    assert recursion_list_sum([1, 2, 3, 4, 5]) == 15",
    "def recursion_list_sum(my_list):\n    if len(my_list) == 0:\n        return 0\n    else:\n        return my_list[0] + recursion_list_sum(my_list[1:])\n\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5]\n    print(recursion_list_sum(my_list))",
    "def list_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + list_sum(arr[1:])",
    "def list_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + list_sum(nums[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def sum_list(lst):\n    \"\"\"\n    >>> sum_list([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + sum_list(lst[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def recursion_list_sum(list_of_nums):\n    if len(list_of_nums) == 1:\n        return list_of_nums[0]\n    else:\n        return list_of_nums[0] + recursion_list_sum(list_of_nums[1:])\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    # Base case\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\nprint(list_sum([1,2,3,4,5]))",
    "def recursion_list_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + recursion_list_sum(nums[1:])",
    "def recursion_list_sum(lst, accumulator=0):\n    if len(lst) == 0:\n        return accumulator\n    return recursion_list_sum(lst[1:], lst[0] + accumulator)\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef list_sum_recursion(nums: List[int]) -> int:\n    \"\"\"\n    Return the sum of all elements in a list.\n    >>> list_sum_recursion([1, 2, 3])\n    6\n    >>> list_sum_recursion([1, 2, 3, 4])\n    10\n    >>> list_sum_recursion([1, 2, 3, 4, 5])\n    15\n    >>> list_sum_recursion([-1, -2, -3, -4, -5])\n    -15\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + list_sum_recursion(nums[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
    "def list_sum(my_list):\n    if len(my_list) == 1:\n        return my_list[0]\n    else:\n        return my_list[0] + list_sum(my_list[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6]))",
    "def recursion_list_sum(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(recursion_list_sum(lst))",
    "def list_sum(lst):\n    \"\"\"\n    >>> list_sum([1,2,3,4,5])\n    15\n    >>> list_sum([])\n    0\n    \"\"\"\n    if lst == []:\n        return 0\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def sum_list(lst):\n    if not lst:\n        return 0\n    else:\n        return lst[0] + sum_list(lst[1:])\n\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5, 6]))",
    "def recursion_sum(array, index):\n    if index == 0:\n        return array[index]\n    return array[index] + recursion_sum(array, index - 1)\n\n\ndef recursion_sum_2(array, index, acc):\n    if index == 0:\n        return acc\n    return recursion_sum_2(array, index - 1, acc + array[index])\n\n\ndef recursion_sum_3(array, index):\n    if index == 0:\n        return array[index]\n    return array[index] + recursion_sum_3(array, index - 1)\n\n\ndef recursion_sum_4(array, index, acc):\n    if index == 0:\n        return acc\n    return recursion_sum_4(array, index - 1, acc + array[index])",
    "def sum_recursion(list_of_numbers):\n    if len(list_of_numbers) == 1:\n        return list_of_numbers[0]\n    else:\n        return list_of_numbers[0] + sum_recursion(list_of_numbers[1:])\n\n\nprint(sum_recursion([1, 2, 3, 4, 5]))",
    "def sum_recursion(lst, acc=0):\n    if not lst:\n        return acc\n    else:\n        return sum_recursion(lst[1:], acc + lst[0])",
    "def recursion_list_sum(lst):\n    \"\"\"\n    >>> recursion_list_sum([1,2,3])\n    6\n    >>> recursion_list_sum([1,2,3,4])\n    10\n    >>> recursion_list_sum([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Empty list\n    \"\"\"\n    if lst == []:\n        raise ValueError(\"Empty list\")\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def list_sum(l):\n    \"\"\"\n    >>> list_sum([])\n    0\n    >>> list_sum([1, 2, 3])\n    6\n    >>> list_sum([1, 2, 3, 4])\n    10\n    \"\"\"\n    if not l:\n        return 0\n    return l[0] + list_sum(l[1:])",
    "def list_sum(list_to_sum):\n    if len(list_to_sum) == 1:\n        return list_to_sum[0]\n    return list_to_sum[0] + list_sum(list_to_sum[1:])\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef list_sum(arr: List[int]) -> int:\n    \"\"\"\n    >>> list_sum([1,2,3])\n    6\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + list_sum(arr[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def list_sum(l):\n    if l == []:\n        return 0\n    else:\n        return l[0] + list_sum(l[1:])\n\nprint(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "from typing import List\n\n\ndef recursion_list_sum(lst: List[int]) -> int:\n    \"\"\"\n    >>> recursion_list_sum([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_recursion(lst):\n    if not lst:\n        return 0\n    else:\n        return lst[0] + sum_recursion(lst[1:])\n\n\ndef test_sum_recursion():\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    assert sum_recursion(lst) == 28",
    "def list_sum(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + list_sum(nums[1:])\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def recursion_list_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + recursion_list_sum(nums[1:])\n\n\ndef test_list_sum():\n    assert recursion_list_sum([1, 2, 3, 4, 5]) == 15",
    "def list_sum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + list_sum(l[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + list_sum(l[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5, 6]))",
    "def recursion_list_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + recursion_list_sum(arr[1:])\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4]))",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return a[0] + list_sum(a[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7]))",
    "def list_sum(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    print(list_sum(lst))",
    "def recursion_sum(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + recursion_sum(list[1:])\n\nif __name__ == '__main__':\n    print(recursion_sum([1, 2, 3, 4]))",
    "from typing import List\n\n\ndef list_sum(arr: List[int]) -> int:\n    if len(arr) == 0:\n        return 0\n    return arr[0] + list_sum(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(lst, start=0):\n    \"\"\"\n    >>> list_sum([1,2,3,4,5])\n    15\n    >>> list_sum([1,2,3,4,5,6,7,8,9,10])\n    55\n    \"\"\"\n    if len(lst) == 1:\n        return start + lst[0]\n    else:\n        return list_sum(lst[1:], start + lst[0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\ndef list_sum(my_list: List) -> int:\n    if len(my_list) == 0:\n        return 0\n    else:\n        return my_list[0] + list_sum(my_list[1:])\n\n\nif __name__ == \"__main__\":\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(nums):\n    \"\"\"\n    :type nums: list\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + list_sum(nums[1:])\n\n\ndef test_list_sum():\n    assert list_sum([1, 2, 3, 4, 5]) == 15\n\n\nif __name__ == '__main__':\n    test_list_sum()",
    "def list_sum(list_of_numbers):\n    if len(list_of_numbers) == 1:\n        return list_of_numbers[0]\n    else:\n        return list_of_numbers[0] + list_sum(list_of_numbers[1:])\n\n\ndef test_list_sum():\n    assert list_sum([1, 2, 3, 4, 5]) == 15",
    "def list_sum(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(input_list):\n    if len(input_list) == 1:\n        return input_list[0]\n    return input_list[0] + list_sum(input_list[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(a_list, index):\n    if index == len(a_list):\n        return 0\n    else:\n        return a_list[index] + list_sum(a_list, index+1)\n\n\nprint(list_sum([1, 2, 3, 4, 5], 0))",
    "def sum_recursion(my_list):\n    if len(my_list) == 1:\n        return my_list[0]\n    else:\n        return my_list[0] + sum_recursion(my_list[1:])\n\nmy_list = [1,2,3,4,5,6,7,8,9]\n\nprint(sum_recursion(my_list))",
    "def sum_list(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + sum_list(lst[1:])\n\n\ndef test_list_sum():\n    assert sum_list([1, 2, 3, 4, 5]) == 15",
    "def list_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + list_sum(nums[1:])\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(list_sum(nums))",
    "def sum_recursion(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + sum_recursion(nums[1:])\n\n\ndef test_sum_recursion():\n    assert sum_recursion([1, 2, 3, 4]) == 10",
    "def list_sum(l):\n    if not l:\n        return 0\n    else:\n        return l[0] + list_sum(l[1:])\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print list_sum(l)",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "def list_sum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return a[0] + list_sum(a[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def recursion_list_sum(my_list):\n    if len(my_list) == 1:\n        return my_list[0]\n    else:\n        return my_list[0] + recursion_list_sum(my_list[1:])\n\n\nmy_list = [1, 2, 3, 4, 5]\nprint(recursion_list_sum(my_list))",
    "def sum_of_list(lst):\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + sum_of_list(lst[1:])\n\n\nif __name__ == '__main__':\n    print(sum_of_list([1, 2, 3, 4, 5]))",
    "def recursion_list_sum(lst):\n    \"\"\"\n    >>> recursion_list_sum([])\n    0\n    >>> recursion_list_sum([1,2,3,4,5])\n    15\n    >>> recursion_list_sum([1,2,3,4,-1])\n    3\n    \"\"\"\n    if not lst:\n        return 0\n    return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def list_sum(input_list):\n    if len(input_list) == 1:\n        return input_list[0]\n    else:\n        return input_list[0] + list_sum(input_list[1:])\n\n\nif __name__ == '__main__':\n    assert list_sum([1,2,3,4,5]) == 15",
    "def list_sum(input_list, index=0):\n    if index == len(input_list):\n        return 0\n    return input_list[index] + list_sum(input_list, index + 1)\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))",
    "def list_sum(l):\n    if not l:\n        return 0\n    else:\n        return l[0] + list_sum(l[1:])\n\n\ndef test_list_sum():\n    l = [1, 2, 3, 4, 5]\n    assert 15 == list_sum(l)",
    "def list_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + list_sum(nums[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(lst, acc=0):\n    if len(lst) == 0:\n        return acc\n    else:\n        return list_sum(lst[1:], lst[0] + acc)\n\n\ndef list_sum_iter(lst):\n    acc = 0\n    for i in lst:\n        acc += i\n    return acc\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))\n    print(list_sum_iter([1, 2, 3, 4, 5]))",
    "def recursion_list_sum(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4, 5]))",
    "def recursion_list_sum(input_list):\n    \"\"\"\n    This function takes a list as input and returns the sum of the elements\n    in the list.\n    \"\"\"\n    if len(input_list) == 0:\n        return 0\n    else:\n        return input_list[0] + recursion_list_sum(input_list[1:])\n\n\nif __name__ == '__main__':\n    print(recursion_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + list_sum(arr[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))",
    "def recursion_list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + recursion_list_sum(lst[1:])",
    "from typing import List\n\n\ndef list_sum(lst: List[int]) -> int:\n    \"\"\"\n    >>> list_sum([1,2,3,4,5])\n    15\n    \"\"\"\n    if not lst:\n        return 0\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\ndef test_list_sum():\n    assert list_sum([]) == 0\n    assert list_sum([1]) == 1\n    assert list_sum([1, 2, 3, 4, 5]) == 15",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def recursion_list_sum(items, acc=0):\n    if not items:\n        return acc\n\n    return recursion_list_sum(items[1:], acc + items[0])\n\n\ndef test_list_sum():\n    assert recursion_list_sum([1, 2, 3]) == 6",
    "def list_sum(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + list_sum(list[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def list_sum(input_list):\n    \"\"\"\n    :param input_list: list of numbers\n    :return: sum of the list\n\n    >>> list_sum([1, 2, 3])\n    6\n    >>> list_sum([1, 2, 3, 4])\n    10\n    >>> list_sum([-1, 2, 3])\n    2\n    >>> list_sum([])\n    Traceback (most recent call last):\n    ...\n    ValueError: Please input a non-empty list\n    \"\"\"\n    if not input_list:\n        raise ValueError(\"Please input a non-empty list\")\n    return _list_sum(input_list, 0)\n\n\ndef _list_sum(input_list, accumulator):\n    if not input_list:\n        return accumulator\n    return _list_sum(input_list[1:], accumulator + input_list[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
    "def list_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(list_sum(lst))",
    "def sum_list(lst):\n    \"\"\"Return the sum of the list.\"\"\"\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + sum_list(lst[1:])"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}