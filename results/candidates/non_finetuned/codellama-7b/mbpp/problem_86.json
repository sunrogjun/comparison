{
  "problem": {
    "task_id": "MBPP/97",
    "prompt": "Write a function to find frequency count of list of lists.",
    "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
    "test_list": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ],
    "challenge_test_list": [],
    "problem_id": 86
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def count_frequency(lists):\n    \"\"\"\n    :param: lists - list of list of integers\n    Return frequency count of each integer.\n    \"\"\"\n    if not lists:\n        return None\n\n    count_dict = {}\n\n    for list in lists:\n        for item in list:\n            if item not in count_dict:\n                count_dict[item] = 1\n            else:\n                count_dict[item] += 1\n\n    return count_dict\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_frequency(lists)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[1, 1, 2, 3, 4, 2, 3, 5], [2, 4], [2, 3, 4]]\ntest_function(test_case_1)\n\ntest_case_2 = [[1, 2, 3, 4, 5], [2, 4], [2, 3, 4]]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 2, 3, 4, 5], [2, 4], [2, 3, 4, 5]]\ntest_function(test_case_3)\n\ntest_case_4 = [[1, 2, 3, 4, 5], [1, 1], [2, 3, 4]]\ntest_function(test_case_4)\n\ntest_case_5 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\ntest_function(test_case_5)\n\ntest_case_6 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]]\ntest_function(test_case_6",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 3, 3, 3], [4, 5, 6], [4, 5, 6, 7, 8]])\n    {1: 0, 2: 2, 3: 3, 4: 2, 5: 2, 6: 2, 7: 1, 8: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for i in list_:\n            if i not in result:\n                result[i] = 1\n            else:\n                result[i] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def frequency_count(lists):\n    result = {}\n    for list_ in lists:\n        for value in list_:\n            if value in result:\n                result[value] += 1\n            else:\n                result[value] = 1\n    return result\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = frequency_count(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nlists = [[1, 2, 2, 3, 4], [4, 4, 4, 5, 5], [5, 6, 6, 6, 6]]\nsolution = {1: 1, 2: 2, 3: 1, 4: 3, 5: 2, 6: 5}\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 9, 9, 9, 9]]\nsolution = {1: 1, 2: 1, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 4}\ntest_case = [lists, solution]\ntest_function(test_case)",
    "from collections import defaultdict\n\n\ndef find_frequency(lists, key):\n    frequency_map = defaultdict(int)\n    for list_ in lists:\n        frequency_map[list_[key]] += 1\n\n    return frequency_map\n\n\ndef main():\n    lists = [\n        ['apple', 'mango', 'orange', 'guava'],\n        ['mango', 'apple', 'orange', 'guava'],\n        ['orange', 'mango', 'guava', 'apple'],\n        ['guava', 'orange', 'apple', 'mango'],\n        ['guava', 'apple', 'mango', 'orange'],\n    ]\n\n    print(find_frequency(lists, key=0))\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4], [2,3,4,5], [4,5,6,7]])\n    {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1}\n    \"\"\"\n    return Counter(item for list_ in lists for item in list_)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    # TODO: Write your solution here\n    # return Counter(lists)\n    count = {}\n    for l in lists:\n        if l not in count:\n            count[l] = 1\n        else:\n            count[l] += 1\n    return count\n\n\ndef test(test_case, expected):\n    actual = frequency_count(test_case)\n    if expected == actual:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n\n\ntest([1, 2, 2, 3, 4, 5, 5, 5, 6, 7], {1: 1, 2: 2, 3: 1, 4: 1, 5: 3, 6: 1, 7: 1})\ntest([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 10],\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 1, 8: 4, 9: 1, 10: 1})\ntest([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 10, 10, 11],\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 1, 8: 4, 9: 1, 10: 2, 11: 1})\ntest([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10,",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 1, 2, 2], [3, 3, 4], [5, 6]])\n    {1: 4, 2: 4, 3: 4, 4: 3, 5: 2, 6: 2}\n    \"\"\"\n    flat = [item for sublist in lists for item in sublist]\n    return Counter(flat)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_frequency(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    return freq\n\n\ndef main():\n    lst = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n    print(count_frequency(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4,5,6,7], [5,6,7,8,9], [6,7,8,10,11,12], [1,2,3,4,5,6,7]])\n    {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    \"\"\"\n    count_dict = {}\n    for l in lists:\n        for v in l:\n            if v in count_dict:\n                count_dict[v] += 1\n            else:\n                count_dict[v] = 1\n    return count_dict\n\n\ndef test_frequency_count():\n    assert frequency_count([[1, 2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9], [6, 7, 8, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7]]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n        6: 2,\n        7: 2,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\nfrom typing import List, Dict\n\n\ndef count_freq(lst: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    O(n*m) & O(n)\n    \"\"\"\n    count = defaultdict(int)\n\n    for sub_lst in lst:\n        for elem in sub_lst:\n            count[elem] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_freq([[1, 2], [2, 3], [3, 1]]) == {1: 2, 2: 3, 3: 2}",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4]])\n    Counter({(1, 2, 3): 1, (1, 2, 4): 1, (2, 3, 4): 3})\n    \"\"\"\n    return Counter(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef count_freq(lists):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    freq = defaultdict(int)\n\n    for lst in lists:\n        for num in lst:\n            freq[num] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    assert count_freq([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}",
    "from collections import Counter\n\n\ndef frequency_counter(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_counter([[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3]])\n    {1: 3, 2: 3, 3: 2, 4: 2, 5: 1}\n    \"\"\"\n    counter = Counter()\n    for sublist in lists:\n        counter.update(sublist)\n    return dict(counter)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(data):\n    frequency_dict = defaultdict(int)\n    for lists in data:\n        for item in lists:\n            frequency_dict[item] += 1\n    return frequency_dict\n\n\nif __name__ == \"__main__\":\n    data = [\n        [\"A\", \"B\", \"C\", \"D\", \"E\"],\n        [\"A\", \"A\", \"B\", \"D\", \"E\"],\n        [\"A\", \"A\", \"A\", \"D\", \"E\"],\n        [\"A\", \"A\", \"A\", \"A\", \"E\"],\n        [\"A\", \"A\", \"A\", \"A\", \"A\"],\n    ]\n    print(frequency_count(data))",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [4, 5], [3, 4, 5, 6, 7], [3, 5]])\n    {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1}\n    \"\"\"\n    freq = defaultdict(int)\n\n    for list_ in lists:\n        for item in list_:\n            freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef count_freq(lists):\n    count = defaultdict(int)\n    for l in lists:\n        for i in l:\n            count[i] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 3, 3, 4], [1, 2, 3, 3, 4], [2, 3, 4, 5, 6], [1, 2, 3, 3, 4]]\n    print(count_freq(lists))",
    "def frequency_count(arr):\n    result = {}\n    for i in arr:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n\n\ndef main():\n    arr = [[1, 2, 3], [2, 3], [3, 1]]\n    print(frequency_count(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n    {1: 1, 2: 2, 3: 3, 4: 3, 5: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for item in list_:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4],[2,3,1,4],[4,5,6,7]])\n    {1: 3, 2: 3, 3: 3, 4: 3, 5: 1, 6: 1, 7: 1}\n    \"\"\"\n    freq_count = {}\n    for list_ in lists:\n        for item in list_:\n            if item in freq_count:\n                freq_count[item] += 1\n            else:\n                freq_count[item] = 1\n    return freq_count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [1, 2, 3, 4], [2, 3], [2, 3], [2, 3, 4, 5]])\n    {1: 2, 2: 3, 3: 3, 4: 2, 5: 1}\n    \"\"\"\n    count = {}\n    for list_ in lists:\n        for item in list_:\n            count[item] = count.get(item, 0) + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_freq(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict\n\n\nif __name__ == '__main__':\n    print(find_freq([[1, 2, 2, 2, 3], [2, 4, 4, 4], [1, 2, 3, 4, 5]]))",
    "from collections import Counter\n\n\ndef count_items(lists: list) -> dict:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    def counter(sub_lists: list):\n        cnt = Counter()\n        for item in sub_lists:\n            cnt[item] += 1\n        return cnt\n\n    cnt = Counter()\n    for lst in lists:\n        cnt += counter(lst)\n    return cnt\n\n\nif __name__ == \"__main__\":\n    assert count_items([[1, 2], [3, 4], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1}",
    "def count_frequency(arr, n):\n    frequency = dict()\n    for i in range(n):\n        for j in range(len(arr[i])):\n            if arr[i][j] in frequency:\n                frequency[arr[i][j]] += 1\n            else:\n                frequency[arr[i][j]] = 1\n    return frequency\n\n\narr = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [5, 6, 7, 8], [5, 6, 7, 8]]\nn = len(arr)\nprint(count_frequency(arr, n))",
    "def frequency_count(lists):\n    # TODO: Write your code here\n    count_dict = {}\n    for list in lists:\n        for item in list:\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    return count_dict\n\n\nlists = [\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n]\nprint(frequency_count(lists))",
    "from collections import defaultdict\n\n\ndef frequency_list(lists):\n    frequency = defaultdict(int)\n    for list in lists:\n        for item in list:\n            frequency[item] += 1\n    return frequency\n\n\nlists = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]\nprint(frequency_list(lists))",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 5], [2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]])\n    Counter({2: 3, 4: 3, 1: 3, 3: 3, 5: 3, 6: 2, 8: 2, 7: 2, 9: 2})\n    \"\"\"\n    result = Counter()\n    for l in lists:\n        result.update(l)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef find_freq(lst):\n    \"\"\"\n    >>> find_freq([[1, 2, 3], [2, 4], [3, 5], [1, 2, 4], [6, 7]])\n    {1: 2, 2: 3, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1}\n    \"\"\"\n    d = defaultdict(int)\n    for i in lst:\n        for j in i:\n            d[j] += 1\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def frequency_count(lists):\n    freq_dict = {}\n    for list in lists:\n        for num in list:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    return freq_dict\n\n\ndef main():\n    print(frequency_count([[1, 2, 3, 4, 1, 2], [2, 3, 3, 3, 2, 4], [1, 2, 4, 3, 5, 6]]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def count_list(lists):\n    count = {}\n    for l in lists:\n        for i in l:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_list(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[[1, 2], [3], [4, 2]], {2: 3, 4: 1, 3: 1, 1: 2}])\ntest_function([[[1, 2, 3, 4], [4], [4, 3]], {4: 3, 3: 2, 1: 1, 2: 1}])",
    "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1,2,3], [1,2,3], [1,2], [1,2,3,4], [1,2,3]])\n    defaultdict(<class 'int'>, {1: 4, 2: 4, 3: 3, 4: 1})\n    \"\"\"\n    frequency = defaultdict(int)\n\n    for list_ in lists:\n        for item in list_:\n            frequency[item] += 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2], [3, 2], [1, 2], [3, 2], [3, 2]])\n    Counter({2: 4, 3: 3, 1: 2})\n    >>> frequency_count([[1, 2], [3, 2], [1, 2], [3, 2], [3, 2], [3, 2]])\n    Counter({2: 5, 3: 4, 1: 2})\n    \"\"\"\n    c = Counter()\n    for i in lists:\n        c.update(i)\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])\n    [[1, 2], [2, 1], [3, 2], [4, 3], [5, 2], [6, 1]]\n    \"\"\"\n    # O(n*m)\n    # n = number of lists\n    # m = number of elements in each list\n\n    count = defaultdict(int)\n\n    for list_ in lists:\n        for element in list_:\n            count[element] += 1\n\n    return [[key, value] for key, value in count.items()]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef freq_count(lists):\n    freq = defaultdict(int)\n\n    for item in lists:\n        freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    lists = [\"a\", \"b\", \"a\", \"c\", \"d\", \"b\", \"a\"]\n    print(freq_count(lists))",
    "def frequency_count(lists):\n    \"\"\"\n    :param: lists - list of lists\n    return: list of tuples - [(item, count)]\n    \"\"\"\n    result = []\n    for item in lists:\n        result.append((item, lists.count(item)))\n    return result\n\nlists = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n\nprint(frequency_count(lists))",
    "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of list of integers\n    :return: list of list of frequency count\n    \"\"\"\n    return [list(Counter(i).values()) for i in lists]\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = frequency_count(lists)\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nlists = [[1, 2, 2, 3], [2, 3, 5, 4, 2, 1, 1, 4, 3, 2]]\nsolution = [[2, 1, 2, 1], [5, 3, 2, 6, 2]]\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7], [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]]\nsolution = [[7, 3, 2, 2, 2, 1, 1], [7, 4, 3, 2, 2, 1, 1]]\ntest_case = [lists, solution]\ntest_function(test_case)",
    "from collections import defaultdict\n\n\ndef freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2], [3, 4], [5, 6]])\n    defaultdict(<class 'int'>, {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    counts = defaultdict(int)\n    for list_ in lists:\n        for element in list_:\n            counts[element] += 1\n    return counts\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Find the frequency count of the given list of lists.\n    :param lists: list of lists\n    :return: dict of frequency count\n    \"\"\"\n    # Counter is a subclass of dict, so it can be used as dict.\n    return Counter(map(tuple, lists))\n\n\nif __name__ == \"__main__\":\n    print(frequency_count([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))",
    "from collections import defaultdict\nfrom typing import List, DefaultDict\n\n\ndef freq_count(lists: List[List[int]]) -> DefaultDict[int, int]:\n    \"\"\"Finds frequency count of a list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        DefaultDict[int, int]: frequency count of elements\n    \"\"\"\n    freq: DefaultDict[int, int] = defaultdict(int)\n\n    for lst in lists:\n        for i in lst:\n            freq[i] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    assert freq_count([[1, 1, 2], [2, 3], [3, 1, 1, 1, 2, 2, 2]]) == {1: 6, 2: 5, 3: 2}",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    c = Counter()\n    for l in lists:\n        c += Counter(l)\n    return c\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3, 4], [2, 3, 3], [3, 3], [1, 2, 2]]\n    print(frequency_count(lists))",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 3], [3, 2, 1], [4, 5, 6]])\n    {1: 2, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1}\n    \"\"\"\n    counter = {}\n    for list in lists:\n        for item in list:\n            counter[item] = counter.get(item, 0) + 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"Return frequency count of lists.\"\"\"\n    return Counter(lists)\n\n\nif __name__ == '__main__':\n    list_ = [\n        [1, 2, 3],\n        [1, 2, 3],\n        [4, 5, 6],\n        [4, 5, 6],\n        [4, 5, 6],\n    ]\n    print(frequency_count(list_))",
    "from collections import defaultdict\n\n\ndef find_freq_count(lists):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    freq = defaultdict(int)\n\n    for lst in lists:\n        for item in lst:\n            freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 2, 3, 4], [2, 3, 4, 5, 5], [3, 4, 5, 6, 6]]\n    print(find_freq_count(lists))",
    "def frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 4]])\n    {1: 2, 2: 3, 3: 2, 4: 2}\n    >>> frequency_count([[1, 2], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 4]])\n    {1: 3, 2: 5, 3: 2, 4: 1}\n    \"\"\"\n    result = {}\n    for sublist in arr:\n        for i in sublist:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2, 2], [1, 2, 3], [1, 3, 4], [1, 3, 5]])\n    Counter({1: 4, 2: 3, 3: 3, 5: 1})\n    \"\"\"\n    ctr = Counter()\n    for list_ in lists:\n        for item in list_:\n            ctr[item] += 1\n    return ctr\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [2, 3, 4], [2, 3, 4]])\n    {1: 1, 2: 3, 3: 3, 4: 1}\n    \"\"\"\n    result: dict = {}\n    for list_ in lists:\n        for item in list_:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\nfrom typing import List\n\n\ndef find_frequency_of_list_of_lists(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    return [value[1] for value in Counter(flat_list).most_common()]\n\n\nif __name__ == \"__main__\":\n    assert find_frequency_of_list_of_lists(\n        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]\n    ) == [6, 5, 4, 3]",
    "from collections import Counter\nfrom typing import List\n\n\ndef frequency_count(list_of_lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n    freq_count: List[List[int]] = []\n\n    for list_ in list_of_lists:\n        freq = Counter(list_)\n        freq_count.append([*freq.values()])\n\n    return freq_count\n\n\nif __name__ == \"__main__\":\n    assert (\n        frequency_count(\n            [[2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4]]\n        )\n        == [[5], [5], [5], [5], [5]]\n    )\n    assert (\n        frequency_count(\n            [[2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [1, 2, 3]]\n        )\n        == [[5], [5], [5], [5], [5], [1]]\n    )",
    "from collections import defaultdict\n\n\ndef find_freq(lists: list) -> dict:\n    \"\"\"\n    >>> find_freq([[1, 2, 3, 4], [1, 2, 3], [2, 3, 4, 5]])\n    defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 3, 4: 2, 5: 1})\n    \"\"\"\n    freq: defaultdict = defaultdict(int)\n    for i in lists:\n        for j in i:\n            freq[j] += 1\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_freq_count(lst):\n    freq_count = {}\n    for elem in lst:\n        if elem in freq_count:\n            freq_count[elem] += 1\n        else:\n            freq_count[elem] = 1\n\n    return freq_count\n\n\ndef main():\n    lst = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],",
    "from collections import Counter\n\ndef frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1,2,3],[4,5,6],[1,2,3]])\n    Counter({1: 3, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    res = Counter()\n    for x in arr:\n        res.update(x)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\ndef freq(lists):\n    counter = Counter()\n\n    for l in lists:\n        for e in l:\n            counter[e] += 1\n\n    return counter\n\nlists = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6]]\nprint(freq(lists))",
    "from collections import Counter\nfrom functools import reduce\n\n\ndef frequency_count(lst):\n    return Counter(reduce(lambda x, y: x + y, lst))\n\n\ndef main():\n    result = frequency_count([[1, 2, 3, 2, 1], [2, 3, 1, 1]])\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\nfrom typing import List, Dict\n\n\ndef count_frequency(lists: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    >>> count_frequency([[1, 2, 3], [2, 1], [1, 2, 3], [1, 2, 3]])\n    {1: 4, 2: 4, 3: 3}\n    \"\"\"\n    frequency: Dict[int, int] = defaultdict(int)\n    for list_ in lists:\n        for element in list_:\n            frequency[element] += 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef freq_count(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> freq_count([[2, 1, 2, 2, 2, 3], [2, 3, 3, 3, 3, 2], [1, 2, 3, 2, 1, 2]])\n    [1, 2, 2, 3, 3, 3]\n    \"\"\"\n    if not arr:\n        return []\n\n    hash_map: dict = {}\n\n    for i in range(len(arr[0])):\n        for j in range(len(arr)):\n            if arr[j][i] not in hash_map:\n                hash_map[arr[j][i]] = 1\n            else:\n                hash_map[arr[j][i]] += 1\n\n    return [v for k, v in hash_map.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(arr: list) -> dict:\n    \"\"\"\n    :param arr: list of lists\n    :return: dict with count of frequency\n    >>> frequency_count([[1, 1, 2], [1, 2], [1, 2], [1, 2, 2]])\n    {1: 4, 2: 4, (1, 2): 3}\n    \"\"\"\n    # return Counter(tuple(x) for x in arr)\n    dict_ = defaultdict(int)\n    for i in arr:\n        dict_[tuple(i)] += 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef count_list(l):\n    \"\"\"\n    Time complexity: O(n*m).\n    Space complexity: O(n*m).\n    \"\"\"\n    # Edge case.\n    if not l:\n        return {}\n\n    # Count frequency.\n    count = defaultdict(int)\n    for i in l:\n        for j in i:\n            count[j] += 1\n\n    return count\n\n\ndef main():\n    # list of lists\n    l = [[1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6]]\n    print count_list(l)\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2], [1, 2, 3], [1, 3, 4], [2, 3, 4]])\n    [[1, 3], [2, 2], [3, 2], [4, 1]]\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return [[k, v] for k, v in counter.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_freq_count(list_of_lists):\n    \"\"\"\n    >>> find_freq_count([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3]])\n    {1: 3, 2: 3, 3: 2, 4: 2, 5: 1}\n    \"\"\"\n    # return a dictionary of frequencies\n    # frequency count of each list\n    # iterate over each list and increment the frequency of each element\n    # return the dictionary\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def frequency_count(lst):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5], [1, 2, 3, 4, 5]])\n    [1, 1, 1, 2, 2]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5]])\n    [3, 2, 2, 1, 1]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3]])\n    [4, 3, 3, 2, 2]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3], [1, 2, 3], [4, 5]])\n    [5, 4, 4, 3, 3]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3], [1, 2, 3], [4, 5], [1, 2, 3]])\n    [6, 5, 5, 4, 4]\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [1] * len(lst[0])\n    freq = [1] * len(lst[0])\n    for i in range(1, len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] in lst[i - 1]:\n                fre",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"Find frequency count of list of lists.\"\"\"\n    return Counter([y for x in lists for y in x])\n\n\nif __name__ == '__main__':\n    print(frequency_count([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5]]))",
    "def frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 2, 3, 4], [1, 1, 2, 3, 4], [1, 2, 2, 2, 3]])\n    {1: 3, 2: 4, 3: 2, 4: 2}\n    \"\"\"\n    frequency = {}\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] not in frequency:\n                frequency[arr[i][j]] = 1\n            else:\n                frequency[arr[i][j]] += 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2, 3, 4], [2, 3, 1, 4], [3, 4, 2, 1]])\n    {1: 3, 2: 3, 3: 3, 4: 3}\n    \"\"\"\n    result = {}\n    for lst in lists:\n        for i in lst:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2],[1,3],[2,1,4],[3,2],[4,1]])\n    Counter({1: 3, 2: 2, 3: 2, 4: 2})\n    \"\"\"\n    c = Counter()\n    for list_ in lists:\n        for item in list_:\n            c[item] += 1\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5, 6], [1, 2, 3]])\n    Counter({1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: frequency count of lists\n    \"\"\"\n    if not lists:\n        return\n    count = defaultdict(int)\n    for sublist in lists:\n        for element in sublist:\n            count[element] += 1\n    return count\n\n\ndef main():\n    \"\"\"\n    >>> frequency_count([[1, 1, 2], [3], [2]])\n    {1: 2, 2: 2, 3: 1}\n    >>> frequency_count([])\n    >>> frequency_count([[1, 1], [1, 2], [1, 2], [1, 2], [1, 2]])\n    {1: 4, 2: 3}\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1, 2, 3, 4]])\n    {1: 4, 2: 4, 3: 3, 4: 2, 5: 1}\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4]])\n    {1: 5, 2: 5, 3: 4, 4: 3, 5: 2}\n    \"\"\"\n    counts = {}\n    for l in lists:\n        for item in l:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n    return counts\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1, 2], [1, 3], [1, 4], [1, 5], [3, 2], [4, 2]])\n    defaultdict(<class 'int'>, {1: 4, 2: 3, 3: 1, 4: 1})\n    \"\"\"\n    count: defaultdict = defaultdict(int)\n    for list_ in lists:\n        count[list_[0]] += 1\n        count[list_[1]] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\n    defaultdict(<class 'int'>, {3: 3, 2: 3, 1: 3, 4: 1})\n    \"\"\"\n    frequency = defaultdict(int)\n\n    for list_ in lists:\n        for element in list_:\n            frequency[element] += 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def freq_count(ls):\n    \"\"\"\n    >>> freq_count([[1, 2, 3, 4, 5], [2, 4, 5, 6], [2, 3, 4, 7]])\n    [[5, 1], [2, 3], [4, 3], [6, 1], [7, 1]]\n    \"\"\"\n    count = {}\n    for list_ in ls:\n        for num in list_:\n            count[num] = count.get(num, 0) + 1\n    return [[num, freq] for num, freq in count.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    Counter({1: 4, 2: 4, 3: 4, 4: 4})\n    >>> frequency_count([[1, 2, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3]])\n    Counter({1: 5, 2: 5, 3: 4, 4: 4})\n    \"\"\"\n    return Counter(sum(lists, []))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def count_lists(lists):\n    \"\"\"\n    Returns frequency count of list of lists\n\n    Args:\n       lists(list): list of lists\n    Returns:\n       dict: frequency count of list of lists\n    \"\"\"\n    freq = {}\n    for elem in lists:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_lists(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[[1, 2], [3], [3]], {1: 1, 2: 1, 3: 2}])\ntest_function([[[1, 2], [3], [3], [1, 2]], {1: 2, 2: 2, 3: 1}])\ntest_function([[[1, 2], [3], [3], [1, 2], [1, 2]], {1: 3, 2: 1, 3: 1}])",
    "def frequency_count(lists):\n    result = {}\n    for l in lists:\n        for i in l:\n            if i not in result:\n                result[i] = 1\n            else:\n                result[i] += 1\n    return result\n\n\nlists = [[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5]]\nprint(frequency_count(lists))",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    This function counts the frequency of each element in the list.\n    >>> frequency_count([[1, 2, 3, 4], [4, 5, 6, 4, 1]])\n    Counter({1: 2, 4: 3, 2: 1, 3: 1, 5: 1, 6: 1})\n    >>> frequency_count([[1, 2, 3, 4], [1, 3, 4, 5]])\n    Counter({1: 2, 2: 1, 3: 2, 4: 2, 5: 1})\n    \"\"\"\n    total_list = []\n\n    for i in lists:\n        total_list += i\n\n    return Counter(total_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\nfrom typing import List\n\n\ndef freq_list(lists: List[List[int]]) -> Counter:\n    \"\"\"Returns frequency count of list of lists.\n\n    Args:\n        lists: list of lists\n\n    Examples:\n        >>> assert freq_list([[1, 2, 3], [1, 2, 3], [4, 5, 6]]) == Counter({(1, 2, 3): 2, (4, 5, 6): 1})\n    \"\"\"\n    return Counter([tuple(lst) for lst in lists])\n\n\nif __name__ == \"__main__\":\n    print(freq_list([[1, 2, 3], [1, 2, 3], [4, 5, 6]]))",
    "def freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8], [9, 10]]\n    print(freq_count(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\ndef freq_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dict with keys as elements and values as frequency\n    \"\"\"\n    d = defaultdict(int)\n    for lst in lists:\n        for el in lst:\n            d[el] += 1\n    return d\n\nif __name__ == \"__main__\":\n    print freq_count([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 1], [5, 2, 6, 1, 2], [2, 2, 5, 1, 5]])\n    {1: 4, 2: 7, 5: 4, 3: 1, 4: 1, 6: 1}\n    \"\"\"\n    dict_ = {}\n    for list_ in lists:\n        for item in list_:\n            dict_[item] = dict_.get(item, 0) + 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 1], [2, 3, 4, 2], [3, 4, 5, 3]])\n    Counter({1: 2, 2: 2, 3: 2, 4: 2, 5: 1})\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef count_freq(lists):\n    \"\"\"\n    >>> count_freq([[1, 1, 2], [2, 3], [1, 3], [1, 3], [3, 4, 5, 1]])\n    defaultdict(<class 'int'>, {1: 4, 2: 2, 3: 3, 5: 1})\n    \"\"\"\n    if not lists:\n        return defaultdict(int)\n    count = defaultdict(int)\n    for item in lists:\n        for i in item:\n            count[i] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def count_frequency(lists):\n    \"\"\"\n    >>> count_frequency([[1, 2, 3], [1, 2, 3], [2, 3, 4]])\n    [[1, 2], [1, 2], [2, 3], [3, 1], [2, 3], [3, 1]]\n    \"\"\"\n    count = []\n    for i in lists:\n        count.append(i.sort())\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 2], [2, 3, 4, 5, 6], [5, 6, 7, 8]])\n    {1: 1, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for item in list_:\n            if item not in result:\n                result[item] = 0\n            result[item] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Finds the frequency count of a list of lists.\n    :param lists: list of lists\n    :return: frequency count\n    \"\"\"\n    dict_ = defaultdict(int)\n    for list_ in lists:\n        for item in list_:\n            dict_[item] += 1\n    return dict_\n\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    lists = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n    print(frequency_count(lists))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef frequency_list(lst):\n    \"\"\"Get frequency count of list of lists.\"\"\"\n    return Counter(map(tuple, lst))\n\n\nif __name__ == \"__main__\":\n    assert frequency_list([[1, 2], [1, 2], [1, 2], [1, 3], [1, 3]]) == {\n        (1, 2): 3,\n        (1, 3): 2,\n    }",
    "from collections import defaultdict\n\n\ndef freq_count(lists: list) -> dict:\n    \"\"\"\n    >>> freq_count([[1, 2], [1, 3], [1, 2], [1, 3]])\n    {1: 4, 2: 2, 3: 2}\n    \"\"\"\n    freq: defaultdict = defaultdict(int)\n\n    for i in lists:\n        for j in i:\n            freq[j] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    Frequency count of list of lists.\n    \"\"\"\n\n    counter = Counter()\n    for lst in lists:\n        counter.update(lst)\n    return counter\n\n\ndef test_frequency_count():\n    \"\"\"\n    Tests for frequency_count\n    \"\"\"\n    assert frequency_count([[1, 1, 2], [2, 3], [2, 3, 4], [2, 3]]) == {1: 3, 2: 4, 3: 3, 4: 1}\n    assert frequency_count([[1, 2, 3], [3, 4]]) == {1: 1, 2: 1, 3: 2, 4: 1}\n\n\nif __name__ == '__main__':\n    test_frequency_count()",
    "from collections import Counter\n\n\ndef find_frequency(lists):\n    \"\"\"\n    Find frequency count of list of lists.\n    :param lists: list of lists.\n    :return: dict.\n    \"\"\"\n    return Counter(tuple(x) for x in lists)",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [2, 4], [2, 4, 6, 8]])\n    {1: 1, 2: 3, 3: 1, 4: 2, 6: 1, 8: 1}\n    \"\"\"\n    dict_ = defaultdict(int)\n    for list_ in lists:\n        for item in list_:\n            dict_[item] += 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def freq(list_of_lists):\n    \"\"\"\n    >>> freq([[1, 2, 3, 2, 1], [2, 3, 4, 2, 1], [3, 4, 5, 4, 1]])\n    {1: 3, 2: 4, 3: 4, 4: 4, 5: 1}\n    \"\"\"\n    freq_count = {}\n    for l in list_of_lists:\n        for i in l:\n            if i not in freq_count:\n                freq_count[i] = 1\n            else:\n                freq_count[i] += 1\n    return freq_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    Returns a dictionary with frequency count of lists.\n    \"\"\"\n    counts = defaultdict(int)\n\n    for list_item in lists:\n        counts[list_item] += 1\n\n    return counts\n\n\nif __name__ == \"__main__\":\n    assert frequency_count([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n    }",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef frequency_count(lst: List[List[int]]) -> dict:\n    \"\"\"\n    :param lst: list of lists\n    :return: dictionary containing frequency count of elements\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3]])\n    defaultdict(<class 'int'>, {1: 3, 2: 3, 3: 3, 4: 2, 5: 1})\n    \"\"\"\n    result = defaultdict(int)\n    for sub_lst in lst:\n        for num in sub_lst:\n            result[num] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_frequency(arr):\n    dict = {}\n    for i in arr:\n        for j in i:\n            if j in dict:\n                dict[j] += 1\n            else:\n                dict[j] = 1\n    return dict\n\n\ndef main():\n    arr = [\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n    ]\n\n    print(count_frequency(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9]])\n    {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    result = {}\n    for list in lists:\n        for item in list:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef count_frequency(lists):\n    # get a flatten list\n    flat_list = [item for sublist in lists for item in sublist]\n    return Counter(flat_list)\n\n\nif __name__ == \"__main__\":\n    print(count_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]))",
    "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dict of key, value pairs\n    \"\"\"\n\n    freq_dict = defaultdict(int)\n    for item in lists:\n        freq_dict[item] += 1\n    return freq_dict\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 5],\n        [1, 2, 3, 6],\n        [1, 2, 3, 7],\n    ]\n    print(frequency_count(lists))",
    "def freq_list_of_list(lists):\n    freq = {}\n    for lst in lists:\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq\n\n\nlists = [\n    ['a', 'b', 'a', 'c', 'd', 'a'],\n    ['b', 'a', 'a', 'c', 'd', 'a'],\n    ['a', 'b', 'a', 'c', 'd', 'a'],\n]\nprint(freq_list_of_list(lists))",
    "from collections import Counter\n\n\ndef count_frequency(lists):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    cnt = Counter()\n    for item in lists:\n        cnt[item] += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    assert count_frequency([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n    assert count_frequency([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n    }\n    assert count_frequency([\"a\", \"b\", \"c\", \"d\", \"e\"]) == {\n        \"a\": 1,\n        \"b\": 1,\n        \"c\": 1,\n        \"d\": 1,\n        \"e\": 1,\n    }\n    assert count_frequency([\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"b\", \"c\", \"d\", \"e\"]) == {\n        \"a\": 2,\n        \"b\": 2,\n        \"c\": 2,\n        \"d\": 2,\n        \"e\": 2,\n    }\n    assert count_frequency([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == {\n        \"a\": 3,\n        \"b\": 2,\n        \"c\": 3,\n    }",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [2, 3, 4]])\n    Counter({2: 3, 3: 3, 4: 2, 1: 1})\n    \"\"\"\n    return Counter(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Find frequency count of list of lists.\n    \"\"\"\n    counter = Counter()\n    for i in lists:\n        counter.update(i)\n    return counter\n\n\ndef main():\n    \"\"\"\n    Print frequency count of list of lists.\n    \"\"\"\n    lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\n    print(frequency_count(lists))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\n\ndef frequency_count(lst):\n    \"\"\"Returns the frequency count of list of lists.\n\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2], [1, 2, 3]])\n    defaultdict(<class 'int'>, {1: 3, 2: 3, 3: 2, 4: 1})\n    \"\"\"\n    result = defaultdict(int)\n\n    for sub_list in lst:\n        for item in sub_list:\n            result[item] += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def freq_count(lists):\n    count = {}\n    for list_ in lists:\n        for item in list_:\n            if item not in count:\n                count[item] = 1\n            else:\n                count[item] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print freq_count([[1, 2, 3], [2, 3, 4], [3, 4, 5], [3, 4, 5]])"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}