{
  "problem": {
    "task_id": "MBPP/191",
    "prompt": "Write a function to check whether the given month name contains 30 days or not.",
    "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
    "test_list": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ],
    "challenge_test_list": [],
    "problem_id": 180
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def check_days_in_month(month_name):\n    if month_name.lower() in (\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"):\n        return \"{} has 31 days\".format(month_name)\n    elif month_name.lower() in (\"april\", \"june\", \"september\", \"november\"):\n        return \"{} has 30 days\".format(month_name)\n    else:\n        return \"{} is an invalid month\".format(month_name)\n\n\nif __name__ == \"__main__\":\n    print(check_days_in_month(\"January\"))\n    print(check_days_in_month(\"February\"))\n    print(check_days_in_month(\"December\"))\n    print(check_days_in_month(\"Nov\"))",
    "from datetime import date\n\n\ndef check_days_in_month(month):\n    \"\"\"\n    Return True if given month has 30 days, else False.\n\n    :param month: str\n    :return: bool\n    \"\"\"\n    return date(2020, int(month), 30).replace(day=28).day == 30\n\n\nif __name__ == \"__main__\":\n    assert check_days_in_month(\"March\") is False, \"March does not have 30 days\"\n    assert check_days_in_month(\"April\") is True, \"April has 30 days\"\n    assert check_days_in_month(\"June\") is True, \"June has 30 days\"",
    "def check_days(month):\n    return month in (\"JANUARY\", \"MARCH\", \"MAY\", \"JULY\", \"AUGUST\", \"OCTOBER\", \"DECEMBER\")\n\n\nif __name__ == \"__main__\":\n    print(check_days(\"JANUARY\"))",
    "from calendar import monthrange\n\n\ndef month_length(month_name):\n    month_names = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    return month_names[month_name]\n\n\nif __name__ == \"__main__\":\n    print(month_length(\"January\"))\n    print(month_length(\"February\"))",
    "from datetime import datetime\n\n\ndef days_in_month(month_name):\n    month_names = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    return month_names[month_name]\n\n\nif __name__ == '__main__':\n    month_name = input()\n    print(days_in_month(month_name))",
    "def month_30(month: str) -> bool:\n    \"\"\"\n    >>> month_30(\"June\")\n    True\n    >>> month_30(\"January\")\n    False\n    >>> month_30(\"March\")\n    True\n    >>> month_30(\"April\")\n    True\n    >>> month_30(\"May\")\n    True\n    >>> month_30(\"July\")\n    True\n    >>> month_30(\"August\")\n    True\n    >>> month_30(\"September\")\n    True\n    >>> month_30(\"October\")\n    True\n    >>> month_30(\"November\")\n    True\n    >>> month_30(\"December\")\n    True\n    \"\"\"\n    return month in [\n        \"June\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_days(month: str) -> bool:\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    print(check_days(\"June\"))",
    "def is_month_30(month: str) -> bool:\n    \"\"\"\n    >>> is_month_30('March')\n    True\n    >>> is_month_30('February')\n    False\n    \"\"\"\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_month_30(month):\n    \"\"\"\n    >>> is_month_30(\"March\")\n    True\n    >>> is_month_30(\"April\")\n    False\n    \"\"\"\n    days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 30,\n        \"April\": 31,\n        \"May\": 30,\n        \"June\": 31,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return days.get(month) == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\nMONTHS = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef has_30_days(month: str) -> bool:\n    \"\"\"Checks whether the given month has 30 days or not.\n\n    Args:\n        month (str): The name of the month to check.\n\n    Examples:\n        >>> assert has_30_days(\"March\")\n        >>> assert has_30_days(\"June\")\n        >>> assert not has_30_days(\"July\")\n    \"\"\"\n    return date(2018, MONTHS.index(month) + 1, 30).replace(day=28) == date(\n        2018, MONTHS.index(month) + 1, 30\n    )\n\n\nif __name__ == \"__main__\":\n    print(has_30_days(\"March\"))",
    "def month_30_days(month):\n    \"\"\"\n    >>> month_30_days('January')\n    True\n    >>> month_30_days('February')\n    False\n    >>> month_30_days('April')\n    True\n    >>> month_30_days('October')\n    True\n    >>> month_30_days('December')\n    True\n    \"\"\"\n    month_30_days_dict = {\n        \"January\": True,\n        \"March\": True,\n        \"May\": True,\n        \"July\": True,\n        \"August\": True,\n        \"October\": True,\n        \"December\": True,\n    }\n    return month in month_30_days_dict\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Solution\n\nfrom datetime import datetime\n\ndef month_name(month):\n    \"\"\"Check if the given month has 30 days or not.\"\"\"\n\n    month = month.capitalize()\n    days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    days_30 = [\"February\"]\n\n    if month in days:\n        return True\n\n    elif month in days_30:\n        return False\n\n    elif month == \"February\":\n        year = datetime.now().year\n        if year % 4 == 0:\n            return True\n        else:\n            return False\n\n    else:\n        return \"Invalid month name.\"\n\n# Tests\ndef test(month):\n\n    result = month_name(month)\n\n    if result:\n        print(f\"The month {month} has 30 days.\")\n    else:\n        print(f\"The month {month} has 31 days.\")\n\n\ntest(\"february\")\ntest(\"January\")\ntest(\"March\")\ntest(\"April\")\ntest(\"May\")\ntest(\"June\")\ntest(\"July\")\ntest(\"August\")\ntest(\"September\")\ntest(\"October\")\ntest(\"November\")\ntest(\"December\")\n\ntest(\"February\")\ntest(\"Feb\")\ntest(\"Feb.\")\ntest(\"Febraury\")\ntest(\"Februay\")\ntest(\"Februray\")\ntest(\"Febuary\")\ntest(\"Febuarry\")\ntest(\"Feburary\")\ntest(\"Febryary\")\ntest(\"Feburry\")\n\ntest(\"June\")\ntest(\"Jun\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")\ntest(\"June\")",
    "from datetime import datetime\n\n\ndef check_month_days(month_name):\n    \"\"\"Checks whether the given month name contains 30 days or not.\n\n    Args:\n        month_name (str): Name of the month.\n\n    Returns:\n        bool: True if the month has 30 days, else False.\n    \"\"\"\n    if month_name in [\"April\", \"June\", \"September\", \"November\"]:\n        return True\n    elif month_name in [\"February\"]:\n        if datetime.now().year % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(check_month_days(\"June\"))",
    "def month_days(month: str) -> bool:\n    return month in ('Jan', 'Mar', 'May', 'Jul', 'Aug', 'Oct', 'Dec')\n\n\nif __name__ == \"__main__\":\n    print(month_days('Jan'))\n    print(month_days('Feb'))",
    "from datetime import datetime\n\n\ndef month_days(month_name):\n    month_names = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n    month_dict = dict(zip(month_names, [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]))\n    if month_name in month_names:\n        return month_dict[month_name]\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(month_days(\"March\"))\n    print(month_days(\"February\"))",
    "from datetime import date\nfrom collections import namedtuple\n\nMONTHS = (\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n)\n\n\ndef month_name(month):\n    return MONTHS[month - 1]\n\n\ndef check_30_days(month):\n    Month = namedtuple(\"Month\", \"name days\")\n    months = (\n        Month(\"January\", 31),\n        Month(\"February\", 28),\n        Month(\"March\", 31),\n        Month(\"April\", 30),\n        Month(\"May\", 31),\n        Month(\"June\", 30),\n        Month(\"July\", 31),\n        Month(\"August\", 31),\n        Month(\"September\", 30),\n        Month(\"October\", 31),\n        Month(\"November\", 30),\n        Month(\"December\", 31),\n    )\n    return [month.name for month in months if month.days == 30]\n\n\ndef check_30_days_func(month):\n    return month in check_30_days(month)\n\n\ndef check_30_days_func_2(month):\n    return month_name(month) in check_30_days(month)\n\n\ndef check_30_days_func_3(month):\n    return month_name(month) in check_30_days(month)\n\n\ndef main():\n    month = 5\n    result = check_30_days_func(month)\n    result_2 = check_30_days_func_2(month)\n    result_3 = check_30_days_func_3(month)\n    print(result)\n    print(result_2)\n    print(result_3)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def month_has_30_days(month_name: str) -> bool:\n    \"\"\"\n    >>> month_has_30_days(\"March\")\n    True\n    >>> month_has_30_days(\"April\")\n    False\n    \"\"\"\n    months_30_days = [\n        \"January\",\n        \"March\",\n        \"May\",\n        \"July\",\n        \"August\",\n        \"October\",\n        \"December\",\n    ]\n    return month_name in months_30_days\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import OrderedDict\n\n\ndef check_month_days(month: str) -> bool:\n    \"\"\"Checks whether the given month name contains 30 days or not.\n\n    Args:\n        month (str): the name of the month to be checked.\n\n    Returns:\n        bool: True if the given month name contains 30 days, False otherwise.\n    \"\"\"\n    month_days = OrderedDict({\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    })\n\n    return month_days[month] == 30\n\n\ndef main():\n    print(check_month_days(\"January\"))\n    print(check_month_days(\"February\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from datetime import date\n\n\ndef is_30_days(month_name):\n    return date(2021, get_month_index(month_name), 30).replace(day=1).month != get_month_index(month_name)\n\n\ndef get_month_index(month_name):\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    return month_names.index(month_name) + 1\n\n\nif __name__ == \"__main__\":\n    print(is_30_days(\"January\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"March\"))\n    print(is_30_days(\"April\"))\n    print(is_30_days(\"May\"))\n    print(is_30_days(\"June\"))\n    print(is_30_days(\"July\"))\n    print(is_30_days(\"August\"))\n    print(is_30_days(\"September\"))\n    print(is_30_days(\"October\"))\n    print(is_30_days(\"November\"))\n    print(is_30_days(\"December\"))",
    "def month_check(month):\n    months = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    if month in months:\n        return \"30 days\"\n    else:\n        return \"31 days\"\n\nprint(month_check(\"June\"))\nprint(month_check(\"January\"))",
    "def month_has_30_days(month):\n    months_30_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    if month in months_30_days:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(month_has_30_days('January'))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert month_has_30_days(\"April\") == False\n    assert month_has_30_days(\"January\") == True\n    assert month_has_30_days(\"March\") == True\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "# Solution\n\ndef check_month(month_name):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month_name in months:\n        return days[months.index(month_name)]\n    else:\n        return False\n\n\n# Tests\ndef check_month_test():\n    assert check_month(\"January\") == 31\n    assert check_month(\"June\") == 30\n    assert check_month(\"December\") == 31\n    assert check_month(\"March\") == 31\n    assert check_month(\"June\") == 30\n    assert check_month(\"October\") == 31\n    assert check_month(\"February\") == 28\n    assert check_month(\"August\") == 31\n    assert check_month(\"April\") == 30\n    assert check_month(\"September\") == 30\n    assert check_month(\"January\") == 31\n    assert check_month(\"June\") == 30\n    assert check_month(\"December\") == 31\n    assert check_month(\"March\") == 31\n    assert check_month(\"June\") == 30\n    assert check_month(\"October\") == 31\n    assert check_month(\"February\") == 28\n    assert check_month(\"August\") == 31\n    assert check_month(\"April\") == 30\n    assert check_month(\"September\") == 30\n    assert check_month(\"January\") == 31\n    assert check_month(\"June\") == 30\n    assert check_month(\"December\") == 31\n    assert check_month(\"March\") == 31\n    assert check_month(\"J",
    "from datetime import date\n\nmonths = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"\n    Checks whether the given month name contains 30 days or not.\n    >>> check_month(\"January\")\n    False\n    >>> check_month(\"February\")\n    False\n    >>> check_month(\"April\")\n    True\n    >>> check_month(\"October\")\n    True\n    >>> check_month(\"December\")\n    True\n    >>> check_month(\"June\")\n    False\n    >>> check_month(\"July\")\n    False\n    >>> check_month(\"March\")\n    False\n    >>> check_month(\"January\")\n    False\n    >>> check_month(\"April\")\n    True\n    >>> check_month(\"June\")\n    False\n    >>> check_month(\"July\")\n    False\n    >>> check_month(\"March\")\n    False\n    >>> check_month(\"January\")\n    False\n    >>> check_month(\"February\")\n    False\n    >>> check_month(\"April\")\n    True\n    >>> check_month(\"October\")\n    True\n    >>> check_month(\"December\")\n    True\n    >>> check_month(\"June\")\n    False\n    >>> check_month(\"July\")\n    False\n    >>> check_month(\"March\")\n    False\n    \"\"\"\n    return months[month] == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import datetime\n\n\n# Solution\ndef days_in_month(month_name):\n    days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    return days[month_name]\n\n\n# Tests\ndef test_days_in_month():\n    assert days_in_month('January') == 31\n    assert days_in_month('February') == 28\n    assert days_in_month('March') == 31\n    assert days_in_month('April') == 30\n    assert days_in_month('May') == 31\n    assert days_in_month('June') == 30\n    assert days_in_month('July') == 31\n    assert days_in_month('August') == 31\n    assert days_in_month('September') == 30\n    assert days_in_month('October') == 31\n    assert days_in_month('November') == 30\n    assert days_in_month('December') == 31\n\n\ntest_days_in_month()",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 30 days or not.\nInput: Month name\nOutput: Boolean value\nSolution:\n\"\"\"\n\nmonth_name = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nmonth_30 = ['February', 'April', 'June', 'September', 'November']\n\ndef month_30_days(month):\n    return month in month_30",
    "# My Solution\ndef check_days(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return \"30 days\"\n    elif month == \"February\":\n        return \"28 or 29 days\"\n    else:\n        return \"31 days\"\n\n\n# Given Solution\ndef checkDays(month):\n    return {\n        \"January\": \"31 days\",\n        \"February\": \"28 or 29 days\",\n        \"March\": \"31 days\",\n        \"April\": \"30 days\",\n        \"May\": \"31 days\",\n        \"June\": \"30 days\",\n        \"July\": \"31 days\",\n        \"August\": \"31 days\",\n        \"September\": \"30 days\",\n        \"October\": \"31 days\",\n        \"November\": \"30 days\",\n        \"December\": \"31 days\"\n    }[month]",
    "def month_days(month):\n    month_days_map = {\n        'january': 31,\n        'febuary': 28,\n        'march': 31,\n        'april': 30,\n        'may': 31,\n        'june': 30,\n        'july': 31,\n        'august': 31,\n        'september': 30,\n        'october': 31,\n        'november': 30,\n        'december': 31\n    }\n    if month in month_days_map:\n        return month_days_map[month]\n    else:\n        return False\n\n\nprint(month_days('february'))\nprint(month_days('march'))",
    "def is_month_30(month):\n    return month in [\"January\", \"April\", \"July\", \"October\"]\n\n\ndef main():\n    print(is_month_30(\"January\"))\n    print(is_month_30(\"March\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_month(month):\n    if month == 'March' or month == 'June' or month == 'September' or month == 'November':\n        print('true')\n    elif month == 'February':\n        print('false')\n    else:\n        print('true')\n\n\ncheck_month('March')\ncheck_month('June')\ncheck_month('July')\ncheck_month('February')",
    "from datetime import datetime\n\n\ndef is_month_30(month: str) -> bool:\n    \"\"\"Check whether the given month name contains 30 days or not.\n\n    Args:\n        month (str): The name of the month.\n\n    Returns:\n        bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    return datetime.strptime(f\"{month} 30\", \"%b %d\").replace(year=2021) < datetime(\n        2021, 12, 31\n    )\n\n\nif __name__ == \"__main__\":\n    assert is_month_30(\"Apr\") is True\n    assert is_month_30(\"Feb\") is False",
    "from datetime import datetime\n\nMONTHS = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\nMONTHS_30 = [\"February\", \"April\", \"June\", \"September\", \"November\"]\n\n\ndef is_month_30(month: str) -> bool:\n    \"\"\"Returns if the month is 30 days or not.\n\n    Args:\n        month (str): month name\n\n    Returns:\n        bool: True if 30 days, False otherwise\n    \"\"\"\n    return month in MONTHS_30\n\n\ndef is_month_30_datetime(month: int) -> bool:\n    \"\"\"Returns if the month is 30 days or not.\n\n    Args:\n        month (int): month number\n\n    Returns:\n        bool: True if 30 days, False otherwise\n    \"\"\"\n    return datetime(2021, month, 30).month == month\n\n\nif __name__ == \"__main__\":\n    for month in MONTHS:\n        print(month, is_month_30(month))",
    "from datetime import date\n\n\ndef month_name(month: str) -> bool:\n    month_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_dict[month] == date.days_in_month\n\n\nif __name__ == \"__main__\":\n    print(month_name(\"January\"))\n    print(month_name(\"February\"))",
    "def month_length(month):\n    if month in (\"March\", \"June\", \"September\", \"November\"):\n        return True\n    elif month in (\"April\", \"July\", \"August\", \"December\"):\n        return False\n    else:\n        return \"Invalid month name\"\n\n\nprint(month_length(\"March\"))\nprint(month_length(\"June\"))\nprint(month_length(\"September\"))\nprint(month_length(\"November\"))\nprint(month_length(\"April\"))\nprint(month_length(\"July\"))\nprint(month_length(\"August\"))\nprint(month_length(\"December\"))",
    "from calendar import monthrange\n\n\ndef month_check(month):\n    month_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if month_dict[month] == 30:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(month_check(\"June\"))",
    "def days_in_month(month):\n    months_30 = (\"April\", \"June\", \"September\", \"November\")\n    if month in months_30:\n        return True\n    return False\n\n\nprint(days_in_month(\"April\"))\nprint(days_in_month(\"July\"))",
    "from datetime import date\n\nMONTHS = (\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n)\n\n\ndef is_month_30(month: str) -> bool:\n    \"\"\"Return whether a month has 30 days.\"\"\"\n    return month in MONTHS[:7] or month in MONTHS[-1:]\n\n\ndef test():\n    \"\"\"Run test cases.\"\"\"\n    assert is_month_30(\"January\")\n    assert not is_month_30(\"February\")\n    assert not is_month_30(\"April\")\n    assert is_month_30(\"September\")\n    assert not is_month_30(\"October\")\n    assert not is_month_30(\"December\")\n\n\nif __name__ == \"__main__\":\n    test()",
    "from datetime import datetime\n\ndef check_days(month):\n    if month == \"February\":\n        return 28\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return 30\n    return 31\n\nif __name__ == '__main__':\n    month = input()\n    result = check_days(month)\n    print(result)",
    "def is_month_30_days(month_name):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    return month_days.get(month_name) == 30\n\n\nif __name__ == \"__main__\":\n    print(is_month_30_days(\"February\"))",
    "def is_month_30_days(month):\n    return month in [\"March\", \"June\", \"Sep\", \"December\"]\n\n\ndef test_is_month_30_days():\n    \"\"\"\n    >>> test_is_month_30_days()\n    True\n    \"\"\"\n    assert is_month_30_days(\"March\")\n    assert is_month_30_days(\"June\")\n    assert is_month_30_days(\"Sep\")\n    assert is_month_30_days(\"December\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def days_in_month(month: str) -> bool:\n    return month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n\n\nif __name__ == \"__main__\":\n    assert days_in_month(\"January\") is True\n    assert days_in_month(\"February\") is False",
    "from calendar import monthrange\n\n\ndef check_days(month: str) -> bool:\n    \"\"\"\n    Checks whether the given month contains 30 days or not.\n    :param month: str - name of the month\n    :return: bool - True if the given month contains 30 days, False if not\n    >>> check_days(\"April\")\n    True\n    >>> check_days(\"June\")\n    False\n    \"\"\"\n    # print(monthrange(2020, month_dict[month]))\n    if monthrange(2020, month_dict[month])[1] == 30:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    month_dict = {\n        \"January\": 1,\n        \"February\": 2,\n        \"March\": 3,\n        \"April\": 4,\n        \"May\": 5,\n        \"June\": 6,\n        \"July\": 7,\n        \"August\": 8,\n        \"September\": 9,\n        \"October\": 10,\n        \"November\": 11,\n        \"December\": 12,\n    }\n    print(check_days(\"June\"))",
    "def is_month_30(month: str) -> bool:\n    return month in [\n        \"January\",\n        \"March\",\n        \"May\",\n        \"July\",\n        \"August\",\n        \"October\",\n        \"December\",\n    ]\n\n\nif __name__ == \"__main__\":\n    assert is_month_30(\"January\")\n    assert is_month_30(\"October\")\n    assert is_month_30(\"December\")\n    assert not is_month_30(\"February\")\n    assert not is_month_30(\"May\")",
    "from calendar import monthrange\n\nMONTHS = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef month_length(month_name: str) -> bool:\n    \"\"\"\n    Checks whether the given month name contains 30 days or not.\n    >>> month_length('February')\n    False\n    >>> month_length('January')\n    True\n    >>> month_length('December')\n    True\n    \"\"\"\n    return monthrange(2021, MONTHS.index(month_name) + 1)[1] == 30\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def has_30_days(month):\n    return month in ('April', 'June', 'September', 'November')\n\n\ndef test_has_30_days():\n    assert has_30_days('April')\n    assert has_30_days('June')\n    assert has_30_days('September')\n    assert has_30_days('November')\n    assert not has_30_days('February')\n    assert not has_30_days('January')\n    assert not has_30_days('March')\n    assert not has_30_days('May')\n    assert not has_30_days('July')\n    assert not has_30_days('August')\n    assert not has_30_days('October')\n    assert not has_30_days('December')\n\n\nif __name__ == '__main__':\n    test_has_30_days()",
    "months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef check_days(month: str) -> bool:\n    \"\"\"Check whether the given month name contains 30 days or not.\n\n    Args:\n        month (str): The month name.\n\n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    return month in months\n\n\nif __name__ == \"__main__\":\n    print(check_days(\"January\"))\n    print(check_days(\"February\"))",
    "from datetime import datetime\n\n\ndef check_month_days(month: str) -> bool:\n    \"\"\"Return True if the given month name contains 30 days, else return False.\n\n    >>> check_month_days('April')\n    True\n    >>> check_month_days('May')\n    False\n    >>> check_month_days('June')\n    True\n    \"\"\"\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_days[month] == 30\n\n\ndef main():\n    \"\"\"Print the month names that have 30 days.\"\"\"\n    for month in range(1, 13):\n        month_name = datetime(2021, month, 1).strftime(\"%B\")\n        if check_month_days(month_name):\n            print(month_name)\n\n\nif __name__ == \"__main__\":\n    main()",
    "import calendar\n\n\ndef check_month(month_name):\n    month_names = [calendar.month_name[i] for i in range(1, 13)]\n    if month_name not in month_names:\n        return \"Please enter a valid month name.\"\n    month_name = month_name.title()\n    if month_name == \"February\" and calendar.isleap(calendar.get_date()[0]):\n        return \"February has 29 days in a leap year.\"\n    return f\"{month_name} has {calendar.monthrange(calendar.get_date()[0], month_names.index(month_name)+1)[1]} days.\"\n\n\nif __name__ == \"__main__\":\n    print(check_month(\"september\"))",
    "# This is the function which will be used for the main code\ndef month_30_days(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return True\n    else:\n        return False\n\n\n# This is the main program\nprint(month_30_days(\"January\"))\nprint(month_30_days(\"May\"))\nprint(month_30_days(\"November\"))",
    "import calendar\n\n\ndef is_month_30(month_name):\n    month_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    return month_dict[month_name] == 30\n\n\ndef is_month_30_v2(month_name):\n    return calendar.monthrange(2020, month_dict[month_name])[1] == 30\n\n\nif __name__ == \"__main__\":\n    print(is_month_30(\"April\"))\n    print(is_month_30(\"February\"))",
    "def month_days(month_name):\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    if month_name in months:\n        return months[month_name]\n    return \"Invalid Month\"\n\n\nprint(month_days(\"September\"))",
    "def month_days(month):\n    month_days_map = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    return month_days_map[month]\n\n\ndef main():\n    print(month_days(\"January\"))\n    print(month_days(\"February\"))\n    print(month_days(\"March\"))\n    print(month_days(\"April\"))\n    print(month_days(\"May\"))\n    print(month_days(\"June\"))\n    print(month_days(\"July\"))\n    print(month_days(\"August\"))\n    print(month_days(\"September\"))\n    print(month_days(\"October\"))\n    print(month_days(\"November\"))\n    print(month_days(\"December\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\nmonth_days = defaultdict(int, {\n    1: 31,\n    2: 28,\n    3: 31,\n    4: 30,\n    5: 31,\n    6: 30,\n    7: 31,\n    8: 31,\n    9: 30,\n    10: 31,\n    11: 30,\n    12: 31\n})\n\n\ndef is_month_30(month):\n    return month_days[month] == 30\n\n\ndef main():\n    print(is_month_30(\"October\"))\n    print(is_month_30(\"December\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_30_days(month):\n    month_days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n\n    return month in month_days and month_days[month] == 30\n\n\nprint(is_30_days('January'))\nprint(is_30_days('February'))\nprint(is_30_days('June'))\nprint(is_30_days('December'))",
    "def check_days(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return \"{} contains 31 days\".format(month)\n    elif month == \"February\":\n        return \"{} contains 28 or 29 days\".format(month)\n    else:\n        return \"{} contains 30 days\".format(month)\n\n\nprint(check_days(\"January\"))\nprint(check_days(\"February\"))\nprint(check_days(\"April\"))\nprint(check_days(\"May\"))",
    "def month_days(month: str) -> bool:\n    \"\"\"\n    >>> month_days('June')\n    True\n    >>> month_days('July')\n    False\n    >>> month_days('August')\n    True\n    >>> month_days('February')\n    False\n    >>> month_days('March')\n    True\n    \"\"\"\n    month_days_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_days_dict.get(month, 0) == 30\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from calendar import month_name\n\n\ndef has_30_days(month: str) -> bool:\n    \"\"\"Returns True if the given month has 30 days.\n\n    >>> has_30_days('January')\n    True\n    >>> has_30_days('February')\n    False\n    \"\"\"\n    return month in month_name[1:13:2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_month_30(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return True\n    elif month == \"February\":\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(is_month_30(\"February\"))",
    "import calendar\n\n\ndef check_days(month: str) -> bool:\n    month_name = month.capitalize()\n    month_num = calendar.month_name.index(month_name)\n    days = calendar.monthrange(2020, month_num)\n    return bool(days[1])\n\n\nif __name__ == \"__main__\":\n    assert check_days(\"March\") is True\n    assert check_days(\"February\") is False",
    "from datetime import datetime\n\nmonth_days = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31\n}\n\n\ndef is_month_30(month_name: str) -> bool:\n    \"\"\"\n    >>> is_month_30(\"January\")\n    False\n    >>> is_month_30(\"February\")\n    True\n    \"\"\"\n    return month_days[month_name] == 30\n\n\ndef is_month_30_datetime(month_name: str) -> bool:\n    \"\"\"\n    >>> is_month_30_datetime(\"January\")\n    False\n    >>> is_month_30_datetime(\"February\")\n    True\n    \"\"\"\n    return datetime(2020, month_days[month_name], 1).month == month_days[month_name]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 30 days or not.\nHints:\nUse list slicing to extract the month name from the given datetime object.\n\n\"\"\"\ndef is30(month):\n    months=['January','February','April','June','July','September','November','December']\n    if months[month-1]=='February':\n        return \"February has 28 days\"\n    else:\n        return \"{} has 30 days\".format(months[month-1])\nprint is30(2)",
    "from datetime import datetime\n\n\n# This is the function which will be used to check whether the month has 30 days or not.\ndef check_month(month):\n    # This is a list of all the months which have 30 days.\n    month_list = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n\n    # If the month is in the month_list, return True.\n    if month in month_list:\n        return True\n\n    # Else, return False.\n    else:\n        return False\n\n\n# This is the main function which will check the user input.\ndef main():\n    # This is a dictionary which will store the name of the months as the key and the number of days as the value.\n    month_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    # This is the while loop which will check the user input.\n    while True:\n        # Ask the user for a month name.\n        month = input(\"Enter a month name: \")\n\n        # If the month is not in the month_dict, print the following message.\n        if month not in month_dict:\n            print(\"Please enter a valid month name.\")\n\n        # Else, check whether the month is in the month_list.\n        else:\n            # If it is, print the number of days in the month.\n            if check_month(month):\n                print(f\"{month} has 30 days.\")\n\n            # Else, print the number of days in the month.\n            else:\n                print(f\"{month} has {month_dict[month]} days.\")\n\n        # Ask the user if he/she wants to continue.",
    "def month_days(month_name):\n    if month_name.lower() == \"february\":\n        return 28\n    elif month_name.lower() == \"april\" or month_name.lower() == \"june\" or month_name.lower() == \"september\" or month_name.lower() == \"november\":\n        return 30\n    else:\n        return 31\n\n\nif __name__ == '__main__':\n    print(month_days(\"June\"))",
    "def month_30_days(month):\n    month_30 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in month_30\n\n\nif __name__ == \"__main__\":\n    print(month_30_days(\"June\"))",
    "def check_month(month):\n    if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n        return '30'\n    elif month == 'February':\n        return '28'\n    else:\n        return '29'\n\n\nif __name__ == '__main__':\n    print(check_month('March'))",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 30 days or not.\nHints:\nUse list comprehension to find out whether a value exists or not.\n\n\"\"\"\nmonths=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ndef is30Days(month):\n\treturn month in months\n\nprint is30Days('January')\nprint is30Days('December')\nprint is30Days('June')\nprint is30Days('July')",
    "def check_month(month):\n    month_dict = {\n        \"january\": 31,\n        \"february\": 28,\n        \"march\": 31,\n        \"april\": 30,\n        \"may\": 31,\n        \"june\": 30,\n        \"july\": 31,\n        \"august\": 31,\n        \"september\": 30,\n        \"october\": 31,\n        \"november\": 30,\n        \"december\": 31,\n    }\n\n    return month_dict[month.lower()]\n\n\nif __name__ == \"__main__\":\n    print(check_month(\"january\"))",
    "def check_days(month):\n    month = month.lower()\n    if month == \"january\" or month == \"march\" or month == \"may\" or month == \"july\" or month == \"august\" or month == \"october\" or month == \"december\":\n        return \"30 days\"\n    elif month == \"april\" or month == \"june\" or month == \"september\" or month == \"november\":\n        return \"31 days\"\n\n\nprint(check_days(\"April\"))\nprint(check_days(\"June\"))\nprint(check_days(\"January\"))\nprint(check_days(\"December\"))\nprint(check_days(\"July\"))\nprint(check_days(\"February\"))",
    "from datetime import date\n\n\ndef days_in_month(month_name):\n    month_name = month_name.lower()\n    month_dict = {\n        \"january\": 31,\n        \"february\": 28,\n        \"march\": 31,\n        \"april\": 30,\n        \"may\": 31,\n        \"june\": 30,\n        \"july\": 31,\n        \"august\": 31,\n        \"september\": 30,\n        \"october\": 31,\n        \"november\": 30,\n        \"december\": 31,\n    }\n\n    if month_name not in month_dict:\n        return \"Invalid month name.\"\n\n    if month_name == \"february\" and (date.today().year % 400 == 0 or date.today().year % 4 == 0 and date.today().year % 100 != 0):\n        return f\"{month_name} has 29 days.\"\n\n    return f\"{month_name} has {month_dict[month_name]} days.\"\n\n\nif __name__ == \"__main__\":\n    print(days_in_month(\"January\"))\n    print(days_in_month(\"February\"))\n    print(days_in_month(\"March\"))\n    print(days_in_month(\"April\"))\n    print(days_in_month(\"May\"))\n    print(days_in_month(\"June\"))\n    print(days_in_month(\"July\"))\n    print(days_in_month(\"August\"))\n    print(days_in_month(\"September\"))\n    print(days_in_month(\"October\"))\n    print(days_in_month(\"November\"))\n    print(days_in_month(\"December\"))",
    "from datetime import date\n\n\ndef is_month_30(month: str) -> bool:\n    \"\"\"\n    >>> is_month_30(\"January\")\n    False\n    >>> is_month_30(\"March\")\n    True\n    >>> is_month_30(\"December\")\n    True\n    \"\"\"\n    return date(2021, getattr(date, month), 30).replace(day=28).day == 30\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from datetime import date\n\n\ndef check_days(month: str) -> bool:\n    \"\"\"\n    Check whether the given month name contains 30 days or not.\n    >>> check_days('June')\n    True\n    >>> check_days('February')\n    False\n    >>> check_days('March')\n    True\n    \"\"\"\n    month_name_to_number = {\n        \"January\": 1,\n        \"February\": 2,\n        \"March\": 3,\n        \"April\": 4,\n        \"May\": 5,\n        \"June\": 6,\n        \"July\": 7,\n        \"August\": 8,\n        \"September\": 9,\n        \"October\": 10,\n        \"November\": 11,\n        \"December\": 12,\n    }\n\n    return date(2021, month_name_to_number[month], 30).replace(day=28).day == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import datetime\n\nMONTHS_30 = {\n    'January', 'March', 'May', 'July', 'August', 'October', 'December'\n}\n\nMONTHS_31 = {\n    'April', 'June', 'September', 'November'\n}\n\n\ndef is_month_30(month_name: str) -> bool:\n    \"\"\"Return True if month contains 30 days, False otherwise.\n\n    >>> is_month_30('January')\n    True\n\n    >>> is_month_30('February')\n    False\n    \"\"\"\n    if month_name in MONTHS_30:\n        return True\n    elif month_name in MONTHS_31:\n        return False\n    else:\n        raise ValueError(f'Invalid month name: {month_name}')\n\n\ndef is_month_30_alt(month_name: str) -> bool:\n    \"\"\"Return True if month contains 30 days, False otherwise.\n\n    >>> is_month_30_alt('January')\n    True\n\n    >>> is_month_30_alt('February')\n    False\n    \"\"\"\n    month = datetime.strptime(month_name, '%B').month\n    return month in (1, 3, 5, 7, 8, 10, 12)\n\n\ndef is_month_30_alt_2(month_name: str) -> bool:\n    \"\"\"Return True if month contains 30 days, False otherwise.\n\n    >>> is_month_30_alt_2('January')\n    True\n\n    >>> is_month_30_alt_2('February')\n    False\n    \"\"\"\n    month = datetime.strptime(month_name, '%B').month\n    return month % 2 == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from datetime import datetime\n\nMONTHS = {\n    \"JANUARY\": 31,\n    \"FEBRUARY\": 28,\n    \"MARCH\": 31,\n    \"APRIL\": 30,\n    \"MAY\": 31,\n    \"JUNE\": 30,\n    \"JULY\": 31,\n    \"AUGUST\": 31,\n    \"SEPTEMBER\": 30,\n    \"OCTOBER\": 31,\n    \"NOVEMBER\": 30,\n    \"DECEMBER\": 31,\n}\n\n\ndef month_name_to_number(month_name: str) -> int:\n    return MONTHS[month_name]\n\n\ndef check_days(month_name: str) -> bool:\n    \"\"\"\n    >>> check_days('JANUARY')\n    False\n    >>> check_days('FEBRUARY')\n    False\n    >>> check_days('MARCH')\n    True\n    \"\"\"\n    return month_name_to_number(month_name) == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_days(month):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n    return days[months.index(month)]\n\n\nprint(check_days(\"January\"))",
    "from datetime import date\n\nmonth_names = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef check_month_length(month: str) -> bool:\n    \"\"\"Checks if a month has 30 days or not.\n\n    Args:\n        month (str): The month to check for 30 days.\n\n    Returns:\n        bool: True if the month has 30 days. False otherwise.\n    \"\"\"\n    month_number = month_names.index(month) + 1\n    return date(2021, month_number, 30).replace(day=1).day == 1\n\n\nif __name__ == \"__main__\":\n    assert check_month_length(\"February\") == False\n    assert check_month_length(\"April\") == False\n    assert check_month_length(\"June\") == False\n    assert check_month_length(\"September\") == False\n    assert check_month_length(\"November\") == False\n    assert check_month_length(\"July\") == True\n    assert check_month_length(\"August\") == True\n    assert check_month_length(\"February\") == False\n    assert check_month_length(\"May\") == True\n    assert check_month_length(\"October\") == True",
    "from collections import defaultdict\n\nmonth_days = defaultdict(int, {\n    1: 31,\n    3: 31,\n    5: 31,\n    7: 31,\n    8: 31,\n    10: 31,\n    12: 31,\n    2: 28,\n    4: 30,\n    6: 30,\n    9: 30,\n    11: 30\n})\n\n\ndef has_thirty_days(month):\n    return month_days[month] == 30\n\n\nif __name__ == \"__main__\":\n    assert has_thirty_days(5) == True\n    assert has_thirty_days(2) == False",
    "from datetime import date\n\nMONTH_NAMES = [\n    'January', 'February', 'March', 'April',\n    'May', 'June', 'July', 'August',\n    'September', 'October', 'November', 'December'\n]\n\ndef is_month_30_days(month_name):\n    for index, name in enumerate(MONTH_NAMES):\n        if name == month_name:\n            return date(2019, index + 1, 30).replace(day=28).day == 28\n\n    return False\n\n\nif __name__ == '__main__':\n    print(\"Is January 30 days?\", is_month_30_days(\"January\"))\n    print(\"Is February 30 days?\", is_month_30_days(\"February\"))",
    "from datetime import datetime\n\ndef month_checker(month):\n    month_name = month.lower()\n    if month_name == \"january\" or month_name == \"march\" or month_name == \"may\" or month_name == \"july\" or month_name == \"august\" or month_name == \"october\" or month_name == \"december\":\n        return 30\n    elif month_name == \"april\" or month_name == \"june\" or month_name == \"september\" or month_name == \"november\":\n        return 31\n    else:\n        return \"Wrong month name\"\n\nprint(month_checker(\"June\"))\nprint(month_checker(\"July\"))\nprint(month_checker(\"February\"))",
    "from datetime import datetime\n\n\ndef is_month_30(month: str) -> bool:\n    \"\"\"Return True if given month contains 30 days, else False.\n\n    Args:\n        month (str): month name\n\n    Returns:\n        bool: True if given month contains 30 days, else False.\n    \"\"\"\n    month_30 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    if month in month_30:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_month_30(\"January\") is True\n    assert is_month_30(\"February\") is False",
    "def check_days(month: str) -> bool:\n    \"\"\"\n    >>> check_days(\"March\")\n    True\n    >>> check_days(\"February\")\n    False\n    \"\"\"\n    days_per_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return days_per_month[month] == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def has_thirty_days(month: str) -> bool:\n    \"\"\"Returns True if the given month name contains 30 days.\n\n    Args:\n        month (str): The month name.\n\n    Returns:\n        bool: True if the given month name contains 30 days, False otherwise.\n    \"\"\"\n    return month in (\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\")\n\n\nif __name__ == \"__main__\":\n    print(has_thirty_days(\"June\"))\n    print(has_thirty_days(\"February\"))",
    "def month_has_30_days(month: str) -> bool:\n    \"\"\"Returns if the given month contains 30 days.\"\"\"\n    return month in (\"June\", \"September\", \"November\", \"March\", \"January\")\n\n\nif __name__ == \"__main__\":\n    print(month_has_30_days(\"January\"))\n    print(month_has_30_days(\"June\"))\n    print(month_has_30_days(\"March\"))\n    print(month_has_30_days(\"September\"))\n    print(month_has_30_days(\"November\"))",
    "def check_days(month_name):\n    days = {\"january\":31, \"february\":28, \"march\":31, \"april\":30, \"may\":31, \"june\":30,\n            \"july\":31, \"august\":31, \"september\":30, \"october\":31, \"november\":30, \"december\":31}\n    return days[month_name.lower()]\n\n\nif __name__ == '__main__':\n    month_name = input(\"Enter month name: \")\n    print(\"Month {} has {} days.\".format(month_name, check_days(month_name)))",
    "def month_days(month: str) -> bool:\n    \"\"\"\n    >>> month_days('January')\n    True\n    >>> month_days('February')\n    False\n    \"\"\"\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return months[month] == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\n\ndef month_days(month_name: str) -> bool:\n    \"\"\"\n    >>> month_days(\"April\")\n    True\n    >>> month_days(\"May\")\n    False\n    \"\"\"\n    month_name = month_name.capitalize()\n    month_number = date(2020, [\n        \"January\", \"February\", \"March\", \"April\", \"May\",\n        \"June\", \"July\", \"August\", \"September\", \"October\",\n        \"November\", \"December\"\n    ].index(month_name) + 1, 1).month\n    return month_number in [4, 6, 9, 11] or month_number % 2 == 0 and month_number != 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\nMONTHS_30 = [\n    \"January\",\n    \"March\",\n    \"May\",\n    \"July\",\n    \"August\",\n    \"October\",\n    \"December\",\n]\n\nMONTHS_31 = [\"February\"]\n\n\ndef is_month_30(month_name):\n    if month_name in MONTHS_30:\n        return True\n    elif month_name in MONTHS_31:\n        return False\n    else:\n        return bool(date(2020, month_name, 30))\n\n\nif __name__ == \"__main__\":\n    assert is_month_30(\"February\") is False\n    assert is_month_30(\"January\") is True\n    assert is_month_30(\"March\") is True\n    assert is_month_30(\"May\") is True\n    assert is_month_30(\"July\") is True\n    assert is_month_30(\"August\") is True\n    assert is_month_30(\"October\") is True\n    assert is_month_30(\"December\") is True",
    "from datetime import date\n\nmonth_names = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef is_month_30(month_name):\n    for i, month in enumerate(month_names):\n        if month == month_name:\n            if date(2020, i + 1, 30).replace(day=1) != date(2020, i + 1, 1):\n                return False\n            else:\n                return True\n\n\nif __name__ == \"__main__\":\n    print(is_month_30(\"January\"))",
    "def is_month_30(month: str) -> bool:\n    \"\"\"\n    >>> is_month_30('April')\n    True\n    >>> is_month_30('June')\n    True\n    >>> is_month_30('March')\n    False\n    >>> is_month_30('January')\n    False\n    >>> is_month_30('December')\n    True\n    >>> is_month_30('February')\n    False\n    \"\"\"\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "months = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_days(month):\n    if month in months:\n        return months[month]\n    else:\n        return \"Invalid month\"\n\n\nprint(check_days(\"January\"))\nprint(check_days(\"February\"))\nprint(check_days(\"March\"))\nprint(check_days(\"April\"))\nprint(check_days(\"May\"))\nprint(check_days(\"June\"))\nprint(check_days(\"July\"))\nprint(check_days(\"August\"))\nprint(check_days(\"September\"))\nprint(check_days(\"October\"))\nprint(check_days(\"November\"))\nprint(check_days(\"December\"))\nprint(check_days(\"Januarye\"))",
    "from datetime import date\n\n\ndef is_30_days(month):\n    month_name = month.capitalize()\n    month_length = date(2020, getattr(date, month_name), 1).day\n    return month_length == 30\n\n\nif __name__ == \"__main__\":\n    print(is_30_days(\"april\"))",
    "from datetime import datetime\n\nMONTHS = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef month_has_30_days(month_name):\n    \"\"\"Returns True if month has 30 days, False otherwise.\"\"\"\n    month = MONTHS.index(month_name) + 1\n    year = datetime.now().year\n    return (year % 4 == 0 and month == 2) or (month in [4, 6, 9, 11])\n\n\nif __name__ == \"__main__\":\n    assert month_has_30_days(\"June\") is True\n    assert month_has_30_days(\"April\") is True\n    assert month_has_30_days(\"January\") is False",
    "months = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef days_in_month(month):\n    if month in months:\n        return months[month]\n    else:\n        return \"Month not found\"\n\n\nif __name__ == \"__main__\":\n    print(days_in_month(\"January\"))\n    print(days_in_month(\"December\"))\n    print(days_in_month(\"April\"))\n    print(days_in_month(\"Not a month\"))",
    "# 1st solution\ndef is_month_has_30_days(month: str) -> bool:\n    month_name_to_number = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    return month_name_to_number[month] == 30\n\n\n# 2nd solution\ndef is_month_has_30_days(month: str) -> bool:\n    return month == 'April' or month == 'June' or month == 'September' or month == 'November'\n\n\n# 3rd solution\ndef is_month_has_30_days(month: str) -> bool:\n    return month in ('April', 'June', 'September', 'November')\n\n\n# 4th solution\ndef is_month_has_30_days(month: str) -> bool:\n    return month[0:3] == 'Apr' or month[0:3] == 'Jun' or month[0:3] == 'Sep' or month[0:3] == 'Nov'",
    "def is_month_30_days(month_name: str) -> bool:\n    \"\"\"\n    >>> is_month_30_days(\"June\")\n    True\n    >>> is_month_30_days(\"July\")\n    False\n    \"\"\"\n    return month_name in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_days(month):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if month in months:\n        return months.index(month)+1\n    else:\n        return -1\n\n\nmonth = input()\nprint(check_days(month))",
    "from datetime import datetime\n\nMONTHS = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef is_month_30_days(month: str) -> bool:\n    return MONTHS[month] == 30\n\n\nif __name__ == \"__main__\":\n    assert is_month_30_days(\"January\") is False\n    assert is_month_30_days(\"February\") is False\n    assert is_month_30_days(\"March\") is True\n    assert is_month_30_days(\"April\") is True\n    assert is_month_30_days(\"May\") is True\n    assert is_month_30_days(\"June\") is True\n    assert is_month_30_days(\"July\") is True\n    assert is_month_30_days(\"August\") is True\n    assert is_month_30_days(\"September\") is True\n    assert is_month_30_days(\"October\") is True\n    assert is_month_30_days(\"November\") is True\n    assert is_month_30_days(\"December\") is True",
    "def days_in_month(month: str) -> bool:\n    \"\"\"Returns True if the given month has 30 days else False\n\n    Args:\n        month (str): month name\n\n    Returns:\n        bool: True if the given month has 30 days else False\n    \"\"\"\n    month_name = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    return month_name.get(month, -1) == 30\n\n\nif __name__ == \"__main__\":\n    assert days_in_month(\"January\") is False\n    assert days_in_month(\"June\") is False\n    assert days_in_month(\"February\") is False\n    assert days_in_month(\"November\") is False\n    assert days_in_month(\"December\") is False\n    assert days_in_month(\"January\") is False\n    assert days_in_month(\"July\") is False\n    assert days_in_month(\"August\") is False\n    assert days_in_month(\"September\") is False\n    assert days_in_month(\"October\") is False\n    assert days_in_month(\"May\") is False\n    assert days_in_month(\"January\") is False",
    "from calendar import monthrange\n\n\ndef month_check(month):\n    month_num = month_dict[month]\n    return monthrange(2016, month_num)[1] == 30\n\n\nmonth_dict = {\n    'January': 1,\n    'February': 2,\n    'March': 3,\n    'April': 4,\n    'May': 5,\n    'June': 6,\n    'July': 7,\n    'August': 8,\n    'September': 9,\n    'October': 10,\n    'November': 11,\n    'December': 12,\n}\n\n\ndef test_month_check():\n    assert month_check('January')\n    assert month_check('February') is False\n    assert month_check('March')\n    assert month_check('April')\n    assert month_check('May')\n    assert month_check('June')\n    assert month_check('July')\n    assert month_check('August')\n    assert month_check('September')\n    assert month_check('October')\n    assert month_check('November')\n    assert month_check('December')",
    "def is_month_30(month):\n    month_30 = [\"April\", \"June\", \"Sep\", \"Nov\"]\n    if month in month_30:\n        return True\n    return False\n\n\ndef main():\n    month = input(\"Enter the month name: \").capitalize()\n    if is_month_30(month):\n        print(\"Yes, the month has 30 days.\")\n    else:\n        print(\"No, the month doesn't have 30 days.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from datetime import datetime\n\nMONTHS = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"Check whether the given month name contains 30 days or not.\n\n    Args:\n        month (str): name of the month.\n\n    Returns:\n        bool: True if the given month name contains 30 days.\n    \"\"\"\n    if month in MONTHS:\n        return MONTHS[month] == 30\n    return False\n\n\nif __name__ == \"__main__\":\n    month_name = input(\"Enter the month name: \").capitalize()\n    if check_month(month_name):\n        print(f\"{month_name} contains 30 days.\")\n    else:\n        print(f\"{month_name} does not contain 30 days.\")",
    "def is_30_days_month(month_name: str) -> bool:\n    \"\"\"\n    >>> is_30_days_month('February')\n    False\n    >>> is_30_days_month('June')\n    True\n    >>> is_30_days_month('April')\n    True\n    \"\"\"\n    month_names = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_names.get(month_name) == 30\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}