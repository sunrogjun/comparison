{
  "problem": {
    "task_id": "MBPP/503",
    "prompt": "Write a function to add consecutive numbers of a given list.",
    "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
    "test_list": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ],
    "challenge_test_list": [],
    "problem_id": 492
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from typing import List\n\n\n# O(n)\ndef add_consecutive_numbers(numbers: List[int]) -> List[int]:\n    \"\"\"Return a list of consecutive sums of given list.\n\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    [1, 3, 6, 10, 15]\n    \"\"\"\n    return [sum(numbers[i : i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\n\n\ndef sum_consecutive(l):\n    return reduce(lambda x, y: x + y, l)\n\n\ndef test_sum_consecutive():\n    assert sum_consecutive([1, 2, 3, 4, 5]) == 15\n    assert sum_consecutive([1, 2, 3, 4, 5, 6]) == 21",
    "from typing import List\n\n\ndef add_consecutive_numbers(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    result: List[int] = []\n    prev: int = 0\n\n    for num in arr:\n        prev += num\n        result.append(prev)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4]) == [1, 3, 6, 10]",
    "def add_consecutive_numbers(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + add_consecutive_numbers(nums[1:])\n\n\nif __name__ == '__main__':\n    print add_consecutive_numbers([1, 2, 3, 4, 5])",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef add_consecutive_numbers(array: List[int]) -> List[int]:\n    result = []\n    running_sum = 0\n\n    for number in array:\n        running_sum += number\n        result.append(running_sum)\n\n    return result\n\n\n# O(n) time | O(1) space\ndef add_consecutive_numbers_inplace(array: List[int]) -> List[int]:\n    running_sum = 0\n\n    for i in range(len(array)):\n        array[i] += running_sum\n        running_sum = array[i]\n\n    return array\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4]))\nprint(add_consecutive_numbers_inplace([1, 2, 3, 4]))",
    "def sum_consecutive(lst):\n    return [sum(lst[i:i+2]) for i in range(len(lst) - 1)]\n\n\ndef test_sum_consecutive():\n    \"\"\"\n    >>> test_sum_consecutive()\n    \"\"\"\n    assert sum_consecutive([1, 2, 3, 4]) == [3, 5, 7]\n    assert sum_consecutive([1, 1, 1, 1]) == [2, 3, 4]\n    assert sum_consecutive([-1, 1, -2, 3, -4, 5]) == [-2, 2, -6, 9]\n    assert sum_consecutive([-1, -1, -1, -1]) == [-2, -4, -6]\n    assert sum_consecutive([1, 2, 3, 4, 1, 2, 3, 4]) == [3, 5, 7, 9, 3, 5, 7]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def add_consecutive_numbers(numbers):\n    if len(numbers) == 0:\n        return 0\n\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n\n    return total\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"Returns the sum of consecutive numbers in a list.\n\n    Args:\n        numbers (List[int]): The list of numbers to add.\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n        15\n    \"\"\"\n    return sum(numbers[i : i + 2] for i in range(len(numbers) - 1))\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(l: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n\n    for i, num in enumerate(l):\n        if i != 0:\n            total += num\n        l[i] = total\n\n    return l\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(*add_consecutive_numbers(l))",
    "from typing import List\n\n\ndef consecutive_sum(numbers: List[int]) -> List[int]:\n    \"\"\"\n    >>> consecutive_sum([1, 2, 3, 4])\n    [1, 3, 6, 10]\n    >>> consecutive_sum([1, 2, 3, 4, 5, 6])\n    [1, 3, 6, 10, 15, 21]\n    \"\"\"\n    result = []\n\n    # Edge case\n    if len(numbers) == 0:\n        return result\n\n    total = numbers[0]\n    result.append(total)\n\n    for num in numbers[1:]:\n        total += num\n        result.append(total)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of consecutive numbers\n    \"\"\"\n    total = 0\n    for index in range(len(numbers)):\n        if index == len(numbers) - 1:\n            break\n        total += numbers[index] + numbers[index + 1]\n    return total\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4]))\nprint(add_consecutive_numbers([1, 1, 1, 1]))\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))",
    "def consecutive_sum(arr):\n    # Your code here\n    return [sum(arr[i:i+2]) for i in range(0, len(arr), 2)]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(consecutive_sum([1, 2, 3, 4, 5, 6]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert consecutive_sum([1, 2, 3, 4, 5, 6]) == [3, 5, 7, 9], \"First\"\n    assert consecutive_sum([-1, 1, -2, 2, -3, 3]) == [-2, 0, -4, 2, -6, 4], \"Second\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "def add_consecutive(lst):\n    # for i in range(len(lst)):\n    #     if i < len(lst)-1:\n    #         lst[i] += lst[i+1]\n    #     else:\n    #         break\n    # return lst\n    lst = lst[:-1]\n    for i in range(len(lst)):\n        lst[i] += lst[i+1]\n    return lst\n\n\nprint(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "from timeit import default_timer as timer\n\n\ndef add_consecutive_numbers(list):\n    total = 0\n    for i in range(len(list)):\n        total += list[i]\n    return total\n\n\ndef add_consecutive_numbers_optimized(list):\n    return sum(list)\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(timer() - start)\n    start = timer()\n    print(add_consecutive_numbers_optimized([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(timer() - start)",
    "def add_consecutive_numbers(numbers):\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    21\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7])\n    33\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8])\n    46\n    \"\"\"\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef add_consecutive_numbers(lst: List[int]) -> int:\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    45\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    >>> add_consecutive_numbers([1, 2, 3, 4])\n    10\n    \"\"\"\n    return sum(lst) + lst[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive_numbers(nums):\n    \"\"\"\n    nums: list of ints\n    return: list of ints\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]] + add_consecutive_numbers(nums[1:])\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "from functools import reduce\nfrom tools.decorators import function_details\n\n\n@function_details\ndef consecutive_numbers_sum(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: sum of consecutive numbers\n    \"\"\"\n    return reduce(lambda x, y: x + y, nums)\n\n\nif __name__ == '__main__':\n    print(consecutive_numbers_sum([1, 2, 3, 4, 5]))",
    "def add_consecutive(lst):\n    if len(lst) <= 1:\n        return lst\n\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        result.append(result[i - 1] + lst[i])\n\n    return result\n\n\nassert add_consecutive([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
    "from typing import List\n\n\ndef add_consecutive_numbers(input_list: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return sum(input_list)\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3]) == 6",
    "def add_consecutive_numbers(arr):\n    return sum(arr[i] for i in range(1, len(arr)))\n\nif __name__ == '__main__':\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(l):\n    for i in range(1, len(l)):\n        l[i] += l[i - 1]\n    return l\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def sum_consecutive(numbers):\n    \"\"\"Returns the sum of the consecutive numbers of a given list.\n\n    Args:\n        numbers (list): List of numbers.\n\n    Returns:\n        int: Sum of the consecutive numbers.\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0] + numbers[1]\n    else:\n        return sum_consecutive(numbers[1:]) + numbers[0]\n\n\ndef main():\n    print(sum_consecutive([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()",
    "from functools import reduce\n\n\ndef sum_of_consecutive(numbers):\n    \"\"\"\n    >>> sum_of_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    45\n    \"\"\"\n    return reduce(lambda x, y: x + y, numbers)\n\n\ndef sum_of_consecutive_recursive(numbers):\n    \"\"\"\n    >>> sum_of_consecutive_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    45\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    return numbers[0] + sum_of_consecutive_recursive(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    result = 0\n\n    for i in range(len(numbers)):\n        result += numbers[i] * (i + 1)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([2, 1, 3, 5, 4]) == 25",
    "from typing import List\n\n\ndef sum_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"Sums consecutive numbers in a list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_consecutive_numbers([1, 2, 3, 4]) == 10\n    \"\"\"\n    return sum(\n        [\n            sum(range(start, end + 1))\n            for start, end in zip(numbers, numbers[1:])\n        ]\n    )\n\n\ndef sum_consecutive_numbers_pythonic(numbers: List[int]) -> int:\n    \"\"\"Sums consecutive numbers in a list (pythonic).\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_consecutive_numbers_pythonic([1, 2, 3, 4]) == 10\n    \"\"\"\n    return sum(\n        sum(range(*item))\n        for item in zip(numbers, numbers[1:])\n    )\n\n\nif __name__ == '__main__':\n    print(sum_consecutive_numbers([1, 2, 3, 4]))\n    print(sum_consecutive_numbers_pythonic([1, 2, 3, 4]))",
    "from typing import List\n\n\n# O(N) time | O(N) space\ndef add_consecutive_numbers(list_of_numbers: List[int]) -> List[int]:\n    result = []\n    current_sum = 0\n    for num in list_of_numbers:\n        current_sum += num\n        result.append(current_sum)\n    return result\n\n\n# O(N) time | O(N) space\ndef add_consecutive_numbers_recursively(list_of_numbers: List[int]) -> List[int]:\n    if len(list_of_numbers) == 1:\n        return list_of_numbers\n\n    return [list_of_numbers[0] + list_of_numbers[1]] + add_consecutive_numbers_recursively(list_of_numbers[1:])\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))\n    print(add_consecutive_numbers_recursively([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef add_consecutive(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sum(numbers) - min(numbers)\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive([1, 2, 3, 4, 5, 6]) == 21",
    "def add_consecutive_numbers(input_list):\n    \"\"\"\n    >>> add_consecutive_numbers([1,2,3,4,5])\n    [1, 3, 6, 10, 15]\n    \"\"\"\n    return [sum(input_list[i:i+2]) for i in range(len(input_list)-1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def add_consecutive_numbers(lst):\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + lst[1]\n\n\ndef main():\n    print(add_consecutive_numbers([]))\n    print(add_consecutive_numbers([1]))\n    print(add_consecutive_numbers([1, 2]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def add_consecutive_numbers(numbers: list) -> list:\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3])\n    [6, 5, 3]\n    \"\"\"\n    return [sum(numbers[i:i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def add_consecutive_numbers(lst):\n    \"\"\"Add consecutive numbers of a given list.\n\n    Args:\n        lst (list): List of numbers\n\n    Returns:\n        int: Sum of consecutive numbers\n    \"\"\"\n    return sum(lst[i] + lst[i + 1] for i in range(len(lst) - 1))\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4]))\nprint(add_consecutive_numbers([100, 200, 300]))\nprint(add_consecutive_numbers([50, 10, 20, 40, 80]))",
    "def add_consecutive_numbers(numbers):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n    return total\n\n\ndef test_add_consecutive_numbers():\n    \"\"\"Test for add_consecutive_numbers function.\"\"\"\n    assert add_consecutive_numbers([1, 2, 3, 4, 5]) == 15\n    assert add_consecutive_numbers([-1, 0, 1, 2, 3]) == 6\n    assert add_consecutive_numbers([-1, 1, -1, 1, -1]) == 0\n    assert add_consecutive_numbers([-1, 1, -1, 1, 0]) == 0\n\n\nif __name__ == \"__main__\":\n    test_add_consecutive_numbers()",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> List[int]:\n    \"\"\"Add consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n        [7]\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    return [sum(numbers[i : i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))",
    "from functools import reduce\nfrom operator import add\n\n\n# Time complexity is O(n) where n is the length of the list.\ndef consecutive_add(lst):\n    return reduce(add, lst)\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    print(consecutive_add(lst))",
    "def consecutive_sum(numbers):\n    \"\"\"\n    >>> consecutive_sum([1, 2, 3, 4, 5])\n    15\n    >>> consecutive_sum([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    return sum(numbers) + (len(numbers) - 1) * numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive_numbers(lst):\n    \"\"\"Add consecutive numbers of a given list.\n\n    >>> add_consecutive_numbers([2, 4, 6, 8])\n    20\n    >>> add_consecutive_numbers([2, 4, 6, 8, 10])\n    30\n    >>> add_consecutive_numbers([5, 10, 15, 20, 25, 30])\n    155\n    \"\"\"\n    return sum(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive(lst):\n    return sum(lst[i] for i in range(len(lst)))\n\n\nprint(add_consecutive([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(l):\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    21\n    >>> add_consecutive_numbers([1])\n    1\n    >>> add_consecutive_numbers([])\n    Traceback (most recent call last):\n        ...\n    ValueError: The list must have at least one element\n    \"\"\"\n    if len(l) < 1:\n        raise ValueError(\"The list must have at least one element\")\n\n    # result = 0\n    # for i in range(len(l)):\n    #     result += l[i]\n    # return result\n\n    # result = 0\n    # for i in l:\n    #     result += i\n    # return result\n\n    result = 0\n    for i in range(len(l)):\n        result += l[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef add_consecutive_numbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    res = [nums[0]]\n\n    for i in range(1, len(nums)):\n        res.append(res[i - 1] + nums[i])\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3]) == [1, 3, 6]",
    "def consecutive_sum(list):\n    total = 0\n    for i in range(len(list)):\n        total += list[i]\n    return total\n\nprint(consecutive_sum([1,2,3,4,5,6,7,8]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(numbers) == 0:\n        return 0\n\n    total = numbers[0]\n\n    for i in range(1, len(numbers)):\n        total += numbers[i]\n\n    return total\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4, 5]) == 15",
    "def sum_consecutive_numbers(list):\n    return sum([x for x in range(list[0], list[1]+1)])\n\nif __name__ == '__main__':\n    print(sum_consecutive_numbers([1, 10]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(nums: List[int]) -> List[int]:\n    \"\"\"Returns the list of consecutive number sums.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev_sum = 0\n    sums = []\n\n    for num in nums:\n        prev_sum += num\n        sums.append(prev_sum)\n\n    return sums\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4]) == [3, 6, 9, 12]",
    "def consecutive_add(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + consecutive_add(l[1:])\n\n\nprint(consecutive_add([2, 3, 4, 5, 6]))",
    "def add_consecutive_numbers(a):\n    \"\"\"\n    Add consecutive numbers of a given list.\n\n    Args:\n        a(list): list of integers.\n    Returns:\n        list: list of integers.\n    \"\"\"\n    if not a:\n        return a\n    return [sum(a[i:i+2]) for i in range(len(a) - 1)]\n\n\nif __name__ == '__main__':\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))\n    print(add_consecutive_numbers([]))",
    "from typing import List\n\n\ndef sum_consecutive_numbers(list_of_numbers: List[int]) -> int:\n    \"\"\"Sums the consecutive numbers of a given list.\n\n    Args:\n        list_of_numbers (List[int]): The list to sum.\n\n    Examples:\n        >>> sum_consecutive_numbers([1, 2, 3, 4])\n        10\n        >>> sum_consecutive_numbers([1, 1, 1, 1])\n        4\n        >>> sum_consecutive_numbers([10, 10, 10, 10])\n        40\n    \"\"\"\n    return sum(list_of_numbers)\n\n\ndef main():\n    list_of_numbers = [int(input(\"Enter a number: \")) for _ in range(4)]\n    print(sum_consecutive_numbers(list_of_numbers))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def add_consecutive(nums):\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        nums[i] = total\n    return nums\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(add_consecutive(nums))",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef sum_of_consecutive(lst: List[int]) -> List[int]:\n    sum_lst = [0]\n\n    for i in range(len(lst)):\n        sum_lst.append(sum_lst[-1] + lst[i])\n\n    return sum_lst\n\n\n# O(n) time | O(1) space\ndef sum_of_consecutive_constant_space(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n\n    sum_lst = [0]\n    i = 0\n\n    while i < len(lst) - 1:\n        sum_lst.append(sum_lst[-1] + lst[i])\n        i += 1\n\n    return sum_lst\n\n\n\"\"\"\n\n    O(n) time | O(1) space\n    O(n) time | O(n) space\n\n    O(n) time | O(n) space\n    O(n) time | O(1) space\n\n\"\"\"",
    "from functools import reduce\nfrom typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"Add consecutive numbers.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n        21\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8])\n        36\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        45\n    \"\"\"\n    return reduce(lambda x, y: x + y, numbers)\n\n\ndef add_consecutive_numbers_pythonic(numbers: List[int]) -> int:\n    \"\"\"Add consecutive numbers.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers_pythonic([1, 2, 3, 4, 5, 6])\n        21\n        >>> add_consecutive_numbers_pythonic([1, 2, 3, 4, 5, 6, 7, 8])\n        36\n        >>> add_consecutive_numbers_pythonic([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        45\n    \"\"\"\n    return sum(numbers)\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "from typing import List\n\n\ndef consecutive_sum(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert consecutive_sum([1, 2, 3, 4]) == [1, 3, 6, 10]\n    \"\"\"\n    if not numbers:\n        return []\n\n    return [sum(numbers[i : i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    print(consecutive_sum([1, 2, 3, 4]))",
    "def consecutive_sum(arr):\n    return sum(arr)\n\n\ndef test_consecutive_sum():\n    assert consecutive_sum([1, 2, 3, 4, 5]) == 15\n    assert consecutive_sum([1, 2, 3, 4, 5, 6]) == 21\n    assert consecutive_sum([1, 2, 3, 4, 5, 6, 7]) == 28\n    assert consecutive_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 36\n    assert consecutive_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n    assert consecutive_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers in a list.\n\n    Args:\n        numbers (List[int]): list of numbers.\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return [sum(numbers[i:i + 2]) for i in range(len(numbers) - 1)]\n\n\ndef add_consecutive_numbers_list_comprehension(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers in a list.\n\n    Args:\n        numbers (List[int]): list of numbers.\n\n    Examples:\n        >>> add_consecutive_numbers_list_comprehension([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return [sum(numbers[i:i + 2]) for i in range(len(numbers) - 1)]\n\n\ndef add_consecutive_numbers_reduce(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers in a list.\n\n    Args:\n        numbers (List[int]): list of numbers.\n\n    Examples:\n        >>> add_consecutive_numbers_reduce([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return [sum(numbers[i:i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))\n    print(add_consecutive_numbers_list_comprehension([1, 2, 3, 4, 5]))\n    print(add_consecutive_numbers_reduce([1, 2, 3, 4, 5]))",
    "from functools import reduce\nfrom typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): input list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return [\n        reduce(lambda x, y: x + y, numbers[i:i + 2])\n        for i in range(len(numbers) - 1)\n    ]\n\n\ndef add_consecutive_numbers_pythonic(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): input list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers_pythonic([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return list(\n        map(sum,\n            zip(numbers, numbers[1:]))\n    )\n\n\ndef add_consecutive_numbers_pythonic_2(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): input list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers_pythonic_2([1, 2, 3, 4, 5])\n        [3, 5, 7, 9]\n    \"\"\"\n    return [\n        sum(pair)\n        for pair in zip(numbers, numbers[1:])\n    ]\n\n\ndef add_consecutive_numbers_pythonic_3(numbers: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        numbers (List[int]): input list of numbers\n\n    Examples:\n        >>> add_consecutive_numbers_pythonic_3([1",
    "from typing import List\n\n\n# O(n)\ndef add_consecutive_numbers(lst: List[int]) -> int:\n    \"\"\"Returns sum of consecutive numbers in a list.\n\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(lst[i] + lst[i + 1] for i in range(len(lst) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive_numbers(numbers):\n    sum = 0\n    for i in range(0, len(numbers)):\n        sum += numbers[i]\n        numbers[i] = sum\n    return numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\nprint(add_consecutive_numbers(numbers))",
    "from functools import reduce\n\n\ndef add_consecutive_numbers(numbers):\n    return reduce(lambda a, b: a + b, numbers, 0)\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(nums):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    new_nums = []\n    for i in range(len(nums)):\n        if i == 0:\n            new_nums.append(nums[i])\n        else:\n            new_nums.append(new_nums[i-1] + nums[i])\n    return new_nums\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    assert add_consecutive_numbers(nums) == [1, 3, 6, 10]",
    "from typing import List\n\n\ndef add_consecutive(input_list: List[int]) -> int:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        input_list (List[int]): The input list\n\n    Examples:\n        >>> assert add_consecutive([1, 2, 3]) == 6\n        >>> assert add_consecutive([1, 2, 3, 4]) == 10\n        >>> assert add_consecutive([1, 2, 3, 4, 5]) == 15\n    \"\"\"\n    return sum(input_list)\n\n\ndef add_consecutive_opt(input_list: List[int]) -> int:\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        input_list (List[int]): The input list\n\n    Examples:\n        >>> assert add_consecutive_opt([1, 2, 3]) == 6\n        >>> assert add_consecutive_opt([1, 2, 3, 4]) == 10\n        >>> assert add_consecutive_opt([1, 2, 3, 4, 5]) == 15\n    \"\"\"\n    return sum(input_list)\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive([1, 2, 3]))",
    "def add_consecutive_numbers(list):\n    sum = 0\n    for i in range(len(list)):\n        sum += list[i]\n    return sum\n\n\nlist = [1,2,3,4]\nprint(add_consecutive_numbers(list))",
    "def add_consecutive_numbers(numbers):\n    if len(numbers) <= 1:\n        return numbers\n    return [numbers[0] + numbers[1]] + add_consecutive_numbers(numbers[1:])\n\n\nif __name__ == '__main__':\n    print(add_consecutive_numbers([1, 2, 3]))\n    print(add_consecutive_numbers([1, 2, 3, 4]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "def add_consecutive(numbers):\n    \"\"\"\n    :param numbers: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            result.append(numbers[i] + numbers[i + 1])\n    return result\n\n\nprint(add_consecutive([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(input_list):\n    if not input_list:\n        return []\n\n    result = []\n    current_sum = 0\n    for i in range(len(input_list)):\n        current_sum += input_list[i]\n        if i == len(input_list) - 1:\n            result.append(current_sum)\n        else:\n            result.append(current_sum - input_list[i + 1])\n    return result\n\ndef test_function(test_case):\n    output = add_consecutive_numbers(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[], []]\ntest_function(test_case_1)\n\ntest_case_2 = [[1], [1]]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 2, 3], [4, 3, 2]]\ntest_function(test_case_3)\n\ntest_case_4 = [[1, 2, 3, 4, 5], [10, 7, 4, 1]]\ntest_function(test_case_4)\n\ntest_case_5 = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [18, 15, 12, 9, 6, 3, 0, -3, -6, -9]]\ntest_function(test_case_5)",
    "from typing import List\n\n\ndef add_consecutive_numbers(list_: List[int]) -> int:\n    \"\"\"Returns the sum of consecutive numbers in a list.\n\n    Args:\n        list_ (List[int]): The list of integers.\n\n    Examples:\n        >>> assert add_consecutive_numbers([1, 2, 3, 4]) == 10\n    \"\"\"\n    return sum(list_[i] + list_[i + 1] for i in range(len(list_[:-1])))\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n\n    for i in range(len(nums)):\n        total += nums[i]\n\n    return total\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4, 5]) == 15",
    "def add_consecutive_numbers(numbers):\n    \"\"\"\n    Add consecutive numbers of a given list.\n\n    :param numbers: list of integers\n    :return: sum of consecutive numbers\n    \"\"\"\n    return sum([x + y for x, y in zip(numbers, numbers[1:])])\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))\nprint(add_consecutive_numbers([1, 2, 3, 4]))\nprint(add_consecutive_numbers([1, 2, 3]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> List[int]:\n    \"\"\"Returns the list of consecutive numbers.\n\n    Args:\n        numbers (List[int]): list of integers.\n\n    Examples:\n        >>> assert add_consecutive_numbers([1, 2, 3]) == [3, 5, 7]\n    \"\"\"\n    return [sum(numbers[i : i + 2]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3]))",
    "def consecutive_sum(arr):\n    # loop through the array\n    # add the first and second number\n    # add the result to a new array\n    # return the new array\n    new_arr = []\n    for i in range(len(arr) - 1):\n        new_arr.append(arr[i] + arr[i + 1])\n    return new_arr\n\n\nprint(consecutive_sum([1, 2, 3, 4, 5]))",
    "def add_consecutive(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    temp_sum = 0\n\n    for i in range(len(nums)):\n        temp_sum += nums[i]\n        if i == len(nums) - 1:\n            result.append(temp_sum)\n        else:\n            if nums[i + 1] == 0:\n                result.append(temp_sum)\n                temp_sum = 0\n            else:\n                result.append(temp_sum)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 0, 13, 14, 0, 0]\n    print(add_consecutive(nums))",
    "def sum_consecutive_numbers(arr):\n    total = 0\n    for i in range(len(arr)):\n        if i < len(arr) - 1:\n            total += arr[i] + arr[i + 1]\n    return total\n\n\nprint(sum_consecutive_numbers([1, 2, 3, 4, 5]))\nprint(sum_consecutive_numbers([1, 1, 1, 1, 1]))\nprint(sum_consecutive_numbers([1, 2, 3, 4, 5, 6]))",
    "def add_consecutive(arr):\n    return sum(arr)\n\n\nprint(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(add_consecutive([1, 2, 3, 4, 5, 6, 7]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(lst: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    new_lst = []\n\n    for i in range(len(lst) - 1):\n        new_lst.append(lst[i] + lst[i + 1])\n\n    return new_lst\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4]) == [3, 5, 7]",
    "from typing import List\n\n\ndef consecutive_sum(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Consecutive sum.\n    :param numbers: List of numbers.\n    :return: List of summed numbers.\n    >>> consecutive_sum([1, 2, 3, 4])\n    [3, 5, 7, 9]\n    \"\"\"\n    if not numbers:\n        return []\n\n    # Initialise sum list\n    sum_list = [numbers[0]]\n\n    for i in range(1, len(numbers)):\n        sum_list.append(sum_list[i - 1] + numbers[i])\n\n    return sum_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def add_consecutive(nums):\n    total = 0\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            total += nums[i] + nums[i + 1]\n        else:\n            total += nums[i]\n    return total\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(list):\n    return sum(list[i] for i in range(len(list)))\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def add_consecutive(lst):\n    # return [lst[i] + lst[i+1] for i in range(len(lst)-1)]\n    return [lst[i] + lst[i+1] for i in range(len(lst)-1) if lst[i] + lst[i+1] > 0]\n\n\nprint(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(input_list: List[int]) -> List[int]:\n    \"\"\"Adds consecutive numbers in a list.\n\n    Args:\n        input_list (List[int]): the list to add consecutive numbers.\n\n    Examples:\n        >>> add_consecutive_numbers([1, 2, 3])\n        [3, 5, 8]\n        >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n        [3, 7, 12, 20, 31]\n\n    Returns:\n        List[int]: list with consecutive numbers.\n    \"\"\"\n    result = [input_list[0]]\n    for index in range(1, len(input_list)):\n        result.append(result[index - 1] + input_list[index])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))",
    "def add_consecutive_numbers(lst):\n    total = 0\n    for index, value in enumerate(lst):\n        if index == 0:\n            total += value\n        else:\n            total += (value - lst[index - 1])\n\n    return total\n\n\ndef test_add_consecutive_numbers():\n    \"\"\"\n    >>> test_add_consecutive_numbers()\n    True\n    \"\"\"\n    assert add_consecutive_numbers([1, 2, 3, 4]) == 3\n    assert add_consecutive_numbers([1, 2, 3, 4, 5]) == 7\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6]) == 12\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def add_consecutive_numbers(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))\nprint(add_consecutive_numbers([1, 1, 1, 1, 1, 1]))\nprint(add_consecutive_numbers([-1, -2, -3, -4, -5, -6]))\n\n\"\"\"\nWrite a function to check if a given number is a power of 2 or not.\n\"\"\"\n\ndef is_power_of_two(num):\n    return (num > 0) and ((num & (num - 1)) == 0)\n\nprint(is_power_of_two(2))\nprint(is_power_of_two(16))\nprint(is_power_of_two(3))\n\n\"\"\"\nWrite a function that takes in a string of lowercase letters and spaces, and returns a string of the letters in uppercase with no spaces.\n\"\"\"\n\ndef to_upper(string):\n    return string.upper().replace(' ', '')\n\nprint(to_upper('hello world'))\nprint(to_upper('HELLO WORLD'))\nprint(to_upper('789'))\n\n\"\"\"\nWrite a function that takes in a string and returns a string with the spaces removed and all characters in uppercase.\n\"\"\"\n\ndef to_upper_no_spaces(string):\n    return string.upper().replace(' ', '')\n\nprint(to_upper_no_spaces('hello world'))\nprint(to_upper_no_spaces('HELLO WORLD'))\nprint(to_upper_no_spaces('789'))\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not.\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome('noon'))\nprint(is_palindrome('racecar'))\nprint(is",
    "def add_consecutive_numbers(lst):\n    total = 0\n    for i in range(len(lst)):\n        total += lst[i]\n        lst[i] = total\n    return lst\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(list_of_numbers: List[int]) -> int:\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    total = 0\n\n    for index in range(len(list_of_numbers)):\n        if index + 1 < len(list_of_numbers):\n            total += list_of_numbers[index] + list_of_numbers[index + 1]\n\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\nfrom typing import List\n\n\ndef sum_consecutive_numbers(l: List[int]) -> int:\n    \"\"\"Sums consecutive numbers in a list.\n\n    Args:\n        l (List[int]): list of integers.\n\n    Examples:\n        >>> sum_consecutive_numbers([1, 2, 3, 4])\n        10\n        >>> sum_consecutive_numbers([1, 2, 3, 4, 5])\n        15\n    \"\"\"\n    return reduce(lambda x, y: x + y, l)\n\n\ndef sum_consecutive_numbers_opt(l: List[int]) -> int:\n    \"\"\"Sums consecutive numbers in a list.\n\n    Args:\n        l (List[int]): list of integers.\n\n    Examples:\n        >>> sum_consecutive_numbers_opt([1, 2, 3, 4])\n        10\n        >>> sum_consecutive_numbers_opt([1, 2, 3, 4, 5])\n        15\n    \"\"\"\n    return sum(l)\n\n\nif __name__ == \"__main__\":\n    print(sum_consecutive_numbers([1, 2, 3, 4]))\n    print(sum_consecutive_numbers([1, 2, 3, 4, 5]))",
    "def add_consecutive_numbers(list):\n    if not list:\n        return None\n    total = 0\n    for i in range(len(list)):\n        total += list[i]\n    return total\n\nif __name__ == '__main__':\n    print(add_consecutive_numbers([1, 2, 3, 4]))\n    print(add_consecutive_numbers([]))\n    print(add_consecutive_numbers([1, 2]))\n    print(add_consecutive_numbers([1]))",
    "def add_consecutive_numbers(numbers):\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    return sum(range(numbers[0], numbers[-1] + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_numbers(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n\n\ndef sum_numbers2(lst):\n    return sum(lst)\n\n\ndef sum_numbers3(lst):\n    return reduce(lambda x, y: x + y, lst)\n\n\ndef sum_numbers4(lst):\n    return sum(lst)\n\n\ndef sum_numbers5(lst):\n    return sum(lst)\n\n\ndef sum_numbers6(lst):\n    return sum(lst)\n\n\ndef sum_numbers7(lst):\n    return sum(lst)\n\n\ndef sum_numbers8(lst):\n    return sum(lst)\n\n\ndef sum_numbers9(lst):\n    return sum(lst)\n\n\ndef sum_numbers10(lst):\n    return sum(lst)\n\n\ndef sum_numbers11(lst):\n    return sum(lst)\n\n\ndef sum_numbers12(lst):\n    return sum(lst)\n\n\ndef sum_numbers13(lst):\n    return sum(lst)\n\n\ndef sum_numbers14(lst):\n    return sum(lst)\n\n\ndef sum_numbers15(lst):\n    return sum(lst)\n\n\ndef sum_numbers16(lst):\n    return sum(lst)\n\n\ndef sum_numbers17(lst):\n    return sum(lst)\n\n\ndef sum_numbers18(lst):\n    return sum(lst)\n\n\ndef sum_numbers19(lst):\n    return sum(lst)\n\n\ndef sum_numbers20(lst):\n    return sum(lst)\n\n\ndef sum_numbers21(lst):\n    return sum(lst)\n\n\ndef sum_numbers22(lst):\n    return sum(lst)\n\n\ndef sum_numbers23(lst):\n    return sum(lst)\n\n\ndef sum_numbers24(lst):\n    return sum(lst)\n\n\ndef sum_numbers25(lst):\n    return sum(lst)\n\n\ndef sum_numbers26(lst):\n    return sum(lst)\n\n\ndef sum",
    "from typing import List\n\n\ndef add_consecutive(list_in: List[int]) -> int:\n    \"\"\"\n    Return the sum of consecutive numbers of a given list.\n\n    :param list_in: List of integers.\n    :return: Sum of consecutive numbers.\n    \"\"\"\n    length = len(list_in)\n    return sum(list_in[i] + list_in[i + 1] for i in range(length - 1))",
    "from functools import reduce\nfrom typing import List\n\n\ndef add_consecutive_numbers(lst: List[int]) -> List[int]:\n    return [\n        reduce(lambda x, y: x + y, lst[i : i + 2])\n        for i in range(len(lst) - 1)\n    ]\n\n\ndef main():\n    print(add_consecutive_numbers([1, 2, 3, 4]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))\n    print(add_consecutive_numbers([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def add_consecutive_numbers(list):\n    for i in range(len(list)):\n        list[i] = list[i] + list[i+1]\n    return list[0:len(list)-1]\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]))",
    "from typing import List\n\n\ndef add_consecutive_numbers(input_list: List[int]) -> int:\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3])\n    6\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    return sum(input_list)\n\n\ndef add_consecutive_numbers_recursive(input_list: List[int]) -> int:\n    \"\"\"\n    >>> add_consecutive_numbers_recursive([1, 2, 3])\n    6\n    >>> add_consecutive_numbers_recursive([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    if len(input_list) == 1:\n        return input_list[0]\n    return input_list[0] + add_consecutive_numbers_recursive(input_list[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\nfrom typing import List\n\n\ndef add_consecutive(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x + y, numbers, 0)\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive([1, 2, 3, 4, 5]) == 15",
    "def add_consecutive_numbers(input_list):\n    result = []\n\n    for i in range(len(input_list)):\n        if i == 0:\n            result.append(input_list[i])\n        else:\n            result.append(input_list[i] + result[i - 1])\n\n    return result\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4]))\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))\nprint(add_consecutive_numbers([1]))\nprint(add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "from typing import List\n\n\ndef consecutive_sum(lst: List) -> List:\n    \"\"\"Returns a list with consecutive sum of given list.\n\n    Args:\n        lst (List): given list\n\n    Returns:\n        List: list with consecutive sum of given list\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        if i == 0:\n            res.append(lst[i])\n        else:\n            res.append(res[i - 1] + lst[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert consecutive_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
    "def add_consecutive(lst):\n    \"\"\"\n    >>> add_consecutive([2, 10, 20, 30, 40, 50, 60, 70, 80, 90])\n    [2, 12, 32, 42, 52, 62, 72, 82, 92]\n    \"\"\"\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef add_consecutive_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not numbers:\n        return 0\n\n    sum = 0\n\n    for i in range(len(numbers)):\n        sum += numbers[i]\n\n    return sum\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([]) == 0\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55",
    "def add_consecutive_numbers(lst):\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    15\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    return sum(lst[i] + lst[i + 1] for i in range(len(lst) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\n\n\ndef add_consecutive_numbers(lst):\n    \"\"\"Adds consecutive numbers of a given list.\n\n    Args:\n        lst: list of numbers\n\n    Returns:\n        list of numbers with consecutive numbers added\n    \"\"\"\n    return [reduce(lambda x, y: x + y, lst[i: i + 2]) for i in range(len(lst) - 1)]\n\n\ndef main():\n    print(add_consecutive_numbers([1, 2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()",
    "from functools import reduce\nfrom operator import add\n\n\ndef add_consecutive(l):\n    return reduce(add, l)\n\n\ndef main():\n    print(\"The sum of the list [1, 2, 3, 4, 5] is: \" + str(add_consecutive([1, 2, 3, 4, 5])))\n    print(\"The sum of the list [10, 10, 10] is: \" + str(add_consecutive([10, 10, 10])))\n\n\nif __name__ == '__main__':\n    main()",
    "def add_consecutive_numbers(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: sum of consecutive numbers\n    \"\"\"\n    return sum(nums[i] + nums[i + 1] for i in range(len(nums) - 1))\n\n\nprint(add_consecutive_numbers([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef consecutive_sum(numbers: List[int]) -> List[int]:\n    \"\"\"\n    :param numbers: list of numbers\n    :return: list of numbers with consecutive sum\n    >>> consecutive_sum([1, 2, 3, 4, 5])\n    [1, 3, 6, 10, 15]\n    >>> consecutive_sum([1, 2, 3, 4, 5, 6, 7, 8])\n    [1, 3, 6, 10, 15, 21, 28, 36]\n    >>> consecutive_sum([-1, 0, 1, 2, 3, 4])\n    [-1, 0, 1, 3, 6, 10]\n    >>> consecutive_sum([-1, -2, -3, -4, -5])\n    [-1, -3, -6, -10, -15]\n    \"\"\"\n    return [\n        sum(numbers[i : i + j + 1]) for i in range(len(numbers)) for j in range(len(numbers))\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef add_consecutive_numbers(input_list: List[int]) -> int:\n    \"\"\"Returns the sum of the consecutive numbers in the list.\"\"\"\n    return sum(input_list)\n\n\nif __name__ == \"__main__\":\n    print(add_consecutive_numbers([1, 2, 3, 4]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}