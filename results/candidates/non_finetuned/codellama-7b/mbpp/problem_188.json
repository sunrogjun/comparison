{
  "problem": {
    "task_id": "MBPP/199",
    "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
    "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
    "test_list": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ],
    "challenge_test_list": [],
    "problem_id": 188
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def highest_power_of_2(num):\n    if num == 0:\n        return 0\n\n    count = 0\n    power = 1\n    while power <= num:\n        power = power << 1\n        count += 1\n\n    return count - 1\n\n\nprint(highest_power_of_2(3))\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(12))",
    "def highest_power(n):\n    p = 0\n    while(2**p <= n):\n        p += 1\n    return p-1\n\n\nprint(highest_power(25))",
    "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    return 2 ** (len(bin(n)) - 2)\n\n\nprint(highest_power_of_2(31))\nprint(highest_power_of_2(32))\nprint(highest_power_of_2(65))\nprint(highest_power_of_2(64))",
    "def highest_power_of_2(num):\n    power = 0\n    while num != 0:\n        power += 1\n        num >>= 1\n    return power\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(12))",
    "def power_of_2(n):\n    count = 0\n    while (1 << count) <= n:\n        count += 1\n    return count - 1\n\nn = int(input(\"Enter a number: \"))\nprint(power_of_2(n))",
    "def highest_power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n\n    return power - 1\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(13))",
    "def highest_power_of_2(number):\n    power = 0\n    while (2 ** power) <= number:\n        power += 1\n\n    return power - 1\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(13))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(19))",
    "def highest_power_of_2(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return 2 ** (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_2(10) == 8",
    "def highest_power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n\nprint(highest_power_of_2(10))",
    "def highest_power_of_2(number):\n    power = 0\n    while (1 << power) <= number:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_2(11))",
    "def find_highest_power_of_2(number: int) -> int:\n    \"\"\"\n    >>> find_highest_power_of_2(2)\n    1\n    >>> find_highest_power_of_2(12)\n    4\n    >>> find_highest_power_of_2(16)\n    4\n    >>> find_highest_power_of_2(15)\n    1\n    \"\"\"\n\n    # Using bitwise operator\n    return 2 ** (number - 1).bit_length()\n\n\ndef find_highest_power_of_2_recursive(number: int) -> int:\n    \"\"\"\n    >>> find_highest_power_of_2_recursive(2)\n    1\n    >>> find_highest_power_of_2_recursive(12)\n    4\n    >>> find_highest_power_of_2_recursive(16)\n    4\n    >>> find_highest_power_of_2_recursive(15)\n    1\n    \"\"\"\n    if number <= 1:\n        return number\n    return 2 if number == 2 else 2 ** (number - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(number):\n    power = 0\n    while 2**power <= number:\n        power += 1\n    return 2**(power-1)\n\n\ndef test_cases():\n    assert highest_power_of_2(16) == 8\n    assert highest_power_of_2(5) == 4\n    assert highest_power_of_2(6) == 4\n    assert highest_power_of_2(7) == 4\n    assert highest_power_of_2(8) == 8\n    assert highest_power_of_2(1) == 1\n    assert highest_power_of_2(0) == 0\n    assert highest_power_of_2(-1) == 0\n    print(\"Test Success!\")\n\n\ntest_cases()",
    "def highest_power_of_2(number):\n    # binary search\n    low = 0\n    high = number\n    while low <= high:\n        mid = (low + high) // 2\n        if mid == 0:\n            return mid\n        if mid * mid > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high\n\n\ndef test_cases():\n    assert highest_power_of_2(6) == 4\n    assert highest_power_of_2(10) == 4\n    assert highest_power_of_2(5) == 4\n    assert highest_power_of_2(16) == 4\n    assert highest_power_of_2(3) == 1\n    assert highest_power_of_2(2) == 1\n    assert highest_power_of_2(1) == 1\n    print(\"Test Successfull\")\n\n\nif __name__ == \"__main__\":\n    test_cases()",
    "def highest_power_2(number):\n    count = 0\n    power = 1\n    while power <= number:\n        power = power * 2\n        count += 1\n    return count - 1\n\n\nif __name__ == \"__main__\":\n    print(highest_power_2(32))\n    print(highest_power_2(10))\n    print(highest_power_2(20))",
    "def highest_power_of_2(num):\n    power = 0\n    while (num >> power) > 0:\n        power += 1\n    return power - 1\n\n\ndef test_power_of_2():\n    assert highest_power_of_2(1) == 0\n    assert highest_power_of_2(2) == 1\n    assert highest_power_of_2(10) == 3\n    assert highest_power_of_2(12) == 4\n    assert highest_power_of_2(13) == 4\n    assert highest_power_of_2(16) == 4\n    assert highest_power_of_2(17) == 4\n    assert highest_power_of_2(20) == 5\n    assert highest_power_of_2(21) == 5\n    assert highest_power_of_2(22) == 5\n    assert highest_power_of_2(25) == 5\n    assert highest_power_of_2(26) == 6\n\n\nif __name__ == \"__main__\":\n    test_power_of_2()",
    "def highest_power_of_2(num):\n    highest_power = 0\n\n    while num > 0:\n        highest_power += 1\n        num >>= 1\n\n    return highest_power\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = highest_power_of_2(num)\n    print(f\"Highest power of 2 less than or equal to {num} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_highest_power(number):\n    power = 1\n    while power <= number:\n        power = power * 2\n    return power / 2\n\n\nprint(find_highest_power(10))\nprint(find_highest_power(12))\nprint(find_highest_power(24))\nprint(find_highest_power(63))",
    "def highest_power_of_2(num):\n    if num == 0:\n        return 0\n    return (num - 1).bit_length()\n\n\ndef highest_power_of_2_2(num):\n    if num == 0:\n        return 0\n    return num.bit_length() - 1\n\n\ndef main():\n    val1 = int(input(\"Enter the number: \"))\n    ans1 = highest_power_of_2(val1)\n    ans2 = highest_power_of_2_2(val1)\n    print(f\"Highest power of 2 less than or equal to {val1} is {ans1} and {ans2}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(number):\n    return 2 ** (number - 1).bit_length()\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(30))\nprint(highest_power_of_2(2))\nprint(highest_power_of_2(0))",
    "def highest_power_of_2(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return 2 ** (num - 1).bit_length()\n\nprint(highest_power_of_2(100))\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(1000))",
    "def power_of_2(number):\n    power = 0\n    while 2**power <= number:\n        power += 1\n    return 2**(power-1)\n\n\nprint(power_of_2(10))\nprint(power_of_2(20))\nprint(power_of_2(50))\nprint(power_of_2(100))",
    "def highest_power_of_2(n):\n    if n <= 0:\n        return 0\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    val1 = highest_power_of_2(10)\n    print(f\"Highest power of 2 less than or equal to 10 is: {val1}\")\n\n    val2 = highest_power_of_2(16)\n    print(f\"Highest power of 2 less than or equal to 16 is: {val2}\")\n\n    val3 = highest_power_of_2(17)\n    print(f\"Highest power of 2 less than or equal to 17 is: {val3}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_two(n):\n    \"\"\"\n    Returns highest power of 2 less than or equal to given number\n    >>> highest_power_of_two(100)\n    32\n    >>> highest_power_of_two(32)\n    32\n    >>> highest_power_of_two(64)\n    32\n    >>> highest_power_of_two(128)\n    64\n    >>> highest_power_of_two(256)\n    128\n    >>> highest_power_of_two(512)\n    256\n    \"\"\"\n    if n == 0:\n        return 0\n\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 ** (n.bit_length() - 1)\n\n\nprint(highest_power_of_2(100))",
    "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return 2**len(bin(n-1))\n\n\ndef test_power_of_2():\n    assert highest_power_of_2(0) == 0\n    assert highest_power_of_2(1) == 1\n    assert highest_power_of_2(2) == 2\n    assert highest_power_of_2(3) == 2\n    assert highest_power_of_2(4) == 4\n    assert highest_power_of_2(5) == 4\n    assert highest_power_of_2(6) == 4\n    assert highest_power_of_2(7) == 4\n    assert highest_power_of_2(8) == 8\n    assert highest_power_of_2(9) == 8\n    assert highest_power_of_2(10) == 8\n    assert highest_power_of_2(11) == 8\n    assert highest_power_of_2(12) == 8\n    assert highest_power_of_2(13) == 8\n    assert highest_power_of_2(14) == 8\n    assert highest_power_of_2(15) == 8\n    assert highest_power_of_2(16) == 16\n    assert highest_power_of_2(17) == 16\n    assert highest_power_of_2(18) == 16\n    assert highest_power_of_2(19) == 16\n    assert highest_power_of_2(20) == 16\n    assert highest_power_of_2(21) == 16\n    assert highest_power_of_2(22) == 16\n    assert highest_power_of_2(23) == 16\n    assert highest_power_of_2(24) == 24\n    assert highest_power_of_2(25) == 24\n    assert highest_power_of_2(26)",
    "def power_of_two(number):\n    power = 0\n    while 2**power <= number:\n        power += 1\n    return power - 1\n\n\ndef test_power_of_two():\n    \"\"\"Test for power_of_two function.\"\"\"\n    assert power_of_two(1) == 0\n    assert power_of_two(2) == 1\n    assert power_of_two(3) == 1\n    assert power_of_two(4) == 2\n    assert power_of_two(5) == 2\n    assert power_of_two(6) == 2\n    assert power_of_two(7) == 2\n    assert power_of_two(8) == 3\n    assert power_of_two(9) == 3\n    assert power_of_two(10) == 3\n    assert power_of_two(11) == 3\n    assert power_of_two(12) == 3\n    assert power_of_two(13) == 3\n    assert power_of_two(14) == 3\n    assert power_of_two(15) == 3\n    assert power_of_two(16) == 4\n    assert power_of_two(17) == 4\n    assert power_of_two(18) == 4\n    assert power_of_two(19) == 4\n    assert power_of_two(20) == 4\n    assert power_of_two(21) == 4\n    assert power_of_two(22) == 4\n    assert power_of_two(23) == 4\n    assert power_of_two(24) == 4\n    assert power_of_two(25) == 4\n    assert power_of_two(26) == 4\n    assert power_of_two(27) == 4\n    assert power_of_two(28) == 4\n    assert power_of_two(29) == 4\n    assert power_of_two(30) == 4\n    assert power_of",
    "def highest_power_of_2(number):\n    count = 0\n    while number != 0:\n        count += 1\n        number >>= 1\n    return 2 ** count\n\n\ndef test_highest_power_of_2():\n    assert highest_power_of_2(1024) == 10\n    assert highest_power_of_2(1000) == 8\n    assert highest_power_of_2(1) == 1\n    assert highest_power_of_2(0) == 0",
    "def highest_power_of_2(number):\n    highest_power = 0\n    while number:\n        highest_power += 1\n        number >>= 1\n    return highest_power\n\n\nprint(highest_power_of_2(1024))",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    >>> highest_power_of_2(10)\n    4\n    >>> highest_power_of_2(100)\n    16\n    >>> highest_power_of_2(1000)\n    16\n    >>> highest_power_of_2(10000)\n    32\n    >>> highest_power_of_2(100000)\n    64\n    >>> highest_power_of_2(10000000)\n    64\n    >>> highest_power_of_2(100000000)\n    128\n    >>> highest_power_of_2(1000000000)\n    256\n    >>> highest_power_of_2(10000000000)\n    512\n    >>> highest_power_of_2(100000000000)\n    1024\n    >>> highest_power_of_2(1000000000000)\n    2048\n    \"\"\"\n    return (number & (number - 1)) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(num):\n    power = 0\n    while 2**power <= num:\n        power += 1\n    return power-1\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(12))\nprint(highest_power_of_2(1024))",
    "def power_of_two(number):\n    if number == 0:\n        return 0\n\n    count = 0\n    while number > 1:\n        number = number >> 1\n        count += 1\n    return count\n\n\nprint(power_of_two(15))\nprint(power_of_two(17))\nprint(power_of_two(256))\nprint(power_of_two(257))",
    "def highest_power_of_2(number):\n    power = 0\n    while (2 ** power) <= number:\n        power += 1\n    return 2 ** (power - 1)\n\n\ndef test_highest_power_of_2():\n    assert highest_power_of_2(10) == 8\n    assert highest_power_of_2(8) == 8\n    assert highest_power_of_2(21) == 16\n    assert highest_power_of_2(32) == 32\n\n\nif __name__ == \"__main__\":\n    test_highest_power_of_2()",
    "def highest_power_of_two(num):\n    power = 0\n    while 2 ** power <= num:\n        power += 1\n    return 2 ** (power - 1)\n\n\ndef test_highest_power_of_two():\n    \"\"\"\n    >>> test_highest_power_of_two()\n    \"\"\"\n    assert highest_power_of_two(15) == 8\n    assert highest_power_of_two(64) == 64\n    assert highest_power_of_two(42) == 32\n    assert highest_power_of_two(3) == 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(number):\n    highest_power = 0\n    while number > 0:\n        highest_power += 1\n        number >>= 1\n    return highest_power\n\n\nprint(highest_power_of_2(128))\nprint(highest_power_of_2(127))\nprint(highest_power_of_2(1024))",
    "def highest_power_of_2(num):\n    return 2**(num-1).bit_length()\n\n\ndef test_power_of_2(num, expected_answer):\n    answer = highest_power_of_2(num)\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\")\n\n\nif __name__ == \"__main__\":\n    test_power_of_2(1, 1)\n    test_power_of_2(2, 2)\n    test_power_of_2(3, 2)\n    test_power_of_2(4, 4)\n    test_power_of_2(5, 4)\n    test_power_of_2(6, 4)\n    test_power_of_2(7, 4)\n    test_power_of_2(8, 8)\n    test_power_of_2(9, 8)\n    test_power_of_2(10, 8)\n    test_power_of_2(11, 8)\n    test_power_of_2(12, 8)\n    test_power_of_2(13, 8)\n    test_power_of_2(14, 8)\n    test_power_of_2(15, 8)\n    test_power_of_2(16, 16)\n    test_power_of_2(17, 16)\n    test_power_of_2(18, 16)\n    test_power_of_2(19, 16)\n    test_power_of_2(20, 16)\n    test_power_of_2(21, 16)\n    test_power_of_2(22, 16)\n    test_power_of_2(23, 16)\n    test_power_of_2(24, 24)\n    test_power_of_2(25, 24)\n    test_",
    "def highest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_2(20))",
    "def find_highest_power_of_2_less_than_or_equal_to(num):\n    power = 1\n    while 2**power <= num:\n        power += 1\n    return 2**(power-1)\n\n\ndef main():\n    print(find_highest_power_of_2_less_than_or_equal_to(10))\n    print(find_highest_power_of_2_less_than_or_equal_to(20))\n    print(find_highest_power_of_2_less_than_or_equal_to(32))\n    print(find_highest_power_of_2_less_than_or_equal_to(128))\n    print(find_highest_power_of_2_less_than_or_equal_to(1000000000))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(num):\n    count = 0\n    while(num > 0):\n        num = num >> 1\n        count = count + 1\n    return count\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(20))\nprint(highest_power_of_2(40))\nprint(highest_power_of_2(100))",
    "def highest_power_of_2(num):\n    return 2 ** (num - 1).bit_length()\n\nprint(highest_power_of_2(5))\nprint(highest_power_of_2(6))\nprint(highest_power_of_2(7))\nprint(highest_power_of_2(8))",
    "def power_of_2(number):\n    power = 0\n    while 2**power <= number:\n        power += 1\n    return power - 1\n\n\nprint(power_of_2(15))\nprint(power_of_2(16))\nprint(power_of_2(20))",
    "def power_of_2(num):\n    power = 0\n    while (1 << power) <= num:\n        power += 1\n\n    return power - 1\n\n\nprint(power_of_2(10))",
    "def power_of_2(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n\n    # if num % 2 == 0:\n    #     return 2 ** power_of_2(num // 2)\n    # else:\n    #     return 2 ** power_of_2(num // 2 + 1)\n\n    # return 2 ** power_of_2(num // 2)\n    return 2 ** (num - 1).bit_length()\n\n\nprint(power_of_2(10))",
    "def highest_power_of_two(num):\n    return pow(2, int(log(num, 2)))\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(\"Highest power of two less than or equal to {} is {}\".format(num, highest_power_of_two(num)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(number):\n    if number == 0:\n        return 0\n\n    count = 0\n    power = 1\n\n    while power <= number:\n        power = power << 1\n        count += 1\n\n    return count - 1\n\n\nprint(highest_power_of_2(10))",
    "def highest_power(num: int) -> int:\n    \"\"\"\n    >>> highest_power(6)\n    4\n    >>> highest_power(32)\n    16\n    >>> highest_power(100)\n    32\n    \"\"\"\n    return 2 ** (num - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    Return the highest power of 2 less than or equal to given number.\n    >>> highest_power_of_2(10)\n    4\n    >>> highest_power_of_2(16)\n    8\n    >>> highest_power_of_2(25)\n    8\n    >>> highest_power_of_2(32)\n    16\n    >>> highest_power_of_2(40)\n    32\n    \"\"\"\n    # return 2 ** (number.bit_length() - 1)\n    return 2 ** (number.bit_length() - 1) if number & (2 ** (number.bit_length() - 1)) else 2 ** (number.bit_length() - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def highest_power_of_two(number: int):\n    \"\"\"\n    >>> highest_power_of_two(15)\n    8\n    >>> highest_power_of_two(1024)\n    1024\n    \"\"\"\n    return 2 ** (number - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_highest_power_of_2(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(logN)\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 0:\n        return 0\n\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n\nif __name__ == \"__main__\":\n    print(find_highest_power_of_2(5))\n    print(find_highest_power_of_2(6))\n    print(find_highest_power_of_2(10))\n    print(find_highest_power_of_2(20))",
    "def highest_power_of_2(num):\n    count = 0\n    while (num >> count) > 0:\n        count += 1\n    return count - 1\n\n\nprint(highest_power_of_2(31))",
    "def HighestPowerOf2(num):\n    if num <= 0:\n        return 0\n    else:\n        count = 0\n        while(num != 1):\n            if num & 1 == 1:\n                break\n            count += 1\n            num = num >> 1\n        return 2**count\n\nprint(HighestPowerOf2(10))\nprint(HighestPowerOf2(15))",
    "def highest_power_of_2(number):\n    count = 0\n    while (number & 1) == 0:\n        count += 1\n        number >>= 1\n    return count\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(15))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(17))",
    "def find_highest_power_of_two(num: int) -> int:\n    \"\"\"\n    find highest power of 2 less than or equal to given number\n    >>> find_highest_power_of_two(10)\n    4\n    >>> find_highest_power_of_two(32)\n    16\n    >>> find_highest_power_of_two(128)\n    128\n    >>> find_highest_power_of_two(256)\n    128\n    \"\"\"\n    if num <= 0:\n        return -1\n    return 2 ** (num - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(n):\n    return 2**(len(bin(n)) - 2)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(highest_power_of_2(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def power_of_2(n):\n    power = 1\n    while power < n:\n        power = power << 1\n    return power\n\n\ndef power_of_2_rec(n):\n    if n <= 1:\n        return n\n    return power_of_2_rec(n >> 1) << 1\n\n\ndef main():\n    n = 100\n    result = power_of_2(n)\n    print(f\"Highest power of 2 less than or equal to {n} is {result}\")\n\n    result = power_of_2_rec(n)\n    print(f\"Highest power of 2 less than or equal to {n} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    if n & (n - 1) == 0:\n        return n - 1\n    return highest_power_of_two((n & (n - 1)))\n\n\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(12))",
    "def highest_power_of_2(number):\n    \"\"\"\n    >>> highest_power_of_2(25)\n    5\n    >>> highest_power_of_2(10)\n    4\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(0)\n    0\n    \"\"\"\n\n    power = 0\n    while 2 ** power <= number:\n        power += 1\n    return 2 ** (power - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_two(n: int) -> int:\n    \"\"\"\n    >>> highest_power_of_two(16)\n    8\n    >>> highest_power_of_two(17)\n    8\n    >>> highest_power_of_two(100)\n    8\n    >>> highest_power_of_two(128)\n    128\n    >>> highest_power_of_two(0)\n    0\n    \"\"\"\n    highest_power = 0\n\n    while n > 0:\n        n = n >> 1\n        highest_power += 1\n\n    return 2 ** (highest_power - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def power_of_2(num):\n    power = 0\n    while 2 ** power <= num:\n        power += 1\n\n    return 2 ** (power - 1)\n\n\ndef power_of_2_bisect(num):\n    \"\"\"\n    Use binary search.\n    \"\"\"\n    left, right = 0, num\n    while left <= right:\n        mid = left + (right - left) // 2\n        if 2 ** mid <= num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return 2 ** (right)\n\n\nif __name__ == \"__main__\":\n    num = 21\n    print(power_of_2(num))\n    print(power_of_2_bisect(num))",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    Return highest power of 2 less than or equal to given number.\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(15)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(17)\n    16\n    >>> highest_power_of_2(0)\n    1\n    >>> highest_power_of_2(-1)\n    1\n    >>> highest_power_of_2(-10)\n    1\n    \"\"\"\n    if number <= 0:\n        return 1\n\n    return 2 ** (number.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(num):\n    power = 0\n    while (2 ** power) <= num:\n        power += 1\n\n    return 2 ** (power - 1)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    ans = highest_power_of_2(num)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power(number: int) -> int:\n    \"\"\"\n    >>> highest_power(100)\n    64\n    >>> highest_power(16)\n    16\n    >>> highest_power(32)\n    32\n    >>> highest_power(24)\n    16\n    \"\"\"\n    return 2 ** (number.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_highest_power_of_2(n):\n    count = 0\n    while n:\n        n >>= 1\n        count += 1\n    return 2 ** count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Highest power of 2 less than or equal to {n} is: {find_highest_power_of_2(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    :param number: int - number to find the highest power of 2\n    :return: int - highest power of 2\n\n    >>> highest_power_of_2(15)\n    8\n    >>> highest_power_of_2(17)\n    8\n    >>> highest_power_of_2(63)\n    32\n    >>> highest_power_of_2(32)\n    32\n    >>> highest_power_of_2(128)\n    128\n    >>> highest_power_of_2(256)\n    256\n    >>> highest_power_of_2(512)\n    512\n    >>> highest_power_of_2(1024)\n    1024\n    \"\"\"\n    if number == 0:\n        return 0\n\n    highest_power = 0\n\n    while number > 0:\n        highest_power += 1\n        number >>= 1\n    return 2 ** (highest_power - 1)\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    number = int(input(\"Enter a number: \").strip())\n    print(highest_power_of_2(number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_highest_power_of_2(number):\n    power = 0\n    while(2**power <= number):\n        power += 1\n    return 2**(power-1)\n\nif __name__ == '__main__':\n    number = int(input())\n    print(find_highest_power_of_2(number))",
    "def highest_power_of_two(n):\n    power = 1\n    while power <= n:\n        power = power << 1\n    return power >> 1\n\n\nprint(highest_power_of_two(5))\nprint(highest_power_of_two(11))\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(12))\nprint(highest_power_of_two(15))",
    "def power_of_2(number):\n    power_2 = 0\n    while 2 ** power_2 <= number:\n        power_2 += 1\n    return power_2 - 1\n\n\nprint(power_of_2(100))",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"Returns the highest power of 2 less than or equal to given number.\n\n    Args:\n        number (int): number to find the highest power of 2 less than or equal to\n\n    Examples:\n        >>> assert highest_power_of_2(10) == 4\n        >>> assert highest_power_of_2(16) == 4\n        >>> assert highest_power_of_2(25) == 4\n        >>> assert highest_power_of_2(1) == 1\n        >>> assert highest_power_of_2(2) == 1\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number should be positive.\")\n\n    power = 1\n\n    while power <= number:\n        power *= 2\n\n    return power // 2\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(25))\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(2))",
    "def power_of_2(n):\n    # if n is power of 2 then n & (n - 1) = 0\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return 2**(n.bit_length() - 1)\n\n\ndef power_of_2_2(n):\n    # if n is power of 2 then n & (n - 1) = 0\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return 2**(n.bit_length() - 1)\n\n\ndef power_of_2_3(n):\n    # if n is power of 2 then n & (n - 1) = 0\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return 2**(n.bit_length() - 1)\n\n\nprint(power_of_2_3(12))",
    "def highest_power_of_2(n):\n    return (n & (n - 1)) == 0\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if highest_power_of_2(n):\n        print(f\"{n} is a power of 2.\")\n    else:\n        print(f\"{n} is not a power of 2.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power(num):\n    \"\"\"\n    >>> highest_power(12)\n    8\n    >>> highest_power(23)\n    16\n    >>> highest_power(50)\n    32\n    >>> highest_power(100)\n    64\n    \"\"\"\n\n    power = 1\n    while power <= num:\n        power *= 2\n    return power // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(number):\n    count = 0\n    power = 1\n\n    while power <= number:\n        power *= 2\n        count += 1\n\n    return count - 1\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(25))\nprint(highest_power_of_2(125))",
    "def highest_power_of_2(number):\n    power = 0\n    while(2**power <= number):\n        power += 1\n    return 2**(power - 1)\n\nprint(highest_power_of_2(100))",
    "def highest_power_of_2(num):\n    count = 0\n    while 2**count <= num:\n        count += 1\n\n    return count - 1\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(\"Highest power of 2 less than or equal to {} is {}\".format(num, highest_power_of_2(num)))",
    "def find_highest_power_of_2_less_equal_to_given_number(number: int) -> int:\n    \"\"\"\n    Returns the highest power of 2 less than or equal to given number.\n    >>> find_highest_power_of_2_less_equal_to_given_number(25)\n    16\n    >>> find_highest_power_of_2_less_equal_to_given_number(15)\n    8\n    >>> find_highest_power_of_2_less_equal_to_given_number(16)\n    16\n    >>> find_highest_power_of_2_less_equal_to_given_number(2)\n    2\n    >>> find_highest_power_of_2_less_equal_to_given_number(1)\n    1\n    \"\"\"\n\n    # base case\n    if number == 1:\n        return 1\n\n    # if number is power of 2 then return number\n    if number & (number - 1) == 0:\n        return number\n\n    # find highest power of 2 less than or equal to given number\n    return 2 ** (number.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(n):\n    return 2**(n-1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Highest power of 2 less than or equal to {n} is {highest_power_of_2(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(number):\n    return int(2 ** (number - 1).bit_length())\n\n\nprint(highest_power_of_2(10))",
    "def highest_power_of_2(n):\n    \"\"\"\n    Return highest power of 2 less than or equal to given number.\n\n    >>> highest_power_of_2(10)\n    4\n    >>> highest_power_of_2(17)\n    8\n    >>> highest_power_of_2(60)\n    16\n    >>> highest_power_of_2(50)\n    8\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(num):\n    power = 1\n\n    while (2 ** power) <= num:\n        power += 1\n\n    return power - 1\n\n\nprint(highest_power_of_2(15))",
    "def highest_power_of_2(number):\n    power = 0\n    while (1 << power) <= number:\n        power += 1\n    return power - 1\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(15))",
    "def find_highest_power_of_2(number):\n    highest_power_of_2 = 0\n    for i in range(1, number):\n        if i & i - 1 == 0:\n            highest_power_of_2 = i\n    return highest_power_of_2\n\n\nprint(find_highest_power_of_2(5))\nprint(find_highest_power_of_2(12))\nprint(find_highest_power_of_2(16))",
    "def highest_power(num):\n    \"\"\"\n    Function to find highest power of 2 less than or equal to given number.\n\n    >>> highest_power(10)\n    8\n    >>> highest_power(15)\n    8\n    >>> highest_power(16)\n    16\n    >>> highest_power(20)\n    16\n    >>> highest_power(0)\n    0\n    >>> highest_power(-1)\n    0\n    >>> highest_power(-10)\n    0\n    >>> highest_power(-16)\n    0\n    >>> highest_power(-20)\n    0\n    \"\"\"\n    if num <= 0:\n        return num\n    else:\n        return 2**(num.bit_length() - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def power_of_2(n: int) -> int:\n    \"\"\"\n    >>> power_of_2(10)\n    4\n    >>> power_of_2(100)\n    16\n    >>> power_of_2(1)\n    1\n    \"\"\"\n    p = 1\n    while p < n:\n        p <<= 1\n    return p >> 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_two(number: int) -> int:\n    \"\"\"\n    Returns the highest power of two less than or equal to the given number.\n    >>> highest_power_of_two(15)\n    8\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(17)\n    16\n    >>> highest_power_of_two(25)\n    16\n    >>> highest_power_of_two(26)\n    32\n    >>> highest_power_of_two(32)\n    32\n    >>> highest_power_of_two(33)\n    32\n    >>> highest_power_of_two(50)\n    32\n    >>> highest_power_of_two(0)\n    1\n    >>> highest_power_of_two(-1)\n    1\n    >>> highest_power_of_two(-2)\n    1\n    >>> highest_power_of_two(-3)\n    1\n    \"\"\"\n    if number < 0:\n        return highest_power_of_two(abs(number))\n    if number == 0:\n        return 1\n    power = 1\n    while power < number:\n        power <<= 1\n    return power\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def power(n):\n    return (n & (n - 1) == 0)\n\n\ndef power_of_2(n):\n    i = 0\n    while (2**i <= n):\n        i += 1\n    return 2**(i - 1)\n\n\ndef power_of_2_v2(n):\n    i = 1\n    while (2**i <= n):\n        i += 1\n    return 2**(i - 2)\n\n\ndef power_of_2_v3(n):\n    i = 0\n    while (2**i <= n):\n        i += 1\n    return 2**(i - 2)\n\n\ndef main():\n    val = int(input(\"Enter number: \"))\n    print(f\"Highest power of 2 less than or equal to {val} is {power_of_2(val)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_2(number):\n    if number==0:\n        return 0\n    return 2**(number-1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(4))",
    "def power_of_two(number):\n    return (number & (number - 1) == 0) and number != 0\n\n\ndef highest_power_of_two(number):\n    if power_of_two(number):\n        return number\n    else:\n        return highest_power_of_two(number >> 1)",
    "def highest_power_of_2(number):\n    power = 0\n    while 2**power <= number:\n        power += 1\n    return 2**(power - 1)\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    ans = highest_power_of_2(number)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def highest_power_of_two(number):\n    count = 0\n    while 2**count <= number:\n        count += 1\n    return count - 1\n\n\ndef test_power_of_two():\n    assert highest_power_of_two(1) == 0\n    assert highest_power_of_two(2) == 1\n    assert highest_power_of_two(3) == 1\n    assert highest_power_of_two(4) == 2\n    assert highest_power_of_two(5) == 2\n    assert highest_power_of_two(6) == 2\n    assert highest_power_of_two(7) == 2\n    assert highest_power_of_two(8) == 3\n    assert highest_power_of_two(12) == 3\n    assert highest_power_of_two(13) == 3\n    assert highest_power_of_two(14) == 3\n    assert highest_power_of_two(15) == 3\n    assert highest_power_of_two(16) == 4\n\n\nif __name__ == \"__main__\":\n    test_power_of_two()",
    "def highest_power_of_2(num):\n    if num < 0:\n        raise ValueError(\"Input value must be positive\")\n    return 2 ** (num.bit_length() - 1)\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(17))",
    "def power_of_2(num: int) -> int:\n    \"\"\"\n    >>> power_of_2(10)\n    8\n    >>> power_of_2(20)\n    16\n    >>> power_of_2(32)\n    32\n    >>> power_of_2(64)\n    64\n    >>> power_of_2(100)\n    64\n    \"\"\"\n    return 2 ** (num - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def power_of_two(num):\n    count = 0\n    while 2**count <= num:\n        count += 1\n    return count - 1\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter number: \"))\n    print(f\"Highest power of 2 less than or equal to {num}: {power_of_two(num)}\")",
    "def highest_power_of_2(n):\n    i = 1\n    while True:\n        if i > n:\n            return i-1\n        i = i << 1\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(100))",
    "def highest_power_2(number):\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        count = 0\n        while number > 0:\n            number = number >> 1\n            count += 1\n        return 2 ** (count - 1)\n\ndef highest_power_2_optimized(number):\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        count = 0\n        while number > 0:\n            number = number >> 1\n            count += 1\n        return 2 ** (count - 2)\n\ndef test_cases():\n    assert highest_power_2(32) == 16\n    assert highest_power_2(30) == 16\n    assert highest_power_2(25) == 16\n    assert highest_power_2(12) == 8\n    assert highest_power_2(11) == 8\n    assert highest_power_2(10) == 8\n    assert highest_power_2(5) == 4\n    assert highest_power_2(4) == 4\n    assert highest_power_2(3) == 4\n    assert highest_power_2(2) == 4\n    assert highest_power_2(1) == 1\n    assert highest_power_2(0) == 0\n\n    assert highest_power_2_optimized(32) == 16\n    assert highest_power_2_optimized(30) == 16\n    assert highest_power_2_optimized(25) == 16\n    assert highest_power_2_optimized(12) == 8\n    assert highest_power_2_optimized(11) == 8\n    assert highest_power_2_optimized(10) == 8\n    assert highest_power_2_optimized(5) == 4\n    assert highest_power_2_optimized(4) == 4\n    assert highest_power_2_optimized(3) == 4",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return number & (number - 1)\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_2(12) == 8\n    assert highest_power_of_2(10) == 8\n    assert highest_power_of_2(1) == 1\n    assert highest_power_of_2(2) == 2\n    assert highest_power_of_2(3) == 2\n    assert highest_power_of_2(4) == 4\n    assert highest_power_of_2(5) == 4\n    assert highest_power_of_2(6) == 4\n    assert highest_power_of_2(7) == 4\n    assert highest_power_of_2(8) == 8",
    "def hightest_power(num):\n    power = 0\n    while(2**power<=num):\n        power+=1\n    return power-1\nprint(hightest_power(11))",
    "def highest_power_of_2(num):\n    power = 1\n    while (2 ** power) < num:\n        power += 1\n    return power\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(f\"Highest power of 2 less than or equal to {num} is {highest_power_of_2(num)}\")",
    "def highest_power(number):\n    highest = 0\n\n    while(number > 0):\n        number >>= 1\n        highest += 1\n    \n    return highest\n\n\nprint(highest_power(1024))\nprint(highest_power(1023))\nprint(highest_power(1025))",
    "def get_highest_power(number):\n    i = 0\n    while (2**i <= number):\n        i += 1\n\n    return 2**(i-1)\n\n\nprint(get_highest_power(20))\nprint(get_highest_power(100))\nprint(get_highest_power(101))\nprint(get_highest_power(50))\nprint(get_highest_power(10))\nprint(get_highest_power(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    Return highest power of 2 less than or equal to given number.\n    >>> highest_power_of_2(15)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(17)\n    16\n    >>> highest_power_of_2(0)\n    0\n    >>> highest_power_of_2(-1)\n    0\n    \"\"\"\n    if number <= 0:\n        return 0\n\n    # Find the highest power of 2 less than or equal to given number\n    return 2 ** (number - 1).bit_length()\n\n\ndef highest_power_of_2_opt(number: int) -> int:\n    \"\"\"\n    Return highest power of 2 less than or equal to given number.\n    >>> highest_power_of_2_opt(15)\n    8\n    >>> highest_power_of_2_opt(16)\n    16\n    >>> highest_power_of_2_opt(17)\n    16\n    >>> highest_power_of_2_opt(0)\n    0\n    >>> highest_power_of_2_opt(-1)\n    0\n    \"\"\"\n    if number <= 0:\n        return 0\n\n    return 2 ** (number.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def highest_power_of_2(number: int) -> int:\n    \"\"\"\n    >>> highest_power_of_2(12)\n    8\n    >>> highest_power_of_2(4)\n    4\n    >>> highest_power_of_2(32)\n    16\n    >>> highest_power_of_2(16)\n    16\n    \"\"\"\n    highest_power_2 = 0\n\n    while number > 0:\n        highest_power_2 += 1\n        number >>= 1\n\n    return 1 << (highest_power_2 - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}