{
  "problem": {
    "task_id": "MBPP/305",
    "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
    "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
    "test_list": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ],
    "challenge_test_list": [],
    "problem_id": 294
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def match_word(word1, word2):\n    \"\"\"\n    >>> match_word('p','pump')\n    True\n    >>> match_word('q','pump')\n    False\n    >>> match_word('p','p')\n    True\n    >>> match_word('p','')\n    False\n    \"\"\"\n    return word1.startswith('p') and word2.startswith('p')\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def match(lst, word1, word2):\n    lst1 = lst[0:20]\n    print(lst1)\n    for i in lst1:\n        if i[0] == word1:\n            print(i)\n        elif i[0] == word2:\n            print(i)\n\n\nlst = [\n    \"python\", \"java\", \"kotlin\", \"javascript\", \"c#\", \"swift\", \"dart\", \"ruby\", \"php\", \"perl\", \"go\", \"scala\", \"groovy\",\n    \"coffeescript\", \"typescript\", \"rust\", \"lua\", \"haskell\", \"c++\", \"c\", \"f#\", \"assembly\", \"elixir\"\n]\nmatch(lst, 'p', 'g')",
    "from collections import defaultdict\n\n\ndef p_word(word_list):\n    d = defaultdict(list)\n    for word in word_list:\n        d[word[0]].append(word)\n    return d['p']\n\n\nif __name__ == '__main__':\n    print(p_word(['pun', 'python', 'panda']))",
    "from typing import List\n\n\ndef starts_with_p(word: str, words: List[str]) -> bool:\n    \"\"\"\n    Checks if a word in the list starts with the given letter.\n\n    >>> starts_with_p(\"p\", [\"pizza\", \"pasta\", \"pasta\"])\n    True\n    >>> starts_with_p(\"q\", [\"pizza\", \"pasta\", \"pasta\"])\n    False\n    \"\"\"\n    for w in words:\n        if w.startswith(word):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_words(words: list) -> list:\n    \"\"\"\n    >>> find_words(['python', 'javascript', 'java', 'php'])\n    ['python', 'php']\n    \"\"\"\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_two_words(words: list[str]) -> None:\n    \"\"\"\n    >>> words = [\"python\", \"peru\", \"papua\", \"palau\", \"pakistan\", \"puertorico\"]\n    >>> match_two_words(words)\n    (papua, palau)\n    \"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            print(f\"({word}, {words[words.index(word) + 1]})\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Time Complexity: O(n^2)\ndef match_p_words(words):\n    \"\"\"\n    :param words: list of words\n    :return: two words starting with letter 'p'\n    \"\"\"\n    for word in words:\n        if word.startswith('p'):\n            for second_word in words:\n                if second_word.startswith('p'):\n                    return word, second_word\n\n\n# Time Complexity: O(n)\ndef match_p_words_efficient(words):\n    \"\"\"\n    :param words: list of words\n    :return: two words starting with letter 'p'\n    \"\"\"\n    for word in words:\n        if word.startswith('p'):\n            for second_word in words:\n                if second_word.startswith('p'):\n                    return word, second_word\n\n\ndef main():\n    words = ['panda', 'python', 'penguin', 'pizza', 'pythonic']\n    print(match_p_words(words))\n    print(match_p_words_efficient(words))\n\n\nif __name__ == '__main__':\n    main()",
    "def is_matching(a, b):\n    if a[0] == b[0] == 'p':\n        return True\n    return False\n\n\ndef main():\n    word_list = [\n        'pants',\n        'pen',\n        'paper',\n        'pizza',\n        'plants',\n        'plane',\n        'paint',\n        'pants',\n        'peel',\n        'pants',\n    ]\n\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if is_matching(word_list[i], word_list[j]):\n                print(f'{word_list[i]} and {word_list[j]} match')\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef match_words(words: List[str]) -> List[str]:\n    \"\"\"\n    >>> match_words(['python', 'java', 'javascript', 'php'])\n    ['python', 'php']\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef match_two_words_starting_with_p(words: List[str]) -> str:\n    \"\"\"\n    >>> match_two_words_starting_with_p([\"python\", \"java\", \"ruby\"])\n    'python'\n    \"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            for other_word in words:\n                if word != other_word and other_word.startswith(\"p\"):\n                    return word + \" \" + other_word\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import combinations\n\n\ndef match_p(words):\n    words = [word for word in words if word.startswith('p')]\n    for pair in combinations(words, 2):\n        if pair[0][1:] == pair[1][1:]:\n            return pair\n\n\nif __name__ == '__main__':\n    words = ['peter', 'pete', 'paul', 'peterpan']\n    print(match_p(words))",
    "def find_p_word(words: list) -> str:\n    \"\"\"\n    Return the first word starting with letter 'p'.\n    \"\"\"\n    for word in words:\n        if word.startswith('p'):\n            return word\n\n\ndef main():\n    words = [\n        'python',\n        'java',\n        'kotlin',\n        'scala',\n        'javascript',\n        'ruby',\n        'c',\n        'c++',\n        'c#',\n    ]\n    result = find_p_word(words)\n    if result:\n        print(f'The first word starting with letter \"p\" is: {result}')\n    else:\n        print(f'There is no word starting with letter \"p\"')\n\n\nif __name__ == '__main__':\n    main()",
    "def find_p_words(list_of_words: list) -> list:\n    \"\"\"\n    >>> find_p_words(['python', 'java', 'c', 'cpp', 'php'])\n    ['python', 'php']\n    \"\"\"\n    return [word for word in list_of_words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_p(word1, word2):\n    return word1[0] == 'p' and word2[0] == 'p'\n\n\nprint(match_p('python', 'panda'))",
    "def match_two_words(words):\n    for word in words:\n        if word[0] == 'p':\n            print(word)\n\n\nmatch_two_words(['python', 'java', 'kotlin', 'javascript'])",
    "def p_words(words):\n    return [w for w in words if w.startswith('p')]\n\nprint(p_words(['python', 'perl', 'pig', 'plover']))",
    "def match_words(list_of_words: list[str]) -> list[str]:\n    \"\"\"\n    >>> match_words(['python', 'java', 'c++', 'c#'])\n    ['python', 'c++']\n    \"\"\"\n    return [word for word in list_of_words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef p_words(words: List[str]) -> List[str]:\n    \"\"\"\n    >>> p_words(['python', 'java', 'kotlin', 'javascript'])\n    ['python', 'javascript']\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_word(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\nif __name__ == '__main__':\n    words = ['python', 'java', 'c++', 'c#', 'ruby']\n    print(match_word(words))",
    "def start_p(list_words):\n    \"\"\"\n    >>> start_p(['python', 'java', 'c++', 'c#', 'javascript'])\n    ['python', 'c++', 'c#']\n    \"\"\"\n    result = []\n    for word in list_words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def p_words(words: list) -> list:\n    \"\"\"\n    >>> p_words([\"pizza\", \"pasta\", \"pepper\", \"pineapple\"])\n    ['pasta', 'pizza']\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import unittest\nfrom typing import Optional\n\n\ndef find_words(list_of_words: list, letter: str) -> Optional[str]:\n    \"\"\"Return the first word from a list of words starting with letter 'p'.\n\n    Args:\n        list_of_words (list): list of words.\n        letter (str): letter to find.\n\n    Returns:\n        Optional[str]: word found or None if no word found.\n    \"\"\"\n    for word in list_of_words:\n        if word.startswith(letter):\n            return word\n\n    return None\n\n\nclass TestFindWord(unittest.TestCase):\n\n    def test_find_word(self):\n        self.assertEqual(find_words(['python', 'javascript', 'php'], 'p'), 'python')\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def match_starting_letter(word_list, letter):\n    \"\"\"Returns the first two words starting with letter from a list of words.\"\"\"\n    for word in word_list:\n        if word[0].lower() == letter.lower():\n            return word, word_list[word_list.index(word) + 1]\n\n\nif __name__ == '__main__':\n    print(match_starting_letter([\"penguin\", \"python\", \"puppy\", \"panda\", \"penguin\"], \"p\"))",
    "def match_p(words):\n    for i in words:\n        if i.startswith('p'):\n            return i\n\n\nprint(match_p(['pasta', 'pizza', 'pasta', 'pasta', 'pasta']))",
    "from typing import List\n\n\n# O(n)\ndef find_p_words(words: List[str]) -> List[str]:\n    \"\"\"\n    >>> find_p_words(['apple', 'ball', 'cat', 'dog', 'egg', 'pig', 'apple'])\n    ['apple', 'pig', 'apple']\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef start_with_p(words: List[str]) -> str:\n    \"\"\"\n    Returns the first word starting with letter 'p' from a list of words.\n    \"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            return word\n\n\nif __name__ == \"__main__\":\n    assert start_with_p([\"python\", \"javascript\", \"php\"]) == \"python\"",
    "def is_start_with_p(word):\n    return word.startswith('p')\n\n\ndef match_word(word, words):\n    return any(word == w for w in words)\n\n\ndef find_word(words):\n    return next(w for w in words if match_word(w, words))\n\n\ndef test_word():\n    assert find_word([\"pizza\", \"pasta\", \"pepper\", \"pumpkin\"]) == \"pasta\"\n\n\nif __name__ == '__main__':\n    test_word()",
    "from typing import List, Optional\n\n\ndef find_matching_p(words: List[str]) -> Optional[List[str]]:\n    \"\"\"Returns the first pair of words starting with letter 'p'.\"\"\"\n    for i in range(len(words) - 1):\n        if words[i].startswith(\"p\") and words[i + 1].startswith(\"p\"):\n            return [words[i], words[i + 1]]\n    return None\n\n\nif __name__ == \"__main__\":\n    words = [\"pasta\", \"pizza\", \"pasta salad\", \"pasta sauce\", \"pepper\"]\n    assert find_matching_p(words) == [\"pasta\", \"pasta salad\"]",
    "def match_two_words(words):\n    words = words.split()\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    words = \"apple banana carrot\"\n    print(match_two_words(words))",
    "def match_p_words(words):\n    for word in words:\n        if word.startswith(\"p\"):\n            print(word)\n\n\nmatch_p_words([\"pasta\", \"pizza\", \"pasta\"])",
    "def match_two_words(words):\n    return [word for word in words if word.startswith('p') and len(word) == 2]\n\n\nprint(match_two_words(['pun', 'pup', 'punny', 'pants']))",
    "def find_two_words_starting_with_p(words):\n    \"\"\"\n    >>> find_two_words_starting_with_p([\"python\", \"java\", \"c\", \"cpp\", \"php\", \"perl\"])\n    ['python', 'perl']\n    \"\"\"\n    p_words = []\n    for word in words:\n        if word.startswith(\"p\"):\n            p_words.append(word)\n    return p_words\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def word_starting_with_p(words):\n    return [w for w in words if w.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    words = [\"python\", \"is\", \"programming\", \"language\", \"pypy\", \"python3\", \"pypy3\"]\n    print(word_starting_with_p(words))",
    "def match_two_words(word_list):\n    \"\"\"\n    >>> word_list = ['python', 'is', 'awesome', 'python']\n    >>> match_two_words(word_list)\n    ['python', 'python']\n    \"\"\"\n\n    return [word for word in word_list if word.startswith('p') and word_list.count(word) > 1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_words(words: list, letter: str) -> list:\n    return [word for word in words if word.startswith(letter)]\n\n\nif __name__ == \"__main__\":\n    words = [\"python\", \"java\", \"kotlin\", \"c++\", \"c\", \"c#\", \"javascript\"]\n    print(find_words(words, \"p\"))",
    "def match_words(words):\n    return [word for word in words if word.startswith('p')]\n\n\ndef test_match_words():\n    assert match_words([\"pasta\", \"pizza\", \"pasta salad\", \"pasta\", \"pasta n' cheese\"]) == [\n        \"pasta\",\n        \"pasta\",\n        \"pasta n' cheese\",\n    ]\n\n\nif __name__ == \"__main__\":\n    print(match_words([\"pasta\", \"pizza\", \"pasta salad\", \"pasta\", \"pasta n' cheese\"]))",
    "def match_words(words):\n    # your code here\n    for word in words:\n        if word[0] == 'p':\n            return word\n\n\nprint(match_words(['python', 'java', 'c++', 'c#', 'ruby', 'php']))",
    "def find_pairs(words):\n    pairs = []\n    for i, word_i in enumerate(words):\n        if word_i.startswith('p'):\n            for word_j in words[i+1:]:\n                if word_j.startswith('p'):\n                    pairs.append((word_i, word_j))\n    return pairs\n\nif __name__ == '__main__':\n    words = ['panda', 'pasta', 'pumpkin', 'pizza', 'penguin']\n    pairs = find_pairs(words)\n    print(pairs)",
    "def match_p_words(words):\n    \"\"\"\n    >>> match_p_words(['python', 'java', 'ruby', 'javascript'])\n    ['python', 'ruby']\n    \"\"\"\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def get_words(words: list, letter: str) -> list:\n    \"\"\"Returns a list of words that start with the given letter.\n\n    Args:\n        words (list): List of words.\n        letter (str): Letter.\n\n    Returns:\n        list: List of words that start with the given letter.\n    \"\"\"\n    return [word for word in words if word.startswith(letter)]\n\n\nif __name__ == \"__main__\":\n    print(get_words([\"python\", \"java\", \"kotlin\", \"javascript\"], \"p\"))",
    "def find_p(list_of_words):\n    \"\"\"\n    >>> find_p([\"apple\", \"orange\", \"pear\"])\n    ['pear', 'pear']\n\n    >>> find_p([\"apple\", \"orange\", \"pear\", \"peach\"])\n    ['pear', 'peach']\n\n    >>> find_p([\"apple\", \"orange\", \"pear\", \"peach\", \"plum\"])\n    ['pear', 'peach']\n\n    >>> find_p([\"apple\", \"orange\", \"pear\", \"peach\", \"plum\", \"pear\"])\n    ['pear', 'pear']\n\n    >>> find_p([\"apple\", \"orange\", \"pear\", \"peach\", \"plum\", \"pear\", \"peach\"])\n    ['pear', 'peach']\n    \"\"\"\n    return [word for word in list_of_words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_letter_p(letter):\n    return letter == 'p'\n\n\ndef find_words_starting_with_p(words):\n    return [word for word in words if is_letter_p(word[0])]\n\n\ndef test_find_words_starting_with_p():\n    assert find_words_starting_with_p(\n        ['pizza', 'pasta', 'pepperoni', 'pumpkin']\n    ) == ['pasta', 'pizza', 'pumpkin']\n\n\nif __name__ == '__main__':\n    test_find_words_starting_with_p()",
    "def find_words(words: list, letter: str) -> list:\n    \"\"\"\n    >>> find_words(['python', 'java', 'c'], 'p')\n    ['python', 'python']\n    \"\"\"\n    return [word for word in words if word.startswith(letter)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_p_words(lst: list) -> str:\n    \"\"\"\n    >>> find_p_words([\"pizza\", \"pasta\", \"pepper\", \"pumpkin\"])\n    'pasta'\n    >>> find_p_words([\"pizza\", \"pasta\", \"pepper\", \"pumpkin\", \"python\"])\n    'pasta'\n    >>> find_p_words([\"python\", \"javascript\", \"typescript\"])\n    ''\n    >>> find_p_words([\"python\", \"javascript\", \"typescript\", \"java\"])\n    'java'\n    \"\"\"\n    for word in lst:\n        if word.startswith(\"p\"):\n            return word\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_p_word(word_list):\n    \"\"\"\n    >>> find_p_word(['pizza', 'pasta', 'pasta', 'pizza', 'pasta'])\n    ['pasta', 'pasta']\n    \"\"\"\n    return [word for word in word_list if word.startswith('p')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_two_words(words):\n    \"\"\"\n    Return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    words = [w for w in words if w[0] == \"p\"]\n    if len(words) > 1:\n        return words[0], words[1]\n    else:\n        return \"No match found\"",
    "def match_p(words: list) -> str:\n    \"\"\"Returns a string that matches the letter 'p'.\"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            return word\n\n\nif __name__ == \"__main__\":\n    print(match_p([\"pizza\", \"pasta\", \"pasta\", \"pasta\", \"pasta\"]))",
    "def match_words(words):\n    \"\"\"\n    >>> match_words(['panda', 'python', 'pig', 'puppy', 'penguin'])\n    ['panda', 'pig', 'puppy']\n    \"\"\"\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def find_words(words: list) -> list:\n    \"\"\"\n    >>> find_words([\"penguin\", \"pen\", \"puppy\", \"penguin\", \"parrot\", \"penguin\"])\n    ['penguin', 'penguin', 'penguin']\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_p_words(lst, word_1, word_2):\n    for word in lst:\n        if word.startswith('p'):\n            if word == word_1 or word == word_2:\n                return word_1, word_2\n    return None\n\n\nif __name__ == '__main__':\n    print(match_p_words([\"pasta\", \"pizza\", \"pasta salad\", \"pasta salami\", \"pasta and rice\", \"pasta sauce\", \"pasta sauce recipe\"], \"pasta\", \"pasta sauce\"))",
    "def match(word_list, word):\n    if word.startswith('p'):\n        for word_item in word_list:\n            if word_item.startswith(word[0]):\n                if word_item != word:\n                    return True\n    return False\n\n\nword_list = ['python', 'java', 'kotlin', 'javascript', 'c#']\nprint(match(word_list, 'python'))\nprint(match(word_list, 'java'))\nprint(match(word_list, 'kotlin'))\nprint(match(word_list, 'javascript'))\nprint(match(word_list, 'c#'))\nprint(match(word_list, 'javaScript'))\nprint(match(word_list, 'c++'))",
    "def match_p_words(words):\n    matched_words = []\n\n    for word in words:\n        if word.startswith('p'):\n            matched_words.append(word)\n\n    return matched_words\n\n\nif __name__ == '__main__':\n    print(match_p_words([\"apple\", \"pear\", \"grape\", \"pineapple\"]))",
    "def match_letter_p(words):\n    \"\"\"\n    Return two words from a list of words starting with letter 'p'.\n\n    >>> match_letter_p(['python', 'java', 'kotlin', 'javascript', 'ruby'])\n    ['python', 'javascript']\n    \"\"\"\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_p(word_list):\n    \"\"\"\n    >>> find_p(['pasta', 'pizza', 'pavlova'])\n    ['pasta', 'pizza']\n    \"\"\"\n    return [w for w in word_list if w.startswith('p')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_p_words(words):\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    words = ['python', 'java', 'sql', 'ruby', 'php', 'javascript']\n    print(find_p_words(words))",
    "def match_words(words: list) -> str:\n    \"\"\"\n    Return the first word starting with letter 'p' and the first word starting with letter 't'.\n\n    >>> match_words([\"python\", \"pycharm\", \"pycobook\", \"pycobook.com\"])\n    ('pycharm', 'pycobook.com')\n    \"\"\"\n    return [word for word in words if word.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_two_words(words):\n    for word in words:\n        if word[0] == \"p\":\n            for second_word in words:\n                if word != second_word:\n                    return word, second_word\n\n\nif __name__ == \"__main__\":\n    print(match_two_words([\"python\", \"php\", \"java\", \"c++\", \"kotlin\", \"javascript\"]))",
    "from typing import List, Set\n\n\ndef matching_words(words: List[str]) -> Set[str]:\n    \"\"\"\n    >>> matching_words([\"pasta\", \"pizza\", \"pepperoni\"])\n    {'pasta', 'pizza'}\n    \"\"\"\n    return {word for word in words if word.startswith(\"p\")}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_p(lst: list) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for word in lst:\n        if word.startswith(\"p\"):\n            return word\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    lst = [\"python\", \"java\", \"kotlin\", \"javascript\"]\n    print(match_p(lst))",
    "def match_p(word_list):\n    for word in word_list:\n        if word.startswith('p'):\n            return word\n\n\ndef match_p_alt(word_list):\n    for word in word_list:\n        if word_list[0].startswith('p'):\n            return word\n\n\nif __name__ == '__main__':\n    print(match_p(['python', 'javascript', 'java']))\n    print(match_p_alt(['python', 'javascript', 'java']))",
    "def match_p_words(words):\n    return [word for word in words if word.startswith('p')]\n\nprint(match_p_words(['pig', 'puppy', 'panda', 'penguin']))",
    "from typing import List\n\n\ndef p_word(words: List[str]) -> None:\n    \"\"\"\n    >>> p_word(['python', 'java', 'c++'])\n    ('python', 'java')\n    \"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            print(word, end=\" \")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import time\n\n\ndef p_words(words):\n    start = time.time()\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n    end = time.time()\n    print(f'Time taken by p_words: {end - start}')\n\n\np_words(['python', 'java', 'c#', 'c++', 'asp.net'])\n\n\n# Optimized function\ndef p_words_optimized(words):\n    start = time.time()\n    print(*[word for word in words if word.startswith('p')], sep='\\n')\n    end = time.time()\n    print(f'Time taken by p_words_optimized: {end - start}')\n\n\np_words_optimized(['python', 'java', 'c#', 'c++', 'asp.net'])",
    "from typing import List\n\n\ndef starting_with_p(words: List[str], pattern: List[str]) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n    if not words:\n        return []\n\n    if not pattern:\n        return words\n\n    if len(pattern) == 1:\n        return [word for word in words if word[0] == pattern[0]]\n\n    if len(pattern) == 2:\n        return [word for word in words if word[0] == pattern[0] and word[1] == pattern[1]]\n\n    if len(pattern) == 3:\n        return [word for word in words if word[0] == pattern[0] and word[1] == pattern[1] and word[2] == pattern[2]]\n\n    if len(pattern) == 4:\n        return [\n            word\n            for word in words\n            if word[0] == pattern[0] and word[1] == pattern[1] and word[2] == pattern[2] and word[3] == pattern[3]\n        ]\n\n    if len(pattern) == 5:\n        return [\n            word\n            for word in words\n            if word[0] == pattern[0]\n            and word[1] == pattern[1]\n            and word[2] == pattern[2]\n            and word[3] == pattern[3]\n            and word[4] == pattern[4]\n        ]\n\n    return [word for word in words if word.startswith(pattern)]\n\n\nif __name__ == \"__main__\":\n    print(starting_with_p([\"python\", \"panda\", \"python3\", \"panda3\", \"panda4\"], \"pand\"))",
    "def p_words(words):\n    return [w for w in words if w.startswith('p')]\n\n\ndef test_p_words():\n    assert p_words(['pneumonoultramicroscopicsilicovolcanoconiosis']) == ['pneumonoultramicroscopicsilicovolcanoconiosis']\n    assert p_words(['p', 'q', 'psoas', 'psoai']) == ['p', 'psoas']\n    assert p_words(['q', 'psoas', 'psoai']) == []\n    assert p_words([]) == []",
    "from typing import List, Optional\n\n\nclass Solution:\n    def match(self, words: List[str], letter: str) -> Optional[List[str]]:\n        if not words:\n            return None\n        result = []\n        for word in words:\n            if word.startswith(letter):\n                result.append(word)\n        return result if result else None\n\n\nif __name__ == \"__main__\":\n    words = [\"panda\", \"python\", \"penguin\"]\n    letter = \"p\"\n    out = [\"panda\", \"python\"]\n    res = Solution().match(words, letter)\n    assert out == res, (out, res)\n\n    words = [\"panda\", \"python\", \"penguin\"]\n    letter = \"k\"\n    out = None\n    res = Solution().match(words, letter)\n    assert out == res, (out, res)",
    "def p_word(words):\n    \"\"\"\n    >>> p_word(['Python', 'PHP', 'Perl', 'Pascal'])\n    ['Python', 'Perl']\n    \"\"\"\n    return [word for word in words if word.startswith('p')]",
    "def find_p_words(list_of_words):\n    \"\"\"\n    >>> find_p_words(['python', 'python3', 'java', 'perl', 'php'])\n    ['python', 'python3']\n    \"\"\"\n    return [word for word in list_of_words if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def match_starting_letter(string, list_of_words):\n    for word in list_of_words:\n        if word.startswith(string):\n            return word\n\n\ndef main():\n    print(match_starting_letter(\"p\", [\"python\", \"java\", \"kotlin\", \"javascript\"]))\n\n\nif __name__ == '__main__':\n    main()",
    "import unittest\nfrom typing import List\n\n\ndef match_with_p(words: List[str], letter: str) -> List[str]:\n    return [word for word in words if word.startswith(letter)]\n\n\nclass TestMatchWithP(unittest.TestCase):\n\n    def test_match_with_p(self):\n        self.assertEqual(match_with_p([\"python\", \"ruby\", \"c\"], \"p\"), [\"python\", \"ruby\"])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def match_p(words):\n    return [x for x in words if x.startswith('p')]\n\n\nprint(match_p(['python', 'java', 'kotlin', 'javascript', 'php']))",
    "def find_words_p(words: list) -> list:\n    \"\"\"\n    >>> find_words_p(['apple', 'banana', 'orange'])\n    ['apple', 'orange']\n    \"\"\"\n    return [w for w in words if w.startswith(\"p\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def get_matching_words(words, letter):\n    \"\"\"\n    >>> get_matching_words(['Python', 'PHP', 'Perl', 'Pascal', 'Powershell'], 'p')\n    ['Python', 'PHP', 'Pascal']\n    \"\"\"\n    return [word for word in words if word.startswith(letter)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from string import ascii_lowercase\n\n\ndef get_words_starting_with(letter: str, words: list) -> list:\n    \"\"\"\n    Return a list of words from a list of words starting with letter.\n    >>> get_words_starting_with('p', ['python', 'java', 'c++', 'php'])\n    ['python', 'php']\n    >>> get_words_starting_with('z', ['python', 'java', 'c++', 'php'])\n    []\n    \"\"\"\n    return [word for word in words if word.startswith(letter)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_p_words(words):\n    result = []\n\n    for word in words:\n        if word.startswith('p') and len(word) > 1:\n            result.append(word)\n\n    return result\n\n\nif __name__ == '__main__':\n    words = ['pizza', 'python', 'pasta', 'pixel', 'python']\n    print(find_p_words(words))",
    "def word_match(word1, word2):\n    return word1.startswith('p') and word2.startswith('p')\n\n\ndef word_match_lambda(word1, word2):\n    return lambda: word1.startswith('p') and word2.startswith('p')\n\n\ndef main():\n    print(word_match('python', 'php'))\n    print(word_match_lambda('python', 'php')())\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_words_starting_with_p(list_of_words):\n    \"\"\"Returns the words starting with letter 'p'.\"\"\"\n    return [word for word in list_of_words if word.startswith('p')]\n\n\ndef test_get_words_starting_with_p():\n    \"\"\"\n    >>> test_get_words_starting_with_p()\n    \"\"\"\n    print(get_words_starting_with_p([\"python\", \"perl\", \"java\", \"php\"]))\n    print(get_words_starting_with_p([\"python\", \"perl\", \"java\", \"php\", \"pascal\"]))\n\n\nif __name__ == '__main__':\n    test_get_words_starting_with_p()",
    "from typing import List\n\n\ndef match_two_words(words: List[str]) -> List[str]:\n    \"\"\"\n    O(n) time, O(1) space.\n    \"\"\"\n    words_starting_with_p = []\n\n    for word in words:\n        if word[0] == \"p\":\n            words_starting_with_p.append(word)\n\n    return [\n        word\n        for word in words_starting_with_p\n        if any(\n            other_word[0] == word[0] and other_word != word for other_word in words_starting_with_p\n        )\n    ]\n\n\nif __name__ == \"__main__\":\n    assert match_two_words([\"panda\", \"python\", \"pig\", \"peacock\", \"puppy\"]) == [\"panda\", \"pig\"]",
    "def find_matching_words(words):\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the word starts with the letter 'p'\n        if word.startswith('p'):\n            print(word)\n\n\nif __name__ == '__main__':\n    words = ['penguin', 'elephant', 'rabbit', 'panda']\n    find_matching_words(words)",
    "def matching_words(words: list) -> tuple:\n    \"\"\"Returns the first and last word starting with letter 'p'.\"\"\"\n    return tuple(words[0], words[-1])\n\n\ndef main():\n    words = [\n        \"python\",\n        \"java\",\n        \"kotlin\",\n        \"javascript\",\n        \"php\",\n        \"dart\",\n        \"rust\",\n        \"sql\",\n        \"swift\",\n        \"perl\",\n        \"pascal\",\n        \"go\",\n        \"scala\",\n    ]\n    print(matching_words(words))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def match_p(words):\n    for word in words:\n        if word[0] == 'p':\n            print(word)\n\n\ndef match_p_v2(words):\n    return [word for word in words if word.startswith('p')]\n\n\ndef match_p_v3(words):\n    return filter(lambda word: word.startswith('p'), words)\n\n\nif __name__ == '__main__':\n    words = ['python', 'java', 'kotlin', 'javascript', 'ruby', 'c', 'cpp', 'c#', 'c++']\n    match_p(words)\n    print(match_p_v2(words))\n    print(list(match_p_v3(words)))",
    "def match_words(word_list, letter):\n    \"\"\"\n    Return the first two words starting with letter in word_list\n    :param word_list: list of strings\n    :param letter: starting letter of words to be returned\n    :return: list of two words starting with letter\n    \"\"\"\n    for word in word_list:\n        if word.startswith(letter):\n            return word, word_list[word_list.index(word) + 1]\n    return None, None\n\n\nif __name__ == '__main__':\n    print(match_words([\"python\", \"is\", \"easy\", \"to\", \"learn\"], \"p\"))",
    "def find_p(word_list: list) -> tuple:\n    \"\"\"\n    >>> word_list = ['python', 'java', 'cpp', 'javascript']\n    >>> find_p(word_list)\n    ('python', 'pyhton')\n    \"\"\"\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if word_list[i][0] == 'p' and word_list[j][0] == 'p':\n                return (word_list[i], word_list[j])\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def match_two_words(words):\n    # Write your code here\n    matched_words = []\n\n    for word in words:\n        if word.startswith(\"p\"):\n            matched_words.append(word)\n\n    if len(matched_words) >= 2:\n        return matched_words[:2]\n\n    return matched_words",
    "from itertools import permutations\n\n\ndef starting_with_p(words: list) -> list:\n    \"\"\"\n    Returns list of words starting with letter 'p'.\n    >>> starting_with_p(['python', 'java', 'kotlin', 'javascript'])\n    ['python', 'javascript']\n    \"\"\"\n    return list(filter(lambda word: word.startswith(\"p\"), words))\n\n\ndef match_word(word1: str, word2: str) -> bool:\n    \"\"\"\n    Returns True if two words are matched.\n    >>> match_word('python', 'javascript')\n    False\n    \"\"\"\n    return \"\".join(sorted(word1)) == \"\".join(sorted(word2))\n\n\ndef letter_p(word1: str, word2: str) -> bool:\n    \"\"\"\n    Returns True if two words have same number of letters starting with letter 'p'.\n    >>> letter_p('python', 'javascript')\n    False\n    \"\"\"\n    return len(starting_with_p(word1)) == len(starting_with_p(word2))\n\n\ndef match_permutation(word1: str, word2: str) -> bool:\n    \"\"\"\n    Returns True if two words have same number of permutations starting with letter 'p'.\n    >>> match_permutation('python', 'javascript')\n    False\n    \"\"\"\n    return len(list(permutations(starting_with_p(word1)))) == len(\n        list(permutations(starting_with_p(word2)))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(n)\ndef p_words(word_list):\n    for word in word_list:\n        if word.startswith(\"p\"):\n            yield word\n\n\nif __name__ == \"__main__\":\n    word_list = [\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]\n    for word in p_words(word_list):\n        print(word)",
    "def find_pairs(word_list):\n    word_list.sort()\n    for word in word_list:\n        if word[0] == 'p':\n            for word2 in word_list:\n                if word != word2:\n                    if word2.startswith(word):\n                        return word, word2\n\n\nword_list = ['python', 'java', 'javascript', 'php', 'plsql', 'perl', 'pyspark', 'pyspark', 'python', 'ruby']\n\nprint(find_pairs(word_list))",
    "def find_pair(words):\n    \"\"\"\n    >>> find_pair(['python', 'is', 'awesome', 'python', 'programming'])\n    ['python', 'python']\n    >>> find_pair(['java', 'is', 'awesome', 'python', 'programming'])\n    []\n    \"\"\"\n    return [\n        word for word in words if word.startswith(\"p\") and words.count(word) > 1\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_matching_p(list_of_words):\n    \"\"\"\n    >>> first_matching_p([\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"])\n    'apple'\n    \"\"\"\n    for word in list_of_words:\n        if word[0] == 'p':\n            return word\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_pairs(word_list):\n    \"\"\"\n    :param word_list: list of words\n    :return: list of tuples with 2 words from the list starting with 'p'\n    \"\"\"\n\n    return [\n        (word_list[i], word_list[j])\n        for i in range(len(word_list))\n        for j in range(i + 1, len(word_list))\n        if word_list[i][0] == 'p' and word_list[j][0] == 'p'\n    ]\n\n\ndef test_find_pairs():\n    assert find_pairs([\"pizza\", \"pepperoni\", \"pasta\", \"pasta\", \"pasta\"]) == [\n        (\"pizza\", \"pasta\"),\n        (\"pepperoni\", \"pasta\"),\n    ]\n\n\nif __name__ == \"__main__\":\n    print(find_pairs([\"pizza\", \"pepperoni\", \"pasta\", \"pasta\", \"pasta\"]))",
    "def p_words_matcher(words):\n    \"\"\"\n    Return a function that takes two words and returns True if both start with a 'p'.\n    >>> matcher = p_words_matcher([\"python\", \"peru\", \"pizza\"])\n    >>> matcher(\"python\", \"peru\")\n    True\n    >>> matcher(\"python\", \"pizza\")\n    False\n    \"\"\"\n    return lambda a, b: a.startswith(\"p\") and b.startswith(\"p\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_starting_with_p(words):\n    return [w for w in words if w.startswith('p')]\n\ndef test_find_starting_with_p():\n    assert find_starting_with_p(['python', 'java', 'kotlin', 'javascript']) == ['python', 'kotlin']\n\n\"\"\"\nWrite a function to find the maximum element in a list of integers.\n\"\"\"\n\ndef find_max(nums):\n    return max(nums)\n\ndef test_find_max():\n    assert find_max([1,2,3,4,5,6,7,8,9,10]) == 10\n\n\"\"\"\nWrite a function to find the minimum element in a list of integers.\n\"\"\"\n\ndef find_min(nums):\n    return min(nums)\n\ndef test_find_min():\n    assert find_min([1,2,3,4,5,6,7,8,9,10]) == 1\n\n\"\"\"\nWrite a function to find the sum of all elements in a list of integers.\n\"\"\"\n\ndef find_sum(nums):\n    return sum(nums)\n\ndef test_find_sum():\n    assert find_sum([1,2,3,4,5,6,7,8,9,10]) == 55\n\n\"\"\"\nWrite a function to find the product of all elements in a list of integers.\n\"\"\"\n\ndef find_product(nums):\n    return 1 if len(nums) == 0 else nums[0] * find_product(nums[1:])\n\ndef test_find_product():\n    assert find_product([1,2,3,4,5,6,7,8,9,10]) == 3628800\n\n\"\"\"\nWrite a function to find the first occurance of a number in a list of integers.\n\"\"\"\n\ndef find_number(nums, n):\n    return nums.index(n)\n\ndef test_find_number():\n    assert find_number([1,2,3,4,5,6,7,8,9,",
    "def match_p(words):\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    print(match_p(['apple', 'pear', 'orange', 'plum']))",
    "def match_p(words):\n    for word in words:\n        if word[0] == 'p':\n            yield word\n\n\nif __name__ == \"__main__\":\n    words = ['python', 'java', 'kotlin', 'javascript', 'c++']\n    for word in match_p(words):\n        print(word)",
    "def match_p_words(word_list):\n    return [word for word in word_list if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    print(match_p_words(['python', 'pizza', 'penguin', 'pear']))",
    "def check_for_p(word_list: list[str]) -> None:\n    \"\"\"\n    >>> word_list = [\"python\", \"java\", \"kotlin\", \"javascript\"]\n    >>> check_for_p(word_list)\n    (0, 2)\n    \"\"\"\n    for index, word in enumerate(word_list):\n        if word.startswith(\"p\"):\n            print(index, word)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_p_words(words: list[str]) -> str:\n    \"\"\"\n    O(N) time, O(1) space\n    \"\"\"\n    for word in words:\n        if word.startswith(\"p\"):\n            return word\n\n\ndef find_p_words_2(words: list[str]) -> str:\n    \"\"\"\n    O(N) time, O(1) space\n    \"\"\"\n    for word in words:\n        if word[0] == \"p\":\n            return word\n\n\ndef find_p_words_3(words: list[str]) -> str:\n    \"\"\"\n    O(N) time, O(1) space\n    \"\"\"\n    for word in words:\n        if word[0] == \"p\":\n            return word\n\n\ndef find_p_words_4(words: list[str]) -> str:\n    \"\"\"\n    O(N) time, O(1) space\n    \"\"\"\n    for word in words:\n        if word[0] == \"p\":\n            return word\n\n\nif __name__ == \"__main__\":\n    words = [\"python\", \"penguin\", \"python3\", \"java\", \"javascript\", \"kotlin\", \"rust\", \"c\"]\n    print(find_p_words(words))\n    print(find_p_words_2(words))\n    print(find_p_words_3(words))\n    print(find_p_words_4(words))",
    "# def match_p(word_list, word1, word2):\n#     for word in word_list:\n#         if word.startswith('p'):\n#             if word1 == word:\n#                 return True\n#             elif word2 == word:\n#                 return True\n#     return False\n\n\ndef match_p(word_list, word1, word2):\n    return any(word.startswith('p') for word in word_list if word in (word1, word2))\n\n\nprint(match_p(['python', 'javascript', 'java', 'ruby', 'c#', 'php'], 'java', 'python'))\nprint(match_p(['python', 'javascript', 'java', 'ruby', 'c#', 'php'], 'java', 'c#'))\nprint(match_p(['python', 'javascript', 'java', 'ruby', 'c#', 'php'], 'java', 'php'))\nprint(match_p(['python', 'javascript', 'java', 'ruby', 'c#', 'php'], 'java', 'c++'))",
    "def find_p_words(words):\n    \"\"\"\n    >>> find_p_words(['python', 'javascript', 'php', 'java', 'perl', 'c++', 'c'])\n    ['python', 'php', 'perl']\n    \"\"\"\n    # return list(filter(lambda x: x.startswith('p'), words))\n    return [word for word in words if word.startswith('p')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def match_p(word):\n    return word[0] == 'p'\n\n\ndef match_p_alt(word):\n    return word.startswith('p')\n\n\ndef match_p_alt_2(word):\n    return word[:1] == 'p'\n\n\ndef match_p_alt_3(word):\n    return word[0:1] == 'p'"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}