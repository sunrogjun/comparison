{
  "problem": {
    "task_id": "MBPP/200",
    "prompt": "Write a function to find all index positions of the maximum values in a given list.",
    "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
    "test_list": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ],
    "challenge_test_list": [],
    "problem_id": 189
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_index(l):\n    max_value = l[0]\n    max_index = [0]\n    for i in range(1, len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n            max_index = [i]\n        elif l[i] == max_value:\n            max_index.append(i)\n    return max_index\n\n\nprint(max_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))",
    "def find_max_index(list):\n    if len(list) < 2:\n        return [0]\n    max_value = max(list)\n    return [i for i, x in enumerate(list) if x == max_value]",
    "def index_max(nums):\n    max_value = nums[0]\n    max_index = [0]\n    for i, n in enumerate(nums):\n        if n > max_value:\n            max_value = n\n            max_index = [i]\n        elif n == max_value:\n            max_index.append(i)\n    return max_index\n\n\ndef test_index_max():\n    assert index_max([2, 3, 4, 2, 3, 2, 3, 2]) == [0, 2, 6]\n\n\nif __name__ == '__main__':\n    test_index_max()",
    "def find_max_index(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of indices of max value\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    max_value = arr[0]\n    max_indices = [0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_indices = [i]\n        elif arr[i] == max_value:\n            max_indices.append(i)\n\n    return max_indices\n\n\ndef test_find_max_index():\n    assert find_max_index([]) is None\n    assert find_max_index([1]) == [0]\n    assert find_max_index([1, 2, 3, 2, 1]) == [0, 3]\n    assert find_max_index([2, 2, 2, 2, 2]) == [0, 1, 2, 3, 4]\n\n\nif __name__ == '__main__':\n    test_find_max_index()",
    "def find_max(l):\n    \"\"\"\n    :param l: list of numbers\n    :return: list of index positions of the maximum values\n    \"\"\"\n    max_index = []\n    max_value = max(l)\n\n    for i in range(len(l)):\n        if l[i] == max_value:\n            max_index.append(i)\n\n    return max_index\n\n\ndef main():\n    print(find_max([1, 2, 3, 4, 3, 5, 4, 6, 7, 8, 9, 10]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_index(nums):\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param nums: list of numbers\n    :return: list of index positions of the maximum values in a given list\n    \"\"\"\n\n    if not nums:\n        return []\n\n    max_num = nums[0]\n    max_indexes = [0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_indexes = [i]\n        elif nums[i] == max_num:\n            max_indexes.append(i)\n\n    return max_indexes\n\n\nif __name__ == \"__main__\":\n    nums = [2, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4]\n    print(max_index(nums))",
    "def max_index(list):\n    # initialize the maximum value\n    max_value = list[0]\n    # initialize the list of indices\n    indices = [0]\n    # iterate through the list\n    for i in range(1, len(list)):\n        # check if the current value is greater than the maximum\n        if list[i] > max_value:\n            # update the maximum value and the list of indices\n            max_value = list[i]\n            indices = [i]\n        # otherwise check if the current value is equal to the maximum\n        elif list[i] == max_value:\n            # append the current index to the list of indices\n            indices.append(i)\n    # return the list of indices\n    return indices",
    "def find_max(arr):\n    # This solution is not optimal.\n    # We should only iterate once and compare each element with the max found so far.\n    # We can also use a variable to track the max and its position.\n    max_indexes = []\n\n    for i in range(len(arr)):\n        if arr[i] == max(arr):\n            max_indexes.append(i)\n\n    return max_indexes\n\n\ndef find_max_optimized(arr):\n    max_value = arr[0]\n    max_indexes = []\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_indexes = [i]\n        elif arr[i] == max_value:\n            max_indexes.append(i)\n\n    return max_indexes\n\n\nprint(find_max([1, 2, 3, 4, 5, 5, 3, 2, 1]))\nprint(find_max_optimized([1, 2, 3, 4, 5, 5, 3, 2, 1]))",
    "from typing import List\n\n\ndef find_max_positions(arr: List[int]) -> List[int]:\n    \"\"\"Find the index positions of the maximum values in a given list.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Returns:\n        List[int]: index positions of the maximum values\n\n    Examples:\n        >>> find_max_positions([5,2,4,1,3])\n        [0, 3]\n    \"\"\"\n    return [i for i, _ in enumerate(arr) if _ == max(arr)]\n\n\nif __name__ == \"__main__\":\n    print(find_max_positions([5, 2, 4, 1, 3]))",
    "def max_positions(lst):\n    max_pos = []\n    max_value = max(lst)\n\n    for i, x in enumerate(lst):\n        if x == max_value:\n            max_pos.append(i)\n\n    return max_pos\n\n\nif __name__ == '__main__':\n    print(max_positions([1, 2, 2, 2, 2, 3, 4, 5, 5, 6]))\n    print(max_positions([1, 2, 3, 4, 5, 6, 7]))\n    print(max_positions([1, 1, 1, 1, 1, 1, 1]))\n    print(max_positions([1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7]))",
    "def max_index(list):\n    max = list[0]\n    index = [0]\n    for i in range(1, len(list)):\n        if list[i] > max:\n            index = [i]\n            max = list[i]\n        elif list[i] == max:\n            index.append(i)\n    return index\n\nif __name__ == '__main__':\n    print(max_index([2, 3, 4, 2, 3, 5, 2, 2, 2, 3]))",
    "def index_of_max(arr):\n    if not arr:\n        return []\n\n    max_value = arr[0]\n    max_indices = [0]\n    for i, el in enumerate(arr[1:]):\n        if el > max_value:\n            max_value = el\n            max_indices = [i+1]\n        elif el == max_value:\n            max_indices.append(i+1)\n\n    return max_indices\n\n\nprint(index_of_max([2, 3, 4, 2, 3, 5, 2, 2, 2, 2, 2]))",
    "from typing import List\n\n\ndef max_index(nums: List[int]) -> List[int]:\n    \"\"\"Return a list of indices of the maximum elements in a list.\n\n    Args:\n        nums (List[int]): list of integers.\n\n    Examples:\n        >>> assert max_index([4, 3, 2, 5, 2, 1, 4]) == [0, 4, 5]\n    \"\"\"\n    if not nums:\n        return []\n\n    max_val, max_indices = nums[0], [0]\n    for index, value in enumerate(nums):\n        if value > max_val:\n            max_val = value\n            max_indices = [index]\n        elif value == max_val:\n            max_indices.append(index)\n    return max_indices\n\n\nif __name__ == \"__main__\":\n    print(max_index([4, 3, 2, 5, 2, 1, 4]))",
    "from typing import List, Tuple\n\n\ndef find_max_index(arr: List[int]) -> List[int]:\n    \"\"\"Find index of maximum element in a list.\n\n    Args:\n        arr (List[int]): input list\n\n    Returns:\n        List[int]: index of maximum element\n\n    >>> find_max_index([3, 2, 3, 5, 2, 1, 5, 2, 3])\n    [0, 3, 7]\n    \"\"\"\n    return [i for i, _ in enumerate(arr) if _ == max(arr)]\n\n\ndef find_max_index_v2(arr: List[int]) -> List[int]:\n    \"\"\"Find index of maximum element in a list.\n\n    Args:\n        arr (List[int]): input list\n\n    Returns:\n        List[int]: index of maximum element\n\n    >>> find_max_index_v2([3, 2, 3, 5, 2, 1, 5, 2, 3])\n    [0, 3, 7]\n    \"\"\"\n    max_val: int = max(arr)\n    return [i for i, _ in enumerate(arr) if _ == max_val]\n\n\ndef find_max_index_v3(arr: List[int]) -> Tuple[int]:\n    \"\"\"Find index of maximum element in a list.\n\n    Args:\n        arr (List[int]): input list\n\n    Returns:\n        Tuple[int]: index of maximum element\n\n    >>> find_max_index_v3([3, 2, 3, 5, 2, 1, 5, 2, 3])\n    (0, 3, 7)\n    \"\"\"\n    return tuple(i for i, _ in enumerate(arr) if _ == max(arr))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_index(nums):\n    # loop through list\n    # if current value is greater than previous value, update max_value and max_index\n    # if current value is the same as previous value, add current index to max_index list\n    max_value = nums[0]\n    max_index = [0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_value:\n            max_value = nums[i]\n            max_index = [i]\n        elif nums[i] == max_value:\n            max_index.append(i)\n    return max_index\n\n\nprint(max_index([2, 3, 4, 2, 3, 2, 3, 2]))\nprint(max_index([1, 2, 3, 4, 5]))\nprint(max_index([2, 2, 2, 2, 2, 2]))",
    "def find_max(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    max_val = nums[0]\n    max_idx = [0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n            max_idx = [i]\n        elif nums[i] == max_val:\n            max_idx.append(i)\n\n    return max_idx\n\ndef test_find_max():\n    assert find_max([]) == []\n    assert find_max([1]) == [0]\n    assert find_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == [0]\n    assert find_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6]) == [0, 10]\n\nif __name__ == '__main__':\n    test_find_max()",
    "def max_index(arr):\n    max_num = max(arr)\n    return [i for i, num in enumerate(arr) if num == max_num]\n\n\nprint(max_index([2, 3, 4, 2, 3, 5, 2, 5, 2]))",
    "# O(n) time | O(n) space - where n is the length of the input list\ndef maxValueIndexes(array):\n    maxVal = None\n    maxValIdx = []\n    for i in range(len(array)):\n        if not maxVal:\n            maxVal = array[i]\n            maxValIdx.append(i)\n        elif array[i] >= maxVal:\n            maxValIdx = [i]\n            maxVal = array[i]\n        elif array[i] == maxVal:\n            maxValIdx.append(i)\n    return maxValIdx\n\n\nprint(maxValueIndexes([5, 2, 4, 1, 3]))\nprint(maxValueIndexes([5, 2, 4, 1, 3, 3]))\nprint(maxValueIndexes([2, 2, 4, 1, 3]))\nprint(maxValueIndexes([5, 2, 4, 1, 3, 5, 5, 5]))",
    "def index(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    max_num = nums[0]\n    max_index = [0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_index = [i]\n        elif nums[i] == max_num:\n            max_index.append(i)\n    return max_index\n\n\nprint(index([3, 2, 3, 3, 2, 4, 2, 2, 2]))",
    "def max_index(list):\n    max_val = list[0]\n    max_index_list = [0]\n    for i in range(1, len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n            max_index_list = [i]\n        elif list[i] == max_val:\n            max_index_list.append(i)\n    return max_index_list\n\nprint(max_index([2, 3, 5, 3, 4, 2, 1, 2, 3, 4, 5]))",
    "def max_indices(nums):\n    max_num = max(nums)\n    return [i for i, num in enumerate(nums) if num == max_num]\n\n\ndef test_max_indices():\n    assert max_indices([]) == []\n    assert max_indices([1]) == [0]\n    assert max_indices([1, 2]) == [0]\n    assert max_indices([1, 1]) == [0, 1]\n    assert max_indices([2, 2, 3, 2, 2]) == [0, 3, 4]\n    assert max_indices([3, 2, 3, 2, 3]) == [0, 2, 4]\n    assert max_indices([2, 3, 2, 3, 2]) == [1, 2, 4]\n\n\nif __name__ == \"__main__\":\n    test_max_indices()",
    "def find_max_index(list_of_numbers):\n    \"\"\"\n    >>> find_max_index([1, 2, 3, 4, 5, 3, 2, 1])\n    [0, 5]\n    >>> find_max_index([1, 1, 1, 1, 1, 1, 1, 1])\n    [0, 1, 2, 3, 4, 5, 6, 7]\n    >>> find_max_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [0, 9]\n    >>> find_max_index([10, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [0, 9]\n    >>> find_max_index([])\n    []\n    >>> find_max_index([-10, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    [0, 9]\n    \"\"\"\n    if not list_of_numbers:\n        return []\n\n    maximum = list_of_numbers[0]\n    indices = [0]\n\n    for index, number in enumerate(list_of_numbers):\n        if number > maximum:\n            maximum = number\n            indices = [index]\n        elif number == maximum:\n            indices.append(index)\n\n    return indices\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def max_index(list):\n    \"\"\"Return a list of index positions of the maximum values in a given list.\"\"\"\n    max_index_list = []\n    max_value = max(list)\n\n    for index, value in enumerate(list):\n        if value == max_value:\n            max_index_list.append(index)\n\n    return max_index_list\n\n\nif __name__ == '__main__':\n    print(max_index([1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 8, 8, 8, 9, 10]))\n    print(max_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
    "def max_index(list):\n    max_value = list[0]\n    index = [0]\n    for i in range(1, len(list)):\n        if list[i] > max_value:\n            max_value = list[i]\n            index = [i]\n        elif list[i] == max_value:\n            index.append(i)\n    return index\n\nprint(max_index([5,2,4,1,3]))\nprint(max_index([5,2,2,1,3]))\nprint(max_index([5,2,4,1,3,4,4,4,4]))\nprint(max_index([5,2,4,1,3,4,4,4,4,4]))",
    "def find_max_indexes(l):\n    max_indexes = []\n    max_value = max(l)\n    for i in range(len(l)):\n        if l[i] == max_value:\n            max_indexes.append(i)\n    return max_indexes\n\n\nprint(find_max_indexes([2, 4, 5, 4, 5, 1, 2, 3, 2, 4, 5]))",
    "def max_index_positions(arr):\n    if len(arr) == 0:\n        return []\n    max_index = [0]\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = [i]\n        elif arr[i] == max_value:\n            max_index.append(i)\n    return max_index\n\narr = [2, 1, 3, 4, 2, 2, 2, 5, 6, 6, 6, 6, 7, 8, 2]\nprint(max_index_positions(arr))",
    "from typing import List\n\n\ndef find_max(numbers: List[int]) -> List[int]:\n    \"\"\"Find the index positions of the maximum values in a given list.\n\n    Args:\n        numbers (List[int]): the given list\n\n    Examples:\n        >>> find_max([1, 2, 3, 2, 3, 4, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1])\n        [5, 8, 10, 12]\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    max_index = [0]\n\n    for i, num in enumerate(numbers):\n        if num > max_num:\n            max_num = num\n            max_index = [i]\n        elif num == max_num:\n            max_index.append(i)\n\n    return max_index\n\n\ndef test():\n    \"\"\"Run the simple test cases.\"\"\"\n    test_cases = [\n        ([1, 2, 3, 2, 3, 4, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1], [5, 8, 10, 12]),\n        ([1, 2, 3, 4, 5, 6], [5]),\n        ([1], [0]),\n        ([1, 1, 1, 1], [0, 1, 2, 3]),\n        ([], []),\n    ]\n    for arg, expected in test_cases:\n        print(find_max(arg), \"==\", expected)\n\n\nif __name__ == \"__main__\":\n    test()",
    "from typing import List\n\n\ndef find_max_index(nums: List[int]) -> List[int]:\n    \"\"\"Finds all index positions of the maximum values in a given list.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Examples:\n        >>> find_max_index([1, 2, 3, 4, 2, 5])\n        [0, 4]\n        >>> find_max_index([1, 2, 3, 4, 5])\n        [4]\n        >>> find_max_index([1])\n        [0]\n    \"\"\"\n    if not nums:\n        return []\n\n    max_value = max(nums)\n    max_index_list: List[int] = []\n\n    for index, num in enumerate(nums):\n        if num == max_value:\n            max_index_list.append(index)\n\n    return max_index_list\n\n\ndef main():\n    print(find_max_index([1, 2, 3, 4, 2, 5]))\n    print(find_max_index([1, 2, 3, 4, 5]))\n    print(find_max_index([1]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_index(arr):\n    max_num = -float(\"inf\")\n    max_indexes = []\n    for index, num in enumerate(arr):\n        if num > max_num:\n            max_indexes.append(index)\n            max_num = num\n    return max_indexes\n\n\ndef test_max_index():\n    assert max_index([]) == []\n    assert max_index([5]) == [0]\n    assert max_index([5, 5]) == [0, 1]\n    assert max_index([5, 6, 7]) == [1]\n    assert max_index([5, 7, 5]) == [1]\n    assert max_index([6, 5, 7]) == [0]\n    assert max_index([7, 5, 6]) == [2]\n    assert max_index([7, 7, 7]) == [0, 1, 2]\n    assert max_index([7, 7, 6]) == [2]\n    assert max_index([6, 7, 7]) == [0]\n    assert max_index([5, 7, 5, 7]) == [1, 3]\n    assert max_index([5, 5, 7, 7]) == [0, 2, 3]\n    assert max_index([5, 5, 5, 7]) == [0, 1, 2]\n    assert max_index([5, 5, 5, 5]) == [0, 1, 2, 3]\n\n\nif __name__ == \"__main__\":\n    test_max_index()",
    "def find_max_index(lst):\n    max_index_list = []\n    if lst:\n        max_val = max(lst)\n        max_index_list = [i for i, x in enumerate(lst) if x == max_val]\n    return max_index_list\n\n\nif __name__ == \"__main__\":\n    print(find_max_index([5, 1, 4, 5, 3, 4, 5, 6, 2, 3]))\n    print(find_max_index([1, 2, 3, 4, 5]))\n    print(find_max_index([]))\n    print(find_max_index([2, 2, 2]))",
    "def find_max_positions(arr):\n    # First solution\n    # O(n)\n    max_pos = []\n    if len(arr) == 0:\n        return max_pos\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == max_num:\n            max_pos.append(i)\n    return max_pos\n\n    # Second solution\n    # O(n)\n    max_pos = []\n    if len(arr) == 0:\n        return max_pos\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == max_num:\n            max_pos.append(i)\n    return max_pos\n\n    # Third solution\n    # O(n)\n    max_pos = []\n    if len(arr) == 0:\n        return max_pos\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == max_num:\n            max_pos.append(i)\n    return max_pos\n\n    # Fourth solution\n    # O(n)\n    max_pos = []\n    if len(arr) == 0:\n        return max_pos\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == max_num:\n            max_pos.append(i)\n    return max_pos\n\n    # Fifth solution\n    # O(n)\n    max_pos = []\n    if len",
    "def index_of_max(list):\n    max = list[0]\n    max_index = [0]\n    for i in range(1, len(list)):\n        if list[i] > max:\n            max = list[i]\n            max_index = [i]\n        elif list[i] == max:\n            max_index.append(i)\n    return max_index\n\nprint(index_of_max([1, 2, 3, 2, 3, 1, 2, 3, 4, 5]))",
    "def find_max_index(l):\n    max_index = []\n    max_value = l[0]\n    for i in range(len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n            max_index.clear()\n            max_index.append(i)\n        elif l[i] == max_value:\n            max_index.append(i)\n    return max_index\n\n\ndef test_max_index_finder():\n    assert find_max_index([2, 3, 4, 2, 3, 5, 2, 6, 2, 7, 9, 9, 9, 9, 8]) == [3, 5, 9, 10, 11, 12]\n    assert find_max_index([-1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4]\n    assert find_max_index([-1, -2, -3, -4, -5, -1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert find_max_index([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert find_max_index([-1, -2, -3, -4, -5, -1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\ndef main():\n    test_max_index_finder()\n    print(\"Everything passed\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_positions(a):\n    max_num = max(a)\n    result = []\n    for i in range(len(a)):\n        if a[i] == max_num:\n            result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    print(max_positions([2, 3, 4, 2, 3, 5, 2, 3, 6, 7, 4, 8, 9]))",
    "def max_positions(input_list):\n    if not input_list:\n        return []\n    return [index for index, item in enumerate(input_list) if item == max(input_list)]",
    "def max_index(numbers):\n    max_value = max(numbers)\n    return [i for i, num in enumerate(numbers) if num == max_value]\n\n\nprint(max_index([1, 2, 3, 4, 5, 5, 5, 5]))",
    "def max_indices(lst):\n    return [i for i, e in enumerate(lst) if e == max(lst)]\n\n\nif __name__ == '__main__':\n    print(max_indices([2, 3, 4, 2, 3, 5, 4, 2, 3, 5, 6]))",
    "def find_max_indexes(lst):\n    max_indexes = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] > lst[max_indexes[-1]]:\n            max_indexes.append(i)\n    return max_indexes\n\nprint(find_max_indexes([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
    "def max_index(a):\n    max_num = max(a)\n    return [i for i, x in enumerate(a) if x == max_num]\n\n\nif __name__ == '__main__':\n    print(max_index([2, 1, 3, 4, 5, 1, 3, 4, 5, 6, 7, 8, 9, 1, 3, 4, 5, 6, 7, 8, 9]))",
    "def find_max(arr):\n    \"\"\"\n    Find the index of the maximum value in a list\n\n    Args:\n       arr(array): Input list\n    Returns:\n       int: Index position of the maximum value in a list\n    \"\"\"\n    max_index = []\n    if len(arr) == 0:\n        return max_index\n    max_value = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == max_value:\n            max_index.append(i)\n    return max_index\n\n# Tests\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_max(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [5, 2, 4, 1, 3]\nsolution = [0, 3]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [5, 2, 4, 1, 5]\nsolution = [0, 3, 4]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, 2, 2, 2, 2]\nsolution = [0, 1, 2, 3, 4]\ntest_case = [arr, solution]\ntest_function(test_case)",
    "def max_index(nums):\n    max_num = nums[0]\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_index = i\n    return max_index\n\ndef max_indexes(nums):\n    max_num = nums[0]\n    max_indexes = [0]\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_indexes = [i]\n        elif nums[i] == max_num:\n            max_indexes.append(i)\n    return max_indexes\n\nnums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1]\nprint(max_index(nums))\nprint(max_indexes(nums))",
    "# O(n)\ndef find_max(arr):\n    max_val = arr[0]\n    max_index = [0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = [i]\n        elif arr[i] == max_val:\n            max_index.append(i)\n    return max_index\n\n\nprint(find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]))",
    "def find_max_index(input_list):\n    \"\"\"\n    Finds the index of the maximum value in a given list\n    :param input_list: list\n    :return: int\n    \"\"\"\n    return [i for i, x in enumerate(input_list) if x == max(input_list)]\n\n\nif __name__ == '__main__':\n    print(find_max_index([1, 2, 3, 2, 5, 6, 6, 6, 6, 4, 3, 2, 1]))",
    "from typing import List\n\n\ndef find_max_index(nums: List[int]) -> List[int]:\n    \"\"\"\n    >>> find_max_index([2, 3, 4, 2, 3, 4, 2, 3, 4])\n    [0, 2, 4, 6, 8]\n    \"\"\"\n    max_value = nums[0]\n    max_indexes = [0]\n\n    for i, num in enumerate(nums[1:]):\n        if num > max_value:\n            max_value = num\n            max_indexes = [i + 1]\n        elif num == max_value:\n            max_indexes.append(i + 1)\n\n    return max_indexes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef find_max_positions(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    positions = []\n\n    if not arr:\n        return positions\n\n    max_val = arr[0]\n    max_pos = 0\n\n    for i, val in enumerate(arr):\n        if val > max_val:\n            max_val = val\n            max_pos = i\n\n    positions.append(max_pos)\n\n    for i in range(1, len(arr)):\n        if arr[i] == max_val:\n            positions.append(i)\n\n    return positions\n\n\nif __name__ == \"__main__\":\n    assert find_max_positions([5, 2, 4, 1, 7]) == [3, 4]\n    assert find_max_positions([2, 2, 1, 1, 1, 2, 2]) == [1, 2, 6]\n    assert find_max_positions([5, 4, 4, 2, 4, 4, 4]) == [0, 3, 5]\n    assert find_max_positions([3, 4, 4, 4, 4, 4, 4]) == [0, 1, 2, 3, 4, 5, 6]",
    "def max_index(list):\n    max_index = []\n    max_value = max(list)\n    for i in range(len(list)):\n        if list[i] == max_value:\n            max_index.append(i)\n    return max_index\n\nif __name__ == '__main__':\n    print(max_index([2, 3, 4, 2, 3, 4, 2, 3, 4]))",
    "def max_index_positions(lst):\n    \"\"\"\n    This function takes a list as input and returns a list containing the\n    index positions of the maximum values in the list.\n    \"\"\"\n    # Initialise the maximum value\n    max_val = max(lst)\n    # Initialise the list containing the index positions of the maximum values\n    max_index_list = []\n    # Loop through the list\n    for i in range(len(lst)):\n        # If the current element is equal to the maximum value\n        if lst[i] == max_val:\n            # Append the current index position to the list\n            max_index_list.append(i)\n    # Return the list containing the index positions of the maximum values\n    return max_index_list",
    "from typing import List\n\n\ndef get_max_indices(arr: List[int]) -> List[int]:\n    \"\"\"\n    >>> get_max_indices([5, 2, 4, 1, 2, 3, 5])\n    [0, 5]\n    \"\"\"\n    max_value = max(arr)\n    return [index for index, value in enumerate(arr) if value == max_value]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_index(arr):\n    max_num = float(\"-inf\")\n    max_nums = []\n\n    for i, num in enumerate(arr):\n        if num > max_num:\n            max_nums = [i]\n            max_num = num\n        elif num == max_num:\n            max_nums.append(i)\n\n    return max_nums\n\n\nif __name__ == \"__main__\":\n    assert max_index([2, 3, 4, 2]) == [0, 3]\n    assert max_index([2, 2, 4, 2]) == [0, 1, 3]",
    "def max_positions(arr):\n    \"\"\"\n    Return all index positions of the maximum values in a given list.\n    \"\"\"\n    if not arr:\n        return []\n\n    max_value = arr[0]\n    max_positions = [0]\n\n    for index, value in enumerate(arr):\n        if value > max_value:\n            max_value = value\n            max_positions = [index]\n        elif value == max_value:\n            max_positions.append(index)\n\n    return max_positions",
    "def max_index(lst):\n    \"\"\"\n    >>> max_index([5, 2, 4, 5, 2, 4, 5, 6])\n    [0, 3, 7]\n    \"\"\"\n    m = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == m]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_index(lst: List) -> List:\n    \"\"\"Return the index positions of the maximum value in a list.\n\n    Args:\n        lst (List): given list of integers\n\n    Returns:\n        List: list of index positions of the maximum value in a list\n\n    Examples:\n        >>> max_index([4, 5, 2, 2, 3, 5, 1, 5, 6])\n        [0, 2, 4, 7]\n\n        >>> max_index([1])\n        [0]\n\n        >>> max_index([-1, -2, -3, -4, -5])\n        [4]\n\n        >>> max_index([-1, -1, -1, -1, -1])\n        [0, 1, 2, 3, 4]\n    \"\"\"\n    max_value = max(lst)\n    return [i for i, j in enumerate(lst) if j == max_value]\n\n\nif __name__ == \"__main__\":\n    print(max_index([4, 5, 2, 2, 3, 5, 1, 5, 6]))\n    print(max_index([1]))\n    print(max_index([-1, -2, -3, -4, -5]))\n    print(max_index([-1, -1, -1, -1, -1]))",
    "from typing import List\n\n\ndef max_index(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    max_idx = [0]\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_idx = [i]\n        elif arr[i] == max_val:\n            max_idx.append(i)\n\n    return max_idx\n\n\nif __name__ == \"__main__\":\n    assert max_index([2, 3, 4, 2, 3, 5, 2, 6, 7]) == [0, 2, 6]",
    "from typing import List\n\n\ndef find_max(arr: List[int]) -> List[int]:\n    \"\"\"\n    >>> find_max([4, 5, 2, 2, 3, 5, 6, 3])\n    [0, 2, 4]\n    >>> find_max([2, 2, 2, 2, 2, 2, 2, 2])\n    [0, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    # initialize a list to store the index of the max element\n    index_of_max = []\n    # initialize a variable to store the index of the max element\n    index = 0\n\n    for i in range(len(arr)):\n        if arr[i] > arr[index]:\n            index = i\n\n    # check if the index of the max element is not at the start of the array\n    if index != 0:\n        # append the index of the max element to the index_of_max list\n        index_of_max.append(index)\n\n    # initialize a variable to store the previous index of the max element\n    prev_index = index\n    # initialize a variable to store the index of the current max element\n    index = 0\n\n    for i in range(len(arr)):\n        if arr[i] > arr[index]:\n            index = i\n\n        if arr[index] == arr[prev_index]:\n            # append the index of the max element to the index_of_max list\n            index_of_max.append(index)\n\n        prev_index = index\n\n    return index_of_max\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_max(l):\n    return [i for i, v in enumerate(l) if v == max(l)]\n\n\nif __name__ == \"__main__\":\n    print(find_max([1, 2, 3, 2, 5, 3, 7, 9, 9, 12, 9]))",
    "def find_all_max_index(ls):\n    \"\"\"\n    :param ls: list of integers\n    :return: list of index positions of the max values in a given list\n    \"\"\"\n    if len(ls) == 0:\n        return []\n\n    max_value = ls[0]\n    max_positions = []\n    for i in range(len(ls)):\n        if ls[i] > max_value:\n            max_value = ls[i]\n            max_positions = [i]\n        elif ls[i] == max_value:\n            max_positions.append(i)\n\n    return max_positions\n\n\n\ndef test_function(test_case):\n    ls = test_case[0]\n    solution = test_case[1]\n    output = find_all_max_index(ls)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[1, 2, 3, 4], [3]]\ntest_function(test_case_1)\n\ntest_case_2 = [[], []]\ntest_function(test_case_2)\n\ntest_case_3 = [[-1, -2, -3, -4], [0]]\ntest_function(test_case_3)\n\ntest_case_4 = [[5, 5, 5, 5], [0, 1, 2, 3]]\ntest_function(test_case_4)\n\ntest_case_5 = [[1, 2, 3, 4, 5], [0, 4]]\ntest_function(test_case_5)\n\ntest_case_6 = [[-5, -2, -3, -4, -1], [0, 4]]\ntest_function(test_case_6)",
    "def find_max_indexes(nums):\n    max_indexes = []\n    max_num = max(nums)\n\n    for index, num in enumerate(nums):\n        if num == max_num:\n            max_indexes.append(index)\n\n    return max_indexes\n\n\ndef test_find_max_indexes():\n    assert find_max_indexes([5, 2, 4, 1, 3]) == [0, 3]\n\n\nif __name__ == '__main__':\n    test_find_max_indexes()",
    "from typing import List\n\n\ndef find_max_index_positions(input_list: List[int]) -> List[int]:\n    \"\"\"Finds all index positions of the maximum values in a given list.\n\n    Args:\n        input_list (List[int]): input list\n\n    Returns:\n        List[int]: list with index positions of maximum values\n\n    Examples:\n        >>> assert find_max_index_positions([1, 2, 3, 2, 3, 4, 5, 5, 6]) == [3, 5, 7]\n    \"\"\"\n    max_value = input_list[0]\n    index_positions = [0]\n\n    for index, value in enumerate(input_list):\n        if value > max_value:\n            max_value = value\n            index_positions = [index]\n        elif value == max_value:\n            index_positions.append(index)\n\n    return index_positions\n\n\nif __name__ == \"__main__\":\n    print(find_max_index_positions([1, 2, 3, 2, 3, 4, 5, 5, 6]))",
    "def max_index_positions(arr):\n    max_idx = []\n    max_val = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == max_val:\n            max_idx.append(i)\n    return max_idx\n\n\nprint(max_index_positions([2, 3, 4, 2, 3, 5, 2, 3, 6, 2]))",
    "from typing import List\n\n\ndef find_max(nums: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    max_num = nums[0]\n    max_indexes = [0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_indexes = [i]\n        elif nums[i] == max_num:\n            max_indexes.append(i)\n\n    return max_indexes\n\n\nif __name__ == \"__main__\":\n    print(find_max([2, 3, 4, 2, 3, 4, 2, 3, 4]))",
    "from typing import List\n\n\ndef max_values(list: List[int]) -> List[int]:\n    \"\"\"Finds all index positions of the maximum values in a given list.\n\n    Args:\n        list (List[int]): list of integers.\n\n    Examples:\n        >>> max_values([2, 3, 4, 2, 3, 5, 2, 3, 6, 2])\n        [2, 3, 7]\n    \"\"\"\n    if not list:\n        return []\n\n    max_indexes = []\n    max_value = max(list)\n\n    for i in range(len(list)):\n        if list[i] == max_value:\n            max_indexes.append(i)\n\n    return max_indexes\n\n\nif __name__ == \"__main__\":\n    print(max_values([2, 3, 4, 2, 3, 5, 2, 3, 6, 2]))",
    "def find_all_indexes(numbers, x):\n    \"\"\"\n    Find all the index positions of a given number in a list.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_index = find_max_index(numbers)\n    max_val = numbers[max_index]\n\n    if x == max_val:\n        return [max_index]\n\n    return [index for index, value in enumerate(numbers) if value == x]\n\ndef find_max_index(numbers):\n    \"\"\"\n    Find the index of the maximum value in a list.\n    \"\"\"\n    max_index = 0\n    for index, value in enumerate(numbers):\n        if value > numbers[max_index]:\n            max_index = index\n    return max_index\n\ndef find_max_index_2(numbers):\n    \"\"\"\n    Find the index of the maximum value in a list.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_index = 0\n    for index, value in enumerate(numbers):\n        if value > numbers[max_index]:\n            max_index = index\n    return max_index\n\ndef find_max_index_3(numbers):\n    \"\"\"\n    Find the index of the maximum value in a list.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_index = 0\n    for index, value in enumerate(numbers):\n        if value > numbers[max_index]:\n            max_index = index\n    return max_index\n\ndef find_max_index_4(numbers):\n    \"\"\"\n    Find the index of the maximum value in a list.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_index = 0\n    for index, value in enumerate(numbers):\n        if value > numbers[max_index]:\n            max_index = index\n    return max_index\n\ndef find_max_index_5(numbers):\n    \"\"\"\n    Find the index of the maximum value in a list.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_",
    "def find_max_index(arr):\n    max_value = arr[0]\n    max_index = [0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = [i]\n        elif arr[i] == max_value:\n            max_index.append(i)\n    return max_index\n\narr = [4, 3, 6, 2, 4, 5, 8, 1]\nprint(find_max_index(arr))",
    "def index_of_max(list_of_ints):\n    \"\"\"\n    Finds all index positions of the maximum values in a given list.\n\n    Args:\n       list_of_ints(list of int): Input list of integers\n    Returns:\n       list of int: Returns all index positions of the maximum values in a given list\n    \"\"\"\n    if list_of_ints is None or len(list_of_ints) == 0:\n        return None\n    max_num = list_of_ints[0]\n    max_num_index = [0]\n    for index in range(len(list_of_ints)):\n        if list_of_ints[index] > max_num:\n            max_num = list_of_ints[index]\n            max_num_index = [index]\n        elif list_of_ints[index] == max_num:\n            max_num_index.append(index)\n    return max_num_index\n\n# Test Cases\nprint (\"Pass\" if  (0, 5, 7) == index_of_max([2, 6, 5, 9, 7, 9, 10, 6, 3, 5, 7])\nelse \"Fail\")\nprint (\"Pass\" if  (0, 1) == index_of_max([2, 6, 5, 9, 7, 9, 10, 6, 3, 5, 7, 6])\nelse \"Fail\")\nprint (\"Pass\" if  (0) == index_of_max([2, 6, 5, 9, 7, 9, 10, 6, 3, 5, 7, 6, 6])\nelse \"Fail\")\nprint (\"Pass\" if  (0, 1, 2) == index_of_max([2, 6, 5, 9, 7, 9, 10, 6, 3, 5, 7, 6, 6, 5])\nelse \"Fail\")\nprint (\"Pass\" if  (0, 1, 2, 4) == index_of_max([2,",
    "from typing import List\n\n\ndef max_index_positions(input_list: List[int]) -> List[int]:\n    \"\"\"Returns the index positions of the maximum values in a given list.\n\n    Args:\n        input_list (List[int]): list of integers\n\n    Returns:\n        List[int]: list of integers representing the index positions\n    \"\"\"\n    max_value = max(input_list)\n    return [index for index, value in enumerate(input_list) if value == max_value]\n\n\nif __name__ == \"__main__\":\n    print(max_index_positions([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))",
    "def max_index(arr):\n    max_arr = []\n    for i in range(len(arr)):\n        if arr[i] == max(arr):\n            max_arr.append(i)\n    return max_arr\n\n\n\nprint(max_index([4, 2, 4, 3, 4, 4, 2]))",
    "def find_max_index(list_of_nums):\n    max_val = max(list_of_nums)\n    max_index = [index for index, num in enumerate(list_of_nums) if num == max_val]\n    return max_index\n\n\nif __name__ == \"__main__\":\n    print(find_max_index([10, 20, 30, 40, 20, 10]))",
    "# O(n)\ndef find_max_index(arr):\n    max_val = max(arr)\n    return [i for i, x in enumerate(arr) if x == max_val]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([-2, 1, 2, 1, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1,",
    "def find_max_index(list):\n    max_index = 0\n    for index in range(1, len(list)):\n        if list[index] > list[max_index]:\n            max_index = index\n    return [max_index] if max_index != 0 else []\n\n\nif __name__ == '__main__':\n    print(find_max_index([1, 2, 3, 4, 4, 5, 6, 7]))\n    print(find_max_index([1, 2, 3, 4, 5, 6, 7]))\n    print(find_max_index([1, 2, 3, 4, 5, 6, 7, 7, 7, 7]))",
    "def find_max_index(list):\n    \"\"\"\n    :param list: list of numbers\n    :return: list of indexes of the max values in the list\n    \"\"\"\n    max_value = max(list)\n    indexes = []\n    for i in range(len(list)):\n        if list[i] == max_value:\n            indexes.append(i)\n    return indexes\n\n\nprint(find_max_index([1, 3, 5, 6, 2, 4, 7, 10, 11, 3, 3, 3, 3, 3, 3, 3]))",
    "from typing import List, Tuple\n\n\ndef max_indices(arr: List[int]) -> List[int]:\n    \"\"\"Finds all index positions of the maximum values in a given list.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Returns:\n        List[int]: index positions of the maximum values\n    \"\"\"\n    max_positions = []\n\n    # Find the index position of the max value\n    max_pos = arr.index(max(arr))\n\n    # Add the index position of the max value to the list\n    max_positions.append(max_pos)\n\n    # Loop through the list\n    for i in range(len(arr)):\n        # Find the index position of the max value\n        max_pos = arr.index(max(arr))\n\n        # Add the index position of the max value to the list\n        max_positions.append(max_pos)\n\n        # Remove the max value from the list\n        arr.pop(max_pos)\n\n    return max_positions\n\n\ndef test_max_indices():\n    \"\"\"Test for max_indices function.\"\"\"\n    assert max_indices([2, 3, 4, 2, 3, 5, 2, 3, 4, 2, 3, 5]) == [0, 10]\n    assert max_indices([5, 4, 3, 2, 1]) == [0, 4]\n    assert max_indices([1, 2, 3, 4, 5]) == [0, 4]\n    assert max_indices([5, 4, 3, 2, 5]) == [0, 4]\n    assert max_indices([2, 2, 2, 2, 2]) == [0, 4]\n\n\nif __name__ == \"__main__\":\n    test_max_indices()",
    "from typing import List, Tuple\n\n\ndef max_index(lst: List[int]) -> List[int]:\n    \"\"\"Returns a list of indices of the max values in the list.\n\n    Args:\n        lst (List[int]): list to be searched\n\n    Examples:\n        >>> max_index([4, 5, 2, 2, 3, 3, 1])\n        [0, 5, 6]\n    \"\"\"\n    if lst == []:\n        return []\n    max_value = lst[0]\n    max_indexes = [0]\n    for i, value in enumerate(lst):\n        if value > max_value:\n            max_value = value\n            max_indexes = [i]\n        elif value == max_value:\n            max_indexes.append(i)\n    return max_indexes\n\n\ndef max_index_two(lst: List[int]) -> List[int]:\n    \"\"\"Returns a list of indices of the max values in the list.\n\n    Args:\n        lst (List[int]): list to be searched\n\n    Examples:\n        >>> max_index_two([4, 5, 2, 2, 3, 3, 1])\n        [0, 5, 6]\n    \"\"\"\n    if lst == []:\n        return []\n    max_value = lst[0]\n    max_indexes = [0]\n    for i, value in enumerate(lst):\n        if value >= max_value:\n            max_value = value\n            max_indexes = [i]\n        elif value == max_value:\n            max_indexes.append(i)\n    return max_indexes\n\n\ndef max_index_three(lst: List[int]) -> List[int]:\n    \"\"\"Returns a list of indices of the max values in the list.\n\n    Args:\n        lst (List[int]): list to be searched\n\n    Examples:\n        >>> max_index_three([4, 5, 2, 2, 3, 3, 1])\n        [0, 5, 6]\n    \"\"\"",
    "def max_index(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    max_num = max(nums)\n    return [index for index, num in enumerate(nums) if num == max_num]\n\nprint(max_index([2, 3, 4, 2, 3, 5, 2, 5, 2, 3]))",
    "from typing import List\n\n\ndef max_indexes(arr: List[int]) -> List[int]:\n    \"\"\"Return list of index positions of maximum values in given list.\"\"\"\n    if not arr:\n        return []\n\n    max_idx = [0]\n\n    for index, value in enumerate(arr[1:], start=1):\n        if value > arr[max_idx[0]]:\n            max_idx = [index]\n        elif value == arr[max_idx[0]]:\n            max_idx.append(index)\n\n    return max_idx\n\n\nif __name__ == \"__main__\":\n    assert max_indexes([3, 2, 3, 5, 2, 4, 6, 7]) == [3, 5]\n    assert max_indexes([3, 2, 3, 5, 2, 4, 6, 7, 8, 9]) == [3, 5]\n    assert max_indexes([2, 2, 3, 5, 2, 4, 6, 7, 2, 2]) == [1, 7]",
    "def find_max_index(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    max_val = max(arr)\n    max_index = []\n    for i in range(len(arr)):\n        if arr[i] == max_val:\n            max_index.append(i)\n    return max_index\n\n\ndef main():\n    arr = [1, 2, 3, 2, 5, 3, 7, 12]\n    print(find_max_index(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef find_max_index(arr: List[int]) -> List[int]:\n    \"\"\"Returns the index positions of the maximum values in a given list.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Returns:\n        List[int]: list of index positions of maximum values\n\n    Examples:\n        >>> find_max_index([2, 3, 4, 2, 3, 2, 2, 2])\n        [0, 2, 4, 7]\n    \"\"\"\n    if not arr:\n        return []\n\n    max_index = [0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[max_index[0]]:\n            max_index = [i]\n        elif arr[i] == arr[max_index[0]]:\n            max_index.append(i)\n\n    return max_index\n\n\nif __name__ == \"__main__\":\n    print(find_max_index([2, 3, 4, 2, 3, 2, 2, 2]))",
    "def max_positions(arr):\n    max_pos = []\n    max_val = max(arr)\n\n    for i, v in enumerate(arr):\n        if v == max_val:\n            max_pos.append(i)\n\n    return max_pos\n\n\nprint(max_positions([10, 12, 11, 11, 12, 10]))\nprint(max_positions([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(max_positions([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 100]))",
    "from typing import List\n\n\ndef find_max_index(arr: List[int]) -> List[int]:\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n    :param arr: list of integers\n    :return: list of all indexes with the same maximum value\n    >>> find_max_index([1, 2, 3, 2, 5, 3, 7, 9, 9, 3])\n    [3, 5, 8]\n    >>> find_max_index([1, 2, 3, 2, 5, 3, 7, 9, 9, 3, 4])\n    [3, 5, 8]\n    >>> find_max_index([1, 2, 3, 2, 5, 3, 7, 9, 9, 3, 4, 5, 6])\n    [3, 5, 8]\n    \"\"\"\n    if not arr:\n        return []\n\n    max_val = max(arr)\n    return [index for index, item in enumerate(arr) if item == max_val]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_index(arr):\n    \"\"\"Returns the index position of the maximum value in a given list\"\"\"\n    max_val = max(arr)\n    max_index_list = []\n    for i in range(len(arr)):\n        if arr[i] == max_val:\n            max_index_list.append(i)\n    return max_index_list\n\n\ndef test_function():\n    assert max_index([4, 3, 5, 4, 5, 1, 2, 3, 4]) == [0, 3, 5, 7]\n    assert max_index([2, 2, 2, 2, 2, 2, 2, 2, 2]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert max_index([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert max_index([]) == []\n    assert max_index([1]) == [0]\n    assert max_index([2, 2, 2, 2, 2, 2, 2, 2, 2]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert max_index([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert max_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [8]\n    assert max_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [8]\n    assert max_index([1, 1, 1, 1, 1, 1, 1,",
    "from typing import List\n\n\ndef max_index_positions(arr: List[int]) -> List[int]:\n    \"\"\"Returns the index positions of the maximum values in a given list.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Examples:\n        >>> assert max_index_positions([2, 3, 4, 2, 3, 4]) == [0, 2, 4]\n    \"\"\"\n    if not arr:\n        return []\n\n    max_val = arr[0]\n    max_index_pos = 0\n\n    for index, value in enumerate(arr):\n        if value > max_val:\n            max_val = value\n            max_index_pos = index\n\n    max_index_positions = [max_index_pos]\n\n    for index, value in enumerate(arr):\n        if value == max_val and index != max_index_pos:\n            max_index_positions.append(index)\n\n    return max_index_positions\n\n\nif __name__ == \"__main__\":\n    print(max_index_positions([2, 3, 4, 2, 3, 4]))",
    "def max_index(arr):\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n\n    Args:\n       arr: list of integers\n    Returns:\n       a list of integers\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return [0]\n    else:\n        max_val = max(arr)\n        return [i for i, j in enumerate(arr) if j == max_val]\n\n\n# Example 1:\narr = [3, 2, 4, 2, 3, 2, 2, 2, 2]\nprint(max_index(arr))\n# Output should be:\n# [0, 2, 5, 7]\n\n# Example 2:\narr = [3, 2, 4, 2, 3]\nprint(max_index(arr))\n# Output should be:\n# [0, 4]\n\n# Example 3:\narr = [3, 2, 4, 2, 3, 2, 2]\nprint(max_index(arr))\n# Output should be:\n# [0, 4]\n\n# Example 4:\narr = [3, 2, 4, 2, 3, 2, 2, 2, 2]\nprint(max_index(arr))\n# Output should be:\n# [0, 2, 5, 7]\n\n# Example 5:\narr = [3, 2, 4, 2, 3, 2, 2, 2]\nprint(max_index(arr))\n# Output should be:\n# [0, 2, 5, 7]",
    "def max_values(values):\n    \"\"\"\n    :param values: list\n    :return: list\n    \"\"\"\n    if not values:\n        return []\n\n    max_value = values[0]\n    max_indexes = [0]\n\n    for i in range(1, len(values)):\n        if values[i] > max_value:\n            max_value = values[i]\n            max_indexes = [i]\n        elif values[i] == max_value:\n            max_indexes.append(i)\n\n    return max_indexes\n\n\ndef test_max_values():\n    \"\"\"Test for max_values function.\"\"\"\n    assert max_values([1, 2, 3, 4, 5]) == [0]\n    assert max_values([2, 2, 2, 2, 2]) == [0]\n    assert max_values([]) == []\n    assert max_values([1, 2, 3, 4, 5, 5, 5, 5]) == [0, 6]\n    assert max_values([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]) == [0, 13]\n    assert max_values([5, 4, 3, 2, 1]) == [0]\n\n\nif __name__ == '__main__':\n    test_max_values()",
    "def max_indexes(lst):\n    # Your code here\n    max_val = max(lst)\n    return [i for i, val in enumerate(lst) if val == max_val]\n\nprint(max_indexes([2, 3, 4, 2, 3, 4, 2, 3, 4]))",
    "def max_index(arr):\n    \"\"\"Returns all index positions of the maximum values in a given list.\"\"\"\n    max_val = max(arr)\n    max_indexes = []\n    for i in range(len(arr)):\n        if arr[i] == max_val:\n            max_indexes.append(i)\n    return max_indexes\n\n\ndef test_case_1():\n    \"\"\"Test case 1\"\"\"\n    arr = [4, 3, 2, 5, 6, 8, 1]\n    result = max_index(arr)\n    print(result)\n\n\ndef test():\n    \"\"\"Test\"\"\"\n    test_case_1()\n\n\nif __name__ == \"__main__\":\n    test()",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef max_index_helper(nums: List[int], max_num: int, max_index: int) -> List[int]:\n    if not nums:\n        return []\n\n    current_index = nums.index(max_num)\n    if current_index == max_index:\n        return [current_index]\n\n    return [current_index, max_index]\n\n\ndef max_index(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    max_num = max(nums)\n    max_index = nums.index(max_num)\n    return max_index_helper(nums, max_num, max_index)\n\n\n# O(n) time | O(1) space\ndef max_index_helper_2(nums: List[int], max_num: int, max_index: int) -> List[int]:\n    if not nums:\n        return []\n\n    if nums[0] == max_num:\n        return [0]\n\n    return max_index_helper_2(nums[1:], max_num, max_index)\n\n\ndef max_index_2(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    max_num = max(nums)\n    return max_index_helper_2(nums, max_num, -1)\n\n\nif __name__ == \"__main__\":\n    print(max_index([3, 2, 3, 4, 2, 3, 5, 5, 6]))\n    print(max_index([3, 2, 3, 4, 2, 3, 5, 5, 6, 6]))",
    "from typing import List\n\n\ndef find_maximum_index_positions(arr: List[int]) -> List[int]:\n    \"\"\"\n    >>> find_maximum_index_positions([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6])\n    [11]\n    >>> find_maximum_index_positions([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6])\n    [11]\n    >>> find_maximum_index_positions([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])\n    [25]\n    >>> find_maximum_index_positions([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n    >>> find_maximum_index_positions([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
    "def find_max_index(list):\n    \"\"\"\n    >>> find_max_index([5, 3, 2, 4, 5, 2, 4, 2, 3])\n    [0, 4, 7]\n    \"\"\"\n    max_val = list[0]\n    max_index = [0]\n    for index, value in enumerate(list):\n        if value > max_val:\n            max_val = value\n            max_index = [index]\n        elif value == max_val:\n            max_index.append(index)\n    return max_index\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_indexes(nums: List[int]) -> List[int]:\n    max_value = max(nums)\n    return [i for i, value in enumerate(nums) if value == max_value]\n\n\nif __name__ == \"__main__\":\n    assert max_indexes([2, 3, 4, 2, 3, 5, 2, 5, 2]) == [0, 2, 7]",
    "def max_index(list):\n    max_val = max(list)\n    max_index = []\n    for i in range(len(list)):\n        if list[i] == max_val:\n            max_index.append(i)\n    return max_index\n\nprint(max_index([1, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef find_max_indexes(nums: List[int]) -> List[int]:\n    \"\"\"Find index positions of the maximum values in a given list.\n\n    Args:\n        nums (List[int]): list of numbers\n\n    Returns:\n        List[int]: list of index positions of the maximum values in a given list\n\n    Examples:\n        >>> find_max_indexes([4, 3, 2, 5, 2, 3, 4])\n        [3, 5]\n        >>> find_max_indexes([3, 4, 5, 4, 3])\n        [1, 3]\n    \"\"\"\n    return [i for i, _ in enumerate(nums) if i == max(nums)]\n\n\nif __name__ == \"__main__\":\n    print(find_max_indexes([4, 3, 2, 5, 2, 3, 4]))\n    print(find_max_indexes([3, 4, 5, 4, 3]))",
    "def find_max_index(a):\n    if len(a) == 1:\n        return [0]\n    max_index = 0\n    for i in range(len(a)):\n        if a[i] > a[max_index]:\n            max_index = i\n    return [max_index]\n\n\ndef find_max_index_recursive(a):\n    if len(a) == 1:\n        return [0]\n    max_index = find_max_index_recursive(a[:len(a) - 1])\n    if a[len(a) - 1] > a[max_index[0]]:\n        return [len(a) - 1]\n    return max_index\n\n\nimport unittest\nclass TestFindMaxIndex(unittest.TestCase):\n    def test_find_max_index(self):\n        self.assertEqual(find_max_index([1,2,3,2,3,1,2,3]), [6])\n        self.assertEqual(find_max_index([1,2,3,4,5,6,7,8,9,0]), [8])\n        self.assertEqual(find_max_index([0,1,2,3,4,5,6,7,8,9]), [9])\n        self.assertEqual(find_max_index([1,1,1,1,1,1,1,1,1,1]), [0,1,2,3,4,5,6,7,8,9])\n        self.assertEqual(find_max_index([1,2,3,4,5,6,7,8,9,10]), [9])\n        self.assertEqual(find_max_index([10,2,3,4,5,6,7,8,9,1]), [0])\n        self.assertEqual(find_max_index([10,2,3,4,5,6,7,8,9,1]), [0])\n        self.assertEqual(find_max_index([10,2,3,4,5,6,7,8,9]), [0])",
    "from typing import List\n\n\ndef find_max(input_list: List) -> List:\n    \"\"\"\n    Return the index of the maximum value in a list.\n\n    Args:\n       input_list(list): List of integers to find the maximum value\n    Returns:\n       list: Returns the index of the maximum value\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not input_list:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_val = input_list[0]\n    max_indices = [0]\n\n    for index, value in enumerate(input_list):\n        if value > max_val:\n            max_val = value\n            max_indices = [index]\n        elif value == max_val:\n            max_indices.append(index)\n\n    return max_indices\n\n\ndef test_find_max_one():\n    \"\"\"Test with one maximum value in list\"\"\"\n    assert find_max([1]) == [0]\n\n\ndef test_find_max_none():\n    \"\"\"Test with empty list\"\"\"\n    assert find_max([]) == []\n\n\ndef test_find_max_two():\n    \"\"\"Test with two maximum values in list\"\"\"\n    assert find_max([1, 2, 2]) == [0, 2]\n\n\ndef test_find_max_three():\n    \"\"\"Test with three maximum values in list\"\"\"\n    assert find_max([1, 2, 2, 1]) == [0, 2]",
    "def find_max_indices(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: list of index positions of the max values\n    \"\"\"\n    # TODO: Write your solution here\n    max_val = arr[0]\n    max_val_indices = [0]\n\n    for i in range(1, len(arr)):\n        if arr[i] >= max_val:\n            max_val = arr[i]\n            max_val_indices = [i]\n        elif arr[i] == max_val:\n            max_val_indices.append(i)\n    return max_val_indices\n\nprint(find_max_indices([10, 8, 11, 26, 37, 22, 2, 10]))",
    "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef find_maximum_index(arr):\n    max_num = -float('inf')\n    max_index = []\n\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_index = [i]\n        elif arr[i] == max_num:\n            max_index.append(i)\n    return max_index\n\n\nprint(find_maximum_index([5, 2, 4, 1, 4, 5]))",
    "def get_indices_of_max(arr):\n    return [i for i, j in enumerate(arr) if j == max(arr)]\n\n\nif __name__ == \"__main__\":\n    print(get_indices_of_max([2, 3, 4, 2, 3, 5, 2, 6, 7, 9, 9, 9, 9, 8]))",
    "from typing import List\n\n\ndef max_positions(numbers: List[int]) -> List[int]:\n    \"\"\"Get the indexes of all maximum values in the given list.\n\n    Args:\n        numbers (List[int]): list of integers\n\n    Returns:\n        List[int]: list of maximum values indexes\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_value = max(numbers)\n    return [i for i, num in enumerate(numbers) if num == max_value]\n\n\nif __name__ == \"__main__\":\n    print(max_positions([2, 3, 4, 2]))\n    print(max_positions([2, 2, 4, 2]))\n    print(max_positions([2, 4, 4, 2]))",
    "def max_index(list):\n    max_val = max(list)\n    return [index for index, val in enumerate(list) if val == max_val]\n\n\nprint(max_index([2, 3, 4, 2, 3, 5, 2, 3, 6, 7, 4, 8, 9, 10, 12, 21, 23, 25]))",
    "def get_max_index(lst):\n    return [i for i, n in enumerate(lst) if n == max(lst)]\n\n\nprint(get_max_index([2, 3, 4, 2, 5, 2, 5, 2, 5, 6]))\nprint(get_max_index([2, 3, 4, 2, 5, 2, 5, 2, 5, 6, 5]))\nprint(get_max_index([2, 3, 4, 2, 5, 2, 5, 2, 5, 6, 7]))",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_index(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    max_num = max(nums)\n    return [i for i, x in enumerate(nums) if x == max_num]\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_index_2(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    max_num = max(nums)\n    result = []\n\n    for i, x in enumerate(nums):\n        if x == max_num:\n            result.append(i)\n\n    return result",
    "def find_max(list_of_numbers):\n    max_value = list_of_numbers[0]\n    index_list = []\n\n    for index, value in enumerate(list_of_numbers):\n        if value > max_value:\n            max_value = value\n            index_list.clear()\n            index_list.append(index)\n        elif value == max_value:\n            index_list.append(index)\n    return index_list\n\n\nlist_of_numbers = [5, 2, 4, 1, 6, 8, 10, 7, 9]\nprint(find_max(list_of_numbers))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}