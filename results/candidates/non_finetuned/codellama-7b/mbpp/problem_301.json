{
  "problem": {
    "task_id": "MBPP/312",
    "prompt": "Write a function to find the volume of a cone.",
    "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
    "test_list": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ],
    "challenge_test_list": [],
    "problem_id": 301
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * radius**2 * height / 3\n\ndef test_cone_volume():\n    assert cone_volume(2, 3) == 10.141631192487347\n\nif __name__ == '__main__':\n    print cone_volume(2, 3)",
    "def find_volume(radius, height):\n    pi = 3.14\n    volume = (1 / 3) * pi * radius * radius * height\n    return volume\n\n\ndef test_find_volume():\n    assert find_volume(1, 1) == 1.09\n    assert find_volume(2, 2) == 18.85\n\nif __name__ == '__main__':\n    print(find_volume(2, 2))",
    "def volume_cone(radius: float, height: float) -> float:\n    \"\"\"Calculates the volume of a cone.\n\n    Args:\n        radius: The radius of the cone.\n        height: The height of the cone.\n\n    Returns:\n        The volume of a cone.\n    \"\"\"\n    return (1 / 3) * height * (math.pi * radius ** 2)",
    "from math import pi\n\n\ndef volume_cone(r, h):\n    return pi * r * r * h / 3\n\n\nprint(volume_cone(1, 1))",
    "def volume(radius, height):\n    pi = 3.14\n    return (pi * radius * radius * height)/3\n\n\nprint(volume(2, 4))",
    "def find_volume(radius, height):\n    \"\"\"\n    >>> find_volume(3, 5)\n    58.3095189523852\n    \"\"\"\n    pi = 3.14\n    return (pi * radius ** 2 * height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_volume_of_cone(radius, height):\n    \"\"\"\n    >>> find_volume_of_cone(1, 2)\n    5.09\n    \"\"\"\n    import math\n    return math.pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_volume(r, h):\n    return (3.14 * r * r * h) / 3\n\ndef test_find_volume():\n    assert find_volume(5, 7) == 302.5\n\nif __name__ == '__main__':\n    print find_volume(5, 7)",
    "def cone_volume(radius, height):\n    \"\"\"\n    radius: the radius of the base of the cone.\n    height: the height of the cone.\n    \"\"\"\n    # Your code here\n    pi = 3.14159\n    volume = (pi * radius**2 * height)/3\n    return volume\n\nif __name__ == '__main__':\n    # Test your code with this first\n    # Change the arguments to try different values\n    print cone_volume(2, 1)\n\n    # After you are satisfied with your results, use input() to prompt the user for values:\n    r = float(input(\"Enter the radius of the cone: \"))\n    h = float(input(\"Enter the height of the cone: \"))\n\n    print \"Volume of the cone: \" + str(cone_volume(r, h))",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(1, 1)\n    1.3333333333333333\n    >>> volume_cone(2, 2)\n    2.0\n    >>> volume_cone(3, 3)\n    3.3333333333333335\n    \"\"\"\n    return 1/3 * height * math.pi * radius**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume_sphere(radius):\n    \"\"\"\n    >>> volume_sphere(1)\n    4.188798764029814\n    >>> volume_sphere(2)\n    33.510321636261085\n    >>> volume_sphere(3)\n    68.80357512775373\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference_circle(radius):\n    \"\"\"\n    >>> circumference_circle(1)\n    6.283185307179586\n    >>> circumference_circle(2)\n    12.566370614359172\n    >>> circumference_circle(3)\n    18.84955592153875\n    \"\"\"\n    return 2 * math.pi * radius\n\n\"\"\"\nWrite a function to find the circumference of a sphere.\n\"\"\"\n\ndef circumference_sphere(radius):\n    \"\"\"\n    >>> circumference_sphere(1)\n    20.000000000000004\n    >>> circumference_sphere(2)\n    60.85787351281612\n    >>> circumference_sphere(3)\n    119.599066654",
    "def cone_volume(radius, height):\n    import math\n\n    return (math.pi * radius**2 * height) / 3\n\n\nprint(cone_volume(2, 6))",
    "def volume(radius: int, height: int) -> float:\n    \"\"\"\n    >>> volume(2, 3)\n    13.195000000000002\n    \"\"\"\n    return (3.14 * radius ** 2 * height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import unittest\n\n\ndef cone_volume(radius, height):\n    \"\"\"\n    >>> cone_volume(2, 3)\n    13.348415468694453\n    >>> cone_volume(2, 2)\n    8.382441662179868\n    >>> cone_volume(1, 1)\n    1.2566370614359172\n    \"\"\"\n    return (height / 3) * (3.14 * (radius ** 2))\n\n\nclass TestConeVolume(unittest.TestCase):\n    def test_cone_volume(self):\n        self.assertEqual(cone_volume(2, 3), 13.348415468694453)\n        self.assertEqual(cone_volume(2, 2), 8.382441662179868)\n        self.assertEqual(cone_volume(1, 1), 1.2566370614359172)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def cone_volume(r: int, h: int) -> float:\n    \"\"\"\n    Return the volume of a cone.\n\n    >>> cone_volume(2, 1)\n    6.283185307179586\n    >>> cone_volume(2, 2)\n    18.84955592153876\n    >>> cone_volume(2, 3)\n    50.26548245743669\n    >>> cone_volume(2, 4)\n    113.09733552923254\n    >>> cone_volume(2, 5)\n    199.52623142857142\n    >>> cone_volume(2, 6)\n    326.0519278762257\n    >>> cone_volume(2, 7)\n    477.4999999999999\n    \"\"\"\n    from math import pi\n\n    return pi * r * r * h / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef cone_volume(r, h):\n    return (math.pi * r**2 * h) / 3\n\nassert (cone_volume(2, 1) == 5.235987755982988)\nassert (cone_volume(2, 2) == 12.566370614359172)",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(1, 2)\n    5.732488587508068\n    \"\"\"\n    import math\n\n    pi = math.pi\n    return (pi * radius * radius * height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def volume_cone(r, h):\n    return (1.0/3) * 3.14 * r * r * h",
    "def cone_volume(radius, height):\n    return 1/3 * math.pi * radius ** 2 * height\n\n\ndef test_case(radius, height, solution, test_func):\n\n    output = test_func(radius, height)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\nradius = 2\nheight = 4\ntest_case(radius, height, 28.26, cone_volume)",
    "def get_cone_volume(radius, height):\n    # radius is in centimeters\n    # height is in centimeters\n    pi = 3.14159\n    return height * pi * radius**2 / 3\n\n# Tests\ndef test(radius, height):\n    print \"A cone with radius =\", radius, \"cm and height =\", height, \"cm has volume\", get_cone_volume(radius, height)\n\n# Output\ntest(1, 1)\ntest(2, 2)\ntest(3, 3)\ntest(10, 10)\ntest(20, 20)\ntest(30, 30)\n\n# Extra Challenge!\n# Write a function to find the volume of a sphere\n\ndef get_sphere_volume(radius):\n    # radius is in centimeters\n    pi = 3.14159\n    return 4/3 * pi * radius**3\n\n# Tests\ndef test(radius):\n    print \"A sphere with radius =\", radius, \"cm has volume\", get_sphere_volume(radius)\n\n# Output\ntest(1)\ntest(2)\ntest(3)\ntest(10)\ntest(20)\ntest(30)",
    "def cone_volume(radius, height):\n    \"\"\"\n    >>> cone_volume(2, 3)\n    13.1957899725373\n    >>> cone_volume(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be 0\n    >>> cone_volume(-1, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be negative\n    >>> cone_volume(1, -2)\n    Traceback (most recent call last):\n        ...\n    ValueError: height cannot be negative\n    \"\"\"\n    if radius == 0:\n        raise ValueError(\"radius cannot be 0\")\n    if radius < 0:\n        raise ValueError(\"radius cannot be negative\")\n    if height < 0:\n        raise ValueError(\"height cannot be negative\")\n    pi = 3.14\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_volume(radius, height):\n    return 1.0/3 * math.pi * radius * radius * height\n\nif __name__ == '__main__':\n    import math\n    radius = 2\n    height = 3\n    print(find_volume(radius, height))",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(2, 3)\n    13.322670628054694\n    >>> volume_cone(2, 3) != volume_cone(2, 4)\n    True\n    \"\"\"\n    from math import pi\n\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def volume_cone(r, h):\n    \"\"\"\n    >>> volume_cone(2, 2)\n    8.796053578609428\n    >>> volume_cone(1, 1)\n    3.141592653589793\n    \"\"\"\n    import math\n    return math.pi * r * r * h / 3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from math import pi\n\ndef cone_volume(radius, height):\n    return pi * radius**2 * height / 3\n\ndef test_cone_volume():\n    assert cone_volume(2, 4) == 39.432\n    assert cone_volume(2, 5) == 50.265",
    "from math import pi\n\ndef volume_cone(r, h):\n    return pi * r * r * h / 3",
    "def get_volume(radius, height):\n    return 1/3 * math.pi * radius ** 2 * height",
    "import math\n\ndef get_cone_volume(radius, height):\n    return math.pi * radius ** 2 * height / 3\n\nprint(get_cone_volume(2, 10))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\nimport math\n\ndef get_area_of_triangle(side1, side2, side3):\n    s = (side1 + side2 + side3) / 2\n    return math.sqrt(s * (s - side1) * (s - side2) * (s - side3))\n\nprint(get_area_of_triangle(3, 4, 5))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\nimport math\n\ndef get_area_of_trapezoid(base1, base2, height):\n    return (base1 + base2) / 2 * height\n\nprint(get_area_of_trapezoid(3, 4, 5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\nimport math\n\ndef get_area_of_circle(radius):\n    return math.pi * radius ** 2\n\nprint(get_area_of_circle(5))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\nimport math\n\ndef get_circumference_of_circle(radius):\n    return 2 * math.pi * radius\n\nprint(get_circumference_of_circle(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\n\ndef get_area_of_rectangle(length, width):\n    return length * width\n\nprint(get_area_of_rectangle(5, 5))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\nimport math\n\ndef get_circumference_of_circle(radius):\n    return 2 * math.pi * radius\n\nprint(get_circumference_of_circle(5))\n\n\"\"\"\nWrite a function to find the circumference of a",
    "def find_volume(radius, height):\n    \"\"\"\n    Find the volume of a cone.\n\n    Parameters:\n        radius: radius of a cone.\n        height: height of a cone.\n    Returns:\n        volume: volume of a cone.\n    \"\"\"\n    volume = 1 / 3 * math.pi * radius ** 2 * height\n    return volume",
    "import math\n\ndef volume_cone(r, h):\n    return math.pi * r * r * h / 3\n\nr, h = map(float, input().split())\nprint(volume_cone(r, h))",
    "def volume_cone(r, h):\n    \"\"\"\n    >>> volume_cone(1, 1)\n    1.332\n    >>> volume_cone(1, 2)\n    3.535\n    >>> volume_cone(2, 1)\n    3.142\n    >>> volume_cone(1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Cone cannot have a height of 0.\n    \"\"\"\n    if h == 0:\n        raise ValueError(\"Cone cannot have a height of 0.\")\n    return h * 3.14 * r ** 2 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_volume(r, h):\n    return (3.14 * r * r * h) / 3\n\n\ndef test_find_volume():\n    assert find_volume(1, 1) == 1\n    assert find_volume(2, 2) == 16\n    assert find_volume(1, 3) == 10\n    assert find_volume(2, 4) == 32",
    "def cone_volume(radius, height):\n    pi = 3.14159\n    return pi * radius ** 2 * height / 3\n\nprint(cone_volume(2, 10))\nprint(cone_volume(2, 10))",
    "from math import pi\n\ndef find_volume(r, h):\n    return (pi * r * r * h) / 3\n\nassert find_volume(2, 1) == 5.236\nassert find_volume(1, 2) == 1.097\nassert find_volume(10, 10) == 295.4\n\nprint(\"OK\")",
    "def volume_cone(r, h):\n    \"\"\"\n    r: radius of the cone\n    h: height of the cone\n    \"\"\"\n    return (3.14 * r * r * h) / 3",
    "def find_volume(radius, height):\n    \"\"\"\n    Find the volume of a cone.\n\n    Args:\n    \n        radius: The radius of the cone in meters.\n\n        height: The height of the cone in meters.\n\n    Returns:\n        \n        The volume of the cone in cubic meters.\n    \"\"\"\n\n    return (height * (3.14 * radius * radius)) / 3\n\n\nif __name__ == '__main__':\n    print(find_volume(3, 4))\n    print(find_volume(3, 5))\n    print(find_volume(5, 4))",
    "import math\n\n\ndef volume_cone(r, h):\n    return math.pi * r ** 2 * h / 3\n\n\ndef main():\n    print(volume_cone(3, 7))\n    print(volume_cone(1, 1))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef volume_cone(radius, height):\n    return math.pi * radius ** 2 * height / 3\n\n\nif __name__ == '__main__':\n    r = float(input('Enter radius: '))\n    h = float(input('Enter height: '))\n    print(volume_cone(r, h))",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(2, 4)\n    31.41592653589793\n    \"\"\"\n    import math\n    return math.pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def get_volume(radius, height):\n    \"\"\"\n    >>> get_volume(2, 3)\n    13.19\n    \"\"\"\n    return height * 3.14 * radius * radius / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(2, 3)\n    13.19\n    \"\"\"\n    from math import pi\n    return pi * radius * radius * height / 3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Finds the volume of a cone.\n    \"\"\"\n    return math.pi * radius**2 * height / 3\n\nprint(volume_cone(1, 1))",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(10, 15)\n    216.0656012903225\n    \"\"\"\n    pi = 3.14\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def volume_cone(r: float, h: float) -> float:\n    \"\"\"\n    >>> volume_cone(1, 1)\n    0.7854\n    \"\"\"\n    return (3.14 * r * r * h) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_volume(radius, height):\n    \"\"\"Finds the volume of a cone.\n\n    Args:\n        radius (float): The radius of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (3.14159 * radius**2 * height) / 3",
    "def cone_volume(r, h):\n    \"\"\"\n    r: radius of the cone\n    h: height of the cone\n    \"\"\"\n    return 1/3 * math.pi * r**2 * h",
    "def cone_volume(r, h):\n    \"\"\"\n    r: radius of cone\n    h: height of cone\n    \"\"\"\n    return (3.14 * r ** 2 * h) / 3\n\nprint(cone_volume(1, 2))",
    "def find_cone_volume(radius, height):\n    return 1/3 * 3.14 * radius * radius * height\n\n\nif __name__ == '__main__':\n    assert find_cone_volume(2, 1) == 1.1309734536277555",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(3, 5)\n    58.30951\n    \"\"\"\n    pi = 3.14159\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef volume(radius, height):\n    return (math.pi * radius ** 2 * height) / 3\n\n\nprint(volume(3, 4))",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(5, 7)\n    91.389\n    >>> volume(3, 4)\n    50.265\n    \"\"\"\n    import math\n    return math.pi * radius * radius * height / 3\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def volume_cone(radius, height):\n    pi = 3.14159\n    return (1 / 3) * pi * radius ** 2 * height",
    "def volume_cone(radius, height):\n    \"\"\"\n    radius: radius of the base of the cone\n    height: height of the cone\n\n    return: volume of a cone\n    \"\"\"\n    return math.pi * radius**2 * height / 3\n\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume_sphere(radius):\n    \"\"\"\n    radius: radius of the sphere\n\n    return: volume of a sphere\n    \"\"\"\n    return 4 * math.pi * radius**3 / 3\n\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef volume_hemisphere(radius):\n    \"\"\"\n    radius: radius of the hemisphere\n\n    return: volume of a hemisphere\n    \"\"\"\n    return 2 * math.pi * radius**2 * radius / 3\n\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    radius: radius of the cylinder\n    height: height of the cylinder\n\n    return: volume of a cylinder\n    \"\"\"\n    return math.pi * radius**2 * height\n\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\n\ndef volume_pyramid(length, width, height):\n    \"\"\"\n    length: length of the base of the pyramid\n    width: width of the base of the pyramid\n    height: height of the pyramid\n\n    return: volume of a pyramid\n    \"\"\"\n    return length * width * height / 6\n\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef volume_cone(radius, height):\n    \"\"\"\n    radius: radius of the base of the cone\n    height: height of the cone\n\n    return: volume of a cone\n    \"\"\"\n    return math.pi * radius**2 * height / 3",
    "def volume_cone(radius, height):\n    return (3.14 * (radius ** 2) * height) / 3\n\n\ndef main():\n    print(volume_cone(5, 10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def volume(radius, height):\n    return (3.14 * radius ** 2 * height) / 3",
    "def cone_volume(radius: int, height: int) -> float:\n    \"\"\"Return the volume of a cone.\"\"\"\n    from math import pi\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    print(cone_volume(5, 10))",
    "from __future__ import division\n\ndef cone_volume(radius, height):\n    \"\"\"\n    >>> cone_volume(5, 10)\n    703.125\n    \"\"\"\n    return pi * radius**2 * height / 3",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(10, 20)\n    628.3185307179586\n    >>> volume_cone(0, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be zero\n    \"\"\"\n    if not radius:\n        raise ValueError(\"radius cannot be zero\")\n    pi = 3.14\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(10, 20)\n    628.3185307179586\n    \"\"\"\n    return math.pi * radius * radius * height / 3\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def volume(radius, height):\n    \"\"\"\n    >>> volume(1, 1)\n    3.141592653589793\n    >>> volume(1, 2)\n    12.566370614359172\n    \"\"\"\n    import math\n    return math.pi * radius * radius * height / 3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from math import pi\n\ndef volume_cone(radius, height):\n    return pi * radius * radius * height / 3\n\nradius, height = [int(x) for x in input().split()]\nprint(volume_cone(radius, height))",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(2, 3)\n    13.19\n    \"\"\"\n    import math\n\n    return math.pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef cone_volume(r, h):\n    return math.pi * r**2 * h / 3\n\nprint(cone_volume(5, 7))",
    "import math\n\n\ndef volume_cone(radius, height):\n    return math.pi * (radius ** 2) * height / 3",
    "def cone_volume(radius, height):\n    return 1/3 * math.pi * radius * radius * height\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circle_area(radius):\n    return math.pi * radius * radius\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length * width\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef triangle_area(base, height):\n    return 1/2 * base * height\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(base1, base2, height):\n    return 1/2 * (base1 + base2) * height\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\n\ndef rhombus_area(diagonal1, diagonal2):\n    return 1/2 * diagonal1 * diagonal2\n\n\"\"\"\nWrite a function to find the area of a regular hexagon.\n\"\"\"\n\ndef hexagon_area(side):\n    return 3 * math.sqrt(3) / 2 * side * side\n\n\"\"\"\nWrite a function to find the area of a regular octagon.\n\"\"\"\n\ndef octagon_area(side):\n    return 2 * math.sqrt(2) * side * side\n\n\"\"\"\nWrite a function to find the area of a regular dodecagon.\n\"\"\"\n\ndef dodecagon_area(side):\n    return math.sqrt(3) * math.sqrt(2) * side * side\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\n\ndef square_area(side):\n    return side * side\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\n\ndef kite_area(base, height):",
    "def find_volume(radius, height):\n    return 1/3 * math.pi * radius ** 2 * height",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(5, 10)\n    78.5398\n    \"\"\"\n    return (3.14 * (radius ** 2) * height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef volume_cone(radius, height):\n    return math.pi * radius ** 2 * height / 3\n\n\nif __name__ == '__main__':\n    radius = float(input('Radius: '))\n    height = float(input('Height: '))\n\n    print('Volume: {}'.format(volume_cone(radius, height)))",
    "from math import pi\n\n\ndef find_volume(radius, height):\n    return pi * height * (radius ** 2) / 3",
    "import math\n\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n    \"\"\"\n    return math.pi * radius ** 2 * height / 3\n\n\ndef main():\n    \"\"\"\n    Print the volume of a cone.\n    \"\"\"\n    print(volume_cone(1, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def get_volume(radius, height):\n    return 1.0 / 3 * math.pi * radius ** 2 * height",
    "def volume(radius: int, height: int) -> int:\n    \"\"\"\n    >>> volume(10, 15)\n    2100\n    \"\"\"\n    import math\n\n    return math.pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def cone_volume(radius, height):\n    return 1.0 / 3.0 * math.pi * radius ** 2 * height\n\n\nif __name__ == '__main__':\n    import math\n    print(cone_volume(2, 3))",
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * radius ** 2 * height / 3\n\n\nassert cone_volume(2, 1) == 10.175551665051578, \"Should be 10.175551665051578\"\nassert cone_volume(1, 4) == 4.729786231147065, \"Should be 4.729786231147065\"\nassert cone_volume(1, 0) == 0, \"Should be 0\"",
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * (radius ** 2) * (height / 3)",
    "def cone_volume(r, h):\n    # r is the radius, h is the height of the cone.\n    pi = 3.14159\n    return (1 / 3) * pi * r * r * h\n\nassert(cone_volume(5, 10) == 156.08)",
    "import math\n\ndef cone_volume(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nprint(cone_volume(3, 5))\n\n\"\"\"\nThe volume of a cone is defined as:\n\nV = (1/3) * pi * r^2 * h\n\nwhere r is the radius of the base of the cone, and h is the height.\n\nYour code does not need to follow this formula exactly, it can use any formula you like,\nas long as the results are close to the correct value.\n\nThe volume should be returned as a float (not a string).\n\nThe formula you use to calculate volume can follow this order of operations:\n\nMultiplication and division\nAddition and subtraction\n\nFor example, if you would like to use the formula V = (1/3) * r^2 * h,\nyour code could look like this:\n\ndef cone_volume(radius, height):\n    return (1/3) * radius**2 * height\n\n\"\"\"",
    "def volume_cone(radius, height):\n    \"\"\"\n    radius: the radius of the base of the cone.\n    height: the height of the cone.\n    \"\"\"\n    return (1/3)*math.pi*radius**2*height",
    "import math\n\ndef volume_cone(r, h):\n    return math.pi * r * r * h / 3\n\nassert volume_cone(1, 1) == 1\nassert volume_cone(2, 2) == 16\nassert volume_cone(3, 3) == 33.460906683447265",
    "import math\n\ndef volume_cone(radius, height):\n    return math.pi * radius * radius * height / 3.0",
    "def volume_cone(radius, height):\n    return (3.14 * radius ** 2 * height) / 3",
    "def find_volume(r, h):\n    pi = 3.14\n    volume = (1/3) * pi * r ** 2 * h\n    return volume",
    "def volume_cone(radius, height):\n    \"\"\"Calculate the volume of a cone.\n\n    >>> volume_cone(1, 1)\n    1.332\n    >>> volume_cone(1, 2)\n    3.597\n    \"\"\"\n    pi = 3.141592653589793\n    return pi * height * radius * radius / 3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def get_volume(radius, height):\n    \"\"\"Returns the volume of a cone.\"\"\"\n    import math\n    return math.pi * radius ** 2 * height / 3",
    "def cone_volume(radius, height):\n    \"\"\"\n    Volume of a cone is pi * r * h ** 2 / 3.\n    \"\"\"\n    return round(3.14 * radius * radius * height / 3.0, 2)\n\n\ndef test_cone_volume():\n    assert cone_volume(1, 1) == 1.33\n    assert cone_volume(2, 2) == 18.84\n    assert cone_volume(3, 3) == 50.26\n    assert cone_volume(4, 4) == 113.04\n\n\nif __name__ == '__main__':\n    test_cone_volume()",
    "def volume_cone(r, h):\n    return (3.14 * r ** 2 * h) / 3",
    "def volume_cone(r, h):\n    return (3.14 * r ** 2 * h) / 3",
    "def volume_cone(radius, height):\n    pi = 3.14\n    return (pi * (radius ** 2) * height) / 3\n\n\nprint(volume_cone(3, 5))",
    "def volume_cone(radius: float, height: float) -> float:\n    \"\"\"\n    >>> volume_cone(2, 4)\n    10.991238402367075\n    \"\"\"\n\n    pi = 3.141592653589793\n\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(1, 2)\n    3.141592653589793\n    \"\"\"\n    from math import pi\n    return pi * radius ** 2 * height / 3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def cone_volume(r, h):\n    return 1/3 * 3.14 * r**2 * h\n\nif __name__ == '__main__':\n    print(cone_volume(5, 7))",
    "def cone_volume(radius, height):\n    \"\"\"\n    >>> cone_volume(5, 10)\n    523.5987755982989\n    \"\"\"\n    return (height * 3.14 * radius ** 2) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(1, 2)\n    6.283185307179586\n    \"\"\"\n    import math\n\n    pi = math.pi\n    return pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def cone_volume(radius, height):\n    return 1.0 / 3 * height * (radius ** 2) * math.pi\n\n\ndef test_cone_volume():\n    assert cone_volume(2, 3) == 15.339822366010524\n\n\nif __name__ == '__main__':\n    print cone_volume(2, 3)",
    "from math import pi\n\n\ndef find_volume(radius, height):\n    \"\"\"\n    >>> find_volume(1, 1)\n    1.3320000000000001\n    >>> find_volume(1, 2)\n    3.9819999999999995\n    >>> find_volume(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius and height must be non-negative.\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"radius and height must be non-negative.\")\n    return pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import pi\n\ndef get_volume_cone(radius, height):\n    return pi * radius * radius * height / 3",
    "def volume(r, h):\n    return (1/3) * (r ** 2) * h\n\ndef main():\n    print(volume(2, 3))\n\nif __name__ == '__main__':\n    main()",
    "def volume(radius, height):\n    return 1.0/3 * math.pi * radius**2 * height",
    "from typing import List, Tuple\n\n\ndef volume_cone(radius: int, height: int) -> float:\n    \"\"\"Find the volume of a cone.\n\n    :param radius: The radius of the cone.\n    :param height: The height of the cone.\n    :return: The volume of the cone.\n    \"\"\"\n    return (1 / 3) * height * pow(radius, 2) * pi\n\n\nif __name__ == \"__main__\":\n    import unittest\n\n    from math import pi\n\n    class TestCone(unittest.TestCase):\n        \"\"\"Test cases for volume_cone.\"\"\"\n\n        data: List[Tuple[int, int, float]] = [\n            (1, 1, 1),\n            (1, 2, 2),\n            (2, 2, 8),\n        ]\n\n        def test_volume_cone(self):\n            for test_radius, test_height, expected in self.data:\n                self.assertAlmostEqual(\n                    volume_cone(test_radius, test_height), expected\n                )\n\n    unittest.main()",
    "def find_volume(radius, height):\n    \"\"\"\n    Find the volume of a cone.\n    >>> find_volume(2, 3)\n    28.274333882308138\n    >>> find_volume(1, 1)\n    3.1369862993103466\n    >>> find_volume(1, 2)\n    12.566370614359172\n    \"\"\"\n    from math import pi\n    return pi * radius * radius * height / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def cone_volume(radius, height):\n    \"\"\"\n    >>> cone_volume(2, 5)\n    10.103897763549676\n    >>> cone_volume(2, 5) == cone_volume(2, 5)\n    True\n    \"\"\"\n    return (3.14 * radius**2 * height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}