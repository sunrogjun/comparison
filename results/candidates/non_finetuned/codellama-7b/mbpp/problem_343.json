{
  "problem": {
    "task_id": "MBPP/354",
    "prompt": "Write a function to find t-nth term of arithemetic progression.",
    "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
    "test_list": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ],
    "challenge_test_list": [],
    "problem_id": 343
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_t_n_term(a, d, t):\n    return a + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_t_n_term(3, 5, 11))",
    "def nth_term(a, d, n):\n    \"\"\"\n    a: first term\n    d: common difference\n    n: nth term\n    return: nth term\n    \"\"\"\n    return a + (n-1)*d\n\nprint(nth_term(1, 1, 5))",
    "def find_term(n, a, r):\n    \"\"\"\n    n: int\n    a: int\n    r: int\n    return: int\n    \"\"\"\n    return a + (n - 1) * r\n\n\nprint(find_term(5, 5, 2))",
    "def nth_term_of_ap(a1, d, n):\n    return a1 + (n - 1) * d\n\n\nprint(nth_term_of_ap(2, 3, 10))",
    "def arithemetic_sequence(a1, d, n):\n    if n == 1:\n        return a1\n    return arithemetic_sequence(a1, d, n - 1) + d\n\n\nprint(arithemetic_sequence(2, 3, 10))",
    "def find_nth_term(a, d, n):\n    return a + (n - 1) * d\n\n\ndef main():\n    a = int(input(\"Enter first term of Arithmetic Progression: \"))\n    d = int(input(\"Enter the common difference of Arithmetic Progression: \"))\n    n = int(input(\"Enter the nth term of Arithmetic Progression: \"))\n    print(f\"{n}th term of Arithmetic Progression is: {find_nth_term(a, d, n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef find_t_n(a: int, r: int, n: int) -> int:\n    \"\"\"Returns t-nth term of arithemetic progression.\n\n    Args:\n        a (int): Starting number.\n        r (int): Difference.\n        n (int): Term number.\n\n    Examples:\n        >>> find_t_n(1, 2, 1)\n        1\n        >>> find_t_n(1, 2, 2)\n        3\n        >>> find_t_n(1, 2, 3)\n        5\n    \"\"\"\n    return a + (n - 1) * r\n\n\nif __name__ == \"__main__\":\n    print(find_t_n(1, 2, 1))\n    print(find_t_n(1, 2, 2))\n    print(find_t_n(1, 2, 3))",
    "\"\"\"Question:\nWrite a function to find t-nth term of arithemetic progression.\nExample:\nInput:\nap(1, 1, 1)  # ap(a1, an, d)\nOutput: 1\nInput:\nap(1, 5, 1)  # ap(a1, an, d)\nOutput: 5\n\"\"\"\n\nclass Solution(object):\n    def ap(self, a1, an, d):\n        \"\"\"\n        :type a1: int\n        :type an: int\n        :type d: int\n        :rtype: int\n        \"\"\"\n        return (an-a1) * (d-1)//(d+1) + a1\n        \n        ### Practical Method\n        if a1==an or d==1:\n            return an\n        return (an-a1) * (d-1)//(d+1) + a1",
    "def ap(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(ap(1, 1, 10))",
    "from typing import Union\n\n\ndef ap(a: int, d: int, n: int) -> Union[int, float]:\n    \"\"\"\n    Returns nth term of arithemetic progression.\n\n    >>> ap(1, 1, 1)\n    1\n    >>> ap(1, 1, 2)\n    2\n    >>> ap(1, 1, 3)\n    3\n    >>> ap(1, 1, 4)\n    4\n    >>> ap(1, 1, 5)\n    5\n    >>> ap(1, 1, 6)\n    6\n    >>> ap(1, 1, 7)\n    7\n    >>> ap(1, 1, 8)\n    8\n    >>> ap(1, 1, 9)\n    9\n    >>> ap(1, 1, 10)\n    10\n    >>> ap(1, 1, 11)\n    11\n    >>> ap(1, 1, 12)\n    12\n    >>> ap(1, 1, 13)\n    13\n    >>> ap(1, 1, 14)\n    14\n    >>> ap(1, 1, 15)\n    15\n    >>> ap(1, 1, 16)\n    16\n    >>> ap(1, 1, 17)\n    17\n    >>> ap(1, 1, 18)\n    18\n    >>> ap(1, 1, 19)\n    19\n    >>> ap(1, 1, 20)\n    20\n    >>> ap(1, 1, 21)\n    21\n    >>> ap(1, 1, 22)\n    22\n    >>> ap(1, 1, 23)\n    23\n    >>> ap(1, 1, 24)\n    24\n    >>> ap(1, 1, 25)\n    25\n    >>> ap(1, 1, 26)\n    26\n    >>> ap(1, 1, 27)",
    "def find_t_nth_term(a, d, t):\n    return (t * d - (t - 1) * a) / 2\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the starting number: \"))\n    d = int(input(\"Enter the common difference: \"))\n    t = int(input(\"Enter the term: \"))\n    print(f\"The {t}th term is {find_t_nth_term(a, d, t)}\")",
    "from typing import Optional\n\n\ndef nth_term_arithemetic_progression(\n    first_term: int,\n    common_difference: int,\n    t_nth_term: int,\n) -> Optional[int]:\n    \"\"\"\n    Calculate nth term of Arithmetic Progression.\n    >>> nth_term_arithemetic_progression(1, 1, 10)\n    55\n    \"\"\"\n    if t_nth_term == 1:\n        return first_term\n\n    if common_difference == 0:\n        return None\n\n    return first_term + (t_nth_term - 1) * common_difference\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import Optional\n\n\ndef ariprog_term(\n    a_0: int, d: int, t: int, return_type: str = \"term\"\n) -> Optional[int]:\n    \"\"\"\n    :param a_0: first term\n    :param d: common difference\n    :param t: t-nth term of arithemetic progression\n    :param return_type: type of return, term or sum, defaults to \"term\"\n    :return: t-nth term of arithemetic progression\n    \"\"\"\n    if t == 1:\n        return a_0\n    return (a_0 + (t - 1) * d) if return_type == \"term\" else (a_0 + (t - 1) * d) + (t - 2) * d\n\n\nif __name__ == \"__main__\":\n    assert ariprog_term(3, 1, 5) == 8\n    assert ariprog_term(3, 1, 5, return_type=\"sum\") == 12\n    assert ariprog_term(3, 1, 5, return_type=\"term\") == 11\n    assert ariprog_term(3, 1, 5, return_type=\"sum\") == 12\n    assert ariprog_term(3, 1, 5, return_type=\"term\") == 11\n    assert ariprog_term(3, 1, 5, return_type=\"sum\") == 12\n    assert ariprog_term(3, 1, 5, return_type=\"term\") == 11\n    assert ariprog_term(3, 1, 5, return_type=\"sum\") == 12",
    "def find_term(t, a_0, d):\n    return a_0 + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_term(5, 1, 2))",
    "def arithemetic_progression(a, d, n):\n    return a + (n-1) * d\n\n\nprint(arithemetic_progression(3, 1, 10))\nprint(arithemetic_progression(1, 2, 10))",
    "def ap(n, a1, d):\n    if n == 1:\n        return a1\n    return ap(n - 1, a1 + d, d)\n\n\nprint(ap(10, 10, 2))",
    "def arithemetic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(arithemetic_progression(1, 2, 100))",
    "def arithemetic_progression(n, a1, d):\n    \"\"\"\n    Takes in three arguments, first is nth term, second is the first number\n    and third is the difference.\n    Returns nth term of arithmetic progression.\n    \"\"\"\n    return a1 + (n - 1) * d",
    "def nth_term_ap(a1, d, n):\n    return a1 + (n - 1) * d\n\n\ndef test_ap():\n    assert nth_term_ap(1, 2, 3) == 5\n\n\nif __name__ == \"__main__\":\n    test_ap()",
    "def find_t_nth_term(a, d, t):\n    return a + (t - 1) * d\n\n\ndef main():\n    a, d, t = [int(i) for i in input().split()]\n    print(find_t_nth_term(a, d, t))\n\n\nif __name__ == '__main__':\n    main()",
    "from math import floor\n\n\ndef find_t_n_term(t, n, a1):\n    \"\"\"\n    :param t: int, nth term\n    :param n: int, number of terms\n    :param a1: int, first term\n    :return: int, t-nth term of arithemetic progression\n    \"\"\"\n    if n == 1:\n        return a1\n\n    if t == a1:\n        return a1\n\n    d = (t - a1) / n\n    return floor(t - d)",
    "def find_term(n, a1, d):\n    return a1 + (n-1)*d\n\nn = int(input())\na1 = int(input())\nd = int(input())\n\nprint(find_term(n, a1, d))",
    "def ap_nth_term(a1, d, n):\n    return (a1 + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    a1, d, n = map(int, input().split())\n    print(ap_nth_term(a1, d, n))",
    "def arithemtic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\nprint(arithemtic_progression(1, 1, 10))",
    "def ap(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(ap(1, 1, 100))",
    "def find_t_nth(t, a_1, d):\n    return a_1 + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    a_1 = int(input(\"Enter the first term of arithemetic progression: \"))\n    d = int(input(\"Enter the common difference of arithemetic progression: \"))\n    t = int(input(\"Enter the t-nth term of arithemetic progression: \"))\n    print(f\"The {t}-nth term of arithemetic progression is:\",\n          find_t_nth(t, a_1, d))",
    "from math import sqrt\nfrom typing import TypeVar\n\n_T1 = TypeVar(\"_T1\")\n\n\ndef arithemetic_progression(\n    sequence: list[_T1], term: int\n) -> tuple[_T1, int, int, int]:\n    \"\"\"\n\n    :param sequence: list of numbers\n    :param term: t-nth term\n    :return: tuple of first number, step, length and t-nth term\n\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 5)\n    (1, 1, 5, 5)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 1)\n    (1, 1, 5, 1)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 10)\n    (1, 1, 5, 10)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 0)\n    (1, 1, 5, 0)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], -5)\n    (1, 1, 5, -5)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 3)\n    (1, 2, 5, 3)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 4)\n    (1, 3, 5, 4)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 2)\n    (1, 2, 5, 2)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 6)\n    (1, 2, 5, 6)\n    >>> arithemetic_progression([1, 2, 3, 4, 5], 7)",
    "from typing import Any\n\n\ndef arithemtic_progression(n: int, a1: int, d: int) -> Any:\n    \"\"\"\n    Return nth term of arithemetic progression.\n    >>> arithemtic_progression(1, 1, 1)\n    1\n    >>> arithemtic_progression(5, 1, 1)\n    5\n    >>> arithemtic_progression(1, 1, 2)\n    3\n    >>> arithemtic_progression(5, 1, 2)\n    17\n    >>> arithemtic_progression(1, 1, 0.5)\n    1.0\n    >>> arithemtic_progression(5, 1, 0.5)\n    5.75\n    >>> arithemtic_progression(1, -1, 2)\n    -1\n    >>> arithemtic_progression(5, -1, 2)\n    -39\n    >>> arithemtic_progression(1, -1, 0.5)\n    -0.5\n    >>> arithemtic_progression(5, -1, 0.5)\n    -2.25\n    \"\"\"\n    return a1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def arithemetic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\ndef test_arithmetic_progression():\n    assert arithemetic_progression(1, 2, 1) == 1\n    assert arithemetic_progression(1, 2, 2) == 3\n    assert arithemetic_progression(1, 2, 3) == 5\n    assert arithemetic_progression(1, 2, 4) == 7\n    assert arithemetic_progression(1, 2, 5) == 9",
    "from typing import Any, Iterable, Iterator\n\n\ndef arithemetic_progression(n: int, a_0: int) -> Iterator[int]:\n    \"\"\"\n    Args:\n        n: number of terms in the sequence\n        a_0: first term of the sequence\n    Yields:\n        nth term of arithemetic progression\n    \"\"\"\n    return (a_0 + x for x in range(n))\n\n\nif __name__ == \"__main__\":\n    assert list(arithemetic_progression(10, 1)) == list(range(1, 10 + 1))\n    assert list(arithemetic_progression(5, 1)) == list(range(1, 5 + 1))",
    "def arithemetic_progression(n, a1, d):\n    return a1 + (n - 1) * d\n\n\nprint(arithemetic_progression(10, 1, 1))",
    "def arithemtic_progression(n,a1,d):\n    return a1+(n-1)*d\n\n\nprint(arithemtic_progression(5,5,2))",
    "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef nth_term_ap(a1, r, n):\n    if n == 1:\n        return a1\n    return a1 + (n - 1) * r\n\n\nif __name__ == '__main__':\n    print(nth_term_ap(2, 3, 10))",
    "def arithemetic_progression(n, a1, d):\n    return a1 + d * (n - 1)\n\nn = 2\na1 = 1\nd = 2\nprint(arithemetic_progression(n, a1, d))",
    "def arithemetic_progression(n, a_1, d):\n    return a_1 + (n - 1) * d\n\n\ndef test_arithemetic_progression():\n    assert arithemetic_progression(3, 1, 2) == 5\n    assert arithemetic_progression(5, 1, 2) == 9\n    assert arithemetic_progression(6, 1, 2) == 11\n    assert arithemetic_progression(7, 1, 2) == 13\n\n\nif __name__ == \"__main__\":\n    test_arithemetic_progression()",
    "def find_term(a, d, n):\n    return a + (n - 1) * d\n\n\nassert find_term(1, 1, 10) == 10",
    "def arithemetic_progression(n, a1, d):\n    return a1 + (n - 1) * d\n\n\ndef test_arithemetic_progression():\n    \"\"\"Test arithemetic_progression\"\"\"\n    assert arithemetic_progression(1, 1, 1) == 1\n    assert arithemetic_progression(2, 1, 1) == 2\n    assert arithemetic_progression(3, 1, 1) == 3\n    assert arithemetic_progression(4, 1, 1) == 4\n    assert arithemetic_progression(5, 1, 1) == 5\n    assert arithemetic_progression(6, 1, 1) == 6\n    assert arithemetic_progression(7, 1, 1) == 7\n    assert arithemetic_progression(8, 1, 1) == 8\n    assert arithemetic_progression(9, 1, 1) == 9\n    assert arithemetic_progression(10, 1, 1) == 10\n    assert arithemetic_progression(11, 1, 1) == 11\n    assert arithemetic_progression(12, 1, 1) == 12\n    assert arithemetic_progression(13, 1, 1) == 13\n    assert arithemetic_progression(14, 1, 1) == 14\n    assert arithemetic_progression(15, 1, 1) == 15\n    assert arithemetic_progression(16, 1, 1) == 16\n    assert arithemetic_progression(17, 1, 1) == 17\n    assert arithemetic_progression(18, 1, 1) == 18\n    assert arithemetic_progression(19, 1, 1) == 19\n    assert arithemetic_progression(20, 1",
    "def find_term(a: int, d: int, n: int) -> int:\n    \"\"\"\n    Return the n-th term of an arithmetic progression.\n    >>> find_term(1, 3, 5)\n    15\n    >>> find_term(1, 1, 2)\n    2\n    >>> find_term(1, 1, 1)\n    1\n    >>> find_term(1, 1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: T-n has to be a positive integer.\n    >>> find_term(1, 2, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: T-n has to be a positive integer.\n    >>> find_term(1, 1, 3.4)\n    Traceback (most recent call last):\n        ...\n    ValueError: T-n has to be a positive integer.\n    >>> find_term(1, 1, 1.0)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"T-n has to be a positive integer.\")\n    if n == 0:\n        return a\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\nfrom typing import List\n\n\ndef is_square(n: int) -> bool:\n    \"\"\"Check if number is a square.\n\n    Args:\n        n (int): number\n\n    Returns:\n        bool: is number a square\n    \"\"\"\n    return int(sqrt(n)) ** 2 == n\n\n\ndef arithemtic_progression_nth(n: int) -> int:\n    \"\"\"Find t-nth term of arithemetic progression.\n\n    Args:\n        n (int): t-nth term\n\n    Returns:\n        int: t-nth term\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2 * (1 - (n // 2))\n    if is_square(n):\n        return int(sqrt(n)) * 2\n    return 1 + 4 * (n - 1)\n\n\ndef arithemtic_progression_nth_recursive(n: int) -> int:\n    \"\"\"Find t-nth term of arithemetic progression.\n\n    Args:\n        n (int): t-nth term\n\n    Returns:\n        int: t-nth term\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2 * (1 - (n // 2))\n    if is_square(n):\n        return int(sqrt(n)) * 2\n    return 1 + 4 * (n - 1)\n\n\ndef arithemtic_progression_nth_memo(n: int, memo: List[int]) -> int:\n    \"\"\"Find t-nth term of arithemetic progression.\n\n    Args:\n        n (int): t-nth term\n\n    Returns:\n        int: t-nth term\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 ==",
    "def find_term(a, d, n):\n    return a + (n-1)*d\n\n\ndef test_find_term():\n    assert find_term(0, 1, 5) == 4\n    assert find_term(10, 2, 5) == 16",
    "def arithemtic_sequence(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert arithemtic_sequence(10, 2, 100) == 1000\n    assert arithemtic_sequence(10, 2, 50) == 1000",
    "def nth_term(n, a1, d):\n    return a1 + (n - 1) * d\n\n\nassert nth_term(2, 10, 2) == 12\nassert nth_term(11, 10, 2) == 110\nassert nth_term(3, 10, 2) == 12",
    "def arithemtic_prog(n, a_1, r):\n    return a_1 + (n - 1) * r\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a_1 = int(input())\n    r = int(input())\n\n    print(arithemtic_prog(n, a_1, r))",
    "def find_arithmetic_sequence(n, a1, d):\n    return a1 + d * (n - 1)\n\n\ndef main():\n    n = int(input(\"Enter the term of arithmetic progression: \"))\n    a1 = int(input(\"Enter the first term of arithmetic progression: \"))\n    d = int(input(\"Enter the common difference of arithmetic progression: \"))\n\n    print(f\"The {n}th term of arithmetic progression is {find_arithmetic_sequence(n, a1, d)}\")\n\n\nif __name__ == '__main__':\n    main()",
    "def ap_term(n, a1, d):\n    return a1 + (n - 1) * d\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    a1 = int(input(\"Enter first term: \"))\n    d = int(input(\"Enter common difference: \"))\n    print(\"The t-nth term is:\", ap_term(n, a1, d))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithemetic_progression(n: int, a_1: int, d: int) -> int:\n    return a_1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert arithemetic_progression(n=1, a_1=1, d=1) == 1\n    assert arithemetic_progression(n=2, a_1=1, d=1) == 2\n    assert arithemetic_progression(n=3, a_1=1, d=1) == 3\n    assert arithemetic_progression(n=5, a_1=1, d=1) == 5\n    assert arithemetic_progression(n=6, a_1=1, d=1) == 6\n    assert arithemetic_progression(n=7, a_1=1, d=1) == 7\n    assert arithemetic_progression(n=10, a_1=1, d=1) == 10\n    assert arithemetic_progression(n=11, a_1=1, d=1) == 11\n    assert arithemetic_progression(n=12, a_1=1, d=1) == 12\n    assert arithemetic_progression(n=13, a_1=1, d=1) == 13\n    assert arithemetic_progression(n=20, a_1=1, d=1) == 20\n    assert arithemetic_progression(n=21, a_1=1, d=1) == 21\n    assert arithemetic_progression(n=22, a_1=1, d=1) == 22\n    assert arithemetic_progression(n=23, a_1=1, d=1) == 23\n    assert arithemetic_progression(n=24, a_1=1, d=1) == 24\n    assert arithemetic_progression(n=25, a_",
    "def find_term(t, a, d):\n    return a + (t - 1) * d\n\n\ndef test_find_term():\n    assert find_term(1, 1, 1) == 1\n    assert find_term(2, 1, 1) == 2\n    assert find_term(3, 1, 1) == 3\n    assert find_term(4, 1, 1) == 4\n    assert find_term(5, 1, 1) == 5\n\n    assert find_term(2, 1, 2) == 3\n    assert find_term(4, 1, 2) == 5\n    assert find_term(6, 1, 2) == 7\n    assert find_term(8, 1, 2) == 9\n    assert find_term(10, 1, 2) == 11\n\n    assert find_term(3, 2, 3) == 8\n    assert find_term(4, 2, 3) == 11\n    assert find_term(5, 2, 3) == 14\n    assert find_term(6, 2, 3) == 17\n    assert find_term(7, 2, 3) == 20\n\n\nif __name__ == \"__main__\":\n    test_find_term()",
    "from math import sqrt\n\n\ndef arithemetic_progression(n, a1, d):\n    \"\"\"\n    >>> arithemetic_progression(1, 1, 1)\n    1\n    >>> arithemetic_progression(10, 1, 2)\n    37\n    >>> arithemetic_progression(10, 1, 1)\n    55\n    >>> arithemetic_progression(10, 1, 3)\n    14\n    \"\"\"\n    if n == 1:\n        return a1\n    else:\n        return a1 + d * (n - 1)\n\n\ndef arithemetic_progression_2(n, a1, d):\n    \"\"\"\n    >>> arithemetic_progression_2(1, 1, 1)\n    1\n    >>> arithemetic_progression_2(10, 1, 2)\n    37\n    >>> arithemetic_progression_2(10, 1, 1)\n    55\n    >>> arithemetic_progression_2(10, 1, 3)\n    14\n    \"\"\"\n    if n == 1:\n        return a1\n    else:\n        return a1 + (d * (n - 1))\n\n\ndef arithemetic_progression_3(n, a1, d):\n    \"\"\"\n    >>> arithemetic_progression_3(1, 1, 1)\n    1\n    >>> arithemetic_progression_3(10, 1, 2)\n    37\n    >>> arithemetic_progression_3(10, 1, 1)\n    55\n    >>> arithemetic_progression_3(10, 1, 3)\n    14\n    \"\"\"\n    return a1 + (n - 1) * d\n\n\ndef arithemetic_progression_4(n, a1, d):\n    \"\"\"\n    >>> arithemetic_progression_4(1, 1, 1)\n    1\n    >>> arith",
    "def find_term_ap(a: int, d: int, n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param a: first term of the AP\n    :param d: common difference of the AP\n    :param n: nth term of the AP\n    :return: nth term of the AP\n    \"\"\"\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_term_ap(1, 3, 5))",
    "def nth_term(n, a1, d):\n    return a1 + (n-1)*d\n\n\ndef test_nth_term():\n    assert nth_term(2, 2, 2) == 4\n    assert nth_term(5, 3, 2) == 11\n    assert nth_term(10, 4, 7) == 107",
    "def arithemetic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n    print(arithemetic_progression(a, d, n))",
    "def arithemetic_sequence(a, d, n):\n    return a + (n - 1) * d\n\n\nprint(arithemetic_sequence(0, 1, 5))",
    "from typing import Optional\n\n\ndef find_arithmetic_sequence_term(\n    n: int, first: int, d: int\n) -> Optional[int]:\n    \"\"\"\n    :param n: t-nth term of sequence\n    :param first: first term of sequence\n    :param d: common difference\n    :return: t-nth term of sequence\n    \"\"\"\n    if n == 1:\n        return first\n\n    if d == 0:\n        return None\n\n    return first + (n - 1) * d",
    "def nth_term_ap(n, a1, d):\n    \"\"\"\n    Finds n-th term of arithemetic progression.\n\n    >>> nth_term_ap(1, 0, 1)\n    0\n    >>> nth_term_ap(2, 0, 1)\n    1\n    >>> nth_term_ap(3, 0, 1)\n    1\n    >>> nth_term_ap(4, 0, 1)\n    1\n    >>> nth_term_ap(5, 0, 1)\n    1\n    >>> nth_term_ap(6, 0, 1)\n    1\n    >>> nth_term_ap(7, 0, 1)\n    1\n    >>> nth_term_ap(8, 0, 1)\n    1\n    >>> nth_term_ap(9, 0, 1)\n    1\n    >>> nth_term_ap(10, 0, 1)\n    1\n    >>> nth_term_ap(11, 0, 1)\n    1\n    >>> nth_term_ap(12, 0, 1)\n    1\n    >>> nth_term_ap(13, 0, 1)\n    1\n    >>> nth_term_ap(14, 0, 1)\n    1\n    >>> nth_term_ap(15, 0, 1)\n    1\n    >>> nth_term_ap(16, 0, 1)\n    1\n    >>> nth_term_ap(17, 0, 1)\n    1\n    >>> nth_term_ap(18, 0, 1)\n    1\n    >>> nth_term_ap(19, 0, 1)\n    1\n    >>> nth_term_ap(20, 0, 1)\n    1\n    >>> nth_term_ap(21, 0, 1)\n    1\n    >>> nth_term_ap(22, 0, 1)\n    1",
    "def find_t_n_term(t, n, a1):\n    \"\"\"\n    Args:\n        t: target term\n        n: common difference\n        a1: first term\n    \"\"\"\n    return a1 + (t - 1) * n",
    "def ap(n, a1, d):\n    if n == 0:\n        return a1\n    return ap(n-1, a1+d, d)\n\n\nprint(ap(10, 1, 2))",
    "def arithemetic_sequence(a, d, n):\n    return (n - 1) * d + a\n\n\nif __name__ == \"__main__\":\n    print(arithemetic_sequence(1, 2, 5))",
    "from typing import Union\n\n\ndef ap(a: Union[int, float], d: Union[int, float], n: int) -> Union[int, float]:\n    \"\"\"Returns nth term of an arithemetic progression.\n\n    Args:\n        a: first term of an arithemetic progression.\n        d: common difference of an arithemetic progression.\n        n: nth term of an arithemetic progression.\n\n    Examples:\n        >>> ap(1, 1, 0)\n        1\n        >>> ap(1, 1, 1)\n        2\n        >>> ap(1, 1, 2)\n        3\n        >>> ap(1, 1, 3)\n        4\n        >>> ap(1, 1, 4)\n        5\n        >>> ap(1, 1, 5)\n        6\n        >>> ap(1, 2, 1)\n        3\n        >>> ap(1, 2, 2)\n        5\n        >>> ap(1, 2, 3)\n        7\n        >>> ap(1, 2, 4)\n        9\n        >>> ap(1, 2, 5)\n        11\n    \"\"\"\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(ap(1, 1, 0))\n    print(ap(1, 1, 1))\n    print(ap(1, 1, 2))\n    print(ap(1, 1, 3))\n    print(ap(1, 1, 4))\n    print(ap(1, 1, 5))\n    print(ap(1, 2, 1))\n    print(ap(1, 2, 2))\n    print(ap(1, 2, 3))\n    print(ap(1, 2, 4))\n    print(ap(1, 2, 5))",
    "def arithemetic_prog(n, t_n):\n    \"\"\"\n    This function calculates t-nth term of arithemetic progression.\n    :param n: number of terms.\n    :param t_n: t-nth term of arithemetic progression.\n    :return: t-nth term.\n    >>> arithemetic_prog(5, 4)\n    5\n    >>> arithemetic_prog(5, 1)\n    1\n    >>> arithemetic_prog(5, 2)\n    3\n    >>> arithemetic_prog(5, 3)\n    5\n    \"\"\"\n    a1 = 0\n    r = 1\n    t_n_term = a1 + (t_n - 1) * r\n    return t_n_term\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_term_of_arithemetic_progression(a, d, n):\n    return a + (n-1)*d\n\n\nif __name__ == \"__main__\":\n    print(nth_term_of_arithemetic_progression(5, 7, 10))",
    "def ariprog_term(n: int, a1: int, d: int) -> int:\n    return a1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert ariprog_term(4, 10, 2) == 22",
    "def arithemetic_progression(n, a1, d):\n    return a1 + d * (n - 1)\n\n\ndef test_arithemetic_progression():\n    \"\"\"Test arithemetic_progression.\"\"\"\n    assert arithemetic_progression(3, 1, 1) == 3\n    assert arithemetic_progression(5, 1, 2) == 10\n    assert arithemetic_progression(6, 1, 1) == 6\n    assert arithemetic_progression(1, 2, 2) == 2\n    assert arithemetic_progression(5, 2, 2) == 14",
    "def a_progression(a,d,n):\n    \"\"\"\n    a: first term of arithemetic progression\n    d: common difference of arithemetic progression\n    n: nth term of arithemetic progression\n    \"\"\"\n    return a+(n-1)*d",
    "def find_t_term(a, d, t):\n    return a + (t - 1) * d\n\n\"\"\"\nWrite a function to find the nth fibonacci number.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\"\"\"\nWrite a function to find the nth element of a fibonacci series.\n\"\"\"\n\ndef nth_fibonacci(n):\n    a = 0\n    b = 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n(n):\n    return (n * (n + 1)) / 2\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fast(n):\n    return (n * (n + 1)) / 2\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fastest(n):\n    return sum(range(n + 1))\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fastestest(n):\n    return (n * (n + 1)) / 2\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fastestestest(n):\n    return n * (n + 1) // 2\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fastestestestest(n):\n    return n * (n + 1) // 2\n\n\"\"\"\nWrite a function to find the sum of n numbers.\n\"\"\"\n\ndef sum_of_n_fastestestestestest(n):\n    return n *",
    "def find_nth_term(n, a1, d):\n    n -= 1\n    return a1 + n * d\n\n\"\"\"\nWrite a function to find the number of digits in a number.\n\"\"\"\n\ndef number_of_digits(n):\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\n\n\"\"\"\nWrite a function to find the largest number that can be formed from the letters of a given string.\n\nFor example:\n\nInput: \"adobecodebanc\"\nOutput: \"cadebone\"\n\"\"\"\n\ndef largest_number(s):\n    s = sorted(s, key=lambda x: x * len(s))\n    return \"\".join(s)\n\n\"\"\"\nWrite a function to find the number of trailing zeroes in a factorial of a number.\n\"\"\"\n\ndef trailing_zeroes(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n % 5 == 0:\n        count += 1\n        n //= 5\n    return count\n\n\"\"\"\nWrite a function to find the sum of the first n odd numbers.\n\"\"\"\n\ndef sum_of_odd(n):\n    if n == 0:\n        return 0\n    return n * (n + 1) // 2\n\n\"\"\"\nWrite a function to find the sum of the first n even numbers.\n\"\"\"\n\ndef sum_of_even(n):\n    if n == 0:\n        return 0\n    return n * (n + 1) // 2\n\n\"\"\"\nWrite a function to find the sum of the first n prime numbers.\n\"\"\"\n\ndef sum_of_prime(n):\n    if n == 0:\n        return 0\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\n\"\"\"\nWrite a function to find the sum of the first n cubes of numbers.\n\"\"\"\n\ndef sum_of_",
    "def ap(t, a, d):\n    return a + (t - 1) * d\n\n\ndef main():\n    a = int(input(\"Enter the first term of AP: \"))\n    d = int(input(\"Enter the common difference of AP: \"))\n    t = int(input(\"Enter the term of AP: \"))\n    print(ap(t, a, d))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def ap(t, a, r):\n    return a + (t-1) * r\n\n\nprint(ap(1, 1, 1))\nprint(ap(2, 1, 1))\nprint(ap(3, 1, 1))\nprint(ap(4, 1, 1))\nprint(ap(5, 1, 1))",
    "def main():\n    # Get the terms\n    a, d, n = map(int, input().split())\n\n    # Find the nth term\n    term = a + (n-1)*d\n\n    # Print the result\n    print(term)\n\nif __name__ == '__main__':\n    main()",
    "def find_term(a1: int, r: int, t: int) -> int:\n    \"\"\"\n    >>> find_term(1, 1, 10)\n    10\n    >>> find_term(1, 1, 1)\n    1\n    >>> find_term(1, 2, 2)\n    3\n    >>> find_term(1, 2, 5)\n    7\n    >>> find_term(1, 2, 0)\n    1\n    >>> find_term(1, 2, -1)\n    1\n    >>> find_term(1, 2, -5)\n    1\n    \"\"\"\n    return a1 + (t - 1) * r\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def arithemetic_prog(a, d, t):\n    return a + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert arithemetic_prog(2, 3, 3) == 7\n    assert arithemetic_prog(10, 2, 7) == 38\n    assert arithemetic_prog(5, 10, 6) == 85",
    "def find_term(a, d, t):\n    return a + (t - 1) * d\n\n\ndef test_find_term():\n    assert find_term(2, 3, 1) == 2\n    assert find_term(2, 3, 2) == 5\n    assert find_term(2, 3, 3) == 8\n    assert find_term(2, 3, 4) == 11\n\n\nif __name__ == \"__main__\":\n    test_find_term()",
    "def arithemetic_sequence(a, d, n):\n    return a + (n - 1) * d\n\n\nprint(arithemetic_sequence(10, 1, 10))\nprint(arithemetic_sequence(10, 1, 100))",
    "from typing import Union\n\n\ndef arithemetic_progression(a: int, d: int, n: int) -> Union[int, None]:\n    \"\"\"\n    Calculates t-nth term of arithemetic progression.\n    >>> arithemetic_progression(1, 2, 1)\n    1\n    >>> arithemetic_progression(1, 2, 2)\n    3\n    >>> arithemetic_progression(1, 2, 3)\n    5\n    >>> arithemetic_progression(1, 2, 4)\n    7\n    >>> arithemetic_progression(1, 2, 5)\n    9\n    >>> arithemetic_progression(1, 2, 6)\n    11\n    >>> arithemetic_progression(1, 2, 0)\n    1\n    >>> arithemetic_progression(1, 2, -1)\n    >>> arithemetic_progression(1, 2, -2)\n    >>> arithemetic_progression(1, 2, -3)\n    >>> arithemetic_progression(1, 2, -4)\n    >>> arithemetic_progression(1, 2, -5)\n    >>> arithemetic_progression(1, 2, -6)\n    \"\"\"\n    if n == 0:\n        return a\n    if n < 0:\n        return None\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def ap(t, a, d):\n    return a + (t - 1) * d\n\n\nprint(ap(1, 1, 1))\nprint(ap(2, 1, 1))\nprint(ap(3, 1, 1))",
    "def arithemetic_prog(a, d, n):\n    return a + (n - 1) * d\n\n\ndef main():\n    a = int(input(\"Enter first term of arithemetic progression: \"))\n    d = int(input(\"Enter common difference of arithemetic progression: \"))\n    n = int(input(\"Enter nth term of arithemetic progression: \"))\n    result = arithemetic_prog(a, d, n)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithemetic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\nprint(arithemetic_progression(1, 2, 10))",
    "def ap_nth_term(n, a1, d):\n    \"\"\"\n    :param n: nth term of progression\n    :param a1: first term of progression\n    :param d: common difference of progression\n    :return: nth term of progression\n    \"\"\"\n    return (n - 1) * d + a1\n\n\nif __name__ == '__main__':\n    assert ap_nth_term(4, 10, 2) == 22",
    "def find_t_nth(t, a_1, d):\n    if t == 1:\n        return a_1\n    return a_1 + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_t_nth(1, 1, 1))\n    print(find_t_nth(2, 1, 1))\n    print(find_t_nth(3, 1, 1))",
    "def nth_term(t, a1, d):\n    return a1 + (t - 1) * d\n\n\nassert nth_term(4, 10, 2) == 22\nassert nth_term(5, 10, 2) == 24",
    "def ap_nth(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    a, d, n = map(int, input().split())\n    print(ap_nth(a, d, n))",
    "def arithemtic_prog(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == '__main__':\n    print(arithemtic_prog(1, 2, 10))",
    "def arithemetic_progression(n, t):\n    a, d = 1, 1\n    for _ in range(t-1):\n        a = a + d\n    return a\n\n\nprint(arithemetic_progression(5, 2))",
    "def arithemtic_progression(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert arithemtic_progression(1, 2, 3) == 4\n    assert arithemtic_progression(1, 2, 4) == 5\n    assert arithemtic_progression(1, 2, 5) == 6\n    assert arithemtic_progression(1, 2, 6) == 7\n    assert arithemtic_progression(1, 2, 7) == 8\n    assert arithemtic_progression(1, 2, 8) == 9\n    assert arithemtic_progression(1, 2, 9) == 10\n    assert arithemtic_progression(1, 2, 10) == 11\n    assert arithemtic_progression(1, 2, 11) == 12\n    assert arithemtic_progression(1, 2, 12) == 13\n    assert arithemtic_progression(1, 2, 13) == 14\n    assert arithemtic_progression(1, 2, 14) == 15",
    "def find_term(n, a1, d):\n    return (a1 + (n - 1) * d)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a1 = int(input())\n    d = int(input())\n    print(find_term(n, a1, d))",
    "def find_t_nth_term(a, d, t):\n    return a + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    assert find_t_nth_term(2, 3, 10) == 58\n    assert find_t_nth_term(1, 2, 10) == 102",
    "def arithemetic_sequence(a1: int, d: int, n: int) -> int:\n    \"\"\"\n    Return t-nth term of arithemetic progression.\n    >>> arithemetic_sequence(1, 1, 100)\n    100\n    >>> arithemetic_sequence(1, 2, 100)\n    200\n    >>> arithemetic_sequence(1, 10, 100)\n    1000\n    >>> arithemetic_sequence(0, 1, 100)\n    99\n    >>> arithemetic_sequence(0, 10, 100)\n    990\n    >>> arithemetic_sequence(0, -1, 100)\n    100\n    >>> arithemetic_sequence(0, -10, 100)\n    1000\n    \"\"\"\n    return a1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_nth_term(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_nth_term(2, 5, 10))",
    "def arithemetic_sequence(a, d, n):\n    return a + (n - 1) * d\n\n\ndef main():\n    a = int(input(\"Enter the first term of the arithmetic sequence: \"))\n    d = int(input(\"Enter the common difference of the arithmetic sequence: \"))\n    n = int(input(\"Enter the nth term of the arithmetic sequence: \"))\n\n    print(f\"The {n}th term of the arithmetic sequence is: {arithemetic_sequence(a, d, n)}\")\n\n\nif __name__ == '__main__':\n    main()",
    "def find_term(a: int, d: int, n: int) -> int:\n    \"\"\"\n    Returns the nth term of an arithemetic progression.\n    >>> find_term(1, 1, 1)\n    1\n    >>> find_term(1, 2, 2)\n    3\n    >>> find_term(2, 10, 100)\n    102\n    \"\"\"\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_term(a, d, n):\n    \"\"\"\n    >>> find_term(1, 1, 1)\n    1\n    >>> find_term(1, 1, 2)\n    2\n    >>> find_term(1, 1, 3)\n    3\n    >>> find_term(1, 1, 4)\n    4\n    >>> find_term(1, 1, 5)\n    5\n    >>> find_term(1, 1, 6)\n    6\n    >>> find_term(1, 2, 2)\n    3\n    >>> find_term(1, 2, 3)\n    5\n    >>> find_term(1, 2, 4)\n    7\n    >>> find_term(1, 2, 5)\n    9\n    >>> find_term(1, 2, 6)\n    11\n    \"\"\"\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def ap_term(n, a1, d):\n    return a1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(ap_term(3, 1, 10))\n    print(ap_term(2, 2, 10))\n    print(ap_term(10, 10, 10))",
    "def arithemetic_progression(n, a1, d):\n    return a1 + (n - 1) * d\n\n\nif __name__ == '__main__':\n    print(arithemetic_progression(1, 2, 1))",
    "def arithemetic_prog(n, a1, d):\n    return a1 + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(arithemetic_prog(10, 10, 1))",
    "def find_term(a, d, t):\n    return a + (t - 1) * d\n\n\nif __name__ == \"__main__\":\n    print(find_term(2, 3, 5))",
    "def find_nth_term(a1, d, n):\n    return a1 + (n-1) * d\n\n\nif __name__ == \"__main__\":\n    a1 = 5\n    d = 7\n    n = 12\n    print(find_nth_term(a1, d, n))",
    "def arithemetic_prog(a, d, n):\n    return a + (n - 1) * d\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first term of Arithmetic Progression: \"))\n    d = int(input(\"Enter the common difference of Arithmetic Progression: \"))\n    n = int(input(\"Enter the nth term of Arithmetic Progression: \"))\n    print(f\"The {n}th term of Arithmetic Progression is {arithemetic_prog(a, d, n)}.\")",
    "def arithemetic_progression(n, a1, d):\n    return (a1 + (n - 1) * d)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    a1 = int(input(\"Enter a1: \"))\n    d = int(input(\"Enter d: \"))\n    print(f\"The t-nth term of arithemetic progression is: {arithemetic_progression(n, a1, d)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithemetic_progression(n, a1, d):\n    return a1 + d * (n - 1)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a1 = int(input())\n    d = int(input())\n    print(arithemetic_progression(n, a1, d))",
    "def ap_term(ap_a, ap_d, n):\n    return ap_a + (n-1) * ap_d\n\nprint(ap_term(10, 2, 100))",
    "from math import sqrt\n\ndef find_t_n(a, d, t):\n    \"\"\"\n    :param a: first term\n    :param d: common difference\n    :param t: t-th term\n    :return: t-th term\n    \"\"\"\n    n = t - 1\n    sum = (a * (1 - sqrt(1 - 4 * n * d))) / (2 * d)\n    return sum"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}