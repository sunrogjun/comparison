{
  "problem": {
    "task_id": "MBPP/336",
    "prompt": "Write a function to check whether the given month name contains 28 days or not.",
    "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
    "test_list": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ],
    "challenge_test_list": [],
    "problem_id": 325
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from calendar import monthrange\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"Return True if the month name contains 28 days, else False.\n\n    >>> check_month(\"August\")\n    True\n    >>> check_month(\"June\")\n    False\n    \"\"\"\n    # Your code here\n    if month == \"February\":\n        return True\n    return month in (\n        \"April\",\n        \"June\",\n        \"September\",\n        \"November\",\n    )\n\n\ndef check_month_better(month: str) -> bool:\n    \"\"\"Return True if the month name contains 28 days, else False.\n\n    >>> check_month_better(\"August\")\n    True\n    >>> check_month_better(\"June\")\n    False\n    \"\"\"\n    # Your code here\n    return month in (\n        \"February\",\n        *monthrange(2021, 1, 1)[4],\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_month(month):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_days[month]\n\n\nprint(check_month(\"January\"))\nprint(check_month(\"February\"))",
    "def month(month):\n    if month == 'January' or month == 'April' or month == 'July' or month == 'October':\n        return '28'\n    elif month == 'February':\n        return '29'\n    else:\n        return '28'\n\nprint(month('January'))",
    "def is_month_28_days(month: str) -> bool:\n    \"\"\"\n    >>> is_month_28_days(\"February\")\n    True\n    >>> is_month_28_days(\"June\")\n    False\n    \"\"\"\n    return month.lower() in (\"february\", \"june\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_28_days(month):\n    \"\"\"\n    Check if the month has 28 days\n    \"\"\"\n    if month == \"February\":\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print(check_28_days(\"February\"))\n    print(check_28_days(\"June\"))",
    "def check_for_days(month):\n    months = [\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"]\n    if month in months:\n        return \"28\"\n    else:\n        return \"30\"\n\n\nprint(check_for_days(\"january\"))",
    "from datetime import date\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"Checks if the given month has 28 days.\n\n    Args:\n        month (str): month name\n\n    Returns:\n        bool: True if month has 28 days, False otherwise\n    \"\"\"\n    if month in (\"April\", \"June\", \"September\", \"November\"):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_month(\"April\") == True\n    assert check_month(\"June\") == True\n    assert check_month(\"September\") == True\n    assert check_month(\"November\") == True\n    assert check_month(\"July\") == False\n    assert check_month(\"May\") == False\n    assert check_month(\"December\") == False",
    "def is_28_days(month: str) -> bool:\n    \"\"\"\n    >>> is_28_days(\"December\")\n    True\n    >>> is_28_days(\"January\")\n    False\n    \"\"\"\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_month(month):\n    return month == \"February\" and 28\n\n\nif __name__ == \"__main__\":\n    print(check_month(\"February\"))",
    "# def month_28(month):\n#     month = month.lower()\n#     if month == \"february\":\n#         return 28\n#     else:\n#         return False\n\n\n# print(month_28(\"February\"))\n\n\ndef month_28(month):\n    month = month.lower()\n    if month == \"february\":\n        return 28\n    else:\n        return False\n\n\nprint(month_28(\"March\"))",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 28 days or not.\nHints:\nUse list comprehension to create a list from a range of numbers.\nUse string methods to get a character from a string.\n\n\"\"\"",
    "from datetime import datetime\n\n\ndef check_month(month: str) -> bool:\n    return datetime.strptime(f\"2021-{month}-28\", \"%Y-%B-%d\").month == 2\n\n\nif __name__ == \"__main__\":\n    assert check_month(\"February\") == True, \"February\"\n    assert check_month(\"March\") == False, \"March\"\n    assert check_month(\"April\") == False, \"April\"",
    "from datetime import datetime\n\n\ndef check_month(month):\n    \"\"\"\n    >>> check_month(\"January\")\n    True\n    >>> check_month(\"February\")\n    False\n    \"\"\"\n    date = datetime.strptime(f\"2020-{month}-28\", \"%Y-%B-%d\")\n    if date.month == 2 and date.day == 28:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from calendar import monthrange\n\n\ndef is_month_has_28_days(month):\n    month_number = {\n        \"january\": 1,\n        \"febuary\": 2,\n        \"march\": 3,\n        \"april\": 4,\n        \"may\": 5,\n        \"june\": 6,\n        \"july\": 7,\n        \"august\": 8,\n        \"september\": 9,\n        \"october\": 10,\n        \"november\": 11,\n        \"december\": 12\n    }\n    return month_number[month.lower()] == 2 and monthrange(2018, 2)[1] == 28\n\n\nif __name__ == \"__main__\":\n    assert is_month_has_28_days(\"February\") == True\n    assert is_month_has_28_days(\"March\") == False",
    "# solution with lists\ndef check_month(month):\n    months = [\"January\", \"February\"]\n    return month in months\n\n\n# solution with dictionary\ndef check_month(month):\n    months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30,\n              \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    return month in months\n\n\n# solution with try and except\ndef check_month(month):\n    try:\n        return month == \"February\" and 28 in range(int(month[-2:]))\n    except ValueError:\n        return False\n\n\n# solution with if statements\ndef check_month(month):\n    if month == \"February\":\n        return 28 in range(int(month[-2:]))\n    return False\n\n\nprint(check_month(\"February\"))\nprint(check_month(\"January\"))\nprint(check_month(\"March\"))",
    "def is_28_days(month: str) -> bool:\n    \"\"\"\n    >>> is_28_days('January')\n    True\n    >>> is_28_days('February')\n    False\n    \"\"\"\n    month = month.lower()\n    return month in (\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_28_days(month):\n    month = month.lower()\n    if month == \"february\":\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_28_days(\"February\"))",
    "from datetime import datetime\n\n\ndef check_month(month):\n    return datetime(2021, 1, 1).replace(month=month).day == 28\n\n\nif __name__ == \"__main__\":\n    assert check_month(5) is True",
    "from datetime import date\n\nmonths = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_days(month: str) -> bool:\n    \"\"\"Checks the month name and returns True if the month has 28 days.\n\n    Args:\n        month (str): The name of the month.\n\n    Returns:\n        bool: True if the month has 28 days, False otherwise.\n    \"\"\"\n    return months[month] == 28\n\n\nif __name__ == \"__main__\":\n    print(check_days(date.today().strftime(\"%B\")))",
    "from datetime import date\n\n\ndef is_month_has_28_days(month_name: str) -> bool:\n    \"\"\"\n    >>> is_month_has_28_days(\"February\")\n    True\n    \"\"\"\n    try:\n        return date(2022, month=list(calendar.month_name).index(month_name), day=28).replace(day=29)\n    except ValueError:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
    "def check_days(month: str) -> bool:\n    \"\"\"\n    >>> check_days('February')\n    True\n    >>> check_days('June')\n    False\n    \"\"\"\n    days_in_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return days_in_month[month] == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import datetime\n\n\ndef is_month_28(month_name):\n    months = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n\n    return months[month_name] == 28\n\n\ndef main():\n    month_name = input(\"Enter a month name: \")\n    result = is_month_28(month_name)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
    "from calendar import monthrange\n\nmonths = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef days_in_month(month: str) -> bool:\n    \"\"\"Returns whether the given month contains 28 days or not.\n\n    Args:\n        month (str): The name of the month.\n\n    Examples:\n        >>> assert days_in_month(\"February\")\n        >>> assert not days_in_month(\"January\")\n    \"\"\"\n    _, days = monthrange(2020, months[month])\n    return days == 28\n\n\nif __name__ == \"__main__\":\n    print(days_in_month(\"February\"))",
    "def is_month_has_28_days(month_name: str) -> bool:\n    \"\"\"Returns true if month has 28 days.\"\"\"\n    return month_name in (\"January\", \"April\", \"July\", \"October\")\n\n\nif __name__ == \"__main__\":\n    assert is_month_has_28_days(\"January\") is True\n    assert is_month_has_28_days(\"June\") is False",
    "from datetime import datetime\n\n\ndef is_month_28(month: str) -> bool:\n    try:\n        return datetime(2021, datetime.strptime(month, '%B').month, 28).strftime('%B') == month\n    except ValueError:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_month_28('September'))\n    print(is_month_28('January'))",
    "from datetime import date\n\ndef is_february_28(month):\n    return date(2020, month, 28).isoweekday() == 7\n\n\nif __name__ == \"__main__\":\n    assert is_february_28(2) == True\n    assert is_february_28(5) == False\n    assert is_february_28(12) == False\n    print(\"Congratulations! All the test passed!\")",
    "def is_28_days(month):\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\nif __name__ == '__main__':\n    assert is_28_days(\"April\") == True\n    assert is_28_days(\"June\") == True\n    assert is_28_days(\"September\") == True\n    assert is_28_days(\"November\") == True\n    assert is_28_days(\"January\") == False\n    assert is_28_days(\"February\") == False\n    assert is_28_days(\"March\") == False\n    assert is_28_days(\"April\") == True\n    assert is_28_days(\"May\") == False\n    assert is_28_days(\"July\") == False\n    assert is_28_days(\"August\") == False\n    assert is_28_days(\"October\") == False\n    assert is_28_days(\"December\") == False",
    "def is_month_has_28_days(month: str) -> bool:\n    \"\"\"\n    >>> is_month_has_28_days(\"January\")\n    True\n    >>> is_month_has_28_days(\"February\")\n    False\n    \"\"\"\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import datetime\n\n\ndef check_days(month: str) -> bool:\n    \"\"\"\n    Returns True if the month contains 28 days else False.\n    >>> check_days('February')\n    True\n    >>> check_days('March')\n    False\n    >>> check_days('January')\n    False\n    \"\"\"\n    month_name = month\n    if month_name == \"February\":\n        return True\n    else:\n        return False\n\n\ndef main():\n    month = input(\"Enter a month name: \")\n    print(check_days(month))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_days(month):\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if months[month] == 28:\n        return \"{} has 28 days\".format(month)\n    return \"{} has {} days\".format(month, months[month])\n\n\nif __name__ == '__main__':\n    print(check_days(\"January\"))\n    print(check_days(\"February\"))\n    print(check_days(\"March\"))\n    print(check_days(\"April\"))\n    print(check_days(\"May\"))\n    print(check_days(\"June\"))\n    print(check_days(\"July\"))\n    print(check_days(\"August\"))\n    print(check_days(\"September\"))\n    print(check_days(\"October\"))\n    print(check_days(\"November\"))\n    print(check_days(\"December\"))",
    "from calendar import monthrange\n\n\ndef is_month_has_28_days(month: str) -> bool:\n    return month == \"February\" and monthrange(2000, 2)[1] == 28\n\n\nif __name__ == \"__main__\":\n    assert is_month_has_28_days(\"February\")",
    "def is_month_has_28_days(month_name: str) -> bool:\n    \"\"\"\n\n    :param month_name: name of the month\n    :return: True if the month has 28 days else False\n    >>> is_month_has_28_days('January')\n    True\n    >>> is_month_has_28_days('June')\n    True\n    >>> is_month_has_28_days('March')\n    False\n    >>> is_month_has_28_days('April')\n    False\n    >>> is_month_has_28_days('May')\n    False\n    \"\"\"\n    month_list = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n    return month_name in month_list\n\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    assert is_month_has_28_days(\"January\") is True\n    assert is_month_has_28_days(\"June\") is True\n    assert is_month_has_28_days(\"March\") is False\n    assert is_month_has_28_days(\"April\") is False\n    assert is_month_has_28_days(\"May\") is False\n    assert is_month_has_28_days(\"July\") is True\n    assert is_month_has_28_days(\"August\") is True\n    assert is_month_has_28_days(\"September\") is True\n    assert is_month_has_28_days(\"October\") is True\n    assert is_month_has_28_days(\"November\") is True\n    assert is_month_has_28_days(\"December\") is True\n\n\nif __name__ == \"__main__\":\n    main()",
    "from datetime import datetime\n\n\ndef month_length(month: str) -> bool:\n    \"\"\"Returns True if the given month has 28 days.\n\n    >>> month_length(\"February\")\n    True\n    \"\"\"\n    return datetime(2021, [i for i in range(1, 13) if str(i).zfill(2) == month].pop(), 28).month == 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"Checks if the given month name has 28 days or not.\n\n    Args:\n        month (str): Month name.\n\n    Returns:\n        bool: True if the given month has 28 days, else False.\n\n    Examples:\n        >>> assert check_month('February')\n        >>> assert not check_month('January')\n    \"\"\"\n    return date(2020, [month for month in range(1, 13) if date(2020, month, 1).strftime('%B') == month][0], 28).replace(\n        day=29\n    ).strftime('%B') == month\n\n\nif __name__ == \"__main__\":\n    print(check_month(input().strip()))",
    "from collections import defaultdict\n\n\ndef is_leap_year(year: int) -> bool:\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n\ndef is_valid_month(month: int) -> bool:\n    return 1 <= month <= 12\n\n\ndef is_valid_day(day: int) -> bool:\n    return 1 <= day <= 31\n\n\ndef is_valid_year(year: int) -> bool:\n    return 1 <= year <= 9999\n\n\ndef is_valid_date(year: int, month: int, day: int) -> bool:\n    return is_valid_year(year) and is_valid_month(month) and is_valid_day(day)\n\n\ndef _get_month_days(month: int) -> int:\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return month_days[month - 1]\n\n\ndef is_valid_date_with_month(year: int, month: int, day: int) -> bool:\n    if is_valid_date(year, month, day):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return day <= 31\n        if month in [4, 6, 9, 11]:\n            return day <= 30\n        if month == 2:\n            return day <= 29 if not is_leap_year(year) else day <= 28\n    return False\n\n\ndef is_valid_date_with_month_dict(year: int, month: int, day: int) -> bool:\n    if is_valid_date(year, month, day):\n        month_days = defaultdict(lambda: 31)\n        month_days.update({\n            1: 31,\n            3: 31,\n            5:",
    "def is_month_has_28_days(month: str) -> bool:\n    \"\"\"\n\n    :param month:\n    :return:\n    >>> is_month_has_28_days('February')\n    True\n    >>> is_month_has_28_days('January')\n    False\n    \"\"\"\n    if month.lower() == \"february\":\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_month_has_28_days(month: str) -> bool:\n    \"\"\"\n    :param month: Name of the month\n    :return: True if the month has 28 days, else False\n    \"\"\"\n    if month == \"February\":\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_month_has_28_days(\"February\"))\n    print(is_month_has_28_days(\"January\"))",
    "from datetime import datetime\n\n\ndef is_month_28_days(month: str) -> bool:\n    \"\"\"Returns the result of the check\n\n    Args:\n        month (str): name of the month\n\n    Examples:\n        >>> assert is_month_28_days(\"April\")\n        >>> assert not is_month_28_days(\"February\")\n    \"\"\"\n    return datetime.strptime(f\"2021-{month}-28\", \"%Y-%B-%d\").day == 28\n\n\nif __name__ == \"__main__\":\n    print(is_month_28_days(\"April\"))",
    "def is_february_28(month_name):\n    \"\"\"\n    :param month_name: str, month name\n    :return: bool, True if month name contains 28 days, False otherwise\n    \"\"\"\n    days_in_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    return days_in_month[month_name] == 28\n\n\ndef test_month_28_days():\n    assert is_february_28(\"February\")\n\n\ndef test_month_not_28_days():\n    assert not is_february_28(\"January\")\n\n\ndef test_month_not_in_dict():\n    assert not is_february_28(\"Mars\")",
    "from datetime import datetime\n\n\ndef is_month_has_28_days(month):\n    month_name_to_number = {\n        \"January\": 1,\n        \"February\": 2,\n        \"March\": 3,\n        \"April\": 4,\n        \"May\": 5,\n        \"June\": 6,\n        \"July\": 7,\n        \"August\": 8,\n        \"September\": 9,\n        \"October\": 10,\n        \"November\": 11,\n        \"December\": 12,\n    }\n\n    # Get the month number from the month name\n    month_number = month_name_to_number[month]\n\n    # Get the year number from the current year\n    year_number = datetime.now().year\n\n    # Check if the month has 28 days or not\n    if datetime(year_number, month_number, 28).month == month_number:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert is_month_has_28_days(\"February\") == True\n    assert is_month_has_28_days(\"June\") == False",
    "from collections import namedtuple\n\nMONTHS = ('January', 'February')\n\n\ndef is_month_28(month: str) -> bool:\n    \"\"\"Returns true if the given month name contains 28 days.\n    >>> is_month_28('January')\n    True\n    >>> is_month_28('February')\n    False\n    >>> is_month_28('January')\n    True\n    >>> is_month_28('March')\n    False\n    \"\"\"\n    return month in MONTHS\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def check_month(month):\n    if month == \"February\":\n        return 28\n    else:\n        return 30\n\nprint(check_month(\"February\"))",
    "from datetime import date\n\ndef month_days(month):\n    month_names = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']\n    month_number = month_names.index(month) + 1\n    year = date.today().year\n    if month == 'february':\n        if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n            return 29\n        else:\n            return 28\n    else:\n        if month_number in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        else:\n            return 30\n\nif __name__ == '__main__':\n    print(\"Enter a month name: \")\n    month = input()\n    print(month_days(month))",
    "from datetime import date\n\n\ndef month_name(month):\n    month_names = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n    try:\n        month_name = month_names[month - 1]\n        if month_name == \"February\":\n            return False\n        return True\n    except IndexError:\n        return \"Not a valid month\"\n\n\nif __name__ == \"__main__\":\n    print(month_name(int(input(\"Enter month number: \").strip())))",
    "def is_feb_28(month: str) -> bool:\n    \"\"\"Checks whether the given month contains 28 days.\n\n    Args:\n        month (str): The month name.\n\n    Examples:\n        >>> assert is_feb_28('February')\n        >>> assert not is_feb_28('January')\n    \"\"\"\n    return month.lower() == \"february\"\n\n\nif __name__ == \"__main__\":\n    print(is_feb_28(\"February\"))\n    print(is_feb_28(\"January\"))",
    "from datetime import date\n\n\ndef check_month(month):\n    month_days = {\n        'january': 31,\n        'february': 28,\n        'march': 31,\n        'april': 30,\n        'may': 31,\n        'june': 30,\n        'july': 31,\n        'august': 31,\n        'september': 30,\n        'october': 31,\n        'november': 30,\n        'december': 31\n    }\n    if month.lower() in month_days:\n        return month_days[month.lower()]\n    return 0\n\n\ndef check_days_in_month(month):\n    if month.lower() == 'february':\n        return 28 if date.today().year % 4 else 29\n    return check_month(month)\n\n\ndef main():\n    print(check_days_in_month('February'))\n    print(check_days_in_month('January'))\n\n\nif __name__ == '__main__':\n    main()",
    "def has_28_days(month):\n    return month in (\"February\", \"April\", \"June\", \"September\", \"November\")\n\n\ndef test_has_28_days():\n    \"\"\"\n    >>> test_has_28_days()\n    True\n    \"\"\"\n    assert has_28_days(\"February\")\n    assert has_28_days(\"April\")\n    assert has_28_days(\"June\")\n    assert has_28_days(\"September\")\n    assert has_28_days(\"November\")",
    "import calendar\n\n\ndef check_month_days(month_name: str) -> bool:\n    \"\"\"\n    >>> check_month_days(\"January\")\n    True\n    >>> check_month_days(\"March\")\n    False\n    \"\"\"\n    return calendar.monthrange(2021, getattr(calendar, month_name))[1] == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\nMONTHS = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n]\n\n\ndef is_month_28(month_name):\n    \"\"\"Return True if the given month contains 28 days.\"\"\"\n    if month_name in MONTHS:\n        month = MONTHS.index(month_name) + 1\n        year = date.today().year\n        if date(year, month, 28).weekday() == 6:\n            return True\n    return False\n\n\ndef main():\n    print(is_month_28('April'))\n    print(is_month_28('January'))\n    print(is_month_28('February'))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 28 days or not.\nHints:\nUse list to store the names of months.\nUse string splicing to get the required name.\n\n\"\"\"",
    "def is_leap_year(year: int) -> bool:\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n\ndef is_month_28(month: str) -> bool:\n    return month in [\"February\", \"April\", \"June\", \"September\", \"November\"]\n\n\ndef is_month_29(month: str) -> bool:\n    return month == \"February\"\n\n\ndef is_month_30(month: str) -> bool:\n    return month in [\"April\", \"June\", \"September\", \"November\"]\n\n\ndef is_month_31(month: str) -> bool:\n    return month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n\n\ndef is_valid_month(month: str) -> bool:\n    return month in [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n\n\ndef is_valid_year(year: int) -> bool:\n    return 1 <= year <= 9999\n\n\ndef is_valid_date(date: str) -> bool:\n    month, day, year = date.split(\"-\")\n    return (\n        is_valid_month(month)\n        and is_valid_year(int(year))\n        and (\n            1 <= int(day) <= 31\n            if is_month_31(month)\n            else 1 <= int(day) <= 30\n            if is_month_30(month)\n            else 1 <= int(day) <= 28\n            if is_month_28(month)\n            else 1 <= int(day) <= 29\n            if is_month_29(month)\n            else False\n        )\n    )",
    "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\ndef days_in_month(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return 31\n    elif month in [\"April\", \"June\", \"September\", \"November\"]:\n        return 30\n    elif month == \"February\":\n        return 29 if is_leap_year(year) else 28\n    else:\n        return 0\n\ndef has_28_days(month, year):\n    return days_in_month(month) == 28\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(has_28_days('February', 2020))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert has_28_days('February', 2020) == True\n    assert has_28_days('February', 2400) == False\n    assert has_28_days('January', 2019) == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "from datetime import date\n\nmonths = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_month(month_name: str) -> bool:\n    \"\"\"Checks whether a month has 28 days or not.\n\n    Args:\n        month_name (str): The name of the month.\n\n    Returns:\n        bool: Whether the month has 28 days or not.\n    \"\"\"\n    return months[month_name] == 28\n\n\nif __name__ == \"__main__\":\n    print(check_month(input()))",
    "from datetime import datetime\n\n\ndef check_28(month_name: str) -> bool:\n    \"\"\"Checks whether the given month name contains 28 days or not.\n\n    Args:\n        month_name (str): month name.\n\n    Returns:\n        bool: True if the month contains 28 days, else False.\n    \"\"\"\n    try:\n        return datetime(2021, datetime.strptime(month_name, \"%B\").month, 28).strftime(\"%B\") == month_name\n    except ValueError:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(check_28(\"July\"))\n    print(check_28(\"June\"))",
    "from collections import namedtuple\n\nMONTHS = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n]\n\n\ndef month_with_28_days(month: str) -> bool:\n    \"\"\"Returns True if the month name contains 28 days, else False.\n\n    >>> month_with_28_days('February')\n    True\n    >>> month_with_28_days('January')\n    False\n    >>> month_with_28_days('October')\n    False\n    >>> month_with_28_days('December')\n    False\n    >>> month_with_28_days('November')\n    False\n    >>> month_with_28_days('June')\n    False\n    >>> month_with_28_days('August')\n    False\n    >>> month_with_28_days('April')\n    False\n    >>> month_with_28_days('March')\n    False\n    >>> month_with_28_days('September')\n    False\n    \"\"\"\n    Month = namedtuple(\"Month\", \"name days\")\n    months = [\n        Month(\"January\", 31),\n        Month(\"February\", 28),\n        Month(\"March\", 31),\n        Month(\"April\", 30),\n        Month(\"May\", 31),\n        Month(\"June\", 30),\n        Month(\"July\", 31),\n        Month(\"August\", 31),\n        Month(\"September\", 30),\n        Month(\"October\", 31),\n        Month(\"November\", 30),\n        Month(\"December\", 31),\n    ]\n    for month_ in months:\n        if month_.name == month:\n            return month_.days == 28\n    return False\n\n\nif __name__ == \"__main__\":\n    import doct",
    "#!/usr/bin/env python\n\nimport sys\n\ndef check_days(month):\n    if month == 'february':\n        return 28\n    else:\n        return 30\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print \"Usage: month\"\n        sys.exit(1)\n\n    month = sys.argv[1]\n    print check_days(month)",
    "from datetime import date\n\nMONTHS = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31,\n}\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"\n    >>> check_month('January')\n    False\n    >>> check_month('February')\n    True\n    \"\"\"\n    return MONTHS[month] == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_days(month):\n    month_days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31,\n    }\n\n    if month in month_days:\n        if month_days[month] == 28:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert check_days('February') == True\n    assert check_days('January') == False",
    "def is_28_days(month):\n    return month in [\"February\", \"April\", \"June\", \"September\", \"November\"]\n\n\nif __name__ == \"__main__\":\n    print(is_28_days(\"February\"))\n    print(is_28_days(\"June\"))",
    "def is_28_days(month):\n    month_name = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in month_name\n\n\nprint(is_28_days(\"January\"))\nprint(is_28_days(\"December\"))",
    "\"\"\"Question 18\nLevel 2\nQuestion:\nWrite a function to check whether the given month name contains 28 days or not.\nHints:\nUse list comprehension to find if a value exists in a list.\n\n\"\"\"",
    "def is_28_days(month_name):\n    if month_name == 'January' or month_name == 'April' or month_name == 'July' or month_name == 'October':\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given number is a prime number or not.\n\"\"\"\n\ndef is_prime(number):\n    if number < 0:\n        return False\n    elif number < 2:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n\n\"\"\"\nWrite a function to check whether the given number is a palindrome or not.\n\"\"\"\n\ndef is_palindrome(number):\n    if number < 0:\n        return False\n    else:\n        number = str(number)\n        rev_number = number[::-1]\n        if number == rev_number:\n            return True\n        else:\n            return False\n\n\"\"\"\nWrite a function to check whether the given number is a leap year or not.\n\"\"\"\n\ndef is_leap_year(year):\n    if year % 4 == 0 and year % 100 != 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False",
    "def is_leap_year(year: int) -> bool:\n    \"\"\"Returns true if year is leap year.\"\"\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n\ndef is_month_has_28_days(month: str) -> bool:\n    \"\"\"Returns true if the month has 28 days.\"\"\"\n    if month in ['April', 'June', 'September', 'November']:\n        return True\n    elif month in ['February']:\n        return is_leap_year(year)\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_month_has_28_days(\"June\"))",
    "from datetime import date\n\nmonth_name = input()\n\nif month_name in ('March', 'April', 'June', 'September', 'November'):\n    print('true')\nelif month_name in ('February'):\n    if date.today().year % 4 == 0:\n        print('true')\n    elif date.today().year % 400 == 0:\n        print('true')\n    elif date.today().year % 100 == 0:\n        print('false')\n    else:\n        print('false')\nelse:\n    print('false')",
    "from datetime import datetime\n\n\ndef check_month(month: str) -> bool:\n    \"\"\"Check if the given month name has 28 days.\n\n    Args:\n        month (str): Name of the month.\n\n    Returns:\n        bool: True if the month has 28 days, False otherwise.\n\n    Examples:\n        >>> assert check_month(\"February\")\n        >>> assert not check_month(\"January\")\n    \"\"\"\n    return datetime(2020, 2, 29).strftime(\"%B\") == month\n\n\nif __name__ == \"__main__\":\n    print(check_month(input().strip()))",
    "from datetime import date\n\n\ndef is_month_has_28_days(month):\n    \"\"\"\n    >>> is_month_has_28_days('February')\n    True\n    >>> is_month_has_28_days('January')\n    False\n    \"\"\"\n    month_mapping = {\n        'February': 28,\n        'January': 31,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31,\n    }\n\n    return month_mapping.get(month, 0) == 28\n\n\ndef is_month_has_28_days_v2(month):\n    \"\"\"\n    >>> is_month_has_28_days_v2('February')\n    True\n    >>> is_month_has_28_days_v2('January')\n    False\n    \"\"\"\n    return date(2019, [\n        'February', 'January', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ].index(month) + 1, 1).day == 28\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from datetime import datetime\n\n\ndef check_month_days(month: str) -> bool:\n    \"\"\"\n\n    :param month: month name\n    :return: True if month has 28 days else False\n    \"\"\"\n    if month.lower() in ('february', 'march', 'june', 'august'):\n        return False\n    return True\n\n\ndef main():\n    month = input(\"Enter month name: \")\n    if check_month_days(month):\n        print(month, \"has 28 days\")\n    else:\n        print(month, \"has 29 days\")\n\n\nif __name__ == '__main__':\n    main()",
    "\"\"\"Question:\nWrite a function to check whether the given month name contains 28 days or not.\nHints:\nUse list to store the names of the months.\n\n\"\"\"\ndef checkLeapYear(year):\n    return year%4==0 and (year%100!=0 or year%400==0)\nmonths=['January','February','March','April','May','June','July','August','September','October','November','December']\ndef is28(month):\n    return month=='February' and checkLeapYear(int(year))\nmonth,year=raw_input(\"Enter month and year in format 'month year' :\").split()\nprint is28(month)",
    "def is_month_28(month: str) -> bool:\n    \"\"\"\n    >>> is_month_28('January')\n    True\n    >>> is_month_28('February')\n    False\n    \"\"\"\n    return month in (\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import datetime\n\n\ndef is_month_has_28_days(month: str) -> bool:\n    \"\"\"\n    Returns a boolean value to check whether the given month name contains 28 days or not.\n    >>> is_month_has_28_days('July')\n    True\n    >>> is_month_has_28_days('August')\n    False\n    >>> is_month_has_28_days('February')\n    True\n    >>> is_month_has_28_days('March')\n    False\n    \"\"\"\n    if month.lower() in [\n        \"january\",\n        \"march\",\n        \"may\",\n        \"july\",\n        \"august\",\n        \"october\",\n        \"december\",\n    ]:\n        return False\n    elif month.lower() in [\n        \"april\",\n        \"june\",\n        \"september\",\n        \"november\",\n    ]:\n        return True\n    return datetime.strptime(month, \"%B\").day == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_28_days_month(month):\n    return month in (\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\")\n\n\ndef test_is_28_days_month():\n    assert is_28_days_month(\"January\")\n    assert not is_28_days_month(\"February\")",
    "from datetime import date\n\nMONTHS_30 = (4, 6, 9, 11)\nMONTHS_31 = (1, 3, 5, 7, 8, 10, 12)\n\n\ndef is_month_28(month):\n    month_num = date(2000, month, 1).month\n    return month_num == 2 and date(2000, month, 29).replace(day=1)\n\n\ndef is_month_29(month):\n    return date(2000, month, 29).month == 2\n\n\ndef is_month_30(month):\n    return month in MONTHS_30\n\n\ndef is_month_31(month):\n    return month in MONTHS_31\n\n\ndef validate_month(month):\n    if is_month_28(month):\n        return \"28 days\"\n    if is_month_29(month):\n        return \"29 days\"\n    if is_month_30(month):\n        return \"30 days\"\n    if is_month_31(month):\n        return \"31 days\"\n\n\ndef main():\n    for month in range(1, 13):\n        print(f\"Month {month} has {validate_month(month)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def month_28(month):\n    months = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months\n\n\nprint(month_28(\"January\"))\nprint(month_28(\"March\"))\nprint(month_28(\"May\"))\nprint(month_28(\"July\"))\nprint(month_28(\"August\"))\nprint(month_28(\"October\"))\nprint(month_28(\"December\"))\nprint(month_28(\"June\"))",
    "def is_month_28(month: str) -> bool:\n    \"\"\"\n    >>> is_month_28(\"January\")\n    True\n    >>> is_month_28(\"March\")\n    False\n    >>> is_month_28(\"April\")\n    True\n    \"\"\"\n    return month in (\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# This is the function which takes the month name as input and returns True if the month has 28 days else returns False\ndef check_days(month):\n    month = month.lower()\n    if month in [\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"]:\n        return True\n    else:\n        return False\n\n\n# This is driver code which takes the month as input and calls the function\nif __name__ == \"__main__\":\n    month = input(\"Enter the month name : \")\n    if check_days(month):\n        print(\"Yes the month has 28 days\")\n    else:\n        print(\"No the month doesn't have 28 days\")",
    "def days_in_month(month):\n    days = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    if month in days:\n        return days[month]\n    else:\n        return \"Month does not exist\"\n\n\nprint(days_in_month(\"January\"))\nprint(days_in_month(\"February\"))\nprint(days_in_month(\"March\"))\nprint(days_in_month(\"April\"))\nprint(days_in_month(\"May\"))\nprint(days_in_month(\"June\"))\nprint(days_in_month(\"July\"))\nprint(days_in_month(\"August\"))\nprint(days_in_month(\"September\"))\nprint(days_in_month(\"October\"))\nprint(days_in_month(\"November\"))\nprint(days_in_month(\"December\"))\nprint(days_in_month(\"April\"))",
    "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\n\ndef days_in_month(year, month):\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    else:\n        return 30\n\n\ndef main():\n    year = int(input(\"Enter year: \"))\n    month = int(input(\"Enter month: \"))\n    if days_in_month(year, month) == 28:\n        print(\"The given month has 28 days.\")\n    else:\n        print(\"The given month has 29 days.\")\n\n\nif __name__ == '__main__':\n    main()",
    "from datetime import date\n\n\ndef month_28(month: str) -> bool:\n    \"\"\"\n    >>> month_28('January')\n    True\n    >>> month_28('February')\n    False\n    \"\"\"\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_days[month] == 28\n\n\ndef test_month_28():\n    \"\"\"Test for month_28 function.\"\"\"\n    assert month_28(\"January\") is True\n    assert month_28(\"February\") is False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def days_in_month(month: str) -> bool:\n    \"\"\"\n    >>> days_in_month('February')\n    True\n    \"\"\"\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_days[month] == 28\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n\n    for month in months:\n        if days_in_month(month):\n            print(f\"{month} has 28 days\")\n        else:\n            print(f\"{month} has 29 days\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from datetime import date\n\n\ndef check_days_in_month(month: str) -> bool:\n    \"\"\"Checks whether the given month contains 28 days or not.\n\n    Args:\n        month (str): The month name.\n\n    Returns:\n        bool: True if the month contains 28 days, otherwise False.\n    \"\"\"\n    return date(2021, 1, 1).replace(month=month).day == 28\n\n\nif __name__ == \"__main__\":\n    print(check_days_in_month(\"July\"))\n    print(check_days_in_month(\"November\"))\n    print(check_days_in_month(\"December\"))",
    "def is_month_28(month):\n    \"\"\"\n    >>> is_month_28(\"February\")\n    True\n    >>> is_month_28(\"December\")\n    False\n    \"\"\"\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return month_days.get(month) == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from datetime import date\n\n\ndef days_in_month(month_name):\n    return date(2020, getattr(date, month_name), 1).days_in_month\n\n\nif __name__ == \"__main__\":\n    print(days_in_month(\"January\"))\n    print(days_in_month(\"February\"))",
    "def check_days_in_month(month: str) -> bool:\n    \"\"\"\n    >>> check_days_in_month(\"June\")\n    True\n    >>> check_days_in_month(\"February\")\n    False\n    >>> check_days_in_month(\"March\")\n    True\n    \"\"\"\n    months_with_28_days = (\"February\", \"April\", \"June\", \"September\", \"November\")\n    return month in months_with_28_days\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_month_28_days(month):\n    return month in (\"April\", \"June\", \"September\", \"November\")\n\ndef main():\n    month = input(\"Enter a month name: \")\n    if check_month_28_days(month):\n        print(\"{} contains 28 days.\".format(month))\n    else:\n        print(\"{} doesn't contain 28 days.\".format(month))\n\nif __name__ == \"__main__\":\n    main()",
    "def is_month_28(month_name):\n    return month_name == \"February\"\n\n\ndef main():\n    print(is_month_28(\"February\"))\n    print(is_month_28(\"June\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_days(month: str) -> bool:\n    days_in_months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30, \"July\": 31,\n                      \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    return days_in_months[month] == 28\n\n\nif __name__ == \"__main__\":\n    print(check_days(\"February\"))",
    "# This is the function from question\ndef is_leap_year(year):\n    \"\"\"Check if year is a leap year or not.\"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0\n\n\ndef days_in_month(month_name):\n    \"\"\"Return number of days in a month.\"\"\"\n    month_name = month_name.lower()\n    days_in_month_dict = {\n        'january': 31, 'february': 28,\n        'march': 31, 'april': 30,\n        'may': 31, 'june': 30,\n        'july': 31, 'august': 31,\n        'september': 30, 'october': 31,\n        'november': 30, 'december': 31\n    }\n\n    if month_name in days_in_month_dict:\n        if month_name == 'february' and is_leap_year(year):\n            return 29\n        return days_in_month_dict[month_name]\n\n    return -1\n\n\nif __name__ == '__main__':\n    months = ('january', 'february', 'march', 'april', 'may', 'june', 'july',\n              'august', 'september', 'october', 'november', 'december')\n\n    year = int(input('Enter year: '))\n\n    for month in months:\n        print(f'{month.capitalize()} has {days_in_month(month)} days.')",
    "def check_days(month: str) -> bool:\n    month = month.lower()\n    if month in (\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"):\n        return True\n    elif month in (\"april\", \"june\", \"september\", \"november\"):\n        return False\n    elif month == \"february\":\n        return False\n    return None\n\n\nif __name__ == \"__main__\":\n    assert check_days(\"January\") == True, \"January has 31 days\"\n    assert check_days(\"March\") == True, \"March has 31 days\"\n    assert check_days(\"June\") == False, \"June has 30 days\"\n    assert check_days(\"September\") == False, \"September has 30 days\"\n    assert check_days(\"July\") == True, \"July has 31 days\"\n    assert check_days(\"April\") == False, \"April has 30 days\"\n    assert check_days(\"October\") == True, \"October has 31 days\"\n    assert check_days(\"February\") == False, \"February has 28 days\"\n    assert check_days(\"December\") == True, \"December has 31 days\"\n    assert check_days(\"Nopember\") == None, \"Nopember is not a valid month\"\n    print(\"All test cases passed!\")",
    "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef is_28_days_month(month_name):\n    month_name = month_name.lower()\n    month_name_to_number = {\n        \"january\": 1,\n        \"february\": 2,\n        \"march\": 3,\n        \"april\": 4,\n        \"may\": 5,\n        \"june\": 6,\n        \"july\": 7,\n        \"august\": 8,\n        \"september\": 9,\n        \"october\": 10,\n        \"november\": 11,\n        \"december\": 12\n    }\n    month = month_name_to_number[month_name]\n    if month == 2:\n        return True\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_28_days_month(\"January\"))\n    print(is_28_days_month(\"June\"))\n    print(is_28_days_month(\"February\"))\n    print(is_28_days_month(\"December\"))",
    "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef month_28(month: str) -> bool:\n    month_dict = {\n        \"january\": 28,\n        \"march\": 31,\n        \"may\": 31,\n        \"july\": 30,\n        \"august\": 31,\n        \"october\": 31,\n        \"december\": 30\n    }\n    return month_dict[month.lower()] == 28",
    "def month_28(month_name: str) -> bool:\n    \"\"\"\n    >>> month_28(\"January\")\n    True\n    >>> month_28(\"February\")\n    False\n    >>> month_28(\"March\")\n    True\n    >>> month_28(\"April\")\n    True\n    >>> month_28(\"May\")\n    True\n    >>> month_28(\"June\")\n    True\n    >>> month_28(\"July\")\n    True\n    >>> month_28(\"August\")\n    True\n    >>> month_28(\"September\")\n    True\n    >>> month_28(\"October\")\n    True\n    >>> month_28(\"November\")\n    True\n    >>> month_28(\"December\")\n    True\n    \"\"\"\n    month = {\n        \"January\": True,\n        \"February\": False,\n        \"March\": True,\n        \"April\": True,\n        \"May\": True,\n        \"June\": True,\n        \"July\": True,\n        \"August\": True,\n        \"September\": True,\n        \"October\": True,\n        \"November\": True,\n        \"December\": True,\n    }\n    return month[month_name]\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    month = input(\"Enter month name: \").title()\n    print(month_28(month))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_28_days_month(month: str) -> bool:\n    \"\"\"\n    >>> is_28_days_month('January')\n    True\n    >>> is_28_days_month('December')\n    False\n    \"\"\"\n    return month in (\"February\", \"April\", \"June\", \"September\", \"November\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_month(month):\n    if month.lower() == \"february\":\n        return 28\n    else:\n        return 30\n\nif __name__ == '__main__':\n    print(check_month(\"February\"))",
    "def is_month_has_28_days(month):\n    month_names = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ]\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return months[month] == 28\n\nprint(is_month_has_28_days(\"January\"))\nprint(is_month_has_28_days(\"February\"))\nprint(is_month_has_28_days(\"March\"))",
    "def days_in_month(month: str) -> bool:\n    \"\"\"\n    >>> days_in_month('February')\n    True\n    >>> days_in_month('February2020')\n    False\n    >>> days_in_month('February2021')\n    False\n    >>> days_in_month('February2022')\n    False\n    \"\"\"\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n\n    return month_days.get(month) == 28\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def month_28(month: str) -> bool:\n    months_28 = (\"February\", \"April\", \"June\", \"September\", \"November\")\n    return month in months_28\n\n\nif __name__ == \"__main__\":\n    assert month_28(\"February\") is True, \"February is 28 days\"\n    assert month_28(\"June\") is True, \"June is 28 days\"\n    assert month_28(\"July\") is False, \"July is 31 days\"",
    "from datetime import date\n\n\ndef is_month_28(month):\n    return date(2018, month, 1).day == 28\n\n\nif __name__ == \"__main__\":\n    assert is_month_28(1) is False\n    assert is_month_28(2) is False\n    assert is_month_28(3) is False\n    assert is_month_28(4) is False\n    assert is_month_28(5) is False\n    assert is_month_28(6) is False\n    assert is_month_28(7) is False\n    assert is_month_28(8) is False\n    assert is_month_28(9) is False\n    assert is_month_28(10) is False\n    assert is_month_28(11) is False\n    assert is_month_28(12) is False\n    assert is_month_28(13) is False  # IndexError: month must be in 1..12\n    assert is_month_28(14) is False  # IndexError: month must be in 1..12",
    "def check_month(month):\n    months = {\n        \"January\": 28,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return months[month]\n\n\ndef main():\n    print(check_month(\"June\"))\n    print(check_month(\"July\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from datetime import date\n\nmonths = [\"January\", \"February\"]\n\n\ndef check_days(month):\n    if month in months:\n        return 28\n    return 31\n\n\ndef main():\n    month = input(\"Enter a month name: \").capitalize()\n    print(f\"{month} has {check_days(month)} days\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_days(month):\n    month_days = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30,\n                  'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    if month_days[month] == 28:\n        return True\n    else:\n        return False\n\n\nprint(check_days(\"February\"))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}