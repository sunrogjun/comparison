{
  "problem": {
    "task_id": "MBPP/129",
    "prompt": "Write a function to calculate magic square.",
    "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
    "test_list": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ],
    "challenge_test_list": [],
    "problem_id": 118
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\n\ndef is_magic_square(arr: list) -> bool:\n    n = len(arr)\n\n    # Check for perfect square\n    if math.sqrt(n) % 1 != 0:\n        return False\n\n    # Check for magic square\n    sum_arr = sum(arr)\n\n    row_sum, col_sum = 0, 0\n    for i in range(n):\n        row_sum += arr[i][i]\n        col_sum += arr[i][n - 1 - i]\n\n    if row_sum != sum_arr or col_sum != sum_arr:\n        return False\n\n    # Check for sum of diagonals\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += arr[i][i]\n\n    if diag_sum != sum_arr:\n        return False\n\n    # Check for sum of antidiagonals\n    antidiag_sum = 0\n    for i in range(n):\n        antidiag_sum += arr[i][n - 1 - i]\n\n    if antidiag_sum != sum_arr:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_magic_square([[1, 5, 9], [5, 5, 5], [9, 5, 1]])\n    assert not is_magic_square([[1, 2, 9], [2, 5, 5], [9, 5, 1]])\n    assert is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]])",
    "from typing import List\n\n\ndef is_magic_square(input_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks whether a given square matrix is a magic square or not.\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]])\n    True\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]])\n    False\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]])\n    False\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]])\n    False\n    \"\"\"\n    return (\n        is_magic_sum_of_diagonals(input_matrix)\n        and is_magic_sum_of_rows(input_matrix)\n        and is_magic_sum_of_columns(input_matrix)\n    )\n\n\ndef is_magic_sum_of_diagonals(input_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks whether the sum of the diagonals of a given square matrix is a magic number or not.\n    >>> is_magic_sum_of_diagonals([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]])",
    "def is_magic_square(arr):\n    # Check if the sum of all elements in each row is the same\n    for row in arr:\n        if sum(row) != 15:\n            return False\n    # Check if the sum of all elements in each column is the same\n    for col in range(0, 3):\n        if sum(row[col] for row in arr) != 15:\n            return False\n    # Check if the sum of all elements in the diagonal is the same\n    if sum([arr[i][i] for i in range(0, 3)]) != 15:\n        return False\n    # Check if the sum of all elements in the anti-diagonal is the same\n    if sum([arr[i][2 - i] for i in range(0, 3)]) != 15:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    arr1 = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    arr2 = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    arr3 = [[6, 1, 8], [7, 5, 3], [2, 9, 4]]\n    arr4 = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    arr5 = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    arr6 = [[6, 1, 8], [7, 5, 3], [2, 9, 4]]\n    arr7 = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    arr8 = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(is_magic_square(arr1))\n    print(is_magic_square(arr2))\n    print(is_magic_",
    "def is_magic_square(square: list[list[int]]) -> bool:\n    \"\"\"\n    This function will check if the given square is a magic square or not.\n\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    True\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    >>> is_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    \"\"\"\n    if len(square) != len(square[0]):\n        return False\n    rows = [0] * len(square)\n    cols = [0] * len(square)\n    diag = 0\n    anti_diag = 0\n\n    for i in range(len(square)):\n        for j in range(len(square)):\n            rows[i] += square[i][j]\n            cols[j] += square[i][j]\n            diag += square[i][j] if i == j else 0\n            anti_diag += square[i][-i - 1] if i == j else 0\n\n    return (\n        all([rows[i] == rows[0] for i in range(len(rows))])\n        and all([cols[i] == cols[0] for i in range(len(cols))",
    "from collections import defaultdict\n\n\ndef magic_square(n):\n    \"\"\"\n    Finds a magic square of n x n size.\n    :param n: size of magic square\n    :return: magic square\n    \"\"\"\n    magic_square_table = defaultdict(int)\n\n    # Calculate all the possible magic squares\n    for i in range(1, n + 1):\n        magic_square_table[(i, i)] = 1\n        magic_square_table[(i, n - i + 1)] = 1\n        magic_square_table[(n - i + 1, i)] = 1\n        magic_square_table[(n - i + 1, n - i + 1)] = 1\n\n        magic_square_table[(i, (i + n) // 2)] = 1\n        magic_square_table[((i + n) // 2, i)] = 1\n        magic_square_table[((i + n) // 2, (i + n) // 2)] = 1\n        magic_square_table[(n - (i + n) // 2, (i + n) // 2)] = 1\n\n    magic_square_table[(n // 2, n // 2)] = 1\n    magic_square_table[(n // 2, n - n // 2)] = 1\n    magic_square_table[(n - n // 2, n // 2)] = 1\n    magic_square_table[(n - n // 2, n - n // 2)] = 1\n\n    # Calculate the difference between the sum of each row and column\n    diff = [0] * n\n\n    for i in range(1, n + 1):\n        diff[i - 1] = sum([magic_square_table[(i, j)] for j in range(1, n + 1)]) - sum(\n            [magic_square_table[(j, i)] for j in range(1, n + 1)]\n        )\n\n    # Check if the difference is zero for all rows and columns\n    if all(diff[i] == 0 for i in range(n)):",
    "def is_magic_square(array: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the given array is a magic square.\n    \"\"\"\n\n    rows = len(array)\n    cols = len(array[0])\n\n    for i in range(rows):\n        row_sum = 0\n        col_sum = 0\n\n        for j in range(cols):\n            row_sum += array[i][j]\n            col_sum += array[j][i]\n\n        if row_sum != sum(array[0]):\n            return False\n\n        if col_sum != sum(array[0]):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    array = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    assert is_magic_square(array)\n\n    array = [\n        [4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6]\n    ]\n\n    assert not is_magic_square(array)\n\n    array = [\n        [8, 1, 6],\n        [3, 5, 7],\n        [4, 9, 2]\n    ]\n\n    assert is_magic_square(array)",
    "def is_magic_square(magic_square):\n    rows = [0, 0, 0]\n    cols = [0, 0, 0]\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n\n    for row in magic_square:\n        for element in row:\n            if element > 9 or element < 1:\n                return False\n            rows[row.index(element)] += element\n            cols[row.index(element)] += element\n\n    for i in range(3):\n        diagonal_sum += magic_square[i][i]\n        anti_diagonal_sum += magic_square[2 - i][i]\n\n    if not (rows[0] == rows[1] == rows[2] == rows[0] + rows[1] + rows[2]):\n        return False\n\n    if not (cols[0] == cols[1] == cols[2] == cols[0] + cols[1] + cols[2]):\n        return False\n\n    if not (diagonal_sum == anti_diagonal_sum == diagonal_sum + anti_diagonal_sum):\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    magic_square = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(is_magic_square(magic_square))\n\n    magic_square = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(magic_square))\n\n    magic_square = [[6, 7, 2], [1, 5, 9], [8, 3, 4]]\n    print(is_magic_square(magic_square))",
    "from typing import List\n\n\ndef is_magic_square(square: List[List[int]]) -> bool:\n    \"\"\"\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 10]])\n    False\n    \"\"\"\n    # Check magic square condition\n    return (\n        # Diagonal sum\n        square[0][0] + square[1][1] + square[2][2] ==\n        square[0][2] + square[1][1] + square[2][0] ==\n        # Rows and columns sum\n        square[0][0] + square[0][1] + square[0][2] ==\n        square[1][0] + square[1][1] + square[1][2] ==\n        square[2][0] + square[2][1] + square[2][2] ==\n        # Diagonal sum\n        square[0][0] + square[1][0] + square[2][0] ==\n        square[0][1] + square[1][1] + square[2][1] ==\n        square[0][2] + square[1][2] + square[2][2]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n):\n    m = n * n\n    magic_square = [[0] * n for _ in range(n)]\n    i = j = k = 1\n    while k <= m:\n        if 0 <= i < n and 0 <= j < n and 0 <= magic_square[i][j] < m:\n            k = magic_square[i][j] + 1\n            i, j = i + 1, j + 2\n        else:\n            i, j = i - 1, j - 2\n            if magic_square[i][j] >= m:\n                i, j = i + 1, j + 2\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    magic_square = magic_square(n)\n    for i in range(n):\n        print(*magic_square[i])",
    "def is_magic_square(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    count = [0 for _ in range(len(matrix))]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            count[matrix[i][j] - 1] += 1\n\n    return len(matrix) in count and all(count[i] == count[0] for i in range(len(matrix)))\n\n\ndef main():\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(\"Answer: {}\" .format(is_magic_square(matrix)))\n\n\nif __name__ == '__main__':\n    main()",
    "def magic_square(n):\n    # Create a 2D array\n    magic = [[0 for i in range(n)] for j in range(n)]\n\n    # Initialize value of row and column\n    row = n // 2\n    col = 0\n\n    num = n * n\n    i = 1\n\n    # Fill the magic square\n    # by placing elements in diagonal way\n    while i <= num:\n        # place a number in diagonal way\n        magic[row][col] = i\n        i += 1\n\n        # find row and column after\n        # placing an element in diagonal way\n        row, col = (row + 1) % n, (col + 1) % n\n\n        # if diagonal way is filled\n        # reverse the order of row and column\n        if not row and not col:\n            row, col = n - 1, 0\n        else:\n            row, col = row, col\n\n    # return the magic square\n    return magic\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the size of magic square: \"))\n    magic = magic_square(n)\n    print(\"Magic square is: \")\n    for i in range(n):\n        for j in range(n):\n            print(magic[i][j], end=\" \")\n        print()",
    "def is_magic_square(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    row_sum = col_sum = matrix[0][0] + matrix[0][1] + matrix[0][2]\n    if not (len(matrix) == len(matrix[0]) == 3):\n        return False\n    for i in range(3):\n        if sum(matrix[i]) != row_sum:\n            return False\n        if sum(matrix[j][i] for j in range(3)) != col_sum:\n            return False\n    return True\n\n\nmatrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nprint(is_magic_square(matrix))",
    "from typing import List\n\n\ndef is_magic_square(arr: List[List[int]]) -> bool:\n    \"\"\"\n    O(n^2) time | O(n^2) space\n    \"\"\"\n\n    def is_row_magic(row_idx: int) -> bool:\n        row = arr[row_idx]\n        return sum(row) == sum(arr[0])\n\n    def is_col_magic(col_idx: int) -> bool:\n        return sum(arr[i][col_idx] for i in range(3)) == sum(arr[0])\n\n    def is_diag_magic(diag_idx: int) -> bool:\n        if diag_idx == 0:\n            return sum(arr[i][i] for i in range(3)) == sum(arr[0])\n        return sum(arr[i][2 - i] for i in range(3)) == sum(arr[0])\n\n    return all(\n        is_row_magic(row_idx) and is_col_magic(col_idx) and is_diag_magic(diag_idx)\n        for row_idx in range(3)\n        for col_idx in range(3)\n        for diag_idx in range(2)\n    )\n\n\nif __name__ == \"__main__\":\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    assert is_magic_square(arr) == True\n\n    arr = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    assert is_magic_square(arr) == False",
    "def magic_square(n):\n    \"\"\"\n    Generate magic square of size n.\n\n    :param n: size of magic square\n    :return: magic square\n    \"\"\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be even\")\n\n    # Generate initial square\n    square = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Fill in values\n    for i in range(n):\n        for j in range(n):\n            square[i][j] = ((i * n + j) + (n * n + 1)) // 2\n\n    # Find the minimum value\n    min_val = min([min(row) for row in square])\n\n    # Adjust values\n    for i in range(n):\n        for j in range(n):\n            square[i][j] -= min_val\n\n    return square\n\nif __name__ == \"__main__\":\n    size = 3\n    square = magic_square(size)\n    for row in square:\n        print(row)",
    "def is_magic_square(matrix):\n    row_sums = [0] * len(matrix)\n    col_sums = [0] * len(matrix[0])\n    total_sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            row_sums[i] += matrix[i][j]\n            col_sums[j] += matrix[i][j]\n            if i == j:\n                total_sum += matrix[i][j]\n    if row_sums != col_sums:\n        return False\n    if len(matrix) == len(matrix[0]) and row_sums[0] == total_sum:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    assert is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) == True\n    assert is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == False",
    "def is_magic_square(arr):\n    return is_sum_equal(arr) and is_sum_equal_each_row(arr) and is_sum_equal_each_column(arr) and is_sum_equal_each_diagonal(arr)\n\n\ndef is_sum_equal(arr):\n    \"\"\"Check if the sum of the array is equal.\"\"\"\n    return sum(arr) == sum(arr[0])\n\n\ndef is_sum_equal_each_row(arr):\n    \"\"\"Check if the sum of each row is equal.\"\"\"\n    return all(sum(row) == sum(arr[0]) for row in arr)\n\n\ndef is_sum_equal_each_column(arr):\n    \"\"\"Check if the sum of each column is equal.\"\"\"\n    return all(sum([row[i] for row in arr]) == sum(arr[0]) for i in range(len(arr[0])))\n\n\ndef is_sum_equal_each_diagonal(arr):\n    \"\"\"Check if the sum of each diagonal is equal.\"\"\"\n    return (sum([arr[i][i] for i in range(len(arr))]) == sum(arr[0])) and (sum([arr[i][len(arr) - i - 1] for i in range(len(arr))]) == sum(arr[0]))\n\n\ndef main():\n    arr = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(arr))\n    arr = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import unittest\n\n\ndef is_magic_square(magic_square):\n    \"\"\"\n    :param magic_square: list of lists\n    :return: boolean\n    \"\"\"\n    if not magic_square:\n        return False\n\n    if len(magic_square) != len(magic_square[0]):\n        return False\n\n    sum_of_rows = [sum(row) for row in magic_square]\n    sum_of_columns = [sum(column) for column in zip(*magic_square)]\n    sum_of_diagonal_1 = sum([magic_square[i][i] for i in range(len(magic_square))])\n    sum_of_diagonal_2 = sum([magic_square[i][len(magic_square) - 1 - i] for i in range(len(magic_square))])\n\n    return (\n        sum_of_rows == sum_of_columns == [sum_of_diagonal_1, sum_of_diagonal_2]\n        and len(magic_square) == len(set(sum_of_rows))\n    )\n\n\nclass TestMagicSquare(unittest.TestCase):\n\n    def test_magic_square(self):\n        self.assertTrue(is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]]))\n        self.assertTrue(is_magic_square([[8, 3, 4], [1, 5, 9], [6, 7, 2]]))\n        self.assertTrue(is_magic_square([[6, 1, 8], [7, 2, 5], [4, 9, 3]]))\n        self.assertFalse(is_magic_square([[6, 1, 8], [7, 2, 5], [4, 9, 2]]))\n        self.assertFalse(is_magic_square([[6, 1, 8], [7, 2, 5], [4, 9, 0]]))",
    "class MagicSquare:\n    def __init__(self, n):\n        self.n = n\n        self.magic_square = [[0] * n for i in range(n)]\n\n    def is_magic_square(self):\n        \"\"\"\n        Check if the given square is a magic square\n        \"\"\"\n        return self._is_magic_square() and self._is_row_sum_equal() and self._is_col_sum_equal()\n\n    def _is_magic_square(self):\n        \"\"\"\n        Check if the given square is a magic square\n        \"\"\"\n        row_sum = col_sum = (self.n * (self.n ** 2 + 1) / 2)\n        for row in range(self.n):\n            for col in range(self.n):\n                if self.magic_square[row][col] != row_sum:\n                    return False\n                row_sum -= self.n\n            col_sum -= self.n\n\n        return True\n\n    def _is_row_sum_equal(self):\n        \"\"\"\n        Check if the row sum is equal for all the rows\n        \"\"\"\n        row_sum = self.n * (self.n ** 2 + 1) / 2\n        for row in range(self.n):\n            for col in range(self.n):\n                if self.magic_square[row][col] != row_sum:\n                    return False\n            row_sum -= self.n\n\n        return True\n\n    def _is_col_sum_equal(self):\n        \"\"\"\n        Check if the column sum is equal for all the columns\n        \"\"\"\n        col_sum = self.n * (self.n ** 2 + 1) / 2\n        for col in range(self.n):\n            for row in range(self.n):\n                if self.magic_square[row][col] != col_sum:\n                    return False\n            col_sum -= self.n\n\n        return True\n\n\ndef main():\n    n = 3\n    magic_square = MagicSquare(n)\n    magic_square.magic_square[0][",
    "def is_magic(arr):\n    if len(arr) != 3:\n        return False\n\n    if len(arr[0]) != 3:\n        return False\n\n    sum_diagonal_1 = 0\n    sum_diagonal_2 = 0\n    sum_row = 0\n    sum_col = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            sum_diagonal_1 += arr[i][j]\n            sum_diagonal_2 += arr[j][i]\n            sum_row += arr[i][j]\n            sum_col += arr[j][i]\n\n        if sum_row != sum_col:\n            return False\n        sum_row = 0\n        sum_col = 0\n\n    if sum_diagonal_1 != sum_diagonal_2:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    arr = [[4, 9, 2],\n           [3, 5, 7],\n           [8, 1, 6]]\n    assert is_magic(arr) is True\n\n    arr = [[8, 1, 6],\n           [3, 5, 7],\n           [4, 9, 2]]\n    assert is_magic(arr) is False",
    "def is_magic_square(square):\n    # Check if the sum of each row, column and diagonals are equal\n    row_sum = [sum(i) for i in square]\n    col_sum = [sum([square[j][i] for j in range(len(square))]) for i in range(len(square))]\n    diag_sum = [square[i][i] + square[len(square) - i - 1][i] for i in range(len(square))]\n\n    return (len(set(row_sum)) == 1) and (len(set(col_sum)) == 1) and (len(set(diag_sum)) == 1)\n\nif __name__ == '__main__':\n    square = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(square))",
    "import unittest\n\n\ndef is_magic_square(square):\n    # row, col, diagonal\n    row_sum = col_sum = diagonal_sum = 0\n    for row in square:\n        row_sum += sum(row)\n    for col in zip(*square):\n        col_sum += sum(col)\n    diagonal_sum = sum([square[i][i] for i in range(len(square))])\n    if row_sum == col_sum == diagonal_sum:\n        return True\n    return False\n\n\nclass TestSuite(unittest.TestCase):\n\n    def setUp(self):\n        self.test_cases = [\n            ([[4, 9, 2], [3, 5, 7], [8, 1, 6]], True),\n            ([[8, 1, 6], [3, 5, 7], [4, 9, 2]], False),\n            ([[6, 7, 2], [1, 5, 9], [3, 4, 8]], False),\n        ]\n\n    def test_is_magic_square(self):\n        for test_case, expected_result in self.test_cases:\n            self.assertEqual(is_magic_square(test_case), expected_result)\n\n\nif __name__ == \"__main__\":\n\n    unittest.main()",
    "def magic_square(n):\n    \"\"\"\n    :param n: number of rows and columns\n    :return: the magic square\n    \"\"\"\n    pass",
    "from typing import List\n\n\ndef magic_square(n: int) -> List[List[int]]:\n    \"\"\"\n    :param n: size of the square\n    :return: a magic square of size n\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    # check the input\n    if n < 3 or n % 2 != 1:\n        raise ValueError('Input must be a positive odd number.')\n\n    # init variables\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n\n    # find the middle of the square\n    middle = n // 2\n\n    # fill the middle value\n    magic_square[middle][middle] = 1\n\n    # start filling the square\n    # start from the middle of the square\n    row, col = middle, middle\n\n    # fill the square in clockwise direction\n    num = 2\n\n    while num <= n ** 2:\n        # check the current position\n        # if row is at the edge\n        if row == 0:\n            # move to the next column\n            col -= 1\n        # if row is at the middle\n        elif row == middle and col == middle:\n            # move to the next row\n            row += 1\n        # if row is at the top\n        elif row == n - 1:\n            # move to the next column\n            col -= 1\n        # if col is at the edge\n        elif col == n - 1:\n            # move to the next row\n            row -= 1\n        # if col is at the middle\n        elif row == middle and col == middle:\n            # move to the next row\n            row += 1\n        # if col is at the left\n        elif col == 0:\n            # move to the next row\n            row -= 1\n\n        # fill the square\n        magic_square[row][col] = num\n\n        # move to the next position\n        num += 1\n\n        # check if it is a magic square\n        if (\n            sum(row) == sum(magic_square[0])\n            and sum(col) == sum(magic_square[",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[2, 9, 4, 7], [12, 1, 6, 10], [11, 8, 3, 16], [15, 14, 13, 5]]\n    \"\"\"\n    magic_square = []\n    row = [0] * n\n    magic_square.append(row)\n    row = [0] * (n + 1)\n    magic_square.append(row)\n    magic_square.append(row)\n    magic_square.append(row)\n\n    # Set the first and last row\n    magic_square[0][n // 2] = 5\n    magic_square[-1][n // 2] = 13\n    magic_square[-1][-1] = 1\n    magic_square[0][-1] = 12\n    magic_square[n // 2][-1] = 3\n    magic_square[n // 2][0] = 10\n\n    for i in range(1, n // 2 + 1):\n        magic_square[i][i] = 1\n        magic_square[-i][-i] = 15\n        magic_square[-i][i] = 2\n        magic_square[i][-i] = 6\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import numpy as np\n\ndef magic_square(n):\n    \"\"\"\n    n: an integer\n    return: a magic square of size 2n\n    \"\"\"\n    # Your code here\n    m = np.zeros((n, n), dtype=np.int)\n    i = j = n // 2\n    k = 1\n    while k <= n * n:\n        if j == -1 and i == n:\n            i = 0\n            j = n - 2\n        elif i < 0 and j >= n:\n            j = n - 1\n            i = n - 1\n            k -= 1\n        m[i][j] = k\n        k += 1\n        i -= 1\n        j += 1\n    return m\n\n\ndef test_magic_square():\n    expected_output = np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n    assert (magic_square(3) == expected_output).all()\n    print('Passed test')\n\n\nif __name__ == '__main__':\n    test_magic_square()",
    "from typing import List\n\n\ndef is_magic_square(arr: List[List[int]]) -> bool:\n    \"\"\"\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n    True\n    >>> is_magic_square([[6, 1, 8], [7, 5, 3], [2, 9, 4]])\n    False\n    \"\"\"\n    # sum of each row and column should be equal\n    for i in range(len(arr)):\n        row_sum, col_sum = 0, 0\n        for j in range(len(arr)):\n            row_sum += arr[i][j]\n            col_sum += arr[j][i]\n        if row_sum != col_sum:\n            return False\n\n    # sum of each diagonal should be equal\n    diagonal_sum = 0\n    for i in range(len(arr)):\n        diagonal_sum += arr[i][i]\n\n    return diagonal_sum == sum(arr[i][i] for i in range(len(arr)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_magic_square(arr):\n    n = len(arr)\n\n    # check if its a square\n    if n * n != len(arr):\n        return False\n\n    # check if its a valid row sum\n    row_sum = arr[0][0] + arr[1][1] + arr[2][2]\n    for i in range(n):\n        if (arr[i][0] + arr[i][1] + arr[i][2]) != row_sum:\n            return False\n\n    # check if its a valid column sum\n    col_sum = arr[0][0] + arr[1][1] + arr[2][2]\n    for i in range(n):\n        if (arr[0][i] + arr[1][i] + arr[2][i]) != col_sum:\n            return False\n\n    # check if its a valid diagonal sum\n    diag_sum = arr[0][0] + arr[1][1] + arr[2][2]\n    if (arr[0][0] + arr[1][1] + arr[2][2]) != diag_sum:\n        return False\n\n    # check if its a valid diagonal sum\n    diag_sum = arr[0][2] + arr[1][1] + arr[2][0]\n    if (arr[0][2] + arr[1][1] + arr[2][0]) != diag_sum:\n        return False\n\n    return True\n\n\ndef main():\n    arr = [\n        [1, 5, 9],\n        [4, 2, 6],\n        [7, 3, 8]\n    ]\n    print(is_magic_square(arr))\n\n    arr = [\n        [1, 5, 9],\n        [4, 2, 6],\n        [7, 3, 8]\n    ]\n    print(is_magic_square(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "def check_magic_square(square: list) -> bool:\n    \"\"\"\n    Checks if the given square is a magic square.\n    >>> check_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    True\n    >>> check_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    >>> check_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    >>> check_magic_square([[16, 3, 2, 13], [5, 11, 10, 8], [9, 0, 12, 4], [15, 7, 6, 1]])\n    False\n    \"\"\"\n    # check sum of each row and column\n    for row in square:\n        if sum(row) != 46:\n            return False\n\n    for column in zip(*square):\n        if sum(column) != 46:\n            return False\n\n    # check sum of diagonal\n    if square[0][0] + square[1][1] + square[2][2] != 46 or square[0][2] + square[1][1] + square[2][0] != 46:\n        return False\n\n    return True\n\n\ndef magic_square(n: int) -> list:\n    \"\"\"\n    Returns a magic square of size n*n.\n    >>> magic_square(3)\n    [[16, 3, 2], [5, 11, 10], [9, 0, 12]]\n    >>> magic_square(",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    :param n: size of the square\n    :return: list of square of size n\n\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[2, 9, 4, 3], [7, 5, 1, 6], [8, 6, 3, 1], [5, 8, 9, 7]]\n    \"\"\"\n    magic = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Setting the starting number\n    num = n * n\n\n    # Filling the diagonal elements\n    for i in range(n):\n        magic[i][i] = num\n        num += n\n\n    # Filling the other diagonal elements\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            magic[i][j] = num\n            num += n\n\n    # Filling the remaining elements\n    for i in range(n):\n        for j in range(n):\n            if not magic[i][j]:\n                magic[i][j] = num\n                num += n\n\n    return magic\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_magic_square(arr):\n    \"\"\"\n    :param arr: list of list of integers\n    :return: whether the given array is magic square or not\n    \"\"\"\n\n    if len(arr) != 3:\n        return False\n\n    for i in range(len(arr)):\n        if len(arr[i]) != 3:\n            return False\n\n    # sum of all elements in each row, column and diagonal should be same\n    row_sum = 0\n    col_sum = 0\n    for i in range(len(arr)):\n        row_sum += arr[i][0]\n        col_sum += arr[0][i]\n\n    diagonal_sum = arr[0][0] + arr[1][1] + arr[2][2]\n    diagonal_sum2 = arr[0][2] + arr[1][1] + arr[2][0]\n\n    if row_sum != col_sum or diagonal_sum != diagonal_sum2:\n        return False\n\n    # sum of all elements in each row, column and diagonal should be same\n    row_sum = 0\n    col_sum = 0\n    for i in range(len(arr)):\n        row_sum += arr[i][0] + arr[i][1] + arr[i][2]\n        col_sum += arr[0][i] + arr[1][i] + arr[2][i]\n\n    diagonal_sum = arr[0][0] + arr[1][1] + arr[2][2]\n    diagonal_sum2 = arr[0][2] + arr[1][1] + arr[2][0]\n\n    if row_sum != col_sum or diagonal_sum != diagonal_sum2:\n        return False\n\n    return True\n\n\ndef main():\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(\"Is magic square: \" + str(is_magic_square(arr)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from itertools import product\n\n\ndef magic_square(n):\n    \"\"\"Calculate magic square.\n\n    :param n: size of magic square\n    :type n: int\n    :return: magic square\n    :rtype: list\n    \"\"\"\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    size = n * n\n    vals = list(range(1, size + 1))\n    center = (n - 1) // 2\n    magic_square[center][center] = size\n    for i in range(size - 1):\n        vals.remove(magic_square[center][center])\n        for row, col in product(range(n), repeat=2):\n            if magic_square[row][col] == 0:\n                magic_square[row][col] = vals[i]\n                break\n    return magic_square\n\n\ndef test_magic_square():\n    \"\"\"\n    >>> test_magic_square()\n    True\n    \"\"\"\n    n = 3\n    expected_magic_square = [\n        [16, 3, 2, 13, 8, 1, 10, 11, 15],\n        [4, 11, 6, 1, 12, 14, 9, 7, 5],\n        [12, 9, 14, 3, 5, 15, 10, 2, 8],\n    ]\n    assert magic_square(n) == expected_magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n):\n    # type: (int) -> list\n    \"\"\"\n    Magic square of n.\n    :param n: size of the square.\n    :return: list of list containing magic square.\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[15, 12, 10, 5], [16, 1, 9, 13], [14, 3, 8, 2], [11, 7, 6, 4]]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[4, 1], [3, 2]]\n    if n == 3:\n        return [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n\n    middle = (n * (n ** 2 + 1)) / 2\n    magic_square[0][0] = int(middle) - (n * (n - 1) / 2)\n\n    i, j = 0, 0\n    for val in range(n ** 2, 0, -1):\n        if i == -1:\n            i = n - 1\n        if j == n:\n            j = 0\n        if magic_square[i][j]:\n            i -= 1\n            j += 1\n            continue\n        magic_square[i][j] = val\n        i += 1\n        j += 1\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef is_magic_square(square: List[List[int]]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(square)\n    row_sums: List[int] = [0] * n\n    col_sums: List[int] = [0] * n\n    total_sum: int = 0\n\n    for i in range(n):\n        row_sums[i] = sum(square[i])\n        col_sums[i] = sum([row[i] for row in square])\n        total_sum += square[i][i]\n\n    return (\n        row_sums == col_sums\n        and row_sums[0] == total_sum\n        and row_sums[0] == (n * (n ** 2 + 1) / 2)\n    )\n\n\nif __name__ == \"__main__\":\n    assert is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) is True\n    assert is_magic_square([[6, 1, 8], [7, 5, 3], [2, 9, 4]]) is False",
    "def is_magic(matrix):\n    sum_of_rows = []\n    sum_of_columns = []\n    sum_of_diagonal = matrix[0][0] + matrix[1][1] + matrix[2][2]\n    sum_of_anti_diagonal = matrix[2][0] + matrix[1][1] + matrix[0][2]\n\n    for row in matrix:\n        sum_of_rows.append(sum(row))\n\n    for i in range(len(matrix)):\n        sum_of_columns.append(sum([row[i] for row in matrix]))\n\n    if sum_of_rows != sum_of_columns:\n        return False\n    if sum_of_rows[0] != sum_of_diagonal or sum_of_rows[0] != sum_of_anti_diagonal:\n        return False\n    return True\n\n\ndef main():\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(\"Is magic: \", is_magic(matrix))\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(\"Is magic: \", is_magic(matrix))\n\n\nif __name__ == '__main__':\n    main()",
    "def magic_square(n):\n    \"\"\"\n    :param n: size of the magic square\n    :return: magic square\n    \"\"\"\n    square = [[0 for _ in range(n)] for _ in range(n)]\n    i = 1\n    j = n // 2\n\n    while i <= n ** 2:\n        if (i + j) % n == 0:\n            square[j][j] = i\n            i += 1\n            j -= 1\n        else:\n            square[j][j] = i\n            i += 1\n            j += 1\n\n    for i in range(n):\n        for j in range(n):\n            if square[i][j] == 0:\n                square[i][j] = (n ** 2 + 1 - i - j) % n + 1\n\n    return square\n\n\nif __name__ == \"__main__\":\n    size = int(input(\"Enter size of the magic square: \"))\n    magic_square(size)",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    :param n: size of the square\n    :return: 2d list of magic square\n    \"\"\"\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    start = 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = start\n            start += n\n\n    middle = n * n\n    i = n // 2\n    j = n - 1\n\n    while start <= middle:\n        matrix[i][j] = start\n        start += n\n        i += 1\n        if i == n:\n            i = 0\n            j -= 1\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))",
    "def magic_square(size: int) -> list:\n    \"\"\"\n    :param size: size of the magic square\n    :return: magic square\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n\n    # start from top left corner\n    row, col = 0, 0\n    n = size * size\n\n    # enter numbers in magic square\n    for i in range(1, n + 1):\n        # if row == size - 1 and col == size - 1:  # check if reached last row and last column\n        #     row = 0\n        #     col = 0\n        #     magic_square[row][col] = i\n        #     row += 1\n        #     continue\n\n        if row == 0 and col == size - 1:  # check if reached last row and last column\n            row = 0\n            col = 0\n            magic_square[row][col] = i\n            row += 1\n            continue\n\n        if row == size - 1 and col == 0:  # check if reached last row and first column\n            row = 0\n            col = 0\n            magic_square[row][col] = i\n            col += 1\n            continue\n\n        if magic_square[row][col] != 0:  # if current cell is not empty\n            row += 1\n            if row == size:  # if reached last row\n                row = 0\n                col += 1\n                continue\n            continue\n\n        # if current cell is empty\n        magic_square[row][col] = i  # enter number in current cell\n\n        # find row and column for next number\n        row_next, col_next = row, col\n\n        if row_next == 0:  # if current row is 0\n            row_next = size - 1  # make row as last row\n        else:\n            row_next -= 1  # decrement row by 1\n\n        if col_next == size - 1:  # if current column is last column\n            col_next = 0  # make column as first column\n        else:\n            col_",
    "from typing import List\n\n\ndef magic_square(n: int) -> List[int]:\n    \"\"\"\n    :param n: size of magic square.\n    :return: a list of magic square with size n.\n    >>> magic_square(3)\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    >>> magic_square(4)\n    [[2, 9, 4, 7], [3, 5, 1, 8], [1, 6, 3, 5], [7, 8, 9, 4]]\n    >>> magic_square(5)\n    [[16, 3, 13, 10, 11], [1, 15, 4, 2, 12], [14, 8, 1, 6, 10], [13, 11, 12, 5, 3], [15, 6, 7, 14, 9]]\n    \"\"\"\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Fill the first row with n * (n ** 2 + 1) / 2\n    for i in range(n):\n        magic_square[0][i] = n * (n ** 2 + 1) / 2 - (n - i)\n\n    # Fill the first column with n * (n ** 2 + 1) / 2\n    for i in range(n):\n        magic_square[i][0] = n * (n ** 2 + 1) / 2 - (n - i)\n\n    # Fill the remaining squares\n    # Magic square is a symmetric matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square[i][j] = magic_square[i - 1][j - 1] - (n - i + 1) - (n - j + 1) + n ** 2\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest",
    "def check_magic_square(a):\n    \"\"\"\n    Checks if the given 2-D list is a magic square.\n    Magic square is a 2-D list with all elements equal.\n    \"\"\"\n    row_sums = [0] * len(a)\n    col_sums = [0] * len(a[0])\n    total_sum = 0\n    for row in range(len(a)):\n        for col in range(len(a[0])):\n            total_sum += a[row][col]\n            row_sums[row] += a[row][col]\n            col_sums[col] += a[row][col]\n\n    if total_sum != (len(a) * len(a[0])) or \\\n       any(row_sum != row_sums[0] for row_sum in row_sums) or \\\n       any(col_sum != col_sums[0] for col_sum in col_sums):\n        return False\n\n    return True\n\n\ndef magic_square(n):\n    \"\"\"\n    Returns the magic square of the given size.\n    Magic square is a 2-D list with all elements equal.\n    \"\"\"\n    if n % 2 != 1:\n        return None\n\n    a = [[0] * n for i in range(n)]\n    i = n // 2\n    j = n - 1\n    k = 1\n\n    while k <= n ** 2:\n        if i == -1:\n            i = n - 1\n        if j == n:\n            j = 0\n\n        if a[i][j] != 0:\n            j -= 1\n            continue\n\n        a[i][j] = k\n        k += 1\n        j += 1\n        i -= 1\n\n    return a\n\n\nif __name__ == \"__main__\":\n    print(\"Magic square:\")\n    magic_square_2 = magic_square(2)\n    magic_square_3 = magic_square(3)\n    magic_square_4 = magic_square(4)\n    magic_square_5 = magic_square(",
    "def is_magic_square(arr: list) -> bool:\n    \"\"\"\n    The sum of each row, column, and both diagonals should be equal to the same number.\n    The sum of the side length is 1+2+3+...+n = n(n+1)/2.\n    \"\"\"\n    n = len(arr)\n    side_length_sum = n * (n ** 2 + 1) / 2\n\n    row_sum = sum(arr[i][i] for i in range(n))\n    column_sum = sum(arr[i][i] for i in range(n))\n    diagonal_sum = sum(arr[i][i] for i in range(n))\n\n    return side_length_sum == row_sum == column_sum == diagonal_sum\n\n\nif __name__ == \"__main__\":\n    assert is_magic_square([[12, 1, 10], [4, 5, 8], [7, 6, 9]])\n    assert is_magic_square([[12, 1, 10], [4, 5, 8], [7, 6, 9]])\n    assert not is_magic_square([[12, 1, 10], [4, 5, 8], [7, 6, 9]])",
    "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    magic_square[n // 2][n // 2] = n * n // 2 + 1\n    i = n // 2\n    j = n // 2 - 1\n    count = n * n - 1\n    while count > 0:\n        if i < 0:\n            i = n - 1\n        if j < 0:\n            j = n - 1\n        magic_square[i][j] = count\n        count -= 1\n        i -= 1\n        j += 1\n    i = 0\n    j = n // 2\n    count = n * n - 1\n    while count > 0:\n        if i >= n:\n            i = 0\n        if j >= n:\n            j = 0\n        magic_square[i][j] = count\n        count -= 1\n        i += 1\n        j += 1\n    return magic_square\n\n\nmagic_square(3)",
    "from itertools import product\nfrom math import floor\n\n\ndef is_magic_square(matrix):\n    size = len(matrix)\n    expected_sum = size * (size ** 2 + 1) / 2\n\n    # Check rows and columns\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    for column in zip(*matrix):\n        if sum(column) != expected_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(size)) != expected_sum:\n        return False\n\n    if sum(matrix[i][size - i - 1] for i in range(size)) != expected_sum:\n        return False\n\n    return True\n\n\ndef magic_squares(size):\n    \"\"\"Generates all magic squares of size `size`.\"\"\"\n    for values in product(range(1, size ** 2 + 1), repeat=size ** 2):\n        matrix = [[0] * size for _ in range(size)]\n\n        for i, value in enumerate(values):\n            x = floor((i + 1) / size) - 1\n            y = (i + 1) % size - 1\n\n            matrix[x][y] = value\n\n        if is_magic_square(matrix):\n            yield matrix",
    "def magic_square(n):\n    \"\"\"\n    Find magic square of size n.\n    \"\"\"\n\n    def sum_diag(row, col):\n        return row + col + 1\n\n    def sum_row(row):\n        return sum(range(1, n*n+1))\n\n    def sum_col(col):\n        return sum_row(col)\n\n    def sum_magic(row, col):\n        return sum_diag(row, col) - sum_row(row) - sum_col(col)\n\n    def is_magic(row, col):\n        return sum_magic(row, col) == 0\n\n    def is_magic_row(row):\n        return is_magic(row, col)\n\n    def is_magic_col(col):\n        return is_magic(row, col)\n\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        magic_square[i][i] = i + 1\n\n    for i in range(n):\n        for j in range(n):\n            if is_magic_row(i) and is_magic_col(j):\n                magic_square[i][j] = n*n\n\n    return magic_square",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(matrix)\n    expected_sum = n * (n ** 2 + 1) / 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(row[i] for row in matrix) for i in range(n)]\n    diag_sums = [\n        sum(matrix[i][i] for i in range(n)),\n        sum(matrix[i][n - i - 1] for i in range(n)),\n    ]\n    return (\n        all(row_sums[0] == row_sums[i] for i in range(1, n))\n        and all(col_sums[0] == col_sums[i] for i in range(1, n))\n        and all(diag_sums[0] == diag_sums[i] for i in range(1, n))\n        and all(sum == expected_sum for sum in row_sums)\n    )\n\n\nif __name__ == \"__main__\":\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(is_magic_square(matrix))",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    :param n: size of square matrix\n    :return: list\n    >>> magic_square(3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> magic_square(4)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    >>> magic_square(5)\n    [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    >>> magic_square(6)\n    [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]\n    \"\"\"\n\n    # check if n is positive integer\n    if not (isinstance(n, int) and n > 0):\n        raise TypeError(\"n must be positive integer\")\n\n    # set initial values\n    magic = [\n        [0 for _ in range(n)]\n        for _ in range(n)\n    ]\n    count = 1\n    i, j = 0, n // 2\n\n    # set first row, column and diagonal values\n    for x in range(n):\n        magic[x][x] = count",
    "def is_magic_square(square: list[int]) -> bool:\n    \"\"\"\n    >>> is_magic_square([[16, 5, 2, 15], [1, 12, 13, 6], [10, 7, 11, 9], [4, 3, 8, 14]])\n    True\n    >>> is_magic_square([[16, 5, 2, 15], [1, 12, 13, 6], [10, 7, 11, 9], [4, 3, 8, 14], [17, 18, 19, 20]])\n    False\n    \"\"\"\n    n = len(square)\n    # Check if the sum of each row, column, and diagonal are equal\n    return all(\n        sum(row) == n * (n ** 2 + 1) / 2\n        for row in square\n    ) and all(\n        square[row][col] == square[row][0] + col\n        for col in range(n)\n        for row in range(n)\n    ) and all(\n        square[row][col] == square[0][col] + row\n        for col in range(n)\n        for row in range(n)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def is_magic_square(matrix):\n    \"\"\"\n    Check if given matrix is magic square or not.\n    Magic square is square matrix where all rows, all columns and both diagonals have same sum.\n\n    Args:\n       matrix (list): list of lists\n    Returns:\n       bool: True or False\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        raise ValueError(\"Matrix is not square\")\n\n    n = len(matrix)\n    sum_of_diagonals = matrix[0][0] + matrix[n - 1][0]\n    sum_of_columns = sum(matrix[0])\n    sum_of_rows = sum(matrix[0][i] for i in range(n))\n\n    if sum_of_columns != sum_of_rows or sum_of_diagonals != sum_of_rows:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    matrix_a = [\n        [16, 3, 2, 13],\n        [5, 10, 11, 8],\n        [9, 6, 7, 12],\n        [4, 15, 14, 1]\n    ]\n\n    matrix_b = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    print(is_magic_square(matrix_a))\n    print(is_magic_square(matrix_b))",
    "import unittest\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        self.magic_square = [\n            [8, 1, 6],\n            [3, 5, 7],\n            [4, 9, 2]\n        ]\n\n    def is_magic_square(self, square: List[List[int]]) -> bool:\n        \"\"\"\n        Time Complexity: O(1)\n        Space Complexity: O(1)\n\n        :param square: list of list of int\n        :return: bool\n        \"\"\"\n        rows = len(square)\n        cols = len(square[0])\n        # check rows\n        for i in range(rows):\n            row_sum = 0\n            for j in range(cols):\n                row_sum += square[i][j]\n            if row_sum != 15:\n                return False\n\n        # check cols\n        for i in range(cols):\n            col_sum = 0\n            for j in range(rows):\n                col_sum += square[j][i]\n            if col_sum != 15:\n                return False\n\n        # check diagonals\n        row_sum = 0\n        for i in range(rows):\n            row_sum += square[i][i]\n        if row_sum != 15:\n            return False\n\n        row_sum = 0\n        for i in range(cols):\n            row_sum += square[i][cols - 1 - i]\n        if row_sum != 15:\n            return False\n\n        return True\n\n\nclass Test(unittest.TestCase):\n    def test_is_magic_square(self):\n        solution = Solution()\n        self.assertEqual(solution.is_magic_square(\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9]]), False)\n        self.assertEqual(solution.is_magic_square(\n            [[8, 1, 6], [3, 5, 7], [4, 9, 2]]), True)\n\n\nif",
    "def magic_square(n):\n    \"\"\"\n    Calculates magic square of given size.\n    :param n: Size of the square.\n    :return: Magic square.\n    \"\"\"\n    # Create a 2D list.\n    square = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the square with numbers.\n    for i in range(n):\n        for j in range(n):\n            square[i][j] = (i * n + j + 1)\n\n    # Calculate the magic square.\n    magic_square = calculate_magic_square(square, 0, 0, n)\n\n    return magic_square\n\n\ndef calculate_magic_square(square, i, j, n):\n    \"\"\"\n    Calculates magic square of given size.\n    :param square: Square to calculate magic square.\n    :param i: Row number.\n    :param j: Column number.\n    :param n: Size of the square.\n    :return: Magic square.\n    \"\"\"\n    # If we have reached the last cell, return the square.\n    if i == n - 1 and j == n - 1:\n        return square\n\n    # If the cell is not empty, return the square.\n    if square[i][j] != 0:\n        return square\n\n    # Fill the square with the sum of the cells.\n    square[i][j] = (square[i - 1][j - 1] + square[i - 1][j] + square[i - 1][j + 1]\n                    + square[i][j - 1] + square[i][j + 1]\n                    + square[i + 1][j - 1] + square[i + 1][j] + square[i + 1][j + 1])\n\n    # If the sum is not equal to the sum of all numbers, return the square.\n    if square[i][j] != (n * (n * n + 1)) / 2:\n        return square\n\n    # Recursively fill the square with the sum of the cells.\n    square = calculate_magic_square",
    "def is_magic_square(arr):\n    # Check if it is magic square.\n    rows = cols = len(arr)\n    sum_of_diagonal1 = sum_of_diagonal2 = 0\n\n    # Check if it is a magic square.\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                sum_of_diagonal1 += arr[i][j]\n\n            if (i + j) == (rows - 1):\n                sum_of_diagonal2 += arr[i][j]\n\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return (sum_of_diagonal1 == sum_of_diagonal2) and (sum_of_diagonal1 == (rows * (rows ** 2 + 1) // 2))\n\n\ndef main():\n    matrix = [\n        [16, 3, 2, 13],\n        [5, 10, 11, 8],\n        [9, 4, 6, 7],\n        [12, 15, 14, 11]\n    ]\n\n    if is_magic_square(matrix):\n        print(\"It is a magic square.\")\n    else:\n        print(\"It is not a magic square.\")\n\n\nif __name__ == '__main__':\n    main()",
    "def is_magic_square(square):\n    row_sum = [0] * len(square)\n    column_sum = [0] * len(square)\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if i == j:\n                diagonal_sum += square[i][j]\n            if i + j == len(square) - 1:\n                anti_diagonal_sum += square[i][j]\n            row_sum[i] += square[i][j]\n            column_sum[j] += square[i][j]\n\n    return (\n        row_sum == column_sum\n        and row_sum[0] == diagonal_sum\n        and row_sum[len(square) - 1] == anti_diagonal_sum\n    )\n\n\nsquare = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert is_magic_square(square)\n\nsquare = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nassert not is_magic_square(square)",
    "import numpy as np\n\n\ndef is_magic_square(square: np.ndarray) -> bool:\n    \"\"\"\n    Calculate if the given square is magic.\n\n    :param square: matrix of square size\n    :return: True if is magic, False otherwise\n    \"\"\"\n    if not isinstance(square, np.ndarray):\n        raise TypeError('square should be numpy.ndarray')\n    if not (len(square) == len(square[0])):\n        raise ValueError('square should be square')\n    if not np.all(square == square.astype(int)):\n        raise ValueError('all elements of square should be integers')\n    if len(square) < 3:\n        raise ValueError('square should be at least 3x3')\n    if not (np.sum(square, axis=0) == np.sum(square, axis=1)).all():\n        raise ValueError('sum of rows should be equal sum of columns')\n    if not (np.sum(square, axis=0) == np.sum(square)).all():\n        raise ValueError('sum of rows should be equal sum of square')\n    if not (square.diagonal() == np.sum(square)).all():\n        raise ValueError('sum of elements on the diagonal should be equal sum of square')\n    if not (square.diagonal(1) == np.sum(square) - 1).all():\n        raise ValueError('sum of elements on the diagonal 1 should be equal sum of square minus 1')\n    return True",
    "import math\n\ndef is_magic_square(matrix):\n    if len(matrix) == 0:\n        return False\n\n    row_sum = 0\n    column_sum = 0\n    diagonal_sum = 0\n\n    for i in range(len(matrix)):\n        row_sum += matrix[i][i]\n        column_sum += matrix[i][-1 - i]\n\n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n\n    return row_sum == column_sum == diagonal_sum\n\n\ndef main():\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(matrix))\n\n    matrix = [[1, 5, 9], [7, 2, 6], [8, 3, 4]]\n    print(is_magic_square(matrix))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def magic_square(n):\n    \"\"\"\n    A magic square is a square of size n x n\n    such that the sum of each row, each column,\n    and each main diagonal is the same.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    arr = [[0 for x in range(n)] for y in range(n)]\n    return True\n\n\nprint(magic_square(3))\nprint(magic_square(4))\nprint(magic_square(5))\nprint(magic_square(6))",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    False\n    \"\"\"\n    return (\n        (\n            matrix[0][0] + matrix[0][1] + matrix[0][2]\n            == matrix[1][0] + matrix[1][1] + matrix[1][2]\n            == matrix[2][0] + matrix[2][1] + matrix[2][2]\n            == matrix[0][0] + matrix[1][0] + matrix[2][0]\n            == matrix[0][1] + matrix[1][1] + matrix[2][1]\n            == matrix[0][2] + matrix[1][2] + matrix[2][2]\n            == matrix[0][0] + matrix[1][1] + matrix[2][2]\n            == matrix[0][2] + matrix[1][1] + matrix[2][0]\n        )\n        and len(set(matrix[0])) == len(set(matrix[1])) == len(set(matrix[2])) == 9\n        and len(set(i[0] for i in matrix)) == len(set(i[1] for i in matrix)) == len(\n            set(i[2] for i in matrix)\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_magic_square(square):\n    row_sums = []\n    col_sums = []\n    row_sum = 0\n    col_sum = 0\n\n    # Calculate row sums and add them to row_sums\n    for i in range(len(square)):\n        row_sum = 0\n        for j in range(len(square)):\n            row_sum += square[i][j]\n        row_sums.append(row_sum)\n\n    # Calculate col sums and add them to col_sums\n    for i in range(len(square)):\n        col_sum = 0\n        for j in range(len(square)):\n            col_sum += square[j][i]\n        col_sums.append(col_sum)\n\n    # Compare row_sums, col_sums, and diagonal sums\n    row_sum = row_sums[0]\n    col_sum = col_sums[0]\n    diagonal_sum = row_sums[0] + col_sums[0]\n    for i in range(1, len(square)):\n        if row_sums[i] != row_sum or col_sums[i] != col_sum or diagonal_sum != row_sums[i] + col_sums[i]:\n            return False\n\n    return True\n\n\n# Tests\nsquare = [[4, 9, 2],\n          [3, 5, 7],\n          [8, 1, 6]]\nassert is_magic_square(square)\n\nsquare = [[8, 1, 6],\n          [3, 5, 7],\n          [4, 9, 2]]\nassert not is_magic_square(square)\n\nsquare = [[6, 7, 2, 1],\n          [9, 5, 8, 3],\n          [1, 3, 9, 7],\n          [2, 8, 6, 5]]\nassert is_magic_square(square)",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Calculate if a given matrix is a magic square.\n    Magic square is a square matrix of integers\n    where the sum of each row, column and diagonal\n    is equal to the same constant value.\n\n    >>> is_magic_square([[1, 5, 9], [5, 5, 5], [9, 1, 1]])\n    True\n    >>> is_magic_square([[1, 5, 9], [5, 5, 5], [9, 1, 2]])\n    False\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n    size = len(matrix)\n    sum_diagonal = sum_row = sum_column = matrix[0][0]\n    for i in range(size):\n        for j in range(size):\n            if matrix[i][j] != matrix[0][0]:\n                return False\n            sum_column += matrix[i][j]\n            sum_row += matrix[j][i]\n            if i == j:\n                sum_diagonal += matrix[i][j]\n    return (\n        sum_row == sum_column == sum_diagonal == sum_diagonal * size\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n):\n    \"\"\"\n    This function calculates magic square of size n.\n    \"\"\"\n\n    magic_square = [[0 for x in range(n)] for y in range(n)]\n\n    i = 0\n    j = n // 2\n\n    for num in range(1, n ** 2 + 1):\n        magic_square[i][j] = num\n\n        if num % n == 0:\n            i -= 1\n        if num % n == 0:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n        if i == -1 and j == n:\n            i = 0\n            j = 0\n\n        if i == n and j == n:\n            i = 0\n            j = n - 1\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the size of the square: \"))\n    magic_square = magic_square(n)\n    print(magic_square)",
    "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # n must be odd\n    # m = (n-1)/2\n    m = (n-1) // 2\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    # set first row\n    for i in range(n):\n        magic_square[0][i] = i + 1\n    # set first column\n    for i in range(n):\n        magic_square[i][n-1] = n*n + 1 - i\n    # set diagonal\n    magic_square[n-1][n-1] = n*n + 1\n    # set second diagonal\n    magic_square[m][m] = n*n + 1\n    # set second row\n    for i in range(1, n):\n        magic_square[n-1][i] = n*n + 1 - i\n    # set second column\n    for i in range(1, n):\n        magic_square[i][0] = n*n + 1 - i\n    # set inner square\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            magic_square[i][j] = n*n - i - j + 2\n    return magic_square\n\n\nif __name__ == '__main__':\n    print(magic_square(9))",
    "import unittest\nfrom typing import List\n\n\ndef magic_square(size: int) -> List[List[int]]:\n    \"\"\"\n    :param size: size of magic square\n    :return: magic square\n    \"\"\"\n    if size % 2 == 0 or size < 0:\n        raise ValueError(\"size should be odd positive number\")\n    square = [[0 for _ in range(size)] for _ in range(size)]\n\n    # fill the magic square\n    fill_magic_square(square, 0, 0, size)\n\n    return square\n\n\ndef fill_magic_square(square: List[List[int]], row: int, col: int, size: int):\n    \"\"\"\n    :param square: magic square\n    :param row: row number\n    :param col: column number\n    :param size: size of magic square\n    :return: None\n    \"\"\"\n    if size == 1:\n        square[row][col] = 1\n        return\n\n    # fill center\n    square[row][col] = (row + col + 1) * size ** 2 / 2\n\n    # fill upper left corner\n    fill_magic_square(square, row, col, size // 2)\n\n    # fill upper right corner\n    fill_magic_square(square, row, col + size // 2, size // 2)\n\n    # fill lower left corner\n    fill_magic_square(square, row + size // 2, col, size // 2)\n\n    # fill lower right corner\n    fill_magic_square(square, row + size // 2, col + size // 2, size // 2)\n\n\nclass MagicSquareTest(unittest.TestCase):\n\n    def test_odd_size(self):\n        self.assertEqual(magic_square(3), [[8, 3, 4], [1, 5, 7], [6, 2, 0]])\n\n    def test_even_size(self):\n        self.assertEqual(magic_square(4), [[11, 6, 10, 3], [15, 2, 8",
    "import numpy as np\nfrom numpy.testing import assert_array_equal\n\ndef magic_square(n):\n    # n is the number of rows/columns in the square\n    # initialize the square\n    magic_square = np.zeros((n, n), dtype=int)\n    # initialize the sum\n    sum_magic_square = n * (n ** 2 + 1) / 2\n    # fill in the magic square\n    fill_magic_square(magic_square, sum_magic_square, n)\n    return magic_square\n\n\ndef fill_magic_square(magic_square, sum_magic_square, n):\n    # sum_magic_square is the sum of the magic square\n    # n is the number of rows/columns in the square\n    # magic_square is the square to be filled\n    row_number = 0\n    column_number = n // 2\n    magic_square[row_number, column_number] = sum_magic_square\n    # loop until the entire square is filled\n    while np.count_nonzero(magic_square) != n ** 2:\n        # if the number in the square is equal to the sum\n        if magic_square[row_number, column_number] == sum_magic_square:\n            # fill the square in the next open position\n            fill_magic_square(magic_square, sum_magic_square, n)\n            # else if the number in the square is less than the sum\n        elif magic_square[row_number, column_number] < sum_magic_square:\n            # increment the sum by the number in the square\n            sum_magic_square -= magic_square[row_number, column_number]\n            # increment the row number\n            row_number += 1\n            # if the row number is equal to the number of rows\n            if row_number == n:\n                row_number = 0\n                # increment the column number\n                column_number += 1\n            # else if the row number is equal to the number of columns\n            if column_number == n:\n                column_number = 0\n            # fill the square in the next open position",
    "def magic_square(n):\n    \"\"\"\n    :param n: size of square\n    :return: if magic square exists\n    \"\"\"\n    magic = [[0 for i in range(n)] for j in range(n)]\n    current = 1\n    i, j = 0, n // 2\n    while current <= n * n:\n        if i == -1 and j == n:\n            i, j = 0, n - 2\n        elif j == n:\n            j = 0\n        elif i < 0:\n            i = n - 1\n        if magic[i][j] > 0:\n            i += 1\n            j += 1\n            continue\n        magic[i][j] = current\n        current += 1\n        i -= 1\n        j += 1\n    return magic\n\n\nif __name__ == '__main__':\n    print(magic_square(3))",
    "def is_magic_square(arr):\n    \"\"\"\n    :param: arr - 2D array\n    return: True or False\n    Find whether the given 2D array is magic square or not\n    Magic square:\n    a b c\n    d e f\n    g h i\n    Sum of each row, column and diagonals should be equal\n    \"\"\"\n    if len(arr) != 3 or len(arr[0]) != 3:\n        return False\n\n    row_sum = [0] * 3\n    col_sum = [0] * 3\n    diag_sum = [0] * 2\n\n    for i in range(3):\n        for j in range(3):\n            row_sum[i] += arr[i][j]\n            col_sum[j] += arr[i][j]\n\n        diag_sum[0] += arr[i][i]\n        diag_sum[1] += arr[i][2 - i]\n\n    if row_sum != col_sum:\n        return False\n\n    if diag_sum != [row_sum[0]] * 2:\n        return False\n\n    return True\n\n\ndef main():\n    \"\"\"\n    :return: void\n    \"\"\"\n    arr_2 = [\n        [4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6]\n    ]\n\n    arr_3 = [\n        [16, 17, 18],\n        [15, 12, 13],\n        [14, 11, 10]\n    ]\n\n    if is_magic_square(arr_2):\n        print(\"Given array is magic square\")\n    else:\n        print(\"Given array is not magic square\")\n\n    if is_magic_square(arr_3):\n        print(\"Given array is magic square\")\n    else:\n        print(\"Given array is not magic square\")\n\n\nif __name__ == '__main__':\n    main()",
    "def is_magic_square(arr):\n    \"\"\"\n    :param arr: 2-D list\n    :return: boolean\n    \"\"\"\n    if len(arr) == 0:\n        return False\n\n    dim = len(arr)\n    sum_diag = sum(arr[i][i] for i in range(dim))\n    sum_row = sum(arr[i][j] for i in range(dim) for j in range(dim))\n    sum_col = sum(arr[i][j] for j in range(dim) for i in range(dim))\n    sum_magic = sum(arr[i][dim-i-1] for i in range(dim))\n    return sum_diag == sum_row == sum_col == sum_magic\n\n\ndef test_is_magic_square():\n    assert is_magic_square([[16, 3, 2, 13], [5, 10, 11, 8], [9, 4, 6, 7], [12, 15, 14, 11]])\n\n\nif __name__ == '__main__':\n    test_is_magic_square()",
    "def is_magic_square(matrix):\n    \"\"\"\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 0]])\n    False\n    \"\"\"\n    n = len(matrix)\n\n    # check if matrix is magic square\n    # check rows\n    for row in matrix:\n        if sum(row) != n * (n ** 2 + 1) / 2:\n            return False\n\n    # check cols\n    for col in range(n):\n        if sum([matrix[row][col] for row in range(n)]) != n * (n ** 2 + 1) / 2:\n            return False\n\n    # check diagonals\n    if sum([matrix[i][i] for i in range(n)]) != n * (n ** 2 + 1) / 2:\n        return False\n\n    if sum([matrix[i][n - i - 1] for i in range(n)]) != n * (n ** 2 + 1) / 2:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Find if given 2D matrix is a magic square.\n    Magic square is a 2D square matrix where every row, column and both diagonals' sum is equal.\n\n    Args:\n       matrix(list): 2D List\n    Returns:\n       bool: True if magic square, else False\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    sum_of_diagonals = matrix[0][0] + matrix[0][len(matrix) - 1]\n    sum_of_rows = sum_of_columns = sum_of_diagonals\n\n    for row in matrix:\n        if sum(row) != sum_of_rows:\n            return False\n\n    for column in range(len(matrix)):\n        if sum(row[column] for row in matrix) != sum_of_columns:\n            return False\n\n    return True\n\n\ndef main():\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n    print(\"Is the following matrix a magic square?\")\n    print(matrix)\n    answer = is_magic_square(matrix)\n    if answer:\n        print(\"It is a magic square.\")\n    else:\n        print(\"It is NOT a magic square.\")\n\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(\"Is the following matrix a magic square?\")\n    print(matrix)\n    answer = is_magic_square(matrix)\n    if answer:\n        print(\"It is a magic square.\")\n    else:\n        print(\"It is NOT a magic square.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_magic(matrix):\n    # Check if matrix is square\n    rows = len(matrix)\n    columns = len(matrix[0])\n\n    if rows != columns:\n        return False\n\n    # Check if matrix is symmetric\n    for i in range(rows):\n        for j in range(columns):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    # Check if matrix is magic\n    return sum(matrix[0]) == sum(matrix[-1]) == sum(matrix[0][i] for i in range(rows)) == sum(matrix[i][-1] for i in range(rows))\n\n\ndef generate_magic_square(size):\n    \"\"\"Generate magic square with given size.\n\n    Algorithm:\n        * Create magic square with given size and fill it with 0\n        * Fill the matrix with numbers in the following way:\n            * The first row is filled from 1 to size\n            * The second row is filled from size to 1 by steps of size - 1\n            * The third row is filled from size to 1 by steps of size - 2\n            * ...\n            * The last row is filled from size to 1 by steps of size - (size - 1)\n    \"\"\"\n    square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, 0\n    for num in range(1, size * size + 1):\n        square[i][j] = num\n        if (j == size - 1) and (i < size - 1):\n            i += 1\n            j = 0\n        elif (i == size - 1) and (j < size - 1):\n            i = 0\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return square\n\n\nif __name__ == \"__main__\":\n    size = 3\n    magic_square = generate_magic_square(size)\n    print(magic_square)\n    print(is_magic(magic_square))",
    "def magic_square(n):\n    # The magic constant\n    MAGIC = 11\n\n    # Generate the magic square\n    magic_square = [[0] * n for _ in range(n)]\n    i = j = n // 2\n\n    for num in range(1, n * n + 1):\n        # Lower diagonal\n        if i == -1 or j == n:\n            i, j = 0, n - 2\n\n        # Upper diagonal\n        if i == n or j == -1:\n            i, j = n - 2, 0\n\n        # Upper square\n        if magic_square[i][j]:\n            i += 1\n\n        # Lower square\n        else:\n            j += 1\n\n        # Fill the magic square\n        magic_square[i][j] = num\n        num += 1\n\n    # Check the magic constant\n    for row in magic_square:\n        if sum(row) != MAGIC:\n            return False\n\n    for col in range(n):\n        if sum([row[col] for row in magic_square]) != MAGIC:\n            return False\n\n    return True",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    :param n: size of magic square\n    :return: magic square\n    >>> magic_square(3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> magic_square(4)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    \"\"\"\n    square = [[0 for _ in range(n)] for _ in range(n)]\n    row, col = 0, n // 2\n    num = 1\n    while num <= n * n:\n        if row < 0 or row >= n or col < 0 or col >= n or square[row][col] != 0:\n            if row < n - 1:\n                row += 1\n            elif col < n - 1:\n                row = 0\n                col += 1\n            else:\n                row -= 1\n                col = 0\n        square[row][col] = num\n        num += 1\n        row -= 1\n        col += 1\n    return square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import product\n\n\ndef magic_square(n):\n    \"\"\"\n    return True if the matrix is a magic square, otherwise return False.\n    >>> magic_square(3)\n    True\n    >>> magic_square(4)\n    False\n    >>> magic_square(5)\n    True\n    >>> magic_square(6)\n    False\n    >>> magic_square(7)\n    False\n    \"\"\"\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    total = n * (n ** 2 + 1) / 2\n\n    for i, j in product(range(n), repeat=2):\n        matrix[i][j] = total - i * n - j\n        if matrix[i][j] < 0 or matrix[i][j] > n ** 2:\n            return False\n\n    return is_magic_square(matrix)\n\n\ndef is_magic_square(matrix):\n    \"\"\"\n    return True if the matrix is a magic square, otherwise return False.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        if sum(matrix[i]) != sum(matrix[0]):\n            return False\n        if sum(matrix[i][j] for i in range(n)) != sum(matrix[i][0] for i in range(n)):\n            return False\n\n    return True",
    "import numpy as np\n\n\ndef is_magic_square(square: np.ndarray) -> bool:\n    \"\"\"\n    >>> is_magic_square(np.array([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]]))\n    True\n    >>> is_magic_square(np.array([[16, 3, 2, 13], [5, 11, 10, 8], [9, 6, 7, 12], [4, 15, 14, 1]]).T)\n    False\n    >>> is_magic_square(np.array([[16, 3, 2], [5, 11, 10], [9, 6, 7]]))\n    False\n    \"\"\"\n    # Check if square is magic square\n    rows = len(square)\n    cols = len(square[0])\n\n    if rows != cols:\n        return False\n\n    # Magic square has rows, cols and diagonal sums as equal\n    row_sum = square.sum(axis=1)\n    col_sum = square.sum(axis=0)\n    diag_sum = np.diag(square).sum()\n\n    if row_sum.sum() != diag_sum:\n        return False\n\n    if col_sum.sum() != diag_sum:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n: int):\n    \"\"\"\n    :param n: size of the square\n    :return: 2d list of magic square\n    \"\"\"\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    row = 0\n    col = 0\n    num = 1\n\n    while num <= n ** 2:\n        if row == 0 and col == n - 1:\n            row = n - 1\n            col = n - 2\n        elif row == n - 1 and col == n - 2:\n            row = n - 2\n            col = n - 1\n        elif col == n - 1:\n            col = 0\n            row += 1\n        else:\n            col += 1\n\n        if magic_square[row][col] != 0:\n            col += 1\n            continue\n        magic_square[row][col] = num\n        num += 1\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    size = int(input(\"Enter size of magic square: \"))\n    magic_square = magic_square(size)\n    for row in magic_square:\n        print(row)",
    "from itertools import product\n\n\ndef is_magic_square(matrix):\n    \"\"\"\n    >>> is_magic_square([[1, 5, 9], [5, 9, 1], [9, 1, 5]])\n    True\n    >>> is_magic_square([[1, 5, 9], [5, 9, 1], [9, 1, 6]])\n    False\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n    size = len(matrix)\n    expected_sum = sum(range(1, size * size + 1))\n    if not all(\n        sum(row) == expected_sum\n        for row in matrix\n    ) or not all(\n        sum(row[i] for row in matrix) == expected_sum\n        for i in range(size)\n    ):\n        return False\n    return True\n\n\ndef magic_square(size):\n    \"\"\"\n    >>> magic_square(3)\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    \"\"\"\n    options = list(range(1, size * size + 1))\n    options = list(product(options, options))\n    for option in options:\n        matrix = [list(option[i:i + size]) for i in range(0, size * size, size)]\n        if is_magic_square(matrix):\n            return matrix\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    >>> magic_square(3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> magic_square(4)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    >>> magic_square(5)\n    [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    >>> magic_square(6)\n    [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]\n    \"\"\"\n    magic_square = []\n    for i in range(1, n + 1):\n        magic_square.append([i + (i - 1) * n - 1, i + (i - 1) * n, i + (i - 1) * n + 1])\n    magic_square = magic_square[::-1]\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n: int) -> list[int]:\n    \"\"\"\n    Returns a magic square of size n.\n    >>> magic_square(3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> magic_square(4)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    \"\"\"\n    MAGIC = 15\n    magic_square = []\n    for i in range(n):\n        magic_square.append([0] * n)\n    magic_square[0][0] = 1\n    index = 0\n    size = n * n\n    while size > 1:\n        row = index // n\n        col = index % n\n        if col + 1 < n:\n            col += 1\n        elif col == n - 1 and row + 1 < n:\n            row += 1\n            col = 0\n        else:\n            row = 0\n            col = 0\n            while magic_square[row][col] != 0:\n                row = (row + 1) % n\n                col = (col + 1) % n\n        magic_square[row][col] = size\n        size -= 1\n        index += 1\n\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = MAGIC - magic_square[i][j] + 1\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def checkMagicSquare(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i][i]\n        if sum != 55:\n            return False\n        sum -= arr[i][i]\n\n    for i in range(len(arr)):\n        if arr[i][0] != arr[0][i]:\n            return False\n\n    for i in range(len(arr)):\n        if arr[i][i] != arr[0][0]:\n            return False\n\n    return True\n\n\ndef printMagicSquare(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            print(arr[i][j], end=\" \")\n        print()\n\n\nif __name__ == '__main__':\n    arr = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    if checkMagicSquare(arr):\n        print(\"It is a magic square\")\n    else:\n        print(\"It is not a magic square\")",
    "def magic_square(n: int):\n    \"\"\"\n    :param n: size of square\n    :return: n*n magic square\n    \"\"\"\n    # 1. check if n is positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n should be positive integer\")\n\n    # 2. init magic square\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n\n    # 3. init some variables\n    row, col = 0, 0\n\n    # 4. start filling magic square\n    num = n * n\n    while num > 0:\n        # check if row is out of bound\n        if row >= n:\n            row = 0\n        # check if col is out of bound\n        if col >= n:\n            col = 0\n        # check if current cell is filled\n        if magic_square[row][col] != 0:\n            row += 1\n            col += 1\n            continue\n        # fill current cell\n        magic_square[row][col] = num\n        # update row and col\n        row += 1\n        col += 1\n        # update num\n        num -= 1\n\n    # 5. check magic square\n    row, col = 0, 0\n    while row < n:\n        while col < n:\n            if magic_square[row][col] != sum(magic_square[row][:n]):\n                return False\n            if magic_square[col][row] != sum(magic_square[row][:n]):\n                return False\n            col += 1\n        row += 1\n        col = 0\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))",
    "def magic_square(n: int):\n    \"\"\"\n    :param n: size of square\n    :return: 2d list of magic square\n    \"\"\"\n    # 2d list for magic square\n    square = [[0 for _ in range(n)] for _ in range(n)]\n    # find middle of square\n    middle = n // 2\n    # set middle as middle value\n    square[middle][middle] = n * n + 1\n    # set current value as middle value\n    current = n * n + 1\n    # set current row and col to middle\n    row, col = middle, middle\n    # loop through each value in magic square\n    for i in range(1, n * n + 1):\n        # if current is middle value\n        if current == middle + 1:\n            # set current to first value\n            current = 1\n            # increment row and col\n            row += 1\n            col += 1\n        # if current is not middle value\n        else:\n            # increment current value by 1\n            current += 1\n        # if row is middle value\n        if row == middle:\n            # increment row by 1\n            row += 1\n        # if row is not middle value\n        else:\n            # decrement row by 1\n            row -= 1\n        # if col is middle value\n        if col == middle:\n            # decrement col by 1\n            col -= 1\n        # if col is not middle value\n        else:\n            # increment col by 1\n            col += 1\n        # set square at row and col to current value\n        square[row][col] = current\n    return square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(3))",
    "def is_magic_square(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0:\n        return False\n\n    # get the dimensions of the matrix\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # check if the matrix is square\n    if rows != cols:\n        return False\n\n    # get the sum of the diagonal\n    diag_sum = 0\n    for i in range(rows):\n        diag_sum += arr[i][i]\n\n    # get the sum of each row\n    row_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            row_sum += arr[i][j]\n\n    # get the sum of each column\n    col_sum = 0\n    for j in range(cols):\n        for i in range(rows):\n            col_sum += arr[i][j]\n\n    # get the sum of each diagonal\n    diag_sum_2 = 0\n    for i in range(rows - 1, -1, -1):\n        diag_sum_2 += arr[i][i]\n\n    # check if the sum of each row is equal\n    if row_sum != col_sum:\n        return False\n\n    # check if the sum of each column is equal\n    if row_sum != diag_sum:\n        return False\n\n    # check if the sum of each diagonal is equal\n    if row_sum != diag_sum_2:\n        return False\n\n    # check if the sum of each element is equal\n    if row_sum != rows ** 2:\n        return False\n\n    return True\n\n\nprint(is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]]))\nprint(is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]]))\nprint(is_magic_square([[2, 9, 4], [7, 5,",
    "def is_magic_square(matrix):\n    # Check rows\n    for row in matrix:\n        if sum(row) != 15:\n            return False\n\n    # Check columns\n    for j in range(3):\n        if sum([row[j] for row in matrix]) != 15:\n            return False\n\n    # Check diagonals\n    if matrix[0][0] + matrix[1][1] + matrix[2][2] != 15:\n        return False\n\n    if matrix[0][2] + matrix[1][1] + matrix[2][0] != 15:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    print(is_magic_square(matrix))\n\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2], [8, 1, 6]]\n    print(is_magic_square(matrix))",
    "def is_magic(square):\n    \"\"\"\n    Check if a magic square.\n    \"\"\"\n    if not isinstance(square, list):\n        return False\n    if len(square) != len(square[0]):\n        return False\n    if not square:\n        return False\n    if not all([isinstance(num, int) for num in square]):\n        return False\n    if len(square) <= 2:\n        return False\n    if len(square) % 2 == 0:\n        return False\n\n    size = len(square)\n    sum_ = 0\n    for row in square:\n        if len(row) != size:\n            return False\n        sum_ += sum(row)\n    if sum_ != (size * size + 1) // 2:\n        return False\n\n    sum_ = 0\n    for i in range(size):\n        if sum(square[i]) != sum_:\n            return False\n        sum_ += size - i\n\n    sum_ = 0\n    for j in range(size):\n        if sum([row[j] for row in square]) != sum_:\n            return False\n        sum_ += size - j\n\n    return True\n\n\nif __name__ == \"__main__\":\n    magic_square = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    not_magic_square = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    print(is_magic(magic_square))\n    print(is_magic(not_magic_square))",
    "def magic_square(n):\n    \"\"\"\n    :param n: size of square\n    :return: magic square\n    \"\"\"\n    # check if n is odd\n    if n % 2 == 0:\n        return 0\n\n    # create a matrix\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    # check if n is even\n    if n % 2 == 0:\n        start = 2\n    else:\n        start = 1\n\n    # fill the matrix\n    i, j = 0, n // 2\n    for num in range(start, n ** 2 + 1):\n        matrix[i][j] = num\n        if num % n == 0:\n            i += 1\n        if num % n == n - 1:\n            j -= 1\n        elif num % n == 1:\n            j += 1\n        else:\n            i += 1\n            j -= 1\n\n    # check if the matrix is magic square\n    if magic_square_check(matrix, n):\n        return matrix\n    else:\n        return 0\n\n\ndef magic_square_check(matrix, n):\n    \"\"\"\n    :param matrix: magic square\n    :param n: size of square\n    :return: True if magic square\n    \"\"\"\n    # initialize sum\n    sum_ = 0\n    # check rows\n    for i in range(n):\n        for j in range(n):\n            sum_ += matrix[i][j]\n        if sum_ != (n ** 2 + 1) / 2:\n            return False\n        sum_ = 0\n\n    # check columns\n    for j in range(n):\n        for i in range(n):\n            sum_ += matrix[i][j]\n        if sum_ != (n ** 2 + 1) / 2:\n            return False\n        sum_ = 0\n\n    # check diagonals\n    sum_ = 0\n    for i in range(n):\n        sum_ += matrix[i][i]\n    if sum_ != (n ** 2 + 1) / 2:\n        return",
    "def magic_square(n):\n    \"\"\"\n    n: size of square\n    \"\"\"\n    # return 0\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    magic_square[n // 2][n // 2] = n * n\n    i = n // 2 - 1\n    j = n // 2\n    num = n * n\n    while num > 0:\n        if magic_square[i][j] == 0:\n            magic_square[i][j] = num\n        num -= 1\n        if i == 0 and j == n - 1:\n            i = n - 1\n            j = n // 2 - 1\n        elif i == n - 1 and j == n // 2 - 1:\n            i = n // 2 - 1\n            j = n - 1\n        else:\n            if j == n - 1:\n                i += 1\n                j = n // 2 - 1\n            else:\n                j += 1\n    return magic_square\n\nif __name__ == \"__main__\":\n    print(magic_square(4))\n    print(magic_square(5))",
    "def is_magic_square(square):\n    rows_sum = [0] * len(square)\n    cols_sum = [0] * len(square)\n    diag_sum = 0\n    anti_diag_sum = 0\n    for i in range(len(square)):\n        for j in range(len(square)):\n            rows_sum[i] += square[i][j]\n            cols_sum[j] += square[i][j]\n            if i == j:\n                diag_sum += square[i][j]\n            if i + j == len(square) - 1:\n                anti_diag_sum += square[i][j]\n    return all(rows_sum[0] == rows_sum[1] == rows_sum[2] for rows_sum in rows_sum) \\\n        and all(cols_sum[0] == cols_sum[1] == cols_sum[2] for cols_sum in cols_sum) \\\n        and diag_sum == anti_diag_sum\n\n\ndef magic_square(size):\n    square = [[0] * size for _ in range(size)]\n    num = 1\n    i = 0\n    j = 0\n    while num <= size * size:\n        if i == 0 and j == 0:\n            square[i][j] = num\n            num += 1\n        elif i == 0 and j == size - 1:\n            square[i][j] = num\n            num += 1\n        elif i == size - 1 and j == 0:\n            square[i][j] = num\n            num += 1\n        elif i == size - 1 and j == size - 1:\n            square[i][j] = num\n            num += 1\n        elif i == 0:\n            square[i][j] = num\n            num += 1\n            j += 1\n        elif j == 0:\n            square[i][j] = num\n            num += 1\n            i += 1\n        elif i == size - 1:\n            square[i][j] = num\n            num += 1\n            j += 1",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is magic square.\n    A magic square is an nxn square grid of distinct positive integers\n    from 1 to n^2, such that each row, column and diagonals of the grid sum\n    to the same number.\n\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n    True\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [2, 9, 4]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [1, 3, 5]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [1, 3, 5]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [2, 3, 5]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [2, 3, 5]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [2, 3, 5]])\n    False\n    >>> is_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2], [2, 3, 5]])\n    False\n    \"\"\"\n    n = len(matrix)\n    if n == 0 or n % 2 != 1:\n        return False\n    row_sum = matrix[0][",
    "def magic_square(n):\n    \"\"\"\n    :param n: number of rows or columns of square\n    :return:\n    \"\"\"\n    magic_square = [[0] * n for i in range(n)]\n    # print(magic_square)\n    start = 0\n    end = n - 1\n    i = 0\n    while start < n:\n        magic_square[i][start] = i + start + 1\n        start += 1\n        i += 1\n        if i == n:\n            i = 0\n\n    while end >= 0:\n        magic_square[end][end] = end + end + 1\n        end -= 1\n        i += 1\n        if i == n:\n            i = 0\n    # print(magic_square)\n    # print(magic_square[1][1])\n    # print(magic_square[1][2])\n    # print(magic_square[1][3])\n    # print(magic_square[1][4])\n    # print(magic_square[1][5])\n    # print(magic_square[1][6])\n    # print(magic_square[1][7])\n    # print(magic_square[1][8])\n    # print(magic_square[2][1])\n    # print(magic_square[2][2])\n    # print(magic_square[2][3])\n    # print(magic_square[2][4])\n    # print(magic_square[2][5])\n    # print(magic_square[2][6])\n    # print(magic_square[2][7])\n    # print(magic_square[2][8])\n    # print(magic_square[3][1])\n    # print(magic_square[3][2])\n    # print(magic_square[3][3])\n    # print(magic_square[3][4])\n    # print(magic_square[3][5])\n    # print(magic_square[3][6])\n    # print(magic_square[3][7",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check whether given matrix is a magic square.\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [1, 1, 6]])\n    False\n    \"\"\"\n    # Check whether given matrix is a square.\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Check whether all elements are distinct.\n    elements = set()\n    for row in matrix:\n        for element in row:\n            if element in elements:\n                return False\n            elements.add(element)\n\n    # Check whether sum of each row, column and diagonals are same.\n    row_sum = sum(matrix[0])\n    col_sum = sum(matrix[0][0])\n    diagonal_sum = matrix[0][0] + matrix[1][1] + matrix[2][2]\n    for i in range(len(matrix)):\n        if (\n            sum(matrix[i]) != row_sum\n            or sum(matrix[i][i] for i in range(len(matrix))) != col_sum\n            or matrix[0][0] + matrix[1][1] + matrix[2][2] != diagonal_sum\n        ):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    n = len(matrix)\n    m = matrix[0][0]\n    for row in matrix:\n        if sum(row) != m:\n            return False\n    for column in zip(*matrix):\n        if sum(column) != m:\n            return False\n    if sum(matrix[0]) != sum(matrix[-1]):\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    matrix_1 = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    assert is_magic_square(matrix_1) == True\n    matrix_2 = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 10]\n    ]\n    assert is_magic_square(matrix_2) == False",
    "def is_magic_square(arr):\n    \"\"\"\n    A magic square is a square matrix with a constant difference between each of the diagonal sums.\n    The sum of the outer edges is also constant.\n    \"\"\"\n    # Sum of each row and column\n    row_sum = [sum(i) for i in arr]\n    col_sum = [sum([row[i] for row in arr]) for i in range(len(arr[0]))]\n\n    # Check if each row and col sum is equal\n    if not all(i == row_sum[0] for i in row_sum):\n        return False\n\n    # Check if each diagonal sum is equal\n    if (\n        arr[0][0] + arr[1][1] + arr[2][2]\n        != arr[2][0] + arr[1][2] + arr[0][1]\n    ):\n        return False\n\n    return True\n\n\n# Tests\nmat1 = [\n    [1, 5, 9],\n    [5, 5, 5],\n    [9, 9, 1],\n]\nassert is_magic_square(mat1)\n\nmat2 = [\n    [4, 8, 2],\n    [8, 1, 6],\n    [2, 6, 4],\n]\nassert not is_magic_square(mat2)\n\nmat3 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]\nassert not is_magic_square(mat3)",
    "def is_magic_square(sq: list) -> bool:\n    \"\"\"\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 1]])\n    False\n    >>> is_magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 0]])\n    False\n    \"\"\"\n    if not sq:\n        return False\n    if not all([len(sq[0]) == len(row) for row in sq]):\n        return False\n\n    n = len(sq)\n    total = sum(map(sum, sq))\n    # Check rows\n    if not all([sum(row) == total for row in sq]):\n        return False\n\n    # Check columns\n    if not all([sum(col) == total for col in zip(*sq)]):\n        return False\n\n    # Check diagonals\n    if not all([sq[i][i] == sq[i][n - i - 1] == (n * (n + 1) / 2) - sum(sq[i]) for i in range(n)]):\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n):\n    \"\"\"\n    >>> magic_square(3)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> magic_square(4)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    \"\"\"\n    magic_square = []\n    i = 1\n    while len(magic_square) < n * n:\n        magic_square.append(i)\n        i += n\n        if i > n * n:\n            i = 1\n    return magic_square\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def magic_square(n: int) -> list[list[int]]:\n    \"\"\"\n    Returns a list of list containing the magic square.\n\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[15, 12, 10, 13], [14, 3, 0, 9], [1, 11, 6, 2], [10, 5, 1, 7]]\n    >>> magic_square(5)\n    [[34, 31, 47, 26, 29], [46, 33, 19, 45, 25], [35, 24, 44, 32, 28], [43, 30, 42, 36, 27], [40, 41, 37, 39, 23]]\n    \"\"\"\n    if n % 2 != 1:\n        raise ValueError(\"n must be odd\")\n\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    magic_square[n // 2][n // 2] = n ** 2 + 1\n    magic_square[n // 2][n // 2 - 1] = n ** 2 + 2\n    magic_square[n // 2 - 1][n // 2] = n ** 2 + 3\n    magic_square[n // 2 - 1][n // 2 - 1] = n ** 2 + 4\n    magic_square[n // 2][n // 2 + 1] = n ** 2 + 5\n    magic_square[n // 2 + 1][n // 2] = n ** 2 + 6\n    magic_square[n // 2 + 1][n // 2 + 1] = n ** 2 + 7\n    magic_square[n // 2 + 1][n // 2 - 1]",
    "def magic_square(n):\n    # Create an empty magic square\n    square = [[0 for i in range(n)] for j in range(n)]\n\n    # Starting index for each row and column\n    i = j = n//2\n\n    # Value to be filled in the magic square\n    k = 1\n\n    # Until we run out of elements to fill\n    while k <= n*n:\n        # Put the kth element in the square\n        if 0 <= i and i < n and 0 <= j and j < n:\n            square[i][j] = k\n            k += 1\n\n        # Find the next right element in the square\n        # If it is filled skip it\n        j -= 1\n        if j < 0 or square[i][j]:\n            j += 1\n            j = j + 1\n\n        # Find the next down element in the square\n        # If it is filled skip it\n        i += 1\n        if i >= n or square[i][j]:\n            i -= 1\n            i = i - 1\n            j += 1\n\n    return square\n\n\nif __name__ == '__main__':\n    print(magic_square(3))",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    Calculate magic square.\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[15, 12, 10, 13], [14, 3, 0, 9], [1, 11, 6, 2], [10, 5, 1, 7]]\n    >>> magic_square(5)\n    [[30, 24, 25, 16, 23], [11, 8, 1, 22, 20], [19, 2, 27, 13, 6], [9, 21, 14, 5, 28], [26, 18, 15, 1, 7]]\n    \"\"\"\n    magic_square = []\n    magic_sum = (n * (n ** 2 + 1)) / 2\n    for i in range(n):\n        magic_square.append([])\n        for j in range(n):\n            magic_square[i].append(magic_sum - (n * (i + 1) + j + 1))\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n: int) -> list:\n    \"\"\"\n    >>> magic_square(3)\n    [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n    >>> magic_square(4)\n    [[15, 12, 10, 2], [16, 1, 3, 13], [14, 6, 8, 5], [11, 7, 17, 18]]\n    >>> magic_square(5)\n    [[30, 24, 21, 15, 12], [33, 17, 23, 2, 18], [34, 22, 20, 16, 11], [31, 25, 29, 14, 10], [32, 26, 28, 13, 9]]\n    \"\"\"\n    magic_square_list = []\n    for i in range(0, n):\n        magic_square_list.append([0] * n)\n\n    sum_diagonal = sum_diagonal_2 = 0\n    magic_square_list[0][0] = sum_diagonal_2 = sum_diagonal = n * (n ** 2 + 1) / 2\n    row = col = 0\n    num = 1\n\n    while num <= (n ** 2):\n        magic_square_list[row][col] = num\n        num += 1\n        if col == (n - 1):\n            col = 0\n            row += 1\n        else:\n            col += 1\n\n        if row == n and col == n:\n            row = col = 0\n\n        sum_diagonal -= magic_square_list[row][col]\n        sum_diagonal_2 += magic_square_list[row][col]\n\n    return magic_square_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def magic_square(n):\n    \"\"\"\n    Return True if magic square exists.\n    \"\"\"\n    if n % 2 == 1:\n        return False\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = (i + j + 1) % n + 1\n    return magic_square\n\n\ndef main():\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))\n    print(magic_square(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_magic_square(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n    n = len(matrix)\n    sum_of_rows = []\n    sum_of_columns = []\n    sum_of_diagonal = 0\n    sum_of_anti_diagonal = 0\n\n    for i in range(n):\n        sum_of_rows.append(sum(matrix[i]))\n        sum_of_columns.append(sum([matrix[j][i] for j in range(n)]))\n\n    sum_of_diagonal = sum([matrix[i][i] for i in range(n)])\n    sum_of_anti_diagonal = sum([matrix[i][n - 1 - i] for i in range(n)])\n\n    if sum_of_rows.count(sum_of_rows[0]) != len(sum_of_rows) or sum_of_columns.count(sum_of_columns[0]) != len(\n            sum_of_columns) or sum_of_diagonal != sum_of_anti_diagonal or sum_of_diagonal != sum_of_rows[0]:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\n    print(is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 13]]))",
    "def magic_square(n):\n    \"\"\"\n    Generates magic square of n*n\n    :param n: size of square\n    :return: magic square\n    \"\"\"\n    square = [[0 for _ in range(n)] for _ in range(n)]\n    start = 1\n    for i in range(n):\n        for j in range(n):\n            square[i][j] = start\n            start += n\n        start -= n * n\n    start = n * n\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                square[i][j] = start\n                start += n\n            else:\n                square[i][j] = start\n                start -= n\n    for i in range(n):\n        for j in range(n):\n            if square[i][j] == 0:\n                square[i][j] = n * n\n    return square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(3))",
    "def magic_square(size: int) -> list:\n    \"\"\"Returns a magic square of given size.\n\n    Args:\n        size (int): Size of the magic square.\n\n    Returns:\n        list: A magic square of given size.\n    \"\"\"\n    if size % 2 == 0:\n        return []\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    magic_square[size // 2][size // 2] = size * size\n    current_number = 1\n    row, col = size // 2, 0\n    direction = \"right\"\n    while current_number <= size * size:\n        if direction == \"right\":\n            col += 1\n            if col == size:\n                col = 0\n                row += 1\n                if row == size:\n                    row = 0\n                    direction = \"down\"\n        elif direction == \"down\":\n            row += 1\n            if row == size:\n                row = 0\n                col -= 1\n                if col == -1:\n                    col = size - 1\n                    direction = \"left\"\n        elif direction == \"left\":\n            col -= 1\n            if col == -1:\n                col = size - 1\n                row -= 1\n                if row == -1:\n                    row = size - 1\n                    direction = \"up\"\n        elif direction == \"up\":\n            row -= 1\n            if row == -1:\n                row = size - 1\n                col += 1\n                if col == size:\n                    col = 0\n                    direction = \"right\"\n        magic_square[row][col] = current_number\n        current_number += 1\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(3))",
    "def magic_square(n):\n    \"\"\"\n    :param n: size of magic square\n    :return:\n    \"\"\"\n\n    # Initialise the magic square\n    magic_square = [[0 for x in range(n)] for y in range(n)]\n\n    # Initialise the row and column index\n    row_index = 0\n    col_index = n // 2\n\n    # Initialise the number\n    num = 1\n\n    # Fill the magic square\n    while num <= n * n:\n        # If the row index is in the last row,\n        # set the row index to 0 and decrease the column index by 1\n        if row_index == n - 1:\n            row_index = 0\n            col_index -= 1\n        # If the row index is in the first row,\n        # set the row index to 0 and increase the column index by 1\n        elif row_index == 0:\n            col_index += 1\n        # If the row index is in the middle row,\n        # set the row index to the row index and increase the column index by 1\n        elif row_index == n // 2:\n            col_index += 1\n\n        # If the column index is in the last column,\n        # set the column index to the last column and decrease the row index by 1\n        if col_index == n - 1:\n            col_index = n - 1\n            row_index -= 1\n        # If the column index is in the first column,\n        # set the column index to the first column and increase the row index by 1\n        elif col_index == 0:\n            row_index += 1\n        # If the column index is in the middle column,\n        # set the column index to the column index and decrease the row index by 1\n        elif col_index == n // 2:\n            row_index -= 1\n\n        # If the row index and column index are not in the middle,\n        # set the row and column index to the row and column index\n        if row_index != n // 2 and col_index != n // 2:\n            row_index += 1\n            col_index"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}