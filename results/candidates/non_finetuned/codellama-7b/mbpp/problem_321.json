{
  "problem": {
    "task_id": "MBPP/332",
    "prompt": "Write a function to count character frequency of a given string.",
    "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
    "test_list": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ],
    "challenge_test_list": [],
    "problem_id": 321
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def count_char(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Please provide a string argument\")\n\n    # create a dict to hold char frequency\n    char_dict = {}\n\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nif __name__ == '__main__':\n    print(count_char(\"hello\"))",
    "def char_frequency(input_str):\n    dict = {}\n    for n in input_str:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n\ninput_str = \"Hello, welcome to my world\"\nprint(char_frequency(input_str))",
    "from collections import Counter\n\n\ndef count_characters(s):\n    c = Counter(s)\n    return c\n\n\ndef main():\n    print(count_characters('aabbcc'))\n\n\nif __name__ == '__main__':\n    main()",
    "def count_character(input_string):\n    result = {}\n    for char in input_string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(count_character(\"aabbbbbcccccccc\"))",
    "def count_character_frequency(string):\n    character_frequency = {}\n\n    for character in string:\n        if character in character_frequency:\n            character_frequency[character] += 1\n        else:\n            character_frequency[character] = 1\n\n    return character_frequency\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"abcabc\"))",
    "def frequency_counter(string):\n    \"\"\"\n    Takes a string as an input and returns a dictionary with character\n    frequency of the string.\n\n    >>> frequency_counter(\"aabbccef\")\n    {'a': 2, 'b': 2, 'c': 1, 'e': 1, 'f': 1}\n\n    \"\"\"\n    character_frequency = {}\n    for character in string:\n        if character in character_frequency:\n            character_frequency[character] += 1\n        else:\n            character_frequency[character] = 1\n    return character_frequency",
    "from collections import Counter\n\n\ndef char_counter(string):\n    return Counter(string)\n\n\nif __name__ == '__main__':\n    print(char_counter(\"abacaba\"))",
    "def frequency_sort(string):\n    d = {}\n    for char in string:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    return d\n\n\ndef test_frequency_sort():\n    assert frequency_sort(\"abcde\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n    assert frequency_sort(\"aaaabbbbb\") == {'a': 5, 'b': 6}\n\n\nif __name__ == '__main__':\n    test_frequency_sort()",
    "from collections import Counter\n\n\ndef count_character_frequency(string):\n    return Counter(string)\n\n\nif __name__ == \"__main__\":\n    assert count_character_frequency(\"aabbcc\") == {\"a\": 2, \"b\": 2, \"c\": 2}",
    "def count_frequency(string):\n    freq = {}\n    for char in string:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    return freq\n\n\nif __name__ == \"__main__\":\n    print(count_frequency(\"abcdef\"))",
    "def count_character_frequency(input_string):\n    character_frequency = {}\n    for character in input_string:\n        if character in character_frequency:\n            character_frequency[character] += 1\n        else:\n            character_frequency[character] = 1\n    return character_frequency\n\n\ndef test_count_character_frequency():\n    assert count_character_frequency(\"abcdabcd\") == {'a': 2, 'b': 2, 'c': 2, 'd': 2}\n\n\ndef main():\n    test_count_character_frequency()\n\n\nif __name__ == '__main__':\n    main()",
    "def count_character(string):\n    d = {}\n    for i in string:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\nprint(count_character('aaabbbbcccccc'))",
    "from collections import Counter\n\n\ndef count_character_frequency(string: str) -> dict:\n    \"\"\"\n    :param string: string to count\n    :return: dictionary of character frequency\n    >>> count_character_frequency(\"\")\n    {}\n    >>> count_character_frequency(\"a\")\n    {'a': 1}\n    >>> count_character_frequency(\"aa\")\n    {'a': 2}\n    >>> count_character_frequency(\"abba\")\n    {'a': 2, 'b': 1}\n    \"\"\"\n    return dict(Counter(string))\n\n\ndef count_character_frequency_2(string: str) -> dict:\n    \"\"\"\n    :param string: string to count\n    :return: dictionary of character frequency\n    >>> count_character_frequency_2(\"\")\n    {}\n    >>> count_character_frequency_2(\"a\")\n    {'a': 1}\n    >>> count_character_frequency_2(\"aa\")\n    {'a': 2}\n    >>> count_character_frequency_2(\"abba\")\n    {'a': 2, 'b': 1}\n    \"\"\"\n    result = {}\n    for char in string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\n# Time Complexity O(n)\n# Space Complexity O(n)\ndef character_frequency(string):\n    return Counter(string)\n\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = character_frequency(string)\n    if output == solution:\n        return True\n    else:\n        return False\n\n\nstring = 'aabbccde'\nsolution = {'a': 2, 'b': 2, 'c': 2, 'd': 1, 'e': 1}\ntest_case = [string, solution]\nassert test_function(test_case) is True",
    "def count_characters(string):\n    dict = {}\n    for char in string:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n\n    return dict\n\nprint(count_characters(\"abababababa\"))",
    "def char_frequency(string):\n    # intializing an empty dictionary\n    dict = {}\n    for n in string:\n        keys = dict.keys()\n        # checking if the character exists in the dictionary\n        if n in keys:\n            # incrementing the value of the key by 1\n            dict[n] += 1\n        else:\n            # else adding the character to the dictionary with value 1\n            dict[n] = 1\n    return dict\n\nprint(char_frequency('google.com'))",
    "def count_frequency(string):\n    frequency = {}\n    for i in string:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    print(count_frequency(\"abcdefgabc\"))",
    "def char_freq(str):\n    char_dict = {}\n    for char in str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n\n    return char_dict\n\n\nif __name__ == '__main__':\n    print(char_freq('abcdef'))",
    "def count_characters(string):\n    char_dict = dict()\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n\nif __name__ == '__main__':\n    print(count_characters('hello'))\n    print(count_characters('world'))\n    print(count_characters('helloworld'))",
    "def char_freq(string):\n    # init empty dict\n    char_freq_dict = dict()\n\n    # iterate over the string\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n\n    # return the dict\n    return char_freq_dict",
    "def character_frequency(string):\n    count = {}\n    for character in string:\n        if character in count:\n            count[character] += 1\n        else:\n            count[character] = 1\n    return count\n\nif __name__ == '__main__':\n    string = 'abcdefghijklmnopqrstuvwxyz'\n    print(character_frequency(string))",
    "def count_character_frequency(string):\n    frequencies = {}\n    for char in string:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"Hello\"))\n    print(count_character_frequency(\"aaaaa\"))",
    "def character_frequency(input_string):\n    # 1. Create a dictionary of characters\n    # 2. Loop through the string\n    # 3. If the character is already present in the dictionary, increase its count by 1\n    # 4. Else add it to the dictionary, setting its count to 1\n    char_freq = {}\n    for char in input_string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\n\nprint(character_frequency('Hello, World!'))",
    "from collections import Counter\n\n\ndef count_char_freq(string):\n    char_freq = Counter(string)\n    print(char_freq)\n\n\ncount_char_freq(\"abcdab\")",
    "def count_char_frequency(s: str) -> dict:\n    \"\"\"Returns a dictionary of characters in s with frequency count.\n\n    Args:\n        s (str): string of characters.\n\n    Returns:\n        dict: dictionary of characters in s with frequency count.\n    \"\"\"\n    return {\n        c: s.count(c) for c in set(s)\n    }\n\n\nif __name__ == \"__main__\":\n    print(count_char_frequency(\"hello\"))",
    "def count_freq(s):\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n\n\nif __name__ == '__main__':\n    print(count_freq('aabbbc'))",
    "def count_char(string):\n    char_dict = {}\n    for i in string:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(count_char(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\n\ndef count_character_frequency(string: str) -> dict:\n    \"\"\"Counts character frequency of a given string.\n\n    Args:\n        string (str): string to count character frequency of\n\n    Returns:\n        dict: character frequency\n    \"\"\"\n    character_frequency = defaultdict(int)\n\n    for character in string:\n        character_frequency[character] += 1\n\n    return character_frequency\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"hello\"))",
    "def frequency(string):\n    count = {}\n    for i in string:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\nprint(frequency(\"abcabc\"))",
    "def count_char(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\n\nif __name__ == '__main__':\n    print(count_char('hello'))",
    "def count_character_frequency(input_string):\n    \"\"\"\n    Returns a dictionary of character frequency.\n    \"\"\"\n    character_frequency = {}\n    for character in input_string:\n        if character in character_frequency:\n            character_frequency[character] += 1\n        else:\n            character_frequency[character] = 1\n    return character_frequency\n\n\nif __name__ == '__main__':\n    test_string = \"I like cats\"\n    print(count_character_frequency(test_string))",
    "def count_character_frequency(string):\n    \"\"\"\n    >>> count_character_frequency(\"abcdef\")\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    \"\"\"\n    char_dict = dict()\n    for char in string:\n        char_dict[char] = char_dict.get(char, 0) + 1\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def frequency_count(str):\n    \"\"\"\n    We will use a dictionary to count the frequency of each character in the string.\n    >>> frequency_count('')\n    {}\n    >>> frequency_count('abcabc')\n    {'a': 2, 'b': 2, 'c': 2}\n    >>> frequency_count('abababab')\n    {'a': 4, 'b': 4}\n    >>> frequency_count('abcd')\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1}\n    \"\"\"\n    frequency = {}\n    for i in str:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from collections import defaultdict\n\n\ndef frequency_count(str1):\n    \"\"\"\n    Return a dict with character frequency.\n    \"\"\"\n    char_frequency = defaultdict(int)\n    for chars in str1:\n        char_frequency[chars] += 1\n\n    return char_frequency\n\n\nif __name__ == \"__main__\":\n    print(frequency_count(\"abcdef\"))",
    "def count_chars(string):\n    char_dict = dict()\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n\nprint(count_chars(\"hello world\"))\nprint(count_chars(\"helloworld\"))\nprint(count_chars(\"123456789\"))",
    "from collections import Counter\n\n\ndef count_character(string):\n    char_dict = Counter(string)\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    print(count_character(\"abcdefgabc\"))",
    "def count_freq(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    freq = count_freq(string)\n    for char, count in freq.items():\n        print(f\"{char}: {count}\")",
    "def count_character_frequency(string):\n    # Create a dictionary to store the character frequency\n    frequency = {}\n\n    for character in string:\n        # Check if the character is already in the dictionary\n        if character in frequency:\n            # Increment the count\n            frequency[character] += 1\n        else:\n            # Add the character to the dictionary\n            frequency[character] = 1\n\n    return frequency",
    "def character_frequency(string):\n    \"\"\"\n    >>> character_frequency(\"abcdef\")\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    \"\"\"\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\n\nif __name__ == \"__main__\":\n    print(count_char(\"Hello World\"))",
    "def count_character(string):\n    char_dict = dict()\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    print(count_character(\"hello world\"))",
    "from collections import Counter\n\n\ndef count_char(input_str):\n    \"\"\"\n    Count character frequency of a given string.\n    :param input_str: str\n    :return: dict\n    \"\"\"\n    return dict(Counter(input_str))",
    "def char_freq(string):\n    \"\"\"\n    >>> char_freq(\"abcdefg\")\n    {'a': 1, 'c': 1, 'b': 1, 'e': 1, 'd': 1, 'g': 1, 'f': 1}\n    >>> char_freq(\"hello\")\n    {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    >>> char_freq(\"aaaaa\")\n    {'a': 5}\n    >>> char_freq(\"\")\n    {}\n    \"\"\"\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def character_count(string):\n    character_counts = {}\n    for character in string:\n        if character in character_counts:\n            character_counts[character] += 1\n        else:\n            character_counts[character] = 1\n    return character_counts\n\n\ndef test_character_count():\n    assert character_count('abb') == {'a': 1, 'b': 2}\n\n\nif __name__ == '__main__':\n    test_character_count()",
    "def char_freq(s: str) -> dict:\n    \"\"\"\n    >>> char_freq(\"Python\")\n    {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    \"\"\"\n    freq = {}\n    for char in s:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_frequency(str):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    frequency = {}\n    for char in str:\n        if char not in frequency:\n            frequency[char] = 1\n        else:\n            frequency[char] += 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    test_str = \"aabbcde\"\n    print(count_frequency(test_str))",
    "def count_char_freq(string):\n    char_freq = {}\n\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    return char_freq\n\n\nif __name__ == \"__main__\":\n    print(count_char_freq(\"abcdefabc\"))",
    "def character_frequency(string):\n    \"\"\"\n    This function takes a string as an input and returns a dictionary\n    of characters and their frequencies.\n    \"\"\"\n    # create an empty dictionary\n    char_freq = dict()\n    # iterate over the string\n    for char in string:\n        # check if the character is already present in the dictionary\n        if char in char_freq:\n            # if present, increment its value by 1\n            char_freq[char] += 1\n        else:\n            # if not present, add the character and its value\n            char_freq[char] = 1\n    # return the character frequency dictionary\n    return char_freq\n\nif __name__ == '__main__':\n    string = input(\"Enter a string: \")\n    print(character_frequency(string))",
    "def count_char(string):\n    counter = {}\n    for character in string:\n        counter[character] = counter.get(character, 0) + 1\n    return counter\n\n\n# test\nstring = \"abcdefgabc\"\nprint(count_char(string))",
    "from collections import Counter\n\ndef character_frequency(text):\n    \"\"\"Count character frequency of a given string.\n\n    Args:\n        text (str): a string.\n\n    Returns:\n        dict: character frequency.\n    \"\"\"\n\n    return dict(Counter(text))\n\n\nif __name__ == '__main__':\n    print(character_frequency('aaabb'))",
    "from collections import Counter\n\n\ndef count_character_frequency(string):\n    return Counter(string)\n\n\nif __name__ == \"__main__\":\n    assert count_character_frequency(\"aaabb\") == {\"a\": 3, \"b\": 2}\n    assert count_character_frequency(\"aabbcc\") == {\"a\": 2, \"b\": 2, \"c\": 2}",
    "def count_freq(string):\n    if len(string) == 0:\n        return {}\n\n    string_dict = {}\n\n    for char in string:\n        if char in string_dict:\n            string_dict[char] += 1\n        else:\n            string_dict[char] = 1\n\n    return string_dict\n\nif __name__ == \"__main__\":\n    string = \"Hello World\"\n    string_dict = count_freq(string)\n\n    for key in string_dict:\n        print(\"'{}' is repeated {} times\".format(key, string_dict[key]))",
    "from collections import Counter\n\ndef character_frequency(string):\n    # if string is empty\n    if not string:\n        return {}\n\n    # count character frequency\n    counter = Counter(string)\n\n    return dict(counter)\n\n# test\nstring = \"abcdef\"\nprint(character_frequency(string))",
    "from collections import Counter\n\n\ndef count_characters(string):\n    count = Counter(string)\n    return count\n\n\nif __name__ == \"__main__\":\n    string = \"abcde\"\n    count = count_characters(string)\n    print(count)",
    "def count_char(string):\n    d = {}\n    for char in string:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    return d\n\n\nif __name__ == \"__main__\":\n    print(count_char(\"abcdef\"))",
    "def count_character_frequency(str):\n    \"\"\"\n    :param str: input string\n    :return: dictionary of character frequency\n    \"\"\"\n    # create dictionary\n    char_freq_dict = {}\n\n    # iterate over each character in string\n    for char in str:\n        if char in char_freq_dict:\n            # update frequency\n            char_freq_dict[char] += 1\n        else:\n            # add new character and frequency\n            char_freq_dict[char] = 1\n\n    return char_freq_dict\n\n\nprint(count_character_frequency(\"hello world\"))",
    "from collections import Counter\n\n\ndef count_char_freq(input_string):\n    \"\"\"\n    Count character frequency of a given string.\n\n    >>> count_char_freq('abcdeabc')\n    Counter({'a': 3, 'b': 2, 'c': 2, 'd': 1, 'e': 1})\n    >>> count_char_freq('ababab')\n    Counter({'a': 3, 'b': 3})\n    >>> count_char_freq('aabbcc')\n    Counter({'a': 2, 'b': 2, 'c': 2})\n    >>> count_char_freq('aabbbccc')\n    Counter({'a': 2, 'b': 3, 'c': 3})\n    \"\"\"\n    return Counter(input_string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef count_character_frequency(string):\n    \"\"\"Count the character frequency of a given string.\n\n    Args:\n        string (str): The string to count the character frequency of.\n\n    Returns:\n        dict: A dictionary of characters and their frequency.\n    \"\"\"\n    return dict(Counter(string))",
    "def count_character_frequency(string):\n    character_frequencies = {}\n    for character in string:\n        if character in character_frequencies:\n            character_frequencies[character] += 1\n        else:\n            character_frequencies[character] = 1\n    return character_frequencies\n\n\nif __name__ == \"__main__\":\n    assert count_character_frequency(\"abcde\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n    assert count_character_frequency(\"aabbbcccc\") == {'a': 2, 'b': 3, 'c': 4}",
    "def count_char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    string = \"aabbbccccdddddd\"\n    print(count_char(string))",
    "def count_char_frequency(input_str):\n    char_dict = {}\n    for char in input_str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    print(count_char_frequency(\"Hello\"))",
    "def count_characters(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    # Create a dictionary.\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\n\ndef main():\n    string = 'banana'\n    count_dict = count_characters(string)\n    print(count_dict)\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import defaultdict\n\n\ndef count_character_frequency(string):\n    counter = defaultdict(int)\n    for char in string:\n        counter[char] += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"abc\"))",
    "def count_character_frequency(s):\n    count = {}\n\n    for c in s:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n\n    return count\n\nif __name__ == '__main__':\n    print(count_character_frequency(\"Hello World\"))",
    "from collections import defaultdict\n\ndef count_char(string):\n    \"\"\"Count the character frequency of a given string\"\"\"\n    char_dict = defaultdict(int)\n    for char in string:\n        char_dict[char] += 1\n    return char_dict\n\ndef test_function():\n    assert count_char('abcdeabcdabcaba') == {'a': 5, 'c': 4, 'b': 3, 'e': 1, 'd': 2, '': 1}\n    assert count_char('a') == {'a': 1}\n    assert count_char('') == {'': 1}\n    assert count_char('hello world') == {' ': 1, 'd': 1, 'l': 2, 'o': 2, 'h': 1, 'w': 1, 'r': 1, 'e': 1, '': 1}",
    "def count_char(text):\n    # initialize an empty dictionary\n    char_dict = {}\n\n    # iterate through the characters in text\n    for char in text:\n        # if the character is in the dictionary, increment its value\n        if char in char_dict:\n            char_dict[char] += 1\n        # otherwise initialize its value to 1\n        else:\n            char_dict[char] = 1\n\n    return char_dict\n\n\nprint(count_char(\"hello\"))\nprint(count_char(\"aaaa\"))\nprint(count_char(\"Python!\"))",
    "def char_freq(input_str: str) -> dict:\n    \"\"\"\n    This function returns the character frequency of a given string.\n    >>> char_freq(\"abcdef\")\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    \"\"\"\n    return {char: input_str.count(char) for char in input_str}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_char_freq(input_str: str) -> dict:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    char_freq: dict = {}\n    for char in input_str:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    return char_freq\n\n\nif __name__ == \"__main__\":\n    print(count_char_freq(\"abcdef\"))\n    print(count_char_freq(\"aabbcc\"))\n    print(count_char_freq(\"aabbccddeeff\"))",
    "def frequency(s: str) -> dict:\n    \"\"\"\n    >>> frequency(\"abcabc\")\n    {'a': 2, 'b': 2, 'c': 2}\n    \"\"\"\n    return {\n        ch: len(list(chars))\n        for ch, chars in itertools.groupby(sorted(s))\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\ndef char_count(string):\n    \"\"\"\n    Use counter to count the frequency of characters in a string\n    \"\"\"\n    return Counter(string)\n\n\nif __name__ == '__main__':\n    print(char_count(\"hello\"))\n    print(char_count(\"world\"))",
    "def count_characters(string):\n    # Create an empty dictionary\n    char_frequency = {}\n    # Traverse through each character of input string\n    for i in string:\n        if i in char_frequency:\n            char_frequency[i] += 1\n        else:\n            char_frequency[i] = 1\n    return char_frequency\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char_frequency = count_characters(string)\n    for i in char_frequency:\n        print(i, \":\", char_frequency[i])\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\n\ndef count_character_frequency(string):\n    # Default dict of type list will provide us a default value of empty list\n    # when we try to access a key which is not present in the dict\n    character_frequency = defaultdict(list)\n    for char in string:\n        character_frequency[char].append(char)\n    return character_frequency\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"Hello\"))\n    print(count_character_frequency(\"Geeks\"))\n    print(count_character_frequency(\"Java\"))",
    "def frequency_count(string):\n    \"\"\"\n    Counts character frequency of a given string.\n    :param string: string\n    :return: dict\n    \"\"\"\n    counter = dict()\n    for char in string:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    string = \"Hello World!\"\n    print(frequency_count(string))",
    "def char_count(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    char_count_dict = {}\n\n    for char in string:\n        if char in char_count_dict:\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n\n    return char_count_dict\n\n\nif __name__ == \"__main__\":\n    string = \"I love coding\"\n    print(char_count(string))",
    "def count_char_freq(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nprint(count_char_freq(\"abcdefgabc\"))\n\n\n# Another way\n\ndef count_char_freq2(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nprint(count_char_freq2(\"abcdefgabc\"))",
    "def count_character(input_string):\n    # TODO: Write your solution here\n    character_dict = {}\n    for character in input_string:\n        character_dict[character] = input_string.count(character)\n    return character_dict\n\n# Test Cases:\nprint(count_character('banana'))\nprint(count_character('Sally sells seashells by the seashore.'))\nprint(count_character(''))",
    "from collections import defaultdict\n\n\ndef count_character_frequency(input_str):\n    count = defaultdict(int)\n\n    for char in input_str:\n        count[char] += 1\n\n    return count\n\n\nprint(count_character_frequency(\"hello\"))\nprint(count_character_frequency(\"hello world\"))",
    "def count_character(input_string):\n    # Fill this in.\n    input_string = input_string.lower()\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\n\nif __name__ == '__main__':\n    # Use input() to take input from stdin and print output to stdout\n    input_string = input()\n    print(count_character(input_string))",
    "def character_frequency(string):\n    dict = {}\n    for char in string:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    return dict\n\n\nif __name__ == '__main__':\n    print(character_frequency('hello'))",
    "def count_character(string):\n    result = {}\n    for char in string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n\nprint(count_character('abcabca'))\nprint(count_character('abc'))\nprint(count_character(''))",
    "def count_character_frequency(s: str) -> dict:\n    \"\"\"Counts character frequency of a given string.\n\n    Args:\n        s (str): String to count character frequency.\n\n    Returns:\n        dict: Character frequency.\n    \"\"\"\n    result: dict = {}\n    for c in s:\n        result[c] = result.get(c, 0) + 1\n    return result",
    "from collections import Counter\n\ndef char_frequency(str1):\n    # split the string into a list of single characters\n    str1 = str1.split()\n    # use Counter method to count the characters in the list\n    result = Counter(str1)\n    return result\n\nprint(char_frequency(\"the quick brown fox jumps over the lazy dog\"))",
    "def count_chars(s):\n    \"\"\"\n    >>> count_chars(\"abcdefgh\")\n    {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1}\n    \"\"\"\n    result = {}\n    for c in s:\n        result[c] = result.get(c, 0) + 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def count_characters(s):\n    \"\"\"\n    :param s: str - string to count\n    :return: dict - dictionary of char frequency\n    \"\"\"\n    return {k:v for k, v in zip(*collections.Counter(s).most_common())}\n\n\ndef test_function(test_case):\n    s = test_case[0]\n    solution = test_case[1]\n    output = count_characters(s)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"False\")\n\n\nstring = 'abcbab'\nsolution = {'a': 3, 'b': 2, 'c': 1}\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = 'Mississippi'\nsolution = {'M': 1, 'i': 4, 's': 4, 'u': 2, 'p': 1}\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = ''\nsolution = {}\ntest_case = [string, solution]\ntest_function(test_case)",
    "def char_frequency(s):\n    d = {}\n    for char in s:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    return d\n\n\nprint(char_frequency(\"AaBBbCDdDD\"))",
    "def count_char_frequency(input_str):\n    \"\"\"\n    >>> count_char_frequency(\"google\")\n    {'g': 2, 'o': 2, 'l': 1, 'e': 1}\n    >>> count_char_frequency(\"\")\n    {}\n    \"\"\"\n    char_dict = {}\n    for char in input_str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    return char_dict\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef character_frequency(string):\n    frequency = {}\n    for i in string:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    print(character_frequency(\"google.com\"))",
    "def count_char(input_str):\n    char_dict = {}\n    for char in input_str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\ndef test_cases():\n    assert count_char(\"aabbcc\") == {'a': 2, 'b': 2, 'c': 2}\n    assert count_char(\"aaaabbc\") == {'a': 4, 'b': 1, 'c': 1}\n\ntest_cases()",
    "from collections import defaultdict\n\n\ndef count_char_frequency(string):\n    char_frequency_map = defaultdict(int)\n    for char in string:\n        char_frequency_map[char] += 1\n\n    return char_frequency_map\n\n\nif __name__ == \"__main__\":\n    assert count_char_frequency(\"Hello\") == {\"H\": 1, \"e\": 1, \"l\": 2, \"o\": 1}",
    "def count_char(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n\ndef test_count_char():\n    \"\"\"run test cases\"\"\"\n    test_cases = [\n        (\"Hello, World!\", {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1, '!': 1}),\n        (\"\", {}),\n    ]\n\n    for arg, expected in test_cases:\n        assert count_char(arg) == expected\n\n\nif __name__ == '__main__':\n    test_count_char()",
    "from collections import Counter\n\n\ndef count_character_frequency(string):\n    count_dict = Counter(string)\n    return count_dict\n\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(count_character_frequency(string))",
    "def count_char(string):\n    \"\"\"\n    >>> count_char(\"abcabc\")\n    {'a': 3, 'b': 2, 'c': 2}\n    \"\"\"\n    if not string:\n        return {}\n\n    # Initialize the dictionary\n    char_count = {}\n\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_character_frequency(str):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    result = {}\n\n    for char in str:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n\n    return result\n\ndef count_character_frequency2(str):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    result = {}\n\n    for char in str:\n        result[char] = result.get(char, 0) + 1\n\n    return result",
    "# O(n) time | O(n) space\ndef charFrequency(string):\n    counter = {}\n    for char in string:\n        if char not in counter:\n            counter[char] = 0\n        counter[char] += 1\n    return counter",
    "def count_char(string):\n    \"\"\"\n    Count the frequency of a given character in a string.\n\n    :param string: str\n    :return count: int\n    \"\"\"\n    count = 0\n    for char in string:\n        if char == string[0]:\n            count += 1\n    return count\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(count_char(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\n\n\ndef count_character_frequency(string: str) -> dict:\n    \"\"\"Returns a dictionary of characters and their frequencies.\n\n    Args:\n        string: string to count character frequency of\n\n    Returns:\n        dict: dictionary of characters and their frequencies\n\n    Examples:\n        >>> count_character_frequency('Hello, World!')\n        {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1, '!': 1}\n        >>> count_character_frequency('AaBbCc')\n        {'A': 1, 'a': 2, 'B': 1, 'b': 2, 'C': 1, 'c': 2}\n    \"\"\"\n    character_frequency = defaultdict(int)\n\n    for character in string:\n        character_frequency[character] += 1\n\n    return character_frequency\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"Hello, World!\"))\n    print(count_character_frequency(\"AaBbCc\"))",
    "def count_chars(s):\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    return counts\n\nprint(count_chars('abcdef'))\nprint(count_chars('abccdeff'))",
    "def count_char_freq(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    return char_freq\n\n\ndef test_count_char_freq():\n    assert count_char_freq(\"abcdef\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n\n\nif __name__ == '__main__':\n    test_count_char_freq()",
    "def count_char(string):\n    count = {}\n    for c in string:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_char(\"AaBbCc\"))",
    "from collections import Counter\n\n\ndef count_character_frequency(string):\n    char_count = Counter()\n    for char in string:\n        char_count[char] += 1\n    return char_count\n\n\nif __name__ == \"__main__\":\n    print(count_character_frequency(\"aabbc\"))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}