{
  "problem": {
    "task_id": "MBPP/51",
    "prompt": "Write a function to print check if the triangle is equilateral or not.",
    "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
    "test_list": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "challenge_test_list": [],
    "problem_id": 40
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def equilateral_tri(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n\nprint(equilateral_tri(2, 2, 2))\nprint(equilateral_tri(3, 3, 3))\nprint(equilateral_tri(2, 2, 3))",
    "def is_equilateral_triangle(a, b, c):\n    if a == b == c:\n        print('Equilateral')\n    else:\n        print('Not Equilateral')\n\n\nis_equilateral_triangle(1, 1, 1)",
    "def equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\ndef main():\n    a=int(input(\"Enter first side: \"))\n    b=int(input(\"Enter second side: \"))\n    c=int(input(\"Enter third side: \"))\n    if equilateral(a,b,c):\n        print(\"Triangle is equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef equilateral(side1, side2, side3):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    if side1 == side2 and side2 == side3:\n        return \"It is an equilateral triangle.\"\n    return \"It is not an equilateral triangle.\"\n\ndef is_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    return side1 == side2 and side2 == side3\n\ndef is_right(side1, side2, side3):\n    \"\"\"\n    Check if the triangle is right or not.\n    \"\"\"\n    return math.pow(side1, 2) + math.pow(side2, 2) == math.pow(side3, 2)\n\ndef is_scalene(side1, side2, side3):\n    \"\"\"\n    Check if the triangle is scalene or not.\n    \"\"\"\n    return side1 != side2 and side2 != side3\n\ndef is_isosceles(side1, side2, side3):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    \"\"\"\n    return side1 == side2 or side2 == side3 or side1 == side3",
    "def is_equilateral(side_a, side_b, side_c):\n    \"\"\"\n    >>> is_equilateral(5, 5, 5)\n    True\n    >>> is_equilateral(3, 4, 5)\n    False\n    \"\"\"\n    return side_a == side_b == side_c\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def equilateral_triangle(a, b, c):\n    \"\"\"\n    >>> equilateral_triangle(1, 1, 1)\n    Equilateral\n    >>> equilateral_triangle(1, 1, 2)\n    Not Equilateral\n    >>> equilateral_triangle(1, 2, 1)\n    Not Equilateral\n    >>> equilateral_triangle(2, 1, 1)\n    Not Equilateral\n    \"\"\"\n    if a == b == c:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def check_triangle(a, b, c):\n    if a > b + c or b > a + c or c > a + b:\n        print(\"Invalid triangle\")\n        return\n    if a == b and b == c:\n        print(\"Equilateral\")\n    elif a == b or b == c or c == a:\n        print(\"Isosceles\")\n    else:\n        print(\"Scalene\")\n\n\ncheck_triangle(3, 4, 5)\ncheck_triangle(3, 3, 3)\ncheck_triangle(3, 3, 4)",
    "def is_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\nprint(is_equilateral(1, 1, 1))\nprint(is_equilateral(2, 2, 2))\nprint(is_equilateral(1, 2, 3))",
    "def equilateral(side1, side2, side3):\n    return side1 == side2 and side2 == side3\n\n\ndef main():\n    print(equilateral(3, 3, 3))\n    print(equilateral(3, 3, 4))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_triangle(a, b, c):\n    if a == b and b == c:\n        print('Equilateral triangle')\n    elif a == b or b == c or a == c:\n        print('Isosceles triangle')\n    else:\n        print('Scalene triangle')\n\n\ncheck_triangle(3, 3, 3)\ncheck_triangle(3, 4, 5)\ncheck_triangle(3, 3, 4)",
    "def check_equilateral_triangle(side_a, side_b, side_c):\n    if side_a == side_b and side_b == side_c:\n        return \"Equilateral\"\n    elif side_a == side_b or side_b == side_c or side_a == side_c:\n        return \"Isosceles\"\n    return \"Scalene\"\n\n\nprint(check_equilateral_triangle(5, 5, 5))\nprint(check_equilateral_triangle(3, 4, 5))\nprint(check_equilateral_triangle(3, 3, 3))",
    "def equilateral(a, b, c):\n    if (a == b) and (b == c):\n        print(\"Triangle is equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n\n\nequilateral(2, 2, 2)\nequilateral(3, 4, 4)",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_scalene(a, b, c):\n    return a != b and b != c and a != c",
    "def equilateral_triangle(a, b, c):\n    \"\"\"\n    >>> equilateral_triangle(1, 1, 1)\n    Equilateral\n    >>> equilateral_triangle(1, 2, 2)\n    Not Equilateral\n    >>> equilateral_triangle(1, 2, 3)\n    Not Equilateral\n    \"\"\"\n    if a == b == c:\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_scalene(a, b, c):\n    return a != b != c\n\n\ndef is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and c + a > b\n\n\ndef is_triangle(a, b, c):\n    return is_valid_triangle(a, b, c) and (\n        is_equilateral(a, b, c)\n        or is_isosceles(a, b, c)\n        or is_scalene(a, b, c)\n    )\n\n\nif __name__ == \"__main__\":\n    assert is_triangle(3, 4, 5) == True\n    assert is_triangle(3, 4, 7) == False\n    assert is_triangle(2, 2, 2) == False",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def equilateral_triangle(side1, side2, side3):\n    if side1 == side2 and side1 == side3:\n        print('Triangle is equilateral')\n    else:\n        print('Triangle is not equilateral')\n\n\nequilateral_triangle(5, 5, 5)\nequilateral_triangle(5, 5, 6)",
    "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")\n\nequilateral_triangle(1, 2, 3)",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_scalene(a, b, c):\n    return a != b and b != c and a != c\n\n\ndef is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\ndef is_right_triangle(a, b, c):\n    return (a**2 + b**2) == c**2 or (a**2 + c**2) == b**2 or (b**2 + c**2) == a**2\n\n\ndef main():\n    assert is_equilateral(3, 3, 3)\n    assert not is_equilateral(3, 3, 4)\n    assert not is_equilateral(3, 4, 4)\n\n    assert is_isosceles(3, 4, 4)\n    assert not is_isosceles(3, 3, 4)\n    assert not is_isosceles(3, 4, 5)\n\n    assert is_scalene(3, 4, 5)\n    assert not is_scalene(3, 3, 4)\n    assert not is_scalene(3, 4, 4)\n\n    assert is_valid_triangle(1, 2, 2)\n    assert not is_valid_triangle(1, 2, 3)\n\n    assert is_right_triangle(3, 4, 5)\n    assert not is_right_triangle(3, 4, 6)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def check_equilateral(a, b, c):\n    if a == b and b == c:\n        print(\"Equilateral Triangle\")\n    else:\n        print(\"Not Equilateral Triangle\")\n\ncheck_equilateral(1, 1, 1)\ncheck_equilateral(1, 1, 2)\n\ndef check_equilateral_with_if(a, b, c):\n    if a == b and b == c:\n        print(\"Equilateral Triangle\")\n    else:\n        print(\"Not Equilateral Triangle\")\n\ncheck_equilateral_with_if(1, 1, 1)\ncheck_equilateral_with_if(1, 1, 2)",
    "def equilateral(a, b, c):\n    return a == b == c\n\n\ndef equilateral_wrapper(a, b, c):\n    return equilateral(a, b, c)",
    "def is_equilateral(a, b, c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n\n\nprint(is_equilateral(1, 1, 1))",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    if a == b and b == c:\n        return True\n    return False\n\n\ndef is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\ndef is_scalene(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    return False\n\n\ndef is_triangle(a, b, c):\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    return True\n\n\ndef equilateral_triangle(a, b, c):\n    if is_triangle(a, b, c) and is_equilateral(a, b, c):\n        return \"Equilateral\"\n    return \"Not a triangle\"\n\n\ndef isosceles_triangle(a, b, c):\n    if is_triangle(a, b, c) and is_isosceles(a, b, c):\n        return \"Isosceles\"\n    return \"Not a triangle\"\n\n\ndef scalene_triangle(a, b, c):\n    if is_triangle(a, b, c) and is_scalene(a, b, c):\n        return \"Scalene\"\n    return \"Not a triangle\"\n\n\ndef is_valid_triangle(a, b, c):\n    if is_triangle(a, b, c):\n        return \"Valid\"\n    return \"Invalid\"\n\n\ndef main():\n    a = 3\n    b = 5\n    c = 7\n    print(equilateral_triangle(a, b, c))\n    print(isosceles_triangle(a, b, c))\n    print(scalene_triangle(a, b, c))\n    print(is_valid_triangle(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\ndef equilateral(sides):\n    if sides[0] == sides[1] and sides[0] == sides[2]:\n        return True\n    return False\n\ndef is_valid_triangle(sides):\n    for side in sides:\n        if side <= 0:\n            return False\n    return True\n\ndef is_equilateral(sides):\n    return equilateral(sides)\n\ndef is_isosceles(sides):\n    if equilateral(sides) or len(set(sides)) == 1:\n        return True\n    return False\n\ndef is_scalene(sides):\n    if len(set(sides)) == 3:\n        return True\n    return False\n\ndef is_right(sides):\n    # a^2 + b^2 = c^2\n    # if sides[0]**2 + sides[1]**2 == sides[2]**2:\n    #     return True\n    # return False\n\n    # or\n\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n\ndef is_acute(sides):\n    # the angle between two sides should be less than 90\n    if (sides[1]**2 + sides[2]**2 - sides[0]**2)/(2*sides[1]*sides[2]) < 1:\n        return True\n    return False\n\ndef is_obtuse(sides):\n    # the angle between two sides should be greater than 90\n    if (sides[1]**2 + sides[2]**2 - sides[0]**2)/(2*sides[1]*sides[2]) >= 1:\n        return True\n    return False\n\ndef is_degenerate(sides):\n    # all sides are equal\n    return not is_valid_triangle(sides)\n\ndef is_equiangular(sides):\n    # all angles are equal\n    if len(set(sides)) == 1:\n        return True\n    return False\n\ndef is_",
    "def check_triangle(a: int, b: int, c: int):\n    if a == b == c:\n        return \"Equilateral\"\n    if a == b or a == c or b == c:\n        return \"Isosceles\"\n    return \"Scalene\"\n\n\nprint(check_triangle(2, 3, 2))\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(2, 2, 2))",
    "def is_equilateral(a, b, c):\n    if a == b and b == c:\n        return True\n    return False\n\n\ndef is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\ndef is_scalene(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    return False\n\n\ndef equilateral(a, b, c):\n    if is_equilateral(a, b, c):\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n\ndef isosceles(a, b, c):\n    if is_isosceles(a, b, c):\n        return \"Isosceles\"\n    return \"Not Isosceles\"\n\n\ndef scalene(a, b, c):\n    if is_scalene(a, b, c):\n        return \"Scalene\"\n    return \"Not Scalene\"\n\n\ndef is_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a triangle\"\n    return \"A triangle\"\n\n\ndef area_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a triangle\"\n    half_perimeter = (a + b + c) / 2\n    area = (half_perimeter * (half_perimeter - a) * (half_perimeter - b) * (half_perimeter - c)) ** 0.5\n    return area\n\n\ndef test_is_triangle():\n    assert is_triangle(1, 2, 2) == \"Not a triangle\"\n    assert is_triangle(1, 2, 3) == \"A triangle\"\n\n\ndef test_area_triangle():\n    assert area_triangle(1, 2, 2) == \"Not a triangle\"\n    assert area_triangle(1, 2, 3) == 0.",
    "import math\n\ndef check_triangle(side1, side2, side3):\n    if side1 == side2 == side3:\n        print(\"Equilateral\")\n    elif side1 != side2 != side3:\n        print(\"Scalene\")\n    else:\n        print(\"Isosceles\")\n\ncheck_triangle(1, 1, 1)\ncheck_triangle(3, 4, 5)\ncheck_triangle(5, 6, 6)",
    "def is_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    >>> is_triangle(1, 1, 1)\n    True\n    >>> is_triangle(1, 2, 1)\n    False\n    >>> is_triangle(1, 1, 0)\n    False\n    \"\"\"\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n\n\ndef is_equilateral(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    >>> is_equilateral(1, 1, 1)\n    True\n    >>> is_equilateral(1, 2, 1)\n    False\n    >>> is_equilateral(1, 1, 0)\n    False\n    \"\"\"\n    return is_triangle(side1, side2, side3) and side1 == side2 and side2 == side3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def check_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"Triangle cannot be formed\"\n\n    if a + b <= c or b + c <= a or a + c <= b:\n        return \"Triangle cannot be formed\"\n\n    if a == b == c:\n        return \"Equilateral\"\n\n    if a == b or b == c or c == a:\n        return \"Isosceles\"\n\n    return \"Scalene\"\n\n\nprint(check_triangle(1, 1, 1))\nprint(check_triangle(1, 2, 3))\nprint(check_triangle(1, 2, 1))",
    "def check_triangle(a: int, b: int, c: int) -> str:\n    \"\"\"\n    >>> check_triangle(4, 4, 4)\n    Equilateral\n    >>> check_triangle(3, 4, 4)\n    Not Equilateral\n    \"\"\"\n    if a == b and b == c:\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_equilateral_triangle(side1, side2, side3):\n    return side1 == side2 and side2 == side3\n\n\nif __name__ == \"__main__\":\n    print(is_equilateral_triangle(1, 1, 1))\n    print(is_equilateral_triangle(1, 1, 2))\n    print(is_equilateral_triangle(1, 2, 1))\n    print(is_equilateral_triangle(1, 2, 3))",
    "def is_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    return False\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    equilateral = is_equilateral(a, b, c)\n    if equilateral:\n        print(\"It is equilateral.\")\n    else:\n        print(\"It is not equilateral.\")\n\nif __name__ == \"__main__\":\n    main()",
    "class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def is_equilateral(self):\n        return self.a == self.b and self.b == self.c\n\n\ndef main():\n    triangle = Triangle(1, 1, 1)\n    print(triangle.is_equilateral())\n\n    triangle = Triangle(1, 2, 2)\n    print(triangle.is_equilateral())\n\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef is_equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        return \"Equilateral\"\n    if side1 == side2 or side1 == side3 or side2 == side3:\n        return \"Isosceles\"\n    return \"Scalene\"\n\n\ndef is_triangle(side1, side2, side3):\n    sides = sorted([side1, side2, side3])\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    return True\n\n\ndef is_valid_triangle(side1, side2, side3):\n    if is_triangle(side1, side2, side3):\n        return is_equilateral(side1, side2, side3)\n    return False\n\n\ndef is_valid_triangle_sqrt(side1, side2, side3):\n    sides = sorted([side1, side2, side3])\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n        return \"Equilateral\"\n    elif sides[0] ** 2 + sides[1] ** 2 > sides[2] ** 2:\n        return \"Isosceles\"\n    return \"Scalene\"\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle(2, 2, 2))\n    print(is_valid_triangle(3, 4, 5))\n    print(is_valid_triangle(5, 1, 25))\n    print(is_valid_triangle(5, 6, 7))\n    print(is_valid_triangle(1, 2, 3))\n    print(is_valid_triangle(1, 1, 3))\n    print(is_valid_triangle(2, 2, 3))\n    print(is_valid_triangle(1, 2, 1))",
    "import math\n\n\ndef is_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Checks if the triangle is equilateral or not.\n\n    Args:\n        a (float): first side of triangle\n        b (float): second side of triangle\n        c (float): third side of triangle\n\n    Returns:\n        bool: True if equilateral, else False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return True\n    return False\n\n\ndef is_triangle_v2(a: float, b: float, c: float) -> bool:\n    \"\"\"Checks if the triangle is equilateral or not.\n\n    Args:\n        a (float): first side of triangle\n        b (float): second side of triangle\n        c (float): third side of triangle\n\n    Returns:\n        bool: True if equilateral, else False\n    \"\"\"\n    if math.sqrt(a ** 2 + b ** 2) > c:\n        return False\n    if math.sqrt(a ** 2 + c ** 2) > b:\n        return False\n    if math.sqrt(b ** 2 + c ** 2) > a:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_triangle(3, 4, 5) is False\n    assert is_triangle(3, 3, 3) is True\n    assert is_triangle_v2(3, 4, 5) is False\n    assert is_triangle_v2(3, 3, 3) is True",
    "def is_equilateral(sides):\n    if len(sides) != 3:\n        raise ValueError(\"Triangle must have 3 sides.\")\n\n    # Sort the sides so that the smallest is first\n    sides.sort()\n\n    # If all sides are equal, it is an equilateral triangle\n    return sides[0] == sides[1] == sides[2]\n\n\ndef test_is_equilateral():\n    assert is_equilateral([3, 3, 3])\n    assert is_equilateral([1, 2, 3]) is False\n\n\nif __name__ == '__main__':\n    test_is_equilateral()",
    "def check_triangle_type(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or a == c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n\nif __name__ == \"__main__\":\n    print(check_triangle_type(10, 10, 10))\n    print(check_triangle_type(10, 10, 11))\n    print(check_triangle_type(10, 11, 12))",
    "def check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\nprint(check_equilateral(2,2,2))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(3,3,3))",
    "import math\n\n\ndef equilateral_triangle(a, b, c):\n    if (a == b) and (b == c):\n        return \"Equilateral\"\n    elif (a != b) and (b != c) and (a != c):\n        return \"Not Equilateral\"\n    else:\n        return \"Isosceles\"\n\n\ndef equilateral_triangle_math(a, b, c):\n    if math.sqrt(a*a + b*b) == c:\n        return \"Equilateral\"\n    elif math.sqrt(a*a + b*b) != c:\n        return \"Not Equilateral\"\n    else:\n        return \"Isosceles\"\n\n\nprint(equilateral_triangle(3, 3, 3))\nprint(equilateral_triangle(3, 3, 4))\nprint(equilateral_triangle(3, 4, 3))\nprint(equilateral_triangle(3, 4, 4))\nprint(equilateral_triangle(4, 3, 3))\nprint(equilateral_triangle(4, 3, 4))\nprint(equilateral_triangle(4, 4, 3))\nprint(equilateral_triangle(4, 4, 4))\n\nprint(equilateral_triangle_math(3, 3, 3))\nprint(equilateral_triangle_math(3, 3, 4))\nprint(equilateral_triangle_math(3, 4, 3))\nprint(equilateral_triangle_math(3, 4, 4))\nprint(equilateral_triangle_math(4, 3, 3))\nprint(equilateral_triangle_math(4, 3, 4))\nprint(equilateral_triangle_math(4, 4, 3))\nprint(equilateral_triangle_math(4, 4, 4))",
    "def equilateral_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    if a == b == c:\n        return 'Equilateral'\n    elif a != b != c:\n        return 'Scalene'\n    else:\n        return 'Isosceles'\n\n\ndef main():\n    a = int(input(\"Enter side a: \"))\n    b = int(input(\"Enter side b: \"))\n    c = int(input(\"Enter side c: \"))\n    print(\"Equilateral\")\n    print(\"Scalene\")\n    print(\"Isosceles\")\n    print(equilateral_triangle(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_scalene(a, b, c):\n    return a != b and b != c and a != c\n\n\ndef is_valid(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\ndef is_right(a, b, c):\n    return sqrt(a**2 + b**2) == c or sqrt(a**2 + c**2) == b or sqrt(b**2 + c**2) == a\n\n\ndef triangle_type(a, b, c):\n    if not is_valid(a, b, c):\n        raise ValueError(\"Invalid triangle\")\n\n    if is_equilateral(a, b, c):\n        return \"Equilateral\"\n\n    if is_isosceles(a, b, c):\n        return \"Isosceles\"\n\n    if is_scalene(a, b, c):\n        return \"Scalene\"\n\n    if is_right(a, b, c):\n        return \"Right\"\n\n    return \"Invalid\"",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_equi_tri(a, b, c):\n    if is_equilateral(a, b, c):\n        print(\"Triangle is equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n\n\nif __name__ == '__main__':\n    a = int(input(\"Enter a side of triangle: \"))\n    b = int(input(\"Enter another side of triangle: \"))\n    c = int(input(\"Enter another side of triangle: \"))\n    is_equi_tri(a, b, c)",
    "def is_equilateral(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return True\n    return False\n\n\ndef is_right(side1, side2, side3):\n    if side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2:\n        return True\n    return False\n\n\ndef is_isosceles(side1, side2, side3):\n    if side1 == side2 or side2 == side3 or side3 == side1:\n        return True\n    return False\n\n\ndef is_scalene(side1, side2, side3):\n    if side1 != side2 and side2 != side3 and side3 != side1:\n        return True\n    return False\n\n\ndef is_triangle(side1, side2, side3):\n    if side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2:\n        return True\n    return False\n\n\ndef is_degenerate(side1, side2, side3):\n    if side1 == 0 or side2 == 0 or side3 == 0:\n        return True\n    return False\n\n\ndef check_triangle(side1, side2, side3):\n    if is_triangle(side1, side2, side3):\n        if is_scalene(side1, side2, side3):\n            return \"Scalene Triangle\"\n        elif is_isosceles(side1, side2, side3):\n            return \"Isosceles Triangle\"\n        elif is_right(side1, side2, side3):\n            return \"Right Angle Triangle\"\n        elif is_equilateral(side1, side2, side3):\n            return \"Equilateral Triangle\"\n    else:\n        return \"Not a triangle\"\n\n\ndef main():\n    print(check_triangle(2, 2, 2))\n    print(check_triangle(4, 5, 6))\n    print(check_triangle(2, 2, 3))\n    print(check_",
    "def equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        print(\"It is equilateral\")\n    else:\n        print(\"It is not equilateral\")\n\n\nequilateral(3, 3, 3)\nequilateral(2, 2, 3)",
    "def is_equilateral(side1, side2, side3):\n    return side1 == side2 == side3\n\n\ndef is_right(side1, side2, side3):\n    return side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2\n\n\ndef is_isosceles(side1, side2, side3):\n    return side1 == side2 or side1 == side3 or side2 == side3\n\n\ndef is_scalene(side1, side2, side3):\n    return side1 != side2 and side1 != side3 and side2 != side3",
    "import math\n\n\ndef is_triangle(sides):\n    \"\"\"\n    >>> is_triangle([1, 1, 1])\n    True\n    >>> is_triangle([1, 2, 2])\n    False\n    \"\"\"\n    return math.isclose(sides[0], sides[1]) and math.isclose(sides[1], sides[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def equilateral_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return a == b == c\n\n\nif __name__ == \"__main__\":\n    print(equilateral_triangle(1, 1, 1))\n    print(equilateral_triangle(1, 1, 2))",
    "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        return \"Equilateral Triangle\"\n    return \"Not Equilateral Triangle\"\n\n\nif __name__ == \"__main__\":\n    print(equilateral_triangle(2, 2, 2))",
    "def check_triangle(a: float, b: float, c: float) -> str:\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or a == c or b == c:\n        return \"Isosceles\"\n    return \"Scalene\"\n\n\nif __name__ == \"__main__\":\n    print(check_triangle(3, 3, 3))\n    print(check_triangle(5, 5, 5))\n    print(check_triangle(3, 3, 5))\n    print(check_triangle(2, 3, 4))",
    "def equilateral(a, b, c):\n    return a == b == c\n\nprint(equilateral(3, 3, 3))\nprint(equilateral(3, 3, 4))",
    "def equilateral(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\nprint(equilateral(1, 2, 3))\nprint(equilateral(1, 1, 1))",
    "def is_equilateral(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a != b and b != c and a != c:\n        return \"Scalene\"\n    elif a == b or b == c or a == c:\n        return \"Isoceles\"\n\n\nis_equilateral(1, 1, 1)",
    "def is_equilateral(sides):\n    if sides[0] == sides[1] == sides[2]:\n        return True\n    return False\n\n\ndef is_isosceles(sides):\n    if sides[0] == sides[1] or sides[1] == sides[2] or sides[2] == sides[0]:\n        return True\n    return False\n\n\ndef is_scalene(sides):\n    if sides[0] != sides[1] != sides[2]:\n        return True\n    return False\n\n\ndef main():\n    print(\"Equilateral Triangle:\", is_equilateral([2, 2, 2]))\n    print(\"Isosceles Triangle:\", is_isosceles([2, 2, 3]))\n    print(\"Scalene Triangle:\", is_scalene([2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def equilateral_triangle(side_a, side_b, side_c):\n    if side_a == side_b and side_b == side_c:\n        return 'Equilateral triangle'\n    else:\n        return 'Not an equilateral triangle'\n\n\ndef test_equilateral_triangle():\n    assert equilateral_triangle(1, 1, 1) == 'Equilateral triangle'\n    assert equilateral_triangle(2, 2, 2) == 'Equilateral triangle'\n    assert equilateral_triangle(1, 2, 3) == 'Not an equilateral triangle'\n    assert equilateral_triangle(2, 3, 4) == 'Not an equilateral triangle'\n    assert equilateral_triangle(1, 1, 2) == 'Not an equilateral triangle'\n    assert equilateral_triangle(2, 1, 2) == 'Not an equilateral triangle'\n\n\nif __name__ == '__main__':\n    test_equilateral_triangle()",
    "def equilateral_triangle(a, b, c):\n    if a == b and b == c:\n        print('Equilateral')\n    else:\n        print('Not equilateral')\n\n\nequilateral_triangle(3, 3, 3)\nequilateral_triangle(3, 3, 2)",
    "def is_equilateral(sides):\n    return (sides[0] == sides[1]) and (sides[1] == sides[2])\n\n\ndef is_equilateral_test():\n    \"\"\"\n    >>> is_equilateral_test()\n    True\n    False\n    \"\"\"\n    print(is_equilateral([3, 3, 3]))\n    print(is_equilateral([3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def is_equilateral(sides):\n    return all(sides[i] == sides[0] for i in range(3))\n\n\ndef is_equilateral_alt(sides):\n    return len(set(sides)) == 1",
    "def equilateral(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n\ndef test_equilateral():\n    assert equilateral(3, 3, 3) == \"Equilateral\"\n    assert equilateral(3, 3, 4) == \"Not Equilateral\"",
    "def equilateral(a, b, c):\n    if a == b and b == c:\n        print(\"It is equilateral\")\n    else:\n        print(\"It is not equilateral\")\n\nequilateral(4, 4, 4)",
    "def equilateral(a, b, c):\n    if a == b == c:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")\n\n\nequilateral(3, 3, 3)",
    "def is_equilateral(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    elif a != b and a != c and b != c:\n        return \"Scalene\"\n    else:\n        return \"Isoceles\"\n\n\ndef main():\n    print(is_equilateral(4, 4, 4))\n    print(is_equilateral(4, 4, 6))\n    print(is_equilateral(2, 3, 4))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef equilateral(a, b, c):\n    if is_triangle(a, b, c):\n        return is_equilateral(a, b, c)\n    return False\n\n\nif __name__ == '__main__':\n    a = float(input())\n    b = float(input())\n    c = float(input())\n    print(equilateral(a, b, c))",
    "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        print('Equilateral Triangle')\n    else:\n        print('Not Equilateral Triangle')\n\n\nequilateral_triangle(2, 2, 2)\nequilateral_triangle(2, 2, 3)",
    "def check_equilateral(sides):\n    if sides[0] == sides[1] == sides[2]:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n\nprint(check_equilateral([2, 2, 2]))",
    "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def check_equilateral(self):\n        if self.side1 == self.side2 == self.side3:\n            return True\n        else:\n            return False\n\n\nt = Triangle(2, 2, 2)\nprint(t.check_equilateral())",
    "def equilateral_triangle(x, y, z):\n    if x == y and y == z:\n        print(\"Triangle is equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n\n\nequilateral_triangle(3, 3, 3)",
    "def equilateral_triangle(side_a, side_b, side_c):\n    if side_a == side_b == side_c:\n        print(\"Equilateral triangle\")\n    else:\n        print(\"Not an equilateral triangle\")\n\n\nequilateral_triangle(1, 1, 1)\nequilateral_triangle(2, 2, 2)\nequilateral_triangle(1, 2, 3)",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or a == c or b == c\n\n\ndef is_scalene(a, b, c):\n    return a != b != c\n\n\ndef is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and c + a > b\n\n\ndef equilateral(a, b, c):\n    if is_equilateral(a, b, c):\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n\ndef isosceles(a, b, c):\n    if is_isosceles(a, b, c):\n        return \"Isosceles\"\n    return \"Not Isosceles\"\n\n\ndef scalene(a, b, c):\n    if is_scalene(a, b, c):\n        return \"Scalene\"\n    return \"Not Scalene\"\n\n\ndef triangle(a, b, c):\n    if is_valid_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return equilateral(a, b, c)\n        elif is_isosceles(a, b, c):\n            return isosceles(a, b, c)\n        elif is_scalene(a, b, c):\n            return scalene(a, b, c)\n    else:\n        return \"Not a valid triangle\"\n\n\ndef test_equilateral():\n    assert equilateral(2, 2, 2) == \"Equilateral\"\n\n\ndef test_isosceles():\n    assert isosceles(2, 2, 3) == \"Isosceles\"\n\n\ndef test_scalene():\n    assert scalene(3, 4, 5) == \"Scalene\"\n\n\ndef test_is_valid_triangle():\n    assert is_valid_triangle(1, 2, 2) is",
    "def check_triangle(a, b, c):\n    if a > (b + c) or b > (a + c) or c > (b + a):\n        return 'Invalid triangle'\n\n    if a == b == c:\n        return 'Equilateral triangle'\n\n    if a == b or b == c or c == a:\n        return 'Isoceles triangle'\n\n    return 'Scalene triangle'\n\n\nassert(check_triangle(3, 3, 3) == 'Equilateral triangle')\nassert(check_triangle(3, 3, 4) == 'Isoceles triangle')\nassert(check_triangle(3, 4, 5) == 'Scalene triangle')\nassert(check_triangle(3, 4, 6) == 'Invalid triangle')",
    "def check_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not\n    >>> check_triangle(1, 1, 1)\n    Equilateral\n    >>> check_triangle(1, 1, 2)\n    Not Equilateral\n    >>> check_triangle(1, 2, 2)\n    Equilateral\n    >>> check_triangle(1, 2, 1)\n    Not Equilateral\n    >>> check_triangle(2, 1, 1)\n    Equilateral\n    >>> check_triangle(1, 2, 3)\n    Not Equilateral\n    \"\"\"\n    if a == b == c:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")\n\n\ndef main():\n    check_triangle(1, 1, 1)\n    check_triangle(1, 1, 2)\n    check_triangle(1, 2, 2)\n    check_triangle(1, 2, 1)\n    check_triangle(2, 1, 1)\n    check_triangle(1, 2, 3)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n\n    >>> is_triangle(3, 3, 3)\n    True\n    >>> is_triangle(4, 4, 4)\n    False\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return a == b == c\n\n\ndef main():\n    a = int(input(\"Enter the first side: \"))\n    b = int(input(\"Enter the second side: \"))\n    c = int(input(\"Enter the third side: \"))\n    print(is_triangle(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def is_equilateral(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return True\n    return False\n\n\ndef main():\n    print(is_equilateral(1, 1, 1))  # Should be True\n    print(is_equilateral(1, 2, 1))  # Should be False\n    print(is_equilateral(1, 2, 3))  # Should be False\n\n\nif __name__ == '__main__':\n    main()",
    "def equilateral_triangle(a, b, c):\n    return a == b == c\n\n\nprint(equilateral_triangle(1, 1, 1))  # True\nprint(equilateral_triangle(1, 2, 1))  # False",
    "def equilateral(a, b, c):\n    if a == b == c:\n        return True\n    return False\n\ndef equi_triangle(a, b, c):\n    \"\"\"\n    :param: a - side of triangle\n    :param: b - side of triangle\n    :param: c - side of triangle\n    TODO: check input\n    \"\"\"\n    return equilateral(a, b, c)\n\ndef main():\n    print(equi_triangle(4, 4, 4))\n    print(equi_triangle(1, 2, 3))\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or c == a\n\n\ndef is_scalene(a, b, c):\n    return a != b and b != c and c != a\n\n\ndef is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and c + a > b\n\n\ndef classify_triangle(a, b, c):\n    if is_valid_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return \"Equilateral\"\n        elif is_isosceles(a, b, c):\n            return \"Isosceles\"\n        elif is_scalene(a, b, c):\n            return \"Scalene\"\n    return \"Not a valid triangle\"",
    "def is_equilateral(sides):\n    return len(set(sides)) == 1\n\n\ndef is_equilateral_2(a, b, c):\n    return a == b == c\n\n\ndef is_equilateral_3(a, b, c):\n    return (a == b == c) or (a == b != c) or (a == c != b) or (b == c != a)",
    "def equilateral(x, y, z):\n    if x == y and x == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not equilateral\")\n\nequilateral(3, 3, 3)\nequilateral(3, 3, 4)",
    "from math import sqrt\n\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    >>> is_equilateral(1, 1, 1)\n    True\n    >>> is_equilateral(1, 1, 2)\n    False\n    \"\"\"\n    return a == b == c\n\n\ndef is_equilateral_v2(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    >>> is_equilateral_v2(1, 1, 1)\n    True\n    >>> is_equilateral_v2(1, 1, 2)\n    False\n    \"\"\"\n    return sqrt(a ** 2 + b ** 2 - c ** 2) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def is_equilateral(a, b, c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n\n\nprint(is_equilateral(2, 2, 2))\nprint(is_equilateral(3, 3, 3))\nprint(is_equilateral(2, 2, 3))",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or a == c:\n        return \"Isoceles\"\n    else:\n        return \"Scalene\"\n\n\ndef is_equilateral_alt(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n\ndef is_equilateral_alt_2(a, b, c):\n    if math.sqrt(a**2 + b**2) == c:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"",
    "def equilateral_triangle(a, b, c):\n    if a == b and b == c:\n        return True\n    return False\n\n\nprint(equilateral_triangle(2, 2, 2))\nprint(equilateral_triangle(3, 2, 2))",
    "def equilateral(a, b, c):\n    return a == b == c\n\n\ndef equilateral_simple(a, b, c):\n    return a == b != c or a == c != b or b == c != a\n\n\ndef equilateral_short(a, b, c):\n    return a == b != c or a == c != b or b == c != a\n\n\ndef equilateral_lambda(a, b, c):\n    return (lambda x, y: x == y != c or x == c != y or y == c != x)(a, b)\n\n\ndef equilateral_lambda_simple(a, b, c):\n    return (lambda x, y, z: x == y == z)(a, b, c)\n\n\ndef equilateral_lambda_simple_2(a, b, c):\n    return (lambda x, y, z: x == y == z)(a, b, c)\n\n\ndef equilateral_lambda_simple_3(a, b, c):\n    return (lambda x, y, z: x == y == z)(a, b, c)",
    "def is_equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        return True\n    return False\n\n\ndef main():\n    print('is equilateral:', is_equilateral(2, 2, 2))\n    print('is equilateral:', is_equilateral(2, 2, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def equilateral_triangle(side_a: int, side_b: int, side_c: int) -> str:\n    \"\"\"\n    >>> equilateral_triangle(2, 2, 2)\n    Equilateral\n    >>> equilateral_triangle(2, 2, 3)\n    Not Equilateral\n    \"\"\"\n    if side_a == side_b == side_c:\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    >>> is_equilateral(1, 1, 1)\n    True\n    >>> is_equilateral(1, 2, 1)\n    False\n    \"\"\"\n    return a == b == c\n\ndef is_equilateral_alt(a, b, c):\n    \"\"\"\n    >>> is_equilateral_alt(1, 1, 1)\n    True\n    >>> is_equilateral_alt(1, 2, 1)\n    False\n    \"\"\"\n    return sqrt(a**2 + b**2 - c**2) == sqrt(a**2 + c**2 - b**2) == sqrt(b**2 + c**2 - a**2) == 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def is_equilateral(sides):\n    # If all sides are equal\n    if sides[0] == sides[1] == sides[2]:\n        return True\n    return False\n\n\ndef is_isosceles(sides):\n    # If two sides are equal\n    if sides[0] == sides[1] or sides[1] == sides[2] or sides[0] == sides[2]:\n        return True\n    return False\n\n\ndef is_scalene(sides):\n    # If all sides are different\n    if sides[0] != sides[1] != sides[2]:\n        return True\n    return False\n\n\ndef main():\n    sides = [1, 2, 2]\n    print(is_equilateral(sides))  # True\n    print(is_isosceles(sides))  # True\n    print(is_scalene(sides))  # False\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Triangle:\n    def __init__(self, s1, s2, s3):\n        self.s1 = s1\n        self.s2 = s2\n        self.s3 = s3\n\n    def check_equilateral(self):\n        if self.s1 == self.s2 == self.s3:\n            return True\n        else:\n            return False\n\n\ndef main():\n    tri = Triangle(3, 3, 3)\n    print(tri.check_equilateral())\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\nfrom typing import List\n\n\ndef is_equilateral(sides: List[float]) -> bool:\n    \"\"\"Return if the triangle is equilateral.\n\n    :param sides: List of triangle sides.\n    :return: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if not len(sides) == 3:\n        raise ValueError(\"List must contain 3 values\")\n\n    if not all(sides):\n        raise ValueError(\"All sides must be greater than 0\")\n\n    if not math.isclose(sides[0], sides[1]):\n        return False\n\n    if not math.isclose(sides[0], sides[2]):\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_equilateral([3, 3, 3]))",
    "def is_triangle(sides):\n    \"\"\"\n    Checks if the triangle is equilateral or not.\n\n    >>> is_triangle([3, 3, 3])\n    True\n    >>> is_triangle([3, 4, 3])\n    False\n    \"\"\"\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    elif sides[1] + sides[2] <= sides[0]:\n        return False\n    elif sides[0] + sides[2] <= sides[1]:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\nclass Triangle(object):\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def is_equilateral(self):\n        # if the sum of any two sides is greater than the third side,\n        # the triangle is not equilateral\n        if self.side1 + self.side2 > self.side3 or self.side1 + self.side3 > self.side2 or self.side2 + self.side3 > self.side1:\n            return False\n        # if all three sides are equal, return true\n        if self.side1 == self.side2 and self.side2 == self.side3:\n            return True\n        # if any two sides are equal, the triangle is not equilateral\n        if self.side1 == self.side2 or self.side1 == self.side3 or self.side2 == self.side3:\n            return False\n        # if none of the above conditions are met, the triangle is not equilateral\n        return False\n\n\ndef main():\n    # # print(Triangle(5, 6, 6).is_equilateral())\n    # # print(Triangle(5, 6, 7).is_equilateral())\n    # # print(Triangle(5, 6, 8).is_equilateral())\n    # # print(Triangle(5, 6, 9).is_equilateral())\n    # # print(Triangle(5, 6, 10).is_equilateral())\n    # # print(Triangle(5, 6, 11).is_equilateral())\n\n    # # print(Triangle(3, 4, 5).is_equilateral())\n    # # print(Triangle(3, 4, 6).is_equilateral())\n    # # print(Triangle(3, 4, 7).is_equilateral())\n    # # print(Triangle(3, 4, 8).is_equ",
    "def check_triangle(side1, side2, side3):\n    return side1 == side2 and side2 == side3\n\n\ndef check_triangle_1(side1, side2, side3):\n    return side1 == side2 and side2 == side3",
    "def check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            print(\"Triangle is equilateral\")\n        else:\n            print(\"Triangle is not equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n\ncheck_triangle(3, 4, 5)\ncheck_triangle(1, 2, 3)",
    "import math\n\ndef check_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a triangle\"\n    elif a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or a == c or b == c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\ndef main():\n    print(check_triangle(3, 4, 5))\n    print(check_triangle(3, 3, 3))\n    print(check_triangle(3, 3, 4))\n\n\nif __name__ == '__main__':\n    main()",
    "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        print(\"Equilateral Triangle\")\n    else:\n        print(\"Not Equilateral Triangle\")\n\n\nif __name__ == '__main__':\n    equilateral_triangle(3, 3, 3)\n    equilateral_triangle(3, 4, 5)",
    "def check_triangle_type(a, b, c):\n    if a > b + c or b > a + c or c > a + b:\n        return \"invalid\"\n    elif a == b == c:\n        return \"equilateral\"\n    elif a == b or b == c or c == a:\n        return \"isosceles\"\n    else:\n        return \"scalene\"\n\n\ndef main():\n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    c = int(input(\"Enter the value of c: \"))\n\n    print(check_triangle_type(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def equilateral_triangle(x, y, z):\n    if x == y and y == z:\n        print(\"Equilateral Triangle\")\n    else:\n        print(\"Not Equilateral Triangle\")\n\n\nequilateral_triangle(1, 2, 3)\nequilateral_triangle(1, 2, 2)",
    "from math import sqrt\n\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is equilateral\n    \"\"\"\n    return a == b == c\n\n\ndef is_right(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is right\n    \"\"\"\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2\n\n\ndef is_isosceles(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is isosceles\n    \"\"\"\n    return a == b or b == c or a == c\n\n\ndef is_scalene(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is scalene\n    \"\"\"\n    return not (a == b == c or a == b or a == c or b == c)\n\n\ndef is_degenerate(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is degenerate\n    \"\"\"\n    return a == b or b == c or c == a or a == b == c\n\n\ndef is_acute(a, b, c):\n    \"\"\"\n    :param: a - first edge of the triangle\n    :param: b - second edge of the triangle\n    :param: c - third edge of the triangle\n    Return true if triangle is acute\n    \"\"\"",
    "class Solution:\n    def check_equilateral(self, side1, side2, side3):\n        \"\"\"\n        :type side1: int\n        :type side2: int\n        :type side3: int\n        :rtype: bool\n        \"\"\"\n        return side1 == side2 == side3\n\n    def check_equilateral_easy(self, side1, side2, side3):\n        return side1 == side2 == side3\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.check_equilateral(2, 3, 3) == True\n    assert s.check_equilateral(3, 2, 3) == True\n    assert s.check_equilateral(3, 3, 2) == True\n    assert s.check_equilateral(2, 3, 4) == False",
    "def is_equilateral(sides):\n    return len(set(sides)) == 1\n\n\ndef test_is_equilateral():\n    assert is_equilateral([1, 1, 1])\n    assert not is_equilateral([1, 2, 1])\n\n\nif __name__ == \"__main__\":\n    test_is_equilateral()",
    "def is_equilateral(a, b, c):\n    return a == b == c\n\n\ndef is_equilateral_v2(a, b, c):\n    return a == b or b == c or c == a\n\n\ndef test(a, b, c):\n    print(f\"({a}, {b}, {c}) is equilateral: {is_equilateral(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    test(3, 3, 3)\n    test(1, 2, 3)\n    test(1, 1, 1)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}