{
  "problem": {
    "task_id": "MBPP/194",
    "prompt": "Write a python function to convert octal number to decimal number.",
    "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
    "test_list": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ],
    "challenge_test_list": [],
    "problem_id": 183
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def octalToDecimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal * 8 + int(octal[i])\n    return decimal\n\n\nprint(octalToDecimal(\"173\"))",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number*8 + int(octal_number[i])\n    return decimal_number\n\nif __name__ == \"__main__\":\n    octal_number = input(\"Enter the octal number: \")\n    print(octal_to_decimal(octal_number))",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8 + int(digit)\n    return decimal\n\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    print(\"The decimal number for octal number is: \", octal_to_decimal(octal))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    octal_int = int(octal)\n    decimal = 0\n    base = 1\n    while octal_int > 0:\n        last_digit = octal_int % 10\n        decimal = decimal + last_digit * base\n        octal_int = int(octal_int / 10)\n        base = base * 8\n    return decimal\n\ndef main():\n    octal = input(\"Enter a octal number: \")\n    octal_to_decimal(octal)\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += int(octal_number[i]) * 8 ** (len(octal_number) - 1 - i)\n    return decimal_number\n\nprint(octal_to_decimal('173'))",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int(x[,base]) to change the base of a number.\n\n\"\"\"\ndef octalToDecimal(octal):\n\treturn int(octal,8)\n\nprint octalToDecimal(1777)",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8 + int(digit)\n    return decimal\n\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    print(\"The decimal number is: \" + str(octal_to_decimal(octal)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    decimal, i = 0, 0\n    while octal != 0:\n        decimal = decimal + (octal % 10) * (8 ** i)\n        octal = octal // 10\n        i += 1\n    return decimal\n\nprint(octal_to_decimal(81))",
    "def oct_to_dec(oct_number):\n    dec_number = 0\n    for i, j in enumerate(oct_number):\n        dec_number += int(j) * 8 ** i\n    return dec_number\n\n\ndef main():\n    oct_number = input(\"Enter an octal number: \")\n    dec_number = oct_to_dec(oct_number)\n    print(f\"{oct_number} in decimal is {dec_number}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8\n        decimal = decimal + int(digit)\n\n    return decimal\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    print(\"Octal Number:\", octal)\n    print(\"Decimal Number:\", octal_to_decimal(octal))\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    i = 0\n    while octal_number != 0:\n        decimal_number += (octal_number % 10) * (8 ** i)\n        octal_number = int(octal_number / 10)\n        i += 1\n    return decimal_number\n\nif __name__ == '__main__':\n    octal_number = int(input(\"Enter the octal number: \"))\n    decimal_number = octal_to_decimal(octal_number)\n    print(f\"The decimal number is: {decimal_number}\")",
    "def octal_to_decimal(n):\n    octal_digit = 0\n    decimal_number = 0\n    while n != 0:\n        octal_digit = n % 10\n        decimal_number = decimal_number * 8 + octal_digit\n        n = n // 10\n    return decimal_number\n\nif __name__ == '__main__':\n    print(octal_to_decimal(123))",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8 + int(digit)\n\n    return decimal\n\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    decimal = octal_to_decimal(octal)\n    print(\"The decimal number is: {}\".format(decimal))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    :param octal_number: octal number as str\n    :return: decimal number as int\n    >>> octal_to_decimal(\"123\")\n    83\n    >>> octal_to_decimal(\"1777\")\n    1311\n    >>> octal_to_decimal(\"10\")\n    8\n    >>> octal_to_decimal(\"100\")\n    256\n    >>> octal_to_decimal(\"231\")\n    217\n    >>> octal_to_decimal(\"20\")\n    16\n    >>> octal_to_decimal(\"121\")\n    89\n    >>> octal_to_decimal(\"1231\")\n    1015\n    >>> octal_to_decimal(\"111\")\n    73\n    >>> octal_to_decimal(\"122\")\n    84\n    >>> octal_to_decimal(\"11\")\n    9\n    >>> octal_to_decimal(\"101\")\n    49\n    >>> octal_to_decimal(\"111\")\n    73\n    >>> octal_to_decimal(\"112\")\n    74\n    \"\"\"\n    decimal_number = 0\n    length = len(octal_number)\n    for index, digit in enumerate(octal_number):\n        decimal_number += int(digit) * 8 ** (length - index - 1)\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(number: str) -> int:\n    \"\"\"\n    :param number: octal number\n    :return: decimal number\n    >>> octal_to_decimal(\"20\")\n    16\n    >>> octal_to_decimal(\"100\")\n    64\n    >>> octal_to_decimal(\"170\")\n    136\n    \"\"\"\n    return int(number, 8)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    octal_to_decimal(octal_number)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    octal_number = str(octal_number)\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\ndef main():\n    octal_number = 123\n    assert octal_to_decimal(octal_number) == 85\n    octal_number = 10\n    assert octal_to_decimal(octal_number) == 8\n    octal_number = 73\n    assert octal_to_decimal(octal_number) == 63\n    octal_number = 70\n    assert octal_to_decimal(octal_number) == 56\n    octal_number = 64\n    assert octal_to_decimal(octal_number) == 52\n    octal_number = 40\n    assert octal_to_decimal(octal_number) == 32\n    octal_number = 77\n    assert octal_to_decimal(octal_number) == 63\n    octal_number = 70\n    assert octal_to_decimal(octal_number) == 56\n    octal_number = 64\n    assert octal_to_decimal(octal_number) == 52\n    octal_number = 40\n    assert octal_to_decimal(octal_number) == 32\n    octal_number = 77\n    assert octal_to_decimal(octal_number) == 63\n    octal_number = 70\n    assert octal_to_decimal(octal_number) == 56\n    octal_number = 64\n    assert octal_to_decimal(octal_number) == 52\n    octal_number = 40\n    assert octal_to_decimal(octal_number) == 32\n    octal_number =",
    "# Declaring variables\ndecimal = 0\ndivision = 1\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    This function takes an octal number as input and returns decimal number as output.\n    \"\"\"\n    global decimal, division\n    octal_number = int(octal_number)\n    while octal_number > 0:\n        remainder = octal_number % 10\n        decimal += remainder * division\n        division = division / 8\n        octal_number = int(octal_number / 10)\n    return decimal\n\ndef main():\n    \"\"\"\n    The main function to execute upon call.\n    \"\"\"\n    octal_number = input(\"Enter an octal number: \")\n    print(\"The decimal number is: \", octal_to_decimal(octal_number))\n\nif __name__ == \"__main__\":\n    main()",
    "def oct_to_dec(octal: str) -> int:\n    \"\"\"\n    This function takes an octal number as a string and\n    returns its decimal equivalent\n    >>> oct_to_dec('1234567')\n    1234567\n    >>> oct_to_dec('1234')\n    5032\n    >>> oct_to_dec('23456')\n    5654\n    >>> oct_to_dec('12345')\n    56543\n    >>> oct_to_dec('1234567890')\n    Traceback (most recent call last):\n    ...\n    ValueError: Input strings should only contain digits\n    \"\"\"\n    decimal_num = 0\n    octal = str(octal)\n\n    if not octal.isdigit():\n        raise ValueError(\"Input strings should only contain digits\")\n\n    for i in range(len(octal)):\n        decimal_num += int(octal[i]) * 8 ** (len(octal) - 1 - i)\n\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    octal_num = input(\"Enter an octal number: \").strip()\n    print(oct_to_dec(octal_num))",
    "def octal_to_decimal(octal):\n    decimal_num = 0\n    for i in range(len(octal)):\n        decimal_num = decimal_num*8 + int(octal[i])\n    return decimal_num\n\n\ndef main():\n    octal_num = input(\"Enter an octal number: \")\n    print(\"The decimal number is: \", octal_to_decimal(octal_num))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    octal = str(octal)\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal*8 + int(octal[i])\n    return decimal\n\nprint(octal_to_decimal(123))",
    "def octalToDecimal(octalNum):\n    decimalNum = 0\n    i = 0\n    while octalNum:\n        decimalNum += (octalNum%10) * 8 ** i\n        octalNum = octalNum // 10\n        i += 1\n    return decimalNum\n\nprint(octalToDecimal(1234))",
    "def octalToDecimal(octalNum):\n    decimalNum = 0\n    i = 0\n    while octalNum != 0:\n        decimalNum += (octalNum % 10) * 8**i\n        i += 1\n        octalNum = int(octalNum / 10)\n\n    return decimalNum\n\n\nprint(octalToDecimal(12345))",
    "def octal_to_decimal(number):\n    decimal_number = 0\n    for i in range(len(number)):\n        decimal_number = decimal_number * 8 + int(number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter the octal number: \")\n    print(\"Octal Number: \", octal_number)\n    print(\"Decimal Number: \", octal_to_decimal(octal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isnumeric():\n        decimal_number = octal_to_decimal(octal_number)\n        print(octal_number + \" in decimal is \" + str(decimal_number))\n    else:\n        print(\"Please enter a valid octal number\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    Function to convert octal number to decimal number.\n    >>> octal_to_decimal(\"123\")\n    83\n    >>> octal_to_decimal(\"273\")\n    205\n    >>> octal_to_decimal(\"120\")\n    80\n    >>> octal_to_decimal(\"100\")\n    64\n    >>> octal_to_decimal(\"1\")\n    1\n    >>> octal_to_decimal(\"777\")\n    5007\n    >>> octal_to_decimal(\"0\")\n    0\n    >>> octal_to_decimal(\"-1\")\n    -1\n    \"\"\"\n    decimal_number = 0\n    length = len(octal_number)\n    for index in range(length):\n        decimal_number += int(octal_number[index]) * (8 ** (length - index - 1))\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for digit in octal_number:\n        decimal_number = decimal_number * 8 + int(digit)\n\n    return decimal_number\n\nprint(octal_to_decimal(input(\"Enter a octal number: \")))",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    :param octal: str, octal number to be converted to decimal\n    :return: int, octal number in decimal form\n    >>> octal_to_decimal('123')\n    83\n    >>> octal_to_decimal('17352')\n    5616\n    >>> octal_to_decimal('11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "def octal_to_decimal(n):\n    decimal = 0\n    for i in range(len(n)):\n        decimal = decimal * 8 + int(n[i])\n    return decimal\n\n\ndef main():\n    n = input(\"Enter a number in octal: \")\n    print(\"The decimal number of {} is {}\".format(n, octal_to_decimal(n)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isnumeric() and int(octal_number, 8) >= 0:\n        print(\"Decimal number: \", octal_to_decimal(octal_number))\n    else:\n        print(\"Invalid octal number.\")\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(number: int) -> int:\n    \"\"\"\n    >>> octal_to_decimal(10)\n    8\n    >>> octal_to_decimal(20)\n    16\n    >>> octal_to_decimal(100)\n    64\n    >>> octal_to_decimal(200)\n    128\n    \"\"\"\n\n    decimal_number = 0\n    base = 1\n    while number > 0:\n        last_digit = number % 10\n        decimal_number += last_digit * base\n        base *= 8\n        number = number // 10\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octal_to_decimal(octal: int) -> int:\n    decimal: int = 0\n\n    while octal > 0:\n        decimal = decimal * 8 + octal % 10\n        octal = octal // 10\n\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(octal_to_decimal(371))",
    "def octal_to_decimal(octal_number: int) -> int:\n    \"\"\"\n    This function takes an octal number as a parameter and\n    returns a decimal number.\n    \"\"\"\n    decimal_number: int = 0\n    counter: int = 0\n    while octal_number > 0:\n        remainder: int = octal_number % 10\n        decimal_number += remainder * (8 ** counter)\n        counter += 1\n        octal_number //= 10\n    return decimal_number\n\n\ndef main():\n    octal_number: int = int(input(\"Enter an octal number: \"))\n    result: int = octal_to_decimal(octal_number)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal: int) -> int:\n    \"\"\"\n    This function takes an octal number as input and returns its decimal equivalent.\n\n    >>> octal_to_decimal(123)\n    83\n    >>> octal_to_decimal(111)\n    71\n    >>> octal_to_decimal(324)\n    220\n    >>> octal_to_decimal(70)\n    56\n    >>> octal_to_decimal(11)\n    9\n    >>> octal_to_decimal(234)\n    154\n    >>> octal_to_decimal(910)\n    734\n    >>> octal_to_decimal(100)\n    64\n    \"\"\"\n    decimal_num = 0\n    base = 1\n    while octal > 0:\n        last_digit = octal % 10\n        decimal_num += last_digit * base\n        base = base * 8\n        octal = octal // 10\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(number):\n    \"\"\"\n    :param: number - input octal number\n    Return decimal number\n    \"\"\"\n    decimal_number = 0\n    while number > 0:\n        last_digit = number % 10\n        decimal_number += last_digit * (8 ** int(len(str(number)) - 1))\n        number = int(number / 10)\n\n    return decimal_number\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    octal_number = int(input(\"Enter octal number: \"))\n    print(\"Decimal number:\", octal_to_decimal(octal_number))\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    octal = str(octal)\n    decimal_number = 0\n    for i in range(len(octal)):\n        decimal_number += int(octal[i]) * (8 ** (len(octal) - i - 1))\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    decimal_number = octal_to_decimal(octal_number)\n    print(f\"{octal_number} in octal is {decimal_number} in decimal\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Declare a function to convert octal to decimal\ndef octal_to_decimal(octal_number):\n    octal_digit = [0, 1, 2, 3, 4, 5, 6, 7]\n    decimal_number = 0\n    for i in octal_number:\n        decimal_number = decimal_number * 8 + octal_digit[int(i)]\n    return decimal_number\n\n\"\"\"\nTake user input to convert octal to decimal\n\"\"\"\n\n# Take user input\noctal_number = input(\"Enter an octal number: \")\n\n# Call the function to convert octal to decimal\ndecimal_number = octal_to_decimal(octal_number)\nprint(octal_number, \"in octal is\", decimal_number, \"in decimal\")",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal += int(octal[i]) * 8 ** i\n    return decimal\n\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    if octal[0] == \"-\":\n        octal = octal[1:]\n        print(f\"Decimal number is: {octal_to_decimal(octal) * -1}\")\n    else:\n        print(f\"Decimal number is: {octal_to_decimal(octal)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    decimal_number = octal_to_decimal(octal_number)\n    print(\"Octal number is {} and decimal number is {}\".format(\n        octal_number, decimal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Declaring variables\noctal_number = '7654'\n\n# Printing the decimal equivalent of the octal number\nprint(\"The decimal equivalent of the octal number is: \", int(octal_number, 8))",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isnumeric():\n        print(octal_to_decimal(octal_number))\n    else:\n        print(\"Enter a valid octal number\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    >>> octal_to_decimal('173')\n    141\n    >>> octal_to_decimal('10')\n    8\n    >>> octal_to_decimal('1101')\n    665\n    \"\"\"\n    decimal = 0\n    for i, o in enumerate(octal):\n        decimal += int(o) * 8 ** (len(octal) - i - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    This function takes an octal number as an input and returns its decimal equivalent.\n\n    >>> octal_to_decimal('123')\n    83\n    >>> octal_to_decimal('1777')\n    1331\n    >>> octal_to_decimal('1724')\n    1028\n    >>> octal_to_decimal('10')\n    8\n    >>> octal_to_decimal('100')\n    64\n    >>> octal_to_decimal('12345')\n    6653\n    >>> octal_to_decimal('1234567')\n    1114111\n    >>> octal_to_decimal('12345678')\n    134217728\n    >>> octal_to_decimal('123456789')\n    1610612735\n    >>> octal_to_decimal('1234567890')\n    2139095040\n    >>> octal_to_decimal('12345678901')\n    2458564440\n    >>> octal_to_decimal('123456789012')\n    2877107968\n    >>> octal_to_decimal('1234567890123')\n    3295638856\n    >>> octal_to_decimal('12345678901234')\n    3724279020\n    >>> octal_to_decimal('123456789012345')\n    4152829224\n    >>> octal_to_decimal('1234567890123456')\n    4581380",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int(x[,base]) to change the base.\n\n\"\"\"\ndef octal_to_decimal(octal_num):\n\treturn int(octal_num,8)\noctal_num = raw_input()\nprint octal_to_decimal(octal_num)",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal*8 + int(octal[i])\n    return decimal\n\nprint(octal_to_decimal('173'))",
    "def octal_to_decimal(octal_num):\n    \"\"\"\n    :param octal_num: octal number\n    :return: decimal number\n    \"\"\"\n    decimal_num = 0\n    # We will loop over the octal_num string and keep adding the value of each digit to decimal_num\n    for i in octal_num:\n        decimal_num = decimal_num * 8 + int(i)\n    return decimal_num\n\nif __name__ == \"__main__\":\n    octal_num = input(\"Enter an octal number: \")\n    if octal_num[0] == \"-\":\n        octal_num = octal_num[1:]\n        print(octal_to_decimal(octal_num))\n    else:\n        print(octal_to_decimal(octal_num))",
    "# Declare variables\ndecimal = 0\n\ndef octal_to_decimal(octal):\n    \"\"\"\n    This function takes an octal number and converts it to decimal number.\n    \"\"\"\n    if octal == \"0\":\n        return 0\n    for i in octal:\n        decimal = decimal * 8 + int(i)\n    return decimal\n\noctal_number = input(\"Enter an octal number: \")\nprint(\"Octal number =\", octal_number)\nprint(\"Decimal number =\", octal_to_decimal(octal_number))",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal*8 + int(digit)\n\n    return decimal\n\noctal_to_decimal(8)\noctal_to_decimal(10)\noctal_to_decimal(17)\noctal_to_decimal(100)\noctal_to_decimal(2047)",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number*8 + int(octal_number[i])\n    return decimal_number\n\nprint(octal_to_decimal('123'))",
    "def octal_to_decimal(octal):\n    decimal, i = 0, 0\n    while octal != 0:\n        decimal += (octal % 10) * pow(8, i)\n        octal = octal // 10\n        i += 1\n    return decimal\n\noctal = int(input())\nprint(octal_to_decimal(octal))\n\n# Test Case 1\n# Input: 10\n# Output: 8\n\n# Test Case 2\n# Input: 17\n# Output: 15\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in octal_number:\n        decimal_number = decimal_number * 8 + int(i)\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    print(\"Octal number: \", octal_number)\n    print(\"Decimal number: \", octal_to_decimal(octal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8 + int(digit)\n    return decimal\n\n\ndef main():\n    octal = input(\"Enter a octal number: \")\n    print(\"The decimal number is: \" + str(octal_to_decimal(octal)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int() to convert a string to integer.\n\n\"\"\"",
    "def octalToDecimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal*8 + int(octal[i])\n    return decimal\n\noctal = input()\nprint(octalToDecimal(octal))",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int() to convert a string to integer.\n\n\"\"\"",
    "def octal_to_decimal(octal):\n    octal = str(octal)\n    decimal, i = 0, 0\n    for digit in octal:\n        decimal = decimal + int(digit) * 8 ** i\n        i += 1\n    return decimal\n\n\nif __name__ == \"__main__\":\n    octal = 123\n    print(\"Octal: \", octal)\n    print(\"Decimal: \", octal_to_decimal(octal))",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number*8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isnumeric():\n        print(octal_to_decimal(octal_number))\n    else:\n        print(\"Please enter a valid octal number\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal * 8 + int(digit)\n    return decimal\n\nprint(octal_to_decimal('12345'))\nprint(octal_to_decimal('707'))",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for i in octal:\n        decimal = decimal*8 + int(i)\n    return decimal\n\nprint(octal_to_decimal('704'))",
    "def octal_to_decimal(number):\n    decimal_number = 0\n    for i in range(len(number)):\n        decimal_number = decimal_number * 8 + int(number[i])\n    return decimal_number\n\n\ndef main():\n    print(\"Octal number to decimal number:\")\n    octal_number = input(\"Enter octal number:\")\n    if octal_number.isnumeric() and int(octal_number) >= 0:\n        print(\"Octal number:\", octal_number, \"Decimal number:\",\n              octal_to_decimal(octal_number))\n    else:\n        print(\"Please enter a valid octal number\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    >>> octal_to_decimal('1234')\n    5032\n    \"\"\"\n    decimal: int = 0\n    for i in range(len(octal)):\n        decimal += int(octal[i]) * 8 ** (len(octal) - i - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal * 8 + int(octal[i])\n    return decimal\n\ndef main():\n    octal = input(\"Enter an octal number: \")\n    decimal = octal_to_decimal(octal)\n    print(\"The decimal number for %s is %d\" %(octal, decimal))\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += int(octal_number[i]) * (8 ** (len(octal_number) - i - 1))\n    return decimal_number\n\nif __name__ == \"__main__\":\n    octal_number = input(\"Enter an octal number: \")\n    print(octal_to_decimal(octal_number))",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isdigit() and int(octal_number, 8) >= 0:\n        print(octal_to_decimal(octal_number))\n    else:\n        print(\"Invalid octal number.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Declare variables\n\ndecimal_number = 0\n\n\ndef octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in octal_number:\n        decimal_number = decimal_number * 8 + int(i)\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    print(\"The decimal equivalent of octal number is: \", octal_to_decimal(\n        octal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a python function to convert octal number to decimal number.\nHints:\nIn order to convert any number from any base to any base, we need a helper function convertToBaseN()\n\n\"\"\"",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter a octal number: \")\n    print(\"Octal number \" + octal_number + \" is \" + str(octal_to_decimal(octal_number)) + \" in decimal\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter a octal number: \")\n    if octal_number.isnumeric() and int(octal_number, 8) >= 0:\n        decimal_number = octal_to_decimal(octal_number)\n        print(\"Octal Number:\", octal_number, \",Decimal Number: \", decimal_number)\n    else:\n        print(\"Please enter a valid octal number.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int() to convert a string to integer.\n\n\"\"\"\ndef octal_to_decimal(octal):\n\treturn int(octal,8)\noctal=input(\"Enter a octal number \")\nprint octal_to_decimal(octal)",
    "def oct_to_dec(n):\n    dec = 0\n    mult = 1\n    while n > 0:\n        dec += (n % 10) * mult\n        mult *= 8\n        n //= 10\n    return dec\n\nprint(oct_to_dec(12345))",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    :param octal_number: octal number to be converted\n    :return: decimal number\n    \"\"\"\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += int(octal_number[i]) * 8 ** (len(octal_number) - i - 1)\n    return decimal_number\n\n\nif __name__ == '__main__':\n    assert octal_to_decimal(\"123\") == 83\n    assert octal_to_decimal(\"1777\") == 1331\n    assert octal_to_decimal(\"21\") == 19\n    assert octal_to_decimal(\"100\") == 64\n    assert octal_to_decimal(\"1773\") == 1001",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    >>> octal_to_decimal(\"1774\")\n    1234\n    >>> octal_to_decimal(\"12345\")\n    5653\n    >>> octal_to_decimal(\"200\")\n    128\n    >>> octal_to_decimal(\"123\")\n    75\n    >>> octal_to_decimal(\"1236\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid octal number\n    \"\"\"\n    if not octal:\n        return 0\n    if not octal.isdigit():\n        raise ValueError(\"Invalid octal number\")\n    decimal = 0\n    for index, digit in enumerate(octal):\n        decimal += int(digit) * 8 ** (len(octal) - index - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal*8 + int(octal[i])\n\n    return decimal\n\noctal_number = \"173\"\nprint(\"The decimal equivalent of octal number\", octal_number, \"is :\", octal_to_decimal(octal_number))\n\n\"\"\"\nThe decimal equivalent of octal number 173 is : 143\n\"\"\"",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    This function takes an octal number as a string and returns\n    the decimal value of the octal number.\n    >>> octal_to_decimal(\"123\")\n    83\n    >>> octal_to_decimal(\"70\")\n    56\n    >>> octal_to_decimal(\"10\")\n    8\n    >>> octal_to_decimal(\"100\")\n    64\n    >>> octal_to_decimal(\"200\")\n    128\n    >>> octal_to_decimal(\"300\")\n    192\n    >>> octal_to_decimal(\"400\")\n    256\n    >>> octal_to_decimal(\"500\")\n    320\n    >>> octal_to_decimal(\"600\")\n    384\n    >>> octal_to_decimal(\"700\")\n    448\n    >>> octal_to_decimal(\"12345\")\n    6463\n    >>> octal_to_decimal(\"000\")\n    0\n    >>> octal_to_decimal(\"333\")\n    444\n    >>> octal_to_decimal(\"0333\")\n    444\n    >>> octal_to_decimal(\"0000\")\n    0\n    >>> octal_to_decimal(\"00000\")\n    0\n    >>> octal_to_decimal(\"000000\")\n    0\n    >>> octal_to_decimal(\"0000000\")\n    0\n    >>> octal_to_decimal(\"00000000\")\n    0\n    >>> octal_to_decimal(\"000000000\")\n    0\n    >>> octal_to_decimal(\"0000000000\")\n    0\n    >>> octal_to_decimal(\"00000000000\")\n    0\n    >>> octal_to_decimal",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    :param octal_number: str, octal number\n    :return: int, decimal number\n    >>> octal_to_decimal('123')\n    83\n    >>> octal_to_decimal('20')\n    16\n    >>> octal_to_decimal('707')\n    467\n    >>> octal_to_decimal('100')\n    256\n    >>> octal_to_decimal('2345')\n    1467\n    >>> octal_to_decimal('999')\n    999\n    >>> octal_to_decimal('1000')\n    Traceback (most recent call last):\n    ...\n    ValueError: Not octal number\n    >>> octal_to_decimal('9999')\n    Traceback (most recent call last):\n    ...\n    ValueError: Not octal number\n    \"\"\"\n    if not octal_number.isnumeric():\n        raise ValueError(\"Not octal number\")\n    decimal = 0\n    for index, octal_digit in enumerate(octal_number[::-1]):\n        decimal += int(octal_digit) * 8 ** index\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(octal_to_decimal(\"123\"))\n    print(octal_to_decimal(\"20\"))\n    print(octal_to_decimal(\"707\"))\n    print(octal_to_decimal(\"100\"))\n    print(octal_to_decimal(\"2345\"))\n    print(octal_to_decimal(\"999\"))\n    print(octal_to_decimal(\"1000\"))",
    "# Declare function\ndef octal_to_decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal = decimal * 8 + int(octal[i])\n    return decimal\n\ndef main():\n    # Get octal number\n    octal = input(\"Enter an octal number: \")\n\n    # Convert octal to decimal\n    decimal = octal_to_decimal(octal)\n    print(octal + \" in decimal is \" + str(decimal))\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a python function to convert octal number to decimal number.\nHints:\nUse int() to convert a string to integer.\n\n\"\"\"\ndef octalToDecimal(octal):\n\treturn int(octal,8)\noctal=raw_input()\nprint octalToDecimal(octal)",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += (int(octal_number[i]) * 8 ** (len(octal_number)-1-i))\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isnumeric() and int(octal_number, 8) >= 0:\n        print(octal_to_decimal(octal_number))\n    else:\n        print(\"Please enter a valid octal number\")",
    "def octal_to_decimal(octal):\n    decimal = 0\n    for digit in octal:\n        decimal = decimal*8 + int(digit)\n    return decimal\n\noctal = input(\"Enter a octal number: \")\nprint(octal_to_decimal(octal))",
    "def octal_to_decimal(octal: int) -> int:\n    \"\"\"\n    :param octal: Octal number to be converted to decimal\n    :return: Decimal number\n    \"\"\"\n    decimal = 0\n\n    # traverse the input string\n    while octal > 0:\n        # extracting the last digit\n        last_digit = octal % 10\n        # adding to the decimal variable\n        decimal += last_digit * (8 ** (len(str(octal)) - 1))\n        # remove the last digit from the input\n        octal = int(octal / 10)\n    return decimal\n\n\ndef main():\n    octal_number = int(input(\"Enter an octal number: \"))\n    decimal_number = octal_to_decimal(octal_number)\n    print(f\"The decimal number is {decimal_number}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number: int) -> int:\n    \"\"\"\n    :param octal_number: octal number\n    :return: decimal number\n    \"\"\"\n    decimal_number: int = 0\n    length: int = len(str(octal_number))\n    for i in range(length):\n        decimal_number += (int(octal_number % 10) * (8 ** i))\n        octal_number = int(octal_number / 10)\n    return decimal_number\n\n\ndef octal_to_decimal_v2(octal_number: int) -> int:\n    \"\"\"\n    :param octal_number: octal number\n    :return: decimal number\n    \"\"\"\n    return int(str(octal_number), 8)\n\n\ndef main():\n    value = 675\n    result = octal_to_decimal(value)\n    print(result)\n\n\n# Using the special variable\n# __name__\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    :param octal: str, octal number\n    :return: int, decimal number\n    >>> octal_to_decimal(\"17\")\n    15\n    >>> octal_to_decimal(\"10\")\n    8\n    >>> octal_to_decimal(\"777\")\n    5007\n    \"\"\"\n    dec = 0\n    for i in range(len(octal)):\n        dec += int(octal[i]) * (8 ** (len(octal) - i - 1))\n    return dec\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal_number: int) -> int:\n    \"\"\"\n    Return the decimal number of octal number\n    >>> octal_to_decimal(10)\n    8\n    >>> octal_to_decimal(17)\n    15\n    >>> octal_to_decimal(170)\n    144\n    \"\"\"\n    decimal_number = 0\n    counter = 0\n    while octal_number != 0:\n        remainder = octal_number % 10\n        decimal_number += remainder * (8 ** counter)\n        counter += 1\n        octal_number = int(octal_number / 10)\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += int(octal_number[i]) * 8 ** (len(octal_number) - 1 - i)\n    return decimal_number\n\n\nif __name__ == '__main__':\n    octal_number = input(\"Enter an octal number: \")\n    print(\"The decimal equivalent of octal number {} is {}.\".format(octal_number, octal_to_decimal(octal_number)))",
    "def oct_to_dec(oct_num):\n    oct_num = str(oct_num)\n    oct_num = oct_num[::-1]\n    dec_num = 0\n    for i in range(len(oct_num)):\n        dec_num += int(oct_num[i]) * 8 ** i\n    return dec_num\n\ndef main():\n    oct_num = int(input(\"Enter an octal number: \"))\n    dec_num = oct_to_dec(oct_num)\n    print(f\"Decimal number is: {dec_num}\")\n\nif __name__ == '__main__':\n    main()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    :param octal: octal number\n    :return: decimal number\n    \"\"\"\n    decimal = 0\n    for i in range(len(octal)):\n        decimal += int(octal[i]) * 8 ** (len(octal) - 1 - i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert octal_to_decimal(\"704\") == 448, \"Octal to decimal conversion failed.\"",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    i = 0\n    while octal_number != 0:\n        decimal_number += (octal_number % 10) * (8 ** i)\n        octal_number = int(octal_number / 10)\n        i += 1\n    return decimal_number\n\n\ndef main():\n    octal_number = int(input(\"Enter a octal number: \"))\n    print(\"Octal number is:\", octal_number)\n    print(\"Decimal number is:\", octal_to_decimal(octal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number: int) -> int:\n    \"\"\"\n    :param octal_number: an octal number\n    :return: decimal number\n    >>> octal_to_decimal(123)\n    83\n    >>> octal_to_decimal(177)\n    155\n    >>> octal_to_decimal(1777)\n    1051\n    >>> octal_to_decimal(1111111111111111)\n    Traceback (most recent call last):\n        ...\n    ValueError: octal_number must be less than or equal to 13312\n    \"\"\"\n    if octal_number > 13312:\n        raise ValueError(\"octal_number must be less than or equal to 13312\")\n\n    decimal_number = 0\n    counter = 0\n\n    while octal_number != 0:\n        remainder = octal_number % 10\n        decimal_number += remainder * 8 ** counter\n        octal_number = int(octal_number / 10)\n        counter += 1\n\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n    print(octal_to_decimal(123))\n    print(octal_to_decimal(177))\n    print(octal_to_decimal(1777))",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number += int(octal_number[i]) * 8 ** (len(octal_number) - 1 - i)\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number.isdigit() and int(octal_number, 8) >= 0:\n        octal_number = str(octal_number)\n        print(\"Octal number:\", octal_number)\n        print(\"Decimal number:\", octal_to_decimal(octal_number))\n    else:\n        print(\"Invalid octal number.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal = 0\n    for i in octal_number:\n        decimal = decimal * 8 + int(i)\n    return decimal\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    decimal_number = octal_to_decimal(octal_number)\n    print(\"The decimal number is:\", decimal_number)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"\n    >>> octal_to_decimal(\"173\")\n    141\n    >>> octal_to_decimal(\"1734\")\n    1234\n    >>> octal_to_decimal(\"1234\")\n    514\n    >>> octal_to_decimal(\"100\")\n    64\n    \"\"\"\n    decimal = 0\n    for i in range(len(octal)):\n        decimal += int(octal[i]) * 8 ** (len(octal) - 1 - i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def octal_to_decimal(octal_number: str) -> int:\n    \"\"\"\n    :param octal_number: str, octal number to convert\n    :return: int, decimal number\n    >>> octal_to_decimal(\"123\")\n    83\n    >>> octal_to_decimal(\"173\")\n    127\n    >>> octal_to_decimal(\"12\")\n    10\n    >>> octal_to_decimal(\"172\")\n    134\n    >>> octal_to_decimal(\"1\")\n    1\n    >>> octal_to_decimal(\"7\")\n    7\n    >>> octal_to_decimal(\"0\")\n    0\n    >>> octal_to_decimal(\"-1\")\n    -1\n    >>> octal_to_decimal(\"-123\")\n    -83\n    >>> octal_to_decimal(\"-173\")\n    -127\n    >>> octal_to_decimal(\"-12\")\n    -10\n    >>> octal_to_decimal(\"-172\")\n    -134\n    \"\"\"\n    try:\n        if octal_number[0] == \"-\":\n            return -int(str(int(octal_number[1:], 8)), 10)\n        return int(str(int(octal_number, 8)), 10)\n    except (TypeError, ValueError):\n        raise TypeError(\"Invalid octal number\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def octal_to_decimal(octal: str) -> int:\n    \"\"\"Convert octal to decimal.\n    \"\"\"\n    decimal_value = 0\n    for index, octal_digit in enumerate(octal):\n        decimal_value += int(octal_digit) * (8 ** index)\n    return decimal_value\n\ndef main():\n    octal_number = input(\"Enter a octal number: \")\n    print(\"Decimal equivalent of octal number is: {}\".format(octal_to_decimal(octal_number)))\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\nprint(octal_to_decimal('744'))",
    "def octal_to_decimal(octal_number: int) -> int:\n    \"\"\"\n    :param octal_number: octal number to convert\n    :return: decimal number\n    \"\"\"\n    decimal_number: int = 0\n    base: int = 0\n    while octal_number != 0:\n        decimal_number += (octal_number % 10) * (8 ** base)\n        base += 1\n        octal_number = int(octal_number / 10)\n    return decimal_number\n\n\ndef main():\n    octal_number = int(input(\"Enter octal number : \"))\n    decimal_number = octal_to_decimal(octal_number)\n    print(f\"Octal number {octal_number} to decimal number {decimal_number}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Declaring variables\noctal_number = 0\ndecimal_number = 0\n\n# Receiving input from the user\noctal_number = input(\"Enter an octal number: \")\n\n# Converting octal number to decimal number\ndecimal_number = int(octal_number, 8)\n\n# Printing the result\nprint(\"The decimal number is:\", decimal_number)",
    "def oct_to_dec(oct_num):\n    decimal = 0\n    for i in range(len(oct_num)):\n        decimal += int(oct_num[i]) * 8 ** i\n    return decimal\n\n\ndef main():\n    oct_num = input(\"Enter an octal number: \")\n    decimal = oct_to_dec(oct_num)\n    print(\"Decimal number is: {}\".format(decimal))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in octal_number:\n        decimal_number = decimal_number * 8 + int(i)\n    return decimal_number\n\noctal_number = input(\"Enter an octal number: \")\nprint(octal_to_decimal(octal_number))",
    "def octal_to_decimal(octal_number: str) -> int:\n    decimal_number: int = 0\n    for i in range(len(octal_number) - 1, -1, -1):\n        decimal_number += int(octal_number[i]) * (8 ** i)\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    assert octal_to_decimal(\"10\") == 8",
    "def octal_to_decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(octal_number)):\n        decimal_number = decimal_number * 8 + int(octal_number[i])\n    return decimal_number\n\n\ndef main():\n    octal_number = input(\"Enter an octal number: \")\n    if octal_number[0] == \"-\":\n        print(octal_to_decimal(octal_number[1:]))\n    else:\n        print(octal_to_decimal(octal_number))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}