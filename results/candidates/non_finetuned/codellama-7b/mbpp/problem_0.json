{
  "problem": {
    "task_id": "MBPP/11",
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
    "test_list": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ],
    "challenge_test_list": [
      "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
      "assert remove_Occ(\"\",\"l\") == \"\""
    ],
    "problem_id": 0
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def remove_character(string, character):\n    # Split the string into a list.\n    string_list = list(string)\n\n    # Remove the first character from the list.\n    string_list.remove(character)\n\n    # Remove the last character from the list.\n    string_list.pop()\n\n    # Join the list to get the result.\n    result = \"\".join(string_list)\n\n    return result\n\nprint(remove_character(\"Hello World\", \"o\"))",
    "def remove_first_last_occurrence(stri, char):\n    first_index = stri.find(char)\n    last_index = stri.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return stri\n    return stri[first_index + 1:last_index]\n\n\ndef main():\n    str_input = input(\"Enter a string: \")\n    char_input = input(\"Enter a character to be removed: \")\n    print(\"String without first and last occurrence of a given character:\")\n    print(remove_first_last_occurrence(str_input, char_input))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_character(s, c):\n    return s.replace(c, \"\", 1).replace(c, \"\")\n\n\n# s = \"abcabcabc\"\n# c = \"a\"\n# print(remove_character(s, c))\n\n\n\"\"\"\nWrite a python function to find the longest string in a list of strings.\n\"\"\"\n\n\ndef longest_string(lst):\n    return max(lst, key=len)\n\n\n# lst = [\"abc\", \"abcd\", \"abcde\"]\n# print(longest_string(lst))\n\n\n\"\"\"\nWrite a python function to find the maximum from all sub-arrays of a given string.\n\"\"\"\n\n\ndef max_subarray(lst):\n    max_so_far = max_now = 0\n    for i in range(0, len(lst)):\n        max_now += int(lst[i])\n        if max_now < 0:\n            max_now = 0\n        max_so_far = max(max_so_far, max_now)\n    return max_so_far\n\n\n# lst = \"-13-2-45--78-43\"\n# print(max_subarray(lst))\n\n\n\"\"\"\nWrite a python function to find the maximum from all sub-arrays of a given list.\n\"\"\"\n\n\ndef max_subarray_list(lst):\n    max_so_far = max_now = 0\n    for i in range(0, len(lst)):\n        max_now += lst[i]\n        if max_now < 0:\n            max_now = 0\n        max_so_far = max(max_so_far, max_now)\n    return max_so_far\n\n\n# lst = [-13, -2, 45, -78, 43]\n# print(max_subarray_list(lst))\n\n\n\"\"\"\nWrite a python function to find the maximum from all sub-matrix of a given 2D list.\n\"\"\"\n\n\ndef max_submatrix(lst):\n    max_so_far = max_now = 0\n    for i in range(",
    "def remove_first_last_char(text: str, char: str) -> str:\n    \"\"\"Removes first and last occurrence of a given character from the string.\n\n    Args:\n        text (str): The string to be modified.\n        char (str): The character to be removed.\n\n    Examples:\n        >>> remove_first_last_char(\"abcabc\", \"c\")\n        'abab'\n        >>> remove_first_last_char(\"aaaaa\", \"a\")\n        ''\n        >>> remove_first_last_char(\"aabc\", \"a\")\n        'bc'\n\n    \"\"\"\n    start_index = 0\n    end_index = len(text) - 1\n    if char in text:\n        while start_index < len(text):\n            if text[start_index] == char:\n                break\n            start_index += 1\n        while end_index >= 0:\n            if text[end_index] == char:\n                break\n            end_index -= 1\n        if start_index < end_index:\n            return text[:start_index] + text[start_index + 1 : end_index] + text[end_index + 1 :]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def remove_first_last_char(str1: str, char: str) -> str:\n    return str1[1:-1]\n\n\nif __name__ == \"__main__\":\n    str1 = \"aababbabbaabb\"\n    print(remove_first_last_char(str1, \"a\"))",
    "def remove_character(string: str, character: str) -> str:\n    \"\"\"\n    >>> remove_character(\"abdcefgh\", \"e\")\n    'abdfgh'\n    \"\"\"\n    # First occurrence\n    first = string.find(character)\n    # Last occurrence\n    last = string.rfind(character)\n\n    return string[:first] + string[first + 1 : last] + string[last + 1 :]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def remove_first_last(string, char):\n    return string[string.index(char)+1:string.rindex(char)-1]\n\ndef main():\n    string = input(\"Enter a string:\")\n    char = input(\"Enter a character:\")\n    print(remove_first_last(string, char))\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last_occurrence(string, char):\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n    if first_occurrence > -1 and last_occurrence > -1:\n        return string[:first_occurrence] + string[first_occurrence + 1:last_occurrence] + string[last_occurrence + 1:]\n    elif first_occurrence > -1:\n        return string[:first_occurrence] + string[first_occurrence + 1:]\n    elif last_occurrence > -1:\n        return string[:last_occurrence] + string[last_occurrence + 1:]\n    return string\n\n\ndef main():\n    print(remove_first_last_occurrence('Hello World', 'o'))\n    print(remove_first_last_occurrence('Hello World', 'x'))\n\n\nif __name__ == '__main__':\n    main()",
    "def remove_char(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n\n    if first == -1 or last == -1:\n        return string\n\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n\n\nprint(remove_char(\"abacaba\", \"a\"))",
    "def remove_first_and_last_char(string, char):\n    first_char = string.find(char)\n    last_char = string.rfind(char)\n    return string[:first_char] + string[first_char + 1:last_char] + string[last_char + 1:]\n\n\nprint(remove_first_and_last_char(\"abcabc\", \"a\"))",
    "def remove_char(str, ch):\n    first = str.find(ch)\n    last = str.rfind(ch)\n    if first != -1 and last != -1:\n        return str[:first] + str[first+1:last] + str[last+1:]\n    elif first != -1:\n        return str[:first] + str[first+1:]\n    elif last != -1:\n        return str[:last] + str[last+1:]\n    else:\n        return str\n\n\ndef main():\n    str = \"abcabca\"\n    ch = \"a\"\n    print(\"Original string: \", str)\n    str = remove_char(str, ch)\n    print(\"After removing first and last occurrence of character: \", str)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last(string, character):\n    first = 0\n    last = len(string)\n\n    while first <= last:\n        if string[first] == character:\n            break\n        first += 1\n\n    while last >= first:\n        if string[last] == character:\n            break\n        last -= 1\n\n    if first == 0 or last == len(string):\n        return string\n\n    return string[:first] + string[first+1:last] + string[last+1:]\n\nprint(remove_first_last(\"Hello, I am Anubhav\", \"a\"))",
    "def remove_character(str, char):\n    first_index = str.find(char)\n    last_index = str.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return str\n    elif first_index == last_index:\n        return str[0:first_index] + str[first_index+1:len(str)]\n    else:\n        return str[0:first_index] + str[first_index+1:last_index] + str[last_index+1:len(str)]\n\n\nstr = \"banana\"\nchar = \"a\"\nprint(\"Original String: \", str)\nprint(\"String after removing first and last occurrence of character: \", remove_character(str, char))",
    "def remove_char(str, ch):\n    start = 0\n    end = len(str) - 1\n\n    # remove first occurrence\n    while start < len(str) and str[start] != ch:\n        start += 1\n    str = str[:start] + str[start + 1:]\n\n    # remove last occurrence\n    while end >= 0 and str[end] != ch:\n        end -= 1\n    str = str[:end] + str[end + 1:]\n\n    return str\n\n\nprint(remove_char(\"aabbbc\", \"b\"))",
    "def remove_char(string: str, character: str) -> str:\n    \"\"\"Remove the first and last occurrence of a character from the given string.\n\n    Args:\n        string (str): The string to be modified.\n        character (str): The character to be removed.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    return string[1:-1].replace(character, \"\")\n\n\nif __name__ == \"__main__\":\n    print(remove_char(\"Hello\", \"o\"))",
    "def remove_first_last_char(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_first_last_char(\"Hello World\", \"o\")\n    'Hell Wrld'\n    \"\"\"\n    str1 = str1.replace(char + str1[-1], \"\", 1)\n    str1 = str1.replace(str1[0] + char, \"\", 1)\n    return str1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_char(str1: str, ch: str) -> str:\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    >>> remove_char('hello world', 'o')\n    'hll wrld'\n    >>> remove_char('hello world', 'x')\n    'hello world'\n    \"\"\"\n    if len(str1) < 2:\n        return str1\n    if str1[0] == ch:\n        str1 = str1[1:]\n    if str1[-1] == ch:\n        str1 = str1[:-1]\n    return str1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_char(str1: str, char: str) -> str:\n    \"\"\"Remove first and last occurrence of a given character from the string.\n\n    Args:\n        str1 (str): Input string.\n        char (str): Character to be removed.\n\n    Returns:\n        str: String with first and last occurrence of the given character removed.\n    \"\"\"\n    return str1.replace(char, \"\", 1).replace(char, \"\", -1)\n\n\nif __name__ == \"__main__\":\n    print(remove_char(\"hello\", \"l\"))",
    "def remove_character(str1, chr):\n    return str1.replace(chr, \"\")\n\n\ndef remove_character_reverse(str1, chr):\n    return chr.join(str1.split(chr)[1:-1])\n\n\ndef main():\n    str1 = \"Python\"\n    str2 = \"Python\"\n    str3 = \"Python\"\n    chr = \"P\"\n    print(f\"Before removing the character: {str1}\")\n    print(f\"After removing the character: {remove_character(str1, chr)}\")\n    print(f\"Before removing the character: {str2}\")\n    print(f\"After removing the character: {remove_character_reverse(str2, chr)}\")\n    print(f\"Before removing the character: {str3}\")\n    print(f\"After removing the character: {remove_character_reverse(str3, chr)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last(str, chr):\n    #check if chr is present in str\n    if chr in str:\n        #find the index of chr in str\n        index = str.find(chr)\n        #find the index of last occurence of chr in str\n        index_last = str.rfind(chr)\n\n        #remove first occurence\n        str = str[:index] + str[index+1:]\n        #remove last occurence\n        str = str[:index_last] + str[index_last+1:]\n\n        return str\n\n    return str\n\n\nprint(remove_first_last(\"python\", \"y\"))\nprint(remove_first_last(\"python\", \"p\"))\nprint(remove_first_last(\"python\", \"m\"))\nprint(remove_first_last(\"python\", \"x\"))\nprint(remove_first_last(\"python\", \"a\"))",
    "def remove_character(str, ch):\n    first_index = str.find(ch)\n    last_index = str.rfind(ch)\n\n    if first_index == -1 or last_index == -1:\n        return str\n    elif first_index == last_index:\n        return str.replace(ch, \"\")\n    else:\n        return str[0:first_index] + str[first_index+1:len(str)-last_index] + str[len(str)-last_index+1:]\n\n\nprint(remove_character(\"abcda\", \"a\"))\nprint(remove_character(\"abcda\", \"d\"))\nprint(remove_character(\"abcda\", \"z\"))",
    "def remove_char(str, ch):\n    return str[1:-1]\n\n\nprint(remove_char(\"abacadc\", \"a\"))",
    "def remove_first_and_last(input_str: str, char: str) -> str:\n    \"\"\"\n    :param input_str: string to be modified\n    :param char: char to be removed from the string\n    :return: modified string\n    \"\"\"\n    if len(input_str) == 0:\n        return \"\"\n\n    if len(input_str) == 1:\n        return \"\" if char == input_str else input_str\n\n    if input_str[-1] == char:\n        return remove_first_and_last(input_str[:-1], char)\n\n    if input_str[0] == char:\n        return remove_first_and_last(input_str[1:], char)\n\n    return input_str\n\n\ndef main():\n    str1 = \"abcabc\"\n    str2 = \"abcabcabc\"\n    str3 = \"abcabcabcabc\"\n    str4 = \"abc\"\n    str5 = \"\"\n    str6 = \"aaa\"\n    str7 = \"aaaa\"\n    str8 = \"aaaaa\"\n\n    print(remove_first_and_last(str1, \"a\"))\n    print(remove_first_and_last(str2, \"a\"))\n    print(remove_first_and_last(str3, \"a\"))\n    print(remove_first_and_last(str4, \"a\"))\n    print(remove_first_and_last(str5, \"a\"))\n    print(remove_first_and_last(str6, \"a\"))\n    print(remove_first_and_last(str7, \"a\"))\n    print(remove_first_and_last(str8, \"a\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last_char(string: str, char: str) -> str:\n    \"\"\"Remove first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): input string\n        char (str): character to be removed\n\n    Returns:\n        str: string without first and last occurrence of the given character\n    \"\"\"\n    return string[1:-1].replace(char, \"\") + string[-1]\n\n\nif __name__ == \"__main__\":\n    print(remove_first_last_char(\"abcobac\", \"o\"))",
    "def remove_character(string: str, character: str) -> str:\n    \"\"\"\n    >>> remove_character('python', 'y')\n    'pthn'\n    \"\"\"\n    first_index = string.find(character)\n    last_index = string.rfind(character)\n\n    if first_index == last_index:\n        return string.replace(character, \"\")\n    elif first_index == -1 or last_index == -1:\n        return string\n    else:\n        return string[0:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_char(s, c):\n    return s.replace(c, \"\", 1).replace(c, \"\", -1)\n\n\nprint(remove_char(\"12345654321\", \"5\"))",
    "def remove_char(string, char):\n    if len(string) == 0:\n        return \"Empty string\"\n    elif len(string) == 1 and string == char:\n        return \"\"\n    elif char not in string:\n        return string\n    else:\n        first_occurence = string.find(char)\n        last_occurence = string.rfind(char)\n        if first_occurence == -1:\n            return string\n        elif first_occurence == last_occurence:\n            return string[:first_occurence] + string[first_occurence + 1:]\n        else:\n            return string[:first_occurence] + string[first_occurence + 1:last_occurence] + string[last_occurence + 1:]\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char = input(\"Enter a character: \")\n    print(remove_char(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_char('apple', 'p')\n    'aple'\n    >>> remove_char('apple', 'z')\n    'apple'\n    \"\"\"\n    first_index = str1.find(char)\n    last_index = str1.rfind(char)\n\n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return str1\n\n    return str1[0:first_index] + str1[first_index + 1:last_index] + str1[last_index + 1:]\n\n\ndef remove_char_v2(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_char('apple', 'p')\n    'aple'\n    >>> remove_char('apple', 'z')\n    'apple'\n    \"\"\"\n    first_index = str1.find(char)\n    last_index = str1.rfind(char)\n\n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return str1\n\n    return str1.replace(str1[first_index:last_index + 1], \"\", 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_first_last_occurence(text, char):\n    \"\"\"Remove first and last occurrence of a given character from the string.\"\"\"\n    if len(text) == 0 or len(char) == 0:\n        return text\n\n    if text[0] == char:\n        text = text[1:]\n\n    if text[-1] == char:\n        text = text[:-1]\n\n    return text",
    "def remove_char(str, char):\n    return str.replace(char, \"\")",
    "def remove_char_first_last(str1, ch):\n    start = 0\n    end = len(str1) - 1\n    while start < end:\n        if str1[start] == ch:\n            str1 = str1[:start] + str1[start+1:]\n            start -= 1\n            continue\n        if str1[end] == ch:\n            str1 = str1[:end]\n            break\n        start += 1\n        end -= 1\n    return str1\n\n\nstr1 = \"xyzxyzxyz\"\nch = \"z\"\nprint(\"Original string is : \" + str1)\nprint(\"First and last occurrence of \" + ch + \" removed\")\nprint(remove_char_first_last(str1, ch))",
    "def remove_character(string, char):\n    # count = 0\n    # for i in range(len(string)):\n    #     if string[i] == char:\n    #         count += 1\n    #         if count == 2:\n    #             return string\n    #         else:\n    #             string = string.replace(char, \"\")\n    # return string\n\n    # string = string.replace(char, \"\", 2)\n    # string = string.replace(char, \"\", 2)\n    # return string\n\n    # string = string.replace(char, \"\", 1)\n    # string = string.replace(char, \"\", 1)\n    # return string\n\n    string = string.replace(char, \"\", 1)\n    string = string.replace(char, \"\", 1)\n    string = string.replace(char, \"\", 1)\n    return string\n\n\ndef main():\n    string = \"abcabca\"\n    char = \"a\"\n    print(remove_character(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_and_last_occurence(str1: str, ch: str) -> str:\n    \"\"\"\n    >>> remove_first_and_last_occurence(\"abcabc\", \"a\")\n    'bcbc'\n    \"\"\"\n    return str1[1:-1].replace(ch, \"\") + str1[-1]\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
    "def remove_first_and_last_occurence(str1, ch):\n    if ch not in str1:\n        return str1\n\n    # Remove first occurrence\n    str1 = str1.replace(ch, \"!\", 1)\n\n    # Remove last occurrence\n    str1 = str1[::-1].replace(ch, \"!\", 1)[::-1]\n\n    # Replace the first occurrence of \"!\" with the character\n    str1 = str1.replace(\"!\", ch, 1)\n\n    # Replace the last occurrence of \"!\" with the character\n    str1 = str1[::-1].replace(\"!\", ch, 1)[::-1]\n\n    return str1\n\n\ndef main():\n    str1 = \"abcac\"\n    str2 = \"abacab\"\n    str3 = \"abac\"\n\n    print(remove_first_and_last_occurence(str1, \"a\"))\n    print(remove_first_and_last_occurence(str2, \"a\"))\n    print(remove_first_and_last_occurence(str3, \"a\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last_char(string, char):\n    return string.replace(char, \"\").replace(char, \"\")\n\n\n# print(remove_first_last_char(\"abcabc\", \"a\"))\n\n\"\"\"\nWrite a python program to check if a given number is an element of a given array.\n\"\"\"\n\n\ndef is_element(arr, num):\n    return num in arr\n\n\n# print(is_element([1, 2, 3, 4, 5], 4))\n\n\"\"\"\nWrite a python program to check if a given number is an element of a given array.\n\"\"\"\n\n\ndef is_element(arr, num):\n    for i in arr:\n        if i == num:\n            return True\n    return False\n\n\n# print(is_element([1, 2, 3, 4, 5], 4))\n\n\"\"\"\nWrite a python function to check if a given string is a pangram or not.\n\"\"\"\n\n\ndef is_pangram(string):\n    for i in string:\n        if i not in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True\n\n\n# print(is_pangram(\"The quick brown fox jumps over the lazy dog\"))\n\n\"\"\"\nWrite a python function to check if a given string is a pangram or not.\n\"\"\"\n\n\ndef is_pangram(string):\n    for i in \"abcdefghijklmnopqrstuvwxyz\":\n        if i not in string:\n            return False\n    return True\n\n\n# print(is_pangram(\"The quick brown fox jumps over the lazy dog\"))\n\n\"\"\"\nWrite a python program to check if a given string is a palindrome or not.\n\"\"\"\n\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\n\n# print(is_palindrome(\"malayalam\"))\n\n\"\"\"\nWrite a python program to check if a given string is a palindrome or not.\n\"\"\"\n\n\ndef is_palindrome(string):\n    return",
    "def remove_character(string, character):\n    string = string.split(character)\n    return character.join(string)",
    "def remove_char(str, ch):\n    start = 0\n    end = len(str) - 1\n\n    while start < end:\n        if str[start] == ch:\n            str = str[:start] + str[start + 1:]\n            start += 1\n        elif str[end] == ch:\n            str = str[:end] + str[end + 1:]\n            end -= 1\n        else:\n            start += 1\n            end -= 1\n\n    return str\n\n\nprint(remove_char(\"abccba\", \"b\"))",
    "def remove_first_last(text, char):\n    return text[0:text.find(char)] + text[text.find(char)+1:]\n\nprint(remove_first_last(\"Python\", \"y\"))\nprint(remove_first_last(\"Python\", \"p\"))",
    "def remove_first_last(string, char):\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        if string[0] == char:\n            return \"\"\n        return string\n\n    first = string.find(char)\n    last = string.rfind(char)\n\n    if first == -1:\n        return string\n    if first == last:\n        return string.replace(char, \"\", 1)\n\n    return string[:first] + string[first + 1:].replace(char, \"\", 1)\n\n\nprint(remove_first_last(\"abcabc\", \"a\"))\nprint(remove_first_last(\"abcabc\", \"c\"))\nprint(remove_first_last(\"abcabc\", \"d\"))\nprint(remove_first_last(\"abcabc\", \"b\"))",
    "def remove_first_last_occurence(str1: str, str2: str) -> str:\n    \"\"\"\n    remove_first_last_occurence removes first and last occurrence of a given character from the string\n    >>> remove_first_last_occurence(\"apple\",\"a\")\n    ple\n    >>> remove_first_last_occurence(\"apple\",\"p\")\n    apple\n    >>> remove_first_last_occurence(\"apple\",\"e\")\n    ap\n    >>> remove_first_last_occurence(\"apple\",\"z\")\n    apple\n    \"\"\"\n\n    if str2 in str1:\n        str1 = str1.replace(str2, \"\", 1)\n        str1 = str1.replace(str2, \"\", -1)\n        return str1\n\n    return str1\n\n\ndef main():\n    \"\"\"\n    Call the main function\n    \"\"\"\n    print(remove_first_last_occurence(\"apple\", \"a\"))\n    print(remove_first_last_occurence(\"apple\", \"p\"))\n    print(remove_first_last_occurence(\"apple\", \"e\"))\n    print(remove_first_last_occurence(\"apple\", \"z\"))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
    "def remove_first_last(string, character):\n    first = 0\n    last = len(string) - 1\n    count = 0\n    for i in range(len(string)):\n        if string[i] == character:\n            if count == 0:\n                first = i\n                count += 1\n            elif count == 1:\n                last = i\n                count += 1\n    return string[first+1:last]\n\n\ns = \"Python.Python.Python\"\nprint(remove_first_last(s, \"Python\"))",
    "def remove_first_last_occurence(input_string, char):\n    first_index = input_string.find(char)\n    last_index = input_string.rfind(char)\n    if first_index == -1:\n        return input_string\n    if first_index == last_index:\n        return input_string[0:first_index] + input_string[first_index+1:]\n    return input_string[0:first_index] + input_string[first_index+1:last_index] + input_string[last_index+1:]\n\nprint(remove_first_last_occurence(\"hello\", \"l\"))\nprint(remove_first_last_occurence(\"hello\", \"h\"))\nprint(remove_first_last_occurence(\"hello\", \"o\"))\nprint(remove_first_last_occurence(\"hello\", \"e\"))",
    "def remove_first_last_occurrence(str1, str2):\n    start = 0\n    end = len(str1) - 1\n    while start <= end:\n        if str1[start] == str2:\n            str1 = str1[:start] + str1[start + 1:]\n            start += 1\n        if str1[end] == str2:\n            str1 = str1[:end] + str1[end + 1:]\n            end -= 1\n        start += 1\n        end -= 1\n    return str1\n\n\nprint(remove_first_last_occurrence(\"Hello World!\", \"o\"))",
    "def remove_first_last_occurrence(str1, char):\n    # Remove first occurrence\n    str1 = str1[str1.find(char)+1:]\n\n    # Remove last occurrence\n    str1 = str1[:str1.rfind(char)]\n\n    return str1\n\nprint(remove_first_last_occurrence(\"www.google.com\", \"w\"))\nprint(remove_first_last_occurrence(\"www.google.com\", \"o\"))",
    "def remove_character(string, character):\n    return character.join(string.split(character)[:-1])\n\n\"\"\"\nWrite a python function to check whether a string is palindrome or not.\n\"\"\"\ndef is_palindrome(string):\n    return string == string[::-1]\n\n\"\"\"\nWrite a python function to return the reverse of a string.\n\"\"\"\ndef reverse_string(string):\n    return string[::-1]\n\n\"\"\"\nWrite a python function to return the reverse of a string.\n\"\"\"\ndef reverse_string(string):\n    return string[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(string):\n    return string == string[::-1]\n\n\"\"\"\nWrite a python function to find the longest substring in a given string which contains only two distinct characters.\n\"\"\"\ndef longest_substring(string):\n    result = \"\"\n    start = 0\n    max_length = 0\n    char_map = {}\n    for index, char in enumerate(string):\n        if char not in char_map:\n            char_map[char] = index\n        else:\n            start_index = char_map[char]\n            if index - start_index > max_length:\n                max_length = index - start_index\n                result = string[start_index:index+1]\n            char_map[char] = index\n            start = start_index + 1\n    return result\n\n\"\"\"\nWrite a python program to find the number of substrings of a given string which starts and ends with a vowel.\n\"\"\"\ndef count_substrings(string):\n    return len([index for index, char in enumerate(string) if index == 0 or index == len(string) - 1 and char in \"aeiou\"])\n\n\"\"\"\nWrite a python function to find the number of substrings of a given string which starts and ends with a vowel.\n\"\"\"\ndef count_substrings(string):\n    return len([index for index, char in enumerate(string) if index == 0 or index == len(string) - 1",
    "def remove_first_last_occurence(str,ch):\n    if(len(str)==0):\n        return \"Enter a valid string\"\n    if(len(str)==1 and str[0]==ch):\n        return \"\"\n    if(ch not in str):\n        return str\n\n    new_str = \"\"\n    first_occurence = True\n    last_occurence = True\n    for i in str:\n        if(i==ch):\n            if(first_occurence):\n                first_occurence = False\n            elif(last_occurence):\n                last_occurence = False\n            continue\n        else:\n            if(first_occurence):\n                new_str+=i\n                first_occurence = False\n            elif(last_occurence):\n                new_str+=i\n                last_occurence = False\n            else:\n                new_str+=i\n\n    return new_str\n\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"f\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"a\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"b\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"c\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"d\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"e\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"g\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"h\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"i\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"j\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"k\"))\nprint(remove_first_last_occurence(\"abcdefgfedcba\",\"l\"))\nprint(remove_first_last_",
    "def remove_first_last_occurrence(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    if first_index == -1 or last_index == -1:\n        return string\n\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]\n\n\nprint(remove_first_last_occurrence(\"abcabcabc\", \"a\"))\nprint(remove_first_last_occurrence(\"abcabcabc\", \"c\"))\nprint(remove_first_last_occurrence(\"abcabcabc\", \"z\"))",
    "def remove_character(str, char):\n    first = str.find(char)\n    last = str.rfind(char)\n\n    if first != -1 and last != -1:\n        return str[:first] + str[first+1:last] + str[last+1:]\n\n    elif first != -1 and last == -1:\n        return str[:first] + str[first+1:]\n\n    elif first == -1 and last != -1:\n        return str[:last] + str[last+1:]\n\n    else:\n        return str\n\nprint(remove_character(\"abcbc\", \"b\"))\nprint(remove_character(\"abcbc\", \"c\"))\nprint(remove_character(\"abcbc\", \"a\"))\nprint(remove_character(\"abcbc\", \"d\"))",
    "def remove_first_and_last(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n    if first == -1 or last == -1:\n        return string\n    elif first == last:\n        return string[first+1:]\n    else:\n        return string[:first] + string[last+1:]\n\n\nprint(remove_first_and_last(\"abcdefgfedcba\", \"b\"))\nprint(remove_first_and_last(\"aaaabac\", \"a\"))\nprint(remove_first_and_last(\"abcbaba\", \"a\"))\nprint(remove_first_and_last(\"abcbabac\", \"a\"))\nprint(remove_first_and_last(\"abcbabac\", \"b\"))",
    "def remove_char(string, char):\n    string = list(string)\n    string.remove(char)\n    string.remove(char)\n    return ''.join(string)\n\n\nprint(remove_char('hello', 'l'))",
    "def remove_first_and_last_occurrence_of_a_given_char(s, c):\n    if s == None or len(s) == 0:\n        return s\n\n    # Remove first occurrence of c\n    if c in s:\n        s = s.replace(c, \"\", 1)\n\n    # Remove last occurrence of c\n    s = s[::-1]\n    if c in s:\n        s = s.replace(c, \"\", 1)\n    s = s[::-1]\n    return s\n\nprint(remove_first_and_last_occurrence_of_a_given_char(\"abc\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"abca\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"ababc\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"ababca\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"ababcaa\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"ababcaa\", \"b\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"ababcaa\", \"c\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(\"\", \"a\"))\nprint(remove_first_and_last_occurrence_of_a_given_char(None, \"a\"))",
    "def remove_char(str1, ch):\n    # Remove first occurrence\n    str1 = str1.replace(ch, \"\", 1)\n    # Remove last occurrence\n    str1 = str1.rsplit(ch, 1)[0]\n    return str1\n\nprint(remove_char(\"hello\", \"l\"))\nprint(remove_char(\"hello\", \"o\"))",
    "def remove_first_last(string, char):\n    # Removes the first and last occurrence of a given character from the string.\n    return string[0:string.rfind(char)] + string[string.find(char)+1:]\n\n\nstring = input(\"Enter a string: \")\nchar = input(\"Enter a character to be removed: \")\nprint(remove_first_last(string, char))",
    "def remove_first_last_char(str1, ch):\n    if ch in str1:\n        str1 = str1.replace(ch, \"\", 1)\n        str1 = str1.replace(ch, \"\", -1)\n    return str1\n\n\ndef main():\n    str1 = \"abcbdacd\"\n    print(remove_first_last_char(str1, \"b\"))\n    str2 = \"bdacd\"\n    print(remove_first_last_char(str2, \"b\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_and_last_occurence(str, ch):\n    return str[0:str.find(ch)] + str[str.rfind(ch)+1:]\n\ndef main():\n    str = \"geeksforgeeks\"\n    ch = 'e'\n    print(f\"The string before removing first and last occurence of '{ch}' is {str}.\")\n    print(f\"The string after removing first and last occurence of '{ch}' is {remove_first_and_last_occurence(str, ch)}.\")\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(string, char):\n    # write code here\n    string = list(string)\n    string.remove(char)\n    string.remove(char)\n    return \"\".join(string)\n\n# Test Cases:\nprint(remove_char(\"hubba\", \"b\"))\nprint(remove_char(\"babb\", \"b\"))\nprint(remove_char(\"babb\", \"a\"))\nprint(remove_char(\"aab\", \"b\"))\nprint(remove_char(\"bab\", \"b\"))\nprint(remove_char(\"ba\", \"b\"))\nprint(remove_char(\"b\", \"b\"))\nprint(remove_char(\"ba\", \"a\"))\nprint(remove_char(\"ab\", \"a\"))\nprint(remove_char(\"ab\", \"b\"))\nprint(remove_char(\"\", \"b\"))",
    "def remove_first_last_char(str1, ch):\n    # str1.replace(ch, '')\n    # str1.replace(ch, '', 1)\n    str1 = str1.replace(ch, '', str1.count(ch))\n    str1 = str1.replace(ch, '', str1.count(ch))\n\n    return str1\n\nprint(remove_first_last_char(\"hello\", \"l\"))\nprint(remove_first_last_char(\"hellllo\", \"l\"))\nprint(remove_first_last_char(\"hello\", \"a\"))\nprint(remove_first_last_char(\"hello\", \"z\"))\n\n\n# print(\"hello\".replace(\"l\", ''))\n# print(\"hellllo\".replace(\"l\", ''))\n# print(\"hello\".replace(\"a\", ''))\n# print(\"hello\".replace(\"z\", ''))",
    "def remove_first_last_char(s, ch):\n    first_char = s.find(ch)\n    last_char = s.rfind(ch)\n    s = s.replace(s[first_char:last_char+1], '')\n    return s\n\n\ndef main():\n    str1 = \"Hello world\"\n    print(remove_first_last_char(str1, 'o'))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(str1, ch):\n    first_index = -1\n    last_index = -1\n    for i in range(0, len(str1)):\n        if str1[i] == ch:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n    if first_index != -1 and last_index != -1:\n        return str1[:first_index] + str1[first_index + 1:last_index] + str1[last_index + 1:]\n    return str1\n\nprint(remove_char(\"aabbbbaa\", \"b\"))",
    "def remove_char(input_str, char):\n    char_list = list(input_str)\n    if char_list.count(char) == 0:\n        return input_str\n    char_list.pop(char_list.index(char))\n    char_list.pop(char_list.index(char) - 1)\n    return ''.join(char_list)\n\n\nprint(remove_char(\"Python\", \"y\"))",
    "def remove_char(str1, char):\n    str1 = str1.replace(char, \"\", 1)\n    str1 = str1.replace(char, \"\")\n    str1 = str1.replace(char, \"\", -1)\n    return str1\n\n\nstr1 = \"hello\"\nchar = \"l\"\nprint(\"Original string is : \" + str1)\nprint(\"Original string is : \" + char)\nprint(\"After removing the first and last occurrence of a given character from the string : \" + remove_char(str1, char))",
    "def remove_first_and_last(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n    return string[:first] + string[first+1:last] + string[last+1:]\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char = input(\"Enter a character to remove: \")\n    print(remove_first_and_last(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(str1: str, ch: str) -> str:\n    \"\"\"\n    >>> remove_char('HelloWorld', 'o')\n    'HellWrld'\n    \"\"\"\n    # return str1.replace(ch, '')[1:-1]\n    # return str1.replace(ch, '', 1)[1:-1] + str1.replace(ch, '', -1)[1:-1]\n    i, j = 0, len(str1) - 1\n    while i < j and str1[i] != ch:\n        i += 1\n    while j > i and str1[j] != ch:\n        j -= 1\n    if i < j:\n        str1 = str1[:i] + str1[i + 1 :]\n    if j > i:\n        str1 = str1[:j] + str1[j + 1 :]\n    return str1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_first_last_occurence(string, character):\n    first = string.find(character)\n    last = string.rfind(character)\n\n    if first == -1 or last == -1:\n        return string\n\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n\n\nprint(remove_first_last_occurence(\"abcabc\", \"a\"))\nprint(remove_first_last_occurence(\"abcabc\", \"b\"))\nprint(remove_first_last_occurence(\"abcabc\", \"c\"))",
    "def remove_first_and_last_occurrence(string: str, character: str) -> str:\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    >>> remove_first_and_last_occurrence(\"banana\", \"a\")\n    'bnn'\n    >>> remove_first_and_last_occurrence(\"banana\", \"m\")\n    'banana'\n    >>> remove_first_and_last_occurrence(\"banana\", \"b\")\n    'nana'\n    \"\"\"\n    first_index = string.find(character)\n    last_index = string.rfind(character)\n    return string[first_index + 1:last_index]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def remove_char(s, c):\n    return s.strip(c)\n\n\nprint(remove_char(\"www.google.com\", \"w\"))",
    "def remove_character(string, char):\n    start = 0\n    end = len(string) - 1\n    first = -1\n    last = -1\n\n    while start <= end:\n        if string[start] == char:\n            if first == -1:\n                first = start\n        if string[end] == char:\n            if last == -1:\n                last = end\n        start += 1\n        end -= 1\n\n    if first != -1 and last != -1:\n        string = string[:first] + string[first + 1:last] + string[last + 1:]\n\n    return string\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char = input(\"Enter the character to be removed: \")\n    print(remove_character(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_character(str1: str, character: str) -> str:\n    \"\"\"\n    >>> remove_character(\"abcabc\", \"a\")\n    'bc'\n    \"\"\"\n    index_first = 0\n    index_last = len(str1) - 1\n    while str1[index_first] != character:\n        index_first += 1\n    while str1[index_last] != character:\n        index_last -= 1\n    return str1[index_first + 1 : index_last]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_character(str1, ch):\n    if len(str1) == 0:\n        return str1\n\n    if str1[0] == ch:\n        return remove_character(str1[1:], ch)\n\n    if str1[-1] == ch:\n        return str1[:-1]\n\n    return str1\n\n\ndef remove_character_1(str1, ch):\n    if len(str1) == 0:\n        return str1\n\n    if str1[0] == ch:\n        return str1[1:].remove_character(ch)\n\n    if str1[-1] == ch:\n        return str1[:-1].remove_character(ch)\n\n    return str1\n\n\nif __name__ == \"__main__\":\n    str1 = \"siddhant\"\n    ch = \"a\"\n    print(remove_character(str1, ch))\n    print(remove_character_1(str1, ch))",
    "def remove_char(str, ch):\n    if ch not in str:\n        return str\n    else:\n        str = str.replace(ch, '', 1)\n        str = str[:-1]\n        return str\n\nprint(remove_char(\"abhilasha\", \"a\"))\nprint(remove_char(\"abhilasha\", \"c\"))",
    "def remove_first_and_last(s, c):\n    return s[1:-1].replace(c, \"\")\n\n\ndef main():\n    print(remove_first_and_last(\"Hello world\", \"o\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_character(string, char):\n    # Code here\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index == -1:\n        return string\n    elif last_index == -1:\n        return string\n    elif first_index == last_index:\n        return string[1:]\n    else:\n        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n\n\nprint(remove_character(\"hello\", \"l\"))\nprint(remove_character(\"hello\", \"h\"))\nprint(remove_character(\"hello\", \"o\"))\nprint(remove_character(\"hello\", \"x\"))\nprint(remove_character(\"hello\", \"e\"))\nprint(remove_character(\"hello\", \"l\"))\nprint(remove_character(\"hello\", \"o\"))\nprint(remove_character(\"hello\", \"x\"))\nprint(remove_character(\"hello\", \"h\"))\nprint(remove_character(\"hello\", \"e\"))",
    "def remove_first_last_char(string, char):\n    first = 0\n    last = len(string)-1\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    if first_index == -1 and last_index == -1:\n        return string\n    elif first_index == -1 or last_index == -1:\n        return string\n    elif first_index == last_index:\n        return string.replace(char, \"\")\n    else:\n        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n\nprint(remove_first_last_char(\"abcdeabcdabcde\", \"a\"))",
    "def remove_first_last_occur(string, char):\n    first_char = string.find(char)\n    last_char = string.rfind(char)\n    if first_char == -1:\n        return string\n    elif first_char == last_char:\n        return string.replace(char, \"\")\n    else:\n        return string[:first_char] + string[first_char + 1:last_char] + string[last_char + 1:]\n\n\nprint(remove_first_last_occur(\"hello\", \"l\"))\nprint(remove_first_last_occur(\"hello\", \"m\"))\nprint(remove_first_last_occur(\"hello\", \"h\"))",
    "def remove_first_and_last_occurrence(string, char):\n    first_char_index = string.find(char)\n    last_char_index = string.rfind(char)\n\n    if first_char_index == -1:\n        print(\"The character doesn't exist in the string\")\n        return\n\n    if first_char_index == last_char_index:\n        return string[:(first_char_index)] + string[(first_char_index + 1):]\n    else:\n        return string[:(first_char_index)] + string[(first_char_index + 1):last_char_index] + string[(last_char_index + 1):]\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char = input(\"Enter a character to be removed: \")\n    print(remove_first_and_last_occurrence(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(string, char):\n    string = list(string)\n    char_list = []\n    for i in string:\n        if i == char:\n            char_list.append(i)\n    for i in char_list:\n        if i == char_list[0]:\n            string.remove(i)\n        if i == char_list[-1]:\n            string.remove(i)\n    return ''.join(string)\n\n\nstring = 'python'\nchar = 'y'\nprint(remove_char(string, char))",
    "def remove_char(str1, ch):\n    index1 = str1.find(ch)\n    index2 = str1.rfind(ch)\n    if index1 == -1 or index2 == -1:\n        return str1\n    elif index1 == index2:\n        return str1[1:-1]\n    else:\n        return str1[0:index1] + str1[index2+1:]\n\nprint(remove_char(\"geeksforgeeks\", \"e\"))\nprint(remove_char(\"geeksforgeeks\", \"k\"))\nprint(remove_char(\"geeksforgeeks\", \"g\"))",
    "def remove_first_last_occurrence(str1, ch):\n    index1 = str1.find(ch)\n    index2 = str1.rfind(ch)\n    return str1[index1+1:index2]\n\nprint(remove_first_last_occurrence(\"123123123\", \"1\"))",
    "def remove_first_last_char(string, char):\n    return remove_first_char(remove_last_char(string, char), char)\n\n\ndef remove_first_char(string, char):\n    return string[1:] if string[0] == char else string\n\n\ndef remove_last_char(string, char):\n    return string[:-1] if string[-1] == char else string\n\n\ndef main():\n    string = \"aabcdaa\"\n    char = \"a\"\n    print(remove_first_last_char(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_first_last_char(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_first_last_char('abcabc', 'c')\n    'abab'\n    >>> remove_first_last_char('aaabbb', 'c')\n    'aaabbb'\n    >>> remove_first_last_char('abcabc', 'a')\n    'bcabcb'\n    \"\"\"\n    first_index = str1.find(char)\n    last_index = str1.rfind(char)\n\n    if first_index == -1 or last_index == -1:\n        return str1\n\n    if first_index == 0 and last_index == len(str1) - 1:\n        return str1[1:-1]\n\n    if first_index == 0:\n        return str1[1:]\n    if last_index == len(str1) - 1:\n        return str1[:-1]\n\n    return str1[:first_index] + str1[first_index + 1 :]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_char(str1, ch):\n    # slicing\n    str1 = str1.split(ch)\n    str1 = ''.join(str1)\n    return str1\n\n\ndef remove_char_2(str1, ch):\n    # using list comprehension\n    str1 = [x for x in str1 if x != ch]\n    return ''.join(str1)\n\n\ndef remove_char_3(str1, ch):\n    # using list comprehension\n    str1 = [x for x in str1 if x != ch]\n    return ''.join(str1)\n\n\nprint(remove_char(\"Python\", \"y\"))\nprint(remove_char_2(\"Python\", \"y\"))\nprint(remove_char_3(\"Python\", \"y\"))",
    "def remove_first_last(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n\n    if first == -1:\n        print(\"First occurance not found\")\n    if last == -1:\n        print(\"Last occurance not found\")\n    if first == -1 or last == -1:\n        return string\n\n    string = string[:first] + string[first + 1:last] + string[last + 1:]\n    return string\n\n\nprint(remove_first_last(\"hello\", \"l\"))\nprint(remove_first_last(\"hello\", \"o\"))\nprint(remove_first_last(\"hello\", \"e\"))",
    "def remove_first_last_occurrence(text, char):\n    first_index = text.find(char)\n    last_index = text.rfind(char)\n\n    if first_index == -1 or last_index == -1:\n        return text\n\n    return text[:first_index] + text[first_index + 1:last_index] + text[last_index + 1:]\n\n\nprint(remove_first_last_occurrence(\"abcabc\", \"b\"))\nprint(remove_first_last_occurrence(\"abcab\", \"b\"))\nprint(remove_first_last_occurrence(\"abcab\", \"a\"))",
    "def remove_char(string, character):\n    return string[1:-1]\n\n\nprint(remove_char(\"Python\", \"y\"))\nprint(remove_char(\"Python\", \"x\"))",
    "def remove_first_last_occurence(string, char):\n    first = 0\n    last = len(string) - 1\n\n    while first <= last:\n        if string[first] == char:\n            first += 1\n            break\n        if string[last] == char:\n            last -= 1\n            break\n\n        first += 1\n        last -= 1\n\n    if first > last:\n        return string\n\n    return string[:first - 1] + string[first:last + 1] + string[last + 1:]\n\n\ndef main():\n    print(remove_first_last_occurence(\"123123123\", \"1\"))\n    print(remove_first_last_occurence(\"123123123\", \"2\"))\n    print(remove_first_last_occurence(\"123123123\", \"3\"))\n    print(remove_first_last_occurence(\"123123123\", \"4\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(str1, ch):\n    return ch.join(str1.split(ch)[1:-1])\n\n\nprint(remove_char(\"hello\", \"l\"))",
    "def remove_char(str1, char):\n    return str1.replace(char, \"\", 1).replace(char, \"\")\n\n\n# str1 = \"Hello\"\n# str2 = \"Hello\"\n# print(remove_char(str1, \"l\"))",
    "def remove_first_last_occurence(s, c):\n    first = s.find(c)\n    last = s.rfind(c)\n\n    if first == -1:\n        return s\n\n    if first == last:\n        return s.replace(c, \"\")\n\n    return s[:first] + s[first+1:last] + s[last+1:]\n\n\nprint(remove_first_last_occurence(\"aaabbbaac\", \"a\"))",
    "def remove_first_last_char(string, char):\n    first_char_index = string.find(char)\n    last_char_index = string.rfind(char)\n\n    if first_char_index != -1 and last_char_index != -1:\n        return string[:first_char_index] + string[first_char_index+1:last_char_index] + string[last_char_index+1:]\n    return string\n\nprint(remove_first_last_char(\"abc.abc\", \"a\"))",
    "def remove_first_last_occurrence(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_first_last_occurrence('abacaba', 'a')\n    'bcb'\n    \"\"\"\n    return str1[1:-1].replace(char, \"\")\n\n\ndef remove_first_last_occurrence_alt(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_first_last_occurrence('abacaba', 'a')\n    'bcb'\n    \"\"\"\n    str_len = len(str1)\n    char_index = str1.find(char)\n    if char_index == -1:\n        return str1\n    str1 = str1.replace(char, \"\")\n    str1 = str1[:char_index] + str1[char_index + 1 :]\n    return str1[:str_len - 2] + str1[str_len - 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_char(str, ch):\n    first = str.find(ch)\n    last = str.rfind(ch)\n    if first >= 0 and last >= 0:\n        return str[:first] + str[first+1:last] + str[last+1:]\n    else:\n        return str\n\nprint(remove_char(\"Python\", \"y\"))\nprint(remove_char(\"Java\", \"a\"))\nprint(remove_char(\"Java\", \"j\"))",
    "def remove_first_last_char(string, character):\n    if character not in string:\n        return string\n\n    first_index = string.find(character)\n    last_index = string.rfind(character)\n\n    return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n\n\nprint(remove_first_last_char(\"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "def remove_char(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n    if first == -1 or last == -1:\n        return string\n    return string[:first] + string[first+1:last] + string[last+1:]\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    char = input(\"Enter a character: \")\n    print(remove_char(string, char))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_char(str1, char):\n    if char in str1:\n        # remove first occurrence\n        str1 = str1.replace(char, '', 1)\n\n        # remove last occurrence\n        str1 = str1.replace(char, '', 1)\n\n        return str1\n    else:\n        return str1\n\nprint(remove_char('aabbbccdaabbbccde', 'a'))\nprint(remove_char('aabbbccdaabbbccde', 'b'))\nprint(remove_char('aabbbccdaabbbccde', 'c'))\nprint(remove_char('aabbbccdaabbbccde', 'd'))\nprint(remove_char('aabbbccdaabbbccde', 'e'))",
    "def remove_first_last_occurrence(str1: str, char: str) -> str:\n    \"\"\"\n    >>> remove_first_last_occurrence(\"HelloWorld\", \"o\")\n    'HellWrld'\n    \"\"\"\n    return str1[1:-1].replace(char, \"\") + str1[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_first_last_occurrence(text: str, character: str) -> str:\n    \"\"\"\n    >>> remove_first_last_occurrence(\"Hello.World.Hello\", \".\")\n    'Hello.World'\n    >>> remove_first_last_occurrence(\"Hello.World.Hello\", \"K\")\n    'Hello.World.Hello'\n    >>> remove_first_last_occurrence(\"Hello.World.Hello\", \"l\")\n    'Heo.Wor.H'\n    \"\"\"\n    first_occurrence = text.find(character)\n    last_occurrence = text.rfind(character)\n    if first_occurrence == last_occurrence == -1:\n        return text\n    if first_occurrence == -1:\n        return text[0:last_occurrence] + text[last_occurrence + 1:]\n    if last_occurrence == -1:\n        return text[0:first_occurrence] + text[first_occurrence + 1:]\n    return text[0:first_occurrence] + text[first_occurrence + 1:last_occurrence] + text[last_occurrence + 1:]\n\n\ndef remove_first_last_occurrence_efficient(text: str, character: str) -> str:\n    \"\"\"\n    >>> remove_first_last_occurrence_efficient(\"Hello.World.Hello\", \".\")\n    'Hello.World'\n    >>> remove_first_last_occurrence_efficient(\"Hello.World.Hello\", \"K\")\n    'Hello.World.Hello'\n    >>> remove_first_last_occurrence_efficient(\"Hello.World.Hello\", \"l\")\n    'Heo.Wor.H'\n    \"\"\"\n    first_occurrence = text.find(character)\n    last_occurrence = text.rfind(character)\n    if first_occurrence == last_occurrence == -1:\n        return text\n    if first_occurrence == -1:\n        return text[0:last_occurrence] + text[last_occurrence + 1:]\n    if last_occurrence == -1:\n        return text[0:first_occurrence] + text[first_occurrence +",
    "def remove_first_last(string,char):\n    first = string.find(char)\n    last = string.rfind(char)\n    return string[:first] + string[first+1:last] + string[last+1:]\n\nprint(remove_first_last(\"pqrstuvwxyz\",\"z\"))",
    "def remove_first_last(str1: str, ch: str) -> str:\n    \"\"\"Remove the first and last occurrence of a character from the string.\n\n    Args:\n        str1 (str): The string from which the character is to be removed.\n        ch (str): The character to be removed.\n\n    Returns:\n        str: The string after removing the character.\n    \"\"\"\n    str1 = str1.replace(ch, \"\", 1)\n    str1 = str1[:-1]\n    return str1\n\n\nif __name__ == \"__main__\":\n    print(remove_first_last(\"abcbcab\", \"b\"))",
    "def remove_first_last(str1, ch):\n    if len(str1) == 0:\n        return str1\n    if str1[0] == ch:\n        str1 = str1[1:]\n    if str1[-1] == ch:\n        str1 = str1[:-1]\n    return str1\n\n\nprint(remove_first_last(\"aabcdaa\", \"a\"))\nprint(remove_first_last(\"aabcdaa\", \"d\"))",
    "def remove_char(str1, ch):\n    if ch in str1:\n        str1 = str1.replace(ch, \"\", 1)\n        str1 = str1.replace(ch, \"\", 1)\n    return str1\n\nstr1 = input(\"Enter a string: \")\nch = input(\"Enter a character to remove: \")\nprint(\"String after removing first and last occurence: \", remove_char(str1, ch))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}