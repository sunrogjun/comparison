{
  "problem": {
    "task_id": "MBPP/195",
    "prompt": "Write a python function to find the first position of an element in a sorted array.",
    "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
    "test_list": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ],
    "challenge_test_list": [],
    "problem_id": 184
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def first_position(nums, target):\n    \"\"\"\n    :param nums: list - sorted list of integers\n    :param target: int - integer value to find the position of\n    :return: int - index of the target, -1 if the target is not found\n    \"\"\"\n    if nums == []:\n        return -1\n    if len(nums) == 1:\n        if nums[0] == target:\n            return 0\n        else:\n            return -1\n\n    # Finding the mid point\n    mid = len(nums) // 2\n\n    # Checking if the target is in the left half\n    if nums[mid] >= target:\n        return first_position(nums[:mid], target)\n\n    # Checking if the target is in the right half\n    elif nums[mid] < target:\n        return first_position(nums[mid + 1:], target)\n\n    else:\n        return -1\n\n\nprint(first_position([1, 3, 5, 5, 5, 5, 5, 6, 7, 9, 10], 5))",
    "def first_position(arr, key):\n    first, last = 0, len(arr)-1\n    while first <= last:\n        mid = (first + last)//2\n        if arr[mid] == key:\n            if mid > 0 and arr[mid-1] != key:\n                return mid\n            else:\n                first = mid + 1\n        elif arr[mid] < key:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 10, 40]\n    print(first_position(arr, 10))\n    print(first_position(arr, 4))\n    print(first_position(arr, 2))\n    print(first_position(arr, 3))\n    print(first_position(arr, 1))",
    "def find_first_position(array, element):\n    \"\"\"\n    Find the first position of an element in a sorted array.\n\n    Args:\n       array(array): input array\n       element(int): element to be searched\n    Returns:\n       int: Index of the first occurrence of the element in the array, -1 otherwise.\n    \"\"\"\n    if not array:\n        return -1\n\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            right = mid - 1\n        elif array[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\ndef main():\n    print(find_first_position([1, 2, 3, 4, 5], 1))\n    print(find_first_position([1, 2, 3, 4, 5], 10))\n    print(find_first_position([1, 2, 3, 4, 5], 5))\n\n\nif __name__ == '__main__':\n    main()",
    "def first_position(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if arr[left] != target:\n        return -1\n    return left\n\n\ndef first_position_binary(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if left >= len(arr) or arr[left] != target:\n        return -1\n    return left\n\n\ndef last_position(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if arr[left] != target:\n        return -1\n    return left\n\n\ndef last_position_binary(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if right < 0 or arr[right] != target:\n        return -1\n    return right\n\n\ndef last_position_recursive(arr, target, left, right):\n    if left > right:\n        return -1\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        result = last_position_recursive(arr, target, mid + 1, right)\n        if result != -1:\n            return result\n        else:\n            return mid\n    elif arr[mid] > target:\n        return last_position_rec",
    "def first_position(list, element):\n    first = 0\n    last = len(list)-1\n\n    while first<=last:\n        mid = (first+last)//2\n        if list[mid] == element:\n            pos = mid\n            while pos>=0 and list[pos] == element:\n                pos -= 1\n            return pos+1\n        elif list[mid]<element:\n            first = mid+1\n        else:\n            last = mid-1\n    return -1\n\nif __name__==\"__main__\":\n    list = [1,2,3,4,5,6,7,8,9,10]\n    element = 3\n    print(\"The first position of {} in {} is {}\".format(element, list, first_position(list, element)))",
    "def find_first_position(arr, el):\n    if len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            if mid == 0 or arr[mid - 1] != el:\n                return mid\n            high = mid - 1\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef main():\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 1))\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 3))\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 5))\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 6))\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 4))\n    print(find_first_position([1, 1, 2, 3, 3, 3, 3, 4, 5, 6], 10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef first_position(arr: List[int], n: int) -> int:\n    \"\"\"\n    Finds the first position of a number in a sorted array.\n    :param arr: List[int]\n    :param n: int\n    :return: int\n\n    >>> first_position([1,2,2,3,4,5], 2)\n    1\n    >>> first_position([1,2,2,3,4,5], 3)\n    3\n    >>> first_position([1,2,2,3,4,5], 5)\n    5\n    >>> first_position([1,2,2,3,4,5], 0)\n    -1\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_pos(arr, el):\n    \"\"\"\n    Time complexity: O(logN).\n    Space complexity: O(1).\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] < el:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    print(first_pos([1, 2, 4, 5, 7, 8], 7))\n    print(first_pos([1, 2, 4, 5, 7, 8], 8))\n    print(first_pos([1, 2, 4, 5, 7, 8], 5))\n    print(first_pos([1, 2, 4, 5, 7, 8], 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def first_position(arr, x):\n    first = 0\n    last = len(arr) - 1\n    result = -1\n    while first <= last:\n        mid = (first + last) // 2\n        if x > arr[mid]:\n            first = mid + 1\n        elif x < arr[mid]:\n            last = mid - 1\n        else:\n            result = mid\n            return result\n\n    return result\n\nprint(first_position([1, 2, 4, 4, 4, 4, 5, 5, 7, 8, 9, 10], 4))\nprint(first_position([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "def first_position(array, element):\n    \"\"\"\n    :param array: list - sorted list of integers\n    :param element: int - integer value to find the position of\n    :return: int - index of the first occurrence of `element` in `array`,\n             `-1` if the value does not exist in the list\n    \"\"\"\n    if element in array:\n        return array.index(element)\n    else:\n        return -1",
    "def find_first_position(arr, key):\n    \"\"\"\n    :param: arr - input array\n    :param: key - key value to be searched\n    return - index of the first occurrence of key in arr, if not found then return -1\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if key < arr[mid]:\n            high = mid - 1\n        elif key > arr[mid]:\n            low = mid + 1\n        else:\n            if mid > 0 and arr[mid - 1] != key:\n                return mid\n            else:\n                high = mid - 1\n\n    return -1\n\ndef find_first_position_recursive(arr, key, low, high):\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if key > arr[mid]:\n        return find_first_position_recursive(arr, key, mid + 1, high)\n    elif key < arr[mid]:\n        return find_first_position_recursive(arr, key, low, mid - 1)\n    else:\n        if mid > 0 and arr[mid - 1] != key:\n            return mid\n        else:\n            return find_first_position_recursive(arr, key, mid + 1, high)\n\n\n\narr = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6]\n\n#print(find_first_position(arr, 5))\n\nprint(find_first_position_recursive(arr, 5, 0, len(arr) - 1))",
    "def first_position(array, element):\n    \"\"\"\n    >>> first_position([1, 3, 5, 5, 5, 5, 6, 9], 5)\n    2\n    \"\"\"\n    # Find the position of the element in the array\n    position = array.index(element)\n    # Find the first occurrence of the element in the array\n    return array[:position].count(element)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_position(array, element):\n    # if element is not present in array, return -1\n    if element not in array:\n        return -1\n\n    # initialise the left and right pointers\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == element:\n            if (mid == 0 or array[mid - 1] != element) and (mid == len(array) - 1 or array[mid + 1] != element):\n                return mid\n            right = mid - 1\n        elif array[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\narray = [1, 3, 3, 5, 8, 8, 10]\nelement = 8\nprint(first_position(array, element))",
    "def first_position(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if array[mid] == element:\n            return mid\n        if array[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 6, 7]\n    print(first_position(array, 5))",
    "def first_pos(arr, elem):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == elem:\n            if mid == 0 or arr[mid-1] != elem:\n                return mid\n            else:\n                high = mid-1\n        elif arr[mid] > elem:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6]\n    print(first_pos(arr, 1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_position(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nprint(find_first_position([1, 2, 3, 3, 3, 3, 4, 5, 6], 3))",
    "def first_position(array, element):\n    \"\"\"\n    O(log(n))\n    \"\"\"\n    if not array:\n        return None\n    if array[0] == element:\n        return 0\n    if array[-1] == element:\n        return len(array) - 1\n\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        if element < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\nif __name__ == \"__main__\":\n    array = [1, 3, 3, 5, 7, 8, 9]\n    element = 3\n    print(first_position(array, element))",
    "def first_position(array, element):\n    if element not in array:\n        return -1\n    else:\n        for i in range(len(array)):\n            if array[i] == element:\n                return i\n\n\nprint(first_position([1, 2, 3, 4, 5], 3))\nprint(first_position([1, 2, 3, 4, 5], 6))",
    "from __future__ import annotations\n\n\ndef first_position(arr: list[int], num: int) -> int:\n    \"\"\"\n    >>> first_position([1,2,3,3,4,5,6], 3)\n    2\n    >>> first_position([1,2,3,3,4,5,6], 7)\n    -1\n    >>> first_position([1,2,3,3,4,5,6], 1)\n    0\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < num:\n            left = mid + 1\n\n        elif arr[mid] > num:\n            right = mid - 1\n\n        else:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_position(array, key):\n    for i in range(len(array)):\n        if array[i] == key:\n            return i\n\n\ndef first_position_binary_search(array, key):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == key:\n            return mid\n        elif array[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 2, 4, 5, 7, 7, 7, 9, 9, 10, 12, 15]\n    print(first_position(array, 7))\n    print(first_position_binary_search(array, 7))",
    "def first_position(arr, element):\n    # Assumes arr is sorted\n    # Assumes element is in arr\n    first_pos = 0\n    last_pos = len(arr) - 1\n\n    while first_pos <= last_pos:\n        mid_pos = (first_pos + last_pos) // 2\n        if arr[mid_pos] == element:\n            if mid_pos == 0 or arr[mid_pos - 1] != element:\n                return mid_pos\n            else:\n                last_pos = mid_pos - 1\n        elif arr[mid_pos] > element:\n            last_pos = mid_pos - 1\n        else:\n            first_pos = mid_pos + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10]\n    print(first_position(arr, 9))",
    "def find_position(arr, key):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[mid] < key:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\narr = [1, 3, 4, 4, 5, 6, 6, 6, 7, 8]\nprint(find_position(arr, 4))",
    "def find_position(array, element):\n    # 1. Find the position of the first element that is greater than the key\n    # 2. If the key is greater than all elements in the array, then return -1\n\n    if element < array[0]:\n        return -1\n\n    low = 0\n    high = len(array) - 1\n    found = False\n    while low <= high and not found:\n        mid = (low + high) // 2\n        if element < array[mid]:\n            high = mid - 1\n        elif element > array[mid]:\n            low = mid + 1\n        else:\n            found = True\n    return low\n\n\narray = [2, 4, 6, 8, 10]\nelement = 6\nprint(find_position(array, element))",
    "def first_position(arr, n, x):\n    l = 0\n    r = n - 1\n\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] < x:\n                return mid\n            else:\n                r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return -1\n\n\ndef main():\n    arr = list(map(int, input(\"Enter a sorted array of numbers: \").split()))\n    x = int(input(\"Enter the number to be found: \"))\n\n    result = first_position(arr, len(arr), x)\n    if result == -1:\n        print(f\"{x} is not present in the array.\")\n    else:\n        print(f\"{x} is present at position {result} in the array.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, num):\n    l = 0\n    h = len(arr) - 1\n    while l <= h:\n        mid = (l + h) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] < num:\n                return mid\n            h = mid - 1\n        elif arr[mid] < num:\n            l = mid + 1\n        else:\n            h = mid - 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(first_position(arr, 2))\n    print(first_position(arr, 3))\n    print(first_position(arr, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_position(arr, x):\n    first = -1\n    last = len(arr) - 1\n    while first < last:\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            first = mid\n            break\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    if first < len(arr) and arr[first] == x:\n        return first\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 3, 3, 4, 4, 4, 7, 8, 8]\n    x = 3\n    print(find_first_position(arr, x))",
    "def first_position(arr, key):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == key:\n            if mid == 0 or arr[mid - 1] < key:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] > key:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1",
    "def first_position(array, element):\n    first = 0\n    last = len(array) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            last = mid - 1\n        elif array[mid] < element:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr)-1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid-1] != x:\n                return mid\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    x = 2\n    print(first_position(arr, x))",
    "def firstPosition(arr, key):\n    # return binarySearch(arr, 0, len(arr) - 1, key)\n    return linearSearch(arr, 0, len(arr) - 1, key)\n\ndef binarySearch(arr, start, end, key):\n    if start > end:\n        return -1\n    mid = start + (end - start) // 2\n    if arr[mid] == key:\n        return mid\n    elif arr[mid] > key:\n        return binarySearch(arr, start, mid - 1, key)\n    else:\n        return binarySearch(arr, mid + 1, end, key)\n\ndef linearSearch(arr, start, end, key):\n    for i in range(start, end + 1):\n        if arr[i] == key:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [2, 5, 6, 8, 10, 11, 15, 17, 18]\n    key = 11\n    print(firstPosition(arr, key))",
    "def find_first_position(arr, key):\n    if arr[0] == key:\n        return 0\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if key == arr[mid]:\n            return mid\n        elif key < arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\nif __name__ == \"__main__\":\n    print(find_first_position([1,2,3,3,4,5,6], 3))\n    print(find_first_position([1,2,3,3,4,5,6], 7))",
    "def first_position(arr, x):\n    \"\"\"\n    :param arr: list - list of integers containing one target element\n    :param x: int - integer number\n    :return: int - a position of the first occurrence of x in arr, or -1 if x is not in arr\n    \"\"\"\n    if x in arr:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n    else:\n        return -1\n\nprint(first_position([1,2,2,3,3,4,5], 2))",
    "def first_position(arr, num):\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid-1] < num:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 6, 7]\n    print(first_position(arr, 4))\n    print(first_position(arr, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, element):\n    first = 0\n    last = len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == element:\n            if arr[mid - 1] < arr[mid]:\n                return mid\n            else:\n                last = mid - 1\n        elif arr[mid] < element:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\n\ndef main():\n    print(first_position([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n    print(first_position([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\n    print(first_position([1, 2, 2, 2, 2, 3, 4, 7, 7, 8], 7))\n    print(first_position([1, 2, 2, 2, 2, 3, 4, 5, 7, 8], 1))\n    print(first_position([1, 2, 2, 2, 2, 2, 3, 4, 5, 7], 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_pos(arr, key):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == key:\n            if mid == 0 or arr[mid - 1] < key:\n                return mid\n            high = mid - 1\n        elif arr[mid] > key:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef main():\n    print(first_pos([1, 3, 3, 5, 7, 8, 9, 9, 10], 5))\n    print(first_pos([1, 3, 3, 5, 7, 8, 9, 9, 10], 10))\n    print(first_pos([1, 3, 3, 5, 7, 8, 9, 9, 10], 7))\n    print(first_pos([1, 3, 3, 5, 7, 8, 9, 9, 10], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_position(array, element):\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
    "def first_position(arr, x):\n    \"\"\"\n    Finds the first position of an element in a sorted array.\n\n    Args:\n       arr(array): Input array to search\n       x(int): Element to search for\n    Returns:\n       int: Index of the first occurrence of x in arr, if not found returns -1\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nprint(first_position([1,2,2,2,3,4,5,6,7,8,8,8,10], 8))",
    "def first_position(array, element):\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            else:\n                end = mid - 1\n        elif array[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]\n    print(first_position(array, 3))",
    "def first_position(arr, x):\n    first = 0\n    last = len(arr) - 1\n    found = -1\n    while(first <= last and found == -1):\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            found = mid\n        else:\n            if x < arr[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\nprint(first_position([1,2,3,3,3,3,3,4,5,7,9], 3))",
    "def first_position(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if nums is None or len(nums) == 0:\n        return -1\n\n    start, end = 0, len(nums) - 1\n\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if nums[mid] < target:\n            start = mid\n        else:\n            end = mid\n\n    if nums[start] == target:\n        return start\n    elif nums[end] == target:\n        return end\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 3))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 5))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 4))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 7))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 1))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 2))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 6))\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 8))",
    "def first_position(arr, element):\n    first = 0\n    last = len(arr) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n\n        if arr[mid] == element:\n            found = True\n        elif arr[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n\n    return first if found else -1\n\n\narr = [1,2,3,4,5,6,7,8,9]\nprint(first_position(arr, 6))\nprint(first_position(arr, 11))",
    "def first_position(arr, ele):\n    low = 0\n    high = len(arr) - 1\n    pos = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == ele:\n            pos = mid\n            high = mid - 1\n        elif arr[mid] < ele:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return pos\n\n\ndef main():\n    arr = [1, 2, 2, 2, 3, 4, 7, 8, 8]\n    ele = 2\n    result = first_position(arr, ele)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, element):\n    \"\"\"\n    Finds the first position of an element in a sorted array\n\n    Args:\n       user_input(int): Array and element to be searched\n    Returns:\n       int: Index of the element in the array if present,-1 otherwise\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] != element:\n                return mid\n            high = mid - 1\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    element = test_case[1]\n    solution = test_case[2]\n    output = first_position(arr, element)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 3, 5, 5, 5, 5, 67, 123]\nelement = 5\nsolution = 2\ntest_case = [arr, element, solution]\ntest_function(test_case)\n\narr = [1, 3, 5, 5, 5, 5, 67, 123]\nelement = 6\nsolution = -1\ntest_case = [arr, element, solution]\ntest_function(test_case)\n\narr = [1, 3, 5, 5, 5, 5, 67, 123]\nelement = 3\nsolution = 1\ntest_case = [arr, element, solution]\ntest_function(test_case)",
    "def find_first_position(array, element):\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if array[mid] == element:\n            high = mid - 1\n        elif array[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n\nif __name__ == '__main__':\n    array = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(find_first_position(array, 2))\n    print(find_first_position(array, 3))\n    print(find_first_position(array, 5))\n    print(find_first_position(array, 8))",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            high = mid - 1\n\n        elif arr[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    if low > len(arr) - 1 or arr[low] != x:\n        return -1\n\n    return low\n\n\nif __name__ == \"__main__\":\n    print(first_position([1, 2, 3, 3, 3, 3, 4, 5], 3))\n    print(first_position([1, 2, 3, 4, 5], 1))\n    print(first_position([1, 2, 3, 4, 5], 6))",
    "def first_position(arr, element):\n    \"\"\"\n    >>> first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 3)\n    2\n    >>> first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 5)\n    7\n    >>> first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 7)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            high = mid - 1\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\ndef first_position_recursive(arr, element, low, high):\n    if low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            high = mid - 1\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n        return first_position_recursive(arr, element, low, high)\n    return low\n\n\ndef first_position_binary_search(arr, element):\n    \"\"\"\n    >>> first_position_binary_search([1, 2, 2, 3, 3, 3, 4, 5, 6], 3)\n    2\n    >>> first_position_binary_search([1, 2, 2, 3, 3, 3, 4, 5, 6], 5)\n    7\n    >>> first_position_binary_search([1, 2, 2, 3, 3, 3, 4, 5, 6], 7)\n    \"\"\"\n    return first_position_recursive(arr, element, 0, len(arr) - 1)\n\n\nif __name__ == \"__main__",
    "def first_position(arr, val):\n    first = -1\n    for index in range(len(arr)):\n        if arr[index] == val:\n            first = index\n            break\n    return first\n\nif __name__ == \"__main__\":\n    test_list = [1, 3, 5, 5, 5, 6, 8, 9, 10, 10]\n    print(first_position(test_list, 10))",
    "def first_position(l, elem):\n    low = 0\n    high = len(l) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if l[mid] == elem:\n            if mid == 0 or l[mid-1] < elem:\n                return mid\n            else:\n                high = mid - 1\n        elif l[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nprint(first_position([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))",
    "def first_position(arr, key):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 10]\n    key = 5\n    print(arr)\n    print(first_position(arr, key))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, element):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            if mid == 0 or arr[mid-1] != element:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(first_position(arr, 8))\n    print(first_position(arr, 1))\n    print(first_position(arr, 2))\n    print(first_position(arr, 3))\n    print(first_position(arr, 4))\n    print(first_position(arr, 5))\n    print(first_position(arr, 6))\n    print(first_position(arr, 7))\n    print(first_position(arr, 8))",
    "def first_position(arr, element):\n    if not arr or arr[0] != element:\n        return -1\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] != element:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9]\n    print(first_position(arr, 1))\n    print(first_position(arr, 2))\n    print(first_position(arr, 3))\n    print(first_position(arr, 4))\n    print(first_position(arr, 5))\n    print(first_position(arr, 6))\n    print(first_position(arr, 7))\n    print(first_position(arr, 8))\n    print(first_position(arr, 9))\n    print(first_position(arr, 10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_occurrence(arr, x):\n    \"\"\"\n    :param: arr - input array\n    :param: x - int number\n    return - int, position of first occurrence\n    \"\"\"\n    if not arr:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\ndef test_function(test_case):\n    arr = test_case[0]\n    x = test_case[1]\n    solution = test_case[2]\n    output = find_first_occurrence(arr, x)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1,3,4,4,4,5,7,9]\nx = 4\nsolution = 2\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [1,2,3,4,5,6,7,8,9]\nx = 5\nsolution = 4\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [1,2,3,4,5,6,7,8,9]\nx = 0\nsolution = -1\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [1,3,3,3,3,3,3,3,3]\nx = 3\nsolution = 1\ntest_case = [arr, x, solution]\ntest_function(test_case)",
    "def find_position(list, element):\n    first = 0\n    last = len(list) - 1\n\n    while first <= last:\n        midpoint = (first + last) // 2\n        if list[midpoint] == element:\n            if midpoint > 0 and list[midpoint-1] < element:\n                return midpoint\n            else:\n                first = midpoint + 1\n        elif list[midpoint] > element:\n            last = midpoint - 1\n        else:\n            first = midpoint + 1\n\n    return -1\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 10]\n    print(\"Found position of 3 in list: %d\" % find_position(list, 3))\n    print(\"Found position of 7 in list: %d\" % find_position(list, 7))\n    print(\"Found position of 0 in list: %d\" % find_position(list, 0))",
    "def first_position(array, element):\n    first = 0\n    last = len(array) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid-1] != element:\n                return mid\n            last = mid - 1\n        elif array[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    array = [1, 3, 5, 5, 5, 5, 8]\n    print(first_position(array, 5))\n    print(first_position(array, 10))\n    print(first_position([], 10))",
    "def first_position(arr, x):\n    first, last = 0, len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] < x:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\n\nprint(first_position([1, 1, 2, 2, 2, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5], 3))",
    "def first_position(arr, num):\n    if len(arr) == 0:\n        return 0\n    if arr[0] == num:\n        return 0\n\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if num > arr[mid]:\n            start = mid + 1\n        elif num < arr[mid]:\n            end = mid - 1\n        else:\n            if mid == 0 or num > arr[mid-1]:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n\n\nprint(first_position([], 5))\nprint(first_position([1,2,3,4,5,6,7], 4))\nprint(first_position([1,2,3,4,5,5,5,5,5,5,5,6,7], 5))\nprint(first_position([1,2,3,4,5,5,5,5,5,5,5,6,7], 6))\nprint(first_position([1,2,3,4,5,5,5,5,5,5,5,6,7], 7))\nprint(first_position([1,2,3,4,5,5,5,5,5,5,5,6,7], 8))",
    "def first_position(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] != element:\n                return mid\n            high = mid - 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 10, 40]\n    print(first_position(arr, 10))",
    "def first_position(arr, element):\n    \"\"\"\n    Finds the first position of an element in a sorted array.\n\n    Args:\n       user_input(int): Array whose elements are to be found\n       element(int): Element to be searched in the array\n    Returns:\n       int: Index of the element in the array or -1\n    \"\"\"\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    element = test_case[1]\n    solution = test_case[2]\n    output = first_position(arr, element)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,3,4,4,5,5], 5, 4])\ntest_function([[1,2,3,3,4,5], 3, 2])\ntest_function([[1,2,3,3,4,5], 1, 0])\ntest_function([[1,2,3,3,4,5], 6, -1])\ntest_function([[1,2,3,3,4,5], 0, -1])\ntest_function([[1,2,3,3,4,5], -1, -1])\ntest_function([[], 5, -1])",
    "def find_first_position(array, element):\n    first = 0\n    last = len(array) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            else:\n                last = mid - 1\n        elif array[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return -1\n\n\ndef main():\n    arr_input = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    print(find_first_position(arr_input, 3))\n    print(find_first_position(arr_input, 4))\n    print(find_first_position(arr_input, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            end = mid - 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nprint(first_position([1, 2, 3, 4, 5, 5, 5, 6], 5))",
    "def first_pos(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            if mid == 0 or arr[mid-1] != element:\n                return mid\n            high = mid - 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nprint(first_pos([1, 2, 3, 4, 5, 6, 7, 8], 4))",
    "def first_position(array, element):\n    \"\"\"\n    >>> first_position([1, 2, 3, 4, 5], 3)\n    2\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == element:\n            return i\n    return -1\n\n\ndef first_position_2(array, element):\n    \"\"\"\n    >>> first_position_2([1, 2, 3, 4, 5], 3)\n    2\n    \"\"\"\n    left, right = 0, len(array) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            right = mid\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if array[left] == element else -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_position(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            high = mid - 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef first_position_bisect(arr, target):\n    return arr.index(target) if target in arr else -1\n\ndef first_position_bisect_right(arr, target):\n    return arr.bisect_right(target) - 1 if target in arr else -1\n\ndef first_position_bisect_left(arr, target):\n    return arr.bisect_left(target) if target in arr else -1\n\n\n\nif __name__ == \"__main__\":\n    from timeit import timeit\n    from random import randint\n\n    setup = \"\"\"\nfrom __main__ import first_position, first_position_bisect, first_position_bisect_right, first_position_bisect_left, arr, target\n    \"\"\"\n\n    print(\"Time of first_position: \", timeit(\n        stmt=\"first_position(arr, target)\", setup=setup, number=10000))\n    print(\"Time of first_position_bisect: \", timeit(\n        stmt=\"first_position_bisect(arr, target)\", setup=setup, number=10000))\n    print(\"Time of first_position_bisect_right: \", timeit(\n        stmt=\"first_position_bisect_right(arr, target)\", setup=setup, number=10000))\n    print(\"Time of first_position_bisect_left: \", timeit(\n        stmt=\"first_position_bisect_left(arr, target)\", setup=setup, number=10000))\n\n    arr = [randint(0, 100) for _ in range(10000)]",
    "def first_position(list1, value):\n    for i in range(0, len(list1)):\n        if list1[i] == value:\n            return i\n    return -1\n\nlist1 = [1, 2, 4, 4, 5, 6, 7, 12, 13]\nprint(first_position(list1, 4))\nprint(first_position(list1, 14))",
    "def first_position(arr, x):\n    \"\"\"\n    :param arr: list - sorted list of integers\n    :param x: int - integer value\n    :return: int - index of the first position of x in arr\n    \"\"\"\n    first_position = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            first_position = i\n            break\n    return first_position",
    "def first_position(arr, element):\n    if element not in arr:\n        return -1\n    else:\n        return arr.index(element)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(first_position(arr, 6))\nprint(first_position(arr, 4))\nprint(first_position(arr, 11))",
    "def first_position(lst, element):\n    first_pos = None\n    for i in range(len(lst)):\n        if lst[i] == element:\n            first_pos = i\n            break\n    return first_pos\n\n\ndef first_position_binary(lst, element):\n    first = 0\n    last = len(lst)-1\n    while first <= last:\n        mid = (first+last)//2\n        if lst[mid] == element:\n            return mid\n        elif lst[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return -1\n\n\ndef main():\n    lst = [1, 2, 2, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 10]\n    print(first_position(lst, 8))\n    print(first_position_binary(lst, 8))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            high = mid - 1\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 3, 3, 5, 7, 9, 9, 9, 9, 10, 10, 12, 13, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    print(\"First position of 28:\", first_position(array, 28))\n    print(\"First position of 29:\", first_position(array, 29))\n    print(\"First position of 32:\", first_position(array, 32))",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef first_position_binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    x = 5\n    print(first_position_binary_search(arr, x))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_element_position(arr, element):\n    \"\"\"\n    find the first position of an element in a sorted array\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 2)\n    1\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 5)\n    4\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 7)\n    -1\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 0)\n    -1\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 1)\n    0\n\n    >>> find_element_position([1,2,2,3,4,5,5,6], 6)\n    7\n\n    \"\"\"\n    return find_element_position_recursive(arr, element, 0)\n\n\ndef find_element_position_recursive(arr, element, index):\n    if index == len(arr):\n        return -1\n    if arr[index] == element:\n        return index\n    return find_element_position_recursive(arr, element, index + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def first_position(l, element):\n    \"\"\"\n    >>> first_position([1, 2, 3, 4, 5, 5], 5)\n    4\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return 0 if l[0] == element else None\n    mid = len(l) // 2\n    if l[mid] == element:\n        left = first_position(l[:mid], element)\n        return left if left is not None else mid\n    if l[mid] > element:\n        return first_position(l[:mid], element)\n    if l[mid] < element:\n        return first_position(l[mid:], element) + mid\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\ndef first_occurrence_in_sorted_array(array: List[int], key: int) -> int:\n    \"\"\"\n    This function will find the first occurrence of a key in a sorted array.\n    If not found, it will return -1.\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == key:\n            return mid\n        elif array[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    print(first_occurrence_in_sorted_array(arr, 3))",
    "def find_first_position(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if left < len(array) and array[left] == target:\n        return left\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7]\n    target = 3\n    print(find_first_position(array, target))",
    "def first_position(array, key):\n    \"\"\"\n    :param array: list - sorted input array of ints\n    :param key: int - integer value to find the position of\n    :return: int, -1 if the key is not found\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == key:\n            return i\n    return -1",
    "def find_first_position(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < element:\n            low = mid + 1\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1] != element:\n                return mid\n            else:\n                high = mid - 1\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 8, 8, 8, 8, 9]\n    print(find_first_position(arr, 8))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_pos(arr, ele):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == ele:\n            if mid == 0 or arr[mid-1] != ele:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] > ele:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "def first_position(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            if (mid == 0 or arr[mid - 1] != element):\n                return mid\n            high = mid - 1\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 4, 5, 5, 7, 9, 10, 10, 12, 13, 13, 14, 15]\n    print(first_position(arr, 13))\n    print(first_position(arr, 10))\n    print(first_position(arr, 16))",
    "from typing import List\n\n\n# Time complexity O(logn)\ndef first_position(arr: List[int], n: int) -> int:\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == len(arr) - 1 and arr[mid] != n) or (\n            mid < len(arr) - 1 and arr[mid] == n and arr[mid + 1] != n\n        ):\n            return mid + 1\n        elif arr[mid] <= n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_position([1, 3, 3, 5, 7], 3))\n    print(first_position([1, 3, 3, 5, 7], 8))",
    "def first_position(arr, element):\n    first = 0\n    last = len(arr) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if arr[mid] == element:\n            found = True\n        elif arr[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return first\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 5, 6, 7, 8, 9]\n    print(first_position(arr, 5))",
    "def first_position(arr, key):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == key:\n            if mid == 0 or arr[mid - 1] < key:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] < key:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\ndef main():\n    print(first_position([1, 2, 2, 2, 3, 4, 7, 8, 8], 2))\n    print(first_position([1, 2, 2, 2, 3, 4, 7, 8, 8], 3))\n    print(first_position([1, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n    print(first_position([1, 2, 2, 2, 3, 4, 7, 8, 8], 1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_position(arr, element):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            if mid == 0 or arr[mid-1] < element:\n                return mid\n            right = mid - 1\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nprint(find_first_position([1, 3, 6, 7, 9, 10], 7))",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1] < x:\n                return mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(first_position(arr, 10))\n    print(first_position(arr, 1))\n    print(first_position(arr, 6))\n    print(first_position(arr, 11))",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    x = 5\n    result = first_position(arr, x)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(arr, num):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if num < arr[mid]:\n            high = mid - 1\n        elif num > arr[mid]:\n            low = mid + 1\n        else:\n            if mid == 0 or num > arr[mid - 1]:\n                return mid\n            else:\n                high = mid - 1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(first_position(arr, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_first_position(array, key):\n    if array[0] == key:\n        return 0\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] < key:\n            low = mid + 1\n        elif array[mid] > key:\n            high = mid - 1\n        else:\n            if mid == 0 or array[mid - 1] != key:\n                return mid\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    array = [0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 8, 9]\n    key = 4\n    print(find_first_position(array, key))",
    "def first_position(arr, key):\n\tif len(arr) == 0:\n\t\treturn -1\n\telse:\n\t\tfirst = 0\n\t\tlast = len(arr) - 1\n\t\twhile first <= last:\n\t\t\tmid = (first + last) // 2\n\t\t\tif arr[mid] == key:\n\t\t\t\tif mid == 0 or arr[mid - 1] < key:\n\t\t\t\t\treturn mid\n\t\t\t\tlast = mid - 1\n\t\t\telif arr[mid] < key:\n\t\t\t\tfirst = mid + 1\n\t\t\telse:\n\t\t\t\tlast = mid - 1\n\t\treturn -1\n\nprint(first_position([1, 3, 3, 5, 8, 10], 3))\nprint(first_position([1, 3, 3, 5, 8, 10], 10))\nprint(first_position([1, 3, 3, 5, 8, 10], 12))\n\n\"\"\"\nFirst position of an element in a sorted array\n\nComplexity -> O(log n)\n\"\"\"",
    "def first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] < x:\n                return mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nprint(first_position([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7], 6))",
    "def first_position(arr, element):\n    first_index = -1\n    last_index = len(arr) - 1\n\n    while first_index < last_index:\n        mid = (first_index + last_index) // 2\n        if arr[mid] == element:\n            first_index = mid\n        elif arr[mid] < element:\n            first_index = mid + 1\n        else:\n            last_index = mid - 1\n\n    return first_index\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(first_position(arr, 3))",
    "def first_position(arr, x):\n    l, h = 0, len(arr) - 1\n    while l <= h:\n        m = (l + h) // 2\n        if x > arr[m]:\n            l = m + 1\n        elif x < arr[m]:\n            h = m - 1\n        else:\n            if m == 0 or arr[m-1] != x:\n                return m\n            else:\n                h = m - 1\n    return -1",
    "def find_first_position(arr, element):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] != element:\n                return mid\n            right = mid - 1\n        elif arr[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1",
    "def first_position(arr, x):\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if x == arr[mid]:\n            result = mid\n            end = mid - 1\n\n        elif x < arr[mid]:\n            end = mid - 1\n\n        else:\n            start = mid + 1\n\n    return result\n\n\ndef main():\n    print(first_position([1, 1, 2, 3, 3, 3, 4, 5, 6], 1))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 2))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 3))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 4))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 5))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 6))\n    print(first_position([1, 2, 2, 3, 3, 3, 4, 5, 6], 7))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef first_position(array: List[int], element: int) -> int:\n    \"\"\"\n    Return the index of the first position of the element in the array.\n    If the element is not found, return -1.\n    \"\"\"\n    if not array:\n        return -1\n\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if array[mid] == element:\n            if mid == 0 or array[mid - 1] != element:\n                return mid\n            high = mid - 1\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1",
    "def find_first_position(arr, x):\n    \"\"\"\n    :param: arr - input array\n    :param: x - int value to be searched in arr\n    return: int indicating the position of first occurence of x in arr\n    TODO: complete this function and return the first position of x in the array\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            result = mid\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    x = test_case[1]\n    solution = test_case[2]\n    output = find_first_position(arr, x)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test 1 - Unsorted array\narr = [12, 34, 11, 1, 0]\nx = 11\nsolution = 2\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\n# Test 2 - Duplicates\narr = [1, 8, 4, 5, 5, 5, 5, 5]\nx = 5\nsolution = 2\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\n# Test 3 - No such element\narr = [1, 8, 4, 5, 5, 5, 5, 5]\nx = 9\nsolution = -1\ntest_case = [arr, x, solution]\ntest_function(test_case)",
    "def first_position(arr, element):\n    if arr[0] == element:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            high = mid - 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low == len(arr):\n        return -1\n    else:\n        return low\n\n\narr = [1, 3, 3, 5, 6, 9, 10]\nprint(first_position(arr, 1))\nprint(first_position(arr, 3))\nprint(first_position(arr, 5))\nprint(first_position(arr, 6))\nprint(first_position(arr, 9))\nprint(first_position(arr, 10))\nprint(first_position(arr, 11))",
    "from array import array\n\n\ndef first_position(arr, n):\n    \"\"\"\n    Return the first position of the element in a sorted array.\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return None\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == n:\n            if mid == 0 or arr[mid - 1] < n:\n                return mid\n            end = mid - 1\n        elif arr[mid] > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_position([1, 2, 4, 4, 5, 5, 7, 9, 10], 4))\n    print(first_position([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(first_position([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\n    print(first_position([1, 2, 3, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(first_position([1, 2, 3, 3, 4, 5, 6, 7, 8, 9], 0))",
    "def find_first_position(arr, x):\n    if arr is None or len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low >= len(arr) or arr[low] != x:\n        return -1\n    return low\n\nprint(find_first_position([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(find_first_position([1, 2, 2, 2, 2, 3, 4, 5, 7, 8], 8))\nprint(find_first_position([1, 2, 2, 2, 2, 3, 4, 5, 7, 8], 1))\nprint(find_first_position([1, 2, 2, 2, 2, 3, 4, 5, 7, 8], 10))",
    "def first_position(arr, el):\n    if el < arr[0]:\n        return -1\n    if el > arr[-1]:\n        return len(arr)\n\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == el:\n            if mid == 0 or arr[mid - 1] < el:\n                return mid\n            right = mid - 1\n        elif arr[mid] < el:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_position([1, 2, 2, 4, 5, 5, 6, 8, 9], 5))",
    "def find_first_position(l, x):\n    low = 0\n    high = len(l) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if l[mid] == x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return low\n\n\ndef main():\n    l = [2, 3, 4, 10, 40]\n    print(find_first_position(l, 10))\n    print(find_first_position(l, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def first_position(array, number):\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == number:\n            if mid == 0 or array[mid - 1] != number:\n                return mid\n            high = mid - 1\n        elif array[mid] < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
    "from typing import List\n\n\ndef first_position(arr: List[int], elem: int) -> int:\n    \"\"\"\n    Return the first position of an element in a sorted array\n    :param arr: list of integers\n    :param elem: element to search for\n    :return: first position of the element in the list\n    >>> first_position([1, 2, 3, 3, 3, 4, 5], 3)\n    2\n    >>> first_position([1, 2, 3, 3, 3, 4, 5], 2)\n    1\n    >>> first_position([1, 2, 3, 3, 3, 4, 5], 5)\n    6\n    >>> first_position([1, 2, 3, 3, 3, 4, 5], 6)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            if mid == 0 or arr[mid - 1] != elem:\n                return mid\n            high = mid - 1\n        elif arr[mid] > elem:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}