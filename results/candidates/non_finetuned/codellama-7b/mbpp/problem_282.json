{
  "problem": {
    "task_id": "MBPP/293",
    "prompt": "Write a function to find the third side of a right angled triangle.",
    "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
    "test_list": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ],
    "challenge_test_list": [],
    "problem_id": 282
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef find_third_side(first, second):\n    return math.sqrt(first**2 + second**2)\n\ndef test_find_third_side():\n    assert find_third_side(3, 4) == 5\n    assert find_third_side(6, 8) == 10",
    "def find_third_side(opposite, adjacent, hypotenuse):\n    return (hypotenuse ** 2 - opposite ** 2 - adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    opposite = float(input(\"Enter opposite side: \"))\n    adjacent = float(input(\"Enter adjacent side: \"))\n    hypotenuse = float(input(\"Enter hypotenuse side: \"))\n    print(find_third_side(opposite, adjacent, hypotenuse))",
    "def right_angle_triangle(a, b, c):\n    return [x for x in (a, b, c) if x**2 == a**2 + b**2]\n\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))",
    "def hypotenuse(opposite, adjacent):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5",
    "def hypotenuse(a, b):\n    return (a**2 + b**2)**0.5\n\n\ndef test_hypotenuse():\n    \"\"\"\"Run a few simple tests to make sure it works.\"\"\"\n    assert hypotenuse(3, 4) == 5\n    assert hypotenuse(5, 12) == 13\n    assert hypotenuse(1, 1) == 1.4142135623730951",
    "def pythagorean_theorem(opposite, adjacent):\n    \"\"\"\n    >>> pythagorean_theorem(3, 4)\n    5\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\ndef right_angled_triangle_third_side(opposite, adjacent):\n    \"\"\"\n    >>> right_angled_triangle_third_side(3, 4)\n    5\n    \"\"\"\n    return pythagorean_theorem(opposite, adjacent)",
    "def right_angle_triangle(b, a):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef test_case(b, a, solution, test_func):\n\n    output = test_func(b, a)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ndef main():\n    print(\"Test 1\")\n    test_case(3, 4, 5, right_angle_triangle)\n\n    print(\"Test 2\")\n    test_case(1, 1, 2, right_angle_triangle)\n\n\nif __name__ == '__main__':\n    main()",
    "def find_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    >>> find_side(3, 4, 5)\n    5.0\n    \"\"\"\n    return (opposite**2 + adjacent**2)**0.5\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def right_angled_triangle(opposite, adjacent, hypotenuse):\n    \"\"\"\n    Find the third side of a right angled triangle.\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5",
    "def find_third_side(first_side, second_side):\n    return round((first_side ** 2 + second_side ** 2) ** 0.5, 2)\n\n# \ud83d\udea8 Don't change the code below \ud83d\udc47\ntest_side_1 = int(input(\"First side: \"))\ntest_side_2 = int(input(\"Second side: \"))\n# \ud83d\udea8 Don't change the code above \ud83d\udc46\n\n#Write your code below this line \ud83d\udc47\n\nprint(find_third_side(test_side_1, test_side_2))",
    "def right_angle_triangle_side(opposite, adjacent):\n    \"\"\"\n    This function takes in two arguments and calculates the hypotenuse.\n    :param opposite: int - This is the opposite side of the triangle.\n    :param adjacent: int - This is the adjacent side of the triangle.\n    :return: int - This returns the hypotenuse.\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\nprint(right_angle_triangle_side(3, 4))",
    "def right_angled_triangle_side(a, b):\n    \"\"\"\n    >>> right_angled_triangle_side(3, 4)\n    5\n    >>> right_angled_triangle_side(6, 8)\n    10\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def pythagorean_theorem(a, b):\n    \"\"\"\n    >>> pythagorean_theorem(3, 4)\n    5.0\n    >>> pythagorean_theorem(1, 1)\n    2.0\n    >>> pythagorean_theorem(5, 12)\n    13.0\n    >>> pythagorean_theorem(0, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def third_side(opposite, adjacent):\n    return (opposite**2 + adjacent**2)**0.5",
    "def hypotenuse(opposite, adjacent):\n    \"\"\"\n    Calculate the hypotenuse of a right angled triangle.\n\n    :param opposite: float\n    :param adjacent: float\n    :return: float\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nprint(hypotenuse(3, 4))\nprint(hypotenuse(4, 3))",
    "def third_side(opposite, adjacent, hypotenuse):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nprint(third_side(3, 4, 5))",
    "import math\n\ndef third_side(opposite, adjacent):\n    hypotenuse = math.sqrt(math.pow(opposite, 2) + math.pow(adjacent, 2))\n    return hypotenuse\n\n\nif __name__ == '__main__':\n    assert third_side(3, 4) == 5\n    assert third_side(4, 3) == 5",
    "from math import sqrt\n\n\ndef pythagorean_theorem(a, b):\n    \"\"\"\n    >>> pythagorean_theorem(3,4)\n    5.0\n    \"\"\"\n    return sqrt(a**2 + b**2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def pythagoras(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef solve(a, b):\n    return pythagoras(a, b)\n\n\nprint(solve(5, 12))",
    "from math import sqrt\n\ndef right_angle(side1, side2):\n    return sqrt(side1**2 + side2**2)\n\nif __name__ == '__main__':\n    side1, side2 = 3, 4\n    print(f'The third side of a right angled triangle with side1: {side1} and side2: {side2} is {right_angle(side1, side2)}')",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    This function takes the two sides of a right angled triangle as arguments and returns the third side.\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nprint(find_third_side(3, 4))",
    "import math\n\ndef find_third_side(first_side, second_side):\n    return math.sqrt(first_side**2 + second_side**2)\n\nprint(find_third_side(3, 4))",
    "def right_angled_triangle(side1, side2):\n    return (side1**2 + side2**2)**0.5\n\n\nif __name__ == '__main__':\n    print(right_angled_triangle(5, 3))",
    "from math import sqrt\n\ndef hypotenuse(x, y):\n    return sqrt(x**2 + y**2)\n\nprint(hypotenuse(3, 4))",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    :param: opposite - opposite side length of a right angled triangle\n    :param: adjacent - adjacent side length of a right angled triangle\n\n    Return the length of the hypotenuse\n    \"\"\"\n    return ((opposite ** 2) + (adjacent ** 2)) ** 0.5",
    "def right_angled_triangle_side(opposite, adjacent, hypotenuse):\n    return (opposite**2 + adjacent**2)**0.5\n\ndef test_case(opposite, adjacent, hypotenuse, solution, test_func):\n\n    output = test_func(opposite, adjacent, hypotenuse)\n\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\nopposite = 3\nadjacent = 4\nhypotenuse = 5\nsolution = 4.0\n\ntest_case(opposite, adjacent, hypotenuse, solution, right_angled_triangle_side)",
    "def right_angled_triangle(a: float, b: float) -> float:\n    \"\"\"\n    >>> right_angled_triangle(3, 4)\n    5.0\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def third_side(a, b):\n    return ((a ** 2 + b ** 2) ** 0.5)\n\nif __name__ == '__main__':\n    print(third_side(3, 4))",
    "def right_angle_triangle_side(a, b):\n    \"\"\"Returns the third side of a right angled triangle.\n\n    Parameters\n    ----------\n    a: int\n        The first side of the triangle\n    b: int\n        The second side of the triangle\n\n    Returns\n    -------\n    c: int\n        The third side of the triangle\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5",
    "import math\n\n\ndef third_side(opposite, adjacent, hypotenuse):\n    return math.sqrt(opposite**2 + adjacent**2)\n\n\ndef test_third_side():\n    assert third_side(3, 4, 5) == 5\n\n\nif __name__ == \"__main__\":\n    print(third_side(3, 4, 5))",
    "import math\nfrom typing import Tuple\n\n\ndef find_third_side(a: float, b: float, c: float) -> Tuple[float, bool]:\n    \"\"\"\n    >>> find_third_side(3, 4, 5)\n    (5.0, True)\n    >>> find_third_side(4, 3, 5)\n    (5.0, True)\n    >>> find_third_side(3, 5, 4)\n    (5.0, True)\n    >>> find_third_side(3, 4, 6)\n    (6.0, True)\n    >>> find_third_side(3, 4, 3)\n    (3.0, False)\n    \"\"\"\n    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2):\n        return c, True\n    elif math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2):\n        return b, True\n    elif math.pow(b, 2) + math.pow(c, 2) == math.pow(a, 2):\n        return a, True\n    else:\n        return c, False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def hypotenuse(opposite: float, adjacent: float) -> float:\n    \"\"\"\n    >>> hypotenuse(3, 4)\n    5.0\n    >>> hypotenuse(4, 3)\n    5.0\n    >>> hypotenuse(5, 12)\n    13.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def right_angled_triangle(side1, side2):\n    \"\"\"\n    >>> right_angled_triangle(5, 4)\n    3\n    >>> right_angled_triangle(2, 3)\n    4\n    >>> right_angled_triangle(2, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Right angled triangle cannot be formed with the given values.\n    >>> right_angled_triangle(1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Right angled triangle cannot be formed with the given values.\n    >>> right_angled_triangle(1, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Right angled triangle cannot be formed with the given values.\n    \"\"\"\n    if side1 <= 0 or side2 <= 0:\n        raise ValueError(\"Right angled triangle cannot be formed with the given values.\")\n\n    if side1 ** 2 + side2 ** 2 == 0:\n        raise ValueError(\"Right angled triangle cannot be formed with the given values.\")\n\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def pythagoras(a, b):\n    return (a**2 + b**2)**0.5\n\n\ndef third_side(a, b):\n    return pythagoras(a, b)",
    "def find_third_side(side1, side2, angle):\n    return round((side1 ** 2 + side2 ** 2 - 2 * side1 * side2 * math.cos(math.radians(angle))) ** 0.5, 3)",
    "def find_third_side(opposite: float, adjacent: float, hypotenuse: float) -> float:\n    \"\"\"Returns the third side of a right angled triangle.\n\n    >>> find_third_side(3, 4, 5)\n    5.0\n    >>> find_third_side(3, 4, 10)\n    8.0\n    >>> find_third_side(3, 4, 6)\n    7.0\n    >>> find_third_side(3, 4, 1)\n    2.0\n    >>> find_third_side(3, 4, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: hypotenuse should be greater than adjacent and opposite\n    >>> find_third_side(3, 4, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: hypotenuse should be greater than adjacent and opposite\n    >>> find_third_side(3, 4, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: hypotenuse should be greater than adjacent and opposite\n    >>> find_third_side(3, 0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: adjacent should be greater than 0\n    >>> find_third_side(0, 3, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: adjacent should be greater than 0\n    >>> find_third_side(3, 4, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: hypotenuse should be greater than adjacent and opposite\n    >>> find_third_side(3, 4, -10)\n    Traceback (most recent call last):\n        ...\n    ValueError: hypotenuse should be greater than adjacent and opposite\n    \"\"\"\n    if hypotenuse <= adjacent or hypotenuse <= opposite:\n        raise ValueError(\"hypotenuse should be greater than adjacent and opposite\")\n    if adjacent <= 0 or opposite <= 0:\n        raise ValueError(\"adjacent and opposite should be greater than 0\")\n    return hypotenuse ** 2 -",
    "def right_angled_triangle(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == '__main__':\n    print(right_angled_triangle(5, 12))",
    "def hypotenuse(opposite, adjacent):\n    \"\"\"\n    >>> hypotenuse(3, 4)\n    5\n    >>> hypotenuse(5, 12)\n    13\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5",
    "def right_angled_triangle(a, b):\n    c = (a**2 + b**2)**0.5\n    return c",
    "def pythagorean_triplet(ab, c):\n    \"\"\"\n    Finds the third side of a right angled triangle.\n\n    >>> pythagorean_triplet(3, 4)\n    5\n    >>> pythagorean_triplet(5, 12)\n    13\n    >>> pythagorean_triplet(6, 8)\n    10\n    \"\"\"\n    return (ab**2 + c**2)**0.5",
    "def pythagorean_theorem(a, b):\n    c = (a ** 2 + b ** 2) ** 0.5\n    return c\n\n\nprint(pythagorean_theorem(3, 4))\nprint(pythagorean_theorem(6, 8))",
    "def right_angled_triangle(a, b):\n    return (a ** 2 + b ** 2) ** 0.5",
    "def right_angle_triangle_third_side(a, b):\n    \"\"\"\n    Return the third side of a right angled triangle.\n\n    :param a: first side of a right angled triangle.\n    :param b: second side of a right angled triangle.\n    :return: the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)",
    "def right_angled_triangle(opposite, adjacent):\n    return ((opposite ** 2) + (adjacent ** 2)) ** 0.5\n\n\nprint(right_angled_triangle(3, 4))",
    "def hypotenuse(opposite, adjacent):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\ndef test_hypotenuse():\n    assert hypotenuse(5, 12) == 13\n    assert hypotenuse(12, 5) == 13\n\n\nif __name__ == \"__main__\":\n    print(hypotenuse(5, 12))",
    "def right_angle_triangle(a, b):\n    \"\"\"\n    >>> right_angle_triangle(3, 4)\n    5\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def third_side(opposite, adjacent):\n    return ((opposite**2)+(adjacent**2))**0.5\n\n\nprint(third_side(3, 4))\nprint(third_side(5, 12))",
    "def right_angled_triangle_third_side(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** .5\n\n\nif __name__ == '__main__':\n    print(right_angled_triangle_third_side(3, 4))",
    "def find_third_side(side_a, side_b):\n    return round((side_a ** 2 + side_b ** 2) ** 0.5, 2)\n\n\nprint(find_third_side(1, 2))",
    "def get_third_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    Takes in the three sides of a right angled triangle and returns the third side.\n    \"\"\"\n    return (opposite**2 + adjacent**2)**0.5\n\n\ndef test_cases():\n    \"\"\"\n    >>> get_third_side(3, 4, 5)\n    5.0\n    >>> get_third_side(1, 1, 2)\n    1.7320508075688772\n    >>> get_third_side(10, 10, 20)\n    17.32050807568877\n    \"\"\"\n    pass\n\n\ndef main():\n    test_cases()\n\n\nif __name__ == \"__main__\":\n    main()",
    "def hypotenuse(opposite, adjacent):\n    \"\"\"\n    Calculate hypotenuse of a right angled triangle\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    >>> find_third_side(3, 4)\n    5.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    This function finds the third side of a right angled triangle.\n    It takes two parameters and returns a single value.\n    \"\"\"\n    return opposite ** 2 + adjacent ** 2\n\n\ndef test_find_third_side():\n    \"\"\"\n    This function tests find_third_side function.\n    \"\"\"\n    assert find_third_side(3, 4) == 7\n    assert find_third_side(12, 5) == 29\n    assert find_third_side(6, 8) == 18",
    "def right_angle_triangle(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef test_right_angle_triangle():\n    \"\"\"\n    >>> test_right_angle_triangle()\n    \"\"\"\n    assert right_angle_triangle(3, 4) == 5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_side(opposite, adjacent):\n    return (opposite**2 + adjacent**2)**0.5\n\ndef main():\n    opposite = float(input('Enter opposite side: '))\n    adjacent = float(input('Enter adjacent side: '))\n    print(f'The hypotenuse is {find_side(opposite, adjacent)}')\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef third_side(a, b):\n    return sqrt(a ** 2 + b ** 2)\n\n\nif __name__ == '__main__':\n    assert third_side(3, 4) == 5\n    assert third_side(13, 12) == 15\n    assert third_side(10, 12) == 13",
    "def right_angle_triangle(a, b, c):\n    if a > b and a > c:\n        return b + c\n    elif b > a and b > c:\n        return a + c\n    elif c > a and c > b:\n        return a + b\n    else:\n        return \"error\"",
    "def find_third_side(opposite, adjacent, hypotenuse):\n    return hypotenuse - (opposite + adjacent)\n\n\nprint(find_third_side(3, 4, 5))",
    "def right_angled_triangle(opposite: int, adjacent: int) -> int:\n    \"\"\"\n    Return the hypotenuse of a right angled triangle.\n\n    >>> right_angled_triangle(3, 4)\n    5\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_third_side(opposite, adjacent):\n    return opposite ** 2 + adjacent ** 2\n\n\nprint(find_third_side(3, 4))",
    "def third_side(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n\n\nif __name__ == '__main__':\n    side1 = float(input('Enter the value of first side of triangle: '))\n    side2 = float(input('Enter the value of second side of triangle: '))\n    print('The third side of the triangle is: ', third_side(side1, side2))",
    "def right_angled_triangle(a, b):\n    \"\"\"\n    >>> right_angled_triangle(3, 4)\n    5.0\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def right_angled_triangle_side(a, b):\n    \"\"\"\n    >>> right_angled_triangle_side(3, 4)\n    5.0\n    >>> right_angled_triangle_side(4, 3)\n    5.0\n    >>> right_angled_triangle_side(3, 3)\n    4.0\n    >>> right_angled_triangle_side(4, 4)\n    5.0\n    >>> right_angled_triangle_side(4.0, 3.0)\n    5.0\n    >>> right_angled_triangle_side(0, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: a and b cannot be zero\n    >>> right_angled_triangle_side(-3, 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: a and b cannot be negative\n    >>> right_angled_triangle_side(3, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: a and b cannot be negative\n    >>> right_angled_triangle_side(3, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: a**2 + b**2 should be equal to 256\n    >>> right_angled_triangle_side(5, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: a**2 + b**2 should be equal to 256\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"a and b cannot be negative\")\n    if a == 0 or b == 0:\n        raise ValueError(\"a and b cannot be zero\")\n    if a**2 + b**2 != 256:\n        raise ValueError(\"a**2 + b**2 should be equal to 256\")\n    return (a**2 + b**2)**0.5\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def right_angled_triangle(opposite: float, adjacent: float, hypotenuse: float) -> float:\n    \"\"\"\n    >>> right_angled_triangle(3, 4, 5)\n    5.0\n    >>> right_angled_triangle(3, 4, 3)\n    4.0\n    >>> right_angled_triangle(3, 4, 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: The hypotenuse should be greater than the adjacent and opposite.\n    \"\"\"\n    if opposite <= 0 or adjacent <= 0 or hypotenuse <= 0:\n        raise ValueError(\"The values of opposite, adjacent and hypotenuse should be positive.\")\n    if opposite + adjacent > hypotenuse:\n        raise ValueError(\"The hypotenuse should be greater than the adjacent and opposite.\")\n\n    return hypotenuse - (opposite + adjacent)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef find_third_side(first_side, second_side):\n    return sqrt(first_side ** 2 + second_side ** 2)\n\n\ndef test_find_third_side():\n    \"\"\"Test for find_third_side function.\"\"\"\n    assert find_third_side(3, 4) == 5.0\n    assert find_third_side(7, 24) == 25.0\n\n\nif __name__ == '__main__':\n    print(find_third_side(3, 4))",
    "def find_third_side(a, b):\n    \"\"\"\n    :param a: first side of triangle\n    :param b: second side of triangle\n    :return: the third side of the triangle\n    \"\"\"\n    return a**2 + b**2\n\nif __name__ == '__main__':\n    a = float(input(\"a: \"))\n    b = float(input(\"b: \"))\n    print(f\"The third side of the triangle is: {find_third_side(a, b):.2f}\")",
    "def find_side(a, b, c):\n    if a > b and a > c:\n        return c\n    elif b > a and b > c:\n        return a\n    elif c > a and c > b:\n        return b\n    else:\n        return -1\n\nprint(find_side(3, 4, 5))\nprint(find_side(5, 12, 13))\nprint(find_side(10, 11, 12))\nprint(find_side(6, 8, 10))",
    "def find_third_side(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == '__main__':\n    a = float(input('Enter the value of the first side of a triangle: '))\n    b = float(input('Enter the value of the second side of a triangle: '))\n    print(f'The value of the third side of a triangle is: {find_third_side(a, b)}')",
    "def pythagorean_theorem(opposite, adjacent):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\ndef main():\n    opposite = float(input(\"What is the opposite side? \"))\n    adjacent = float(input(\"What is the adjacent side? \"))\n    print(\"The hypotenuse is:\", pythagorean_theorem(opposite, adjacent))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef find_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    Given the opposite, adjacent and hypotenuse of a right angled triangle,\n    find the third side.\n    \"\"\"\n    return (opposite**2 + adjacent**2 - hypotenuse**2) / (2 * adjacent)\n\n\ndef find_hypotenuse(opposite, adjacent, side):\n    \"\"\"\n    Given the opposite, adjacent and hypotenuse of a right angled triangle,\n    find the hypotenuse.\n    \"\"\"\n    return sqrt(abs(opposite**2 + adjacent**2 - side**2))",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    >>> find_third_side(3, 4)\n    5.0\n    >>> find_third_side(4, 3)\n    5.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def right_triangle(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nprint(right_triangle(3, 4))",
    "def right_angled_triangle(a, b):\n    return (a**2 + b**2)**0.5\n\n\nif __name__ == '__main__':\n    print(right_angled_triangle(4, 4))",
    "def find_side(opposite, adjacent):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\ndef find_third_side(opposite, adjacent):\n    return find_side(opposite, adjacent)",
    "def pythagorean_triangle(a: float, b: float) -> float:\n    \"\"\"\n    This function takes two parameters a and b,\n    calculates the hypotenuse c of a pythagorean triangle\n    and returns it.\n    >>> pythagorean_triangle(3, 4)\n    5.0\n    >>> pythagorean_triangle(10, 2)\n    17.320508075688772\n    >>> pythagorean_triangle(2, 2)\n    2.0\n    >>> pythagorean_triangle(1, 1)\n    1.4142135623730951\n    >>> pythagorean_triangle(-1, -1)\n    1.4142135623730951\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef pythagorean_triangle_v2(a: float, b: float) -> float:\n    \"\"\"\n    This function takes two parameters a and b,\n    calculates the hypotenuse c of a pythagorean triangle\n    and returns it.\n    >>> pythagorean_triangle_v2(3, 4)\n    5.0\n    >>> pythagorean_triangle_v2(10, 2)\n    17.320508075688772\n    >>> pythagorean_triangle_v2(2, 2)\n    2.0\n    >>> pythagorean_triangle_v2(1, 1)\n    1.4142135623730951\n    >>> pythagorean_triangle_v2(-1, -1)\n    1.4142135623730951\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef pythagorean_triangle_v3(a: float, b: float) -> float:\n    \"\"\"",
    "def hypotenuse(opposite, adjacent):\n    return (opposite**2 + adjacent**2)**0.5",
    "def pythagorean_theorem(a, b):\n    \"\"\"\n    >>> pythagorean_theorem(3, 4)\n    5.0\n    >>> pythagorean_theorem(1, 2)\n    3.0\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_third_side(opposite, adjacent, hypotenuse):\n    return ((hypotenuse**2) - ((opposite**2) + (adjacent**2)))**0.5\n\n\nif __name__ == '__main__':\n    opp = int(input('Enter the value of opposite: '))\n    adj = int(input('Enter the value of adjacent: '))\n    hyp = int(input('Enter the value of hypotenuse: '))\n    print(f'The third side of a right angled triangle is: {find_third_side(opp, adj, hyp)}')",
    "def hypotenuse(opposite, adjacent):\n    \"\"\"\n    Returns the hypotenuse of a right angled triangle.\n\n    >>> hypotenuse(3, 4)\n    5.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def pythagorean(a, b):\n    \"\"\"\n    >>> pythagorean(3, 4)\n    5\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    >>> find_third_side(3, 4)\n    5.0\n    >>> find_third_side(10, 12)\n    14.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def right_angle_triangle(a, b):\n    \"\"\"\n    Calculates the third side of a right angled triangle\n\n    >>> right_angle_triangle(3, 4)\n    5.0\n    >>> right_angle_triangle(1, 1)\n    1.7320508075688772\n    >>> right_angle_triangle(2, 1)\n    'This is not a right angled triangle.'\n    \"\"\"\n    if a ** 2 + b ** 2 == (a + b) ** 2:\n        return (a ** 2 + b ** 2) ** 0.5\n    else:\n        return \"This is not a right angled triangle.\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def third_side(a, b):\n    \"\"\"\n    >>> third_side(3, 4)\n    5.0\n    \"\"\"\n    return (a**2 + b**2)**0.5\n\ndef third_side_2(a, b):\n    \"\"\"\n    >>> third_side_2(3, 4)\n    5.0\n    \"\"\"\n    return a**2 + b**2\n\ndef third_side_3(a, b):\n    \"\"\"\n    >>> third_side_3(3, 4)\n    5.0\n    \"\"\"\n    return (a**2 + b**2)**0.5\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef third_side(a, b):\n    return math.sqrt(a**2 + b**2)\n\nif __name__ == '__main__':\n    a = float(input('Enter first side: '))\n    b = float(input('Enter second side: '))\n    print(f'The third side of the triangle is {third_side(a, b)}')",
    "def find_third_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    This function takes in the sides of a triangle and finds the third side.\n    :param opposite: int\n    :param adjacent: int\n    :param hypotenuse: int\n    :return: int\n    \"\"\"\n    return ((opposite**2) + (adjacent**2))**0.5\n\n\ndef main():\n    opposite = int(input(\"Enter the opposite side: \"))\n    adjacent = int(input(\"Enter the adjacent side: \"))\n    hypotenuse = int(input(\"Enter the hypotenuse side: \"))\n\n    if opposite == adjacent == hypotenuse:\n        print(\"This is a right angled triangle.\")\n    else:\n        print(\"This is not a right angled triangle.\")\n\n    print(\"The third side is \" + str(find_third_side(opposite, adjacent, hypotenuse)))\n\n\nif __name__ == '__main__':\n    main()",
    "def right_angled(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n\n\nprint(right_angled(5, 3))",
    "def right_angled_triangle(b, c):\n    if b <= 0 or c <= 0:\n        return None\n\n    return (c ** 2 - b ** 2) ** 0.5\n\n\nprint(right_angled_triangle(3, 4))",
    "import math\n\ndef find_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    >>> find_side(3, 4, 5)\n    5.0\n    >>> find_side(3, 4, 6)\n    Traceback (most recent call last):\n    ...\n    ValueError: The hypotenuse is too short\n    \"\"\"\n    if opposite**2 + adjacent**2 != hypotenuse**2:\n        raise ValueError(\"The hypotenuse is too short\")\n    return math.sqrt(opposite**2 + adjacent**2)",
    "def right_angled_triangle(x, y):\n    return (x ** 2 + y ** 2) ** 0.5\n\n\ndef right_angled_triangle_with_side_length(x):\n    return (x ** 2 + x ** 2) ** 0.5\n\n\nif __name__ == '__main__':\n    print(right_angled_triangle(3, 4))\n    print(right_angled_triangle_with_side_length(5))",
    "def find_third_side(opposite, adjacent, hypotenuse):\n    \"\"\"\n    >>> find_third_side(3, 4, 5)\n    5.0\n    >>> find_third_side(3, 4, 2)\n    2.0\n    \"\"\"\n    return (hypotenuse ** 2 - (opposite ** 2 + adjacent ** 2)) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef third_side(a, b):\n    \"\"\"\n    :param a: first side of a right angled triangle\n    :param b: second side of a right angled triangle\n    :return: third side of a right angled triangle\n    \"\"\"\n    c = math.sqrt(a**2 + b**2)\n    return c",
    "def hypotenuse(side1: float, side2: float) -> float:\n    \"\"\"\n    Calculates hypotenuse.\n    >>> hypotenuse(3, 4)\n    5.0\n    >>> hypotenuse(12, 5)\n    13.0\n    \"\"\"\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def right_angled_triangle_side(opposite, adjacent, hypotenuse):\n    return ((opposite ** 2) + (adjacent ** 2)) ** .5\n\n\nprint(right_angled_triangle_side(3, 4, 5))",
    "def right_angled_triangle(opposite, adjacent, hypotenuse):\n    \"\"\"\n    >>> right_angled_triangle(3, 4, 5)\n    5.0\n    >>> right_angled_triangle(12, 8, 13)\n    13.0\n    \"\"\"\n    return hypotenuse\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_third_side(a, b):\n    \"\"\"\n    >>> find_third_side(1, 2)\n    3\n    \"\"\"\n    return (a ** 2 + b ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def get_third_side(opposite, adjacent, hypotenuse):\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\nprint(get_third_side(3, 4, 5))",
    "def find_third_side(opposite, adjacent):\n    \"\"\"\n    >>> find_third_side(5, 3)\n    5.0\n    >>> find_third_side(4, 3)\n    4.0\n    \"\"\"\n    return (opposite ** 2 + adjacent ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\n\ndef right_angled_triangle(a, b):\n    \"\"\"\n    Find the third side of a right angled triangle.\n\n    Args:\n        a (float): The first side of a right angled triangle\n        b (float): The second side of a right angled triangle\n\n    Returns:\n        c (float): The third side of a right angled triangle\n    \"\"\"\n    c = sqrt(a**2 + b**2)\n    return c",
    "def third_side(a, b):\n    return ((a ** 2) + (b ** 2)) ** 0.5",
    "def right_angled_triangle(a, b):\n    return sqrt(a**2 + b**2)\n\n\nassert right_angled_triangle(3, 4) == 5"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}