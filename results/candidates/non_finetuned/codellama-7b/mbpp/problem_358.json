{
  "problem": {
    "task_id": "MBPP/369",
    "prompt": "Write a function to find the lateral surface area of cuboid",
    "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
    "test_list": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ],
    "challenge_test_list": [],
    "problem_id": 358
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(lateral_surface_area(a, b, c))\n\n\"\"\"\nINPUT SAMPLE:\n\n2 3 4\nOUTPUT SAMPLE:\n\n28\n\"\"\"",
    "def cuboid_surface(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nprint(cuboid_surface(2, 4, 3))",
    "def lateral_surface_area(length, width, height):\n    return (2 * length * width) + (2 * width * height) + (2 * height * length)\n\n\nif __name__ == \"__main__\":\n    length = int(input(\"Enter the length: \"))\n    width = int(input(\"Enter the width: \"))\n    height = int(input(\"Enter the height: \"))\n\n    print(f\"The lateral surface area is {lateral_surface_area(length, width, height)}\")",
    "from math import sqrt\n\n\ndef lateral_surface_area(l, b, h):\n    \"\"\"\n    Return the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (l * b + b * h + h * l)\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(2, 3, 4))",
    "from math import pi\n\ndef cuboid_lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nif __name__ == '__main__':\n    length = float(input('Enter the length: '))\n    width = float(input('Enter the width: '))\n    height = float(input('Enter the height: '))\n    print(f'The lateral surface area of cuboid is {cuboid_lateral_surface_area(length, width, height)}')",
    "import math\n\ndef area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\ndef volume(a, b, c):\n    return a * b * c\n\ndef lateral_surface_area(a, b, c):\n    return 2 * (area(a, b, c) + area(a, c, b) + area(b, a, c))\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(\"Lateral Surface Area:\", lateral_surface_area(a, b, c))\n\nif __name__ == '__main__':\n    main()",
    "from math import pow, sqrt\n\n\ndef cuboid(a, b, c):\n    return 2 * (a * b + a * c + b * c)\n\n\ndef cuboid_lateral_surface_area(a, b, c):\n    return 2 * (a * b + a * c + b * c)\n\n\nif __name__ == '__main__':\n    print(cuboid(4, 5, 6))\n    print(cuboid_lateral_surface_area(4, 5, 6))",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)",
    "def get_lateral_area(length, width, height):\n    return 2*(length*width + width*height + length*height)\n\n\nif __name__ == '__main__':\n    length = int(input(\"Enter length: \"))\n    width = int(input(\"Enter width: \"))\n    height = int(input(\"Enter height: \"))\n\n    area = get_lateral_area(length, width, height)\n    print(f\"Lateral Surface Area: {area}\")",
    "from math import sqrt\n\n\ndef surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\ndef surface_area_alt(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(1, 2, 3))\n    print(surface_area_alt(1, 2, 3))",
    "def surface_area(a, b, c):\n    \"\"\"\n    a: first dimension of cuboid\n    b: second dimension of cuboid\n    c: third dimension of cuboid\n    return: surface area of cuboid\n    \"\"\"\n    return 2*(a*b + a*c + b*c)",
    "from math import sqrt\n\ndef get_area(x, y, z):\n    return 2 * (x * y + x * z + y * z)\n\ndef get_perimeter(x, y, z):\n    return 2 * (x + y + z)\n\ndef get_surface_area(x, y, z):\n    return 2 * (x * y + x * z + y * z) + 6 * sqrt(x * y + x * z + y * z)",
    "def get_lateral_surface_area(a, b, c):\n    \"\"\"\n    a: length of side a\n    b: length of side b\n    c: length of side c\n    return: the lateral surface area of the cuboid\n    \"\"\"\n    return 2 * (a * b + b * c + c * a)\n\n\nif __name__ == '__main__':\n    assert get_lateral_surface_area(2, 3, 4) == 52\n    assert get_lateral_surface_area(1, 2, 3) == 54\n    assert get_lateral_surface_area(4, 3, 2) == 54\n    assert get_lateral_surface_area(2, 2, 2) == 24\n    assert get_lateral_surface_area(2, 4, 2) == 32",
    "from math import sqrt\n\n\ndef find_surface_area(length, width, height):\n    \"\"\"\n    Find the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * height + width * height)\n\n\ndef find_area_of_rectangle(length, width):\n    \"\"\"\n    Find the area of a rectangle\n    \"\"\"\n    return length * width\n\n\ndef find_volume(length, width, height):\n    \"\"\"\n    Find the volume of a cuboid\n    \"\"\"\n    return find_area_of_rectangle(length, width) * height\n\n\ndef find_surface_area_of_sphere(radius):\n    \"\"\"\n    Find the surface area of a sphere\n    \"\"\"\n    return 4 * 3.14 * pow(radius, 2)\n\n\ndef find_area_of_circle(radius):\n    \"\"\"\n    Find the area of a circle\n    \"\"\"\n    return 3.14 * pow(radius, 2)\n\n\ndef find_volume_of_sphere(radius):\n    \"\"\"\n    Find the volume of a sphere\n    \"\"\"\n    return (4/3) * 3.14 * pow(radius, 3)\n\n\ndef find_surface_area_of_cylinder(radius, height):\n    \"\"\"\n    Find the surface area of a cylinder\n    \"\"\"\n    return 2 * 3.14 * radius * (radius + height)\n\n\ndef find_area_of_cylinder(radius, height):\n    \"\"\"\n    Find the area of a cylinder\n    \"\"\"\n    return 2 * 3.14 * radius * height\n\n\ndef find_volume_of_cylinder(radius, height):\n    \"\"\"\n    Find the volume of a cylinder\n    \"\"\"\n    return 3.14 * pow(radius, 2) * height",
    "def surface_area(l, b, h):\n    return 2*(l*b+l*h+b*h)\n\nprint(surface_area(3, 2, 2))",
    "from math import sqrt\n\ndef lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    length = float(input(\"Enter the length of the cuboid: \"))\n    width = float(input(\"Enter the width of the cuboid: \"))\n    height = float(input(\"Enter the height of the cuboid: \"))\n\n    print(f\"The lateral surface area of the cuboid is {lateral_surface_area(length, width, height)}\")",
    "from math import sqrt\n\n\ndef cuboid_surface_area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\n\nif __name__ == '__main__':\n    print(cuboid_surface_area(1, 2, 3))\n    print(cuboid_surface_area(1, 2, 1))\n    print(cuboid_surface_area(2, 2, 2))\n    print(cuboid_surface_area(1, 1, 1))",
    "def surface_area(length: int, breadth: int, height: int) -> int:\n    \"\"\"\n    Returns the lateral surface area of cuboid\n    >>> surface_area(1, 2, 3)\n    12\n    >>> surface_area(3, 2, 1)\n    18\n    >>> surface_area(1, 2, 2)\n    10\n    >>> surface_area(1, 1, 1)\n    6\n    \"\"\"\n    return 2 * (length * breadth + breadth * height + length * height)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def find_surface_area(length, breadth, height):\n    return 2 * (length * breadth + length * height + breadth * height)\n\n\ndef main():\n    length = int(input(\"Enter the length: \"))\n    breadth = int(input(\"Enter the breadth: \"))\n    height = int(input(\"Enter the height: \"))\n    print(f\"The lateral surface area is {find_surface_area(length, breadth, height)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(1, 1, 2)\n    12\n    >>> surface_area(1, 2, 1)\n    10\n    >>> surface_area(1, 2, 2)\n    16\n    >>> surface_area(2, 1, 1)\n    10\n    >>> surface_area(2, 1, 2)\n    14\n    >>> surface_area(2, 2, 1)\n    14\n    >>> surface_area(2, 2, 2)\n    20\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\ndef surface_area_alt(length: int, width: int, height: int) -> int:\n    \"\"\"\n    >>> surface_area_alt(1, 1, 1)\n    6\n    >>> surface_area_alt(1, 1, 2)\n    12\n    >>> surface_area_alt(1, 2, 1)\n    10\n    >>> surface_area_alt(1, 2, 2)\n    16\n    >>> surface_area_alt(2, 1, 1)\n    10\n    >>> surface_area_alt(2, 1, 2)\n    14\n    >>> surface_area_alt(2, 2, 1)\n    14\n    >>> surface_area_alt(2, 2, 2)\n    20\n    \"\"\"\n    return (\n        2 * length * width\n        + 2 * width * height\n        + 2 * height * length\n        + sqrt(length ** 2 + width ** 2 + height ** 2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import pow\ndef surface_area(a, b, c):\n    return 2*(a*b+a*c+b*c)\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(surface_area(a, b, c))",
    "def lateral_surface_area(length, width, height):\n    return 2*(length*width + width*height + length*height)\n\n\nif __name__ == '__main__':\n    length = float(input(\"Enter length of cuboid: \"))\n    width = float(input(\"Enter width of cuboid: \"))\n    height = float(input(\"Enter height of cuboid: \"))\n\n    print(f\"The lateral surface area of cuboid is {lateral_surface_area(length, width, height)}\")",
    "def lateralSurfaceArea(x, y, z):\n    return (2 * (x * y + x * z + y * z))\n\nprint(lateralSurfaceArea(2, 2, 2))",
    "def lateral_surface_area(length, width, height):\n    return (2*(length*width + width*height + length*height))\n\n\nprint(lateral_surface_area(4, 5, 6))",
    "def area_of_cuboid(length, breadth, height):\n    return 2*(length*breadth + breadth*height + length*height)\n\nprint(area_of_cuboid(3, 4, 5))\nprint(area_of_cuboid(3, 4, 5))",
    "from math import sqrt\n\n\ndef lateral_surface_area(width, length, height):\n    \"\"\"\n    >>> lateral_surface_area(1, 1, 1)\n    6\n    >>> lateral_surface_area(1, 2, 2)\n    24\n    >>> lateral_surface_area(1, 2, 3)\n    36\n    >>> lateral_surface_area(2, 2, 3)\n    54\n    \"\"\"\n    return 2 * (width * height + length * height + width * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def surface_area(a, b, c):\n    return (\n        2 * (a * b + b * c + c * a)\n    )  # sum of all the 3 sides multiplied by 2\n\n\ndef surface_area_square(s):\n    return 4 * s ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(2, 3, 4))\n    print(surface_area_square(2))",
    "def area_of_cuboid(length, width, height):\n    \"\"\"\n    >>> area_of_cuboid(1, 1, 1)\n    6\n    >>> area_of_cuboid(1, 2, 3)\n    18\n    >>> area_of_cuboid(4, 5, 6)\n    144\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def lateral_surface_area(length: int, breadth: int, height: int) -> float:\n    return 2 * (length * breadth + breadth * height + length * height)\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(2, 3, 4))\n    print(lateral_surface_area(1, 2, 3))\n    print(lateral_surface_area(4, 2, 1))",
    "def lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + a * c)\n\n\nprint(lateral_surface_area(2, 4, 6))\nprint(lateral_surface_area(1, 1, 1))",
    "def cuboid_area(length, breadth, height):\n    return 2 * (length * breadth + breadth * height + length * height)\n\nif __name__ == '__main__':\n    length = int(input(\"Enter length of cuboid: \"))\n    breadth = int(input(\"Enter breadth of cuboid: \"))\n    height = int(input(\"Enter height of cuboid: \"))\n\n    print(f\"Lateral Surface Area of cuboid is: {cuboid_area(length, breadth, height)}\")",
    "def lateralSurfaceArea(length,breadth,height):\n    return 2*(length*breadth+breadth*height+length*height)\n\n\nif __name__ == \"__main__\":\n    length = int(input())\n    breadth = int(input())\n    height = int(input())\n    area = lateralSurfaceArea(length,breadth,height)\n    print(area)",
    "def lateral_surface_area(length, width, height):\n    \"\"\"\n    Return the lateral surface area of cuboid\n\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: lateral surface area\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)",
    "from math import sqrt\n\ndef area(a, b, c):\n    \"\"\"\n    Calculates the lateral surface area of cuboid\n    \"\"\"\n    return 2 * (a * b + b * c + c * a)\n\ndef main():\n    \"\"\"\n    driver code\n    \"\"\"\n    print(\"Lateral Surface Area of Cuboid : \", area(2, 2, 2))\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\ndef cuboid(side1, side2, side3):\n    return 2 * (side1 * side2 + side1 * side3 + side2 * side3)\n\ndef main():\n    side1 = float(input(\"Enter first side: \"))\n    side2 = float(input(\"Enter second side: \"))\n    side3 = float(input(\"Enter third side: \"))\n    print(f\"Lateral Surface Area: {cuboid(side1, side2, side3)}\")\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef surface_area(length, breadth, height):\n    return 2*(length*breadth + breadth*height + length*height)\n\n\nif __name__ == \"__main__\":\n    length = float(input(\"Enter length of cuboid: \"))\n    breadth = float(input(\"Enter breadth of cuboid: \"))\n    height = float(input(\"Enter height of cuboid: \"))\n\n    print(\"Lateral Surface Area:\", surface_area(length, breadth, height))",
    "import math\n\ndef calculate_lateral_surface_area(width, length, height):\n    \"\"\"\n    Calculate lateral surface area of a cuboid.\n\n    :param width: width of cuboid\n    :type width: float\n    :param length: length of cuboid\n    :type length: float\n    :param height: height of cuboid\n    :type height: float\n    :return: lateral surface area\n    :rtype: float\n    \"\"\"\n    return 2 * (width * height + length * height)\n\ndef main():\n    \"\"\"\n    Print the lateral surface area of cuboid for various inputs\n    \"\"\"\n    width, length, height = 10, 20, 30\n    print(f\"The lateral surface area of cuboid with width {width}, length {length}, height {height} is {calculate_lateral_surface_area(width, length, height):.2f}\")\n\n    width, length, height = 20, 10, 30\n    print(f\"The lateral surface area of cuboid with width {width}, length {length}, height {height} is {calculate_lateral_surface_area(width, length, height):.2f}\")\n\n    width, length, height = 30, 20, 10\n    print(f\"The lateral surface area of cuboid with width {width}, length {length}, height {height} is {calculate_lateral_surface_area(width, length, height):.2f}\")\n\nif __name__ == \"__main__\":\n    main()",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    length = float(input(\"Enter the length: \"))\n    width = float(input(\"Enter the width: \"))\n    height = float(input(\"Enter the height: \"))\n    print(\"The lateral surface area is\", lateral_surface_area(length, width, height))",
    "def area_cuboid(l, b, h):\n    return 2*(l*b + b*h + l*h)\n\nif __name__ == '__main__':\n    l = float(input(\"Enter length: \"))\n    b = float(input(\"Enter breadth: \"))\n    h = float(input(\"Enter height: \"))\n    print(f\"Lateral surface area: {area_cuboid(l, b, h)}\")",
    "def lateral_surface_area(length, width, height):\n    return (length * width) + (width * height) + (length * height)\n\n\nif __name__ == \"__main__\":\n    length = int(input(\"Enter length: \"))\n    width = int(input(\"Enter width: \"))\n    height = int(input(\"Enter height: \"))\n    print(lateral_surface_area(length, width, height))",
    "def surface_area(length: float, width: float, height: float) -> float:\n    \"\"\"\n    Calculate lateral surface area of cuboid\n\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(1, 2, 3)\n    30\n    >>> surface_area(1.1, 2.2, 3.3)\n    62.02\n    >>> surface_area(1.1, 2.2, 3.33)\n    62.261\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import *\n\n\ndef cuboid_lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + a * c)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter value of a: \"))\n    b = float(input(\"Enter value of b: \"))\n    c = float(input(\"Enter value of c: \"))\n    print(cuboid_lateral_surface_area(a, b, c))",
    "def cuboid_surface_area(height, width, length):\n    \"\"\"\n    >>> cuboid_surface_area(1, 1, 1)\n    6\n    >>> cuboid_surface_area(1, 1, 2)\n    12\n    \"\"\"\n    return 2 * (height * width + width * length + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def lateral_surface_area(a, b, c):\n    return (a * b + b * c + c * a)\n\n\nif __name__ == '__main__':\n    a = int(input(\"Enter length of 1st side: \"))\n    b = int(input(\"Enter length of 2nd side: \"))\n    c = int(input(\"Enter length of 3rd side: \"))\n\n    print(f\"Lateral surface area: {lateral_surface_area(a, b, c)}\")",
    "from math import pi\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt2(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt3(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt4(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt5(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt6(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt7(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef lateral_surface_area_alt8(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid\n    \"\"\"",
    "def lateral_surface_area(length, width, height):\n    return 2*(length*width+width*height+height*length)",
    "def lateral_surface_area(width: int, height: int, depth: int) -> int:\n    \"\"\"\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :param depth: depth of cuboid\n    :return: lateral surface area of cuboid\n    >>> lateral_surface_area(2, 2, 2)\n    12\n    >>> lateral_surface_area(3, 4, 5)\n    90\n    \"\"\"\n\n    return 2 * (width * height + width * depth + height * depth)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import pow\n\ndef lateral_area(length, breadth, height):\n    \"\"\"\n    Return the lateral surface area of cuboid\n    \"\"\"\n    return 2 * (length * breadth + breadth * height + length * height)\n\nif __name__ == '__main__':\n    LENGTH = int(input(\"Enter length of cuboid: \"))\n    BREADTH = int(input(\"Enter breadth of cuboid: \"))\n    HEIGHT = int(input(\"Enter height of cuboid: \"))\n    print(f\"Lateral surface area of cuboid: {lateral_area(LENGTH, BREADTH, HEIGHT)}\")",
    "def cuboid(h, w, l):\n    return 2 * (w * l + l * h + w * h)\n\n\nif __name__ == \"__main__\":\n    print(cuboid(1, 2, 3))",
    "def lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + a * c)\n\n\"\"\"\nWrite a function to find the volume of a cuboid\n\"\"\"\ndef volume(a, b, c):\n    return a * b * c\n\n\"\"\"\nWrite a function to find the diagonal of a cuboid\n\"\"\"\ndef diagonal(a, b, c):\n    return (a ** 2 + b ** 2 + c ** 2) ** (1/2)\n\n\"\"\"\nWrite a function to find the surface area of a cuboid\n\"\"\"\ndef surface_area(a, b, c):\n    return 6 * (a * b + b * c + a * c)\n\n\n\"\"\"\nWrite a function to find the length of a diagonal of a cuboid\n\"\"\"\ndef diagonal_length(a, b, c):\n    return (a ** 2 + b ** 2 + c ** 2) ** (1/2)\n\n\n\"\"\"\nWrite a function to find the surface area of a cuboid\n\"\"\"\ndef surface_area(a, b, c):\n    return 6 * (a * b + b * c + a * c)\n\n\n\"\"\"\nWrite a function to find the lateral surface area of a cuboid\n\"\"\"\ndef lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + a * c)\n\n\n\"\"\"\nWrite a function to find the volume of a cuboid\n\"\"\"\ndef volume(a, b, c):\n    return a * b * c\n\n\n\"\"\"\nWrite a function to find the volume of a cuboid\n\"\"\"\ndef volume(a, b, c):\n    return a * b * c\n\n\n\"\"\"\nWrite a function to find the length of a diagonal of a cuboid\n\"\"\"\ndef diagonal_length(a, b, c):\n    return (a ** 2 + b ** 2 + c ** 2) ** (1/2)\n\n\n\"\"\"\nWrite a function to find the lateral surface area of a cuboid\n\"\"\"\ndef lateral_surface",
    "def lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of the cuboid.\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef test_function():\n    assert lateral_surface_area(4, 2, 3) == 52, \"Area of cuboid is wrong\"\n    assert lateral_surface_area(1, 2, 3) == 10, \"Area of cuboid is wrong\"\n    assert lateral_surface_area(2, 2, 2) == 24, \"Area of cuboid is wrong\"\n    assert lateral_surface_area(1, 1, 1) == 6, \"Area of cuboid is wrong\"\n    print(\"Passed all tests. You are awesome!\")\n\n\ntest_function()",
    "def lateral_surface_area(height, width, depth):\n    return 2 * (height * width + height * depth + width * depth)\n\n\ndef main():\n    height = int(input(\"Enter the height of cuboid: \"))\n    width = int(input(\"Enter the width of cuboid: \"))\n    depth = int(input(\"Enter the depth of cuboid: \"))\n    print(f\"The lateral surface area of cuboid is {lateral_surface_area(height, width, depth)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def lateral_surface_area(l, b, h):\n    return 2 * (l * b + b * h + l * h)",
    "def cuboid_lateral_surface_area(width: int, length: int, height: int) -> int:\n    \"\"\"Returns the lateral surface area of cuboid\n\n    Args:\n        width (int): width of cuboid\n        length (int): length of cuboid\n        height (int): height of cuboid\n\n    Returns:\n        int: lateral surface area of cuboid\n    \"\"\"\n    return (2 * width * length) + (2 * width * height) + (2 * length * height)\n\n\nif __name__ == \"__main__\":\n    print(cuboid_lateral_surface_area(1, 2, 3))",
    "def get_lateral_surface_area(length, breadth, height):\n    return 2 * (length * breadth + breadth * height + length * height)\n\n\nif __name__ == \"__main__\":\n    print(get_lateral_surface_area(2, 3, 4))",
    "from typing import Union\n\n\ndef cuboid(length: Union[int, float], width: Union[int, float], height: Union[int, float]):\n    \"\"\"\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: lateral surface area of cuboid\n    \"\"\"\n    if length <= 0 or width <= 0 or height <= 0:\n        raise ValueError(\"All dimensions must be positive\")\n\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    print(cuboid(1, 2, 3))",
    "def cuboid_surface_area(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\nif __name__ == '__main__':\n    print(cuboid_surface_area(2, 2, 2))",
    "def get_lateral_area(x, y, z):\n    return 2*(x*y + y*z + x*z)\n\nprint(get_lateral_area(2, 2, 2))",
    "def surface_area(h, w, l):\n    return 2 * (h * w + h * l + w * l)\n\nh = int(input(\"Enter height: \"))\nw = int(input(\"Enter width: \"))\nl = int(input(\"Enter length: \"))\n\nprint(f\"Lateral surface area: {surface_area(h, w, l)}\")",
    "def surface_area(x, y, z):\n    return 2 * (x * y + x * z + y * z)\n\n\nif __name__ == \"__main__\":\n    print(surface_area(2, 3, 5))",
    "def get_lateral_surface_area(length, width, height):\n    \"\"\"\n    Return the lateral surface area\n    >>> get_lateral_surface_area(1, 2, 3)\n    12\n    >>> get_lateral_surface_area(1, 2, 1)\n    4\n    >>> get_lateral_surface_area(1, 1, 1)\n    2\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def surface_area(length, width, height):\n    \"\"\"\n    >>> surface_area(2, 2, 2)\n    12\n    >>> surface_area(1, 2, 3)\n    10\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def cuboid_lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\nprint(cuboid_lateral_surface_area(2, 3, 4)) # 52\nprint(cuboid_lateral_surface_area(1, 2, 3)) # 10",
    "def cuboid(length,breadth,height):\n    area_lateral = 2 * (length*breadth + breadth*height + length*height)\n    return area_lateral\n\nif __name__ == '__main__':\n    length = int(input(\"Enter the length of cuboid: \"))\n    breadth = int(input(\"Enter the breadth of cuboid: \"))\n    height = int(input(\"Enter the height of cuboid: \"))\n    area_lateral = cuboid(length,breadth,height)\n    print(f\"Lateral surface area of cuboid: {area_lateral}\")",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nif __name__ == '__main__':\n    length = float(input(\"Enter the length: \"))\n    width = float(input(\"Enter the width: \"))\n    height = float(input(\"Enter the height: \"))\n    print(lateral_surface_area(length, width, height))",
    "def lateral_surface_area(h, l, w):\n    return 2 * (h * l + h * w + l * w)",
    "def surface_area(l, b, h):\n    \"\"\"\n    :param l: length\n    :param b: breadth\n    :param h: height\n    :return: surface area\n    \"\"\"\n    return 2 * (l * b + b * h + l * h)\n\nif __name__ == \"__main__\":\n    print(surface_area(10, 5, 2))",
    "from math import sqrt\n\ndef surface_area(width, height, length):\n    return 2 * (width * height + width * length + height * length)\n\n\ndef lateral_surface_area(width, height, length):\n    \"\"\"\n    >>> lateral_surface_area(1, 1, 1)\n    6\n    >>> lateral_surface_area(1, 1, 2)\n    12\n    >>> lateral_surface_area(1, 2, 1)\n    12\n    >>> lateral_surface_area(2, 1, 1)\n    12\n    >>> lateral_surface_area(2, 1, 2)\n    24\n    >>> lateral_surface_area(2, 2, 1)\n    24\n    >>> lateral_surface_area(2, 2, 2)\n    32\n    \"\"\"\n    return surface_area(width, height, length) - 2 * surface_area(width, height, 1) - 2 * surface_area(width, 1, length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def area_of_cuboid(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\nif __name__ == \"__main__\":\n    w = int(input(\"Enter width of cuboid: \"))\n    h = int(input(\"Enter height of cuboid: \"))\n    d = int(input(\"Enter depth of cuboid: \"))\n    print(f\"Lateral surface area of cuboid is {area_of_cuboid(w, h, d)}\")",
    "def cuboid_lateral_surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"\n    >>> cuboid_lateral_surface_area(3, 2, 1)\n    12\n    >>> cuboid_lateral_surface_area(1, 2, 3)\n    6\n    >>> cuboid_lateral_surface_area(2, 1, 3)\n    6\n    >>> cuboid_lateral_surface_area(2, 3, 1)\n    12\n    >>> cuboid_lateral_surface_area(1, 2, 4)\n    16\n    >>> cuboid_lateral_surface_area(1, 1, 1)\n    6\n    >>> cuboid_lateral_surface_area(1, 1, 2)\n    12\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import pow\n\n\ndef area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\n\ndef volume(a, b, c):\n    return a * b * c\n\n\ndef lateral_surface_area(a, b, c):\n    return 2 * area(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(f\"Lateral surface area: {lateral_surface_area(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def cuboid(h, w, d):\n    return 2 * (h * w + w * d + d * h)",
    "def area_lateral_surface(length, width, height):\n    \"\"\"\n    Function to find lateral surface area of cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)",
    "def cuboid_lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + height * length)",
    "def find_surface_area(width: float, height: float, length: float):\n    return (2*width*height) + (2*height*length) + (2*length*width)\n\nif __name__ == '__main__':\n    assert find_surface_area(2, 2, 2) == 12\n    assert find_surface_area(2, 2, 1) == 8\n    assert find_surface_area(2, 1, 2) == 8\n    assert find_surface_area(1, 2, 2) == 8\n    assert find_surface_area(2, 1, 1) == 6\n    assert find_surface_area(1, 2, 1) == 6\n    assert find_surface_area(1, 1, 2) == 6",
    "from math import sqrt\n\ndef cuboid_surface_area(a, b, c):\n    return (2 * a * b) + (2 * a * c) + (2 * b * c)\n\ndef cuboid_lateral_surface_area(a, b, c):\n    s = sqrt(a ** 2 + b ** 2 + c ** 2)\n    return 4 * (a * b + b * c + a * c) + 4 * s * (a + b + c)\n\ndef main():\n    a, b, c = [int(x) for x in input(\"Enter the dimensions: \").split()]\n    print(f\"The lateral surface area is {cuboid_lateral_surface_area(a, b, c)}\")\n\nif __name__ == \"__main__\":\n    main()",
    "def lateral_surface_area(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume(l,b,h):\n    return l*b*h\n\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surface_area(l,b,h):\n    return 2*(l*b+b*h+h*l)",
    "def lateral_surface_area(l,b,h):\n    return 2*(l*b + b*h + l*h)\n\nprint(lateral_surface_area(2,2,3))",
    "import unittest\nfrom math import sqrt\n\ndef cuboid(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return 0\n    return 2 * (a * b + b * c + a * c)\n\ndef lateral_surface_area_cuboid(a, b, c):\n    return 2 * (a * b + b * c + a * c)\n\nclass TestCuboid(unittest.TestCase):\n\n    def test_cuboid(self):\n        self.assertEqual(cuboid(1, 2, 3), 6)\n        self.assertEqual(cuboid(1, 2, 0), 2)\n        self.assertEqual(cuboid(1, 2, -3), 0)\n        self.assertEqual(cuboid(1, 2, 3.5), 6)\n        self.assertEqual(cuboid(1, 2, 3.99), 6)\n\n    def test_lateral_surface_area_cuboid(self):\n        self.assertEqual(lateral_surface_area_cuboid(1, 2, 3), 6)\n        self.assertEqual(lateral_surface_area_cuboid(1, 2, 0), 2)\n        self.assertEqual(lateral_surface_area_cuboid(1, 2, -3), 0)\n        self.assertEqual(lateral_surface_area_cuboid(1, 2, 3.5), 6)\n        self.assertEqual(lateral_surface_area_cuboid(1, 2, 3.99), 6)\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)",
    "def area(a,b,c):\n    return 2*(a*b + b*c + c*a)\n\ndef lateral_area(a,b,c):\n    return area(a,b,c)\n\nif __name__ == '__main__':\n    a,b,c = list(map(int, input(\"Enter the length of the sides a,b,c: \").split()))\n    print(\"Lateral surface area is:\", lateral_area(a,b,c))",
    "def find_lateral_surface_area(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\nif __name__ == \"__main__\":\n    length = float(input(\"Enter length: \"))\n    breadth = float(input(\"Enter breadth: \"))\n    height = float(input(\"Enter height: \"))\n    print(find_lateral_surface_area(length,breadth,height))",
    "from math import sqrt\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Returns lateral surface area of cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(2, 2, 2))",
    "def surface_area(height, width, depth):\n    return (2 * height * width) + (2 * depth * width) + (2 * height * depth)\n\n\nif __name__ == \"__main__\":\n    print(surface_area(10, 10, 10))",
    "def surface_area(length, breadth, height):\n    \"\"\"\n    Return the lateral surface area of the cuboid\n    \"\"\"\n    return 2*(length*breadth + breadth*height + length*height)\n\nif __name__ == '__main__':\n    print(\"Area of cuboid is\", surface_area(5, 4, 3))",
    "from math import pow, sqrt\n\ndef lateral_surface_area(a, b, c):\n    \"\"\"\n    a: float - length of one side of cuboid\n    b: float - length of second side of cuboid\n    c: float - length of third side of cuboid\n\n    returns: float - lateral surface area\n    \"\"\"\n    return 2 * (a * b + b * c + a * c)\n\n\n\nprint(lateral_surface_area(1, 2, 3))\nprint(lateral_surface_area(1, 1, 1))\nprint(lateral_surface_area(3, 2, 1))",
    "def cuboid_surface(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\n\nprint(cuboid_surface(4, 5, 3))",
    "def lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\n\ndef main():\n    a = int(input(\"Enter length: \"))\n    b = int(input(\"Enter width: \"))\n    c = int(input(\"Enter height: \"))\n    print(f\"Lateral surface area: {lateral_surface_area(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef lateral_surface_area(height: int, width: int, depth: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param height: height of the cuboid\n    :param width: width of the cuboid\n    :param depth: depth of the cuboid\n    :return: lateral surface area of cuboid\n    \"\"\"\n    return 2 * (width * depth + height * depth + width * height)\n\n\ndef main():\n    height, width, depth = map(int, input(\"Enter height, width and depth: \").split())\n    print(lateral_surface_area(height, width, depth))\n\n\nif __name__ == '__main__':\n    main()",
    "def lateral_surface_area(l, b, h):\n    return 2 * (l * b + b * h + l * h)\n\nif __name__ == '__main__':\n    l, b, h = map(int, input().split())\n    print(lateral_surface_area(l, b, h))",
    "def cuboid_area(a, b, c):\n    return (2*(a*b + b*c + c*a))\n\n\nif __name__ == \"__main__\":\n    a, b, c = [int(x) for x in input().split()]\n    print(cuboid_area(a, b, c))",
    "def cuboid_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nprint(cuboid_surface_area(1, 2, 3))\nprint(cuboid_surface_area(1, 2, 2))\nprint(cuboid_surface_area(1, 1, 1))",
    "from math import sqrt\n\n\ndef surface_area(width: int, length: int, height: int) -> float:\n    \"\"\"\n    This function calculates the lateral surface area of a cuboid.\n\n    >>> surface_area(1, 2, 3)\n    12.0\n    >>> surface_area(1, 1, 1)\n    6.0\n    >>> surface_area(3, 2, 1)\n    18.0\n    >>> surface_area(3, 2, 1)\n    18.0\n    >>> surface_area(3, 2, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height must be greater than or equal to 0\n    >>> surface_area(-1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Width must be greater than or equal to 0\n    >>> surface_area(1, -2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length must be greater than or equal to 0\n    \"\"\"\n    if width < 0:\n        raise ValueError(\"Width must be greater than or equal to 0\")\n    elif length < 0:\n        raise ValueError(\"Length must be greater than or equal to 0\")\n    elif height < 0:\n        raise ValueError(\"Height must be greater than or equal to 0\")\n    return 2 * (width * length + length * height + width * height)\n\n\ndef surface_area_sqrt(width: int, length: int, height: int) -> float:\n    \"\"\"\n    This function calculates the lateral surface area of a cuboid.\n\n    >>> surface_area_sqrt(1, 2, 3)\n    12.0\n    >>> surface_area_sqrt(1, 1, 1)\n    6.0\n    >>> surface_area_sqrt(3, 2, 1)\n    18.0\n    >>> surface_area_sqrt(3, 2, 1)\n    18.0\n    >>> surface_area_sqrt(3, 2, 0)\n    Traceback (",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * height + width * height)",
    "def surface_area(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\ndef surface_area_no_return(l,b,h):\n    return 2*(l*b+b*h+h*l)",
    "def lateral_surface_area(a, b, c):\n    return 2 * (a * b + b * c + a * c)",
    "from math import sqrt\n\ndef lateral_surface_area(l,b,h):\n    return 2*(l*b + b*h + h*l)\n\nprint(lateral_surface_area(5, 5, 5))\n\ndef lateral_surface_area_v2(l, b, h):\n    return 2 * (l*b + b*h + h*l)\n\nprint(lateral_surface_area_v2(5, 5, 5))",
    "def lateral_surface_area(length, width, height):\n    return (2*(length*width) + 2*(width*height) + 2*(length*height))\n\nprint(lateral_surface_area(2, 2, 2))\nprint(lateral_surface_area(1, 2, 3))\nprint(lateral_surface_area(1, 2, 1))",
    "def lateral_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)",
    "from math import pow, sqrt\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    This function calculates the lateral surface area of a cuboid.\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\ndef main():\n    length = float(input(\"Enter length: \"))\n    width = float(input(\"Enter width: \"))\n    height = float(input(\"Enter height: \"))\n    print(lateral_surface_area(length, width, height))\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}