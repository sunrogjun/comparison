{
  "problem": {
    "task_id": "MBPP/491",
    "prompt": "Write a function to find the sum of geometric progression series.",
    "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
    "test_list": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ],
    "challenge_test_list": [],
    "problem_id": 480
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nThe function should return the sum till nth term where n is the input.\nHints:\nUse ** operator to find power of a number.\n\n\"\"\"",
    "def g_series(n, r):\n    return (n * (2 * r - n + 1) / (r + 1))\n\nprint(g_series(5, 3))",
    "def sum_of_gp(a, r, n):\n    return (a * (1 - r ** n)) / (1 - r)\n\n\ndef main():\n    a = int(input(\"Enter the first value of the GP series: \"))\n    r = int(input(\"Enter the common ratio of the GP series: \"))\n    n = int(input(\"Enter the number of terms: \"))\n\n    print(sum_of_gp(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def gp_sum(n, r):\n    return (n/2)*(2*r**n-1)\n\nprint(gp_sum(11, 2))",
    "def sum_gp(a, r, n):\n    return (a*(1 - r**n)/(1 - r))\n\nif __name__ == '__main__':\n    a = float(input())\n    r = float(input())\n    n = float(input())\n    print(sum_gp(a, r, n))",
    "def sum_of_gp(n, r):\n    \"\"\"\n    n: int - number of terms\n    r: float - common ratio\n    return: int - sum of geometric progression\n    \"\"\"\n    return (n * (1 - r ** n) / (1 - r))\n\nprint(sum_of_gp(10, 0.5))",
    "# This is the function which will return the sum of\n# geometric progression series\ndef gpSum(n):\n    num = 1\n    sum = 0\n    for i in range(1, n + 1):\n        sum += num\n        num = num * (2 * (i + 1) - 1) / (i - 1)\n    return sum\n\n\n# Driver Code\nn = 5\nprint(\"Sum of first \" + str(n) + \" term of Geometric Progression is \" +\n      str(gpSum(n)))\n\n\n\"\"\"\nSample I/O:\n\nEnter the value of n: 5\nSum of first 5 term of Geometric Progression is 91.66666666666667\n\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nThe function should return the sum.\nExample:\nInput: 4\nOutput: 20\n\"\"\"\n\ndef sum_of_gp(n):\n    \"\"\"\n    :param n: int - number\n    return: int - sum of gp\n    \"\"\"\n    return n*(2**(n-1))\n\nprint(sum_of_gp(4))",
    "def gp_sum(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\na = int(input(\"Enter first term: \"))\nr = float(input(\"Enter common ratio: \"))\nn = int(input(\"Enter number of terms: \"))\nprint(\"Sum of the series:\", gp_sum(a, r, n))",
    "def geometric_sum(a, r):\n    sum = 0\n    n = 1\n    while True:\n        sum += a * r ** n\n        if r ** n == 1:\n            break\n        n += 1\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(geometric_sum(1, 2))",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nSn=ar^(n-1)\n\nHints:\nIn case of geometric progression, value of r^(n-1) is same for all terms.\nUse exponentiation operator ** in python\n\n\"\"\"",
    "def geometric_progression_sum(a, r, n):\n    \"\"\"\n    :param a: first term\n    :param r: common ratio\n    :param n: number of terms\n    :return: sum of geometric progression\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += a * (1 - r ** i) / (1 - r)\n    return sum\n\n\nif __name__ == '__main__':\n    a = int(input('Enter the first term: '))\n    r = float(input('Enter the common ratio: '))\n    n = int(input('Enter the number of terms: '))\n    print(geometric_progression_sum(a, r, n))",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nS = a + (a*r) + (a*r2) + (a*r3) + .... + (a*r^n)\nHere a is the first element, r is the common ratio, and n is the last element.\nReturn sum of this series upto nth term\nFor example:\nsumGeometricSeries(2.0, 2.0, 10) return 142.0\nsumGeometricSeries(5.0, 0.5, 5) returns 20.0\nsumGeometricSeries(10.0, 0.25, 5) returns 127.5\nHints:\nUse Exponential Series to solve this problem.\n\n\"\"\"\ndef sumGeometricSeries(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\nprint sumGeometricSeries(2.0, 2.0, 10)\nprint sumGeometricSeries(5.0, 0.5, 5)\nprint sumGeometricSeries(10.0, 0.25, 5)",
    "def sum_geometric_progression(a: float, r: float, n: int) -> float:\n    \"\"\"\n    >>> sum_geometric_progression(2, 2, 10)\n    1024.0\n    >>> sum_geometric_progression(1, 1, 10)\n    55.0\n    >>> sum_geometric_progression(1, 1, 1)\n    1.0\n    >>> sum_geometric_progression(1, 1, 0)\n    0.0\n    \"\"\"\n    return a * (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_geometric_progression(a: int, r: int, n: int) -> float:\n    \"\"\"\n    >>> sum_geometric_progression(1, 2, 3)\n    9.0\n    >>> sum_geometric_progression(1, 2, 4)\n    17.0\n    >>> sum_geometric_progression(1, 10, 5)\n    31.0\n    >>> sum_geometric_progression(0, 2, 3)\n    0.0\n    >>> sum_geometric_progression(1, 0, 3)\n    1.0\n    >>> sum_geometric_progression(1, 2, 0)\n    1.0\n    \"\"\"\n    if n == 0:\n        return 0.0\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nSn = ar + (n - 1) * r\nwhere a is the first term, r is the common ratio, and n is the number of terms.\nExample:\nInput: 4, 2\nOutput: 20\nSolution:\n1 + 2 + 4 + 8 = 20\n\"\"\"\n\n\ndef sum_gp(a, r):\n    n = 0\n    total = 0\n    while a != 0:\n        a = a * r\n        total += a\n        n += 1\n    return total\n\n\ndef main():\n    print(sum_gp(4, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_of_gp(n: int, r: float) -> float:\n    \"\"\"\n    >>> sum_of_gp(6, 1.5)\n    21.0\n    >>> sum_of_gp(5, 0.5)\n    3.0\n    \"\"\"\n    return n * (2 * r - n * r) / (2 * r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_progression(n, r):\n    return (n * ((1 - r) ** (n - 1))) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_progression(5, 0.5))",
    "def geometric_sum(n: int, r: int) -> int:\n    \"\"\"\n    n: first term\n    r: common ratio\n    \"\"\"\n    return int(((1 - r ** n) / (1 - r)) * r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_sum(4, 0.5))",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nSn = ar*(1 - r^n)/(1 - r)\nwhere:\nar = first number\nr = common ratio\nn = number of terms\n\nHints:\nLet S1 = ar\nLet Sn = ar * r^n\n\nWe get, Sn+1 = Sn + S1\n\nS1 + Sn = 2*ar\n\nWe get, ar*(1-r^n)/(1-r) = 2*ar\n\nWe get, 1-r^n = 2 - 1\n\nWe get, r^n = 1\n\nWe get, r = 1\n\nSo, there is only one term in the series. The series becomes:\nSn = ar\n\nWe get, Sn = ar + ar + ar +.........+ ar\n\nWe get, Sn = 5 terms.\n\nHence, n = 5\n\n\nIn simple terms, we need to find the number of terms in the given series.\n\nSolution:\n\nThe number of terms in a geometric progression is:\nn = logr/log10 + 1\n\"\"\"\ndef sum(ar, r):\n    n = (log(r, 10))+1\n    Sn = ar*(pow(r, n)-1)/(r-1)\n    return Sn",
    "def sum_of_gp(n):\n    # Calculate the sum of GP using the formula\n    return (n * (2 * n - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_gp(5))",
    "# O(1) Time | O(1) Space\ndef geometricProgressionSum(n, r):\n    return (1 - r**n) / (1 - r)\n\n\nprint(geometricProgressionSum(5, 0.5))",
    "def sum_geometric_progression(a, r, n):\n    \"\"\"\n    >>> sum_geometric_progression(1, 2, 5)\n    61\n    >>> sum_geometric_progression(1, 2, 10)\n    385\n    >>> sum_geometric_progression(10, 0.5, 5)\n    125.0\n    \"\"\"\n    return (a*(1-r**n))/(1-r)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_gp(n: int, r: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n * (2 * r - n) * r) // 2\n\n\nif __name__ == \"__main__\":\n    print(sum_gp(5, 2))",
    "def find_sum(n):\n    return (1 / 2) * (2 * n + 1) * (2 ** n - 1)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(find_sum(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def geometric_progression(n, r):\n    \"\"\"\n    :param n: first term of series\n    :param r: common ratio of series\n    :return: sum of series\n    \"\"\"\n    return (n/r)*(1-(1/r)**(n-1))\n\n\ndef main():\n    print(geometric_progression(1, 2))\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_geometric_progression(a, r, n):\n    sum = 0\n    for i in range(n):\n        sum += a * pow(r, i)\n    return sum\n\n\ndef test_sum_geometric_progression():\n    \"\"\"\n    >>> test_sum_geometric_progression()\n    True\n    \"\"\"\n    assert sum_geometric_progression(1, 2, 4) == 16\n    assert sum_geometric_progression(2, 2, 3) == 12\n    assert sum_geometric_progression(2, 2, 4) == 20\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "def geometric_series_sum(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return (a - a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    assert geometric_series_sum(1, 2, 3) == 7",
    "def gp_series(r, n):\n    return (1-r**n)/(1-r)\n\n\nif __name__ == '__main__':\n    print(\"Please input the r value and n value of GP series\")\n    r = float(input(\"r: \"))\n    n = int(input(\"n: \"))\n\n    print(gp_series(r, n))",
    "def sum_of_geometric_progression(n, r):\n    return (n * (2 * r - n) * (2 * r - n + 1)) / 6\n\n\nif __name__ == \"__main__\":\n    print(sum_of_geometric_progression(5, 3))",
    "def sum_of_geometric_progression(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Returns the sum of geometric progression series.\n    >>> sum_of_geometric_progression(2, 3, 5)\n    42\n    >>> sum_of_geometric_progression(2, 2, 5)\n    32\n    >>> sum_of_geometric_progression(2, 3, 1)\n    2\n    >>> sum_of_geometric_progression(2, 0, 5)\n    0\n    >>> sum_of_geometric_progression(2, 1, 5)\n    10\n    >>> sum_of_geometric_progression(2, 1, 0)\n    0\n    \"\"\"\n    if r == 1:\n        return a * n\n    return (a * (1 - pow(r, n))) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_geometric_progression(a, r, n):\n    return (a / (1 - r)) * ((1 - r ** n) / (1 - r))\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    r = int(input(\"Enter r: \"))\n    n = int(input(\"Enter n: \"))\n    print(sum_geometric_progression(a, r, n))",
    "def sum_of_geometric_progression(n: int, r: int) -> int:\n    \"\"\"\n    >>> sum_of_geometric_progression(5, 3)\n    29\n    \"\"\"\n    return (1 - r ** n) // (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_geometric_progression(a, r, n):\n    return (a / (1 - r)) * (1 - pow(r, n)) / (1 - r)\n\n\ndef main():\n    a, r, n = map(int, input(\"Enter a, r and n: \").split())\n    print(sum_geometric_progression(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nThe sum of geometric progression series with first term a, common ratio r and number of terms n is calculated as:\nS= a + ar + ar2 + ar3 + ... + arn-1\nSolution:\na = 1\nr = 2\nn = 10\na = 10\nsum = a*(1-(r**n)/(1-r))/(1-r)\n\n\"\"\"\ndef sum_geometric_progression(a, r, n):\n    return a*(1-(r**n)/(1-r))/(1-r)",
    "def sum_geometric_progression(n, r):\n    return (n * (2*r - n) * (n + 1) // (r - 1)) / 2\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms in the GP: \"))\n    r = int(input(\"Enter the common ratio of the GP: \"))\n    print(f\"Sum of the GP: {sum_geometric_progression(n, r)}\")",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nS = a + (a*r) + (a*r2) + (a*r3) + ...\nwhere a is the first element, r is the common ratio and n is the number of terms.\n\nSolution:\nS = a*(1-r**n)/(1-r)\nS = a*(1-r**n)\nS = a*(1-r**n)/(1-r)\n\"\"\"",
    "def sum_geometric_progression(a, r, n):\n    sum = 0\n    for i in range(n):\n        sum += a * (r ** i)\n    return sum\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first number: \"))\n    r = int(input(\"Enter the common ratio: \"))\n    n = int(input(\"Enter the number of terms: \"))\n    print(sum_geometric_progression(a, r, n))",
    "def geometric_series(first_term: int, common_ratio: int, number_of_terms: int) -> int:\n    \"\"\"\n    >>> geometric_series(1, 2, 3)\n    9\n    >>> geometric_series(1, 2, 1)\n    2\n    >>> geometric_series(1, 3, 5)\n    32\n    >>> geometric_series(1, 4, 2)\n    11\n    >>> geometric_series(1, 3, 4)\n    22\n    >>> geometric_series(1, 2, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: number of terms can't be zero\n    >>> geometric_series(1, 2, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: number of terms can't be negative\n    >>> geometric_series(1, 2, 1.5)\n    Traceback (most recent call last):\n        ...\n    AssertionError\n    \"\"\"\n    assert isinstance(number_of_terms, int) and number_of_terms >= 0, (\n        \"number of terms should be a non-negative integer\"\n        if number_of_terms < 0\n        else \"number of terms should be a non-zero integer\"\n    )\n    assert isinstance(common_ratio, int), \"common ratio should be an integer\"\n\n    if number_of_terms == 0:\n        raise ValueError(\"number of terms can't be zero\")\n\n    if number_of_terms < 0:\n        raise ValueError(\"number of terms can't be negative\")\n\n    return (first_term - common_ratio ** number_of_terms) / (1 - common_ratio)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_gp(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\na = int(input(\"Enter first term: \"))\nr = float(input(\"Enter common ratio: \"))\nn = int(input(\"Enter number of terms: \"))\n\nprint(f\"Sum of series: {sum_gp(a, r, n)}\")\n\n\"\"\"\nTime complexity: O(1)\nSpace complexity: O(1)\n\nTestcase 1:\nEnter first term: 2\nEnter common ratio: 2\nEnter number of terms: 5\nSum of series: 40.0\n\nTestcase 2:\nEnter first term: 10\nEnter common ratio: 0.5\nEnter number of terms: 3\nSum of series: 25.0\n\"\"\"",
    "def sum_gp(a, r, n):\n    return (a/2)*(((1-r**n)/(1-r)))\n\n\nprint(sum_gp(10, 0.5, 6))",
    "def gp_sum(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\nif __name__ == \"__main__\":\n    a, r, n = map(float, input().split())\n    s = gp_sum(a, r, n)\n    print(s)",
    "def sum_of_gp(a, n):\n    return (a * (1 - (n ** 2) / (2 * (n + 1)))) / (1 - n)\n\n\ndef main():\n    a = float(input(\"Enter the first term of GP: \"))\n    n = float(input(\"Enter the common ratio: \"))\n    print(f\"Sum of the series: {sum_of_gp(a, n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_geometric_progression(a, r, n):\n    return (a * (1 - r ** n)) / (1 - r)\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first term of GP: \"))\n    r = float(input(\"Enter common ratio: \"))\n    n = int(input(\"Enter number of terms: \"))\n    print(\"Sum of GP is: {}\".format(sum_geometric_progression(a, r, n)))",
    "def g_progression_sum(a, r, n):\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first term of G.P series : \"))\n    r = float(input(\"Enter common ratio of G.P series : \"))\n    n = int(input(\"Enter number of terms : \"))\n\n    print(f\"Sum of {n} terms of G.P is : {g_progression_sum(a, r, n)}\")",
    "def sum_of_gp(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first value of the GP series: \"))\n    r = float(input(\"Enter the common ratio of the GP series: \"))\n    n = int(input(\"Enter the number of terms to be added: \"))\n    print(sum_of_gp(a, r, n))",
    "def sum_gp(a, r, n):\n    \"\"\"\n    a: first term\n    r: common ratio\n    n: number of terms\n    \"\"\"\n    return (a * (1 - r**n)) / (1 - r)\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the first term: \"))\n    r = float(input(\"Enter the common ratio: \"))\n    n = int(input(\"Enter the number of terms: \"))\n    print(sum_gp(a, r, n))",
    "def geometric_progression(a, r, n):\n    \"\"\"\n    >>> geometric_progression(2, 2, 10)\n    202.0\n    >>> geometric_progression(1, 1, 1)\n    1.0\n    \"\"\"\n    total = a\n    for i in range(1, n):\n        total += a * (r ** i)\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def findSum(n):\n    # Calculate the sum of the series\n    sum = (n * (2 * n - 1)) / 2\n\n    return sum\n\n# Driver code\nprint(findSum(5))",
    "def sum_of_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    The formula for the sum of n terms of a geometric progression is\n    a(1 - r^n)/(1 - r)\n    \"\"\"\n    return a * (1 - pow(r, n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_gp(1, 2, 2))",
    "def sum_gp(n, r):\n    return (n * (2 * r - n) * (2 * r - n + 1)) // 6\n\n\nif __name__ == \"__main__\":\n    print(sum_gp(5, 2))",
    "def sum_of_gp(n: int, a: int, r: int) -> int:\n    \"\"\"\n    Return the sum of geometric progression series.\n\n    >>> sum_of_gp(5, 2, 3)\n    31\n    >>> sum_of_gp(6, 5, 2)\n    55\n    >>> sum_of_gp(4, 2, 4)\n    28\n    \"\"\"\n    return int((n / 2) * (2 * a + (n - 1) * r))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_of_gp(n: int, r: int) -> int:\n    \"\"\"\n    This function takes two inputs, first input is the number of terms (n)\n    and second input is the common ratio (r).\n    It returns the sum of the series.\n    \"\"\"\n    return (n * (2 * r - n * r)) / (1 - r)\n\n\ndef test_sum_of_gp() -> None:\n    \"\"\"\n    >>> test_sum_of_gp()\n    \"\"\"\n    assert sum_of_gp(4, 2) == 18\n    assert sum_of_gp(5, 2) == 29\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def sum_gp(first_term, ratio, terms):\n    return (first_term / ratio + first_term) * (1 - ratio ** terms) / (1 - ratio)\n\n\nif __name__ == \"__main__\":\n    print(sum_gp(2, 2, 10))",
    "def sum_of_gp(a, r, n):\n    return ((a*(1-r**n))/(1-r))\n\nprint(sum_of_gp(1, 2, 5))\nprint(sum_of_gp(1, 2, 100))\nprint(sum_of_gp(1, 10, 100))\nprint(sum_of_gp(1, 10, 200))",
    "def sum_of_geometric_progression(a, r, n):\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    a, r, n = map(int, input().split())\n    print(sum_of_geometric_progression(a, r, n))",
    "def sum_of_gp(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nif __name__ == \"__main__\":\n    a, r, n = map(int, input().split())\n    print(sum_of_gp(a, r, n))",
    "def sum_of_gp(first, last):\n    \"\"\"\n    >>> sum_of_gp(1, 10)\n    55.0\n    \"\"\"\n    return (first + last) * (first ** (last - 1) - first ** (last - 2)) / (first - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_geometric_progression(n: int, r: int) -> int:\n    \"\"\"\n    Returns the sum of a geometric progression.\n    >>> sum_geometric_progression(10, 2)\n    33\n    >>> sum_geometric_progression(10, 0.1)\n    10.000000000000001\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if r == 0:\n        raise ValueError(\"r must be a positive non-zero number\")\n\n    if n == 1:\n        return 1\n\n    return n * ((1 - pow(r, n)) / (1 - r))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_geometric_progression(a, r, n):\n    \"\"\"\n    >>> sum_geometric_progression(1, 2, 5)\n    60\n    >>> sum_geometric_progression(1, 2, 2)\n    3\n    >>> sum_geometric_progression(1, 10, 5)\n    1100\n    \"\"\"\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_sum(a, n):\n    if n == 1:\n        return a\n    else:\n        return a * (1.0 / (1.0 - 1.0 / n))\n\n\nif __name__ == \"__main__\":\n    print(geometric_sum(2, 3))",
    "def geometric_progression(n, a, r):\n    \"\"\"\n    Returns sum of n terms of geometric progression.\n    :param n: number of terms.\n    :param a: first term.\n    :param r: common ratio.\n    :return: sum of n terms of geometric progression.\n    >>> geometric_progression(4, 1, 3)\n    14\n    >>> geometric_progression(4, 1, 2)\n    12\n    >>> geometric_progression(4, 1, 2.5)\n    15.625\n    >>> geometric_progression(1, 1, 1)\n    1\n    >>> geometric_progression(1, 1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: r should be greater than 0\n    >>> geometric_progression(-4, 1, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: n should be greater than 0\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be greater than 0\")\n    if r <= 0:\n        raise ValueError(\"r should be greater than 0\")\n\n    sum = (a * (1 - pow(r, n))) / (1 - r)\n\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nThe formula for geometric progression is:\na = the base of the series\nn = the number of terms in the series\na1 + a2 + a3 + ... + an = (a1 - an) * ((a1-1)/a)\n\nExample:\nInput: 1, 3, 4\nOutput: 19\n\"\"\"\n\ndef geometric_progression(a,n):\n    return (a-n) * ((a-1)/a)\n\nprint(geometric_progression(1,3))",
    "def sum_gp(n, r):\n    return (n*(2*r/n-1))/2",
    "# Iterative Solution\ndef sum_geometric_progression_iterative(n, r):\n    sum = 0\n    for i in range(n):\n        sum += pow(r, i)\n\n    return sum\n\n\n# Recursive Solution\ndef sum_geometric_progression_recursive(n, r):\n    if n == 0:\n        return 0\n\n    return pow(r, n) + sum_geometric_progression_recursive(n - 1, r)\n\n\nif __name__ == \"__main__\":\n    print(sum_geometric_progression_iterative(5, 2))\n    print(sum_geometric_progression_recursive(5, 2))",
    "def gp_sum(n, r):\n    return (n*(2*r-n)*(2*r+n))/(6*r)\n\nif __name__ == '__main__':\n    print(gp_sum(5, 2))",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nSn=ar^(n-1)\n\nHints:\nUsing for loop to iterate through series\n\n\"\"\"",
    "def sum_geometric_progression(n: int, r: int) -> int:\n    \"\"\"\n    :param n: Number of terms.\n    :param r: Ratio between consecutive terms.\n    :return: Sum of geometric progression.\n    \"\"\"\n    return (n * (2 * r - n) * r) // 2\n\n\nif __name__ == \"__main__\":\n    assert sum_geometric_progression(3, 2) == 8",
    "def gp_sum(a, r, n):\n    return (n/2)*(2*a+(n-1)*r)\n\nprint(gp_sum(3, 2, 100))\n\n\"\"\"\nWrite a function to find the sum of arithmetic progression series.\n\"\"\"\n\ndef ap_sum(a, d, n):\n    return (n/2)*(2*a+(n-1)*d)\n\nprint(ap_sum(3, 2, 100))\n\n\"\"\"\nWrite a function to find the sum of arithmetic and geometric progression series.\n\"\"\"\n\ndef sum_ap_gp(a, r, n):\n    return gp_sum(a, r, n) + ap_sum(a, r, n)\n\nprint(sum_ap_gp(3, 2, 100))\n\n\"\"\"\nWrite a function to find the sum of the series: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\n\"\"\"\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10))\n\n\"\"\"\nWrite a function to find the sum of the series: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, \u2026\n\"\"\"\n\ndef series_sum(n):\n    return n * (n + 1) / 2\n\nprint(series_sum(10))\n\n\"\"\"\nWrite a function to find the sum of the series: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, \u2026\n\"\"\"\n\ndef series_sum_2(n",
    "def sum_geometric_progression(a, r, n):\n    \"\"\"\n    >>> sum_geometric_progression(1, 2, 10)\n    1023.0\n    >>> sum_geometric_progression(1, 2, 11)\n    1023.5\n    >>> sum_geometric_progression(1, 10, 5)\n    115.0\n    >>> sum_geometric_progression(0, 2, 10)\n    0.0\n    >>> sum_geometric_progression(1, 1, 10)\n    5.0\n    >>> sum_geometric_progression(0, 0, 10)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    \"\"\"\n    return (a / (1 - r)) * (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is: a + ar + ar2 + ar3 + ... + arn-1\n\nHints:\nIn case of geometric progression, each term is multiplied by r.\n\"\"\"",
    "def geometric_sum(n, r):\n    return (n * (1 - pow(r, n))) / (1 - r)\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    r = float(input(\"Enter r: \"))\n    print(\"Sum is:\", geometric_sum(n, r))",
    "def geometric_sum(n: int, r: float) -> float:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_sum(3, 0.5))",
    "# O(1)\ndef geometric_progression(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nprint(geometric_progression(1, 2, 100))",
    "def sum_of_geometric_progression(a, r, n):\n    return (a*(1 - r**n))/(1 - r)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number of the GP series: \"))\n    r = int(input(\"Enter the common ratio of the GP series: \"))\n    n = int(input(\"Enter the number of terms of the GP series: \"))\n    print(sum_of_geometric_progression(a, r, n))",
    "def sum_of_geometric_progression(r: int, n: int) -> int:\n    \"\"\"\n    >>> sum_of_geometric_progression(3,100)\n    22837792.0\n    >>> sum_of_geometric_progression(2,10)\n    102.0\n    >>> sum_of_geometric_progression(2,3)\n    8.0\n    >>> sum_of_geometric_progression(2,4)\n    14.0\n    >>> sum_of_geometric_progression(10,100)\n    145026640.0\n    >>> sum_of_geometric_progression(1,10)\n    55.0\n    >>> sum_of_geometric_progression(1,2)\n    1.0\n    >>> sum_of_geometric_progression(1,3)\n    1.0\n    >>> sum_of_geometric_progression(0,10)\n    0.0\n    \"\"\"\n    return (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def geometric_progression(n: int, r: float) -> float:\n    \"\"\"\n    Return the sum of geometric progression series.\n    >>> geometric_progression(n=3, r=2)\n    11.0\n    >>> geometric_progression(n=5, r=3)\n    49.0\n    >>> geometric_progression(n=3, r=-2)\n    0.0\n    \"\"\"\n    return (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_progression_sum(n: int, r: float) -> float:\n    \"\"\"\n    >>> geometric_progression_sum(3, 2)\n    9.0\n    >>> geometric_progression_sum(10, 2)\n    242.0\n    >>> geometric_progression_sum(10, 2.5)\n    197.92\n    >>> geometric_progression_sum(5, -1)\n    -5.0\n    >>> geometric_progression_sum(3, 0)\n    0.0\n    >>> geometric_progression_sum(3, 1)\n    3.0\n    >>> geometric_progression_sum(1, 0)\n    1.0\n    \"\"\"\n    return (1 - r ** n) / (1 - r) if r < 1 else n * r\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_sum(n, r):\n    sum = 0\n    for i in range(n):\n        sum += pow(r, i)\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(geometric_sum(5, 2))",
    "def sum_of_gp(n,r):\n    if n==0:\n        return 0\n    if r==1:\n        return n*(n-1)/2\n    return n*(2*r-n+1)/(r-1)\n\nprint(sum_of_gp(5,2))\nprint(sum_of_gp(5,4))\nprint(sum_of_gp(5,10))\n\n# Time complexity: O(1)\n# Space complexity: O(1)",
    "def geometric_progression(n, r):\n    return (1 - r**n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    res = geometric_progression(4, 0.5)\n    print(res)",
    "def sum_of_geometric_progression(a, r, n):\n    if(a==0 and r==0):\n        return 0\n    else:\n        sum=a*((1-(r**n))/(1-r))\n        return sum\n\nif __name__ == '__main__':\n    a=int(input(\"Enter the first number of the geometric progression: \"))\n    r=int(input(\"Enter the common ratio of the geometric progression: \"))\n    n=int(input(\"Enter the number of terms in the geometric progression: \"))\n    result=sum_of_geometric_progression(a, r, n)\n    print(\"The sum of the geometric progression is:\",result)",
    "def sum_gp(a: float, r: float, n: int) -> float:\n    \"\"\"\n    >>> sum_gp(2, 6, 10)\n    242.0\n    \"\"\"\n    return (a * (1.0 - r ** n)) / (1.0 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_gp(a, n):\n    return (a * ((1 - n) / (1 - r))) / (1 - r)\n\n\nr = float(input())\na = float(input())\nn = float(input())\nprint(sum_gp(a, n))",
    "def sum_gp(n: int, r: int) -> int:\n    \"\"\"\n    :param: n number of terms in series\n    :param: r common ratio\n    :return: sum of terms\n    \"\"\"\n    return (n * (2 * r - n * r)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(sum_gp(6, 2))",
    "def sum_of_gp(n, a):\n    return (a * (1 - n) / (1 - a))\n\n\nprint(sum_of_gp(3, 1.5))",
    "def sum_geometric_progression(a: int, r: int, n: int) -> float:\n    \"\"\"\n    >>> sum_geometric_progression(1, 2, 4)\n    17.0\n    >>> sum_geometric_progression(1, 2, 5)\n    25.0\n    >>> sum_geometric_progression(1, 10, 5)\n    115.0\n    >>> sum_geometric_progression(0, 2, 4)\n    0.0\n    >>> sum_geometric_progression(0, 10, 4)\n    0.0\n    \"\"\"\n    return (a / (1 - r)) * ((1 - r ** n) / (1 - r))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_progression_sum(n: int, a1: int, q: int):\n    return (n / 2) * (2 * a1) * (1 - q ** n) / (1 - q)\n\n\nif __name__ == \"__main__\":\n    assert geometric_progression_sum(1, 1, 2) == 1\n    assert geometric_progression_sum(3, 1, 2) == 7\n    assert geometric_progression_sum(5, 1, 3) == 35\n    assert geometric_progression_sum(6, 1, 5) == 55",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nS=a+ar+ar2+...+arn\nwhere,\na: first number in geometric progression series\nr: common ratio\nn: last term of geometric progression series\n\nHints:\nUsing for loop check the given condition.\n\n\"\"\"",
    "def sum_gp(n: int, r: int) -> int:\n    \"\"\"\n    Return the sum of the first n terms of a geometric progression.\n    >>> sum_gp(1, 10)\n    10\n    >>> sum_gp(5, 2)\n    42\n    >>> sum_gp(3, 1)\n    4\n    >>> sum_gp(5, -2)\n    0\n    \"\"\"\n\n    if n == 1:\n        return r\n\n    return r + (n - 1) * sum_gp(n - 1, r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_gp(a, r, n):\n    \"\"\"\n    Return the sum of geometric progression series.\n\n    >>> sum_gp(1, 1, 10)\n    55.0\n    >>> sum_gp(1, 2, 10)\n    385.0\n    >>> sum_gp(1, 10, 5)\n    1125.0\n    >>> sum_gp(0, 2, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: a cannot be zero.\n    >>> sum_gp(1, -2, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: r should be positive\n    >>> sum_gp(1, 2, -10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n should be positive\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero.\")\n    if r < 0:\n        raise ValueError(\"r should be positive\")\n    if n < 0:\n        raise ValueError(\"n should be positive\")\n    sum_gp = a * (1.0 - pow(r, n)) / (1.0 - r)\n    return sum_gp\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_of_gp(a, r, n):\n    \"\"\"\n    >>> sum_of_gp(1, 2, 10)\n    1023\n    >>> sum_of_gp(1, 10, 50)\n    233167\n    \"\"\"\n    return (a * (1 - r ** n)) // (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def geometric_progression_sum(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the first term: \"))\n    r = float(input(\"Enter the common ratio: \"))\n    n = float(input(\"Enter the number of terms: \"))\n\n    print(geometric_progression_sum(a, r, n))",
    "def geometric_sum(n: int, r: float) -> float:\n    \"\"\"\n    >>> geometric_sum(1, 1)\n    1.0\n    >>> geometric_sum(2, 1)\n    3.0\n    >>> geometric_sum(3, 1)\n    7.0\n    >>> geometric_sum(4, 1)\n    15.0\n    >>> geometric_sum(5, 1)\n    31.0\n    >>> geometric_sum(6, 1)\n    63.0\n    >>> geometric_sum(7, 1)\n    127.0\n    >>> geometric_sum(10, 1)\n    1023.0\n    >>> geometric_sum(100, 1)\n    1048575.0\n    \"\"\"\n    return (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_of_gp(a, r, n):\n    sum = 0\n    for i in range(n):\n        sum += a * (r ** i)\n\n    return sum\n\n\nprint(sum_of_gp(1, 2, 100))",
    "def sum_of_gp(n, a):\n    return (a / 2) * (2 * n + 1) * (2 ** n - 1)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_gp(4, 2))",
    "\"\"\"Question:\nWrite a function to find the sum of geometric progression series.\nSeries is defined as:\nSn = ar + (n - 1) * r\nwhere a is the first term, r is the common ratio, and n is the number of terms.\n\nExample:\nInput: 4, 2\nOutput: 20\n\"\"\"\n\ndef sum_of_geometric_progression(a, r):\n    \"\"\"\n    :param a: first term\n    :param r: common ratio\n    :return: sum of geometric progression series\n    \"\"\"\n    n = a / r\n    return (n * (a-r))/2\n\nprint(sum_of_geometric_progression(4, 2))",
    "def sum_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    >>> sum_gp(1, 2, 3)\n    17\n    >>> sum_gp(1, 2, 4)\n    20\n    >>> sum_gp(2, 2, 3)\n    32\n    >>> sum_gp(2, 1, 5)\n    80\n    >>> sum_gp(2, 1, 2)\n    7\n    \"\"\"\n\n    return (a * (1 - pow(r, n))) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def sum_of_gp(a, r, n):\n    \"\"\"\n    a: first term\n    r: common ratio\n    n: number of terms\n    \"\"\"\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_gp(2, 2, 100))",
    "def gp_sum(a, r, n):\n    return (a*(1 - pow(r, n)))/(1 - r)\n\n\nprint(gp_sum(1, 2, 3))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}