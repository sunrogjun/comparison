{
  "problem": {
    "task_id": "MBPP/418",
    "prompt": "Write a python function to find the sublist having maximum length.",
    "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
    "test_list": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ],
    "challenge_test_list": [],
    "problem_id": 407
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_length(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return None\n\n    max_len = 1\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        if i - end > max_len:\n            start = end\n            end = i\n        else:\n            end = i\n\n        if i - start + 1 > max_len:\n            start = start\n            end = i\n\n    return arr[start : end + 1]\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 3, 2, 4, 5, 2, 3]) == [1, 3, 2, 4, 5, 2, 3]",
    "from timeit import timeit\n\n\ndef max_length(lst):\n    max_len = len(lst)\n    start, end = 0, 0\n    for i in range(len(lst)):\n        if len(lst[i:]) > max_len:\n            max_len = len(lst[i:])\n            start, end = i, i + max_len - 1\n    return lst[start:end + 1]\n\n\ndef max_length_dp(lst):\n    max_len = 1\n    start, end = 0, 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            max_len += 1\n        else:\n            max_len = 1\n        if max_len > i - start + 1:\n            start = i - max_len + 1\n        end = i\n    return lst[start:end + 1]\n\n\ndef max_length_dp_v2(lst):\n    max_len = 1\n    start, end = 0, 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            max_len += 1\n        else:\n            max_len = 1\n        if max_len > i - start + 1:\n            start = i - max_len + 1\n        end = i\n    return lst[start:end + 1]\n\n\ndef max_length_v2(lst):\n    max_len = 0\n    start, end = 0, 0\n    for i in range(len(lst)):\n        if lst[i] > lst[i - 1]:\n            max_len += 1\n        else:\n            max_len = 1\n        if max_len > i - start + 1:\n            start = i - max_len + 1\n        end = i\n    return lst[start:end + 1]\n\n\nprint(max_length([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))",
    "def max_sublist(lst):\n    max_len = 0\n    max_start = 0\n    max_end = 0\n\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            continue\n        count = 0\n        j = i\n        while j < len(lst) and lst[j] != 0:\n            j += 1\n            count += 1\n        if count > max_len:\n            max_len = count\n            max_start = i\n            max_end = j\n    return lst[max_start : max_end + 1]\n\n\ndef main():\n    lst = [1, 2, 0, 3, 4, 0, 5, 6, 0, 7, 0, 8, 9, 10, 0]\n    print(f\"Max sublist is: {max_sublist(lst)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_length(input_list: List) -> int:\n    \"\"\"\n    Return the maximum length of the sublist.\n    \"\"\"\n    if len(input_list) == 0:\n        return 0\n    max_length_so_far = 0\n    current_max_length = 0\n    for i in input_list:\n        if i == 0:\n            current_max_length = 0\n        else:\n            current_max_length += 1\n        max_length_so_far = max(max_length_so_far, current_max_length)\n    return max_length_so_far\n\n\ndef main():\n    print(max_length([1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0]))\n    print(max_length([1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 1]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef sublist_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    start, max_length = 0, 1\n\n    for end in range(1, len(arr)):\n        if arr[end] == arr[end - 1]:\n            max_length += 1\n        else:\n            if max_length > end - start:\n                start = end - max_length\n                max_length = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert sublist_length([]) == 0\n    assert sublist_length([1, 2, 3, 4]) == 4\n    assert sublist_length([1, 2, 3, 3, 4, 4, 4]) == 4\n    assert sublist_length([1, 1, 1, 1, 1]) == 5",
    "from timeit import default_timer as timer\n\n\ndef sublist_max(array: list) -> list:\n    \"\"\"\n    This function takes in input a list and return the sublist\n    having maximum length.\n\n    >>> sublist_max([1, 3, 2, 4, 5, 6])\n    [3, 2, 4, 5, 6]\n    >>> sublist_max([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n    [1, 4, 1, 5, 9]\n    >>> sublist_max([1])\n    [1]\n    >>> sublist_max([])\n    []\n    \"\"\"\n    if len(array) == 0:\n        return []\n    start, end = 0, 0\n    max_len = 0\n    while end < len(array):\n        counter = 0\n        while counter < len(array) - end:\n            if array[end + counter] == array[start]:\n                counter += 1\n                if counter > max_len:\n                    max_len = counter\n                    start = 0\n            else:\n                if counter > max_len:\n                    max_len = counter\n                    start = 0\n                break\n        end += 1\n    return array[start : start + max_len]\n\n\nif __name__ == \"__main__\":\n    array = [1, 3, 2, 4, 5, 6]\n    print(sublist_max(array))\n    array = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    print(sublist_max(array))\n    array = [1]\n    print(sublist_max(array))\n    array = []\n    print(sublist_max(array))\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    array = [int(item) for item in user_input.split(\",\")]\n    start = timer()\n    print(sublist",
    "from typing import List\n\n\ndef max_length(l: List) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    l_max = [l[0]]\n    max_len = 1\n\n    for i in range(1, len(l)):\n        if l[i] == l_max[-1]:\n            l_max.append(l[i])\n        else:\n            if len(l_max) > max_len:\n                max_len = len(l_max)\n                l_max = [l[i]]\n\n    return l_max\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 2, 3, 4, 5, 4, 3, 2, 1, 5, 6]))",
    "def maximum_length(lst):\n    \"\"\"\n    Finds the sublist having maximum length.\n\n    Args:\n       lst(list): List of integers to find the maximum length sublist of\n    Returns:\n       (int): The length of the maximum length sublist\n    \"\"\"\n    # your function implementation\n    max_length = 0\n    sub_list = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sub_list = lst[i:j]\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length\n\n\ndef main():\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10\n    assert maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,",
    "from typing import List\n\n\ndef sublist_length(list_: List[int]) -> int:\n    \"\"\"\n    Return the length of sublist having maximum length\n    :param list_: List of numbers\n    :return: length of sublist having maximum length\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7])\n    7\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    10\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    10\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    10\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    10\n    >>> sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    10\n    \"\"\"\n    return max(\n        len(list_[i : i + x]) for i in range(len(list_)) for x in range(len(list_), 0, -1)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_len(lst):\n    n = len(lst)\n    if n == 1:\n        return n\n    elif n == 2:\n        if lst[0] == lst[1]:\n            return n\n        else:\n            return 1\n    else:\n        mid = n // 2\n        if lst[mid] > lst[mid+1] and lst[mid] > lst[mid-1]:\n            return mid+1\n        elif lst[mid] < lst[mid+1] and lst[mid] < lst[mid-1]:\n            return max_len(lst[:mid+1])\n        elif lst[mid] > lst[mid+1] and lst[mid] < lst[mid-1]:\n            return max_len(lst[mid:])\n        else:\n            return max(max_len(lst[:mid+1]), max_len(lst[mid:]))\n\n\ndef main():\n    lst = [1, 3, 5, 3, 2, 5, 6, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1]\n    print(max_len(lst))\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef max_sublist(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*2)\n    \"\"\"\n    if not arr:\n        return []\n\n    max_length = 0\n    max_sublist = []\n    for i in range(len(arr)):\n        curr_length = 1\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                curr_length += 1\n            else:\n                break\n\n        if curr_length > max_length:\n            max_length = curr_length\n            max_sublist = arr[i : i + max_length]\n\n    return max_sublist\n\n\nif __name__ == \"__main__\":\n    assert max_sublist([1, 2, 1, 2, 1, 2]) == [2, 2, 2]",
    "def sub_list(l):\n    max_length = 0\n    max_index = 0\n    for i in range(len(l)):\n        temp = 1\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                temp += 1\n        if temp > max_length:\n            max_length = temp\n            max_index = i\n    return l[max_index: max_index + max_length]\n\nprint(sub_list([1, 2, 2, 3, 4, 5, 2, 2, 2]))",
    "def sublist_length(l):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_len = 0\n    max_len_start = 0\n\n    current_len = 0\n    current_start = 0\n\n    for i in range(len(l)):\n        if l[i] == 1:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                max_len_start = current_start\n            current_len = 0\n            current_start = i+1\n    return max_len, max_len_start\n\nprint(sublist_length([1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1]))",
    "from typing import List\n\n\ndef sub_list(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_length, start, end, curr_start = 0, 0, 0, 0\n\n    for i in range(len(arr)):\n        if arr[i] == arr[end] and i != end:\n            end += 1\n        elif arr[i] == arr[end] and i == end:\n            end += 1\n            curr_start = i\n        else:\n            if end - curr_start + 1 > max_length:\n                max_length = end - curr_start + 1\n                start = curr_start\n                end = i\n            curr_start = i\n\n    if end - curr_start + 1 > max_length:\n        max_length = end - curr_start + 1\n        start = curr_start\n        end = i\n\n    return arr[start : end + 1]\n\n\nif __name__ == \"__main__\":\n    print(sub_list([1, 2, 3, 3, 3, 3, 4, 3, 3]))",
    "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_len = 0\n\n    for i in range(len(arr)):\n        length = 0\n        for j in range(i, len(arr)):\n            length += 1\n            if length > max_len:\n                max_len = length\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 4, 2, 1, 5, 2, 3, 4, 2, 2, 2]) == 5",
    "def max_length(l: list) -> list:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n\n    def find_max_length(l: list, start: int, end: int) -> int:\n        if start > end:\n            return 0\n        elif start == end:\n            return 1\n\n        max_length = 0\n        for i in range(start, end + 1):\n            length = find_max_length(l, start, i - 1) + 1\n            if length > max_length:\n                max_length = length\n        return max_length\n\n    return l[find_max_length(l, 0, len(l) - 1)]\n\n\nprint(max_length([1, 3, 2, 4, 5, 2, 2, 2]))",
    "def max_length(arr):\n    if not arr:\n        return None\n\n    max_length = 0\n    max_length_start = 0\n    max_length_end = 0\n\n    for i in range(len(arr)):\n        if max_length < i + 1:\n            max_length = i + 1\n            max_length_start = i\n            max_length_end = i\n        else:\n            for j in range(i, -1, -1):\n                if arr[j] == arr[i]:\n                    max_length = i - j + 1\n                    max_length_start = j\n                    max_length_end = i\n                    break\n\n    return arr[max_length_start:max_length_end + 1]\n\n\nprint(max_length([1, 2, 3, 4, 2, 5, 6, 3, 2, 7, 8, 1, 2, 3, 4, 2, 5, 6, 3, 2, 7, 8, 1, 2, 3, 4, 2, 5, 6, 3, 2, 7, 8]))",
    "from typing import List\n\n\ndef max_len_sublist(list_: List[int]) -> List[int]:\n    \"\"\"\n    Returns a sublist having maximum length from the given list\n    >>> max_len_sublist([1, 3, 4, 2, 5, 6, 7, 10, 8, 9])\n    [3, 4, 2, 5, 6, 7]\n    >>> max_len_sublist([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    >>> max_len_sublist([1])\n    [1]\n    >>> max_len_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    max_len: int = 0\n    start: int = 0\n    end: int = 0\n    for i in range(len(list_) - 1):\n        curr_len: int = 1\n        for j in range(i + 1, len(list_)):\n            if list_[j] == list_[j - 1]:\n                curr_len += 1\n            else:\n                break\n        if curr_len > max_len:\n            max_len = curr_len\n            start = i\n            end = i + curr_len\n    return list_[start : end + 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from random import randint\n\n\ndef max_length(arr):\n    # Find the maximum length of the sublist\n    max_len = 0\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] == arr[j]:\n                max_len = max(max_len, j - i + 1)\n                j += 1\n            else:\n                break\n\n    # Find the sublist\n    sublist = []\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] == arr[j]:\n                j += 1\n            else:\n                break\n        if j - i == max_len:\n            sublist = arr[i:j]\n            break\n\n    return sublist\n\n\ndef main():\n    randomlist = []\n    for _ in range(10):\n        randomlist.append(randint(1, 10))\n    print(randomlist)\n    print(max_length(randomlist))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_len_sublist(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 > max_len:\n                max_len = j - i + 1\n                max_lst = lst[i:j + 1]\n    return max_lst\n\nprint(max_len_sublist([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\nprint(max_len_sublist([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\nprint(max_len_sublist([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\nprint(max_len_sublist([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef max_sublist(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    sub_len = 0\n    max_sub = []\n\n    for i in range(len(arr)):\n        if sub_len == 0:\n            sub_len += 1\n            max_sub.append(arr[i])\n        elif sub_len == 1:\n            if arr[i] != arr[i - 1]:\n                sub_len += 1\n                max_sub.append(arr[i])\n            else:\n                max_sub.append(arr[i])\n        else:\n            if arr[i] == arr[i - 1]:\n                sub_len += 1\n                max_sub.append(arr[i])\n            else:\n                sub_len = 2\n                max_sub = [arr[i], arr[i - 1]]\n\n    return max_sub\n\n\nif __name__ == \"__main__\":\n    assert max_sublist([1, 3, 3, 3, 3, 3, 4, 3, 3]) == [3, 3, 3, 3, 3, 3]\n    assert max_sublist([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]",
    "from timeit import timeit\n\n\ndef max_length(l):\n    if len(l) == 0:\n        return []\n\n    max_len = 0\n    max_start = 0\n    max_end = 0\n    start = 0\n\n    for end in range(len(l)):\n        if l[end] == l[start] and end - start > max_len:\n            max_len = end - start\n            max_start = start\n            max_end = end\n        elif l[end] != l[start]:\n            start = end\n\n    return l[max_start: max_end + 1]\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    print(\"Answer \" + str(max_length(l)))\n    print(\"Time \" + str(timeit(lambda: max_length(l), number=10000)))  # 0.0004312229999999999",
    "def max_sublist(input_list):\n    max_length = 1\n    max_start = 0\n    max_end = 0\n    start = 0\n    for i in range(len(input_list)):\n        if i == 0:\n            max_start = i\n            max_end = i\n        elif input_list[i] == 1:\n            max_end = i\n            if i - max_start + 1 > max_length:\n                max_length = i - max_start + 1\n        else:\n            start = i\n            max_length = 1\n            max_start = i\n            max_end = i\n    return input_list[max_start:max_end + 1]\n\n\ninput_list = [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]\nprint(\"Input List:\", input_list)\nprint(\"Maximum Sublist:\", max_sublist(input_list))",
    "def max_length(array):\n    sub_array = array\n    max_len = len(sub_array)\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if len(sub_array) < max_len:\n                sub_array = array[i:j]\n                max_len = len(sub_array)\n    return sub_array\n\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nprint(max_length(array))",
    "def sublist_max_length(input_list):\n    max_length = 0\n    start_index = 0\n    end_index = 0\n    for i in range(len(input_list)):\n        curr_length = 0\n        for j in range(i, len(input_list)):\n            curr_length += 1\n            if input_list[j] == 0:\n                if curr_length > max_length:\n                    max_length = curr_length\n                    start_index = i\n                    end_index = j\n                break\n            elif j == len(input_list) - 1:\n                if curr_length > max_length:\n                    max_length = curr_length\n                    start_index = i\n                    end_index = j\n    sublist = input_list[start_index:end_index+1]\n    return sublist\n\n\ninput_list = [1, 2, 0, 3, 4, 5, 6, 0, 7, 8, 9, 0, 10]\nprint(sublist_max_length(input_list))",
    "def find_max_length(array):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n                start = i - current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n        start = i + 1 - current_length\n    return array[start:start + max_length]\n\n\narray = [1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 0, 10, 11, 12, 13, 0, 14, 15, 0, 16, 17, 18, 0, 19, 0, 20]\nprint(find_max_length(array))",
    "def find_max_sublist_length(input_list):\n    \"\"\"\n    Find the maximum length of a sublist in a list.\n\n    Args:\n       input_list(list): Input list\n    Returns:\n       (int): Length of the maximum length sublist\n    \"\"\"\n    if len(input_list) == 0:\n        return 0\n\n    max_length = 1\n    max_length_index = 0\n\n    for i in range(len(input_list)):\n        current_length = 1\n        for j in range(i + 1, len(input_list)):\n            if input_list[j] == input_list[j - 1]:\n                current_length += 1\n            else:\n                break\n\n        if current_length > max_length:\n            max_length = current_length\n            max_length_index = i\n\n    return max_length, input_list[max_length_index: max_length_index + max_length]\n\n\ndef main():\n    \"\"\"\n    Driver function.\n    \"\"\"\n    assert find_max_sublist_length([]) == 0\n    assert find_max_sublist_length([1, 2, 3]) == 1\n    assert find_max_sublist_length([1, 2, 2, 3, 3, 3]) == 3\n    assert find_max_sublist_length([1, 2, 2, 2, 2, 3, 3, 3, 3]) == 5\n    assert find_max_sublist_length([1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6]) == 1\n    assert find_max_sublist_length([1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6]) == 1\n    assert find_max_sublist_length([1, 2, 2, 3, 4, 4, 4, 4, 5,",
    "from typing import List\n\n\ndef sublist_length(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_length = 1\n    max_length_start = 0\n    max_length_end = 0\n\n    for i in range(len(arr)):\n        if arr[i] == arr[max_length_end]:\n            max_length_end += 1\n        else:\n            if max_length_end - max_length_start > max_length:\n                max_length = max_length_end - max_length_start\n                max_length_start = max_length_end\n            max_length_end = i\n\n    if max_length_end - max_length_start > max_length:\n        return max_length_end - max_length_start\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert sublist_length([1, 2, 3, 4, 5]) == 1\n    assert sublist_length([1, 1, 1, 1, 1]) == 5\n    assert sublist_length([1, 2, 2, 3, 4, 4, 5, 5, 6]) == 2",
    "def max_sublist(arr):\n    max_length = 1\n    max_start = 0\n    max_end = 0\n\n    for i in range(len(arr)):\n        current_length = 1\n\n        for j in range(i + 1, len(arr)):\n            if arr[j] == arr[i]:\n                current_length += 1\n            else:\n                break\n\n        if current_length > max_length:\n            max_length = current_length\n            max_start = i\n            max_end = i + current_length - 1\n\n    return arr[max_start: max_end + 1]\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7]\n    print(max_sublist(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef max_sublist_length(lst: List[int]) -> int:\n    \"\"\"\n    Return the maximum length of the sublist.\n    >>> max_sublist_length([1,2,3,4,5,6,7,8,9])\n    1\n    >>> max_sublist_length([1,2,3,4,5,6,7,8,9,10])\n    2\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    previous_item = None\n\n    for item in lst:\n        if previous_item == item:\n            current_length += 1\n        else:\n            current_length = 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n        previous_item = item\n\n    return max_length\n\n\ndef main():\n    assert max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert max_sublist_length([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert max_sublist_length([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n\n\nif __name__ == \"__main__\":\n    main()",
    "from timeit import default_timer as timer\n\n\ndef max_length_sublist(lst: list) -> list:\n    \"\"\"\n    >>> max_length_sublist([1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    >>> max_length_sublist([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    >>> max_length_sublist([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    \"\"\"\n    start = timer()\n    max_length = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 > max_length:\n                max_sublist = lst[i : j + 1]\n                max_length = j - i + 1\n    end = timer()\n    print(f\"Execution time: {end - start:.7f} seconds\")\n    return max_sublist\n\n\ndef max_length_sublist_optimized(lst: list) -> list:\n    \"\"\"\n    >>> max_length_sublist_optimized([1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    >>> max_length_sublist_optimized([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    >>> max_length_sublist_optimized([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])\n    [1, 2, 3]\n    \"\"\"\n    start = timer()\n    max_length = 0",
    "from typing import List\n\n\ndef max_length(input_list: List) -> int:\n    \"\"\"\n    This function takes list as an input and returns the sublist with maximum length.\n    >>> max_length([1, 3, 2, 4, 6, 7, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    6\n    >>> max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    10\n    >>> max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    9\n    \"\"\"\n    length = 0\n    for i in range(len(input_list)):\n        for j in range(i, len(input_list)):\n            if input_list[j] - input_list[i] == j - i:\n                length = max(length, j - i + 1)\n    return length\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_length(lst):\n    max_length = 0\n    start = 0\n    end = 0\n    for i in range(len(lst)):\n        if len(lst[i:]) > max_length:\n            max_length = len(lst[i:])\n            start = i\n            end = i + max_length - 1\n    return lst[start: end + 1]\n\n\nlst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nprint(max_length(lst))",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_len = 1\n    max_len_sublist = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] in max_len_sublist:\n            continue\n        max_len += 1\n        max_len_sublist.append(arr[i])\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 3, 5, 4, 6, 2, 7]) == 4\n    assert max_length([1, 3, 5, 4, 6, 2, 7, 2, 1]) == 4\n    assert max_length([1, 3, 5, 4, 6, 2, 7, 2, 1, 1, 1]) == 5",
    "from typing import List\n\n\ndef max_sublist(l: List) -> List:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n\n    if len(l) <= 1:\n        return l\n\n    max_len = 1\n    start_idx = 0\n    end_idx = 0\n\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1]:\n            if i - start_idx > max_len:\n                max_len = i - start_idx\n                end_idx = i\n        else:\n            if i - start_idx > max_len:\n                max_len = i - start_idx\n                end_idx = i\n            start_idx = i\n\n    return l[start_idx: end_idx]\n\n\nprint(max_sublist([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9]))\nprint(max_sublist([1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]))",
    "def max_length(list1):\n    max_len = 0\n    max_index = 0\n    for i in range(len(list1)):\n        cur_len = 0\n        for j in range(i, len(list1)):\n            if list1[j] == list1[i]:\n                cur_len += 1\n            else:\n                break\n        if cur_len > max_len:\n            max_len = cur_len\n            max_index = i\n    return list1[max_index:max_index+max_len]\n\n\nprint(max_length([1, 2, 2, 3, 4, 5, 5, 5, 6, 1, 2, 3, 4, 5, 6]))",
    "def max_length(l):\n    max_len = 1\n    max_len_start = 0\n    max_len_end = 0\n\n    for i in range(1, len(l)):\n        if l[i] == l[max_len_end]:\n            max_len_end += 1\n        else:\n            max_len_end = i\n            max_len_start = i\n        if max_len_end - max_len_start + 1 > max_len:\n            max_len = max_len_end - max_len_start + 1\n    return l[max_len_start: max_len_start + max_len]\n\n\nl = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nprint(max_length(l))",
    "def max_length(array):\n    if not array:\n        return None\n    max_length = 0\n    start = 0\n    end = 0\n    for i in range(len(array)):\n        if array[i] > array[start]:\n            start = i\n            end = i\n        else:\n            end = i\n        if end - start + 1 > max_length:\n            max_length = end - start + 1\n            result = array[start:end + 1]\n    return result\n\n\ndef main():\n    array = [4, 6, 2, 1, 7, 9, 5]\n    print(max_length(array))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_length(input_list):\n    \"\"\"\n    Return the maximum length of a sublist.\n    \"\"\"\n    if input_list is None or len(input_list) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if i == j:\n                continue\n            max_length = max(max_length, j - i + 1)\n    return max_length",
    "def max_length(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    max_length: int = 0\n    max_sublist: list = []\n\n    for i in range(len(arr)):\n        current_length: int = 0\n        for j in range(i, len(arr)):\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                max_sublist = arr[i:j + 1]\n\n    return max_sublist\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert max_length([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert max_length([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert max_length([1, 2, 3]) == [1, 2, 3]\n    assert max_length([1, 2]) == [1, 2]\n    assert max_length([1]) == [1]\n    assert max_length([]) == []",
    "def sublist_length(arr):\n    max_length = 0\n    start = 0\n    end = 0\n    max_start = 0\n    max_end = 0\n    while end < len(arr):\n        if arr[end] == arr[start]:\n            end += 1\n        else:\n            if end - start > max_length:\n                max_length = end - start\n                max_start = start\n                max_end = end\n            start = end\n            end += 1\n    return arr[max_start: max_end]\n\n\ndef sublist_length_efficient(arr):\n    start = 0\n    max_length = 0\n    max_start = 0\n    max_end = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] != arr[i-1]:\n            if i - start > max_length:\n                max_length = i - start\n                max_start = start\n                max_end = i\n            start = i\n    if len(arr) - start > max_length:\n        return arr[start:len(arr)]\n    else:\n        return arr[max_start:max_end]\n\n\nassert sublist_length([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert sublist_length([1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1]) == [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert sublist_length([1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "from typing import List\n\n\ndef max_sublist(lst: List) -> List:\n    \"\"\"\n    This function takes a list and returns a sublist\n    having maximum length.\n    \"\"\"\n    length = 0\n    length_index = 0\n    for i in range(len(lst)):\n        length_of_lst = len(lst)\n        if length_of_lst == 0:\n            break\n        elif length_of_lst == 1:\n            return lst\n        else:\n            for j in range(length_of_lst):\n                if i + j < length_of_lst:\n                    if lst[i + j] == 1:\n                        length += 1\n                    elif lst[i + j] == 0:\n                        length += 1\n                        if length > length_index:\n                            length_index = length\n                            length = 0\n    return lst[length_index:length_index + length]\n\n\ndef main():\n    \"\"\"\n    Driver function to test max_sublist.\n    \"\"\"\n    lst = [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0]\n    max_sublist(lst)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_len(arr):\n    max_len = 0\n    max_len_start = 0\n    max_len_end = 0\n\n    for i in range(0, len(arr)):\n        curr_len = 1\n        for j in range(i+1, len(arr)):\n            if arr[j] == arr[i]:\n                curr_len += 1\n                if curr_len > max_len:\n                    max_len = curr_len\n                    max_len_start = i\n                    max_len_end = j\n\n    return arr[max_len_start:max_len_end+1]\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 3, 2, 2, 2]\n    print(f\"The max length sublist is {max_len(arr)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sub_list_len(l):\n    sub_list = []\n    max_len = 0\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            sub_list.append(l[i:j+1])\n            if len(sub_list[-1]) > max_len:\n                max_len = len(sub_list[-1])\n                max_sub_list = sub_list[-1]\n    return max_sub_list\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sub_list_len(l))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sub_list_max_length(list1: list) -> list:\n    \"\"\"\n    :param list1: list of integers\n    :return: list of integers\n    >>> sub_list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> sub_list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> sub_list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    >>> sub_list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    >>> sub_list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    \"\"\"\n    list_len = len(list1)\n    max_list = []\n    max_len = 0\n    for i in range(list_len):\n        for j in range(i, list_len + 1):\n            temp_list =",
    "def maximum_length(list1):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            count += 1\n        if count > len(list1) - i:\n            return list1[i:j+1]\n\n\nprint(maximum_length([1, 3, 4, 5, 2, 4, 6, 7, 8, 5, 7]))",
    "def max_length(list_in):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for i in range(len(list_in)):\n        if list_in[i] == 1:\n            current_length += 1\n        else:\n            current_length -= 1\n            if current_length > max_length:\n                max_length = current_length\n                start = i - current_length\n    return list_in[start:start + max_length]\n\n\nprint(max_length([1, 0, 1, 1, 0, 1, 0, 1]))",
    "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(arr)\n\n    if length <= 1:\n        return length\n\n    max_len, max_start, max_end = 0, 0, 0\n\n    for i in range(length - 1):\n        count = 1\n        for j in range(i + 1, length):\n            if arr[j] == arr[i]:\n                count += 1\n            else:\n                break\n\n        if count > max_len:\n            max_len = count\n            max_start = i\n            max_end = i + count\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr: List[int] = [1, 2, 3, 4, 3, 4, 5]\n    print(max_length(arr))",
    "def sublist_length(arr):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    # Edge case.\n    if not arr:\n        return None\n\n    curr_max_len = 1\n    max_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            curr_max_len += 1\n            if curr_max_len > max_len:\n                max_len = curr_max_len\n        else:\n            curr_max_len = 1\n\n    return max_len\n\n\ndef main():\n    print(sublist_length([1, 2, 3, 4, 3, 2, 3, 4, 5, 6]))\n    print(sublist_length([1, 2, 3, 4, 5, 6, 7]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef find_max_length(arr: List[int]) -> int:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    # count the length of each sublist\n    sublist_length: List[int] = [1] * len(arr)\n\n    for i in range(len(arr)):\n        if i - 1 >= 0 and arr[i] > arr[i - 1]:\n            sublist_length[i] = sublist_length[i - 1] + 1\n\n    for i in range(len(arr) - 1, -1, -1):\n        if i + 1 < len(arr) and arr[i] > arr[i + 1]:\n            sublist_length[i] = max(sublist_length[i], sublist_length[i + 1] + 1)\n\n    return max(sublist_length)\n\n\ndef test(arr, expected_answer):\n    answer = find_max_length(arr)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([1, 3, 2, 4, 5], 3)\n    test([1, 2, 3, 4, 5], 5)\n    test([1, 3, 2, 5, 4], 4)\n    test([1, 2, 3, 4, 5], 5)\n    test([1, 3, 2, 4, 5], 3)\n    test([1, 2, 3, 4, 5], 5)\n    test([1, 3, 2, 5, 4], 4)\n    test([1, 2, 3, 4, 5], 5)\n    test([1, 3, 2, 4, 5], 3)\n    test([1, 2,",
    "from typing import List\n\n\ndef find_max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_length = 0\n    max_count = 0\n\n    for i in range(len(arr)):\n        count = 0\n        for j in range(i, len(arr)):\n            if arr[j] == arr[i]:\n                count += 1\n            else:\n                break\n        max_length = max(max_length, count)\n        max_count = max(max_count, count)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 8]) == 4\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 3",
    "def sublist_max_length(sublist):\n    \"\"\"\n    Using recursion.\n    \"\"\"\n    if len(sublist) == 1:\n        return sublist\n\n    max_length = 1\n\n    for i in range(len(sublist)):\n        max_length = max(max_length, sublist_max_length(sublist[i:]))\n\n    return max_length\n\ndef sublist_max_length_2(sublist):\n    \"\"\"\n    Using iteration.\n    \"\"\"\n    max_length = 1\n    cur_length = 1\n\n    for i in range(1, len(sublist)):\n        if sublist[i] == sublist[i - 1]:\n            cur_length += 1\n        else:\n            cur_length = 1\n\n        max_length = max(max_length, cur_length)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert sublist_max_length([1, 2, 2, 2, 3, 4, 3, 4, 5, 6, 7, 8, 9]) == 4\n    assert sublist_max_length([1, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert sublist_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert sublist_max_length([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "def maximum_length(list):\n    max_length = 0\n    start_index = 0\n    end_index = 0\n    length = 0\n    for i in range(len(list)):\n        if list[i] == 1:\n            length += 1\n        else:\n            if length > max_length:\n                max_length = length\n                start_index = i - length + 1\n                end_index = i - 1\n            length = 0\n    if length > max_length:\n        max_length = length\n        start_index = len(list) - length\n        end_index = len(list) - 1\n    return start_index, end_index\n\n\nprint(maximum_length([1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1]))\nprint(maximum_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\nprint(maximum_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]))\nprint(maximum_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]))",
    "def max_length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        j = i + 1\n        while j < len(lst):\n            if lst[j] == lst[i]:\n                j += 1\n            else:\n                break\n        if j - i > max_len:\n            max_len = j - i\n            max_sublist = lst[i:j]\n    return max_sublist\n\n\ndef main():\n    lst = [1, 2, 3, 4, 4, 4, 5, 4, 6, 7, 8, 9]\n    print(max_length(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_length(l: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_length_so_far = 0\n    curr_length = 0\n\n    for i in range(len(l)):\n        if l[i] == 1:\n            curr_length += 1\n        else:\n            max_length_so_far = max(max_length_so_far, curr_length)\n            curr_length = 0\n\n    return max(max_length_so_far, curr_length)\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 1, 0, 0, 1, 1]) == 3",
    "def sublist_length(lst: list) -> int:\n    \"\"\"\n    find the sublist having maximum length\n    >>> sublist_length([1,2,3,4,5,6,7,8,9,10])\n    1\n    >>> sublist_length([1,2,3,4,5,6,7,8,9])\n    1\n    >>> sublist_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    1\n    >>> sublist_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    1\n    >>> sublist_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n    2\n    \"\"\"\n    maximum = 0\n    start, end = 0, 0\n    for i in range(len(lst)):\n        count = 1\n        for j in range(i + 1, len(lst)):\n            if lst[j] == lst[i]:\n                count += 1\n            else:\n                break\n        if count > maximum:\n            maximum = count\n            start, end = i, i + count\n    return end - start + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sublist_length(list1):\n    if len(list1) <= 1:\n        return list1\n    else:\n        max_len = 1\n        index = 0\n        for i in range(0, len(list1)):\n            if i + max_len < len(list1):\n                if len(list1[i: i + max_len]) < len(list1[i + max_len: i + max_len + 1]):\n                    max_len = len(list1[i: i + max_len])\n                    index = i\n                else:\n                    max_len = len(list1[i + max_len: i + max_len + 1])\n                    index = i + max_len\n            else:\n                if len(list1[i:]) > max_len:\n                    max_len = len(list1[i:])\n                    index = i\n        return list1[index: index + max_len]\n\n\nprint(sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n    curr_max = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n            curr_max = arr[i]\n\n    return max_len if max_len > curr_len else curr_len\n\n\ndef max_length_v2(arr: List) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n    curr_max = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_index = i\n            curr_len = 1\n            curr_max = arr[i]\n\n    return max_len if max_len > curr_len else curr_len\n\n\ndef main():\n    arr = [1, 3, 2, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    print(f\"Input: {arr}\")\n    print(f\"Output: {max_length(arr)}\")\n\n    arr = [1, 2, 3, 4, 5,",
    "from typing import List\n\n\ndef max_sublist(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(nums)\n\n    max_len = 1\n    max_start_index = 0\n    max_end_index = 0\n\n    for i in range(length - 1):\n        curr_start_index = i\n        curr_end_index = i\n        curr_len = 2\n\n        while curr_end_index < length - 1 and nums[curr_end_index] == nums[curr_end_index + 1]:\n            curr_len += 1\n            curr_end_index += 1\n\n        if curr_len > max_len:\n            max_len = curr_len\n            max_start_index = curr_start_index\n            max_end_index = curr_end_index\n\n        i = curr_end_index\n\n    return nums[max_start_index : max_end_index + 1]\n\n\nif __name__ == \"__main__\":\n    print(max_sublist([1, 2, 3, 4, 4, 4, 5, 4, 4, 6]))",
    "def max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[j] - list1[i] == j - i:\n                if j - i > max_length:\n                    max_length = j - i\n    return max_length\n\n\nlist1 = [2, 6, 5, 9, 11, 15]\nprint(max_length(list1))",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_length = 1\n    max_start_index = 0\n\n    for i in range(len(arr)):\n        current_length = 1\n        for j in range(i, len(arr)):\n            if arr[j] == arr[i]:\n                current_length += 1\n            else:\n                break\n\n        if current_length > max_length:\n            max_length = current_length\n            max_start_index = i\n\n    return arr[max_start_index : max_start_index + max_length]\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(max_length([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]))\n    print(max_length([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]))",
    "from typing import List\n\n\ndef max_length(l: List) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_len = 0\n    sub_start = 0\n    sub_end = 0\n\n    for i in range(len(l)):\n        curr_len = i - sub_start + 1\n        if curr_len > max_len:\n            max_len = curr_len\n            sub_end = i\n\n        if l[i] == 0 and i - sub_start > 0:\n            sub_start = i + 1\n\n    return l[sub_start : sub_end + 1]\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 3, 2, 4, 5, 6, 3, 2, 5, 3, 6, 1, 2, 3, 5, 6, 7, 8, 9]))",
    "def max_length(arr):\n    if len(arr) == 1:\n        return arr\n\n    if len(arr) == 2:\n        return arr if arr[0] > arr[1] else [arr[1], arr[0]]\n\n    mid = len(arr) // 2\n    left = max_length(arr[:mid])\n    right = max_length(arr[mid:])\n    if left[0] > right[0]:\n        return left\n    else:\n        return right\n\n\ndef max_length_eff(arr):\n    max_length = 1\n    start = 0\n    end = 0\n    for i in range(1, len(arr)):\n        if i - start > max_length:\n            max_length = i - start\n            start = start\n            end = i\n        if arr[i] < arr[start]:\n            start = i\n        if arr[i] > arr[end]:\n            end = i\n    return arr[start:end+1]\n\n\nprint(max_length_eff([4, 8, 2, 6, 3, 9, 1]))",
    "def max_length(list):\n    length = 0\n    index = 0\n    for i in range(len(list)):\n        if length < list[i]:\n            length = list[i]\n            index = i\n    return index\n\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_length(list))",
    "def maximum_length(l):\n    max_length = 0\n    for i in range(len(l)):\n        count = 1\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                count += 1\n        if count > max_length:\n            max_length = count\n            max_index = i\n    return l[max_index: max_index+max_length]\n\n\nprint(maximum_length([1, 2, 1, 2, 3, 4, 1, 2, 3]))",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_length, start, end = 0, 0, 0\n\n    for i in range(len(arr)):\n        current_length = 0\n        j = i\n\n        while j < len(arr) and arr[j] == arr[i]:\n            current_length += 1\n            j += 1\n\n        if current_length > max_length:\n            max_length = current_length\n            start = i\n            end = i + current_length\n\n    return arr[start:end + 1]\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 3, 4, 2, 3, 4, 1]) == [1, 2, 3, 4, 3]",
    "from typing import List\n\n\ndef max_length(input: List) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_length = 0\n    max_length_start = 0\n    max_length_end = 0\n\n    start = 0\n    end = 0\n\n    for i in input:\n        if input[start] == i:\n            start += 1\n        else:\n            end += 1\n\n        if end - start > max_length:\n            max_length = end - start\n            max_length_start = start\n            max_length_end = end\n\n    return input[max_length_start:max_length_end]\n\n\nprint(max_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "def sub_max_length(my_list):\n    \"\"\"\n    Return the sublist having maximum length.\n    \"\"\"\n    if len(my_list) == 0:\n        return None\n    max_len = 1\n    start = 0\n    end = 0\n    for i in range(1, len(my_list)):\n        if my_list[i] == my_list[i - 1]:\n            max_len += 1\n        else:\n            max_len = 1\n        if max_len > end - start + 1:\n            start = i - max_len + 1\n            end = i\n    return my_list[start: end + 1]\n\n\nif __name__ == \"__main__\":\n    print(sub_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\n    print(sub_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\n    print(sub_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\n    print(sub_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\n    print(sub_max_length([]))",
    "def sublist_max_length(l: list) -> list:\n    \"\"\"\n    >>> sublist_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> sublist_max_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    >>> sublist_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    >>> sublist_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    \"\"\"\n    if len(l) <= 1:\n        return l\n\n    max_list = l[:1]\n    max_len = 1\n\n    for i in range(1, len(l)):\n        if i + 1 <= max_len:\n            max_list = l[i - max_len : i + 1]\n        else:\n            max_list = l[i : i + 1]\n\n        for j in range(i, -1,",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return n\n\n    max_length = 1\n    max_start = 0\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            max_length += 1\n        else:\n            max_length = 1\n\n        if max_length > max_length:\n            max_start = i\n\n    return max_length\n\n\ndef max_length_2(arr: List) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return n\n\n    max_length = 1\n    max_start = 0\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            max_length += 1\n        else:\n            d[arr[i]] = i\n            max_length = 1\n\n        if max_length > max_length:\n            max_start = i\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length([3, 3, 3, 3, 3]) == 1\n    assert max_length([1, 3, 3, 3, 3]) == 1\n    assert max_length([3, 3, 3, 3, 3, 3]) == 2\n    assert max_length([3, 3, 3, 3, 3, 3, 3]) == 3\n    assert max_length([3, 3, 3, 3, 3, 3, 3, 3]) == 4\n    assert max_length([3, 3, 3, 3, 3, 3, 3, 3, 3]) == 5\n    assert max_length([3, 3, 3,",
    "from typing import List\n\n\ndef max_length(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    max_length = 0\n\n    for i in range(len(arr)):\n        curr_length = 0\n        for j in range(i, len(arr)):\n            if arr[j] == arr[i]:\n                curr_length += 1\n            else:\n                break\n\n        if max_length < curr_length:\n            max_length = curr_length\n\n    return max_length\n\n\ndef max_length_efficient(arr: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_length = 0\n\n    curr_start = 0\n    curr_end = 0\n\n    for i in range(len(arr)):\n        if arr[i] == arr[curr_end]:\n            curr_end += 1\n        else:\n            if curr_end - curr_start > max_length:\n                max_length = curr_end - curr_start\n\n            curr_start = i\n            curr_end = i\n\n    if curr_end - curr_start > max_length:\n        max_length = curr_end - curr_start\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 5]) == 5\n    assert max_length([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]) == 4\n    assert max_length([1, 2, 1, 2, 1, 2, 1, 2]) == 4\n    assert max_length([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 3\n    assert max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5",
    "from typing import List\n\n\ndef max_length(list1: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(list1)\n    if n <= 1:\n        return n\n\n    max_len = 1\n    max_start = max_end = list1[0]\n\n    for i in range(1, n):\n        if list1[i] > max_end:\n            max_start = max_end = list1[i]\n        else:\n            max_end = list1[i]\n        if max_end - max_start + 1 > max_len:\n            max_len = max_end - max_start + 1\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 5]) == 5\n    assert max_length([1, 3, 2, 4, 5]) == 4\n    assert max_length([1, 2, 3, 5, 4]) == 4\n    assert max_length([1, 2, 3, 5, 6, 7, 8, 9]) == 8",
    "def max_len_sublist(list1):\n    if len(list1) == 0:\n        return None\n\n    max_len = 1\n    start = 0\n    end = 0\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            end += 1\n        else:\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                start = i - max_len + 1\n                end = i\n            else:\n                start = i\n                end = i\n    if end - start + 1 > max_len:\n        return list1[start:end+1]\n    else:\n        return list1[start:start+max_len]\n\nprint(max_len_sublist([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n\n\n\"\"\"\nWrite a python function to check whether a list is sublist of another list or not. \n\"\"\"\n\ndef is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    if len(list1) == 0:\n        return True\n    if len(list2) == 0:\n        return False\n    for i in range(len(list2)):\n        if list2[i] == list1[0]:\n            temp_list = list2[i:]\n            if is_sublist(list1[1:], temp_list):\n                return True\n    return False\n\nprint(is_sublist([1, 1, 2, 1], [1, 2, 3, 4, 5, 6, 1, 2, 1, 1, 2]))",
    "def find_max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        count = 1\n        for j in range(i + 1, len(list1)):\n            if list1[i] == list1[j]:\n                count += 1\n        if count > max_length:\n            max_length = count\n    return max_length\n\n\nprint(find_max_length([1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "def sub_list_max_length(l):\n    \"\"\"\n    This function takes a list as an input and finds the maximum length of the sublist\n    \"\"\"\n    if len(l) <= 0:\n        return 0\n\n    # Initialising the maximum length to 0\n    max_length = 0\n\n    # Initialising the start index to 0\n    start_index = 0\n\n    # Initialising the end index to 0\n    end_index = 0\n\n    # Initialising the current length to 0\n    current_length = 0\n\n    for index, item in enumerate(l):\n        # If the item is equal to the previous item, we increment the current length\n        if item == l[index-1]:\n            current_length += 1\n\n        # If the item is not equal to the previous item, we reset the start index and end index to the current index\n        else:\n            start_index = index\n            end_index = index\n            current_length = 1\n\n        # If the current length is greater than the maximum length, we set the maximum length to the current length\n        if current_length > max_length:\n            max_length = current_length\n\n    # We return the sublist\n    return l[start_index:end_index+1]\n\n\nif __name__ == '__main__':\n    print(sub_list_max_length([1, 1, 1, 2, 2, 2, 3, 3, 3]))",
    "from icecream import ic\n\n\ndef max_length(lst):\n    ic(lst)\n    max_length = 0\n    max_length_start = 0\n    max_length_end = 0\n\n    for i in range(len(lst)):\n        if lst[i] > max_length:\n            max_length = lst[i]\n            max_length_start = i\n            max_length_end = i\n        elif lst[i] == max_length:\n            max_length_end = i\n\n    return lst[max_length_start : max_length_end + 1]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 3, 2, 1, 4, 5, 1, 3, 4, 5, 6, 7, 8, 9, 1, 3, 4]\n    ic(lst)\n    ic(max_length(lst))",
    "from typing import List\n\n\ndef max_len_sublist(l: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_len = 0\n    max_start = 0\n    max_end = 0\n\n    start = 0\n    end = 0\n\n    for i in range(len(l)):\n        if l[i] == 1:\n            end += 1\n        else:\n            if end - start > max_len:\n                max_start = start\n                max_end = end\n                max_len = end - start\n            start = i + 1\n            end = i + 1\n\n    if end - start > max_len:\n        max_start = start\n        max_end = end\n        max_len = end - start\n\n    return l[max_start : max_end + 1]\n\n\nif __name__ == \"__main__\":\n    l = [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0]\n    print(max_len_sublist(l))",
    "def max_length(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_length = 0\n    curr_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n\n    return max(max_length, curr_length)\n\n\ndef main():\n    print(max_length([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_length([1, 1, 1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 8, 9, 9, 9, 10]))\n    print(max_length([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 10]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max_sublist(list_in: list) -> list:\n    \"\"\"\n    Find the sublist with maximum length.\n    \"\"\"\n    if len(list_in) < 2:\n        return list_in\n    max_len, max_sublist = 0, []\n    for i in range(len(list_in)):\n        for j in range(i + 1, len(list_in) + 1):\n            if j - i > max_len:\n                max_len = j - i\n                max_sublist = list_in[i:j]\n    return max_sublist\n\n\ndef main():\n    print(find_max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sublist_length(arr):\n    \"\"\"\n    >>> max_sublist_length([2, 2, 2, 2])\n    1\n    >>> max_sublist_length([2, 2, 2, 2, 2, 2])\n    2\n    >>> max_sublist_length([2, 2, 2, 2, 2, 2, 2])\n    3\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6])\n    1\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7])\n    1\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8])\n    1\n    \"\"\"\n    res = 1\n    count = 1\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            count = 1\n        res = max(res, count)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_max_length(list_in):\n    max_length = 0\n    start = 0\n    end = 0\n\n    for i in range(len(list_in)):\n        count = 1\n        for j in range(i+1, len(list_in)):\n            if list_in[i] == list_in[j]:\n                count += 1\n                end = j\n        if count > max_length:\n            max_length = count\n            start = i\n            end = j\n\n    return list_in[start:end+1]\n\n\ndef main():\n    print(\"Max length sublist: \" +\n          str(find_max_length([1, 2, 3, 2, 3, 4, 5, 4, 6])))\n    print(\"Max length sublist: \" +\n          str(find_max_length([1, 2, 3, 2, 3, 4, 5, 4, 6, 4, 6, 8])))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_length(lst: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_len = 0\n    start = 0\n\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            if max_len < i - start + 1:\n                max_len = i - start + 1\n            start = i + 1\n\n    if max_len < len(lst) - start + 1:\n        max_len = len(lst) - start + 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length(lst))",
    "def max_length(lst):\n    max_len = 0\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n            j += 1\n        i += 1\n    return lst[i-max_len:i]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sublist_length(arr):\n    max_length = 1\n    max_start = 0\n    max_end = 0\n\n    for i in range(len(arr)):\n        count = 1\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n            else:\n                break\n        if count > max_length:\n            max_length = count\n            max_start = i\n            max_end = i + count - 1\n    return max_start, max_end\n\n\ndef main():\n    print(sublist_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from timeit import default_timer as timer\n\ndef maximum_length(arr):\n    \"\"\"\n    Return the sublist having maximum length.\n    \"\"\"\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            end += 1\n        else:\n            if end - start > max_len:\n                max_len = end - start\n                start = i - (max_len - 1)\n                end = i\n    return arr[start:end + 1]\n\n\ndef main():\n    \"\"\"\n    Drive the function.\n    \"\"\"\n    start_time = timer()\n    arr = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
    "def findMaxLength(ls):\n    max_length = 0\n    curr_length = 0\n\n    for i in range(len(ls)):\n        if ls[i] == 0:\n            curr_length -= 1\n        else:\n            curr_length += 1\n\n        if curr_length > max_length:\n            max_length = curr_length\n\n    return max_length\n\nls = [1,2,0,2,0,0,2,2,2,2,0,2,0,0,2,2,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,0,0,2,0,2,2,2,2,0,2,0,0,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,2,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,2,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,",
    "def max_length(l):\n    \"\"\"\n    Takes a list as a parameter and returns the sublist having maximum length\n    \"\"\"\n    if len(l) == 0:\n        return None\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(l)):\n        if l[i] == l[start]:\n            continue\n        elif l[i] == l[start] + 1:\n            end += 1\n            if end - start > max_len:\n                max_len = end - start\n                start = i - (max_len - 1)\n        elif l[i] == l[start] - 1:\n            start += 1\n            end += 1\n            if end - start > max_len:\n                max_len = end - start\n                start = i - (max_len - 1)\n        elif l[i] > l[start]:\n            start = i\n            end = i + 1\n        else:\n            start = i\n            end = i\n    return l[start:end]\n\nif __name__ == '__main__':\n    l = [1, 2, 4, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "def max_sublist(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_length = 1\n    start = 0\n    end = 0\n    for i in range(1, len(arr)):\n        if i - start > max_length:\n            start = i - max_length\n        if arr[i] == arr[start]:\n            max_length += 1\n            end = i\n    return arr[start:end+1]\n\n\nprint(max_sublist([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "def maximum_length(l: list) -> list:\n    \"\"\"\n    Return the sublist having maximum length.\n    >>> maximum_length([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> maximum_length([1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1]\n    >>> maximum_length([1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> maximum_length([1, 2, 3, 4, 5, 6, 7])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> maximum_length([1, 2, 3, 4, 5, 6, 7, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n\n    if len(l) == 0:\n        return l\n    else:\n        max_length = 0\n        index_max = 0\n        for i in range(len(l)):\n            temp = 0\n            for j in range(i, len(l)):\n                if l[j] == l[i]:\n                    temp += 1\n                    if temp > max_length:\n                        max_length = temp\n                        index_max = i\n                else:\n                    break\n        return l[index_max : index_max + max_length]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(maximum_length([1, 2, 3, 4, 5]))",
    "def max_length(arr):\n    if len(arr) == 1:\n        return arr\n\n    max_length = 0\n    max_length_start = 0\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            end += 1\n        else:\n            if end - start > max_length:\n                max_length = end - start\n                max_length_start = start\n            start = i + 1\n            end = i + 1\n\n    return arr[max_length_start:max_length_start + max_length]\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1]))",
    "def sublist_max(list1):\n    max_length = 0\n    max_start = 0\n    max_end = 0\n    start = 0\n    end = 0\n\n    for i in range(len(list1)):\n        count = 0\n        for j in range(i, len(list1)):\n            if list1[j] == list1[i]:\n                count += 1\n            else:\n                break\n        if count > max_length:\n            max_length = count\n            max_start = start\n            max_end = end\n        end = count + start - 1\n        start += count\n    return list1[max_start:max_end + 1]\n\n\nprint(sublist_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "def sublist_max_length(list_a):\n    if not list_a:\n        return 0\n    max_len = 1\n    max_len_start = 0\n    for i in range(1, len(list_a)):\n        if list_a[i] == list_a[i - 1]:\n            max_len += 1\n        else:\n            if max_len > max_len_start:\n                max_len_start = i - max_len\n            max_len = 1\n    if max_len > max_len_start:\n        max_len_start = len(list_a) - max_len\n    return max_len_start\n\n\nprint(sublist_max_length([1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "from itertools import accumulate\n\n\ndef sublist_max(sublist):\n    \"\"\"\n    TC: O(n)\n    SC: O(n)\n    \"\"\"\n    return sublist[max(range(len(sublist)), key=lambda i: sublist[i] - sublist[i - 1])]\n\n\ndef sublist_max_eff(sublist):\n    \"\"\"\n    TC: O(n)\n    SC: O(n)\n    \"\"\"\n    return max(accumulate(sublist), key=lambda x: x - sublist[0])\n\n\nif __name__ == \"__main__\":\n    print(sublist_max([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sublist_max_eff([1, 2, 3, 4, 5, 6, 7, 8]))",
    "from timeit import default_timer as timer\n\n\ndef sublist_max_length(list_of_ints):\n    \"\"\"\n    Returns the length of the sublist having maximum length.\n    :param list_of_ints: list\n    :return: int\n    >>> sublist_max_length([1, 2, 3, 4, 5])\n    5\n    >>> sublist_max_length([1, 2, 3, 3, 4, 3, 3, 3, 3])\n    6\n    >>> sublist_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    9\n    >>> sublist_max_length([1, 1, 1, 1, 1])\n    5\n    >>> sublist_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n    10\n    >>> sublist_max_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    13\n    \"\"\"\n    length = len(list_of_ints)\n    max_length = 0\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if j - i > max_length:\n                max_length = j - i\n    return max_length\n\n\ndef sublist_max_length_optimized(list_of_ints):\n    \"\"\"\n    Returns the length of the sublist having maximum length.\n    :param list_of_ints: list\n    :return: int\n    >>> sublist_max_length_optimized([1, 2, 3, 4, 5])\n    5\n    >>> sublist_max_length_optimized([1, 2, 3, 3, 4, 3, 3, 3, 3])\n    6\n    >>> sublist_max_length_optimized([1, 2, 3, 4",
    "def max_length(arr):\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if max_len < (i-start+1):\n                max_len = i-start+1\n                end = i\n            start = i+1\n    if max_len < (len(arr)-start+1):\n        return [len(arr)-start+1, start]\n    return [max_len, start]\n\nprint(max_length([1, 2, 3, 4, 5]))\nprint(max_length([1, 2, 3, 4, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 5]))\nprint(max_length([1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5]))",
    "def max_length(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            current_length = 0\n            continue\n\n        if current_length == 0:\n            current_length += 1\n        else:\n            current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n\n\ndef max_length_eff(arr):\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            current_length = 0\n            continue\n\n        if current_length == 0:\n            current_length += 1\n        else:\n            current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n\n\ndef main():\n    arr = [0, 1, 1, 0, 1, 0, 1, 0, 1, 0]\n    print(max_length(arr))\n    print(max_length_eff(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def maximum_length(list):\n    max_len = 0\n    start = 0\n    end = 0\n\n    for i in range(len(list)):\n        current_len = 1\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                current_len += 1\n            else:\n                break\n\n        if current_len > max_len:\n            max_len = current_len\n            start = i\n            end = i + current_len\n\n    return list[start:end]\n\n\nprint(maximum_length([1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4]))",
    "def sublist_max_length(list_of_elements):\n    \"\"\"\n    Return the length of the sublist having maximum length.\n    \"\"\"\n    if not list_of_elements:\n        return 0\n    max_len = 0\n    cur_len = 0\n    for i in range(len(list_of_elements)):\n        cur_len += 1\n        for j in range(i + 1, len(list_of_elements)):\n            if list_of_elements[i] == list_of_elements[j]:\n                cur_len += 1\n            else:\n                break\n        if max_len < cur_len:\n            max_len = cur_len\n        cur_len = 0\n    return max_len",
    "def sublist_max_length(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_len = 0\n    max_len_start = 0\n    max_len_end = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if i - max_len_start > max_len:\n                max_len = i - max_len_start\n                max_len_end = i\n            max_len_start = i + 1\n\n    if len(arr) - max_len_start > max_len:\n        max_len = len(arr) - max_len_start\n        max_len_end = len(arr) - 1\n\n    return arr[max_len_start:max_len_end + 1]\n\n\nif __name__ == \"__main__\":\n    print(sublist_max_length([0, 1, 1, 0, 1, 1, 1]))",
    "def max_sublist(list_):\n    max_length = 0\n    max_start_index = 0\n    max_end_index = 0\n\n    for i in range(len(list_)):\n        length = 1\n        for j in range(i, len(list_)):\n            if list_[j] == list_[j - 1]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n            max_start_index = i\n            max_end_index = i + length\n\n    return list_[max_start_index:max_end_index]\n\n\ndef main():\n    assert max_sublist([1, 2, 3, 3, 3, 3, 3, 4, 3, 3]) == [3, 3, 3, 3, 3, 3]\n    assert max_sublist([1, 2, 3, 3, 3, 4, 5, 3, 3]) == [3, 3, 3]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [\n        13,\n        14,\n    ]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [\n        15,\n    ]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [\n        15,\n        16,\n    ]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9,"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}