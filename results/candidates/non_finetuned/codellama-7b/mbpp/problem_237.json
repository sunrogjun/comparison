{
  "problem": {
    "task_id": "MBPP/248",
    "prompt": "Write a function to calculate the harmonic sum of n-1.",
    "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
    "test_list": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ],
    "challenge_test_list": [],
    "problem_id": 237
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n-1.\"\"\"\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic\n\n\ndef test_harmonic_sum():\n    \"\"\"Test harmonic_sum.\"\"\"\n    assert harmonic_sum(7) == 1.8288525393243498",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\nprint(harmonic_sum(4))\n\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1.0\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    >>> harmonic_sum(4)\n    2.0833333333333335\n    \"\"\"\n    if n == 1:\n        return 1.0\n\n    return 1 / n + harmonic_sum(n - 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.25\n    >>> harmonic_sum(4)\n    1.375\n    >>> harmonic_sum(5)\n    1.4375\n    >>> harmonic_sum(6)\n    1.46875\n    \"\"\"\n    return round(1 / (1 / n + n / (n + 1)), 5)\n\n\ndef harmonic_sum_math(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    >>> harmonic_sum_math(1)\n    0.0\n    >>> harmonic_sum_math(2)\n    1.0\n    >>> harmonic_sum_math(3)\n    1.25\n    >>> harmonic_sum_math(4)\n    1.375\n    >>> harmonic_sum_math(5)\n    1.4375\n    >>> harmonic_sum_math(6)\n    1.46875\n    \"\"\"\n    return round(sum([1 / i for i in range(1, n)]) + math.log(n), 5)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    >>> harmonic_sum(4)\n    2.0833333333333335\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(10))",
    "def harmonic_sum(n: int) -> float:\n    \"\"\"Calculates the harmonic sum of n-1.\n\n    Args:\n        n (int): The number of terms in the harmonic sum.\n\n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n    return sum([1 / n for n in range(1, n)])\n\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(100))",
    "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / float(i) for i in range(1, n + 1))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333333\n    assert harmonic_sum(4) == 2\n    assert harmonic_sum(5) == 2.2\n    assert harmonic_sum(6) == 2.4666666666666665\n\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\ndef main():\n    print(harmonic_sum(4))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** to get power of a number\n\n\"\"\"",
    "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\ndef test_harmonic_sum():\n    \"\"\"\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    0.5\n    >>> harmonic_sum(3)\n    1.1666666666666667\n    >>> harmonic_sum(4)\n    1.4055555555555556\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n\ndef main():\n    print(harmonic_sum(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def harmonic_sum(n):\n    return sum([1/i for i in range(1, n)])\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 1/2\n    assert harmonic_sum(3) == 1/2 + 1/3\n    assert harmonic_sum(4) == 1/2 + 1/3 + 1/4\n    assert harmonic_sum(5) == 1/2 + 1/3 + 1/4 + 1/5\n\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\ndef main():\n    \"\"\"\n    Test the harmonic_sum function.\n    \"\"\"\n    print(\"Harmonic sum of 10 is: \" + str(harmonic_sum(10)))\n    print(\"Harmonic sum of 100 is: \" + str(harmonic_sum(100)))\n\nif __name__ == '__main__':\n    main()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1.0\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n\n    return harmonic_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n: int) -> float:\n    \"\"\"\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.25\n    \"\"\"\n    return sum(1 / x for x in range(1, n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    return sum([1/i for i in range(1, n + 1)])\n\nif __name__ == '__main__':\n    print harmonic_sum(10)",
    "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(3) == 1.25\n    assert harmonic_sum(4) == 1.4\n    assert harmonic_sum(5) == 1.5\n\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()",
    "import math\n\n\ndef harmonic_sum(n):\n    return sum([1 / math.sqrt(i) for i in range(1, n)])\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 0.7853981633974483\n    assert harmonic_sum(3) == 1.2337005350197492",
    "def harmonic_sum(n):\n    return sum([1 / n for n in range(1, n)])\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 1 / 2\n    assert harmonic_sum(3) == 1 / 3 + 1 / 2\n    assert harmonic_sum(4) == 1 / 4 + 1 / 3 + 1 / 2\n    assert harmonic_sum(5) == 1 / 5 + 1 / 4 + 1 / 3 + 1 / 2",
    "import math\n\n\ndef harmonic_sum(n: int) -> float:\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    0.5\n    >>> harmonic_sum(3)\n    0.28666666666666666\n    >>> harmonic_sum(4)\n    0.2222222222222222\n    \"\"\"\n    return sum(1 / math.sqrt(i) for i in range(1, n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n\ndef harmonic_sum_2(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_2(n - 1)\n\n\ndef harmonic_sum_3(n):\n    return n + (n - 1) / n * harmonic_sum_3(n - 1)\n\n\ndef harmonic_sum_4(n):\n    if n == 1:\n        return 1\n    else:\n        return n + 1 / n * harmonic_sum_4(n - 1)\n\n\ndef harmonic_sum_5(n):\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum_5(n - 1)\n\n\ndef harmonic_sum_6(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_6(n - 1)\n\n\ndef harmonic_sum_7(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_7(n - 1)\n\n\ndef harmonic_sum_8(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_8(n - 1)\n\n\ndef harmonic_sum_9(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_9(n - 1)\n\n\ndef harmonic_sum_10(n):\n    if n < 1:\n        return 0\n    else:\n        return n + 1 / n * harmonic_sum_10(n - 1)",
    "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(harmonic_sum(i))",
    "def harmonic(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\ndef test_harmonic():\n    assert harmonic(1) == 0\n    assert harmonic(2) == 0.5\n    assert harmonic(3) == 1.1666666666666667\n    assert harmonic(4) == 1.375\n    assert harmonic(5) == 1.4285714285714285",
    "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / i\n    return result\n\n\nif __name__ == \"__main__\":\n    print harmonic_sum(1)\n    print harmonic_sum(2)\n    print harmonic_sum(3)\n    print harmonic_sum(4)\n    print harmonic_sum(5)",
    "def harmonic(n):\n    return sum([1.0/i for i in range(1, n+1)])\n\nprint(harmonic(5))\n\n\"\"\"\nThe time complexity of this algorithm is O(n), because we have to iterate over all the numbers from 1 to n.\n\"\"\"",
    "import math\n\n\ndef harmonic_sum(n: int) -> float:\n    \"\"\"Returns the harmonic sum of n-1.\n\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    >>> harmonic_sum(4)\n    1.4444444444444444\n    >>> harmonic_sum(5)\n    1.4666666666666667\n    \"\"\"\n    if n == 1:\n        return 0\n\n    return round(\n        n / math.factorial(n) * math.log(n),\n        len(str(math.factorial(n))) - 1,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    >>> harmonic(1)\n    0.0\n    >>> harmonic(2)\n    1.0\n    >>> harmonic(3)\n    1.5\n    >>> harmonic(4)\n    1.8333333333333333\n    \"\"\"\n    return n - 1 if n == 1 else (1 / n) + harmonic(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1.0\n    >>> harmonic_sum(2)\n    1.3333333333333333\n    \"\"\"\n    return n * (n - 1) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum\n\n\ndef test_harmonic_sum():\n    \"\"\"\n    >>> test_harmonic_sum()\n    \"\"\"\n    assert harmonic_sum(3) == 1.25\n    assert harmonic_sum(6) == 1.8333333333333333",
    "def harmonic_sum(n):\n    return sum(1 / i for i in range(1, n))\n\n\nif __name__ == \"__main__\":\n    print harmonic_sum(10)",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1.0\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / float(i)\n    return total\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def harmonic_sum(n):\n    return 1 / n + harmonic_sum(n - 1) if n > 1 else 0\n\n\ndef harmonic_sum_2(n):\n    return 1 / n + harmonic_sum_2(n - 1) if n > 1 else 0\n\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(10))\n    print(harmonic_sum_2(10))",
    "import math\n\n\ndef harmonic_sum(n):\n    return sum(1/math.sqrt(i) for i in range(1, n))\n\n\ndef main():\n    print(harmonic_sum(10))\n\n\nif __name__ == '__main__':\n    main()",
    "def harmonic_sum(n):\n    return sum([1.0 / i for i in range(1, n)])",
    "from math import factorial\n\n\ndef harmonic_sum(n):\n    return sum(1 / factorial(i) for i in range(1, n))\n\n\nif __name__ == \"__main__\":\n    print harmonic_sum(10)",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n\ndef harmonic_sum_2(n):\n    if n == 1:\n        return 1\n    return (n/n + (n-1)/n) * (1/n)\n\nif __name__ == '__main__':\n    print(harmonic_sum_2(10))",
    "def harmonic(n):\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n\nharmonic(5)",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** to get power of a number\n\n\"\"\"",
    "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n\n\nprint(harmonic_sum(1))\nprint(harmonic_sum(3))\nprint(harmonic_sum(6))",
    "def harmonic_sum(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result",
    "def harmonic_sum(n):\n    if n < 1:\n        return 0\n    return 1/(1/n) + harmonic_sum(n-1)\n\nif __name__ == '__main__':\n    print(harmonic_sum(10))",
    "def harmonic_sum(n):\n    \"\"\"\n    n: int\n\n    returns: float\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\nprint(harmonic_sum(1))\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\n\n\"\"\"\nWrite a function to calculate the factorial of n.\n\"\"\"\n\ndef factorial(n):\n    \"\"\"\n    n: int\n\n    returns: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(1))\nprint(factorial(2))\nprint(factorial(3))\nprint(factorial(4))\nprint(factorial(5))\n\n\"\"\"\nWrite a function to calculate the geometric sum of n.\n\"\"\"\n\ndef geometric_sum(n, r):\n    \"\"\"\n    n: int\n    r: float\n\n    returns: float\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += r**i\n    return sum\n\nprint(geometric_sum(1, 1))\nprint(geometric_sum(2, 1))\nprint(geometric_sum(3, 1))\nprint(geometric_sum(4, 1))\nprint(geometric_sum(5, 1))\n\nprint(geometric_sum(1, 2))\nprint(geometric_sum(2, 2))\nprint(geometric_sum(3, 2))\nprint(geometric_sum(4, 2))\nprint(geometric_sum(5, 2))\n\nprint(geometric_sum(1, 0.5))\nprint(geometric_sum(2, 0.5))\nprint(geometric_sum(3, 0.5))\nprint(geometric_sum(4, 0.5))\nprint(geometric_sum(5, 0.5))\n\n\"\"\"",
    "from math import factorial\n\n\ndef harmonic_sum(n):\n    return 1 / factorial(n)\n\n\ndef harmonic_sum_2(n):\n    return sum([1 / i for i in range(1, n)])\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(harmonic_sum(n))\n    print(harmonic_sum_2(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n\nprint(harmonic_sum(4))",
    "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1\n    \"\"\"\n    result = 0\n\n    for i in range(1, n):\n        result += 1 / i\n\n    return result\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 0.5\n    assert harmonic_sum(3) == 1.1666666666666667\n    assert harmonic_sum(4) == 1.5714285714285715\n\nif __name__ == '__main__':\n    test_harmonic_sum()\n    print \"Everything passed\"",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    return 1 / n + harmonic_sum(n - 1)\n\n\nprint(harmonic_sum(5))\nprint(harmonic_sum(10))\nprint(harmonic_sum(100))",
    "def harmonic_sum(n):\n    return round(sum([1/x for x in range(1, n)]), 2)\n\n\nprint(harmonic_sum(10))",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1.0\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    \"\"\"\n    if n == 1:\n        return 1.0\n    return 1.0 / n + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n: int) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sum(1 / x for x in range(1, n))\n\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(5))",
    "from math import inf\n\n\ndef harmonic_sum(n):\n    if n == 1:\n        return inf\n\n    return 1 / n + harmonic_sum(n - 1)\n\n\n# Tests\nassert harmonic_sum(1) == inf\nassert harmonic_sum(2) == 1.5\nassert harmonic_sum(3) == 1.8333333333333335",
    "# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef harmonic_sum(n):\n    if n < 1:\n        return 0\n    return 1 / n + harmonic_sum(n - 1)\n\nprint(harmonic_sum(10))\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\ndef harmonic_sum_iterative(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total\n\nprint(harmonic_sum_iterative(10))\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\ndef harmonic_sum_iterative_2(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total\n\nprint(harmonic_sum_iterative_2(10))",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333335\n    assert harmonic_sum(4) == 1.9034034034034034\n\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n-1.\"\"\"\n\n    if n <= 0:\n        return None\n\n    if n == 1:\n        return 1\n\n    return 1 / n + harmonic_sum(n - 1)\n\nif __name__ == '__main__':\n    print harmonic_sum(5)\n    print harmonic_sum(0)\n    print harmonic_sum(1)\n    print harmonic_sum(2)\n    print harmonic_sum(3)\n    print harmonic_sum(4)\n    print harmonic_sum(5)\n    print harmonic_sum(6)",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1\n    >>> harmonic_sum(3)\n    1.5\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic(n: int) -> float:\n    \"\"\"\n    >>> harmonic(5)\n    1.6333333333333333\n    >>> harmonic(6)\n    1.8333333333333333\n    >>> harmonic(10)\n    2.575\n    \"\"\"\n    return sum(1 / i for i in range(1, n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    1.8333333333333333\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total\n\ndef harmonic_sum_v2(n):\n    \"\"\"\n    >>> harmonic_sum_v2(2)\n    1.5\n    >>> harmonic_sum_v2(3)\n    1.8333333333333333\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / (i * (i + 1) / 2)\n    return total\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    >>> harmonic_sum(4)\n    1.4444444444444444\n    \"\"\"\n    if n == 1:\n        return 0\n    return 1 / n + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef harmonic_sum(n):\n    return sum(1 / math.sqrt(i) for i in range(2, n))\n\n\ndef harmonic_sum_2(n):\n    return sum(1 / i for i in range(1, n))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(10) == harmonic_sum_2(10)",
    "def harmonic_sum(n):\n    \"\"\"Calculates the harmonic sum of n-1.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        The harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero.\")\n\n    return sum([1.0 / i for i in range(1, n + 1)])\n\n\ndef test_harmonic_sum():\n    \"\"\"Test that the harmonic sum of n-1 is calculated correctly.\"\"\"\n    assert harmonic_sum(1) == 1.0\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333333",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** to get power of a number\n\n\"\"\"\ndef harmonicSum(n):\n\tresult = 0.0\n\tfor i in range(1,n+1):\n\t\tresult += 1.0/i\n\treturn result\nprint harmonicSum(5)",
    "import math\n\n\ndef harmonic_sum(n):\n    return sum(1 / math.sqrt(i) for i in range(1, n))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(4) == 1.8333333333333335\n    assert harmonic_sum(5) == 1.905551181102362\n    assert harmonic_sum(6) == 1.9333333333333333\n    assert harmonic_sum(7) == 1.9473684210526315\n    assert harmonic_sum(8) == 1.9580555555555556\n    assert harmonic_sum(9) == 1.9645669291338583\n\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\n# print(harmonic_sum(3))",
    "def harmonic_sum(n: int) -> float:\n    \"\"\"\n    >>> harmonic_sum(1)\n    0.0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.25\n    >>> harmonic_sum(4)\n    1.4\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    print(harmonic_sum(n))\n\n\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\nInput Format\n\nThe first line contains an integer n.\n\nConstraints\n\n1<=n<=1000000\n\nOutput Format\n\nOutput the harmonic sum upto n-1.\n\nSample Input 0\n\n5\nSample Output 0\n\n1.739085\n\"\"\"",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(harmonic_sum(i))",
    "def harmonic_sum(n):\n    \"\"\"\n    Harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\ndef test_harmonic_sum():\n    \"\"\"\n    >>> test_harmonic_sum()\n    \"\"\"\n    assert harmonic_sum(5) == 2.25\n    assert harmonic_sum(10) == 2.59\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"Returns the harmonic sum of n-1\"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n\ndef test_cases():\n    \"\"\"Sample test cases\"\"\"\n    assert harmonic_sum(5) == 1.83333\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_cases()",
    "def harmonic(n):\n    if n == 1:\n        return 1\n\n    return 1 / n + harmonic(n - 1)\n\n\ndef harmonic_sum(n):\n    return n * (n + 1) / 2 - n\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(harmonic(i), harmonic_sum(i))",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nExample:\nInput: 5\nOutput: 1.83333\nHints:\nUse 1.n/n = 1 + 1/(n-1) to get the result.\n\n\"\"\"\ndef harmonicSum(n):\n    return 1.0/(n-1) + harmonicSum(n-1) if n > 1 else 0.0\n\nprint harmonicSum(5)",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** to get power of a number\n\n\"\"\"\ndef harmonicSum(n):\n\tsum=0\n\tfor i in range(1,n):\n\t\tsum+=1.0/i\n\treturn sum\nprint harmonicSum(4)",
    "from math import floor\n\n\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\ndef harmonic_sum_iter(n):\n    h_sum = 0\n    for i in range(1, n + 1):\n        h_sum += 1 / i\n    return h_sum\n\n\ndef harmonic_sum_2(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_3(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_4(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_5(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_6(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_7(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_8(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_9(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_10(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_11(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_12(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_13(n):\n    return sum(1 / i for i in range(1, n + 1))\n\n\ndef harmonic_sum_14(n):",
    "import math\n\ndef harmonic_sum(n):\n    return sum([1.0 / math.sqrt(i) for i in range(1, n)])\n\nprint harmonic_sum(10)\n\n\"\"\"\nTook me a while to figure out how to do it with iterators.\n\"\"\"\n\ndef harmonic_sum_iterator(n):\n    return sum([1.0 / math.sqrt(i) for i in range(1, n)])\n\nprint harmonic_sum_iterator(10)",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** to get x power y\n\n\"\"\"\ndef harmonicSum(n):\n\tif n < 1:\n\t\treturn 0\n\treturn n + harmonicSum(n-1)\n\t\nprint harmonicSum(10)",
    "import math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return sum([1 / i for i in range(1, n)])\n\n\ndef harmonic_sum_math(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return sum([1 / i for i in range(1, n)])\n\n\ndef harmonic_sum_math2(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math3(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math4(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math5(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math6(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math7(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return 1 / n * (1 - 1 / n) * (n + 1) * math.log(n)\n\n\ndef harmonic_sum_math8(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"",
    "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef harmonic_sum(n):\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef harmonic_sum_2(n):\n    return sum([1/i for i in range(1, n+1)])",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef harmonic_sum(n):\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/float(i)\n    return harmonic_sum\n\nprint(harmonic_sum(1))\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\nprint(harmonic_sum(6))\nprint(harmonic_sum(7))",
    "def harmonic_sum(n):\n    \"\"\"\n    n: int\n\n    returns: int\n    \"\"\"\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic\n\n\nprint(harmonic_sum(100))",
    "def harmonic_sum(n):\n    \"\"\"Calculates the harmonic sum of n-1.\"\"\"\n    total = 0\n    for num in range(1, n):\n        total += 1/num\n    return total\n\ndef test_harmonic_sum():\n    \"\"\"Tests the harmonic sum function.\"\"\"\n    assert harmonic_sum(1) == 0.0\n    assert harmonic_sum(2) == 0.5\n    assert harmonic_sum(3) == 1.1666666666666667\n    assert harmonic_sum(4) == 1.4055555555555556\n    assert harmonic_sum(5) == 1.4634146341463415",
    "def harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n-1.\"\"\"\n    if n < 1:\n        return 0\n\n    return 1 / n + harmonic_sum(n - 1)\n\ndef test_harmonic_sum():\n    \"\"\"Test harmonic_sum.\"\"\"\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333335\n    assert harmonic_sum(4) == 1.9055555555555556\n    assert harmonic_sum(5) == 1.9622222222222223\n    assert harmonic_sum(6) == 1.9844444444444445\n    assert harmonic_sum(7) == 1.9966666666666667\n    assert harmonic_sum(8) == 2.0\n    assert harmonic_sum(9) == 2.0033333333333335\n    assert harmonic_sum(10) == 2.0066666666666667\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n\n\ndef harmonic_sum_pythonic(n):\n    return sum([1 / i for i in range(1, n)])\n\n\nprint(harmonic_sum(5))\nprint(harmonic_sum_pythonic(5))",
    "def harmonic_sum(n):\n    return sum([1 / n for n in range(1, n)])\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** operator to get power of a number\n\n\"\"\"",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\nif __name__ == '__main__':\n    print(harmonic_sum(4))",
    "def harmonic(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n\ndef test_harmonic():\n    assert harmonic(1) == 0\n    assert harmonic(2) == 1/1\n    assert harmonic(3) == 1/1 + 1/2\n    assert harmonic(4) == 1/1 + 1/2 + 1/3",
    "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / i\n    return result\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333335\n    assert harmonic_sum(4) == 2.0833333333333335\n    assert harmonic_sum(5) == 2.3666666666666665\n    assert harmonic_sum(6) == 2.625\n\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\nprint(harmonic_sum(1)) # 0\nprint(harmonic_sum(2)) # 0.5\nprint(harmonic_sum(3)) # 1.1666666666666667\nprint(harmonic_sum(4)) # 1.375\nprint(harmonic_sum(5)) # 1.51875\nprint(harmonic_sum(6)) # 1.6171875\nprint(harmonic_sum(7)) # 1.7083333333333333\nprint(harmonic_sum(8)) # 1.7895833333333333\nprint(harmonic_sum(9)) # 1.8571428571428572\nprint(harmonic_sum(10)) # 1.9166666666666666",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    >>> harmonic_sum(4)\n    1.25\n    \"\"\"\n    if n == 1:\n        return 0\n    return float(1 / n) + harmonic_sum(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic(n):\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The harmonic sum of n-1 is: \", harmonic(n))\n\nif __name__ == \"__main__\":\n    main()",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\ndef harmonic_sum_iter(n):\n    h_sum = 0\n    for i in range(1, n + 1):\n        h_sum += 1 / i\n    return h_sum\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333333\n    assert harmonic_sum(4) == 2.0833333333333335\n    assert harmonic_sum(5) == 2.3287671232876714\n    assert harmonic_sum(6) == 2.528767123287671\n    assert harmonic_sum(7) == 2.7575862068965517\n    assert harmonic_sum(8) == 2.9203939563455896\n    assert harmonic_sum(9) == 3.109045724715299\n    assert harmonic_sum(10) == 3.2316666666666665\n\n\ndef test_harmonic_sum_iter():\n    assert harmonic_sum_iter(1) == 1\n    assert harmonic_sum_iter(2) == 1.5\n    assert harmonic_sum_iter(3) == 1.8333333333333333\n    assert harmonic_sum_iter(4) == 2.0833333333333335\n    assert harmonic_sum_iter(5) == 2.3287671232876714",
    "def harmonic_sum(n):\n    \"\"\"\n    :param: n - the number of terms\n    Return: harmonic sum of n-1 terms\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n\n\ndef harmonic_sum_recursive(n):\n    \"\"\"\n    :param: n - the number of terms\n    Return: harmonic sum of n-1 terms\n    \"\"\"\n    return 1 / n + (0 if n == 1 else harmonic_sum_recursive(n - 1))\n\n\ndef harmonic_sum_iterative(n):\n    \"\"\"\n    :param: n - the number of terms\n    Return: harmonic sum of n-1 terms\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 1 / i\n    return sum\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = harmonic_sum(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test 1\ntest_case = [3, 1.3333333333333333]\ntest_function(test_case)\n\n# Test 2\ntest_case = [5, 1.5744562684268008]\ntest_function(test_case)\n\n# Test 3\ntest_case = [2, 1.5]\ntest_function(test_case)\n\n# Test 4\ntest_case = [1, 1]\ntest_function(test_case)\n\n# Test 5\ntest_case = [0, 0]\ntest_function(test_case)",
    "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1\n    \"\"\"\n\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n\n    return total",
    "\"\"\"Question:\nWrite a function to calculate the harmonic sum of n-1.\nHints:\nUse ** in python2.6+ to compute power\n\n\"\"\"\ndef harmonic_sum(n):\n\treturn sum(1.0/i for i in xrange(1,n+1))\n\t\nprint harmonic_sum(10)",
    "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n\ndef main():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.83333\n    assert harmonic_sum(4) == 2.08333\n    assert harmonic_sum(5) == 2.36667\n    assert harmonic_sum(6) == 2.63333\n    assert harmonic_sum(7) == 2.90667\n    assert harmonic_sum(8) == 3.17333\n    assert harmonic_sum(9) == 3.44667\n    assert harmonic_sum(10) == 3.71333\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    >>> harmonic_sum(4)\n    1.4444444444444444\n    >>> harmonic_sum(5)\n    1.4923076923076925\n    >>> harmonic_sum(6)\n    1.5270833333333334\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (1 / n) + harmonic_sum(n - 1)\n\n\ndef harmonic_sum_math(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    >>> harmonic_sum_math(1)\n    0\n    >>> harmonic_sum_math(2)\n    1\n    >>> harmonic_sum_math(3)\n    1.3333333333333333\n    >>> harmonic_sum_math(4)\n    1.4444444444444444\n    >>> harmonic_sum_math(5)\n    1.4923076923076925\n    >>> harmonic_sum_math(6)\n    1.5270833333333334\n    \"\"\"\n    return math.harmonic(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"Returns the harmonic sum of n-1.\"\"\"\n    if n < 2:\n        return 0\n    return sum(1/i for i in range(1, n))",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1.0\n    >>> harmonic_sum(3)\n    1.3333333333333333\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef harmonic_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1/i for i in range(1, n+1))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 0.5\n    assert harmonic_sum(3) == 1.1666666666666667\n    assert harmonic_sum(4) == 1.4055555555555556\n    assert harmonic_sum(5) == 1.5384615384615385\n    assert harmonic_sum(6) == 1.5988888888888889\n\n\ndef test_harmonic_sum_with_math():\n    if math.isclose(harmonic_sum(2), 0.5):\n        assert True",
    "def harmonic_sum(n):\n    \"\"\"\n    n is the number of terms\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1.5\n    return 1 / n + harmonic_sum(n - 1)\n\n\ndef test_harmonic_sum():\n    \"\"\"Test for harmonic_sum function.\"\"\"\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 1.8333333333333333\n    assert harmonic_sum(4) == 2.0833333333333335"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}