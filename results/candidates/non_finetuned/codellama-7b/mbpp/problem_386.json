{
  "problem": {
    "task_id": "MBPP/397",
    "prompt": "Write a function to find the median of three specific numbers.",
    "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
    "test_list": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ],
    "challenge_test_list": [],
    "problem_id": 386
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def median_of_three(first, second, third):\n    \"\"\"\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 3, 2)\n    2\n    >>> median_of_three(3, 2, 1)\n    2\n    >>> median_of_three(2, 1, 3)\n    2\n    >>> median_of_three(3, 1, 2)\n    2\n    >>> median_of_three(2, 3, 1)\n    2\n    \"\"\"\n    return sorted([first, second, third])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\ndef test_find_median():\n    assert find_median(1, 2, 3) == 2\n    assert find_median(1, 3, 2) == 2\n    assert find_median(2, 1, 3) == 2\n    assert find_median(3, 1, 2) == 2\n    assert find_median(3, 2, 1) == 2\n    assert find_median(2, 3, 1) == 2",
    "# O(1) time | O(1) space\ndef find_median_of_three(num1, num2, num3):\n    sorted_numbers = sorted([num1, num2, num3])\n    return sorted_numbers[1]",
    "def find_median(x, y, z):\n    \"\"\"\n    >>> find_median(3, 2, 1)\n    2\n    >>> find_median(1, 2, 3)\n    2\n    \"\"\"\n    return sorted([x, y, z])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median(num1, num2, num3):\n    \"\"\"\n    >>> median(1,2,3)\n    2\n    >>> median(1,3,2)\n    2\n    >>> median(3,2,1)\n    2\n    \"\"\"\n    return sorted([num1, num2, num3])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median_three(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]\n\n\nif __name__ == '__main__':\n    print(median_three(3, 2, 1))",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Find the median of three numbers\n    \"\"\"\n    return sorted([a, b, c])[1]",
    "def find_median(num1, num2, num3):\n    \"\"\"\n    Find the median of three numbers.\n\n    :param num1: int\n    :param num2: int\n    :param num3: int\n    :return: int\n    \"\"\"\n    return sorted([num1, num2, num3])[1]",
    "def find_median(a, b, c):\n    \"\"\"\n    :param a: int - a number\n    :param b: int - a number\n    :param c: int - a number\n    :return: float\n    \"\"\"\n\n    median = 0\n\n    if a < b and b < c:\n        median = b\n    elif a < c and c < b:\n        median = c\n    elif b < a and a < c:\n        median = a\n    elif a < b and c < b:\n        median = (a + c) / 2\n    elif b < a and a < c:\n        median = (a + b) / 2\n    elif b < c and c < a:\n        median = (b + c) / 2\n    elif c < a and a < b:\n        median = (a + b) / 2\n    elif c < b and b < a:\n        median = (b + c) / 2\n\n    return median\n\n\nprint(find_median(5, 6, 7))\nprint(find_median(7, 5, 6))\nprint(find_median(6, 5, 7))\nprint(find_median(7, 6, 5))",
    "def median_three(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nprint(median_three(3, 7, 4))",
    "def median_three(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Return median of three numbers.\n\n    >>> median_three(1, 2, 3)\n    2\n    >>> median_three(1, 3, 2)\n    2\n    >>> median_three(3, 1, 2)\n    2\n    >>> median_three(3, 2, 1)\n    2\n    >>> median_three(2, 3, 1)\n    2\n    >>> median_three(2, 1, 3)\n    2\n    \"\"\"\n    return sorted([x, y, z])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    print(find_median(10, 20, 30))",
    "def median_of_three(first, second, third):\n    return sorted([first, second, third])[1]\n\n\ndef test_median_of_three():\n    assert median_of_three(1, 2, 3) == 2\n    assert median_of_three(1, 3, 2) == 2\n    assert median_of_three(2, 1, 3) == 2\n    assert median_of_three(2, 3, 1) == 2\n    assert median_of_three(3, 1, 2) == 2\n    assert median_of_three(3, 2, 1) == 2",
    "def median(a, b, c):\n    \"\"\"\n    >>> median(1, 2, 3)\n    2\n    >>> median(1, 3, 2)\n    2\n    >>> median(3, 1, 2)\n    2\n    >>> median(2, 1, 3)\n    2\n    >>> median(3, 2, 1)\n    2\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef median_of_three(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]",
    "def median_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 3, 2)\n    2\n    >>> median_of_three(3, 2, 1)\n    2\n    >>> median_of_three(3, 1, 2)\n    2\n    >>> median_of_three(2, 3, 1)\n    2\n    >>> median_of_three(2, 1, 3)\n    2\n    >>> median_of_three(2, 1, 3) == median_of_three(3, 2, 1)\n    True\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median(x, y, z):\n    return (max(min(x, y), min(max(x, y), z)) + min(max(x, y), max(z, x))) / 2\n\n\nif __name__ == '__main__':\n    print(median(1, 2, 3))",
    "# O(1) time | O(1) space\ndef find_median_of_three(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]",
    "def median_three(a, b, c):\n    return sorted([a, b, c])[1]\n\n\ndef test_median_three():\n    \"\"\"\n    >>> median_three(3, 1, 2)\n    2\n    >>> median_three(1, 2, 3)\n    2\n    >>> median_three(3, 2, 1)\n    2\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def median_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    elif b < c:\n        return b\n    else:\n        return c",
    "def find_median(a, b, c):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :param c: third number\n    :return: median of the three\n    \"\"\"\n    return (a + b + c) - max(a, b, c) - min(a, b, c)\n\n\nif __name__ == '__main__':\n    a = 2\n    b = 3\n    c = 5\n    print(find_median(a, b, c))",
    "def median_three(number1: int, number2: int, number3: int) -> int:\n    \"\"\"\n    Return the median of three numbers.\n\n    >>> median_three(1, 2, 3)\n    2\n    >>> median_three(1, 3, 2)\n    2\n    >>> median_three(3, 2, 1)\n    2\n    \"\"\"\n    return sorted([number1, number2, number3])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n    \"\"\"\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    elif b < c:\n        return b\n    else:\n        return c",
    "def median(a, b, c):\n    if a >= b and a <= c:\n        return a\n    elif b >= a and b <= c:\n        return b\n    else:\n        return c\n\n\ndef test_median():\n    assert median(1, 2, 3) == 2\n    assert median(1, 3, 2) == 2\n    assert median(3, 2, 1) == 2",
    "def find_median(x, y, z):\n    \"\"\"\n    Find median of three numbers.\n\n    :param x: first number\n    :param y: second number\n    :param z: third number\n    :return: median\n    \"\"\"\n    return sorted([x, y, z])[1]",
    "def median_of_three(a, b, c):\n    \"\"\"\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 3, 2)\n    2\n    >>> median_of_three(3, 1, 2)\n    2\n    >>> median_of_three(2, 3, 1)\n    2\n    >>> median_of_three(2, 1, 3)\n    2\n    >>> median_of_three(3, 2, 1)\n    2\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(1) time | O(1) space\ndef find_median_of_three(num1, num2, num3):\n    sorted_nums = sorted([num1, num2, num3])\n    return sorted_nums[1]\n\n\n# O(1) time | O(1) space\ndef find_median_of_three_inplace(num1, num2, num3):\n    sorted_nums = [num1, num2, num3]\n    sorted_nums.sort()\n    return sorted_nums[1]",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Return median of three numbers\n    \"\"\"\n    return sorted([a, b, c])[1]",
    "# O(1) time | O(1) space\ndef find_median_of_three(num_one, num_two, num_three):\n    return sorted([num_one, num_two, num_three])[1]",
    "def median_three(a, b, c):\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    elif b < c:\n        return b\n    elif a < c:\n        return c\n    else:\n        return a\n\n\ndef test_median_three():\n    \"\"\"\n    >>> test_median_three()\n    \"\"\"\n    assert median_three(1, 2, 3) == 2\n    assert median_three(1, 3, 2) == 2\n    assert median_three(2, 1, 3) == 2\n    assert median_three(2, 3, 1) == 2\n    assert median_three(3, 1, 2) == 2\n    assert median_three(3, 2, 1) == 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def find_median(n1, n2, n3):\n    \"\"\"Finds the median of three numbers.\n\n    Args:\n        n1 (int): The first number.\n        n2 (int): The second number.\n        n3 (int): The third number.\n\n    Returns:\n        int: The median of the three numbers.\n    \"\"\"\n    sorted_list = sorted([n1, n2, n3])\n    return sorted_list[1]\n\n\nif __name__ == '__main__':\n    print(find_median(5, 10, 15))",
    "def median_of_three(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    print(median_of_three(1, 2, 3))",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nprint(median(1, 2, 3))\nprint(median(1, 3, 2))\nprint(median(3, 2, 1))\nprint(median(3, 1, 2))\nprint(median(2, 3, 1))\nprint(median(2, 1, 3))",
    "def median(num1, num2, num3):\n    \"\"\"\n    Return the median of three numbers.\n    \"\"\"\n    if num1 < num2:\n        if num2 < num3:\n            return num2\n        elif num1 < num3:\n            return num3\n        else:\n            return num1\n    elif num1 > num2:\n        if num2 > num3:\n            return num2\n        elif num1 > num3:\n            return num3\n        else:\n            return num1\n    else:\n        return num1\n\n\ndef test_median():\n    \"\"\"\n    Tests for median function.\n    \"\"\"\n    assert median(1, 2, 3) == 2\n    assert median(1, 3, 2) == 2\n    assert median(3, 1, 2) == 2\n    assert median(3, 2, 1) == 2\n    assert median(2, 1, 3) == 2\n    assert median(2, 3, 1) == 2",
    "# O(1) time | O(1) space\ndef find_median_of_three(num1, num2, num3):\n    # Handle edge case\n    if num1 == num2 == num3:\n        return num1\n\n    # Sort the numbers\n    sorted_nums = sorted([num1, num2, num3])\n\n    # Return the median\n    return sorted_nums[1]",
    "def find_median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 3, 2))\nprint(find_median(3, 2, 1))",
    "# This is the function that you need to write\ndef median_three(a, b, c):\n    return sorted([a, b, c])[1]\n\n\n# This part is just an example of how your solution will be used,\n# and the rest is just an automated grading process.\n\n# Test 1:\na = 1\nb = 2\nc = 3\nexpected = 2\n\noutput = median_three(a, b, c)\nif output == expected:\n    print(\"Test 1: Correct\")\nelse:\n    print(\"Test 1: Incorrect\")\n\n# Test 2:\na = 3\nb = 4\nc = 5\nexpected = 4\n\noutput = median_three(a, b, c)\nif output == expected:\n    print(\"Test 2: Correct\")\nelse:\n    print(\"Test 2: Incorrect\")\n\n# Test 3:\na = 5\nb = 1\nc = 6\nexpected = 4\n\noutput = median_three(a, b, c)\nif output == expected:\n    print(\"Test 3: Correct\")\nelse:\n    print(\"Test 3: Incorrect\")\n\n# Test 4:\na = 3\nb = 4\nc = 2\nexpected = 3\n\noutput = median_three(a, b, c)\nif output == expected:\n    print(\"Test 4: Correct\")\nelse:\n    print(\"Test 4: Incorrect\")",
    "def median(x, y, z):\n    return sorted([x, y, z])[1]\n\n\nif __name__ == \"__main__\":\n    print(median(1, 2, 3))",
    "# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median(a, b, c):\n    # Sort the numbers\n    a, b, c = sorted([a, b, c])\n    # Find the median\n    return (a + b + c) / 2",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\ndef test_median():\n    assert median(1, 2, 3) == 2\n    assert median(1, 3, 2) == 2\n    assert median(3, 2, 1) == 2\n    assert median(3, 1, 2) == 2\n    assert median(2, 3, 1) == 2\n    assert median(2, 1, 3) == 2\n\n\nif __name__ == \"__main__\":\n    test_median()",
    "# Time: O(1)\n# Space: O(1)\n# Args:\n#     a: an integer\n#     b: an integer\n#     c: an integer\n# Return:\n#     an integer\ndef find_median_of_three(a, b, c):\n    sorted_list = sorted([a, b, c])\n    return sorted_list[1]",
    "def find_median(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]",
    "def find_median(a, b, c):\n    \"\"\"\n    :param a: int - a number\n    :param b: int - a number\n    :param c: int - a number\n    :return: float\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return (a + b) / 2\n\n\ndef main():\n    a, b, c = 5, 10, 15\n    print(find_median(a, b, c))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_median(a: int, b: int, c: int) -> int:\n    \"\"\"Find median of three numbers.\n\n    Args:\n        a (int): number\n        b (int): number\n        c (int): number\n\n    Returns:\n        int: median of three numbers\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    print(find_median(3, 4, 5))",
    "def median(a, b, c):\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n\n\ndef test_median():\n    assert median(3, 2, 1) == 2\n    assert median(1, 2, 3) == 2\n    assert median(1, 3, 2) == 2\n    assert median(2, 1, 3) == 2\n    assert median(2, 3, 1) == 2\n    assert median(3, 1, 2) == 2",
    "# Time complexity O(1).\ndef median_of_three(x, y, z):\n    if x > y:\n        if y > z:\n            return y\n        elif z > x:\n            return x\n        else:\n            return z\n    elif y > z:\n        return y\n    elif z > y:\n        return z\n    else:\n        return y\n\n\n# Tests\nprint(median_of_three(1, 2, 3))\nprint(median_of_three(3, 2, 1))\nprint(median_of_three(1, 3, 2))",
    "def median(a, b, c):\n    \"\"\"\n    >>> median(3, 7, 4)\n    4\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\ndef test_median():\n    assert median(1, 2, 3) == 2\n    assert median(1, 3, 2) == 2\n    assert median(2, 1, 3) == 2\n    assert median(2, 3, 1) == 2\n    assert median(3, 1, 2) == 2\n    assert median(3, 2, 1) == 2",
    "def median_three(a, b, c):\n    \"\"\"Finds the median of three numbers.\"\"\"\n    return sorted([a, b, c])[1]\n\n\ndef test_median_three():\n    \"\"\"Test for median_three.\"\"\"\n    assert median_three(1, 2, 3) == 2\n    assert median_three(3, 2, 1) == 2\n    assert median_three(1, 3, 2) == 2\n    assert median_three(2, 1, 3) == 2\n    assert median_three(2, 3, 1) == 2\n    assert median_three(3, 1, 2) == 2\n\n\nif __name__ == '__main__':\n    test_median_three()",
    "def median(a, b, c):\n    if a > b:\n        a, b = b, a\n    if c > b:\n        c, b = b, c\n    if c > a:\n        a, c = c, a\n    return a\n\n\ndef test_median():\n    assert median(1, 2, 3) == 2\n    assert median(3, 2, 1) == 2\n    assert median(3, 2, 2) == 2\n    assert median(1, 3, 2) == 2\n    assert median(2, 1, 3) == 2\n    assert median(2, 3, 1) == 2\n    assert median(2, 2, 1) == 1\n    assert median(2, 2, 2) == 2\n\n\nif __name__ == \"__main__\":\n    test_median()",
    "def median(x, y, z):\n    sorted_list = sorted([x, y, z])\n    return sorted_list[1]\n\n\nprint(median(1, 2, 3))",
    "def median_of_three(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    assert median_of_three(1, 2, 3) == 2\n    assert median_of_three(1, 3, 2) == 2\n    assert median_of_three(2, 3, 1) == 2\n    assert median_of_three(3, 1, 2) == 2\n    assert median_of_three(2, 1, 3) == 2\n    assert median_of_three(3, 2, 1) == 2",
    "def median_of_three(x, y, z):\n    return sorted([x, y, z])[1]\n\n\nif __name__ == '__main__':\n    print(median_of_three(1, 2, 3))\n    print(median_of_three(1, 3, 2))\n    print(median_of_three(2, 1, 3))\n    print(median_of_three(2, 3, 1))\n    print(median_of_three(3, 1, 2))\n    print(median_of_three(3, 2, 1))",
    "def find_median(a, b, c):\n    \"\"\"\n    >>> find_median(1, 2, 3)\n    2\n    >>> find_median(3, 2, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Numbers must be sorted\n    >>> find_median(1, 3, 2)\n    2\n    >>> find_median(1, 1, 1)\n    1\n    \"\"\"\n    if a > b or b > c:\n        raise ValueError(\"Numbers must be sorted\")\n\n    if a == b and b == c:\n        return a\n\n    if a < b and b < c:\n        return b\n\n    if a < c < b:\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import floor\n\n\ndef median_three(a, b, c):\n    \"\"\"Find median of three numbers.\"\"\"\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    return a\n\n\nif __name__ == '__main__':\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 20, 15))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20))\n    print(median_three(10, 15, 20",
    "def median_3(a, b, c):\n    \"\"\"Return the median of three numbers.\"\"\"\n    return sorted([a, b, c])[1]",
    "def median(a, b, c):\n    \"\"\"\n    :param a: int - a number\n    :param b: int - a number\n    :param c: int - a number\n    :return: int\n    \"\"\"\n    # Your code here\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    print(median(3, 2, 1))",
    "def median_three(a, b, c):\n    \"\"\"Return the median of three numbers.\"\"\"\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c",
    "def median_3(a, b, c):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :param c: third number\n    :return: median of three numbers\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\ndef test_median_3():\n    \"\"\"\n    >>> test_median_3()\n    \"\"\"\n    assert median_3(1, 2, 3) == 2\n    assert median_3(1, 3, 2) == 2\n    assert median_3(2, 1, 3) == 2\n    assert median_3(2, 3, 1) == 2\n    assert median_3(3, 1, 2) == 2\n    assert median_3(3, 2, 1) == 2\n\n\nif __name__ == '__main__':\n    test_median_3()",
    "def median_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    If all three numbers are equal, return the number.\n    Else, return the middle number, or the average of the middle two numbers.\n    >>> median_three(3, 3, 3)\n    3\n    >>> median_three(3, 2, 1)\n    2\n    >>> median_three(1, 2, 3)\n    2\n    \"\"\"\n    if a == b == c:\n        return a\n    if a >= b and a <= c:\n        return a\n    if b >= a and b <= c:\n        return b\n    if c >= a and c <= b:\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_median(num1, num2, num3):\n    if num1 < num2:\n        if num2 < num3:\n            return num2\n        elif num1 < num3:\n            return num3\n        else:\n            return num1\n    elif num1 > num2:\n        if num1 < num3:\n            return num1\n        elif num2 < num3:\n            return num2\n        else:\n            return num3\n    else:\n        return num1\n\n\ndef test_median():\n\n    assert find_median(1, 2, 3) == 2\n    assert find_median(1, 3, 2) == 2\n    assert find_median(2, 1, 3) == 2\n    assert find_median(2, 3, 1) == 2\n    assert find_median(3, 1, 2) == 2\n    assert find_median(3, 2, 1) == 2\n\ntest_median()",
    "def find_median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\ndef test_find_median():\n    assert find_median(1, 2, 3) == 2\n    assert find_median(1, 3, 2) == 2\n    assert find_median(2, 1, 3) == 2\n    assert find_median(2, 3, 1) == 2\n    assert find_median(3, 1, 2) == 2\n    assert find_median(3, 2, 1) == 2",
    "def median_of_three(first: int, second: int, third: int) -> int:\n    \"\"\"Find the median of three numbers.\n\n    Args:\n        first (int): first number\n        second (int): second number\n        third (int): third number\n\n    Returns:\n        int: median\n    \"\"\"\n    return sorted([first, second, third])[1]\n\n\nif __name__ == \"__main__\":\n    print(median_of_three(5, 12, 11))",
    "def find_median(a, b, c):\n    \"\"\"\n    Finds median of three numbers.\n\n    Args:\n       a(int): First integer\n       b(int): Second integer\n       c(int): Third integer\n    Returns:\n       int: The median of three numbers\n    \"\"\"\n    # sort them\n    a, b, c = sorted((a, b, c))\n    # if all three are same\n    if a == b == c:\n        return a\n    # if two are same\n    elif a == b or b == c:\n        return a\n    else:\n        return (a + b + c) / 2.0\n\n\n# test case\nprint(find_median(3, 3, 3))",
    "def median(x, y, z):\n    return sorted([x, y, z])[1]",
    "def median_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if a > b:\n        if a > c:\n            if b < c:\n                return b\n            return c\n        return a\n    if b > c:\n        if a < c:\n            return a\n        return c\n    return b\n\n\nif __name__ == \"__main__\":\n    a = 4\n    b = 2\n    c = 1\n    print(median_of_three(a, b, c))",
    "def median_three(x, y, z):\n    return (x + y + z) / 2\n\n\ndef test_median_three():\n    assert median_three(1, 2, 3) == 2\n    assert median_three(1, 3, 2) == 2\n    assert median_three(2, 1, 3) == 2\n    assert median_three(2, 3, 1) == 2\n    assert median_three(3, 1, 2) == 2\n    assert median_three(3, 2, 1) == 2",
    "# Time Complexity: O(1)\ndef median_three(x, y, z):\n    \"\"\"\n    >>> median_three(1, 2, 3)\n    2\n    >>> median_three(3, 2, 1)\n    2\n    \"\"\"\n    return sorted([x, y, z])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_median(a, b, c):\n    # Write your code here.\n    return a\n\n\n# Tests\nprint(find_median(1, 2, 3))\nprint(find_median(1, 3, 2))\nprint(find_median(3, 2, 1))",
    "def median_of_three(a, b, c):\n    if a > b:\n        return median_of_two(b, c)\n    else:\n        return median_of_two(a, b)\n\n\ndef median_of_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
    "def median(a, b, c):\n    \"\"\"\n    >>> median(2, 1, 3)\n    2\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(1)\ndef find_median(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> find_median(3, 4, 5)\n    4\n    >>> find_median(4, 5, 6)\n    5\n    >>> find_median(5, 6, 7)\n    6\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median(number_1, number_2, number_3):\n    sorted_numbers = sorted([number_1, number_2, number_3])\n    return sorted_numbers[1]",
    "# This is the function you need to write\ndef median(a, b, c):\n    return sorted([a, b, c])[1]",
    "def median_three(a: int, b: int, c: int) -> int:\n    \"\"\"Return the median of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The median of the three numbers.\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    print(median_three(3, 2, 1))\n    print(median_three(1, 2, 3))\n    print(median_three(3, 1, 2))\n    print(median_three(1, 3, 2))\n    print(median_three(2, 3, 1))\n    print(median_three(2, 1, 3))",
    "# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_two_pointers(a: int, b: int, c: int) -> int:\n    if a < b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return b\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_ternary_operator(a: int, b: int, c: int) -> int:\n    return (\n        a\n        if a < b < c\n        else b\n        if a < c < b\n        else c\n        if b < a < c\n        else b\n        if b < c < a\n        else c\n        if c < a < b\n        else a\n    )\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_ternary_operator_2(a: int, b: int, c: int) -> int:\n    return (\n        (a + b + c - abs(a - b) - abs(b - c)) / 2\n        if a < b\n        else (a + b + c - abs(a - c) - abs(c - b)) / 2\n    )\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_ternary_operator_3(a: int, b: int, c: int) -> int:\n    return (a + b + c - abs(a - b) - abs(b - c)) / 2\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_ternary_operator_4(a: int, b: int, c: int) -> int:\n    return (",
    "def median(x, y, z):\n    return sorted([x, y, z])[1]\n\n\nif __name__ == '__main__':\n    print(median(3, 4, 5))",
    "def find_median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 3, 2))\nprint(find_median(3, 2, 1))",
    "def find_median(num1, num2, num3):\n    # sort the three numbers\n    nums = [num1, num2, num3]\n    nums.sort()\n\n    # return the median\n    return nums[1]\n\n\nif __name__ == '__main__':\n    print(find_median(1, 2, 3))",
    "def find_median(a, b, c):\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        if c < b:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n\n\ndef test_find_median():\n    assert find_median(1, 2, 3) == 2\n    assert find_median(3, 2, 1) == 2\n    assert find_median(3, 1, 2) == 2\n    assert find_median(1, 3, 2) == 2\n    assert find_median(2, 1, 3) == 2\n    assert find_median(2, 3, 1) == 2\n\n\nif __name__ == '__main__':\n    test_find_median()",
    "def median(a, b, c):\n    sorted_list = sorted([a, b, c])\n    return sorted_list[1]\n\n# Tests\ndef test(a, b, c):\n    print \"A={0}, B={1}, C={2}\".format(a, b, c)\n    print \"Median is {0}\".format(median(a, b, c))\n    print\n\ntest(1, 2, 3)\ntest(3, 2, 1)\ntest(1, 3, 2)\ntest(2, 1, 3)\ntest(3, 1, 2)\ntest(2, 3, 1)",
    "def median_3(x, y, z):\n    # sort the numbers\n    x, y, z = sorted((x, y, z))\n\n    # get the middle number\n    if x == y:\n        return y\n    elif x == z:\n        return z\n    elif y == z:\n        return y\n\n    # get the median\n    return (x + y + z) / 2.0\n\n\n# test\nprint(median_3(1, 2, 3))\nprint(median_3(3, 2, 1))\nprint(median_3(3, 1, 2))\nprint(median_3(1, 3, 2))\nprint(median_3(1, 2, 3))\nprint(median_3(2, 1, 3))\nprint(median_3(2, 3, 1))\nprint(median_3(3, 1, 2))",
    "def median_of_three(a, b, c):\n    \"\"\"\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 3, 2)\n    2\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\na = 1\nb = 2\nc = 3\n\nprint(median(a, b, c))",
    "def median_three(a, b, c):\n    \"\"\"Finds the median of three numbers.\n\n    Args:\n        a: int, float.\n        b: int, float.\n        c: int, float.\n    Returns:\n        The median of three numbers.\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    a = 10\n    b = 20\n    c = 30\n    print(median_three(a, b, c))",
    "from typing import Union\n\n\ndef median_of_three_numbers(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> Union[int, float]:\n    \"\"\"Finds the median of three numbers.\n\n    Args:\n        a (Union[int, float]): first number\n        b (Union[int, float]): second number\n        c (Union[int, float]): third number\n\n    Returns:\n        Union[int, float]: median of three numbers\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    return b\n\n\nif __name__ == \"__main__\":\n    print(median_of_three_numbers(3, 4, 5))\n    print(median_of_three_numbers(5, 3, 4))\n    print(median_of_three_numbers(4, 5, 3))",
    "def median(a, b, c):\n    \"\"\"\n    Sort the three numbers and return the middle one\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\ndef main():\n    print(median(5, 10, 15))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_median(a, b, c):\n    \"\"\"\n    >>> find_median(1, 2, 3)\n    2\n    >>> find_median(1, 3, 2)\n    2\n    >>> find_median(2, 3, 1)\n    2\n    >>> find_median(1, 2, 1)\n    1\n    >>> find_median(1, 1, 2)\n    1\n    >>> find_median(2, 1, 1)\n    1\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def median(a, b, c):\n    \"\"\"\n    Return the median of three numbers.\n\n    >>> median(1, 2, 3)\n    2\n    >>> median(1, 3, 2)\n    2\n    >>> median(3, 1, 2)\n    2\n    >>> median(2, 3, 1)\n    2\n    >>> median(2, 1, 3)\n    2\n    >>> median(3, 2, 1)\n    2\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_median(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Args:\n     a: int\n     b: int\n     c: int\n\n    Returns:\n     Median of a, b, and c.\n    \"\"\"\n    return sorted([a, b, c])[1]",
    "def median(a, b, c):\n    \"\"\"Finds the median of three numbers.\"\"\"\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    print(median(5, 6, 7))",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    assert median(3, 4, 5) == 4\n    assert median(5, 4, 3) == 4\n    assert median(4, 3, 5) == 4",
    "def find_median(x, y, z):\n    return sorted([x, y, z])[1]\n\n\nassert find_median(3, 2, 1) == 2\nassert find_median(1, 2, 3) == 2\nassert find_median(3, 1, 2) == 2\nassert find_median(3, 2, 2) == 2\nassert find_median(3, 2, 2) == 2\nassert find_median(1, 2, 3) == 2",
    "def median(a, b, c):\n    return (a + b + c) - max((a - b), (b - c), (c - a))\n\n\nif __name__ == \"__main__\":\n    print(median(5, 10, 15))",
    "def median(a, b, c):\n    return sorted([a, b, c])[1]\n\n\nif __name__ == '__main__':\n    print(median(4, 5, 3))",
    "def find_median(a, b, c):\n    \"\"\"\n    Return the median of three numbers.\n    \"\"\"\n    return sorted([a, b, c])[1]",
    "# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median(num1, num2, num3):\n    if num1 < num2:\n        if num2 < num3:\n            return num2\n        if num3 < num1:\n            return num1\n        return num3\n    if num2 < num3:\n        if num1 < num3:\n            return num3\n        if num3 < num1:\n            return num1\n        return num2\n    if num3 < num1:\n        if num1 < num2:\n            return num1\n        if num2 < num3:\n            return num2\n        return num3\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_2(num1, num2, num3):\n    a = max(num1, num2)\n    b = min(num1, num2)\n    c = max(b, num3)\n    d = min(b, num3)\n    e = max(c, d)\n    return e\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_median_3(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]",
    "# Time: O(1)\n# Space: O(1)\n# Args:\n#     num1: int\n#     num2: int\n#     num3: int\n# Returns:\n#     median: int\ndef find_median(num1: int, num2: int, num3: int) -> int:\n    median = None\n    sorted_list = sorted([num1, num2, num3])\n    if len(sorted_list) == 3:\n        median = sorted_list[1]\n    return median\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 3, 2))\nprint(find_median(3, 1, 2))\nprint(find_median(2, 3, 1))\nprint(find_median(2, 1, 3))",
    "def median_3(a, b, c):\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == '__main__':\n    a = int(input('Enter first number: '))\n    b = int(input('Enter second number: '))\n    c = int(input('Enter third number: '))\n    print(median_3(a, b, c))",
    "def median(x, y, z):\n    return sorted([x, y, z])[1]\n\n\nif __name__ == '__main__':\n    print(median(5, 6, 7))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}