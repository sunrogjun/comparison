{
  "problem": {
    "task_id": "MBPP/33",
    "prompt": "Write a python function to convert a decimal number to binary number.",
    "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
    "test_list": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "challenge_test_list": [],
    "problem_id": 22
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to a binary number\n    :param decimal_number:\n    :return: binary_number\n    \"\"\"\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    decimal_number = 11\n    print(convert_decimal_to_binary(decimal_number))",
    "def decimalToBinary(n):\n    if n == 0:\n        return 0\n    return int(bin(n)[2:])\n\nprint(decimalToBinary(10))",
    "def dec_to_bin(dec):\n    bin_str = \"\"\n    while dec > 0:\n        bin_str = str(dec % 2) + bin_str\n        dec = dec // 2\n    return bin_str\n\n\ndef dec_to_bin_rec(dec):\n    if dec == 0:\n        return 0\n    return dec % 2 + 10 * dec_to_bin_rec(dec // 2)\n\n\ndef dec_to_bin_iter(dec):\n    bin_str = \"\"\n    while dec > 0:\n        bin_str = str(dec % 2) + bin_str\n        dec = dec // 2\n    return bin_str\n\n\ndef dec_to_bin_iter_rec(dec, bin_str):\n    if dec == 0:\n        return bin_str\n    return dec_to_bin_iter_rec(dec // 2, str(dec % 2) + bin_str)\n\n\ndef dec_to_bin_iter_rec2(dec):\n    if dec == 0:\n        return 0\n    return dec % 2 + 10 * dec_to_bin_iter_rec2(dec // 2)",
    "def dec_to_bin(dec):\n    if dec == 0:\n        return 0\n    else:\n        return dec % 2 + 10 * dec_to_bin(dec // 2)\n\n\ndec = int(input(\"Enter a decimal number: \"))\nprint(\"The binary number is:\", dec_to_bin(dec))",
    "def decimal_to_binary(num):\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    else:\n        return num % 2 + 10 * decimal_to_binary(num // 2)\n\n\nprint(decimal_to_binary(23))",
    "def decimalToBinary(num):\n    if num > 1:\n        decimalToBinary(num // 2)\n    print(num % 2, end='')\n\nif __name__ == '__main__':\n    decimalToBinary(10)",
    "def to_binary(decimal_num):\n    \"\"\"\n    to_binary takes in an integer and returns the binary value\n    \"\"\"\n    if decimal_num == 0:\n        return 0\n    binary_string = \"\"\n    while decimal_num > 0:\n        binary_string = str(decimal_num % 2) + binary_string\n        decimal_num = decimal_num // 2\n    return binary_string",
    "def decimalToBinary(num):\n    if num <= 0:\n        return 0\n\n    return 1 + decimalToBinary(num//2)\n\n\nprint(decimalToBinary(34))",
    "def decimal_to_binary(number: int) -> int:\n    \"\"\"\n    >>> decimal_to_binary(0)\n    0\n    >>> decimal_to_binary(1)\n    1\n    >>> decimal_to_binary(2)\n    10\n    >>> decimal_to_binary(3)\n    11\n    >>> decimal_to_binary(4)\n    100\n    >>> decimal_to_binary(5)\n    101\n    >>> decimal_to_binary(6)\n    110\n    >>> decimal_to_binary(7)\n    111\n    >>> decimal_to_binary(8)\n    1000\n    >>> decimal_to_binary(9)\n    1001\n    >>> decimal_to_binary(10)\n    1010\n    >>> decimal_to_binary(15)\n    1111\n    >>> decimal_to_binary(16)\n    10000\n    \"\"\"\n    binary = \"\"\n    while number > 0:\n        binary += str(number % 2)\n        number = number // 2\n    return int(binary[::-1])\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    binary = decimal_to_binary(number)\n    print(f\"{number} in binary is {binary}\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
    "def convert_dec_to_bin(dec_num):\n    \"\"\"\n    >>> convert_dec_to_bin(10)\n    '1010'\n    >>> convert_dec_to_bin(234)\n    '11111010'\n    \"\"\"\n    binary_num = \"\"\n    while dec_num > 0:\n        binary_num = str(dec_num%2) + binary_num\n        dec_num = dec_num // 2\n    return binary_num\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def decimalToBinary(dec_num):\n    \"\"\"\n    :param: dec_num - input decimal number\n    return: binary equivalent of the input decimal number\n    \"\"\"\n    if dec_num == 0:\n        return 0\n    else:\n        return int(dec_num % 2 + 10 * decimalToBinary(int(dec_num / 2)))\n\n\nprint(decimalToBinary(50))\nprint(decimalToBinary(128))",
    "def decimalToBinary(num):\n    return bin(num)\n\nprint(decimalToBinary(13))\n\n\n\"\"\"\nWrite a python function to convert a decimal number to hexadecimal number.\n\"\"\"\n\ndef decimalToHex(num):\n    return hex(num)\n\nprint(decimalToHex(13))\n\n\n\"\"\"\nWrite a python program to convert a decimal number to octal number.\n\"\"\"\n\ndef decimalToOctal(num):\n    return oct(num)\n\nprint(decimalToOctal(13))",
    "def decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number != 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nprint(decimal_to_binary(12))",
    "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n    binary_number = ''\n    while decimal_number != 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\ndef main():\n    value = 10\n    result = decimal_to_binary(value)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(dec):\n    # base case\n    if dec == 0:\n        return 0\n\n    # Recursive case\n    return dec_to_bin(dec // 2) * 10 + dec % 2\n\n\nprint(dec_to_bin(10))",
    "def convert_decimal_to_binary(number):\n    \"\"\"\n    This function converts a decimal number to binary number\n    >>> convert_decimal_to_binary(31)\n    '11111'\n    >>> convert_decimal_to_binary(12)\n    '1100'\n    >>> convert_decimal_to_binary(13)\n    '1101'\n    \"\"\"\n    if number == 0:\n        return '0'\n    binary_num = ''\n    while number > 0:\n        binary_num = str(number % 2) + binary_num\n        number = number // 2\n    return binary_num\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    stack = []\n    while num:\n        stack.append(num % 2)\n        num //= 2\n    res = 0\n    for i in stack[::-1]:\n        res = res * 10 + i\n    return res\n\n\ndef decimal_to_binary_recur(num):\n    if num == 0:\n        return 0\n    return num % 2 + 10 * decimal_to_binary_recur(num // 2)\n\n\ndef decimal_to_binary_recur2(num):\n    if num == 0:\n        return 0\n    return num % 2 + 10 * decimal_to_binary_recur2(num // 2)\n\n\nprint(decimal_to_binary(27))\nprint(decimal_to_binary_recur(27))\nprint(decimal_to_binary_recur2(27))",
    "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n\n    return int(num/2 + decimal_to_binary(num//2))\n\n\nprint(decimal_to_binary(123))",
    "def convert_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n\n    return binary_number\n\n\nprint(convert_to_binary(16))\nprint(convert_to_binary(12))\nprint(convert_to_binary(32))\nprint(convert_to_binary(100))",
    "def decimal_to_binary(number):\n    if number < 0:\n        number = number * -1\n    elif number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return decimal_to_binary(number // 2) + str(number % 2)\n\n\nprint(decimal_to_binary(15))",
    "def decimalToBinary(num):\n    return bin(num)\n\ndef decimalToBinary2(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\ndef decimalToBinary3(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\ndef decimalToBinary4(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\nprint(decimalToBinary(23))\nprint(decimalToBinary2(23))\nprint(decimalToBinary3(23))\nprint(decimalToBinary4(23))",
    "def decimal_to_binary(number):\n    return bin(number)[2:]\n\n\nprint(decimal_to_binary(20))",
    "def convert_decimal_to_binary(decimal_number):\n    binary_number = \"\"\n\n    while decimal_number != 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n\n    return binary_number\n\n\ndef main():\n    number = int(input(\"Enter a decimal number: \"))\n    print(convert_decimal_to_binary(number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(decimal_number):\n    return format(decimal_number, \"b\")\n\n\ndef main():\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    binary_number = decimal_to_binary(decimal_number)\n    print(\"The binary number is: \", binary_number)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    else:\n        return decimal_to_binary(num//2) * 10 + num%2\n\nprint(decimal_to_binary(16))",
    "def convert_to_binary(number):\n    binary_num = ''\n\n    while number > 0:\n        binary_num = str(number % 2) + binary_num\n        number = number // 2\n\n    return binary_num\n\nprint(convert_to_binary(12))",
    "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 0\n    binary = []\n    while decimal > 0:\n        binary.append(str(decimal % 2))\n        decimal = decimal // 2\n    return ''.join(reversed(binary))\n\n\ndef main():\n    decimal = int(input(\"Enter a decimal number: \"))\n    print(decimal_to_binary(decimal))\n\n\nif __name__ == '__main__':\n    main()",
    "def decimalToBinary(n):\n    if n==0:\n        return 0\n    else:\n        return (decimalToBinary(n//2) * 10 + n%2)\n\nn = int(input(\"Enter a decimal number: \"))\nprint(\"The decimal number {} is equivalent to {} in binary\".format(n,decimalToBinary(n)))",
    "def decimalToBinary(decimal):\n    if decimal < 0:\n        return None\n    if decimal == 0:\n        return 0\n    result = \"\"\n    while decimal != 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return result\n\n\nif __name__ == \"__main__\":\n    print(decimalToBinary(123))",
    "def to_binary(num):\n    \"\"\"\n    Return the binary representation of a decimal number\n    >>> to_binary(10)\n    '1010'\n    >>> to_binary(17)\n    '10001'\n    \"\"\"\n    if num == 0:\n        return \"0\"\n\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number != 0:\n        remainder = decimal_number % 2\n        binary_number += str(remainder)\n        decimal_number = decimal_number // 2\n    return binary_number[::-1]\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"Binary of a decimal number is: \" + decimal_to_binary(number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(n):\n    if n == 0:\n        return 0\n    else:\n        return (n % 2 + 10 * dec_to_bin(int(n / 2)))\n\n\ndef main():\n    val = int(input(\"Enter a decimal number: \"))\n    print(\"Decimal number: \", val, \"Binary number: \", dec_to_bin(val))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(decimal_number):\n    binary = \"\"\n    while decimal_number != 0:\n        binary += str(decimal_number % 2)\n        decimal_number = decimal_number // 2\n    return binary[::-1]\n\n\ndef main():\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    print(\"Binary number: \" + decimal_to_binary(decimal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(num):\n    binary = []\n    while num > 0:\n        rem = num % 2\n        binary.append(rem)\n        num = num // 2\n\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a decimal number: \"))\n    binary = dec_to_bin(num)\n    print(binary)",
    "def dec_to_bin(num):\n    if num == 0:\n        return 0\n    return dec_to_bin(num//2) + (num % 2)\n\n\nprint(dec_to_bin(10))\nprint(dec_to_bin(11))\nprint(dec_to_bin(12))\nprint(dec_to_bin(13))\nprint(dec_to_bin(14))\nprint(dec_to_bin(15))\nprint(dec_to_bin(16))",
    "def decimal_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\n\ndef decimal_to_binary_string_formatter(num):\n    return \"{0:b}\".format(num)\n\n\nprint(decimal_to_binary(128))\nprint(decimal_to_binary_string_formatter(128))",
    "def dec_to_bin(n):\n    if n == 0:\n        return 0\n\n    if n % 2 == 0:\n        return dec_to_bin(n//2) * 10 + n % 2\n    else:\n        return dec_to_bin(n//2) * 10 + (n % 2 + 1)\n\n\nif __name__ == \"__main__\":\n    print(dec_to_bin(32))",
    "def convert_to_binary(decimal_number):\n    # if the decimal number is 0 then return 0\n    if decimal_number == 0:\n        return 0\n\n    # initialize an empty string\n    binary_number = \"\"\n    # while decimal number is greater than 0\n    while decimal_number > 0:\n        # take last remainder\n        remainder = decimal_number % 2\n        # add the remainder to the binary number\n        binary_number += str(remainder)\n        # divide decimal number by 2\n        decimal_number = decimal_number // 2\n\n    # return the binary number\n    return binary_number\n\n\ndef main():\n    # decimal number\n    decimal_number = 25\n    # convert the decimal number to binary number\n    binary_number = convert_to_binary(decimal_number)\n    # print the binary number\n    print(binary_number)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimalToBinary(n):\n    if n == 0:\n        return 0\n    return decimalToBinary(n//2) + str(n%2)\n\nprint(decimalToBinary(23))",
    "def decimal_to_binary(num: int) -> int:\n    \"\"\"\n    Return the binary representation of a decimal number.\n    :param num: The decimal number to be converted to binary.\n    :return: The binary representation of the decimal number.\n    \"\"\"\n    if num == 0:\n        return 0\n\n    bin_num = []\n\n    while num > 0:\n        rem = num % 2\n        bin_num.append(rem)\n        num //= 2\n\n    return int(\"\".join(str(i) for i in bin_num[::-1]))\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(10) == 1010\n    assert decimal_to_binary(5) == 101\n    assert decimal_to_binary(23) == 10111\n    assert decimal_to_binary(15) == 1111\n    assert decimal_to_binary(32) == 100000",
    "def decToBin(decimal):\n    return bin(decimal)[2:]\n\nprint(decToBin(23))",
    "def decimal_to_binary(dec_num):\n    return bin(dec_num)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"{num} in binary is {decimal_to_binary(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(num):\n    if num < 0:\n        num = num * -1\n    binary_num = ''\n    while num > 0:\n        binary_num = str(num % 2) + binary_num\n        num = num // 2\n    return binary_num\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(10))",
    "def decimal_to_binary(number):\n    binary_num = \"\"\n    while number > 0:\n        binary_num += str(number % 2)\n        number //= 2\n    return binary_num[::-1]\n\n\nprint(decimal_to_binary(123))\nprint(decimal_to_binary(20))",
    "def convert_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\ndef main():\n    decimal_number = 30\n    print(\n        \"The binary number for decimal number \"\n        + str(decimal_number)\n        + \" is \"\n        + convert_to_binary(decimal_number)\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(number):\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(decimal_to_binary(number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(decimal: int) -> int:\n    \"\"\"\n    >>> dec_to_bin(2)\n    '10'\n    >>> dec_to_bin(15)\n    '1111'\n    >>> dec_to_bin(20)\n    '10100'\n    \"\"\"\n    if decimal == 0:\n        return 0\n\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n\n    return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decimalToBinary(num):\n    if num == 0:\n        return 0\n    else:\n        return num % 2 + 10 * decimalToBinary(num // 2)\n\ndef decimalToBinary_2(num):\n    binary = []\n    while num != 0:\n        binary.append(num % 2)\n        num = num // 2\n    return binary\n\nif __name__ == \"__main__\":\n    print(decimalToBinary(10))\n    print(decimalToBinary_2(10))",
    "def to_binary(dec_num):\n    binary = \"\"\n    while dec_num != 0:\n        binary = str(dec_num % 2) + binary\n        dec_num = dec_num // 2\n    return binary\n\n\nprint(to_binary(123))",
    "def dec_to_bin(num):\n    if num == 0:\n        return 0\n    return dec_to_bin(num//2) + (num%2)\n\nprint(dec_to_bin(10))\nprint(dec_to_bin(12))\nprint(dec_to_bin(20))",
    "def decimal_to_binary(decimal_number):\n    binary_number = ''\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\ndef main():\n    assert decimal_to_binary(10) == '1010'\n    assert decimal_to_binary(56) == '111100'\n    assert decimal_to_binary(16) == '10000'\n\n\nif __name__ == '__main__':\n    main()",
    "def decimalToBinary(dec):\n    if dec < 0:\n        return \"Decimal number should be positive\"\n    elif dec == 0:\n        return \"0b0\"\n    else:\n        bin = \"\"\n        while dec != 0:\n            bin += str(dec % 2)\n            dec = int(dec / 2)\n        return \"0b\" + bin[::-1]\n\n\ndef main():\n    val = int(input(\"Enter a decimal number: \"))\n    print(decimalToBinary(val))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(n):\n    if n==0:\n        return 0\n    else:\n        return (n%2 + 10*dec_to_bin(n//2))\n\n\nif __name__==\"__main__\":\n    n = int(input(\"Enter a decimal number: \"))\n    print(dec_to_bin(n))",
    "def dec_to_bin(dec):\n    return bin(dec)\n\n\ndef main():\n    dec = int(input(\"Enter a decimal number: \"))\n    print(\"Binary number: \", dec_to_bin(dec))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(n):\n    return bin(n)[2:]\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(dec_to_bin(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(number):\n    return bin(number)[2:]\n\ndef main():\n    number = int(input(\"Enter a decimal number: \"))\n    binary = decimal_to_binary(number)\n    print(f\"Decimal number {number} is {binary} in binary.\")\n\nif __name__ == '__main__':\n    main()",
    "def decimal_to_binary(decimal):\n    # Base case\n    if decimal < 1:\n        return 0\n\n    # Divide the number by 2 and keep the remainder\n    remainder = decimal % 2\n\n    # Recursively call the function again\n    return remainder + (decimal_to_binary(decimal // 2) * 10)\n\n\n# Testing\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))",
    "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(20)\n    '10100'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(30)\n    '11010'\n    \"\"\"\n    result = \"\"\n    while n != 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n\n\ndef main():\n    \"\"\"\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(20)\n    '10100'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(30)\n    '11010'\n    \"\"\"\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "def convert_to_binary(decimal_number):\n    # Base case\n    if decimal_number == 0:\n        return 0\n\n    # Recursive case\n    return (decimal_number % 2) + (10 * convert_to_binary(decimal_number // 2))\n\n\ndef main():\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    print(f\"Decimal to binary: {convert_to_binary(decimal_number)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def to_binary(num):\n    if num == 0:\n        return 0\n    else:\n        return num % 2 + 10 * to_binary(num // 2)\n\n\nif __name__ == \"__main__\":\n    print(to_binary(1024))",
    "def convert(number):\n    \"\"\"Convert decimal number to binary number.\"\"\"\n    binary_number = ''\n    while number > 0:\n        binary_number += str(number % 2)\n        number = number // 2\n    return binary_number[::-1]\n\n\nif __name__ == '__main__':\n    print(convert(10))",
    "def decimalToBinary(num):\n    if num == 0:\n        return 0\n    return decimalToBinary(num // 2) + (num % 2)\n\n\ndef decimalToBinary1(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary1(num // 2) + (num % 2)\n\n\ndef decimalToBinary2(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary2(num // 2) + (num % 2)\n\n\ndef decimalToBinary3(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary3(num // 2) + (num % 2)\n\n\ndef decimalToBinary4(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary4(num // 2) + (num % 2)\n\n\ndef decimalToBinary5(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary5(num // 2) + (num % 2)\n\n\ndef decimalToBinary6(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary6(num // 2) + (num % 2)\n\n\ndef decimalToBinary7(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary7(num // 2) + (num % 2)\n\n\ndef decimalToBinary8(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary8(num // 2) + (num % 2)\n\n\ndef decimalToBinary9(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary9(num // 2) + (num % 2)\n\n\ndef decimalToBinary10(num):\n    if num == 0:\n        return 0\n    return 2 * decimalToBinary10(num // 2) + (num % 2",
    "def dec_to_bin(dec):\n    if dec == 0:\n        return 0\n    else:\n        return (dec_to_bin(dec//2) * 10) + (dec % 2)\n\n\nif __name__ == \"__main__\":\n    dec = int(input(\"Enter a decimal number: \"))\n    print(dec_to_bin(dec))",
    "def decimal_to_binary(num):\n    return bin(num)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"The binary number of {num} is:\")\n    print(decimal_to_binary(num))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(num: int) -> int:\n    \"\"\"\n    :param num: decimal number\n    :return: binary number\n    >>> dec_to_bin(5)\n    '101'\n    >>> dec_to_bin(10)\n    '1010'\n    >>> dec_to_bin(15)\n    '1111'\n    >>> dec_to_bin(0)\n    '0'\n    >>> dec_to_bin(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Only positive numbers are accepted.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Only positive numbers are accepted.\")\n\n    return bin(num)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def dec_to_bin(dec_num):\n    if dec_num == 0:\n        return 0\n    else:\n        return dec_num % 2 + 10 * dec_to_bin(dec_num // 2)\n\ndec_num = int(input(\"Enter a decimal number: \"))\nprint(f\"Decimal number {dec_num} is {dec_to_bin(dec_num)} in binary\")",
    "def decimalToBinary(number):\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        return int(bin(number)[2:])\n\n\nprint(decimalToBinary(0))\nprint(decimalToBinary(5))\nprint(decimalToBinary(10))\nprint(decimalToBinary(100))",
    "def dec_to_bin(decimal: int) -> str:\n    \"\"\"Convert decimal number to binary number.\n\n    Args:\n        decimal (int): decimal number.\n\n    Returns:\n        str: binary number.\n    \"\"\"\n    return bin(decimal)[2:]\n\n\nif __name__ == \"__main__\":\n    print(dec_to_bin(255))",
    "def decimal_to_binary(decimal_number):\n    binary_number = ''\n    while decimal_number != 0:\n        remainder = decimal_number % 2\n        decimal_number = decimal_number // 2\n        binary_number += str(remainder)\n    return binary_number[::-1]\n\n\ndef main():\n    print(\"Decimal to Binary\")\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    print(\"Binary: \", decimal_to_binary(decimal_number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(n):\n    if n == 0:\n        return \"0\"\n    else:\n        return dec_to_bin(n//2) + str(n%2)\n\n\nprint(dec_to_bin(10))",
    "def decimalToBinary(n):\n    return bin(n).replace(\"0b\", \"\")\n\nprint(decimalToBinary(12))\nprint(decimalToBinary(10))",
    "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n\ndef decimal_to_binary_recursive(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return decimal_to_binary_recursive(n // 2)\n    else:\n        return n % 2 + 10 * decimal_to_binary_recursive(n // 2)\n\n\ndef decimal_to_binary_iterative(n):\n    res = ''\n    while n != 0:\n        res = str(n % 2) + res\n        n = n // 2\n    return int(res)\n\n\ndef main():\n    num = int(input(\"Enter a decimal number: \"))\n    print(\"Decimal to binary:\")\n    print(decimal_to_binary(num))\n    print(decimal_to_binary_recursive(num))\n    print(decimal_to_binary_iterative(num))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(decimal):\n    if decimal == 0:\n        return 0\n    else:\n        return (dec_to_bin(decimal // 2) * 10) + (decimal % 2)\n\n\nif __name__ == '__main__':\n    dec = int(input(\"Enter the decimal number: \"))\n    print(\"The decimal number is: \", dec)\n    print(\"The binary number is: \", dec_to_bin(dec))",
    "def decToBin(num):\n    binNum = \"\"\n\n    while num > 0:\n        binNum += str(num % 2)\n        num = int(num / 2)\n\n    return binNum[::-1]\n\ndef decToBin2(num):\n    if num == 0:\n        return 0\n    else:\n        return (num % 2 + 10 * decToBin(int(num / 2)))\n\n\nprint(decToBin2(12))",
    "def convert_to_binary(decimal_number):\n    if decimal_number==0:\n        return 0\n    else:\n        return convert_to_binary(decimal_number//2)+str(decimal_number%2)\nprint(convert_to_binary(12))",
    "def dec_to_bin(num):\n    \"\"\"\n    Converts decimal number to binary number\n\n    Args:\n       num(int): decimal number\n    Returns:\n       binary(str): binary number\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 2 + 10 * dec_to_bin(num // 2)\n\n\nprint(\"Enter the decimal number to be converted to binary: \")\nnum = int(input())\nprint(\"The binary equivalent of %d is %s\" %(num, dec_to_bin(num)))",
    "def decToBin(num):\n    return bin(num)\n\nprint(decToBin(10))",
    "def decimal_to_binary(decimal: int) -> int:\n    if decimal == 0:\n        return 0\n\n    binary: int = 0\n\n    while decimal > 0:\n        binary = binary * 10 + (decimal % 2)\n        decimal = decimal // 2\n\n    return binary\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(1) == 1\n    assert decimal_to_binary(12) == 1100\n    assert decimal_to_binary(10) == 1010\n    assert decimal_to_binary(30) == 11110",
    "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"Convert a decimal number to binary number.\n\n    Args:\n        decimal_number (int): decimal number\n\n    Examples:\n        >>> assert decimal_to_binary(10) == \"1010\"\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n\n    binary = \"\"\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number = decimal_number // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))",
    "def to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n\n    binary_number = ''\n    while decimal_number > 0:\n        binary_number += str(decimal_number % 2)\n        decimal_number = int(decimal_number / 2)\n\n    return binary_number[::-1]\n\n\ndef main():\n    print(to_binary(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(decimal_number):\n    binary_number = ''\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nprint(dec_to_bin(123))",
    "def decimal_to_binary(number: int) -> int:\n    \"\"\"\n    Return the binary number for a given decimal number.\n\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(32)\n    '100000'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(58)\n    '111110'\n    >>> decimal_to_binary(99)\n    '1100011'\n    >>> decimal_to_binary(130)\n    '10011010'\n    >>> decimal_to_binary(765)\n    '10111011111'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Only positive integers are allowed\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number //= 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def convert_to_binary(num):\n    if num == 0:\n        return 0\n    else:\n        return convert_to_binary(num // 2) + str(num % 2)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"Binary of {num} is {convert_to_binary(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimalToBinary(num):\n    binary_num = \"\"\n    while num != 0:\n        binary_num += str(num % 2)\n        num = num // 2\n    return binary_num[::-1]\n\n\nprint(decimalToBinary(10))",
    "def decimalToBinary(dec_num):\n    if dec_num == 0:\n        return 0\n    else:\n        return int(dec_num/2 + decimalToBinary(int(dec_num%2)))\n\nprint(decimalToBinary(20))",
    "def decimalToBinary(dec_number):\n    return bin(dec_number)[2:]\n\ndef decimalToBinary_recursive(dec_number, binary_string = \"\"):\n    if dec_number == 0:\n        return binary_string\n    binary_string += str(dec_number % 2)\n    dec_number = int(dec_number / 2)\n    return decimalToBinary_recursive(dec_number, binary_string)\n\n\ndef main():\n    num = int(input(\"Enter a decimal number: \"))\n    print(\"Decimal to Binary:\", decimalToBinary(num))\n    print(\"Decimal to Binary (Recursive):\", decimalToBinary_recursive(num))\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(dec_num):\n    return bin(dec_num)\n\n\ndef main():\n    val1 = int(input(\"Enter a decimal number: \"))\n    print(\"Decimal to binary: \", decimal_to_binary(val1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(number):\n    binary_num = \"\"\n    while number > 0:\n        remainder = number % 2\n        binary_num += str(remainder)\n        number = number // 2\n    return binary_num[::-1]\n\n\ndef decimal_to_binary_with_recursion(number):\n    if number == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary_with_recursion(number // 2) + str(number % 2)\n\n\nprint(decimal_to_binary_with_recursion(255))",
    "def decimalToBinary(n):\n    binary = []\n    while n != 0:\n        binary.append(n % 2)\n        n = n // 2\n    return binary\n\n\ndef decimalToBinary2(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary2(n // 2) + [n % 2]\n\n\ndef decimalToBinary3(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary3(n // 2) + [n % 2]\n\n\ndef decimalToBinary4(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary4(n // 2) + [n % 2]\n\n\ndef decimalToBinary5(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary5(n // 2) + [n % 2]\n\n\ndef decimalToBinary6(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary6(n // 2) + [n % 2]\n\n\ndef decimalToBinary7(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary7(n // 2) + [n % 2]\n\n\ndef decimalToBinary8(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary8(n // 2) + [n % 2]\n\n\ndef decimalToBinary9(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary9(n // 2) + [n % 2]\n\n\ndef decimalToBinary10(n):\n    if n == 0:\n        return [0]\n    else:\n        return decimalToBinary10(n // 2) + [n % 2]\n\n\ndef decimalToBinary11(n):\n    if n == 0:\n        return [",
    "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"\n    Return binary string of the decimal number\n\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Only positive integers are allowed\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    result = \"\"\n    while decimal != 0:\n        result = str(decimal % 2) + result\n        decimal = int(decimal / 2)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def convert_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n\n    return binary[::-1]\n\n\ndef main():\n    print(convert_to_binary(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def dec_to_bin(num):\n    if num == 0:\n        return 0\n    return dec_to_bin(num//2) + (num%2)\n\n\nnum = int(input(\"Enter a decimal number: \"))\nprint(dec_to_bin(num))",
    "def decimalToBinary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimalToBinary(n // 2)\n\n\nn = 10\nprint(decimalToBinary(n))",
    "def decimalToBinary(n):\n    if n == 0:\n        return 0\n    else:\n        return decimalToBinary(n // 2) + str(n % 2)\n\n\nif __name__ == \"__main__\":\n    print(decimalToBinary(11))",
    "def convert_to_binary(num):\n    binary = \"\"\n\n    while num != 0:\n        binary += str(num % 2)\n        num //= 2\n\n    return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    print(convert_to_binary(10))\n    print(convert_to_binary(15))",
    "def dec_to_bin(dec):\n    if dec == 0:\n        return 0\n    else:\n        return (dec % 2) + 10 * dec_to_bin(dec // 2)\n\n\nprint(dec_to_bin(5))",
    "def decimal_to_binary(num):\n    bin_num = \"\"\n    while num > 0:\n        bin_num = str(num % 2) + bin_num\n        num = num // 2\n    return bin_num\n\n\nprint(decimal_to_binary(10))",
    "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    return binary_string\n\n\ndef decimal_to_binary_alt(decimal):\n    if decimal == 0:\n        return \"0\"\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    return binary_string\n\n\nprint(decimal_to_binary(255))\nprint(decimal_to_binary_alt(255))",
    "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n    else:\n        return decimal_number % 2 + 10 * decimal_number_to_binary(decimal_number // 2)\n\n\nif __name__ == \"__main__\":\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    print(\"The binary number is: {}\".format(decimal_to_binary(decimal_number)))",
    "def dec_to_bin(dec):\n    bin_num = \"\"\n    while dec != 0:\n        bin_num = str(dec % 2) + bin_num\n        dec = dec // 2\n    return bin_num\n\n\ndef main():\n    dec = int(input(\"Enter a decimal number: \"))\n    print(\"The binary number is: \")\n    print(dec_to_bin(dec))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}