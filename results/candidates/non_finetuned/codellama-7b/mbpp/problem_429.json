{
  "problem": {
    "task_id": "MBPP/440",
    "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
    "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
    "test_list": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ],
    "challenge_test_list": [],
    "problem_id": 429
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from nltk.corpus import wordnet as wn\n\n\ndef get_adverbs(sentence):\n    \"\"\"\n    Get all adverbs in a given sentence.\n    \"\"\"\n    adverbs = set()\n    words = sentence.split()\n    for word in words:\n        for synset in wn.synsets(word):\n            for lemma in synset.lemmas():\n                if lemma.synset().pos() == \"r\":\n                    adverbs.add((word, lemma))\n    return list(adverbs)",
    "def adverbs(sentence):\n    \"\"\"Returns a list of adverbs and their positions in a sentence.\"\"\"\n    if not sentence:\n        return []\n    adverbs = []\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word in ADVERBS:\n            adverbs.append((word, i))\n    return adverbs\n\n\nADVERBS = [\n    'always', 'never', 'often', 'seldom', 'now', 'then',\n    'yesterday', 'tomorrow', 'early', 'late', 'soon', 'long',\n    'far', 'near', 'well', 'badly', 'quickly', 'slowly',\n    'really', 'pretty', 'very', 'hardly', 'easily', 'sometimes',\n    'often', 'lately', 'luckily', 'unfortunately', 'fortunately',\n    'quite', 'rather', 'somewhat', 'almost', 'more', 'less', 'moreover',\n    'regardless', 'despite', 'because', 'though', 'otherwise', 'whereas',\n    'in spite of', 'instead', 'though', 'in addition', 'although', 'even so',\n    'as a result', 'as a consequence', 'consequently', 'hence', 'thus',\n    'accordingly', 'similarly', 'therefore', 'conversely', 'thusly', 'otherwise',\n    'indeed', 'truly', 'quite', 'indeed', 'sincere', 'surely', 'certainly',\n    'undoubtedly', 'unquestionably', 'unreservedly', 'in fact', 'in reality', 'in truth',\n    'fact', 'reality', 'truth', 'frequently', 'usually', 'commonly', 'generally',\n    'frequently', 'usually', 'commonly', 'generally', 'regularly', 'sometimes',\n    'usually', 'mostly', 'mostly', 'generally', 'normally', 'typically',\n    'usually', 'commonly', 'regularly', '",
    "from nltk.corpus import brown\n\n\ndef adverbs(sentence):\n    \"\"\"\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [('quick', 2), ('brown', 3), ('over', 6), ('lazy', 9)]\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [('quick', 2), ('brown', 3), ('over', 6), ('lazy', 9)]\n    \"\"\"\n    def find_adverbs(text):\n        for tagged in brown.tagged_sents():\n            for word, tag in tagged:\n                if tag == 'RB':\n                    yield word\n\n    words = sentence.split()\n    return [(word, words.index(word)) for word in find_adverbs(sentence)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from nltk.corpus import wordnet as wn\n\n\ndef adverb_position(sentence):\n    \"\"\"\n    >>> adverb_position(\"The old man was running slowly.\")\n    Counter({('slowly', 13): 1})\n    >>> adverb_position(\"The old man was running fast.\")\n    Counter({('fast', 13): 1})\n    >>> adverb_position(\"The old man was running very quickly.\")\n    Counter({('quickly', 13): 1})\n    >>> adverb_position(\"The old man was running very quickly.\")\n    Counter({('quickly', 13): 1})\n    >>> adverb_position(\"The old man was running quickly.\")\n    Counter({('quickly', 13): 1})\n    >>> adverb_position(\"The old man was running very fast.\")\n    Counter({('fast', 13): 1})\n    >>> adverb_position(\"The old man was running very fast.\")\n    Counter({('fast', 13): 1})\n    >>> adverb_position(\"The old man was running fast.\")\n    Counter({('fast', 13): 1})\n    >>> adverb_position(\"The old man was running very slowly.\")\n    Counter({('slowly', 13): 1})\n    >>> adverb_position(\"The old man was running very slowly.\")\n    Counter({('slowly', 13): 1})\n    >>> adverb_position(\"The old man was running slowly.\")\n    Counter({('slowly', 13): 1})\n    \"\"\"\n    sentence = sentence.split()\n    adv_positions = {}\n    for index, word in enumerate(sentence):\n        for synset in wn.synsets(word):\n            if synset.pos() == \"r\":\n                adv_positions[word] = index\n    return adv_positions\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs('The dog runs fast.')\n    ['fast']\n    >>> find_adverbs('The dog runs quickly.')\n    ['quick']\n    >>> find_adverbs('The dog runs fastly.')\n    ['fastly']\n    \"\"\"\n    word_list = sentence.split()\n    word_set = set(word_list)\n    adverb_set = set(\n        [\n            word\n            for word in word_set\n            if word.endswith(\"ly\") or word.endswith(\"ally\") or word.endswith(\"ly\") or word.endswith(\"tly\")\n        ]\n    )\n    return list(adverb_set)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs(\"This is a good test\")\n    [('good', 9)]\n    >>> find_adverbs(\"This is a very good test\")\n    [('good', 10), ('very', 9)]\n    >>> find_adverbs(\"This is a good very good test\")\n    [('good', 9), ('good', 16)]\n    >>> find_adverbs(\"This is a very very very good test\")\n    [('good', 23), ('very', 10), ('very', 16), ('very', 23)]\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        word = sentence[i:i+4]\n        if word == \"very\":\n            if sentence[i-1] == \" \" or sentence[i-1] == \" \":\n                adverbs.append((sentence[i+1], i))\n            elif sentence[i-1] == \"r\" or sentence[i-1] == \"t\":\n                adverbs.append((sentence[i+1], i-1))\n            else:\n                adverbs.append((sentence[i+1], i-2))\n        elif word == \"good\":\n            if sentence[i-1] == \" \" or sentence[i-1] == \" \":\n                adverbs.append((\"good\", i))\n            elif sentence[i-1] == \"r\" or sentence[i-1] == \"t\":\n                adverbs.append((\"good\", i-1))\n            else:\n                adverbs.append((\"good\", i-2))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [('quick', 3), ('brown', 4), ('lazy', 10)]\n    \"\"\"\n    adverbs_list = []\n    adverbs = ['slowly', 'slowly', 'slowly', 'quickly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly', 'slowly',\n               'slowly', 'slowly', 'slowly', 'slowly', '",
    "def find_adverb(sentence):\n    adverb_list = []\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] in adverbs:\n            adverb_list.append((words[i], i))\n    return adverb_list\n\n\ndef main():\n    adverbs = [\"very\", \"really\", \"suddenly\", \"slowly\", \"quickly\"]\n    print(find_adverb(\"The quick brown fox jumped suddenly\"))\n    print(find_adverb(\"The quick brown fox jumped very slowly\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import defaultdict\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\n\n\ndef find_adverbs(sentence):\n    \"\"\"Return a list of adverbs in a given sentence.\"\"\"\n    tokens = word_tokenize(sentence)\n    tagged_tokens = brown.tagged_words()\n    adverbs = defaultdict(list)\n\n    for index, tagged_token in enumerate(tagged_tokens):\n        if tagged_token[1].startswith('RB'):\n            adverbs[tagged_token[0]].append(index)\n\n    return {\n        adverb: [tokens[index] for index in indexes]\n        for adverb, indexes in adverbs.items()\n    }\n\n\nif __name__ == '__main__':\n    print(find_adverbs(\"The quick brown fox jumped over the lazy dog.\"))\n    print(find_adverbs(\"The brown fox jumped over the lazy dog.\"))",
    "from collections import defaultdict\n\n\ndef adverbs(sentence):\n    words = sentence.split()\n    word_to_index = defaultdict(list)\n    for index, word in enumerate(words):\n        word_to_index[word].append(index)\n    adverbs = [word for word in word_to_index if word in adverb_list]\n    return adverbs, [word_to_index[adverb] for adverb in adverbs]\n\n\nadverb_list = set(\n    [\n        \"quickly\",\n        \"slowly\",\n        \"quick\",\n        \"slow\",\n        \"quicklier\",\n        \"slower\",\n        \"quickly\",\n        \"quicker\",\n        \"quicker\",\n        \"quickest\",\n        \"slow\",\n        \"slower\",\n        \"slowest\",\n        \"quick\",\n        \"faster\",\n        \"fast\",\n        \"fastest\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"slowly\",\n        \"",
    "import re\n\n\ndef adverbs(sentence: str) -> list:\n    \"\"\"Returns a list of adverbs and their positions.\n\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog\")\n    [('quick', 3), ('lazy', 11)]\n    \"\"\"\n    adv_list = []\n    adverbs = [\n        \"slowly\",\n        \"quickly\",\n        \"slow\",\n        \"quick\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"long\",\n        \"short\",\n        \"late\",\n        \"early\",\n        \"long\",\n        \"short\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"far\",\n        \"near\",\n        \"high\",\n        \"low\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"early\",\n        \"late\",\n        \"ear",
    "from nltk.corpus import brown\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.tag import pos_tag\nfrom nltk.tokenize import word_tokenize\nfrom nltk import WordNetLemmatizer\n\n\ndef adverbs(sentence):\n    adverbs = []\n    tokenized_sentence = word_tokenize(sentence)\n    tagged_sentence = pos_tag(tokenized_sentence)\n    for (word, tag) in tagged_sentence:\n        if tag.startswith(\"RB\"):\n            adverbs.append(word)\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    print(adverbs(\"The dog barks at the cat.\"))\n    print(adverbs(\"The dog barks loudly at the cat.\"))\n    print(adverbs(\"The dog barks furiously at the cat.\"))",
    "from functools import reduce\nfrom operator import add\n\n\ndef adverbs(sentence: str) -> list:\n    \"\"\"Finds all adverbs in a sentence.\n\n    Args:\n        sentence (str): input sentence\n\n    Returns:\n        list: list of adverbs and their positions\n    \"\"\"\n    adverbs = []\n    for i, word in enumerate(sentence.split()):\n        if word.endswith(\"ly\") and len(word) > 2 and word != \"not\":\n            adverbs.append((word, i))\n    return adverbs\n\n\ndef adverbs_reduce(sentence: str) -> list:\n    \"\"\"Finds all adverbs in a sentence.\n\n    Args:\n        sentence (str): input sentence\n\n    Returns:\n        list: list of adverbs and their positions\n    \"\"\"\n    return [(word, i) for i, word in enumerate(sentence.split()) if word.endswith(\"ly\") and len(word) > 2 and word != \"not\"]\n\n\ndef adverbs_reduce_map(sentence: str) -> list:\n    \"\"\"Finds all adverbs in a sentence.\n\n    Args:\n        sentence (str): input sentence\n\n    Returns:\n        list: list of adverbs and their positions\n    \"\"\"\n    return list(map(lambda word: (word, sentence.split().index(word)), filter(lambda word: word.endswith(\"ly\") and len(word) > 2 and word != \"not\", sentence.split())))\n\n\ndef adverbs_reduce_filter(sentence: str) -> list:\n    \"\"\"Finds all adverbs in a sentence.\n\n    Args:\n        sentence (str): input sentence\n\n    Returns:\n        list: list of adverbs and their positions\n    \"\"\"\n    return list(filter(lambda word: word[0].endswith(\"ly\") and len(word[0]) > 2 and word[0] != \"not\", map(lambda word: (word, sentence.split().index(word)), sentence.split())))\n\n\ndef adverbs_reduce_filter_map(sentence: str) -> list:",
    "import spacy\n\nnlp = spacy.load('en_core_web_sm')\n\ndef adverb_position(sentence):\n    doc = nlp(sentence)\n    for token in doc:\n        if token.tag_ == \"RB\":\n            print(token.text, token.i)\n\nadverb_position(\"The cat sat on the mat.\")",
    "from typing import List\n\n\ndef adverb_finder(sentence: str) -> List[str]:\n    \"\"\"\n    >>> adverb_finder(\"He is running quickly\")\n    [('quickly', 12)]\n    >>> adverb_finder(\"The dog is chasing the cat\")\n    [('chasing', 10)]\n    >>> adverb_finder(\"The dog is chasing the cat slowly\")\n    [('chasing', 10), ('slowly', 19)]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.lower() in (\n            \"quickly\",\n            \"slowly\",\n            \"very\",\n            \"really\",\n            \"quick\",\n            \"slow\",\n            \"fast\",\n            \"far\",\n            \"near\",\n            \"long\",\n            \"short\",\n            \"hard\",\n            \"deep\",\n            \"soft\",\n            \"clear\",\n            \"clearly\",\n            \"certainly\",\n            \"deeply\",\n            \"gently\",\n            \"hardly\",\n            \"highly\",\n            \"quickly\",\n            \"slowly\",\n            \"strongly\",\n            \"thoroughly\",\n            \"well\",\n        ):\n            adverbs.append((word, sentence.index(word)))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\nfrom itertools import product\n\n\ndef find_adverbs(sentence: str) -> List[str]:\n    \"\"\"Find all adverbs in a given sentence.\n\n    Args:\n        sentence (str): a sentence to search adverbs in\n\n    Examples:\n        >>> assert find_adverbs(\"She is quickly running after the cat.\") == [\n        ...     \"quickly\",\n        ...     \"quickly\",\n        ... ]\n    \"\"\"\n    adverbs = []\n\n    for word in sentence.split():\n        for adverb in ADVERBS:\n            if word.endswith(adverb):\n                adverbs.append(word)\n\n    return adverbs\n\n\nADVERBS = [\"ly\", \"ness\", \"ment\", \"ful\", \"ed\", \"er\"]\n\n\nif __name__ == \"__main__\":\n    print(find_adverbs(\"She is quickly running after the cat.\"))",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [('quick', 3), ('lazy', 11)]\n    \"\"\"\n    adverbs = []\n    words = sentence.split()\n    for idx, word in enumerate(words):\n        if word in ['slowly', 'quickly', 'daily', 'yearly', 'recently', 'quick', 'lazy']:\n            adverbs.append((word, idx))\n    return adverbs\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef adverbs(text):\n    \"\"\"Return a dict of adverbs and their positions in a given sentence.\n\n    >>> adverbs(\"This is an amazing sentence.\")\n    {'amazing': [5]}\n\n    >>> adverbs(\"This is an amazing and wonderful sentence.\")\n    {'amazing': [5], 'wonderful': [10]}\n    \"\"\"\n    # I will use a defaultdict to store the positions of the adverbs\n    adverbs = defaultdict(list)\n    # I will use a list to store all the adverbs\n    adverbs_list = []\n    # I will use a list to store all the words in the sentence\n    words_list = text.split()\n    # I will use a list to store all the words in the sentence in lowercase\n    words_list_lower = [word.lower() for word in words_list]\n    # I will use a list to store all the words in the sentence in uppercase\n    words_list_upper = [word.upper() for word in words_list]\n    # I will use a list to store all the words in the sentence in capitalize\n    words_list_capitalize = [word.capitalize() for word in words_list]\n    # I will use a list to store all the words in the sentence in title\n    words_list_title = [word.title() for word in words_list]\n    # I will use a list to store all the words in the sentence in uppercase\n    words_list_upper = [word.upper() for word in words_list]\n    # I will use a list to store all the words in the sentence in lowercase\n    words_list_lower = [word.lower() for word in words_list]\n    # I will use a list to store all the words in the sentence in capitalize\n    words_list_capitalize = [word.capitalize() for word in words_list]\n    # I will use a list to store all the words in the sentence in title\n    words_list_title = [word.title() for word in words_list]\n    # I will use a list to store all the words in the sentence in",
    "def find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs('The quick brown fox jumps over the lazy dog')\n    [('quick', 2), ('lazy', 10)]\n    \"\"\"\n    words = sentence.split()\n    adverbs = []\n    for index, word in enumerate(words):\n        if word in ADVERBS:\n            adverbs.append((word, index))\n    return adverbs\n\n\nADVERBS = {\n    \"quickly\",\n    \"soon\",\n    \"slowly\",\n    \"sadly\",\n    \"happily\",\n    \"quick\",\n    \"slow\",\n    \"late\",\n    \"happy\",\n    \"early\",\n    \"lately\",\n    \"early\",\n    \"recently\",\n    \"recent\",\n    \"slow\",\n    \"late\",\n    \"quick\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"slowly\",\n    \"easily\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"slowly\",\n    \"easily\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"slowly\",\n    \"easily\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"slowly\",\n    \"easily\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"slowly\",\n    \"easily\",\n    \"quietly\",\n    \"gently\",\n    \"slowly\",\n    \"loudly\",\n    \"carefully\",\n    \"quickly\",\n    \"",
    "import re\n\n\ndef adverbs(text: str) -> list:\n    \"\"\"Returns a list of adverbs in a given text.\n\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    ['quick', 'lazy']\n    \"\"\"\n    # pattern = r\"\\b(\\w+ly)\\b\"\n    pattern = r\"\\b((?!no)(?!not)[\\w]+ly)\\b\"\n    return re.findall(pattern, text)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverb(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        word = sentence[i]\n        if word in [\"earlier\", \"early\", \"earnest\", \"eager\", \"earthly\", \"earthy\", \"ease\", \"easily\", \"easy\", \"eaten\", \"eat\", \"eavesdrop\", \"eavesdropped\", \"eavesdropping\", \"eavesdrops\", \"ebb\", \"eccentric\", \"eccentricity\", \"echolocation\", \"echoes\", \"echoing\", \"eclipsed\", \"eclipsing\", \"ecliptic\", \"eclipse\", \"ecstatic\", \"ecstasy\", \"eddy\", \"eddying\", \"eddying\", \"eddyings\", \"edible\", \"edibles\", \"edibles\", \"edibles\", \"educable\", \"educated\", \"education\", \"educate\", \"educates\", \"educating\", \"educator\", \"effective\", \"effectively\", \"effectiveness\", \"effort\", \"effortlessly\", \"efforts\", \"effuse\", \"effused\", \"effuses\", \"effusing\", \"effusively\", \"effusion\", \"effusions\", \"effusive\", \"effusively\", \"egalitarian\", \"egalitarianism\", \"egalitarianism\", \"egalitarianist\", \"egalitarianist\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egalitarianism\", \"egal",
    "def find_adverb(sentence):\n    \"\"\"\n    >>> find_adverb(\"He is very fast\")\n    [('very', 4)]\n    >>> find_adverb(\"She is fast\")\n    []\n    >>> find_adverb(\"He is going to be late\")\n    [('going', 3), ('be', 5), ('late', 7)]\n    \"\"\"\n    # your code here\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from nltk.corpus import wordnet\n\n\ndef adverbs(sentence):\n    \"\"\"Find all adverbs in a given sentence.\n\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [['quickly', 1], ['quietly', 4]]\n    \"\"\"\n    adverbs = []\n    for index, word in enumerate(sentence.split()):\n        for synset in wordnet.synsets(word):\n            for lemma in synset.lemmas():\n                if lemma.synset().name().split('.')[1] == 'r':\n                    adverbs.append([lemma.name(), index])\n\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n\n\ndef get_adverbs(sentence):\n    \"\"\"\n    Takes in a sentence and returns a list of tuples with the adverbs and their positions.\n    \"\"\"\n    adverbs = []\n    tokens = word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n\n    for i in range(len(tags)):\n        if tags[i][1] == \"RB\":\n            adverbs.append((tags[i][0], i))\n\n    return adverbs\n\n\nif __name__ == '__main__':\n    sentence = \"We are not going to finish this assignment early.\"\n    adverbs = get_adverbs(sentence)\n    print(adverbs)",
    "from collections import defaultdict\n\n\ndef find_all_adverbs(sentence: str) -> dict:\n    \"\"\"\n    >>> find_all_adverbs(\"The quick brown fox jumps over the lazy dog\")\n    {'quick': 2, 'lazy': 12}\n    \"\"\"\n    adverbs = defaultdict(int)\n\n    for i, word in enumerate(sentence.split()):\n        if word in ADVERBS:\n            adverbs[word] = i\n\n    return adverbs\n\n\nADVERBS = {\n    \"quickly\",\n    \"slowly\",\n    \"quietly\",\n    \"loudly\",\n    \"briefly\",\n    \"early\",\n    \"late\",\n    \"suddenly\",\n    \"swiftly\",\n    \"gently\",\n    \"quick\",\n    \"slow\",\n    \"quiet\",\n    \"loud\",\n    \"brief\",\n    \"early\",\n    \"late\",\n    \"sudden\",\n    \"swift\",\n    \"gentle\",\n    \"soon\",\n    \"recently\",\n    \"long\",\n    \"longer\",\n    \"recent\",\n    \"longest\",\n    \"far\",\n    \"farther\",\n    \"farthest\",\n    \"near\",\n    \"nearer\",\n    \"nearest\",\n    \"nearby\",\n    \"recently\",\n    \"farther\",\n    \"farthest\",\n    \"nearer\",\n    \"nearest\",\n    \"nearby\",\n    \"fairly\",\n    \"fair\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fairly\",\n    \"fair",
    "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef adverbs(sentence: str) -> list[tuple[int, str]]:\n    \"\"\"Return a list of adverbs in a sentence with their positions.\n\n    >>> adverbs(\"The cat sat quietly.\")\n    [(11, 'quietly')]\n    >>> adverbs(\"The cat sat quickly.\")\n    [(11, 'quickly')]\n    >>> adverbs(\"The cat sat quietly, quickly.\")\n    [(11, 'quietly'), (17, 'quickly')]\n    >>> adverbs(\"The cat sat quietly.\")\n    [(11, 'quietly')]\n    >>> adverbs(\"The cat sat quickly.\")\n    [(11, 'quickly')]\n    >>> adverbs(\"The cat sat quietly, quickly.\")\n    [(11, 'quietly'), (17, 'quickly')]\n    \"\"\"\n    # We will use a simple dictionary to store the adverbs and their positions.\n    #\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and their positions.\n    # We will use a simple dictionary to store the adverbs and",
    "from nltk.corpus import wordnet\nfrom nltk.stem import WordNetLemmatizer\n\n\ndef adverbs(sentence):\n    \"\"\"Returns a list of all adverbs and their positions in the sentence.\"\"\"\n    adverb_list = []\n    lemmatizer = WordNetLemmatizer()\n    tokens = sentence.split()\n    for i, token in enumerate(tokens):\n        for synset in wordnet.synsets(token):\n            if synset.name().split('.')[1] == 'r':\n                lemma = lemmatizer.lemmatize(token)\n                adverb_list.append([i, lemma])\n    return adverb_list",
    "def get_adverb_positions(sentence):\n    # split sentence into words\n    words = sentence.split()\n\n    # make a dictionary to store adverb:position pairs\n    adverb_positions = {}\n\n    # iterate through each word in the sentence\n    for position, word in enumerate(words):\n        # if the word is an adverb, add it to the dictionary\n        if word in ADVERBS:\n            adverb_positions[word] = position\n\n    return adverb_positions\n\n\nADVERBS = {\"rarely\", \"never\", \"seldom\", \"often\", \"always\", \"early\", \"late\", \"soon\", \"recently\", \"yesterday\",\n           \"today\", \"tonight\", \"tomorrow\", \"later\", \"earlier\", \"recently\", \"tonight\", \"tonite\", \"t'night\",\n           \"tonite\", \"yester\", \"yest\", \"yesterda\", \"yesterday\", \"today\", \"to-day\", \"to-morrow\", \"to-night\",\n           \"tommorow\", \"sometime\", \"sometimes\", \"often\", \"never\", \"rarely\", \"lately\", \"recently\", \"once\",\n           \"twice\", \"thrice\", \"soon\", \"recently\", \"previously\", \"recently\", \"in time\", \"within time\",\n           \"within a short time\", \"within a short while\", \"within a short space of time\", \"for a short time\",\n           \"for a short while\", \"for a short space of time\", \"for a while\", \"for a space of time\", \"for a long time\",\n           \"for a long while\", \"for a long space of time\", \"for a while\", \"for a space of time\", \"for a long time\",\n           \"for a long while\", \"for a long space of time\", \"for a time\", \"for a while\", \"for a space of time\",\n           \"for a long time\", \"for a long while\", \"for a long space of time\", \"for a time\", \"for a while\",\n           \"for a space of time\", \"for a time\", \"for a while\", \"for a space",
    "import re\n\n\ndef find_adverbs(sentence):\n\n    adverbs = []\n    adverb_positions = []\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    for index, word in enumerate(words):\n\n        # If the word is an adverb\n        if re.search(\"^adverb\", word):\n            adverbs.append(word)\n            adverb_positions.append(index)\n\n    return adverbs, adverb_positions\n\n\n# Tests\nprint(find_adverbs(\"The quick brown fox jumps over the lazy dog.\"))\nprint(find_adverbs(\"Fast was not the car that I chose.\"))\nprint(find_adverbs(\"The car that I chose was not fast.\"))\nprint(find_adverbs(\"The quick brown fox jumped over the lazy dog.\"))",
    "import spacy\nnlp = spacy.load('en_core_web_sm')\n\n\ndef find_adverbs(sentence):\n    doc = nlp(sentence)\n    adverbs = []\n    for token in doc:\n        if token.tag_ == 'RB':\n            adverbs.append((token.text, token.idx))\n    return adverbs\n\n\nprint(find_adverbs(\"He is very good at soccer.\"))",
    "def adverb_finder(sentence):\n    \"\"\"Return a list of adverbs and their positions in a given sentence.\"\"\"\n    adverbs = ['slowly', 'quickly', 'quietly', 'slow', 'quick', 'quiet']\n    adverb_list = []\n    for index, word in enumerate(sentence.split()):\n        if word in adverbs:\n            adverb_list.append([word, index])\n    return adverb_list\n\n\nprint(adverb_finder(\"The quick brown fox jumped over the lazy dog slowly.\"))",
    "import nltk\nfrom nltk.corpus import brown\n\n\ndef adverb_positions(sentence):\n    \"\"\"\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 2), ('lazy', 6)]\n    \"\"\"\n    tokens = nltk.word_tokenize(sentence)\n    tagged = nltk.pos_tag(tokens)\n    adverbs = [word for word, tag in tagged if tag == 'RB']\n    return [(word, index) for index, word in enumerate(tokens) if word in adverbs]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import spacy\n\nnlp = spacy.load('en_core_web_sm')\n\n\ndef adverb_positions(sentence):\n    doc = nlp(sentence)\n    adverb_positions = []\n\n    for index, token in enumerate(doc):\n        if token.tag_ == 'RB':\n            adverb_positions.append(index)\n\n    return adverb_positions\n\n\nprint(adverb_positions('The quick brown fox jumped over the lazy dog.'))",
    "def adverbs(sentence: str) -> dict:\n    \"\"\"\n    >>> adverbs(\"The dog runs fast.\")\n    {'fast': [6]}\n    >>> adverbs(\"The dog runs fastest in the world.\")\n    {'fastest': [6], 'in': [12], 'world': [13]}\n    >>> adverbs(\"He is very good at his job.\")\n    {'very': [3], 'good': [5], 'at': [7], 'his': [8], 'job': [10]}\n    \"\"\"\n    adverbs = {}\n    for index, word in enumerate(sentence.split()):\n        if word.lower() in (\"very\", \"good\", \"well\", \"badly\", \"slowly\", \"slow\", \"hardly\"):\n            adverbs[word] = [index]\n        elif word.lower() in (\"better\", \"best\", \"worse\", \"worst\", \"more\", \"less\"):\n            if word.lower() in adverbs.keys():\n                adverbs[word].append(index)\n            else:\n                adverbs[word] = [index]\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef find_adverbs(sentence: str) -> List[str]:\n    \"\"\"Find adverbs in a sentence.\n\n    Args:\n        sentence (str): given sentence.\n\n    Returns:\n        List[str]: list of adverbs.\n    \"\"\"\n    adverbs = []\n    for word, position in sentence.split():\n        if word.lower() in adverbs_list:\n            adverbs.append(word + \" \" + position)\n    return adverbs\n\n\nadverbs_list = [\"very\", \"really\", \"quite\", \"sometimes\"]\n\n\nif __name__ == \"__main__\":\n    print(find_adverbs(\"I have very bad cold very often\"))",
    "from nltk.corpus import wordnet\nfrom nltk.tokenize import word_tokenize\n\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Find adverbs and their positions in a given sentence.\n\n    Args:\n        sentence (str): Sentence to look for adverbs in.\n\n    Returns:\n        list: A list of adverbs and their positions in the sentence.\n    \"\"\"\n    # Get tokens\n    tokens = word_tokenize(sentence)\n\n    # Get adverbs\n    advs = []\n    for token in tokens:\n        for synset in wordnet.synsets(token):\n            if synset.pos() == \"r\":\n                advs.append(token)\n\n    # Find positions\n    adv_pos = []\n    for adv in advs:\n        for i, token in enumerate(tokens):\n            if token == adv:\n                adv_pos.append([i, adv])\n\n    return adv_pos",
    "import re\nfrom nltk.corpus import brown\n\n\ndef adverbs(sentence):\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n    >>> adverbs('The dog runs fast.')\n    [('fast', 6)]\n    >>> adverbs('The dog runs quickly.')\n    [('quick', 6)]\n    >>> adverbs('The dog runs quickly. I like it.')\n    [('quick', 6)]\n    >>> adverbs('The dog runs quickly. The cat runs fast.')\n    [('quick', 6), ('fast', 18)]\n    \"\"\"\n    tagged = [(word, tag) for (word, tag) in brown.tagged_words(tagset='universal') if tag == 'ADV']\n    tagged_words = [word for (word, tag) in tagged]\n    pattern = re.compile(r'(?i)\\b({})\\b'.format(r'|'.join(tagged_words)))\n    return [(word, sentence.find(word)) for word in re.findall(pattern, sentence)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from nltk.corpus import wordnet as wn\n\n\ndef adverb_position(sentence):\n    \"\"\"\n    >>> adverb_position('The boy is running fast.')\n    [('fast', 8)]\n    >>> adverb_position('She is very beautiful.')\n    []\n    \"\"\"\n    adverb_positions = []\n    for i, word in enumerate(sentence.split()):\n        synsets = wn.synsets(word)\n        for synset in synsets:\n            if synset.pos() == 'r':\n                adverb_positions.append((word, i + 1))\n    return adverb_positions\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from nltk.corpus import wordnet\n\n\ndef find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs('The quick brown fox jumps over the lazy dog.')\n    [['quick', 2], ['lazy', 6]]\n    >>> find_adverbs('The brown fox jumps over the lazy dog.')\n    [['lazy', 5]]\n    >>> find_adverbs('The quick fox jumps over the lazy dog.')\n    []\n    \"\"\"\n    words = sentence.split()\n    adverbs = []\n    for i, word in enumerate(words):\n        if wordnet.synsets(word, pos=wordnet.ADV):\n            adverbs.append([word, i])\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing import List\nimport re\n\n\ndef find_all_adverbs(sentence: str) -> List[str]:\n    \"\"\"\n    >>> find_all_adverbs('A man is walking quickly.')\n    ['quickly']\n    >>> find_all_adverbs('A man is walking quickly.')\n    ['quickly']\n    >>> find_all_adverbs('A man is walking quickly.')\n    ['quickly']\n    \"\"\"\n    return re.findall(r\"([a-z]+ly)\", sentence)\n\n\ndef find_all_adverbs_v2(sentence: str) -> List[str]:\n    \"\"\"\n    >>> find_all_adverbs_v2('A man is walking quickly.')\n    ['quickly']\n    >>> find_all_adverbs_v2('A man is walking quickly.')\n    ['quickly']\n    >>> find_all_adverbs_v2('A man is walking quickly.')\n    ['quickly']\n    \"\"\"\n    return re.findall(r\"([a-z]+ly)\", sentence, flags=re.IGNORECASE)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverbs(sentence: str) -> list:\n    \"\"\"Returns a list of adverbs with their positions in a given sentence.\n\n    >>> find_adverbs('The quick brown fox jumps over the lazy dog.')\n    [['quickly', 3], ['slowly', 28]]\n    \"\"\"\n    from pattern.en import conjugate, VERB\n\n    adverb_list = []\n    tokens = sentence.split()\n\n    for index, token in enumerate(tokens):\n        if token in (\"very\", \"really\"):\n            adverb_list.append([token, index])\n            continue\n        if len(token) > 5:\n            continue\n        if token in (\"just\", \"also\", \"anyway\", \"almost\", \"barely\", \"hardly\"):\n            adverb_list.append([token, index])\n            continue\n        if token in (\"today\", \"tomorrow\", \"yesterday\", \"tonight\", \"now\", \"never\"):\n            adverb_list.append([token, index])\n            continue\n        if token in (\"really\", \"surely\", \"often\", \"certainly\", \"extremely\"):\n            adverb_list.append([token, index])\n            continue\n        if token in (\"actually\", \"often\", \"usually\", \"generally\", \"frequently\"):\n            adverb_list.append([token, index])\n            continue\n        if token in (\"very\", \"really\", \"surely\", \"often\", \"certainly\", \"extremely\"):\n            adverb_list.append([token, index])\n            continue\n        if len(token) == 4:\n            if conjugate(token, tense=VERB.PAST, person=1) in (\"very\", \"really\"):\n                adverb_list.append([token, index])\n                continue\n        if len(token) == 5:\n            if conjugate(token, tense=VERB.PAST, person=1) in (\"very\", \"really\"):\n                adverb_list.append([token, index])\n                continue\n\n    return adverb_list",
    "from nltk.corpus import wordnet\n\n\ndef adverb_finder(sentence):\n    \"\"\"Returns a list of adverbs and their positions in the given sentence.\"\"\"\n    adverbs = []\n    for i, word in enumerate(sentence.split()):\n        if wordnet.synsets(word):\n            for syn in wordnet.synsets(word):\n                for l in syn.lemmas():\n                    if l.synset().name()[-3:] == \"adv\":\n                        adverbs.append((i, word))\n    return adverbs",
    "from nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n\ndef adverb_finder(sentence):\n    tokenized_sentence = word_tokenize(sentence)\n    tagged_sentence = pos_tag(tokenized_sentence)\n    adverbs = [word for word, tag in tagged_sentence if tag == \"RB\"]\n    adverb_positions = [index for index, word in enumerate(tagged_sentence) if word[1] == \"RB\"]\n\n    return adverbs, adverb_positions\n\n\nif __name__ == \"__main__\":\n    #print(adverb_finder(\"I am very very very very happy\"))\n    print(adverb_finder(\"I am very happy\"))",
    "from nltk.corpus import brown\n\n\ndef adverb_position(sentence):\n    \"\"\"Find all adverbs and their positions in a given sentence.\n\n    >>> adverb_position('The quick brown fox jumped over the lazy dog')\n    [('quick', 2), ('lazy', 6)]\n    \"\"\"\n    return [\n        (word, position)\n        for position, (word, tag) in enumerate(brown.tagged_words(sentence))\n        if tag == 'RB'\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import spacy\n\n\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef adverbs_and_positions(sentence):\n    \"\"\"Find all adverbs in a given sentence and their positions.\"\"\"\n    # create a document\n    doc = nlp(sentence)\n\n    # iterate over all tokens\n    for token in doc:\n        # check if the token is an adverb\n        if token.tag_ == \"RB\":\n            # print the token and its position\n            print(token.text, token.idx)\n\n\nsentence = \"Spain is a great country to visit.\"\nadverbs_and_positions(sentence)",
    "import nltk\n\nfrom nltk.corpus import wordnet\n\nfrom text_preprocessing import text_normalizer\n\n\nclass AdverbFinder:\n\n    def __init__(self, text):\n        self.text = text_normalizer.normalize(text)\n        self.adverbs = []\n        self.adverb_positions = []\n\n    def find_adverbs(self):\n        tokens = nltk.word_tokenize(self.text)\n        tagged_tokens = nltk.pos_tag(tokens)\n        for i in range(len(tagged_tokens)):\n            if tagged_tokens[i][1] == 'RB':\n                self.adverbs.append(tagged_tokens[i][0])\n                self.adverb_positions.append(i)\n        return self.adverbs, self.adverb_positions\n\n    def get_adverb_synonyms(self):\n        adverb_synonyms = []\n        for adverb in self.adverbs:\n            synonyms = set()\n            for syn in wordnet.synsets(adverb):\n                for l in syn.lemmas():\n                    synonym = l.name().replace(\"_\", \" \").replace(\"-\", \" \").lower()\n                    synonym = text_normalizer.remove_diacritics(synonym)\n                    synonyms.add(synonym)\n            adverb_synonyms.append(synonyms)\n        return adverb_synonyms\n\n    def get_adverb_synonyms_positions(self):\n        adverb_synonyms = []\n        for i in range(len(self.adverbs)):\n            synonyms = set()\n            for syn in wordnet.synsets(self.adverbs[i]):\n                for l in syn.lemmas():\n                    synonym = l.name().replace(\"_\", \" \").replace(\"-\", \" \").lower()\n                    synonym = text_normalizer.remove_diacritics(synonym)\n                    synonyms.add(synonym)\n            adverb_syn",
    "from collections import defaultdict\n\n\ndef adverbs(sentence):\n    \"\"\"Return list of adverbs and their positions in a given sentence.\"\"\"\n    adverb_list = []\n    adverbs_dict = defaultdict(int)\n    words = sentence.split()\n    for i in range(len(words)):\n        word = words[i].lower()\n        if word in adverbs_dict:\n            adverb_list.append((word, i))\n            adverbs_dict[word] += 1\n    return adverb_list",
    "from string import punctuation\n\n\ndef adverbs(sentence):\n    \"\"\"\n    >>> adverbs('Hello, welcome to Berkeley.')\n    []\n    >>> adverbs('The dog is running quickly.')\n    ['quickly']\n    >>> adverbs('The dog is running quickly and quickly.')\n    ['quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly.')\n    ['quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly quickly quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly quickly quickly quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly']\n    >>> adverbs('The dog is quickly running quickly and quickly quickly quickly quickly quickly quickly quickly.')\n    ['quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly']\n    \"\"\"\n    def is_adverb(word):\n        return word.lower() in adverbs_list\n\n    def find_adverbs(sentence):\n        adverbs_list = []\n        for word in sentence.split():\n            if is_adverb(word):\n                adverbs_list.append(word)\n        return adverbs_list\n\n    adverbs_list = ['quickly', 'quietly",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 2), ('brown', 4), ('lazy', 11)]\n    >>> adverbs(\"The lazy dog jumps over the quick brown fox.\")\n    [('lazy', 2), ('quick', 11), ('brown', 13)]\n    \"\"\"\n    adverb_positions = []\n    adverbs = [\"quickly\", \"slowly\", \"quick\", \"slow\", \"quicklier\", \"slowlier\", \"quickly\", \"slowly\", \"quickish\", \"slowish\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly\", \"slowishly\", \"quickishly\", \"slowishly\", \"quickish\", \"slowish\", \"quickly\", \"slowly\", \"quickishly",
    "from typing import List\nfrom collections import Counter\n\n\ndef adverbs(sentence: str) -> List[str]:\n    \"\"\"Find all adverbs and their positions in a given sentence.\n\n    Args:\n        sentence (str): a sentence\n\n    Returns:\n        List[str]: list of adverbs\n    \"\"\"\n    if not sentence:\n        return []\n    words = sentence.split()\n    word_set = set(words)\n    counter = Counter(words)\n    adverbs = []\n    for word, count in counter.items():\n        if word in word_set and count == 1:\n            adverbs.append(word)\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    assert adverbs(\"Python is a high-level, general-purpose programming language.\") == [\n        \"high-level\",\n        \"general-purpose\",\n    ]\n    assert adverbs(\"I am a good student.\") == [\"good\", \"student\"]",
    "from nltk.corpus import wordnet\n\nadverb_list = []\n\n\ndef find_adverb(sentence):\n    \"\"\"\n    Finds all adverbs and their positions in a given sentence.\n    \"\"\"\n    global adverb_list\n    adverb_list = []\n    words = sentence.split(\" \")\n    for i in range(len(words)):\n        synsets = wordnet.synsets(words[i])\n        for synset in synsets:\n            if synset.pos() == \"r\":\n                adverb_list.append([i, words[i]])\n\n    print(adverb_list)\n\n\nfind_adverb(\"This is the best book I have ever read.\")",
    "import nltk\n\n\ndef find_adverbs(sentence: str):\n    \"\"\"\n    >>> find_adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 2), ('lazy', 6)]\n    >>> find_adverbs(\"The quick brown fox jumps over the lazy fox.\")\n    [('quick', 2), ('lazy', 6), ('lazy', 12)]\n    \"\"\"\n\n    # 1. Get the tokens in the sentence.\n    tokens = nltk.word_tokenize(sentence)\n\n    # 2. Get the pos tagging of the tokens.\n    tagged = nltk.pos_tag(tokens)\n\n    # 3. Get the adverbs from the tagged tokens.\n    adverbs = [word for word, pos in tagged if pos == \"RB\"]\n\n    # 4. Get the indices of the adverbs from the original sentence.\n    indices = [sentence.index(word) for word in adverbs]\n\n    # 5. Return a list of tuples of adverbs and their indices.\n    return list(zip(adverbs, indices))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from nltk.corpus import brown\n\n\ndef adverb_positions(sentence):\n    \"\"\"Finds all adverbs and their positions in a given sentence.\n\n    Args:\n        sentence: A string containing a sentence.\n\n    Returns:\n        A list containing tuples of the form (adverb, position).\n    \"\"\"\n    tokens = sentence.split()\n    adverbs = []\n    for token in tokens:\n        if token in brown.words(tagset=\"universal\"):\n            tag = brown.tagged_words(tagset=\"universal\")[tokens.index(token)][1]\n            if tag == \"ADV\":\n                adverbs.append((token, tokens.index(token)))\n\n    return adverbs\n\n\ndef test_adverb_positions():\n    \"\"\"Testing\"\"\"\n    assert adverb_positions(\"The dog runs quickly.\") == [(\"quickly\", 5)]\n    assert adverb_positions(\"The dog runs fast.\") == []\n    assert adverb_positions(\"The dog runs fast.\") == []\n    assert adverb_positions(\"The dog runs very quickly.\") == [(\"very\", 5), (\"quickly\", 7)]\n\n\nif __name__ == '__main__':\n    test_adverb_positions()",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 3), ('lazy', 11)]\n    >>> adverbs(\"The dog that chased the fox through the forest jumped over the fence.\")\n    [('quick', 3), ('lazy', 11)]\n    >>> adverbs(\"The dog that chased the fox through the forest jumped over the fence.\")\n    [('quick', 3), ('lazy', 11)]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.lower() in [\"quick\", \"slow\", \"lazy\", \"fast\", \"slowly\"]:\n            adverbs.append((word, sentence.index(word)))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def adverbs(sentence):\n\n    advs = []\n    for word in sentence.split():\n        if word in adverbs_list:\n            advs.append((word, sentence.index(word)))\n\n    return advs\n\n\nadverbs_list = ['today', 'tomorrow', 'early', 'often', 'late', 'yesterday',\n                'earlier', 'recently', 'often', 'soon', 'early', 'lately',\n                'suddenly', 'recently', 'immediately', 'urgently', 'quickly',\n                'quickly', 'slowly', 'slowly', 'quickly', 'quickly',\n                'slowly', 'recently', 'quickly', 'immediately', 'urgently',\n                'slowly', 'immediately', 'quickly', 'slowly', 'urgently',\n                'slowly', 'quickly', 'immediately', 'urgently', 'quickly',\n                'quickly', 'slowly', 'immediately', 'urgently', 'quickly',\n                'immediately', 'urgently', 'quickly', 'quickly', 'slowly',\n                'quickly', 'slowly', 'quickly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quickly',\n                'slowly', 'quickly', 'slowly', 'quickly', 'slowly', 'quick",
    "def adverbs_and_positions(sentence):\n    \"\"\"\n    Return a list of adverbs and their positions in a given sentence.\n    >>> adverbs_and_positions('The quick brown fox jumps over the lazy dog')\n    [((2, 3), 'quick'), ((4, 5), 'brown'), ((5, 6), 'fox'), ((5, 6), 'jumps'), ((7, 8), 'over'), ((7, 8), 'the'), ((8, 9), 'lazy')]\n    >>> adverbs_and_positions('I am the very model of a modern major general')\n    [((1, 2), 'very'), ((2, 3), 'very'), ((3, 4), 'model'), ((4, 5), 'of'), ((5, 6), 'a'), ((6, 7), 'modern'), ((7, 8), 'major'), ((8, 9), 'general')]\n    >>> adverbs_and_positions('Is this the real life?')\n    []\n    >>> adverbs_and_positions('Is this the real life?')\n    []\n    \"\"\"\n    return list(\n        filter(\n            lambda x: x[1] in [\"quickly\", \"slowly\", \"quietly\", \"briefly\"],\n            enumerate(\n                map(\n                    lambda x: x.strip(),\n                    sentence.split(),\n                )\n            ),\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from nltk.corpus import wordnet\nfrom nltk.tokenize import word_tokenize\n\n\ndef adverb_positions(sentence):\n    \"\"\"\n    >>> adverb_positions(\"This is a simple sentence.\")\n    []\n    >>> adverb_positions(\"This is a simple fast sentence.\")\n    [[4, 'fast']]\n    >>> adverb_positions(\"This is a simple fastest sentence.\")\n    [[4, 'fastest']]\n    >>> adverb_positions(\"This is a simple fastest and best sentence.\")\n    [[4, 'fastest'], [9, 'best']]\n    \"\"\"\n    adverbs = []\n\n    for word, pos in word_tokenize(sentence):\n        if pos == \"RB\" or pos == \"RBR\" or pos == \"RBS\":\n            adverbs.append([sentence.index(word), word])\n\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import namedtuple\nfrom enum import Enum, auto\nfrom typing import List, Tuple\n\n\nclass PartOfSpeech(Enum):\n    \"\"\"\n    Part of speech.\n    \"\"\"\n\n    ADVERB = auto()\n\n\nAdverb = namedtuple(\"Adverb\", \"position word\")\n\n\ndef find_adverbs(sentence: str) -> List[Adverb]:\n    \"\"\"\n    Find adverbs in a given sentence.\n    \"\"\"\n\n    # TODO: implement this function\n\n\n_INPUT_TEXT = \"\"\"\nThe quick brown fox jumps over the lazy dog.\n\"\"\"\n\n_EXPECTED_RESULT = [\n    Adverb(position=17, word=\"over\"),\n    Adverb(position=30, word=\"lazy\"),\n]\n\n\ndef _test_solution() -> None:\n    \"\"\"\n    Test the solution implementation.\n    \"\"\"\n\n    assert find_adverbs(_INPUT_TEXT) == _EXPECTED_RESULT\n\n\nif __name__ == \"__main__\":\n    _test_solution()",
    "def find_adverbs(sentence):\n    adverbs = []\n    words = sentence.split()\n    for index, word in enumerate(words):\n        if word.endswith((\"ly\", \"ally\", \"ness\", \"nely\")):\n            adverbs.append((word, index))\n    return adverbs",
    "from typing import List\nfrom nltk.corpus import brown\n\n\ndef find_adverbs(sentence: str) -> List[str]:\n    \"\"\"Return a list of all adverbs and their positions in a given sentence.\"\"\"\n    adverbs = []\n    tokens = sentence.split()\n    for index, token in enumerate(tokens):\n        if token in brown.tagged_words():\n            if brown.tagged_words()[index][1] == \"RB\":\n                adverbs.append(brown.tagged_words()[index][0])\n    return adverbs",
    "def adverb_positions(sentence):\n    \"\"\"\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [11, 16]\n    \"\"\"\n    words = sentence.split()\n    adverbs = []\n    for i, word in enumerate(words):\n        if word in ADVERBS:\n            adverbs.append(i)\n    return adverbs\n\n\nADVERBS = [\n    \"quickly\",\n    \"slowly\",\n    \"eagerly\",\n    \"happily\",\n    \"hopelessly\",\n    \"daily\",\n    \"yearly\",\n    \"quietly\",\n    \"loudly\",\n    \"regularly\",\n    \"repeatedly\",\n    \"quick\",\n    \"slow\",\n    \"eager\",\n    \"happy\",\n    \"hopeful\",\n    \"daily\",\n    \"yearly\",\n    \"quiet\",\n    \"loud\",\n    \"regular\",\n    \"repeated\",\n]",
    "from nltk.corpus import wordnet\n\n\ndef find_adverbs(sentence):\n    \"\"\"Find all adverbs in a sentence and return them with their positions.\"\"\"\n    adverbs = []\n    words = sentence.split()\n    for idx, word in enumerate(words):\n        for synset in wordnet.synsets(word):\n            for lemma in synset.lemmas():\n                if lemma.synset().name()[-4:] == 'advb':\n                    adverbs.append((idx, lemma.name()))\n    return adverbs\n\n\nif __name__ == '__main__':\n    from nltk.corpus import brown\n    import random\n\n    for sentence in random.sample(brown.sents(), 5):\n        print(' '.join(sentence))\n        print(find_adverbs(sentence))\n        print('')",
    "def find_adverb(sentence):\n    adverb_list = []\n    for i in range(len(sentence)):\n        word = sentence[i]\n        if word == \"very\":\n            adverb_list.append([i, i+1])\n            i += 1\n        elif word == \"really\":\n            adverb_list.append([i, i+1])\n            i += 1\n        elif word == \"too\":\n            adverb_list.append([i, i+1])\n            i += 1\n    return adverb_list\n\n\nsentence = [\"I\", \"am\", \"really\", \"too\", \"tired\", \"today\"]\nprint(find_adverb(sentence))",
    "def adverb_positions(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        word = sentence[i]\n        if word in ADVERBS:\n            adverbs.append(i)\n    return adverbs\n\n\nADVERBS = {\n    \"early\",\n    \"often\",\n    \"well\",\n    \"quickly\",\n    \"recently\",\n    \"today\",\n    \"earlier\",\n    \"quick\",\n    \"recent\",\n    \"late\",\n    \"soon\",\n    \"tomorrow\",\n    \"later\",\n    \"really\",\n    \"often\",\n    \"today\",\n    \"tomorrow\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"today\",\n    \"tomorrow\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"tonight\",\n    \"yesterday\",\n    \"last\",\n    \"little\",\n    \"late\",\n    \"early\",\n    \"hardly\",\n    \"slowly\",\n    \"seldom\",\n    \"tonight\",\n    \"yesterday\",",
    "from nltk.corpus import wordnet\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n\ndef adverb_finder(sentence):\n    \"\"\"\n    Takes a sentence and returns a list of adverbs and their positions\n    \"\"\"\n\n    adverb_list = []\n\n    tokens = word_tokenize(sentence)\n    tags = pos_tag(tokens)\n\n    for index, word in enumerate(tags):\n        if word[1] == 'RB':\n            adverb_list.append((word[0], index))\n\n    return adverb_list\n\n\nif __name__ == '__main__':\n\n    print(adverb_finder('The dog runs fast.'))",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [('quick', 3), ('lazy', 12)]\n    >>> adverbs('I like to swim in the river')\n    [('quick', 3)]\n    \"\"\"\n    adverb_list = ['slowly', 'quickly', 'quietly', 'slow', 'quick', 'quiet', 'softly', 'soft', 'hard', 'hardly']\n    adverb_position = []\n    for i in range(len(sentence.split()) - 1):\n        if sentence.split()[i] in adverb_list:\n            adverb_position.append((sentence.split()[i], i))\n    return adverb_position\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def adverb_positions(sentence):\n    \"\"\"Find all adverbs and their positions in a given sentence.\"\"\"\n    result = []\n    words = sentence.split(' ')\n    for i in range(len(words)):\n        if words[i].lower() in ADVERBS:\n            result.append(i)\n    return result\n\n\nADVERBS = set(['early', 'often', 'now', 'today', 'tomorrow', 'yesterday'])\n\n\ndef test_function():\n    assert adverb_positions(\"The quick brown fox jumped over the lazy dog early this morning.\") == [0, 5, 11]\n    assert adverb_positions(\"Take it easy today\") == [2]\n    assert adverb_positions(\"I am very tired\") == []\n    assert adverb_positions(\"I am very well\") == []\n    assert adverb_positions(\"Go slowly\") == [1]\n    assert adverb_positions(\"Very well\") == []\n    assert adverb_positions(\"The dog ate the apple\") == []\n\nif __name__ == '__main__':\n    test_function()",
    "import re\n\ndef adverb_position(sentence):\n    sentence = sentence.lower()\n    adverbs = re.findall(r'(\\w+ly)', sentence)\n    positions = []\n    for adverb in adverbs:\n        positions.append(sentence.find(adverb))\n    return positions\n\nprint(adverb_position(\"I think you are the best person in the world.\"))\nprint(adverb_position(\"I am the best person in the world.\"))\nprint(adverb_position(\"I think I am the best person in the world.\"))",
    "from nltk.corpus import wordnet\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n\ndef adverbs(sentence):\n    # Create a list of adverbs\n    adverbs_list = []\n    # Create a list of adjectives\n    adjectives_list = []\n\n    # Create a list of words\n    words_list = word_tokenize(sentence)\n\n    # Create a list of tuples (word, part of speech)\n    tagged_words = pos_tag(words_list)\n\n    # Get the wordnet tag of the word\n    for (word, word_type) in tagged_words:\n        if word_type in ['RB', 'RBR', 'RBS']:\n            adverbs_list.append(word)\n        elif word_type in ['JJ', 'JJR', 'JJS']:\n            adjectives_list.append(word)\n\n    # Create a list of synsets\n    adverbs_synsets = []\n    adjectives_synsets = []\n\n    # Get all synsets for adverbs\n    for adverb in adverbs_list:\n        adverbs_synsets += wordnet.synsets(adverb)\n\n    # Get all synsets for adjectives\n    for adjective in adjectives_list:\n        adjectives_synsets += wordnet.synsets(adjective)\n\n    # Get the list of all adverb lemmas\n    adverbs_lemmas = []\n\n    for synset in adverbs_synsets:\n        adverbs_lemmas += synset.lemmas()\n\n    # Get the list of all adjective lemmas\n    adjectives_lemmas = []\n\n    for synset in adjectives_synsets:\n        adjectives_lemmas += synset.lemmas()\n\n    # Create a list of adverbs and their positions\n    adverbs_positions = []\n\n    # Create a list of adjectives and their positions\n    adjectives_positions = []\n\n    # Check if the word is an adverb",
    "from nltk.corpus import brown\n\n\ndef adverb_positions(sentence):\n    \"\"\"Find all adverbs and their positions in a given sentence.\n\n    >>> adverb_positions('The quick brown fox jumps over the lazy dog.')\n    [('quick', 2), ('lazy', 10)]\n    \"\"\"\n    adverbs = []\n    for index, (word, tag) in enumerate(brown.tagged_words(sentence)):\n        if tag == 'RB':\n            adverbs.append((word, index))\n    return adverbs\n\n\ndef adverb_positions_regex(sentence):\n    \"\"\"Find all adverbs and their positions in a given sentence.\n\n    >>> adverb_positions_regex('The quick brown fox jumps over the lazy dog.')\n    [('quick', 2), ('lazy', 10)]\n    \"\"\"\n    import re\n\n    adverbs = []\n    for index, word in enumerate(sentence.split()):\n        if re.match(r'RB', brown.tagged_words(sentence)[index][1]):\n            adverbs.append((word, index))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 3), ('lazy', 11)]\n    >>> adverbs(\"The lazy fox jumps over the quick dog.\")\n    [('quick', 11), ('lazy', 3)]\n    \"\"\"\n    adverbs_list = [\"quickly\", \"slowly\", \"lazily\", \"quick\", \"slow\", \"lazy\"]\n    result = []\n    for i, word in enumerate(sentence.split()):\n        if word in adverbs_list:\n            result.append((word, i))\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverbs(sentence: str) -> list[tuple[int, str]]:\n    \"\"\"\n    >>> find_adverbs(\"The dog is big fast.\")\n    [(3, 'fast'), (11, 'big')]\n    \"\"\"\n    return [(i, word) for i, word in enumerate(sentence.split()) if word in ADVERBS]\n\n\nADVERBS = {\"slow\", \"fast\", \"quick\", \"slowly\", \"quickly\", \"quicker\", \"soon\", \"far\", \"late\"}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def adverb_finder(sentence):\n    adverbs = []\n    words = sentence.split()\n\n    for index, word in enumerate(words):\n        if word.lower() in [\"early\", \"now\", \"still\", \"always\", \"never\", \"suddenly\", \"soon\", \"recently\", \"happily\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"frequently\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"often\", \"slowly\", \"quickly\", \"frequently\", \"",
    "def adverbs(sentence):\n    # your code here\n    words = sentence.split()\n    adverbs = []\n    for i in range(len(words)):\n        if words[i] in adverbs_list and words[i - 1] in ['not', 'no', 'nor']:\n            adverbs.append(words[i])\n            adverbs.append(words[i - 1])\n        elif words[i] in adverbs_list:\n            adverbs.append(words[i])\n\n    return adverbs\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert adverbs(\"After eating the sandwich I ate the clock\") == [\"quickly\", \"quickly\", \"so\", \"well\", \"well\", \"well\"], \"Adverbs\"\n    assert adverbs(\"Four score and seven years ago my brother wrote me a letter\") == [\"gently\", \"indirectly\", \"immediately\", \"promptly\", \"recently\", \"slowly\"], \"Adverbs 2\"\n    assert adverbs(\"Hearing Voices? 5 Tips For Managing Schizoaffective Disorder\") == [], \"Empty\"",
    "def find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs('I am quickly running')\n    [('quickly', 4)]\n    >>> find_adverbs('The cat is playing quietly')\n    [('quietly', 9)]\n    >>> find_adverbs('The cat is playing quietly')\n    [('quietly', 9)]\n    >>> find_adverbs('He is very quickly running')\n    [('very', 3), ('quickly', 6)]\n    \"\"\"\n    return [(word, index) for index, word in enumerate(sentence.split()) if word in ADVERBS]\n\n\nADVERBS = {'quickly', 'quietly', 'very'}\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "import nltk\nfrom nltk.corpus import brown\n\n\ndef adverb_positions(sentence):\n    \"\"\"\n    Return a list of (word, position) tuples of all adverbs in the sentence.\n\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [('quickly', 2), ('quickly', 4), ('quickly', 6), ('quickly', 8), ('quickly', 10)]\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [('slowly', 2), ('slowly', 4), ('slowly', 6), ('slowly', 8), ('slowly', 10)]\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [('quickly', 2), ('quickly', 4), ('quickly', 6), ('quickly', 8), ('quickly', 10)]\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [('quickly', 2), ('quickly', 4), ('quickly', 6), ('quickly', 8), ('quickly', 10)]\n    >>> adverb_positions(\"The quick brown fox jumps over the lazy dog\")\n    [('quickly', 2), ('quickly', 4), ('quickly', 6), ('quickly', 8), ('quickly', 10)]\n    \"\"\"\n    tagged_sentence = nltk.pos_tag(nltk.word_tokenize(sentence))\n    return [(word, index) for index, (word, tag) in enumerate(tagged_sentence) if tag == \"RB\"]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import spacy\n\nnlp = spacy.load('en_core_web_sm')\n\n\ndef adverb_positions(sentence):\n    doc = nlp(sentence)\n    for token in doc:\n        if token.tag_ == 'RB':\n            print(f\"{token.text} found at position {token.i}\")\n\n\nadverb_positions(\"The quick brown fox jumped over the lazy dog.\")",
    "import spacy\nfrom spacy.matcher import Matcher\n\nnlp = spacy.load(\"en_core_web_sm\")\nmatcher = Matcher(nlp.vocab)\n\ndoc = nlp(\n    \"Writing a function to find all adverbs and their positions in a given sentence.\"\n)\n\n# Write a pattern for adverbs\npattern = [{\"POS\": \"ADV\"}]\n\n# Add the pattern to the matcher and apply the matcher to the doc\nmatcher.add(\"ADV_PATTERN\", None, pattern)\nmatches = matcher(doc)\n\nfor match_id, start, end in matches:\n    # Print the matched span and the text of the span\n    matched_span = doc[start:end]\n    print(matched_span.text)",
    "def adverbs(sentence):\n    \"\"\"\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [['quick', 3], ['lazy', 20]]\n    >>> adverbs(\"The brown fox jumped over the lazy fox.\")\n    [['lazy', 22]]\n    >>> adverbs(\"The fox is very quick.\")\n    [['very', 12]]\n    >>> adverbs(\"The fox is very quickly jumped.\")\n    [['quickly', 18]]\n    \"\"\"\n    result = []\n    for i, word in enumerate(sentence.split()):\n        if word in adverbs_list:\n            result.append([word, i])\n    return result\n\n\nadverbs_list = [\n    \"quickly\",\n    \"quick\",\n    \"slowly\",\n    \"slow\",\n    \"lately\",\n    \"late\",\n    \"early\",\n    \"early\",\n    \"recently\",\n    \"recent\",\n    \"now\",\n    \"still\",\n    \"today\",\n    \"tonight\",\n    \"tomorrow\",\n    \"yesterday\",\n    \"right\",\n    \"right\",\n    \"late\",\n    \"tomorrow\",\n    \"tonight\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tomorrow\",\n    \"tonight\",\n    \"today\",\n    \"yesterday\",\n    \"tom",
    "import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef adverbs(text):\n    \"\"\"\n    >>> adverbs(\"The quick brown fox jumps over the lazy dog.\")\n    [('quick', 3), ('quick', 7), ('lazy', 11)]\n    \"\"\"\n    result = []\n    doc = nlp(text)\n    for token in doc:\n        if token.tag_ == \"RB\":\n            result.append((token.text, token.i))\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_adverb(sentence):\n    \"\"\"\n    >>> find_adverb(\"I am quickly running\")\n    [('quickly', 3)]\n    >>> find_adverb(\"He is incredibly running\")\n    [('incredibly', 3)]\n    >>> find_adverb(\"She is incredibly running\")\n    [('incredibly', 3)]\n    >>> find_adverb(\"I am quickly running\")\n    [('quickly', 3)]\n    \"\"\"\n    adverb_list = []\n\n    for word in sentence.split():\n        if word in adverbs:\n            adverb_list.append((word, sentence.index(word)))\n\n    return adverb_list\n\n\nadverbs = [\n    \"abnormally\",\n    \"abruptly\",\n    \"absurdly\",\n    \"accidentally\",\n    \"accurately\",\n    \"actually\",\n    \"adamantly\",\n    \"adventurously\",\n    \"aggressively\",\n    \"alarmingly\",\n    \"almost\",\n    \"always\",\n    \"anxiously\",\n    \"angrily\",\n    \"annoyingly\",\n    \"anxiously\",\n    \"ardently\",\n    \"arrogantly\",\n    \"awkwardly\",\n    \"badly\",\n    \"beautifully\",\n    \"bitterly\",\n    \"boastfully\",\n    \"bravely\",\n    \"briefly\",\n    \"brightly\",\n    \"busily\",\n    \"callously\",\n    \"carefully\",\n    \"cautiously\",\n    \"certainly\",\n    \"cheerfully\",\n    \"clearly\",\n    \"cleverly\",\n    \"coolly\",\n    \"correctly\",\n    \"courageously\",\n    \"cruelly\",\n    \"curiously\",\n    \"daily\",\n    \"daintily\",\n    \"dangerously\",\n    \"daringly\",\n    \"deadly\",\n    \"deeply\",\n    \"defiantly\",\n    \"definitely\",\n    \"deftly\",\n    \"degradingly\",\n    \"dejectedly\",\n    \"",
    "from collections import Counter\n\n\ndef get_adverbs(sentence):\n    \"\"\"Return list of adverbs and their positions in a given sentence.\"\"\"\n    if not sentence:\n        return []\n\n    words = sentence.split()\n    adverb_list = []\n    for i, word in enumerate(words):\n        if word in adverbs:\n            adverb_list.append((word, i))\n    return adverb_list\n\n\nadverbs = Counter(\n    \"\"\"\n    often very\n    \"\"\".split()\n)",
    "def adverb_finder(sentence):\n    \"\"\"\n    >>> adverb_finder(\"John was walking slowly\")\n    [('slowly', 10)]\n    \"\"\"\n    adverbs = [\"slowly\", \"quickly\"]\n    return [(word, sentence.find(word)) for word in adverbs if word in sentence]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def get_adverbs(sentence):\n\n    with open('adverbs.txt') as f:\n        adverbs = f.read().splitlines()\n\n    for word in sentence.split():\n        if word in adverbs:\n            yield word, sentence.index(word)\n\n\nif __name__ == '__main__':\n    print(list(get_adverbs('I ate the pizza quickly.')))",
    "import re\n\ndef adverb_finder(sentence):\n    \"\"\"\n    >>> adverb_finder(\"She is clever.\")\n    [('clever', 5)]\n    >>> adverb_finder(\"He is very clever.\")\n    [('very', 4), ('clever', 7)]\n    >>> adverb_finder(\"She is clever and beautiful.\")\n    [('clever', 5), ('beautiful', 11)]\n    >>> adverb_finder(\"She is not clever.\")\n    []\n    \"\"\"\n    adverb_list = []\n    adverb_re = re.compile(r\"\\b(very|really|so|too|also)\\b\")\n    adverb_positions = adverb_re.finditer(sentence)\n    for match in adverb_positions:\n        adverb_list.append((match.group(), match.start()))\n\n    return adverb_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_adverbs(sentence):\n    \"\"\"Finds all adverbs in a given sentence.\"\"\"\n    adverbs = set()\n    for word in sentence.split():\n        if word.endswith((\"ly\")):\n            adverbs.add((word, sentence.find(word)))\n    return adverbs\n\n\ndef test_find_adverbs():\n    \"\"\"Test for find_adverbs function.\"\"\"\n    assert find_adverbs(\n        \"The quick brown fox jumped over the lazy dog.\") == {('quickly', 5), ('lazily', 26)}\n    assert find_adverbs(\n        \"Why are you so dull, creative?\") == set()\n    assert find_adverbs(\n        \"This is an adventure.\") == set()",
    "from textblob import TextBlob\n\n\ndef adverbs(sentence):\n    sentence = TextBlob(sentence)\n    return sentence.find_tags('RB')",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef get_adverb_positions(sentence: str) -> List[int]:\n    \"\"\"Get all positions of adverbs in a given sentence.\n\n    Args:\n        sentence (str): input sentence.\n\n    Returns:\n        List[int]: list of positions.\n\n    Examples:\n        >>> assert get_adverb_positions(\n        ...     \"The quick brown fox jumps over the lazy dog\")\n        ... == [1, 6]\n    \"\"\"\n    adverbs = [\n        \"quickly\",\n        \"slowly\",\n        \"quick\",\n        \"slow\",\n        \"fast\",\n        \"quicklier\",\n        \"slower\",\n        \"quicker\",\n        \"slowlyer\",\n        \"quickest\",\n        \"slowest\",\n        \"faster\",\n        \"quickliest\",\n        \"slowliest\",\n        \"quickling\",\n        \"slowing\",\n        \"quickly\",\n        \"slowly\",\n    ]\n    adverb_positions = defaultdict(int)\n\n    for i, word in enumerate(sentence.split()):\n        if word in adverbs:\n            adverb_positions[i] += 1\n\n    return list(adverb_positions.keys())\n\n\nif __name__ == \"__main__\":\n    print(get_adverb_positions(\"The quick brown fox jumps over the lazy dog\"))",
    "def find_adverbs(sentence):\n    adverbs = []\n    for i, word in enumerate(sentence.split(' ')):\n        if word in ['early', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently', 'early', 'quickly', 'late', 'often', 'recently', 'slowly', 'quickly', 'slowly', 'recently",
    "from nltk.corpus import brown\n\n\ndef get_adverbs():\n    adverbs = []\n    for sentence in brown.tagged_sents():\n        for (word, tag) in sentence:\n            if tag == \"RB\":\n                adverbs.append(word)\n    return adverbs\n\n\ndef get_adverb_positions(sentence):\n    positions = []\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] in get_adverbs():\n            positions.append(i + 1)\n    return positions\n\n\nprint(get_adverb_positions(\"The boy saw the girl with the telescope\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope quickly\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope very quickly\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope fast\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope very fast\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope fastly\"))\nprint(get_adverb_positions(\"The boy saw the girl with the telescope very fastly\"))",
    "def adverbs(sentence):\n\n    adverbs = [\n        'aback', 'abaft', 'abandoned', 'abashed', 'aberrant', 'abhorrent',\n        'abiding', 'abject', 'ablaze', 'able', 'abnormal', 'aboard',\n        'aboriginal', 'abortive', 'abounding', 'abrasive', 'abreast',\n        'abrupt', 'absent', 'absent-minded', 'absent-minded', 'absurd',\n        'abundant', 'abusive', 'abysmal', 'abysmal', 'academic', 'academical',\n        'accelerating', 'acceptable', 'accepted', 'accepted', 'accessible',\n        'acclimated', 'accomplished', 'accomplished', 'accurate', 'accurate',\n        'accurate', 'accurately', 'accurately', 'accurately', 'accused',\n        'accurving', 'acetylene', 'achievable', 'achievable', 'achievable',\n        'achievable', 'achievable', 'achieving', 'achieving', 'achieving',\n        'aching', 'aching', 'aching', 'aching', 'aching', 'aching', 'aching',\n        'aching', 'aching', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic',\n        'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic',\n        'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic',\n        'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic',\n        'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic', 'acidic',\n        'acidic', 'acidic', 'acidic',",
    "def adverbs(sentence):\n    # your code here\n    adverbs = []\n    for word in sentence.split():\n        if word in adverbs_list:\n            adverbs.append(word)\n    return adverbs\n\n\nadverbs_list = [\n    \"quickly\",\n    \"quick\",\n    \"slowly\",\n    \"slow\",\n    \"soon\",\n    \"today\",\n    \"tomorrow\",\n    \"yesterday\",\n    \"tonight\",\n    \"tonite\",\n    \"tonite\",\n    \"early\",\n    \"earlier\",\n    \"lately\",\n    \"late\",\n    \"now\",\n    \"recently\",\n    \"recent\",\n    \"today\",\n    \"tomorrow\",\n    \"tonight\",\n    \"tonite\",\n    \"tonite\",\n    \"yesterday\",\n]\n\n\nprint(adverbs(\"He is a quick runner.\"))\nprint(adverbs(\"He is a slow runner.\"))",
    "def adverbs_finder(sentence):\n    \"\"\"\n    >>> adverbs_finder(\"This is the best day of my life\")\n    [('best', 7), ('life', 19)]\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] == 'the':\n            if i + 1 < len(sentence) and sentence[i + 1] == 'best':\n                adverbs.append(('best', i))\n            elif i - 1 >= 0 and sentence[i - 1] == 'best':\n                adverbs.append(('best', i))\n        elif sentence[i] == 'life':\n            adverbs.append(('life', i))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from nltk.tokenize import word_tokenize\n\n\ndef adverb_finder(sentence: str):\n    \"\"\"Finds all adverbs in a given sentence and their positions.\n\n    Args:\n        sentence (str): A sentence.\n\n    Returns:\n        list: A list of tuples with adverbs and their positions.\n\n    Example:\n    >>> adverb_finder(\"The dog quickly runs to the house.\")\n    [('quickly', 2)]\n    \"\"\"\n    tokens = word_tokenize(sentence)\n    adverbs = [\n        token\n        for token in tokens\n        if token in [\n            \"quickly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n            \"slowly\",\n        ]\n    ]\n    return [(adverb, tokens.index(adverb)) for adverb in adverbs]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def adverb_finder(sentence):\n    \"\"\"\n    Return a list of tuples of adverbs and their positions in a given sentence.\n\n    >>> adverb_finder(\"This is very good\")\n    [('very', 4)]\n    >>> adverb_finder(\"This is so good\")\n    [('so', 4)]\n    >>> adverb_finder(\"This is good\")\n    []\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence.split())):\n        if sentence.split()[i].lower() in [\"very\", \"so\"]:\n            adverbs.append((sentence.split()[i], i))\n    return adverbs\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import nltk\n\n\ndef find_adverbs(sentence: str):\n    tokens = nltk.word_tokenize(sentence)\n    tagged = nltk.pos_tag(tokens)\n\n    adverbs = [word for word, pos in tagged if pos in [\"RB\", \"RBR\", \"RBS\"]]\n\n    return [(word, i) for i, word in enumerate(adverbs)]\n\n\nif __name__ == \"__main__\":\n    print(find_adverbs(\"The quick brown fox jumps over the lazy dog\"))",
    "from collections import namedtuple\n\n\ndef adverbs(sentence):\n    \"\"\"\n    >>> adverbs('The quick brown fox jumps over the lazy dog.')\n    [Adverb(word='quick', position=4), Adverb(word='lazy', position=13)]\n    \"\"\"\n    Adverb = namedtuple(\"Adverb\", [\"word\", \"position\"])\n    adverbs_list = []\n    for i, word in enumerate(sentence.split()):\n        if word in [\"quickly\", \"slowly\"]:\n            adverbs_list.append(Adverb(word, i))\n    return adverbs_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef adverbs(sentence):\n\n    word_list = sentence.lower().split()\n    adv_list = []\n\n    with open(\"dictionary.txt\") as f:\n        words_dict = defaultdict(list)\n        for line in f:\n            word, pos = line.strip().split(\",\")\n            words_dict[pos].append(word)\n\n    for i, word in enumerate(word_list):\n        if word in words_dict[\"adv\"]:\n            adv_list.append((word, i))\n\n    return adv_list\n\n\nif __name__ == \"__main__\":\n    print(adverbs(\"She is very beautiful.\"))\n    print(adverbs(\"I have never seen anything like that before in my life.\"))",
    "from collections import defaultdict\n\n\ndef adverb_positions(sentence):\n\n    adverbs = defaultdict(list)\n\n    for i, word in enumerate(sentence.split()):\n\n        if word.endswith((\"ly\", \"ally\", \"ward\")):\n            adverbs[word].append(i)\n\n    return dict(adverbs)\n\n\nprint(adverb_positions(\"The quick brown fox jumps over the lazy dog.\"))",
    "def adverb_finder(sentence):\n    \"\"\"\n    >>> adverb_finder(\"Alice is a very clever girl\")\n    {(0, 1): 'very', (1, 2): 'clever', (2, 3): 'girl'}\n    >>> adverb_finder(\"The cat is jumping\")\n    {(1, 2): 'jumping'}\n    >>> adverb_finder(\"I am very good at programming\")\n    {(0, 1): 'very'}\n    \"\"\"\n    adverb_positions = {}\n    for i in range(len(sentence)):\n        if sentence[i].lower() in adverbs:\n            adverb_positions[i] = sentence[i]\n    return adverb_positions\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}