{
  "problem": {
    "task_id": "MBPP/136",
    "prompt": "Write a function to calculate electricity bill.",
    "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
    "test_list": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ],
    "challenge_test_list": [],
    "problem_id": 125
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def calculate_bill(power: int, time: int, unit_price: int) -> float:\n    \"\"\"Calculates the electricity bill.\n\n    Args:\n        power: Power in Watts.\n        time: Time in hours.\n        unit_price: Price of 1 KWh.\n\n    Returns:\n        Electricity bill.\n    \"\"\"\n    return power * time / 1000 * unit_price\n\n\nif __name__ == \"__main__\":\n    print(calculate_bill(2500, 3, 4.85))",
    "def get_bill(days: int, kwh: int, rate: float) -> float:\n    \"\"\"\n    >>> get_bill(10, 100, 10)\n    1000.0\n    >>> get_bill(20, 200, 20)\n    4000.0\n    >>> get_bill(1, 100, 20)\n    200.0\n    >>> get_bill(10, 100, 10)\n    1000.0\n    >>> get_bill(20, 200, 20)\n    4000.0\n    >>> get_bill(1, 100, 20)\n    200.0\n    \"\"\"\n    return days * kwh * rate\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def calculate_electricity_bill(consumption, rate):\n    return consumption * rate\n\n\nif __name__ == \"__main__\":\n    assert calculate_electricity_bill(5000, 0.2) == 1000\n    assert calculate_electricity_bill(1000, 0.2) == 200",
    "def calculate_electricity_bill(kwh):\n    \"\"\"\n    Calculate electricity bill based on kwh.\n\n    :param kwh: kwh consumed\n    :return: bill amount\n    \"\"\"\n    if kwh <= 500:\n        return 3.00\n    if kwh <= 1000:\n        return 5.50\n    return 8.00\n\n\nif __name__ == \"__main__\":\n    assert calculate_electricity_bill(500) == 3.00\n    assert calculate_electricity_bill(1000) == 5.50\n    assert calculate_electricity_bill(1500) == 8.00",
    "from unittest import TestCase\n\n\ndef calculate_electricity_bill(kwh):\n    if kwh <= 0:\n        raise ValueError(\"kwh must be greater than 0\")\n    elif kwh > 1000:\n        raise ValueError(\"kwh must be less than 1000\")\n    return kwh * 0.015\n\n\nclass TestElectricityBill(TestCase):\n\n    data = [\n        (1, 0.015),\n        (10, 0.15),\n        (50, 5.0),\n        (100, 15.0),\n        (1000, 150.0)\n    ]\n\n    def test_calculate_electricity_bill(self):\n        for kwh, expected_bill in self.data:\n            self.assertEqual(expected_bill, calculate_electricity_bill(kwh))",
    "import sys\n\n\ndef calculate_electricity_bill(\n    kwh: float, rate_per_kwh: float, peak_time_start: int, peak_time_end: int\n) -> float:\n    \"\"\"\n    Calculate electricity bill\n\n    :param kwh: amount of kwh consumed\n    :param rate_per_kwh: rate per kwh\n    :param peak_time_start: start hour of peak time\n    :param peak_time_end: end hour of peak time\n    :return: bill amount\n    \"\"\"\n\n    if not isinstance(kwh, float):\n        raise TypeError(\"kwh must be a float\")\n\n    if not isinstance(rate_per_kwh, float):\n        raise TypeError(\"rate_per_kwh must be a float\")\n\n    if not isinstance(peak_time_start, int):\n        raise TypeError(\"peak_time_start must be an int\")\n\n    if not isinstance(peak_time_end, int):\n        raise TypeError(\"peak_time_end must be an int\")\n\n    if peak_time_start > 23 or peak_time_start < 0:\n        raise ValueError(\"peak_time_start must be in the range of 0-23\")\n\n    if peak_time_end > 23 or peak_time_end < 0:\n        raise ValueError(\"peak_time_end must be in the range of 0-23\")\n\n    if peak_time_start > peak_time_end:\n        raise ValueError(\"peak_time_start must be smaller than peak_time_end\")\n\n    peak_time_hours = (peak_time_end - peak_time_start) + 1\n\n    if peak_time_hours < 0:\n        raise ValueError(\"peak_time_end must be greater than peak_time_start\")\n\n    normal_rate = rate_per_kwh\n    peak_rate = rate_per_kwh * 1.7\n\n    total_bill = 0.0\n\n    if kwh < 0:\n        raise ValueError(\"kwh must be",
    "def calculate_bill(units_used):\n    return 10 * units_used + 20\n\n\nif __name__ == \"__main__\":\n    units = int(input(\"Enter number of units: \"))\n    print(f\"Bill: {calculate_bill(units)}\")",
    "# USING POWER FACTOR\n\ndef electricity_bill(unit_consumed, power_factor):\n    return round(unit_consumed * 0.4 * power_factor, 2)\n\n# USING KWH\n\ndef electricity_bill_kwh(unit_consumed):\n    return round(unit_consumed * 0.4, 2)\n\n# DRIVER CODE\n\nif __name__ == \"__main__\":\n    unit_consumed = float(input(\"Enter unit consumed: \"))\n    power_factor = float(input(\"Enter power factor: \"))\n    print(\"Your electricity bill is:\", electricity_bill(unit_consumed, power_factor))\n    print(\"Your electricity bill is:\", electricity_bill_kwh(unit_consumed))",
    "def electricity_bill(kwh):\n    if kwh <= 1000:\n        return kwh * 0.008\n    return 1000 * 0.008 + (kwh - 1000) * 0.014\n\n\ndef test_electricity_bill():\n    assert electricity_bill(100) == 8.0\n    assert electricity_bill(1000) == 8.0\n    assert electricity_bill(2000) == 16.0",
    "def electricity_bill(kwh):\n    if kwh > 0 and kwh <= 100:\n        return kwh * 0.15\n    elif kwh > 100 and kwh <= 200:\n        return kwh * 0.3\n    elif kwh > 200 and kwh <= 500:\n        return kwh * 0.2\n    elif kwh > 500:\n        return kwh * 0.1\n\n\nif __name__ == '__main__':\n    kwh = int(input('Enter kwh: '))\n    print(electricity_bill(kwh))",
    "def calculate_bill(kwh: int) -> float:\n    if kwh <= 1000:\n        return kwh * 0.4\n    return 1000 * 0.4 + (kwh - 1000) * 0.6\n\n\nif __name__ == \"__main__\":\n    assert calculate_bill(100) == 40.0\n    assert calculate_bill(1200) == 680.0\n    assert calculate_bill(1300) == 720.0",
    "from math import ceil\n\ndef calculate_bill(meters_read, rate):\n    if meters_read <= 100:\n        return 0\n    elif meters_read <= 300:\n        return (ceil(meters_read - 100) / 100) * 0.2\n    else:\n        return (ceil(meters_read - 300) / 100) * 0.25\n\n\nif __name__ == '__main__':\n    meters_read = int(input(\"Enter number of meters read: \"))\n    rate = float(input(\"Enter rate: \"))\n    print(f\"Your bill is {calculate_bill(meters_read, rate)}\")",
    "def electricity_bill(kw, rate):\n    return kw * rate\n\n\nif __name__ == \"__main__\":\n    print(electricity_bill(1000, 0.9))",
    "from unittest import TestCase\n\n\ndef calculate_bill(kwh):\n    if kwh <= 0:\n        raise ValueError(\"kwh should be positive\")\n    return 10 + kwh * 0.2\n\n\nclass TestCalculateBill(TestCase):\n\n    data = [\n        (20, 30),\n        (10, 20),\n        (50, 90),\n        (0, 10),\n        (-1, ValueError),\n    ]\n\n    def test_calculate_bill(self):\n        for kwh, expected_bill in self.data:\n            if expected_bill is ValueError:\n                with self.assertRaises(ValueError):\n                    calculate_bill(kwh)\n            else:\n                self.assertAlmostEqual(expected_bill, calculate_bill(kwh))",
    "def electricity_bill(kwh):\n    if kwh <= 1000:\n        return kwh * 0.0005\n    else:\n        return kwh * 0.0006\n\n\nif __name__ == '__main__':\n    assert electricity_bill(1000) == 5.0\n    assert electricity_bill(1500) == 7.5\n    assert electricity_bill(2000) == 9.0\n    print(\"All test cases passed...\")",
    "# 1st solution\ndef electricity_bill(quantity, start_of_month, end_of_month):\n    return round(quantity * (start_of_month + end_of_month) / 2, 2)\n\n# 2nd solution\ndef electricity_bill(quantity, start_of_month, end_of_month):\n    return round(quantity * (start_of_month + end_of_month) / 2, 2)",
    "def electricityBill(kwh):\n    if kwh < 0:\n        return \"Invalid input\"\n    elif kwh < 500:\n        return kwh * 0.4\n    elif kwh < 1000:\n        return (kwh - 500) * 0.6 + 500 * 0.4\n    else:\n        return (kwh - 1000) * 0.8 + 500 * 0.4 + 1000 * 0.6",
    "def electricity_bill(kwh):\n    if kwh <= 500:\n        return 3.00\n    elif kwh <= 1000:\n        return 5.50\n    elif kwh <= 2000:\n        return 8.00\n    else:\n        return 8.00 + (kwh - 2000) * 0.20\n\n\nif __name__ == '__main__':\n    print(electricity_bill(400))",
    "def electricity_bill(kwh, start_time, end_time):\n    return kwh * ((end_time - start_time) / 60) * 1.65\n\n\nif __name__ == '__main__':\n    kwh = int(input())\n    start_time, end_time = list(map(int, input().split()))\n    print(electricity_bill(kwh, start_time, end_time))",
    "def calculate_electricity_bill(kwh):\n    if kwh <= 1000:\n        return kwh * 0.5\n    elif kwh > 1000 and kwh <= 3000:\n        return kwh * 0.6\n    else:\n        return kwh * 0.7\n\n\ndef main():\n    kwh = int(input(\"Enter kwh: \"))\n    print(\"Electricity bill is: \", calculate_electricity_bill(kwh))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def electricity_bill(hour, power):\n    return 1000 * hour * power\n\n\ndef test_electricity_bill():\n    assert electricity_bill(1, 2) == 2000\n\n\nif __name__ == \"__main__\":\n    print(electricity_bill(1, 2))",
    "from unittest import TestCase\n\n\ndef electricity_bill(consumption: float, amount: float) -> float:\n    return consumption * amount\n\n\nclass TestElectricityBill(TestCase):\n\n    def test_electricity_bill(self):\n        self.assertEqual(40, electricity_bill(10, 4))",
    "import math\n\ndef calculate_bill(consumption, rate):\n    consumption = consumption * rate\n    return math.floor(consumption * 100) / 100\n\nif __name__ == '__main__':\n    print(\"Consumption, rate, Bill\")\n    consumption = float(input(\"Enter consumption: \"))\n    rate = float(input(\"Enter rate: \"))\n    print(f\"{consumption}, {rate}, {calculate_bill(consumption, rate)}\")",
    "def get_bill(unit_consumed):\n    if unit_consumed > 1000:\n        return 100 + (unit_consumed - 1000) * 0.2\n    return unit_consumed * 5\n\n\nif __name__ == \"__main__\":\n    assert get_bill(1000) == 100\n    assert get_bill(2000) == 170\n    assert get_bill(2500) == 200\n    assert get_bill(4000) == 350\n    assert get_bill(5000) == 500",
    "def bill(kwh, rate):\n    return kwh * rate\n\ndef main():\n    kwh = float(input(\"Enter the kwh: \"))\n    rate = float(input(\"Enter the rate: \"))\n    print(\"Bill: \", bill(kwh, rate))\n\nif __name__ == '__main__':\n    main()",
    "def electricity_bill(usage):\n    if usage > 100:\n        return (usage - 100) * 2.5\n    else:\n        return (usage) * 1.5\n\n\nif __name__ == '__main__':\n    test_usage = [150, 100, 200, 50]\n    for u in test_usage:\n        print(electricity_bill(u))",
    "def electricity_bill(kwh):\n    if kwh <= 0:\n        return 0\n    if kwh <= 1000:\n        return 6.00\n    if kwh <= 2000:\n        return 8.00\n    if kwh <= 5000:\n        return 10.00\n    return 12.00\n\n\ndef main():\n    print(electricity_bill(0))\n    print(electricity_bill(100))\n    print(electricity_bill(1000))\n    print(electricity_bill(1500))\n    print(electricity_bill(2000))\n    print(electricity_bill(2500))\n    print(electricity_bill(5000))\n    print(electricity_bill(7000))\n\n\nif __name__ == '__main__':\n    main()",
    "def electricity_bill(kwh):\n    if kwh < 0:\n        raise ValueError('KWH cannot be less than 0')\n    elif kwh <= 300:\n        return kwh * 0.4\n    elif kwh <= 500:\n        return 300 * 0.4 + (kwh - 300) * 0.7\n    elif kwh <= 900:\n        return 300 * 0.4 + 200 * 0.7 + (kwh - 500) * 0.9\n    else:\n        return 300 * 0.4 + 200 * 0.7 + 300 * 0.9 + (kwh - 900) * 1.2\n\nprint(electricity_bill(150))\nprint(electricity_bill(250))\nprint(electricity_bill(500))\nprint(electricity_bill(1000))\nprint(electricity_bill(1500))\nprint(electricity_bill(2000))\nprint(electricity_bill(3000))\nprint(electricity_bill(4000))\nprint(electricity_bill(5000))\nprint(electricity_bill(6000))\nprint(electricity_bill(9000))\nprint(electricity_bill(10000))\nprint(electricity_bill(15000))\nprint(electricity_bill(18000))\nprint(electricity_bill(20000))\nprint(electricity_bill(30000))\nprint(electricity_bill(50000))",
    "def electricity_bill(consumption, rate):\n    return consumption * rate\n\n# print(electricity_bill(1000, 0.9))\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\n\ndef area_of_circle(radius):\n    return 3.14 * (radius ** 2)\n\n# print(area_of_circle(5))\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\n\ndef area_of_rectangle(length, width):\n    return length * width\n\n# print(area_of_rectangle(2, 3))\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\n\ndef area_of_triangle(base, height):\n    return (base * height) / 2\n\n# print(area_of_triangle(2, 3))\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\"\n\ndef volume_of_cylinder(radius, height):\n    return area_of_circle(radius) * height\n\n# print(volume_of_cylinder(3, 5))\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\n\ndef volume_of_sphere(radius):\n    return 4 * 3.14 * (radius ** 3) / 3\n\n# print(volume_of_sphere(4))\n\n\"\"\"\nWrite a function to calculate the distance between two points.\n\"\"\"\n\ndef distance_between_two_points(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n# print(distance_between_two_points(3, 4, 5, 6))\n\n\"\"\"\nWrite a function to calculate the average of two numbers.\n\"\"\"\n\ndef average(num1, num2):\n    return (num1 + num2) / 2\n\n# print(average(3, 4))\n\n\"\"\"\nWrite a function to calculate the average of three",
    "def electricity_bill(amount, days):\n    if amount <= 1000:\n        return amount * 0.1\n    elif amount > 1000 and amount <= 10000:\n        return amount * 0.2\n    elif amount > 10000:\n        return amount * 0.3\n\n\nprint(electricity_bill(1500, 2))\nprint(electricity_bill(2000, 3))\nprint(electricity_bill(3000, 4))",
    "def electricity_bill(quantity, rate):\n    if quantity <= 0:\n        return 0\n    return quantity * rate\n\n\ndef main():\n    quantity = float(input(\"Enter the quantity: \"))\n    rate = float(input(\"Enter the rate: \"))\n    print(f\"Bill amount: {electricity_bill(quantity, rate)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from unittest import TestCase\n\n\ndef calculate_electricity_bill(\n    total_kwh: float,\n    rate_per_kwh: float = 0.2,\n    peak_time_start: float = 6,\n    peak_time_end: float = 22,\n) -> float:\n    \"\"\"\n    Calculate electricity bill.\n\n    :param total_kwh: Total kilowatts used.\n    :param rate_per_kwh: Rate per kilowatt.\n    :param peak_time_start: Peak time start.\n    :param peak_time_end: Peak time end.\n    :return: Electricity bill.\n    \"\"\"\n    if total_kwh < 0:\n        raise ValueError(\"total_kwh should be greater than 0.\")\n\n    if rate_per_kwh < 0:\n        raise ValueError(\"rate_per_kwh should be greater than 0.\")\n\n    if peak_time_start < 0 or peak_time_start > 24:\n        raise ValueError(\"peak_time_start should be in [0, 24].\")\n\n    if peak_time_end < 0 or peak_time_end > 24:\n        raise ValueError(\"peak_time_end should be in [0, 24].\")\n\n    if peak_time_start >= peak_time_end:\n        raise ValueError(\"peak_time_start should be less than peak_time_end.\")\n\n    if peak_time_start == peak_time_end:\n        return total_kwh * rate_per_kwh\n\n    normal_rate = rate_per_kwh\n    peak_rate = rate_per_kwh + 0.1\n\n    peak_time_start_hour = int(peak_time_start)\n    peak_time_start_minute = peak_time_start - peak_time_start_hour\n    peak_time_end_hour = int(peak_time_end)\n    peak_time_end_minute = peak_time_end - peak_time_end_hour\n\n    normal_hours = peak_",
    "import unittest\n\n\ndef calculate_bill(kwh):\n    if kwh <= 0:\n        return 0\n    elif kwh <= 1000:\n        return kwh * 0.01\n    elif kwh <= 2000:\n        return 100 * 0.01 + (kwh - 1000) * 0.02\n    elif kwh <= 5000:\n        return 200 * 0.01 + (kwh - 2000) * 0.03\n    elif kwh > 5000:\n        return 500 * 0.01 + (kwh - 5000) * 0.04\n\n\nclass Test(unittest.TestCase):\n    def test_calculate_bill(self):\n        self.assertEqual(calculate_bill(500), 100)\n        self.assertEqual(calculate_bill(2500), 450)\n        self.assertEqual(calculate_bill(5000), 1000)\n        self.assertEqual(calculate_bill(10000), 2200)\n        self.assertEqual(calculate_bill(10001), 2201)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "from typing import Union\n\n\ndef electricity_bill(\n    unit_consumed: Union[int, float],\n    rate: Union[int, float],\n    peak_time_start: Union[int, float],\n    peak_time_stop: Union[int, float],\n) -> Union[int, float]:\n    \"\"\"\n    Calculate electricity bill based on consumption, rate, peak time start\n    and peak time stop.\n\n    :param unit_consumed: unit of electricity consumed.\n    :param rate: unit rate.\n    :param peak_time_start: peak time start.\n    :param peak_time_stop: peak time stop.\n    :return: electricity bill.\n    \"\"\"\n    peak_time_consumed = 0\n    non_peak_time_consumed = 0\n    if unit_consumed < peak_time_start:\n        non_peak_time_consumed = unit_consumed\n    elif unit_consumed <= peak_time_stop:\n        peak_time_consumed = peak_time_stop - peak_time_start\n        non_peak_time_consumed = unit_consumed - peak_time_stop\n    else:\n        peak_time_consumed = peak_time_stop - peak_time_start\n        non_peak_time_consumed = unit_consumed - peak_time_stop\n\n    peak_time_bill = peak_time_consumed * (rate + 0.05)\n    non_peak_time_bill = non_peak_time_consumed * (rate + 0.02)\n    bill = peak_time_bill + non_peak_time_bill\n    return bill\n\n\nif __name__ == \"__main__\":\n    assert electricity_bill(100, 10, 1, 10) == 150\n    assert electricity_bill(250, 10, 1, 10) == 300",
    "from unittest import TestCase\n\n\ndef electricity_bill(kwh):\n    return 0.17 * kwh\n\n\nclass TestElectricityBill(TestCase):\n\n    def test_small(self):\n        self.assertEqual(electricity_bill(5), 0.95)\n\n    def test_big(self):\n        self.assertEqual(electricity_bill(200), 3.8)\n\n    def test_zero(self):\n        self.assertEqual(electricity_bill(0), 0)\n\n    def test_negative(self):\n        self.assertEqual(electricity_bill(-10), 0)",
    "import math\n\n\ndef get_usage(days):\n    return days * 24 * 60\n\n\ndef get_charges(usage, tariff_id):\n    if tariff_id == 1:\n        return math.ceil(usage * 0.17)\n    elif tariff_id == 2:\n        return math.ceil(usage * 0.22)\n    elif tariff_id == 3:\n        return math.ceil(usage * 0.31)\n    else:\n        return math.ceil(usage * 0.44)\n\n\ndef calculate_bill(days, tariff_id):\n    usage = get_usage(days)\n    charges = get_charges(usage, tariff_id)\n    return charges\n\n\nif __name__ == '__main__':\n    print(calculate_bill(10, 1))\n    print(calculate_bill(10, 2))\n    print(calculate_bill(10, 3))\n    print(calculate_bill(10, 4))",
    "def electricity_bill(amount, unit):\n    \"\"\"\n    :param amount: int\n    :param unit: str\n    :return: int\n    \"\"\"\n    # Your code here\n\n    if unit == \"KWH\":\n        return int(amount) * 4\n\n    elif unit == \"UNIT\":\n        return int(amount) * 6\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(electricity_bill(20, \"KWH\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert electricity_bill(20, \"KWH\") == 80\n    assert electricity_bill(20, \"UNIT\") == 120\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "from math import ceil\n\ndef get_bill(kwh, rate):\n    kwh = ceil(kwh)\n    if kwh > 1000:\n        return 1000 * rate\n    return kwh * rate\n\nif __name__ == '__main__':\n    kwh = float(input('Enter kwh: '))\n    rate = float(input('Enter rate: '))\n    print('Bill:', get_bill(kwh, rate))",
    "def electricity_bill(kw, kwh):\n    if kw <= 100:\n        return kw * kwh * 0.45\n    return kw * kwh * 0.65\n\n\nif __name__ == '__main__':\n    kw = int(input())\n    kwh = int(input())\n    print(electricity_bill(kw, kwh))",
    "def electricity_bill(hour, unit_price):\n    \"\"\"\n    Calculate electricity bill.\n\n    :param hour: float\n    :param unit_price: float\n    :return: float\n    \"\"\"\n    return round(hour * unit_price, 2)\n\n\ndef test_function():\n    assert electricity_bill(2, 4) == 8, \"First\"\n    assert electricity_bill(5, 3) == 15, \"Second\"\n    assert electricity_bill(3, 2) == 6, \"Third\"\n    assert electricity_bill(10, 2.5) == 25, \"Fourth\"\n    assert electricity_bill(1, 2.5) == 2.5, \"Fifth\"\n    assert electricity_bill(3, 3.5) == 10.5, \"Sixth\"\n    assert electricity_bill(12, 5.6) == 68, \"Seventh\"\n    assert electricity_bill(9, 6) == 54, \"Eight\"\n    assert electricity_bill(12, 10) == 120, \"Ninth\"\n    print(\"Passed\")\n\n\ntest_function()",
    "def electricity_bill(usage: int) -> int:\n    \"\"\"\n    Calculate the electricity bill\n    :param usage: usage of electricity in kWh\n    :return: bill amount\n    \"\"\"\n    return 10 + usage * 100\n\n\nif __name__ == \"__main__\":\n    assert electricity_bill(5) == 550\n    assert electricity_bill(0) == 10\n    assert electricity_bill(10) == 1100",
    "def electricity_bill(kwh):\n    if kwh <= 0:\n        return 'Please enter a positive number'\n    elif kwh <= 1000:\n        return kwh * 0.5\n    elif kwh <= 3000:\n        return (1000 * 0.5) + (kwh - 1000) * 0.6\n    else:\n        return (1000 * 0.5) + (3000 * 0.6) + (kwh - 3000) * 0.7",
    "def electricity_bill(kwh):\n    if kwh <= 1000:\n        return kwh * 0.9\n    elif kwh <= 3000:\n        return kwh * 1.5\n    else:\n        return kwh * 2.2\n\n\nif __name__ == '__main__':\n    assert electricity_bill(1500) == 2250.0",
    "import time\n\n\ndef electricity_bill(kwh):\n    if kwh > 1000:\n        raise ValueError(\"Electricity usage cannot be more than 1000 KWH\")\n    return 5000 + (kwh * 10)\n\n\ndef electricity_bill_with_time_limit(kwh):\n    start_time = time.time()\n    bill = electricity_bill(kwh)\n    end_time = time.time()\n    print(end_time - start_time)\n    return bill\n\n\nif __name__ == \"__main__\":\n    print(electricity_bill(100))\n    print(electricity_bill_with_time_limit(100))",
    "def electricityBill(kwh):\n    if kwh <= 0:\n        return 0\n    elif kwh <= 1000:\n        return 0.4 * kwh\n    elif kwh > 1000 and kwh <= 3000:\n        return 0.4 * 1000 + 0.7 * (kwh - 1000)\n    elif kwh > 3000:\n        return 0.4 * 1000 + 0.7 * 1000 + 1.0 * (kwh - 2000)\n\nprint(electricityBill(0))\nprint(electricityBill(100))\nprint(electricityBill(1000))\nprint(electricityBill(2000))\nprint(electricityBill(4000))\nprint(electricityBill(10000))",
    "def electricity_bill(kwh):\n    return 0.45*kwh\n\n\ndef main():\n    kwh = float(input('Enter the number of kwh consumed: '))\n    print(f'The bill is: {electricity_bill(kwh)}')\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_bill(units_used: int) -> int:\n    \"\"\"\n    :param units_used: int - number of units used\n    :return: int - cost per unit\n\n    This function returns the cost per unit of electricity,\n    5 units for first 10 units and 8 units thereafter\n    \"\"\"\n    if units_used <= 10:\n        return units_used * 5\n    else:\n        return units_used * 8\n\n\ndef main():\n    \"\"\"\n    Main program\n    \"\"\"\n    units_used = int(input(\"Enter the number of units used: \"))\n    print(f'The bill for {units_used} units is ${get_bill(units_used):.2f}')\n\n\nif __name__ == '__main__':\n    main()",
    "def calculate_electricity_bill(usage):\n    if usage <= 50:\n        return usage * 0.2\n    else:\n        return usage * 0.3\n\n\nif __name__ == '__main__':\n    usage = int(input(\"Enter the usage: \"))\n    bill = calculate_electricity_bill(usage)\n    print(f\"Your bill is {bill}\")",
    "import sys\n\ndef electricity_bill(kwh):\n    if kwh <= 0:\n        return 'Please enter a valid value'\n\n    if kwh <= 1000:\n        return kwh * 0.9\n    elif kwh <= 2000:\n        return (1000 * 0.9) + (kwh - 1000) * 1.1\n    else:\n        return (1000 * 0.9) + (2000 - 1000) * 1.1 + (kwh - 2000) * 1.2\n\n\nif __name__ == '__main__':\n    try:\n        kwh = sys.argv[1]\n    except IndexError:\n        print('Please enter a kwh value')\n    else:\n        bill = electricity_bill(kwh)\n        print(bill)",
    "def electricity_bill(consumption, rate, peak_time):\n    return (consumption * rate * peak_time) + consumption * rate\n\nif __name__ == '__main__':\n    print(electricity_bill(200, 10, 0.9))",
    "from unittest import TestCase\n\n\ndef electricity_bill(kwh):\n    \"\"\"Calculate bill.\n\n    :param kwh: kilowatt hours\n    :type kwh: float\n    :return: bill\n    :rtype: float\n    \"\"\"\n    if kwh < 1000:\n        return kwh * 0.9\n    elif kwh < 2000:\n        return kwh * 1.15\n    else:\n        return kwh * 1.25\n\n\nclass TestElectricityBill(TestCase):\n\n    data = [\n        (1000, 900),\n        (1500, 1525),\n        (2000, 2250),\n        (2500, 2750),\n    ]\n\n    def test_electricity_bill(self):\n        for size, expected in self.data:\n            actual = electricity_bill(size)\n            assert expected == actual, 'Failed'",
    "def electricity_bill(fuel, amount):\n    if fuel == 'Natural Gas':\n        return round(amount * 0.0827, 2)\n    elif fuel == 'Propane':\n        return round(amount * 0.1025, 2)\n    elif fuel == 'Crude Oil':\n        return round(amount * 0.1376, 2)\n    elif fuel == 'Renewable Fuel':\n        return round(amount * 0.0625, 2)\n    elif fuel == 'Distillate Fuel Oil':\n        return round(amount * 0.1152, 2)\n    elif fuel == 'Hydroelectric Power':\n        return round(amount * 0.0273, 2)\n    elif fuel == 'Other Fuel':\n        return round(amount * 0.0273, 2)\n    elif fuel == 'Coal':\n        return round(amount * 0.0625, 2)\n    elif fuel == 'Petroleum Coke':\n        return round(amount * 0.0469, 2)\n    elif fuel == 'Liquid Petroleum Gas':\n        return round(amount * 0.0827, 2)\n    else:\n        return 'Invalid input'\n\nprint(electricity_bill('Renewable Fuel', 5))",
    "from decimal import Decimal\n\n\ndef electricity_bill(KWH):\n    KWH = Decimal(KWH)\n    if KWH <= 0:\n        return \"Negative energy is not allowed\"\n    elif KWH <= 100:\n        return KWH * Decimal(0.9)\n    elif KWH <= 200:\n        return KWH * Decimal(1.0)\n    elif KWH <= 500:\n        return KWH * Decimal(1.1)\n    else:\n        return KWH * Decimal(1.2)\n\n\nif __name__ == '__main__':\n    print(electricity_bill(10))\n    print(electricity_bill(250))\n    print(electricity_bill(550))\n    print(electricity_bill(1000))\n    print(electricity_bill(1001))\n    print(electricity_bill(-10))",
    "from math import ceil\n\n\ndef electricity_bill(kwh):\n    if kwh <= 1000:\n        return 6.00 + 0.09 * kwh\n    else:\n        return 6.00 + 0.09 * 1000 + 0.08 * (kwh - 1000)\n\n\n# TEST\nassert electricity_bill(100) == 6.9\nassert electricity_bill(1500) == 82.9\nassert electricity_bill(2500) == 127.7",
    "def electricity_bill(kwh):\n    if kwh <= 1000:\n        return kwh * 0.018\n    elif 1000 < kwh <= 3000:\n        return 1000 * 0.018 + (kwh - 1000) * 0.035\n    elif 3000 < kwh <= 5000:\n        return 1000 * 0.018 + 2000 * 0.035 + (kwh - 3000) * 0.50\n    else:\n        return 1000 * 0.018 + 2000 * 0.035 + 3000 * 0.50 + (kwh - 5000) * 0.02\n\n\nprint(electricity_bill(1000))\nprint(electricity_bill(3000))\nprint(electricity_bill(5000))\nprint(electricity_bill(5001))",
    "import unittest\n\n\ndef calculate_electricity_bill(\n    units_used,\n    unit_cost,\n    discount_threshold,\n    discount_rate,\n    extra_cost,\n    extra_units\n):\n    total_cost = 0\n    if units_used > extra_units:\n        total_cost = (units_used - extra_units) * unit_cost\n    else:\n        total_cost = units_used * unit_cost\n    if units_used > discount_threshold:\n        discount = (units_used - discount_threshold) * discount_rate\n    else:\n        discount = 0\n    total_cost = total_cost - discount\n    if total_cost < 0:\n        total_cost = 0\n    total_cost = total_cost + extra_cost\n    return total_cost\n\n\nclass TestCalcBill(unittest.TestCase):\n\n    def test_calc_bill(self):\n        self.assertEqual(\n            500,\n            calculate_electricity_bill(\n                500,\n                100,\n                300,\n                0.9,\n                200,\n                500\n            )\n        )\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "import math\n\ndef calculate_bill(kwh):\n    \"\"\"\n    Calculates electricity bill for a customer\n    \"\"\"\n    if kwh <= 0:\n        return \"Invalid input\"\n    elif kwh <= 500:\n        return kwh * 0.0065\n    elif kwh <= 1000:\n        return (500 * 0.0065) + (kwh - 500) * 0.006\n    elif kwh <= 2000:\n        return (500 * 0.0065) + (1000 * 0.006) + (kwh - 1000) * 0.005\n    elif kwh <= 5000:\n        return (500 * 0.0065) + (1000 * 0.006) + (2000 * 0.005) + (kwh - 2000) * 0.004\n    else:\n        return (500 * 0.0065) + (1000 * 0.006) + (2000 * 0.005) + (5000 * 0.004) + (kwh - 5000) * 0.0025\n\ndef main():\n    \"\"\"\n    Test calculate_bill\n    \"\"\"\n    assert calculate_bill(0) == \"Invalid input\"\n    assert calculate_bill(500) == 0.033\n    assert calculate_bill(501) == 0.0365\n    assert calculate_bill(1000) == 0.6\n    assert calculate_bill(1001) == 0.665\n    assert calculate_bill(2000) == 1.8\n    assert calculate_bill(2001) == 1.865\n    assert calculate_bill(5000) == 30.2\n    assert calculate_bill(5001) ==",
    "def electricity_bill(kwh):\n    if kwh <= 0:\n        return \"invalid input\"\n    elif kwh <= 1000:\n        return kwh * 0.9\n    else:\n        return kwh * 0.6\n\n\ndef main():\n    kwh = float(input(\"Enter the number of kwh: \"))\n    print(electricity_bill(kwh))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def calculate_electricity_bill(kwh):\n    \"\"\"\n    Calculate electricity bill.\n\n    Parameters\n    ----------\n    kwh : int\n        Kwh used in electricity.\n\n    Returns\n    -------\n    bill : int\n        Electricity bill.\n    \"\"\"\n    if kwh <= 500:\n        return kwh * 2.5\n    else:\n        return 500 * 2.5 + (kwh - 500) * 3.5",
    "from typing import Union\n\n\ndef electricity_bill(kwh: Union[int, float]) -> float:\n    \"\"\"Returns the electricity bill of the given kwh.\n\n    Parameters\n    ----------\n    kwh : Union[int, float]\n        kwh consumed.\n\n    Returns\n    -------\n    float\n        bill for the given kwh.\n    \"\"\"\n    if kwh > 1000:\n        return 1000 * 0.9 + (kwh - 1000) * 0.45\n    else:\n        return kwh * 0.45\n\n\nif __name__ == \"__main__\":\n    print(electricity_bill(500))\n    print(electricity_bill(2000))\n    print(electricity_bill(1500))",
    "def electricityBill(reading1, reading2, rate):\n    return (reading2 - reading1) * rate\n\n\n# print(electricityBill(100, 200, 4))\n\n\"\"\"\nWrite a function to calculate the total cost of a trip.\n\"\"\"\n\n\ndef calculateTripCost(miles, gallons, cost_per_gallon):\n    return miles * gallons * cost_per_gallon\n\n\n# print(calculateTripCost(10, 5, 2))\n\n\"\"\"\nWrite a function to calculate the total amount of money needed to pay a loan.\n\"\"\"\n\n\ndef calculateLoanAmount(principal, rate, time):\n    return principal * ((rate / 1200) * time)\n\n\n# print(calculateLoanAmount(100000, 8, 5))\n\n\"\"\"\nWrite a function to calculate the total amount of money needed to pay a loan.\n\"\"\"\n\n\ndef calculateMortgage(principal, rate, time):\n    return principal * ((rate / 1200) * time) / 12\n\n\n# print(calculateMortgage(100000, 8, 30))\n\n\"\"\"\nWrite a function to calculate the total amount of money needed to pay a loan.\n\"\"\"\n\n\ndef calculateFutureInvestmentValue(principal, rate, time):\n    return principal * ((1 + rate / 100) ** time)\n\n\n# print(calculateFutureInvestmentValue(1000, 8, 3))\n\n\"\"\"\nWrite a function to calculate the total amount of money needed to pay a loan.\n\"\"\"\n\n\ndef calculateSimpleInterest(principal, rate, time):\n    return principal * rate * time / 100\n\n\n# print(calculateSimpleInterest(1000, 8, 3))\n\n\"\"\"\nWrite a function to calculate the total amount of money needed to pay a loan.\n\"\"\"\n\n\ndef calculateCompoundInterest(principal, rate, time):\n    return principal * (1 +",
    "def electricity_bill(\n    unit_consumed: int,\n    rate_per_unit: float,\n    per_hour_charges: float = 0,\n    per_unit_charges: float = 0,\n) -> float:\n    \"\"\"Calculate electricity bill.\n\n    :param unit_consumed: Units consumed by customer.\n    :param rate_per_unit: Rate per unit consumed.\n    :param per_hour_charges: Charges per hour.\n    :param per_unit_charges: Charges per unit.\n    :return: Electricity bill.\n    \"\"\"\n    return (\n        (unit_consumed * rate_per_unit)\n        + (unit_consumed * per_unit_charges)\n        + (per_hour_charges * 1)\n    )\n\n\nif __name__ == \"__main__\":\n    print(electricity_bill(100, 20, 2, 3))",
    "def calculate_bill(usage, rate):\n    \"\"\"\n    Calculates the electricity bill based on usage and rate.\n\n    :param usage: usage in kWh\n    :param rate: rate per kWh\n    :return: bill\n    \"\"\"\n    return usage * rate\n\n\nif __name__ == '__main__':\n    print(calculate_bill(10, 10))",
    "from unittest import TestCase\n\n\ndef calculate_bill(kwh, peak_rate, shouldger=False, shouldchip=False):\n    if kwh > 1000:\n        raise ValueError(\"kwh is too high\")\n    if shouldger:\n        kwh *= 1.05\n    if shouldchip:\n        kwh *= 1.1\n    if kwh > 500:\n        return 10 + 0.2 * (kwh - 500)\n    return 10 + 0.1 * kwh\n\n\nclass TestCalculateBill(TestCase):\n\n    def test_calculate_bill(self):\n        assert calculate_bill(100, 0.1) == 1.0\n        assert calculate_bill(100, 0.1, True) == 1.1\n        assert calculate_bill(100, 0.1, False, True) == 1.21\n        assert calculate_bill(100, 0.1, True, True) == 1.31\n        assert calculate_bill(1000, 0.1) == 110\n        assert calculate_bill(1000, 0.1, True) == 115\n        assert calculate_bill(1000, 0.1, False, True) == 121\n        assert calculate_bill(1000, 0.1, True, True) == 131\n        assert calculate_bill(1500, 0.1) == 170\n        assert calculate_bill(1500, 0.1, True) == 185\n        assert calculate_bill(1500, 0.1, False, True) == 196\n        assert calculate_bill(1500, 0.1, True, True) == 206\n        assert calculate_bill(2000, 0.1) == 200\n        assert calculate_bill(2000, 0.1, True)",
    "def electricity_bill(hour):\n    return 100 if hour <= 100 else 150\n\n#test\nprint(electricity_bill(100))\nprint(electricity_bill(200))",
    "def get_bill(kwh):\n    if kwh > 1000:\n        return 1000 * 0.9 + (kwh - 1000) * 2.5\n    else:\n        return kwh * 0.9\n\n\ndef main():\n    print(get_bill(1500))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def electricity_bill(kwh):\n    if kwh < 1000:\n        return 3.45 * kwh\n    elif 1000 <= kwh < 3000:\n        return 3.45 * 1000 + (kwh - 1000) * 3.45 * 0.95\n    else:\n        return 3.45 * 1000 + (3000 - 1000) * 3.45 * 0.95 + (kwh - 3000) * 3.45 * 0.85\n\n\nprint(electricity_bill(100))\nprint(electricity_bill(2000))\nprint(electricity_bill(3500))",
    "def electricity_bill(units: int) -> float:\n    \"\"\"\n    Electricity bill calculator.\n\n    :param units: number of units of electricity consumed\n    :return: bill amount\n    \"\"\"\n    return 1000 if units <= 100 else 1000 + 400 * (units - 100)\n\n\nif __name__ == '__main__':\n    print(electricity_bill(100))\n    print(electricity_bill(150))\n    print(electricity_bill(200))",
    "def calculate_electricity_bill(kwh):\n    \"\"\"\n    Calculate electricity bill.\n\n    :param kwh: kwh used\n    :return: bill\n    \"\"\"\n    if kwh <= 1000:\n        return kwh * 0.03\n    elif 1000 < kwh <= 2000:\n        return (1000 * 0.03) + (kwh - 1000) * 0.05\n    else:\n        return (1000 * 0.03) + (2000 * 0.05) + (kwh - 2000) * 0.1\n\n\nif __name__ == '__main__':\n    assert calculate_electricity_bill(2000) == 630.0\n    assert calculate_electricity_bill(1000) == 300.0\n    assert calculate_electricity_bill(100) == 30.0",
    "def get_bill(amount):\n    return 0.9 * amount\n\n\ndef test_bill():\n    \"\"\"\n    >>> get_bill(100)\n    90.0\n    >>> get_bill(1000)\n    900.0\n    >>> get_bill(10000)\n    9000.0\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "def calculate_bill(hour, minute, power):\n    power_hour = power * hour\n    power_minute = power * minute / 60\n    total_power = power_hour + power_minute\n    if total_power < 100:\n        return total_power * 0.4\n    elif total_power < 300:\n        return (total_power * 0.4) + 6.5\n    else:\n        return (total_power * 0.4) + 13\n\n\nprint(calculate_bill(2, 30, 25))",
    "def electricity_bill(consumption, rate, min_consumption):\n    return min(consumption * rate, (consumption - min_consumption) * rate + min_consumption * 0.05)\n\n\nif __name__ == '__main__':\n    print(electricity_bill(25, 10, 50))\n    print(electricity_bill(100, 10, 50))\n    print(electricity_bill(150, 10, 50))",
    "def calculate_electricity_bill(units_used):\n    if units_used > 1000:\n        return units_used * 0.05 + 10\n    elif units_used > 500:\n        return units_used * 0.06\n    else:\n        return units_used * 0.07\n\n\ndef main():\n    print(calculate_electricity_bill(100))\n    print(calculate_electricity_bill(500))\n    print(calculate_electricity_bill(1000))\n    print(calculate_electricity_bill(1500))\n    print(calculate_electricity_bill(2000))\n\n\nif __name__ == '__main__':\n    main()",
    "def electricity_bill(meter_readings: list, kwh_price: float):\n    \"\"\"\n    Calculate bill based on meter readings and price per kWh.\n    :param meter_readings: list of meter readings\n    :param kwh_price: price per kWh\n    :return: bill\n    \"\"\"\n    if len(meter_readings) < 2:\n        raise ValueError(\"Meter readings should be at least two.\")\n\n    meter_readings = sorted(meter_readings)\n    bills = []\n\n    for i in range(1, len(meter_readings)):\n        bills.append(kwh_price * (meter_readings[i] - meter_readings[i - 1]))\n\n    return sum(bills)\n\n\nif __name__ == '__main__':\n    print(electricity_bill([100, 250, 300], 1.2))",
    "from collections import namedtuple\n\nBill = namedtuple(\"Bill\", [\"unit\", \"power\", \"charge\"])\n\n\ndef calculate_bill(bill: Bill, power: int) -> int:\n    \"\"\"\n    Calculate the electricity bill.\n\n    :param bill: Bill\n    :param power: Power\n    :return: Electricity bill.\n    \"\"\"\n    return power * bill.charge if power <= bill.power else bill.unit + (power - bill.power) * bill.charge",
    "def calculate_electricity_bill(kwh):\n    if kwh <= 1000:\n        return 1000 * 0.65\n    elif kwh <= 2000:\n        return 1000 * 0.65 + (kwh - 1000) * 0.55\n    elif kwh <= 5000:\n        return 1000 * 0.65 + (2000 - 1000) * 0.55 + (kwh - 2000) * 0.45\n    elif kwh <= 10000:\n        return 1000 * 0.65 + (2000 - 1000) * 0.55 + (5000 - 2000) * 0.45 + (kwh - 5000) * 0.35\n    else:\n        return 1000 * 0.65 + (2000 - 1000) * 0.55 + (5000 - 2000) * 0.45 + (10000 - 5000) * 0.35 + (kwh - 10000) * 0.25\n\n\nif __name__ == '__main__':\n    kwh = int(input(\"Enter the number of kWh used: \"))\n    bill = calculate_electricity_bill(kwh)\n    print(\"Your electricity bill is ${0:.2f}\".format(bill))",
    "def calculate_bill(kwh_used):\n    if kwh_used > 0 and kwh_used <= 1000:\n        return 3.00\n    elif kwh_used > 1000 and kwh_used <= 2000:\n        return 5.50\n    elif kwh_used > 2000 and kwh_used <= 5000:\n        return 8.00\n    elif kwh_used > 5000:\n        return 10.00\n\n\n# Tests\ndef test(kwh_used, expected_bill):\n    bill = calculate_bill(kwh_used)\n    if bill == expected_bill:\n        print(\"Congratulations. It is correct.\")\n    else:\n        print(\"Your answer is wrong.\")\n\n\ntest(0, 0)\ntest(100, 3.00)\ntest(200, 5.50)\ntest(500, 8.00)\ntest(1000, 10.00)\ntest(1500, 10.00)\ntest(2000, 10.00)\ntest(5000, 10.00)\ntest(6000, 10.00)\ntest(10000, 10.00)",
    "# time complexity: O(n)\n# space complexity: O(1)\n\n\ndef electricity_bill(kwh):\n    if kwh <= 0:\n        return 0\n    elif kwh <= 1000:\n        return kwh * 0.5\n    elif kwh <= 3000:\n        return 1000 * 0.5 + (kwh - 1000) * 0.8\n    else:\n        return 1000 * 0.5 + 2000 * 0.8 + (kwh - 3000) * 1.5",
    "# USER INPUTS\npower_consumption = float(input(\"Power consumption in KW/hr: \"))\nrate = float(input(\"Rate per KWH: \"))\n\n# CALCULATION AND OUTPUT\nbill = power_consumption * rate\nprint(\"Your bill is $\", bill, \"USD.\")",
    "from unittest import TestCase\n\n\ndef calculate_electricity_bill(consumption):\n    if consumption <= 250:\n        return consumption * 4.5\n    return 250 * 4.5 + (consumption - 250) * 6.8\n\n\nclass TestBillCalculator(TestCase):\n\n    data = [\n        (100, 4.5),\n        (200, 9),\n        (250, 4.5),\n        (251, 9.3),\n        (300, 12.5),\n    ]\n\n    def test_bill_calculator(self):\n        for consumption, expected in self.data:\n            assert calculate_electricity_bill(consumption) == expected",
    "import math\n\ndef main():\n    \"\"\"\n    Electricity Bill = (rated voltage) * (rated current) * (usage time) * (cost per kwh)\n    \"\"\"\n\n    voltage = float(input(\"Enter rated voltage (Volts): \"))\n    rated_current = float(input(\"Enter rated current (Amps): \"))\n    usage_time = float(input(\"Enter usage time (Hours): \"))\n    cost_per_kwh = float(input(\"Enter cost per kwh: \"))\n\n    bill = voltage * rated_current * usage_time * cost_per_kwh\n\n    print(f\"Electricity bill: {bill}\")\n\n\nif __name__ == '__main__':\n    main()\n\n# 5\n# 3\n# 3\n# 0.23\n# Electricity bill: 14.06",
    "def electricity_bill(kwh):\n    if kwh < 0:\n        return \"Error\"\n    if kwh < 100:\n        return 6.00\n    elif 100 <= kwh < 300:\n        return 8.00\n    elif 300 <= kwh < 500:\n        return 10.00\n    else:\n        return 12.00\n\n\nkwh = int(input(\"Enter the number of kwh: \"))\nprint(electricity_bill(kwh))",
    "import math\n\n\ndef electricity_bill(kwh):\n    return 0.4 * kwh + 10\n\n\nif __name__ == '__main__':\n    kwh = float(input(\"Enter kwh: \"))\n    print(electricity_bill(kwh))",
    "from unittest import TestCase\n\n\ndef calculate_electricity_bill(consumption, price):\n    return consumption * price\n\n\nclass TestCalculateElectricityBill(TestCase):\n    def test_calculate_electricity_bill(self):\n        self.assertEqual(calculate_electricity_bill(1000, 1), 1000)\n        self.assertEqual(calculate_electricity_bill(2000, 2), 4000)",
    "import math\n\ndef calculate_bill(kwh, rate):\n    \"\"\"\n    Calculate electricity bill based on KWH and rate.\n\n    :param kwh: kwh used\n    :param rate: rate per kwh\n    :return: bill\n    \"\"\"\n    return kwh * rate\n\n\nif __name__ == '__main__':\n    kwh = float(input(\"Enter kwh used: \"))\n    rate = float(input(\"Enter rate per kwh: \"))\n    bill = calculate_bill(kwh, rate)\n    print(f\"Electricity bill is {bill}\")",
    "def electricity_bill(usage_in_kilowatt_hour, normal_charge, discounted_charge,\n                     usage):\n    \"\"\"\n\n    :param usage_in_kilowatt_hour:\n    :param normal_charge:\n    :param discounted_charge:\n    :param usage:\n    :return:\n    \"\"\"\n    if usage <= usage_in_kilowatt_hour:\n        return normal_charge * usage\n    elif usage > usage_in_kilowatt_hour:\n        return normal_charge * usage_in_kilowatt_hour + discounted_charge * (usage - usage_in_kilowatt_hour)\n\n\nif __name__ == '__main__':\n    print(electricity_bill(500, 10, 5, 600))",
    "def electricity_bill(kwh):\n    if kwh <= 0:\n        return 0\n    if kwh <= 1000:\n        return kwh * 0.9\n    elif kwh <= 2000:\n        return (kwh * 0.9) + 100\n    else:\n        return (kwh * 0.9) + 200\n\nif __name__ == '__main__':\n    assert electricity_bill(0) == 0\n    assert electricity_bill(200) == 300\n    assert electricity_bill(1000) == 900\n    assert electricity_bill(1500) == 2400\n    assert electricity_bill(2000) == 2800\n    assert electricity_bill(2500) == 3300\n    assert electricity_bill(5000) == 8500\n    print('All test cases passed.')",
    "def electricityBill(quantity):\n    if quantity > 100:\n        return quantity * 4\n    else:\n        return quantity * 3\n\n# test case\nprint(electricityBill(200))",
    "def electricity_bill(kwh):\n    return 0.45 * kwh\n\n\nif __name__ == '__main__':\n    print(electricity_bill(5))",
    "def electricity_bill(meter_read, kwh_read, rate):\n    \"\"\"\n\n    :param meter_read: int\n    :param kwh_read: int\n    :param rate: int\n    :return: float\n    \"\"\"\n    # TODO: Write your code here\n    return (meter_read - kwh_read) * rate\n\n\ndef test_function(test_case):\n    meter_read = test_case[0]\n    kwh_read = test_case[1]\n    rate = test_case[2]\n    solution = test_case[3]\n    output = electricity_bill(meter_read, kwh_read, rate)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([100, 50, 10, 500])\ntest_function([10, 100, 1000, 1100])\ntest_function([1000, 1000, 1000, 11000])",
    "def calculate_electricity_bill(kwh: int) -> int:\n    return kwh * 0.45\n\n\nif __name__ == \"__main__\":\n    assert calculate_electricity_bill(2500) == 1200",
    "import sys\n\n\ndef electricity_bill(kwh):\n    if kwh <= 0:\n        return -1\n    if kwh > 1000:\n        kwh = kwh - 1000\n    return 100 + 50 * kwh\n\n\ndef main():\n    sys.stdin = open('ElectricityBill_input.txt')\n    kwh = int(input().strip())\n\n    print(electricity_bill(kwh))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_bill(hour_used):\n    if hour_used > 1000:\n        return -1\n\n    if hour_used > 700:\n        return 65 + 1.7 * (hour_used - 700)\n\n    return 65 + 1.7 * (hour_used - 500)\n\n\n# Pybites solution\n\n\ndef get_bill1(hour_used):\n    return 65 + (hour_used - 500) * 1.7 if hour_used <= 1000 else -1",
    "import sys\n\n\ndef calculate_bill(kwh, rate):\n    return kwh * rate\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"Usage: python3 electricity.py [kwh] [rate]\")\n        exit(1)\n\n    kwh = float(sys.argv[1])\n    rate = float(sys.argv[2])\n\n    print(calculate_bill(kwh, rate))",
    "from math import ceil\n\n\ndef calculate_bill(kwh):\n    if kwh < 1000:\n        return 0\n\n    if kwh > 10000:\n        kwh = 10000\n\n    return ceil(kwh / 1000) * 10\n\n\nif __name__ == '__main__':\n    assert calculate_bill(100) == 0\n    assert calculate_bill(2000) == 10\n    assert calculate_bill(12000) == 12\n    assert calculate_bill(100000) == 100\n    assert calculate_bill(200000) == 200",
    "def calculate_electricity_bill(units: int, rate: float) -> float:\n    \"\"\"\n    :param units: int, number of units consumed\n    :param rate: float, rate per unit\n    :return: float, total amount\n    \"\"\"\n    return units * rate\n\n\nif __name__ == \"__main__\":\n    units = int(input(\"Enter units consumed: \"))\n    rate = float(input(\"Enter rate per unit: \"))\n    print(f\"Total amount: {calculate_electricity_bill(units, rate):.2f}\")",
    "def calculate_electricity_bill(kwh):\n    if kwh <= 0:\n        return 0\n    elif kwh <= 1000:\n        return kwh * 0.9\n    else:\n        return 900 + (kwh - 1000) * 0.2\n\nprint(calculate_electricity_bill(1000))\nprint(calculate_electricity_bill(1001))\nprint(calculate_electricity_bill(1500))\nprint(calculate_electricity_bill(10000))\nprint(calculate_electricity_bill(10001))\nprint(calculate_electricity_bill(15000))",
    "def electricity_bill(meter_reading_begin, meter_reading_end,\n                     KWH_reading_begin, KWH_reading_end):\n    \"\"\"\n    :param meter_reading_begin: int - meter reading at the beginning of the period\n    :param meter_reading_end: int - meter reading at the end of the period\n    :param KWH_reading_begin: float - cost of KWH for the beginning of the period\n    :param KWH_reading_end: float - cost of KWH for the end of the period\n    :return: float - cost for the period\n    \"\"\"\n    return (meter_reading_end - meter_reading_begin) * (KWH_reading_begin + KWH_reading_end) / 2\n\n\nif __name__ == '__main__':\n    print(electricity_bill(1000, 1100, 2.3, 5.7))",
    "# The number of units consumed in a month\nunits_consumed = int(input())\n\n# The number of units consumed per kwh\nunits_consumed_per_kwh = float(input())\n\n# The cost of 1 kwh\ncost_per_kwh = float(input())\n\n# The tax percentage\ntax_percentage = float(input())\n\n# The total cost of electricity\ntotal_cost = units_consumed * units_consumed_per_kwh * cost_per_kwh\n\n# The total tax\ntotal_tax = total_cost * tax_percentage / 100\n\n# The total bill\ntotal_bill = total_cost + total_tax\n\n# Print the result\nprint(f\"ELECTRICITY BILL : Rs. {total_bill:.2f}\")",
    "def get_bill(power, seconds, rate):\n    return power * (seconds / rate)\n\nprint(get_bill(2, 1000, 1000))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}