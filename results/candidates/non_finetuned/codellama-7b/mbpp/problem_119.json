{
  "problem": {
    "task_id": "MBPP/130",
    "prompt": "Write a function to find the item with maximum frequency in a given list.",
    "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
    "test_list": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ],
    "challenge_test_list": [],
    "problem_id": 119
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from collections import Counter\n\n\ndef max_freq(arr):\n    counter = Counter(arr)\n    return counter.most_common(1)[0][0]\n\n\ndef main():\n    print(max_freq([1, 2, 3, 3, 4, 5, 6, 6, 6, 6, 6, 6, 7, 7, 8]))\n    print(max_freq([1, 2, 3, 4, 5, 6, 7, 8]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef max_frequency(items):\n    counts = Counter(items)\n    return counts.most_common(1)[0]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 1, 1, 2, 2, 3, 3, 3]))",
    "from collections import Counter\n\n\ndef max_freq(l):\n    \"\"\"\n    :param l: list of integers\n    :return: integer\n    \"\"\"\n    return Counter(l).most_common(1)[0][0]\n\n\nprint(max_freq([1, 2, 2, 3, 3, 3, 3, 4]))",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_frequency(arr):\n    max_freq = 0\n    max_freq_item = None\n\n    for item in arr:\n        if item not in Counter(arr):\n            continue\n\n        if Counter(arr)[item] > max_freq:\n            max_freq = Counter(arr)[item]\n            max_freq_item = item\n\n    return max_freq_item\n\n\nassert max_frequency([1, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 1\nassert max_frequency([5, 5, 5, 5, 5, 5, 5]) == 5\nassert max_frequency([1, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == 6",
    "def max_freq(items):\n    counts = {}\n\n    for item in items:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    return max(counts.items(), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 3, 1, 3, 2, 1, 3, 4]))",
    "def max_freq(lst):\n    if lst == []:\n        return None\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = max(freq.values())\n    return [k for k, v in freq.items() if v == max_freq]\n\n\nprint(max_freq([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    if not lst:\n        return None\n\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 2, 3, 1, 4, 5, 6, 7, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 2, 2, 1]))",
    "def get_frequent_item(data):\n    if not data:\n        return None\n\n    max_freq = 0\n    frequent_item = None\n    freq_dict = {}\n\n    for item in data:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            frequent_item = item\n\n    return frequent_item\n\n\nif __name__ == \"__main__\":\n    test_data = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    print get_frequent_item(test_data)",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef get_max_freq(lst):\n    if len(lst) == 0:\n        return None\n\n    freq = Counter(lst)\n    max_freq = freq[lst[0]]\n    max_freq_item = lst[0]\n\n    for item in lst[1:]:\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_freq_item = item\n\n    return max_freq_item\n\n\n# Tests\nassert get_max_freq([3, 3, 1, 1, 2, 2, 2, 2, 2]) == 2\nassert get_max_freq([5, 2, 3, 2, 4, 5, 6, 4, 4]) == 4\nassert get_max_freq([1, 1, 1, 2, 2, 2, 3, 3, 3]) == 3\nassert get_max_freq([3, 1, 1, 2, 2, 2, 3, 3, 3]) == 3\nassert get_max_freq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == None",
    "from collections import defaultdict\n\n\ndef max_freq(arr):\n    \"\"\"\n    :param: arr - input list of integers\n    return: integer representing maximum frequency in the list\n    \"\"\"\n    if not arr:\n        return None\n\n    freq_map = defaultdict(int)\n    for item in arr:\n        freq_map[item] += 1\n\n    max_freq = max(freq_map.values())\n\n    return max_freq\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_freq(arr)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 4, 5, 3, 1, 2, 3, 4, 5, 6, 3, 2, 1, 4, 5, 6]\nsolution = 4\ntest_case = [arr, solution]\ntest_function(test_case)",
    "from collections import Counter\n\n\ndef find_max_frequency(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return None\n\n    max_freq = 0\n    max_item = None\n    counter = Counter(arr)\n\n    for item, freq in counter.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item\n\n\nif __name__ == \"__main__\":\n    print(find_max_frequency([1, 1, 2, 3, 4, 5, 6, 1, 1]))",
    "from collections import Counter\n\n\ndef get_max_frequency(items):\n    \"\"\"\n    >>> get_max_frequency([1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4])\n    2\n    \"\"\"\n    return Counter(items).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\n# Time complexity: O(n)\ndef max_freq(arr):\n    max_freq = 0\n    max_value = None\n\n    c = Counter(arr)\n    for key, value in c.items():\n        if value > max_freq:\n            max_freq = value\n            max_value = key\n\n    return max_value\n\n\n# Time complexity: O(n log n)\ndef max_freq_2(arr):\n    c = Counter(arr)\n    return c.most_common(1)[0][0]",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    c = Counter(arr)\n    return c.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 2, 5, 2, 6, 2, 5, 1]))",
    "from collections import Counter\n\n\ndef maximum_frequency(arr):\n    counter = Counter(arr)\n    max_count = max(counter.values())\n    for k, v in counter.items():\n        if v == max_count:\n            return k\n\n\nif __name__ == \"__main__\":\n    print(maximum_frequency([1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "from collections import Counter\n\n\ndef max_frequency(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: item with max frequency\n    \"\"\"\n    freq = Counter(arr)\n    return max(freq.keys(), key=lambda x: freq[x])\n\n\ndef test_max_frequency():\n    assert max_frequency([1, 2, 3, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 3\n\n\nif __name__ == \"__main__\":\n    test_max_frequency()",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 6, 6, 6, 7, 8, 8, 9]))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    \"\"\"Returns the item with maximum frequency in a given list.\n\n    >>> max_freq([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    4\n    \"\"\"\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    freq_map = Counter(lst)\n    max_freq = max(freq_map.values())\n    return [\n        item for item, freq in freq_map.items() if freq == max_freq\n    ][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 2, 1, 4, 5, 4]))\n    print(max_freq([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"]))",
    "from collections import Counter\n\n\ndef find_max_freq(input_list):\n    \"\"\"\n    Find the item with maximum frequency in a given list\n    :param input_list: list\n    :return: item with maximum frequency\n    \"\"\"\n    max_count = 0\n    max_freq_item = None\n    for item in input_list:\n        count = input_list.count(item)\n        if count > max_count:\n            max_count = count\n            max_freq_item = item\n    return max_freq_item\n\n\ndef find_max_freq_counter(input_list):\n    \"\"\"\n    Find the item with maximum frequency in a given list\n    :param input_list: list\n    :return: item with maximum frequency\n    \"\"\"\n    counter = Counter(input_list)\n    max_freq_item = None\n    for item, count in counter.items():\n        if count > counter.most_common(1)[0][1]:\n            max_freq_item = item\n    return max_freq_item\n\n\ndef main():\n    print(find_max_freq([1, 2, 3, 4, 2, 1, 3, 1, 4]))\n    print(find_max_freq_counter([1, 2, 3, 4, 2, 1, 3, 1, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef max_freq(items):\n    c = Counter(items)\n    max_freq = 0\n    item = None\n    for item, freq in c.items():\n        if freq > max_freq:\n            max_freq = freq\n\n    return item\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 6]))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    if len(lst) == 0:\n        return None\n\n    c = Counter(lst)\n    m = max(c.values())\n    return [k for k, v in c.items() if v == m]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 2, 1, 4, 5, 4, 6, 7, 6, 5, 5, 6, 6]))\n    print(max_freq([1, 2, 3, 4, 5, 6, 7]))\n    print(max_freq([1]))\n    print(max_freq([]))",
    "from collections import Counter\n\n\ndef find_max_frequency(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: number with maximum frequency in arr\n    \"\"\"\n    count = Counter(arr)\n    return count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 3, 2, 1, 4, 5, 4, 6, 4, 6, 4]\n    print(find_max_frequency(arr))",
    "def max_frequency(a):\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq, key=freq.get)\n\na = [1, 2, 3, 4, 1, 2, 3, 4]\nprint(max_frequency(a))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    counter = Counter(lst)\n    max_freq = 0\n    max_freq_item = None\n    for item in counter:\n        freq = counter[item]\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = item\n    return max_freq_item\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]))",
    "from collections import Counter\n\n\ndef max_freq(ls):\n    c = Counter(ls)\n    return c.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "def max_freq(lst):\n    d = {}\n    max_freq = 0\n    item = None\n    for i in lst:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n        if d[i] > max_freq:\n            max_freq = d[i]\n            item = i\n    return item\n\nprint(max_freq([2, 3, 5, 7, 2, 3, 5, 7, 2, 3, 5, 7, 2, 3, 5, 7, 2, 3, 5, 7]))",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    if not arr:\n        return None\n    return Counter(arr).most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 2, 3, 3, 4, 5]))",
    "from collections import Counter\n\n\n# Time complexity O(n)\ndef max_frequency(l):\n    # Counter returns a dictionary with keys as elements of l and values as number of occurences of that element\n    c = Counter(l)\n    # Sorting the dictionary by value in descending order\n    c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    # Returning the first element which is the item with maximum frequency\n    return c[0]\n\n\nprint(max_frequency([1, 2, 3, 3, 2, 4, 5, 1]))",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef max_freq(lst: List[int]) -> int:\n    \"\"\"Find item with maximum frequency in a given list.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    freq = defaultdict(int)\n\n    for elem in lst:\n        freq[elem] += 1\n\n    return max(freq, key=lambda k: freq[k])\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 4, 4, 4, 4, 4, 5, 6]))",
    "from collections import Counter\n\n\ndef max_frequency(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return None\n\n    freq = Counter(arr)\n    return freq.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 3, 1, 2, 3, 1, 2, 3]))",
    "from collections import Counter\n\n\ndef most_frequent(arr):\n    counter = Counter(arr)\n    max_freq = max(counter.values())\n    res = []\n\n    for k, v in counter.items():\n        if v == max_freq:\n            res.append(k)\n\n    return res\n\n\ndef test_most_frequent():\n    assert most_frequent([1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == [5, 6]\n    assert most_frequent([1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7]) == [5, 6]\n\n\nif __name__ == \"__main__\":\n    test_most_frequent()",
    "from collections import defaultdict\n\ndef max_freq(lst):\n    \"\"\"Return the item with maximum frequency in a given list.\"\"\"\n    if not lst:\n        return None\n    freq_dict = defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return max(freq_dict, key=lambda k: freq_dict[k])",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    \"\"\"Returns the element with the max frequency in a list.\n\n    Args:\n        arr: list of elements.\n    \"\"\"\n    if not arr:\n        return None\n\n    freq = Counter(arr)\n    return freq.most_common(1)[0][0]\n\n\ndef main():\n    print(max_freq([1, 3, 1, 3, 2, 1, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef max_frequency(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return None\n\n    freqs = Counter(arr)\n\n    max_freq = max(freqs.values())\n\n    for key, val in freqs.items():\n        if val == max_freq:\n            return key\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 1, 1, 3, 2, 2, 2, 2, 4, 5]))\n    print(max_frequency([5, 4, 3, 2, 2, 2, 2, 1, 1, 1]))",
    "from collections import Counter\n\n\ndef max_freq(items):\n    freq = Counter(items)\n    return freq.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert max_freq([1, 2, 4, 5, 7, 9, 9, 9, 9, 9, 9]) == 9",
    "def get_max_frequency(data):\n    \"\"\"\n    >>> get_max_frequency([1, 2, 3, 4, 5, 6, 5, 5, 6, 6, 6])\n    6\n\n    >>> get_max_frequency([1, 1, 1, 1, 2, 2, 2, 2, 2])\n    1\n    \"\"\"\n    max_frequency = 0\n    frequency = {}\n\n    for item in data:\n        frequency[item] = frequency.get(item, 0) + 1\n\n        if frequency[item] > max_frequency:\n            max_frequency = frequency[item]\n\n    return max_frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef get_max_frequency(arr):\n    \"\"\"Returns item with maximum frequency in a given list.\n\n    >>> get_max_frequency([1, 2, 3, 3, 2, 4, 5, 4])\n    3\n    >>> get_max_frequency([1, 2, 3, 4, 5])\n    1\n    \"\"\"\n    return Counter(arr).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_freq(input_list):\n    \"\"\"\n    Return the item with maximum frequency in a given list.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(input_list) == 0:\n        return None\n\n    counter = Counter(input_list)\n\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([3, 3, 3, 3, 4, 5, 6, 1, 2, 3, 3, 3, 3, 3]))",
    "def max_frequency(arr):\n    freq = 0\n    max_freq = 0\n    max_freq_item = None\n\n    for item in arr:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_freq_item = item\n\n    return max_freq_item\n\n\nprint(max_frequency([1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2]))",
    "from collections import Counter\n\n\ndef find_max_frequency_item(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(find_max_frequency_item([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "def find_max_frequency(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # make a dict to count the frequency of each item\n    num_freq = {}\n    for num in nums:\n        if num in num_freq:\n            num_freq[num] += 1\n        else:\n            num_freq[num] = 1\n\n    # find the item with maximum frequency\n    max_freq = max(num_freq.values())\n    for num in num_freq:\n        if num_freq[num] == max_freq:\n            return num\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 5, 5, 4, 3, 2, 1]\n    print(find_max_frequency(nums))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq(l):\n    max_freq = 0\n    max_freq_item = None\n\n    counter = Counter(l)\n    for item, freq in counter.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = item\n\n    return max_freq_item\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq_2(l):\n    max_freq = 0\n    max_freq_item = None\n\n    for item in l:\n        if l.count(item) > max_freq:\n            max_freq = l.count(item)\n            max_freq_item = item\n\n    return max_freq_item\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq_3(l):\n    max_freq = 0\n    max_freq_item = None\n\n    for item in l:\n        freq = l.count(item)\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = item\n\n    return max_freq_item\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq_4(l):\n    max_freq = 0\n    max_freq_item = None\n\n    for item in l:\n        if l.count(item) > max_freq:\n            max_freq = l.count(item)\n            max_freq_item = item\n\n    return max_freq_item",
    "def find_max_frequency(lst):\n    return max(\n        [lst.count(num) for num in set(lst)],\n        key=lambda x: lst.count(x)\n    )",
    "from collections import Counter\n\n\ndef max_frequency(lst):\n    \"\"\"Returns the item with maximum frequency in a given list.\n\n    >>> max_frequency([1, 1, 2, 2, 3])\n    1\n\n    >>> max_frequency([1, 1, 2, 2, 2, 3])\n    2\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3])\n    3\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3, 4])\n    3\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3, 4, 4])\n    4\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    4\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n    4\n\n    >>> max_frequency([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])\n    4\n    \"\"\"\n    counter = Counter(lst)\n    max_key = max(counter, key=counter.get)\n    return max_key\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_freq(l):\n    \"\"\"\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5, 4, 3, 5, 6, 4, 5, 5, 6, 4, 5, 6, 7, 6])\n    (5, 4)\n    >>> max_freq([1, 2, 3, 2, 3, 4, 3, 5,",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef find_max_freq(nums):\n    c = Counter(nums)\n    return c.most_common(1)[0][0]\n\n\n# Time complexity: O(n log n)\n# Space complexity: O(1)\ndef find_max_freq(nums):\n    nums.sort()\n    max_freq = 0\n    pre_num = None\n    cur_freq = 0\n    for num in nums:\n        if num != pre_num:\n            if cur_freq > max_freq:\n                max_freq = cur_freq\n                max_num = pre_num\n            cur_freq = 0\n        cur_freq += 1\n        pre_num = num\n    if cur_freq > max_freq:\n        max_freq = cur_freq\n        max_num = pre_num\n    return max_num\n\n\nprint(find_max_freq([1, 1, 2, 2, 3, 3, 3]))",
    "from collections import defaultdict\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq(nums: List[int]) -> int:\n    \"\"\"\n    >>> max_freq([1, 2, 3, 1, 3, 1])\n    1\n    >>> max_freq([1, 2, 3, 4, 5, 6])\n    -1\n    \"\"\"\n    if not nums:\n        return -1\n\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = -1\n    max_freq = -1\n\n    for key, value in count.items():\n        if value > max_count:\n            max_count = value\n            max_freq = key\n        elif value == max_count:\n            max_freq = min(max_freq, key)\n\n    return max_freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    if not arr:\n        return None\n    return Counter(arr).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 2, 3, 4, 2]))",
    "def max_freq(arr):\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    max_freq = 0\n    max_freq_item = None\n    freq_dict = {}\n    for item in arr:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_freq_item = item\n    return max_freq_item\n\nif __name__ == \"__main__\":\n    print(max_freq([1,1,2,3,4,5,6,1,1,1,2,3,4,5,6,1,1,1,2,3,4,5,6]))",
    "def max_frequency(lst):\n    counter = 0\n    result = None\n\n    for item in lst:\n        curr_freq = lst.count(item)\n        if curr_freq > counter:\n            counter = curr_freq\n            result = item\n\n    return result\n\n\nprint(max_frequency([1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))",
    "from collections import Counter\n\n\n# O(n)\ndef find_max_freq(items):\n    counts = Counter(items)\n    return max(counts, key=counts.get)\n\n\n# O(nlogn)\ndef find_max_freq(items):\n    counts = Counter(items)\n    return max(counts, key=lambda x: counts[x])\n\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 3, 1, 3, 2, 1, 3, 4]))",
    "from collections import Counter\n\n\ndef max_frequency(items):\n    \"\"\"Returns the item with maximum frequency in a list.\n\n    Args:\n        items: list, items to be checked\n\n    Returns:\n        object, item with maximum frequency\n    \"\"\"\n    counter = Counter(items)\n    return counter.most_common(1)[0][0]",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    freq = Counter(arr)\n    return freq.most_common(1)[0][0]\n\n\ndef test_max_freq():\n    assert max_freq([1, 2, 3, 4, 2, 1, 3]) == 3\n    assert max_freq([2, 2, 2, 3, 3, 4, 4, 4]) == 4",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    freq_map = Counter(lst)\n    return freq_map.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 3, 4, 5]))",
    "from collections import Counter\n\n\n# O(n)\ndef find_max_freq(arr):\n    counter = Counter(arr)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 2, 1, 3, 4, 5, 6, 1]))",
    "def max_frequency(lst):\n    d = {}\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    max_freq = 0\n    max_item = None\n    for k, v in d.items():\n        if v > max_freq:\n            max_freq = v\n            max_item = k\n    return max_item\n\nprint(max_frequency([1, 3, 1, 3, 2, 1, 3, 4]))\nprint(max_frequency([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]))\nprint(max_frequency([\"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))",
    "from collections import Counter\n\n\ndef max_frequency(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\ndef test_max_frequency():\n    assert max_frequency([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5\n\n\nif __name__ == \"__main__\":\n    test_max_frequency()",
    "def max_freq(arr):\n    \"\"\"\n    Return the item with maximum frequency in a given list.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # set to store unique elements\n    s = set()\n\n    # dict to store frequency of each element\n    d = {}\n\n    # traverse the given list\n    for i in arr:\n        if i in s:\n            d[i] += 1\n        else:\n            d[i] = 1\n            s.add(i)\n\n    # return the item with maximum frequency\n    return max(d, key=d.get)\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5]))",
    "from collections import Counter\n\n\ndef max_freq(items):\n    if len(items) == 0:\n        return None\n    if len(items) == 1:\n        return items[0]\n\n    counts = Counter(items)\n    return max(counts, key=counts.get)\n\n\nif __name__ == \"__main__\":\n    print(max_freq([]))\n    print(max_freq([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]))\n    print(max_freq([1, 1, 2, 2, 3, 3, 4, 4, 4, 4]))",
    "def max_freq(list):\n    freq_dict = {}\n    for item in list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    max_freq = 0\n    max_freq_item = None\n    for item in freq_dict:\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_freq_item = item\n    return max_freq_item\n\nprint(max_freq([1, 2, 3, 2, 4, 5, 1, 1, 1, 1, 1, 1]))",
    "def max_frequency(a_list):\n    if len(a_list) == 0:\n        return None\n    max_freq = 0\n    max_item = None\n    freq = {}\n    for item in a_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n    return max_item\n\nprint(max_frequency([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))",
    "def max_freq(lst):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_freq = 0\n    max_freq_item = None\n\n    freq_dict = {}\n\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_freq_item = item\n\n    return max_freq_item\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 4, 2, 1, 2, 1, 1, 2, 3, 4, 2, 1, 2]))",
    "from collections import Counter\n\n\ndef find_max_freq_item(nums):\n    if not nums:\n        return None\n    freqs = Counter(nums)\n    max_freq = max(freqs.values())\n    items = []\n    for num, freq in freqs.items():\n        if freq == max_freq:\n            items.append(num)\n    return items[0]\n\n\n# test\nnums = [3, 3, 1, 2, 2, 2, 1]\nprint(find_max_freq_item(nums))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    freq = Counter(lst)\n    return freq.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 1, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "from collections import Counter\n\n\n# Time Complexity O(n)\ndef find_max_freq(arr):\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    count = Counter(arr)\n    max_freq = max(count.values())\n    return [key for key, value in count.items() if value == max_freq]\n\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 1, 2, 1, 2, 3, 2, 3, 3, 3]))",
    "from collections import Counter\n\n\ndef max_frequency(input_list):\n    \"\"\"\n    Return the item with the maximum frequency in a list.\n    \"\"\"\n    counter = Counter(input_list)\n    max_freq = max(counter.values())\n    return counter.keys()[list(counter.values()).index(max_freq)]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "from collections import Counter\n\n\ndef max_freq(items):\n    counter = Counter(items)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 2, 1, 4, 3, 3, 2]))",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    count = Counter(arr)\n    return count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 3, 2, 1]))\n    print(max_freq([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7, 8]))",
    "from collections import Counter\n\n\ndef max_frequency(arr):\n    counter = Counter(arr)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 1, 2, 2, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3]))",
    "from collections import Counter\n\n\ndef find_max_freq(items):\n    return Counter(items).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 2, 2, 3, 4, 2, 3]))",
    "from collections import Counter\n\n\ndef max_frequency(arr):\n    freq = Counter(arr)\n    return max(freq.values())\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 3, 2, 3, 3, 3]))\n    print(max_frequency([1, 2, 3, 4, 5, 6, 6]))",
    "def max_freq(lst):\n    if len(lst) == 0:\n        return None\n    max_freq = 0\n    result = None\n    freq_map = {}\n    for item in lst:\n        freq_map[item] = freq_map.get(item, 0) + 1\n        if freq_map[item] > max_freq:\n            max_freq = freq_map[item]\n            result = item\n    return result\n\n\nif __name__ == \"__main__\":\n    lst = [1, 3, 1, 5, 4, 5, 6, 1, 5, 1]\n    print(max_freq(lst))",
    "def max_freq(arr):\n\tif len(arr) == 0:\n\t\treturn None\n\tmax_freq = 0\n\tmax_freq_item = arr[0]\n\tfreq = {}\n\tfor i in arr:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\t\tif freq[i] > max_freq:\n\t\t\t\tmax_freq = freq[i]\n\t\t\t\tmax_freq_item = i\n\t\telse:\n\t\t\tfreq[i] = 1\n\treturn max_freq_item\n\nprint(max_freq([1, 2, 1, 2, 3, 2, 1]))\nprint(max_freq([1, 2, 3, 4, 5, 6, 7]))",
    "from collections import Counter\n\ndef max_freq(l):\n    \"\"\"Return the item with maximum frequency in a given list.\n\n    >>> max_freq([1, 2, 3, 4, 2, 1, 2, 3, 4, 2, 1, 2, 3, 4, 2, 1, 2, 3, 4])\n    2\n    \"\"\"\n    return Counter(l).most_common(1)[0][0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef find_max_freq(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return None\n\n    counter = Counter(arr)\n    max_freq = max(counter.values())\n    return [k for k, v in counter.items() if v == max_freq][0]\n\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 2, 1, 3, 4, 5, 4, 3, 2, 1]))\n    print(find_max_freq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_max_freq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(find_max_freq([]))",
    "def max_freq(lst):\n    \"\"\"\n    O(n) solution\n    \"\"\"\n    freq = 0\n    result = None\n\n    for i in range(len(lst)):\n        curr_freq = lst.count(lst[i])\n\n        if curr_freq > freq:\n            freq = curr_freq\n            result = lst[i]\n\n    return result\n\ndef max_freq_with_dict(lst):\n    \"\"\"\n    O(n) solution\n    \"\"\"\n    count = {}\n\n    for i in range(len(lst)):\n        if lst[i] not in count:\n            count[lst[i]] = 0\n        count[lst[i]] += 1\n\n    max_freq = 0\n    result = None\n\n    for key, value in count.items():\n        if value > max_freq:\n            max_freq = value\n            result = key\n\n    return result\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 2, 3, 4, 5, 4, 3, 6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11]\n    print(max_freq(lst))\n    print(max_freq_with_dict(lst))",
    "def max_frequency(arr):\n    \"\"\"Returns item with maximum frequency in a given list.\n\n    >>> max_frequency([2, 3, 5, 7, 2, 3, 5, 8, 2])\n    2\n    >>> max_frequency([1, 1, 3, 3, 5, 5, 4, 4, 5])\n    5\n    >>> max_frequency([1, 2, 3, 4, 5])\n    1\n    >>> max_frequency([5, 4, 3, 2, 1])\n    5\n    \"\"\"\n    max_freq = 0\n    max_freq_item = None\n    freq_dict = {}\n\n    for item in arr:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_freq_item = item\n\n    return max_freq_item\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_frequency(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_freq = 0\n    max_item = None\n    freq = {}\n\n    for item in arr:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n\n    return max_item\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6]))",
    "from collections import Counter\n\n\ndef max_freq(nums):\n    c = Counter(nums)\n    max_count = max(c.values())\n    return [i for i in c if c[i] == max_count][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 1, 3, 4, 2, 1, 5, 4, 2, 3]))",
    "def max_freq(arr):\n    freq = {}\n    max_freq = 0\n    max_freq_item = None\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_freq_item = i\n    return max_freq_item\n\nprint(max_freq([1,2,2,3,3,3,4,5]))",
    "def max_freq(arr):\n    d = {}\n\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    max_freq = 0\n    max_freq_item = None\n\n    for i in d:\n        if d[i] > max_freq:\n            max_freq = d[i]\n            max_freq_item = i\n\n    return max_freq_item\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 2, 3, 4, 4, 4, 4, 5]))\n    print(max_freq([1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5]))\n    print(max_freq([1, 2, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6]))",
    "from collections import Counter\n\n\n# Time complexity O(n)\ndef get_max_frequency(arr):\n    freq = Counter(arr)\n    return freq.most_common(1)[0][0]\n\n\n# Time complexity O(nlogn)\ndef get_max_frequency_2(arr):\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    max_count = max(count.values())\n    for key, value in count.items():\n        if value == max_count:\n            return key\n\n\nprint(get_max_frequency([1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4",
    "from collections import Counter\n\n\ndef max_freq(my_list):\n    c = Counter(my_list)\n    return c.most_common(1)[0][0]\n\n\nprint(max_freq([1, 2, 3, 4, 5, 3, 2, 1, 6, 7, 8, 1]))",
    "from collections import Counter\n\n\ndef max_freq(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef main():\n    print(\"Max frequency element: \" + str(max_freq([1, 2, 3, 3, 3, 4, 5, 6, 6, 6])))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_max_frequency(lst):\n    if len(lst) == 0:\n        return None\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    # If two items have the same frequency, the first one is returned.\n    return counter.most_common(1)[0][0]\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_max_frequency_2(lst):\n    if len(lst) == 0:\n        return None\n    max_count = 0\n    max_item = None\n    for item in lst:\n        count = lst.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item",
    "def find_max_freq(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    max_freq = 1\n    max_freq_elem = arr[0]\n    freq = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            freq += 1\n        else:\n            freq = 1\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_elem = arr[i]\n\n    return max_freq_elem\n\nif __name__ == \"__main__\":\n    print(find_max_freq([1, 2, 1, 2, 3, 4, 5, 6, 4, 5, 6, 5, 6, 6]))",
    "from collections import Counter\n\n\ndef max_freq(l):\n    if not l:\n        return None\n    c = Counter(l)\n    return max(c.items(), key=lambda x: x[1])[0]\n\n\ndef test_max_freq():\n    assert max_freq([1, 2, 3, 1, 2, 1]) == 1\n    assert max_freq(['a', 'b', 'c', 'a', 'b']) == 'a'\n    assert max_freq([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]) == 8\n\n\nif __name__ == '__main__':\n    test_max_freq()",
    "def max_frequency(lst):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_freq = 0\n    curr_freq = 0\n    curr_item = None\n\n    for i in range(len(lst)):\n        curr_item = lst[i]\n        curr_freq = 0\n        for j in range(len(lst)):\n            if lst[j] == curr_item:\n                curr_freq += 1\n        if curr_freq > max_freq:\n            max_freq = curr_freq\n            result = curr_item\n    return result\n\n\ndef test_max_frequency():\n    \"\"\"Test for max_frequency function.\"\"\"\n    assert max_frequency([1, 3, 4, 5, 7, 7, 8, 2, 3, 1]) == 3\n    assert max_frequency([1, 1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7]) == 6\n\n\nif __name__ == \"__main__\":\n    test_max_frequency()",
    "from collections import Counter\n\n\ndef max_frequency(items):\n    counter = Counter(items)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6]))",
    "from collections import defaultdict\n\ndef get_max_freq(arr):\n    freq_dict = defaultdict(int)\n    for i in arr:\n        freq_dict[i] += 1\n    max_freq = 0\n    max_freq_item = None\n    for k, v in freq_dict.items():\n        if v > max_freq:\n            max_freq = v\n            max_freq_item = k\n    return max_freq_item\n\narr = [1, 2, 2, 3, 4, 5, 5, 5]\nprint(get_max_freq(arr))",
    "from collections import Counter\n\n\ndef maximum_frequency_item(arr):\n    \"\"\"\n    Using Counter()\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef maximum_frequency_item_sort(arr):\n    \"\"\"\n    Using sort\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    max_item = arr[0]\n    max_count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            max_count += 1\n        else:\n            max_count = 1\n\n        if max_count > max_count:\n            max_item = arr[i]\n            max_count = 1\n    return max_item\n\n\nif __name__ == \"__main__\":\n    print(maximum_frequency_item([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8]))\n    print(maximum_frequency_item_sort([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8]))",
    "def max_freq(nums):\n    count_dict = {}\n    max_count = 0\n    max_freq = 0\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_freq = num\n    return max_freq\n\nprint(max_freq([1, 3, 1, 3, 2, 1, 3, 4]))\nprint(max_freq([2, 2, 2, 2, 2]))",
    "def max_frequency(l: list):\n    count = 0\n    max_count = 0\n    for i in range(len(l)):\n        if l.count(l[i]) > max_count:\n            max_count = l.count(l[i])\n            count = i\n    return l[count], max_count\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4]))",
    "from collections import Counter\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_freq(nums):\n    max_freq = 0\n    max_num = 0\n    for num in nums:\n        if num not in nums:\n            continue\n\n        curr_freq = 0\n        while num in nums:\n            nums.remove(num)\n            curr_freq += 1\n        if curr_freq > max_freq:\n            max_freq = curr_freq\n            max_num = num\n\n    return max_num\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_freq_counter(nums):\n    counter = Counter(nums)\n    return counter.most_common(1)[0][0]\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_freq_dict(nums):\n    freq = {}\n    max_freq = 0\n    max_num = 0\n    for num in nums:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    return max_num\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_freq_dict_2(nums):\n    freq = {}\n    for num in nums:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    return max(freq, key=freq.get)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_freq_dict_3(nums):\n    freq = {}\n    for num in nums:\n        freq[num] = freq.get(num, 0) + 1\n    return max(freq, key=freq.get)",
    "def max_freq(a):\n    \"\"\"\n    :param a: list of integers\n    :return: int -- item with maximum frequency\n    \"\"\"\n    if len(a) == 0:\n        return None\n\n    max_freq = 0\n    max_freq_item = a[0]\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_freq_item = i\n    return max_freq_item\n\n\ndef test_max_freq():\n    assert max_freq([]) is None\n    assert max_freq([1]) == 1\n    assert max_freq([1, 2, 2, 3, 4, 4, 4]) == 4\n    assert max_freq([1, 2, 3, 4, 5]) == 1\n    assert max_freq([1, 1, 1, 2, 2, 3, 4, 5]) == 1\n    assert max_freq([1, 2, 3, 4, 5, 5]) == 5\n\nif __name__ == '__main__':\n    test_max_freq()",
    "from collections import Counter\n\n\ndef find_max_frequency(items):\n    \"\"\"Find the item with maximum frequency in a given list.\"\"\"\n    if not items:\n        return None\n    counter = Counter(items)\n    return counter.most_common(1)[0][0]",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    freq_count = Counter(lst)\n    return max(freq_count, key=freq_count.get)\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 4, 5, 6, 8, 8, 8, 8, 9, 10, 12]))",
    "from collections import Counter\n\n\ndef max_freq(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_freq([1, 2, 3, 3, 3, 4, 5, 6, 6, 6, 7, 7, 9]))",
    "from collections import Counter\n\n\ndef max_frequency(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_frequency([1, 2, 3, 1, 4, 5, 6, 1, 2, 3, 2, 3, 1]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}