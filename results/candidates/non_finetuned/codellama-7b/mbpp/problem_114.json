{
  "problem": {
    "task_id": "MBPP/125",
    "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
    "test_list": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ],
    "challenge_test_list": [],
    "problem_id": 114
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_diff(s: str) -> int:\n    n = len(s)\n    max_difference = 0\n    current_difference = 0\n    max_zero = 0\n    max_one = 0\n\n    for i in range(n):\n        if s[i] == '0':\n            max_zero = max(max_zero, current_difference + 1)\n            current_difference = 0\n        else:\n            max_one = max(max_one, current_difference + 1)\n            current_difference = 0\n\n        current_difference += 1\n\n    max_difference = max(max_zero, max_one, current_difference)\n\n    return max_difference\n\n\nif __name__ == '__main__':\n    print(max_diff('11000'))",
    "def maxDiff(s):\n    diff = 0\n    curr = 0\n    prev = 0\n    for i in s:\n        if i == '0':\n            curr += 1\n        else:\n            prev += 1\n        diff = max(curr-prev, diff)\n    return diff\n\n\nprint(maxDiff(\"110001010100001011110111001000001101101001001010100011111101101110100101111010001100101001011110101110111110000010011101011111011111111011101110000101111111000101000110010001000000010001010001000000100000001001010000010000010110010010000100011100011011111111110110001000111001111010111000001100101010101101110000001101100001000101100001001000111001001101100110001010101011010000100000010110000001000001110011000100010110010010001100",
    "from collections import defaultdict\n\n\ndef max_diff(binary_string):\n    if not binary_string:\n        return 0\n\n    count_0 = count_1 = max_diff = 0\n    count_dict = defaultdict(int)\n\n    for i in binary_string:\n        count_dict[i] += 1\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if max_diff < count_0 - count_1:\n            max_diff = count_0 - count_1\n        count_0 = count_1 = 0\n\n    return max_diff\n\n\ndef max_diff_2(binary_string):\n    if not binary_string:\n        return 0\n\n    count_0 = count_1 = max_diff = 0\n    count_dict = defaultdict(int)\n\n    for i in binary_string:\n        count_dict[i] += 1\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 > 0 and count_1 > 0:\n            if max_diff < count_0 - count_1:\n                max_diff = count_0 - count_1\n\n        elif count_0 == 0 and count_1 > 0:\n            count_0 = count_1\n\n        elif count_0 > 0 and count_1 == 0:\n            count_1 = count_0\n\n    return max_diff\n\n\nprint(max_diff_2(\"1001\"))",
    "def max_diff(string):\n    if not string:\n        return 0\n\n    length = len(string)\n    if length == 1:\n        return 0\n\n    ones = 0\n    zeros = 0\n    max_diff = 0\n\n    for i in range(length):\n        if string[i] == '1':\n            ones += 1\n            zeros = 0\n        else:\n            zeros += 1\n\n        if zeros > ones:\n            max_diff = max(max_diff, zeros - ones)\n\n    return max_diff\n\nprint(max_diff(\"1100000\"))\nprint(max_diff(\"0010000\"))\nprint(max_diff(\"0000000\"))",
    "from collections import defaultdict\n\n\ndef max_diff(s):\n    count = defaultdict(int)\n    for i in s:\n        count[i] += 1\n    return max(count['1'] - count['0'], count['0'] - count['1'])\n\n\ndef test_max_diff():\n    assert max_diff('11000001') == 2\n    assert max_diff('00110001') == 2\n    assert max_diff('10000001') == 1\n    assert max_diff('1000001') == 1\n    assert max_diff('100001') == 1\n\n\nif __name__ == '__main__':\n    test_max_diff()",
    "def max_diff(str1):\n    max = 0\n    count = 0\n    for i in str1:\n        if i == '0':\n            count += 1\n        else:\n            max = max if count > max else count\n            count = 0\n\n    return max if max > count else count\n\n\nprint(max_diff(\"000001000000\"))",
    "def max_diff(s):\n    \"\"\"\n    O(n)\n    \"\"\"\n    if len(s) == 1:\n        return 0\n\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in s:\n        if char == \"0\":\n            zero_count += 1\n        else:\n            one_count += 1\n\n        max_diff = max(max_diff, abs(zero_count - one_count))\n\n    return max_diff\n\n\nassert max_diff(\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_diff_zero_one(str_input):\n    # TODO: Write your solution here\n    pass\n\nif __name__ == \"__main__\":\n    # Test Cases\n    # Enter your code here\n    # Test Case 1\n    print(\"Test Case 1 is {0}\".format(max_diff_zero_one(\"010\")))\n    # Test Case 2\n    print(\"Test Case 2 is {0}\".format(max_diff_zero_one(\"1010\")))\n    # Test Case 3\n    print(\"Test Case 3 is {0}\".format(max_diff_zero_one(\"1110101\")))\n    # Test Case 4\n    print(\"Test Case 4 is {0}\".format(max_diff_zero_one(\"11101010111\")))",
    "def max_diff_between_zero_and_one(binary_string):\n    # Convert to string\n    binary_string = str(binary_string)\n    # Initialization\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    # Iterate over string\n    for i in range(len(binary_string)):\n        if binary_string[i] == \"0\":\n            zero_count += 1\n            if zero_count > one_count:\n                max_diff = zero_count - one_count\n        elif binary_string[i] == \"1\":\n            one_count += 1\n            if one_count > zero_count:\n                max_diff = one_count - zero_count\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_between_zero_and_one(101010110101))",
    "def max_diff(b_str: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    num_ones = 0\n    num_zeros = 0\n    max_diff = 0\n\n    for i in range(len(b_str)):\n        if b_str[i] == \"1\":\n            num_ones += 1\n        else:\n            num_zeros += 1\n\n        max_diff = max(max_diff, num_ones - num_zeros)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"00000000000\") == 0\n    assert max_diff(\"10101010101\") == 2\n    assert max_diff(\"11000000011\") == 2\n    assert max_diff(\"000000000000\") == 0\n    assert max_diff(\"0000000000000000000000000000000000000000000000000000000000000000\") == 0",
    "def max_diff(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    max_diff = -1\n    max_0 = 0\n    max_1 = 0\n    cur_0 = 0\n    cur_1 = 0\n    for i in range(n):\n        if s[i] == '0':\n            cur_0 += 1\n            cur_1 = 0\n        else:\n            cur_1 += 1\n            cur_0 = 0\n        max_0 = max(max_0, cur_0)\n        max_1 = max(max_1, cur_1)\n        max_diff = max(max_diff, max_0 - max_1)\n    return max_diff\n\n\ndef test_max_diff():\n    assert max_diff('') == 0\n    assert max_diff('101010001010111') == 4\n    assert max_diff('000000000000000') == 0\n    assert max_diff('1010100010101111') == 4\n    assert max_diff('000000000000001') == 1\n    assert max_diff('1010100010101110') == 4\n\n\nif __name__ == '__main__':\n    test_max_diff()",
    "from collections import defaultdict\n\n\ndef find_max_diff(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    zero_index = -1\n    one_index = -1\n\n    for i, char in enumerate(string):\n        if char == \"0\":\n            zero_count += 1\n            zero_index = i\n        else:\n            one_count += 1\n            one_index = i\n\n        max_diff = max(max_diff, zero_count - one_count)\n\n    if one_count > zero_count:\n        max_diff = max(max_diff, one_count - (zero_index + 1))\n    else:\n        max_diff = max(max_diff, zero_count - (one_index + 1))\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert find_max_diff(\"01010101\") == 2\n    assert find_max_diff(\"010101010\") == 2\n    assert find_max_diff(\"0001100101\") == 2\n    assert find_max_diff(\"010101011001\") == 2",
    "def max_diff(input_string):\n    \"\"\"\n    :param input_string: str\n    :return: int\n    \"\"\"\n    total_zero = 0\n    total_one = 0\n    max_diff = 0\n    for char in input_string:\n        if char == '1':\n            total_one += 1\n            total_zero = 0\n        else:\n            total_zero += 1\n        max_diff = max(max_diff, total_one - total_zero)\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_diff('10101'))\n    print(max_diff('10100'))\n    print(max_diff('000'))",
    "def max_diff(string):\n    # Write your code here.\n    max_diff = 0\n    curr_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            zero_count += 1\n            one_count = 0\n        else:\n            one_count += 1\n            zero_count = 0\n\n        curr_diff = max(zero_count, one_count)\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n\n\n# test case\nprint(max_diff(\"10010000110111100010101101011100011001101000011011101011011110100111\"))",
    "def max_diff_sub_string(binary_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    max_diff_start = 0\n    max_diff_end = 0\n    diff = 0\n    diff_start = 0\n    diff_end = 0\n\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            diff += 1\n        else:\n            diff -= 1\n\n        if diff == 0:\n            diff_start = i\n\n        if diff < 0:\n            diff = 0\n            diff_start = i\n\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_start = diff_start\n            max_diff_end = i\n\n    return max_diff, binary_string[max_diff_start: max_diff_end + 1]\n\n\nif __name__ == \"__main__\":\n    assert max_diff_sub_string(\"11000011\") == (2, \"110000\")",
    "def max_diff_binary_string(binary_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev_0 = 0\n    prev_1 = 0\n    max_diff = 0\n\n    for i, bit in enumerate(binary_string):\n        if bit == \"1\":\n            prev_1 += 1\n            prev_0 = 0\n        else:\n            prev_0 += 1\n            prev_1 = 0\n\n        max_diff = max(max_diff, prev_0 - prev_1)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff_binary_string(\"00000\") == 0\n    assert max_diff_binary_string(\"00100\") == 1\n    assert max_diff_binary_string(\"00011\") == 1\n    assert max_diff_binary_string(\"11111\") == 0\n    assert max_diff_binary_string(\"00110\") == 1\n    assert max_diff_binary_string(\"01111\") == 2\n    assert max_diff_binary_string(\"10110\") == 2\n    assert max_diff_binary_string(\"10101\") == 2\n    assert max_diff_binary_string(\"10010\") == 2\n    assert max_diff_binary_string(\"10101\") == 2\n    assert max_diff_binary_string(\"00000000011111111111111000000000\") == 2",
    "def find_max(arr: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr)\n\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    for i in range(n):\n        if arr[i] == \"1\":\n            ones += 1\n        else:\n            zeros += 1\n\n        max_diff = max(max_diff, abs(ones - zeros))\n\n        if arr[i] == \"0\":\n            zeros -= 1\n        else:\n            ones -= 1\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert find_max(\"01101\") == 2",
    "def max_diff(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            max_diff = max(max_diff, count)\n            count = 0\n\n    return max(max_diff, count)\n\n\nprint(max_diff('01001000'))\nprint(max_diff('11001000'))",
    "def max_diff(s):\n    res, z, o = 0, 0, 0\n    for i in s:\n        if i == \"0\":\n            z += 1\n        else:\n            o += 1\n        res = max(res, abs(z-o))\n    return res\n\n\ndef main():\n    print(max_diff(\"11001000\"))\n    print(max_diff(\"100\"))\n    print(max_diff(\"0101\"))\n    print(max_diff(\"01001010101111000000101010101010101011110010010100010001\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_diff(s: str) -> int:\n    diff = 0\n    curr = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            curr += 1\n        else:\n            diff = max(diff, curr)\n            curr = 0\n    return max(diff, curr)\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"110100100\") == 2",
    "\"\"\"Question:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nExample 1:\nInput: \"00110011\"\nOutput: 2\nExplanation: Considering the substring \"0011\", there are maximum number of 0s and 1s in this substring.\nExample 2:\nInput: \"10101\"\nOutput: 3\nExplanation: Considering the sub-string \"101\", there are maximum number of 1s in the substring.\nYour solution will run in linear time and constant space.\n\"\"\"\n\nclass Solution(object):\n    def diff(self,a,b):\n        return abs(a-b)\n    def maxDiff(self, A):\n        \"\"\"\n        :type A: str\n        :rtype: int\n        \"\"\"\n        #My code starts here\n        res=0\n        max0=0\n        max1=0\n        for i in range(len(A)):\n            if A[i]=='0':\n                max0+=1\n            else:\n                max1+=1\n            res=max(res,self.diff(max0,max1))\n        return res\n\"\"\"\nMy thinking: Use two variables to keep track of the number of 0s and 1s in the string. \nFor each character in the string, if it is a 0, add 1 to the count of 0s. If it is a 1, add 1 to the count of 1s.\nThen update the res variable to the maximum of res and the difference between the number of 0s and 1s.\n\"\"\"",
    "class MaxZeroOneDifference:\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: str\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_diff = 0\n        max_zero = 0\n        max_one = 0\n        zero = 0\n        one = 0\n        for num in nums:\n            if num == \"0\":\n                zero += 1\n                max_zero = max(max_zero, zero)\n            else:\n                one += 1\n                max_one = max(max_one, one)\n        max_diff = max(max_one, max_zero)\n        return max_diff\n\n\n# test\nmax_diff = MaxZeroOneDifference()\nnums = \"010\"\nprint(max_diff.maxDiff(nums))",
    "def max_diff(bstring):\n    n = len(bstring)\n    if n <= 1:\n        return 0\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if bstring[i] == \"1\":\n            count_1 += 1\n        else:\n            count_0 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"00000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_difference(b):\n    count_1 = 0\n    count_0 = 0\n    max_diff = 0\n    for i in b:\n        if i == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        max_diff = max(max_diff, count_1 - count_0)\n    return max_diff\n\n\ndef max_difference2(b):\n    count_1 = 0\n    count_0 = 0\n    max_diff = 0\n    for i in b:\n        if i == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        max_diff = max(max_diff, count_1 - count_0)\n    return max_diff\n\n\ndef main():\n    b = input()\n    print(max_difference(b))\n    print(max_difference2(b))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_diff(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    curr_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == \"0\":\n            zero_count += 1\n        else:\n            one_count += 1\n        curr_diff = one_count - zero_count\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    string = \"0001000100010010\"\n    print(max_diff(string))",
    "def max_diff(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n\n    prev_zero_count = 0\n    prev_one_count = 0\n\n    for c in string:\n        if c == \"0\":\n            prev_zero_count += 1\n        else:\n            prev_one_count += 1\n\n        max_diff = max(max_diff, prev_zero_count - prev_one_count)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"0100101100010\") == 2",
    "def max_diff(string):\n    # check for the edge case\n    if len(string) == 0:\n        return 0\n    # store the length of the string\n    length = len(string)\n    # initialize the maximum difference\n    max_diff = 0\n    # initialize the count of zeros\n    zeros = 0\n    # initialize the count of ones\n    ones = 0\n    # iterate over the string\n    for index in range(length):\n        if string[index] == \"0\":\n            zeros += 1\n        else:\n            ones += 1\n        # check for the maximum difference\n        if ones == zeros:\n            max_diff = 0\n        else:\n            max_diff = max(max_diff, ones - zeros)\n    return max_diff\n\n\ndef main():\n    string = input()\n    print(max_diff(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_diff(binary_string):\n    \"\"\"\n    :param binary_string: binary string\n    :return: max difference between 0s and 1s in any substring of the given binary string\n    >>> max_diff(\"0100101\")\n    4\n    >>> max_diff(\"0000\")\n    0\n    >>> max_diff(\"00000000\")\n    0\n    >>> max_diff(\"11111111\")\n    0\n    \"\"\"\n    if not binary_string:\n        return 0\n\n    # count 0s and 1s in the binary string\n    count_0 = count_1 = 0\n    for digit in binary_string:\n        if digit == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n\n    max_diff = abs(count_0 - count_1)\n\n    # check for all substrings\n    for i in range(1, len(binary_string)):\n        count_0 = count_1 = 0\n\n        for j in range(i, len(binary_string)):\n            if binary_string[j] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n\n        max_diff = max(abs(count_0 - count_1), max_diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_diff(b_str):\n    count = Counter(b_str)\n    max_diff = count[1] - count[0]\n\n    for i in range(len(b_str)):\n        for j in range(i + 1, len(b_str) + 1):\n            diff = count[1] - count[0]\n            if diff < max_diff:\n                max_diff = diff\n            count[b_str[i]] -= 1\n            count[b_str[j - 1]] += 1\n\n    return max_diff\n\n\ndef main():\n    b_str = input(\"Enter binary string: \")\n    print(max_diff(b_str))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_diff_sub_str(str):\n    if str is None or len(str) == 0:\n        return 0\n    num_zero = 0\n    num_one = 0\n    max_diff = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            num_zero += 1\n        else:\n            num_one += 1\n        max_diff = max(max_diff, num_zero - num_one)\n    return max_diff\n\nstr = '010010110100'\nprint(max_diff_sub_str(str))",
    "def maxDiff(str):\n    count = [0] * 2\n    max_diff = 0\n\n    for i in str:\n        if i == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n\n        max_diff = max(max_diff, abs(count[0] - count[1]))\n\n    return max_diff\n\n\ndef main():\n    str = \"01011011010111011011100111101010111010000100110111010111011100100011101110101100111011010110101110100111010110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110001011100010101010101101110",
    "def max_diff(input_string):\n    max_diff = 0\n    curr_diff = 0\n\n    for i in range(len(input_string)):\n        curr_diff += 1 if input_string[i] == '0' else -1\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_diff(b_str):\n    count = 0\n    max_count = 0\n    for i in b_str:\n        if i == \"1\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n\n\ndef main():\n    b_str = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "from collections import Counter\n\n\nclass Solution:\n    def max_diff(self, s: str) -> int:\n        counter = Counter(s)\n        return max(counter['0'] - counter['1'], counter['1'] - counter['0'])\n\n\nif __name__ == \"__main__\":\n    s = \"010\"\n    out = 2\n    res = Solution().max_diff(s)\n    assert res == out, (res, out)\n\n    s = \"1010\"\n    out = 3\n    res = Solution().max_diff(s)\n    assert res == out, (res, out)\n\n    s = \"00010101\"\n    out = 4\n    res = Solution().max_diff(s)\n    assert res == out, (res, out)",
    "def max_diff(s):\n    n = len(s)\n    ones = 0\n    zeros = 0\n    max_diff = 0\n    for i in range(n):\n        if s[i] == \"1\":\n            ones += 1\n            zeros = 0\n        else:\n            zeros += 1\n            ones = 0\n        max_diff = max(max_diff, ones-zeros)\n    return max_diff\n\ndef main():\n    s = \"0100010100101\"\n    result = max_diff(s)\n    print(result)\n\n\nmain()",
    "def max_diff_zeros_ones(str):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for s in str:\n        if s == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_1 - count_0)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_zeros_ones(\"0000000000000000000111111111111111111111111\"))",
    "def max_diff(input_str):\n    res = [0, 0]\n    count = 0\n    for i in input_str:\n        if i == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count > res[1]:\n            res[1] = count\n        if count < res[0]:\n            res[0] = count\n    return res[1] - res[0]\n\n\ndef test_max_diff():\n    assert max_diff(\"1001\") == 2\n    assert max_diff(\"001100\") == 2\n    assert max_diff(\"00011001100\") == 6\n\n\nif __name__ == '__main__':\n    test_max_diff()",
    "def max_difference(string):\n    count = 0\n    max_count = 0\n    for i in string:\n        if i == \"0\":\n            count += 1\n        else:\n            count -= 1\n\n        if count > max_count:\n            max_count = count\n\n    return max_count\n\n\nif __name__ == \"__main__\":\n    print(max_difference(\"0100110\"))\n    print(max_difference(\"000110110100010111011100010100011011000101110101011000110110001011101110011101110110001101100010111011101100110\"))",
    "def binary_string(s):\n    n = len(s)\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for i in range(n):\n        if s[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 > 0 and count1 > 0:\n            max_diff = max(max_diff, abs(count0 - count1))\n    return max_diff\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('100010001', 2),\n        ('0000', 0),\n        ('001001111', 4),\n        ('111111111', 0),\n        ('111101001', 2),\n        ('111000100', 2),\n        ('1111111111', 0),\n        ('1001111000', 3),\n        ('100111100000111100011111111100000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "def max_diff_sub_str(str):\n    max_diff = 0\n    curr_diff = 0\n    curr_zero = 0\n    curr_one = 0\n\n    for s in str:\n        if s == '0':\n            curr_zero += 1\n            curr_one = 0\n        else:\n            curr_one += 1\n            curr_zero = 0\n\n        curr_diff = max(curr_diff, curr_one - curr_zero)\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n\nif __name__ == '__main__':\n    print(max_diff_sub_str('11010100100'))\n    print(max_diff_sub_str('110101001001'))\n    print(max_diff_sub_str('1101010010011'))",
    "def max_diff(s: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param s: the binary string\n    :return: the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string\n    \"\"\"\n\n    # the max difference is the difference between the length of the string and the number of 1s\n    max_diff = len(s) - s.count(\"1\")\n\n    # initialize a window of size 2 to find the maximum difference\n    window_size = 2\n    window_start = 0\n    window_end = window_start + window_size\n\n    while window_end < len(s):\n        # get the number of 0s in the window\n        window_0s = s[window_start:window_end].count(\"0\")\n\n        # get the number of 1s in the window\n        window_1s = s[window_start:window_end].count(\"1\")\n\n        # update the max difference\n        max_diff = max(max_diff, window_0s + window_1s)\n\n        # move the window end\n        window_start += 1\n        window_end += 1\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"01101110100000000101110100110000\"))",
    "def binary_sub_string(string):\n    max_diff = 0\n    max_diff_string = \"\"\n    temp = 0\n    for i in string:\n        if i == \"0\":\n            temp += 1\n        else:\n            max_diff = max(max_diff, temp)\n            temp = 0\n    max_diff = max(max_diff, temp)\n\n    return max_diff\n\nprint(binary_sub_string(\"1010010101111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_diff(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n    curr_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == \"0\":\n            zero_count += 1\n        else:\n            one_count += 1\n\n        curr_diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"000011110000\") == 2\n    assert max_diff(\"010101001111011100010101010101111011110001\") == 4",
    "from collections import defaultdict\n\ndef get_max_diff(str):\n    max_diff = 0\n    curr_count = defaultdict(int)\n    curr_count[str[0]] += 1\n    for i in range(1, len(str)):\n        curr_count[str[i]] += 1\n        diff = curr_count[\"0\"] - curr_count[\"1\"]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nprint(get_max_diff(\"0100101\"))\nprint(get_max_diff(\"00000\"))\nprint(get_max_diff(\"10001\"))\nprint(get_max_diff(\"01010\"))\nprint(get_max_diff(\"10101\"))",
    "def max_diff_sub_string(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(count_0, count_1, max_diff)\n    return max_diff\n\n\ndef main():\n    print(max_diff_sub_string(\"00000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "def max_diff(string):\n    # check if all are 1s or all are 0s\n    if string.count(\"1\") == len(string) or string.count(\"0\") == len(string):\n        return 0\n    # check if string is all 1s or all 0s\n    if string.count(\"1\") == 0 or string.count(\"0\") == 0:\n        return len(string) - 1\n\n    # initialize max to 0\n    max_diff = 0\n    # initialize a count of 0s\n    count_0 = 0\n    # initialize a count of 1s\n    count_1 = 0\n    # initialize a count of 1s in a row\n    count_1_in_row = 0\n    # initialize a count of 0s in a row\n    count_0_in_row = 0\n\n    # iterate through the string\n    for char in string:\n        # if char is 1\n        if char == \"1\":\n            # increment count of 1s in a row\n            count_1_in_row += 1\n            # reset count of 0s in a row\n            count_0_in_row = 0\n        # if char is 0\n        elif char == \"0\":\n            # increment count of 0s in a row\n            count_0_in_row += 1\n            # reset count of 1s in a row\n            count_1_in_row = 0\n        # if char is not 1 or 0\n        else:\n            # reset count of 1s in a row\n            count_1_in_row = 0\n            # reset count of 0s in a row\n            count_0_in_row = 0\n        # if count of 1s is greater than count of 0s\n        if count_1_in_row > count_0_in_row:\n            # set difference to count of 1s minus count of 0s\n            max_diff = count_1_in_row - count_0_in_row\n        # if count of 0s is greater than count of 1s\n        elif count_0",
    "def max_diff(b_str):\n    if not b_str: return 0\n    max_diff, zero, one = 0, 0, 0\n    for c in b_str:\n        if c == '1':\n            one += 1\n        else:\n            zero += 1\n        max_diff = max(max_diff, one - zero)\n    return max_diff\n\nprint(max_diff(\"01011000110100100000111110111010110110110010011100000111101000110000001010010100011000010100001011010000011010110110001001001000101011011000010001000001000000100100000101001000001001101000011011000000000101000000001010000000101000000100000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001",
    "def max_diff_sub_string(s):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        max_diff = max(max_diff, zero_count-one_count)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_sub_string(\"010101010101010\"))\n    print(max_diff_sub_string(\"0100101010101010\"))\n    print(max_diff_sub_string(\"100101010101010\"))",
    "def max_diff(string):\n    max_dif = 0\n    curr_dif = 0\n    curr_zero = 0\n    curr_one = 0\n    for i in string:\n        if i == \"0\":\n            curr_zero += 1\n            curr_dif = curr_zero - curr_one\n            if curr_dif > max_dif:\n                max_dif = curr_dif\n        else:\n            curr_one += 1\n            curr_dif = curr_zero - curr_one\n            if curr_dif > max_dif:\n                max_dif = curr_dif\n    return max_dif\n\n\ndef main():\n    print(max_diff(\"1010\"))\n    print(max_diff(\"00101010010\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_diff(string):\n    max_d = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n            count_1 = 0\n        elif string[i] == \"1\":\n            count_1 += 1\n            count_0 = 0\n        else:\n            continue\n\n        max_d = max(max_d, count_0 - count_1)\n\n    return max_d\n\n\nprint(max_diff(\"010010110011\"))",
    "def max_diff(binary_string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == \"0\":\n            count_0 += 1\n        elif char == \"1\":\n            count_1 += 1\n            max_diff = max(max_diff, count_0 - count_1)\n\n    return max(count_0, count_1)\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"100110011100\") == 4",
    "def max_diff(binary_str):\n    start = 0\n    max_count = 0\n    count_0 = 0\n    count_1 = 0\n    while start < len(binary_str):\n        if binary_str[start] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_count = max(max_count, count_0 - count_1)\n        start += 1\n    return max_count\n\n\nbinary_str = input(\"Enter binary string: \")\nprint(\"Maximum difference between 0s and 1s:\", max_diff(binary_str))",
    "from collections import defaultdict\n\ndef max_difference(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = -1\n    count_1 = 0\n    count_0 = 0\n\n    for ch in string:\n        if ch == \"1\":\n            count_1 += 1\n        elif ch == \"0\":\n            count_0 += 1\n\n        max_diff = max(max_diff, count_0 - count_1)\n\n    count_1 = 0\n    count_0 = 0\n\n    for i in range(len(string) - 1, -1, -1):\n        ch = string[i]\n        if ch == \"1\":\n            count_1 += 1\n        elif ch == \"0\":\n            count_0 += 1\n\n        max_diff = max(max_diff, count_0 - count_1)\n\n    return max_diff\n\nif __name__ == \"__main__\":\n    assert max_difference(\"1011\") == 2\n    assert max_difference(\"1100\") == 2\n    assert max_difference(\"0010101010010\") == 2\n    assert max_difference(\"101100\") == 2\n    assert max_difference(\"1010010101\") == 2\n    assert max_difference(\"0110010101\") == 1\n    assert max_difference(\"1110010101\") == 1\n    assert max_difference(\"11100101011\") == 1\n    assert max_difference(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "def max_diff(b):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(b)\n    # max_diff = -1\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if b[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(count_0, count_1, max_diff)\n\n    return max_diff\n\nif __name__ == \"__main__\":\n    b = \"110010100\"\n    print(max_diff(b))",
    "def max_diff(b):\n    ones = 0\n    zeros = 0\n    max_diff = 0\n    for i in range(len(b)):\n        if b[i] == '1':\n            ones += 1\n        else:\n            zeros += 1\n        if ones > zeros:\n            max_diff = max(max_diff, ones-zeros)\n        else:\n            max_diff = max(max_diff, zeros-ones)\n    return max_diff\n\n\nprint(max_diff('01011000111011'))",
    "def max_diff(bin_string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    for i in bin_string:\n        if i == \"0\":\n            count_zero += 1\n        else:\n            count_one += 1\n    max_diff = max(max_diff, count_zero)\n    max_diff = max(max_diff, count_one)\n    return max_diff\n\nprint(max_diff(\"0001101111\"))\nprint(max_diff(\"01001010100101111011100010101101001001010000001000\"))\nprint(max_diff(\"01001010100101111011100010101101001001010000001010\"))",
    "def max_diff(binary_str):\n    if not binary_str:\n        return 0\n\n    max_diff = 0\n    curr_count_0 = 0\n    curr_count_1 = 0\n    prev_count_0 = 0\n    prev_count_1 = 0\n\n    for char in binary_str:\n        if char == '0':\n            curr_count_0 += 1\n        else:\n            curr_count_1 += 1\n\n        max_diff = max(max_diff, curr_count_0 - curr_count_1)\n        max_diff = max(max_diff, prev_count_0 - curr_count_1)\n\n        prev_count_0 = curr_count_0\n        prev_count_1 = curr_count_1\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"01000\"))\n    print(max_diff(\"1001\"))\n    print(max_diff(\"0000\"))\n    print(max_diff(\"100000000\"))",
    "def find_max_diff(string: str) -> int:\n    \"\"\"\n    This is a brute-force approach.\n    Time Complexity: O(n^3)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length: int = len(string)\n    max_diff: int = -1\n\n    for i in range(length):\n        zero_count: int = 0\n        one_count: int = 0\n        for j in range(i, length):\n            if string[j] == \"0\":\n                zero_count += 1\n            else:\n                one_count += 1\n            max_diff = max(max_diff, zero_count - one_count)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert find_max_diff(\"000000000100110\") == 2",
    "def maximum_difference(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    current_zero = 0\n    current_one = 0\n\n    for i in range(length):\n        if string[i] == \"1\":\n            current_one += 1\n        else:\n            current_zero += 1\n\n        if current_zero > 0 and current_one > 0:\n            max_diff = max(current_zero - current_one, max_diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert maximum_difference(\"01000110001\") == 2",
    "def binary_string_max_difference(binary_string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_difference = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in binary_string:\n        if char == \"0\":\n            zero_count += 1\n            one_count = 0\n        else:\n            one_count += 1\n            zero_count = 0\n\n        max_difference = max(max_difference, abs(zero_count - one_count))\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    assert binary_string_max_difference(\"00000\") == 0\n    assert binary_string_max_difference(\"11000\") == 1\n    assert binary_string_max_difference(\"0000011000\") == 2",
    "from collections import Counter\n\n\ndef find_max_diff(s: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    ones = Counter(s)\n\n    diff = 0\n    max_diff = 0\n\n    for _, count in ones.items():\n        diff = max(diff + count, count)\n        max_diff = max(diff, max_diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert find_max_diff(\"01000\") == 2\n    assert find_max_diff(\"101\") == 2",
    "\"\"\"Question:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nExample:\nInput: \"00110011\"\nOutput: 2\nExplanation:\nThere are three strings \"00\", \"11\", \"0011\" have difference between the number of 0s and number of 1s as 2.\nSo the output will be 2.\n\"\"\"\n\n# Solution:\n\n# def max_diff(str1):\n#     curr_max = 0\n#     max_difference = 0\n#     for i in range(len(str1)):\n#         curr_max = 0\n#         for j in range(i, len(str1)):\n#             if str1[j] == '1':\n#                 curr_max += 1\n#             else:\n#                 curr_max -= 1\n#             max_difference = max(max_difference, curr_max)\n#     return max_difference\n\n\ndef max_diff(str1):\n    max_difference = 0\n    curr_max = 0\n    for i in range(len(str1)):\n        if str1[i] == '1':\n            curr_max += 1\n        else:\n            curr_max -= 1\n        max_difference = max(max_difference, curr_max)\n    return max_difference\n\n\nstr1 = \"00110011\"\nprint(max_diff(str1))",
    "def max_diff_sub_str(input_str):\n    if len(input_str) == 0:\n        return 0\n\n    num_1s = 0\n    num_0s = 0\n    max_diff = 0\n    for char in input_str:\n        if char == \"1\":\n            num_1s += 1\n            max_diff = max(num_1s - num_0s, max_diff)\n        elif char == \"0\":\n            num_0s += 1\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_sub_str(\"0110101010110101010110\"))\n    print(max_diff_sub_str(\"0000\"))\n    print(max_diff_sub_str(\"1010101010101010101010\"))",
    "def max_diff(s):\n    res = 0\n    cur = 0\n    max1 = 0\n    for i in s:\n        if i == '0':\n            cur += 1\n        else:\n            max1 = max(max1, cur)\n            cur = 0\n    max0 = max(max0, cur)\n    res = max(res, max1 - max0)\n    return res",
    "def max_diff(s: str) -> int:\n    total_zeros = 0\n    total_ones = 0\n    max_diff = 0\n    for c in s:\n        if c == \"1\":\n            total_ones += 1\n            total_zeros = 0\n        else:\n            total_zeros += 1\n            max_diff = max(total_zeros, total_ones, max_diff)\n    return max_diff",
    "def max_diff(b_str):\n    max_diff = 0\n    curr_max = 0\n    curr_count = 0\n    for i in range(len(b_str)):\n        if b_str[i] == '1':\n            curr_count += 1\n        else:\n            curr_count -= 1\n        curr_max = max(curr_max, curr_count)\n        max_diff = max(max_diff, curr_max)\n\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_diff('0000100000100000111'))",
    "def max_diff(s):\n    num_zeroes = 0\n    num_ones = 0\n    max_diff = 0\n    for c in s:\n        if c == '0':\n            num_zeroes += 1\n        else:\n            num_ones += 1\n        max_diff = max(max_diff, abs(num_zeroes - num_ones))\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_diff(\"00000101010000\"))",
    "from collections import Counter\n\ndef max_diff(string):\n    \"\"\"\n    :param string: binary string\n    :return: maximum difference between the number of 0s and number of 1s in any sub-string\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if string is None:\n        return None\n\n    zero_counter = Counter()\n    one_counter = Counter()\n    zero_counter[0] = 0\n    one_counter[0] = 0\n\n    max_diff = 0\n\n    for i in string:\n        zero_counter[i] += 1\n        one_counter[i] += 1\n        max_diff = max(max_diff, abs(zero_counter[0] - one_counter[0]))\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"01000001\"))\n    print(max_diff(\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_diff(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n    max_1_count = 0\n    max_0_count = 0\n\n    for char in string:\n        if char == \"1\":\n            max_1_count += 1\n            max_diff = max(max_diff, max_0_count)\n        elif char == \"0\":\n            max_0_count += 1\n            max_diff = max(max_diff, max_1_count)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"11001\") == 2\n    assert max_diff(\"00111\") == 2\n    assert max_diff(\"01011\") == 2\n    assert max_diff(\"10101\") == 1\n    assert max_diff(\"11111\") == 0",
    "def max_diff_zeros_ones(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n    for ch in string:\n        if ch == '0':\n            prev_count += 1\n        elif ch == '1':\n            curr_count += 1\n\n        max_diff = max(max_diff, prev_count - curr_count)\n\n    return max_diff\n\nif __name__ == \"__main__\":\n    print(max_diff_zeros_ones('10011000'))\n    print(max_diff_zeros_ones('010001000'))\n    print(max_diff_zeros_ones('00000000'))",
    "def find_max_diff(binary_string):\n    # A list of (start_index, end_index, num_zeros, num_ones)\n    substrings = []\n    num_zeros = 0\n    num_ones = 0\n    for index, char in enumerate(binary_string):\n        if char == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n        substrings.append((index, index, num_zeros, num_ones))\n\n    for index, char in enumerate(binary_string):\n        if char == '1':\n            num_ones += 1\n        else:\n            num_zeros += 1\n        substrings.append((index, index + 1, num_zeros, num_ones))\n\n    for index in range(len(binary_string) - 1):\n        if binary_string[index] == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n        substrings.append((index, index + 1, num_zeros, num_ones))\n\n    return max(substrings, key=lambda x: abs(x[2] - x[3]))\n\n\nprint(find_max_diff('1100000111111111100000000111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "from collections import Counter\n\n\ndef max_diff(string):\n    c = Counter(string)\n    max_diff = abs(c['0'] - c['1'])\n\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            s = string[i:j]\n            c = Counter(s)\n            max_diff = max(max_diff, abs(c['0'] - c['1']))\n\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(\"Enter a binary string: \", end=\"\")\n    string = input()\n    print(max_diff(string))",
    "def max_diff(s):\n    max_diff = 0\n    curr_diff = 0\n    curr_0 = 0\n    curr_1 = 0\n    for i in s:\n        if i == '0':\n            curr_0 += 1\n        else:\n            curr_1 += 1\n        curr_diff = abs(curr_0 - curr_1)\n        max_diff = max(max_diff, curr_diff)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
    "def max_diff(string):\n    max_diff = 0\n    count_0, count_1 = 0, 0\n    for char in string:\n        if char == \"0\":\n            count_0 += 1\n        elif char == \"1\":\n            count_1 += 1\n        else:\n            max_diff = max(count_0, count_1)\n            count_0 = count_1 = 0\n    return max(count_0, count_1)\n\n\nprint(max_diff(\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "def max_diff(str1: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(str1) == 0:\n        return 0\n\n    ones = 0\n    max_ones = 0\n    max_diff = 0\n\n    for char in str1:\n        if char == \"1\":\n            ones += 1\n        else:\n            max_diff = max(max_diff, ones)\n            ones = 0\n\n    max_diff = max(max_diff, ones)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"110001011000001001100001010000001000000100011011011000110111001101111011111011111101111111111\"))",
    "from collections import Counter\n\n\ndef max_diff(binary_str: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(binary_str) < 2:\n        return 0\n\n    zero_count, one_count = Counter(binary_str)[\"0\"], Counter(binary_str)[\"1\"]\n\n    if zero_count == 0 or one_count == 0:\n        return max(zero_count, one_count)\n\n    return max(max_diff(binary_str[1:]), one_count - zero_count)\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"0101\") == 2\n    assert max_diff(\"00110001\") == 2\n    assert max_diff(\"11111\") == 0\n    assert max_diff(\"10101\") == 2\n    assert max_diff(\"00000000011111\") == 4",
    "def max_diff(s):\n    \"\"\"\n    :param s: input binary string\n    :return: max diff\n    \"\"\"\n    # edge case\n    if s == \"0\" or s == \"1\":\n        return 0\n\n    # dp[i][0] is the count of 0s ending at index i\n    # dp[i][1] is the count of 1s ending at index i\n    # dp[i][2] is the max diff between 0s and 1s ending at index i\n    dp = [[0, 0, 0] for _ in range(len(s))]\n\n    dp[0][0] = 1 if s[0] == \"0\" else 0\n    dp[0][1] = 1 if s[0] == \"1\" else 0\n    dp[0][2] = 0\n\n    # dp[i][0] = dp[i - 1][0] + 1 if s[i] == \"0\" else dp[i - 1][0]\n    # dp[i][1] = dp[i - 1][1] + 1 if s[i] == \"1\" else dp[i - 1][1]\n    # dp[i][2] = max(dp[i - 1][2], abs(dp[i - 1][0] - dp[i - 1][1]))\n\n    for i in range(1, len(s)):\n        if s[i] == \"0\":\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1]\n            dp[i][2] = max(dp[i - 1][2], abs(dp[i - 1][0] - dp[i - 1][1]))\n        else:\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][1] + 1\n            dp[i][2] = max(dp",
    "def max_diff(bstring):\n    # count number of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for x in bstring:\n        if x == '0':\n            count_0 += 1\n            if count_1 > count_0:\n                max_diff = max(max_diff, count_1 - count_0)\n        if x == '1':\n            count_1 += 1\n            if count_0 > count_1:\n                max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n\nif __name__ == \"__main__\":\n    print(max_diff('0101101100111011'))",
    "def max_diff(s):\n    count = [0] * 2\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            count[0] += 1\n        else:\n            count[1] += 1\n        max_diff = max(max_diff, abs(count[0] - count[1]))\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    binary_string = \"010011101010110\"\n    print(max_diff(binary_string))",
    "from typing import List\n\n\nclass Solution:\n    def maxDiff(self, nums: str) -> int:\n        def get_diff(start: int, end: int) -> int:\n            return (end - start) - sum(nums[start:end])\n\n        def get_min_diff(start: int, end: int) -> int:\n            return min(get_diff(start, end), get_diff(end, len(nums)))\n\n        max_diff = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums) + 1):\n                diff = get_min_diff(i, j)\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\n\nif __name__ == \"__main__\":\n    pass",
    "def max_diff_sub_string(binary_string: str) -> int:\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for char in binary_string:\n        if char == \"0\":\n            zero_count += 1\n        elif char == \"1\":\n            one_count += 1\n        max_diff = max(max_diff, abs(one_count - zero_count))\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_sub_string(\"010010101011101\"))",
    "def max_diff(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    res = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        if arr[i] == \"0\":\n            res[i][0] = res[i - 1][0] + 1\n        else:\n            res[i][0] = res[i - 1][0]\n        if arr[i] == \"1\":\n            res[i][1] = res[i - 1][1] + 1\n        else:\n            res[i][1] = res[i - 1][1]\n    m = res[0][0]\n    for i in range(n):\n        m = max(m, abs(res[i][0] - res[i][1]))\n    return m\n\n\nif __name__ == \"__main__\":\n    arr = \"0110001001\"\n    print(max_diff(arr))",
    "def max_diff(binary_str: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n    num_of_1 = 0\n    num_of_0 = 0\n\n    for i in range(len(binary_str)):\n        if binary_str[i] == \"0\":\n            num_of_0 += 1\n        else:\n            num_of_1 += 1\n\n        if num_of_1 != 0:\n            max_diff = max(max_diff, num_of_1 - num_of_0)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"0110100101011100111\"))\n    print(max_diff(\"0110100101011100111011\"))",
    "def max_diff(string):\n    length = len(string)\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n\n    for i in range(length):\n        for j in range(i, length):\n            if string[i] == '1' or string[j] == '0':\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n\n    max_diff = 0\n    for i in range(length):\n        for j in range(i, length):\n            max_diff = max(max_diff, dp[i][j] - dp[i][i] - dp[j][j] + dp[j][i])\n\n    return max_diff\n\n\nprint(max_diff(\"01101\"))",
    "from collections import deque\n\n\ndef max_difference(s):\n    \"\"\"\n    :param s: str - binary string\n    :return: int - maximum difference\n\n    >>> max_difference(\"00110011\")\n    2\n    >>> max_difference(\"10101\")\n    2\n    >>> max_difference(\"100\")\n    0\n    \"\"\"\n    if not s:\n        return 0\n    # if len(s) == 1:\n    #     return 0\n    queue_0 = deque()\n    queue_1 = deque()\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            queue_0.append(i)\n        else:\n            queue_1.append(i)\n        if len(queue_0) > len(queue_1):\n            max_diff = max(max_diff, len(queue_0) - len(queue_1))\n        elif len(queue_0) < len(queue_1):\n            max_diff = max(max_diff, len(queue_1) - len(queue_0))\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef binary_string_sub_string(string):\n    result = 0\n    zero_count = defaultdict(int)\n    one_count = defaultdict(int)\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count[i] += 1\n            one_count[i] = 0\n        else:\n            zero_count[i] = 0\n            one_count[i] += 1\n\n    for i in range(len(string)):\n        if i == 0:\n            continue\n        result = max(result, zero_count[i] - one_count[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert binary_string_sub_string(\"01001010100010110110\") == 2\n    assert binary_string_sub_string(\"01001010100010110111\") == 3",
    "def binary_sub_string(b_str):\n    dp = [0]*len(b_str)\n    ans = 0\n\n    for i in range(len(b_str)):\n        if b_str[i] == '1':\n            dp[i] = dp[i-1] + 1 if i != 0 else 1\n        else:\n            dp[i] = dp[i-1]\n        ans = max(ans, abs(dp[i]-dp[i-1]))\n\n    return ans\n\nprint(binary_sub_string(\"010101000010000010110101110110100000011010010110111101100010110011011101101000101010010000001110101101101101000001\"))",
    "def max_diff(binary_string):\n    \"\"\"\n    >>> max_diff(\"0100110\")\n    2\n    >>> max_diff(\"0001110100\")\n    4\n    \"\"\"\n    ones = 0\n    zeros = 0\n    max_diff = 0\n    for num in binary_string:\n        if num == \"0\":\n            zeros += 1\n            if ones > zeros:\n                max_diff = max(max_diff, ones - zeros)\n        else:\n            ones += 1\n            if ones < zeros:\n                max_diff = max(max_diff, zeros - ones)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_diff(string):\n    count = [0] * 2\n    res = 0\n    for i in string:\n        count[int(i)] += 1\n        res = max(res, count[1] - count[0])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert max_diff(\"10101010101\") == 2\n    assert max_diff(\"101010101010\") == 3\n    assert max_diff(\"100010001000\") == 1\n    assert max_diff(\"100001000010\") == 2\n    assert max_diff(\"000000000000\") == 0",
    "def max_diff(b):\n    z = 0\n    o = 0\n    res = 0\n    for i in b:\n        if i == '0':\n            z += 1\n        else:\n            o += 1\n        res = max(res, abs(z-o))\n    return res\n\n\nif __name__ == '__main__':\n    print(max_diff('0000'))\n    print(max_diff('011011'))\n    print(max_diff('0000000000000000000000000000000000000000000000000000000000000'))",
    "from collections import Counter\n\n\ndef max_diff(s):\n    z_counts = Counter(s)\n    z_count = z_counts.get('0', 0)\n    o_count = z_counts.get('1', 0)\n    max_diff = abs(z_count - o_count)\n\n    for i in range(len(s) - 1):\n        if s[i] == '0':\n            z_count += 1\n        else:\n            o_count += 1\n        max_diff = max(max_diff, abs(z_count - o_count))\n\n    return max_diff\n\n\ndef test_max_diff():\n    assert max_diff('01000') == 4\n    assert max_diff('00100') == 3\n    assert max_diff('00010') == 2\n    assert max_diff('00001') == 1\n    assert max_diff('00000') == 0\n\n\nif __name__ == '__main__':\n    test_max_diff()",
    "def max_diff(input_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    curr_zero = 0\n    curr_one = 0\n    for i in input_string:\n        if i == \"0\":\n            curr_zero += 1\n        else:\n            curr_one += 1\n        result = max(result, abs(curr_zero - curr_one))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"010001100010001000110100011010001000110010001101001000110101\"))",
    "def max_diff(s: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n    curr_diff = 0\n    prev_digit = 0\n    curr_digit = 0\n    for char in s:\n        if char == \"0\":\n            curr_digit += 1\n        else:\n            curr_digit -= 1\n        curr_diff = curr_digit - prev_digit\n        max_diff = max(max_diff, curr_diff)\n        prev_digit = curr_digit\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"1001\"))",
    "def find_max(s):\n    zero = 0\n    one = 0\n    maxi = 0\n    for i in s:\n        if i == '0':\n            zero += 1\n        else:\n            one += 1\n        maxi = max(maxi, zero - one)\n    return maxi\n\n\ns = \"010010010001100000\"\nprint(find_max(s))",
    "\"\"\"Question:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nExample:\nInput: \"010101010101\"\nOutput: 4\nExplanation:\n\"0101\" and \"1010\" are the two substrings which have the maximum difference.\n\"\"\"\n\nclass Solution(object):\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: str\n        :rtype: int\n        \"\"\"\n        # #Method 1:\n        # res, prev, diff = 0, 0, 0\n        # for i in range(len(nums)):\n        #     if nums[i] == '0':\n        #         prev += 1\n        #     elif nums[i] == '1':\n        #         res = max(res, prev)\n        #         prev = 0\n        # return max(res, prev)\n\n        # #Method 2:\n        # res, prev, diff = 0, 0, 0\n        # for i in range(len(nums)):\n        #     if nums[i] == '0':\n        #         prev += 1\n        #     elif nums[i] == '1':\n        #         diff = max(diff, prev)\n        #         prev = 0\n        # return max(diff, prev)\n\n        # #Method 3:\n        # res, prev, diff = 0, 0, 0\n        # for i in range(len(nums)):\n        #     if nums[i] == '0':\n        #         prev += 1\n        #     elif nums[i] == '1':\n        #         diff = max(diff, prev)\n        #         res = max(res, diff)\n        #         prev = 0\n        # return res\n\n        # #Method 4:\n        res, prev, diff = 0, 0, 0\n        for i in range(len(nums)):\n            if nums[i] == '0':\n                prev += 1",
    "def max_diff(bin_str):\n    max_diff = 0\n    curr_diff = 0\n    count_1 = 0\n    count_0 = 0\n\n    for ch in bin_str:\n        if ch == '1':\n            count_1 += 1\n            count_0 = 0\n        else:\n            count_0 += 1\n\n        curr_diff = abs(count_1 - count_0)\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n\ndef main():\n    assert max_diff(\"11000100001100\") == 5\n    assert max_diff(\"11100110001100\") == 4\n    assert max_diff(\"10001000101000\") == 3\n    assert max_diff(\"00000000000000\") == 0\n    assert max_diff(\"01111111111111\") == 2\n    assert max_diff(\"01111111111110\") == 1\n\nif __name__ == '__main__':\n    main()",
    "def max_diff(s):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    curr_max = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n            curr_max = max(count_0, count_1)\n        else:\n            count_1 += 1\n            curr_max = max(count_0, count_1)\n        max_diff = max(max_diff, curr_max)\n    return max_diff\n\n\ndef main():\n    print(\"Max difference between the number of 0s and number of 1s in any sub-string of the given binary string: \" +\n          str(max_diff(\"010010111000010011011\")))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_diff(binary: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    ones = 0\n    zeros = 0\n    max_diff = -1\n\n    for i in range(len(binary)):\n        if binary[i] == \"1\":\n            ones += 1\n        else:\n            zeros += 1\n\n        max_diff = max(max_diff, ones - zeros)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff(\"10110101101011111011011101000110100011001011010110001101011111001101110101000101101000110111000110111111110111111111001101011111000101101101101111111111011011110001101111111111101111010111110110111111100011011110011011110110111100110010111000110111110110111111111110111111111101111111001100110110001101110110111111111111011111101111110011011010111101111110110011011111",
    "\"\"\"Question 22\nLevel 3\nQuestion:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nExample:\nInput: 100100111\nOutput: 6\nThe maximum difference is found between 00111 (start index 2, end index 5) and 10010 (start index 0, end index 4).\nThere could be more than one substring with maximum difference.\n\"\"\"\n\nclass Solution:\n    # @param A : string\n    # @return an integer\n    def diff(self, A):\n        n = len(A)\n        ones = [0] * n\n        zeroes = [0] * n\n        for i in range(n):\n            if A[i] == '1':\n                ones[i] = ones[i - 1] + 1 if i > 0 else 1\n            else:\n                ones[i] = ones[i - 1] if i > 0 else 0\n        for i in range(n):\n            if A[n - i - 1] == '1':\n                zeroes[n - i - 1] = zeroes[n - i] + 1 if i > 0 else 1\n            else:\n                zeroes[n - i - 1] = zeroes[n - i] if i > 0 else 0\n        maxdiff = 0\n        for i in range(n):\n            maxdiff = max(maxdiff, abs(zeroes[i] - ones[i]))\n        return maxdiff",
    "def max_diff(string):\n    # Write your code here\n    if len(string) < 2:\n        return 0\n    if string[0] == '0':\n        return max(max_diff(string[1:]), max_diff(string[1:]) + 1)\n    if string[0] == '1':\n        return max(max_diff(string[1:]), max_diff(string[1:]) - 1)\n\n\nprint(max_diff('1000'))\nprint(max_diff('1001'))\nprint(max_diff('0000'))\nprint(max_diff('0001'))\nprint(max_diff('0011'))\nprint(max_diff('0100'))\nprint(max_diff('0101'))\nprint(max_diff('0111'))\nprint(max_diff('1000'))\nprint(max_diff('1001'))\nprint(max_diff('1011'))\nprint(max_diff('1100'))\nprint(max_diff('1101'))\nprint(max_diff('1111'))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}