{
  "problem": {
    "task_id": "MBPP/495",
    "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
    "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
    "test_list": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ],
    "challenge_test_list": [],
    "problem_id": 484
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def remove_lowercase(string):\n    return ''.join(map(lambda x: x.group(), re.finditer('[A-Z]', string)))\n\n\n# test\nstring = 'Hello, my name is John.'\nprint(f'Original string: {string}')\nprint(f'Substrings removed: {remove_lowercase(string)}')",
    "def remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)",
    "import re\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\nprint(remove_lowercase(\"Aabbbc\"))\nprint(remove_lowercase(\"AabbbcD\"))\nprint(remove_lowercase(\"AabbbcDd\"))\nprint(remove_lowercase(\"AabbbcDdD\"))\nprint(remove_lowercase(\"AabbbcDdDe\"))\nprint(remove_lowercase(\"AabbbcDdDeE\"))\nprint(remove_lowercase(\"AabbbcDdDeEf\"))\nprint(remove_lowercase(\"AabbbcDdDeEfF\"))\nprint(remove_lowercase(\"AabbbcDdDeEfFg\"))",
    "import re\n\n\ndef remove_substrings(string):\n    \"\"\"Remove lowercase substrings from a given string by using regex.\"\"\"\n    return re.sub(r'[a-z]+', '', string)",
    "import re\n\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase(\"Hello my name is Chris.\"))\nprint(remove_lowercase(\"Hello my name is Chris and I am happy.\"))\nprint(remove_lowercase(\"Hello my name is Chris and I am happy and I am happy.\"))",
    "import re\n\n\ndef remove_lowercase(s):\n    return re.sub(r\"[a-z]+\", \"\", s)\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"Hello\") == \"H\"\n    assert remove_lowercase(\"Hello world\") == \"Hw\"\n    assert remove_lowercase(\"Hello world!\") == \"Hw!\"\n    assert remove_lowercase(\"Hello, world!\") == \"H, wrld!\"\n    assert remove_lowercase(\"Hello, World!\") == \"H, Wrld!\"\n    assert remove_lowercase(\"HELLO\") == \"HELLO\"\n    assert remove_lowercase(\"Hello WOrld\") == \"HwOrld\"\n    assert remove_lowercase(\"Hello WOrld!\") == \"HwOrld!\"\n    assert remove_lowercase(\"HELLO WORLD\") == \"HWORLD\"",
    "import re\n\n\ndef remove_lowercase_substrings(input_string):\n    return re.sub(r'[a-z]+', '', input_string)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase_substrings('aAbbbbCCcDdD'))",
    "def remove_lowercase(string):\n    return ''.join(x for x in string if x.isupper())\n\n\nprint(remove_lowercase('Python'))\nprint(remove_lowercase('Python is awesome'))\nprint(remove_lowercase('I love Python'))\nprint(remove_lowercase('I love python'))",
    "import re\n\n\ndef remove_lowercase(string):\n    result = re.sub(r'[a-z]+', '', string)\n    return result\n\n\ntest = 'abcdefghijklmnopqrstuvwxyz'\nprint(remove_lowercase(test))",
    "import re\n\ndef remove_lowercase(string: str) -> str:\n    return re.sub(r'(?i)(?<=\\w)([a-z]+)(?=\\w)', '', string)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('AABBBCCaDDD'))",
    "import re\n\ndef remove_lowercase_substrings(input_string):\n    # Fill this in.\n    # You can use the re.sub() method here.\n    # https://docs.python.org/3/library/re.html#re.sub\n    return re.sub(r\"[a-z]+\", \"\", input_string)\n\nif __name__ == '__main__':\n    # Test our your code with this first\n    # Change the input_string to try different cases\n\n    input_string = \"ABcDEF\"\n    print(remove_lowercase_substrings(input_string))\n\n    # After you are satisfied with your results, use input() to prompt the user for a string\n    #input_string = input(\"Input string: \")\n    #print(remove_lowercase_substrings(input_string))",
    "import re\n\n\ndef remove_lowercase(string):\n    pattern = re.compile(r\"(?<=[a-z])[a-z]+\")\n    return pattern.sub(\"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"abcABC\"))\n    print(remove_lowercase(\"abcabc\"))\n    print(remove_lowercase(\"abcabcABC\"))",
    "def remove_lowercase_substrings(input_string):\n    return ''.join(list(filter(lambda x: x.isupper(), input_string)))\n\n\nprint(remove_lowercase_substrings(\"AaBbCcDdEeFfGg\"))",
    "import re\n\ndef remove_lowercase(string):\n    string = re.sub(r\"[a-z]+\", \"\", string)\n    return string\n\nprint(remove_lowercase(\"abcdABCD123\"))",
    "def remove_lowercase(string):\n    return ''.join(filter(lambda x: not x.islower(), string))\n\n\ndef remove_lowercase_regex(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase(\"Hello, world!\"))\nprint(remove_lowercase_regex(\"Hello, world!\"))",
    "import re\n\n\ndef remove_substrings(string):\n    return \" \".join([x for x in re.split(\"[a-z]+\", string) if x != \"\"])",
    "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(remove_lowercase('Hello World!'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert remove_lowercase('Hello World!') == 'HW!'\n    assert remove_lowercase('HELLO WORLD!') == 'HELLO WORLD!'\n    assert remove_lowercase('HELLO WORlD!') == 'HW!'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "import re\n\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"abc\") == \"\"\n    assert remove_lowercase(\"abcABC\") == \"ABC\"\n    assert remove_lowercase(\"ABCabc\") == \"ABC\"\n    assert remove_lowercase(\"abcABCABC\") == \"ABC\"\n    assert remove_lowercase(\"abcabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcABCabc\") == \"ABC\"\n    assert remove_lowercase(\"abcABCabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcabc\") == \"\"\n    assert remove_lowercase(\"abcabcabcabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcABCabcabcabc\") == \"ABC\"\n    assert remove_lowercase(\"abcABCabcabcabcABC\") == \"ABC\"\n    assert remove_lowercase(\"ABCabcabcabcabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcabcabcABCabc\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcabcabcABCabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcABCabcabcabcABCabcABC\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcabcabcABCabcABCabc\") == \"ABC\"\n    assert remove_lowercase(\"abcabcabcabcabcABCabcABCabcABC\") == \"ABC\"",
    "import re\n\ndef remove_lowercase_substrings(input_str):\n    # write your code here\n    return re.sub(r'(?i)(?=\\w*\\d)\\w+', '', input_str)\n\n\nprint(remove_lowercase_substrings(\"abcABC123abcABCabc\"))",
    "import re\n\n\ndef remove_lowercase(s):\n    return re.sub(r\"[a-z]+\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase(\"Hello world\") == \"Hw\"\n    assert remove_lowercase(\"Hello WORLD\") == \"Hw\"\n    assert remove_lowercase(\"Hello world!\") == \"Hw!\"\n    assert remove_lowercase(\"HELLO world!\") == \"!\"\n    assert remove_lowercase(\"Hello world!\") == \"Hw!\"\n    assert remove_lowercase(\"HEllo world!\") == \"Hw!\"\n    assert remove_lowercase(\"Hello world!\") == \"Hw!\"\n    assert remove_lowercase(\"Hello world!\") == \"Hw!\"",
    "import re\n\ndef remove_lowercase_substrings(string):\n    return re.sub(r'(?i)\\b[a-z]+\\b', '', string)\n\nif __name__ == '__main__':\n    print(remove_lowercase_substrings(\"abcdefgh\"))\n    print(remove_lowercase_substrings(\"abAbzCD\"))\n    print(remove_lowercase_substrings(\"abAbzCDabAbzCD\"))",
    "import re\n\ndef remove_substrings(string):\n    \"\"\"Remove lowercase substrings from a given string by using regex.\"\"\"\n    return re.sub(r'[a-z]+', '', string)",
    "import re\n\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase(\"Hello World\"))",
    "import re\n\ndef main():\n    str_input = input(\"Enter a string: \")\n    str_output = \"\"\n    str_output = re.sub(r\"[a-z]+\", \"\", str_input)\n    print(str_output)\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lower_substrings(string):\n    return ''.join(reversed(re.sub(r'([a-z]*)([a-z])([a-z]*)', r'\\2', ''.join(reversed(string)))))\n\n\nprint(remove_lower_substrings('AabBcCdDeEfFgG'))\nprint(remove_lower_substrings('AaBbCcDdEeFfGg'))",
    "import re\n\ndef remove_lowercase_substrings(input_string):\n    # code goes here\n    return re.sub(r\"[a-z]+\", \"\", input_string)\n\n# keep this function call here\nprint(remove_lowercase_substrings(input()))",
    "def remove_substrings(string):\n    return \"\".join(\n        match.group(0)\n        for match in re.finditer(r\"[A-Z]+\", string, re.IGNORECASE)\n    )",
    "import re\n\n\ndef remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings(\"abCde\")\n    'abCde'\n    >>> remove_lowercase_substrings(\"abCdeFGhiJk\")\n    'abCdeFGhiJk'\n    >>> remove_lowercase_substrings(\"abCdeFGhiJkLm\")\n    'abCdeFGhiJkLm'\n    >>> remove_lowercase_substrings(\"abCdeFGhiJkLmNOp\")\n    'abCdeFGhiJkLmNOp'\n    >>> remove_lowercase_substrings(\"abCdeFGhiJkLmNOpQr\")\n    'abCdeFGhiJkLmNOpQr'\n    \"\"\"\n    return re.sub(r\"(?:(?<=[a-z])[a-z]+)+\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import re\n\n\ndef remove_lowercase_substrings(string: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string by using regex.\n\n    Args:\n        string (str): given string.\n\n    Examples:\n        >>> assert remove_lowercase_substrings(\"abcd\") == \"abcd\"\n        >>> assert remove_lowercase_substrings(\"abcde\") == \"abcd\"\n        >>> assert remove_lowercase_substrings(\"abcdE\") == \"abcdE\"\n        >>> assert remove_lowercase_substrings(\"abcdEfg\") == \"abcdEfg\"\n        >>> assert remove_lowercase_substrings(\"abcdEfgh\") == \"abcdEfgh\"\n        >>> assert remove_lowercase_substrings(\"abcdEfghI\") == \"abcdEfghI\"\n        >>> assert remove_lowercase_substrings(\"abcdEfghIj\") == \"abcdEfghIj\"\n        >>> assert remove_lowercase_substrings(\"abcdEfghiJ\") == \"abcdEfghiJ\"\n        >>> assert remove_lowercase_substrings(\"abcdEfghiJk\") == \"abcdEfghiJk\"\n    \"\"\"\n    return re.sub(r\"(?<![A-Z])[a-z]+\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"abcd\"))",
    "import re\n\ndef remove_lowercase(string):\n    string = re.sub(r\"[a-z]+\", \"\", string)\n    return string\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"))",
    "import re\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n\n\nprint(remove_lowercase('abcdABCD1234'))\nprint(remove_lowercase('abcdABCD1234efg'))\nprint(remove_lowercase('abcdABCD1234efgh'))\nprint(remove_lowercase('abcdABCD1234efghijkl'))\nprint(remove_lowercase('abcdABCD1234efghijklmnopqrstuvwxyz'))",
    "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase(\"abcDEFxyz\")\n    'abcDEFxyz'\n    >>> remove_lowercase(\"abcdefxyz\")\n    ''\n    >>> remove_lowercase(\"Abcdefxyz\")\n    'Abcdefxyz'\n    >>> remove_lowercase(\"ABCDEFxyz\")\n    'ABCDEFxyz'\n    >>> remove_lowercase(\"abcDEFXYZ\")\n    'abcDEFXYZ'\n    >>> remove_lowercase(\"abcDefxyz\")\n    'abcDefxyz'\n    >>> remove_lowercase(\"ABCdefxyz\")\n    'ABCdefxyz'\n    >>> remove_lowercase(\"abcDeFxyz\")\n    'abcDeFxyz'\n    \"\"\"\n    return re.sub(r\"(?i)\\b[a-z]+\\b\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase_substrings(input_str):\n    return \"\".join(list(filter(lambda x: x.isupper(), input_str)))\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"AABCAa\"))",
    "import re\n\n\ndef remove_lowercase_substring(string):\n    pattern = r\"[a-z]+\"\n    return re.sub(pattern, \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substring(\"Hello world\"))\n    print(remove_lowercase_substring(\"Hello world hello\"))\n    print(remove_lowercase_substring(\"hello world\"))\n    print(remove_lowercase_substring(\"Hello world hello\"))",
    "def remove_lowercase_substrings(string):\n    # Your code goes here\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(remove_lowercase_substrings('aabBee'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert remove_lowercase_substrings('aabBee') == \"AB\"\n    assert remove_lowercase_substrings('abbBee') == \"abbBee\"\n    assert remove_lowercase_substrings('AbBBeE') == \"A\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "def remove_lowercase(string):\n    return \" \".join(\n        [\n            \"\".join(reversed(i))\n            for i in re.split(\"(\\s+)\", string)\n            if re.match(r\"[a-z]+\", i) is None\n        ]\n    )",
    "def remove_lower_case(string):\n    return ''.join(x for x in string if not x.islower())\n\n\nif __name__ == '__main__':\n    print(remove_lower_case(\"Hello, my name is John\"))",
    "import re\n\n\ndef remove_lowercase(input_str):\n    \"\"\"\n    Removes all lowercase strings from a string.\n    \"\"\"\n    return re.sub(r'[a-z]+', '', input_str)",
    "import re\n\n\ndef remove_lowercase(string):\n    return re.sub(r\"(?<=[a-z])[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase(\"Remove lowercase from this string\"))\nprint(remove_lowercase(\"Remove lowercase from this string123\"))\nprint(remove_lowercase(\"Remove lowercase from this string12345\"))\nprint(remove_lowercase(\"Remove lowercase from this string123456789\"))",
    "def remove_lowercase_substrings(input_string):\n    \"\"\"\n    >>> remove_lowercase_substrings(\"aabab\")\n    'ab'\n    >>> remove_lowercase_substrings(\"aababA\")\n    'abA'\n    >>> remove_lowercase_substrings(\"Aaabab\")\n    'Aaabab'\n    >>> remove_lowercase_substrings(\"AaababA\")\n    'AaababA'\n    >>> remove_lowercase_substrings(\"AaBab\")\n    'AaBab'\n    >>> remove_lowercase_substrings(\"AabAB\")\n    'AabAB'\n    \"\"\"\n    return \"\".join(\n        [\n            match.group(0)\n            for match in regex.finditer(r\"(?<=\\W)([A-Z]|[A-Z]?[A-Z]+[A-Z])\", input_string)\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import re\n\n\ndef remove_lowercase_substring(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase_substring(\"aabAAB\"))\nprint(remove_lowercase_substring(\"aabBBaab\"))\nprint(remove_lowercase_substring(\"AABBBaab\"))",
    "import re\n\n\ndef remove_substrings(string):\n    matches = re.findall(r\"[a-z]+\", string)\n\n    for match in matches:\n        string = string.replace(match, \"\")\n\n    return string\n\n\nprint(remove_substrings(\"abcdZXCba\"))\nprint(remove_substrings(\"abcdZXCbaefd\"))\nprint(remove_substrings(\"abcdZXCbaefdAAA\"))\nprint(remove_substrings(\"abcdZXCbaefdAAAxyz\"))",
    "def remove_lowercase(input_string):\n    return ''.join(match.group(0) for match in re.finditer(r'[A-Z]+', input_string))",
    "import re\n\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n\n\nprint(remove_lowercase(\"Hello\"))\nprint(remove_lowercase(\"Aa\"))\nprint(remove_lowercase(\"AaBb\"))\nprint(remove_lowercase(\"AaBbCcDdEe\"))",
    "import re\n\ndef remove_lowercase(string):\n    \"\"\"Removes lowercase substrings from a string.\"\"\"\n    return re.sub(r'[a-z]+', '', string)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('abcABC123abc'))\n    print(remove_lowercase('abcABCabc123abc'))\n    print(remove_lowercase('ABCabc123abc'))\n    print(remove_lowercase('abcABC123'))\n    print(remove_lowercase('ABC123'))\n    print(remove_lowercase('123'))\n    print(remove_lowercase('abcabc'))\n    print(remove_lowercase('ABC'))",
    "def remove_lowercase_substrings(text):\n    return \" \".join(\n        [\n            word.group()\n            for word in re.finditer(\n                r\"\\b[A-Z][A-Z0-9]+\\b\",\n                text,\n            )\n        ]\n    )",
    "def remove_lowercase(input_str):\n    return ' '.join([word for word in input_str.split() if word.isupper()])\n\n\ndef main():\n    print(remove_lowercase(\"Hello my name is John\"))\n    print(remove_lowercase(\"Hello my name is john\"))\n\n\nif __name__ == '__main__':\n    main()",
    "import re\n\n\ndef remove_lowercase(string):\n    return \"\".join(re.findall(r\"[A-Z]\", string))\n\n\n# Tests\nassert remove_lowercase(\"Hello, my name is John\") == \"HMNJ\"\nassert remove_lowercase(\"Hello, my name is john\") == \"HMN\"\nassert remove_lowercase(\"Hello, my name is JOHN\") == \"HMN\"",
    "import re\n\n\ndef remove_lowercase_substrings(text):\n    return re.sub(r\"[a-z]+\", \"\", text)\n\n\nprint(remove_lowercase_substrings(\"abcd\"))\nprint(remove_lowercase_substrings(\"abcdE\"))\nprint(remove_lowercase_substrings(\"abcdEE\"))\nprint(remove_lowercase_substrings(\"abcdEEF\"))\nprint(remove_lowercase_substrings(\"abcdEEFgh\"))\nprint(remove_lowercase_substrings(\"abcdEEFghij\"))\nprint(remove_lowercase_substrings(\"abcdEEFghijK\"))\nprint(remove_lowercase_substrings(\"abcdEEFghijKL\"))\nprint(remove_lowercase_substrings(\"abcdEEFghijKLmn\"))\nprint(remove_lowercase_substrings(\"abcdEEFghijKLmnop\"))",
    "import re\n\n\ndef remove_substrings(string):\n    return re.sub(r'(?i)\\b\\w+\\b', '', string)\n\n\ndef main():\n    assert remove_substrings('Hello World') == 'World'\n    assert remove_substrings('HELLO world') == ''\n    assert remove_substrings('HeLLo WoRLD') == 'D'\n    print('Passed')\n\n\nif __name__ == \"__main__\":\n    main()",
    "import re\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nif __name__ == '__main__':\n    assert remove_lowercase(\"Hello world\") == \"Hwrd\"\n    assert remove_lowercase(\"HellO worlD\") == \"Hwrd\"\n    assert remove_lowercase(\"HeLLo WoRld\") == \"Hwrd\"\n    assert remove_lowercase(\"hello world\") == \"\"\n    assert remove_lowercase(\"hello\") == \"\"\n    assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
    "import re\n\n\ndef remove_substrings(string: str) -> str:\n    \"\"\"Returns the string without lowercase substrings.\n\n    >>> remove_substrings('Hello, world!')\n    'Hlo, wrd!'\n    >>> remove_substrings('Helloworld')\n    'Hellowrd'\n    >>> remove_substrings('HelloworldHelloWorld')\n    'HellowrdHellowrd'\n    \"\"\"\n    return re.sub(r\"(.)\\1+\", r\"\\1\\1\", string)\n\n\nif __name__ == \"__main__\":\n    input_string = input(\"Enter a string: \")\n    print(remove_substrings(input_string))",
    "import re\n\n\ndef remove_lower_case(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\ndef test_remove_lower_case():\n    assert remove_lower_case(\"Hello, World!\") == \"HW!\"\n    assert remove_lower_case(\"HELLO, world!\") == \"HELLOWorld!\"\n    assert remove_lower_case(\"HELLO, World!\") == \"HELLOWorld!\"\n    assert remove_lower_case(\"Hello, World!\") == \"HW!\"\n    assert remove_lower_case(\"HELLO, World!\") == \"HELLOWorld!\"\n    assert remove_lower_case(\"hello, world!\") == \"hW!\"\n    assert remove_lower_case(\"HELLO, WORLD!\") == \"HELLOWORLD!\"\n    assert remove_lower_case(\"HeLlO, WOrld!\") == \"HeLlOWOrld!\"\n    assert remove_lower_case(\"12345\") == \"12345\"\n    assert remove_lower_case(\"1a2b3c4d5e\") == \"1a2b3c4d5e\"\n    assert remove_lower_case(\"A1b2c3d4e5\") == \"A1b2c3d4e5\"",
    "def remove_lowercase(s):\n    s = s.replace('a', '')\n    s = s.replace('b', '')\n    s = s.replace('c', '')\n    s = s.replace('d', '')\n    s = s.replace('e', '')\n    s = s.replace('f', '')\n    s = s.replace('g', '')\n    s = s.replace('h', '')\n    s = s.replace('i', '')\n    s = s.replace('j', '')\n    s = s.replace('k', '')\n    s = s.replace('l', '')\n    s = s.replace('m', '')\n    s = s.replace('n', '')\n    s = s.replace('o', '')\n    s = s.replace('p', '')\n    s = s.replace('q', '')\n    s = s.replace('r', '')\n    s = s.replace('s', '')\n    s = s.replace('t', '')\n    s = s.replace('u', '')\n    s = s.replace('v', '')\n    s = s.replace('w', '')\n    s = s.replace('x', '')\n    s = s.replace('y', '')\n    s = s.replace('z', '')\n    return s\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('Hello'))",
    "import re\n\ndef remove_lowercase(text):\n    \"\"\"Remove lowercase substrings from a given string\"\"\"\n    return re.sub(r'[a-z]+', '', text)",
    "def remove_lowercase(string):\n    return ''.join(i for i in string if i.isupper())\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"Hello\"))\n    print(remove_lowercase(\"AaBbCc\"))\n    print(remove_lowercase(\"Hey\"))\n    print(remove_lowercase(\"123456\"))",
    "import re\n\n\ndef remove_substrings(string):\n    \"\"\"Removes lowercase substrings from a given string by using regex.\"\"\"\n    return re.sub(r'(?<=[a-z])[a-z]+', '', string)",
    "import re\n\ndef main(s):\n    # write code here\n    print(re.sub(r\"(?i)[a-z]+\", \"\", s))\n\nif __name__ == '__main__':\n    main(\"Hello World\")",
    "def remove_lowercase_substrings(string: str) -> str:\n    \"\"\"Removes lowercase substrings from given string.\n\n    Args:\n        string (str): given string.\n\n    Returns:\n        str: string without lowercase substrings.\n    \"\"\"\n    return \"\".join(\n        [match.group() for match in re.finditer(r\"[A-Z]+\", string) if match]\n    )\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"Hello World\"))",
    "import re\n\ndef remove_substrings(s):\n    \"\"\"Returns a string without lowercase substrings.\"\"\"\n    return re.sub(r'[a-z]+', '', s)\n\n\ndef main():\n    assert remove_substrings('abcd') == 'abcd'\n    assert remove_substrings('abABab') == 'abAB'\n    assert remove_substrings('abABaB') == 'abAB'\n    assert remove_substrings('abABAB') == 'AB'\n    assert remove_substrings('abABABc') == 'ABc'\n    assert remove_substrings('abABABcd') == 'ABcd'\n\nif __name__ == '__main__':\n    main()",
    "import re\n\n\ndef remove_substrings(string):\n    # re.findall(r\"[A-Z]+\", string)\n    return \"\".join(re.findall(r\"[A-Z]+\", string))\n\n\ndef test_remove_substrings():\n    assert remove_substrings(\"ABAB\") == \"ABAB\"\n    assert remove_substrings(\"AbaB\") == \"AB\"\n    assert remove_substrings(\"ABab\") == \"AB\"\n    assert remove_substrings(\"aBaB\") == \"\"\n    assert remove_substrings(\"abAB\") == \"\"\n    assert remove_substrings(\"ABabA\") == \"ABA\"\n    assert remove_substrings(\"abABA\") == \"A\"\n    assert remove_substrings(\"AbABA\") == \"A\"\n    assert remove_substrings(\"ABabAbA\") == \"ABA\"",
    "def remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)",
    "import re\n\n\ndef remove_lowercase_substrings(text: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string by using regex.\n\n    Args:\n        text (str): given string\n\n    Returns:\n        str: string with removed substrings\n\n    Examples:\n        >>> assert remove_lowercase_substrings(\"I love Python\") == \"I lv Pthn\"\n        >>> assert remove_lowercase_substrings(\"I love Python Programming\") == \"I lv Pthn Prgrmmng\"\n        >>> assert remove_lowercase_substrings(\"I love Python programming\") == \"I lv Pthn prgrmmng\"\n    \"\"\"\n    return re.sub(r\"(?<=\\w)([a-z]+)(?=\\W|$)\", \"\", text)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"I love Python\"))",
    "import re\n\n\ndef remove_lowercase(string: str) -> str:\n    \"\"\"Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): The string from which lowercase substrings are to be removed.\n\n    Returns:\n        str: The string with lowercase substrings removed.\n    \"\"\"\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"abCdEfghiJkLmnoPqRsTuvwxYz\"))",
    "import re\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nprint(remove_lowercase(\"AaBbCc\"))\nprint(remove_lowercase(\"AaBbCcDdEeFfGg\"))\nprint(remove_lowercase(\"AaBbCcDdEeFfGgHhIiJjKk\"))",
    "import re\n\n\ndef remove_lowercase_substrings(string):\n    # your code here\n    return \"\".join(re.findall(r\"[A-Z]\", string))\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"Aabbbaaa\"))",
    "def remove_lowercase_substrings(input_string):\n    # Check if the input_string is a string and not empty.\n    if not isinstance(input_string, str) or not input_string:\n        return input_string\n    \n    # Convert the input_string into a list.\n    string_list = list(input_string)\n\n    # Reverse the string list.\n    string_list.reverse()\n\n    # Create a variable to hold the index of the first uppercase character.\n    first_uppercase_index = None\n\n    # Iterate over the string list in reverse order.\n    for index, character in enumerate(string_list):\n        if character.isupper():\n            first_uppercase_index = index\n            break\n\n    # If there is no uppercase character in the string, return an empty string.\n    if first_uppercase_index is None:\n        return \"\"\n\n    # If there is an uppercase character in the string, create a variable to hold the index of the last uppercase character.\n    last_uppercase_index = None\n\n    # Iterate over the string list in reverse order.\n    for index, character in enumerate(string_list):\n        if character.isupper():\n            last_uppercase_index = index\n\n    # If there is no uppercase character in the string, return an empty string.\n    if last_uppercase_index is None:\n        return \"\"\n\n    # If there is an uppercase character in the string, return the substring of the input_string from the first uppercase character to the last uppercase character.\n    return \"\".join(string_list[:first_uppercase_index + 1]) + \"\".join(string_list[last_uppercase_index:])\n\n\ndef main():\n    # Output: \"\".\n    print(remove_lowercase_substrings(\"\"))\n\n    # Output: \"Hello\".\n    print(remove_lowercase_substrings(\"hello\"))\n\n    # Output: \"HellO\".\n    print(remove_lowercase_substrings(\"HELLO\"))\n\n    # Output: \"Hello\".\n    print(remove_lowercase_substrings(\"HeLLo\"))\n\n    # Output:",
    "import re\n\ndef remove_lowercase_substrings(string):\n    \"\"\"Removes substrings from a given string that contain only lowercase characters.\"\"\"\n    return re.sub(r'[a-z]+', '', string)",
    "import re\n\n\ndef remove_lowercase(string: str) -> str:\n    \"\"\"Removes substrings with lowercase letters in a string.\n\n    Args:\n        string (str): The string to remove substrings from.\n\n    Returns:\n        str: The string with substrings removed.\n    \"\"\"\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"This is a mixed string with lowercase letters.\"))",
    "import re\n\n\ndef remove_substrings(string):\n    return re.sub(\"[a-z]+\", \"\", string)\n\n\ndef main():\n    assert remove_substrings(\"Hello, World!\") == \"HW!\"\n    assert remove_substrings(\"AaBbCc\") == \"ABC\"\n    print(\"OK\")\n\n\nif __name__ == '__main__':\n    main()",
    "import re\n\n\ndef remove_lowercase(text):\n    return re.sub(\"[a-z]+\", \"\", text)\n\n\nprint(remove_lowercase(\"A quick brown fox jumped over the lazy dog.\"))\nprint(remove_lowercase(\"Python is a high-level, general-purpose programming language.\"))",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase('abABa')\n    'aAb'\n    >>> remove_lowercase('abABa')\n    'abAB'\n    >>> remove_lowercase('aabbcc')\n    ''\n    \"\"\"\n    import re\n\n    return re.sub(r'[a-z]+', '', string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings(\"aAaaA\")\n    'AAA'\n    >>> remove_lowercase_substrings(\"aaaAA\")\n    'AAA'\n    >>> remove_lowercase_substrings(\"aAAaA\")\n    'A'\n    >>> remove_lowercase_substrings(\"AaaAA\")\n    ''\n    \"\"\"\n    # return re.sub(\"[a-z]+\", \"\", string)\n    return re.sub(\"[a-z]*\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import re\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n\n\nif __name__ == '__main__':\n    assert remove_lowercase(\"Hello world!\") == \"H!\", \"Remove lowercase\"",
    "def remove_lower_case(text):\n    return \"\".join(map(lambda x: x if x.isupper() else \" \", text))\n\n\nif __name__ == \"__main__\":\n    assert remove_lower_case(\"abcDEFxyz\") == \"abcDEF\"\n    assert remove_lower_case(\"abcDfxyz\") == \"abcDf\"",
    "def remove_lowercase(string):\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i]\n    return result\n\n\ndef main():\n    string = \"abcDEFghi\"\n    print(remove_lowercase(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import re\n\n\ndef remove_lowercase_substrings(string: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string by using regex.\n\n    Args:\n        string (str): given string\n\n    Examples:\n        >>> assert remove_lowercase_substrings(\"abAB\") == \"abAB\"\n        >>> assert remove_lowercase_substrings(\"abABa\") == \"abAB\"\n        >>> assert remove_lowercase_substrings(\"abABab\") == \"abAB\"\n        >>> assert remove_lowercase_substrings(\"abAbABab\") == \"abABab\"\n        >>> assert remove_lowercase_substrings(\"abABabAb\") == \"abABab\"\n        >>> assert remove_lowercase_substrings(\"abAbABabAb\") == \"abABabAb\"\n    \"\"\"\n    return re.sub(r\"([a-z]+)\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"abABabAb\"))",
    "import re\n\n\ndef remove_lowercase(input_str):\n    # Remove lowercase words from a string\n    return re.sub(r'\\b[a-z]+\\b', '', input_str)\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"Hello, World!\") == \"Hello, World!\"\n    assert remove_lowercase(\"HELLO, world!\") == \"\"\n    assert remove_lowercase(\"HELLO, WORLD!\") == \"!\"\n    assert remove_lowercase(\"HELLO, WORLD! 123\") == \"! 123\"\n    assert remove_lowercase(\"123 HELLO, WORLD!\") == \"123 \"\n    assert remove_lowercase(\"heLLo, WORLD!\") == \"!\"\n    assert remove_lowercase(\"heLLo, WORLD! 123\") == \" 123\"\n    assert remove_lowercase(\"123 heLLo, WORLD!\") == \"123 \"\n    assert remove_lowercase(\"123 456\") == \"123 456\"\n    assert remove_lowercase(\"\") == \"\"\n\n\nif __name__ == '__main__':\n    test_remove_lowercase()",
    "import re\n\ndef remove_lowercase_substrings(string):\n    # split the string on lowercase characters and join the resulting list back together\n    return \"\".join(re.split(r'([a-z]+)', string))\n\nif __name__ == '__main__':\n    print(remove_lowercase_substrings(\"aA111b222C333cDDD\"))",
    "import re\n\n\ndef remove_lowercase(string: str) -> str:\n    \"\"\"Removes substrings from given string.\"\"\"\n    return re.sub(r'[a-z]+', '', string)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('abcd'))\n    print(remove_lowercase('abcd1234abcd'))\n    print(remove_lowercase('1234abcd1234'))\n    print(remove_lowercase('1234'))\n    print(remove_lowercase('abcdABCD'))\n    print(remove_lowercase('abcdABCD1234'))",
    "def remove_lowercase(text):\n    return ' '.join([w for w in text.split() if not w.islower()])\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"hello world\") == \"hello world\"\n    assert remove_lowercase(\"HeLlo WorLd\") == \"Hello World\"\n    assert remove_lowercase(\"HeLlo WorLd 4U\") == \"Hello World 4U\"\n    assert remove_lowercase(\"HeLlo 4U WorLd\") == \"Hello 4U World\"",
    "def remove_lowercase(str):\n    return ''.join(re.findall(r\"[A-Z]\", str))\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"AabBcCdDeEfFgGhHiHjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"))",
    "import re\n\n\ndef remove_lowercase_substrings(input_str):\n    return re.sub(\"[a-z]+\", \"\", input_str)",
    "def main():\n    with open('input.txt') as ifh:\n        for line in ifh:\n            print(re.sub(r'[a-z]+', '', line))\n\nif __name__ == '__main__':\n    import re\n    main()",
    "import re\n\ndef remove_substrings(text):\n    \"\"\"\n    :param text: str\n    :return: str\n    \"\"\"\n    regex = re.compile(r'(?i)\\b[a-z]+\\b')\n    return regex.sub('', text)\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = remove_substrings(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(('hello world', 'hld wrd'))\ntest_function(('HELLO WORLD', 'HELLO WORLD'))\ntest_function(('HELLO world', 'HLD wrd'))\ntest_function(('A1B2C3D4', 'A1B2C3D4'))\ntest_function(('a1b2c3d4', '1234'))\ntest_function(('A1b2C3d4', '1b2C3d4'))\ntest_function(('A1B2c3D4', 'A1B2c3D4'))\ntest_function(('a1b2c3D4', '1b2c3D4'))\ntest_function(('A1b2c3d4', '1b2c3d4'))\ntest_function(('1A2b3C4D5e6f7g8h9i0J1k2l3m4n5o', '1A2b3C4D5e6f7g8h9i0J1k2l3m4n5o'))\ntest_function(('1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o', '1234567890Jk2l3m4n5o'))\ntest_function(('1A2b3C4d5e6f7g8h9i0j1k2l3m4n5O', '1A2b3C4d5e6f7g8h9",
    "def remove_lowercase_substrings(string):\n    import re\n    return re.sub(r\"(?<=[a-z])[a-z]+\", \"\", string)\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(f'After removing lowercase substrings: {remove_lowercase_substrings(string)}')\n\n\nif __name__ == \"__main__\":\n    main()",
    "import re\n\n\ndef remove_lowercase_substrings(text):\n    return re.sub(r'[a-z]+', '', text)",
    "import re\n\n\ndef remove_lowercase(str):\n    # Your code goes here\n    return re.sub(r'[a-z]+', '', str)\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"aaabbbcccAAAbbbbAAA\") == \"AAAbbbb\"\n    assert remove_lowercase(\"AaabbbcccAAAbbbbAAA\") == \"Aaabbbccc\"",
    "import re\n\ndef remove_lower_substrings(input_string):\n    \"\"\"\n    >>> remove_lower_substrings('abCdEfGhIJkLmNOPQRsTuvWXyZ')\n    'A'\n    >>> remove_lower_substrings('AbCdEfGhIJkLmNOPQRsTuvWXyZ')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    >>> remove_lower_substrings('abCdEfGhIJkLmNOPQRsTuvWXyZ1234567890')\n    '1234567890'\n    \"\"\"\n    return ''.join(re.findall(r'[A-Z]+', input_string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string by using regex.\n\n    Args:\n        string (str): given string\n\n    Examples:\n        >>> assert remove_lowercase('aAaaBc') == 'AB'\n    \"\"\"\n    return \"\".join(\n        [char for char in string if char.isupper() or char == \" \"]\n    )\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"aAaaBc\"))",
    "import re\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(remove_lowercase('Ab1Cd3'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert remove_lowercase('Ab1Cd3') == 'Ab1Cd'\n    assert remove_lowercase('Ab1c') == 'Ab'\n    assert remove_lowercase('1c') == ''\n    assert remove_lowercase('abc') == ''\n    assert remove_lowercase('123') == ''\n    assert remove_lowercase('A1B2C3') == 'A1B2C3'\n    assert remove_lowercase('1b2c3') == '1B2C3'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "import re\n\n\ndef remove_lower_substrings(s):\n    \"\"\"\n    >>> remove_lower_substrings('ABcdefghijklMN')\n    'ABcdefghijklMN'\n    >>> remove_lower_substrings('aBCdefghijklMN')\n    ''\n    >>> remove_lower_substrings('AbcdefghijklMN')\n    'AbcdefghijklMN'\n    \"\"\"\n    return re.sub(r\"[a-z]+\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import re\n\n\ndef remove_lowercase_substring(string):\n    return re.sub(r'[a-z]+', '', string)\n\n\ndef test_remove_lowercase_substring():\n    assert remove_lowercase_substring('Hello world') == 'Hwrd'\n    assert remove_lowercase_substring('Hello') == 'H'\n    assert remove_lowercase_substring('Hello World') == 'Hwrd'\n    assert remove_lowercase_substring('HeLlO') == 'Hwrd'\n    assert remove_lowercase_substring('HelloWorlD') == 'Hwrd'\n    assert remove_lowercase_substring('HELLO WORLD') == 'HELLO WORLD'\n    assert remove_lowercase_substring('HeLlo WoRld') == 'Hwrd'\n    assert remove_lowercase_substring('Hello World!') == 'Hwrd!'\n    assert remove_lowercase_substring('HeLlO WoRld!') == 'Hwrd!'\n    assert remove_lowercase_substring('Hello World!?') == 'Hwrd!?'\n    assert remove_lowercase_substring('HeLlO WoRld!?') == 'Hwrd!?'\n    assert remove_lowercase_substring('Hello World.') == 'Hwrd.'\n    assert remove_lowercase_substring('HeLlO WoRld.') == 'Hwrd.'\n    assert remove_lowercase_substring('Hello World.?') == 'Hwrd.?'\n    assert remove_lowercase_substring('HeLlO WoRld.?') == 'Hwrd.?'\n    assert remove_lowercase_substring('Hello World.!') == 'Hwrd.!'\n    assert remove_lowercase_substring('HeLlO WoRld.!') == 'Hwrd.!'\n    assert remove_lowercase_substring('Hello World.!?') == 'Hwrd.!?'\n    assert remove_lowercase_substring('HeLlO WoRld.!?') == 'Hwrd.!?'\n    assert remove_lowercase_substring('Hello World!?!') == 'Hwrd!?!'\n    assert remove",
    "import re\n\ndef remove_lowercase(string):\n    return re.sub(r'(?=.*\\w)[\\w]*[a-z][\\w]*', \"\", string)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(remove_lowercase('Hello World'))\n\n    #These \"asserts\" using pytest are used for self-checking and not for an auto-testing\n    assert remove_lowercase(\"Hello World\") == \"H W\"\n    assert remove_lowercase(\"HELLO world\") == \"\"\n    assert remove_lowercase(\"HELLO\") == \"\"\n    assert remove_lowercase(\"HELLOo\") == \"H\"\n    assert remove_lowercase(\"H E L L O O\") == \"\"\n    assert remove_lowercase(\"H W\") == \"H W\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "import re\n\ndef remove_lowercase(string):\n    \"\"\"Removes lowercase substrings from a given string\"\"\"\n    return \"\".join(re.split(r\"[a-z]+\", string))\n\n\ndef test_cases():\n    \"\"\"Sample test cases\"\"\"\n    assert remove_lowercase(\"Hello, World!\") == \"HW!\"\n    assert remove_lowercase(\"HELLO, World!\") == \"HELLOWorld!\"\n    assert remove_lowercase(\"HELLO, WORLD!\") == \"HELLOWORLD!\"\n    print(\"Test Success!\")\n\n\ndef main():\n    test_cases()\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lower_substrings(text):\n    return ''.join(filter(lambda x: x.isupper(), text))\n\n\nprint(remove_lower_substrings('AbC'))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings('AABBBBC')\n    'ABBBC'\n    \"\"\"\n    return \"\".join(\n        [char for char in string if not char.islower() or char.isupper()]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_substrings(input_string):\n    return re.sub(r'[a-z]+', '', input_string)\n\n\ndef test_remove_substrings():\n    assert remove_substrings('abcd') == 'abcd'\n    assert remove_substrings('ABCD') == ''\n    assert remove_substrings('abcde') == 'de'\n    assert remove_substrings('abcdef') == 'ef'\n    assert remove_substrings('abcde123') == '123'\n    assert remove_substrings('abcde123xyz') == '123xyz'\n    assert remove_substrings('123xyz') == '123'\n    assert remove_substrings('123') == ''\n    assert remove_substrings('1234567890') == ''\n    assert remove_substrings('') == ''",
    "import re\n\n\ndef remove_substrings(string):\n    return re.sub(r\"(?i)\\b[a-z]+\\b\", \"\", string)",
    "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'(?i)(?P<lowercase>([a-z]+\\s?)+)')\n    return pattern.sub('', string)\n\n\nif __name__ == '__main__':\n    string = 'Hello World, this is python'\n    print(remove_lowercase(string))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}