{
  "problem": {
    "task_id": "MBPP/262",
    "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
    "test_list": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ],
    "challenge_test_list": [],
    "problem_id": 251
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from unittest import TestCase\n\n\ndef split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list_basic(self):\n        assert split_list([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\n\n    def test_split_list_one(self):\n        assert split_list([1], 1) == ([1], [])\n\n    def test_split_list_two(self):\n        assert split_list([1], 2) == ([1], [])",
    "from typing import List, Optional\n\n\ndef split_list(input_list: List, k: int) -> Optional[List]:\n    \"\"\"Splits a list into two parts where the length of the first part is given.\n\n    Args:\n        input_list (List): Input list.\n        k (int): Length of the first part.\n\n    Returns:\n        Optional[List]: Returns two parts of the list or None if input_list is empty.\n    \"\"\"\n    if not input_list:\n        return None\n\n    return input_list[:k], input_list[k:]\n\n\nif __name__ == \"__main__\":\n    print(split_list(input_list=[1, 2, 3, 4, 5, 6], k=2))\n    print(split_list(input_list=[1, 2, 3, 4, 5, 6], k=4))\n    print(split_list(input_list=[1, 2, 3, 4, 5, 6], k=6))\n    print(split_list(input_list=[1, 2, 3, 4, 5, 6], k=0))\n    print(split_list(input_list=[1, 2, 3, 4, 5, 6], k=10))",
    "def split_list(input_list, count):\n    return input_list[:count], input_list[count:]\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(lst, length):\n    return lst[:length], lst[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([\"a\", \"b\", \"c\", \"d\", \"e\"], 3))",
    "from unittest import TestCase\n\n\ndef split_list(l, part_length):\n    \"\"\"Splits a list in two parts where the first part has a given length.\n\n    Args:\n        l: List to be split.\n        part_length: The length of the first part.\n\n    Returns:\n        Tuple of the first and second part.\n    \"\"\"\n    return l[:part_length], l[part_length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list(self):\n        assert split_list([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\n        assert split_list([1, 2, 3, 4, 5, 6], 6) == ([1, 2, 3, 4, 5, 6], [])\n        assert split_list([1, 2, 3, 4, 5, 6], 1) == ([1], [2, 3, 4, 5, 6])",
    "\"\"\"Question:\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nExample:\nInput: [1, 2, 3, 4, 5, 6], 3\nOutput: [1, 2, 3], [4, 5, 6]\n\"\"\"\n\ndef split_list(lst, k):\n    return lst[:k], lst[k:]\n\n#print(split_list([1,2,3,4,5,6], 3))\n\n\"\"\"\nThe above solution is good. But we can do it in one line using slicing.\n\"\"\"\n\ndef split_list(lst, k):\n\treturn lst[:k], lst[k:]\n\n#print(split_list([1,2,3,4,5,6], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Split given list into two parts where first part length is given.\n\n    Args:\n        given_list (List[int]): Given list to split\n        length (int): Length of first part of given list\n\n    Returns:\n        List[int]: First part of the given list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(given_list, given_length):\n    return given_list[:given_length], given_list[given_length:]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(given_list, length):\n    return given_list[:length], given_list[length:]",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Split a given list into two parts.\n\n    Args:\n        given_list (List[int]): given list\n        length (int): length of the first part of the list\n\n    Returns:\n        List[int]: the first part of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))",
    "def split_list(li, length):\n    return li[:length], li[length:]\n\n\n# print(split_list([1, 2, 3, 4, 5, 6], 3))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the keys in the dictionary.\n\"\"\"\n\n\ndef keys_list(dic):\n    return list(dic.keys())\n\n\n# print(keys_list({\"a\": 1, \"b\": 2, \"c\": 3}))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the values in the dictionary.\n\"\"\"\n\n\ndef values_list(dic):\n    return list(dic.values())\n\n\n# print(values_list({\"a\": 1, \"b\": 2, \"c\": 3}))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the key-value pairs in the dictionary.\n\"\"\"\n\n\ndef pairs_list(dic):\n    return list(dic.items())\n\n\n# print(pairs_list({\"a\": 1, \"b\": 2, \"c\": 3}))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the values in the dictionary sorted in\nascending order.\n\"\"\"\n\n\ndef values_list_sorted(dic):\n    return sorted(dic.values())\n\n\n# print(values_list_sorted({\"a\": 1, \"b\": 2, \"c\": 3}))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the keys in the dictionary sorted in\nascending order.\n\"\"\"\n\n\ndef keys_list_sorted(dic):\n    return sorted(dic.keys())\n\n\n# print(keys_list_sorted({\"a\": 1, \"b\": 2, \"c\": 3}))\n\n\n\"\"\"\nWrite a function that takes a dictionary as an argument and returns a list of all the key-value pairs in the dictionary\nsorted in ascending order by the values.\n\"\"\"",
    "def split_list(given_list, length):\n    return given_list[:length], given_list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([\"a\", \"b\", \"c\", \"d\"], 2))",
    "def split_list(my_list, n):\n    return my_list[:n], my_list[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))",
    "\"\"\"Question:\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nExample:\nInput:\nlist = [1, 2, 3, 4, 5, 6], \nk = 2\nOutput:\nlist1 = [1, 2], \nlist2 = [3, 4, 5, 6]\n\"\"\"\n\nfrom typing import List\n\ndef split_list(list, k):\n    return list[:k], list[k:]\n\n# list = [1, 2, 3, 4, 5, 6], \n# k = 2\n# Output:\n# list1 = [1, 2], \n# list2 = [3, 4, 5, 6]\n\nlist1, list2 = split_list([1, 2, 3, 4, 5, 6], 2)\nprint(list1)\nprint(list2)\n\ndef split_list(list, k):\n    return list[:k], list[k:]\n\n# list = [1, 2, 3, 4, 5, 6], \n# k = 2\n# Output:\n# list1 = [1, 2], \n# list2 = [3, 4, 5, 6]\n\nlist1, list2 = split_list([1, 2, 3, 4, 5, 6], 2)\nprint(list1)\nprint(list2)\n\ndef split_list(list, k):\n    return list[:k], list[k:]\n\n# list = [1, 2, 3, 4, 5, 6], \n# k = 2\n# Output:\n# list1 = [1, 2], \n# list2 = [3, 4, 5, 6]\n\nlist1, list2 = split_list([1, 2, 3, 4, 5, 6], 2)\nprint(list1)\nprint(list2)\n\ndef split_list(list, k):\n    return list[:k], list[k:]",
    "from typing import List, Optional\n\n\ndef split_list(numbers: List[int], length: int) -> Optional[List[List[int]]]:\n    \"\"\"Split a given list into two parts.\n\n    Args:\n        numbers (List[int]): list of numbers\n        length (int): length of the first part of the list\n\n    Returns:\n        Optional[List[List[int]]]: two parts of the list\n    \"\"\"\n    if not numbers or length > len(numbers):\n        return None\n\n    return [numbers[:length], numbers[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list([1, 2, 3, 4, 5, 6], 6))\n    print(split_list([1, 2, 3, 4, 5, 6], 1))\n    print(split_list([1, 2, 3, 4, 5, 6], 0))\n    print(split_list([1, 2, 3, 4, 5, 6], 10))",
    "def split_list(arr, n):\n    return arr[:n], arr[n:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(lst: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts where the length of the first part is given.\n\n    Args:\n        lst: list of integers\n        length: length of the first part\n\n    Returns:\n        list of lists\n    \"\"\"\n    return [lst[:length], lst[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(input_list, part_length):\n    \"\"\"Split a given list into two parts.\"\"\"\n    return input_list[:part_length], input_list[part_length:]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "def split_list(list_split: list, length: int) -> tuple:\n    \"\"\"Splits a list into two parts where the length of the first part of the list is given.\n\n    Args:\n        list_split (list): list to split\n        length (int): length of the first part of the list\n\n    Returns:\n        tuple: tuple of two lists\n    \"\"\"\n    return list_split[:length], list_split[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([\"a\", \"b\", \"c\", \"d\", \"e\"], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))",
    "from timeit import timeit\n\n\ndef split_list(arr, size):\n    return arr[:size], arr[size:]\n\n\ndef split_list_v2(arr, size):\n    return arr[:size], arr[size:]\n\n\ndef split_list_v3(arr, size):\n    return arr[:size], arr[size:]\n\n\nif __name__ == \"__main__\":\n    arr = list(range(10000000))\n    size = 999999\n\n    print(timeit('split_list(arr, size)', globals=locals(), number=100))\n    print(timeit('split_list_v2(arr, size)', globals=locals(), number=100))\n    print(timeit('split_list_v3(arr, size)', globals=locals(), number=100))",
    "def split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\n\nprint(split_list([\"a\", \"b\", \"c\", \"d\", \"e\"], 3))",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    result = [[], []]\n\n    for index, value in enumerate(given_list):\n        if index < length:\n            result[0].append(value)\n        else:\n            result[1].append(value)\n\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_list_copy(given_list: List[int], length: int) -> List[List[int]]:\n    return given_list[:length], given_list[length:]\n\n\ndef main():\n    result = split_list([1, 2, 3, 4, 5, 6], 3)\n    print(result)\n\n    result = split_list_copy([1, 2, 3, 4, 5, 6], 3)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\n# My solution\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    return given_list[:length], given_list[length:]\n\n\n# Best way\n\n\ndef split_list_best(given_list: List[int], length: int) -> List[int]:\n    return given_list[:length], given_list[length:]",
    "from unittest import TestCase\n\n\ndef split_list(input_list, length_of_first_part):\n    return input_list[:length_of_first_part], input_list[length_of_first_part:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_one(self):\n        assert split_list([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\n\n    def test_two(self):\n        assert split_list([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\n\n    def test_three(self):\n        assert split_list([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])\n\n    def test_four(self):\n        assert split_list([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5], [])\n\n    def test_five(self):\n        assert split_list([1, 2, 3, 4, 5], 0) == ([], [1, 2, 3, 4, 5])",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Splits a list in two parts.\n\n    Args:\n        given_list (List): list to split\n        length (int): length of the first part\n\n    Returns:\n        List: split list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 3))",
    "from unittest import TestCase\n\n\ndef split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list(self):\n        assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8])",
    "def split_list(elements, length):\n    return elements[:length], elements[length:]\n\n\nprint(split_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 3))",
    "from typing import List\n\n\ndef split_list(lst: List, n: int) -> List:\n    \"\"\"Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (List): The list to split.\n        n (int): The length of the first part of the list.\n\n    Returns:\n        List: The split list.\n    \"\"\"\n    return lst[:n], lst[n:]\n\n\nif __name__ == \"__main__\":\n    print(split_list(lst=[1, 2, 3, 4, 5, 6, 7], n=3))",
    "from typing import List\n\n\ndef split_list(items: List[int], length: int) -> List[List[int]]:\n    \"\"\"Split list into two parts.\n\n    Args:\n        items (List[int]): input list to split\n        length (int): length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return [items[:length], items[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Split list into two parts.\n\n    Args:\n        given_list (List): List of items.\n        length (int): Length of the first part of the list.\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n        >>> assert split_list([1, 2, 3], 2) == [[1, 2], [3]]\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(given_list, length):\n    \"\"\"Splits given list into two parts.\n\n    Args:\n        given_list (list): list to be split\n        length (int): length of the first part of the list\n\n    Returns:\n        list: first part of the list\n        list: second part of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]",
    "from unittest import TestCase\n\n\ndef split_list(array, length):\n    return array[:length], array[length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_multiple_of_length(self):\n        array = [1, 2, 3, 4, 5]\n        length = 3\n\n        part_1, part_2 = split_list(array, length)\n\n        self.assertListEqual(part_1, [1, 2, 3])\n        self.assertListEqual(part_2, [4, 5])\n\n    def test_longer_length(self):\n        array = [1, 2, 3, 4, 5]\n        length = 10\n\n        part_1, part_2 = split_list(array, length)\n\n        self.assertListEqual(part_1, [1, 2, 3, 4, 5])\n        self.assertListEqual(part_2, [])\n\n    def test_shorter_length(self):\n        array = [1, 2, 3, 4, 5]\n        length = -1\n\n        part_1, part_2 = split_list(array, length)\n\n        self.assertListEqual(part_1, [])\n        self.assertListEqual(part_2, [1, 2, 3, 4, 5])\n\n    def test_zero_length(self):\n        array = [1, 2, 3, 4, 5]\n        length = 0\n\n        part_1, part_2 = split_list(array, length)\n\n        self.assertListEqual(part_1, [])\n        self.assertListEqual(part_2, [1, 2, 3, 4, 5])",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Splits a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        given_list: list of integers\n        length: length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [1, 2, 3, 5, 6]\n    \"\"\"\n    return given_list[:length] + given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from copy import deepcopy\n\n\ndef split_list(given_list, k):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4, 5]]\n    >>> split_list([1, 2, 3, 4, 5, 6], 3)\n    [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return [\n        given_list[:k],\n        given_list[k:],\n    ]\n\n\ndef split_list_copy(given_list, k):\n    \"\"\"\n    >>> split_list_copy([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4, 5]]\n    >>> split_list_copy([1, 2, 3, 4, 5, 6], 3)\n    [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return [\n        given_list[:k],\n        deepcopy(given_list)[k:],\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_list(l, n):\n    \"\"\"Splits list into two parts, first with length n and second with length len(l) - n\"\"\"\n    return l[:n], l[n:]\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(split_list(list_1, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list: the list to split\n        length: the length of the first part of the list\n\n    Returns:\n        A list containing the two parts of the given list.\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 3))",
    "from typing import List, Optional\n\n\ndef split_list(given_list: List, length: int) -> Optional[List]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list: a list to split\n        length: the length of the first part of the list\n\n    Returns:\n        a list of two parts\n    \"\"\"\n    if not given_list or length > len(given_list) or length <= 0:\n        return None\n\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))\n    print(split_list([1, 2, 3, 4, 5], 6))\n    print(split_list([1, 2, 3, 4, 5], 10))\n    print(split_list([1, 2, 3, 4, 5], -1))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], k: int) -> List[int]:\n    \"\"\"Splits a given list into two parts where the length of the first part is k.\n\n    Args:\n        given_list (List[int]): list to split\n        k (int): length of the first part\n\n    Returns:\n        List[int]: list of elements in the first part\n    \"\"\"\n    return given_list[:k], given_list[k:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))",
    "from unittest import TestCase\n\n\ndef split_list(given_list, length):\n    return given_list[:length], given_list[length:]\n\n\nclass TestSplitList(TestCase):\n\n    data = [\n        (([1, 2, 3, 4, 5], 3), ([1, 2, 3], [4, 5])),\n        (([1, 2, 3, 4, 5], 0), ([], [1, 2, 3, 4, 5])),\n        (([1, 2, 3, 4, 5], 1), ([1], [2, 3, 4, 5])),\n        (([1, 2, 3, 4, 5], 2), ([1, 2], [3, 4, 5])),\n        (([1, 2, 3, 4, 5], 5), ([1, 2, 3, 4, 5], [])),\n        (([1, 2, 3, 4, 5], 6), ([1, 2, 3, 4, 5], [])),\n    ]\n\n    def test_split_list(self):\n        # TODO: implement your unittest here\n        for input_output, given_list, length in self.data:\n            self.assertEqual(input_output, split_list(given_list, length))",
    "from typing import List\n\n\ndef split_list(nums: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        nums (List[int]): list to be split.\n        length (int): length of the first part of the list.\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4, 5]]\n        >>> assert split_list([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n    \"\"\"\n    return [nums[:length], nums[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "from typing import List\n\n\ndef split_list(items: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts of given length.\n\n    Args:\n        items: list of integers\n        length: length of first part of list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4, 5]]\n    \"\"\"\n\n    return [items[:length], items[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))",
    "def split_list(given_list, length):\n    return given_list[:length], given_list[length:]",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Split list in two parts by given length.\n\n    Args:\n        given_list: list to split\n        length: length of the first part\n\n    Returns:\n        list with two parts\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2, 3, 4], [5, 6, 7, 8, 9]]\n    \"\"\"\n    return [given_list[:length], given_list[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))",
    "from typing import List\n\n\ndef split_list(nums: List[int], length: int) -> List[int]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        nums (List[int]): list to split\n        length (int): length of the first part\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6], 3)\n        [[1, 2, 3], [4, 5, 6]]\n\n        >>> split_list([1, 2, 3, 4, 5, 6], 6)\n        [[1, 2, 3, 4, 5, 6], []]\n\n        >>> split_list([1, 2, 3, 4, 5, 6], 0)\n        [[], [1, 2, 3, 4, 5, 6]]\n\n        >>> split_list([1, 2, 3, 4, 5, 6], 10)\n        [[1, 2, 3, 4, 5, 6], []]\n    \"\"\"\n    return nums[:length], nums[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(given_list, length):\n    return given_list[:length], given_list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits given list into two parts.\n\n    Args:\n        given_list (List[int]): given list\n        length (int): length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list (List[int]): The list to be split\n        length (int): The length of the first part of the list\n\n    Returns:\n        List[List[int]]: The split list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(list_in: list, len_of_first_part: int) -> tuple:\n    \"\"\"Splits a list into two parts where the length of the first part of the list is given.\n\n    Args:\n        list_in (list): list to split\n        len_of_first_part (int): length of the first part of the list\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6, 7], 3)\n        ([1, 2, 3], [4, 5, 6, 7])\n    \"\"\"\n    return list_in[:len_of_first_part], list_in[len_of_first_part:]\n\n\ndef split_list_opt(list_in: list, len_of_first_part: int) -> tuple:\n    \"\"\"Splits a list into two parts where the length of the first part of the list is given (optimal version).\n\n    Args:\n        list_in (list): list to split\n        len_of_first_part (int): length of the first part of the list\n\n    Examples:\n        >>> split_list_opt([1, 2, 3, 4, 5, 6, 7], 3)\n        ([1, 2, 3], [4, 5, 6, 7])\n    \"\"\"\n    return list_in[:len_of_first_part], list_in[len_of_first_part:]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))\n    print(split_list_opt([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list(given_list, length):\n    return given_list[:length], given_list[length:]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\n\ndef main():\n    print(split_list([\"a\", \"b\", \"c\", \"d\", \"e\"], 3))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    if not given_list:\n        return []\n\n    if length == len(given_list):\n        return [given_list]\n\n    if length == 0:\n        return [[]]\n\n    if length > len(given_list):\n        return [[], given_list]\n\n    return given_list[:length], given_list[length:]\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_list2(given_list: List[int], length: int) -> List[List[int]]:\n    if not given_list:\n        return []\n\n    if length == len(given_list):\n        return [given_list]\n\n    if length == 0:\n        return [[]]\n\n    if length > len(given_list):\n        return [[], given_list]\n\n    result = [[], []]\n\n    for i in given_list:\n        if length == 0:\n            result[1].append(i)\n        else:\n            result[0].append(i)\n            length -= 1\n\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_list3(given_list: List[int], length: int) -> List[List[int]]:\n    if not given_list:\n        return []\n\n    if length == len(given_list):\n        return [given_list]\n\n    if length == 0:\n        return [[]]\n\n    if length > len(given_list):\n        return [[], given_list]\n\n    result = [[], []]\n\n    for i in given_list:\n        if length == 0:\n            result[1].append(i)\n        elif length == 1:\n            result[0].append(i)\n        else:\n            result[0].append(i)\n            length -=",
    "from copy import deepcopy\n\n\ndef split_list(lst, k):\n    \"\"\"Splits list into two parts.\n\n    Args:\n        lst: list of numbers\n        k: length of the first part of the list\n\n    Returns:\n        list1: the first part of the list\n        list2: the second part of the list\n    \"\"\"\n    list1 = deepcopy(lst[:k])\n    list2 = deepcopy(lst[k:])\n    return list1, list2\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6], 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef split_list(lst: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        lst (List[int]): list of integers\n        length (int): length of the first part of the list\n\n    Returns:\n        List[List[int]]: splitted list\n    \"\"\"\n    return [lst[:length], lst[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "from copy import deepcopy\n\n\n# my solution\n\n\ndef split_list(lst, k):\n    res = []\n\n    for i in range(k):\n        res.append(lst[i])\n\n    for i in range(k, len(lst)):\n        res.append(lst[i])\n\n    return res\n\n\n# best solution\n\n\ndef split_list_best(lst, k):\n    return lst[:k], lst[k:]\n\n\n# tests\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ndef test_split_list():\n    assert split_list(lst, 3) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert split_list(lst, 5) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert split_list(lst, 1) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert split_list(lst, 8) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ndef test_split_list_best():\n    assert split_list_best(lst, 3) == ([1, 2, 3], [4, 5, 6, 7, 8])\n    assert split_list_best(lst, 5) == ([1, 2, 3, 4, 5], [6, 7, 8])\n    assert split_list_best(lst, 1) == ([1], [2, 3, 4, 5, 6, 7, 8])\n    assert split_list_best(lst, 8) == ([1, 2, 3, 4, 5, 6, 7, 8], [])",
    "from copy import deepcopy\n\n\ndef split_list(given_list, length):\n    if length > len(given_list):\n        return\n    if length == 0:\n        return []\n    if length == len(given_list):\n        return given_list\n    if length == 1:\n        return [given_list[0], given_list[1:]]\n\n    left_list = deepcopy(given_list)\n    left_list = left_list[:length]\n\n    right_list = deepcopy(given_list)\n    right_list = right_list[length:]\n\n    return [left_list, right_list]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5], 3))\n    print(split_list([1, 2, 3, 4, 5], 0))\n    print(split_list([1, 2, 3, 4, 5], 1))\n    print(split_list([1, 2, 3, 4, 5], 5))\n    print(split_list([1, 2, 3, 4, 5], 6))",
    "from typing import List\n\n\n# My solution\n\n\ndef split_list(arr: List[int], length: int) -> List[List[int]]:\n    return [arr[:length], arr[length:]]\n\n\n# Best ways\n\n\ndef split_list_best(arr: List[int], length: int) -> List[List[int]]:\n    return [arr[:length], arr[length:]]",
    "from typing import List\n\n\n# my solution\ndef split_list(given_list: List, parts: int) -> List:\n    if not isinstance(given_list, list):\n        raise ValueError(\"given_list is not a list.\")\n    if not isinstance(parts, int):\n        raise ValueError(\"parts is not an integer.\")\n    if parts <= 0:\n        raise ValueError(\"parts can't be smaller or equal to 0\")\n\n    if len(given_list) < parts:\n        raise ValueError(\"parts can't be bigger than the given list.\")\n\n    return [given_list[:parts], given_list[parts:]]\n\n\n# best solution\ndef split_list_b(given_list: List, parts: int) -> List:\n    if not isinstance(given_list, list):\n        raise ValueError(\"given_list is not a list.\")\n    if not isinstance(parts, int):\n        raise ValueError(\"parts is not an integer.\")\n    if parts <= 0:\n        raise ValueError(\"parts can't be smaller or equal to 0\")\n\n    if len(given_list) < parts:\n        raise ValueError(\"parts can't be bigger than the given list.\")\n\n    return [given_list[:parts], given_list[parts:]]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))\nprint(split_list_b([1, 2, 3, 4, 5, 6], 3))",
    "from copy import deepcopy\n\n\ndef split_list(given_list, length):\n    if length > len(given_list):\n        raise ValueError(\"Length cannot be greater than list length\")\n\n    copy_list = deepcopy(given_list)\n\n    return copy_list[:length], copy_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(lst, length):\n    return lst[:length], lst[length:]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5], 2))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list: list to split\n        length: length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4, 5]]\n    \"\"\"\n    return [given_list[:length], given_list[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))",
    "from unittest import TestCase\n\n\ndef split_list(given_list, length):\n    return given_list[:length], given_list[length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list(self):\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6, 7, 8], 3),\n            ([1, 2, 3], [4, 5, 6, 7, 8])\n        )",
    "from unittest import TestCase\n\n\ndef split_list(list_to_split, split_length):\n    return list_to_split[:split_length], list_to_split[split_length:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list(self):\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6], 3),\n            ([1, 2, 3], [4, 5, 6])\n        )\n\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6, 7], 3),\n            ([1, 2, 3], [4, 5, 6, 7])\n        )\n\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6, 7], 0),\n            ([], [1, 2, 3, 4, 5, 6, 7])\n        )\n\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6, 7], 7),\n            ([1, 2, 3, 4, 5, 6, 7], [])\n        )\n\n        self.assertEqual(\n            split_list([1, 2, 3, 4, 5, 6, 7], 8),\n            ([1, 2, 3, 4, 5, 6, 7], [])\n        )",
    "from typing import List\n\n\ndef split_list(input_list: List[int], length: int) -> List[int]:\n    \"\"\"Split list into two parts.\n\n    Args:\n        input_list (List[int]): list to split\n        length (int): length of the first part\n\n    Returns:\n        List[int]: two parts of the list\n    \"\"\"\n    return input_list[:length], input_list[length:]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
    "from copy import deepcopy\n\n\ndef split_list(input_list, length):\n    \"\"\"Splits a list into two parts.\"\"\"\n    new_list = deepcopy(input_list)\n    for index in range(length, len(new_list)):\n        del new_list[length]\n    return new_list\n\n\ndef main():\n    \"\"\"Print the result of the split_list function.\"\"\"\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Splits the list in two parts.\n\n    Args:\n        given_list: the list to split\n        length: the length of the first part of the list\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6], 3)\n        [[1, 2, 3], [4, 5, 6]]\n        >>> split_list([1, 2, 3, 4, 5, 6], 4)\n        [[1, 2, 3, 4], [5, 6]]\n    \"\"\"\n    return [given_list[:length], given_list[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Split a given list into two parts.\n\n    Args:\n        given_list (List): the list to be split\n        length (int): the length of the first part of the list\n\n    Returns:\n        List: the first part of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(items, n):\n    return items[:n], items[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Splits a list into two parts of given length.\n\n    Args:\n        given_list: a list of integers\n        length: an integer indicating the length of the first part\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 6, 7]\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7], 4) == [1, 2, 3, 4, 5]\n    \"\"\"\n    return given_list[:length] + given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))",
    "from copy import deepcopy\n\n\ndef split_list(given_list, length):\n    if length >= len(given_list):\n        return given_list\n\n    new_list = deepcopy(given_list)\n    return new_list[:length], new_list[length:]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6], 2))\n    print(split_list([1, 2, 3, 4, 5, 6], 4))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list (List[int]): List to split\n        length (int): The length of the first part of the list\n\n    Returns:\n        List[List[int]]: The first part of the list and the second part of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(nums: list, k: int) -> list:\n    \"\"\"Splits a list into two parts where the length of the first part is given.\n\n    Args:\n        nums (list): list to split\n        k (int): length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return nums[:k], nums[k:]\n\n\ndef split_list_pythonic(nums: list, k: int) -> list:\n    \"\"\"Splits a list into two parts where the length of the first part is given.\n\n    Args:\n        nums (list): list to split\n        k (int): length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return nums[:k], nums[k:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list_pythonic([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(given_list, k):\n    return given_list[:k], given_list[k:]\n\n\ndef split_list_alt(given_list, k):\n    return given_list[:k], given_list[k:]\n\n\ndef main():\n    print(\"Partition a list into two parts:\")\n    given_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Given list:\", given_list)\n    k = 4\n    print(\"k:\", k)\n    print(\"Splitted list:\", split_list(given_list, k))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List, Tuple\n\n\ndef split_list(given_list: List, length: int) -> Tuple[List, List]:\n    \"\"\"Splits a given list into two parts of the given length.\n\n    Args:\n        given_list (List): list to be split\n        length (int): length of the first part of the list\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5], 2)\n        ([1, 2], [3, 4, 5])\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5], 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list(nums, length):\n    \"\"\"\n    >>> split_list([1,2,3,4,5,6,7,8,9,10], 3)\n    [[1, 2, 3], [4, 5, 6, 7, 8, 9, 10]]\n    >>> split_list([1,2,3,4,5,6,7,8,9,10], 10)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], []]\n    >>> split_list([1,2,3,4,5,6,7,8,9,10], 4)\n    [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\n    >>> split_list([1,2,3,4,5,6,7,8,9,10], 1)\n    [[1], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\n    >>> split_list([1,2,3,4,5,6,7,8,9,10], 0)\n    [[], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n    \"\"\"\n    return nums[:length], nums[length:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from copy import deepcopy\n\n\n# my solution\ndef split_list(to_split, size):\n    first_part = to_split[:size]\n    second_part = to_split[size:]\n    return first_part, second_part\n\n\n# best solution\ndef split_list_best(to_split, size):\n    return to_split[:size], to_split[size:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))\nprint(split_list_best([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\n# my solution\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    return given_list[:length], given_list[length:]\n\n\n# other solutions\ndef split_list_other_solution(given_list: List[int], length: int) -> List[int]:\n    return [given_list[:length], given_list[length:]]\n\n\n# solution 2\ndef split_list_other_solution_2(given_list: List[int], length: int) -> List[int]:\n    return given_list[0:length], given_list[length:]",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[int]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list (List[int]): list to split\n        length (int): length of the first part of the list\n\n    Returns:\n        List[int]: first part of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split(list_to_split, length_first_part):\n    return list_to_split[:length_first_part], list_to_split[length_first_part:]\n\n\nif __name__ == '__main__':\n    print(split([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(source: List, length: int) -> List:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        source (List): Source list.\n        length (int): Length of the first part of the list.\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5], 3)\n        [[1, 2, 3], [4, 5]]\n    \"\"\"\n    return [source[:length], source[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(li, n):\n    return li[:n], li[n:]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef split_list(given_list: List[int], given_length: int) -> List[int]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        given_list (List[int]): The list to be split.\n        given_length (int): The length of the first part of the split.\n\n    Returns:\n        List[int]: The split list.\n    \"\"\"\n\n    return given_list[:given_length], given_list[given_length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list (List): the list to be splitted\n        length (int): the length of the first part of the list\n\n    Returns:\n        List: the two parts of the list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "from typing import List\n\n\ndef split_list(items: List[int], k: int) -> List[int]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        items: List of items.\n        k: The length of the first part of the list.\n\n    Returns:\n        A list of items.\n    \"\"\"\n    return items[:k], items[k:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))",
    "# This is the interface that allows for creating\n# different sorts of workers, showing the way the\n# worker can be used.\nclass Worker(object):\n    def __init__(self, name, work_callable):\n        self.name = name\n        self.work_callable = work_callable\n\n    def do_work(self):\n        self.work_callable(self.name)\n\n\ndef split_list(given_list, length_first_part):\n    return given_list[:length_first_part], given_list[length_first_part:]\n\n\n# This class defines a concrete worker to perform action\n# via the interface.\nclass SplitListWorker(Worker):\n    def __init__(self, name):\n        Worker.__init__(self, name, self.do_work)\n\n    def do_work(self):\n        print(\"{} is working.\".format(self.name))\n\n\nif __name__ == '__main__':\n    names = ['Jim', 'Pam', 'Kevin', 'Kelly', 'Nick', 'Erin', 'Ivan']\n    print(split_list(names, 3))\n    workers = [SplitListWorker(name) for name in names]\n    for worker in workers:\n        worker.do_work()",
    "def split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5], 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_list(length, array):\n    return array[:length], array[length:]\n\n\ndef main():\n    print(split_list(3, [1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()",
    "from copy import deepcopy\n\n\n# my solution\ndef split_list(lst, length):\n    return [deepcopy(lst[:length]), deepcopy(lst[length:])]\n\n\n# best solution\ndef split_list_best(lst, length):\n    return lst[:length], lst[length:]",
    "from typing import List, Optional\n\n\ndef split_list(given_list: List, length: int) -> Optional[List]:\n    \"\"\"Splits the given list into two parts.\n\n    Args:\n        given_list: list to be split\n        length: length of the first part of the list\n\n    Returns:\n        Optional[List]: list with two parts or None\n    \"\"\"\n    if not isinstance(given_list, list):\n        return None\n    if not isinstance(length, int):\n        return None\n    if length < 0:\n        return None\n\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))\n    print(split_list([\"a\", \"b\", \"c\", \"d\"], 3))\n    print(split_list([], 2))\n    print(split_list([1, 2, 3, 4, 5], -1))\n    print(split_list([1, 2, 3, 4, 5], 10))\n    print(split_list(1, 10))\n    print(split_list([\"a\", \"b\", \"c\", \"d\"], \"3\"))",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_list(nums: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        nums: A list of integers.\n        length: The length of the first part.\n\n    Returns:\n        The two parts of the list.\n    \"\"\"\n    return [nums[:length], nums[length:]]\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_list_pythonic(nums: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a list into two parts.\n\n    Args:\n        nums: A list of integers.\n        length: The length of the first part.\n\n    Returns:\n        The two parts of the list.\n    \"\"\"\n    return [nums[:length], nums[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list_pythonic([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\n# My solution\n\n\ndef split_list(given_list: List[int], length_first_part: int) -> List[List[int]]:\n    return [given_list[:length_first_part], given_list[length_first_part:]]\n\n\n# Best way\n\n\ndef split_list_best(given_list: List[int], length_first_part: int) -> List[List[int]]:\n    return [given_list[:length_first_part], given_list[length_first_part:]]",
    "from typing import List\n\n\ndef split_list(given_list: List, length: int) -> List:\n    \"\"\"Splits a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        given_list (List): The list to be split.\n        length (int): The length of the first part of the list.\n\n    Returns:\n        List: The first part of the list.\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(list_a: List, length: int) -> List:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        list_a: The list to be split.\n        length: The length of the first part of the list.\n\n    Returns:\n        The two parts of the list.\n    \"\"\"\n    return list_a[:length], list_a[length:]\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(list_a, 5))",
    "from unittest import TestCase\n\n\ndef split_list(input_list, k):\n    return input_list[:k], input_list[k:]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list_empty(self):\n        self.assertEqual(split_list([], 0), ([], []))\n\n    def test_split_list_single(self):\n        self.assertEqual(split_list([1], 0), ([], [1]))\n\n    def test_split_list_even(self):\n        self.assertEqual(split_list([1, 2, 3, 4, 5], 3), ([1, 2, 3], [4, 5]))\n\n    def test_split_list_odd(self):\n        self.assertEqual(split_list([1, 2, 3, 4, 5], 4), ([1, 2, 3, 4], [5]))\n\n    def test_split_list_invalid(self):\n        self.assertEqual(split_list([1, 2, 3, 4, 5], -1), ([], [1, 2, 3, 4, 5]))",
    "def split_list(items, n):\n    return items[:n], items[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits the list into two parts.\n\n    Args:\n        given_list: list to split\n        length: length of the first part of the list\n\n    Returns:\n        list: splitted list\n    \"\"\"\n    return given_list[:length], given_list[length:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(input_list, length):\n    return input_list[:length], input_list[length:]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "from typing import List\n\n\ndef split_list(given_list: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits a given list into two parts.\n\n    Args:\n        given_list: list of integers\n        length: length of the first part of the list\n\n    Returns:\n        list of two lists\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6], 3)\n        [[1, 2, 3], [4, 5, 6]]\n        >>> split_list([1, 2, 3, 4, 5, 6], 6)\n        [[1, 2, 3, 4, 5, 6], []]\n        >>> split_list([1, 2, 3, 4, 5, 6], 10)\n        [[1, 2, 3, 4, 5, 6], []]\n    \"\"\"\n    return [given_list[:length], given_list[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "from typing import List\n\n\ndef split_list(lst: List[int], length: int) -> List[List[int]]:\n    \"\"\"Splits list into two parts.\n\n    Args:\n        lst: list to split\n        length: length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n    \"\"\"\n    return [lst[:length], lst[length:]]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(my_list, split_length):\n    if len(my_list) < split_length:\n        return my_list, []\n    else:\n        return my_list[:split_length], my_list[split_length:]\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7]\n    list_2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(split_list(list_1, 3))\n    print(split_list(list_2, 3))\n    print(split_list(list_3, 3))\n    print(split_list(list_4, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef split_list(lst: List[int], part_length: int) -> List[int]:\n    \"\"\"Splits a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst: list of integers\n        part_length: the length of the first part of the list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5], 2) == [1, 2, 3]\n        >>> assert split_list([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4]\n        >>> assert split_list([1, 2, 3, 4, 5], 1) == [1]\n        >>> assert split_list([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    \"\"\"\n    return lst[:part_length]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 2))\n    print(split_list([1, 2, 3, 4, 5], 3))\n    print(split_list([1, 2, 3, 4, 5], 1))\n    print(split_list([1, 2, 3, 4, 5], 6))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}