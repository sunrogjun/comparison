{
  "problem": {
    "task_id": "MBPP/227",
    "prompt": "Write a function to find minimum of three numbers.",
    "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
    "test_list": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ],
    "challenge_test_list": [],
    "problem_id": 216
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def min_of_three(x, y, z):\n    \"\"\"\n    >>> min_of_three(3, 4, 5)\n    3\n    \"\"\"\n    return x if x <= y and x <= z else y if y <= z else z\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_min(x, y, z):\n    if x < y:\n        if x < z:\n            return x\n        else:\n            return z\n    else:\n        if y < z:\n            return y\n        else:\n            return z\n\n\nif __name__ == '__main__':\n    print(find_min(10, 20, 30))",
    "def minimum(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n\n    print(\"Minimum of three numbers is\", minimum(a, b, c))",
    "def minimum_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nprint(minimum_of_three(1, 2, 3))\nprint(minimum_of_three(1, 3, 2))\nprint(minimum_of_three(3, 2, 1))",
    "def find_min(a, b, c):\n    return min(a, b, c)\n\nif __name__ == '__main__':\n    print(find_min(3, 4, 5))",
    "def min3(x, y, z):\n    return min(min(x, y), z)\n\n\nif __name__ == \"__main__\":\n    print(min3(3, 6, 9))",
    "def min_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nif __name__ == \"__main__\":\n    print(min_three(5, 4, 6))",
    "def find_min(a, b, c):\n    \"\"\"\n    This function finds the minimum number.\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    return min(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    print(f\"Minimum of {a}, {b}, {c} is {find_min(a, b, c)}\")\n\n\nif __name__ == '__main__':\n    main()",
    "def minimum(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nif __name__ == '__main__':\n    a = int(input('Enter first number: '))\n    b = int(input('Enter second number: '))\n    c = int(input('Enter third number: '))\n    print(f'Minimum of {a}, {b} and {c} is {minimum(a, b, c)}')",
    "def min_of_three(a, b, c):\n    \"\"\"\n    Return minimum of three numbers.\n    >>> min_of_three(1, 2, 3)\n    1\n    >>> min_of_three(4, 3, 2)\n    2\n    >>> min_of_three(4, 3, 2) == min_of_three(4, 2, 3) == min_of_three(2, 3, 4) == min_of_three(2, 4, 3) == min_of_three(3, 2, 4) == min_of_three(3, 4, 2)\n    True\n    \"\"\"\n    return a if a < b and a < c else (b if b < c else c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(1)\ndef find_minimum(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\ndef main():\n    print(find_minimum(1, 2, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def minimum(a, b, c):\n    if a < b:\n        return a if a < c else c\n    else:\n        return b if b < c else c\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n\n    print(f\"Minimum of {a}, {b}, {c} is {minimum(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_minimum(a, b, c):\n    return min(a, b, c)\n\n\ndef test_find_minimum():\n    assert find_minimum(1, 2, 3) == 1\n    assert find_minimum(1, 3, 2) == 1\n    assert find_minimum(2, 1, 3) == 1\n    assert find_minimum(2, 3, 1) == 1\n    assert find_minimum(3, 1, 2) == 1\n    assert find_minimum(3, 2, 1) == 1\n\n\nif __name__ == \"__main__\":\n    test_find_minimum()",
    "def minimum_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n\ndef minimum_of_three_v2(a, b, c):\n    return min(a, b, c)\n\n\ndef main():\n    print(minimum_of_three(3, 4, 5))\n    print(minimum_of_three_v2(3, 4, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# This is the function which takes 3 numbers as input and returns the minimum of the 3 numbers.\ndef minOf3(x, y, z):\n    if x < y and x < z:\n        return x\n    elif y < z:\n        return y\n    else:\n        return z\n\n\n# Driver code\nif __name__ == \"__main__\":\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    print(minOf3(x, y, z))",
    "# O(1)\ndef find_minimum(a, b, c):\n    return min(a, b, c)\n\n\n# O(1)\ndef find_minimum_2(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c",
    "def minimum(a, b, c):\n    if a < b:\n        return a if a < c else c\n    return b if b < c else c\n\n\ndef minimum_2(a, b, c):\n    return min(a, b, c)\n\n\ndef minimum_3(a, b, c):\n    return a if a < b and a < c else b if b < c else c\n\n\nif __name__ == \"__main__\":\n    print(minimum(10, 20, 30))\n    print(minimum_2(10, 20, 30))\n    print(minimum_3(10, 20, 30))",
    "def find_minimum(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nprint(\"Minimum value is: \", find_minimum(a,b,c))",
    "def minimum_of_three(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == '__main__':\n    print(minimum_of_three(3, 5, 1))",
    "def find_min(a, b, c):\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n\nprint(find_min(2, 4, 1))",
    "def minimum_of_three(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Return the minimum of three numbers.\n    >>> minimum_of_three(1, 2, 3)\n    1\n    >>> minimum_of_three(1, 2, 2)\n    1\n    >>> minimum_of_three(1, 1, 1)\n    1\n    >>> minimum_of_three(1, -2, 3)\n    -2\n    >>> minimum_of_three(-1, -2, -3)\n    -3\n    >>> minimum_of_three(0, 0, 0)\n    0\n    >>> minimum_of_three(1, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: minimum_of_three() takes exactly 3 arguments (2 given)\n    >>> minimum_of_three(1, 2, 3, 4)\n    Traceback (most recent call last):\n        ...\n    TypeError: minimum_of_three() takes 3 positional arguments but 4 were given\n    \"\"\"\n    if x < y:\n        if x < z:\n            return x\n        else:\n            return z\n    else:\n        if y < z:\n            return y\n        else:\n            return z\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def minimum_of_three(a, b, c):\n    return a if a <= b and a <= c else b if b <= c else c\n\ndef test_cases():\n    assert minimum_of_three(1, 2, 3) == 1\n    assert minimum_of_three(1, 2, 3) != 2\n    assert minimum_of_three(1, 2, 3) != 3\n    assert minimum_of_three(3, 2, 1) == 1\n    assert minimum_of_three(3, 2, 1) != 2\n    assert minimum_of_three(3, 2, 1) != 3\n    assert minimum_of_three(1, 3, 2) == 1\n    assert minimum_of_three(1, 3, 2) != 3\n    assert minimum_of_three(1, 3, 2) != 2\n    assert minimum_of_three(2, 1, 3) == 1\n    assert minimum_of_three(2, 1, 3) != 3\n    assert minimum_of_three(2, 1, 3) != 2\n    assert minimum_of_three(2, 3, 1) == 1\n    assert minimum_of_three(2, 3, 1) != 3\n    assert minimum_of_three(2, 3, 1) != 2\n    assert minimum_of_three(3, 1, 2) == 1\n    assert minimum_of_three(3, 1, 2) != 2\n    assert minimum_of_three(3, 1, 2) != 2\n    assert minimum_of_three(3, 2, 1) == 1\n    assert minimum_of_three(3, 2, 1) != 2\n    assert minimum_of_three(3, 2, 1) != 3\n\nif __name__ == '__main__':\n    test_cases()\n    print(\"Everything passed\")",
    "def find_min(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(find_min(a, b, c))",
    "def find_min(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == '__main__':\n    print(find_min(1, 2, 3))",
    "def minimum(a, b, c):\n    return min(a, b, c)\n\nprint(minimum(3, 4, 5))\nprint(minimum(5, 4, 3))\nprint(minimum(3, 5, 4))\nprint(minimum(4, 3, 5))\nprint(minimum(4, 5, 3))\nprint(minimum(5, 3, 4))",
    "def minimum_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nif __name__ == \"__main__\":\n    a, b, c = 10, 20, 30\n    print(minimum_of_three(a, b, c))",
    "# This is the function to find minimum of three numbers\ndef minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\n# This is the main program\ndef main():\n    print(\"Enter three numbers:\")\n    a = float(input(\"Number 1: \"))\n    b = float(input(\"Number 2: \"))\n    c = float(input(\"Number 3: \"))\n    print(\"The minimum of three numbers is\", minimum(a, b, c))\n\n\nmain()  # Call the main function",
    "def find_minimum(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    print(find_minimum(2, 3, 1))",
    "# O(1)\ndef minimum_of_three_numbers(a, b, c):\n    return min(a, b, c)\n\n\n# O(n)\ndef minimum_of_three_numbers_v2(a, b, c):\n    return a if a < b else b if b < c else c",
    "def min_of_three(a, b, c):\n    return a if a <= b and a <= c else b if b <= c else c\n\n\nif __name__ == \"__main__\":\n    print(min_of_three(1, 2, 3))",
    "def min_of_three(a, b, c):\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n\n\ndef min_of_three_v2(a, b, c):\n    return min(a, b, c)\n\n\ndef min_of_three_v3(a, b, c):\n    return min(min(a, b), c)\n\n\nif __name__ == \"__main__\":\n    a = 10\n    b = 20\n    c = 30\n    print(f\"min_of_three(a, b, c): {min_of_three(a, b, c)}\")\n    print(f\"min_of_three_v2(a, b, c): {min_of_three_v2(a, b, c)}\")\n    print(f\"min_of_three_v3(a, b, c): {min_of_three_v3(a, b, c)}\")",
    "def minimum_of_three(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == '__main__':\n    print(minimum_of_three(2, 3, 1))",
    "def min_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nprint(min_three(1, 2, 3))\nprint(min_three(1, 3, 2))\nprint(min_three(2, 1, 3))\nprint(min_three(2, 3, 1))\nprint(min_three(3, 1, 2))\nprint(min_three(3, 2, 1))",
    "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == '__main__':\n    print(min_of_three(3, 4, 5))",
    "def min(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print(\"Minimum value is:\", min(3, 2, 1))",
    "def find_min(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Return the minimum of three numbers.\n\n    >>> find_min(1, 2, 3)\n    1\n    >>> find_min(5, 4, 3)\n    3\n    \"\"\"\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_of_three(a, b, c):\n    if a < b:\n        return min(a, c)\n    else:\n        return min(b, c)",
    "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    print(min_of_three(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nprint(minimum(1, 2, 3))",
    "def min_of_three(num1: int, num2: int, num3: int) -> int:\n    \"\"\"\n    >>> min_of_three(1, 2, 3)\n    1\n    >>> min_of_three(1, 2, 1)\n    1\n    >>> min_of_three(1, 1, 1)\n    1\n    \"\"\"\n    if num1 < num2 and num1 < num3:\n        return num1\n    if num2 < num1 and num2 < num3:\n        return num2\n    return num3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_minimum(num1, num2, num3):\n    if num1 < num2 and num1 < num3:\n        return num1\n    elif num2 < num1 and num2 < num3:\n        return num2\n    else:\n        return num3\n\n\nif __name__ == \"__main__\":\n    print(find_minimum(1, 2, 3))\n    print(find_minimum(1, 3, 2))\n    print(find_minimum(2, 1, 3))\n    print(find_minimum(2, 3, 1))\n    print(find_minimum(3, 1, 2))\n    print(find_minimum(3, 2, 1))",
    "# This is the function\ndef minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n\n\n# This is the main program\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n\n    print(\"The minimum of the three numbers is\", minimum(a, b, c))",
    "def minimum_of_three(a, b, c):\n    if a <= b <= c:\n        return a\n    elif c <= b <= a:\n        return c\n    else:\n        return b\n\n\nif __name__ == \"__main__\":\n    print(minimum_of_three(3, 4, 5))\n    print(minimum_of_three(5, 4, 3))\n    print(minimum_of_three(3, 3, 3))",
    "def find_min(a, b, c):\n    return min(a, b, c)\n\ndef test_cases():\n    assert find_min(1, 2, 3) == 1\n    assert find_min(4, 5, 6) == 4\n    assert find_min(7, 8, 9) == 7\n    print(\"Test Success!\")\n\ntest_cases()",
    "def minimum(x, y, z):\n    return min(x, y, z)\n\n\nif __name__ == \"__main__\":\n    print(minimum(3, 4, 5))",
    "def minimum_of_three(a, b, c):\n    \"\"\"Return minimum of three numbers.\"\"\"\n    return min(a, b, c)",
    "# O(1) time | O(1) space\ndef find_minimum_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
    "# This is the function from the book.\ndef minimum(x, y, z):\n    return x if x < y else y if y < z else z\n\n\n# This is the same function, but using a ternary expression.\ndef minimum2(x, y, z):\n    return x if x < y and x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'and'.\ndef minimum3(x, y, z):\n    return x if x < y and x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum4(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum5(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum6(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum7(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum8(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum9(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function, but using a ternary expression and 'or'.\ndef minimum10(x, y, z):\n    return x if x < y or x < z else y if y < z else z\n\n\n# This is the same function",
    "def find_min(a, b, c):\n    if a < b:\n        return a if a < c else c\n    else:\n        return b if b < c else c\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(find_min(a, b, c))",
    "def min_of_three(a, b, c):\n    \"\"\"\n    Return the minimum of three numbers.\n\n    >>> min_of_three(1, 2, 3)\n    1\n    >>> min_of_three(1, 2, 2)\n    2\n    >>> min_of_three(1, 1, 1)\n    1\n    \"\"\"\n    if a < b and a < c:\n        return a\n    if b < c:\n        return b\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    print(f\"Minimum of {a}, {b}, {c} is {find_minimum(a, b, c)}.\")",
    "# This is the function which returns the minimum of three numbers\ndef find_min(a, b, c):\n    return min(a, b, c)\n\n\n# Driver code\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nprint(\"Minimum of three numbers is:\", find_min(a, b, c))",
    "def minimum(x, y, z):\n    if x < y:\n        if x < z:\n            return x\n        else:\n            return z\n    else:\n        if y < z:\n            return y\n        else:\n            return z\n\n\nprint(minimum(5, 6, 7))",
    "# This is the function\ndef minimum(a, b, c):\n    \"\"\"This is the docstring.\"\"\"\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    return c\n\n\n# This is the test\nprint(minimum(3, 2, 1))",
    "def min_of_three(a, b, c):\n    return min(a, min(b, c))\n\n\nif __name__ == \"__main__\":\n    print(min_of_three(1, 2, 3))",
    "def find_minimum(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    print(find_minimum(3, 2, 1))",
    "# Using if-else statement\ndef min_if(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\n# Using ternary operator\ndef min_ternary(a, b, c):\n    return a if a < b and a < c else b if b < c else c\n\n\n# Using min function\ndef min_min(a, b, c):\n    return min(a, b, c)",
    "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n\ndef main():\n    print(\"Minimum of three numbers\")\n\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n\n    min_value = min_of_three(a, b, c)\n\n    print(\"Minimum of three numbers is:\", min_value)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_of_three(num1, num2, num3):\n    if num1 < num2:\n        if num1 < num3:\n            return num1\n        else:\n            return num3\n    else:\n        if num2 < num3:\n            return num2\n        else:\n            return num3\n\n\nprint(min_of_three(1, 2, 3))\nprint(min_of_three(1, 3, 2))\nprint(min_of_three(2, 1, 3))\nprint(min_of_three(2, 3, 1))\nprint(min_of_three(3, 1, 2))\nprint(min_of_three(3, 2, 1))",
    "def min3(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\nprint(min3(10, 20, 30))\nprint(min3(10, 30, 20))\nprint(min3(20, 10, 30))\nprint(min3(20, 30, 10))\nprint(min3(30, 10, 20))\nprint(min3(30, 20, 10))",
    "def min_of_three(num1, num2, num3):\n    if num1 < num2:\n        if num1 < num3:\n            return num1\n        else:\n            return num3\n    else:\n        if num2 < num3:\n            return num2\n        else:\n            return num3\n\n\ndef main():\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    num3 = int(input(\"Enter third number: \"))\n\n    print(f\"Minimum of three numbers is: {min_of_three(num1, num2, num3)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\ndef minimum_of_three(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n\n    print(minimum(a, b, c))\n    print(minimum_of_three(a, b, c))",
    "def min_of_three(a, b, c):\n    return min(min(a, b), c)\n\n\ndef test_min_of_three():\n    assert min_of_three(1, 2, 3) == 1\n    assert min_of_three(1, 2, 2) == 1\n    assert min_of_three(3, 2, 1) == 1\n    assert min_of_three(1, 2, 2) == 1\n    assert min_of_three(1, 3, 2) == 1",
    "def minimum_of_three(a, b, c):\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(minimum_of_three(a, b, c))",
    "# O(1)\ndef find_min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\n# O(1)\ndef find_min_of_three_alt(a, b, c):\n    return min(a, b, c)\n\n\nprint(find_min_of_three(1, 2, 3))\nprint(find_min_of_three_alt(1, 2, 3))",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\ndef test_minimum():\n    assert minimum(1, 2, 3) == 1\n    assert minimum(1, 3, 2) == 1\n    assert minimum(2, 1, 3) == 1\n    assert minimum(2, 3, 1) == 1\n    assert minimum(3, 1, 2) == 1\n    assert minimum(3, 2, 1) == 1",
    "# Time Complexity: O(1)\ndef find_min(a, b, c):\n    return min(a, b, c)\n\n\nprint(find_min(1, 2, 3))",
    "def minimum_of_three(x, y, z):\n    \"\"\"\n    return the minimum of three numbers.\n    >>> minimum_of_three(1, 2, 3)\n    1\n    >>> minimum_of_three(4, 3, 1)\n    1\n    >>> minimum_of_three(2, 2, 2)\n    2\n    \"\"\"\n    return x if x < y and x < z else y if y < z else z\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    print(minimum(1, 2, 3))\n    print(minimum(1, 3, 2))\n    print(minimum(2, 1, 3))",
    "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Return the minimum of three numbers.\n\n    >>> min_of_three(1, 2, 3)\n    1\n    >>> min_of_three(100, 2, 3)\n    2\n    >>> min_of_three(100, 2, 1)\n    1\n    \"\"\"\n    return min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min3(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\ndef min3_1(a, b, c):\n    return min(a, min(b, c))\n\ndef min3_2(a, b, c):\n    return min(min(a, b), c)\n\ndef min3_3(a, b, c):\n    return min(a, b, c)\n\ndef min3_4(a, b, c):\n    min_ab = min(a, b)\n    return min(min_ab, c)\n\ndef min3_5(a, b, c):\n    min_ac = min(a, c)\n    return min(min_ac, b)\n\ndef min3_6(a, b, c):\n    min_bc = min(b, c)\n    return min(min_bc, a)\n\ndef min3_7(a, b, c):\n    min_ba = min(b, a)\n    min_ca = min(c, a)\n    return min(min_ba, min_ca)\n\ndef min3_8(a, b, c):\n    min_bc = min(b, c)\n    min_ca = min(c, a)\n    return min(min_bc, min_ca)\n\ndef min3_9(a, b, c):\n    min_ab = min(a, b)\n    min_ac = min(a, c)\n    return min(min_ab, min_ac)\n\ndef min3_10(a, b, c):\n    min_ab = min(a, b)\n    min_bc = min(b, c)\n    return min(min_ab, min_bc)\n\ndef min3_11(a, b, c):\n    min_ac = min(a, c)\n    min_bc = min(b, c)\n    return min(min_ac, min_bc)\n\ndef min3",
    "def min_of_three(a, b, c):\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c\n\n\nprint(min_of_three(1, 2, 3))\nprint(min_of_three(1, 3, 2))\nprint(min_of_three(2, 1, 3))\nprint(min_of_three(2, 3, 1))\nprint(min_of_three(3, 1, 2))\nprint(min_of_three(3, 2, 1))",
    "# This is the function which returns the minimum of three numbers.\ndef find_minimum(x, y, z):\n    if x <= y and x <= z:\n        return x\n    elif y <= x and y <= z:\n        return y\n    elif z <= x and z <= y:\n        return z\n\n\n# This is the main program.\nif __name__ == \"__main__\":\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n    num3 = float(input(\"Enter the third number: \"))\n\n    print(find_minimum(num1, num2, num3))",
    "# Iterative Solution\ndef minimum_of_three_numbers_iterative(a, b, c):\n    min_ = a\n    if b < min_:\n        min_ = b\n    if c < min_:\n        min_ = c\n    return min_\n\n\n# Recursive Solution\ndef minimum_of_three_numbers_recursive(a, b, c):\n    if b < a:\n        a, b = b, a\n    if c < b:\n        b, c = c, b\n    if a < b:\n        return a\n    else:\n        return b",
    "def find_min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    print(find_min(1, 2, 3))",
    "def find_minimum(x, y, z):\n    \"\"\"\n    Find minimum of three numbers.\n\n    Time complexity: O(1).\n    Space complexity: O(1).\n    \"\"\"\n    if x < y:\n        if x < z:\n            return x\n        else:\n            return z\n    else:\n        if y < z:\n            return y\n        else:\n            return z\n\n\ndef main():\n    x, y, z = 1, 5, 3\n    print(find_minimum(x, y, z))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_min(a, b, c):\n    return a if a < b else b if b < c else c\n\ndef find_min_2(a, b, c):\n    return a if (a < b and a < c) else b if (b < a and b < c) else c\n\ndef find_min_3(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nif __name__ == \"__main__\":\n    print(find_min(1, 2, 3))\n    print(find_min_2(1, 2, 3))\n    print(find_min_3(1, 2, 3))",
    "def minimum(a,b,c):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :param c: third number\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n\nprint(minimum(5,6,7))\nprint(minimum(5,7,6))\nprint(minimum(7,5,6))\nprint(minimum(7,6,5))\nprint(minimum(6,5,7))\nprint(minimum(6,7,5))",
    "# Iterative solution\ndef min3(a, b, c):\n    min_val = a\n    if b < min_val:\n        min_val = b\n    if c < min_val:\n        min_val = c\n    return min_val\n\n\n# Recursive solution\ndef min3_recursive(a, b, c):\n    if b < c:\n        if b < a:\n            return b\n        else:\n            return min3_recursive(a, c, b)\n    else:\n        if c < a:\n            return c\n        else:\n            return min3_recursive(a, b, c)\n\n\n# Test cases\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint(min3(1, 2, 3))\nprint",
    "def min_of_three(a, b, c):\n    \"\"\"\n    Return the minimum of three numbers.\n    >>> min_of_three(1, 2, 3)\n    1\n    >>> min_of_three(4, 5, 6)\n    4\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def minimum(a, b, c):\n    if a < b:\n        return a < c and a or c\n    else:\n        return b < c and b or c\n\n\ndef minimum2(a, b, c):\n    return min(a, min(b, c))\n\n\nif __name__ == \"__main__\":\n    print(minimum(3, 4, 5))\n    print(minimum(3, 5, 4))\n    print(minimum(5, 4, 3))",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    print(minimum(3, 4, 5))",
    "# O(1) extra space\ndef find_minimum_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\n\n# O(1) extra space\ndef find_minimum_of_three_revised(a, b, c):\n    if a - b > 0:\n        return a\n    elif b - c > 0:\n        return b\n    else:\n        return c",
    "def min(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(min(a,b,c))",
    "def minimum_of_three(num1, num2, num3):\n    if num1 < num2:\n        if num1 < num3:\n            return num1\n        else:\n            return num3\n    else:\n        if num2 < num3:\n            return num2\n        else:\n            return num3\n\nprint(minimum_of_three(1, 2, 3))",
    "def minimum(a, b, c):\n    if a < b:\n        return a if a < c else c\n    else:\n        return b if b < c else c\n\n\nif __name__ == \"__main__\":\n    print(minimum(1, 2, 3))\n    print(minimum(1, 3, 2))\n    print(minimum(2, 1, 3))\n    print(minimum(2, 3, 1))\n    print(minimum(3, 1, 2))\n    print(minimum(3, 2, 1))",
    "def min_of_three(x, y, z):\n    return min(x, min(y, z))\n\n\nif __name__ == \"__main__\":\n    x = int(input(\"Enter first number: \"))\n    y = int(input(\"Enter second number: \"))\n    z = int(input(\"Enter third number: \"))\n\n    print(\"The minimum of three numbers is: \", min_of_three(x, y, z))",
    "def find_min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n\na = 2\nb = 3\nc = 1\nprint(find_min(a, b, c))",
    "def find_min(a, b, c):\n    return min(a, b, c)\n\n# Tests\ndef min_test():\n    assert find_min(3, 4, 5) == 3\n    assert find_min(5, 4, 3) == 3\n    assert find_min(5, 3, 4) == 3\n    assert find_min(4, 5, 3) == 3\n    assert find_min(4, 3, 5) == 3\n    assert find_min(3, 5, 4) == 3\n    print(\"Passed.\")\n\nmin_test()",
    "def minimum(a, b, c):\n    \"\"\"\n    Return minimum of three numbers.\n\n    >>> minimum(1, 2, 3)\n    1\n    >>> minimum(4, 5, 6)\n    4\n    >>> minimum(7, 8, 9)\n    7\n    >>> minimum(10, 11, 12)\n    10\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif a >= b and a <= c:\n        return a\n    elif a <= b and b <= c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\ndef test_find_min():\n    assert find_min(3, 4, 5) == 3\n    assert find_min(5, 4, 3) == 3\n    assert find_min(5, 3, 4) == 3\n    assert find_min(4, 5, 3) == 3\n    assert find_min(4, 3, 5) == 3\n    assert find_min(3, 5, 4) == 3\n\n\nif __name__ == '__main__':\n    test_find_min()",
    "def minimum(x, y, z):\n    return min(x, y, z)\n\ndef main():\n    x = int(input(\"Enter x: \"))\n    y = int(input(\"Enter y: \"))\n    z = int(input(\"Enter z: \"))\n    print(\"Minimum of x, y, z:\", minimum(x, y, z))\n\nif __name__ == \"__main__\":\n    main()",
    "def minimum(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == \"__main__\":\n    print(minimum(1, 2, 3))\n    print(minimum(1, 3, 2))\n    print(minimum(2, 1, 3))\n    print(minimum(2, 3, 1))\n    print(minimum(3, 2, 1))\n    print(minimum(3, 1, 2))",
    "def min_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\n\ndef main():\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(1, 2, 3)))\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(1, 3, 2)))\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(2, 1, 3)))\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(2, 3, 1)))\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(3, 1, 2)))\n    print(\"Minimum of 3 numbers: \" + str(min_of_three(3, 2, 1)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    elif c <= a and c <= b:\n        return c\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    print(f\"Minimum of three numbers is: {min_of_three(a, b, c)}\")",
    "def find_min(a, b, c):\n    return a if a < b and a < c else b if b < c else c\n\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(find_min(a, b, c))",
    "# def minimum(a, b, c):\n#     \"\"\"\n#     :param a:\n#     :param b:\n#     :param c:\n#     :return:\n#     \"\"\"\n#     if a < b and a < c:\n#         return a\n#     elif b < c:\n#         return b\n#     else:\n#         return c\n\n\n# def minimum(a, b, c):\n#     return min(a, b, c)\n\n\ndef minimum(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return min(a, b, c)",
    "def minimum(x, y, z):\n    return x if x <= y and x <= z else y if y <= z else z\n\n\ndef minimum_v2(x, y, z):\n    return min(x, y, z)",
    "# 3 numbers\ndef find_min_3(num1: int, num2: int, num3: int) -> int:\n    return min(num1, num2, num3)\n\n\nif __name__ == \"__main__\":\n    print(find_min_3(1, 2, 3))",
    "# 1) Naive solution\ndef minimum_of_three(a, b, c):\n    return min(a, b, c)\n\n\n# 2) Using ternary operator\ndef minimum_of_three(a, b, c):\n    return (a if a < b else b) if a < c else c\n\n\n# 3) Using ternary operator and boolean\ndef minimum_of_three(a, b, c):\n    return a if a < b and a < c else b if b < c else c\n\n\n# 4) Using ternary operator and boolean\ndef minimum_of_three(a, b, c):\n    return a if a < b and a < c else b if b < c else c\n\n\n# 5) Using if-elif-else\ndef minimum_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\n\n# 6) Using if-elif-else and boolean\ndef minimum_of_three(a, b, c):\n    if a < b:\n        return a if a < c else c\n    else:\n        return b if b < c else c\n\n\n# 7) Using if-elif-else and boolean\ndef minimum_of_three(a, b, c):\n    if a < b:\n        return a if a < c else c\n    elif b < c:\n        return b if b < c else c\n    else:\n        return c\n\n\n# 8) Using if-elif-else and boolean\ndef minimum_of_three(a, b, c):\n    if a < b:\n        return a if a < c else c\n    elif b < c:\n        return b if b < c else c\n    else:\n        return c"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}