{
  "problem": {
    "task_id": "MBPP/320",
    "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
    "test_list": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ],
    "challenge_test_list": [],
    "problem_id": 309
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def diff_squared_sum(n):\n    n_squared = 0\n    sum_squared = 0\n    for i in range(1, n+1):\n        n_squared += i ** 2\n        sum_squared += i\n    return n_squared - sum_squared ** 2\n\nif __name__ == '__main__':\n    print(diff_squared_sum(10))\n    print(diff_squared_sum(100))",
    "from math import factorial\n\n\ndef difference_sum_squares(n):\n    return int((factorial(2 * n) / (factorial(n + 1) * factorial(n))) * (1 - 1 / (2 * n + 1)))\n\n\ndef main():\n    print(difference_sum_squares(100))\n\n\nif __name__ == '__main__':\n    main()",
    "def diff_squared_sum(n):\n    return (n * (n + 1) // 2) ** 2 - (n * (n + 1) * (2 * n + 1) // 6)\n\n\nprint(diff_squared_sum(4))",
    "def diff_of_squared(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i * i\n    squares_of_sum = (n * (n + 1) // 2) ** 2\n    return squares_of_sum - sum_of_squares\n\n\ndef test_diff_of_squared():\n    assert diff_of_squared(1) == 1\n    assert diff_of_squared(2) == 5\n    assert diff_of_squared(3) == 14",
    "def difference(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        sum1 += i*i\n        sum2 += i\n    return sum1-sum2*sum2\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    print(difference(n))",
    "def diff_squared_sums(n):\n    sum_squares = 0\n    squares_sum = 0\n    for i in range(1, n + 1):\n        sum_squares += i * i\n        squares_sum += i\n    return sum_squares * sum_squares - squares_sum * squares_sum\n\n\nif __name__ == \"__main__\":\n    print(diff_squared_sums(20))",
    "def sum_of_squares(n):\n    return int(n*(n+1)*(2*n+1)/6)\n\ndef square_sum(n):\n    return int((n*(n+1)/2)*(2*n+1))\n\ndef diff_sum_of_squares(n):\n    return sum_of_squares(n) - square_sum(n)\n\nif __name__ == '__main__':\n    print(diff_sum_of_squares(100))",
    "# Function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef difference_squared_sum(n):\n    sum_squares = 0\n    square_sum = 0\n    for i in range(1, n + 1):\n        square_sum += i ** 2\n        sum_squares += i\n    return square_sum ** 2 - sum_squares ** 2\n\n\n# Program to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nif __name__ == '__main__':\n    n = int(input())\n    print(difference_squared_sum(n))",
    "def sum_squared(n):\n    return (n * (n + 1) // 2) ** 2\n\ndef diff_squared(n):\n    return sum_squared(n) - sum_squared(n + 1)\n\nprint(diff_squared(100))",
    "def diff_square_sums(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\ndef sum_square_diff(n):\n    return (n * (n + 1) // 2) ** 2\n\ndef main():\n    with open('input.txt', 'r') as f:\n        n = int(f.readline().strip())\n\n    print(diff_square_sums(n) - sum_square_diff(n))\n\nif __name__ == '__main__':\n    main()",
    "\"\"\"Question 12\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find the sum of a list, you can use sum() function.\n\n\"\"\"",
    "def difference_of_squares(n):\n    \"\"\"\n    Return difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers\n    >>> difference_of_squares(10)\n    2640\n    >>> difference_of_squares(15)\n    13160\n    >>> difference_of_squares(20)\n    41230\n    \"\"\"\n    sum_of_squares = 0\n    sum_of_squares_of_natural_numbers = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n        sum_of_squares_of_natural_numbers += i\n    return sum_of_squares_of_natural_numbers ** 2 - sum_of_squares\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from math import pow\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef difference_of_squares(n):\n    return int(pow(sum(range(1, n + 1)), 2)) - int(sum(pow(x, 2) for x in range(1, n + 1)))",
    "def difference_in_squared_sums(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\nif __name__ == '__main__':\n    print(difference_in_squared_sums(100))",
    "from math import factorial\n\n\ndef sum_squared_numbers(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef squared_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 3\n\n\ndef solution(n):\n    return squared_sum(n) - sum_squared_numbers(n)\n\n\nif __name__ == \"__main__\":\n    print(solution(10))",
    "def diff_sum_squared(n):\n    \"\"\"\n    >>> diff_sum_squared(10)\n    3025\n    \"\"\"\n    sum_squared = 0\n    squared_sum = 0\n    for i in range(1, n + 1):\n        sum_squared += i * i\n        squared_sum += i\n    return sum_squared * sum_squared - squared_sum * squared_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sqr_diff(n):\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2))/6\n\n#print(sqr_diff(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):\n    return n*(n+1)/2\n\n#print(sum_n(10))\n\n\"\"\"\nWrite a function to calculate the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_n(n):",
    "from math import sqrt\n\ndef sum_of_squares(n):\n    return n*(n+1)*(2*n+1)/6\n\ndef square_sum(n):\n    return n*(n+1)*(2*n+1)/6\n\ndef difference_of_square_sums(n):\n    return sum_of_squares(n) - square_sum(n)\n\nprint difference_of_square_sums(100)",
    "def sum_squares(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\ndef squared_sum(n):\n    return (n * (n + 1) * (2 * n + 1)) / 3\n\n\ndef difference_between_square_sum_and_sum_squares(n):\n    return squared_sum(n) - sum_squares(n)\n\n\nif __name__ == \"__main__\":\n    print(difference_between_square_sum_and_sum_squares(4))",
    "from math import sqrt\n\ndef sum_squared(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\ndef squared_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 3\n\ndef diff_sum_squared(n):\n    return sum_squared(n) - squared_sum(n)\n\ndef test_diff_sum_squared():\n    assert diff_sum_squared(10) == 2640\n\nif __name__ == '__main__':\n    test_diff_sum_squared()",
    "\"\"\"Question 17\nLevel 3\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find the sum of a list, use sum(list).\n\n\"\"\"",
    "def diff_of_squares(n):\n    sum_of_squares = sum([i ** 2 for i in range(1, n+1)])\n    squared_sum = (n * (n + 1) // 2) ** 2\n    return squared_sum - sum_of_squares\n\nif __name__ == '__main__':\n    print(diff_of_squares(5))",
    "\"\"\"Question 2\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find sum of natural numbers from 1 to N, we can use the formula,\nSum = N*(N+1)/2\n\n\n\"\"\"",
    "from math import factorial\n\n\n# Iterative Solution\n\n\ndef difference(n):\n    sum_of_squares = 0\n    sum_of_squares_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n        sum_of_squares_of_squares += i ** 4\n    return sum_of_squares - sum_of_squares_of_squares\n\n\n# Recursive Solution\n\n\ndef difference_recursive(n):\n    if n == 1:\n        return 1\n    return difference_recursive(n - 1) + (n ** 2 - (n - 1) ** 2)\n\n\n# Formula Solution\n\n\ndef difference_formula(n):\n    return factorial(2 * n) // (factorial(n + 1) * factorial(n))",
    "def diff_sq_sum(n):\n    return (n * (n + 1) // 2)**2 - ((2*n + 1) * (2*n + 2) // 6) * n\n\n\nif __name__ == \"__main__\":\n    print(diff_sq_sum(4))",
    "from math import sqrt\n\n\ndef square_difference(n):\n    sq1 = sum([i * i for i in range(1, n + 1)])\n    sq2 = sum([pow(i, 2) for i in range(1, n + 1)])\n    return sq1 - sq2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = square_difference(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((10, 30))\ntest_function((20, 230))\ntest_function((30, 441))",
    "\"\"\"Question:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nUse sum() to calculate sum of a list.\n\n\"\"\"\ndef squaredSum(n):\n\treturn pow((n*(n+1)*(2*n+1))/6,2)\n\t\ndef squareSum(n):\n\treturn (n*(n+1)/2)*(2*n + 1)\n\t\ndef difference(n):\n\treturn squaredSum(n) - squareSum(n)\n\t\nprint difference(10)",
    "def difference_squared_sum(n):\n    \"\"\"\n    :param n: number of natural numbers\n    :return: difference between squared sum of first n natural numbers and the sum of squared first n natural numbers\n    \"\"\"\n    if n <= 0:\n        return None\n\n    sum_squared = 0\n    sum_squared_of_first_n = 0\n    for i in range(1, n + 1):\n        sum_squared += i ** 2\n        sum_squared_of_first_n += (i * i)\n\n    return sum_squared - sum_squared_of_first_n\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = difference_squared_sum(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nn = 5\nsolution = 290\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 3\nsolution = 225\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 1\nsolution = 1\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 0\nsolution = None\ntest_case = [n, solution]\ntest_function(test_case)",
    "def difference_of_squares(n):\n    sum_squared = sum([i**2 for i in range(1, n+1)])\n    squared_sum = sum([i for i in range(1, n+1)])**2\n    return squared_sum - sum_squared\n\nimport unittest\nclass TestFirst(unittest.TestCase):\n    def test(self):\n        test = self\n        Test = self\n        test.assert_equals = Test.assertEqual\n        Test.assert_equals = Test.assertEqual\n\n        Test.assert_equals(difference_of_squares(4), 27)\n        Test.assert_equals(difference_of_squares(5), 9)\n        Test.assert_equals(difference_of_squares(10), 2640)",
    "def sum_of_squares(n):\n    return (n*(n+1)*(2*n+1))/6\n\ndef squared_sum(n):\n    return (n*(n+1)*(2*n+1))/2\n\ndef difference_of_squares(n):\n    return squared_sum(n) - sum_of_squares(n)\n\nprint(difference_of_squares(100))",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nSuppose the function is called square_sum(n).\nExample:\nInput: 4\nOutput: 27\nExplanation: \nsquare sum of first 4 natural numbers is,\n(1^2 + 2^2 + 3^2 + 4^2) = 30\nsum of squares of first 4 natural numbers is,\n(1^2 + 2^2) + (2^2 + 3^2) + (3^2 + 4^2) = 45\nDifference between the two is, 30 - 45 = 27\nHints:\nIn case of input data being supplied to question, it should be assumed to be integer.\n\n\"\"\"\ndef square_sum(n):\n    return (n*(n+1)*(2*n+1))/6\n\ndef sum_square(n):\n    return (n*(n+1))/2\n\ndef square_difference(n):\n    return square_sum(n) - sum_square(n)\n\nprint square_difference(4)\nprint square_difference(10)",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn combinatorial theory, a partition of a set is a way of splitting the set's elements into two or more non-empty subsets. Two partitions that differ only by the order of their subsets are considered the same partition.\nFor example, for set S = {1, 2, 3, 4} these are the three partitions of S:\n{1} {2, 3, 4}\n{1, 2} {3, 4}\n{1, 2, 3} {4}\n\nSolution:\n\"\"\"\n\ndef difference_squared_sum_and_sum_squared(n):\n    if n == 0:\n        return 0\n    return 2 * n * (n + 1) * (2 * n + 1) / 6\n\nprint difference_squared_sum_and_sum_squared(10)",
    "def difference_sum_square(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    # Find the squared sum of first n natural numbers.\n    squared_sum = 0\n    for i in range(1, n + 1):\n        squared_sum += i ** 2\n\n    # Find the sum of squared first n natural numbers.\n    sum_squared = 0\n    for i in range(1, n + 1):\n        sum_squared += i\n    sum_squared = sum_squared ** 2\n\n    return squared_sum - sum_squared\n\n\ndef main():\n    print difference_sum_square(2)\n    print difference_sum_square(5)\n\n\nif __name__ == '__main__':\n    main()",
    "# Solution\n\n\ndef difference_squares_sum(n):\n    \"\"\"\n    Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    Args:\n       n(int): The number of terms\n    Returns:\n       int: The difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers\n    \"\"\"\n    # Sum of Squares\n    sum_squares = 0\n    for i in range(n+1):\n        sum_squares += i*i\n    # Square of Sum\n    square_sum = (n*(n+1)//2)**2\n    return square_sum - sum_squares\n\n\n# Test cases\nprint(difference_squares_sum(4))\nprint(difference_squares_sum(5))\nprint(difference_squares_sum(10))\nprint(difference_squares_sum(100))",
    "from math import factorial\nfrom math import sqrt\n\n\ndef sum_squares(n):\n    return sum([x ** 2 for x in range(1, n + 1)])\n\n\ndef squared_sum(n):\n    return sum([x for x in range(1, n + 1)]) ** 2\n\n\ndef difference(n):\n    return squared_sum(n) - sum_squares(n)\n\n\ndef test_difference():\n    \"\"\"\n    >>> difference(1)\n    0\n    >>> difference(2)\n    1\n    >>> difference(3)\n    5\n    >>> difference(4)\n    26\n    >>> difference(5)\n    91\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "#!/usr/bin/env python\nimport math\n\ndef sum_of_squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\ndef squared_sum(n):\n    return n * (n + 1) * (n + 2) / 6\n\ndef difference_of_squares(n):\n    return squared_sum(n) - sum_of_squares(n)",
    "def sum_of_squares(n):\n    return (n * (n + 1) // 2) ** 2\n\n\ndef squared_sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef difference_of_squares(n):\n    return sum_of_squares(n) - squared_sum(n)\n\n\ndef test(n):\n    print(f'sum_of_squares({n}) -> {sum_of_squares(n)}')\n    print(f'squared_sum({n}) -> {squared_sum(n)}')\n    print(f'difference_of_squares({n}) -> {difference_of_squares(n)}')\n\n\nif __name__ == '__main__':\n    test(10)",
    "def diff_squared(n):\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2))/6\n\nif __name__ == \"__main__\":\n    print diff_squared(10)",
    "# def diff_squared(n):\n#     return sum([i**2 for i in range(1, n+1)]) - (sum([i for i in range(1, n+1)]) ** 2)\n\n\ndef diff_squared(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\nif __name__ == \"__main__\":\n    print(diff_squared(3))",
    "def diff_square_sum(n):\n    \"\"\"\n    Find the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    >>> diff_square_sum(4)\n    -2\n    >>> diff_square_sum(5)\n    2\n    >>> diff_square_sum(6)\n    -8\n    \"\"\"\n    return sum(i ** 2 for i in range(1, n + 1)) - (sum(range(1, n + 1)) ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diff_square_sum(n):\n    return sum([i**2 for i in range(1, n+1)]) - (sum([i for i in range(1, n+1)])**2)",
    "\"\"\"Question 14\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find the sum of the first n natural numbers we can write a for loop and keep adding the numbers to a variable.\nTo find the square of a number we can use the ** operator.\n\n\"\"\"\ndef sqDiff(n):\n    a = 0\n    b = 0\n    for i in range(1, n+1):\n        a += i\n        b += i**2\n    return (a**2 - b)",
    "\"\"\"Question:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nExample:\nInput: 5\nOutput: 17\nHints:\nSquaring a natural number is equivalent to finding the number multiplied by itself. For e.g. 5 squared is 5x5 = 25.\nSum of first n natural numbers can be calculated using the formula - (n)(n+1)/2.\nSquared sum of first n natural numbers can be calculated using the formula - (n)(n+1)(2n+1)/6.\n\n\"\"\"\ndef squaredSum(n):\n    return (n*(n+1)*(2*n+1))/6\ndef sumOfSquared(n):\n    return (n*(n+1))/2\ndef difference(n):\n    return squaredSum(n)-sumOfSquared(n)\nprint difference(5)",
    "def sum_of_squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\ndef squared_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 3\n\ndef difference_of_squares(n):\n    return squared_sum(n) - sum_of_squares(n)\n\n# print(difference_of_squares(10))\n\n\"\"\"\nWrite a function to calculate the nth Fibonacci number.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# print(fibonacci(10))\n\n\"\"\"\nWrite a function to calculate the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n# print(factorial(10))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers in a list.\n\"\"\"\n\ndef sum_list(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_list(arr[1:])\n\n# print(sum_list([1, 2, 3]))\n\n\"\"\"\nWrite a function to calculate the average of the numbers in a list.\n\"\"\"\n\ndef avg_list(arr):\n    return sum_list(arr) / len(arr)\n\n# print(avg_list([1, 2, 3, 4]))\n\n\"\"\"\nWrite a function to calculate the median of the numbers in a list.\n\"\"\"\n\ndef median(arr):\n    arr = sorted(arr)\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2] + arr[len(arr) // 2 - 1]) / 2\n    return arr[len(arr) // 2]",
    "def difference_squared(n):\n    squared_sum = 0\n    squared_sum_of_squares = 0\n\n    for i in range(1, n + 1):\n        squared_sum += i ** 2\n        squared_sum_of_squares += i\n\n    squared_sum_of_squares = squared_sum_of_squares ** 2\n\n    return squared_sum - squared_sum_of_squares\n\nprint(difference_squared(3))\nprint(difference_squared(10))\nprint(difference_squared(100))",
    "from math import sqrt\n\n\ndef sum_of_squares(n: int) -> int:\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\ndef square_sum(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef difference(n: int) -> int:\n    return sum_of_squares(n) - square_sum(n)\n\n\ndef test_difference():\n    \"\"\"\n    >>> difference(1)\n    0\n    >>> difference(2)\n    1\n    >>> difference(3)\n    5\n    >>> difference(4)\n    17\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "\"\"\"Question 22\nLevel 3\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to get the squared sum of an array, you can use the built-in sum() function and square each element of the array.\n\n\"\"\"",
    "def sum_of_squares(n):\n    return (n*(n+1)*(2*n+1))/6\n\ndef square_of_sum(n):\n    return (n*(n+1)*(2*n+1))/3\n\ndef difference_of_squares(n):\n    return square_of_sum(n) - sum_of_squares(n)\n\nif __name__ == '__main__':\n    print(difference_of_squares(100))",
    "def sum_of_squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef difference(n):\n    return sum_of_squares(n) - sum_of_squares(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(difference(10))",
    "from math import sqrt\n\n\ndef difference_square_sum(n):\n    return int(sqrt(pow(n * (n + 1) / 2, 2) - pow(n * (n + 1) / 2, 2)))\n\n\nprint(difference_square_sum(100))",
    "from math import factorial\n\ndef difference(n):\n    \"\"\"\n    Calculates the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    return factorial(2 * n) // (factorial(n) ** 2)\n\n\ndef main():\n    print(difference(0))\n    print(difference(1))\n    print(difference(2))\n    print(difference(3))\n    print(difference(4))\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_of_squares(n):\n    return (n**3 + n**2 + n) // 6\n\ndef square_sum(n):\n    return (n**4 + n**3 + n**2 + n) // 4\n\ndef difference(n):\n    return (square_sum(n) - sum_of_squares(n)) // n\n\ndef test(n):\n    assert difference(n) == 0\n\nif __name__ == '__main__':\n    test(100)\n    print('all passed.')",
    "def difference_squared(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\ndef sum_squared(n):\n    return (n * (n + 1) * (2 * n + 1)) / 3\n\n\ndef difference_squared_2(n):\n    sum_squared_n = 0\n    difference_squared_n = 0\n    for i in range(1, n + 1):\n        sum_squared_n += i ** 2\n        difference_squared_n += i\n    return difference_squared_n ** 2 - sum_squared_n\n\n\nprint(difference_squared(4))\nprint(difference_squared_2(4))",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find the sum of the first natural numbers, you can use the formula:\n    Sum = n(n + 1)/2\n\n\n\"\"\"",
    "from math import sqrt\nfrom functools import reduce\nfrom typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef difference_between_squared_sum_and_sum_of_squares(n: int) -> int:\n    sum_of_squares = sum(i ** 2 for i in range(1, n + 1))\n    squared_sum = reduce(lambda x, y: x + y ** 2, range(1, n + 1), 0)\n    return squared_sum - sum_of_squares\n\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef difference_between_squared_sum_and_sum_of_squares_math(n: int) -> int:\n    return n ** 3 - n * (n + 1) ** 2 // 2\n\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef difference_between_squared_sum_and_sum_of_squares_math_2(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\nif __name__ == \"__main__\":\n    assert difference_between_squared_sum_and_sum_of_squares(3) == 2\n    assert difference_between_squared_sum_and_sum_of_squares_math(3) == 2\n    assert difference_between_squared_sum_and_sum_of_squares_math_2(3) == 2\n    assert difference_between_squared_sum_and_sum_of_squares(10) == 2640\n    assert difference_between_squared_sum_and_sum_of_squares_math(10) == 2640\n    assert difference_between_squared_sum_and_sum_of_squares_math_2(10) == 2640",
    "from math import sqrt\n\n\ndef sum_squared(n: int) -> int:\n    \"\"\"Returns sum of squared first n natural numbers.\n\n    >>> sum_squared(3)\n    30\n    >>> sum_squared(4)\n    55\n    >>> sum_squared(5)\n    91\n    >>> sum_squared(6)\n    140\n    >>> sum_squared(7)\n    202\n    \"\"\"\n    return sum(i ** 2 for i in range(1, n + 1))\n\n\ndef squared_sum(n: int) -> int:\n    \"\"\"Returns the squared sum of first n natural numbers.\n\n    >>> squared_sum(3)\n    36\n    >>> squared_sum(4)\n    50\n    >>> squared_sum(5)\n    55\n    >>> squared_sum(6)\n    64\n    >>> squared_sum(7)\n    70\n    \"\"\"\n    return sum(i for i in range(1, n + 1)) ** 2\n\n\ndef difference(n: int) -> int:\n    \"\"\"Returns the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    >>> difference(3)\n    10\n    >>> difference(4)\n    17\n    >>> difference(5)\n    28\n    >>> difference(6)\n    41\n    >>> difference(7)\n    56\n    \"\"\"\n    return sum_squared(n) - squared_sum(n)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(difference(n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
    "from math import pow\n\n\ndef sum_of_squares(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\ndef squared_sum(n):\n    return (n * (n + 1) * (2 * n + 1)) / 2\n\n\ndef difference(n):\n    return pow(sum_of_squares(n), 2) - pow(squared_sum(n), 2)\n\n\nif __name__ == \"__main__\":\n    print(difference(10))",
    "from math import sqrt\n\ndef square_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\ndef sum_square(n):\n    return n * (n + 1) * (2 * n + 1) / 3\n\ndef diff(n):\n    return abs(sum_square(n) - square_sum(n))\n\nprint(diff(100))",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable, no-member\nfrom expects import *\n\nfrom lib.sum_of_squares import sum_of_squares\nfrom lib.squared_sum import squared_sum\n\nwith description('sum_of_squares'):\n    with it('calculates the sum of squares of 10 numbers'):\n        expect(sum_of_squares(10)).to(equal(285))\n\n    with it('calculates the difference between the squared sum and the sum of squared'):\n        expect(squared_sum(10) - sum_of_squares(10)).to(equal(2))",
    "def difference_between_squared_sum_and_sum_of_squared(n):\n    # Calculate the sum of squared first n natural numbers.\n    sum_of_squared = sum(map(lambda x: x ** 2, range(1, n + 1)))\n    # Calculate the squared sum of first n natural numbers.\n    squared_sum = (n * (n + 1) // 2) ** 2\n    return squared_sum - sum_of_squared\n\n\ndef test_difference_between_squared_sum_and_sum_of_squared():\n    \"\"\"\n    >>> test_difference_between_squared_sum_and_sum_of_squared()\n    \"\"\"\n    assert difference_between_squared_sum_and_sum_of_squared(10) == 2640\n    assert difference_between_squared_sum_and_sum_of_squared(100) == 25164150\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def sum_squares(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += (i**2)\n    return sum_squares\n\ndef square_sum(n):\n    square_sum = 0\n    for i in range(1, n+1):\n        square_sum += i\n    return square_sum**2\n\ndef difference(n):\n    return square_sum(n) - sum_squares(n)\n\nprint(difference(10))",
    "from math import sqrt\nfrom functools import reduce\n\n\n# [1, 2, 3, 4, 5]\n# 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55\n# 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 30\n# 55 - 30 = 25\ndef calculate_difference(n):\n    sum_of_squares = reduce(lambda x, y: x + y, [i ** 2 for i in range(1, n + 1)])\n    sum_of_squares_of_sum = (n * (n + 1) // 2) ** 2\n    return int(sqrt(sum_of_squares_of_sum - sum_of_squares))\n\n\nif __name__ == \"__main__\":\n    print(calculate_difference(3))",
    "def difference(n):\n    \"\"\"\n    >>> difference(10)\n    3025\n    \"\"\"\n    sum_of_squares = 0\n    squares_sum = 0\n    for i in range(1, n+1):\n        sum_of_squares += i * i\n        squares_sum += i\n\n    return squares_sum ** 2 - sum_of_squares\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef sum_squares(n):\n    return (n * (n + 1) // 2) ** 2\n\n\ndef square_sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef diff(n):\n    return sum_squares(n) - square_sum(n)\n\n\ndef test_diff():\n    \"\"\"\n    >>> diff(1)\n    1\n    >>> diff(2)\n    5\n    >>> diff(3)\n    14\n    >>> diff(4)\n    30\n    >>> diff(5)\n    55\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_squared(n):\n    return (n*(n+1)*(2*n+1))/6\n\n\ndef squared_sum(n):\n    return (n*(n+1)*(n+2))/6\n\n\ndef diff_squared_sum(n):\n    return squared_sum(n) - sum_squared(n)\n\n\nif __name__ == '__main__':\n    print(diff_squared_sum(100))",
    "def difference_sum_square(n: int) -> int:\n    \"\"\"\n    >>> difference_sum_square(5)\n    -20\n    >>> difference_sum_square(10)\n    231\n    >>> difference_sum_square(15)\n    -322\n    \"\"\"\n    sq_sum = 0\n    sum_sq = 0\n    for i in range(1, n + 1):\n        sq_sum += i ** 2\n        sum_sq += i\n    return sq_sum - sum_sq ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def sum_of_squares(n):\n    return (n*(n+1)*(2*n+1))//6\n\ndef squared_sum(n):\n    return (n*(n+1)*(n+2))//6\n\ndef difference_of_squares(n):\n    return squared_sum(n) - sum_of_squares(n)",
    "from __future__ import annotations\n\n\ndef difference_between_squared_sum_and_sum_of_squares(n: int) -> int:\n    \"\"\"\n    >>> difference_between_squared_sum_and_sum_of_squares(1)\n    0\n    >>> difference_between_squared_sum_and_sum_of_squares(2)\n    1\n    >>> difference_between_squared_sum_and_sum_of_squares(3)\n    5\n    >>> difference_between_squared_sum_and_sum_of_squares(4)\n    17\n    \"\"\"\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from math import sqrt\n\n\n# Time complexity: O(sqrt(n))\ndef sum_squared_difference(n: int) -> int:\n    # Squared sum of first n natural numbers\n    sq_sum = n * (n + 1) * (2 * n + 1) / 6\n\n    # Sum of squared first n natural numbers\n    sum_sq = n * (n + 1) * (2 * n + 1) * (3 * n + 1) / 36\n\n    return int(sqrt(sq_sum ** 2 - sum_sq))\n\n\nprint(sum_squared_difference(10000000))",
    "def diff_square_sum(n):\n    return (n**2)*(2*n+1)//6\n\ndef diff_square_sum_recursive(n):\n    if n == 0:\n        return 0\n    return (n**2)*(2*n+1)//6 - (diff_square_sum(n-1))\n\nif __name__ == \"__main__\":\n    print(diff_square_sum(4))\n    print(diff_square_sum_recursive(4))",
    "from math import sqrt\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef square_sum(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef difference_of_squares(n: int) -> int:\n    return square_sum(n) - sum_of_squares(n)\n\n\nif __name__ == \"__main__\":\n    print(difference_of_squares(100))",
    "\"\"\"Question 16\nLevel 3\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to find the sum of the first natural numbers, you can use the formula: n(n+1)/2.\n\n\"\"\"\ndef difference_sq_sum_sq_sum(n):\n    sum_sq = n * (n + 1) * (2 * n + 1) / 6\n    sq_sum = n * (n + 1) / 2\n    return int(sum_sq - sq_sum ** 2)\n\nprint difference_sq_sum_sq_sum(5)",
    "from math import factorial\n\n\ndef diff_square_sum(n: int) -> int:\n    \"\"\"\n    >>> diff_square_sum(1)\n    0\n    >>> diff_square_sum(3)\n    2\n    >>> diff_square_sum(5)\n    6\n    >>> diff_square_sum(10)\n    236\n    >>> diff_square_sum(15)\n    4916\n    \"\"\"\n    # calculate squared sum of first n natural numbers\n    squared_sum = n * (n + 1) * (2 * n + 1) / 6\n\n    # calculate sum of squared first n natural numbers\n    sum_squared = 0\n    for i in range(1, n + 1):\n        sum_squared += i ** 2\n\n    return squared_sum - sum_squared\n\n\ndef diff_square_sum_factorial(n: int) -> int:\n    \"\"\"\n    >>> diff_square_sum_factorial(1)\n    0\n    >>> diff_square_sum_factorial(3)\n    2\n    >>> diff_square_sum_factorial(5)\n    6\n    >>> diff_square_sum_factorial(10)\n    236\n    >>> diff_square_sum_factorial(15)\n    4916\n    \"\"\"\n    return n ** 4 - factorial(2 * n) / (factorial(n) ** 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def diff_square_sum(n):\n    return sum([i**2 for i in range(1, n+1)]) - (n*(n+1)*(2*n+1))/6\n\nprint(diff_square_sum(4))",
    "def squared_sum(n):\n    return n*(n+1)*(2*n+1)//6\n\ndef sum_squared(n):\n    return n*(n+1)*(n+2)//6\n\ndef difference_squared_sum(n):\n    return squared_sum(n) - sum_squared(n)",
    "def difference_between_square_sum_and_sum_of_squares(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    # your code here\n    sum_of_squares = 0\n    squared_sum = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n        squared_sum += i\n    return squared_sum**2 - sum_of_squares\n\nif __name__ == '__main__':\n    # Use the main function here to test out your implementation\n    n = 2\n\n    ans = difference_between_square_sum_and_sum_of_squares(n)\n\n    print(ans)",
    "def difference_squared(n):\n    sum_squared = 0\n    squared_sum = 0\n    for i in range(1, n+1):\n        sum_squared += i ** 2\n        squared_sum += i\n\n    return squared_sum ** 2 - sum_squared\n\nif __name__ == '__main__':\n    print(difference_squared(3))",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to get the square of a number, we can multiply it with itself.\n\n\"\"\"",
    "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_squares(n):\n    return reduce(lambda a, b: a + b, [i ** 2 for i in range(1, n + 1)])\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef diff_squares(n):\n    return (sum_squares(n) - sum_squares(n + 1)) // 2\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef diff_squares2(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6",
    "from math import pow\n\n\ndef square_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef square_sum_squares(n):\n    return n * (n + 1) * (2 * n + 1) * (3 * n + 1) / 36\n\n\ndef diff_square_sum_square_sum(n):\n    return pow(square_sum(n), 2) - pow(square_sum_squares(n), 2)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(diff_square_sum_square_sum(n))",
    "def square_difference(n):\n    sum_squares = 0\n    square_sum = 0\n    for i in range(1, n+1):\n        sum_squares += i*i\n        square_sum += i\n    square_sum *= square_sum\n    return square_sum - sum_squares\n\n#test\nprint(square_difference(10))",
    "from __future__ import annotations\n\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef difference_between_squared_sum_and_sum_of_squares(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return (n * (n + 1) / 2) ** 2 - sum_of_squares(n)\n\n\nif __name__ == \"__main__\":\n    print(difference_between_squared_sum_and_sum_of_squares(5))",
    "def difference_between_sum_and_square(n):\n    sum_of_squares = 0\n    squared_sum = 0\n\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n        squared_sum += i\n\n    squared_sum **= 2\n\n    return squared_sum - sum_of_squares\n\n\nprint(difference_between_sum_and_square(10))",
    "def diff_of_squares(n):\n    \"\"\"\n    >>> diff_of_squares(3)\n    -2\n    >>> diff_of_squares(5)\n    -2\n    >>> diff_of_squares(10)\n    -2\n    \"\"\"\n    sum_of_squares = sum([i * i for i in range(1, n + 1)])\n    squared_sum = pow(sum(range(1, n + 1)), 2)\n    return squared_sum - sum_of_squares\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diff_sq_sum(n):\n    return int((n*(n+1)*(2*n+1))/6) - int((n*(n+1)*(2*n+1))/6)**2\n\n\nprint(diff_sq_sum(5))\nprint(diff_sq_sum(10))",
    "def diff_sum_squared(n):\n    return (n*(n+1)*(2*n+1))/6 - ((n*(n+1))/2)**2\n\n\nif __name__ == \"__main__\":\n    print(diff_sum_squared(3))",
    "from math import sqrt\n\ndef sum_of_squares(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\ndef square_sum(n):\n    return (n * (n + 1) * (2 * n + 1)) / 3\n\ndef difference(n):\n    return square_sum(n) - sum_of_squares(n)\n\nn = 100\nprint(f'Difference between sum of squares of first {n} natural numbers and the squared sum of first {n} natural numbers: {difference(n)}')",
    "from math import factorial\n\n\ndef sum_of_squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef square_of_sum(n):\n    return (n * (n + 1) / 2) ** 2\n\n\ndef diff_square_sum(n):\n    return square_of_sum(n) - sum_of_squares(n)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 1000 + 1):\n        print(diff_square_sum(i))",
    "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nIn order to calculate a sum of a list, use sum(list).\n\n\"\"\"",
    "def sum_of_squares(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n*(n+1)*(2*n+1))/6\n\ndef square_sum(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n*(n+1)*(2*n+1))/2\n\ndef difference_of_squares(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return square_sum(n) - sum_of_squares(n)",
    "def squared_sum_diff(n):\n    sum_of_squares = 0\n    sum_of_squares_of_squares = 0\n\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n        sum_of_squares_of_squares += i\n\n    return sum_of_squares ** 2 - sum_of_squares_of_squares ** 2\n\n\nprint(squared_sum_diff(2))\nprint(squared_sum_diff(10))",
    "from math import sqrt\n\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the squares of the first n natural numbers\n    :param n: integer\n    :return: int\n\n    >>> sum_of_squares(3)\n    30\n    >>> sum_of_squares(5)\n    55\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef square_sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the squares of the first n natural numbers\n    :param n: integer\n    :return: int\n\n    >>> square_sum(3)\n    14\n    >>> square_sum(5)\n    55\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 3\n\n\ndef difference_between_square_sum_and_square_of_sum(n: int) -> int:\n    \"\"\"\n    Calculates the difference between the squared sum of the first n natural numbers and the sum of squared the first n natural numbers.\n    :param n: integer\n    :return: int\n\n    >>> difference_between_square_sum_and_square_of_sum(3)\n    22\n    >>> difference_between_square_sum_and_square_of_sum(5)\n    1\n    \"\"\"\n    return square_sum(n) - sum_of_squares(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import factorial\n\n\ndef sum_of_squares(n):\n    return int((n * (n + 1) * (2 * n + 1)) / 6)\n\n\ndef square_sum(n):\n    return int((n * (n + 1) / 2) ** 2)\n\n\ndef difference_of_squares(n):\n    return square_sum(n) - sum_of_squares(n)\n\n\ndef test_difference_of_squares():\n    \"\"\"\n    >>> difference_of_squares(10)\n    2640\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def difference_of_squares(n):\n    first_sum = 0\n    second_sum = 0\n    for i in range(n):\n        first_sum += i ** 2\n        second_sum += (i + 1) ** 2\n\n    return first_sum - second_sum\n\n\nif __name__ == \"__main__\":\n    print(difference_of_squares(10))",
    "from math import sqrt\n\n\ndef squared_sum_diff(n):\n    \"\"\"\n    >>> squared_sum_diff(5)\n    26\n    >>> squared_sum_diff(10)\n    22\n    \"\"\"\n    sum_squared = sum(i ** 2 for i in range(1, n + 1))\n    squared_sum = sum(range(1, n + 1)) ** 2\n    return squared_sum - sum_squared\n\n\ndef squared_sum_diff2(n):\n    \"\"\"\n    >>> squared_sum_diff2(5)\n    26\n    >>> squared_sum_diff2(10)\n    22\n    \"\"\"\n    return sum(i ** 2 for i in range(1, n + 1)) - sum(range(1, n + 1)) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef difference_between_sum_squares(n: int) -> int:\n    return int(sum(map(lambda x: x**2, range(1, n+1))) - (n * (n+1) // 2)**2)\n\n\n# Time complexity O(1)\n# Space complexity O(1)\ndef difference_between_sum_squares_optimized(n: int) -> int:\n    return int((n**3) // 6 - sum(map(lambda x: x**2, range(1, n+1))))\n\n\n# Time complexity O(1)\n# Space complexity O(1)\ndef difference_between_sum_squares_optimized_2(n: int) -> int:\n    return int((n**3) // 6 - (n*(n+1)*(2*n+1)) // 6)\n\n\n# Time complexity O(1)\n# Space complexity O(1)\ndef difference_between_sum_squares_optimized_3(n: int) -> int:\n    return int((n**3) // 6 - (n*(n+1)*(n+2) // 6))\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef difference_between_sum_squares_optimized_4(n: int) -> int:\n    return int((n**3) // 6 - (n*(n+1)*(n+2) // 6) - sum(map(lambda x: x**2, range(1, n+1))))\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef difference_between_sum_squares_optimized_5(n: int) -> int:\n    return int((n**3) // 6 - (n*(n+1)*(n+2) // 6) - reduce(lambda x, y: x+y**2, range(1, n+1), 0))",
    "def sum_of_squares(n):\n    return int((n * (n + 1) * (2 * n + 1)) / 6)\n\n\ndef squared_sum(n):\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\ndef difference_of_squares(n):\n    return squared_sum(n) ** 2 - sum_of_squares(n)",
    "\"\"\"Question 20\nLevel 2\nQuestion:\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nHints:\nFor example, for n=10, difference = 2640 - 3025 = -385.\n\n\"\"\"\ndef square_sum(n):\n    return n*(n+1)*(2*n+1)/6\ndef square_of_sum(n):\n    return (n*(n+1)/2)**2\ndef difference(n):\n    return square_of_sum(n) - square_sum(n)",
    "def difference_sum_square(n):\n    sum_square = 0\n    for i in range(1, n + 1):\n        sum_square += i ** 2\n    sum_natural = (n * (n + 1) // 2) ** 2\n    return sum_natural - sum_square\n\n\nif __name__ == \"__main__\":\n    print(difference_sum_square(4))",
    "def sum_squared(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum\n\n\ndef squared_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum * sum\n\n\ndef diff_squared(n):\n    return squared_sum(n) - sum_squared(n)\n\n\ndef test_diff_squared():\n    assert diff_squared(1) == 1\n    assert diff_squared(2) == 5\n    assert diff_squared(3) == 14\n    assert diff_squared(4) == 30\n    assert diff_squared(5) == 55\n    assert diff_squared(6) == 91"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}