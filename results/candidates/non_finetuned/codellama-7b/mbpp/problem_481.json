{
  "problem": {
    "task_id": "MBPP/492",
    "prompt": "Write a function to search an element in the given array by using binary search.",
    "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
    "test_list": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ],
    "challenge_test_list": [],
    "problem_id": 481
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from array import array\nfrom typing import List, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef binary_search(arr: List[T], item: T) -> int:\n    \"\"\"Searches an element in the given array by using binary search.\n\n    Args:\n        arr (List[T]): Input array.\n        item (T): Element to search.\n\n    Returns:\n        int: Index of the element, if found.\n        -1: If the element is not present.\n    \"\"\"\n\n    def _search(arr: List[T], item: T, low: int, high: int) -> int:\n        if low > high:\n            return -1\n\n        mid: int = (low + high) // 2\n\n        if arr[mid] == item:\n            return mid\n\n        if arr[mid] < item:\n            return _search(arr, item, mid + 1, high)\n        return _search(arr, item, low, mid - 1)\n\n    return _search(arr, item, 0, len(arr) - 1)\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 3))\n    print(binary_search([1, 2, 3, 4, 5], 6))\n    print(binary_search([1, 2, 3, 4, 5], 0))",
    "from typing import List\n\n\ndef binary_search(array: List[int], target: int) -> int:\n    \"\"\"\n    :param array: the array to search in\n    :param target: the element to search for\n    :return: index of target in array\n    \"\"\"\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))",
    "def binary_search(arr, el):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    print(binary_search([1, 3, 4, 5, 7], 5))\n    print(binary_search([1, 3, 4, 5, 7], 4))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import List, Optional\n\n\ndef binary_search(arr: array, key: int) -> Optional[int]:\n    \"\"\"\n    Binary search algorithm.\n    :param arr: the array to search in.\n    :param key: the key to search for.\n    :return: the index of the key in the array if found, else None.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == key:\n            return mid\n        if arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 8))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 1))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 10))",
    "def search(arr, x):\n    low = 0\n    high = len(arr)-1\n\n    while low <= high:\n        mid = (low + high)//2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 10, 40]\n    arr.sort()\n\n    x = 10\n    print(search(arr, x))",
    "def binary_search(array, element, start, end):\n    if end < start:\n        return -1\n\n    mid = (start + end) // 2\n    if array[mid] == element:\n        return mid\n\n    if array[mid] > element:\n        return binary_search(array, element, start, mid - 1)\n    else:\n        return binary_search(array, element, mid + 1, end)\n\narray = [1, 2, 3, 4, 5, 6, 7, 8]\nelement = 5\nprint(binary_search(array, element, 0, len(array) - 1))",
    "def binary_search(arr, l, r, x):\n    \"\"\"\n    :param arr: list of elements\n    :param l: starting index\n    :param r: ending index\n    :param x: element to be searched\n    :return: index of element x\n    \"\"\"\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\n\narr = [3, 4, 5, 6, 7, 8, 9]\nx = 8\nresult = binary_search(arr, 0, len(arr) - 1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")",
    "def binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if array[mid] == element:\n            return mid\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    element = 5\n\n    print(binary_search(array, element))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, element: int) -> Optional[int]:\n    \"\"\"\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 7, 9, 11, 12]), 5)\n    3\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 7, 9, 11, 12]), 11)\n    7\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 7, 9, 11, 12]), 1)\n    0\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 7, 9, 11, 12]), 12)\n    8\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 7, 9, 11, 12]), 10) is None\n    True\n    \"\"\"\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        if arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def binary_search(array, element, low=0, high=None):\n    if high is None:\n        high = len(array) - 1\n\n    if high < low:\n        return -1\n\n    mid = (low + high) // 2\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return binary_search(array, element, low, mid - 1)\n    else:\n        return binary_search(array, element, mid + 1, high)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(binary_search(arr, 3))\n    print(binary_search(arr, 8))",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, element: int) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 5))",
    "from typing import List\n\n\ndef binary_search(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 3))\n    print(binary_search([1, 2, 3, 4, 5], 6))",
    "def binary_search(arr: list, element: int) -> int:\n    \"\"\"\n    :param arr: input array\n    :param element: element to search\n    :return: index of element in array\n\n    Time complexity: O(logn).\n    Space complexity: O(1).\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n\n    assert binary_search(arr, 4) == 3\n    assert binary_search(arr, 1) == 0\n    assert binary_search(arr, 7) == 6\n    assert binary_search(arr, 10) == -1",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], el: int) -> int:\n    \"\"\"\n    >>> binary_search([1, 2, 3, 4, 5], 5)\n    4\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], el: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] < el:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 3, 5, 6, 7, 9, 10]), 6))",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    This function is a recursive approach of binary search.\n\n    :param arr: list of elements\n    :param element: element to search\n    :return: index of the element if found else -1\n    >>> arr = array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> binary_search(arr, 4)\n    3\n    >>> binary_search(arr, 10)\n    -1\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    mid = len(arr) // 2\n\n    if arr[mid] == element:\n        return mid\n    elif arr[mid] > element:\n        return binary_search(arr[:mid], element)\n    else:\n        return binary_search(arr[mid + 1 :], element)\n\n\ndef binary_search_iterative(arr: array, element: int) -> int:\n    \"\"\"\n    This function is an iterative approach of binary search.\n\n    :param arr: list of elements\n    :param element: element to search\n    :return: index of the element if found else -1\n    >>> arr = array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> binary_search_iterative(arr, 4)\n    3\n    >>> binary_search_iterative(arr, 10)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    user_input = input(\"Enter numbers separated by",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], low: int, high: int, x: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    array: array = array(\"H\", [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610])\n    print(f\"Element found at index: {binary_search(array, 0, len(array) - 1, 13)}\")",
    "from typing import List\n\n\ndef binary_search(arr: List[int], element: int) -> int:\n    \"\"\"\n    This problem can be solved using binary search.\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 9\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 5\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4",
    "from typing import List\n\n\ndef binary_search(arr: List[int], key: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if key == arr[mid]:\n            return mid\n        elif key < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2",
    "def binary_search(arr, key):\n    \"\"\"\n    Binary search is a searching algorithm that finds the position of a target value within a sorted array.\n    The binary search algorithm works by repeatedly dividing the search interval in half.\n    It starts in the middle of the array and checks if the value there is the target value.\n    If it is higher than the target value, the search continues to the sub-array after the middle.\n    If it is lower than the target value, the search continues to the sub-array before the middle.\n    The array must be sorted in ascending order to apply the binary search.\n    \"\"\"\n\n    # Find the middle element of the array\n    mid = len(arr) // 2\n\n    # If the middle element matches the element to be searched, return the mid index\n    if arr[mid] == key:\n        return mid\n\n    # If the middle element is greater than the element to be searched, recursively call the function with the left sub-array\n    elif arr[mid] > key:\n        return binary_search(arr[:mid], key)\n\n    # If the middle element is smaller than the element to be searched, recursively call the function with the right sub-array\n    else:\n        return binary_search(arr[mid+1:], key)\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    key = 8\n    print(binary_search(arr, key))",
    "def binary_search(arr, element):\n    \"\"\"\n    :param: arr - input array\n    :param: element - element to be searched in the array\n    return: index of the element in the array\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = binary_search(*test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 4, 5, 6, 7], 6,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 5,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 7,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 8,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 0,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], -1,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 1,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 4,))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 3,))",
    "from typing import List\n\n\ndef binary_search(array: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        if array[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 9))",
    "from __future__ import annotations\n\n\ndef binary_search(arr: list[int], elem: int) -> int:\n    \"\"\"\n    Returns the index of the given element in the given array.\n    If the element is not present, returns -1\n    >>> binary_search([1, 2, 3, 4, 5, 6, 7], 4)\n    3\n    >>> binary_search([1, 2, 3, 4, 5, 6, 7], 10)\n    -1\n    \"\"\"\n    first = 0\n    last = len(arr) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n\n        if arr[mid] == elem:\n            return mid\n\n        if arr[mid] < elem:\n            first = mid + 1\n\n        else:\n            last = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from array import array\nfrom bisect import bisect_left\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    Returns the index of the given element if found, else returns -1\n    >>> arr = array('i', [0, 1, 2, 3, 4, 5, 6])\n    >>> binary_search(arr, 6)\n    6\n    >>> binary_search(arr, 5)\n    5\n    >>> binary_search(arr, 10)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if element == arr[mid]:\n            return mid\n        elif element < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef binary_search_recursive(arr: array, element: int, low: int, high: int) -> int:\n    \"\"\"\n    Returns the index of the given element if found, else returns -1\n    >>> arr = array('i', [0, 1, 2, 3, 4, 5, 6])\n    >>> binary_search_recursive(arr, 6, 0, len(arr) - 1)\n    6\n    >>> binary_search_recursive(arr, 5, 0, len(arr) - 1)\n    5\n    >>> binary_search_recursive(arr, 10, 0, len(arr) - 1)\n    -1\n    \"\"\"\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if element == arr[mid]:\n        return mid\n    elif element < arr[mid]:\n        return binary_search_recursive(arr, element, low, mid - 1)\n    else:\n        return binary_search_recursive(arr, element, mid + 1, high)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    arr",
    "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))",
    "from typing import Optional\n\n\ndef binary_search(arr: list[int], key: int) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == key:\n            return mid\n\n        if arr[mid] > key:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 3))",
    "def binary_search(array, element):\n    \"\"\"\n    Time complexity: O(log(n)).\n    Space complexity: O(1).\n    \"\"\"\n    # Assumes the array is sorted.\n    # Assumes the array has unique elements.\n    # Assumes the element is in the array.\n    # Assumes the element is of the same type as the array.\n    if not array:\n        return False\n\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == element:\n            return True\n\n        if array[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return False\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print('Binary search:', binary_search(array, 8))\n\n\nif __name__ == '__main__':\n    main()",
    "from array import array\nfrom typing import Tuple\n\n\ndef binary_search(arr: array, low: int, high: int, x: int) -> int:\n    \"\"\"\n    :param arr: input array\n    :param low: lower index of the array\n    :param high: higher index of the array\n    :param x: element to be searched\n    :return: index of the element if found, -1 otherwise\n    \"\"\"\n    # Check base case\n    if high >= low:\n\n        mid = low + (high - low) // 2\n\n        # If element is present at the middle itself\n        if arr[mid] == x:\n            return mid\n\n        # If element is smaller than mid, then it can only\n        # be present in left subarray\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n\n        # Else the element can only be present in right subarray\n        else:\n            return binary_search(arr, mid + 1, high, x)\n\n    else:\n        # Element is not present in the array\n        return -1\n\n\ndef main():\n    arr = array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    x = 9\n    result: Tuple[int, int] = binary_search(arr, 0, len(arr) - 1, x)\n    print(f\"Index of {x} in the array is {result}\")\n\n\nif __name__ == '__main__':\n    main()",
    "from array import array\nfrom typing import Optional\n\n\ndef search(arr: array, target: int) -> Optional[int]:\n    \"\"\"\n    :param arr: the array to search in\n    :param target: the element to search\n    :return: the index of the element\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return None\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if target == arr[mid]:\n            return mid\n\n        if target < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 4) == 3\n    assert search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 8) is None\n    assert search(array(\"I\", []), 4) is None",
    "def binary_search(arr: list, item: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([2, 5, 6, 8, 9, 10], 10))\n    print(binary_search([2, 5, 6, 8, 9, 10], 9))\n    print(binary_search([2, 5, 6, 8, 9, 10], 8))\n    print(binary_search([2, 5, 6, 8, 9, 10], 5))\n    print(binary_search([2, 5, 6, 8, 9, 10], 2))\n    print(binary_search([2, 5, 6, 8, 9, 10], 1))\n    print(binary_search([2, 5, 6, 8, 9, 10], 100))",
    "from typing import Optional\n\n\ndef binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\n# Test cases\n\ntest1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntest2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ntest4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nprint(binary_search(test1, 4))\nprint(binary_search(test2, 10))\nprint(binary_search(test3, 11))\nprint(binary_search(test4, 12))",
    "from typing import List\n\n\ndef binary_search(arr: List[int], ele: int) -> bool:\n    \"\"\"\n    Time Complexity: O(logn)\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == ele:\n            return True\n        elif arr[mid] < ele:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 5) is True\n    assert binary_search([1, 2, 3, 4, 5], 6) is False",
    "from typing import List\n\n\ndef binary_search(arr: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 6) == 5",
    "from array import array\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    Finds the index of the element in the given array.\n\n    >>> binary_search(array('I', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 7)\n    7\n    >>> binary_search(array('I', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 10)\n    -1\n    \"\"\"\n    first = 0\n    last = len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from array import array\n\n\ndef binary_search(arr: array, low: int, high: int, x: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    return -1\n\n\nif __name__ == \"__main__\":\n    array_one: array = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print(binary_search(array_one, 0, len(array_one) - 1, 7))",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], l: int, r: int, x: int) -> int:\n    \"\"\"\n    Binary search algorithm\n    :param arr: The array to search in\n    :param l: left index\n    :param r: right index\n    :param x: element to search\n    :return: index of the element or -1 if not found\n    \"\"\"\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = array(\"H\", [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610])\n    x = 55\n    result = binary_search(arr, 0, len(arr) - 1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in array\")",
    "from array import array\n\n\ndef binary_search(arr: array, low: int, high: int, key: int) -> int:\n    \"\"\"\n    Binary search algorithm.\n    :param arr: array to search in.\n    :param low: left bound of array.\n    :param high: right bound of array.\n    :param key: key to search.\n    :return: index of key if found, -1 otherwise.\n    \"\"\"\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if arr[mid] == key:\n        return mid\n\n    if key < arr[mid]:\n        return binary_search(arr, low, mid - 1, key)\n    return binary_search(arr, mid + 1, high, key)\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 0, 9, 2))",
    "def binary_search(arr, x):\n    \"\"\"\n    :param: arr - input array\n    :param: x - element to be searched\n    return: index of x in arr if present, else -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        if arr[mid] == x:\n            return mid\n\n        if arr[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1\n\n\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    x = test_case[1]\n    solution = test_case[2]\n    output = binary_search(arr, x)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [2, 3, 4, 10, 40]\nx = 10\nsolution = 3\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [2, 3, 4, 10, 40]\nx = 3\nsolution = 1\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [2, 3, 4, 10, 40]\nx = 1\nsolution = -1\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [2, 3, 4, 10, 40]\nx = 40\nsolution = 4\ntest_case = [arr, x, solution]\ntest_function(test_case)\n\narr = [2, 3, 4, 10, 40]\nx = 41\nsolution = -1\ntest_case = [arr, x, solution]\ntest_function(test_case)",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, low: int, high: int, key: int) -> Optional[int]:\n    if low > high:\n        return None\n\n    mid = (low + high) // 2\n\n    if arr[mid] == key:\n        return mid\n    if arr[mid] < key:\n        return binary_search(arr, mid + 1, high, key)\n    return binary_search(arr, low, mid - 1, key)\n\n\nif __name__ == \"__main__\":\n    arr = array(\"H\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(binary_search(arr, 0, len(arr) - 1, 10))",
    "def binary_search(array, start, end, key):\n    if end < start:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == key:\n        return mid\n\n    if array[mid] > key:\n        return binary_search(array, start, mid-1, key)\n    else:\n        return binary_search(array, mid+1, end, key)\n\n\narray = [10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47]\nkey = 12\n\nresult = binary_search(array, 0, len(array)-1, key)\n\nif result == -1:\n    print(\"Element is not present in the array\")\nelse:\n    print(\"Element is present at index\", result)",
    "def binary_search(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nprint(binary_search([1, 2, 3, 4, 5], 3))\nprint(binary_search([1, 2, 3, 4, 5], 6))",
    "def binary_search(array, n):\n    first = 0\n    last = len(array) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n        if array[mid] == n:\n            return mid\n        elif array[mid] < n:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 5))\n    print(binary_search([1, 2, 3, 4, 5], 4))\n    print(binary_search([1, 2, 3, 4, 5], 6))\n    print(binary_search([1, 2, 3, 4, 5], 1))",
    "from array import array\n\n\ndef binary_search(arr: array, el: int) -> int:\n    \"\"\"\n    :param arr: the array to search in\n    :param el: the element to search for\n    :return: the index of the element, -1 if not found\n    \"\"\"\n    lo, hi = 0, len(arr) - 1\n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] < el:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 2))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 6))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 7))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6]), 0))",
    "def binarySearch(array, key):\n\tleft, right = 0, len(array) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif array[mid] == key:\n\t\t\treturn mid\n\t\telif array[mid] < key:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\nif __name__ == \"__main__\":\n\n\tarray = [2, 5, 6, 8, 9, 10, 12, 45]\n\tkey = 10\n\n\tindex = binarySearch(array, key)\n\tif index != -1:\n\t\tprint(\"Element found at index: \", index)\n\telse:\n\t\tprint(\"Element not found\")",
    "from array import array\n\n\ndef binary_search(arr: array, key: int) -> int:\n    \"\"\"\n    Binary search algorithm.\n    :param arr: sorted array\n    :param key: element to search\n    :return: index of element\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if key == arr[mid]:\n            return mid\n        elif key < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 9))",
    "def binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) / 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    return -1\n\n\ndef main():\n    print(binary_search([3, 4, 5, 6, 7, 8, 9, 10], 0, 7, 4))\n\n\nif __name__ == '__main__':\n    main()",
    "from array import array\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 9, 10, 11]), 6)\n    4\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 9, 10, 11]), 5)\n    3\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 9, 10, 11]), 1)\n    0\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 9, 10, 11]), 11)\n    7\n    >>> binary_search(array('I', [1, 3, 4, 5, 6, 9, 10, 11]), 12)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef binary_search(arr: List[int], left: int, right: int, x: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if right >= left:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            return binary_search(arr, left, mid - 1, x)\n        return binary_search(arr, mid + 1, right, x)\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 10, 40]\n    x = 10\n    print(binary_search(arr, 0, len(arr) - 1, x))",
    "def binary_search(arr, elem, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == elem:\n        return mid\n    elif arr[mid] > elem:\n        return binary_search(arr, elem, low, mid - 1)\n    else:\n        return binary_search(arr, elem, mid + 1, high)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(binary_search(arr, 6))\n    print(binary_search(arr, 4))\n    print(binary_search(arr, 1))\n    print(binary_search(arr, 8))",
    "def binary_search(array, element, left, right):\n    if left > right:\n        return -1\n\n    mid = (left + right) // 2\n\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return binary_search(array, element, left, mid - 1)\n    elif array[mid] < element:\n        return binary_search(array, element, mid + 1, right)\n\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nelement = 5\nprint(binary_search(array, element, 0, len(array) - 1))",
    "def binary_search(array, element, start, end):\n    if start == end:\n        if array[start] == element:\n            return start\n        else:\n            return -1\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return binary_search(array, element, start, mid - 1)\n    else:\n        return binary_search(array, element, mid + 1, end)\n\n\nif __name__ == \"__main__\":\n    array = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    print(binary_search(array, 16, 0, len(array) - 1))",
    "from typing import List\n\n\ndef binary_search(array: List[int], element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if array[mid] == element:\n            return True\n\n        if array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 3) is True\n    assert binary_search([1, 2, 3, 4, 5], 6) is False",
    "from array import array\n\n\ndef search_element(arr: array, element: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == element:\n            return mid\n        if arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(search_element(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 5))\n    print(search_element(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 10))",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, elem: int) -> Optional[int]:\n    \"\"\"\n    Binary search for element in array.\n\n    :param arr: array to search in\n    :param elem: element to search for\n    :return: index of the element, if found, None otherwise\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            return mid\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 2) == 1\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 1) == 0\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 3) == 2\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 8) == 7\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 9) is None",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], ele: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == ele:\n            return mid\n        if arr[mid] > ele:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n    assert binary_search(arr, 10) == 4\n    assert binary_search(arr, 11) == -1",
    "from typing import List\n\n\ndef binary_search(arr: List[int], low: int, high: int, key: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == key:\n            return mid\n\n        if arr[mid] > key:\n            return binary_search(arr, low, mid - 1, key)\n\n        return binary_search(arr, mid + 1, high, key)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 0, 4, 3))",
    "def binary_search(arr, el):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 6))\n    print(binary_search(arr, 11))",
    "def binary_search(arr, item):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 3))",
    "def binary_search(array, element):\n    first = 0\n    last = len(array) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] < element:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    array = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    print(binary_search(array, 18))",
    "def binary_search(arr, x, low, high):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return binary_search(arr, x, low, mid - 1)\n    else:\n        return binary_search(arr, x, mid + 1, high)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    x = 6\n    print(binary_search(arr, x, 0, len(arr) - 1))",
    "from array import array\nfrom typing import List\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef binary_search(arr: array, element: int) -> int:\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef binary_search_recursive(arr: array, element: int, low: int, high: int) -> int:\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return mid\n    elif arr[mid] < element:\n        return binary_search_recursive(arr, element, mid + 1, high)\n    else:\n        return binary_search_recursive(arr, element, low, mid - 1)\n\n\nif __name__ == \"__main__\":\n    arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    element = 3\n    print(binary_search(array(\"I\", arr), element))\n    print(binary_search_recursive(array(\"I\", arr), element, 0, len(arr) - 1))",
    "from array import array\nfrom typing import List, Optional\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    Find the index of element in the given array.\n    :param arr: Array of numbers\n    :param element: Element to search\n    :return: index of element\n    \"\"\"\n    first: int = 0\n    last: int = len(arr) - 1\n\n    while first <= last:\n        mid: int = (first + last) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            last = mid - 1\n        else:\n            first = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 3))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 1))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 9))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 10))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 0))",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, element: int) -> Optional[int]:\n    \"\"\"\n    Binary search.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 3) == 2\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 8) == 7\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 5) == 4\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8]), 9) is None",
    "def binary_search(arr, key):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    key = 6\n    print(binary_search(arr, key))",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], search_key: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == search_key:\n            return mid\n        elif arr[mid] > search_key:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    array_: List[int] = array(\"L\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    search_key = 3\n    assert binary_search(array_, search_key) == 2",
    "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [3, 4, 5, 6, 7, 8, 9]\n    print(binary_search(arr, 4))\n    print(binary_search(arr, 10))",
    "from array import array\nfrom typing import Tuple\n\n\ndef binary_search(arr: array, val: int) -> Tuple[int, bool]:\n    \"\"\"\n    :param arr: array to search for the value\n    :param val: value to search\n    :return: the index of the value in the array and a bool value\n    indicating if the value is present in the array\n    >>> binary_search(array('L', [1, 2, 3, 4, 5, 6, 7]), 4)\n    (3, True)\n    >>> binary_search(array('L', [1, 2, 3, 4, 5, 6, 7]), 10)\n    (-1, False)\n    >>> binary_search(array('L', [1, 2, 3, 4, 5, 6, 7]), 3)\n    (2, True)\n    >>> binary_search(array('L', [1, 2, 3, 4, 5, 6, 7]), 3)\n    (2, True)\n    \"\"\"\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == val:\n            return mid, True\n        elif arr[mid] > val:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1, False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    print(\"Binary search:\")\n    array = array('i', [1, 3, 5, 7, 9])\n    print(binary_search(array, 5))\n    print(binary_search(array, 6))\n\n\nif __name__ == '__main__':\n    main()",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: array, el: int) -> int:\n    \"\"\"\n    O(log n)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 3) == 2\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7]), 8) == -1",
    "def binary_search(array, item):\n    \"\"\"\n    >>> binary_search([1, 2, 3, 4, 5, 6, 7], 3)\n    2\n    >>> binary_search([1, 2, 3, 4, 5, 6, 7], 10)\n    -1\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        guess = array[mid]\n\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def binary_search(array, key):\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if key == array[mid]:\n            return mid\n        elif key < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(binary_search(array, 1))\n    print(binary_search(array, 2))\n    print(binary_search(array, 3))\n    print(binary_search(array, 4))\n    print(binary_search(array, 5))\n    print(binary_search(array, 6))\n    print(binary_search(array, 7))\n    print(binary_search(array, 8))\n    print(binary_search(array, 9))\n    print(binary_search(array, 10))\n\n\nif __name__ == '__main__':\n    main()",
    "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    x = 4\n    print(binary_search(arr, x))",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, target: int) -> Optional[int]:\n    \"\"\"\n    Return the index of the target element.\n    If the target is not present, return None.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            return mid\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 10))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 6))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 3))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 1))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 9))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 2))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 5))\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9]), 8))\n    print(binary_search(array(\"I\", [1, 2,",
    "def search_binary(arr, num):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\ndef main():\n    print(search_binary([1, 2, 3, 4, 5, 6], 4))\n    print(search_binary([1, 2, 3, 4, 5, 6], 6))\n    print(search_binary([1, 2, 3, 4, 5, 6], 7))\n    print(search_binary([1, 2, 3, 4, 5, 6], 0))\n\n\nif __name__ == '__main__':\n    main()",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, element: int) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    low: int = 0\n    high: int = len(arr) - 1\n\n    while low <= high:\n        mid: int = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 3, 5, 6, 7, 9, 10]), 6))",
    "from typing import List\n\n\ndef binary_search(arr: List[int], key: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    key = 4\n    print(binary_search(arr, key))",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], low: int, high: int, x: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [0, 1, 2, 3, 4, 5]), 0, 5, 4))",
    "from array import array\n\n\ndef binary_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    \"\"\"\n    first: int = 0\n    last: int = len(arr) - 1\n\n    while first <= last:\n        mid: int = (first + last) // 2\n\n        if arr[mid] == ele:\n            return mid\n\n        if arr[mid] < ele:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"I\", [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n    assert binary_search(arr, 12) == 5\n    assert binary_search(arr, 10) == 4\n    assert binary_search(arr, 100) == -1",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], el: int) -> int:\n    \"\"\"\n    :param arr: sorted list of elements\n    :param el: element to be searched\n    :return: index of the element in the list or -1 if not found\n    \"\"\"\n    first = 0\n    last = len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == el:\n            return mid\n        if arr[mid] < el:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"L\", [1, 2, 3, 4, 5, 6, 7, 8]), 4))\n    print(binary_search(array(\"L\", [1, 2, 3, 4, 5, 6, 7, 8]), 10))\n    print(binary_search(array(\"L\", [1, 2, 3, 4, 5, 6, 7, 8]), 8))\n    print(binary_search(array(\"L\", [1, 2, 3, 4, 5, 6, 7, 8]), 1))",
    "from array import array\n\n\ndef binary_search(arr: array, ele: int) -> int:\n    \"\"\"\n    Search an element in the given array by using binary search.\n    :param arr: an array\n    :param ele: an element\n    :return: index of the element if found else -1\n    >>> binary_search(array('I', [1, 2, 3, 4, 5]), 3)\n    2\n    >>> binary_search(array('I', [1, 2, 3, 4, 5]), 6)\n    -1\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == ele:\n            return mid\n        elif arr[mid] > ele:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from array import array\n\n\ndef search(arr: array, l: int, r: int, x: int) -> int:\n    \"\"\"\n    :param arr: given array\n    :param l: starting index\n    :param r: ending index\n    :param x: element to be searched\n    :return: index of element in array\n\n    >>> arr = array('i', [1, 2, 3, 4, 5, 6])\n    >>> search(arr, 0, 5, 5)\n    4\n    >>> search(arr, 0, 5, 7)\n    -1\n    \"\"\"\n    while l <= r:\n        mid = l + (r - l) // 2\n\n        # Check if x is present at mid\n        if arr[mid] == x:\n            return mid\n\n        # If x is greater, ignore left half\n        elif arr[mid] < x:\n            l = mid + 1\n\n        # If x is smaller, ignore right half\n        else:\n            r = mid - 1\n\n    # If we reach here, then the element was not present\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef binary_search(arr: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        if arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 6\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 4\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 3",
    "def binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr) - 1, x)\nif result != -1:\n    print(\"Element is present at index: \", result)\nelse:\n    print(\"Element is not present in array\")",
    "def binary_search(arr, item):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef test_binary_search():\n    \"\"\"\n    >>> binary_search([2, 3, 4, 10, 40], 10)\n    3\n    >>> binary_search([2, 3, 4, 10, 40], 11)\n    -1\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n\n        if arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5]), 4) == 3\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5]), 5) == 4\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5]), 6) == -1\n    assert binary_search(array(\"I\", [1, 2, 3, 4, 5]), 0) == -1",
    "from array import array\nfrom bisect import bisect_left\n\n\ndef binary_search(arr: array, item: int) -> int:\n    \"\"\"\n    Find the first index of a given item in a sorted array.\n    :param arr: an array of numbers\n    :param item: a number to be searched\n    :return: the index of the first occurrence of the given item\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] > item:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\ndef binary_search_recursive(arr: array, item: int, left: int = 0, right: int = None) -> int:\n    \"\"\"\n    Find the first index of a given item in a sorted array.\n    :param arr: an array of numbers\n    :param item: a number to be searched\n    :param left: left bound of the array to be searched\n    :param right: right bound of the array to be searched\n    :return: the index of the first occurrence of the given item\n    \"\"\"\n    if right is None:\n        right = len(arr) - 1\n\n    if left > right:\n        return -1\n\n    mid = (left + right) // 2\n    if arr[mid] == item:\n        return mid\n    elif arr[mid] > item:\n        return binary_search_recursive(arr, item, left, mid - 1)\n    else:\n        return binary_search_recursive(arr, item, mid + 1, right)\n\n\ndef binary_search_recursive_bisect(arr: array, item: int, left: int = 0, right: int = None) -> int:\n    \"\"\"\n    Find the first index of a given item in a sorted array.\n    :param arr: an array of numbers\n    :param item: a number to be searched\n    :param left: left bound of the array to be searched\n    :param right: right bound of the array to be",
    "from array import array\nfrom typing import Tuple\n\n\ndef binary_search(arr: array, target: int) -> Tuple[int, int]:\n    \"\"\"\n    Return the position of the element in the array.\n    If the element is not found, return (-1, -1)\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid, mid\n\n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1, -1\n\n\nif __name__ == \"__main__\":\n    array_ = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    target = 4\n    print(binary_search(array_, target))",
    "from typing import List\n\n\ndef binary_search(arr: List[int], start: int, end: int, key: int) -> int:\n    \"\"\"\n    Binary Search\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if end >= start:\n        mid = start + (end - start) // 2\n        if arr[mid] == key:\n            return mid\n        if arr[mid] > key:\n            return binary_search(arr, start, mid - 1, key)\n        return binary_search(arr, mid + 1, end, key)\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([2, 3, 4, 10, 40], 0, 4, 10) == 3\n    assert binary_search([2, 3, 4, 10, 40], 0, 4, 1) == -1",
    "from typing import List\n\n\ndef binary_search(arr: List[int], key: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == key:\n            return mid\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 3))",
    "from array import array\n\n\ndef binary_search(arr: array, ele: int) -> int:\n    \"\"\"\n    This function will return the index of the element if found.\n    If the element is not present, it will return -1\n    :param arr: Array to search in\n    :param ele: Element to search for\n    :return: The index of the element if found, else -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == ele:\n            return mid\n        elif arr[mid] < ele:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search(array(\"H\", [1, 3, 5, 7, 9, 10]), 5) == 2\n    assert binary_search(array(\"H\", [1, 3, 5, 7, 9, 10]), 6) == -1",
    "def binary_search(arr, ele):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == ele:\n            return mid\n        elif arr[mid] > ele:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\narr = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\nele = 35\nprint(binary_search(arr, ele))\n\n\"\"\"\nRuntime Complexity: Linear, O(n)\n\nSpace Complexity: Constant, O(1)\n\nRuntime: 28 ms, faster than 93.02% of Python3 online submissions for Search in Rotated Sorted Array.\nMemory Usage: 13.9 MB, less than 82.18% of Python3 online submissions for Search in Rotated Sorted Array.\n\"\"\"",
    "from __future__ import annotations\n\n\ndef binary_search(arr: list[int], ele: int) -> bool:\n    \"\"\"\n    The idea is to use the fact that the array is sorted.\n    We use the binary search algorithm to search for the element.\n    We can search for the element in two ways:\n    1. If the middle element is equal to the element we are searching, we return True.\n    2. If the middle element is greater than the element we are searching, we search the left part of the array.\n    3. If the middle element is less than the element we are searching, we search the right part of the array.\n    \"\"\"\n\n    def search(arr: list[int], ele: int, left: int, right: int) -> bool:\n        if left > right:\n            return False\n\n        mid = (left + right) // 2\n\n        if arr[mid] == ele:\n            return True\n        elif arr[mid] > ele:\n            return search(arr, ele, left, mid - 1)\n        else:\n            return search(arr, ele, mid + 1, right)\n\n    return search(arr, ele, 0, len(arr) - 1)\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == True\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == False",
    "from typing import List\n\n\ndef binary_search(array: List[int], element: int) -> bool:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    first: int = 0\n    last: int = len(array) - 1\n\n    while first <= last:\n        mid: int = (first + last) // 2\n        if array[mid] == element:\n            return True\n        elif array[mid] < element:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 1))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 5))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 9))",
    "from array import array\nfrom typing import Optional\n\n\ndef binary_search(arr: array, element: int) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    low: int = 0\n    high: int = len(arr) - 1\n\n    while low <= high:\n        mid: int = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 6))",
    "def binary_search(array, target):\n    \"\"\"\n    Binary search algorithm\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    left, right = 0, len(array) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if array[middle] == target:\n            return middle\n        elif array[middle] < target:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8]\n    target = 5\n    result = binary_search(array, target)\n    if result == -1:\n        print(\"Element is not found in the array\")\n    else:\n        print(f\"Element is found at index {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from array import array\n\n\ndef binary_search(arr: array, element: int) -> int:\n    \"\"\"\n    :param arr: array, list of elements\n    :param element: int, element to search\n    :return: index of element if found else -1\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 9))",
    "from typing import List\n\n\ndef binary_search(array: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 4))\n    print(binary_search([1, 2, 3, 4, 5, 6], 6))\n    print(binary_search([1, 2, 3, 4, 5, 6], 1))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))",
    "def binary_search(arr, low, high, x):\n    \"\"\"\n    Binary search algorithm to search element in the given array.\n\n    :param arr: List of integers\n    :param low: Starting index of the list\n    :param high: Ending index of the list\n    :param x: Element to be searched\n    :return: Returns index of element to be searched\n    \"\"\"\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\n\ndef main():\n    arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]\n    x = 100\n    index = binary_search(arr, 0, len(arr) - 1, x)\n    if index != -1:\n        print(f\"Element {x} is present at index {index}\")\n    else:\n        print(\"Element is not present in the list\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def binary_search(arr, low, high, key):\n    \"\"\"\n    :param arr: list of elements\n    :param low: starting index\n    :param high: ending index\n    :param key: element to be searched\n    :return: index of element to be searched\n    \"\"\"\n    if low <= high:\n        mid = (low + high) // 2\n\n        if key == arr[mid]:\n            return mid\n        elif key < arr[mid]:\n            return binary_search(arr, low, mid - 1, key)\n        else:\n            return binary_search(arr, mid + 1, high, key)\n    else:\n        return -1\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    key = 5\n    print(binary_search(arr, 0, len(arr) - 1, key))",
    "from array import array\nfrom typing import List\n\n\ndef binary_search(arr: List[int], el: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        if arr[mid] < el:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search(array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 6))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}