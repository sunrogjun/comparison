{
  "problem": {
    "task_id": "MBPP/499",
    "prompt": "Write a function to find the diameter of a circle.",
    "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
    "test_list": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ],
    "challenge_test_list": [],
    "problem_id": 488
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(2))\nprint(diameter(10))\nprint(diameter(100))",
    "import math\n\n\ndef diameter(radius):\n    return radius * 2\n\n\ndef circumference(radius):\n    return math.pi * radius * 2\n\n\ndef area(radius):\n    return math.pi * radius ** 2\n\n\nprint(diameter(5))\nprint(circumference(5))\nprint(area(5))",
    "import math\n\n\ndef diameter(radius):\n    \"\"\"\n    Diameter of a circle is the distance between its center and the edge of the circle.\n    \"\"\"\n    return radius * 2\n\n\ndef area(radius):\n    \"\"\"\n    Area of a circle is the surface area.\n    \"\"\"\n    return math.pi * (radius ** 2)\n\n\ndef circumference(radius):\n    \"\"\"\n    Circumference of a circle is the distance around the circle.\n    \"\"\"\n    return 2 * math.pi * radius",
    "def diameter(radius):\n    return radius * 2\n\n\ndef diameter_of_a_circle(radius):\n    diameter_of_a_circle = 2 * radius\n    return diameter_of_a_circle\n\n\ndef diameter_of_a_circle_using_pi(radius):\n    diameter_of_a_circle_using_pi = 2 * radius * 3.14\n    return diameter_of_a_circle_using_pi\n\n\n# print(diameter(10))\n# print(diameter_of_a_circle(10))\n# print(diameter_of_a_circle_using_pi(10))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\n\ndef area(radius):\n    return 3.14 * radius * radius",
    "def diameter(r):\n    return 2*r",
    "import math\n\n\ndef diameter(radius: float) -> float:\n    \"\"\"\n    >>> diameter(10)\n    20.0\n    \"\"\"\n    return radius * 2\n\n\ndef diameter_with_pi(radius: float) -> float:\n    \"\"\"\n    >>> diameter_with_pi(10)\n    31.41592653589793\n    \"\"\"\n    return math.pi * radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef diameter_of_circle(r):\n    \"\"\"\n    r: radius of the circle\n    return: diameter of the circle\n    \"\"\"\n    return 2*r\n\n\ndef test_function(test_case):\n    r = test_case[0]\n    solution = test_case[1]\n    output = diameter_of_circle(r)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [(3, 6), (5, 10)]\n\ntest_function(test_case_1)",
    "def diameter_of_circle(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return radius * 2\n\n\ndef diameter_of_circle_1(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return 2 * radius\n\n\ndef diameter_of_circle_2(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter(radius):\n    return 2 * radius\n\nassert diameter(2) == 4\nassert diameter(1) == 4",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(3))",
    "def diameter_of_circle(radius):\n    \"\"\"\n    This function returns the diameter of a circle.\n    \"\"\"\n    return radius * 2\n\n\ndef test_diameter_of_circle():\n    \"\"\"\n    This function tests diameter_of_circle.\n    \"\"\"\n    assert diameter_of_circle(2) == 4",
    "import math\n\n\ndef diameter_of_circle(radius):\n    return radius * 2\n\n\ndef diameter_of_circle_math(radius):\n    return math.pi * radius * 2\n\n\nprint(diameter_of_circle(3))\nprint(diameter_of_circle_math(3))",
    "def diameter(r):\n    return 2 * r\n\n\ndef diameter_of_a_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter(10))",
    "def diameter(radius):\n    return radius * 2\n\n#test\nassert diameter(5) == 10\nassert diameter(2.5) == 5",
    "from math import sqrt\n\n\ndef find_diameter(r):\n    return 2 * r * sqrt(1 - pow(r, 2))\n\n\ndef test_diameter():\n    \"\"\"\n    >>> find_diameter(1)\n    1.0\n    >>> find_diameter(2)\n    2.92893218813452\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef diameter(radius: int) -> int:\n    \"\"\"\n    Diameter of a circle.\n    >>> diameter(5)\n    10\n    \"\"\"\n    return 2 * radius\n\n\ndef diameter_with_sqrt(radius: int) -> int:\n    \"\"\"\n    Diameter of a circle.\n    >>> diameter_with_sqrt(5)\n    10\n    \"\"\"\n    return 2 * radius * sqrt(1 - pow(radius / 2, 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef diameter(radius):\n    \"\"\"\n    Returns the diameter of a circle.\n    \"\"\"\n    return 2 * radius\n\n\ndef area(radius):\n    \"\"\"\n    Returns the area of a circle.\n    \"\"\"\n    return math.pi * radius * radius\n\n\ndef circumference(radius):\n    \"\"\"\n    Returns the circumference of a circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef diameter(r):\n    return 2 * sqrt(r**2 + r**2)\n\n\ndef test_diameter():\n    assert diameter(1) == 4\n    assert diameter(2) == 8",
    "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef diameter_from_diam(diam):\n    return math.sqrt(diam ** 2 / 4)\n\n\ndef diameter_from_circumf(circumference):\n    return circumference / (2 * math.pi)\n\n\ndef diameter_from_area(area):\n    return math.sqrt(area / math.pi)\n\n\ndef diameter_from_circumf_hypot(circumference):\n    return math.sqrt(circumference ** 2 - (4 * math.pi)) / 2\n\n\ndef diameter_from_area_hypot(area):\n    return math.sqrt(area - (math.pi * area ** 2)) / (2 * math.pi)\n\n\ndef diameter_from_diam_hypot(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_area_hypot_2(area):\n    return (area ** 2 - math.pi * area) / (2 * math.pi * math.pi)\n\n\ndef diameter_from_circumf_hypot_2(circumference):\n    return math.sqrt(circumference ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_diam_hypot_2(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_area_hypot_3(area):\n    return math.sqrt(area - math.pi * area) / (2 * math.pi)\n\n\ndef diameter_from_circumf_hypot_3(circumference):\n    return math.sqrt(circumference ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_diam_hypot_3(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2",
    "def diameter(radius):\n    return 2 * radius",
    "def diameter(radius):\n    return radius * 2\n\n\ndef test_diameter():\n    assert diameter(1) == 2\n    assert diameter(2) == 4\n    assert diameter(3) == 6",
    "def diameter_of_circle(radius):\n    \"\"\"\n    Calculate diameter of a circle.\n\n    Arguments:\n        radius {float} -- radius of the circle\n\n    Returns:\n        float -- diameter of the circle\n    \"\"\"\n    diameter = radius * 2\n    return diameter",
    "def find_diameter(radius):\n    return 2 * radius\n\n\ndef test_find_diameter():\n    assert find_diameter(5) == 10\n    assert find_diameter(10) == 20",
    "from math import sqrt\n\n\ndef diameter_of_circle(r):\n    return 2 * r\n\n\ndef diameter_of_circle_using_pi(r):\n    return 2 * sqrt(r ** 2)\n\n\ndef diameter_of_circle_using_pi_2(r):\n    return 2 * sqrt(r ** 2 * 0.25)",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_2(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_3(radius):\n    return 2 * radius",
    "def find_diameter(radius):\n    return radius * 2\n\n\ndef find_diameter_in_cm(radius_in_cm):\n    return radius_in_cm * 2 * 100\n\n\ndef find_diameter_in_in(radius_in_in):\n    return radius_in_in * 2 * 39.37",
    "import math\n\n\ndef diameter_of_circle(r):\n    return 2 * r\n\n\ndef diameter_of_circle_alt(r):\n    return math.pi * r * 2\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(10) == 20\n    assert diameter_of_circle(100) == 200\n    assert diameter_of_circle(1000) == 2000\n    assert diameter_of_circle(10000) == 20000\n\n\ndef test_diameter_of_circle_alt():\n    assert diameter_of_circle_alt(10) == 20\n    assert diameter_of_circle_alt(100) == 200\n    assert diameter_of_circle_alt(1000) == 2000\n    assert diameter_of_circle_alt(10000) == 20000",
    "def diameter(radius: int) -> float:\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter(10))",
    "def diameter(radius):\n    return 2 * radius\n\n\ndef test_diameter():\n    assert diameter(1) == 2",
    "def diameter(radius):\n    return radius * 2\n\n\ndef diameter_test():\n    \"\"\"\n    >>> diameter_test()\n    \"\"\"\n    print(\"Diameter:\", diameter(10))\n\n\nif __name__ == \"__main__\":\n    diameter_test()",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(1))",
    "def diameter(radius):\n    return radius*2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2*3.14*radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14*radius**2\n\n\"\"\"\nWrite a function to find the radius of a circle given the diameter.\n\"\"\"\n\ndef radius(diameter):\n    return diameter/2\n\n\"\"\"\nWrite a function to find the diameter of a circle given the radius.\n\"\"\"\n\ndef diameter_2(radius):\n    return radius*2\n\n\"\"\"\nWrite a function to find the circumference of a circle given the radius.\n\"\"\"\n\ndef circumference_2(radius):\n    return 2*3.14*radius\n\n\"\"\"\nWrite a function to find the area of a circle given the radius.\n\"\"\"\n\ndef area_2(radius):\n    return 3.14*radius**2\n\n\"\"\"\nWrite a function to find the area of a circle given the circumference.\n\"\"\"\n\ndef area_3(circumference):\n    return (circumference/3.14)**2\n\n\"\"\"\nWrite a function to find the circumference of a circle given the area.\n\"\"\"\n\ndef circumference_3(area):\n    return 3.14*area**0.5\n\n\"\"\"\nWrite a function to find the radius of a circle given the area.\n\"\"\"\n\ndef radius_2(area):\n    return area**0.5\n\n\"\"\"\nWrite a function to find the diameter of a circle given the area.\n\"\"\"\n\ndef diameter_3(area):\n    return 2*area**0.5\n\n\"\"\"\nWrite a function to find the radius of a circle given the circumference.\n\"\"\"\n\ndef radius_3(circumference):\n    return circumference/(2*3.14)\n\n\"\"\"\nWrite a function to find the diameter of a circle given the circumference.\n\"\"\"\n\ndef diameter_4(circumference):",
    "def diameter(radius: float) -> float:\n    \"\"\"\n    :param radius: radius of the circle\n    :return: diameter of the circle\n    \"\"\"\n    return 2 * radius\n\n\ndef main():\n    radius = float(input(\"Please provide the radius of the circle: \"))\n    print(f\"The diameter of the circle is {diameter(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_alt(radius):\n    return 2 * sqrt(radius)",
    "def diameter(radius):\n    return radius * 2\n\n\nassert diameter(1) == 2, \"Should be 2\"\nassert diameter(5) == 10, \"Should be 10\"\nassert diameter(10) == 20, \"Should be 20\"",
    "def diameter_of_circle(radius):\n    return radius * 2\n\n\nprint(diameter_of_circle(3))\nprint(diameter_of_circle(5))",
    "def diameter_of_circle(radius):\n    return radius * 2\n\n\ndef diameter_of_circle_with_pi(radius):\n    return radius * 2 * 3.141592653589793\n\n\ndef diameter_of_circle_with_pi_2(radius):\n    return radius * 2 * 3.141592653589793",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(1))",
    "import math\n\ndef diameter_of_a_circle(radius):\n    return 2*radius\n\ndef diameter_of_a_circle_using_pi(radius):\n    return 2*radius*math.pi\n\nradius = int(input(\"Enter the radius of the circle: \"))\n\nprint(\"Diameter of the circle using radius:\", diameter_of_a_circle(radius))\nprint(\"Diameter of the circle using PI:\", diameter_of_a_circle_using_pi(radius))",
    "def diameter(r):\n    return 2 * r\n\n\ndef test_diameter():\n    assert diameter(10) == 20\n    assert diameter(20) == 40\n    assert diameter(30) == 60\n    assert diameter(40) == 80",
    "import math\n\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_alt(radius):\n    return 2 * math.pi * radius\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(1) == 2\n    assert diameter_of_circle(2) == 4\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(4) == 8\n    assert diameter_of_circle(5) == 10\n\n\ndef test_diameter_of_circle_alt():\n    assert diameter_of_circle_alt(1) == 2 * math.pi\n    assert diameter_of_circle_alt(2) == 4 * math.pi\n    assert diameter_of_circle_alt(3) == 6 * math.pi\n    assert diameter_of_circle_alt(4) == 8 * math.pi\n    assert diameter_of_circle_alt(5) == 10 * math.pi",
    "def diameter(r):\n    \"\"\"\n    Diameter of a circle is the length of the diameter.\n    \"\"\"\n    return 2 * r",
    "def diameter_of_circle(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(1))",
    "def diameter(radius):\n    \"\"\"\n    Find the diameter of a circle.\n\n    :param radius: Radius of the circle.\n    :return: Diameter of the circle.\n    \"\"\"\n    return radius * 2\n\n\ndef test_diameter():\n    \"\"\"\n    >>> diameter(5)\n    10\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "def diameter_of_circle(radius):\n    return radius * 2\n\nassert diameter_of_circle(5) == 10, \"Should be 10\"\nassert diameter_of_circle(10) == 20, \"Should be 20\"\nassert diameter_of_circle(15) == 30, \"Should be 30\"",
    "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(5))",
    "def diameter(radius):\n    return 2*radius\n\ndef test_diameter():\n\n    radius = 10\n    expected_diameter = 20\n    assert diameter(radius) == expected_diameter",
    "import math\n\n\ndef diameter(radius: float) -> float:\n    \"\"\"Calculate the diameter of a circle.\n\n    >>> diameter(2)\n    4.0\n    >>> diameter(3)\n    6.0\n    >>> diameter(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return 2 * radius\n\n\ndef area(radius: float) -> float:\n    \"\"\"Calculate the area of a circle.\n\n    >>> area(2)\n    12.566370614359172\n    >>> area(3)\n    28.274333882308138\n    >>> area(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return math.pi * radius ** 2\n\n\ndef circumference(radius: float) -> float:\n    \"\"\"Calculate the circumference of a circle.\n\n    >>> circumference(2)\n    12.566370614359172\n    >>> circumference(3)\n    18.84955592153876\n    >>> circumference(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return 2 * math.pi * radius\n\n\ndef circumference_alt(radius: float) -> float:\n    \"\"\"Calculate the circumference of a circle.\n\n    >>> circumference(2)\n    12.566370614359172\n    >>> circumference(3)\n    18.84955592153876\n    >>> circumference(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError",
    "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print diameter_of_circle(2)",
    "def diameter_of_a_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_a_circle_v2(radius):\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_a_circle(5))\n    print(diameter_of_a_circle_v2(5))",
    "import math\n\n\ndef diameter(radius):\n    return radius * 2\n\n\ndef diameter_math(radius):\n    return math.pi * radius * 2\n\n\nprint(diameter(1))\nprint(diameter_math(1))",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(10))",
    "def diameter(r):\n    return 2 * r\n\nprint(diameter(3))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(r):\n    return 2 * 3.14 * r\n\nprint(circumference(3))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(r):\n    return 3.14 * r ** 2\n\nprint(area(3))",
    "def find_diameter(radius: int) -> int:\n    \"\"\"\n    >>> find_diameter(10)\n    20\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter_of_circle(radius):\n    return 2 * radius",
    "def find_diameter(radius):\n    \"\"\"\n    Return the diameter of a circle with given radius.\n    \"\"\"\n    return 2 * radius",
    "def diameter(radius: float) -> float:\n    \"\"\"Return the diameter of a circle.\n\n    :param radius: The radius of a circle.\n    :type radius: float\n    :return: The diameter of a circle.\n    :rtype: float\n    \"\"\"\n\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    radius = float(input(\"Enter the radius of a circle: \"))\n    print(diameter(radius))",
    "def diameter(radius):\n    return 2 * radius",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\nprint(diameter_of_circle(10))",
    "def diameter_of_circle(radius):\n    return 2*radius\n\nprint(diameter_of_circle(5))",
    "import math\n\n\ndef diameter_of_a_circle(radius):\n    \"\"\"\n    >>> diameter_of_a_circle(1)\n    2\n    >>> diameter_of_a_circle(2)\n    4\n    >>> diameter_of_a_circle(3)\n    6\n    \"\"\"\n    return radius * 2\n\n\ndef diameter_of_a_circle2(radius):\n    \"\"\"\n    >>> diameter_of_a_circle2(1)\n    2\n    >>> diameter_of_a_circle2(2)\n    4\n    >>> diameter_of_a_circle2(3)\n    6\n    \"\"\"\n    return math.pi * radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter(radius: float) -> float:\n    return radius * 2\n\n\nif __name__ == \"__main__\":\n    assert diameter(1) == 2\n    assert diameter(3) == 6\n    assert diameter(5) == 10",
    "def diameter_of_circle(r):\n    return 2 * r\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(1) == 2\n\n\nif __name__ == '__main__':\n    print diameter_of_circle(1)",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(1) == 2",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))",
    "def diameter(radius):\n    return 2 * radius\n\n\ndef test_diameter():\n    assert diameter(2) == 4\n\n\nif __name__ == '__main__':\n    test_diameter()",
    "def diameter(r):\n    return 2 * r\n\n\nprint(diameter(5))",
    "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef circumference(radius):\n    return 2 * math.pi * radius",
    "def diameter(radius):\n    \"\"\"\n    >>> diameter(10)\n    20.0\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_diameter(r):\n    \"\"\"\n    Finds the diameter of a circle.\n\n    Args:\n     r (float): radius of a circle.\n\n    Returns:\n     float: diameter of a circle.\n    \"\"\"\n    return 2 * r\n\ndef main():\n    \"\"\"\n    The main function to run the script.\n    \"\"\"\n    print(find_diameter(5))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef diameter_2(radius):\n    return math.pi * radius * 2\n\n\ndef diameter_3(radius):\n    return 2 * math.pi * radius\n\n\ndef diameter_4(radius):\n    return 4 * math.pi * radius / 3",
    "def find_diameter(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    r = float(input('Radius: '))\n    print(f'Diameter: {find_diameter(r)}')",
    "def diameter_of_circle(radius):\n    return radius * 2\n\n\nprint(diameter_of_circle(4))",
    "def diameter_of_circle(r):\n    return 2*r\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(5) == 10\n\nif __name__ == '__main__':\n    test_diameter_of_circle()\n    print 'Success! All asserts passed.'",
    "def diameter(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    radius = float(input(\"Enter the radius of the circle: \"))\n    print(diameter(radius))",
    "def find_diameter(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(find_diameter(3))",
    "def diameter_of_circle(r: float) -> float:\n    \"\"\"\n    >>> diameter_of_circle(1)\n    2.0\n    \"\"\"\n    return 2 * r\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter(radius):\n    return radius * 2",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    radius = int(input('Radius of the circle: '))\n    print(f'Diameter of the circle: {diameter_of_circle(radius)}')",
    "def find_diameter(radius):\n    \"\"\"Find the diameter of a circle.\n\n    Args:\n        radius: The radius of a circle.\n\n    Returns:\n        The diameter of a circle.\n    \"\"\"\n    return radius * 2\n\n\ndef main():\n    radius = 2\n    print(f\"Radius: {radius}\")\n    print(f\"Diameter: {find_diameter(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def diameter_of_circle(radius):\n    return radius * 2\n\nprint(diameter_of_circle(3))",
    "def diameter_of_circle(radius: int) -> float:\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_circle(1))",
    "def diameter(radius):\n    return 2 * radius\n\n\ndef test_cases():\n    assert diameter(2) == 4\n    print(\"All test cases passed...\")\n\n\nif __name__ == \"__main__\":\n    test_cases()",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(2))",
    "def diameter(radius):\n    \"\"\"\n    Diameter of a circle is equal to the sum of its radius.\n\n    >>> diameter(1)\n    2\n    >>> diameter(2)\n    4\n    >>> diameter(10)\n    20\n    \"\"\"\n    return radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(2) == 4\n    assert diameter_of_circle(1) == 2\n    assert diameter_of_circle(0) == 0\n    assert diameter_of_circle(1.5) == 3",
    "from math import sqrt\n\n\ndef diameter(r):\n    return 2 * sqrt(r ** 2 + r ** 2)\n\n\ndef test_diameter():\n    \"\"\"\n    >>> test_diameter()\n    \"\"\"\n    assert diameter(5) == 14\n    assert diameter(1) == 4\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(4))",
    "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(2))",
    "def diameter(radius):\n    return radius * 2",
    "def diameter(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    radius = int(input('Enter the radius of the circle: '))\n    print(f'The diameter of the circle with radius {radius} is {diameter(radius)}')",
    "def diameter_of_circle(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))",
    "def diameter_of_circle(radius):\n    \"\"\"\n    Diameter of circle = 2 * radius\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_circle(3))",
    "def diameter_of_circle(radius: float) -> float:\n    \"\"\"\n    >>> diameter_of_circle(5)\n    10.0\n    >>> diameter_of_circle(-5)\n    10.0\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter_of_circle(radius):\n    \"\"\"\n    Returns the diameter of a circle.\n\n    >>> diameter_of_circle(1)\n    2\n\n    >>> diameter_of_circle(2)\n    4\n\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n\n    >>> diameter_of_circle(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n\n    >>> diameter_of_circle(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"radius must be positive\")\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(3))",
    "def find_diameter(radius):\n    return radius * 2\n\ndef test_diameter():\n\n    assert find_diameter(1) == 2\n    assert find_diameter(3) == 6\n    assert find_diameter(100) == 200\n\n    print('Passed.')\n\nif __name__ == \"__main__\":\n    test_diameter()",
    "import math\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\ndef circumference_of_circle(radius):\n    return 2 * math.pi * radius\n\ndef area_of_circle(radius):\n    return math.pi * (radius ** 2)",
    "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(10))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}