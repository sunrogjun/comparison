{
  "problem": {
    "task_id": "MBPP/478",
    "prompt": "Write a function to remove lowercase substrings from a given string.",
    "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
    "test_list": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ],
    "challenge_test_list": [],
    "problem_id": 467
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    >>> remove_lowercase(\"The quick brown fox\")\n    'TqBrownFox'\n    >>> remove_lowercase(\"The quicker brown fox\")\n    'TqBrownFox'\n    \"\"\"\n    return \"\".join(i for i in string if i.isupper())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substrings(string):\n    if string == \"\":\n        return \"\"\n\n    substring = string[0]\n    result = substring\n\n    for char in string[1:]:\n        if char >= substring[-1]:\n            substring += char\n        else:\n            result += substring[-1]\n            substring = char\n\n    result += substring[-1]\n\n    return result\n\n\ndef main():\n    assert remove_lowercase_substrings(\"abab\") == \"aba\"\n    assert remove_lowercase_substrings(\"aaabbb\") == \"ab\"\n    assert remove_lowercase_substrings(\"ababbbba\") == \"ababba\"\n    assert remove_lowercase_substrings(\"aabbccddeeffgg\") == \"abccddefg\"\n    assert remove_lowercase_substrings(\"aabbccddeeffggaabb\") == \"abccddefgaab\"\n    assert remove_lowercase_substrings(\"abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"aabcbc\") == \"abc\"\n    assert remove_lowercase_substrings(\"abcddabba\") == \"abcdaba\"\n\n    print(\"All test cases passed!\")\n\n\nif __name__ == '__main__':\n    main()",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    result = []\n    prev = 0\n    while prev < len(string):\n        found = False\n        for i in range(prev + 1, len(string) + 1):\n            if i == len(string) or string[i].isupper():\n                result.append(string[prev:i])\n                prev = i\n                found = True\n                break\n        if not found:\n            result.append(string[prev:])\n            break\n    return ''.join(result)\n\n\ndef main():\n    assert remove_lowercase_substrings('') == ''\n    assert remove_lowercase_substrings('A') == 'A'\n    assert remove_lowercase_substrings('a') == ''\n    assert remove_lowercase_substrings('Ab') == 'Ab'\n    assert remove_lowercase_substrings('aB') == ''\n    assert remove_lowercase_substrings('AB') == 'AB'\n    assert remove_lowercase_substrings('abAB') == 'AB'\n    assert remove_lowercase_substrings('aBaB') == 'B'\n    assert remove_lowercase_substrings('aBaBa') == ''\n    assert remove_lowercase_substrings('aBaBaB') == 'B'\n    assert remove_lowercase_substrings('AbBaBaB') == 'B'\n    assert remove_lowercase_substrings('ABBaBaB') == 'ABB'\n\n\nif __name__ == '__main__':\n    main()",
    "from string import ascii_lowercase\n\n\ndef remove_substrings(string):\n    \"\"\"Remove lowercase substrings from a string.\n\n    Args:\n        string (str): String to remove lowercase substrings from\n\n    Returns:\n        str: String with lowercase substrings removed\n    \"\"\"\n    return ''.join(\n        [string[i:j] for i, j in _substrings(string) if _is_lowercase(string[i:j])]\n    )\n\n\ndef _substrings(string):\n    \"\"\"Returns all substrings in a string.\n\n    Args:\n        string (str): String to get substrings from\n\n    Returns:\n        list: List of tuples, each tuple is a starting and ending index for a substring\n    \"\"\"\n    return [(i, i + 1) for i in range(len(string))] + [\n        (i, j) for i in range(len(string)) for j in range(i + 1, len(string) + 1)\n    ]\n\n\ndef _is_lowercase(substring):\n    \"\"\"Checks if a string is lowercase.\n\n    Args:\n        substring (str): String to check if it is lowercase\n\n    Returns:\n        bool: True if the string is lowercase, False otherwise\n    \"\"\"\n    return set(substring) <= set(ascii_lowercase)",
    "def remove_lower_substrings(string):\n    \"\"\"\n    :param string: str - String\n    :return: str - String without lowercase substrings\n\n    This function takes a string as input and removes all the lowercase substrings\n    from the string.\n\n    >>> remove_lower_substrings('aabccb')\n    'AaBcCb'\n\n    >>> remove_lower_substrings('aAbbb')\n    'aAbbb'\n\n    >>> remove_lower_substrings('abB')\n    'abB'\n\n    >>> remove_lower_substrings('abBcC')\n    'abBcC'\n\n    >>> remove_lower_substrings('AAA')\n    'AAA'\n\n    >>> remove_lower_substrings('AAAa')\n    'AAAa'\n\n    >>> remove_lower_substrings('aaBbCc')\n    'AABBCc'\n\n    >>> remove_lower_substrings('aabBbCc')\n    'AaBbBcCc'\n\n    >>> remove_lower_substrings('abBcCaa')\n    'aBbCcA'\n\n    >>> remove_lower_substrings('aabbBb')\n    'aabbBb'\n\n    >>> remove_lower_substrings('AABBCC')\n    'AABBCC'\n\n    >>> remove_lower_substrings('AABBCCa')\n    'AABBCCa'\n\n    >>> remove_lower_substrings('')\n    ''\n\n    \"\"\"\n    if len(string) <= 1:\n        return string\n    if string[0].isupper():\n        return string[0] + remove_lower_substrings(string[1:])\n    return remove_lower_substrings(string[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substring(string):\n    \"\"\"\n    >>> remove_lowercase_substring('helloWorld')\n    'hW'\n    >>> remove_lowercase_substring('helloWorlds')\n    'hWs'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    # Use a sliding window to check for lowercase letters\n    # If we find a lowercase letter, we remove the substring from the previous lowercase letter to the current letter\n    # We also remove the lowercase letters themselves\n    # We repeat until we reach the end of the string\n    # O(n) time, O(1) space\n    i = 0\n    while i < len(string) - 1:\n        if string[i].islower():\n            while i < len(string) - 1 and string[i + 1].islower():\n                i += 1\n            string = string[:i] + string[i + 1:]\n            i -= 1\n        i += 1\n\n    return string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(s):\n    if not s:\n        return s\n    i = 0\n    j = 1\n    result = ''\n    while j < len(s):\n        if s[j].islower():\n            j += 1\n            continue\n        if s[j].isupper() and s[j-1].islower():\n            j += 1\n            continue\n        if s[j].isupper() and not s[j-1].islower():\n            result += s[i:j]\n            i = j\n        j += 1\n    result += s[i:]\n    return result\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase('') == ''\n    assert remove_lowercase('AaBbCc') == 'ABC'\n    assert remove_lowercase('aBBcDD') == 'BC'\n    assert remove_lowercase('aBBcDDa') == 'BCa'\n    assert remove_lowercase('aBBcDDaD') == 'BCaD'\n    assert remove_lowercase('aBBcDDaDa') == 'BCaDa'\n    assert remove_lowercase('aBBcDDaDaD') == 'BCaDaD'\n    assert remove_lowercase('aBBcDDaDaDa') == 'BCaDaDa'\n    assert remove_lowercase('AaBBbCcDD') == 'ABCcDD'\n    assert remove_lowercase('AaBBbCcDDa') == 'ABCcD'\n    assert remove_lowercase('AaBBbCcDDaD') == 'ABCcDa'\n    assert remove_lowercase('AaBBbCcDDaDa') == 'ABCcDaDa'\n    assert remove_lowercase('AaBBbCcDDaDaD') == 'ABCcDaDa'\n    assert remove_lowercase('AaBBbCcDDaDaDa') == 'ABCcDaDa'\n    assert remove_lowercase('aBBcDDaDdAaB') == 'BCaDaDaB'\n\n\nif __name__ == '__main__':\n    test_remove_lowercase()",
    "from itertools import combinations\n\n\ndef remove_lowercase_substrings(string):\n    # Write your code here.\n    if not string or len(string) == 1:\n        return string\n    result = [string]\n    for i in range(1, len(string) + 1):\n        for comb in combinations(string, i):\n            result.append(\"\".join(comb))\n    result.sort(key=lambda x: len(x))\n    result.reverse()\n    for i, s in enumerate(result):\n        if not s.islower():\n            return result[i:]\n    return result\n\n\ndef remove_lowercase_substrings_2(string):\n    # Write your code here.\n    if not string or len(string) == 1:\n        return string\n    result = [string]\n    for i in range(1, len(string) + 1):\n        for comb in combinations(string, i):\n            result.append(\"\".join(comb))\n    result.sort(key=lambda x: len(x))\n    result.reverse()\n    for i, s in enumerate(result):\n        if not s.islower():\n            return result[i:]\n    return result",
    "def remove_lowercase(str):\n    for i in range(len(str)):\n        if str[i] > str[i+1]:\n            return str\n        elif str[i] == str[i+1]:\n            return str[:i+1]\n\nif __name__ == '__main__':\n    print(\"Enter a string:\")\n    str = input()\n    print(\"The string after removing lowercase substrings:\")\n    print(remove_lowercase(str))",
    "def remove_lower_substrings(input_str):\n    if not input_str:\n        return input_str\n\n    for i in range(len(input_str)):\n        for j in range(i + 1, len(input_str) + 1):\n            substr = input_str[i:j]\n            if not (set(list(substr)) - set(list(substr.upper()))):\n                input_str = input_str.replace(substr, \"\")\n    return input_str\n\n\nprint(remove_lower_substrings(\"aabBcCdD\"))\nprint(remove_lower_substrings(\"AaBbCcDd\"))\nprint(remove_lower_substrings(\"AaBbCcDdEeFf\"))\nprint(remove_lower_substrings(\"AaBbCcDdEeFfGgHh\"))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings(\"abABa\")\n    'AB'\n    >>> remove_lowercase_substrings(\"abABa\")\n    'AB'\n    >>> remove_lowercase_substrings(\"abABaab\")\n    'ABa'\n    >>> remove_lowercase_substrings(\"abABaab\")\n    'ABa'\n    >>> remove_lowercase_substrings(\"abABaabA\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabA\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabAa\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabAa\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabAa\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabAa\")\n    'ABaA'\n    >>> remove_lowercase_substrings(\"abABaabAa\")\n    'ABaA'\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i == 0 or string[i - 1].isupper():\n            result += string[i]\n        else:\n            if string[i].isupper():\n                result += string[i]\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lower_substrings(string):\n    if len(string) == 0:\n        return \"\"\n    # Find the index of the first uppercase character\n    index = 0\n    while string[index].islower():\n        index += 1\n    # Find the index of the first lowercase character\n    index2 = len(string) - 1\n    while string[index2].islower():\n        index2 -= 1\n    # If there is no uppercase character, return \"\"\n    if index == len(string) or index2 == -1:\n        return \"\"\n    # Otherwise, return the substring from the first uppercase character to the last lowercase character\n    return string[index: index2 + 1]\n\n\ndef test_remove_lower_substrings():\n    assert remove_lower_substrings(\"aBcD\") == \"BC\"\n    assert remove_lower_substrings(\"abcd\") == \"\"\n    assert remove_lower_substrings(\"abCD\") == \"abCD\"\n    assert remove_lower_substrings(\"AbCD\") == \"AbCD\"\n    assert remove_lower_substrings(\"abcD\") == \"cD\"\n    assert remove_lower_substrings(\"abcd\") == \"\"",
    "def remove_lowercase(string):\n    \"\"\"\n    :param string: str - string to evaluate\n    :return: str - string with all lowercase substrings removed\n    \"\"\"\n    result = ''\n    if len(string) == 0:\n        return result\n    else:\n        if string[0].islower():\n            string = string[1:]\n            return remove_lowercase(string)\n        else:\n            result += string[0]\n            string = string[1:]\n            return result + remove_lowercase(string)\n\n\ndef remove_lowercase_alt(string):\n    \"\"\"\n    :param string: str - string to evaluate\n    :return: str - string with all lowercase substrings removed\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        if string[0].islower():\n            return remove_lowercase_alt(string[1:])\n        else:\n            return string[0] + remove_lowercase_alt(string[1:])\n\n\ndef remove_lowercase_alt2(string):\n    \"\"\"\n    :param string: str - string to evaluate\n    :return: str - string with all lowercase substrings removed\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        if string[0].islower():\n            return remove_lowercase_alt2(string[1:])\n        else:\n            return string[0] + remove_lowercase_alt2(string[1:])\n\n\ndef main():\n    \"\"\"print results\"\"\"\n    print(remove_lowercase('aBcD'))\n    print(remove_lowercase('abCd'))\n    print(remove_lowercase('abcd'))\n    print(remove_lowercase('abCD'))\n    print(remove_lowercase('ABcD'))\n    print(remove_lowercase('aBCd'))\n    print(remove_lowercase('aBcDe'))\n    print(remove_lowercase('aBcDeF'))\n    print(remove_lowercase('aBcDeFg'))\n    print(remove_lowercase('aBcDeFgH'))\n    print(remove",
    "def remove_lowercase_substrings(string: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): input string.\n\n    Examples:\n        >>> assert remove_lowercase_substrings('abababa') == 'ababa'\n        >>> assert remove_lowercase_substrings('aaabbb') == ''\n    \"\"\"\n    return \"\".join(\n        [string[i:j] for i, j in _find_lowercase_substrings(string)]\n    )\n\n\ndef _find_lowercase_substrings(string: str) -> list:\n    \"\"\"Find lowercase substrings from a given string.\n\n    Args:\n        string (str): input string.\n\n    Examples:\n        >>> assert _find_lowercase_substrings('abababa') == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n        >>> assert _find_lowercase_substrings('aaabbb') == []\n    \"\"\"\n    if not string:\n        return []\n    return [\n        (i, j)\n        for i, j in zip(range(len(string)), range(len(string)))\n        if string[i].isupper() and string[j].isupper()\n    ]\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"abababa\"))",
    "def remove_lowercase(string):\n    return string.lower()\n\n\ndef test_remove_lowercase():\n    \"\"\"Test for remove_lowercase function.\"\"\"\n    assert remove_lowercase(\"Hello World\") == \"H W\"\n    assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\n    assert remove_lowercase(\"HeLLo WoRLd\") == \"H W\"\n    assert remove_lowercase(\"hello world\") == \"H W\"\n    assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\n\n\nif __name__ == \"__main__\":\n    test_remove_lowercase()",
    "def remove_lower(string):\n    \"\"\"\n    >>> remove_lower(\"Hello World\")\n    \"H W\"\n    >>> remove_lower(\"HELLO\")\n    \"H\"\n    >>> remove_lower(\"World\")\n    \"\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i]\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_substrings(s):\n    return \"\".join(s[i] for i in range(len(s)) if not s[i+1:].lower().startswith(s[i]))\n\n\nif __name__ == \"__main__\":\n    print(remove_substrings(\"abababAB\"))\n    print(remove_substrings(\"abABABabAB\"))\n    print(remove_substrings(\"ABABABAB\"))\n    print(remove_substrings(\"ABABABabAB\"))",
    "def remove_lowercase(string):\n    \"\"\"\n    :param string: input string\n    :return: string with lowercase substrings removed\n    \"\"\"\n    if not string:\n        return string\n\n    start = 0\n    for index, char in enumerate(string):\n        if char.islower():\n            continue\n\n        if start < index:\n            string = string[:start] + string[index:]\n\n        start = index + 1\n\n    return string\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"abcDEF\"))\n    print(remove_lowercase(\"abcdef\"))\n    print(remove_lowercase(\"abcDEFabcdef\"))\n    print(remove_lowercase(\"abcDEFabcdefabc\"))\n    print(remove_lowercase(\"abcDEFabcdefabcDEF\"))\n    print(remove_lowercase(\"abcdefabcdefabcDEF\"))\n    print(remove_lowercase(\"abcDEFabcdefabcdef\"))\n    print(remove_lowercase(\"abcDEFabcdefabcdefabc\"))\n    print(remove_lowercase(\"abcDEFabcdefabcdefabcDEF\"))\n    print(remove_lowercase(\"abcdefabcdefabcdefabc\"))\n    print(remove_lowercase(\"\"))\n    print(remove_lowercase(None))",
    "def remove_lowercase(str):\n    \"\"\"\n    >>> remove_lowercase('abcd')\n    'abcd'\n    >>> remove_lowercase('Aabc')\n    'Aabc'\n    >>> remove_lowercase('Aabcd')\n    'A'\n    >>> remove_lowercase('AabcdE')\n    'AabcdE'\n    \"\"\"\n    if len(str) == 0:\n        return str\n    result = ''\n    for i in range(len(str)):\n        if str[i].isupper():\n            result += str[i]\n        else:\n            if len(result) != 0 and result[-1].isupper():\n                result += str[i]\n            else:\n                pass\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(string):\n    # TODO: Write your code here\n    string = string.replace(\" \", \"\")\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i]\n    return result\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(remove_lowercase(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from timeit import timeit\n\n\ndef remove_substrings(s: str) -> str:\n    \"\"\"Remove lowercase substrings from a given string.\n\n    >>> remove_substrings('aAbbAa')\n    'Aa'\n    >>> remove_substrings('AbbAa')\n    ''\n    >>> remove_substrings('abc')\n    ''\n    >>> remove_substrings('')\n    ''\n    \"\"\"\n    s = s.lower()\n    for i in range(1, len(s)):\n        if s[i] in s[:i]:\n            return \"\"\n    return s\n\n\nif __name__ == \"__main__\":\n    s = \"aAbbAa\"\n    print(timeit(lambda: remove_substrings(s), number=10000))",
    "def remove_lowercase_substrings(string):\n    if len(string) <= 1:\n        return string\n\n    result = \"\"\n    start = 0\n    while start < len(string):\n        end = start + 1\n        while end < len(string) and ord(string[start]) <= ord(string[end]):\n            end += 1\n\n        result += string[start]\n        start = end\n\n    return result\n\n\nprint(remove_lowercase_substrings(\"aBCdEF\"))",
    "def remove_lowercase_substrings(string):\n    # Base case\n    if len(string) == 0:\n        return string\n\n    # Let's assume that the first character of the string is the first character of the substring\n    # that we need to remove.\n    substring = string[0]\n\n    # Traverse the string, keeping track of the characters we have visited\n    for i in range(1, len(string)):\n        if string[i] >= substring[-1]:\n            # We're still in the same substring.\n            substring += string[i]\n        else:\n            # We've entered a new substring, so let's check if this is a subtring of all lowercase\n            # characters.\n            if all(c.islower() for c in substring):\n                # If so, we need to remove this substring from our string.\n                string = string.replace(substring, \"\")\n            # Reset the substring.\n            substring = string[i]\n\n    # Check if the final substring is all lowercase.\n    if all(c.islower() for c in substring):\n        string = string.replace(substring, \"\")\n\n    return string\n\n\nprint(remove_lowercase_substrings(\"abABa\"))\nprint(remove_lowercase_substrings(\"abABaC\"))\nprint(remove_lowercase_substrings(\"aabAAB\"))\nprint(remove_lowercase_substrings(\"aabAABb\"))\nprint(remove_lowercase_substrings(\"aabAABbC\"))",
    "def remove_lowercase(string):\n    \"\"\"\n    This solution is O(n) and O(1) space\n    \"\"\"\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            string = string[:i] + string[i + 1 :]\n            i -= 1\n        i += 1\n    return string\n\n\ndef remove_lowercase2(string):\n    \"\"\"\n    This solution is O(n) and O(n) space\n    \"\"\"\n    if not string:\n        return \"\"\n    new_string = []\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            new_string.append(string[i + 1 :])\n            break\n        new_string.append(string[i])\n        i += 1\n    return \"\".join(new_string)\n\n\ndef main():\n    assert remove_lowercase(\"\") == \"\"\n    assert remove_lowercase(\"a\") == \"a\"\n    assert remove_lowercase(\"A\") == \"A\"\n    assert remove_lowercase(\"Abc\") == \"Abc\"\n    assert remove_lowercase(\"aBc\") == \"Bc\"\n    assert remove_lowercase(\"aBcD\") == \"BcD\"\n    assert remove_lowercase(\"aBcDdE\") == \"BcD\"\n    assert remove_lowercase(\"aBcDe\") == \"Bc\"\n    assert remove_lowercase(\"aBcDeE\") == \"Bc\"\n    assert remove_lowercase(\"aBcDdEe\") == \"Bc\"\n\n    assert remove_lowercase2(\"\") == \"\"\n    assert remove_lowercase2(\"a\") == \"a\"\n    assert remove_lowercase2(\"A\") == \"A\"\n    assert remove_lowercase2(\"Abc\") == \"Abc\"\n    assert remove_lowercase2(\"aBc\") == \"Bc\"\n    assert remove_lowercase2(\"aBcD\") == \"BcD\"\n    assert remove_lowercase2(\"aBcDdE\") == \"BcD\"\n    assert remove",
    "def remove_lowercase_substrings(str):\n    # Remove lowercase substrings from a given string\n    # If string is empty or None, return None\n    if not str:\n        return None\n    # If there is no lowercase substring, return original string\n    if str.isupper():\n        return str\n    # If there is no uppercase substring, return empty string\n    if str.islower():\n        return ''\n    # Split the string into a list of words\n    words = str.split()\n    # Remove lowercase substring from each word\n    for i, word in enumerate(words):\n        if word.islower():\n            words[i] = ''\n    # Return the joined words\n    return ' '.join(words)\n\n\ndef main():\n    print(remove_lowercase_substrings('')) # None\n    print(remove_lowercase_substrings(None)) # None\n    print(remove_lowercase_substrings('A')) # None\n    print(remove_lowercase_substrings('AB')) # None\n    print(remove_lowercase_substrings('ABA')) # None\n    print(remove_lowercase_substrings('ABBAB')) # None\n    print(remove_lowercase_substrings('ABBABA')) # None\n    print(remove_lowercase_substrings('a')) # None\n    print(remove_lowercase_substrings('Aa')) # None\n    print(remove_lowercase_substrings('aa')) # None\n    print(remove_lowercase_substrings('AA')) # None\n    print(remove_lowercase_substrings('aA')) # None\n    print(remove_lowercase_substrings('AaA')) # None\n    print(remove_lowercase_substrings('AaAa')) # None\n    print(remove_lowercase_substrings('AaAaA')) # None\n    print(remove_lowercase_substrings('AaAaAb')) # None\n    print(remove_lowercase_substrings('AaAaAbA')) # None\n    print(remove_lowercase_substrings('AaAaAbB')) # None\n    print(remove_lowercase_substrings('AaAaAbBA",
    "def remove_lowercase(string):\n    \"\"\"\n    This function removes lowercase substrings from a given string.\n\n    >>> remove_lowercase('hello world')\n    'hlowrd'\n    >>> remove_lowercase('HELLO world')\n    'HELLO world'\n    >>> remove_lowercase('hello WORLD')\n    'hld'\n    >>> remove_lowercase('')\n    ''\n    >>> remove_lowercase('hello world!')\n    'hlowrd!'\n    \"\"\"\n    # Base case\n    if string == '':\n        return ''\n\n    # Recursive case\n    if string[0] >= 'a' and string[0] <= 'z':\n        return remove_lowercase(string[1:])\n    else:\n        return string[0] + remove_lowercase(string[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(string):\n    if len(string) == 0:\n        return\n\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            string = string[:i] + string[i + 1:]\n        else:\n            i += 1\n    return string\n\n\nprint(remove_lowercase(\"AABCCa\"))",
    "def remove_lowercase_substrings(s):\n    \"\"\"\n    :param s: str - input string\n    :return: str - input string without lowercase substrings\n    \"\"\"\n    # Your code here\n    # check if the string is empty\n    if s == '':\n        return s\n\n    # check if the first char is uppercase\n    if s[0].isupper():\n        # if it is, then we can return the string\n        return s\n\n    # create a new string to hold the results\n    new_string = ''\n\n    # add the first char to the new string\n    new_string += s[0]\n\n    # create a variable to hold the index of the current char\n    current_index = 1\n\n    # create a variable to hold the index of the previous char\n    previous_index = 0\n\n    # loop through the string\n    while current_index < len(s):\n        # check if the current char is lowercase\n        if s[current_index].islower():\n            # check if the previous char is uppercase\n            if s[previous_index].isupper():\n                # if so, then add it to the new string\n                new_string += s[current_index]\n                # update the previous index\n                previous_index = current_index\n        else:\n            # if not, then add it to the new string\n            new_string += s[current_index]\n            # update the previous index\n            previous_index = current_index\n\n        # update the current index\n        current_index += 1\n\n    # return the new string\n    return new_string\n\n\nprint(remove_lowercase_substrings('aBc'))\nprint(remove_lowercase_substrings('AbC'))\nprint(remove_lowercase_substrings('aBC'))\nprint(remove_lowercase_substrings('abc'))\nprint(remove_lowercase_substrings('AbC'))\nprint(remove_lowercase_substrings('ABc'))\nprint(remove_lowercase_substrings('ABc'))\nprint(remove_lowercase_substrings('abC'))\nprint(remove_lowercase_substrings('ABc'))\nprint(remove_lowercase_",
    "from collections import deque\n\ndef remove_lowercase(input_str):\n    \"\"\"\n    :param input_str: string to check\n    :return: string without lowercase substrings\n    \"\"\"\n    if not input_str:\n        return input_str\n\n    # split the string into a list of words\n    words = input_str.split()\n\n    # create a deque with words in it\n    words_deque = deque(words)\n\n    # check if the first word is a lowercase string\n    # if it is, remove it from the deque\n    if words_deque[0][0].islower():\n        words_deque.popleft()\n\n    # create a new string to return\n    output_str = \"\"\n\n    # while the deque is not empty\n    while words_deque:\n        # get the last word from the deque\n        last_word = words_deque.pop()\n\n        # if the last word is a lowercase string\n        # remove it from the deque\n        if last_word[0].islower():\n            words_deque.pop()\n\n        # add the word to the string\n        output_str = last_word + \" \" + output_str\n\n    # return the string\n    return output_str\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"HeLlo world\"))\n    print(remove_lowercase(\"HeLlo\"))\n    print(remove_lowercase(\"hello world\"))\n    print(remove_lowercase(\"hello\"))\n    print(remove_lowercase(\"\"))\n    print(remove_lowercase(\" \"))\n    print(remove_lowercase(\"HeLlo world hello world\"))\n    print(remove_lowercase(\"world world\"))\n    print(remove_lowercase(\"world hello world\"))\n    print(remove_lowercase(\"world hello hello world\"))\n    print(remove_lowercase(\"hello hello world\"))",
    "from collections import defaultdict\n\ndef remove_substrings(string):\n    \"\"\"Removes lowercase substrings from a string.\n\n    Args:\n        string: The string to remove substrings from.\n    \"\"\"\n    char_map = defaultdict(int)\n    substring_start = -1\n    substring_end = -1\n    substring_length = 0\n    substring_index = 0\n    for i in range(len(string)):\n        char_map[string[i]] += 1\n        if substring_index == 0 and char_map[string[i]] == 1:\n            substring_start = i\n            substring_index = 1\n        elif substring_index == 0 and char_map[string[i]] > 1:\n            substring_start = -1\n            substring_end = -1\n            substring_length = 0\n            substring_index = 0\n        elif substring_start == -1 and char_map[string[i]] == 1:\n            substring_start = i\n            substring_index = 1\n        elif substring_start != -1 and substring_index == substring_length:\n            substring_end = i\n            substring_index = 0\n            substring_length = substring_end - substring_start + 1\n        elif substring_start != -1 and substring_index != substring_length:\n            substring_index += 1\n\n    if substring_length == 0:\n        return string\n\n    return string[:substring_start] + remove_substrings(string[substring_end + 1:])\n\ndef main():\n    \"\"\"Test the remove_substrings function.\"\"\"\n    test_cases = [\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\", \"HldWrd\"),\n        (\"HelloWorld\",",
    "def remove_lower_substrings(string):\n    \"\"\"Remove lowercase substrings from a given string.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    Args:\n        string (str): A given string.\n\n    Returns:\n        str: A new string without lowercase substrings.\n    \"\"\"\n    if not string:\n        return string\n\n    uppercase_index = 0\n    for i in range(1, len(string)):\n        if string[i].isupper():\n            string = string[:uppercase_index] + string[i:]\n            uppercase_index = uppercase_index + 1\n    return string\n\n\ndef main():\n    string = \"abcDEFghiJKLmnoPQR\"\n    print(remove_lower_substrings(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lowercase_substrings(string: str) -> str:\n    \"\"\"Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): given string\n\n    Returns:\n        str: string without lowercase substrings\n\n    Examples:\n        >>> assert remove_lowercase_substrings(\"abcABCabc\") == \"abcABC\"\n        >>> assert remove_lowercase_substrings(\"\") == \"\"\n        >>> assert remove_lowercase_substrings(\"ABC\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"abcABC\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"abcABCabc\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"abcABCabcABC\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"ABCabc\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"ABCabcABC\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"abcABCabcabc\") == \"ABC\"\n        >>> assert remove_lowercase_substrings(\"abcABCabcabcABC\") == \"ABC\"\n    \"\"\"\n    result = \"\"\n\n    for index in range(len(string)):\n        if index == 0:\n            result += string[index]\n            continue\n        if string[index].isupper() and string[index - 1].islower():\n            continue\n        result += string[index]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase_substrings(\"abcABCabc\"))",
    "def remove_substrings(s: str) -> str:\n    \"\"\"\n    >>> remove_substrings(\"aAbba\")\n    'ABBA'\n    >>> remove_substrings(\"AbaBac\")\n    'ABAC'\n    >>> remove_substrings(\"aabAa\")\n    'AABA'\n    \"\"\"\n    last_index = 0\n    for i in range(1, len(s)):\n        if s[i].isupper() and s[i - 1].islower():\n            s = s[:last_index] + s[i:]\n            i = last_index\n        elif s[i].islower() and s[i - 1].isupper():\n            last_index = i\n    return s\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings('hello')\n    'hlo'\n    \"\"\"\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i].islower():\n            if i < len(string_list) - 1:\n                if string_list[i + 1].islower():\n                    continue\n            string_list[i] = \"\"\n\n    return \"\".join(string_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(string):\n    \"\"\"\n    We're going to use two pointers, one at the beginning and one at the end.\n    We're going to look at the characters at the beginning and end and see if\n    they're lowercase. If they are, we'll advance the end pointer and shrink\n    the string.\n    \"\"\"\n    start = 0\n    end = len(string) - 1\n\n    while start < end:\n        if string[start].islower():\n            string = string[:start] + string[start + 1:]\n        if string[end].islower():\n            string = string[:end]\n        start += 1\n        end -= 1\n\n    return string",
    "from collections import deque\n\ndef remove_lowercase_substrings(input_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # TODO: Write your code here\n    if len(input_string) == 0:\n        return input_string\n\n    stack = deque()\n    stack.append(input_string[0])\n\n    for i in range(1, len(input_string)):\n        if input_string[i].isupper():\n            stack.append(input_string[i])\n        else:\n            if stack[-1].isupper():\n                stack.append(input_string[i])\n            else:\n                stack.pop()\n                stack.append(input_string[i])\n\n    return \"\".join(stack)\n\n\nif __name__ == \"__main__\":\n    input_string = \"abBcCdDeE\"\n    print(remove_lowercase_substrings(input_string))",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): given string.\n\n    Returns:\n        str: given string without lowercase substrings.\n\n    Examples:\n        >>> assert remove_lowercase('Hello World') == 'HW'\n        >>> assert remove_lowercase('Hello World!') == 'HW'\n        >>> assert remove_lowercase('Hello World!') == 'HW'\n        >>> assert remove_lowercase('HELLO WORLD') == ''\n        >>> assert remove_lowercase('') == ''\n    \"\"\"\n    if not string:\n        return string\n\n    result = []\n    for i, char in enumerate(string):\n        if char.isupper():\n            result.append(char)\n            continue\n        if i + 1 == len(string):\n            continue\n        if char.islower() and string[i + 1].isupper():\n            result.append(char)\n            continue\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"Hello World\"))",
    "def remove_substrings(s):\n    # Write your code here.\n\tresult = []\n\tfor c in s:\n\t\tif c.isupper():\n\t\t\tresult.append(c)\n\treturn ''.join(result)\n\n\nprint(remove_substrings(\"hello\"))",
    "def remove_lowercase(string):\n    string_list = list(string)\n    new_list = []\n    for i in range(len(string_list)):\n        if string_list[i].isupper():\n            new_list.append(string_list[i])\n    return \"\".join(new_list)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"Hello\"))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    :param string: str - input string\n    :return: str\n    \"\"\"\n    if string == '':\n        return ''\n\n    for i in range(1, len(string)):\n        if string[i].islower():\n            return remove_lowercase_substrings(string[:i - 1]) + string[i:]\n\n    return string\n\n\nif __name__ == '__main__':\n    print(remove_lowercase_substrings('Hello world'))",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase('abcdef')\n    'abcdef'\n    >>> remove_lowercase('abcdefg')\n    'abcefg'\n    >>> remove_lowercase('abcdEfG')\n    'abcdEfG'\n    >>> remove_lowercase('abCD')\n    'abCD'\n    \"\"\"\n    if string == string.upper():\n        return string\n    else:\n        return ''.join(char for char in string if char == char.upper())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(string):\n    # Check if string is empty\n    if len(string) == 0:\n        return string\n\n    # Check if string has only one character\n    if len(string) == 1:\n        if string.islower():\n            return \"\"\n        else:\n            return string\n\n    # Check if string has more than one character\n    if string[0].isupper():\n        return string[0] + remove_lowercase(string[1:])\n    else:\n        return remove_lowercase(string[1:])\n\nif __name__ == '__main__':\n    test_string = \"AbcdefGhijKLMnopQRSTuvWXYZ\"\n    print(remove_lowercase(test_string))",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    >>> remove_lowercase('AabBcCdD')\n    'ABB'\n    \"\"\"\n    return \"\".join(\n        [string[i] for i in range(len(string) - 1) if string[i] > string[i + 1]]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(input_str):\n    input_str = input_str.lower()\n    return input_str.replace(input_str, input_str.upper())\n\n\nprint(remove_lowercase(\"Hello, world!\"))  # 'HELLO, WORLD!'\nprint(remove_lowercase(\"A nice day.\"))  # 'A NICE DAY.'\nprint(remove_lowercase(\"Five plus five equals ten.\"))  # 'FIVE PLUS FIVE EQUALS TEN.'\nprint(remove_lowercase(\"Hello\"))  # 'HELLO'",
    "def remove_substrings(input_string):\n    \"\"\"\n    >>> remove_substrings('abcde')\n    'abcde'\n    >>> remove_substrings('abcdeFabcde')\n    'abcdeFabcde'\n    >>> remove_substrings('abcdeabcde')\n    'abcdeabcde'\n    >>> remove_substrings('abcdeabcdefabcde')\n    'abcdeabcdefabcde'\n    >>> remove_substrings('aBcDe')\n    'BcDe'\n    >>> remove_substrings('aBcDeF')\n    'BcDeF'\n    >>> remove_substrings('aBcDeabcde')\n    'BcDeabcde'\n    >>> remove_substrings('abcdeabcdefabcdeabcde')\n    'abcdeabcdefabcdeabcde'\n    \"\"\"\n    if not input_string:\n        return \"\"\n\n    # Find the index of the first uppercase character in the string\n    first_uppercase_index = None\n    for index, char in enumerate(input_string):\n        if char.isupper():\n            first_uppercase_index = index\n            break\n\n    # If there are no uppercase characters, return the empty string\n    if first_uppercase_index is None:\n        return \"\"\n\n    # Create a list of all lowercase substrings in the string\n    lowercase_substrings = []\n    for index, char in enumerate(input_string):\n        if char.islower():\n            lowercase_substrings.append(input_string[index : index + 1])\n\n    # Create a list of all uppercase substrings in the string\n    uppercase_substrings = []\n    for index, char in enumerate(input_string):\n        if char.isupper():\n            uppercase_substrings.append(input_string[index : index + 1])\n\n    # Find the longest uppercase substring in the string\n    longest_uppercase_substring = None\n    for uppercase_substring in uppercase_substrings:\n        if longest_uppercase_substring is None or len(\n            longest_uppercase_substring\n        ) < len(uppercase_substring):\n            longest",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase('AabBcC')\n    'AaBc'\n    >>> remove_lowercase('aabBcC')\n    'aabBcC'\n    \"\"\"\n    if not string:\n        return string\n\n    i = 1\n    while i < len(string):\n        if string[i].islower() and string[i - 1].islower():\n            string = string[:i] + string[i + 1 :]\n            i -= 1\n        i += 1\n\n    return string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase('abCdE')\n    'AbCdE'\n    >>> remove_lowercase('abde')\n    'Abde'\n    >>> remove_lowercase('abcd')\n    'Abcd'\n    \"\"\"\n    if string == string.upper():\n        return string.upper()\n    else:\n        for i in string:\n            if i.islower():\n                string = string.replace(i, '')\n        return string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(input_string):\n    result = []\n    i = 0\n    while i < len(input_string):\n        if input_string[i].islower():\n            i += 1\n            continue\n        j = i + 1\n        while j < len(input_string):\n            if input_string[j].islower():\n                break\n            j += 1\n        result.append(input_string[i:j])\n        i = j\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"abc\"))\n    print(remove_lowercase(\"Abcdef\"))\n    print(remove_lowercase(\"abcdef\"))\n    print(remove_lowercase(\"Abcdefg\"))\n    print(remove_lowercase(\"abcdefg\"))\n    print(remove_lowercase(\"abcdefgh\"))\n    print(remove_lowercase(\"abcdefghi\"))",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    >>> remove_lowercase('hello')\n    'hll'\n    >>> remove_lowercase('Hello')\n    'Hll'\n    >>> remove_lowercase('heLLo')\n    'Hll'\n    \"\"\"\n    prev = None\n    result = []\n\n    for char in string:\n        if prev is None:\n            result.append(char)\n            prev = char\n        elif prev.isupper() and char.isupper():\n            result.append(char)\n            prev = char\n        elif prev.isupper() and char.islower():\n            result.append(prev.upper())\n            prev = char\n        else:\n            result.append(char)\n            prev = char\n\n    if prev is not None:\n        if prev.islower():\n            result.append(prev.upper())\n        else:\n            result.append(prev)\n\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_substrings(strng):\n    substring = \"\"\n    for char in strng:\n        if char.isupper():\n            substring += char\n        elif substring:\n            if not substring[0].isupper():\n                substring = \"\"\n    return substring\n\n\nif __name__ == '__main__':\n    print(remove_substrings(\"Hello\"))\n    print(remove_substrings(\"HelloWorld\"))\n    print(remove_substrings(\"AaBbCc\"))",
    "def remove_lowercase(string):\n    return \"\".join(c for c in string if c.isupper())\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase(\"Hello World\") == \"HW\"\n    assert remove_lowercase(\"HELLO WORLD\") == \"HELLOWORLD\"",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase('aAbbB')\n    'AB'\n    \"\"\"\n    return \"\".join(\n        [string[i] for i in range(len(string) - 1) if string[i] > string[i + 1]]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    >>> remove_lowercase(\"aabBaa\")\n    'aaB'\n    >>> remove_lowercase(\"aAaaB\")\n    'aAaaB'\n    >>> remove_lowercase(\"Aaaa\")\n    'Aaaa'\n    >>> remove_lowercase(\"AaaaB\")\n    'AaaaB'\n    >>> remove_lowercase(\"aBc\")\n    ''\n    >>> remove_lowercase(\"AbC\")\n    'AbC'\n    \"\"\"\n    # Your code goes here\n    # pass\n    if len(string) == 0:\n        return \"\"\n\n    start = 0\n    end = 1\n\n    while end < len(string):\n        if string[start] >= string[end]:\n            start += 1\n        if string[start] <= string[end]:\n            start = end\n        end += 1\n\n    return string[:start]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\n\n\ndef remove_lowercase(string):\n    return \"\".join(\n        [string[i - 1] if string[i - 1].isupper() else \"\" for i in range(1, len(string) + 1)]\n    )\n\n\n# Remove lowercase substrings from a given string.\nstring = \"aababBA\"\nprint(f\"Original string: {string}\")\nprint(f\"Removing lowercase substrings from the original string: {remove_lowercase(string)}\")",
    "def remove_lowercase(s):\n    \"\"\"\n    :param s: input string\n    :return: a string that has all the lowercase substrings removed\n    \"\"\"\n    i = 0\n    j = 0\n    ret = \"\"\n    while j < len(s):\n        if s[j].islower():\n            j += 1\n        else:\n            ret += s[i:j]\n            i = j\n            j += 1\n    return ret + s[i:]\n\nprint(remove_lowercase(\"abABa\"))\nprint(remove_lowercase(\"abABaA\"))\nprint(remove_lowercase(\"abABA\"))\nprint(remove_lowercase(\"aabAa\"))\nprint(remove_lowercase(\"aabAaA\"))",
    "from collections import defaultdict\n\n\ndef remove_substrings(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n    :param string: String\n    :return: String\n    \"\"\"\n    chars = defaultdict(int)\n    for char in string:\n        chars[char] += 1\n    result = \"\"\n    for char in string:\n        if chars[char] == 1:\n            result += char\n    return result\n\n\nprint(remove_substrings(\"AabBc\"))",
    "def remove_substrings(string):\n    # TODO: Write your solution here\n    return\n\n\n# Test Cases:\nprint(remove_substrings(\"\"))\nprint(remove_substrings(\"abc\"))\nprint(remove_substrings(\"abcABC\"))\nprint(remove_substrings(\"ABCabc\"))\nprint(remove_substrings(\"abcABCabc\"))\nprint(remove_substrings(\"abcABCabcABCabc\"))\nprint(remove_substrings(\"abcabcABCabcABCabc\"))",
    "def remove_lowercase(string):\n    for i in range(len(string)):\n        if string[i].islower():\n            string = string.replace(string[i], \"\")\n\n    return string\n\nprint(remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_lowercase(\"abcdefghijklmnopQRSTuvwxyz\"))\nprint(remove_lowercase(\"abcdefghijklmnopQRSTuvwxyzABC\"))",
    "def remove_lower_substrings(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    uppercase_string = string[0]\n    for i in range(1, len(string)):\n        if string[i].isupper():\n            uppercase_string += string[i]\n        else:\n            uppercase_string += string[i].upper()\n    return uppercase_string\n\n\nif __name__ == \"__main__\":\n    test_string = \"hEllo\"\n    assert remove_lower_substrings(test_string) == \"Hello\"",
    "def remove_substrings(s):\n    \"\"\"\n    O(n)\n    \"\"\"\n    return \"\".join(\n        s[i] for i in range(len(s))\n        if i == 0 or s[i] != s[i - 1] or s[i] in s[i - 1]\n    )",
    "def remove_substrings(s):\n    # TODO: Write your code here\n    return \"\"\n\n\nprint(remove_substrings(\"hello\"))\nprint(remove_substrings(\"Hello\"))\nprint(remove_substrings(\"HELLO\"))\nprint(remove_substrings(\"hello world\"))\nprint(remove_substrings(\"world hello\"))\nprint(remove_substrings(\"world\"))\nprint(remove_substrings(\"Hello world\"))\nprint(remove_substrings(\"Hello world hello\"))\nprint(remove_substrings(\"world hello world\"))",
    "def remove_lowercase_substrings(string):\n    result = []\n    if len(string) == 1:\n        return string\n\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n            for j in range(i + 1, len(string)):\n                if string[j].isupper():\n                    result.append(string[j])\n                    break\n    return \"\".join(result)\n\n\nprint(remove_lowercase_substrings(\"abcDEFghi\"))",
    "def remove_substrings(string):\n    \"\"\"\n    >>> remove_substrings(\"abcdef\")\n    'abcdef'\n    >>> remove_substrings(\"bacd\")\n    'cd'\n    >>> remove_substrings(\"cbacd\")\n    'cd'\n    >>> remove_substrings(\"cdacb\")\n    'cd'\n    >>> remove_substrings(\"cbcdb\")\n    'cd'\n    >>> remove_substrings(\"cbcdacb\")\n    'cd'\n    >>> remove_substrings(\"cd\")\n    'cd'\n    \"\"\"\n    start = 0\n    end = 0\n\n    for i in range(len(string)):\n        if string[i].islower():\n            continue\n        else:\n            start = i\n            break\n\n    for i in range(len(string) - 1, -1, -1):\n        if string[i].islower():\n            continue\n        else:\n            end = i + 1\n            break\n\n    if start == end:\n        return string\n    else:\n        return string[start : end + 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_substrings(string):\n    \"\"\"Remove all lowercase substrings from string.\n\n    Args:\n        string: The string to remove substrings from\n\n    Returns:\n        The string with lowercase substrings removed\n    \"\"\"\n    string = string.lower()\n    start = 0\n    end = 0\n    while start < len(string) - 1:\n        if string[start].islower():\n            while end < len(string) - 1 and string[end].islower():\n                end += 1\n            if end - start > 1:\n                string = string[:start] + string[end:]\n                start = end\n                end = end + 1\n            else:\n                start = end\n                end = end + 1\n        else:\n            start += 1\n    return string",
    "def remove_lowercase(string):\n    if len(string) == 0:\n        return string\n\n    start, end = 0, 0\n\n    for i in range(len(string)):\n        if ord(string[i]) >= ord('A') and ord(string[i]) <= ord('Z'):\n            end = i\n            break\n    for i in range(len(string)-1, -1, -1):\n        if ord(string[i]) >= ord('A') and ord(string[i]) <= ord('Z'):\n            start = i\n            break\n\n    if end == 0 and start == 0:\n        return string\n\n    return string[start:end+1]\n\nprint(remove_lowercase('Abcdefg'))\nprint(remove_lowercase('Abcdefgh'))\nprint(remove_lowercase('AbcdefghIjklmnop'))\nprint(remove_lowercase('Abcdefghijklmnop'))\nprint(remove_lowercase('AbcdefghIjklmnopqr'))\nprint(remove_lowercase('Abcdefghijklmnopqr'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz1234567890'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz1234567890abcdefg'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz1234567890abcdefgh'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz1234567890abcdefghIjklmnop'))\nprint(remove_lowercase('Abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnop'))",
    "def remove_substrings(string):\n    \"\"\"\n    :param string: str - String\n    :return: str - String with lowercase substrings removed\n    \"\"\"\n    if not string:\n        return string\n\n    result = []\n\n    for i in range(len(string)):\n        if string[i].islower():\n            if string[i + 1:].isupper():\n                result.append(string[i])\n        else:\n            result.append(string[i])\n\n    return ''.join(result)\n\n\ndef test_remove_substrings():\n    \"\"\"Test for remove_substrings function.\"\"\"\n    assert remove_substrings(\"Hello\") == \"Helo\"\n    assert remove_substrings(\"Hello world\") == \"Helo dlroW\"\n    assert remove_substrings(\"HELLO\") == \"HELLO\"\n    assert remove_substrings(\"HeLLo\") == \"Helo\"\n    assert remove_substrings(\"HeLLo wOrld\") == \"Heloorld\"\n    assert remove_substrings(\"12345\") == \"12345\"\n    assert remove_substrings(\"1a2b3c4d5e\") == \"12345\"\n    assert remove_substrings(\"A man a plan a canal: Panama\") == \"Amanaplanacanal:Panama\"\n    assert remove_substrings(\"A man a plan a canal Panama\") == \"Amanaplanacanal Panama\"\n    assert remove_substrings(\"\") == \"\"\n    assert remove_substrings(\"h\") == \"h\"\n    assert remove_substrings(\"He\") == \"He\"\n    assert remove_substrings(\"HeLlo\") == \"Helo\"\n    assert remove_substrings(\"HeLlo WOrld\") == \"Heloorld\"\n    assert remove_substrings(\"HeLlo WOrld!\") == \"Heloorld!\"\n    assert remove_substrings(\"!HeLlo WOrld!\") == \"!Heloorld!\"\n    assert remove_substrings(\"!\") == \"!\"\n    assert remove_substrings(\"!!\") == \"!!\"\n    assert remove_substrings(\"!!!\") == \"!!!\"",
    "from collections import deque\n\ndef remove_substrings(input_str):\n    queue = deque()\n    result = []\n    queue.append(input_str[0])\n\n    for i in range(1, len(input_str)):\n        if input_str[i] >= queue[-1]:\n            queue.append(input_str[i])\n        else:\n            result.append(queue.pop())\n            queue.append(input_str[i])\n\n    result.extend(queue)\n\n    return ''.join(result)\n\n\nprint(remove_substrings('abccddabba'))\nprint(remove_substrings('abcd'))\nprint(remove_substrings('aab'))\nprint(remove_substrings('aaaa'))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings('aA')\n    'aA'\n    >>> remove_lowercase_substrings('Aa')\n    'A'\n    >>> remove_lowercase_substrings('aaa')\n    ''\n    >>> remove_lowercase_substrings('aAa')\n    'aA'\n    >>> remove_lowercase_substrings('aBbCc')\n    'aBbCc'\n    >>> remove_lowercase_substrings('aBbCcDd')\n    'aBbCcDd'\n    >>> remove_lowercase_substrings('aBbCcDdEe')\n    'aBbCcDdEe'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n\n    if string[0].islower():\n        return remove_lowercase_substrings(string[1:])\n\n    if string[-1].islower():\n        return remove_lowercase_substrings(string[:-1])\n\n    start = 0\n    while start < len(string) - 1 and string[start].isupper():\n        start += 1\n\n    end = len(string) - 1\n    while end > 0 and string[end].isupper():\n        end -= 1\n\n    return string[:start] + remove_lowercase_substrings(string[start:end + 1]) + string[end + 1:]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    This solution is based on the fact that if we find a lowercase substring,\n    it must be at the end of the string (or the beginning)\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].islower():\n            continue\n        result += string[i]\n\n    return result\n\n\ndef main():\n    print(\"OK\" if (remove_lowercase_substrings(\"\") == \"\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"a\") == \"a\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"abc\") == \"abc\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"abca\") == \"abc\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"aabc\") == \"abc\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"abcaaa\") == \"abc\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"abcabcaaa\") == \"abcabc\") else \"NOT OK\")\n    print(\"OK\" if (remove_lowercase_substrings(\"abcabcaaaba\") == \"abcabcaaba\") else \"NOT OK\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    >>> remove_lowercase(\"Hello, World!\")\n    'HW!'\n    >>> remove_lowercase(\"HW\")\n    'HW'\n    >>> remove_lowercase(\"helloWorld\")\n    ''\n    \"\"\"\n    return \"\".join(\n        char for char in string if char.isupper() or char.isdigit()\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lower_substrings(string):\n    \"\"\"\n    >>> remove_lower_substrings(\"Hello\")\n    ''\n    >>> remove_lower_substrings(\"Hello World\")\n    ' Wor'\n    >>> remove_lower_substrings(\"Hello World Abc\")\n    ' Wor Ab'\n    >>> remove_lower_substrings(\"\")\n    ''\n    >>> remove_lower_substrings(\"Abc\")\n    ''\n    >>> remove_lower_substrings(\"Abc\")\n    ''\n    \"\"\"\n    return \"\".join(\n        [\n            string[i : i + len(string) - 1]\n            for i in range(len(string))\n            if string[i : i + len(string) - 1].isupper()\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(string):\n    # Write your code here.\n\tresult = []\n\tcurrent = \"\"\n\tfor i in string:\n\t\tif i.isupper():\n\t\t\tcurrent += i\n\t\telse:\n\t\t\tresult.append(current)\n\t\t\tcurrent = \"\"\n\tresult.append(current)\n\treturn \"\".join(result)",
    "def remove_lowercase(s):\n    if not s:\n        return s\n\n    s = s.lower()\n    return \"\".join([s[i] for i in range(len(s)) if s[i] >= \"a\" and s[i] <= \"z\"])\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"Hello\"))\n    print(remove_lowercase(\"HELlo\"))\n    print(remove_lowercase(\"HELlo world\"))\n    print(remove_lowercase(\"Hello world\"))\n    print(remove_lowercase(\"Hello world!\"))\n    print(remove_lowercase(\"HEllo world!\"))\n    print(remove_lowercase(\"Hello WORld!\"))",
    "from collections import deque\n\n\ndef remove_lowercase(string):\n    stack = deque()\n    stack.append(string[0])\n    for i in range(1, len(string)):\n        if string[i].isupper():\n            stack.append(string[i])\n        else:\n            stack.pop()\n            stack.append(string[i])\n\n    return \"\".join(stack)\n\n\ndef main():\n    string = input(\"Enter string: \")\n    print(remove_lowercase(string))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lowercase(s):\n    s = s.split()\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if s[i][j].islower():\n                s[i] = s[i][:j] + s[i][j+1:]\n    return \" \".join(s)",
    "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef longest_upper_case_substring(s):\n    if not s:\n        return s\n\n    if s.isupper():\n        return s\n\n    if s.islower():\n        return \"\"\n\n    if len(s) == 1:\n        return s\n\n    if s[0].islower():\n        return longest_upper_case_substring(s[1:])\n\n    if s[0].isupper() and s[1].isupper():\n        return s[0] + longest_upper_case_substring(s[1:])\n\n    if s[0].isupper() and s[1].islower():\n        return longest_upper_case_substring(s[1:])\n\n\ndef remove_lowercase_substrings(s):\n    return longest_upper_case_substring(s)\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase_substrings(\"\") == \"\"\n    assert remove_lowercase_substrings(\"ab\") == \"ab\"\n    assert remove_lowercase_substrings(\"A\") == \"A\"\n    assert remove_lowercase_substrings(\"AB\") == \"AB\"\n    assert remove_lowercase_substrings(\"ABB\") == \"AB\"\n    assert remove_lowercase_substrings(\"ABBB\") == \"AB\"\n    assert remove_lowercase_substrings(\"ABBBC\") == \"ABBC\"\n    assert remove_lowercase_substrings(\"ABBBCD\") == \"ABBCD\"\n    assert remove_lowercase_substrings(\"ABBBCDABBBC\") == \"ABBCDABBBC\"\n    assert remove_lowercase_substrings(\"ABBBCDABBBCAB\") == \"ABBCDABBBC\"\n    assert remove_lowercase_substrings(\"ABBBCDABBBCABD\") == \"ABBCDABBBC\"\n    assert remove_lowercase_substrings(\"ABBBCDABBBCABDAB\") == \"ABBCDABBBC\"\n    assert remove_lowercase_substrings(\"ABBBCDABBBCABDABB",
    "from timeit import default_timer as timer\n\n\ndef remove_lowercase(string):\n    \"\"\"Removes lowercase substrings from a given string.\n\n    :param string: str\n    :return: str\n    \"\"\"\n    # return ''.join([string[i] for i in range(len(string)) if string[i].isupper()])\n    return ''.join(filter(str.isupper, string))\n\n\nif __name__ == '__main__':\n    start = timer()\n    assert remove_lowercase('Hello') == 'H'\n    assert remove_lowercase('Here') == 'H'\n    assert remove_lowercase('Hi') == ''\n    assert remove_lowercase('HeLLo') == 'H'\n    assert remove_lowercase('HeLLo') == 'H'\n    assert remove_lowercase('HELLO') == 'HELLO'\n    print(f'Execution time: {timer() - start}')",
    "def remove_lowercase_substrings(input_string):\n    if len(input_string) == 0:\n        return input_string\n\n    if input_string == input_string.upper():\n        return input_string\n\n    result = []\n    for i in range(len(input_string)):\n        if input_string[i].isupper():\n            result.append(input_string[i])\n        elif input_string[i] != input_string[i - 1].upper():\n            result.append(input_string[i])\n\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    print(remove_lowercase_substrings('Hello world'))\n    print(remove_lowercase_substrings('HelloWorLd'))\n    print(remove_lowercase_substrings('HelloWorld'))\n    print(remove_lowercase_substrings('Hello World'))\n    print(remove_lowercase_substrings(''))",
    "def remove_lowercase(s):\n    return s.replace('', '')\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('Hello world!'))",
    "def remove_lowercase(string):\n    \"\"\"\n    >>> remove_lowercase(\"hello\")\n    'h'\n    >>> remove_lowercase(\"hello world\")\n    'h'\n    >>> remove_lowercase(\"world hello\")\n    'w'\n    >>> remove_lowercase(\"world\")\n    ''\n    >>> remove_lowercase(\"World\")\n    ''\n    >>> remove_lowercase(\"\")\n    ''\n    \"\"\"\n    return \"\".join(\n        letter\n        for letter in string\n        if not letter.islower()\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase(string: str) -> str:\n    \"\"\"\n    >>> remove_lowercase(\"HelloWorld\")\n    'HW'\n    >>> remove_lowercase(\"Hello\")\n    ''\n    >>> remove_lowercase(\"World\")\n    'W'\n    \"\"\"\n    if not string:\n        return string\n\n    if len(string) == 1:\n        return \"\" if string.islower() else string\n\n    if string[0].islower():\n        return remove_lowercase(string[1:])\n\n    if string[1].islower():\n        return string[0] + remove_lowercase(string[2:])\n\n    return string[0] + remove_lowercase(string[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substrings(s):\n    # loop over the string\n    # loop over the string again\n    # if the first character is lowercase, and the second is uppercase, return the string\n    # if the first character is uppercase, and the second is lowercase, return the string\n    # if the first character is uppercase, and the second is uppercase, return the string\n    # if the first character is lowercase, and the second is lowercase, return the string\n    # if the first character is not lowercase, and the second is not lowercase, return the string\n    # if the first character is not lowercase, and the second is not lowercase, return the string\n    # if the first character is lowercase, and the second is not lowercase, return the string\n    # if the first character is not lowercase, and the second is lowercase, return the string\n    # if the first character is lowercase, and the second is lowercase, return the string\n\n    # if the first character is lowercase, and the second is uppercase, return the string\n    # if the first character is uppercase, and the second is lowercase, return the string\n    # if the first character is uppercase, and the second is uppercase, return the string\n    # if the first character is lowercase, and the second is lowercase, return the string\n    # if the first character is not lowercase, and the second is not lowercase, return the string\n    # if the first character is not lowercase, and the second is not lowercase, return the string\n    # if the first character is lowercase, and the second is not lowercase, return the string\n    # if the first character is not lowercase, and the second is lowercase, return the string\n    # if the first character is lowercase, and the second is lowercase, return the string\n\n    # if the first character is lowercase, and the second is uppercase, return the string\n    # if the first character is uppercase, and the second is lowercase, return the string\n    # if the first character is uppercase, and the second is uppercase, return the string\n    # if the first character is lowercase, and the second is lowercase, return the string\n    # if the first character is not",
    "def remove_lowercase(string):\n    \"\"\"\n    We can use regex for this purpose.\n\n    :param string: str\n    :return: str\n\n    >>> remove_lowercase('aAbbb')\n    'A'\n    >>> remove_lowercase('abB')\n    ''\n    >>> remove_lowercase('')\n    ''\n    >>> remove_lowercase('AAbbb')\n    'AAb'\n    >>> remove_lowercase('abBB')\n    'ab'\n    \"\"\"\n    return \"\".join(\n        [\n            letter\n            for letter in string\n            if not letter.islower() or letter == string[0]\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase_substrings(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    upper_case_string = \"\"\n\n    for char in string:\n        if char.isupper():\n            upper_case_string += char\n\n    return upper_case_string\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase_substrings(\"Hello, World\") == \"HW\"",
    "def remove_lowercase(string):\n    new_string = \"\"\n    for index, char in enumerate(string):\n        if char.isupper():\n            new_string += char\n        elif char == \" \":\n            new_string += \" \"\n        else:\n            continue\n    return new_string\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"aBc\") == \"AB\"\n    assert remove_lowercase(\"aBcC\") == \"ABC\"\n    assert remove_lowercase(\"aBcCc\") == \"ABC\"\n    assert remove_lowercase(\"abc\") == \"\"\n    assert remove_lowercase(\"\") == \"\"\n    assert remove_lowercase(\"aBcDe\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeE\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFfF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFfFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFfFfF\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFfFfFf\") == \"ABCD\"\n    assert remove_lowercase(\"aBcDeFfFfFfFfFfFfF",
    "def remove_lowercase(string):\n    # if not string:\n    #     return None\n    # sub = \"\"\n    # for i in range(len(string)):\n    #     if string[i].islower():\n    #         sub += string[i]\n    #     else:\n    #         if sub != \"\":\n    #             string = string.replace(sub, \"\")\n    #             sub = \"\"\n    # return string\n\n    # if not string:\n    #     return None\n    # sub = \"\"\n    # for i in range(len(string)):\n    #     if string[i].islower():\n    #         sub += string[i]\n    #     else:\n    #         if sub != \"\":\n    #             string = string.replace(sub, \"\")\n    #             sub = \"\"\n    # return string\n\n    if not string:\n        return None\n    sub = \"\"\n    for i in range(len(string)):\n        if string[i].islower():\n            sub += string[i]\n        else:\n            if sub != \"\":\n                string = string.replace(sub, \"\")\n                sub = \"\"\n    return string\n\n\nprint(remove_lowercase(\"AabBcCdD\"))",
    "def remove_lowercase_substrings(string):\n    # TODO: Write your solution here\n    return\n\n\nif __name__ == '__main__':\n    # Do not edit this code\n    s = input()\n    print(remove_lowercase_substrings(s))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings('hello world')\n    'held worl'\n    >>> remove_lowercase_substrings('hello')\n    ''\n    >>> remove_lowercase_substrings('')\n    ''\n    \"\"\"\n    if string == '':\n        return string\n\n    # create a list of characters\n    chars = list(string)\n\n    # start from the first char\n    start = 0\n\n    # start a result string with the first char\n    result = chars[start]\n\n    # loop through the rest of the chars\n    for i, char in enumerate(chars):\n\n        # if the char is not lowercase\n        if char.isupper():\n\n            # if the previous char is lowercase\n            if result[-1].islower():\n\n                # remove it\n                result = result[:-1]\n\n            # add the char to the result\n            result += char\n\n            # set the start to the current char\n            start = i\n\n    # return the result\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_substrings(string):\n    string_list = list(string)\n    if len(string_list) < 2:\n        return string\n\n    for i in range(len(string_list) - 1):\n        if string_list[i] > string_list[i + 1]:\n            string_list.insert(i, string_list[i + 1])\n            string_list.pop(i + 2)\n            i += 1\n\n    return \"\".join(string_list)\n\n\nif __name__ == \"__main__\":\n    print(remove_substrings(\"aab\"))\n    print(remove_substrings(\"abbbaa\"))\n    print(remove_substrings(\"aabbb\"))\n    print(remove_substrings(\"aabbcc\"))",
    "def remove_lower(string):\n    \"\"\"\n    >>> remove_lower(\"aAbbbCcDdEe\")\n    'A'\n    \"\"\"\n    string = list(string)\n    i = 0\n    while i < len(string) - 1:\n        if ord(string[i]) > ord(string[i+1]):\n            string.pop(i)\n        i += 1\n\n    return \"\".join(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    >>> remove_lowercase_substrings('HelloWorld')\n    'HW'\n    >>> remove_lowercase_substrings('aBcD')\n    ''\n    >>> remove_lowercase_substrings('HelloWorld')\n    'HW'\n    >>> remove_lowercase_substrings('HelloWorld')\n    'HW'\n    \"\"\"\n    if not string:\n        return string\n    uppercase_string = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            uppercase_string += string[i]\n    return uppercase_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def remove_lowercase(input_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_end = -1\n    for i in range(len(input_string)):\n        if input_string[i].isupper():\n            max_end = i\n        elif max_end != -1:\n            input_string = input_string[:max_end] + input_string[i:]\n            max_end = -1\n    return input_string\n\n\ndef main():\n    assert remove_lowercase(\"ABCabcdABCD\") == \"ABC\"\n\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lowercase(string):\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substr = string[i:j]\n            if (\n                all(c.islower() for c in substr)\n                and len(substr) > 1\n                and substr.islower()\n            ):\n                string = string.replace(substr, \"\")\n    return string\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"aAbBcC\"))",
    "def remove_substrings(string):\n    \"\"\"\n    O(n^2) solution.\n    \"\"\"\n    # Check for input.\n    if not string:\n        return string\n\n    # Get length of input.\n    length = len(string)\n\n    # Create a list to store the indexes of the substrings.\n    substrings = []\n\n    # Loop through the string.\n    for i in range(length):\n        # Loop through the rest of the string.\n        for j in range(i + 1, length):\n            # Check if the substring is a lowercase substring.\n            if string[i:j].islower():\n                # Add the index of the substring to the list.\n                substrings.append(i)\n\n    # Loop through the list of indexes and remove the substrings.\n    for index in substrings:\n        # Remove the substring.\n        string = string[:index] + string[index + 1:]\n\n    # Return the string.\n    return string\n\ndef remove_substrings2(string):\n    \"\"\"\n    O(n) solution.\n    \"\"\"\n    # Check for input.\n    if not string:\n        return string\n\n    # Get length of input.\n    length = len(string)\n\n    # Create a list to store the indexes of the substrings.\n    substrings = []\n\n    # Loop through the string.\n    for i in range(length):\n        # Loop through the rest of the string.\n        for j in range(i + 1, length):\n            # Check if the substring is a lowercase substring.\n            if string[i:j].islower():\n                # Add the index of the substring to the list.\n                substrings.append(i)\n\n    # Loop through the list of indexes and remove the substrings.\n    for index in substrings:\n        # Remove the substring.\n        string = string[:index] + string[index + 1:]\n\n    # Return the string.\n    return string\n\ndef main():\n    \"\"\"\n    Run some tests.\n    \"\"\"\n    print(remove_substrings(\"Hello World\"))\n    print(remove_substrings(\"Hello world\"))\n    print(remove_substrings(\"Hello\"))",
    "def remove_substrings(string):\n    \"\"\"\n    :param string: str - string to remove substrings from\n    :return: str - a string without substrings\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    result = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i]\n            for j in range(i + 1, len(string)):\n                if string[j].islower():\n                    result += string[j].upper()\n                else:\n                    result += string[j]\n                    break\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_substrings(\"Hello\"))\n    print(remove_substrings(\"eHllO\"))\n    print(remove_substrings(\"HellO\"))\n    print(remove_substrings(\"HellO World!\"))",
    "def remove_lowercase(string):\n    \"\"\"\n    The function takes a string as argument and returns a string\n    with all the lowercase substrings removed.\n\n    >>> remove_lowercase(\"Hello, World\")\n    'HW'\n    >>> remove_lowercase(\"Hello, world\")\n    'HW'\n    >>> remove_lowercase(\"Hello, World!\")\n    'HW!'\n    >>> remove_lowercase(\"Hello, world!\")\n    'HW!'\n    \"\"\"\n    # Your code goes here.\n\n    # Remove all the lowercase characters from the string.\n    # string = string.replace('a', '')\n    # string = string.replace('b', '')\n    # string = string.replace('c', '')\n    # string = string.replace('d', '')\n    # string = string.replace('e', '')\n    # string = string.replace('f', '')\n    # string = string.replace('g', '')\n    # string = string.replace('h', '')\n    # string = string.replace('i', '')\n    # string = string.replace('j', '')\n    # string = string.replace('k', '')\n    # string = string.replace('l', '')\n    # string = string.replace('m', '')\n    # string = string.replace('n', '')\n    # string = string.replace('o', '')\n    # string = string.replace('p', '')\n    # string = string.replace('q', '')\n    # string = string.replace('r', '')\n    # string = string.replace('s', '')\n    # string = string.replace('t', '')\n    # string = string.replace('u', '')\n    # string = string.replace('v', '')\n    # string = string.replace('w', '')\n    # string = string.replace('x', '')\n    # string = string.replace('y', '')\n    # string = string.replace('z', '')\n\n    # The above code is not good.\n    # It is not efficient.\n    # It is not Pythonic.\n\n    # Instead of writing multiple lines of code,\n    # we can iterate through each character in the string.\n    # If the character is a lowercase letter",
    "from collections import defaultdict\n\n\ndef remove_lowercase_substrings(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    substrings = defaultdict(int)\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings[string[i:j]] += 1\n\n    return [string for string in substrings if substrings[string] == 1]\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase_substrings(\"ababab\") == [\"abab\"]\n    assert remove_lowercase_substrings(\"ababAB\") == [\"abab\", \"AB\"]",
    "def remove_lowercase(string):\n    \"\"\"\n    :param string: str - string to remove substrings from\n    :return: str - string with substrings removed\n    \"\"\"\n    string_list = []\n    for char in string:\n        if char.isupper():\n            string_list.append(char)\n    return ''.join(string_list)\n\n\ndef remove_lowercase_lambda(string):\n    \"\"\"\n    :param string: str - string to remove substrings from\n    :return: str - string with substrings removed\n    \"\"\"\n    return ''.join(list(filter(str.isupper, string)))\n\n\ndef main():\n    print(remove_lowercase('Hello'))\n    print(remove_lowercase_lambda('Hello'))\n\n\nif __name__ == '__main__':\n    main()",
    "def remove_lowercase(input_str):\n    if len(input_str) == 0:\n        return input_str\n\n    for i in range(len(input_str)):\n        if input_str[i].isupper():\n            return input_str[i:]\n\n    return \"\"\n\nprint(remove_lowercase(\"helloWorld\"))",
    "from collections import deque\n\ndef remove_lowercase(string):\n    \"\"\"Returns a string with lowercase substrings removed\"\"\"\n    if not string:\n        return None\n\n    # split string into an array of substrings\n    # and reverse the order of the substrings\n    substrings = deque(string.split(' '))\n    substrings.reverse()\n\n    # loop through substrings in reverse order\n    for i in range(len(substrings)):\n        # check if substring is lowercase\n        if substrings[i].islower():\n            # remove lowercase substring\n            substrings.pop()\n\n    # reverse the order of the substrings\n    substrings.reverse()\n\n    # join substrings back into a string\n    return ' '.join(substrings)\n\ndef main():\n    \"\"\"Test the remove_lowercase function\"\"\"\n    print(remove_lowercase('Aa Bb Cc'))\n    print(remove_lowercase('Aa Bb Cc aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa aa aa aa aa'))\n    print(remove_lowercase('Aa Bb Cc aa aa aa aa aa aa aa aa aa'))\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}