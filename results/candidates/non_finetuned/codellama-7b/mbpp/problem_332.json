{
  "problem": {
    "task_id": "MBPP/343",
    "prompt": "Write a function to calculate the number of digits and letters in a string.",
    "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
    "test_list": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ],
    "challenge_test_list": [],
    "problem_id": 332
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def digit_count(s):\n    return sum(c.isdigit() for c in s)\n\ndef letter_count(s):\n    return sum(c.isalpha() for c in s)\n\ndef main():\n    print(digit_count(\"123abc\"))\n    print(letter_count(\"123abc\"))\n\nif __name__ == \"__main__\":\n    main()",
    "def count_digits_and_letters(input_str: str) -> tuple:\n    \"\"\"Return a tuple with the number of digits and letters in the string.\"\"\"\n    return len([c for c in input_str if c.isdigit()]), len([c for c in input_str if c.isalpha()])\n\n\ndef test_count_digits_and_letters():\n    \"\"\"Test count_digits_and_letters.\"\"\"\n    assert count_digits_and_letters(\"Hello World\") == (0, 11)\n    assert count_digits_and_letters(\"12345\") == (5, 0)\n    assert count_digits_and_letters(\"Hello12345\") == (5, 5)\n    assert count_digits_and_letters(\"12345Hello\") == (5, 5)\n    assert count_digits_and_letters(\"Hello World12345\") == (5, 11)\n\n\nif __name__ == \"__main__\":\n    test_count_digits_and_letters()",
    "def get_digit_letter_count(input_str):\n    digit_count = 0\n    letter_count = 0\n\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n\n    return digit_count, letter_count\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('hello123', (3, 3)),\n        ('1234567', (7, 0)),\n        ('9999999', (7, 0)),\n        ('123abc', (3, 3)),\n        ('ABCabc', (3, 3)),\n        ('abc123', (3, 3)),\n        ('', (0, 0)),\n        ('123', (3, 0)),\n        ('abc', (0, 3)),\n        ('abc123abc', (3, 3)),\n    ]\n\n    for test, result in test_cases:\n        assert get_digit_letter_count(test) == result, test",
    "def count_letters_digits(string):\n    count_letters = 0\n    count_digits = 0\n    for char in string:\n        if char.isdigit():\n            count_digits += 1\n        elif char.isalpha():\n            count_letters += 1\n\n    return count_letters, count_digits\n\n\ndef test_cases():\n    assert count_letters_digits(\"123abc\") == (3, 3)\n    assert count_letters_digits(\"abc123\") == (3, 3)\n    assert count_letters_digits(\"abc\") == (3, 0)\n    assert count_letters_digits(\"123\") == (0, 3)\n    assert count_letters_digits(\"\") == (0, 0)\n    assert count_letters_digits(\"aA11\") == (2, 2)\n    print(\"Test Success!\")\n\n\ntest_cases()",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef digit_and_letter_count(s):\n    digit_count = 0\n    letter_count = 0\n    for c in s:\n        if c.isdigit():\n            digit_count += 1\n        elif c.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\nif __name__ == '__main__':\n    digit_count, letter_count = digit_and_letter_count(\"abcd1234\")\n    print(digit_count, letter_count)",
    "def number_of_digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\ndef main():\n    print(number_of_digits_and_letters(\"abcd123\"))\n\nif __name__ == '__main__':\n    main()",
    "def digit_count(string):\n    digit_count = 0\n    letter_count = 0\n    for char in string:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\n\ndef main():\n    print(digit_count(\"Hello world 123\"))\n\n\nif __name__ == '__main__':\n    main()",
    "def number_of_digits_and_letters(string):\n    \"\"\"\n    Calculates the number of digits and letters in a string.\n\n    :param string: string to be analyzed\n    :return: tuple of number of digits and letters\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Argument must be a string\")\n\n    return (\n        sum(char.isdigit() for char in string),\n        sum(char.isalpha() for char in string),\n    )",
    "def count_digits_letters(s):\n    \"\"\"\n    :param s: str\n    :return: (int, int)\n    \"\"\"\n    num_digits = 0\n    num_letters = 0\n    for c in s:\n        if c.isdigit():\n            num_digits += 1\n        elif c.isalpha():\n            num_letters += 1\n    return num_digits, num_letters\n\n\ndef test_count_digits_letters():\n    assert count_digits_letters(\"Hello123\") == (3, 3)\n    assert count_digits_letters(\"1234\") == (4, 0)\n    assert count_digits_letters(\"HelloWorld\") == (0, 10)\n    assert count_digits_letters(\"\") == (0, 0)\n    assert count_digits_letters(\"1\") == (1, 0)\n    assert count_digits_letters(\"23\") == (2, 0)\n    assert count_digits_letters(\"A\") == (0, 1)\n    assert count_digits_letters(\"a\") == (0, 1)\n\n\nif __name__ == '__main__':\n    test_count_digits_letters()",
    "def count_letters_digits(s):\n    \"\"\"Returns the number of letters and digits in a string.\n\n    >>> count_letters_digits('abc123')\n    (3, 3)\n    >>> count_letters_digits('abc123def')\n    (6, 3)\n    >>> count_letters_digits('abc123def456')\n    (9, 3)\n    >>> count_letters_digits('abc123def456ghi')\n    (12, 3)\n    >>> count_letters_digits('123456')\n    (0, 6)\n    >>> count_letters_digits('')\n    (0, 0)\n    \"\"\"\n    count_letters = 0\n    count_digits = 0\n    for c in s:\n        if c.isdigit():\n            count_digits += 1\n        elif c.isalpha():\n            count_letters += 1\n    return count_letters, count_digits\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def number_of_digits_and_letters(s: str) -> tuple[int, int]:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    Args:\n        s (str): the string to be analyzed\n\n    Examples:\n        >>> assert number_of_digits_and_letters(\"\") == (0, 0)\n        >>> assert number_of_digits_and_letters(\"hello\") == (0, 5)\n        >>> assert number_of_digits_and_letters(\"123\") == (3, 0)\n        >>> assert number_of_digits_and_letters(\"abc\") == (0, 3)\n        >>> assert number_of_digits_and_letters(\"123abc\") == (3, 3)\n        >>> assert number_of_digits_and_letters(\"abc123\") == (3, 3)\n    \"\"\"\n    return (sum(char.isdigit() for char in s), sum(char.isalpha() for char in s))\n\n\nif __name__ == \"__main__\":\n    print(number_of_digits_and_letters(\"\"))\n    print(number_of_digits_and_letters(\"hello\"))\n    print(number_of_digits_and_letters(\"123\"))\n    print(number_of_digits_and_letters(\"abc\"))\n    print(number_of_digits_and_letters(\"123abc\"))\n    print(number_of_digits_and_letters(\"abc123\"))",
    "def digit_letter(s: str) -> tuple:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    >>> digit_letter(\"hello\")\n    (0, 5)\n    >>> digit_letter(\"hello1\")\n    (1, 5)\n    >>> digit_letter(\"hello123\")\n    (3, 5)\n    >>> digit_letter(\"hello12345\")\n    (5, 5)\n    >>> digit_letter(\"12345\")\n    (5, 0)\n    >>> digit_letter(\"\")\n    (0, 0)\n    \"\"\"\n    if not s:\n        return 0, 0\n\n    num_digits = 0\n    num_letters = 0\n    for char in s:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n\n    return num_digits, num_letters\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_letters_and_digits(text):\n    \"\"\"\n    Counts the letters and digits in a string.\n\n    :param text: string to be analyzed\n    :return: a tuple of the number of digits and letters\n\n    >>> count_letters_and_digits(\"abc123def\")\n    (3, 4)\n    \"\"\"\n    letters = 0\n    digits = 0\n\n    for char in text:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return letters, digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Time complexity: O(n)\ndef count_digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n\nassert count_digits_and_letters(\"abcd\") == (0, 4)\nassert count_digits_and_letters(\"1234\") == (4, 0)\nassert count_digits_and_letters(\"1a2b3c4d\") == (4, 4)\nassert count_digits_and_letters(\"1a2b3c4d5e6f\") == (6, 6)\nassert count_digits_and_letters(\"1a2b3c4d5e6f7g8h9i\") == (9, 12)",
    "def count_digits_and_letters(input_string):\n    return [len(list(filter(str.isdigit, input_string))),\n            len(list(filter(str.isalpha, input_string)))]\n\n\ndef test_count_digits_and_letters():\n    assert count_digits_and_letters(\"Hello, world\") == [0, 11]\n    assert count_digits_and_letters(\"123abc\") == [3, 3]\n    assert count_digits_and_letters(\"ABC123\") == [3, 3]\n    assert count_digits_and_letters(\"123abcABC\") == [3, 6]\n\n\nif __name__ == '__main__':\n    test_count_digits_and_letters()",
    "def digit_and_letter(string):\n    return [len(list(filter(str.isdigit, string))), len(list(filter(str.isalpha, string)))]\n\n\ndef test_digit_and_letter():\n    \"\"\"\n    >>> test_digit_and_letter()\n    \"\"\"\n    assert digit_and_letter(\"abcd1234\") == [4, 4]\n    assert digit_and_letter(\"abcd12345\") == [5, 4]\n    assert digit_and_letter(\"a11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "# Time complexity O(n), where n is the length of the string.\ndef number_of_letters_and_digits(string):\n    letters = 0\n    digits = 0\n    for character in string:\n        if character.isdigit():\n            digits += 1\n        elif character.isalpha():\n            letters += 1\n    return letters, digits\n\n\ndef test_number_of_letters_and_digits():\n    assert number_of_letters_and_digits(\"abc123ABC\") == (6, 3)\n\n\nif __name__ == \"__main__\":\n    test_number_of_letters_and_digits()",
    "def count_letters_and_digits(string):\n    return len(list(filter(lambda x: x.isalpha(), string))) + len(list(filter(lambda x: x.isdigit(), string)))\n\n\ndef test_count_letters_and_digits():\n    assert count_letters_and_digits(\"a1b2c3\") == 5\n    assert count_letters_and_digits(\"123\") == 0\n    assert count_letters_and_digits(\"abc\") == 3\n    assert count_letters_and_digits(\"a1b2\") == 5\n    assert count_letters_and_digits(\"ab12c\") == 5\n    assert count_letters_and_digits(\"abc12\") == 5\n    assert count_letters_and_digits(\"abc123\") == 6\n\n\nif __name__ == '__main__':\n    test_count_letters_and_digits()",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef number_of_digits_and_letters(input_string):\n    digit_count, letter_count = 0, 0\n    for char in input_string:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\ninput_string = \"abc123def456\"\nprint(number_of_digits_and_letters(input_string))",
    "def count_digits_letters(input_string):\n    \"\"\"\n    Calculate the number of digits and letters in a string.\n    \"\"\"\n    digits = 0\n    letters = 0\n\n    for char in input_string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return (digits, letters)\n\ndef main():\n    \"\"\"\n    Print the number of digits and letters in the strings.\n    \"\"\"\n    strings = [\"1234\", \"abc\", \"abc123\", \"123abc\"]\n    for string in strings:\n        digits, letters = count_digits_letters(string)\n        print(\"Number of digits: {}, Number of letters: {}\".format(digits, letters))\n\nif __name__ == '__main__':\n    main()",
    "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef get_count(string):\n    letter_count, digit_count = 0, 0\n\n    for s in string:\n        if s.isalpha():\n            letter_count += 1\n        elif s.isdigit():\n            digit_count += 1\n\n    return letter_count, digit_count\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef get_count_2(string):\n    letter_count, digit_count = 0, 0\n    temp = []\n\n    for s in string:\n        if s.isalpha():\n            letter_count += 1\n        elif s.isdigit():\n            digit_count += 1\n        else:\n            temp.append(s)\n\n    return letter_count, digit_count, temp\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef get_count_3(string):\n    letter_count, digit_count = 0, 0\n    temp = []\n\n    for s in string:\n        if s.isalpha():\n            letter_count += 1\n        elif s.isdigit():\n            digit_count += 1\n        else:\n            temp.append(s)\n\n    return letter_count, digit_count, temp\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef get_count_4(string):\n    letter_count, digit_count = 0, 0\n    temp = []\n\n    for s in string:\n        if s.isalpha():\n            letter_count += 1\n        elif s.isdigit():\n            digit_count += 1\n        else:\n            temp.append(s)\n\n    return letter_count, digit_count, temp\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef get_count_5(string):\n    letter_count, digit_count = 0, 0\n    temp = []\n\n    for s in string:\n        if s.isalpha",
    "def count_digits_and_letters(string):\n    \"\"\"\n    Given a string, return a tuple containing the number of digits and the number of letters.\n    \"\"\"\n    num_digits = 0\n    num_letters = 0\n\n    for c in string:\n        if c.isdigit():\n            num_digits += 1\n        elif c.isalpha():\n            num_letters += 1\n\n    return num_digits, num_letters\n\n\ndef main():\n    print(count_digits_and_letters(\"hello\"))\n    print(count_digits_and_letters(\"42\"))\n    print(count_digits_and_letters(\"\"))\n    print(count_digits_and_letters(\" \"))\n    print(count_digits_and_letters(\"a\"))\n    print(count_digits_and_letters(\"ab\"))\n    print(count_digits_and_letters(\"abc\"))\n    print(count_digits_and_letters(\"abcd\"))\n\n\nif __name__ == '__main__':\n    main()",
    "def digit_letter_count(s):\n    \"\"\"\n    Returns a tuple of the count of digits and letters in a string.\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters",
    "def count_digits_letters(string: str) -> tuple[int, int]:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    Parameters:\n        string: The string to be counted.\n\n    Returns:\n        tuple: The number of digits and letters.\n\n    Examples:\n        >>> count_digits_letters(\"Hello world!\")\n        (0, 11)\n    \"\"\"\n    return (\n        sum(char.isdigit() for char in string),\n        sum(char.isalpha() for char in string),\n    )\n\n\ndef count_digits_letters_alt(string: str) -> tuple[int, int]:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    Parameters:\n        string: The string to be counted.\n\n    Returns:\n        tuple: The number of digits and letters.\n\n    Examples:\n        >>> count_digits_letters_alt(\"Hello world!\")\n        (0, 11)\n    \"\"\"\n    return (string.count(\"0123456789\"), string.count(\"abcdefghijklmnopqrstuvwxyz\"))\n\n\ndef count_digits_letters_alt2(string: str) -> tuple[int, int]:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    Parameters:\n        string: The string to be counted.\n\n    Returns:\n        tuple: The number of digits and letters.\n\n    Examples:\n        >>> count_digits_letters_alt2(\"Hello world!\")\n        (0, 11)\n    \"\"\"\n    return (\n        sum(map(str.isdigit, string)),\n        sum(map(str.isalpha, string)),\n    )\n\n\nif __name__ == \"__main__\":\n    print(count_digits_letters(\"Hello world!\"))\n    print(count_digits_letters_alt(\"Hello world!\"))\n    print(count_digits_letters_alt2(\"Hello world!\"))",
    "def count_digits_letters(s):\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n\nassert count_digits_letters(\"Hello, world!\") == (0, 11)\nassert count_digits_letters(\"1,2,3,4\") == (4, 0)\nassert count_digits_letters(\"A,b,c,d\") == (0, 4)",
    "def number_of_digits_letters(s):\n    \"\"\"Return the number of digits and letters in a string.\"\"\"\n    digit_count = 0\n    letter_count = 0\n\n    for c in s:\n        if c.isdigit():\n            digit_count += 1\n        elif c.isalpha():\n            letter_count += 1\n\n    return digit_count, letter_count\n\n\ndef test_number_of_digits_letters():\n    \"\"\"Test number_of_digits_letters.\"\"\"\n    assert number_of_digits_letters(\"\") == (0, 0)\n    assert number_of_digits_letters(\"a\") == (0, 1)\n    assert number_of_digits_letters(\"1\") == (1, 0)\n    assert number_of_digits_letters(\"123\") == (3, 0)\n    assert number_of_digits_letters(\"a1b2c\") == (2, 3)\n    assert number_of_digits_letters(\"a1b2c3\") == (3, 3)\n    assert number_of_digits_letters(\"a1b2c3d\") == (3, 4)\n    assert number_of_digits_letters(\"a1b2c3d4\") == (4, 4)\n    assert number_of_digits_letters(\"a1b2c3d4e\") == (4, 5)\n\n\nif __name__ == \"__main__\":\n    test_number_of_digits_letters()",
    "def num_digits_and_letters(s):\n    \"\"\"\n    >>> num_digits_and_letters('abc123')\n    (0, 4)\n    >>> num_digits_and_letters('')\n    (0, 0)\n    >>> num_digits_and_letters('abc123abc123')\n    (0, 12)\n    >>> num_digits_and_letters('123abc123')\n    (3, 6)\n    >>> num_digits_and_letters('abc')\n    (0, 3)\n    >>> num_digits_and_letters('123')\n    (3, 0)\n    >>> num_digits_and_letters('123abc')\n    (3, 3)\n    >>> num_digits_and_letters('123abc123')\n    (3, 6)\n    \"\"\"\n    num_digits = 0\n    num_letters = 0\n\n    for c in s:\n        if c.isdigit():\n            num_digits += 1\n        elif c.isalpha():\n            num_letters += 1\n\n    return num_digits, num_letters\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_digits_letters(s):\n    return len([c for c in s if c.isdigit()])\n\n\ndef count_digits_letters_v2(s):\n    return sum([c.isdigit() for c in s])\n\n\ndef count_digits_letters_v3(s):\n    return sum(c.isdigit() for c in s)\n\n\ndef count_digits_letters_v4(s):\n    return len(s) - len(s.replace(\"0123456789\", \"\"))\n\n\ndef count_digits_letters_v5(s):\n    return len(s) - sum(c.isdigit() for c in s)",
    "# Write your code here.\ndef num_digits_and_letters(s):\n    return sum(1 for char in s if char.isdigit()), sum(1 for char in s if char.isalpha())",
    "def count_letters_and_digits(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef main():\n    print(count_letters_and_digits(\"Hello 22 World!\"))\n    print(count_letters_and_digits(\"Who is Messi?\"))\n    print(count_letters_and_digits(\"992\"))\n    print(count_letters_and_digits(\"He110\"))\n\n\nif __name__ == '__main__':\n    main()",
    "def count_digits_and_letters(string: str) -> int:\n    \"\"\"Calculate the number of digits and letters in a string.\n\n    Args:\n        string (str): input string\n\n    Examples:\n        >>> assert count_digits_and_letters('ab12c') == 5\n        >>> assert count_digits_and_letters('AB12c') == 6\n        >>> assert count_digits_and_letters('AB12c34') == 10\n    \"\"\"\n    return sum(1 for char in string if char.isalpha() or char.isdigit())\n\n\nif __name__ == \"__main__\":\n    print(count_digits_and_letters(\"ab12c\"))",
    "def count_letters_and_digits(s):\n    return sum(c.isdigit() for c in s), sum(c.isalpha() for c in s)\n\n\ndef test_count_letters_and_digits():\n    \"\"\"Test for count_letters_and_digits function.\"\"\"\n    assert count_letters_and_digits(\"abc123ABC\") == (5, 8)\n    assert count_letters_and_digits(\"a\") == (1, 1)\n    assert count_letters_and_digits(\"\") == (0, 0)\n    assert count_letters_and_digits(\"1\") == (1, 0)",
    "def count_letters_and_digits(input_string):\n    \"\"\"Count letters and digits in a string.\"\"\"\n    letters_count = 0\n    digits_count = 0\n\n    for char in input_string:\n        if char.isdigit():\n            digits_count += 1\n        elif char.isalpha():\n            letters_count += 1\n\n    return letters_count, digits_count",
    "def digit_letter_count(s):\n    letter_count = 0\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\n\ndef test_digit_letter_count():\n    assert digit_letter_count(\"a2bcd123ef\") == (4, 6)\n\n\nif __name__ == \"__main__\":\n    test_digit_letter_count()",
    "def calculate_string(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n        else:\n            count += 1\n    return count\n\n\ndef main():\n    print(calculate_string(\"Aa1234\"))\n\n\nif __name__ == '__main__':\n    main()",
    "# def digit_letter_count(string):\n#     digit_count = 0\n#     letter_count = 0\n#     for i in string:\n#         if i.isdigit():\n#             digit_count += 1\n#         elif i.isalpha():\n#             letter_count += 1\n#     return digit_count, letter_count\n\n\ndef digit_letter_count(string):\n    return sum(c.isdigit() for c in string), sum(c.isalpha() for c in string)\n\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    digit_count, letter_count = digit_letter_count(string)\n    print(f\"Number of digits: {digit_count}\")\n    print(f\"Number of letters: {letter_count}\")",
    "def number_of_digits_letters(s):\n    \"\"\"\n    :param s: str - input string\n    :return: list: int - number of digits and letters\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Please provide a string input')\n    return [len([i for i in s if i.isdigit()]), len([i for i in s if i.isalpha()])]",
    "def digit_and_letter_count(string):\n    digits = 0\n    letters = 0\n    for c in string:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef test_digit_and_letter_count():\n    assert digit_and_letter_count('') == (0, 0)\n    assert digit_and_letter_count('123') == (3, 0)\n    assert digit_and_letter_count('abc') == (0, 3)\n    assert digit_and_letter_count('ab12c') == (2, 2)",
    "def digit_letters(s):\n    return len(list(filter(lambda x: x.isdigit(), s)))\n\ndef letter_digits(s):\n    return len(list(filter(lambda x: x.isalpha(), s)))\n\ndef main():\n    assert digit_letters(\"abc123\") == 3\n    assert digit_letters(\"abc\") == 0\n    assert letter_digits(\"abc123\") == 3\n    assert letter_digits(\"123abc\") == 3\n    print(\"OK\")\n\nif __name__ == '__main__':\n    main()",
    "def count_digits_and_letters(string):\n    letters = 0\n    digits = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return letters, digits\n\n\ndef main():\n    print(count_digits_and_letters(\"Hello 22 World\"))\n    # (4, 6)\n\n    print(count_digits_and_letters(\"Hello World 22\"))\n    # (4, 5)\n\n    print(count_digits_and_letters(\"22 Hello World\"))\n    # (4, 1)\n\n    print(count_digits_and_letters(\"a22 b33 c44 d55\"))\n    # (8, 0)\n\n\nif __name__ == '__main__':\n    main()",
    "def count_digits_and_letters(string: str) -> tuple:\n    \"\"\"Return number of digits and letters in a string.\"\"\"\n    digits = letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    digits, letters = count_digits_and_letters(string)\n    print(f\"The string '{string}' has {digits} digits and {letters} letters.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def number_of_digits_and_letters(text):\n    \"\"\"\n    >>> number_of_digits_and_letters(\"\")\n    (0, 0)\n    >>> number_of_digits_and_letters(\"abc\")\n    (0, 3)\n    >>> number_of_digits_and_letters(\"abc123\")\n    (3, 3)\n    >>> number_of_digits_and_letters(\"123abc\")\n    (3, 3)\n    >>> number_of_digits_and_letters(\"abc123abc\")\n    (3, 6)\n    >>> number_of_digits_and_letters(\"abc123abc123\")\n    (6, 6)\n    >>> number_of_digits_and_letters(\"abc123abc123abc\")\n    (6, 9)\n    >>> number_of_digits_and_letters(\"123abc123abc123abc\")\n    (9, 9)\n    \"\"\"\n    digits = 0\n    letters = 0\n    for c in text:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from re import compile\n\n\ndef letter_digits(string: str) -> tuple[int, int]:\n    \"\"\"Return the number of digits and letters in a string.\n\n    >>> letter_digits('a2b3')\n    (3, 2)\n    \"\"\"\n    numbers = compile(r\"\\d\")\n    letters = compile(r\"[a-z]\")\n    return len(numbers.findall(string)), len(letters.findall(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def count_letters_and_digits(string):\n    \"\"\"\n    Takes a string and returns a tuple with the number of letters and digits in that string.\n    \"\"\"\n    digits = 0\n    letters = 0\n\n    for character in string:\n        if character.isdigit():\n            digits += 1\n        elif character.isalpha():\n            letters += 1\n\n    return letters, digits\n\nprint(count_letters_and_digits(\"a\"))\nprint(count_letters_and_digits(\"1\"))\nprint(count_letters_and_digits(\"a1\"))\nprint(count_letters_and_digits(\"a1b2c3d4e5f6g7h8i9j0k1\"))",
    "def count_digits_and_letters(input_str):\n    return len(list(filter(lambda c: c.isdigit() or c.isalpha(), input_str)))\n\n\nif __name__ == '__main__':\n    print(count_digits_and_letters('abc123'))",
    "def num_digits_letters(s):\n    \"\"\"\n    Returns the number of digits and letters in a string.\n\n    >>> num_digits_letters(\"Hello, world!\")\n    (0, 13)\n    >>> num_digits_letters(\"123abc\")\n    (3, 3)\n    >>> num_digits_letters(\"A123B\")\n    (5, 0)\n    >>> num_digits_letters(\"\")\n    (0, 0)\n    \"\"\"\n    if not s:\n        return (0, 0)\n    return (\n        len([c for c in s if c.isdigit()]),\n        len([c for c in s if c.isalpha()]),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def number_of_digits_and_letters(s):\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef test_number_of_digits_and_letters():\n    \"\"\"Test for number_of_digits_and_letters function.\"\"\"\n    assert number_of_digits_and_letters(\"Hello\") == (0, 5)\n    assert number_of_digits_and_letters(\"123abc\") == (3, 3)\n    assert number_of_digits_and_letters(\"\") == (0, 0)\n    assert number_of_digits_and_letters(\"aA11\") == (2, 2)\n    assert number_of_digits_and_letters(\" \") == (0, 1)\n\n\nif __name__ == \"__main__\":\n    test_number_of_digits_and_letters()",
    "from collections import Counter\n\n\ndef digit_and_letter_counter(input_str):\n    \"\"\"Counts the number of letters and digits in a string.\n\n    Args:\n        input_str: The string to be analyzed.\n\n    Returns:\n        A dict with counts for letters and digits.\n    \"\"\"\n    # Initialize the counter\n    counter = Counter()\n\n    # Iterate through the string\n    for char in input_str:\n        if char.isalpha():\n            counter['letters'] += 1\n        elif char.isdigit():\n            counter['digits'] += 1\n\n    return counter",
    "def num_digits_letters(string: str) -> (int, int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    num_digits = 0\n    num_letters = 0\n\n    for char in string:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n\n    return num_digits, num_letters\n\n\nif __name__ == \"__main__\":\n    print(num_digits_letters(\"Hello, World!\"))",
    "from re import compile\n\n\ndef count_digits_letters(text: str) -> tuple[int, int]:\n    \"\"\"Returns a tuple with the number of digits and letters in a string.\n\n    >>> count_digits_letters(\"Hello World\")\n    (0, 11)\n    >>> count_digits_letters(\"1234567890\")\n    (10, 0)\n    >>> count_digits_letters(\"HelloWorld\")\n    (0, 11)\n    >>> count_digits_letters(\"A123B456C789\")\n    (10, 3)\n    >>> count_digits_letters(\"HelloWorld123\")\n    (3, 10)\n    >>> count_digits_letters(\"123HelloWorld\")\n    (10, 0)\n    >>> count_digits_letters(\"123HelloWorld456\")\n    (16, 0)\n    >>> count_digits_letters(\"\")\n    (0, 0)\n    >>> count_digits_letters(\"1234567890\")\n    (10, 0)\n    >>> count_digits_letters(\"abcdefghijklmnopqrstuvwxyz\")\n    (0, 26)\n    >>> count_digits_letters(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    (0, 26)\n    >>> count_digits_letters(\"123abcdefghijklmnopqrstuvwxyz\")\n    (26, 10)\n    \"\"\"\n    pattern = compile(r\"[A-Za-z]\")\n    letters = len(pattern.findall(text))\n    pattern = compile(r\"\\d\")\n    digits = len(pattern.findall(text))\n    return digits, letters\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def count_letters_digits(str):\n    count_letters = 0\n    count_digits = 0\n    for i in str:\n        if i.isdigit():\n            count_digits += 1\n        elif i.isalpha():\n            count_letters += 1\n    return count_letters, count_digits\n\n\nif __name__ == '__main__':\n    str = 'A123BBC'\n    print(count_letters_digits(str))",
    "def count_letters(string: str) -> int:\n    \"\"\"Returns the number of letters in a string.\n\n    Args:\n        string (str): String to be evaluated.\n\n    Examples:\n        >>> assert count_letters('') == 0\n        >>> assert count_letters('asdf') == 4\n        >>> assert count_letters('asdf1234') == 4\n        >>> assert count_letters('1234') == 0\n        >>> assert count_letters('1234asdf') == 4\n        >>> assert count_letters('asdf1234asdf') == 8\n    \"\"\"\n    return sum(1 for char in string if char.isalpha())\n\n\ndef count_digits(string: str) -> int:\n    \"\"\"Returns the number of digits in a string.\n\n    Args:\n        string (str): String to be evaluated.\n\n    Examples:\n        >>> assert count_digits('') == 0\n        >>> assert count_digits('asdf') == 0\n        >>> assert count_digits('asdf1234') == 4\n        >>> assert count_digits('1234') == 4\n        >>> assert count_digits('1234asdf') == 0\n        >>> assert count_digits('asdf1234asdf') == 4\n    \"\"\"\n    return sum(1 for char in string if char.isdigit())\n\n\nif __name__ == \"__main__\":\n    print(count_letters(\"asdf1234\"))\n    print(count_digits(\"asdf1234\"))",
    "def number_of_digits_and_letters(string):\n    num_digits = 0\n    num_letters = 0\n\n    for char in string:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n\n    return num_digits, num_letters\n\n\nif __name__ == '__main__':\n    print(number_of_digits_and_letters('Hello World'))\n    print(number_of_digits_and_letters('1234'))",
    "from re import compile as re_compile\nfrom re import findall as re_findall\n\n\n# [1]\ndef number_of_digits_and_letters(input_string):\n    pattern = re_compile(r'[A-Za-z]')\n    return (len(input_string) - len(re_findall(pattern, input_string)))\n\n\n# [2]\ndef number_of_digits_and_letters(input_string):\n    return len([c for c in input_string if c.isdigit() or c.isalpha()])\n\n\n# [3]\ndef number_of_digits_and_letters(input_string):\n    return sum(c.isalpha() or c.isdigit() for c in input_string)",
    "def digits_and_letters(s):\n    # check if the string is empty\n    if not s:\n        return 0, 0\n\n    # check if the string is only letters\n    if s.isalpha():\n        return 0, len(s)\n\n    # check if the string is only digits\n    if s.isdigit():\n        return len(s), 0\n\n    # get the digits and letters\n    digits = [int(i) for i in s if i.isdigit()]\n    letters = [i for i in s if i.isalpha()]\n\n    return sum(digits), len(letters)\n\n\nprint(digits_and_letters(\"\"))\nprint(digits_and_letters(\"123\"))\nprint(digits_and_letters(\"abc\"))\nprint(digits_and_letters(\"abc123\"))\nprint(digits_and_letters(\"123abc\"))\nprint(digits_and_letters(\"abc123abc\"))",
    "def digit_and_letter_count(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    digits = letters = 0\n    for s in string:\n        if s.isdigit():\n            digits += 1\n        elif s.isalpha():\n            letters += 1\n    \n    return digits, letters\n\n\ndef main():\n    string = 'abcd1234'\n    print(digit_and_letter_count(string))\n\n\nif __name__ == '__main__':\n    main()",
    "def digit_letter_count(string):\n    digit_count = 0\n    letter_count = 0\n    for char in string:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\n\nassert digit_letter_count(\"A123\") == (1, 3)\nassert digit_letter_count(\"123\") == (3, 0)\nassert digit_letter_count(\"abc\") == (0, 3)\nassert digit_letter_count(\"a1b2c3\") == (3, 3)\nassert digit_letter_count(\"a@b#c!\") == (0, 7)",
    "def number_of_digits_and_letters(string):\n    \"\"\"\n    This function calculates the number of letters and digits in a string.\n    \"\"\"\n    letters = 0\n    digits = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return letters, digits\n\n\ndef test_number_of_digits_and_letters():\n    \"\"\"\n    >>> test_number_of_digits_and_letters()\n    \"\"\"\n    assert number_of_digits_and_letters(\"abcd1234\") == (4, 4)\n    assert number_of_digits_and_letters(\"ab1234c\") == (3, 4)\n    assert number_of_digits_and_letters(\"1234abcd\") == (4, 4)\n    assert number_of_digits_and_letters(\"12345\") == (5, 0)\n    assert number_of_digits_and_letters(\"abcd\") == (4, 0)\n    assert number_of_digits_and_letters(\"1234\") == (0, 4)",
    "def count_digits_and_letters(text):\n    \"\"\"Returns the number of digits and letters in a string.\n\n    >>> count_digits_and_letters(\"1234abc\")\n    (5, 3)\n    >>> count_digits_and_letters(\"\")\n    (0, 0)\n    >>> count_digits_and_letters(\"abc\")\n    (0, 3)\n    >>> count_digits_and_letters(\"123\")\n    (3, 0)\n    >>> count_digits_and_letters(\"ABC\")\n    (0, 3)\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in text:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def number_of_digits_and_letters(string):\n    \"\"\"Returns the number of digits and letters in a string.\n\n    >>> number_of_digits_and_letters(\"Hello world!\")\n    (1, 9)\n    >>> number_of_digits_and_letters(\"12345\")\n    (5, 0)\n    >>> number_of_digits_and_letters(\"\")\n    (0, 0)\n    >>> number_of_digits_and_letters(\"aA11bB\")\n    (4, 4)\n    \"\"\"\n    # Hint: Use the built-in str method count()\n\n    # One way is to check each character in the string and count them\n    # using if-elif-else statements\n    digits = 0\n    letters = 0\n    for i in string:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef number_of_digits_and_letters_2(string):\n    \"\"\"Returns the number of digits and letters in a string.\n\n    >>> number_of_digits_and_letters(\"Hello world!\")\n    (1, 9)\n    >>> number_of_digits_and_letters(\"12345\")\n    (5, 0)\n    >>> number_of_digits_and_letters(\"\")\n    (0, 0)\n    >>> number_of_digits_and_letters(\"aA11bB\")\n    (4, 4)\n    \"\"\"\n    # Another way is to use the built-in str method count()\n    return string.count(\"0123456789\"), string.count(\"abcdefghijklmnopqrstuvwxyz\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Time Complexity O(n)\n# Space Complexity O(1)\ndef digits_and_letters(string):\n    digits = 0\n    letters = 0\n\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return digits, letters\n\n\nprint(digits_and_letters(\"hello123\"))",
    "from collections import defaultdict\n\n\ndef count_letters_digits(string):\n    \"\"\"Calculate the number of digits and letters in a string.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = defaultdict(int)\n\n    for char in string:\n        if char.isalpha():\n            result[\"letters\"] += 1\n        elif char.isdigit():\n            result[\"digits\"] += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    test_strings = [\n        \"1a2b\",\n        \"a1b2\",\n        \"123\",\n        \"abc\",\n    ]\n\n    for test in test_strings:\n        result = count_letters_digits(test)\n        print(f\"{test} has {result['digits']} digits and {result['letters']} letters.\")",
    "def number_of_digits_and_letters(string):\n    letters = 0\n    digits = 0\n\n    for i in string:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return letters, digits\n\n\nprint(number_of_digits_and_letters(\"h4f5r5\"))",
    "def number_and_letters(string):\n    letters = 0\n    digits = 0\n    for i in string:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return letters, digits\n\n\nif __name__ == '__main__':\n    print(number_and_letters('1234hello'))",
    "def digit_and_letter_count(string):\n    # Write your code here.\n\tdigit_count = 0\n\tletter_count = 0\n\tfor i in range(len(string)):\n\t\tif string[i].isdigit():\n\t\t\tdigit_count += 1\n\t\telse:\n\t\t\tletter_count += 1\n\treturn [digit_count, letter_count]\n\n\nprint(digit_and_letter_count(\"test\"))",
    "def count_digits_letters(input_str: str) -> tuple[int, int]:\n    \"\"\"\n    >>> count_digits_letters('')\n    (0, 0)\n    >>> count_digits_letters('abc')\n    (0, 3)\n    >>> count_digits_letters('123')\n    (3, 0)\n    >>> count_digits_letters('abc123')\n    (3, 3)\n    \"\"\"\n    digits = 0\n    letters = 0\n\n    for c in input_str:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n\n    return digits, letters\n\n\nif __name__ == \"__main__\":\n    input_str = \"abc123\"\n    print(count_digits_letters(input_str))",
    "from collections import Counter\n\n\ndef digit_count_and_letter_count(string):\n    return Counter(string.lower())\n\n\ndef test_digit_count_and_letter_count():\n    assert digit_count_and_letter_count(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'l': 0, 'o': 0}\n    assert digit_count_and_letter_count(\"abcd1234\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'l': 0, 'o': 0, '1': 2, '2': 1, '3': 1, '4': 1}\n    assert digit_count_and_letter_count(\"abcd12345\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'l': 0, 'o': 0, '1': 2, '2': 1, '3': 1, '4': 1, '5': 1}\n    assert digit_count_and_letter_count(\"abcd123456\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'l': 0, 'o': 0, '1': 2, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1}\n\n\nif __name__ == '__main__':\n    test_digit_count_and_letter_count()",
    "def number_of_digits_and_letters(string):\n    \"\"\"Return a tuple of the number of digits and letters in a string.\"\"\"\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters",
    "def count_digits_and_letters(text):\n    \"\"\"\n    Calculate the number of digits and letters in a string\n    \"\"\"\n    letters = 0\n    digits = 0\n\n    for char in text:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return letters, digits\n\nif __name__ == '__main__':\n    print(count_digits_and_letters('abc123'))\n    print(count_digits_and_letters('123abc'))\n    print(count_digits_and_letters('abcABC123'))\n    print(count_digits_and_letters('!#$%&'))",
    "def number_and_letters(input_string):\n    \"\"\"\n    Return number and letters count in a given string\n    \"\"\"\n    return [\n        len([x for x in input_string if x.isdigit()]),\n        len([x for x in input_string if x.isalpha()])\n    ]",
    "from re import findall\n\n\ndef count_letters_and_digits(string):\n    return len(findall(r'[a-zA-Z]', string)), len(findall(r'\\d', string))\n\n\ndef test_count_letters_and_digits():\n    \"\"\"Test for count_letters_and_digits function.\"\"\"\n    assert count_letters_and_digits(\"Hello World 123\") == (\n        11, 3)\n    assert count_letters_and_digits(\"Hello 123\") == (5, 2)\n    assert count_letters_and_digits(\"123\") == (0, 3)\n    assert count_letters_and_digits(\"HELLO\") == (5, 0)\n    assert count_letters_and_digits(\"\") == (0, 0)\n\n\nif __name__ == '__main__':\n    test_count_letters_and_digits()",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef count_letters_digits(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return letters, digits\n\n\nassert count_letters_digits(\"a1b2c3\") == (3, 3)\nassert count_letters_digits(\"A1b2C3\") == (3, 3)\nassert count_letters_digits(\"A1b2c3D\") == (4, 4)",
    "def number_and_letter_count(s):\n    digits = 0\n    letters = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\nprint(number_and_letter_count(\"Hello world\"))\nprint(number_and_letter_count(\"123\"))",
    "def digit_letters_counter(string: str) -> tuple:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    >>> digit_letters_counter(\"A22B\")\n    (0, 4)\n    >>> digit_letters_counter(\"A22B1\")\n    (1, 4)\n    >>> digit_letters_counter(\"A22B11\")\n    (2, 5)\n    >>> digit_letters_counter(\"A22B11C\")\n    (3, 6)\n    >>> digit_letters_counter(\"A22B11C1\")\n    (4, 7)\n    \"\"\"\n    letters = 0\n    digits = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def digit_letter_count(s):\n    count_digit = 0\n    count_letter = 0\n    for i in s:\n        if i.isdigit():\n            count_digit += 1\n        elif i.isalpha():\n            count_letter += 1\n    return count_digit, count_letter\n\nprint(digit_letter_count(\"Hello, world!\"))\nprint(digit_letter_count(\"1234567890\"))\nprint(digit_letter_count(\"Python\"))",
    "def count_letters_and_digits(input_str: str) -> dict:\n    \"\"\"\n    Counts the number of letters and digits in a string.\n\n    >>> count_letters_and_digits(\"The2guys1337\")\n    {'letters': 10, 'digits': 3}\n\n    >>> count_letters_and_digits(\"2137\")\n    {'letters': 0, 'digits': 4}\n\n    >>> count_letters_and_digits(\"123\")\n    {'letters': 0, 'digits': 3}\n\n    >>> count_letters_and_digits(\"The guy\")\n    {'letters': 8, 'digits': 0}\n\n    >>> count_letters_and_digits(\"\")\n    {'letters': 0, 'digits': 0}\n\n    :param input_str: The string to count the letters and digits from\n    :return: The number of letters and digits in the string\n    \"\"\"\n    return {\n        \"letters\": sum(char.isalpha() for char in input_str),\n        \"digits\": sum(char.isdigit() for char in input_str),\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def digit_letter(string):\n    digit = 0\n    letter = 0\n    for c in string:\n        if c.isdigit():\n            digit += 1\n        elif c.isalpha():\n            letter += 1\n    return digit, letter\n\n\ndef main():\n    print(digit_letter(\"abc123ABC\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def count_letters_and_digits(string):\n    \"\"\"\n    >>> count_letters_and_digits('356')\n    (1, 2)\n    >>> count_letters_and_digits('356abc')\n    (2, 3)\n    >>> count_letters_and_digits('abc')\n    (1, 2)\n    \"\"\"\n    num_digits = 0\n    num_letters = 0\n    for char in string:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n    return (num_digits, num_letters)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef count_letters_digits(string):\n    \"\"\"Count the number of letters and digits in a string.\n\n    Args:\n        string (str): input string\n\n    Returns:\n        tuple: (number of letters, number of digits)\n    \"\"\"\n    digits = 0\n    letters = 0\n\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return letters, digits\n\n\ndef count_letters_digits_counter(string):\n    \"\"\"Count the number of letters and digits in a string.\n\n    Args:\n        string (str): input string\n\n    Returns:\n        tuple: (number of letters, number of digits)\n    \"\"\"\n    counter = Counter(string)\n    return counter['a'] + counter['e'] + counter['i'] + counter['o'] + counter['u'], sum(counter.values()) - counter['a'] - counter['e'] - counter['i'] - counter['o'] - counter['u']\n\n\nif __name__ == '__main__':\n    assert count_letters_digits(\"There are 8 letters and 2 digits in this string\") == (8, 2)\n    assert count_letters_digits_counter(\"There are 8 letters and 2 digits in this string\") == (8, 2)",
    "def number_and_letters(string):\n    count_letters = 0\n    count_digits = 0\n    for letter in string:\n        if letter.isdigit():\n            count_digits += 1\n        elif letter.isalpha():\n            count_letters += 1\n        else:\n            pass\n    return count_digits, count_letters\n\n\nif __name__ == '__main__':\n    string = input('Enter a string: ')\n    print(number_and_letters(string))",
    "def calculate_length(text: str) -> tuple:\n    \"\"\"Returns the number of digits and letters in a string.\n\n    Args:\n        text (str): string to be analyzed.\n\n    Examples:\n        >>> calculate_length(\"Hello, world!\")\n        (7, 5)\n    \"\"\"\n    return len([char for char in text if char.isdigit()]), len([char for char in text if char.isalpha()])\n\n\nif __name__ == \"__main__\":\n    print(calculate_length(\"Hello, world!\"))",
    "def count_letters_and_digits(input_str):\n    return sum(1 for c in input_str if c.isalpha() or c.isdigit()), sum(1 for c in input_str if c.isalpha()), sum(1 for c in input_str if c.isdigit())\n\n\nif __name__ == '__main__':\n    s = '123abc'\n    print(count_letters_and_digits(s))",
    "def count_letters_digits(s):\n    letters = 0\n    digits = 0\n    for ch in s:\n        if ch.isdigit():\n            digits += 1\n        elif ch.isalpha():\n            letters += 1\n    return letters, digits",
    "def digit_letter_count(string):\n    # Write your code here.\n    return len([c for c in string if c.isdigit()])",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef digit_and_letter_count(string: str) -> tuple:\n    digit, letter = 0, 0\n    for s in string:\n        if s.isdigit():\n            digit += 1\n        elif s.isalpha():\n            letter += 1\n    return digit, letter\n\n\nif __name__ == \"__main__\":\n    print(digit_and_letter_count(\"123abc\"))",
    "def count_digits_and_letters(string):\n    \"\"\"\n    Counts the number of digits and letters in a string.\n\n    Args:\n     - string (str): The string to be analyzed.\n\n    Returns:\n     - tuple: A tuple containing the number of digits and letters.\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef test_function():\n    assert count_digits_and_letters(\"Hello\") == (0, 5)\n    assert count_digits_and_letters(\"12345\") == (5, 0)\n    assert count_digits_and_letters(\"Hello12345\") == (5, 5)\n    assert count_digits_and_letters(\"12345Hello\") == (5, 5)\n    assert count_digits_and_letters(\"12345Hello12345\") == (10, 10)\n    assert count_digits_and_letters(\"Hello World\") == (0, 11)\n    assert count_digits_and_letters(\"123 World\") == (3, 8)\n    assert count_digits_and_letters(\"123 456\") == (6, 0)\n    assert count_digits_and_letters(\"Hello 123 World\") == (5, 12)\n    assert count_digits_and_letters(\"123 Hello World\") == (5, 13)\n    assert count_digits_and_letters(\"123 456 Hello World\") == (10, 13)\n    print(\"Test success!\")\n\n\ntest_function()",
    "def string_count(string):\n    \"\"\"\n    >>> string_count(\"abc123\")\n    {'letters': 3, 'digits': 3}\n    >>> string_count(\"abc123abc\")\n    {'letters': 6, 'digits': 3}\n    >>> string_count(\"abc123abc123\")\n    {'letters': 12, 'digits': 6}\n    >>> string_count(\"abc123abc123abc123\")\n    {'letters': 18, 'digits': 9}\n    \"\"\"\n    return {\n        \"letters\": sum(c.isalpha() for c in string),\n        \"digits\": sum(c.isdigit() for c in string),\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def digit_letter_count(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # Keep track of the number of letters and digits\n    letters = 0\n    digits = 0\n\n    # Loop through the string\n    for char in string:\n        # Check if the character is a digit\n        if char.isdigit():\n            digits += 1\n        # Check if the character is a letter\n        elif char.isalpha():\n            letters += 1\n\n    # Return the number of letters and digits\n    return letters, digits\n\n\ndef main():\n    assert digit_letter_count('a1b2') == (2, 2)\n    assert digit_letter_count('a b') == (2, 0)\n    assert digit_letter_count('1 2') == (0, 2)\n    assert digit_letter_count('1a') == (1, 1)\n    assert digit_letter_count('ab') == (2, 0)\n    assert digit_letter_count('1') == (0, 1)\n    assert digit_letter_count('a') == (1, 0)\n    assert digit_letter_count('') == (0, 0)\n\n\nif __name__ == '__main__':\n    main()",
    "def digit_and_letter_count(s):\n    letter_count = 0\n    digit_count = 0\n    for c in s:\n        if c.isdigit():\n            digit_count += 1\n        elif c.isalpha():\n            letter_count += 1\n    return digit_count, letter_count\n\n\nif __name__ == '__main__':\n    print(digit_and_letter_count(\"hello1234\"))\n    print(digit_and_letter_count(\"hello\"))",
    "def number_of_digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for i in range(len(string)):\n        if string[i].isdigit():\n            digits += 1\n        elif string[i].isalpha():\n            letters += 1\n    return digits, letters\n\n\ndef test_number_of_digits_and_letters():\n    assert number_of_digits_and_letters(\"12345\") == (5, 0)\n    assert number_of_digits_and_letters(\"abcdef\") == (0, 6)\n    assert number_of_digits_and_letters(\"123abc\") == (3, 3)\n\n\nif __name__ == \"__main__\":\n    test_number_of_digits_and_letters()",
    "from collections import Counter\n\n\ndef count_letters_and_digits(s):\n    return Counter(s)\n\n\ndef test_count_letters_and_digits():\n    assert count_letters_and_digits(\"abc123\") == {'a': 1, 'b': 1, 'c': 1, '1': 1, '2': 1, '3': 1}\n\n\nif __name__ == '__main__':\n    print(count_letters_and_digits(\"abc123\"))",
    "# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef count_digits_letters(string):\n    count_digits = 0\n    count_letters = 0\n    for char in string:\n        if char.isdigit():\n            count_digits += 1\n        elif char.isalpha():\n            count_letters += 1\n    return count_digits, count_letters\n\n\nprint(count_digits_letters('hi123'))\nprint(count_digits_letters('abc'))\nprint(count_digits_letters('abc123'))",
    "def number_of_digits_and_letters(string):\n    letters = 0\n    digits = 0\n\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return letters, digits\n\n\ndef main():\n    result = number_of_digits_and_letters(\"Hello\")\n    print(\"Number of letters: {}\".format(result[0]))\n    print(\"Number of digits: {}\".format(result[1]))\n\n\nif __name__ == '__main__':\n    main()",
    "def number_and_letters(string):\n    return len(string.replace(\" \", \"\")), len(string) - len(string.replace(\" \", \"\"))\n\n\nif __name__ == \"__main__\":\n    print(number_and_letters(\"The quick brown fox jumps over the lazy dog\"))",
    "def digit_and_letter(str):\n    return len(str) - sum(c.isalpha() for c in str)\n\n\ndef test_digit_and_letter():\n    assert digit_and_letter(\"\") == 0\n    assert digit_and_letter(\"123abc\") == 4\n    assert digit_and_letter(\"abc123\") == 6\n    assert digit_and_letter(\"abc123abc\") == 8\n    assert digit_and_letter(\"abc123abc123\") == 14\n\n\nif __name__ == '__main__':\n    test_digit_and_letter()",
    "def digit_count(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef letter_count(str):\n    count = 0\n    for char in str:\n        if char.isalpha():\n            count += 1\n    return count\n\nprint(digit_count('1234'))\nprint(letter_count('abcdef'))",
    "def count_letters_and_digits(input_string):\n    \"\"\"\n    Calculates the number of letters and digits in a string.\n\n    Args:\n       input_string(string): Strings to calculate number of letters and digits.\n    Returns:\n       int: Total number of letters and digits in the string.\n    \"\"\"\n    return sum(map(str.isdigit, input_string)) + sum(map(str.isalpha, input_string))\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = count_letters_and_digits(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))\ntest_function((\"A12345bcd\", 5))\ntest_function((\"A23bc45d\", 5))",
    "def number_of_digits_and_letters(string: str) -> tuple:\n    \"\"\"Returns a tuple of number of digits and letters in a string.\n\n    >>> number_of_digits_and_letters(\"This is a string!\")\n    (6, 10)\n    \"\"\"\n    letters = 0\n    digits = 0\n\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return digits, letters\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def digits_letters(string):\n    return sum([x.isdigit() for x in string]), sum([x.isalpha() for x in string])\n\n\ndef test_digits_letters():\n    assert digits_letters(\"abc123\") == (0, 6)\n    assert digits_letters(\"abc\") == (0, 3)\n    assert digits_letters(\"123\") == (3, 0)\n    assert digits_letters(\"\") == (0, 0)\n    assert digits_letters(\"abc123xyz\") == (0, 9)\n    assert digits_letters(\"abc123xyz123\") == (0, 12)\n\n\nif __name__ == \"__main__\":\n    test_digits_letters()",
    "from re import sub\n\n\ndef count_letters_and_digits(string):\n    return len(sub(\"[^A-Za-z]\", \"\", string)) + len(sub(\"[0-9]\", \"\", string))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}