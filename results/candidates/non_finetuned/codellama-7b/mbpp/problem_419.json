{
  "problem": {
    "task_id": "MBPP/430",
    "prompt": "Write a function to find the directrix of a parabola.",
    "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
    "test_list": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ],
    "challenge_test_list": [],
    "problem_id": 419
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef directrix(focus, vertex):\n    \"\"\"\n    Returns the directrix of a parabola given the focus and vertex.\n    \"\"\"\n    return (focus - vertex[1]) / (vertex[0] - focus)\n\n\ndef main():\n    focus = 0\n    vertex = (0, -1)\n    direct = directrix(focus, vertex)\n    print(\"Directrix of the parabola is: \" + str(direct))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_directrix(focus):\n    \"\"\"\n    >>> find_directrix(0)\n    0\n    >>> find_directrix(10)\n    10\n    \"\"\"\n    return focus\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\ndef directrix(a, b, c):\n    \"\"\"Returns the directrix of a parabola.\n\n    >>> directrix(1, -1, -2)\n    1.0\n    >>> directrix(1, 0, 0)\n    1.0\n    >>> directrix(-1, -2, 1)\n    -1.0\n    \"\"\"\n    if a == 0:\n        return float(c) / b\n    else:\n        return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
    "from __future__ import annotations\n\nimport math\n\n\ndef find_directrix(focus: tuple[float, float], vertex: tuple[float, float]) -> float:\n    \"\"\"Find the directrix of a parabola.\n\n    >>> find_directrix((0, 0), (1, 1))\n    1.0\n    >>> find_directrix((0, 0), (1, -1))\n    -1.0\n    >>> find_directrix((0, 0), (1, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex is on the parabola.\n    \"\"\"\n    if vertex[1] == 0:\n        raise ValueError(\"The vertex is on the parabola.\")\n\n    if focus[1] == 0:\n        return focus[0] / vertex[0]\n\n    focus_x, focus_y = focus\n    vertex_x, vertex_y = vertex\n    focus_vertex_x = focus_x - vertex_x\n    focus_vertex_y = focus_y - vertex_y\n\n    return (\n        (focus_vertex_y ** 2) - (focus_vertex_x ** 2) * (vertex_y ** 2) / (vertex_x ** 2)\n    ) / (2 * focus_vertex_y / (vertex_y ** 2) - 2 * vertex_x / focus_vertex_x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n\n    >>> directrix((0, 0), (0, 1))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n\n    >>> directrix((0, 0), (1, 1))\n    1\n\n    >>> directrix((0, 0), (1, 0))\n    1\n\n    >>> directrix((0, 0), (1, -1))\n    1\n\n    >>> directrix((0, 0), (2, 0))\n    2\n\n    >>> directrix((0, 0), (2, 2))\n    2\n\n    >>> directrix((0, 0), (2, -2))\n    2\n\n    >>> directrix((0, 0), (3, 0))\n    3\n\n    >>> directrix((0, 0), (3, 3))\n    3\n\n    >>> directrix((0, 0), (3, -3))\n    3\n    \"\"\"\n    return focus[1] / (vertex[1] - focus[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(a, b, c):\n    return (a*a*b)/(4*a*a - 4*b*c)\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(directrix(a, b, c))",
    "def directrix(focus, vertex):\n    \"\"\"\n    Given the focus and vertex of a parabola, find the directrix of the parabola.\n    The directrix is the line perpendicular to the axis of symmetry of the parabola.\n    \"\"\"\n    # Find the slope of the focus-vertex line\n    slope_vertex_to_focus = (focus[1] - vertex[1]) / (focus[0] - vertex[0])\n\n    # Slope of the directrix is perpendicular to the focus-vertex line, so the slope of the directrix is the negative reciprocal\n    slope_directrix = -1 / slope_vertex_to_focus\n\n    # The y-intercept of the directrix is the y-coordinate of the vertex\n    y_intercept = vertex[1]\n\n    # Return the line equation of the directrix\n    return [slope_directrix, y_intercept]",
    "import math\n\n\ndef find_directrix(vertex, focus):\n    # find distance between focus and vertex\n    dist = math.sqrt((focus[0] - vertex[0]) ** 2 + (focus[1] - vertex[1]) ** 2)\n    # find distance between focus and y-axis\n    dist_y = math.sqrt(focus[0] ** 2 + focus[1] ** 2)\n\n    # find the equation of the directrix\n    # y = (dist - x) / dist_y\n    return \"y = (\" + str(dist - vertex[0]) + \" / \" + str(dist_y) + \")\"\n\n\nprint(find_directrix([0, 0], [3, 2]))",
    "def focus_and_vertex(a, b, c):\n    \"\"\"\n    a, b, c: integers or floats\n    Returns the focus and vertex of the\n    parabola defined by these coefficients.\n    \"\"\"\n    D = b**2 - 4*a*c\n    F = (b*D - 2*a*c**2)**2/(4*a*D)\n    V = (2*c*b) / (2*a)\n    return F, V",
    "import math\nfrom typing import Union\n\n\ndef parabola_directrix(focus: list, vertex: list) -> Union[float, None]:\n    \"\"\"\n    Calculate the parabola's directrix.\n\n    The parabola's directrix is the line perpendicular to the axis of the\n    parabola.\n\n    The parabola's axis is the line perpendicular to the focus of the\n    parabola.\n\n    The axis is perpendicular to the directrix, so the directrix is the line\n    perpendicular to the focus.\n    \"\"\"\n    if focus == vertex:\n        return None\n\n    return focus[1]\n\n\n# Vertex: (0, 0)\n# Focus: (4, -4)\n\n\nprint(parabola_directrix([4, -4], [0, 0]))\n# 4.0\n\n# Vertex: (0, 0)\n# Focus: (4, 4)\n\nprint(parabola_directrix([4, 4], [0, 0]))\n# 4.0\n\n# Vertex: (0, 0)\n# Focus: (2, 2)\n\nprint(parabola_directrix([2, 2], [0, 0]))\n# 2.0\n\n# Vertex: (0, 0)\n# Focus: (1, 1)\n\nprint(parabola_directrix([1, 1], [0, 0]))\n# 1.0\n\n# Vertex: (0, 0)\n# Focus: (1, 1)\n\nprint(parabola_directrix([1, 1], [1, 1]))\n# None",
    "from __future__ import annotations\n\nfrom math import inf\nfrom typing import Optional\n\n\ndef directrix_of_parabola(focus: tuple[float, float]) -> Optional[tuple[float, float]]:\n    \"\"\"\n    >>> directrix_of_parabola((0, 0))\n    (0, 0)\n    >>> directrix_of_parabola((-1, 1))\n    (1, -1)\n    >>> directrix_of_parabola((1, -1))\n    (1, -1)\n    >>> directrix_of_parabola((-1, -1))\n    (1, 1)\n    >>> directrix_of_parabola((2, 1))\n    (3, 1)\n    \"\"\"\n    if focus[0] == focus[1] == 0:\n        return None\n    return (focus[0] + focus[1] + (focus[0] - focus[1]) ** 2 / (focus[0] + focus[1]), focus[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(directrix_of_parabola((-1, 1)))",
    "def directrix(focus, vertex):\n    return focus - vertex\n\n\nprint(directrix(10, 3))\nprint(directrix(3, 10))\nprint(directrix(3, 3))",
    "from __future__ import annotations\n\nimport math\n\n\ndef directrix(focus: tuple[float, float]) -> list[float]:\n    \"\"\"Find the directrix of a parabola given its focus.\n\n    >>> directrix((-4, 0))\n    [-4, 0]\n    >>> directrix((0, 0))\n    [-4, 4]\n    >>> directrix((1, 0))\n    [-1, 1]\n    >>> directrix((0, 2))\n    [-2, 2]\n    >>> directrix((-2, 0))\n    [-2, 2]\n    >>> directrix((0, -2))\n    [-2, 2]\n    \"\"\"\n    return [\n        focus[0],\n        focus[1] + math.copysign(float(\"inf\"), focus[1]),\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import Tuple\n\nfrom sympy import sympify, solve, symbols\nfrom utils import validate\n\n\n@validate\ndef directrix(focus: Tuple[int, int], directrix_slope: float) -> Tuple[float, float]:\n    \"\"\"Finds the directrix of a parabola.\n\n    Parameters\n    ----------\n    focus : Tuple[int, int]\n        The focus of the parabola.\n    directrix_slope : float\n        The slope of the directrix.\n\n    Returns\n    -------\n    Tuple[float, float]\n        The coordinates of the directrix.\n\n    Raises\n    ------\n    ValueError\n        If the slope of the directrix is 0.\n\n    Examples\n    --------\n    >>> directrix((0, 0), 1)\n    (-1, 0)\n    >>> directrix((0, 0), -1)\n    (1, 0)\n    \"\"\"\n    x, y = symbols(\"x y\")\n\n    focus_x, focus_y = focus\n\n    if directrix_slope == 0:\n        raise ValueError(\"Slope of directrix cannot be 0.\")\n\n    directrix_equation = sympify(f\"{directrix_slope} * x - ({focus_x} + y)\")\n    return solve(directrix_equation, x, y)",
    "import math\n\n\ndef directrix(focus, vertex, height):\n    \"\"\"\n    >>> directrix((0, 0), (1, 1), 2)\n    2\n    \"\"\"\n    if focus[1] != vertex[1]:\n        return focus[1] - vertex[1]\n    else:\n        return vertex[0] - focus[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef directrix(focus):\n    x, y = focus\n    return y * x\n\n\ndef main():\n    focus = eval(input(\"Enter focus: \"))\n    print(\"The directrix is\", directrix(focus))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    (0, 0)\n    >>> directrix((0, 0), (0, 1))\n    (1, 0)\n    >>> directrix((0, 0), (1, 1))\n    (1, 1)\n    \"\"\"\n    return focus[0] - vertex[1] / (focus[1] - vertex[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Returns the directrix of a parabola.\n    \"\"\"\n    return (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    print(directrix(1, 2, 3))",
    "def directrix(focus, vertex):\n    \"\"\"\n    Finds the directrix of a parabola given focus and vertex.\n    \"\"\"\n    # TODO: check if focus and vertex are of same length\n    # TODO: check if focus and vertex are of length 2\n    # TODO: check if focus and vertex are not of same length\n    # TODO: check if focus and vertex are not of length 2\n    # TODO: check if vertex is not on x-axis\n    # TODO: check if focus is not on x-axis\n    # TODO: check if vertex is on x-axis\n    # TODO: check if focus is on x-axis\n    # TODO: check if vertex is on y-axis\n    # TODO: check if focus is on y-axis\n    # TODO: check if vertex is not on y-axis\n    # TODO: check if focus is not on y-axis\n    # TODO: check if vertex is on x-axis and y-axis\n    # TODO: check if focus is on x-axis and y-axis\n    # TODO: check if vertex is on x-axis and not on y-axis\n    # TODO: check if focus is on x-axis and not on y-axis\n    # TODO: check if vertex is not on x-axis and on y-axis\n    # TODO: check if focus is not on x-axis and on y-axis\n    # TODO: check if vertex is not on x-axis and not on y-axis\n    # TODO: check if focus is not on x-axis and not on y-axis\n    # TODO: check if vertex is on x-axis and y-axis\n    # TODO: check if focus is on x-axis and y-axis\n    # TODO: check if vertex is on x-axis and not on y-axis\n    # TODO: check if focus is on x-axis and not on y-axis\n    # TODO: check if vertex is not on x-axis and on y-axis\n    # TODO: check if focus is not on x-axis and on y-axis\n    # TODO: check if vertex is not on x-axis and not on y-axis\n    # TODO: check if focus is not on x-axis and not on y-axis\n    # TODO: calculate and return directrix",
    "from typing import Union\n\n\ndef parabola_directrix(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:\n    \"\"\"Calculates the directrix of a parabola.\n\n    Args:\n        a (Union[int, float]): The coefficient of x^2.\n        b (Union[int, float]): The coefficient of x.\n\n    Returns:\n        Union[int, float]: The directrix of the parabola.\n    \"\"\"\n    return (b ** 2) / (4 * a)\n\n\nif __name__ == \"__main__\":\n    print(parabola_directrix(1, 2))\n    print(parabola_directrix(2, 1))",
    "from __future__ import annotations\n\nfrom math import isclose\n\n\ndef directrix(vertex: tuple[int | float, int | float], focus: tuple[int | float, int | float]) -> float:\n    \"\"\"\n    Calculate the directrix of a parabola.\n    >>> directrix((0, 0), (2, 0))\n    2.0\n    >>> directrix((1, 1), (2, 2))\n    2.24\n    >>> directrix((1, 1), (3, 3))\n    3.0\n    >>> directrix((1, 1), (3, 2))\n    3.0\n    >>> directrix((0, 0), (0, 0))\n    0.0\n    >>> directrix((-1, 1), (1, -1))\n    1.0\n    >>> directrix((0, 0), (1, 1))\n    -1.0\n    >>> directrix((-1, -1), (1, -1))\n    0.0\n    >>> directrix((0, 0), (0, 1))\n    1.0\n    >>> directrix((-1, 1), (1, 1))\n    0.0\n    >>> directrix((0, 0), (0, -1))\n    -1.0\n    >>> directrix((-1, -1), (1, 1))\n    0.0\n    \"\"\"\n    if isclose(vertex[0], focus[0]) and isclose(vertex[1], focus[1]):\n        return 0\n    elif vertex[0] == focus[0]:\n        return vertex[1]\n    elif vertex[1] == focus[1]:\n        return vertex[0]\n    return (focus[0] - vertex[0]) / (vertex[1] - focus[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(p, q, r):\n    \"\"\"\n    p, q, r are the coordinates of the focus and directrix of a parabola\n    \"\"\"\n    return q + (r - p) / 2\n\n\ndef main():\n    assert directrix(1, 0, 0) == 0\n    assert directrix(0, 0, 0) == 0\n    assert directrix(0, 0, 1) == 0.5\n    assert directrix(0, 0, 3) == 1.5\n    assert directrix(0, 1, 2) == 1\n    assert directrix(1, 1, 1) == 1\n\n\nif __name__ == '__main__':\n    main()",
    "def directrix(focus):\n    return focus * 2\n\nif __name__ == '__main__':\n    print(directrix(2))",
    "import math\nfrom typing import Union\n\nfrom sympy import Symbol\n\n\ndef directrix(focus: Union[list, tuple, set], vertex: Union[list, tuple, set]) -> Union[list, tuple, set]:\n    \"\"\"\n    Calculate the directrix of a parabola given focus and vertex.\n    The vertex is the point where the parabola touches the x-axis.\n    The focus is the point where the parabola is symmetric to the x-axis.\n\n    Args:\n        focus (Union[list, tuple, set]): the coordinates of the focus\n        vertex (Union[list, tuple, set]): the coordinates of the vertex\n\n    Returns:\n        Union[list, tuple, set]: the coordinates of the directrix\n    \"\"\"\n    x_v, y_v = vertex[0], vertex[1]\n    x_f, y_f = focus[0], focus[1]\n    return (x_v - x_f) / (y_v - y_f), x_v - (x_v - x_f) / (y_v - y_f)\n\n\ndef directrix_vertex(vertex: Union[list, tuple, set]) -> Union[list, tuple, set]:\n    \"\"\"\n    Calculate the directrix of a parabola given the vertex.\n    The vertex is the point where the parabola touches the x-axis.\n\n    Args:\n        vertex (Union[list, tuple, set]): the coordinates of the vertex\n\n    Returns:\n        Union[list, tuple, set]: the coordinates of the directrix\n    \"\"\"\n    x_v, y_v = vertex[0], vertex[1]\n    return (x_v ** 2 + y_v ** 2) / (2 * y_v), -x_v / (2 * y_v)\n\n\ndef directrix_focus(focus: Union[list, tuple, set]) -> Union[list, tuple, set]:\n    \"\"\"\n    Calculate the directrix of a parabola given the focus.\n    The focus is the point where the parabola is symmetric to the x-axis.\n\n    Args:\n        focus (Union[list, tuple, set",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n    ...\n    ValueError: Vertex must not be at focus\n    >>> directrix((0, 0), (0, 1))\n    -1\n    >>> directrix((0, 0), (0, 2))\n    1\n    >>> directrix((0, 0), (1, 2))\n    1\n    >>> directrix((0, 0), (-1, 2))\n    -1\n    \"\"\"\n    if vertex == focus:\n        raise ValueError(\"Vertex must not be at focus\")\n\n    x, y = focus\n    x_v, y_v = vertex\n\n    return -y / (y_v - y) if x_v > x else y / (y_v - y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from __future__ import annotations\n\nfrom math import sqrt\nfrom typing import Optional\n\n\ndef directrix(p1: list[float], p2: list[float], p3: list[float]) -> Optional[float]:\n    \"\"\"\n    Returns the directrix of the parabola formed by three points.\n    \"\"\"\n    a, b, c = get_coeffs(p1, p2, p3)\n\n    if a == 0:\n        return None\n\n    return -b / (2 * a)\n\n\ndef get_coeffs(p1: list[float], p2: list[float], p3: list[float]) -> tuple[float, float, float]:\n    \"\"\"\n    Returns the coefficients of the parabola formed by three points.\n    \"\"\"\n    d = (p1[1] - p2[1]) * (p1[0] - p3[0]) - (p1[0] - p2[0]) * (p1[1] - p3[1])\n    e = (p1[1] - p2[1]) * (p1[0]**2 - p2[0]**2 - p1[1]**2 + p2[1]**2 + p3[0]**2 - p3[1]**2) - (p1[0] - p2[0]) * (\n        p1[0] * (p1[1]**2 - p2[1]**2) - p2[0] * (p1[0]**2 - p2[0]**2 - p1[1]**2 + p2[1]**2)\n    )\n    f = (p1[0]**2 - p2[0]**2 - p1[1]**2 + p2[1]**2) * (p3[1] - p2[1]) - (p1[0] * (p1[1]**2 - p2[1]**2)) * (\n        p3[0] - p2[0]\n    ) + (p2[0] * (p1[0]**2 - p2[0]**2 - p1[1]**2",
    "def directrix(a, b, c):\n    \"\"\"\n    >>> directrix(2, 1, 1)\n    0\n    >>> directrix(1, 2, 1)\n    -1\n    \"\"\"\n    return -(b/2a)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def directrix(p1, p2, p3):\n    \"\"\"\n    Returns the directrix of a parabola.\n    \"\"\"\n    d = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])\n    if d > 0:\n        x = (p1[0] * p2[1] - p2[0] * p1[1]) / d\n        y = (p1[1] * (p2[0] ** 2 - p3[0] ** 2) + p2[1] * (p3[0] ** 2 - p1[0] ** 2) + p3[1] * (p1[0] ** 2 - p2[0] ** 2)) / (\n            p1[0] ** 2 - p2[0] ** 2\n        )\n        return (x, y)\n    elif d < 0:\n        x = (p1[0] * p2[1] - p2[0] * p1[1]) / d\n        y = (\n            p1[1] * (p2[0] ** 2 - p3[0] ** 2)\n            + p2[1] * (p3[0] ** 2 - p1[0] ** 2)\n            + p3[1] * (p1[0] ** 2 - p2[0] ** 2)\n        ) / (p1[0] ** 2 - p2[0] ** 2)\n        return (x, y)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    P1 = (3, 0)\n    P2 = (4, 1)\n    P3 = (1, 1)\n    print(directrix(P1, P2, P3))",
    "import math\nfrom typing import Union\n\n\ndef directrix(focus: Union[int, float], vertex: Union[int, float]) -> float:\n    \"\"\"Calculates the directrix of a parabola given the focus and the vertex.\n\n    Args:\n        focus (Union[int, float]): the focus of the parabola\n        vertex (Union[int, float]): the vertex of the parabola\n\n    Returns:\n        float: the directrix of the parabola\n    \"\"\"\n    return focus - vertex\n\n\ndef directrix_vertex(vertex: Union[int, float]) -> float:\n    \"\"\"Calculates the directrix of a parabola given only the vertex.\n\n    Args:\n        vertex (Union[int, float]): the vertex of the parabola\n\n    Returns:\n        float: the directrix of the parabola\n    \"\"\"\n    return vertex\n\n\ndef main():\n    print(directrix(3, 1))\n    print(directrix_vertex(1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\nimport unittest\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Directrix of a parabola is the point at which the tangent is orthogonal to the axis of symmetry.\n    \"\"\"\n    if a == 0:\n        return None\n    return (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\nclass TestDirectrix(unittest.TestCase):\n    def test_directrix(self):\n        self.assertEqual(directrix(2, 3, 1), 0)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "# This is the Parabola class of which the Directrix class is a subclass.\nclass Parabola:\n    def __init__(self, focus, directrix):\n        self.focus = focus\n        self.directrix = directrix\n\n    # This is the Directrix class.\n    class Directrix:\n        def __init__(self, focus, directrix):\n            self.focus = focus\n            self.directrix = directrix\n\n        def __repr__(self):\n            return f\"Focus: {self.focus}\\nDirectrix: {self.directrix}\"\n\n\n# This is the client code.\nif __name__ == \"__main__\":\n    focus = 1\n    directrix = 1\n    parabola = Parabola(focus, directrix)\n    print(parabola.Directrix(focus, directrix))",
    "# This is the Parabola class of which the Directrix class is a subclass.\nclass Parabola:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    # This is the Directrix class.\n    class Directrix:\n        def __init__(self, parabola):\n            self.parabola = parabola\n\n        def calculate(self):\n            return -self.parabola.c / self.parabola.a\n\n    # This is the DirectrixFinder class.\n    class DirectrixFinder:\n        def __init__(self, parabola):\n            self.parabola = parabola\n\n        def find(self):\n            return Parabola.Directrix(self.parabola)\n\n\n# These are the test cases the function should pass.\ntest1 = Parabola(1, 2, 1)\ntest2 = Parabola(-4, 0, 4)\ntest3 = Parabola(1, -2, 1)\n\nprint(test1.DirectrixFinder().find().calculate())\nprint(test2.DirectrixFinder().find().calculate())\nprint(test3.DirectrixFinder().find().calculate())",
    "def find_directrix(focus, vertex):\n    \"\"\"\n    :param focus: Focus of a parabola\n    :param vertex: Vertex of a parabola\n    :return: Directrix of a parabola\n    \"\"\"\n    return focus + (vertex - focus) * 2\n\nif __name__ == '__main__':\n    focus = [0, 0]\n    vertex = [5, 5]\n    print(find_directrix(focus, vertex))",
    "def directrix(focus: list[float], vertex: list[float]) -> list[float]:\n    \"\"\"\n    >>> directrix([0, 0], [1, 1])\n    [1, 0]\n    >>> directrix([2, 2], [-1, 0])\n    [-1, 0]\n    \"\"\"\n    return focus if focus[0] == vertex[0] else [vertex[0], vertex[1]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus, vertex):\n    # focus is a tuple of the x,y coordinates of the focus\n    # vertex is a tuple of the x,y coordinates of the vertex\n    # return is a tuple of the x,y coordinates of the directrix\n\n    # x and y coordinates of the directrix\n    x = vertex[0] + focus[0]\n    y = vertex[1] + focus[1]\n    return (x, y)\n\n\nif __name__ == '__main__':\n    focus = (1, 1)\n    vertex = (0, 0)\n    print(directrix(focus, vertex))",
    "from __future__ import annotations\n\nfrom math import inf, isclose\n\n\ndef directrix(focus: tuple[float, float], vertex: tuple[float, float]) -> list[float, float]:\n    \"\"\"\n    Returns the directrix of a parabola.\n\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex cannot be equal to the focus.\n    >>> directrix((1, 2), (1, 2))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex cannot be equal to the focus.\n    >>> directrix((3, 1), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex cannot be equal to the focus.\n    >>> directrix((0, 0), (1, 1))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus cannot be at the origin.\n    >>> directrix((1, 1), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus cannot be at the origin.\n    >>> directrix((1, 1), (0, 2))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex must be above the focus.\n    >>> directrix((1, 1), (2, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex must be above the focus.\n    >>> directrix((1, 1), (1, 1))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex must be above the focus.\n    >>> directrix((1, 1), (1, 3))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex must be above the focus.\n    >>> directrix((1, 1), (3, 1))\n    Traceback (most recent call last):\n        ...\n    ValueError: The vertex must be above the focus.\n    >>> directrix((1, 1), (3, 3))\n    Traceback (most recent call last):",
    "from math import sqrt\n\n\ndef directrix(vertex, focus):\n    x, y = vertex\n    fx, fy = focus\n    x1, y1 = x - fx, y - fy\n    a = x1 ** 2 + y1 ** 2\n    b = 2 * x1 * (x - fx)\n    c = x ** 2 - 2 * x * fx + fx ** 2 + y ** 2 - 2 * y * fy + fy ** 2\n    if a == 0:\n        return \"Parabola is not directed\"\n    return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    v = tuple(map(int, input(\"Enter vertex coordinates: \").split()))\n    f = tuple(map(int, input(\"Enter focus coordinates: \").split()))\n    print(directrix(v, f))",
    "def directrix(focus):\n    \"\"\"\n    :param focus: Tuple of (x,y)\n    :return: Tuple of (x,y)\n    \"\"\"\n    x = focus[0]\n    y = focus[1]\n    return (-y, x)",
    "from math import sqrt\nfrom functools import reduce\n\n\n# def find_directrix(p):\n#     a, b, c = p\n#     return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\n# def find_directrix(p):\n#     a, b, c = p\n#     return (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\ndef find_directrix(p):\n    a, b, c = p\n    return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\ndef find_directrix_2(p):\n    return (p[1] ** 2 - 4 * p[0] * p[2]) / (2 * p[1])\n\n\ndef find_directrix_3(p):\n    return reduce(lambda x, y: x / y, p)\n\n\nif __name__ == \"__main__\":\n    print(find_directrix((1, 2, 1)))\n    print(find_directrix((2, -1, 1)))\n    print(find_directrix((-1, -1, 1)))\n    print(find_directrix_2((1, 2, 1)))\n    print(find_directrix_2((2, -1, 1)))\n    print(find_directrix_2((-1, -1, 1)))\n    print(find_directrix_3((1, 2, 1)))\n    print(find_directrix_3((2, -1, 1)))\n    print(find_directrix_3((-1, -1, 1)))",
    "def directrix(a, b, c):\n    return a / 2\n\nif __name__ == '__main__':\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n\n    print(\"Directrix: \", directrix(a, b, c))",
    "from __future__ import annotations\n\nimport math\n\n\ndef directrix(focus: tuple[int, int], vertex: tuple[int, int]) -> tuple[int, int]:\n    \"\"\"Find the directrix of a parabola.\n\n    Args:\n        focus (tuple[int, int]): The focus of the parabola.\n        vertex (tuple[int, int]): The vertex of the parabola.\n\n    Returns:\n        tuple[int, int]: The directrix of the parabola.\n    \"\"\"\n    x_focus, y_focus = focus\n    x_vertex, y_vertex = vertex\n\n    if x_focus == x_vertex:\n        return (x_focus, y_vertex)\n\n    rise = y_vertex - y_focus\n    run = x_vertex - x_focus\n\n    return (x_focus, y_vertex - (run * math.sqrt(1 + (rise / run) ** 2)))\n\n\nif __name__ == \"__main__\":\n    focus = (1, 2)\n    vertex = (-1, 0)\n    print(directrix(focus, vertex))",
    "def find_directrix(vertex, focus):\n    \"\"\"\n    Find the directrix of a parabola given the vertex and focus.\n    \"\"\"\n    # Calculate the distance between the vertex and the focus.\n    distance = (focus[0] - vertex[0])**2 + (focus[1] - vertex[1])**2\n\n    # Calculate the directrix.\n    directrix = (vertex[1] + focus[1]) / 2\n\n    return directrix",
    "import math\n\n\ndef directrix(vertex_x, vertex_y, focus_x, focus_y):\n    \"\"\"\n    Calculates the directrix of a parabola, given the vertex and focus points.\n    The vertex is the point from which the parabola opens.\n    The focus is the point from which the parabola is directed.\n    \"\"\"\n    # Calculate the slope of the line from the vertex to the focus\n    slope = (focus_y - vertex_y) / (focus_x - vertex_x)\n\n    # Calculate the distance between the vertex and the focus\n    distance = math.sqrt((focus_x - vertex_x) ** 2 + (focus_y - vertex_y) ** 2)\n\n    # Calculate the directrix\n    directrix_x = (slope * distance) + vertex_x\n    directrix_y = -1 * vertex_y\n\n    return directrix_x, directrix_y\n\n\ndef test_directrix():\n    \"\"\"\n    >>> directrix(0, 0, 10, 10)\n    (10.0, 0.0)\n    >>> directrix(10, 10, 20, 20)\n    (20.0, 0.0)\n    >>> directrix(10, 10, 10, 10)\n    (10.0, 0.0)\n    >>> directrix(10, 10, 15, 15)\n    (15.0, 0.0)\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from __future__ import annotations\n\nimport math\n\n\ndef directrix(focus: tuple[int | float, int | float], vertex: tuple[int | float, int | float]) -> tuple[int | float, int | float]:\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus and the vertex of a parabola cannot be the same.\n    >>> directrix((0, 0), (0, 3))\n    (0, 3)\n    >>> directrix((0, 0), (0, -3))\n    (0, -3)\n    >>> directrix((0, 0), (1, 0))\n    (1, 0)\n    >>> directrix((0, 0), (3, 0))\n    (3, 0)\n    >>> directrix((0, 0), (3, 3))\n    (3, 3)\n    >>> directrix((0, 0), (3, -3))\n    (3, -3)\n    >>> directrix((0, 0), (-3, 0))\n    (-3, 0)\n    >>> directrix((0, 0), (-3, 3))\n    (-3, 3)\n    >>> directrix((0, 0), (-3, -3))\n    (-3, -3)\n    >>> directrix((0, 0), (3, 3))\n    (3, 3)\n    >>> directrix((0, 0), (3, -3))\n    (3, -3)\n    >>> directrix((0, 0), (-3, 0))\n    (-3, 0)\n    >>> directrix((0, 0), (-3, 3))\n    (-3, 3)\n    >>> directrix((0, 0), (-3, -3))\n    (-3, -3)\n    >>> directrix((0, 0), (1, 1))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus and the vertex of a parab",
    "def directrix(focus, vertex):\n    return vertex[1] - focus[1]\n\n\ndef main():\n    focus = eval(input('Enter focus point: '))\n    vertex = eval(input('Enter vertex point: '))\n    print('The directrix of the parabola is', directrix(focus, vertex))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef find_directrix(vertex, focus):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n    # Get the coordinates of the vertex.\n    x_vert, y_vert = vertex\n\n    # Get the coordinates of the focus.\n    x_f, y_f = focus\n\n    # Find the slope between the vertex and the focus.\n    slope = (y_f - y_vert) / (x_f - x_vert)\n\n    # Find the x-coordinate of the directrix.\n    x_directrix = -y_vert / slope\n\n    # Find the y-coordinate of the directrix.\n    y_directrix = x_directrix * slope\n\n    # Return the coordinates of the directrix.\n    return x_directrix, y_directrix\n\n\ndef main():\n    # Get the coordinates of the vertex.\n    x_vert = float(input('Enter the x-coordinate of the vertex: '))\n    y_vert = float(input('Enter the y-coordinate of the vertex: '))\n\n    # Get the coordinates of the focus.\n    x_f = float(input('Enter the x-coordinate of the focus: '))\n    y_f = float(input('Enter the y-coordinate of the focus: '))\n\n    # Find the coordinates of the directrix.\n    x_directrix, y_directrix = find_directrix((x_vert, y_vert), (x_f, y_f))\n\n    # Print the coordinates of the directrix.\n    print('The coordinates of the directrix are:')\n    print(f'({x_directrix}, {y_directrix})')\n\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef find_directrix(p1, p2, p3):\n    \"\"\"\n    :param p1: (x1, y1)\n    :param p2: (x2, y2)\n    :param p3: (x3, y3)\n    :return: x/y\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    return (y1 - y2) / (x1 - x2)\n\n\nif __name__ == \"__main__\":\n    p1 = (1, 2)\n    p2 = (2, 3)\n    p3 = (3, 4)\n    print(find_directrix(p1, p2, p3))",
    "import math\n\n\ndef directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    >>> directrix((0, 0), (1, 1))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    >>> directrix((0, 0), (0, 1))\n    0\n    >>> directrix((0, 0), (1, 0))\n    0\n    >>> directrix((0, 0), (1, 2))\n    1\n    >>> directrix((0, 0), (2, 1))\n    1\n    >>> directrix((0, 0), (2, 3))\n    2\n    \"\"\"\n    x_f, y_f = focus\n    x_v, y_v = vertex\n    if x_f == x_v and y_f == y_v:\n        raise ZeroDivisionError(\"float division by zero\")\n    elif x_f == x_v and y_f != y_v:\n        return y_f - math.sqrt(y_f ** 2 - y_v ** 2)\n    elif x_f != x_v and y_f == y_v:\n        return x_f - math.sqrt(x_f ** 2 - x_v ** 2)\n    elif x_f != x_v and y_f != y_v:\n        return max(abs(x_f - x_v), abs(y_f - y_v))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n    ...\n    ValueError: Focus must not be equal to vertex.\n    >>> directrix((0, 0), (0, 1))\n    -1\n    >>> directrix((0, 0), (1, 1))\n    0.5\n    \"\"\"\n    if focus == vertex:\n        raise ValueError(\"Focus must not be equal to vertex.\")\n    if focus[1] == 0:\n        return -(focus[0] + vertex[0]) / 2\n    return -vertex[1] / (focus[1] - vertex[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef directrix(focus: tuple[float, float]) -> Optional[tuple[float, float]]:\n    \"\"\"Find the directrix of a parabola given the focus.\n\n    >>> directrix((0, 0))\n    (0, -0.0)\n    >>> directrix((0, 1))\n    (0, 1.0)\n    >>> directrix((0, -1))\n    (0, -1.0)\n    >>> directrix((1, 0))\n    (-1.0, 0.0)\n    >>> directrix((-1, 0))\n    (1.0, 0.0)\n    >>> directrix((-1, -1))\n    (-1.0, -1.0)\n    >>> directrix((-1, 1))\n    (-1.0, 1.0)\n    >>> directrix((-2, 1))\n    (-3.0, 1.0)\n    \"\"\"\n    if focus[1] == 0:\n        return (0, 0)\n    else:\n        return (focus[1] * -1, focus[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    focus = tuple(map(float, input(\"Focus: \").strip().split(\",\")))\n    print(directrix(focus))",
    "import math\n\n\ndef directrix(focus, vertex):\n    \"\"\"\n    Find the directrix of a parabola.\n    :param focus: focus of a parabola.\n    :param vertex: vertex of a parabola.\n    :return: the directrix of a parabola.\n    \"\"\"\n    d = (focus[1] - vertex[1]) / (vertex[0] - focus[0])\n    return d\n\n\ndef main():\n    focus = [2, 2]\n    vertex = [1, 4]\n    print(directrix(focus, vertex))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_directrix(focus_x, focus_y, vertex_x, vertex_y):\n    # type: (float, float, float, float) -> float\n    \"\"\"\n    Calculate the directrix of a parabola.\n    :param focus_x: x-coordinate of the parabola's focus.\n    :param focus_y: y-coordinate of the parabola's focus.\n    :param vertex_x: x-coordinate of the parabola's vertex.\n    :param vertex_y: y-coordinate of the parabola's vertex.\n    :return: the x-coordinate of the directrix.\n    \"\"\"\n    return vertex_x - focus_x",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (2, 4))\n    1\n    \"\"\"\n    return abs(focus[1] - vertex[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus, vertex):\n    return vertex[1] - focus[1]\n\n\nfocus = [2, 0]\nvertex = [0, 0]\nprint(directrix(focus, vertex))",
    "def directrix(p1, p2, p3):\n    \"\"\"\n    >>> directrix((0,0), (0,5), (5,5))\n    2.5\n    >>> directrix((0,0), (0,3), (3,3))\n    1.7320508075688772\n    >>> directrix((0,0), (0,-3), (3,-3))\n    -1.7320508075688772\n    \"\"\"\n    a = p1[1] - 2 * p2[1] + p3[1]\n    b = p2[0] - 2 * p2[0] + p3[0]\n    c = p2[1] - p1[1]\n    d = p2[0] - p1[0]\n    return (a * d - b * c) / (a * a - 4 * b * c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_directrix(focus: float, eccentricity: float) -> float:\n    \"\"\"Returns the directrix of a parabola with a given focus and eccentricity.\n\n    >>> focus_directrix(0, 0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Focus must be greater than zero\n    >>> focus_directrix(-1, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Focus must be greater than zero\n    >>> focus_directrix(1, -1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Eccentricity must be greater than zero\n    >>> focus_directrix(1, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Eccentricity must be less than one\n    >>> focus_directrix(1, 0.5)\n    1.0\n    >>> focus_directrix(1, 0.75)\n    1.5\n    >>> focus_directrix(1, 0.25)\n    -1.0\n    >>> focus_directrix(1, 1.0)\n    2.0\n    >>> focus_directrix(1, 1.25)\n    2.25\n    >>> focus_directrix(1, 0.5)\n    1.0\n    \"\"\"\n    if focus <= 0:\n        raise ValueError(\"Focus must be greater than zero\")\n    if eccentricity <= 0:\n        raise ValueError(\"Eccentricity must be greater than zero\")\n    if eccentricity >= 1:\n        raise ValueError(\"Eccentricity must be less than one\")\n\n    return focus * (1 + eccentricity) / (1 - eccentricity)\n\n\ndef focus_directrix_eccentricity(\n    focus: float, directrix: float\n) -> Optional[float]:\n    \"\"\"Returns the eccentricity of a parabola with a given focus and directrix.\n\n    >>> focus_directrix_eccent",
    "import math\nfrom typing import Optional\n\n\ndef directrix(p: float, q: float, y: float) -> Optional[float]:\n    \"\"\"Find the directrix of a parabola.\n\n    :param p: vertex x-coordinate\n    :param q: vertex y-coordinate\n    :param y: y-coordinate of the directrix\n    :return: x-coordinate of the directrix\n    \"\"\"\n    if p == 0:\n        return None\n\n    return (q - y) / math.sqrt(p ** 2 + (y - q) ** 2)\n\n\nif __name__ == \"__main__\":\n    print(directrix(p=0, q=1, y=1))\n    print(directrix(p=0, q=1, y=0))\n    print(directrix(p=0, q=1, y=2))",
    "from __future__ import annotations\n\n\ndef directrix(\n    focus_1: tuple[float, float],\n    focus_2: tuple[float, float],\n    vertex: tuple[float, float] | None = None,\n) -> tuple[float, float]:\n    \"\"\"Find the directrix of a parabola.\n\n    If vertex is not specified, focus_1 will be used as the vertex.\n\n    >>> directrix((0, 0), (0, 4))\n    (4, 4)\n    >>> directrix((2, 2), (2, 6))\n    (6, 6)\n    >>> directrix((1, 1), (1, 1), (0, 0))\n    (1, 1)\n    >>> directrix((1, 1), (1, 1), (0, 1))\n    (1, 1)\n    >>> directrix((1, 1), (1, 1), (1, 0))\n    (1, 1)\n    >>> directrix((1, 1), (1, 1), (2, 2))\n    (1, 1)\n    \"\"\"\n    if vertex is None:\n        vertex = focus_1\n\n    if vertex[1] < focus_1[1]:\n        return (vertex[0], focus_1[1])\n\n    return (vertex[0], focus_2[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    focus_1 = tuple(map(float, input(\"Enter the coordinates of the first focus: \").split()))\n    focus_2 = tuple(map(float, input(\"Enter the coordinates of the second focus: \").split()))\n    vertex = tuple(map(float, input(\"Enter the coordinates of the vertex: \").split()))\n    print(directrix(focus_1, focus_2, vertex))",
    "# A parabola has the formula:\n# y = a(x - h)^2 + k\n# where a is the scale factor, h is the horizontal shift, and k is the vertical shift.\n\ndef directrix(a, h, k):\n    # Given a parabola of the form:\n    # y = a(x - h)^2 + k\n    # Directrix = y - k / a\n    return (k - h) / a\n\n\nif __name__ == '__main__':\n    print(directrix(1, 1, 1))",
    "def find_directrix(focus_point, vertex_point):\n    \"\"\"\n    Calculate the directrix of a parabola given its vertex and focus.\n\n    Args:\n        focus_point (list): The coordinates of the parabola's focus.\n        vertex_point (list): The coordinates of the parabola's vertex.\n\n    Returns:\n        list: The coordinates of the directrix.\n    \"\"\"\n    directrix_slope = -(focus_point[1] - vertex_point[1]) / (focus_point[0] - vertex_point[0])\n    directrix_y = directrix_slope * focus_point[0] + vertex_point[1]\n    return [directrix_slope, directrix_y]",
    "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef directrix(focus: tuple[float, float] | list[float]) -> float:\n    \"\"\"\n    >>> directrix((0, 0))\n    inf\n    >>> directrix([0, 0])\n    inf\n    >>> directrix((5, 0))\n    5.0\n    >>> directrix((0, 6))\n    6.0\n    \"\"\"\n    x, y = focus\n\n    return sqrt(x ** 2 + y ** 2) if x or y else float(\"inf\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Do not edit the signature of this function.\ndef find_directrix(focus, vertex):\n    \"\"\"\n    Returns the directrix of a parabola given its focus and vertex.\n\n    Parameters:\n        focus: tuple of ints\n            The x and y coordinates of the parabola's focus.\n        vertex: tuple of ints\n            The x and y coordinates of the parabola's vertex.\n\n    Returns:\n        tuple of ints\n            The x and y coordinates of the parabola's directrix.\n    \"\"\"\n    return (focus[0], vertex[1])",
    "from sympy import Symbol, solve\nfrom utils import (\n    Solution,\n)\n\n\ndef get_directrix(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Returns the directrix of the parabola.\n    \"\"\"\n    x = Symbol(\"x\")\n    return solve(a * x ** 2 + b * x + c, x)\n\n\ndef main() -> None:\n    \"\"\"\n    Run the main code.\n    \"\"\"\n    test_ans = get_directrix(1, 2, 1)\n    test_ans2 = get_directrix(2, 1, 1)\n    test_ans3 = get_directrix(1, 1, 1)\n    test_ans4 = get_directrix(1, 1, 0)\n\n    tests = [\n        Solution(args=(1, 2, 1), expected=0),\n        Solution(args=(2, 1, 1), expected=0),\n        Solution(args=(1, 1, 1), expected=1),\n        Solution(args=(1, 1, 0), expected=-1),\n    ]\n\n    for test in tests:\n        assert test.expected == test_ans\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef directrix(focus, vertex):\n    # Find the distance between the vertex and the focus\n    distance = sqrt(pow(focus[0] - vertex[0], 2) + pow(focus[1] - vertex[1], 2))\n    # Find the distance between the directrix and the focus\n    directrix_distance = sqrt(pow(distance, 2) + pow(focus[1] - vertex[1], 2))\n    # Return the coordinates of the directrix\n    return vertex[0], vertex[1] + directrix_distance\n\n\ndef main():\n    focus = eval(input(\"Enter the focus of the parabola (x, y): \"))\n    vertex = eval(input(\"Enter the vertex of the parabola (x, y): \"))\n    print(\"The directrix is:\", directrix(focus, vertex))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef focus_to_directrix(focus: tuple[float, float]) -> float:\n    \"\"\"\n    Calculate the directrix of a parabola given the focus.\n    >>> focus_to_directrix((0, 0))\n    -1.0\n    >>> focus_to_directrix((-1, 2))\n    0.0\n    >>> focus_to_directrix((-1, 0))\n    1.0\n    \"\"\"\n    return -sqrt(focus[1] ** 2 - focus[0] ** 2)\n\n\ndef focus_to_directrix_l(focus: list[float]) -> float:\n    \"\"\"\n    Calculate the directrix of a parabola given the focus.\n    >>> focus_to_directrix_l([0, 0])\n    -1.0\n    >>> focus_to_directrix_l([-1, 2])\n    0.0\n    >>> focus_to_directrix_l([-1, 0])\n    1.0\n    \"\"\"\n    return -sqrt(focus[1] ** 2 - focus[0] ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola\n\n    :param a: coefficient of x^2\n    :param b: coefficient of x\n    :param c: coefficient of x\n    :return: directrix of a parabola\n    \"\"\"\n    if a == 0:\n        raise ZeroDivisionError(\"a cannot be zero\")\n    else:\n        return (-b + (b ** 2 - 4 * a * c) ** (1 / 2)) / (2 * a)",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: Focus and vertex cannot be both at origin\n    >>> directrix((1, 1), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: Vertex must be above focus\n    >>> directrix((1, 1), (2, 0))\n    1.0\n    >>> directrix((1, 1), (2, 2))\n    1.4142135623730951\n    \"\"\"\n    if focus == vertex:\n        raise ValueError(\"Focus and vertex cannot be both at origin\")\n    if vertex[1] < focus[1]:\n        raise ValueError(\"Vertex must be above focus\")\n    return (focus[1] - vertex[1]) / (vertex[0] - focus[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef directrix(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"\n    Calculate the directrix of a parabola.\n    >>> directrix(1, 2, 1)\n    (-1.0, 1.0)\n    >>> directrix(1, 2, -1)\n    (1.0, -1.0)\n    >>> directrix(1, -2, 1)\n    (-1.0, -1.0)\n    >>> directrix(1, -2, -1)\n    (1.0, 1.0)\n    >>> directrix(-1, 2, 1)\n    (-1.0, 1.0)\n    >>> directrix(-1, 2, -1)\n    (-1.0, -1.0)\n    >>> directrix(-1, -2, 1)\n    (1.0, 1.0)\n    >>> directrix(-1, -2, -1)\n    (1.0, -1.0)\n    >>> directrix(0, 2, 1)\n    (-1.0, 1.0)\n    >>> directrix(0, 2, -1)\n    (1.0, -1.0)\n    >>> directrix(0, -2, 1)\n    (-1.0, -1.0)\n    >>> directrix(0, -2, -1)\n    (1.0, 1.0)\n    >>> directrix(2, 2, 1)\n    (-2.0, 0.0)\n    >>> directrix(2, 2, -1)\n    (2.0, 0.0)\n    >>> directrix(2, -2, 1)\n    (-2.0, 0.0)\n    >>> directrix(2, -2, -1)\n    (2.0, 0.0)\n    \"\"\"\n    # Directrix is defined as x^2 + (y-b)^2 = a^2\n    # We can solve for x^2 by substituting",
    "import math\nfrom typing import List\n\n\ndef find_directrix(focus: List[int], vertex: List[int]) -> List[int]:\n    \"\"\"\n    >>> find_directrix([0, 0], [5, 0])\n    [0, 0]\n    \"\"\"\n    focus_x, focus_y = focus\n    vertex_x, vertex_y = vertex\n\n    # x2 - x1 = focus_x - vertex_x\n    # y2 - y1 = focus_y - vertex_y\n    # x2 - x1 = focus_x - vertex_x\n    # y2 - y1 = focus_y - vertex_y\n    # x2^2 - x1^2 = focus_x^2 - vertex_x^2\n    # y2^2 - y1^2 = focus_y^2 - vertex_y^2\n    # x2^2 - y2^2 = focus_x^2 - vertex_x^2\n    # x2^2 - y2^2 = (focus_x + vertex_x)^2 - 2(focus_x * vertex_x)\n    # x2^2 - y2^2 = focus_x^2 + vertex_x^2 - 2focus_x vertex_x\n    # x2^2 - y2^2 = focus_x^2 - 2focus_x vertex_x + vertex_x^2\n    # (x2 - y2)^2 = focus_x^2 - 2focus_x vertex_x + vertex_x^2\n    # (x2 + y2)^2 = 2focus_x vertex_x + focus_x^2 + vertex_x^2\n    # (x2 + y2)^2 = 2focus_x vertex_x + (focus_x + vertex_x)^2\n    # (x2 + y2)^2 = 2focus_x vertex_x + (focus_x + vertex_x)^2 + vertex_y^2 - 2focus_y vertex_y\n    # (x2 + y2)^2 = 2focus_x vertex_x + (focus_x + vertex_x + vertex_y)^2 - 2focus_y vertex_y",
    "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    :param a: The coefficient of x^2\n    :param b: The coefficient of x\n    :param c: The coefficient of constant\n    :return: The directrix of a parabola\n    \"\"\"\n    return (-b + math.sqrt(b**2 - 4 * a * c)) / 2 / a\n\ndef main():\n    a = int(input(\"Enter the coefficient of x^2: \"))\n    b = int(input(\"Enter the coefficient of x: \"))\n    c = int(input(\"Enter the coefficient of constant: \"))\n    print(\"The directrix of the parabola is\", parabola_directrix(a, b, c))\n\nif __name__ == '__main__':\n    main()",
    "def parabola_directrix(a, b, c):\n    \"\"\"\n    >>> parabola_directrix(1, 2, 3)\n    0.4000000000000002\n    >>> parabola_directrix(2, 1, 3)\n    0.6000000000000001\n    >>> parabola_directrix(1, 3, 2)\n    0.3999999999999999\n    \"\"\"\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_directrix(focus, vertex):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    :param focus: the focus of the parabola.\n    :param vertex: the vertex of the parabola.\n    :return: the directrix of the parabola.\n    \"\"\"\n    focus_x, focus_y = focus\n    vertex_x, vertex_y = vertex\n    return (focus_x - vertex_x) / (focus_y - vertex_y)\n\n\ndef main():\n    print(find_directrix((0, 0), (2, 3)))\n    print(find_directrix((0, 0), (4, 10)))\n    print(find_directrix((0, 0), (10, 4)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\n\ndef directrix(focus):\n    \"\"\"\n    >>> directrix((0, 0))\n    'Focus cannot be at the origin.'\n    >>> directrix((1, 1))\n    'The directrix cannot be at the focus.'\n    >>> directrix((-1, 1))\n    'The directrix cannot be at the focus.'\n    >>> directrix((3, 4))\n    'The directrix cannot be at the focus.'\n    >>> directrix((2, 4))\n    (3.0, 5.0)\n    \"\"\"\n    if focus == (0, 0):\n        return \"Focus cannot be at the origin.\"\n    if focus[0] == focus[1]:\n        return \"The directrix cannot be at the focus.\"\n    return (2 * focus[0], 2 * focus[1] - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef directrix(\n    focus: tuple[float, float],\n    vertex: Optional[tuple[float, float]] = None,\n) -> tuple[float, float]:\n    \"\"\"Finds the directrix of a parabola given a focus and a vertex.\n\n    Parameters\n    ----------\n    focus: tuple[float, float]\n        The focus of the parabola.\n\n    vertex: tuple[float, float]\n        The vertex of the parabola.\n\n    Returns\n    -------\n    tuple[float, float]\n        The directrix of the parabola.\n\n    Raises\n    ------\n    ValueError\n        If the focus and vertex are colinear.\n\n    Examples\n    --------\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus and vertex must not be colinear.\n    >>> directrix((0, 0), (0, 2))\n    (2, 0)\n    >>> directrix((0, 0), (1, 1))\n    (1, 1)\n    \"\"\"\n    if vertex is None:\n        vertex = focus\n\n    if vertex == focus:\n        raise ValueError(\"The focus and vertex must not be colinear.\")\n\n    focus_x, focus_y = focus\n    vertex_x, vertex_y = vertex\n\n    if vertex_x == focus_x:\n        return vertex_x, math.inf * math.copysign(1, vertex_y - focus_y)\n\n    if vertex_y == focus_y:\n        return math.inf * math.copysign(1, vertex_x - focus_x), vertex_y\n\n    gradient = (focus_y - vertex_y) / (focus_x - vertex_x)\n    y_intercept = vertex_y - gradient * vertex_x\n    x_intercept = (focus_x + vertex_x) / 2\n    return x_intercept, -y_intercept / gradient\n\n\nif __name__ == \"__main__\":",
    "import math\n\n\ndef focus_to_directrix(focus):\n    return focus - math.sqrt(focus ** 2 - 4 * focus)\n\n\ndef directrix_to_focus(directrix):\n    return directrix + math.sqrt(directrix ** 2 - 4 * directrix)\n\n\ndef focus_and_directrix(focus, directrix):\n    return focus - directrix\n\n\ndef main():\n    print(\"Focus to directrix: \" + str(focus_to_directrix(1)))\n    print(\"Directrix to focus: \" + str(directrix_to_focus(1)))\n    print(\"Focus and directrix: \" + str(focus_and_directrix(1, 1)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\nfrom typing import Tuple\n\n\ndef directrix(focus: Tuple[int, int], vertex: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"Find the directrix of a parabola.\n\n    :param focus: Focus of the parabola.\n    :param vertex: Vertex of the parabola.\n    :return: Directrix of the parabola.\n    \"\"\"\n    focus_x, focus_y = focus\n    vertex_x, vertex_y = vertex\n    return (\n        focus_x + (focus_x - vertex_x) / 2,\n        focus_y + (focus_y - vertex_y) / 2,\n    )\n\n\ndef main():\n    focus = int(input(\"Enter the focus of the parabola: \")), int(\n        input(\"Enter the focus of the parabola: \")\n    )\n    vertex = int(input(\"Enter the vertex of the parabola: \")), int(\n        input(\"Enter the vertex of the parabola: \")\n    )\n    print(\n        f\"The directrix of the parabola is at ({directrix(focus, vertex)[0]}, {directrix(focus, vertex)[1]})\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (2, 1))\n    (-2.0, 1.0)\n    >>> directrix((0, 0), (2, -1))\n    (-2.0, -1.0)\n    \"\"\"\n    return focus[0], 2 * focus[1] - vertex[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    >>> directrix((0, 0), (0, 1))\n    -1\n    >>> directrix((0, 0), (1, 1))\n    0.5\n    \"\"\"\n    if focus[0] == vertex[0] and focus[1] == vertex[1]:\n        raise ZeroDivisionError(\"float division by zero\")\n    else:\n        return (focus[1] - vertex[1]) / (focus[0] - vertex[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus: tuple[int, int], vertex: tuple[int, int]) -> float:\n    \"\"\"Find the directrix of a parabola.\n\n    Args:\n        focus (tuple[int, int]): the focus of the parabola.\n        vertex (tuple[int, int]): the vertex of the parabola.\n\n    Returns:\n        float: the directrix of the parabola.\n    \"\"\"\n\n    if focus[1] == vertex[1]:\n        return focus[0]\n\n    return focus[1]\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    focus = tuple(map(int, input().strip().split()))\n    vertex = tuple(map(int, input().strip().split()))\n    print(directrix(focus, vertex))",
    "import math\nfrom typing import Tuple\n\n\ndef focus_distance_from_directrix(directrix: float) -> float:\n    \"\"\"\n    Find the focus distance from the directrix.\n    \"\"\"\n    return -(1 / 3) * directrix\n\n\ndef focus_distance_from_vertex(vertex: Tuple[float, float]) -> float:\n    \"\"\"\n    Find the focus distance from the vertex.\n    \"\"\"\n    x_vertex, y_vertex = vertex\n    return math.sqrt(x_vertex**2 + y_vertex**2)\n\n\ndef focus_distance(vertex: Tuple[float, float], directrix: float) -> float:\n    \"\"\"\n    Find the focus distance from the vertex and directrix.\n    \"\"\"\n    return focus_distance_from_vertex(vertex) - focus_distance_from_directrix(directrix)\n\n\ndef directrix_from_vertex_focus_distance(vertex: Tuple[float, float], focus_distance: float) -> float:\n    \"\"\"\n    Find the directrix from the vertex and focus distance.\n    \"\"\"\n    return (focus_distance + focus_distance_from_vertex(vertex)) / 2\n\n\ndef directrix_from_focus_focus_distance(focus_a: Tuple[float, float], focus_b: Tuple[float, float], focus_distance: float) -> float:\n    \"\"\"\n    Find the directrix from the focus and focus distance.\n    \"\"\"\n    return (focus_distance + focus_distance_from_vertex(focus_a) + focus_distance_from_vertex(focus_b)) / 3",
    "import math\n\n\ndef directrix(focus, vertex):\n    return (focus - vertex) / 2\n\n\nif __name__ == '__main__':\n    focus = float(input(\"Enter the focus: \"))\n    vertex = float(input(\"Enter the vertex: \"))\n    print(\"The directrix is:\", directrix(focus, vertex))",
    "import math\n\ndef find_directrix(p, a, b, c):\n    \"\"\"\n    :param p: the focus of the parabola\n    :param a: coefficient of x^2\n    :param b: coefficient of y\n    :param c: coefficient of x\n    :return: the directrix of the parabola\n    \"\"\"\n    # calculate the x and y coordinates of the directrix\n    x_dir = (p[1] * b - p[0] * c) / (a - b ** 2)\n    y_dir = p[1] - y_dir\n\n    return x_dir, y_dir\n\n\ndef main():\n    # p is the focus of the parabola\n    p = (1, 1)\n\n    # a is the coefficient of x^2\n    a = 1\n\n    # b is the coefficient of y\n    b = 1\n\n    # c is the coefficient of x\n    c = 0\n\n    x_dir, y_dir = find_directrix(p, a, b, c)\n\n    print(f'The directrix of the parabola is ({x_dir}, {y_dir})')\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (1, 1))\n    0\n    >>> directrix((0, 0), (1, 2))\n    1\n    >>> directrix((0, 0), (1, -1))\n    1\n    \"\"\"\n    if vertex[0] == focus[0]:\n        return vertex[1]\n    return (focus[1] - vertex[1]) / (focus[0] - vertex[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def parabola_directrix(focus, vertex):\n    \"\"\"\n    Takes in a focus and vertex of a parabola and returns the directrix.\n\n    Parameters\n    ----------\n    focus : list\n        A list of two values for the focus.\n    vertex : list\n        A list of two values for the vertex.\n\n    Returns\n    -------\n    float\n        The directrix.\n\n    Examples\n    --------\n    >>> parabola_directrix([0, 0], [1, 1])\n    1.0\n    \"\"\"\n    return focus[1] - vertex[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef directrix(focus, vertex):\n    \"\"\"\n    Returns the directrix of a parabola.\n    >>> directrix((0, 0), (0, 0))\n    Traceback (most recent call last):\n        ...\n    ValueError: The focus and vertex of a parabola cannot be at the same point\n    >>> directrix((0, 0), (1, 1))\n    1.0\n    >>> directrix((1, 2), (0, 0))\n    2.0\n    \"\"\"\n    if focus[0] == vertex[0] and focus[1] == vertex[1]:\n        raise ValueError(\n            \"The focus and vertex of a parabola cannot be at the same point\"\n        )\n    if focus[0] == vertex[0]:\n        return focus[1]\n    return focus[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(directrix((0, 0), (1, 1)))",
    "def directrix(focus, vertex):\n    \"\"\"\n    >>> directrix((0, 0), (0, 0))\n    0\n    >>> directrix((0, 0), (0, 5))\n    5\n    >>> directrix((0, 0), (3, 4))\n    4\n    \"\"\"\n    return focus[1] - vertex[1]",
    "import math\n\ndef find_directrix(vertex, focus):\n    \"\"\"\n    Find the directrix of a parabola given its vertex and focus.\n    \"\"\"\n    x, y = vertex\n    x_f, y_f = focus\n    a = -1/2*(x-x_f)/(y-y_f)\n    return y-a*x\n\nprint(find_directrix((0, 0), (1, 1)))\nprint(find_directrix((0, 0), (1, 3)))\nprint(find_directrix((0, 0), (1, 5)))\nprint(find_directrix((0, 0), (2, 1)))\nprint(find_directrix((0, 0), (3, 1)))\nprint(find_directrix((0, 0), (5, 1)))",
    "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef directrix(focus: tuple[float, float]) -> tuple[float, float]:\n    \"\"\"\n    Returns the directrix of the parabola\n    having focus at the given point.\n    \"\"\"\n    return focus[0], -focus[1]\n\n\nif __name__ == \"__main__\":\n    focus = tuple(\n        map(float, input(\"Enter the coordinates of the focus of the parabola: \").split())\n    )\n    print(f\"The directrix of the parabola is {directrix(focus)}\")",
    "# IMPORTS\nfrom sympy import Symbol, solve\nfrom sympy.abc import x\n\n\n# FUNCTIONS\ndef directrix(focus, vertex):\n    \"\"\"\n    Finds the directrix of a parabola given the focus and vertex.\n    \"\"\"\n    return solve(focus - vertex - x**2)\n\n\n# TESTS\ndef test_directrix():\n    \"\"\"\n    Tests the directrix function.\n    \"\"\"\n    assert directrix((3, 1), (0, 0)) == [-3, 0]",
    "# This is the function that you have to write. The tests are in main().\ndef directrix(parabola):\n    # Replace the following line with your code\n    return None\n\ndef main():\n    print(\"Parabola\", \"Directrix\")\n    print(\"------\", \"--------\")\n    print(directrix((0, 0, 0)))\n    print(directrix((1, 0, 0)))\n    print(directrix((0, 1, 0)))\n    print(directrix((1, 1, 1)))\n    print(directrix((1, -1, 0)))\n    print(directrix((1, 0, -1)))\n    print(directrix((2, 0, -1)))\n\nmain()",
    "import math\n\ndef directrix(a, b, c):\n    \"\"\"\n    a, b, c: integers or float\n    Returns the directrix of the parabola defined by the coefficients a, b, c.\n    \"\"\"\n    direct = - (2 * a) / (b ** 2)\n    return direct\n\n\nprint(directrix(2, 4, 1))\nprint(directrix(1, 3, 1))\nprint(directrix(1, 2, 0))",
    "import math\n\n\n# Formula:\n#\n# D = -b / (2a)\n#\n# Where:\n#\n# D is the directrix\n# a is the coefficient of x\n# b is the coefficient of y\n#\n# Examples:\n#\n# y = 4x\n# D = -4 / (2 * 1) = 2\n#\n# y = x\n# D = 0 / (2 * 0) = 0\n#\n# y = 16 - 8x\n# D = -16 / (2 * -8) = 2\n\ndef directrix(a, b):\n    if a == 0:\n        return 0\n    return -b / (2 * a)\n\n\ndef main():\n    a = float(input(\"Enter the coefficient of x: \"))\n    b = float(input(\"Enter the coefficient of y: \"))\n    print(\"The directrix is:\", directrix(a, b))\n\n\nif __name__ == '__main__':\n    main()",
    "def directrix(p, a):\n    \"\"\"\n    p: the focus of the parabola\n    a: the vertex of the parabola\n    \"\"\"\n    return (a - p) / 2\n\n\ndef test_directrix():\n    \"\"\"\n    >>> directrix((2, 2), (1, 1))\n    1.0\n    >>> directrix((2, 2), (1, 3))\n    1.5\n    >>> directrix((2, 2), (1, 5))\n    2.0\n    >>> directrix((2, 2), (1, 7))\n    2.5\n    >>> directrix((2, 2), (1, 9))\n    3.0\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\ndef focus_directrix(a, b, c):\n    return (a / b) * (sqrt(4 * a * c - b**2) / 2 - b)\n\n# TESTS\nassert focus_directrix(1, 1, 1) == 1\nassert focus_directrix(1, 2, 1) == 1\nassert focus_directrix(1, 1, 2) == 1\nassert focus_directrix(1, 1, 3) == 2",
    "def directrix(focus, vertex):\n    return focus - vertex\n\n\nif __name__ == '__main__':\n    focus = int(input('Enter the focus of the parabola: '))\n    vertex = int(input('Enter the vertex of the parabola: '))\n    print(directrix(focus, vertex))",
    "def directrix(focus, vertex):\n    \"\"\"\n    focus: (x, y)\n    vertex: (x, y)\n    \"\"\"\n    return vertex[1] / (focus[1] - vertex[1]) * focus[0]",
    "def parabola_directrix(vertex, focus):\n    \"\"\"\n    This function takes in two tuples, representing the coordinates of a vertex\n    and a focus, and returns the directrix of a parabola.\n\n    The directrix is the line containing the focus and perpendicular to the\n    axis of symmetry.\n    \"\"\"\n    # Find the distance between the vertex and the focus\n    distance = ((focus[0] - vertex[0])**2 + (focus[1] - vertex[1])**2)**.5\n    # Calculate the slope of the directrix\n    slope = (focus[1] - vertex[1]) / (focus[0] - vertex[0])\n    # Return the y-intercept of the directrix\n    return vertex[1] - slope * vertex[0]",
    "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef find_directrix(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"Find the directrix of a parabola.\n\n    >>> find_directrix(3, 4, 1)\n    (-4.0, -1.0)\n    >>> find_directrix(1, 2, 3)\n    (-2.0, 1.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        raise ValueError(\"no real roots\")\n    y_one = (-b + sqrt(discriminant)) / (2 * a)\n    y_two = (-b - sqrt(discriminant)) / (2 * a)\n    return y_one, y_two\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def directrix(focus: tuple[float, float], vertex: tuple[float, float]) -> float:\n    \"\"\"Return the directrix of a parabola.\n\n    The parabola is assumed to be pointing towards the +x axis.\n    \"\"\"\n    dx = focus[0] - vertex[0]\n    dy = focus[1] - vertex[1]\n    return vertex[1] + dy / dx",
    "def find_directrix(p1, p2, p3):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n    # Check the points are in the correct order\n    if p1[1] < p2[1] < p3[1] or p1[1] > p2[1] > p3[1]:\n        raise ValueError(\"Points must be in descending order\")\n    # Get the two points on the parabola\n    parabola = [p1, p2]\n    # Find the equation of the parabola\n    a = (parabola[0][1] - parabola[1][1]) / (parabola[0][0] - parabola[1][0])\n    b = parabola[0][1] - a * parabola[0][0]\n    # Find the line perpendicular to the parabola\n    m = -1 / a\n    # Find the point on the line perpendicular to the parabola\n    c = b / m\n    # Get the y-intercept of the line perpendicular to the parabola\n    y_int = m * c\n    # Find the directrix\n    directrix = [0, y_int]\n    return directrix\n\n\ndef main():\n    \"\"\"\n    Run the main function.\n    \"\"\"\n    p1 = [0, 10]\n    p2 = [2, 8]\n    p3 = [4, 6]\n    directrix = find_directrix(p1, p2, p3)\n    print(directrix)\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}