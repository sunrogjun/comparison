{
  "problem": {
    "task_id": "MBPP/214",
    "prompt": "Write a function to convert radians to degrees.",
    "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
    "test_list": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ],
    "challenge_test_list": [],
    "problem_id": 203
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from math import radians, degrees\n\n\ndef rad_to_deg(radians):\n    return degrees(radians)\n\n\ndef main():\n    print(rad_to_deg(1.57))\n\n\nif __name__ == '__main__':\n    main()",
    "def radians_to_degrees(radians):\n    return (radians * 180) / 3.141592653589793\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(0) == 0\n    assert radians_to_degrees(1) == 57.29577951308232\n    assert radians_to_degrees(2) == 114.59155802616464\n\n\nif __name__ == '__main__':\n    test_radians_to_degrees()",
    "from math import pi\n\n\ndef convert_radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\ndef main():\n    radians = float(input('Enter radians: '))\n    degrees = convert_radians_to_degrees(radians)\n    print(f'{radians} radians = {degrees} degrees')\n\n\nif __name__ == '__main__':\n    main()",
    "def rads_to_degs(rads: float) -> float:\n    \"\"\"Convert radians to degrees.\n\n    >>> rads_to_degs(1)\n    57.29577951308232\n    >>> rads_to_degs(0.5)\n    28.64788975654116\n    \"\"\"\n    return rads * 180 / 3.14159\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652702769496412798358193261692789996759640\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(1) == 57.29577951308232",
    "def convert_radians_to_degrees(radians):\n    \"\"\"Convert radians to degrees.\n\n    Args:\n        radians (float): The radians to convert.\n\n    Returns:\n        The degrees corresponding to the radians.\n    \"\"\"\n    return radians * 180 / 3.14159265359\n\nprint(convert_radians_to_degrees(1))\nprint(convert_radians_to_degrees(10))\nprint(convert_radians_to_degrees(100))\nprint(convert_radians_to_degrees(1000))",
    "def radians_to_degrees(radians: float) -> float:\n    \"\"\"Convert radians to degrees.\"\"\"\n    return 180 / 3.14 * radians",
    "import math\n\ndef convert_rad_to_deg(rad):\n    return math.degrees(rad)\n\ndef test_convert_rad_to_deg():\n    assert convert_rad_to_deg(math.pi) == 180\n\nif __name__ == '__main__':\n    print(convert_rad_to_deg(math.pi))",
    "from math import pi\n\ndef rad_to_deg(rad):\n    return rad * 180 / pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(pi/4) == 45\n    assert rad_to_deg(pi) == 180\n    assert rad_to_deg(pi/2) == 90\n    assert rad_to_deg(pi * 3/4) == 135\n    assert rad_to_deg(2 * pi) == 360",
    "# Solution\n\ndef convert_radians_to_degrees(radians):\n    \"\"\"Converts radians to degrees.\n    \n    Args:\n        radians (float): Radians.\n    \n    Returns:\n        float: Degrees.\n    \"\"\"\n    degrees = radians * 180 / 3.14\n    return degrees\n\n# Tests\ndef convert_radians_to_degrees_test():\n\n    assert convert_radians_to_degrees(1.570796) == 90\n\n    print('All tests passed!')\n\n# Run test\nconvert_radians_to_degrees_test()",
    "import math\n\n\ndef rad_to_deg(radians):\n    return radians * 180 / math.pi\n\n\ndef main():\n    print(rad_to_deg(1))\n\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.1415926535\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(3.1415926535) == 180\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(3.1415926535))",
    "# Solution\ndef radians_to_degrees(radians):\n    return (radians * 180) / 3.141592653589793\n\n# Tests\ndef radians_to_degrees_test():\n\n    print(radians_to_degrees(3.141592653589793))\n\n    return True\n\nif radians_to_degrees_test():\n    print('Pass')\nelse:\n    print('Fail')",
    "def rad_to_deg(rad):\n    return rad * (180 / 3.14)\n\ndef main():\n    print(rad_to_deg(3.14))\n\n\nif __name__ == '__main__':\n    main()",
    "def radians_to_degrees(radians):\n    return (radians * 180) / 3.14\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(0) == 0\n    assert radians_to_degrees(1) == 57.29577951308232\n    assert radians_to_degrees(0.5) == 28.64788975654114\n    assert radians_to_degrees(0.25) == 14.32394477327567",
    "from math import pi\n\n\ndef radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return (radians * 180) / pi\n\n\ndef main():\n    print(radians_to_degrees(pi))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import pi\n\n\ndef rad_to_deg(rad):\n    \"\"\"Convert radians to degrees.\n\n    Args:\n        rad (float): Radians.\n\n    Returns:\n        int: Degrees.\n    \"\"\"\n    return int(rad * 180 / pi)\n\n\nif __name__ == '__main__':\n    assert rad_to_deg(pi) == 180",
    "from math import pi\n\n\ndef radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(pi / 2) == 90\n    assert radians_to_degrees(pi) == 180\n    assert radians_to_degrees(3 * pi / 2) == 270\n    assert radians_to_degrees(2 * pi) == 360",
    "from math import pi\n\n\ndef radians_to_degrees(rad):\n    return rad * 180 / pi\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(pi))",
    "import math\n\ndef rad_to_deg(rad):\n    return rad * 180 / math.pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(math.pi) == 180\n\nif __name__ == '__main__':\n    print rad_to_deg(math.pi)",
    "def rad_to_deg(radians):\n    degrees = radians * 180 / 3.141592653589793\n    return degrees\n\nprint(rad_to_deg(5))\nprint(rad_to_deg(1.57))",
    "import math\n\n\ndef rads_to_degs(rads):\n    return (rads * 180) / math.pi\n\n\nprint(rads_to_degs(math.pi))",
    "from math import pi\n\n\ndef rad_to_deg(rad):\n    return (rad * 180.0) / pi\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(pi / 2))",
    "def rad_to_deg(rad: float) -> float:\n    \"\"\"Convert radians to degrees.\n\n    >>> rad_to_deg(1)\n    57.29577951308232\n    >>> rad_to_deg(0.1)\n    5.729577951308232\n    >>> rad_to_deg(0)\n    0.0\n    \"\"\"\n    return rad * 180 / 3.141592653589793\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def rad_to_deg(rad):\n    \"\"\"\n    >>> rad_to_deg(3.14)\n    180.0\n    >>> rad_to_deg(2)\n    114.59155903\n    \"\"\"\n    return rad * 180 / 3.141592653589793\n\ndef test_rad_to_deg():\n    assert abs(rad_to_deg(3.14) - 180) < 0.0001\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return radians * 180 / 3.141592653589793",
    "# First, we'll write a function to convert radians to degrees.\n\ndef radians_to_degrees(radians):\n    return radians * 180 / 3.141592653589793\n\n# Next, we'll write a test script to make sure it works.\n\nfrom UnitTest import UnitTest\n\nclass RadiansToDegreesTest(UnitTest):\n\n    def test_zero(self):\n        self.assertEqual(0, radians_to_degrees(0))\n\n    def test_half_circle(self):\n        self.assertEqual(180, radians_to_degrees(3.141592653589793))\n\n    def test_quarter_circle(self):\n        self.assertEqual(90, radians_to_degrees(1.5707963267948966))\n\n    def test_three_quarter_circle(self):\n        self.assertEqual(270, radians_to_degrees(4.71238898038469))\n\n\nif __name__ == '__main__':\n    RadiansToDegreesTest().main()\n\n# The UnitTest module is available at\n# http://www.icemotion.org/projects/icemotion2/wiki/UnitTest",
    "def radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return radians * (180 / 3.14)",
    "def radian_to_degree(radian):\n    return radian * 180 / 3.141592653589793\n\n\nassert radian_to_degree(0.0) == 0.0\nassert radian_to_degree(1.0) == 57.29577951308232\nassert radian_to_degree(0.785398163) == 45.0\nassert radian_to_degree(3.141592653589793) == 180.0",
    "def radians_to_degrees(radians):\n    return (radians * 180) / 3.14\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(2))",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.14159\n\n\nprint(rad_to_deg(3.14159 / 4))  # 90",
    "from math import pi\n\n\ndef radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\ndef main():\n    print(radians_to_degrees(1.5707963267948966))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rad_to_deg(rad):\n    return (rad * 180 / 3.14)\n\ndef main():\n    print(rad_to_deg(5.6))\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.14159\n\n\ndef main():\n    print(rad_to_deg(1))\n    print(rad_to_deg(3))\n    print(rad_to_deg(3.14159))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef radians_to_degrees(radians):\n    return radians * 180 / math.pi\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(math.pi / 2) == 90\n    assert radians_to_degrees(math.pi) == 180\n    assert radians_to_degrees(3 * math.pi / 2) == 270\n    assert radians_to_degrees(2 * math.pi) == 360",
    "import math\n\ndef rad_to_deg(rad):\n    return rad * 180.0 / math.pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(math.pi) == 180.0\n    assert rad_to_deg(math.pi / 2) == 90.0\n    assert rad_to_deg(math.pi / 4) == 45.0\n\nif __name__ == '__main__':\n    test_rad_to_deg()",
    "def rad_to_deg(radians):\n    return radians * 180 / 3.14\n\n\nassert(rad_to_deg(3.14) == 180)\nassert(rad_to_deg(1.5708) == 90)",
    "# 3.14 radians = 180 degrees\n\nfrom math import radians\n\ndef rad_to_deg(radian):\n    return radians(radian)\n\nassert rad_to_deg(180) == 3.14",
    "def radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n    >>> radians_to_degrees(3.14159265359)\n    180.0\n    >>> radians_to_degrees(1.57079632679)\n    90.0\n    >>> radians_to_degrees(0.78539816339)\n    45.0\n    >>> radians_to_degrees(0.0)\n    0.0\n    \"\"\"\n\n    return radians * 180 / 3.14159265359\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import pi, cos, sin\n\n\ndef radians_to_degrees(radians: float) -> float:\n    \"\"\"\n    Convert radians to degrees.\n    >>> radians_to_degrees(pi)\n    180.0\n    >>> radians_to_degrees(2 * pi)\n    360.0\n    >>> radians_to_degrees(0)\n    0.0\n    \"\"\"\n    return radians * 180 / pi\n\n\ndef radians_to_degrees_sin_cos(radians: float) -> float:\n    \"\"\"\n    Convert radians to degrees using sin and cos.\n    >>> radians_to_degrees_sin_cos(pi)\n    180.0\n    >>> radians_to_degrees_sin_cos(2 * pi)\n    360.0\n    >>> radians_to_degrees_sin_cos(0)\n    0.0\n    \"\"\"\n    return degrees_from_sin_cos(sin(radians), cos(radians))\n\n\ndef degrees_from_sin_cos(sin_value: float, cos_value: float) -> float:\n    \"\"\"\n    Get degrees from sin and cos values.\n    >>> degrees_from_sin_cos(0, 1)\n    0.0\n    >>> degrees_from_sin_cos(1, 0)\n    90.0\n    >>> degrees_from_sin_cos(0, -1)\n    -90.0\n    >>> degrees_from_sin_cos(-1, 0)\n    -180.0\n    \"\"\"\n    return 180 * (2 * (1 - cos_value) - sin_value) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# First I tried using math.degrees(radians)\n# But this function is not available in my version of Python\n# So I tried to write it myself\n\ndef radians_to_degrees(radians):\n    return 180 * radians / 3.141592653589793\n\nassert radians_to_degrees(0.1234) == 6.715789970382859",
    "from math import pi\n\n\ndef rad_to_deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n\n    :param rad: Radians\n    :type rad: int | float\n    :return: Degrees\n    :rtype: float\n    \"\"\"\n    return rad * 180 / pi",
    "from math import pi\n\ndef rad_to_deg(radians):\n    return round(radians * 180 / pi, 2)\n\ndef main():\n    print(rad_to_deg(pi)) # 180.0\n    print(rad_to_deg(pi / 2)) # 90.0\n    print(rad_to_deg(pi / 4)) # 45.0\n\nif __name__ == '__main__':\n    main()",
    "from math import pi\n\ndef radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\nassert radians_to_degrees(pi) == 180\nassert radians_to_degrees(pi / 2) == 90\nassert radians_to_degrees(pi / 4) == 45",
    "def radians_to_degrees(radians):\n    return 180 * radians / 3.14\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(3.14) == 180\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.14))",
    "from math import pi, sin\n\ndef radians_to_degrees(radians):\n    return radians * 180 / pi\n\ndef test_function(test_case):\n    radians = test_case[0]\n    solution = test_case[1]\n    output = radians_to_degrees(radians)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nradians = 30 * pi / 180\ntest_case = [radians, 180]\ntest_function(test_case)\n\nradians = 90 * pi / 180\ntest_case = [radians, 270]\ntest_function(test_case)\n\nradians = 180 * pi / 180\ntest_case = [radians, 360]\ntest_function(test_case)\n\nradians = 180 * pi / 180\ntest_case = [radians, 180]\ntest_function(test_case)",
    "# Do not edit the signature of this function.\ndef rad_to_deg(rad):\n    \"\"\"\n    Write a function to convert radians to degrees.\n    \"\"\"\n    return round(rad * 180 / 3.14159, 2)\n\ndef main():\n    # Do not edit this function.\n    # This function runs your code and checks if your result matches the expected one.\n    print(\"Test 1:\")\n    print(rad_to_deg(0))\n\n    print(\"Test 2:\")\n    print(rad_to_deg(3.14159))\n\n    print(\"Test 3:\")\n    print(rad_to_deg(2 * 3.14159))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\n\n# 1.\ndef rad_to_deg(radians):\n    return radians * 180 / math.pi\n\n\n# 2.\ndef rad_to_deg(radians):\n    return radians * 57.29577951308232\n\n\n# 3.\ndef rad_to_deg(radians):\n    return radians * 179.99999999999996\n\n\n# 4.\ndef rad_to_deg(radians):\n    return radians * 57.2957795130823238\n\n\n# 5.\ndef rad_to_deg(radians):\n    return radians * 57.2957795130823238",
    "# 3.14 * 180 / pi\n\n\ndef rad_to_deg(radians):\n    return radians * 180 / 3.141592653589793\n\n\nassert(rad_to_deg(1) == 57.29577951308232)",
    "import math\n\n\ndef rad_to_deg(radians):\n    return math.degrees(radians)\n\n\ndef main():\n    print(rad_to_deg(math.pi))\n\n\nif __name__ == '__main__':\n    main()",
    "from math import pi\n\n\ndef convert_radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\ndef main():\n    radians = float(input(\"Enter a number of radians: \"))\n    degrees = convert_radians_to_degrees(radians)\n    print(f\"{radians} radians is equal to {degrees} degrees\")\n\n\nif __name__ == '__main__':\n    main()",
    "def radians_to_degrees(radians):\n    return radians * (180 / 3.14159)",
    "def rad_to_deg(radians):\n    \"\"\"\n    Convert radians to degrees.\n\n    :param float radians: The number of radians.\n    :return: The number of degrees.\n    :rtype: float\n    \"\"\"\n    return (radians * 180) / 3.14159",
    "def rad_to_deg(rad: float) -> float:\n    \"\"\"Convert radians to degrees.\n\n    >>> rad_to_deg(1.5707963267948966)\n    90.0\n    >>> rad_to_deg(3.141592653589793)\n    180.0\n    >>> rad_to_deg(4.71238898038469\n    ... )\n    225.0\n    >>> rad_to_deg(6.283185307179586)\n    360.0\n    >>> rad_to_deg(0.0)\n    0.0\n    \"\"\"\n    return rad * 180 / 3.141592653589793\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def radian_to_degree(radians):\n    return radians * 180.0 / 3.14\n\nif __name__ == '__main__':\n    print(radian_to_degree(2.0))",
    "def radians_to_degrees(radians):\n    return radians * 180 / 3.141592653589793\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(0.123) == 6.3008\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(0.123))",
    "# from math import pi\n\n\ndef rad_to_deg(rad):\n    return 180 * rad / 3.1415926\n\n\nprint(rad_to_deg(3.14))",
    "import math\n\ndef rad_to_deg(radian):\n    return radian * (180 / math.pi)\n\ndef test_rad_to_deg():\n    assert(rad_to_deg(0) == 0)\n    assert(rad_to_deg(math.pi) == 180)\n    assert(rad_to_deg(math.pi / 2) == 90)\n    assert(rad_to_deg(math.pi * 2) == 360)\n    assert(rad_to_deg(math.pi / 4) == 45)\n    assert(rad_to_deg(math.pi / 6) == 30)\n    assert(rad_to_deg(math.pi / 3) == 60)\n    assert(rad_to_deg(math.pi / 12) == 15)\n    assert(rad_to_deg(math.pi / 36) == 5)\n    assert(rad_to_deg(math.pi / 72) == 3)\n    assert(rad_to_deg(math.pi / 144) == 1)\n    assert(rad_to_deg(math.pi / 288) == 0.5)\n\nif __name__ == '__main__':\n    test_rad_to_deg()\n    print \"Radians to degrees tests pass!\"",
    "import math\n\n\ndef rad_to_deg(radian):\n    return math.degrees(radian)\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(math.pi))",
    "import math\n\ndef rad_to_deg(rad):\n    return (rad * 180) / math.pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(math.pi) == 180\n\nif __name__ == '__main__':\n    print(rad_to_deg(math.pi))",
    "def rad_to_deg(rad):\n    deg = rad * 180 / 3.14159\n    return deg\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(1) == 57.29577951308232\n    assert rad_to_deg(2) == 114.59155802616456\n    assert rad_to_deg(3) == 171.8873365402468\n    assert rad_to_deg(4) == 229.1831140543281\n    assert rad_to_deg(5) == 286.4788925684094\n    assert rad_to_deg(6) == 343.7746700825807\n    assert rad_to_deg(7) == 401.0704475967619\n    assert rad_to_deg(8) == 458.3662251108432\n    assert rad_to_deg(9) == 515.6620026249244\n    assert rad_to_deg(10) == 572.9577795380056\n    assert rad_to_deg(11) == 630.2535560520868\n    assert rad_to_deg(12) == 687.549332566168\n    assert rad_to_deg(13) == 744.8451090792493\n    assert rad_to_deg(14) == 802.1408855923296\n    assert rad_to_deg(15) == 859.436662106",
    "import math\n\ndef convert_radians_to_degrees(radians):\n    return math.degrees(radians)\n\ndef test_convert_radians_to_degrees():\n    assert(convert_radians_to_degrees(math.pi) == 180.0)\n\nif __name__ == '__main__':\n    print('radians = 180:', convert_radians_to_degrees(math.pi))",
    "def rad_to_deg(radians):\n    \"\"\"Convert radians to degrees.\n\n    >>> rad_to_deg(1)\n    57.29577951308232\n\n    >>> rad_to_deg(0)\n    0.0\n\n    >>> rad_to_deg(-1)\n    -57.29577951308232\n    \"\"\"\n    return radians * 180 / 3.14159\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# This is the answer\ndef rad_to_deg(rad):\n    return 180 * rad / 3.1415926\n\n# This is my answer\ndef deg_to_rad(deg):\n    return deg * 3.1415926 / 180\n\n# These are the tests, do not change them.\nassert rad_to_deg(3.1415926 / 2) == 90\nassert deg_to_rad(180) == 3.1415926",
    "from math import pi\n\n\ndef rad_to_deg(rad):\n    return (rad * 180) / pi\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(2))",
    "def rads_to_degs(rads):\n    return rads * 180 / 3.14159\n\ndef test_rads_to_degs():\n    assert rads_to_degs(1.0) == 57.29577951308232\n    assert rads_to_degs(2.0) == 114.59155802616464\n    assert rads_to_degs(3.0) == 171.88733653924685\n    assert rads_to_degs(4.0) == 229.18311505232804\n    assert rads_to_degs(5.0) == 286.47889356530923",
    "def rad_to_deg(radians):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return radians * 180 / 3.14\n\ndef test_rad_to_deg():\n    \"\"\"\n    Test rad_to_deg\n    \"\"\"\n    assert(rad_to_deg(0.1) == 5.729577951308232)\n    assert(rad_to_deg(1) == 57.29577951308232)\n\nif __name__ == '__main__':\n    test_rad_to_deg()",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.141592653589793\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(1) == 57.29577951308232\n    assert rad_to_deg(2) == 114.59055810916464\n    assert rad_to_deg(3) == 171.88533661424686",
    "def radians_to_degrees(radians):\n    return radians * 180 / 3.14159\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.14159 / 2))",
    "import math\n\n\ndef to_degrees(radians):\n    return math.degrees(radians)",
    "def radians_to_degrees(radians):\n    return (radians * 180) / 3.141592653589793\n\nassert radians_to_degrees(3.141592653589793) == 180.0\nassert radians_to_degrees(1.5707963267948966) == 90.0\nassert radians_to_degrees(0.7853981633974483) == 45.0",
    "def rad_to_deg(rad):\n    \"\"\"Convert radians to degrees.\n\n    Args:\n        rad: Radian value.\n\n    Returns:\n        Degree value.\n    \"\"\"\n    return (rad * 180) / 3.14\n\n\ndef main():\n    print(rad_to_deg(1))\n\n\nif __name__ == '__main__':\n    main()",
    "def rads_to_degs(rads):\n    return rads * 180 / 3.14\n\n\nprint(rads_to_degs(3.14159))",
    "from math import pi\n\n\ndef convert_radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\ndef test_convert_radians_to_degrees():\n    assert convert_radians_to_degrees(3.141592653589793) == 180\n    assert convert_radians_to_degrees(0.7853981633974483) == 45\n    assert convert_radians_to_degrees(0.39269908169872414) == 22.5\n\n\nif __name__ == '__main__':\n    print(convert_radians_to_degrees(3.141592653589793))",
    "def radians_to_degrees(radians):\n    return (radians * 180) / 3.14159\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(0) == 0\n    assert radians_to_degrees(3.14159 / 2) == 90\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.14159 / 2))",
    "import math\n\ndef radians_to_degrees(radians):\n    return radians * 180 / math.pi\n\nif __name__ == '__main__':\n    print(radians_to_degrees(math.pi))",
    "import math\n\n\ndef rad_to_deg(rad):\n    return rad * 180 / math.pi\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(math.pi / 2))",
    "import math\n\n\ndef rad_to_deg(rad):\n    return math.degrees(rad)\n\n\nprint(rad_to_deg(math.radians(180)))",
    "import math\n\n\ndef radians_to_degrees(radians):\n    return math.degrees(radians)",
    "from math import radians, degrees\n\n\ndef radians_to_degrees(radians_angle):\n    return degrees(radians_angle)\n\n\ndef main():\n    print(radians_to_degrees(radians(180)))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\n# Write your code here.\ndef rad_to_deg(radians: float) -> float:\n    return math.degrees(radians)\n\n\n# Tests\nassert rad_to_deg(math.pi) == 180.0",
    "def radians_to_degrees(radians):\n    return radians * 180 / 3.141592653589793\n\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.141592653589793))",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.1415926535897932384626433832795028841971693993751\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(3.1415926535897932384626433832795028841971693993751) == 180\n\ndef main():\n    print(rad_to_deg(float(input('Enter radians: '))))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef radians_to_degrees(radians):\n    return radians * 180 / math.pi\n\n\ndef test_radians_to_degrees():\n    assert round(radians_to_degrees(math.pi), 2) == 180\n    assert round(radians_to_degrees(math.pi / 2), 2) == 90\n    assert round(radians_to_degrees(math.pi / 4), 2) == 45\n    assert round(radians_to_degrees(math.pi / 8), 2) == 22.5\n    assert round(radians_to_degrees(math.pi / 16), 2) == 11.25",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\nif __name__ == '__main__':\n    print(rad_to_deg(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679))",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.14\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(3.14) == 180\n    assert rad_to_deg(6.28) == 360\n    assert rad_to_deg(1.57) == 90",
    "# This solution is wrong.\n# rads_to_degs(1) returns 180\n\ndef rads_to_degs(rads):\n    return rads * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\n\n# This solution is wrong.\n# degs_to_rads(90) returns 1.57\n\ndef degs_to_rads(degs):\n    return degs * math.pi / 180",
    "def rad_to_deg(radians):\n    return (radians * 180) / 3.14\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(3.14) == 180\n    assert rad_to_deg(1.57) == 90\n    assert rad_to_deg(4.71) == 281\n    assert rad_to_deg(0) == 0",
    "import math\n\n\ndef rad_to_deg(rad):\n    return rad * 180 / math.pi\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = rad_to_deg(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((math.pi, 180))\ntest_function((math.pi / 2, 90))\ntest_function((math.pi / 4, 45))",
    "import math\n\n\ndef rad_to_deg(rad):\n    return 180 * rad / math.pi\n\n\nif __name__ == '__main__':\n    print(rad_to_deg(3.14159))",
    "import math\n\ndef radians_to_degrees(radians):\n    return radians * (180 / math.pi)\n\nprint(radians_to_degrees(math.radians(30)))\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(math.radians(30)) == 30\n    assert radians_to_degrees(math.radians(60)) == 60\n    assert radians_to_degrees(math.radians(90)) == 90\n    assert radians_to_degrees(math.radians(120)) == 120\n    assert radians_to_degrees(math.radians(150)) == 150\n    assert radians_to_degrees(math.radians(180)) == 180\n    assert radians_to_degrees(math.radians(210)) == 210\n    assert radians_to_degrees(math.radians(240)) == 240\n    assert radians_to_degrees(math.radians(270)) == 270\n    assert radians_to_degrees(math.radians(300)) == 300\n    assert radians_to_degrees(math.radians(330)) == 330\n    assert radians_to_degrees(math.radians(360)) == 360",
    "def convert_radians_to_degrees(radians):\n    return radians * 180 / 3.14159\n\nif __name__ == '__main__':\n    print(convert_radians_to_degrees(1.0))",
    "import math\n\n\ndef rad_to_deg(radian):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return round(radian * 180 / math.pi, 2)\n\n\ndef main():\n    \"\"\"\n    Print the converted radians to degrees.\n    \"\"\"\n    print(rad_to_deg(math.radians(180)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import pi\n\n\ndef rad_to_deg(radians):\n    return radians * 180 / pi\n\n\nif __name__ == '__main__':\n    radians = float(input('Enter radians: '))\n    degrees = rad_to_deg(radians)\n    print(f'{radians} radians = {degrees} degrees')",
    "# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef rad_to_deg(rad):\n    return rad * 180 / 3.141592653589793\n\n\nif __name__ == \"__main__\":\n    print(rad_to_deg(2))",
    "def radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees\n    \"\"\"\n    return (radians * 180) / 3.14\n\n\ndef main():\n    \"\"\"\n    Print the result of the conversion\n    \"\"\"\n    print(radians_to_degrees(5.6))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rad_to_deg(radians):\n    return radians * 180 / 3.1415926\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(1) == 57.29577951308232\n    assert rad_to_deg(2) == 114.59155810416665\n\n\nif __name__ == \"__main__\":\n    test_rad_to_deg()",
    "import math\n\n\ndef rad_to_deg(rad):\n    return math.degrees(rad)\n\n\ndef test_rad_to_deg():\n    \"\"\"Test for rad_to_deg function.\"\"\"\n    assert rad_to_deg(math.pi) == 180.0\n    assert rad_to_deg(math.pi / 2) == 90.0\n    assert rad_to_deg(math.pi / 4) == 45.0\n    assert rad_to_deg(-math.pi / 4) == -45.0",
    "import math\n\n\n# Write your code here.\ndef radians_to_degrees(radians):\n    return radians * 180 / math.pi\n\n\nprint(radians_to_degrees(3.141592653589793))",
    "import math\n\n\n# 1. Use math.degrees()\ndef radians_to_degrees(radians):\n    return math.degrees(radians)\n\n\n# 2. Write a function to convert radians to degrees.\ndef radians_to_degrees2(radians):\n    return radians * 180 / math.pi\n\n\n# Tests\ndef test_radians_to_degrees():\n    assert radians_to_degrees(math.pi / 2) == 90\n\n\ndef test_radians_to_degrees2():\n    assert radians_to_degrees2(math.pi / 2) == 90\n\n\ndef test_radians_to_degrees3():\n    assert radians_to_degrees(math.pi) == 180\n\n\ndef test_radians_to_degrees4():\n    assert radians_to_degrees2(math.pi) == 180\n\n\ndef test_radians_to_degrees5():\n    assert radians_to_degrees(math.pi * 2) == 360\n\n\ndef test_radians_to_degrees6():\n    assert radians_to_degrees2(math.pi * 2) == 360\n\n\ndef test_radians_to_degrees7():\n    assert radians_to_degrees(math.pi / 4) == 45\n\n\ndef test_radians_to_degrees8():\n    assert radians_to_degrees2(math.pi / 4) == 45"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}