{
  "problem": {
    "task_id": "MBPP/480",
    "prompt": "Write a python function to find the maximum occurring character in a given string.",
    "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "test_list": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ],
    "challenge_test_list": [],
    "problem_id": 469
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_occurring_char(str1):\n    dict_count = {}\n    for i in str1:\n        dict_count[i] = dict_count.get(i, 0) + 1\n    return max(dict_count, key=dict_count.get)\n\n\nprint(max_occurring_char(\"aabbbccc\"))",
    "def max_occur(str):\n    count_dict = {}\n    for i in str:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return max(count_dict, key=count_dict.get)\n\n\nstr = \"Hello World\"\nprint(max_occur(str))",
    "def max_char(str1: str) -> str:\n    \"\"\"\n    This function takes a string as an input and returns the maximum occurring character.\n\n    >>> max_char('abcbc')\n    'b'\n    >>> max_char('apple')\n    'p'\n    >>> max_char('aabbc')\n    'a'\n    >>> max_char('aabbcc')\n    'a'\n    >>> max_char('aabbcbb')\n    'b'\n    >>> max_char('aabbccbb')\n    'b'\n    >>> max_char('')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input string is empty.\n    \"\"\"\n    if not str1:\n        raise ValueError(\"Input string is empty.\")\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_char = max(char_dict, key=char_dict.get)\n    return max_char\n\n\ndef max_char_using_tuple(str1: str) -> str:\n    \"\"\"\n    This function takes a string as an input and returns the maximum occurring character.\n\n    >>> max_char_using_tuple('abcbc')\n    'b'\n    >>> max_char_using_tuple('apple')\n    'p'\n    >>> max_char_using_tuple('aabbc')\n    'a'\n    >>> max_char_using_tuple('aabbcc')\n    'a'\n    >>> max_char_using_tuple('aabbcbb')\n    'b'\n    >>> max_char_using_tuple('aabbccbb')\n    'b'\n    >>> max_char_using_tuple('')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input string is empty.\n    \"\"\"\n    if not str1:\n        raise ValueError(\"Input string is empty.\")\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1",
    "def max_occuring_char(str):\n    char_dict = {}\n    max_count = 0\n    for i in str:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    for i in char_dict:\n        if char_dict[i] > max_count:\n            max_count = char_dict[i]\n    for i in char_dict:\n        if char_dict[i] == max_count:\n            return i\n    return None\n\n\nif __name__ == \"__main__\":\n    print(max_occuring_char(\"aabbbbbbbbbbbb\"))\n    print(max_occuring_char(\"aabb\"))\n    print(max_occuring_char(\"abb\"))\n    print(max_occuring_char(\"aaabbbbbbbbbbbb\"))\n    print(max_occuring_char(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(max_occuring_char(\"abcded\"))",
    "def max_occur(string):\n    max_occur_char = None\n    max_occur_count = 0\n\n    for char in string:\n        count = string.count(char)\n        if count > max_occur_count:\n            max_occur_count = count\n            max_occur_char = char\n    return max_occur_char\n\n\nprint(max_occur(\"aabbccddeeffghi\"))",
    "from collections import Counter\n\n\ndef max_occurrence_character(str1: str) -> str:\n    \"\"\"\n    This function will return the max occurrence character in a given string.\n    >>> max_occurrence_character(\"Aabbcc\")\n    'b'\n    \"\"\"\n    return Counter(str1).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from collections import Counter\n\n\ndef max_char(str1):\n    return max(Counter(str1).keys(), key=str1.count)\n\n\nprint(max_char(\"google\"))\nprint(max_char(\"geeksforgeeks\"))\nprint(max_char(\"geeks\"))",
    "def max_occuring_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = max(char_count, key=char_count.get)\n    return max_char\n\n\nstr1 = \"aabbbcccc\"\nprint(max_occuring_char(str1))",
    "def max_occuring_char(s):\n    s = s.lower()\n    d = {}\n    for c in s:\n        if c != ' ':\n            d[c] = d.get(c, 0) + 1\n    max_char = ''\n    max_count = 0\n    for c in d:\n        if d[c] > max_count:\n            max_count = d[c]\n            max_char = c\n    return max_char\n\n\nprint(max_occuring_char('aabbbccc'))\nprint(max_occuring_char('aabBbBcC'))\nprint(max_occuring_char('aabbcc'))",
    "def max_char(string):\n    if len(string)==0:\n        return None\n    elif len(string)==1:\n        return string\n    else:\n        max_char = string[0]\n        max_count = 1\n        for i in range(1, len(string)):\n            if string[i] == max_char:\n                max_count += 1\n            elif string[i] > max_char:\n                max_char = string[i]\n                max_count = 1\n        return max_char\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    print(max_char(string))",
    "from collections import Counter\n\n\ndef max_char(str1):\n    return Counter(str1).most_common(1)[0][0]\n\n\nstr1 = \"the quick brown fox jumps over the lazy dog\"\nprint(max_char(str1))",
    "def max_char(str1):\n    max_count = 0\n    max_char = \"\"\n\n    for char in str1:\n        count = str1.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n\n    return max_char\n\n\nstr1 = \"abcdeaaa\"\nprint(max_char(str1))",
    "from collections import Counter\n\n\ndef max_occurring_char(s):\n    c = Counter(s)\n    return max(c, key=c.get)\n\n\ndef main():\n    print(max_occurring_char(\"hello\"))\n    print(max_occurring_char(\"hello world\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef max_occuring_char(str1: str) -> str:\n    \"\"\"\n    >>> max_occuring_char(\"google.com\")\n    'e'\n    >>> max_occuring_char(\"google\")\n    'e'\n    >>> max_occuring_char(\"gooogle\")\n    'o'\n    \"\"\"\n    c = Counter(str1)\n    return max(c, key=c.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occuring_char(input_str):\n    \"\"\"\n    Return the maximum occurring character in a given string\n\n    Args:\n       input_str(string): Input string\n    Returns:\n       char: Character with maximum occurrence in string\n    \"\"\"\n    if not input_str:\n        return None\n\n    count_dict = {}\n    max_count = 0\n    max_char = None\n\n    for char in input_str:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n\n        if count_dict[char] > max_count:\n            max_count = count_dict[char]\n            max_char = char\n\n    return max_char\n\n\ndef test_function(test_case):\n    input_str = test_case[0]\n    solution = test_case[1]\n    output = max_occuring_char(input_str)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([None, None])\ntest_function([\"\", None])\ntest_function([\"abc\", \"c\"])\ntest_function([\"cccccccc\", \"c\"])\ntest_function([\"ccddeeeeef\", \"e\"])\ntest_function([\"aaabbc\", \"a\"])\ntest_function([\"aaaaaaaa\", \"a\"])",
    "def max_occuring_char(input_str: str) -> str:\n    \"\"\"\n    >>> max_occuring_char(\"aabbbccc\")\n    'b'\n    \"\"\"\n    char_freq: dict = dict()\n    for char in input_str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    max_char = None\n    max_char_count = 0\n\n    for char in char_freq:\n        if char_freq[char] > max_char_count:\n            max_char_count = char_freq[char]\n            max_char = char\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_occuring_character(str1: str) -> str:\n    \"\"\"\n    >>> max_occuring_character(\"abbbc\")\n    'b'\n    \"\"\"\n    return Counter(str1).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_max_occurring_char(str1):\n    \"\"\"\n    :param: str1 - input string\n    TODO: complete this method and return the maximum occurring character in the string\n    \"\"\"\n    pass\n\n# Test Cases\nprint (\"Pass\" if  (find_max_occurring_char('aabbbccde') == 'b') else \"Fail\")\nprint (\"Pass\" if  (find_max_occurring_char('abcdfbbbea') == 'b') else \"Fail\")\nprint (\"Pass\" if  (find_max_occurring_char('a') == 'a') else \"Fail\")\nprint (\"Pass\" if  (find_max_occurring_char('abbc') == 'b') else \"Fail\")\nprint (\"Pass\" if  (find_max_occurring_char('') == None) else \"Fail\")",
    "def max_occur(string):\n    max_char = string[0]\n    max_count = 1\n    count_dict = dict()\n\n    for i in string:\n        count = string.count(i)\n        if count > max_count:\n            max_count = count\n            max_char = i\n        elif count == max_count:\n            if i < max_char:\n                max_char = i\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    string = \"aabbbbc\"\n    print(max_occur(string))",
    "def max_occurring_char(str1: str) -> str:\n    \"\"\"\n    This function takes in a string and returns the max occurring character.\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    >>> max_occurring_char('google')\n    'l'\n    \"\"\"\n\n    dict_char = {}\n    for char in str1:\n        if char in dict_char:\n            dict_char[char] += 1\n        else:\n            dict_char[char] = 1\n    max_char = max(dict_char, key=dict_char.get)\n    return max_char\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from collections import defaultdict\n\n\ndef max_occur(str1):\n    str_dict = defaultdict(int)\n    for ch in str1:\n        str_dict[ch] += 1\n    return max(str_dict, key=str_dict.get)\n\n\nprint(max_occur(\"google\"))\nprint(max_occur(\"aabb\"))",
    "def max_occurring_char(string):\n    max_count = 0\n    max_char = None\n\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\nif __name__ == '__main__':\n    string = input(\"Enter a string: \")\n    print(f\"The max occurring character is {max_occurring_char(string)}\")",
    "def max_occurring_char(str1):\n    count = {}\n    for char in str1:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n\n    max_char = max(count, key=count.get)\n    return max_char\n\n\nprint(max_occurring_char(\"abcdefg\"))",
    "def max_occuring_char(str1: str) -> str:\n    \"\"\"\n    This function takes a string as an input and returns the maximum occurring\n    character.\n\n    >>> max_occuring_char('Python')\n    't'\n    >>> max_occuring_char('Java')\n    'a'\n    >>> max_occuring_char('C++')\n    'C'\n    \"\"\"\n    char_dict = dict()\n    max_char = \"\"\n    max_count = 0\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n        if char_dict[char] > max_count:\n            max_count = char_dict[char]\n            max_char = char\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occuring_char(str1):\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return max(count, key=count.get)\n\n\ndef main():\n    str1 = \"google.com\"\n    print(\"Max occur char: \", max_occuring_char(str1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurring_character(input_str):\n    \"\"\"\n    This function takes a string input and returns the character with the maximum occurrences\n    :param input_str: input string\n    :return: char with maximum occurrences\n    \"\"\"\n    char_dict = dict()\n    max_char = None\n    max_count = 0\n    for char in input_str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n        if char_dict[char] > max_count:\n            max_char = char\n            max_count = char_dict[char]\n\n    return max_char\n\n\ndef main():\n    print(\"Max occurring char in: abcdea is: \" + max_occurring_character('abcdea'))\n    print(\"Max occurring char in: bacdebca is: \" + max_occurring_character('bacdebca'))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_occur(str1):\n    max_occur = 0\n    for i in str1:\n        if str1.count(i) > max_occur:\n            max_occur = str1.count(i)\n            char = i\n    return char\n\n\nprint(max_occur(\"aabbccddee\"))",
    "def max_occuring_char(string):\n    d = {}\n    for char in string:\n        d[char] = d.get(char, 0) + 1\n\n    max_occur = 0\n    max_char = None\n    for key, value in d.items():\n        if value > max_occur:\n            max_occur = value\n            max_char = key\n\n    return max_char\n\n\nprint(max_occuring_char(\"aabbbbccc\"))",
    "def max_occurring_character(str1):\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return max(dict1, key=dict1.get)\n\n\nstr1 = input()\nprint(max_occurring_character(str1))",
    "from collections import defaultdict\n\n\ndef max_occurring_char(str1):\n    char_count = defaultdict(int)\n\n    for char in str1:\n        char_count[char] += 1\n\n    return max(char_count, key=char_count.get)\n\n\nif __name__ == \"__main__\":\n    print(max_occurring_char(\"abcdcde\"))\n    print(max_occurring_char(\"ababab\"))",
    "def max_occurring_char(str1):\n    char_dict = dict()\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n        else:\n            char_dict[str1[i]] = 1\n    max_occurring_char = max(char_dict, key=char_dict.get)\n    return max_occurring_char\n\n\nstr1 = input(\"Enter a string: \")\nprint(max_occurring_char(str1))",
    "def max_occur(str1):\n    d = dict()\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mx = max(d.values())\n    for i in d:\n        if d[i] == mx:\n            return i\n\n\nprint(max_occur(\"abcdabcdabc\"))",
    "from collections import Counter\n\n\ndef find_max_occuring_char(input_string):\n    char_count = Counter(input_string)\n    char_count_max = max(char_count.values())\n    return max(char_count.keys(), key=lambda k: char_count[k])\n\n\ndef main():\n    input_string = \"The quick brown fox jumps over the lazy dog\"\n    print(\"Input string: \" + str(input_string))\n    print(\"Max occuring character: \" + str(find_max_occuring_char(input_string)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurring_character(str):\n    freq = {}\n    for i in str:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq, key=freq.get)\n\n\nif __name__ == \"__main__\":\n    print(max_occurring_character(\"abcdefgh\"))\n    print(max_occurring_character(\"abbcdefghi\"))",
    "def max_occuring_character(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    max_count = max(count_dict.values())\n    max_char = \"\"\n    for key, value in count_dict.items():\n        if value == max_count:\n            max_char += key\n    return max_char\n\n\nprint(max_occuring_character(\"aabbbcccc\"))",
    "def max_char(string):\n    max_count = 0\n    max_char = None\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\n\nprint(max_char(\"abbbc\"))\nprint(max_char(\"abcde\"))",
    "def max_occuring_char(str1):\n    max_char = str1[0]\n    max_count = 0\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n        if char_dict[char] > max_count:\n            max_count = char_dict[char]\n            max_char = char\n    return max_char\n\n\nif __name__ == \"__main__\":\n    str1 = \"aabbccde\"\n    print(f\"Maximum occuring character in the string {str1} is {max_occuring_char(str1)}\")",
    "from collections import Counter\n\ndef max_occuring_char(input_str):\n    \"\"\"\n    Finds the character with the maximum number of occurences in a string.\n\n    Args:\n       input_str(string): Input String\n    Returns:\n       char: Character with maximum occurence\n    \"\"\"\n    if not input_str:\n        return None\n\n    char_counts = Counter(input_str)\n    max_char = None\n    max_count = 0\n    for char in char_counts:\n        count = char_counts[char]\n        if count > max_count:\n            max_char = char\n            max_count = count\n\n    return max_char\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_occuring_char(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(('', None))\ntest_function(('Python', 'y'))\ntest_function(('Java', 'a'))\ntest_function(('C++', ' '))\ntest_function(('C', 'c'))\ntest_function(('C', None))\ntest_function(('', None))\ntest_function(('Java is great!', 'a'))\ntest_function(('Java is great!', 'a'))\ntest_function(('Java is great!', '!'))\ntest_function(('Java is great!', ' '))\ntest_function(('Java is great!', 'j'))\ntest_function(('Java is great!', 'g'))\ntest_function(('Java is great!', 'r'))\ntest_function(('Java is great!', 't'))\ntest_function(('Java is great!', 'e'))\ntest_function(('Java is great!', 's'))\ntest_function(('Java is great!', 'J'))\ntest_function(('Java is great!', 'i'))\ntest_function(('Java is great!', 'v'))\ntest_function(('Java is great!', 'a'))\ntest_function(('",
    "from collections import Counter\n\n\ndef find_max_occuring_char(string: str) -> str:\n    \"\"\"\n    >>> find_max_occuring_char('aabbbcccc')\n    'a'\n    \"\"\"\n    counter = Counter(string)\n    return max(counter, key=lambda k: counter[k])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_char(a):\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mx = max(d.values())\n    return [k for k, v in d.items() if v == mx]\n\n\na = \"Hello\"\nprint(\"Maximum occurring character in \", a, \"is\", max_char(a))",
    "def max_occuring(str1):\n    char_dict = {}\n    max_count = 0\n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n        if max_count < char_dict[i]:\n            max_count = char_dict[i]\n    for key, value in char_dict.items():\n        if value == max_count:\n            return key\n\n\nprint(max_occuring(\"google\"))",
    "from collections import Counter\n\n\ndef max_occurring_character(str1):\n    \"\"\"\n    >>> max_occurring_character(\"abcdefgabc\")\n    'a'\n    \"\"\"\n    return Counter(str1).most_common(1)[0][0]\n\n\ndef test_random_string():\n    from string import ascii_letters\n    import random\n\n    random_string = \"\".join(random.choices(ascii_letters, k=100))\n    assert max_occurring_character(random_string) in random_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_occuring_character(input_str):\n    if not input_str:\n        return None\n    char_count = Counter(input_str)\n    return max(char_count, key=char_count.get)\n\n\ndef main():\n    input_str = \"Hello, my name is Bond. James Bond.\"\n    max_char = max_occuring_character(input_str)\n    print(f\"The max occurring character in the string is: {max_char}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max(string):\n    max_count = 0\n    max_char = None\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\n\nprint(find_max(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "def max_occuring_char(input_string):\n    max_char = input_string[0]\n    max_count = 1\n    char_dict = {}\n\n    for char in input_string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for key in char_dict:\n        if char_dict[key] > max_count:\n            max_count = char_dict[key]\n            max_char = key\n\n    return max_char\n\nprint(max_occuring_char(\"maxoccuring\"))",
    "def max_char(str):\n    max_char_dict = {}\n    for i in str:\n        if i in max_char_dict:\n            max_char_dict[i] += 1\n        else:\n            max_char_dict[i] = 1\n    print(max_char_dict)\n    max_char = max(max_char_dict, key=max_char_dict.get)\n    print(max_char)\n\n\nmax_char(\"aabbbcccc\")",
    "def max_occurring(str):\n    count = {}\n    for c in str:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    max = 0\n    for k, v in count.items():\n        if v > max:\n            max = v\n    print(max)\n    for k, v in count.items():\n        if v == max:\n            print(k)\n\n\ndef max_occurring_new(str):\n    count = {}\n    for c in str:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    max = max(count.values())\n    print(max)\n    for k, v in count.items():\n        if v == max:\n            print(k)\n\n\nif __name__ == \"__main__\":\n    max_occurring(\"abcdefgabc\")\n    max_occurring_new(\"abcdefgabc\")",
    "def max_char(str1):\n    count_dict = {}\n    max_char = None\n    max_count = 0\n\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    for char in str1:\n        if count_dict[char] > max_count:\n            max_count = count_dict[char]\n            max_char = char\n\n    return max_char\n\n\nprint(max_char(\"the quick brown fox jumps over the lazy dog\"))",
    "def max_occuring_char(input_str):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n\n    char_count = dict()\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    max_char = None\n    max_char_count = 0\n    for char in char_count:\n        if char_count[char] > max_char_count:\n            max_char_count = char_count[char]\n            max_char = char\n\n    return max_char\n\n\ndef max_occuring_char_constant_space(input_str):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n\n    max_char = None\n    max_char_count = 0\n    for char in input_str:\n        if char > max_char_count:\n            max_char_count = char\n            max_char = char\n\n    return max_char\n\n\ndef max_occuring_char_with_counter(input_str):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n\n    max_char = None\n    max_char_count = 0\n    for char in input_str:\n        if char > max_char_count:\n            max_char_count = char\n            max_char = char\n\n    return max_char\n\n\nprint(max_occuring_char(\"hello world\"))\nprint(max_occuring_char_constant_space(\"hello world\"))\nprint(max_occuring_char_with_counter(\"hello world\"))",
    "def find_max_occurring_character(input_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    Args:\n        input_string: str\n\n    Returns:\n\n    \"\"\"\n    if len(input_string) == 0:\n        return None\n\n    character_counts = {}\n\n    for character in input_string:\n        if character in character_counts:\n            character_counts[character] += 1\n        else:\n            character_counts[character] = 1\n\n    max_count = 0\n    max_count_character = None\n\n    for character, count in character_counts.items():\n        if count > max_count:\n            max_count = count\n            max_count_character = character\n\n    return max_count_character\n\n\ndef find_max_occurring_character_using_collections(input_string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    Args:\n        input_string: str\n\n    Returns:\n\n    \"\"\"\n    if len(input_string) == 0:\n        return None\n\n    import collections\n\n    character_counts = collections.Counter(input_string)\n\n    max_count = 0\n    max_count_character = None\n\n    for character, count in character_counts.items():\n        if count > max_count:\n            max_count = count\n            max_count_character = character\n\n    return max_count_character",
    "def max_occuring_char(input_string):\n    \"\"\"\n    Finds the maximum occurring character in a given string\n    :param input_string:\n    :return:\n    \"\"\"\n    d = dict()\n    for i in input_string:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\ndef test_function(test_case):\n    input_string = test_case[0]\n    solution = test_case[1]\n    output = max_occuring_char(input_string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [\"abcabc\", \"c\"]\ntest_function(test_case_1)\n\ntest_case_2 = [\"abccde\", \"c\"]\ntest_function(test_case_2)\n\ntest_case_3 = [\"abcdef\", \"a\"]\ntest_function(test_case_3)\n\ntest_case_4 = [\"abcde\", \"a\"]\ntest_function(test_case_4)",
    "def max_occurring(string):\n    char_map = {}\n    for char in string:\n        if char not in char_map:\n            char_map[char] = 0\n        char_map[char] += 1\n    max_char = \"\"\n    max_count = 0\n    for key, value in char_map.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char",
    "def max_occurring_char(string: str) -> str:\n    \"\"\"\n    >>> max_occurring_char('abacad')\n    'a'\n    \"\"\"\n    count = {}\n\n    for character in string:\n        if character in count:\n            count[character] += 1\n        else:\n            count[character] = 1\n\n    max_count = max(count.values())\n    max_chars = [key for key, value in count.items() if value == max_count]\n    return max_chars[0]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "from collections import Counter\n\n\ndef max_occurring_char(s):\n    return Counter(s).most_common(1)[0][0]\n\n\ndef test_function(test_case):\n    s = test_case[0]\n    solution = test_case[1]\n    output = max_occurring_char(s)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ns = \"google.com\"\nsolution = \"e\"\ntest_case = [s, solution]\ntest_function(test_case)",
    "def max_occurring_character(s):\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\nprint(max_occurring_character(\"abcdefgabc\"))",
    "def max_occuring_character(str1):\n    count_dict = dict()\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    max_char = max(count_dict.values())\n    max_char_list = [char for char in count_dict if count_dict[char] == max_char]\n    return max_char_list[0]\n\n\nif __name__ == \"__main__\":\n    str1 = \"google\"\n    print(max_occuring_character(str1))",
    "from collections import Counter\n\n\ndef find_max_occuring_char(input_str):\n    char_dict = Counter(input_str)\n    char_max_occuring = max(char_dict, key=char_dict.get)\n    return char_max_occuring\n\n\ndef main():\n    str_input = \"Python\"\n    char_max = find_max_occuring_char(str_input)\n    print(char_max)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occuring_character(input_str):\n    char_count = dict()\n    max_count = 0\n    max_char = \"\"\n    for i in input_str:\n        if i in char_count:\n            char_count[i] += 1\n            if char_count[i] > max_count:\n                max_count = char_count[i]\n                max_char = i\n        else:\n            char_count[i] = 1\n            max_count = 1\n            max_char = i\n    return max_char\n\n\nprint(max_occuring_character(\"abcdabc\"))",
    "def max_occurring_char(input_str):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not input_str:\n        return None\n\n    max_char = None\n    max_char_count = 0\n\n    for char in input_str:\n        char_count = input_str.count(char)\n        if char_count > max_char_count:\n            max_char = char\n            max_char_count = char_count\n\n    return max_char",
    "def max_occuring_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    max_char = ''\n    max_count = 0\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n\n    return max_char\n\n\nstr1 = 'aabbbcc'\nprint(max_occuring_char(str1))",
    "def max_occuring_char(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    char_map = {}\n    for char in string:\n        if char not in char_map:\n            char_map[char] = 1\n        else:\n            char_map[char] += 1\n\n    max_char, max_count = None, 0\n    for char, count in char_map.items():\n        if count > max_count:\n            max_char, max_count = char, count\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    assert max_occuring_char(\"abcdea\") == \"a\"",
    "def max_occuring_char(str1: str) -> str:\n    \"\"\"\n    >>> max_occuring_char(\"Python\")\n    't'\n    \"\"\"\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n\n    max_count, max_char = 0, \"\"\n    for key, value in dict1.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_max_occurring_character(input_string):\n    max_count = 0\n    max_count_char = None\n\n    for i in input_string:\n        count = input_string.count(i)\n        if count > max_count:\n            max_count = count\n            max_count_char = i\n    return max_count_char\n\n\ninput_string = input(\"Enter a string: \")\nresult = find_max_occurring_character(input_string)\nprint(result)",
    "def max_occurring_char(str1):\n    # your code goes here\n    str1 = str1.lower()\n    res = {}\n    for i in str1:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return max(res, key=res.get)\n\n\n\n# print(max_occurring_char(\"Python\"))\n# print(max_occurring_char(\"java\"))\n# print(max_occurring_char(\"PHP\"))\n# print(max_occurring_char(\"HTML\"))",
    "def max_occuring_char(string):\n    d = dict()\n    for i in string:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\nprint(max_occuring_char(\"aabbbc\"))",
    "from collections import Counter\n\n\ndef max_occuring_char(input_str: str) -> str:\n    \"\"\"\n    Return the character with the max occurrences in a given string.\n    >>> max_occuring_char(\"aabbcc\")\n    'a'\n    >>> max_occuring_char(\"aabbccd\")\n    'a'\n    >>> max_occuring_char(\"abcddcbba\")\n    'b'\n    \"\"\"\n    char_count = Counter(input_str)\n    return max(char_count, key=lambda k: char_count[k])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef max_occur(string):\n    c = Counter(string)\n    return c.most_common(1)[0][0]\n\n\nprint(max_occur(\"Hello\"))\nprint(max_occur(\"Hellllo\"))",
    "def max_occuring_char(s: str) -> str:\n    \"\"\"\n    >>> max_occuring_char('abcabc')\n    'a'\n    >>> max_occuring_char('abcbad')\n    'b'\n    >>> max_occuring_char('abc')\n    'a'\n    >>> max_occuring_char('bacbac')\n    'b'\n    \"\"\"\n    d = {}\n    max_char, max_count = \"\", 0\n    for char in s:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n\n    for key, value in d.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occur(string):\n    max_char = string[0]\n    max_count = 0\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\n\nstring = input(\"Enter a string: \")\nprint(max_occur(string))",
    "def find_max_occurring_character(string):\n    string_list = list(string)\n    max_count = 0\n    max_char = \"\"\n    for i in string_list:\n        count = 0\n        for j in string_list:\n            if i == j:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_char = i\n    return max_char\n\n\nprint(find_max_occurring_character(\"sbcdefghijklmnopqrstuvwxyz\"))",
    "def find_max_char(string):\n    return max(set(string), key=string.count)\n\n\nif __name__ == \"__main__\":\n    print(find_max_char(\"aabbcc\"))",
    "def max_occuring_character(string: str) -> str:\n    \"\"\"\n    Returns the maximum occurring character in a given string.\n    >>> max_occuring_character(\"abcabc\")\n    'a'\n    >>> max_occuring_character(\"ababab\")\n    'a'\n    >>> max_occuring_character(\"abababab\")\n    'a'\n    \"\"\"\n\n    char_dict = {}\n    max_char = \"\"\n    max_char_count = 0\n\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for key in char_dict:\n        if char_dict[key] > max_char_count:\n            max_char_count = char_dict[key]\n            max_char = key\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occurring_char(string):\n    max_count = 0\n    for char in string:\n        if string.count(char) > max_count:\n            max_count = string.count(char)\n            char_max = char\n    return char_max\n\n\nif __name__ == \"__main__\":\n    print(max_occurring_char(\"apple\"))",
    "from collections import Counter\n\n\ndef max_char(input_str):\n    \"\"\"\n    Returns the maximum occurring character in a given string.\n\n    >>> max_char('abbbc')\n    'b'\n    >>> max_char('aabbcc')\n    'a'\n    >>> max_char('aabbc')\n    'a'\n    >>> max_char('aabbcc')\n    'a'\n    \"\"\"\n    char_freq = Counter(input_str)\n    return max(char_freq.keys(), key=lambda k: char_freq[k])\n\n\ndef main():\n    \"\"\"\n    \"\"\"\n    print(max_char(input()))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurrence_char(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_char = None\n    max_char_count = 0\n    for char in string:\n        char_count = string.count(char)\n        if char_count > max_char_count:\n            max_char = char\n            max_char_count = char_count\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    print(max_occurrence_char(\"hello world!\"))",
    "def max_char(input_str):\n    \"\"\"\n    >>> max_char('abcabcabc')\n    'c'\n    >>> max_char('abc')\n    'a'\n    \"\"\"\n    char_dict = {}\n    for char in input_str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    max_char = \"\"\n    max_count = -1\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occur(string):\n    \"\"\"\n    >>> max_occur('abcb')\n    'b'\n    >>> max_occur('abcabc')\n    'a'\n    >>> max_occur('abcbabcb')\n    'b'\n    \"\"\"\n\n    hash = {}\n\n    for char in string:\n        if char in hash:\n            hash[char] += 1\n        else:\n            hash[char] = 1\n\n    max_char = None\n    max_count = 0\n\n    for key, val in hash.items():\n        if val > max_count:\n            max_char = key\n            max_count = val\n\n    return max_char\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def max_occurring_char(str1):\n    str1 = str1.lower()\n    max_char = str1[0]\n    max_count = 0\n    for i in range(len(str1)):\n        count = 0\n        for j in range(len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n        if count > max_count:\n            max_char = str1[i]\n            max_count = count\n\n    return max_char\n\n\nstr1 = \"abccde\"\nprint(\"Max occurring character in the given string is: \", max_occurring_char(str1))",
    "from collections import Counter\n\n\ndef max_occurring_character(input_string):\n    max_occurring_character = Counter(input_string).most_common(1)\n    return max_occurring_character[0][0]\n\n\nprint(max_occurring_character(\"aabbbcccc\"))",
    "def max_occurring_character(input_string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    count = {}\n    for c in input_string:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n\n    return max(count, key=count.get)\n\n\nif __name__ == \"__main__\":\n    assert max_occurring_character(\"apple\") == \"e\"\n    assert max_occurring_character(\"banana\") == \"a\"\n    assert max_occurring_character(\"cherry\") == \"r\"",
    "from collections import Counter\n\n\ndef max_occurring_char(str1):\n    c = Counter(str1)\n    return c.most_common(1)[0][0]\n\n\nstr1 = \"abcdefghijklmnopqrstuvwxyz\"\nprint(\"Max occurring character in the string is:\", max_occurring_char(str1))",
    "from collections import Counter\n\n\ndef max_occur(string):\n    return Counter(string).most_common(1)\n\n\nprint(max_occur(\"Python\"))",
    "def max_occuring_char(str1):\n    \"\"\"\n    >>> max_occuring_char('abcabc')\n    'a'\n    >>> max_occuring_char('abcdefghijklmnopqrstuvwxyz')\n    'z'\n    \"\"\"\n    max_occur = 0\n    max_char = \"\"\n    char_dict = {}\n\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n        if char_dict[char] > max_occur:\n            max_occur = char_dict[char]\n            max_char = char\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occuring_char(str1):\n    d = dict()\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_char = max(d, key=d.get)\n    print(max_char)\n\n\nmax_occuring_char(\"geeksforgeeks\")",
    "def max_char(s):\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    max_count = max(d.values())\n\n    for key, value in d.items():\n        if value == max_count:\n            return key\n\n\nprint(max_char(\"abcdefghijklmnopqrstuvwxyz\"))",
    "def max_char(str1):\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d[max(d, key=d.get)]\n\n\nprint(max_char(\"geeksforgeeks\"))",
    "def max_occuring(string):\n    dict_count = {}\n    for i in string:\n        if i in dict_count:\n            dict_count[i] += 1\n        else:\n            dict_count[i] = 1\n    max_count = 0\n    for key, value in dict_count.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\n\nprint(max_occuring(\"abcdde\"))",
    "def max_occuring_char(input_string):\n    \"\"\"\n    Find the maximum occurring character in a given string\n\n    >>> max_occuring_char(\"abcab\")\n    'a'\n    >>> max_occuring_char(\"ab\")\n    'a'\n    >>> max_occuring_char(\"\")\n    ''\n    \"\"\"\n    if input_string == \"\":\n        return \"\"\n\n    max_count = 0\n    max_char = input_string[0]\n\n    for i in input_string:\n        count = input_string.count(i)\n        if count > max_count:\n            max_count = count\n            max_char = i\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def max_occur_ch(string):\n    d = {}\n    for i in string:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\nstring = input(\"Enter a string: \")\nprint(max_occur_ch(string))",
    "def max_char(str1):\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return max(dict, key=dict.get)\n\n\ndef main():\n    str1 = input(\"Enter a string: \")\n    print(max_char(str1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef max_occurring_char(str1: str) -> str:\n    \"\"\"\n    This function takes a string and returns the character which occurs maximum number of times.\n    >>> max_occurring_char('google')\n    'o'\n    >>> max_occurring_char('google123')\n    'e'\n    >>> max_occurring_char('goo')\n    'o'\n    >>> max_occurring_char('go')\n    'o'\n    >>> max_occurring_char('gooooo')\n    'o'\n    >>> max_occurring_char('google')\n    'o'\n    \"\"\"\n    return Counter(str1).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occurring(string):\n    char_dict = {}\n    max_char = \"\"\n    max_occur = 0\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n        if char_dict[char] > max_occur:\n            max_occur = char_dict[char]\n            max_char = char\n    return max_char\n\n\nif __name__ == \"__main__\":\n    string = \"abccdddd\"\n    print(max_occurring(string))",
    "def max_char(string):\n    d = {}\n    for i in string:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return max(d, key=d.get)\n\n\nprint(max_char(\"helloworld\"))",
    "from collections import Counter\n\n\ndef max_occurring_character(text: str) -> str:\n    \"\"\"\n    Finds the maximum occurring character in a given string.\n    >>> max_occurring_character('aaabbc')\n    'a'\n    >>> max_occurring_character('abca')\n    'a'\n    >>> max_occurring_character('abc')\n    'a'\n    \"\"\"\n    return Counter(text).most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occur_char(str1: str) -> str:\n    \"\"\"\n    >>> max_occur_char('abcdefghijklmnopqrstuvwxyz')\n    'z'\n    >>> max_occur_char('aabbccddeeffgghhiii')\n    'i'\n    >>> max_occur_char('abcdefghijklmnopqrstuvwxyz1234567890')\n    '0'\n    \"\"\"\n    count_dict = dict()\n\n    for c in str1:\n        if c in count_dict:\n            count_dict[c] += 1\n        else:\n            count_dict[c] = 1\n\n    max_count = max(count_dict.values())\n    return [k for k, v in count_dict.items() if v == max_count][0]\n\n\ndef max_occur_char_eff(str1: str) -> str:\n    \"\"\"\n    >>> max_occur_char_eff('abcdefghijklmnopqrstuvwxyz')\n    'z'\n    >>> max_occur_char_eff('aabbccddeeffgghhiii')\n    'i'\n    >>> max_occur_char_eff('abcdefghijklmnopqrstuvwxyz1234567890')\n    '0'\n    \"\"\"\n    count_dict = dict()\n\n    for c in str1:\n        count_dict[c] = count_dict.get(c, 0) + 1\n\n    max_count = max(count_dict.values())\n    return [k for k, v in count_dict.items() if v == max_count][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occuring_character(input_string):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n\n    >>> max_occuring_character(\"abbbcccc\")\n    'b'\n    >>> max_occuring_character(\"abbbccd\")\n    'b'\n    >>> max_occuring_character(\"a\")\n    'a'\n    >>> max_occuring_character(\"abbc\")\n    'a'\n    \"\"\"\n    max_char = None\n    max_count = 0\n\n    for char in input_string:\n        count = input_string.count(char)\n        if count > max_count:\n            max_char = char\n            max_count = count\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_occuring_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_char = \"\"\n    max_count = 0\n    for char, count in char_dict.items():\n        if count > max_count:\n            max_char = char\n            max_count = count\n    return max_char\n\n\nprint(max_occuring_char(\"abababababababababab\"))\nprint(max_occuring_char(\"abababababababababab\"))\nprint(max_occuring_char(\"abababababababababab\"))\nprint(max_occuring_char(\"abababababababababab\"))\nprint(max_occuring_char(\"abababababababababab\"))",
    "def max_occurring_character(input_str):\n    dict_freq = {}\n    for char in input_str:\n        if char in dict_freq:\n            dict_freq[char] += 1\n        else:\n            dict_freq[char] = 1\n\n    max_char = max(dict_freq, key=dict_freq.get)\n    return max_char\n\n\nprint(max_occurring_character(\"abbbc\"))\nprint(max_occurring_character(\"abc\"))\nprint(max_occurring_character(\"abbccc\"))",
    "from collections import Counter\n\ndef max_char(str1):\n    c = Counter(str1)\n    return max(c, key = c.get)\n\nprint(max_char(\"google\"))\nprint(max_char(\"geeksforgeeks\"))\nprint(max_char(\"thequickbrownfoxjumpsoverthelazydog\"))\nprint(max_char(\"banana\"))\nprint(max_char(\"mango\"))\nprint(max_char(\"apple\"))\nprint(max_char(\"hello\"))\nprint(max_char(\"hello\"))\nprint(max_char(\"h\"))\nprint(max_char(\"\"))",
    "from collections import Counter\n\n\ndef max_occurring_character(string):\n    c = Counter(string)\n    return c.most_common(1)[0][0]\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(max_occurring_character(string))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}