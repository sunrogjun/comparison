{
  "problem": {
    "task_id": "MBPP/215",
    "prompt": "Write a function to decode a run-length encoded given list.",
    "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
    "test_list": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ],
    "challenge_test_list": [],
    "problem_id": 204
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from typing import List\n\n\ndef decode_run_length_encoding(lst: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        lst (List[int]): A run-length encoded list.\n\n    Examples:\n        >>> decode_run_length_encoding([4, 1, 2, 2, 2, 2, 3, 4, 6, 2, 2])\n        [1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6, 2, 2]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), 2):\n        result += [lst[i]] * lst[i + 1]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length_encoding([4, 1, 2, 2, 2, 2, 3, 4, 6, 2, 2]))",
    "def decode(lst):\n    # O(n) time | O(n) space\n    decoded = []\n    for i in range(0, len(lst), 2):\n        decoded += [lst[i]] * lst[i+1]\n    return decoded",
    "def decode_run_length(lst):\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        new_lst.append(lst[i] * lst[i + 1])\n    return new_lst\n\n\nif __name__ == '__main__':\n    assert decode_run_length([1, 4, 1, 3, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == [1, 4, 1, 3, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert decode_run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert decode_run_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "from itertools import islice\n\ndef decode_run_length_encoded(encoded_list):\n    \"\"\"\n    This function takes in a run-length encoded list and returns a decoded list.\n\n    >>> decode_run_length_encoded([4, 1, 3, 2, 1, 2, 3, 4, 1, 3, 1, 2, 1, 1, 3, 3])\n    [1, 3, 2, 2, 1, 1, 2, 3, 1, 3, 1, 1, 2, 1, 1, 3, 3]\n    >>> decode_run_length_encoded([1, 1])\n    [1, 1]\n    >>> decode_run_length_encoded([])\n    []\n    \"\"\"\n    decoded_list = []\n\n    for i in range(0, len(encoded_list), 2):\n        decoded_list.extend([encoded_list[i + 1]] * encoded_list[i])\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import Counter\n\n\ndef run_length_decode(encoded_list):\n    \"\"\"\n    >>> run_length_decode([1, 2, 2, 3, 1, 4])\n    [1, 2, 2, 3, 1, 4]\n    \"\"\"\n    if not encoded_list:\n        return []\n    elif len(encoded_list) == 1:\n        return [encoded_list[0]]\n    else:\n        decoded_list = []\n        for k, v in Counter(encoded_list).items():\n            decoded_list.extend([k] * v)\n        return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_run_length_encoded_list(input_list):\n    # initialize an empty output list\n    output_list = []\n\n    # loop over every element in the input list\n    for i in range(0, len(input_list), 2):\n        # append the value to the output list the number of times indicated by the number\n        output_list += [input_list[i]] * input_list[i + 1]\n\n    return output_list\n\nprint(decode_run_length_encoded_list([1, 4, 2, 2, 3, 2, 1, 3, 2, 2, 1]))",
    "def decode_run_length_encoded_list(encoded_list):\n    \"\"\"\n    :param encoded_list: list of run-length encoded items\n    :return: decoded list\n    \"\"\"\n    decoded_list = []\n    for i in range(0, len(encoded_list), 2):\n        decoded_list.extend([encoded_list[i]] * encoded_list[i + 1])\n    return decoded_list",
    "from typing import List\n\n\ndef decode_run_length_encoded(encoded: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        encoded (List[int]): A run-length encoded list\n\n    Examples:\n        >>> decode_run_length_encoded([2, 4, 6, 8])\n        [4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8]\n\n    Returns:\n        List[int]: The decoded list\n    \"\"\"\n    decoded = []\n    for i in range(0, len(encoded), 2):\n        decoded += [encoded[i]] * encoded[i + 1]\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import groupby\n\n\ndef decode_run_length(encoded_list):\n    \"\"\"\n    Decode a run-length encoded list.\n\n    :param encoded_list: List of run-length encoded numbers\n    :type encoded_list: list\n    :return: Decoded list\n    :rtype: list\n    \"\"\"\n    return [number for _, number in groupby(encoded_list)]\n\n\ndef main():\n    encoded_list = [2, 4, 1, 6, 1]\n    decoded_list = decode_run_length(encoded_list)\n    print(decoded_list)\n\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef decode_run_length_encoding(encoding):\n    \"\"\"\n    >>> decode_run_length_encoding([3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n    decoded = []\n    for i in encoding:\n        decoded.extend([i] * i)\n    return decoded\n\n\ndef decode_run_length_encoding_efficient(encoding):\n    \"\"\"\n    >>> decode_run_length_encoding_efficient([3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6, 3, 1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n    decoded = []\n    for i, v in Counter(encoding).items():\n        decoded.extend([i] * v)\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    do",
    "from itertools import repeat\n\n\ndef decode_run_length(lst):\n    return [x for x in lst for y in repeat(x, lst[x])]\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length([3, 4, 5, 3, 2, 1, 3, 3, 1]))",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef decode_run_length_encoded(encoded: List[int]) -> List[int]:\n    decoded = []\n\n    i = 0\n    while i < len(encoded):\n        count = encoded[i]\n        i += 1\n        element = encoded[i]\n        i += 1\n        decoded += count * [element]\n\n    return decoded\n\n\ndef main():\n    encoded = [1, 4, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1]\n    decoded = decode_run_length_encoded(encoded)\n    print(decoded)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def run_length_decoder(rle_list):\n    \"\"\"\n    >>> run_length_decoder([3, 7, 1, 4, 1, 1, 2])\n    [7, 7, 7, 4, 4, 4, 2]\n    \"\"\"\n    decoded = []\n    for i in range(0, len(rle_list), 2):\n        decoded += [rle_list[i]] * rle_list[i + 1]\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def decode_run_length(lst):\n    # O(n) time | O(n) space\n    decoded_list = []\n    for i in range(0, len(lst), 2):\n        decoded_list.extend([lst[i + 1]] * lst[i])\n    return decoded_list",
    "from typing import List\n\n\ndef decode_run_length(encoded: List[int]) -> List[int]:\n    \"\"\"Decodes the run-length encoded list.\n\n    Args:\n        encoded (List[int]): run-length encoded list\n\n    Returns:\n        List[int]: decoded list\n    \"\"\"\n    decoded: List[int] = []\n    i = 0\n    while i < len(encoded):\n        decoded += [encoded[i]] * encoded[i + 1]\n        i += 2\n    return decoded\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length([1, 3, 2, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]))",
    "def decode(array):\n    if not array:\n        return []\n\n    return array[0] * decode(array[1:])\n\n\nassert decode([]) == []\nassert decode([1]) == [1]\nassert decode([2, 1]) == [1, 1]\nassert decode([3, 2, 1]) == [1, 1, 1]",
    "def run_length_decoding(encoded_list):\n    decoded_list = []\n    for i in range(0, len(encoded_list), 2):\n        decoded_list.extend([encoded_list[i + 1]] * encoded_list[i])\n    return decoded_list\n\n\nencoded_list = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nprint(run_length_decoding(encoded_list))",
    "def decode_run_length(encoded):\n    \"\"\"\n    :param encoded: List of encoded values\n    :return: Decoded values\n    \"\"\"\n    decoded = []\n    i = 0\n    while i < len(encoded):\n        if encoded[i] != 0:\n            decoded.append(encoded[i])\n        else:\n            decoded.append(encoded[i + 1])\n            i += 1\n        i += 1\n    return decoded\n\n\ndef main():\n    encoded = [1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 0]\n    print(\"Encoded: \" + str(encoded))\n    decoded = decode_run_length(encoded)\n    print(\"Decoded: \" + str(decoded))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef decode_list(encoded: List[int]) -> List[int]:\n    \"\"\"\n    Decode a run-length encoded list.\n    >>> decode_list([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> decode_list([1, 1, 1])\n    [1, 1, 1]\n    >>> decode_list([1, 2, 3, 4, 5, 6, 7])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> decode_list([1, 1])\n    [1, 1]\n    >>> decode_list([1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1]\n    \"\"\"\n    decoded = []\n\n    for i in range(0, len(encoded), 2):\n        count = encoded[i]\n        value = encoded[i + 1]\n\n        for _ in range(count):\n            decoded.append(value)\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length(lst: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_run_length([3, 5, 3, 2, 4, 1])\n    [5, 5, 5, 2, 2, 2, 4]\n    \"\"\"\n    decoded = []\n\n    for i in range(0, len(lst), 2):\n        count = lst[i]\n        val = lst[i + 1]\n        decoded += [val] * count\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_list(lst):\n    \"\"\"\n    >>> decode_list([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> decode_list([3, 1, 3, 1, 2, 1, 3, 2])\n    [1, 1, 1, 2, 2, 3, 3]\n    \"\"\"\n    decoded_list = []\n    for i in range(0, len(lst), 2):\n        decoded_list.extend([lst[i + 1]] * lst[i])\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(n) time | O(n) space\ndef runLengthDecode(encoded):\n    decoded = []\n    i = 0\n    while i < len(encoded):\n        count = encoded[i]\n        i += 1\n        char = encoded[i]\n        i += 1\n        decoded += [char] * count\n    return decoded",
    "def decode(encoded):\n    \"\"\"\n    >>> decode([1, 1, 2, 3, 1, 1, 2, 5, 1, 1, 2, 5, 1, 1, 2, 5])\n    [1, 2, 3, 1, 2, 5, 1, 2, 5, 1, 2, 5]\n    \"\"\"\n    decoded = []\n    for i in range(0, len(encoded), 2):\n        decoded += [encoded[i]] * encoded[i + 1]\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def encode(list):\n    encoded_list = []\n    for i in list:\n        encoded_list.append(i)\n        encoded_list.append(list.count(i))\n    return encoded_list\n\ndef decode(encoded_list):\n    decoded_list = []\n    i = 0\n    while i < len(encoded_list):\n        decoded_list.append(encoded_list[i])\n        i += 1\n        if encoded_list[i] == 0:\n            i += 1\n        else:\n            for j in range(encoded_list[i]):\n                decoded_list.append(encoded_list[i - 1])\n            i += 1\n    return decoded_list\n\nprint(decode(encode([1, 2, 3, 4, 5, 5, 5, 2, 3, 2, 1, 4, 2, 3, 2, 2, 2, 2, 2, 2, 2])))",
    "from typing import List\n\n\ndef decode_run_length_encoded(encoded: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        encoded (List[int]): a run-length encoded list of integers\n\n    Returns:\n        List[int]: the decoded list\n\n    Examples:\n        >>> decode_run_length_encoded([1, 3, 5, 6, 1, 2])\n        [1, 3, 5, 6, 1, 2]\n        >>> decode_run_length_encoded([1, 1, 1, 1, 1])\n        [1, 1, 1, 1, 1]\n        >>> decode_run_length_encoded([1, 1, 1, 2, 3, 1])\n        [1, 1, 1, 2, 3, 1]\n    \"\"\"\n    decoded: List[int] = []\n    for i in range(0, len(encoded), 2):\n        decoded.extend([encoded[i]] * encoded[i + 1])\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length_encoded([1, 3, 5, 6, 1, 2]))\n    print(decode_run_length_encoded([1, 1, 1, 1, 1]))\n    print(decode_run_length_encoded([1, 1, 1, 2, 3, 1]))",
    "from itertools import chain\n\n\ndef decode_run_length(lst):\n    \"\"\"\n    Decode a run-length encoded list.\n\n    :param lst: List to decode.\n    :type lst: list\n    :return: Decoded list.\n    :rtype: list\n    \"\"\"\n    return list(chain(*[x * [y] if isinstance(x, int) else x for x, y in lst]))\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length([1, 2, 3, 4, 5]))\n    print(decode_run_length([2, 3, 1, 4, 1, 5]))\n    print(decode_run_length([2, 3, 1, 4, 1, 5, 3, 2, 1, 8]))",
    "\"\"\"Question:\nWrite a function to decode a run-length encoded given list.\nExample:\nGiven encoded list = [(1, 4), (2, 4), (3, 1), (0, 1)]\nIt should return a decoded list = [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 0, 0]\nHints:\nUse recursion, and an if-elif-else statement inside a loop.\n\n\"\"\"\ndef decodeList(lst):\n    result = []\n    for i in lst:\n        result.extend([i[0]]*i[1])\n    return result",
    "from typing import List\n\n\ndef decode_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_list([2, 4, 6, 8])\n    [4, 4, 6, 6]\n    >>> decode_list([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> decode_list([2, 4, 10, 12])\n    [4, 4, 12, 12]\n    >>> decode_list([1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    decoded_list = []\n\n    for i in range(0, len(encoded_list), 2):\n        decoded_list.extend([encoded_list[i]] * encoded_list[i + 1])\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode(encoded):\n    decoded = []\n    for i in range(0, len(encoded), 2):\n        decoded.append(encoded[i + 1] * encoded[i])\n\n    return decoded\n\n\nencoded = [1, 4, 2, 3]\nprint(decode(encoded))",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    decoded_list = []\n    for i in range(0, len(encoded_list), 2):\n        count = encoded_list[i]\n        value = encoded_list[i + 1]\n        decoded_list.extend([value] * count)\n    return decoded_list\n\n\n# O(n) time | O(1) space\ndef decode_run_length_encoded_list_inplace(encoded_list: List[int]) -> List[int]:\n    encoded_list_index = 0\n    decoded_list = []\n    while encoded_list_index < len(encoded_list):\n        count = encoded_list[encoded_list_index]\n        value = encoded_list[encoded_list_index + 1]\n        decoded_list.extend([value] * count)\n        encoded_list_index += 2\n    return decoded_list",
    "def decode_run_length_encoded_list(lst):\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        for j in range(lst[i]):\n            new_lst.append(lst[i+1])\n    return new_lst\n\nprint(decode_run_length_encoded_list([1, 2, 3, 4, 5]))\nprint(decode_run_length_encoded_list([1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5]))\nprint(decode_run_length_encoded_list([1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "def decode_list(encoded):\n    decoded = []\n    for i in range(0, len(encoded), 2):\n        decoded += [encoded[i+1]] * encoded[i]\n    return decoded\n\n\ndef test_decode_list():\n    \"\"\"\n    >>> test_decode_list()\n    \"\"\"\n    assert decode_list([1, 4, 1, 4, 1, 9, 1, 4]) == [4, 4, 4, 9, 4]\n    assert decode_list([2, 4, 4, 3]) == [4, 4, 4, 4]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from itertools import islice\nfrom typing import List\n\n\ndef decode_run_length(encoded: List[int]) -> List[int]:\n    \"\"\"\n    O(n) time and O(n) space\n    \"\"\"\n    decoded = []\n\n    for num, count in islice(encoded, 0, len(encoded), 2):\n        decoded.extend([num] * count)\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    assert decode_run_length([1, 4, 1, 4, 1, 9, 1, 4]) == [1, 1, 1, 1, 9]",
    "from itertools import chain\n\n\ndef decode_run_length(encoded):\n    return list(chain(*[(x, y) for x, y in encoded]))\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ([1, 1, 2, 3, 1, 1], [1, 1, 1, 1, 1, 2, 3, 1, 1]),\n        ([1, 3, 2, 4, 5, 3, 1, 5], [1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 5, 5, 5, 5, 5, 1, 5]),\n        ([1, 3, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n    ]\n    for test_case, expected_result in test_cases:\n        assert decode_run_length(test_case) == expected_result",
    "def decode_run_length(list):\n    decoded_list = []\n    for i in range(0, len(list), 2):\n        count = list[i]\n        val = list[i+1]\n        for j in range(count):\n            decoded_list.append(val)\n    return decoded_list\n\nprint(decode_run_length([1, 4, 1, 3, 1, 3, 1, 2, 2, 2]))",
    "def run_length_decoding(encoded):\n    \"\"\"\n    >>> run_length_decoding([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> run_length_decoding([1, 2, 3, 4, 5, 6, 7, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> run_length_decoding([2, 2, 2, 2, 2, 2, 2, 2])\n    [2, 2, 2, 2, 2, 2, 2, 2]\n    >>> run_length_decoding([1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    decoded = []\n    for i in range(0, len(encoded), 2):\n        decoded.extend([encoded[i]] * encoded[i + 1])\n    return decoded\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from itertools import groupby\n\n\ndef run_length_decode(encoded_list):\n    \"\"\"Return a decoded list.\"\"\"\n    decoded_list = []\n    for i in encoded_list:\n        if type(i) is int:\n            decoded_list.extend([encoded_list[-1]] * i)\n        else:\n            decoded_list.append(i)\n    return decoded_list\n\n\ndef run_length_decode_itertools(encoded_list):\n    \"\"\"Return a decoded list.\"\"\"\n    return [i * j for i, j in groupby(encoded_list)]\n\n\ndef main():\n    \"\"\"Main function call.\"\"\"\n    encoded_list = [2, 'a', 3, 'b', 1, 'a', 1, 'c']\n    print(run_length_decode(encoded_list))\n    print(run_length_decode_itertools(encoded_list))\n\n\nif __name__ == '__main__':\n    main()",
    "from itertools import chain\nfrom typing import List\n\n\ndef decode(lst: List[int]) -> List[int]:\n    \"\"\"\n    Decode a run-length encoded list.\n    :param lst: The list to decode.\n    :return: The decoded list.\n    >>> decode([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> decode([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    >>> decode([1, 2, 3, 4, 5, 6, 7, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> decode([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    \"\"\"\n    return list(chain.from_iterable([[i] * j for j, i in lst]))\n\n\nif __name__ == \"__main__\":\n    print(decode([1, 2, 3, 4, 5]))\n    print(decode([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))\n    print(decode([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(decode([1, 2, 1",
    "from itertools import groupby\n\n\n# O(n) time | O(n) space\ndef decodeRunLengthEncodedList(encodedList):\n\tdecodedList = []\n\tfor num in encodedList:\n\t\tdecodedList.extend([encodedList[i]] * encodedList[i])\n\treturn decodedList\n\n\n# O(n) time | O(1) space\ndef decodeRunLengthEncodedList(encodedList):\n\tdecodedList = []\n\ti = 0\n\twhile i < len(encodedList):\n\t\tnum = encodedList[i]\n\t\tdecodedList.extend([encodedList[i]] * encodedList[i + 1])\n\t\ti += 2\n\treturn decodedList\n\n\nprint(decodeRunLengthEncodedList([1, 2, 3, 4]))",
    "def decode(arr):\n    \"\"\"\n    >>> decode([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    output = []\n    i = 0\n    while i < len(arr):\n        count = arr[i]\n        if count == 0:\n            break\n        if count == 1:\n            output.append(arr[i + 1])\n            i += 2\n            continue\n        for _ in range(count):\n            output.append(arr[i + 1])\n        i += 2\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(n) time | O(n) space\ndef runLengthDecode(encodedList):\n    decodedList = []\n    for i in range(0, len(encodedList), 2):\n        numToAppend = encodedList[i]\n        charToAppend = encodedList[i+1]\n        decodedList += [charToAppend] * numToAppend\n    return decodedList\n\n\n\"\"\"\nExample:\nencoded = [1, 2, 3, 4]\ndecoded = ['a', 'a', 'b', 'c', 'c', 'c']\n\nInput: encoded = [1, 2, 3, 4]\nOutput: [\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]\n\"\"\"",
    "def run_length_decode(encoded_list):\n    decoded_list = []\n    for num in encoded_list:\n        if type(num) == int:\n            decoded_list.append(num)\n        else:\n            decoded_list.extend([num] * num)\n    return decoded_list\n\n\ndef test_run_length_decode():\n    \"\"\"\n    >>> test_run_length_decode()\n    True\n    \"\"\"\n    encoded_list = [3, 'a', 'b', 'c', 2, 'd', 'e', 'f', 4, 'g', 'h', 'i', 'j']\n    decoded_list = ['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e', 'f', 'd', 'e', 'f', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\n    assert run_length_decode(encoded_list) == decoded_list\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_list(lst: List[int]) -> List[int]:\n    \"\"\"Decode a run-length encoded list.\n\n    Examples:\n        >>> decode_run_length_encoded_list([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n        >>> decode_run_length_encoded_list([1, 1, 2, 2, 3, 3, 4, 5])\n        [1, 1, 2, 2, 3, 3, 4, 5]\n        >>> decode_run_length_encoded_list([1, 2, 3, 4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n        >>> decode_run_length_encoded_list([1, 1, 2, 2, 3, 3, 4, 5, 6])\n        [1, 1, 2, 2, 3, 3, 4, 5, 6]\n        >>> decode_run_length_encoded_list([1, 1, 1, 1, 1])\n        [1, 1, 1, 1, 1]\n    \"\"\"\n    if not lst:\n        return []\n\n    res = []\n\n    for i in range(0, len(lst), 2):\n        count = lst[i]\n        val = lst[i + 1]\n\n        res.extend([val] * count)\n\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_run_length(run_length_list):\n    \"\"\"\n    Decode a run length encoded list of integers.\n\n    Args:\n       run_length_list(list): list to be decoded\n    Returns:\n       decoded_list: decoded list\n    \"\"\"\n\n    decoded_list = []\n    for index, item in enumerate(run_length_list):\n        if index % 2 == 0:\n            decoded_list.extend([item] * run_length_list[index + 1])\n    return decoded_list\n\n\ndef main():\n    \"\"\"\n    Decoding run-length encoded list\n    \"\"\"\n\n    run_length_list = [1, 4, 1, 3, 1, 6, 1, 5, 1, 2]\n    print(decode_run_length(run_length_list))\n\n\nif __name__ == \"__main__\":\n    main()",
    "\"\"\"Question:\nWrite a function to decode a run-length encoded given list.\nExample:\nInput: A = [1, 4, 1, 3, 1, 1, 4, 1, 3, 1, 1]\nOutput: [1, 4, 1, 3, 1, 1, 4, 1, 3, 1, 1]\nHints:\nUse a while loop with a decreasing while condition to decode the list.\n\n\"\"\"\ndef decoder(A):\n    i = 0\n    while i < len(A):\n        if A[i] < 0:\n            A[i] = -A[i]\n            for j in range(A[i]):\n                A.insert(i, A[i-1])\n                i += 1\n        i += 1\n    return A\n\na= [1, 4, 1, 3, 1, 1, 4, 1, 3, 1, 1]\nprint decoder(a)",
    "from typing import List\n\n\ndef decode_run_length(run_length_encoded: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        run_length_encoded (List[int]): run length encoded list\n\n    Returns:\n        List[int]: decoded list\n    \"\"\"\n    return [\n        run_length_encoded[index]\n        for index in range(len(run_length_encoded))\n        if index % 2 == 0\n    ]\n\n\nif __name__ == \"__main__\":\n    encoded_list = [1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4]\n    print(decode_run_length(encoded_list))",
    "from itertools import groupby\n\n\ndef decode(encoded):\n    \"\"\"\n    :param encoded: List[Tuple[int, int]] - list of tuples (count, value)\n    :return: List[int] - decoded list\n    \"\"\"\n    return [\n        value\n        for count, value in encoded\n        for _ in range(count)\n    ]\n\n\ndef decode_old(encoded):\n    \"\"\"\n    :param encoded: List[Tuple[int, int]] - list of tuples (count, value)\n    :return: List[int] - decoded list\n    \"\"\"\n    return [\n        value\n        for (count, value), _ in zip(groupby(encoded), range(len(encoded)))\n        for _ in range(count)\n    ]",
    "def decode_list(lst):\n    \"\"\"\n    >>> decode_list([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> decode_list([1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8]\n    >>> decode_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    decoded_list = []\n    for i in range(len(lst) // 2):\n        decoded_list.extend(lst[i] * [lst[i + 1]])\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length(list_: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_run_length([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> decode_run_length([1, 3, 1, 2, 2, 2, 2])\n    [1, 1, 1, 2, 2, 2, 2]\n    >>> decode_run_length([1, 3, 1, 4, 2])\n    [1, 1, 1, 4, 2]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(list_), 2):\n        result += [list_[i]] * list_[i + 1]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return []\n\n    decoded = []\n\n    for i in range(0, len(arr), 2):\n        decoded.extend([arr[i + 1]] * arr[i])\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    assert decode_run_length([1, 4, 1, 3, 1, 3]) == [4, 4, 4, 3, 3, 3]",
    "from typing import List\n\n\ndef decode_run_length(encoded: List[int]) -> List[int]:\n    \"\"\"Decodes a run length encoded list.\n\n    Args:\n        encoded (List[int]): the encoded list\n\n    Returns:\n        List[int]: the decoded list\n    \"\"\"\n\n    decoded = []\n\n    for i in range(0, len(encoded), 2):\n        decoded += [encoded[i]] * encoded[i + 1]\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    encoded = [2, 4, 6, 2]\n    print(decode_run_length(encoded))",
    "from typing import List\n\n\ndef decode_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"Decodes a given list of run-length encoded numbers.\n\n    Args:\n        encoded_list (List[int]): A list of run-length encoded numbers.\n\n    Examples:\n        >>> decode_list([3, 1, 2, 3])\n        [1, 2, 2, 2, 3, 3, 3]\n\n    Returns:\n        List[int]: Decoded list.\n    \"\"\"\n    decoded_list = []\n\n    for num in encoded_list:\n        decoded_list.extend([num] * num)\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    print(decode_list([3, 1, 2, 3]))",
    "from typing import List\n\n\ndef run_length_decoding(encoded: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    decoded: List[int] = []\n\n    for idx in range(0, len(encoded), 2):\n        decoded.extend([encoded[idx + 1]] * encoded[idx])\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    encoded = [1, 2, 3, 4]\n    assert run_length_decoding(encoded) == [2, 3, 4, 4]\n\n    encoded = [1, 1, 1, 2, 3, 4]\n    assert run_length_decoding(encoded) == [1, 1, 1, 2, 3, 4]\n\n    encoded = [2, 4, 6, 8]\n    assert run_length_decoding(encoded) == [4, 6, 8, 8]",
    "from itertools import islice\n\n\ndef run_length_decode(encoded):\n    decoded = []\n    for num, group in groupby(encoded):\n        decoded += [next(group)] * int(num)\n    return decoded\n\n\nif __name__ == \"__main__\":\n    encoded = [2, 4, 6, 2, 7, 1, 2, 4, 6, 2]\n    print(run_length_decode(encoded))",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    decoded_list = []\n\n    i = 0\n    while i < len(encoded_list):\n        if encoded_list[i] == 0:\n            i += 1\n        else:\n            decoded_list.append(encoded_list[i])\n            encoded_list[i] -= 1\n\n    return decoded_list\n\n\nprint(decode_run_length_encoded_list([2, 4, 6, 8]))",
    "def decode_run_length_encoded_list(lst):\n    \"\"\"\n    >>> decode_run_length_encoded_list([1, 4, 1, 2, 1, 3, 2, 1, 3, 1])\n    [1, 2, 2, 3, 3, 3]\n\n    >>> decode_run_length_encoded_list([1, 1, 2, 3, 1])\n    [1, 1, 2, 3, 1]\n\n    >>> decode_run_length_encoded_list([1, 1, 1, 2, 3, 1, 1, 1, 1, 2])\n    [1, 1, 1, 2, 3, 1, 1, 1, 1, 2]\n\n    >>> decode_run_length_encoded_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n    >>> decode_run_length_encoded_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 2])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 2]\n\n    >>> decode_run_length_encoded_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n    >>> decode_run_length_encoded_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1, 1, 1, 1, 1, 1, 1,",
    "def decode_run_length_encoded(encoded_list):\n    decoded_list = []\n    i = 0\n    while i < len(encoded_list):\n        if encoded_list[i] != 0:\n            decoded_list.append(encoded_list[i])\n        else:\n            decoded_list.append(encoded_list[i + 1])\n            i += 1\n        i += 1\n    return decoded_list\n\n\nprint(decode_run_length_encoded([1, 2, 3, 4, 5, 0, 3, 0, 1, 0, 2, 0, 3, 3, 0, 0, 2]))",
    "from typing import List\n\n\ndef decode_run_length(encoded: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_run_length([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9]\n    >>> decode_run_length([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9]\n    \"\"\"\n    decoded = []\n    i = 0\n    while i < len(encoded):\n        decoded += [encoded[i]] * encoded[i + 1]\n        i += 2\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_run_length_encoded_list([1, 4, 1, 3, 12, 2, 1, 2, 3, 2, 2])\n    [1, 4, 4, 4, 12, 2, 1, 2, 3, 2, 2, 2, 2]\n    \"\"\"\n    decoded_list = []\n\n    for i in range(0, len(encoded_list), 2):\n        decoded_list += [encoded_list[i]] * encoded_list[i + 1]\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length_encoded(encoded: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decoded: List[int] = []\n\n    for i in range(0, len(encoded), 2):\n        decoded.extend([encoded[i + 1]] * encoded[i])\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    assert decode_run_length_encoded([1, 4, 1, 3, 1, 12, 2, 1, 2, 3, 2, 1, 3, 1]) == [\n        4,\n        3,\n        12,\n        2,\n        3,\n        2,\n        3,\n        1,\n    ]",
    "def decode_run_length_encoded_list(lst):\n    decoded_list = []\n\n    for i in range(0, len(lst), 2):\n        decoded_list.append(lst[i] * lst[i + 1])\n\n    return decoded_list\n\n\nif __name__ == '__main__':\n    test_cases = [\n        [1, 4, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1,",
    "from typing import List\n\n\n# O(n) time | O(n) space - where n is the length of the input list\ndef runLengthDecoding(encoded: List[int]) -> List[int]:\n    if not encoded:\n        return []\n\n    decoded = []\n    i = 0\n    while i < len(encoded):\n        count = encoded[i]\n        i += 1\n        val = encoded[i]\n        i += 1\n        decoded += [val] * count\n    return decoded\n\n\n# O(n) time | O(n) space - where n is the length of the input list\ndef runLengthDecoding2(encoded: List[int]) -> List[int]:\n    if not encoded:\n        return []\n\n    encoded_size = len(encoded)\n    decoded = []\n    i = 0\n    while i < encoded_size:\n        count = encoded[i]\n        i += 1\n        val = encoded[i]\n        i += 1\n        decoded += [val] * count\n    return decoded\n\n\nencoded = [2, 4, 6, 8]\nexpected = [4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8]\n\nencoded = [1, 2, 3, 4]\nexpected = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\nencoded = [1, 1, 1, 2, 3, 4]\nexpected = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n\nencoded = [2, 4, 6, 8]\ndecoded = runLengthDecoding(encoded)\nassert decoded == expected\n\nencoded = [1, 2, 3, 4]\ndecoded = runLengthDecoding(encoded)\nassert decoded == expected\n\nencoded = [1, 1, 1, 2, 3, 4]\ndecoded =",
    "def encode_list(l):\n    \"\"\"\n    >>> encode_list([1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6])\n    [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6]\n    \"\"\"\n    encoded = []\n    for i in l:\n        encoded.append(i)\n        encoded.append(l.count(i))\n    return encoded\n\n\ndef decode_list(l):\n    \"\"\"\n    >>> decode_list([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6])\n    [1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]\n    \"\"\"\n    decoded = []\n    for i in range(0, len(l), 2):\n        for j in range(l[i + 1]):\n            decoded.append(l[i])\n    return decoded\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "from itertools import zip_longest\n\n\ndef decode(nums: list) -> list:\n    \"\"\"\n    >>> decode([1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 8, 8, 10, 11, 12, 10, 11, 12])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [\n        element for number, element in zip_longest(nums, [], fillvalue=None)\n        if number is not None\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_run_length(rle):\n    \"\"\"\n    >>> decode_run_length([3, 3, 2, 1])\n    ['a', 'a', 'a', 'b', 'c', 'd']\n    \"\"\"\n    decoded = []\n    for num, char in rle:\n        decoded.extend([char] * num)\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import chain\nfrom typing import List, Optional\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(n)\ndef decode_run_length_encoded(encoded_list: List[int]) -> List[int]:\n    if not encoded_list:\n        return []\n\n    decoded_list = []\n    i = 0\n    while i < len(encoded_list):\n        if i + 1 >= len(encoded_list):\n            break\n\n        if encoded_list[i] >= 0:\n            decoded_list.append(encoded_list[i])\n            i += 1\n        else:\n            decoded_list += [encoded_list[i]] * abs(encoded_list[i + 1])\n            i += 2\n\n    return decoded_list\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(n)\ndef decode_run_length_encoded_v2(encoded_list: List[int]) -> List[int]:\n    if not encoded_list:\n        return []\n\n    decoded_list = []\n    i = 0\n    while i < len(encoded_list):\n        if encoded_list[i] >= 0:\n            decoded_list.append(encoded_list[i])\n            i += 1\n        else:\n            decoded_list += [encoded_list[i]] * abs(encoded_list[i + 1])\n            i += 2\n\n    return decoded_list\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(n)\ndef decode_run_length_encoded_v3(encoded_list: List[int]) -> List[int]:\n    if not encoded_list:\n        return []\n\n    decoded_list = []\n    for element in encoded_list:\n        if element >= 0:\n            decoded_list.append(element)\n        else:\n            decoded_list += [element] * abs(element)\n\n    return decoded_list\n\n\n# Time complexity: O(n) where n is",
    "from itertools import starmap, repeat, chain\n\n\ndef decode(encoded):\n    \"\"\"\n    >>> list(decode([]))\n    []\n    >>> list(decode([1]))\n    [1]\n    >>> list(decode([2, 1]))\n    [1, 1]\n    >>> list(decode([2, 2, 1]))\n    [1, 1, 1]\n    >>> list(decode([2, 2, 2, 2, 1]))\n    [1, 1, 1, 1, 1]\n    >>> list(decode([2, 4, 1]))\n    [1, 1, 1, 1]\n    >>> list(decode([2, 4, 2, 2, 1]))\n    [1, 1, 1, 1, 1, 1]\n    \"\"\"\n    return chain.from_iterable(starmap(repeat, encoded))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def run_length_decode(encoded_list):\n    \"\"\"\n    >>> run_length_decode([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> run_length_decode([1, 4, 4, 2, 1])\n    [1, 4, 4, 4, 4, 2, 1]\n    >>> run_length_decode([1, 2, 3, 4, 4, 3, 2, 1, 2, 3, 4, 1, 1])\n    [1, 2, 3, 4, 4, 3, 2, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    decoded_list = []\n    for item in encoded_list:\n        decoded_list.append(item)\n        if item < 0:\n            decoded_list.append(-item)\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_run_length_encoded_list(lst):\n    decoded_list = []\n\n    for i in range(0, len(lst), 2):\n        decoded_list += [lst[i]] * lst[i + 1]\n\n    return decoded_list\n\n\ndef main():\n    list_ = [2, 4, 6, 2, 7, 10]\n    print(decode_run_length_encoded_list(list_))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef decode_run_length_encoded(lst: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        lst (List[int]): A run-length encoded list.\n\n    Examples:\n        >>> decode_run_length_encoded([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n\n        >>> decode_run_length_encoded([1, 3, 1, 2, 1, 2])\n        [1, 3, 1, 2, 1, 2]\n\n        >>> decode_run_length_encoded([1, 3, 1, 0, 2, 1, 0, 2])\n        [1, 3, 1, 2, 1, 2]\n\n    \"\"\"\n    decoded_list = []\n    for index, item in enumerate(lst):\n        if index % 2 == 0:\n            decoded_list += [item] * lst[index + 1]\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length_encoded([1, 2, 3, 4, 5]))\n    print(decode_run_length_encoded([1, 3, 1, 2, 1, 2]))\n    print(decode_run_length_encoded([1, 3, 1, 0, 2, 1, 0, 2]))",
    "def decode_list(lst):\n    decoded = []\n    for i in range(0, len(lst), 2):\n        decoded += [lst[i+1]] * lst[i]\n    return decoded\n\nprint(decode_list([1, 4, 5, 2]))\nprint(decode_list([1, 2, 3, 4, 5]))\n\n# Time complexity O(n)\n# Space complexity O(n)",
    "from typing import List\n\n\ndef run_length_decode(encoded: List[int]) -> List[int]:\n    \"\"\"\n    >>> run_length_decode([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5])\n    [1, 2, 3, 4, 5]\n    >>> run_length_decode([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    [1, 2]\n    >>> run_length_decode([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [1]\n    >>> run_length_decode([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2])\n    [1, 2]\n    >>> run_length_decode([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    decoded = []\n\n    for i in range(0, len(encoded), 2):\n        decoded.extend([encoded[i]] * encoded[i + 1])\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length(lst: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode_run_length([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
    "from typing import List\n\n\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        encoded_list: The encoded list to decode.\n\n    Returns:\n        The decoded list.\n    \"\"\"\n    decoded_list: List[int] = []\n    for i in range(0, len(encoded_list), 2):\n        decoded_list.extend([encoded_list[i + 1]] * encoded_list[i])\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    encoded_list = [2, 4, 6, 8]\n    print(f\"Encoded list: {encoded_list}\")\n    decoded_list = decode_run_length_encoded_list(encoded_list)\n    print(f\"Decoded list: {decoded_list}\")",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length(arr: List) -> List[int]:\n    result = []\n    i = 0\n\n    while i < len(arr):\n        if arr[i] >= 1:\n            result.append(arr[i])\n            i += 1\n        else:\n            result.append(arr[i + 1])\n            i += 2\n\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef decode_run_length_constant_space(arr: List) -> List[int]:\n    result = []\n    i = 0\n\n    while i < len(arr):\n        if arr[i] >= 1:\n            result.append(arr[i])\n            i += 1\n        else:\n            result.append(arr[i + 1])\n            i += 2\n\n    return result\n\n\nprint(decode_run_length([1, 2, 3, 4, 5]))\nprint(decode_run_length([3, 1, 1, 1]))\n\nprint(decode_run_length_constant_space([1, 2, 3, 4, 5]))\nprint(decode_run_length_constant_space([3, 1, 1, 1]))",
    "\"\"\"\nThe run-length encoding is a simple form of data compression in which runs of data are stored with just a single\ndata value and count.\n\nFor example, the string 'AAAABBBCCDAA' would be encoded as '4A3B2C1D2A'.\n\nImplement a function that takes in a run-length encoded list and returns the decoded list.\n\nConstraints\n\ndecoded_list \u2264 100,000 where 0 \u2264 elements of encoded_list \u2264 100\n\"\"\"\n\n\ndef run_length_decode(encoded_list):\n    decoded_list = []\n\n    for item in encoded_list:\n        if item.isdigit():\n            decoded_list += [int(item)] * int(encoded_list.pop())\n        else:\n            decoded_list.append(item)\n\n    return decoded_list\n\n\nassert run_length_decode([\"4A\", \"3B\", \"2C\", \"1D\", \"2A\"]) == [\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\", \"A\", \"A\"]\nassert run_length_decode([\"1F\", \"3Z\", \"1Q\", \"2X\", \"1A\", \"3G\", \"1W\", \"2B\", \"1M\", \"1H\"]) == [\"F\", \"Z\", \"Z\", \"Z\", \"Q\", \"X\",\n                                                                                            \"X\", \"X\", \"A\", \"G\", \"G\", \"G\",\n                                                                                            \"W\", \"W\", \"B\", \"B\", \"M\", \"H\",\n                                                                                            \"H\"]",
    "from typing import List\n\n\ndef decode(l: List[int]) -> List[int]:\n    \"\"\"\n    >>> decode([1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> decode([3, 2, 3, 4, 5, 6])\n    [2, 2, 2, 3, 4, 5, 6]\n    \"\"\"\n    i = 0\n    res = []\n\n    while i < len(l):\n        if i + 1 >= len(l):\n            res.append(l[i])\n            break\n\n        if l[i] <= 0:\n            res.append(l[i])\n        else:\n            res.extend([l[i]] * l[i + 1])\n            i += 1\n\n        i += 1\n\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import chain\nfrom collections import Counter\n\n\ndef decode(lst):\n    # Create a counter from the list\n    counter = Counter(lst)\n    # Extract the first element\n    first = counter.popitem(last=False)[0]\n    # Create a list with the decoded values\n    decoded = []\n    # Use chain to merge the first element with the following ones\n    for element in chain([first], counter.elements()):\n        decoded.append(element)\n    return decoded\n\n\ndef main():\n    # Run-length encoded list\n    lst = [3, 1, 2, 3, 3, 3, 4, 5, 4, 6]\n    print(decode(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decode_run_length_encoded_list(encoded_list: list) -> list:\n    \"\"\"\n    >>> decode_run_length_encoded_list([2, 4, 6, 8])\n    [4, 4, 6, 6]\n    \"\"\"\n    decoded_list = []\n    for i in range(0, len(encoded_list), 2):\n        decoded_list += [encoded_list[i]] * encoded_list[i + 1]\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length_encoded(lst: List) -> List:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        lst (List): run-length encoded list\n\n    Examples:\n        >>> decode_run_length_encoded([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n        >>> decode_run_length_encoded([4, 1, 2, 2, 2, 2, 3, 4, 5])\n        [4, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    \"\"\"\n    decoded_list = []\n    for item in lst:\n        decoded_list.extend([item] * item)\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"Decodes a run-length encoded list.\n\n    Args:\n        encoded_list (List[int]): encoded list\n\n    Returns:\n        List[int]: decoded list\n    \"\"\"\n    decoded_list = []\n\n    for i in range(0, len(encoded_list), 2):\n        decoded_list += [encoded_list[i]] * encoded_list[i + 1]\n\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    encoded_list = [2, 4, 6, 2]\n    assert decode_run_length_encoded_list(encoded_list) == [4, 4, 6, 6]",
    "def decode_list(lst):\n    \"\"\"\n    >>> decode_list([2, 4, 6, 2])\n    [4, 4, 6, 6]\n    \"\"\"\n    return [lst[i] for i in range(0, len(lst), 2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_list(lst):\n    decoded = []\n    for i in range(0, len(lst), 2):\n        decoded.extend([lst[i+1]]*lst[i])\n    return decoded\n\n\nif __name__ == '__main__':\n    print(decode_list([3, 4, 6, 2, 3, 5, 3, 2, 1, 3, 2, 2, 1]))",
    "def encode(lst):\n    new_lst = []\n    for i in lst:\n        new_lst.append(lst.count(i))\n        new_lst.append(i)\n    return new_lst\n\ndef decode(lst):\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        new_lst.extend([lst[i+1]] * lst[i])\n    return new_lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8]\n    encoded = encode(lst)\n    print(\"Encoded:\", encoded)\n    decoded = decode(encoded)\n    print(\"Decoded:\", decoded)\n    print(\"Original:\", lst)\n    print(\"Original == Decoded:\", lst == decoded)",
    "def decode(list):\n    for i in range(len(list)):\n        if isinstance(list[i], int):\n            list[i] = [list[i], list[i + 1]]\n    for i in range(len(list)):\n        if isinstance(list[i], int):\n            list[i] = [list[i], list[i + 1]]\n    return list\n\n\ndef main():\n    print(decode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef decode_run_length_encoded(encoded: List[int]) -> List[int]:\n    \"\"\"Decodes run-length encoded list.\n\n    Args:\n        encoded (List[int]): run-length encoded list\n\n    Returns:\n        List[int]: decoded list\n    \"\"\"\n\n    decoded = []\n\n    for i in range(0, len(encoded), 2):\n        decoded += [encoded[i + 1]] * encoded[i]\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    encoded = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    decoded = decode_run_length_encoded(encoded)\n    print(decoded)",
    "from itertools import chain\nfrom itertools import repeat\n\n\ndef decode(lst):\n    return list(chain.from_iterable(repeat(x, y) for x, y in lst))\n\n\ndef main():\n    print(\"OK\" if (decode([(2, 4), (3, 7), (4, 2)]) == [2, 2, 2, 2, 3, 3, 3, 3, 4, 4]) else \"NOT OK\")\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    \"\"\"Decode run-length encoded list.\n\n    Decode run-length encoded list.\n\n    Parameters\n    ----------\n    encoded_list : List[int]\n        The encoded list\n\n    Returns\n    -------\n    List[int]\n        The decoded list\n    \"\"\"\n    decoded_list: List[int] = []\n    i = 0\n    while i < len(encoded_list):\n        decoded_list.append(encoded_list[i])\n        if encoded_list[i] > 1:\n            encoded_list[i] -= 1\n        else:\n            i += 1\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length_encoded_list([3, 4, 1, 2]))",
    "# O(n) time | O(n) space\ndef runLengthDecode(encodedList):\n    encodedListCopy = encodedList.copy()\n    decodedList = []\n    while len(encodedListCopy) > 0:\n        decodedList.append(encodedListCopy.pop(0))\n        if encodedListCopy[0] == 0:\n            encodedListCopy.pop(0)\n        else:\n            encodedListCopy[0] -= 1\n    return decodedList\n\n\n# O(n) time | O(n) space\ndef runLengthDecode(encodedList):\n    encodedListCopy = encodedList.copy()\n    decodedList = []\n    while len(encodedListCopy) > 0:\n        count = encodedListCopy.pop(0)\n        if count == 0:\n            continue\n        decodedList.append(encodedListCopy.pop(0))\n        if len(encodedListCopy) > 0 and count > 1:\n            encodedListCopy[0] -= 1\n    return decodedList",
    "from typing import List\n\n\n# O(n) time | O(n) space\ndef decode_run_length_encoded_list(encoded_list: List[int]) -> List[int]:\n    decoded_list = []\n    idx = 0\n    while idx < len(encoded_list):\n        number = encoded_list[idx]\n        if idx + 1 < len(encoded_list):\n            count = encoded_list[idx + 1]\n        else:\n            count = 1\n        decoded_list.extend([number] * count)\n        idx += 2\n    return decoded_list\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length_encoded_list([1, 4, 1, 3, 12]))",
    "from typing import List\n\n\ndef decode_run_length(run_length: List[int]) -> List[int]:\n    \"\"\"\n    Decode run-length encoded list.\n    :param run_length: List of integers\n    :return: decoded list\n    >>> decode_run_length([2, 4, 6, 8])\n    [4, 4, 4, 4]\n    >>> decode_run_length([2, 4, 6, 8, 10])\n    [4, 4, 4, 4, 6, 6]\n    >>> decode_run_length([2, 4, 6, 8, 10, 12])\n    [4, 4, 4, 4, 6, 6, 6, 6]\n    >>> decode_run_length([2, 4, 6, 8, 10, 12, 14])\n    [4, 4, 4, 4, 6, 6, 6, 6, 10, 10]\n    >>> decode_run_length([2, 4, 6, 8, 10, 12, 14, 16])\n    [4, 4, 4, 4, 6, 6, 6, 6, 10, 10, 10, 10]\n    \"\"\"\n    output = []\n    i = 0\n    while i < len(run_length):\n        if i + 1 < len(run_length):\n            output += [run_length[i + 1]] * run_length[i]\n        else:\n            output += [run_length[i]] * (len(run_length) - i - 1)\n        i += 2\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def decode_run_length(encoded):\n    \"\"\"\n    >>> decode_run_length([5, 3, 1, 3, 2, 2, 2, 1])\n    [3, 3, 3, 1, 2, 2, 2, 1]\n    \"\"\"\n    decoded = []\n    i = 0\n    while i < len(encoded):\n        repeat_count = encoded[i]\n        repeat_value = encoded[i + 1]\n        i += 2\n        decoded.extend(repeat_count * [repeat_value])\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import groupby\nfrom typing import List\n\n\ndef decode_run_length(data: List[int]) -> List[int]:\n    \"\"\"Decode a run-length encoded given list.\n\n    Args:\n        data (List[int]): the encoded data\n\n    Examples:\n        >>> assert decode_run_length([2, 4, 3, 5, 6, 7, 2, 1, 2, 1, 3, 1, 4, 2, 1, 1]) == [4, 4, 3, 5, 5, 5, 5, 1, 2, 1, 3, 1, 4, 2, 1, 1]\n    \"\"\"\n    return [k * v for k, v in groupby(data)]\n\n\nif __name__ == \"__main__\":\n    print(decode_run_length([2, 4, 3, 5, 6, 7, 2, 1, 2, 1, 3, 1, 4, 2, 1, 1]))",
    "from collections import Counter\n\n\ndef decode_list(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        decoded_list.extend([item[1]] * item[0])\n    return decoded_list\n\n\ndef decode_list_2(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        decoded_list.extend([item[1]] * Counter(encoded_list)[item])\n    return decoded_list\n\n\nencoded_list = [[3, 'a'], [2, 'b'], [3, 'c'], [1, 'd'], [1, 'e'], [1, 'f']]\nprint(decode_list(encoded_list))\nprint(decode_list_2(encoded_list))",
    "from itertools import chain, repeat\n\n\ndef run_length_decode(rle_list):\n    \"\"\"\n    >>> run_length_decode([1, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    decoded = []\n    for num in rle_list:\n        decoded.extend(chain(repeat(num, num)))\n    return decoded\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef decode_run_length(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    decoded: List[int] = []\n\n    i = 0\n    while i < len(nums):\n        count = nums[i]\n        value = nums[i + 1]\n\n        decoded.extend([value] * count)\n\n        i += 2\n\n    return decoded\n\n\nif __name__ == \"__main__\":\n    assert decode_run_length([1, 2, 3, 4]) == [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
    "# O(n) time | O(n) space - where n is the length of the input list\ndef decodeRunLength(lst):\n    decodedLst = []\n    i = 0\n    while i < len(lst):\n        if i + 1 < len(lst) and lst[i + 1].isdigit():\n            for _ in range(int(lst[i + 1])):\n                decodedLst.append(lst[i])\n            i += 2\n        else:\n            decodedLst.append(lst[i])\n            i += 1\n\n    return decodedLst\n\n\n\"\"\"\nInput: lst = [\"1\",\"a\",\"3\",\"b\",\"2\",\"c\",\"1\",\"a\",\"1\",\"d\",\"2\",\"e\"]\nOutput: [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"a\",\"d\",\"e\",\"e\"]\nExplanation: The run-length encoding of the input list is [1,\"a\",3,\"b\",2,\"c\",1,\"a\",1,\"d\",2,\"e\"].\nThe decoded output can be obtained from the above encoding using the following steps.\nStep 1:\nThe number 1 is repeated 1 time. The output list is [\"a\"].\nStep 2:\nThe number 3 is repeated 3 times. The output list is [\"a\",\"a\",\"a\"].\nStep 3:\nThe number 2 is repeated 2 times. The output list is [\"a\",\"a\",\"a\",\"b\",\"b\"].\nStep 4:\nThe number 2 is repeated 2 times. The output list is [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\"].\nStep 5:\nThe number 1 is repeated 1 time. The output list is [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"a\"].\nStep 6:\nThe number 1 is repeated 1 time. The output list is [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"a\",\"d\"].\nStep 7:\nThe number 2 is repeated 2 times. The output list is [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"a\",\"d\",\"e\",\"e\"].\n\"\"\"",
    "def decode(string):\n\n    decoded = []\n\n    for s in string:\n        try:\n            decoded.extend([s] * int(string.pop(0)))\n        except ValueError:\n            decoded.append(s)\n\n    return decoded\n\n\ndef test_decode():\n    \"\"\"Test for decode function.\"\"\"\n    assert decode([3, \"a\", 2, \"b\", \"c\"]) == [\"a\", \"a\", \"a\", \"b\", \"c\"]\n    assert decode([2, \"a\", 1, \"b\"]) == [\"a\", \"a\", \"b\"]\n    assert decode([1, \"a\", 3, \"b\", 1, \"c\"]) == [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\"]",
    "\"\"\"\nThe encoding rule is: for every run-length encoding except the last element in the list, if the number in front of the encoded is greater than 1, then the encoded element is to be repeated that number of times. The last element in the list is to be copied as-is.\n\nFor example,\nGiven encoded list [1, 2, 3, 4, 5], return [1, 2, 2, 3, 3, 3, 4, 4, 5]\nGiven encoded list [1, 1, 2, 3, 4], return [1, 2, 2, 3, 3, 4]\n\nYour runtime beats 88.13 % of python submissions.\n\"\"\"\n\n\nclass Solution(object):\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \"\"\"\n        Method 1:\n\n        * Iterate through the list of encoded\n        * If the number is > 1, append the number of times\n        the number is to be repeated to the decoded list\n        * If the number is 1, append the number to the\n        decoded list\n\n        Your runtime beats 88.13 % of python submissions.\n        \"\"\"\n        decoded = []\n\n        for num in encoded:\n            if num > 1:\n                decoded += [encoded[encoded.index(num)]] * (num - 1)\n            else:\n                decoded += [encoded[encoded.index(num)]]\n\n        return decoded",
    "from collections import Counter\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded(lst: List) -> List:\n    result = []\n    curr = 0\n    while curr < len(lst):\n        if lst[curr] > 0:\n            result.extend([lst[curr+1]] * lst[curr])\n            lst[curr] = -1\n        curr += 2\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_2(lst: List) -> List:\n    result = []\n    curr = 0\n    while curr < len(lst):\n        if lst[curr] > 0:\n            result.extend([lst[curr+1]] * lst[curr])\n        else:\n            result.append(lst[curr+1])\n        curr += 2\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_3(lst: List) -> List:\n    result = []\n    counter = Counter(lst)\n    for num, count in counter.items():\n        if count > 0:\n            result.extend([num] * count)\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_4(lst: List) -> List:\n    result = []\n    for num, count in zip(lst[::2], lst[1::2]):\n        if count > 0:\n            result.extend([num] * count)\n        else:\n            result.append(num)\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef decode_run_length_encoded_5(lst: List) -> List:\n    result = []\n    for num, count in zip(lst[::2], lst[1::2]):\n        result.extend([num] * abs(count))\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}