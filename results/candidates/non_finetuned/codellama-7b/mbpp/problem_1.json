{
  "problem": {
    "task_id": "MBPP/12",
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
    "test_list": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ],
    "challenge_test_list": [],
    "problem_id": 1
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\nprint(sort_matrix([[1, 2], [3, 4]]))\nprint(sort_matrix([[2, 4], [3, 1]]))\nprint(sort_matrix([[4, 3], [2, 1]]))\nprint(sort_matrix([[10, 20], [30, 40]]))\nprint(sort_matrix([[4, 1], [3, 2]]))\nprint(sort_matrix([[4, 3], [2, 1]]))\nprint(sort_matrix([[3, 3], [3, 3]]))\nprint(sort_matrix([[1, 2], [3, 4], [5, 6]]))\nprint(sort_matrix([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(sort_matrix([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))",
    "from collections import namedtuple\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    This function sorts the given matrix in ascending order according to the sum of its rows.\n\n    :param matrix:\n        Given matrix.\n    :return:\n        The sorted matrix.\n    \"\"\"\n    matrix_sums = [sum(row) for row in matrix]\n    matrix_sums_indexes = list(enumerate(matrix_sums))\n    matrix_sums_indexes.sort(key=lambda x: x[1])\n    sorted_matrix = []\n\n    for _, index in matrix_sums_indexes:\n        sorted_matrix.append(matrix[index])\n\n    return sorted_matrix\n\n\ndef main():\n\n    Matrix = namedtuple(\"Matrix\", [\"matrix\", \"sorted\"])\n\n    test_cases = [\n        Matrix([[1, 2], [3, 4]], [[3, 4], [1, 2]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7, 8]], [[5, 6], [7, 8], [1, 3], [2, 4]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7, 8]], [[7, 8], [1, 3], [5, 6], [2, 4]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7, 8]], [[7, 8], [1, 3], [5, 6], [2, 4]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7, 8]], [[7, 8], [1, 3], [5, 6], [2, 4]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7, 8]], [[7, 8], [1, 3], [5, 6], [2, 4]]),\n        Matrix([[2, 4], [1, 3], [5, 6], [7,",
    "def sort_matrix(matrix):\n    # Generate a list of sums of each row\n    sum_list = [sum(i) for i in matrix]\n\n    # Sort the matrix according to the list\n    sorted_matrix = [i for _, i in sorted(zip(sum_list, matrix))]\n\n    return sorted_matrix\n\n\nif __name__ == '__main__':\n    print(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort the matrix by the sum of its rows.\n\n    :param matrix: List[List[int]] - a matrix of integers\n    :return: List[List[int]] - a sorted matrix\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = defaultdict(int)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            row_sums[i] += matrix[i][j]\n\n    # Sort the row sums\n    row_sums = sorted(row_sums.items(), key=lambda x: x[1])\n\n    # Reconstruct the sorted matrix\n    sorted_matrix = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n    for row in row_sums:\n        for j in range(len(matrix[0])):\n            sorted_matrix[row[0]][j] = matrix[row[0]][j]\n\n    return sorted_matrix\n\n\ntest_cases = [\n    ([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]]),\n    ([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],\n     [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]),\n    ([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],\n     [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]),\n    ([[1, 1, 1], [1, 1, 1], [",
    "from itertools import product\nfrom typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def matrix_sum(matrix: List[List[int]]) -> List[int]:\n        return [sum(row) for row in matrix]\n\n    def sort_by_sum(matrix: List[List[int]]) -> List[List[int]]:\n        return sorted(matrix, key=matrix_sum)\n\n    return sort_by_sum(matrix)\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    assert sort_matrix([[1, 3], [2, 2]]) == [[2, 2], [1, 3]]",
    "def sort_matrix(matrix):\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    size = len(matrix)\n    if size == 0:\n        return []\n\n    for i in range(size):\n        for j in range(i + 1, size):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    assert sort_matrix([[4, 3], [2, 1]]) == [[2, 1], [4, 3]]\n    assert sort_matrix([[10, 20], [30, 40], [50, 60]]) == [\n        [50, 60],\n        [30, 40],\n        [10, 20],\n    ]\n    assert sort_matrix([[1, 2], [3, 4], [5, 6], [7, 8]]) == [\n        [3, 4],\n        [1, 2],\n        [7, 8],\n        [5, 6],\n    ]",
    "def sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\nif __name__ == '__main__':\n    matrix = [[5, 4, 1],\n              [2, 3, 2],\n              [3, 1, 1]]\n    print(sort_matrix(matrix))",
    "def sort_by_row_sum(matrix):\n    \"\"\"\n    sort_by_row_sum takes a matrix and sorts the matrix according to the sum of its rows.\n    \"\"\"\n    return matrix",
    "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in matrix]\n\n    # Create a list with the indices of the sorted sums\n    indices = sorted(range(len(sums)), key=lambda i: sums[i])\n\n    # Sort the rows of the matrix based on the sorted indices\n    return [matrix[i] for i in indices]\n\n\nprint(sort_matrix([[1, 4], [2, 5], [3, 6]]))\nprint(sort_matrix([[2, 1], [5, 4], [3, 6]]))\nprint(sort_matrix([[1, 2], [3, 4], [5, 6]]))\nprint(sort_matrix([[1, 2, 3], [4, 5, 6]]))",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n    sums = defaultdict(list)\n    for row_index, row in enumerate(matrix):\n        row_sum = sum(row)\n        sums[row_sum].append((row_index, row))\n\n    return [row for row_sum, rows in sorted(sums.items()) for row in rows]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[1, 2], [3, 4]], [[2, 1], [4, 3]]),\n        ([[1, 2], [3, 4], [5, 6]], [[2, 1], [4, 3], [6, 5]]),\n        ([[1, 2], [3, 4], [5, 6], [7, 8]], [[2, 1], [4, 3], [6, 5], [8, 7]]),\n        ([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], [[2, 1], [4, 3], [6, 5], [8, 7], [10, 9]]),\n    ]\n\n    for input_matrix, output_matrix in test_cases:\n        assert sort_matrix(input_matrix) == output_matrix",
    "# O(n^2) time | O(1) space\ndef sortMatrixSum(matrix):\n    \"\"\"\n    Sorts the matrix in ascending order by sum of its rows\n    matrix: matrix to be sorted\n    return: sorted matrix\n    \"\"\"\n    # The idea is to sort the matrix based on the sum of its rows,\n    # since the sum of the rows is a key to sort the matrix.\n    # We can use the selection sort algorithm to achieve this.\n\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n    return matrix\n\n\n\"\"\"\n# O(n^2) time | O(n^2) space\ndef sortMatrixSum(matrix):\n    # The idea is to sort the matrix based on the sum of its rows,\n    # since the sum of the rows is a key to sort the matrix.\n    # We can use the selection sort algorithm to achieve this.\n\n    # create a sorted matrix\n    sorted_matrix = []\n\n    # create a set of row sums\n    row_sum_set = set()\n\n    # iterate through the matrix\n    for row in matrix:\n        row_sum = sum(row)\n        # add the row sum to the set\n        row_sum_set.add(row_sum)\n        # add the row to the sorted matrix\n        sorted_matrix.append(row)\n\n    # sort the row sums\n    sorted_row_sums = sorted(row_sum_set)\n\n    # create a sorted matrix\n    sorted_matrix = []\n    # iterate through the sorted row sums\n    for row_sum in sorted_row_sums:\n        # find all the rows with that sum\n        rows_with_sum = [row for row in matrix if sum(row) == row_sum]\n        # sort those rows\n        rows_with_sum = sorted(rows_with_sum)\n        # append them to the sorted matrix\n        sorted_matrix.extend(rows_with_sum)\n\n    return sorted_matrix\n\"\"\"",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    First, we will sort the matrix according to the sum of each row.\n    Then, we will sort the matrix according to the sum of each column.\n    \"\"\"\n    for i in range(len(matrix)):\n        matrix[i].sort()\n\n    matrix.sort(key=lambda x: sum(x))\n\n    for i in range(len(matrix)):\n        matrix[i].sort(reverse=True)\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert sort_matrix([[1, 3], [2, 4]]) == [[1, 2], [3, 4]]\n    assert sort_matrix([[1, 3], [2, 4], [1, 5]]) == [[1, 1], [2, 3], [3, 4]]",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n    n, m = len(matrix), len(matrix[0])\n\n    def get_sum(row: int) -> int:\n        return sum(matrix[row])\n\n    def get_matrix_sum(matrix: List[List[int]]) -> int:\n        return sum(map(sum, matrix))\n\n    def sort_matrix_helper(matrix: List[List[int]]) -> List[List[int]]:\n        if len(matrix) == 1:\n            return matrix\n\n        left_matrix = sort_matrix_helper(matrix[: len(matrix) // 2])\n        right_matrix = sort_matrix_helper(matrix[len(matrix) // 2 :])\n\n        result = []\n        left_matrix_sum = get_matrix_sum(left_matrix)\n        right_matrix_sum = get_matrix_sum(right_matrix)\n        left_row, right_row = 0, 0\n        while left_row < len(left_matrix) and right_row < len(right_matrix):\n            if left_matrix_sum < right_matrix_sum:\n                result.append(left_matrix[left_row])\n                left_matrix_sum += get_sum(left_row)\n                left_row += 1\n            else:\n                result.append(right_matrix[right_row])\n                right_matrix_sum += get_sum(right_row)\n                right_row += 1\n\n        if left_row < len(left_matrix):\n            result.extend(left_matrix[left_row:])\n        if right_row < len(right_matrix):\n            result.extend(right_matrix[right_row:])\n\n        return result\n\n    return sort_matrix_helper(matrix)\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 4], [2, 5]]) == [[2, 5",
    "def sort_matrix(matrix):\n    \"\"\"\n    :param matrix: list[list] -- 2d array\n    :return: list[list] -- 2d array sorted according to sum of each row\n    \"\"\"\n    return sorted(matrix, key=lambda x: sum(x))\n\n\ndef main():\n\n    matrix = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    print(\"Original Matrix:\")\n    for row in matrix:\n        print(row)\n    print(\"Sorted Matrix:\")\n    for row in sort_matrix(matrix):\n        print(row)\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import defaultdict\nfrom itertools import chain\n\n\n# 1st solution, sorting by sum of elements in each row\n# O(n*m*log(n*m)) time | O(n*m) space\ndef sortMatrixBySumOfRow(matrix):\n    rowSums = defaultdict(list)\n    for rowIdx, row in enumerate(matrix):\n        rowSum = sum(row)\n        rowSums[rowSum].append(rowIdx)\n\n    sortedRows = sorted(chain(*rowSums.values()))\n    return sortedRows\n\n\n# 2nd solution, sorting by sum of elements in each row\n# O(n*m*log(n*m)) time | O(n*m) space\ndef sortMatrixBySumOfRow(matrix):\n    rows = []\n    for row in matrix:\n        rows.append((sum(row), row))\n\n    rows.sort()\n    return [row for _, row in rows]\n\n\n# 3rd solution, sorting by sum of elements in each row\n# O(n*m*log(n*m)) time | O(n*m) space\ndef sortMatrixBySumOfRow(matrix):\n    return sorted(matrix, key=lambda row: sum(row))\n\n\n# 4th solution, sorting by sum of elements in each row\n# O(n*m*log(n*m)) time | O(n*m) space\ndef sortMatrixBySumOfRow(matrix):\n    return sorted(matrix, key=sum)",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    row_sums = defaultdict(list)\n    for i, row in enumerate(matrix):\n        for j, val in enumerate(row):\n            row_sums[sum(row)].append((i, j))\n\n    return sorted(row_sums.items())\n\n\nprint(sort_matrix([\n    [3, 3, 3],\n    [2, 2, 2],\n    [1, 1, 1],\n]))\nprint(sort_matrix([\n    [3, 3, 3],\n    [2, 2, 2],\n    [1, 1, 1],\n    [1, 1, 1],\n]))\nprint(sort_matrix([\n    [3, 3, 3],\n    [2, 2, 2],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n]))\nprint(sort_matrix([\n    [3, 3, 3],\n    [2, 2, 2],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n]))\nprint(sort_matrix([\n    [3, 3, 3],\n    [2, 2, 2],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n]))",
    "from typing import List\n\n\n# O(m * n * log(m * n)) time | O(m * n) space\ndef sort_rows_sum(matrix: List[List[int]]) -> List[List[int]]:\n    rows = len(matrix)\n\n    def get_sum(row):\n        return sum(row)\n\n    def get_row(index):\n        return matrix[index]\n\n    def set_row(index, row):\n        matrix[index] = row\n\n    return merge_sort(0, rows - 1, get_sum, get_row, set_row)\n\n\ndef merge_sort(start, end, get_sum, get_row, set_row):\n    if start >= end:\n        return\n\n    mid = (start + end) // 2\n    sort_rows_sum(matrix)\n\n    sorted_rows = merge_sort(start, mid, get_sum, get_row, set_row) + merge_sort(mid + 1, end, get_sum, get_row, set_row)\n    return merge(sorted_rows, get_sum, get_row, set_row)\n\n\ndef merge(sorted_rows, get_sum, get_row, set_row):\n    rows = len(sorted_rows)\n    result = []\n    left, right = 0, rows - 1\n\n    while left <= right:\n        if get_sum(get_row(left)) < get_sum(get_row(right)):\n            result.append(get_row(left))\n            left += 1\n        else:\n            result.append(get_row(right))\n            right -= 1\n\n    for i in range(rows):\n        set_row(i, result[i])\n\n    return result\n\n\n\"\"\"\nO(m * n * log(m * n)) time | O(m * n) space\nwhere m is the number of rows in matrix and n is the number of columns in matrix.\n\nThe idea is to sort the matrix rows by sum of their elements in O(m * n * log(m * n)) time using merge sort.\nThen, we take the sorted rows and put them",
    "def sort_matrix(matrix):\n    \"\"\"\n    We can sort the matrix according to the sum of its rows.\n    Sort the matrix according to the sum of the rows.\n    The sum of the rows is the sum of the elements in the row.\n    We can use the sum of the row as the key for sorting.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))\n\n\nprint(sort_matrix([[3, 3], [2, 6], [1, 1]]))\nprint(sort_matrix([[2, 5], [3, 1], [4, 7], [1, 3]]))",
    "def sort_matrix(matrix: list) -> list:\n    \"\"\"\n    This solution works in O(n^2) time.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    sorted_matrix = []\n\n    while len(sorted_matrix) < rows:\n        row_sums = [sum(row) for row in matrix]\n        max_sum = max(row_sums)\n        max_sum_index = row_sums.index(max_sum)\n        sorted_matrix.append(matrix[max_sum_index])\n        matrix.pop(max_sum_index)\n        row_sums.pop(max_sum_index)\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [\n        [1, 1, 1],\n        [1, 1, 2],\n        [1, 2, 2],\n    ]\n    print(sort_matrix(matrix))",
    "from typing import List\n\n\ndef sort_matrix_sum(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*n*log(n*n))\n    Space Complexity: O(n*n)\n    \"\"\"\n    rows_sums = [sum(row) for row in matrix]\n    sorted_matrix = [row for _, row in sorted(zip(rows_sums, matrix))]\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix_sum([[2, 4], [1, 5]]) == [[1, 5], [2, 4]]\n    assert sort_matrix_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [7, 8, 9],\n        [1, 2, 3],\n        [4, 5, 6],\n    ]",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    sums = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sums[sum(row)].append(i)\n\n    return [matrix[i] for i in sorted(sums.keys())]\n\n\ndef test_sort_matrix():\n    assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert sort_matrix([[2, 5], [7, 1]]) == [[7, 1], [2, 5]]\n    assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    assert sort_matrix([[1, 4, 6], [3, 2, 2], [2, 1, 1]]) == [\n        [1, 1, 1],\n        [2, 2, 2],\n        [3, 4, 6],\n    ]\n\n\nif __name__ == \"__main__\":\n    test_sort_matrix()",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    sums = defaultdict(list)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sums[sum(matrix[i])].append([i, j])\n\n    sorted_sums = sorted(sums.keys())\n\n    sorted_matrix = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    for i in range(len(sorted_sums)):\n        for index in sums[sorted_sums[i]]:\n            sorted_matrix[index[0]][index[1]] = i\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 3, 1], [2, 2, 2], [3, 1, 3]]) == [\n        [2, 1, 2],\n        [0, 0, 1],\n        [1, 0, 0],\n    ]\n    assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [2, 1, 2],\n        [5, 4, 6],\n        [8, 7, 9],\n    ]",
    "from collections import defaultdict\n\n\n# Time complexity: O(n * m * log(n * m))\n# Space complexity: O(n * m)\ndef sort_rows_sum(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: None\n    \"\"\"\n    # Use a dictionary to store the sum of each row\n    row_sums = defaultdict(int)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            row_sums[i] += matrix[i][j]\n\n    # Create a list of tuples, each tuple contains a row number and its sum\n    # Sort the list according to the sum\n    row_sum_list = []\n    for row_num in row_sums:\n        row_sum_list.append((row_num, row_sums[row_num]))\n    row_sum_list.sort(key=lambda x: x[1])\n\n    # Build a new matrix\n    new_matrix = []\n    for row_num, row_sum in row_sum_list:\n        new_matrix.append(matrix[row_num])\n\n    return new_matrix\n\n\n# Time complexity: O(n * m * log(n * m))\n# Space complexity: O(n * m)\ndef sort_rows_sum_2(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: None\n    \"\"\"\n    # Use a dictionary to store the sum of each row\n    row_sums = defaultdict(int)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            row_sums[i] += matrix[i][j]\n\n    # Build a new matrix\n    new_matrix = []\n    for row_num in sorted(row_sums, key=row_sums.get):\n        new_matrix.append(matrix[row_num])\n\n    return new_matrix\n\n\n# Time complexity: O(n * m * log(n * m))\n# Space complexity: O(n * m)\ndef sort_rows_sum",
    "def sort_matrix_sum_rows(matrix):\n    \"\"\"\n    The idea is to add a column of the matrix with the sum of the row of the matrix.\n    Then we sort the matrix by the sum column and remove it.\n    \"\"\"\n    # add the sum column\n    for i in range(len(matrix)):\n        matrix[i].append(sum(matrix[i]))\n\n    # sort the matrix by the sum column\n    matrix.sort(key=lambda x: x[-1])\n\n    # remove the sum column\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i][:-1]\n\n    return matrix\n\n\ndef main():\n\n    mat1 = [[1, 2, 3], [3, 4, 5], [4, 5, 6]]\n    mat2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    mat3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    mat4 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\n    print(\"Matrix 1:\")\n    for row in mat1:\n        print(row)\n    print(\"Matrix 1 sorted:\")\n    print(sort_matrix_sum_rows(mat1))\n    print(\"Matrix 2:\")\n    for row in mat2:\n        print(row)\n    print(\"Matrix 2 sorted:\")\n    print(sort_matrix_sum_rows(mat2))\n    print(\"Matrix 3:\")\n    for row in mat3:\n        print(row)\n    print(\"Matrix 3 sorted:\")\n    print(sort_matrix_sum_rows(mat3))\n    print(\"Matrix 4:\")\n    for row in mat4:\n        print(row)\n    print(\"Matrix 4 sorted:\")\n    print(sort_matrix_sum_rows",
    "def sort_by_row_sum(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    :param matrix: The matrix to be sorted.\n    :return: The sorted matrix.\n\n    Example:\n    >>> sort_by_row_sum([[1, 2], [2, 3]])\n    [[2, 3], [1, 2]]\n    >>> sort_by_row_sum([[1, 3, 5], [1, 2, 4], [1, 2, 3]])\n    [[1, 2, 3], [1, 2, 4], [1, 3, 5]]\n    >>> sort_by_row_sum([[1, 3, 5], [1, 3, 5]])\n    [[1, 3, 5], [1, 3, 5]]\n    >>> sort_by_row_sum([[1, 3, 5], [1, 3, 6]])\n    [[1, 3, 6], [1, 3, 5]]\n    \"\"\"\n    return sorted(matrix, key=sum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import chain\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef matrix_sort(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (List[List[int]]): Matrix to sort.\n\n    Returns:\n        List[List[int]]: Sorted matrix.\n    \"\"\"\n    rows_sum = defaultdict(list)\n    for row_index, row in enumerate(matrix):\n        rows_sum[sum(row)].append(row_index)\n    return [matrix[i] for i in chain(*sorted(rows_sum.values()))]\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[3, 3, 2], [2, 1, 2]]))\n    print(matrix_sort([[3, 2, 1], [2, 1, 2]]))\n    print(matrix_sort([[3, 2, 1], [2, 1, 1]]))\n    print(matrix_sort([[3, 2, 1], [2, 1, 2], [1, 2, 2]]))",
    "def sort_matrix(matrix):\n    \"\"\"\n    :param: matrix - two-dimensional array of integers\n    :return: nothing, changes matrix\n    \"\"\"\n    # Write your code here.\n\n    # create sum of rows list\n    sum_of_rows = []\n    for row in matrix:\n        sum_of_rows.append(sum(row))\n    \n    # sort sum of rows\n    sorted_sum_of_rows = sorted(sum_of_rows)\n    \n    # sort matrix\n    matrix_sorted = [[] for _ in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(len(sum_of_rows)):\n                if sum_of_rows[k] == sorted_sum_of_rows[i]:\n                    matrix_sorted[k].append(matrix[j][i])\n                    break\n    \n    for i in range(len(matrix_sorted)):\n        matrix[i] = matrix_sorted[i]\n\n    return matrix\n\n\n\nmatrix = [[4, 1, 4, 1],\n          [2, 2, 3, 1],\n          [1, 1, 4, 1],\n          [2, 3, 2, 2]]\n\nsort_matrix(matrix)\nprint(matrix)",
    "from itertools import permutations\nfrom typing import List\n\n\n# Time complexity: O(n!)\n# Space complexity: O(n)\ndef sort_matrix_sum(matrix: List[List[int]]) -> List[List[int]]:\n    if not matrix:\n        return matrix\n\n    n = len(matrix)\n    result = []\n\n    for permu in permutations(range(n)):\n        temp = [matrix[i][j] for i, j in enumerate(permu)]\n        if not result or sum(temp) < sum(result):\n            result = temp\n\n    return result\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(n)\ndef sort_matrix_sum_optimized(matrix: List[List[int]]) -> List[List[int]]:\n    if not matrix:\n        return matrix\n\n    n = len(matrix)\n    result = []\n    total_sums = [sum(matrix[i]) for i in range(n)]\n\n    for i in range(n):\n        max_sum = max(total_sums)\n        max_index = total_sums.index(max_sum)\n        result.append(matrix[max_index])\n        total_sums[max_index] = 0\n\n    return result\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(n)\ndef sort_matrix_sum_optimized_2(matrix: List[List[int]]) -> List[List[int]]:\n    if not matrix:\n        return matrix\n\n    n = len(matrix)\n    result = []\n    total_sums = [sum(matrix[i]) for i in range(n)]\n\n    for i in range(n-1, -1, -1):\n        max_sum = max(total_sums)\n        max_index = total_sums.index(max_sum)\n        result.append(matrix[max_index])\n        total_sums[max_index] = 0\n\n    return result",
    "def matrix_sort(matrix):\n    matrix_sums = []\n    for row in matrix:\n        matrix_sums.append(sum(row))\n\n    sorted_matrix = []\n    for row in matrix:\n        for i in range(len(matrix_sums) - 1):\n            if sum(row) <= matrix_sums[i]:\n                matrix_sums.insert(i, sum(row))\n                break\n        sorted_matrix.append(row)\n\n    return sorted_matrix\n\n\nprint(matrix_sort([[3, 3, 2], [2, 2, 2], [1, 2, 3]]))",
    "def sort_matrix(matrix):\n    matrix_sums = [sum(row) for row in matrix]\n    sorted_matrix_sums = sorted(matrix_sums)\n    sorted_matrix = [[matrix[i][j] for i in range(len(matrix)) if matrix_sums[i] == sorted_matrix_sums[j]] for j in\n                     range(len(matrix))]\n    return sorted_matrix\n\n\nmatrix = [[1, 2],\n          [3, 4]]\nprint(sort_matrix(matrix))",
    "from itertools import permutations\n\n\ndef sort_matrix(matrix: list):\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n!)\n    \"\"\"\n    sums = []\n    for row in matrix:\n        sums.append(sum(row))\n\n    sorted_sums = sorted(sums)\n\n    for index, permutation in enumerate(permutations(matrix)):\n        if [sum(row) for row in permutation] == sorted_sums:\n            return permutation\n\n\nif __name__ == \"__main__\":\n    mat = [\n        [1, 2, 3],\n        [2, 1, 3],\n        [3, 2, 1],\n    ]\n\n    print(sort_matrix(mat))",
    "def sort_matrix(matrix):\n    rows_sum = []\n    for row in matrix:\n        rows_sum.append(sum(row))\n\n    return [matrix[i] for i in sorted(range(len(rows_sum)), key=lambda k: rows_sum[k])]\n\n\nif __name__ == '__main__':\n    assert sort_matrix([[2, 4, 6],\n                        [4, 3, 1],\n                        [5, 2, 3]]) == [[4, 3, 1],\n                                        [2, 4, 6],\n                                        [5, 2, 3]]",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def sort(matrix: List[List[int]]) -> None:\n        nonlocal rows\n        nonlocal cols\n\n        if rows == 1 or cols == 1:\n            return\n\n        left, right = 0, rows - 1\n        while left <= right:\n            mid = (left + right) // 2\n            for i in range(cols):\n                temp = matrix[mid][i]\n                matrix[mid][i] = matrix[left][i]\n                matrix[left][i] = temp\n            left_sum = sum([matrix[i][0] for i in range(left, mid + 1)])\n            right_sum = sum([matrix[i][0] for i in range(mid + 1, right + 1)])\n            if left_sum > right_sum:\n                left = mid + 1\n            else:\n                right = mid\n\n        sort(matrix[: (rows + 1) // 2])\n        sort(matrix[(rows + 1) // 2 :])\n        for i in range(rows // 2):\n            for j in range(cols):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[rows - 1 - i][j]\n                matrix[rows - 1 - i][j] = temp\n\n    sort(matrix)\n    return matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[2, 3, 4], [1, 3, 4], [1, 2, 4]]) == [\n        [1, 2, 4],\n        [1, 3, 4],\n        [2, 3, 4],\n    ]",
    "from functools import cmp_to_key\n\n\ndef compare(matrix_a, matrix_b):\n    return sum(matrix_a) - sum(matrix_b)\n\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=cmp_to_key(compare))\n\n\nif __name__ == \"__main__\":\n    matrix = [[3, 3, 8], [1, 2, 3], [4, 5, 6]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)",
    "def sort_matrix_by_sum(matrix):\n    \"\"\"\n    Given a matrix, sort the matrix by the sum of its rows.\n    :param matrix: list of lists\n    :return: list of lists\n    >>> sort_matrix_by_sum([[1, 2], [3, 4]])\n    [[3, 4], [1, 2]]\n    >>> sort_matrix_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 8, 9], [4, 5, 6], [1, 2, 3]]\n    >>> sort_matrix_by_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n    [[13, 14, 15, 16], [9, 10, 11, 12], [5, 6, 7, 8], [1, 2, 3, 4]]\n    \"\"\"\n    if not matrix:\n        return []\n    return sorted(matrix, key=lambda x: sum(x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def matrix_sort(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\n\nprint(matrix_sort([[2, 1], [3, 4]]))",
    "from collections import defaultdict\n\n\ndef sum_of_rows(matrix):\n    sums = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sums[sum(row)].append(i)\n    return sorted(sums.items(), key=lambda x: x[0])\n\n\ndef sort_matrix(matrix):\n    sorted_matrix = []\n    for i in range(len(matrix) - 1, -1, -1):\n        sorted_matrix.append(matrix.pop(i))\n    return sorted_matrix\n\n\ndef sort_matrix_sums(matrix):\n    sums = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sums[sum(row)].append(i)\n    sorted_sums = sorted(sums.items(), key=lambda x: x[0])\n    return [matrix.pop(i) for _, indexes in sorted_sums for i in indexes]\n\n\ndef main():\n    matrix = [[3, 3, 3], [1, 2, 3], [2, 2, 1]]\n    print(\"Matrix: \" + str(matrix))\n    print(\"Sorted Matrix: \" + str(sort_matrix(matrix)))\n    print(\"Matrix: \" + str(matrix))\n    print(\"Sorted Matrix: \" + str(sort_matrix_sums(matrix)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\n# Time complexity: O(n * m * log n)\n# Space complexity: O(n * m)\ndef sort_matrix_by_sum_of_rows(matrix: List[List[int]]) -> List[List[int]]:\n    n = len(matrix)\n    m = len(matrix[0])\n\n    # Create a list of tuples of (sum of row, index of row)\n    # Sort this list\n    # Iterate through sorted list\n    #   Iterate through matrix rows\n    #      Iterate through matrix columns\n    #         Update the value in the matrix\n    #            if the current index matches the index from the tuple\n    # Sort the matrix in place\n    list_of_rows = []\n    for i in range(n):\n        list_of_rows.append((sum(matrix[i]), i))\n    list_of_rows.sort()\n\n    for i in range(n):\n        for j in range(m):\n            matrix[list_of_rows[i][1]][j] = matrix[i][j]\n\n    return matrix\n\n\n# Time complexity: O(n * m * log n)\n# Space complexity: O(n * m)\ndef sort_matrix_by_sum_of_rows_2(matrix: List[List[int]]) -> List[List[int]]:\n    n = len(matrix)\n    m = len(matrix[0])\n\n    # Create a list of tuples of (sum of row, index of row)\n    # Sort this list\n    # Iterate through sorted list\n    #   Iterate through matrix rows\n    #      Iterate through matrix columns\n    #         Update the value in the matrix\n    #            if the current index matches the index from the tuple\n    # Sort the matrix in place\n    list_of_rows = []\n    for i in range(n):\n        list_of_rows.append((sum(matrix[i]), i))\n    list_of_rows.sort()\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = matrix[list_of_rows[i][1]][j]\n\n    return matrix",
    "def sum_row(row):\n    return sum(row)\n\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum_row)\n\n\nif __name__ == \"__main__\":\n    print(sort_matrix([\n        [3, 5, 2],\n        [1, 6, 4],\n        [5, 2, 7]\n    ]))",
    "def sort_matrix(matrix):\n    if not matrix:\n        return\n\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n - 1):\n            if sum(matrix[j]) > sum(matrix[j + 1]):\n                matrix[j], matrix[j + 1] = matrix[j + 1], matrix[j]\n\n    return matrix\n\nprint(sort_matrix([[1, 4], [2, 5], [3, 6]]))\nprint(sort_matrix([[3, 3], [2, 2], [1, 1]]))\nprint(sort_matrix([[4, 1], [3, 2], [2, 3], [1, 4]]))\nprint(sort_matrix([[1, 4], [2, 5], [3, 6]]))",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef matrix_sort(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Idea is to create a dictionary with key as the sum of the rows and value as the row number.\n    We will then sort the dictionary in ascending order of the keys and then use the\n    dictionary to update the original matrix.\n    \"\"\"\n    if not matrix:\n        return []\n\n    row_sum = defaultdict(list)\n    for row in range(len(matrix)):\n        row_sum[sum(matrix[row])].append(row)\n\n    sorted_row_sum = sorted(row_sum.keys())\n\n    for i in range(len(matrix)):\n        matrix[row_sum[sorted_row_sum[i]][0]] = sorted(matrix[row_sum[sorted_row_sum[i]][0]])\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[1, 2], [3, 4], [5, 6], [7, 8]]))",
    "from typing import List\n\n\ndef matrix_sort(mat: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    The idea is to store the sum of each row in a list and then sort the list in ascending order.\n    While sorting, we swap the rows with the same order in the original matrix.\n    Time Complexity: O(n^2*log(n))\n    Space Complexity: O(n^2)\n    \"\"\"\n    if not mat:\n        return mat\n\n    row_sums = []\n\n    for i, row in enumerate(mat):\n        row_sums.append([i, sum(row)])\n\n    row_sums.sort(key=lambda x: x[1])\n\n    for i, row in enumerate(mat):\n        for j, _ in enumerate(row):\n            mat[i][j] = row[j]\n\n    for i, row in enumerate(mat):\n        for j, _ in enumerate(row):\n            mat[row_sums[i][0]][j] = row[j]\n\n    return mat\n\n\nif __name__ == \"__main__\":\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(matrix_sort(mat))",
    "from collections import namedtuple\n\n\ndef sort_matrix(matrix: list) -> list:\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def row_sum(i: int) -> int:\n        return sum(matrix[i])\n\n    def sort_matrix_helper(matrix: list) -> list:\n        if len(matrix) < 2:\n            return matrix\n\n        mid = len(matrix) // 2\n        left = sort_matrix_helper(matrix[:mid])\n        right = sort_matrix_helper(matrix[mid:])\n\n        return merge(left, right)\n\n    def merge(left: list, right: list) -> list:\n        result = []\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if row_sum(left[i]) < row_sum(right[j]):\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        while i < len(left):\n            result.append(left[i])\n            i += 1\n\n        while j < len(right):\n            result.append(right[j])\n            j += 1\n\n        return result\n\n    def sort_matrix_helper_helper(matrix: list) -> list:\n        if len(matrix) < 2:\n            return matrix\n\n        mid = len(matrix) // 2\n        left = sort_matrix_helper_helper(matrix[:mid])\n        right = sort_matrix_helper_helper(matrix[mid:])\n\n        return merge_helper(left, right)\n\n    def merge_helper(left: list, right: list) -> list:\n        result = []\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if row_sum(left[i]) < row_sum(right[j]):",
    "def sort_matrix(matrix):\n    sorted_matrix = []\n    for row in matrix:\n        sorted_matrix.append([sum(row), row])\n    sorted_matrix = sorted(sorted_matrix, key=lambda x: x[0])\n    return [row[1] for row in sorted_matrix]\n\n\nif __name__ == '__main__':\n    test_matrix = [[4, 5, 3],\n                   [5, 1, 6],\n                   [1, 6, 2]]\n    sorted_matrix = sort_matrix(test_matrix)\n    print(sorted_matrix)",
    "def sort_matrix(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: list of lists\n\n    >>> sort_matrix([[1, 3], [2, 4]])\n    [[1, 3], [2, 4]]\n    >>> sort_matrix([[1, 2], [3, 4]])\n    [[3, 4], [1, 2]]\n    >>> sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def get_sum(row):\n        return sum(row)\n\n    def sort_rows():\n        return sorted(matrix, key=get_sum)\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0:\n                sorted_matrix = sort_rows()\n            else:\n                sorted_matrix = sort_matrix_helper(sorted_matrix, i, j)\n    return sorted_matrix\n\n\ndef sort_matrix_helper(matrix, i, j):\n    \"\"\"\n    :param matrix: list of lists\n    :param i: int\n    :param j: int\n    :return: list of lists\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if i == 0:\n        left_matrix = matrix\n        right_matrix = matrix\n    elif j == 0:\n        left_matrix = matrix[:i]\n        right_matrix = matrix[i:]\n    elif j == cols - 1:\n        left_matrix = matrix[:i]\n        right_matrix = matrix[i + 1:]\n    else:\n        left_matrix = matrix[:i] + matrix[i + 1:]\n        right_matrix = matrix[i:]\n\n    left_sum = sum([sum(row) for row in left_matrix])\n    right_sum = sum([sum(row) for row in right_matrix])",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(n)\n    \"\"\"\n    def get_row_sum(row: List[int]) -> int:\n        return sum(row)\n\n    def get_matrix_sum(matrix: List[List[int]]) -> int:\n        return sum(map(get_row_sum, matrix))\n\n    sorted_matrix = sorted(matrix, key=get_matrix_sum)\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[3, 4], [1, 2], [5, 6]]\n    assert sort_matrix([[1, 4], [3, 2], [5, 6]]) == [[3, 2], [1, 4], [5, 6]]",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n    matrix_sum = [sum(row) for row in matrix]\n\n    matrix_sum_map = defaultdict(list)\n\n    for index, value in enumerate(matrix_sum):\n        matrix_sum_map[value].append(index)\n\n    return [[matrix[i] for i in matrix_sum_map[value]] for value in sorted(matrix_sum_map.keys())]\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert sort_matrix([[3, 2], [1, 4]]) == [[1, 4], [3, 2]]\n    assert sort_matrix([[1, 1], [1, 1]]) == [[1, 1], [1, 1]]\n    assert sort_matrix([[1, 3], [2, 2]]) == [[1, 3], [2, 2]]\n    assert sort_matrix([[1, 1, 1], [0, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [0, 1, 1], [1, 1, 1]]",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    sum_dict = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sum_dict[sum(row)].append(i)\n    return sorted(sum_dict.items())\n\n\nif __name__ == \"__main__\":\n    matrix = [\n        [5, 1, 9],\n        [1, 6, 8],\n        [4, 8, 7]\n    ]\n    print(sort_matrix(matrix))",
    "from typing import List\n\n\n# O(n^2) time | O(n^2) space\ndef matrixSort(matrix: List[List[int]]) -> List[List[int]]:\n    sorted_matrix = []\n    while len(matrix) > 0:\n        min_row_sum = min([sum(row) for row in matrix])\n        for row in matrix:\n            if sum(row) == min_row_sum:\n                sorted_matrix.append(row)\n                matrix.remove(row)\n                break\n    return sorted_matrix\n\n\n# O(n^2) time | O(n^2) space\ndef matrixSort2(matrix: List[List[int]]) -> List[List[int]]:\n    sorted_matrix = []\n    while len(matrix) > 0:\n        matrix.sort(key=sum)\n        sorted_matrix.append(matrix.pop(0))\n    return sorted_matrix\n\n\n# O(n^2) time | O(n^2) space\ndef matrixSort3(matrix: List[List[int]]) -> List[List[int]]:\n    sorted_matrix = []\n    while len(matrix) > 0:\n        row_sums = [sum(row) for row in matrix]\n        min_row_sum = min(row_sums)\n        min_row_index = row_sums.index(min_row_sum)\n        sorted_matrix.append(matrix.pop(min_row_index))\n    return sorted_matrix\n\n\nprint(matrixSort([[1, 2], [3, 4]]))\nprint(matrixSort([[5, 10], [15, 20], [25, 20]]))",
    "from typing import List\n\n\ndef sort_rows_by_sum(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    rows_sums = [sum(row) for row in matrix]\n\n    sorted_matrix = [\n        row for _, row in sorted(zip(rows_sums, matrix), key=lambda pair: pair[0])\n    ]\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2], [3, 4]]\n    sorted_matrix = sort_rows_by_sum(matrix)\n    print(sorted_matrix)\n\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sorted_matrix = sort_rows_by_sum(matrix)\n    print(sorted_matrix)\n\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    sorted_matrix = sort_rows_by_sum(matrix)\n    print(sorted_matrix)",
    "from collections import defaultdict\nfrom copy import deepcopy\n\n\ndef matrix_sort(matrix):\n    sorted_matrix = []\n    matrix_sum = defaultdict(list)\n\n    for row in matrix:\n        total = 0\n        for value in row:\n            total += value\n        matrix_sum[total].append(deepcopy(row))\n\n    for value in sorted(matrix_sum.keys()):\n        sorted_matrix.extend(matrix_sum[value])\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    assert matrix_sort([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert matrix_sort([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]) == [[1, 2], [3, 4], [5, 6],\n                                                                                           [7, 8], [9, 10], [11, 12],\n                                                                                           [13, 14]]\n    assert matrix_sort([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]) == [[1, 2], [3, 4],\n                                                                                                      [5, 6], [7, 8],\n                                                                                                      [9, 10], [11, 12],\n                                                                                                      [13, 14], [15, 16]]\n    assert matrix_sort([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18",
    "from itertools import permutations\nfrom typing import List\n\n\n# O(n!) time | O(n) space\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Generate all permutations of matrix indices\n    all_indices = list(permutations(range(rows * cols), rows * cols))\n\n    # Calculate the sum of each row in each permutation\n    def get_row_sums(permutation):\n        return [sum(matrix[row][col] for row, col in zip(range(rows), indices)) for indices in permutation]\n\n    # Find the permutation with the lowest sum\n    best_indices = min(all_indices, key=get_row_sums)\n\n    # Reorder matrix\n    def get_matrix_element(row, col):\n        return matrix[row][best_indices[row * cols + col]]\n    return [[get_matrix_element(row, col) for col in range(cols)] for row in range(rows)]\n\n\n# O(n^2 * log(n^2)) time | O(n^2) space\ndef sort_matrix_with_sorting(matrix: List[List[int]]) -> List[List[int]]:\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows by sum\n    sorted_row_sums = sorted(enumerate(row_sums), key=lambda x: x[1])\n\n    # Reorder the matrix\n    def get_matrix_element(row, col):\n        return matrix[sorted_row_sums[row][0]][col]\n    return [[get_matrix_element(row, col) for col in range(len(matrix[0]))] for row in range(len(matrix))]\n\n\n# O(n^2 * log(n)) time | O(n^2) space\ndef sort_matrix_with_quicksort(matrix: List[List[int]]) -> List[List[int]]:\n    def partition(matrix, row_sum",
    "from collections import defaultdict\n\n\n# O(n * m * log(n * m)) time | O(n * m) space\ndef sortMatrix(matrix):\n    sums = defaultdict(list)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sums[sum(row[j] for row in matrix)].append((i, j))\n\n    sorted_sums = sorted(sums.keys())\n    result = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    for row_sum in sorted_sums:\n        for row, col in sums[row_sum]:\n            result[row][col] = row_sum\n\n    return result",
    "from typing import List\n\n\n# O(n * m * log(n * m))\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))\n\n\n\"\"\"\nSorting a matrix is a classic NP-hard problem, which can be solved in polynomial time.\n\nWe can use a greedy approach: sort the rows in ascending order of the sum of elements, then build the sorted matrix.\n\nThe time complexity is O(n * m * log(n * m)).\n\"\"\"",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef sum_of_rows(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Calculates the sum of each row and returns the list.\"\"\"\n    sums = [sum(row) for row in matrix]\n\n    return sums\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Sorts the matrix in ascending order by sum of rows.\"\"\"\n    sorted_matrix = []\n    sums = sum_of_rows(matrix)\n\n    while sums:\n        max_sum = max(sums)\n        index = sums.index(max_sum)\n        sorted_matrix.append(matrix[index])\n        matrix.pop(index)\n        sums.pop(index)\n\n    return sorted_matrix\n\n\ndef sort_matrix_with_defaultdict(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Sorts the matrix in ascending order by sum of rows using defaultdict.\"\"\"\n    sums = defaultdict(list)\n\n    for index, row in enumerate(matrix):\n        sums[sum(row)].append(index)\n\n    return [matrix[i] for i in sorted(sums.keys())]\n\n\ndef main():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    result = sort_matrix(matrix)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[4, 5, 2, 1],\n                        [3, 2, 1, 4],\n                        [2, 1, 3, 4],\n                        [1, 2, 3, 4]]) == [[1, 2, 3, 4],\n                                            [2, 1, 3, 4],\n                                            [3, 2, 1, 4],\n                                            [4, 5, 2, 1]]",
    "def sort_matrix(matrix):\n    sorted_matrix = []\n\n    for _ in range(len(matrix)):\n        sorted_matrix.append([])\n\n    while matrix:\n        row_sums = []\n        for i in range(len(matrix)):\n            row_sums.append(sum(matrix[i]))\n        index = row_sums.index(min(row_sums))\n        sorted_matrix[index].append(matrix[index].pop(0))\n\n        if not matrix[index]:\n            matrix.pop(index)\n\n    return sorted_matrix\n\n\ndef main():\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_matrix(mat))\n\n\nif __name__ == '__main__':\n    main()",
    "def sort_matrix(mat):\n    rows_sum = [[sum(row)] for row in mat]\n    rows_sum.sort(key=lambda x: x[0])\n    sorted_mat = [rows_sum[i][0] for i in range(len(rows_sum))]\n    return sorted_mat\n\nif __name__ == \"__main__\":\n    mat = [[3, 2, 1],\n           [1, 2, 3],\n           [4, 5, 6]]\n    print(sort_matrix(mat))",
    "def sort_matrix(matrix):\n    # find the sum of each row and store it in a list\n    row_sum = []\n    for row in matrix:\n        row_sum.append(sum(row))\n    # sort the row_sum list\n    sorted_row_sum = sorted(row_sum)\n\n    # reorder the matrix according to the sorted row_sum list\n    sorted_matrix = []\n    for i in range(len(sorted_row_sum)):\n        for row in matrix:\n            if sum(row) == sorted_row_sum[i]:\n                sorted_matrix.append(row)\n    return sorted_matrix\n\n\n\n\nmatrix = [[1, 4, 2],\n          [4, 3, 1],\n          [2, 1, 4]]\n\nprint(sort_matrix(matrix))",
    "from collections import defaultdict\n\n\ndef matrix_sort(matrix):\n    \"\"\"\n    :param matrix: list[list] -- A 2D matrix of integers\n    :return: list[list] -- A 2D matrix of integers\n    \"\"\"\n    # O(n)\n    row_sums = defaultdict(list)\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums[row_sum].append(row)\n\n    sorted_matrix = []\n    for row_sum in sorted(row_sums):\n        sorted_matrix.extend(row_sums[row_sum])\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[1, 2], [3, 4]], [[3, 4], [1, 2]]),\n        ([[1, 2], [3, 4], [5, 6]], [[5, 6], [1, 2], [3, 4]]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[7, 8, 9], [1, 2, 3], [4, 5, 6]]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[10, 11, 12], [1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], [[13, 14, 15], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]),\n        ([[1, 2, 3], [4, 5, 6], [7,",
    "def matrix_sort(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    if not matrix:\n        return []\n\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[3, 7], [9, 0], [8, 5], [6, 1]]))",
    "def sort_matrix(matrix: list) -> list:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    return sorted(matrix, key=lambda x: sum(x))\n\n\nif __name__ == \"__main__\":\n    print(sort_matrix([[1, 2], [3, 4]]))",
    "def sort_matrix_by_sum(matrix: list) -> list:\n    \"\"\"\n    O(n^2) time | O(n^2) space\n    \"\"\"\n    matrix_sums = []\n\n    for i in range(len(matrix)):\n        matrix_sums.append([])\n        matrix_sums[i].append(i)\n        matrix_sums[i].append(sum(matrix[i]))\n\n    return sorted(matrix_sums, key=lambda x: x[1])\n\n\nassert sort_matrix_by_sum([[1, 4], [2, 5]]) == [[1, 4], [2, 5]]\nassert sort_matrix_by_sum([[1, 4], [2, 5], [3, 6]]) == [[0, 1], [1, 4], [2, 5]]",
    "from functools import reduce\n\n\ndef matrix_sum(matrix):\n    return [reduce(lambda x, y: x + y, row) for row in matrix]\n\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=matrix_sum)\n\n\nmatrix = [[5, 1, 1],\n          [1, 4, 1],\n          [1, 2, 6]]\n\nprint(sort_matrix(matrix))",
    "def sort_matrix_by_sum_of_rows(matrix):\n    sorted_matrix = []\n    while matrix:\n        min_sum = min([sum(row) for row in matrix])\n        sorted_matrix.append([row for row in matrix if sum(row) == min_sum][0])\n        matrix = [row for row in matrix if sum(row) != min_sum]\n    return sorted_matrix\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_matrix_by_sum_of_rows(matrix))",
    "from typing import List\n\n\n# Time complexity: O(n * m * lg(n * m))\n# Space complexity: O(n * m)\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    n = len(matrix)\n    m = len(matrix[0])\n\n    def get_sum(i: int, j: int) -> int:\n        return sum(matrix[i][k] for k in range(m))\n\n    def get_sum_matrix(i: int, j: int) -> List[List[int]]:\n        return [[matrix[i][k] for k in range(m)] for i in range(n)]\n\n    def get_row_sums() -> List[int]:\n        return [get_sum(i, 0) for i in range(n)]\n\n    def get_column_sums() -> List[int]:\n        return [sum(matrix[i][j] for i in range(n)) for j in range(m)]\n\n    def sort_matrix_by_sum(matrix: List[List[int]]) -> List[List[int]]:\n        return sorted(matrix, key=lambda row: sum(row))\n\n    def sort_matrix_by_row_sums(matrix: List[List[int]]) -> List[List[int]]:\n        return sorted(matrix, key=lambda row: sum(row), reverse=True)\n\n    def sort_matrix_by_column_sums(matrix: List[List[int]]) -> List[List[int]]:\n        return sorted(matrix, key=lambda row: sum(row), reverse=True)\n\n    return sort_matrix_by_column_sums(\n        sort_matrix_by_row_sums(sort_matrix_by_sum(matrix))\n    )\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[3, 5, 1], [12, 1, 2]]) == [[1, 2, 3], [5, 12, 1]]",
    "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)",
    "from typing import List\n\n\n# O(n * m * (m + n)) time | O(n * m) space\ndef matrixInAscendingOrder(matrix: List[List[int]]) -> List[List[int]]:\n    arr = [[sum(row), row] for row in matrix]\n    arr.sort(key=lambda x: x[0])\n\n    return [arr[i][1] for i in range(len(arr))]",
    "def sort_matrix(matrix):\n    \"\"\"\n    :param matrix: list[list] -- matrix to sort\n    :return: list[list] -- sorted matrix\n\n    >>> sort_matrix([[1, 2], [3, 4]])\n    [[2, 1], [4, 3]]\n    >>> sort_matrix([[1, 2], [3, 4], [5, 6]])\n    [[2, 1], [4, 3], [6, 5]]\n    >>> sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[2, 1, 3], [4, 5, 6], [8, 7, 9]]\n    >>> sort_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n    [[2, 1, 3, 4], [5, 6, 7, 8], [10, 9, 11, 12], [14, 13, 15, 16]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(i + 1, rows):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n    for i in range(rows):\n        for j in range(cols - 1):\n            if sum(matrix[i][: j + 1]) > sum(matrix[i][j + 1 :]):\n                matrix[i][j], matrix[i][j + 1 :] = (\n                    matrix[i][j + 1 :],\n                    matrix[i][j],\n                )\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef sort_matrix_by_row_sum(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    row_sum_dict = defaultdict(list)\n\n    for row in matrix:\n        row_sum = sum(row)\n        row_sum_dict[row_sum].append(row)\n\n    result = []\n\n    for row_sum in sorted(row_sum_dict):\n        result.extend(row_sum_dict[row_sum])\n\n    return result\n\n\ndef test_function(test_case):\n    matrix = test_case[0]\n    solution = test_case[1]\n    output = sort_matrix_by_row_sum(matrix)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nmatrix = [[4, 2, 3], [1, 2, 1], [3, 1, 2]]\nsolution = [[3, 1, 2], [4, 2, 3], [1, 2, 1]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsolution = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[1, 9, 8], [4, 5, 7], [7, 8, 9]]\nsolution = [[7, 8, 9], [4, 5, 7], [1, 9, 8]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[3, 7, 1], [4, 9, 8], [6, 8, 2]]\nsolution = [[6, 8, 2], [3, 7, 1], [4",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if not matrix:\n        return matrix\n\n    def sort_row_sums(matrix: List[List[int]]) -> List[int]:\n        row_sums = []\n        for row in matrix:\n            row_sums.append(sum(row))\n\n        row_sums.sort()\n        return row_sums\n\n    def swap_rows(matrix: List[List[int]], row_a: int, row_b: int):\n        matrix[row_a], matrix[row_b] = matrix[row_b], matrix[row_a]\n\n    def swap_cols(matrix: List[List[int]], col_a: int, col_b: int):\n        for row in matrix:\n            row[col_a], row[col_b] = row[col_b], row[col_a]\n\n    row_sums = sort_row_sums(matrix)\n    row_a = 0\n    row_b = 0\n\n    while row_a < len(matrix) - 1:\n        row_b = row_a + 1\n\n        while row_b < len(matrix):\n            if row_sums[row_a] < row_sums[row_b]:\n                swap_rows(matrix, row_a, row_b)\n                swap_cols(matrix, row_a, row_b)\n\n            row_b += 1\n\n        row_a += 1\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix(\n        [[5, 3, 10, 12], [15, 11, 1, 2], [20, 17, 13, 19], [4, 5, 11, 2]]\n    ) == [[4, 5, 11, 2], [15, 11, 1",
    "def matrix_sort(matrix):\n    if len(matrix) == 0:\n        return []\n\n    sums = []\n    for i in range(len(matrix)):\n        sums.append(sum(matrix[i]))\n\n    sums, matrix = (list(t) for t in zip(*sorted(zip(sums, matrix))))\n    return matrix\n\n\nA = [[5, 3, 6, 4],\n     [4, 5, 2, 3],\n     [6, 3, 2, 1],\n     [4, 3, 1, 1]]\nprint(matrix_sort(A))",
    "from collections import defaultdict\n\n\ndef sort_matrix_by_sum(matrix):\n    \"\"\"\n    :param matrix: 2D matrix\n    :return: list of tuples containing index of matrix and sum of rows\n    \"\"\"\n\n    # First, we create a dictionary of row sums\n    row_sums = defaultdict(int)\n\n    for i, row in enumerate(matrix):\n        row_sum = sum(row)\n        row_sums[row_sum] = i\n\n    # Then, we sort the row sums and create a list of tuples, containing index and sum of rows\n    sorted_row_sums = sorted(row_sums.items())\n\n    # Finally, we return the sorted list of tuples\n    return sorted_row_sums\n\n\ndef main():\n\n    matrix = [[2, 1], [3, 4]]\n    print(sort_matrix_by_sum(matrix))\n\n\nif __name__ == '__main__':\n    main()",
    "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\n\ndef main():\n    print(\"Matrix:\")\n    print(sort_matrix([[1, 2, 3], [3, 2, 1], [2, 1, 3]]))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\n# O(n^2)\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    >>> sort_matrix([[3, 2, 1], [2, 3, 4], [1, 2, 3]])\n    [[1, 2, 3], [2, 3, 4], [3, 2, 1]]\n    >>> sort_matrix([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\n    [[70, 80, 90], [40, 50, 60], [10, 20, 30]]\n    >>> sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 8, 9], [4, 5, 6], [1, 2, 3]]\n    \"\"\"\n    return sorted(matrix, key=sum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\n# O(n^2)\ndef sort_rows_sum(mat: List[List[int]]) -> List[List[int]]:\n    sorted_mat: List[List[int]] = []\n\n    while len(mat) > 0:\n        current_sum = mat[0][0]\n        current_sum_mat: List[List[int]] = []\n\n        for row in mat:\n            if sum(row) == current_sum:\n                current_sum_mat.append(row)\n\n        sorted_mat.extend(current_sum_mat)\n        mat = [row for row in mat if row not in current_sum_mat]\n\n    return sorted_mat\n\n\nif __name__ == \"__main__\":\n    assert sort_rows_sum([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert sort_rows_sum([[2, 4], [1, 3]]) == [[1, 3], [2, 4]]\n    assert sort_rows_sum([[1, 2], [3, 4], [4, 3]]) == [[1, 2], [4, 3], [3, 4]]\n    assert sort_rows_sum([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    assert sort_rows_sum([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_rows_sum([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    assert sort_rows_sum([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*n*log(n*n))\n    Space Complexity: O(n*n)\n    \"\"\"\n    matrix_sums = []\n\n    for row in matrix:\n        row_sum = sum(row)\n        matrix_sums.append((row_sum, row))\n\n    matrix_sums.sort(key=lambda x: x[0])\n\n    return [row for _, row in matrix_sums]\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert sort_matrix([[1, 1], [1, 9]]) == [[1, 1], [1, 9]]\n    assert sort_matrix([[1, 1], [9, 1]]) == [[9, 1], [1, 1]]\n    assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(m*n*log(m*n))\n    Space Complexity: O(m*n)\n    \"\"\"\n    rows_sums = [[sum(row) for row in matrix]]\n    rows_sums += matrix\n    rows_sums.sort(key=lambda row: sum(row))\n    return rows_sums\n\n\nif __name__ == \"__main__\":\n    print(sort_matrix([[3, 5, 7], [2, 4, 6], [1, 3, 2]]))\n    print(sort_matrix([[1, 1, 1], [1, 2, 3], [1, 2, 4], [1, 3, 5]]))",
    "from typing import List\n\n\n# O(n^2) time | O(1) space\ndef sortMatrix(matrix: List[List[int]]) -> List[List[int]]:\n    for i in range(len(matrix)):\n        for j in range(i, len(matrix[i])):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n\n\n\"\"\"\ndef sortMatrix(matrix: List[List[int]]) -> List[List[int]]:\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sum_of_row = getSum(matrix, i)\n            if len(sorted_matrix) == 0:\n                sorted_matrix.append([matrix[i][j]])\n            else:\n                for k in range(len(sorted_matrix)):\n                    if sum_of_row < getSum(sorted_matrix, k):\n                        sorted_matrix.insert(k, [matrix[i][j]])\n                        break\n                    elif k == len(sorted_matrix) - 1:\n                        sorted_matrix.append([matrix[i][j]])\n                        break\n    return sorted_matrix\n\n\ndef getSum(matrix, i):\n    sum_of_row = 0\n    for j in range(len(matrix[i])):\n        sum_of_row += matrix[i][j]\n    return sum_of_row\n\"\"\"",
    "from typing import List\n\n\ndef row_sum(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Get sum of each row.\"\"\"\n    return [sum(row) for row in matrix]\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Sort matrix by row sum.\"\"\"\n    return sorted(matrix, key=row_sum)\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[3, 3, 1], [2, 2, 2], [1, 1, 5]]) == [\n        [1, 1, 5],\n        [2, 2, 2],\n        [3, 3, 1],\n    ]",
    "from collections import defaultdict\n\n\n# 1st solution\n# O(m * n * log(m))\ndef sort_matrix_by_sum_of_rows(matrix):\n    rows = defaultdict(list)\n    for i in range(len(matrix)):\n        rows[sum(matrix[i])].append(i)\n    return sorted(rows.keys())\n\n\n# 2nd solution\n# O(m * n * log(m))\ndef sort_matrix_by_sum_of_rows(matrix):\n    result = []\n    for row in matrix:\n        result.append(sum(row))\n    return [i for i, _ in sorted(zip(matrix, result), key=lambda x: x[1])]",
    "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_matrix(matrix))",
    "from collections import defaultdict\nfrom copy import deepcopy\n\n\ndef get_sum_of_row(matrix):\n    \"\"\"\n    Return a dictionary with sum of each row as key and row as value\n    \"\"\"\n    sum_of_row = defaultdict(list)\n    for row in matrix:\n        sum_of_row[sum(row)].append(row)\n\n    return sum_of_row\n\n\ndef get_matrix_with_sum_of_row_as_key(matrix):\n    \"\"\"\n    Return a dictionary with sum of each row as key and row as value\n    \"\"\"\n    sum_of_row = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sum_of_row[sum(row)].append(i)\n\n    return sum_of_row\n\n\ndef sort_matrix_by_sum_of_row(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows\n    \"\"\"\n    sum_of_row = get_sum_of_row(matrix)\n    matrix_with_sum_of_row_as_key = get_matrix_with_sum_of_row_as_key(matrix)\n\n    for row in matrix:\n        row.sort()\n\n    sorted_matrix = deepcopy(matrix)\n\n    for key in sorted(sum_of_row.keys()):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if i in matrix_with_sum_of_row_as_key[key]:\n                    sorted_matrix[i][j] = matrix[i][j]\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 3, 2], [2, 1, 3], [1, 2, 3]]\n    print(sort_matrix_by_sum_of_row(matrix))",
    "def sort_matrix(matrix):\n    sorted_matrix = []\n    for _ in range(len(matrix)):\n        sorted_matrix.append([])\n\n    while len(matrix) > 0:\n        lowest_sum = get_lowest_sum(matrix)\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if sum(matrix[i]) == lowest_sum:\n                    sorted_matrix[i].append(matrix[i].pop(j))\n\n    return sorted_matrix\n\n\ndef get_lowest_sum(matrix):\n    lowest_sum = sum(matrix[0])\n    for i in range(len(matrix)):\n        if sum(matrix[i]) < lowest_sum:\n            lowest_sum = sum(matrix[i])\n    return lowest_sum\n\n\nprint(sort_matrix([[1, 2], [3, 4]]))\nprint(sort_matrix([[1, 3], [2, 4]]))\nprint(sort_matrix([[1, 3, 5], [2, 4, 6], [7, 8, 9]]))",
    "def matrix_sort(matrix):\n    \"\"\"\n    >>> matrix_sort([[1, 2], [3, 4]])\n    [[2, 1], [4, 3]]\n    >>> matrix_sort([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> matrix_sort([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    [[3, 2, 1], [6, 5, 4], [9, 8, 7], [12, 11, 10]]\n    \"\"\"\n    return sorted(matrix, key=sum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\n# O(n^2 * log(sum of rows))\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # sum of rows\n    sums = []\n    for i in range(len(matrix)):\n        sums.append(sum(matrix[i]))\n\n    # sort matrix according to sums\n    sorted_sums = sorted(sums)\n    sorted_matrix = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            sorted_matrix[sums.index(sums[i])][j] = matrix[i][j]\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2], [3, 4]]\n    assert sort_matrix(matrix) == [[3, 4], [1, 2]]",
    "from typing import List\n\n\n# O(n^2) time | O(1) space\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # sort the rows\n    sorted_rows = sorted(matrix, key=lambda row: sum(row))\n\n    # update the matrix with sorted rows\n    for row_index in range(len(matrix)):\n        matrix[row_index] = sorted_rows[row_index]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2], [3, 4]]\n    print(sort_matrix(matrix))",
    "from collections import defaultdict\n\n\ndef sort_by_sum(matrix):\n    # Write your code here\n    m = {}\n    for i in range(len(matrix)):\n        m[sum(matrix[i])] = i\n\n    return [matrix[v] for _, v in sorted(m.items())]\n\n\nif __name__ == \"__main__\":\n    matrix = [[3, 2, 1],\n              [1, 2, 3],\n              [4, 5, 6]]\n    print(sort_by_sum(matrix))",
    "from typing import List\n\n\ndef get_sum(matrix: List[List[int]]) -> int:\n    return sum(sum(row) for row in matrix)\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    sorted_matrix = []\n\n    while matrix:\n        max_sum = float('-inf')\n        index = None\n\n        for i in range(len(matrix)):\n            if get_sum(matrix[i]) > max_sum:\n                index = i\n                max_sum = get_sum(matrix[i])\n\n        sorted_matrix.append(matrix.pop(index))\n\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2], [2, 3]]) == [[2, 3], [1, 2]]\n    assert sort_matrix([[1, 3, 5], [1, 5, 2], [2, 1, 3]]) == [[1, 3, 5], [2, 1, 3], [1, 5, 2]]",
    "from collections import defaultdict\n\n\ndef sum_of_rows(matrix):\n    sums = defaultdict(list)\n    for i, row in enumerate(matrix):\n        sums[sum(row)].append(i)\n    return sums\n\n\ndef sort_matrix(matrix):\n    sums = sum_of_rows(matrix)\n    return [[matrix[i][j] for i in sums[k]] for k in sorted(sums)]\n\n\nprint(sort_matrix([[1, 2, 3], [3, 2, 1], [4, 1, 1]]))\nprint(sort_matrix([[1, 3, 5], [1, 3, 4], [1, 3, 5], [1, 3, 5]]))",
    "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n * m * log(n * m))\n    Space Complexity: O(n * m)\n    \"\"\"\n    matrix_sorted = sorted(matrix, key=lambda x: sum(x))\n\n    return matrix_sorted\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 4, 5], [10, 11, 13], [12, 13, 15]]) == [\n        [1, 4, 5],\n        [12, 13, 15],\n        [10, 11, 13],\n    ]\n    assert sort_matrix([[1, 3], [2, 5], [3, 7]]) == [[1, 3], [2, 5], [3, 7]]",
    "from collections import defaultdict\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param: matrix - two dimensional array of integers\n    return - sorted matrix according to the sum of its rows\n    \"\"\"\n    if not matrix:\n        return matrix\n\n    row_sums = defaultdict(list)\n\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums[row_sum].append(row)\n\n    return [row for row_sum, rows in sorted(row_sums.items()) for row in rows]\n\n\ndef test_function(test_case):\n    matrix = test_case[0]\n    solution = test_case[1]\n    output = sort_matrix(matrix)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nmatrix = [[3, 3, 3], [3, 2, 6], [2, 2, 1]]\nsolution = [[2, 2, 1], [3, 3, 3], [3, 2, 6]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[1, 2], [2, 3]]\nsolution = [[2, 3], [1, 2]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[1, 3, 2], [3, 1, 4], [2, 4, 1]]\nsolution = [[1, 3, 2], [3, 1, 4], [2, 4, 1]]\ntest_case = [matrix, solution]\ntest_function(test_case)\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsolution = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntest_case = [matrix, solution]\ntest_function(test_case)",
    "def sort_matrix(matrix: list) -> list:\n    \"\"\"\n    >>> sort_matrix([[4, 6, 1], [1, 3, 4], [5, 2, 6]])\n    [[1, 3, 4], [4, 6, 1], [5, 2, 6]]\n    >>> sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> sort_matrix([[4, 6, 1], [1, 3, 4], [5, 2, 6], [7, 8, 9]])\n    [[1, 3, 4], [4, 6, 1], [5, 2, 6], [7, 8, 9]]\n    >>> sort_matrix([[4, 6, 1], [1, 3, 4], [5, 2, 6], [7, 8, 9], [1, 3, 2]])\n    [[1, 3, 2], [1, 3, 4], [4, 6, 1], [5, 2, 6], [7, 8, 9]]\n    \"\"\"\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix)):\n            if sum(matrix[i]) < sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# O(n^2 * log(n)) time | O(1) space\ndef sortMatrixBySumOfRows(matrix):\n    return quickSort(matrix, 0, len(matrix) - 1)\n\n\ndef quickSort(matrix, start, end):\n    if start >= end:\n        return matrix\n\n    pivot = helper(matrix, start, end)\n    quickSort(matrix, start, pivot - 1)\n    quickSort(matrix, pivot + 1, end)\n    return matrix\n\n\ndef helper(matrix, start, end):\n    pivot = start\n    left = start + 1\n    right = end\n\n    while left <= right:\n        if matrix[left][0] + matrix[left][1] > matrix[pivot][0] + matrix[pivot][1]:\n            right -= 1\n        elif matrix[left][0] + matrix[left][1] < matrix[pivot][0] + matrix[pivot][1]:\n            left += 1\n        else:\n            left += 1\n\n    matrix[pivot], matrix[right] = matrix[right], matrix[pivot]\n    return right",
    "def sort_matrix_rows(matrix):\n    return sorted(matrix, key=sum)\n\n\nif __name__ == \"__main__\":\n    matrix = [[3, 2, 1],\n              [1, 2, 3],\n              [2, 1, 3]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],\n                                        [2, 1, 3],\n                                        [3, 2, 1]])\n\n    matrix = [[3, 2, 1],\n              [1, 2, 3],\n              [3, 1, 2]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],\n                                        [2, 1, 3],\n                                        [3, 1, 2]])\n\n    matrix = [[3, 2, 1],\n              [2, 1, 3],\n              [1, 3, 2]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],\n                                        [2, 1, 3],\n                                        [3, 1, 2]])\n\n    matrix = [[3, 2, 1],\n              [1, 3, 2],\n              [2, 1, 3]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],\n                                        [2, 1, 3],\n                                        [3, 1, 2]])\n\n    matrix = [[3, 2, 1],\n              [2, 1, 3],\n              [3, 1, 2]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],\n                                        [2, 1, 3],\n                                        [3, 1, 2]])\n\n    matrix = [[3, 2, 1],\n              [3, 1, 2],\n              [2, 1, 3]]\n    assert(sort_matrix_rows(matrix) == [[1, 2, 3],",
    "# def sort_matrix(matrix):\n#     return sorted(matrix, key=lambda x: sum(x))\n\ndef sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = matrix[i][j] * (i + 1)\n    matrix.sort(key=lambda x: sum(x))\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = matrix[i][j] // (i + 1)\n    return matrix",
    "from typing import List\n\n\n# O(n^2) time | O(n^2) space\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    rows_sums = [sum(row) for row in matrix]\n\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if rows_sums[i] > rows_sums[j]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n                rows_sums[i], rows_sums[j] = rows_sums[j], rows_sums[i]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    print(sort_matrix([[3, 10, 100], [100, 10, 3], [3, 10, 100]]))\n    print(sort_matrix([[3, 10, 100], [100, 10, 3]]))\n    print(sort_matrix([[3, 10, 100], [100, 10, 3], [3, 10, 100], [100, 10, 3]]))\n    print(sort_matrix([[3, 10, 100], [100, 10, 3], [3, 10, 100], [100, 10, 3], [3, 10, 100]]))\n    print(sort_matrix([[3, 10, 100], [100, 10, 3], [3, 10, 100], [100, 10, 3], [3, 10, 100], [100, 10, 3]]))",
    "def sort_matrix(matrix):\n    \"\"\"\n    :param matrix: list[list[int]]\n    :return: list[list[int]]\n    \"\"\"\n    # Check if the input is valid\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Calculate the row sum\n    row_sum = [sum(row) for row in matrix]\n\n    # Sort the matrix according to the row sum\n    sorted_matrix = [row for _, row in sorted(zip(row_sum, matrix))]\n\n    return sorted_matrix\n\n\nif __name__ == '__main__':\n    print(sort_matrix([[1, 4, 3], [5, 2, 6], [7, 8, 9]]))\n    print(sort_matrix([[4, 3, 1], [2, 6, 5], [7, 8, 9]]))",
    "from typing import List\n\n\n# Time complexity: O(n log n)\n# Space complexity: O(1)\ndef sort_matrix(matrix: List[List[int]]) -> None:\n    \"\"\"Sort a given matrix in ascending order according to the sum of its rows.\"\"\"\n    # Sort matrix by the sum of its rows\n    matrix.sort(key=lambda row: sum(row))\n\n\nif __name__ == \"__main__\":\n    matrix = [[2, 3, 4], [1, 2, 3], [4, 3, 2]]\n    sort_matrix(matrix)\n    assert matrix == [[1, 2, 3], [2, 3, 4], [4, 3, 2]]",
    "def sort_matrix(matrix):\n    return [matrix[i] for i in sorted(range(len(matrix)), key=lambda x: sum(matrix[x]))]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}