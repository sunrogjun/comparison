{
  "problem": {
    "task_id": "MBPP/299",
    "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
    "test_list": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ],
    "challenge_test_list": [],
    "problem_id": 288
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from collections import namedtuple\n\nAggregate = namedtuple(\"Aggregate\", [\"max_value\", \"max_length\"])\n\n\ndef max_aggregate(tuples):\n    \"\"\"Returns a namedtuple with the maximum aggregate.\n\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4)])\n    Aggregate(max_value=9, max_length=3)\n\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (3, 4, 5, 6)])\n    Aggregate(max_value=21, max_length=4)\n    \"\"\"\n    if not tuples:\n        return Aggregate(0, 0)\n\n    max_value = max_length = 0\n    for t in tuples:\n        value = sum(t)\n        if value > max_value:\n            max_value = value\n            max_length = len(t)\n        elif value == max_value and len(t) > max_length:\n            max_length = len(t)\n    return Aggregate(max_value, max_length)",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> int:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not tuples:\n        return 0\n\n    max_agg = 0\n    agg = 0\n\n    for i, j in tuples:\n        agg += i\n        agg -= j\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([(2, 1), (2, 2), (2, 3), (1, 1)]) == 3",
    "def max_aggregate(tuples):\n    \"\"\"Return the max aggregate of the list of tuples.\"\"\"\n    return max([sum(tup) for tup in tuples])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_aggregate(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([(1, 2, 3), (2, 2, 2)], 8))\ntest_function(([(1, 2, 3), (-2, 2, 2)], 5))\ntest_function(([(1, 2, 3), (2, 2, 2), (3, -1, 4)], 9))\ntest_function(([(1, 2, 3), (2, 2, 2), (3, -1, 4), (-1, 4, -1)], 10))\ntest_function(([(1, 2, 3), (2, 2, 2), (3, -1, 4), (-1, 4, -1), (-2, -2, -2)], 11))",
    "from itertools import chain\nfrom typing import List, Tuple\n\n\ndef max_aggregate(tuples: List[Tuple[int, ...]]) -> int:\n    \"\"\"Calculate the maximum aggregate from the list of tuples.\n\n    Examples:\n        >>> assert max_aggregate([(1, 2, 3), (10, 20, 30)]) == 60\n        >>> assert max_aggregate([(1, 2, 3), (10, 20, 30, 40)]) == 70\n\n    Args:\n        tuples (List[Tuple[int, ...]]): list of tuples\n\n    Returns:\n        int: maximum aggregate\n    \"\"\"\n    return max(chain.from_iterable(tuples))\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2, 3), (10, 20, 30)]))",
    "def max_aggregate(l):\n    max_val = 0\n    for i in range(len(l)):\n        if max_val < sum(l[i]):\n            max_val = sum(l[i])\n    return max_val\n\n\ndef test(l, expected_answer):\n    answer = max_aggregate(l)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 27)\n    test([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 42)",
    "def max_aggregate(tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    10\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)])\n    35\n    >>> max_aggregate([(1, 2), (1, 3), (1, 4), (1, 5), (2, 6), (3, 7), (4, 8)])\n    20\n    \"\"\"\n    max_agg = 0\n    for num1, num2 in tuples:\n        max_agg = max(max_agg, num1 + num2)\n    return max_agg\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def aggregate_max(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    return: the maximum aggregate value\n    \"\"\"\n    # Your code here\n    max_agg = -float('inf')\n    for tup in tuples:\n        if tup[0] == 'income':\n            max_agg += tup[1]\n        else:\n            max_agg -= tup[1]\n        if max_agg < 0:\n            max_agg = 0\n    return max_agg\n\nprint(aggregate_max([('income', 50), ('expense', 20), ('income', 100)]))",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_value = 0\n\n    for i in range(len(data)):\n        if i == 0:\n            max_value = data[i][0] + data[i][1]\n        else:\n            max_value = max(max_value, data[i][0] + data[i - 1][1])\n\n    return max_value\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)]) == 10\n    assert max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 16\n    assert max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 22\n    assert max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 28",
    "from typing import List\n\n\ndef max_aggregate(lst: List[tuple]) -> tuple:\n    \"\"\"Return the maximum aggregate from a list of tuples.\n\n    :param lst: list of tuples to be processed\n    :return: maximum aggregate\n    \"\"\"\n    return max(lst, key=lambda t: sum(t))\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2, 3), (3, 2, 1), (4, 5, 6), (6, 5, 4)]))",
    "from typing import List, Tuple\n\n\ndef maximum_aggregate(tup_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(n)\n    \"\"\"\n    tup_list.sort()\n    max_sum = tup_list[0][0] + tup_list[0][1]\n\n    for idx in range(len(tup_list) - 1):\n        if tup_list[idx][1] < tup_list[idx + 1][0]:\n            continue\n\n        max_sum = max(max_sum, tup_list[idx][0] + tup_list[idx + 1][1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximum_aggregate([(1, 2), (2, 3), (1, 4), (5, 6), (7, 8)]) == 11\n    assert maximum_aggregate([(1, 2), (5, 6), (7, 8), (1, 4), (2, 3)]) == 11\n    assert maximum_aggregate([(1, 2), (1, 4), (5, 6), (7, 8), (2, 3)]) == 11",
    "from itertools import chain\n\n\ndef get_max_aggregate(lst):\n    \"\"\"Return the maximum aggregate from the list of tuples.\n\n    :param lst: list of tuples\n    :type lst: list\n    :return: maximum aggregate\n    :rtype: int\n    \"\"\"\n    return max(chain.from_iterable(lst))",
    "from typing import List, Tuple\n\n\ndef max_aggregate(aggregates: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_val = 0\n\n    for i, j in aggregates:\n        max_val = max(max_val, i + j)\n\n    return max_val\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (2, 3), (9, 0), (5, -10), (2, 1)]))",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4)])\n    9\n    \"\"\"\n    return sum(\n        max(aggregate, key=sum) for aggregate in zip(*data)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(lst: list) -> int:\n    \"\"\"Return the maximum aggregate of a list of tuples.\n\n    Args:\n        lst (list): list of tuples to calculate maximum aggregate from\n\n    Examples:\n        >>> max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5)])\n        11\n        >>> max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5), (6, 6)])\n        13\n        >>> max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5), (6, 6), (7, 7)])\n        15\n    \"\"\"\n    # Get a list of all the values in the tuple\n    lst = [val for tup in lst for val in tup]\n    # Create a copy of the list to sort\n    lst_copy = lst.copy()\n    # Sort the list in descending order\n    lst_copy.sort(reverse=True)\n    # Get the aggregate of the sorted list\n    aggregate = 0\n    for num in lst_copy:\n        aggregate += num\n        if aggregate > lst_copy[0]:\n            break\n    return aggregate\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5)]))\n    print(max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5), (6, 6)]))\n    print(max_aggregate([(1, 1), (2, 3), (3, 4), (4, 2), (5, 5), (6, 6), (7, 7)]))",
    "from itertools import chain\n\n\ndef get_max_aggregate(lst):\n    \"\"\"Returns the maximum aggregate value from the list of tuples.\n    >>> get_max_aggregate([(1, 2), (2, 2), (3, 1), (4, 3), (5, 1)])\n    10\n    >>> get_max_aggregate([(1, 2), (2, 2), (3, 1), (4, 3), (5, 1), (6, 1)])\n    11\n    \"\"\"\n    return max(chain(*lst))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from collections import namedtuple\n\n\ndef get_max_aggregate(list_of_tuples):\n    \"\"\"\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4)])\n    9\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4), (-2, -2)])\n    5\n    \"\"\"\n    max_agg = 0\n    Aggregate = namedtuple(\"Aggregate\", [\"x\", \"y\"])\n\n    for item in list_of_tuples:\n        agg = Aggregate(*item)\n        max_agg += agg.x + agg.y\n\n    return max_agg\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(data):\n    max_val = 0\n    for i in data:\n        if i[0] + i[1] > max_val:\n            max_val = i[0] + i[1]\n    return max_val\n\n\nprint(max_aggregate([(1, 2), (1, 4), (3, 4), (1, 3)]))",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> tuple:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not data:\n        return None\n\n    max_sum, max_list = 0, []\n\n    for idx, (val, idx_2) in enumerate(data):\n        if idx == 0:\n            max_sum, max_list = val, [idx_2]\n        else:\n            if val + max_sum > val:\n                max_sum += val\n                max_list.append(idx_2)\n            else:\n                max_sum = val\n                max_list = [idx_2]\n\n    return max_sum, max_list\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([(1, 3), (2, 3), (6, 4), (20, 2)]) == (24, [3, 4])",
    "def max_aggregate(list_of_tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    10\n    \"\"\"\n    return sum(max(item) for item in list_of_tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> float:\n    \"\"\"Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        data (List[tuple]): List of tuples\n\n    Examples:\n        >>> assert max_aggregate([(2, 3), (4, 5), (1, 3), (5, 6), (2, 3)]) == 20\n        >>> assert max_aggregate([(2, 3), (4, 5), (1, 3), (5, 6), (2, 3)]) == 20\n    \"\"\"\n    return max(sum(value) for value in data)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(2, 3), (4, 5), (1, 3), (5, 6), (2, 3)]))",
    "from typing import List, Tuple\n\n\ndef get_max_aggregate(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_aggregate = 0\n\n    for left, right in tuples:\n        max_aggregate = max(max_aggregate, left + right)\n\n    return max_aggregate\n\n\nif __name__ == \"__main__\":\n    assert get_max_aggregate([(1, 2), (3, 4)]) == 7\n    assert get_max_aggregate([(1, 2), (-1, 3)]) == 4\n    assert get_max_aggregate([(1, 2), (-1, 3), (5, 6)]) == 11",
    "from typing import List\n\n\ndef max_aggregate(nums: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate of the tuples in the list.\n\n    Args:\n        nums (List[tuple]): list of tuples with 2 numbers\n\n    Examples:\n        >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n        10\n        >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)])\n        15\n        >>> max_aggregate([(1, 2), (2, 3), (3, 4), (-4, -5), (-5, -6)])\n        3\n    \"\"\"\n    return max(sum(num) for num in nums)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)]))\n    print(max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))\n    print(max_aggregate([(1, 2), (2, 3), (3, 4), (-4, -5), (-5, -6)]))",
    "from collections import defaultdict\nfrom typing import List\n\n\ndef max_aggregate(items: List[tuple]) -> int:\n    \"\"\"Finds maximum aggregate from list of tuples.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_val = 0\n    curr_val = 0\n\n    for item in items:\n        curr_val += item[0]\n        curr_val -= item[1]\n\n        if curr_val > max_val:\n            max_val = curr_val\n\n    return max_val\n\n\ndef max_aggregate_v2(items: List[tuple]) -> int:\n    \"\"\"Finds maximum aggregate from list of tuples.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    aggregates = defaultdict(int)\n\n    for item in items:\n        aggregates[item[0]] += item[0]\n        aggregates[item[1]] -= item[1]\n\n    max_val = 0\n    for aggregate in aggregates.values():\n        if aggregate > max_val:\n            max_val = aggregate\n\n    return max_val\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [(1, 2), (2, 3), (3, 4)],\n        [(1, 2), (2, 3), (3, 4), (1, 2)],\n        [(1, 2), (2, 3), (3, 4), (1, 2), (1, 2)],\n        [(1, 2), (2, 3), (3, 4), (1, 2), (1, 2), (2, 3)],\n        [(1, 2), (2, 3), (3, 4), (1, 2), (1, 2), (2, 3), (1, 2)],\n        [(1, 2), (2, 3), (3, 4), (1, 2), (1, 2), (2, 3), (1, 2),",
    "def max_agg(list_of_tuples):\n    \"\"\"\n    Find the maximum aggregate value from a list of tuples.\n\n    Args:\n        list_of_tuples (list): list of tuples\n\n    Returns:\n        int: maximum aggregate value\n    \"\"\"\n    return max([sum(i) for i in list_of_tuples])",
    "def aggregate_list(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append(sum(lst[i]))\n    return max(result)\n\n\nlst = [(2, 4, 6), (1, 2, 3), (4, 5, 6)]\nprint(aggregate_list(lst))",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> int:\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    >>> max_aggregate([(1, 2), (2, 3)])\n    5\n    >>> max_aggregate([(1, 2), (3, 4)])\n    7\n    >>> max_aggregate([(1, 2), (3, 4), (-1, -1)])\n    4\n    >>> max_aggregate([(1, 2), (3, 4), (-1, -1), (4, 5)])\n    9\n    >>> max_aggregate([(1, 2), (3, 4), (-1, -1), (4, 5), (3, 4)])\n    10\n    \"\"\"\n    return max(\n        sum(tup) for tup in tuples if sum(tup) > 0\n    )  # Return the maximum aggregate.\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def get_max_aggregate(list_of_tuples):\n    return max(list_of_tuples, key=lambda x: sum(x))\n\nprint(get_max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]))\nprint(get_max_aggregate([(2, 7), (1, 5), (3, 8), (4, 6)]))\nprint(get_max_aggregate([(3, 8), (2, 7), (4, 6), (1, 5)]))\nprint(get_max_aggregate([(5, 4), (3, 9), (7, 8), (1, 2)]))",
    "def max_aggregate(l):\n    return max(sum(l[i:i + 2]) for i in range(0, len(l) - 1, 2))\n\n\ndef test_max_aggregate():\n    assert max_aggregate([(1, 2), (2, 3), (1, 4)]) == 7\n    assert max_aggregate([(1, 2), (-1, 2), (1, 4)]) == 5\n    assert max_aggregate([(1, 2), (-1, 2)]) == 1",
    "def max_aggregate(tuples):\n    return max([sum(tuple) for tuple in tuples])",
    "def max_aggregate(arr):\n    # iterate over the array\n    # check if the length of the array is 1\n    # if yes, return the value of the first element\n    # initialize a variable max_sum to 0\n    # iterate over the array\n    # if the sum of the current element and the max_sum is greater than the max_sum,\n    # update the max_sum\n    # return max_sum\n    if len(arr) == 1:\n        return arr[0][0]\n    max_sum = 0\n    for element in arr:\n        max_sum = max(max_sum, element[0] + element[1])\n    return max_sum\n\n\ndef main():\n    print(max_aggregate([(1, 2), (2, 3), (1, 3)]))\n    print(max_aggregate([(1, 2), (5, 6), (1, 3)]))\n    print(max_aggregate([(1, 2), (-2, 3)]))\n    print(max_aggregate([(1, 2)]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate from the list of tuples.\n\n    Args:\n        data (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (2, 3)]) == 5\n        >>> assert max_aggregate([(1, 2), (-1, 3)]) == 3\n    \"\"\"\n    return max(sum(item) for item in data)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (-1, 3)]))",
    "def max_aggregate(tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (3, 4)])\n    10\n    >>> max_aggregate([(1, 2), (2, 3), (4, 5)])\n    12\n    >>> max_aggregate([(1, 2), (2, 3), (4, 5), (6, 7), (8, 9)])\n    30\n    \"\"\"\n    # Your code goes here\n    tuples.sort(key=lambda x: x[0])\n    max_aggregate = 0\n    cur_aggregate = 0\n    cur_max = 0\n    for t in tuples:\n        if t[0] == cur_max:\n            cur_aggregate += t[1]\n        else:\n            if cur_aggregate > max_aggregate:\n                max_aggregate = cur_aggregate\n            cur_max = t[0]\n            cur_aggregate = t[1]\n    if cur_aggregate > max_aggregate:\n        max_aggregate = cur_aggregate\n    return max_aggregate\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import namedtuple\n\n\ndef max_aggregate(tup):\n    \"\"\"Return the maximum aggregate.\"\"\"\n    tup_list = list(tup)\n    tup_list.sort()\n    return tup_list[len(tup_list) - 1]\n\n\ndef test_max_aggregate():\n    \"\"\"Test max aggregate.\"\"\"\n    assert max_aggregate(((1, 2), (3, 4), (5, 6), (7, 8))) == 20\n\n\nif __name__ == '__main__':\n    test_max_aggregate()",
    "def max_aggregate(list_of_tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3)])\n    6\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    14\n    \"\"\"\n    # your code here\n    if len(list_of_tuples) == 0:\n        return 0\n    if len(list_of_tuples) == 1:\n        return list_of_tuples[0][0] + list_of_tuples[0][1]\n\n    if len(list_of_tuples) == 2:\n        return max(list_of_tuples[0][0] + list_of_tuples[1][1], list_of_tuples[1][0] + list_of_tuples[0][1])\n\n    return max(list_of_tuples[0][0] + list_of_tuples[1][1], list_of_tuples[0][0] + max_aggregate(list_of_tuples[2:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate from the list of tuples.\n    >>> max_aggregate([(1, 2), (3, 4)])\n    10\n    >>> max_aggregate([(1, 2), (4, 3)])\n    7\n    >>> max_aggregate([(1, 2), (3, 4), (3, 2)])\n    9\n    \"\"\"\n    return max(sum(t) for t in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(data):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (10, -2), (9, 0)])\n    11\n    >>> max_aggregate([(1, 2), (-2, 3), (3, 4), (10, -2), (9, 0)])\n    12\n    \"\"\"\n    # Your code goes here\n    return max(sum(item) for item in data)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import chain\nfrom typing import Iterable, Tuple\n\n\ndef max_aggregate(items: Iterable[Tuple[int, int]]) -> int:\n    \"\"\"Returns maximum aggregate of items.\n\n    >>> items = [(1, 2), (2, 2), (3, 2), (4, 3), (5, 3)]\n    >>> max_aggregate(items)\n    12\n    >>> items = [(1, 2), (2, 2), (3, 2), (4, 3), (5, 3), (6, 3)]\n    >>> max_aggregate(items)\n    15\n    >>> items = [(1, 2), (2, 2), (3, 2), (4, 3), (5, 3), (6, 3), (7, 4)]\n    >>> max_aggregate(items)\n    18\n    >>> items = [(1, 2), (2, 2), (3, 2), (4, 3), (5, 3), (6, 3), (7, 4), (8, 4)]\n    >>> max_aggregate(items)\n    20\n    \"\"\"\n    return max(chain(*items))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef get_max_aggregate(arr: List[Tuple[int, int]]) -> int:\n    \"\"\"Returns the maximum aggregate.\n\n    Args:\n        arr (List[Tuple[int, int]]): list of tuples to process\n\n    Examples:\n        >>> assert get_max_aggregate([(1, 2), (2, 3)]) == 5\n    \"\"\"\n    return max(sum(i) for i in arr)\n\n\nif __name__ == \"__main__\":\n    print(get_max_aggregate([(1, 2), (2, 3)]))",
    "def max_aggregate(l):\n    # Your code goes here\n    max_agg = 0\n    for i in l:\n        if i[0] + i[1] > max_agg:\n            max_agg = i[0] + i[1]\n    return max_agg\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(max_aggregate([(1, 2), (2, 3), (1, 3)]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert max_aggregate([(1, 2), (2, 3), (1, 3)]) == 6\n    assert max_aggregate([(2, 2), (2, 3), (1, 3), (10, 1), (1, 1)]) == 10\n    assert max_aggregate([(2, 3), (1, 3), (10, 1), (1, 1), (3, 2)]) == 10\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "from itertools import chain\nfrom collections import namedtuple\n\n\ndef max_aggregate(tuples):\n    \"\"\"Return the maximum aggregate from the list of tuples.\"\"\"\n    return max(chain(*tuples))\n\n\ndef main():\n    \"\"\"Print the maximum aggregate from the list of tuples.\"\"\"\n    print(max_aggregate([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]))  # 10\n\n    Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    print(max_aggregate([Point(1, 2), Point(3, 4)]))  # 4\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List, Tuple\n\n\ndef max_aggregate(aggregate: List[Tuple[int]]) -> int:\n    \"\"\"Returns the maximum aggregate from the list of tuples.\n\n    Args:\n        aggregate (List[Tuple[int]]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (2, 3), (3, 4)]) == 9\n        >>> assert max_aggregate([(1, 2), (2, 3)]) == 5\n        >>> assert max_aggregate([(1, 2)]) == 3\n        >>> assert max_aggregate([(1, 2), (2, -3)]) == 1\n    \"\"\"\n    return max(\n        sum(item) for item in aggregate\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (2, 3), (3, 4)]))",
    "def get_max_aggregate(tuples):\n    # type: (List[Tuple[int, int]]) -> int\n    \"\"\"\n\n    :param tuples: List[Tuple[int, int]]\n    :return: int\n    \"\"\"\n    # Your code here\n    return 0",
    "def max_aggregate(tuple_list):\n    \"\"\"\n    Return maximum aggregate from the list of tuples\n    >>> max_aggregate([(1, 2), (2, 3)])\n    5\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (1, 3)])\n    9\n    >>> max_aggregate([(1, 2), (-2, -3), (3, 4), (1, 3)])\n    5\n    >>> max_aggregate([(1, 2), (-2, -3), (-3, -4), (1, -3)])\n    0\n    >>> max_aggregate([(1, 2), (-2, -3), (-3, -4), (1, 3), (5, 6), (7, 8)])\n    15\n    \"\"\"\n    return max(\n        sum(tuple_list[i : i + 2], ())\n        for i in range(0, len(tuple_list), 2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def calculate_max_aggregate(list_of_tuples):\n    return max(list_of_tuples, key=sum)\n\n\nprint(calculate_max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "from itertools import chain\n\n\ndef max_aggregate(lst):\n    \"\"\"Return the maximum aggregate from a list of tuples.\"\"\"\n    return max(chain(*lst))",
    "def max_aggregate(tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 3), (2, 4), (3, 1), (4, 2), (5, 5)])\n    11\n    >>> max_aggregate([(1, 3), (2, 4), (3, 1), (4, 2), (5, 5), (6, 6)])\n    12\n    \"\"\"\n    max_aggregate = 0\n    for t in tuples:\n        max_aggregate += max(t)\n    return max_aggregate\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\n\ndef aggregate_max(tuples: List[tuple]) -> int:\n    \"\"\"\n    >>> aggregate_max([(1, 2), (2, 3), (3, 4)])\n    9\n    \"\"\"\n    return sum(max(tup) for tup in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def aggregate_max(lst):\n    \"\"\"\n    >>> aggregate_max([(1, 2), (3, 4), (5, 6), (7, 8)])\n    20\n    >>> aggregate_max([(1, 3), (5, 9)])\n    14\n    >>> aggregate_max([(5, 5), (5, 5), (5, 5), (5, 5)])\n    25\n    \"\"\"\n    max_agg = 0\n    for i in lst:\n        max_agg += max(i)\n    return max_agg\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List, Tuple\n\n\ndef get_max_aggregate(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    >>> get_max_aggregate([(2, 5), (4, 3), (6, 1)])\n    10\n    >>> get_max_aggregate([(1, 1), (1, 1), (1, 1)])\n    3\n    >>> get_max_aggregate([(1, 1), (1, 1), (1, 1), (1, 1)])\n    4\n    >>> get_max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])\n    15\n    \"\"\"\n    return max(\n        [\n            sum([i for i in lst_of_tuples])\n            for lst_of_tuples in [\n                lst[i : i + 2] for i in range(0, len(lst), 2)\n            ]\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> int:\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (10, 6)])\n    16\n    \"\"\"\n    return sum(max(data, key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef find_max_aggregate(values: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum aggregate value from the list of tuples.\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -1)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -5)])\n    18\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -20)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -10), (-1, -15)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -10), (-1, -15), (-1, -20)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -10), (-1, -15), (-1, -20), (-1, -20)])\n    25\n    >>> find_max_aggregate([(2, 10), (5, 3), (7, 1), (1, 8), (10, 5), (-1, -10), (-1,",
    "def get_max_aggregate(tuples):\n    \"\"\"\n    >>> get_max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])\n    20\n    \"\"\"\n    # your code here\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import OrderedDict\nfrom typing import List\n\n\ndef max_aggregate(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_num = 0\n    for num in nums:\n        max_num += num\n\n        if max_num < 0:\n            max_num = 0\n\n    return max_num\n\n\ndef max_aggregate_2(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    num_dict = OrderedDict()\n\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n\n    max_num = 0\n    for num in num_dict:\n        max_num += num * num_dict[num]\n\n    return max_num\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([3, 4, 5, -3, -4, -5, 3, -3, -4, -5]) == 35\n    assert max_aggregate([3, 4, 5, -3, -4, -5, 3, -3, -4, -5]) == 35\n    assert max_aggregate([3, 4, 5, -3, -4, -5, 3, -3, -4, -5]) == 35",
    "def max_aggregate(tup):\n    \"\"\"Returns the maximum aggregate value from the list of tuples.\n\n    Args:\n        tup (list): List of tuples.\n\n    Returns:\n        int: Maximum aggregate value.\n    \"\"\"\n    return max(sum(i) for i in tup)",
    "from typing import List\n\n\ndef max_aggregate(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum: int = 0\n\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            max_sum = max(max_sum, sum(nums[i:j + 1]))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([1, 2, 3, 4]))",
    "from collections import OrderedDict\n\ndef max_agg(lst):\n    \"\"\"Calculates the maximum aggregate of a list of tuples.\n    \"\"\"\n\n    # The dict to be used for calculations\n    max_dict = OrderedDict()\n    for i in lst:\n        if i[0] not in max_dict:\n            max_dict[i[0]] = [i[1]]\n        else:\n            max_dict[i[0]].append(i[1])\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in max_dict:\n        max_agg += max(max_dict[i])\n    return max_agg\n\nif __name__ == '__main__':\n    print max_agg([('a', 10), ('b', 20), ('a', 30), ('b', 40)])",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])\n    17\n    >>> max_aggregate([(1, 2), (3, 4), (-5, -6), (-7, -8)])\n    -1\n    \"\"\"\n    return max(\n        sum(pair) for pair in (zip(*data) if data else ([], []))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for item in data:\n        max_sum += max(item)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(max_aggregate([(1, 2, 3, 4), (5, 6, 7, 8)]))",
    "def max_aggregate(tuples):\n    max_aggregate = 0\n    for tuple in tuples:\n        sum = 0\n        for value in tuple:\n            sum += value\n        if sum > max_aggregate:\n            max_aggregate = sum\n    return max_aggregate\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    actual = max_aggregate(test_input)\n    if actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 12))\ntest_function(([(2, 3, 4), (0, 2, 3), (5, 6, 7)], 13))\ntest_function(([(2, 3, 4), (0, 0, 0), (5, 5, 5)], 10))\ntest_function(([(), (), ()], 0))",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate value from the list of tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (3, 4)]) == 6\n        >>> assert max_aggregate([(1, 2), (-3, 4)]) == 5\n    \"\"\"\n    return max(sum(pair) for pair in tuples)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (3, 4)]))",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> tuple:\n    \"\"\"Return the maximum aggregate from the list of tuples.\n\n    >>> max_aggregate([(1, 1), (2, 3), (3, 4), (4, 1)])\n    (4, 4)\n    \"\"\"\n    if not data:\n        return ()\n\n    max_val = max_agg = data[0]\n\n    for item in data[1:]:\n        if sum(item) > sum(max_val):\n            max_val = item\n        if sum(item) > max_agg:\n            max_agg = item\n\n    return max_agg\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> tuple:\n    \"\"\"\n    Return the maximum aggregate value from the list of tuples.\n    >>> max_aggregate([(1, 3), (2, 4), (5, 6)])\n    (5, 6)\n    >>> max_aggregate([(2, 4), (3, 5), (4, 1)])\n    (4, 1)\n    >>> max_aggregate([(1, 1), (2, 2), (3, 3)])\n    (3, 3)\n    >>> max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])\n    (5, 5)\n    \"\"\"\n    # Get the maximum aggregate value\n    return max(data, key=sum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(tuples):\n    return max(tuples, key=sum)\n\n\nif __name__ == '__main__':\n    print(max_aggregate([(2, 4), (4, 2), (1, 3), (3, 1)]))",
    "from typing import List\n\n\ndef maximum_aggregate(lst: List[tuple]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not lst:\n        return 0\n\n    max_val = lst[0][0] + lst[0][1]\n\n    for i in range(1, len(lst)):\n        if lst[i][0] + lst[i][1] > max_val:\n            max_val = lst[i][0] + lst[i][1]\n\n    return max_val\n\n\nif __name__ == \"__main__\":\n    assert maximum_aggregate([(1, 2), (2, 3), (1, 3)]) == 6\n    assert maximum_aggregate([(2, 3), (5, 1), (3, 5)]) == 10\n    assert maximum_aggregate([(2, 3), (5, 1), (3, 5), (1, 3)]) == 12\n    assert maximum_aggregate([(2, 3), (5, 1), (3, 5), (1, 3), (2, 3)]) == 14",
    "from collections import defaultdict\n\n\ndef max_aggregate(tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4)])\n    9\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    14\n    \"\"\"\n    dict_tuples = defaultdict(int)\n    for t in tuples:\n        dict_tuples[t[0]] += t[1]\n    return max(dict_tuples.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef max_aggregate(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_value = lst[0][0]\n    for num, multiplier in lst:\n        max_value = max(max_value, num * multiplier)\n    return max_value\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (2, 3), (2, 4)]))",
    "from typing import List, Tuple\n\n\ndef max_aggregate(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        tuples (List[Tuple[int, int]]): List of tuples\n\n    Examples:\n        >>> max_aggregate([(5, 5), (10, 10), (15, 15)])\n        30\n        >>> max_aggregate([(10, 10), (20, 20), (15, 15)])\n        50\n        >>> max_aggregate([(10, 10), (20, 20), (15, 15), (5, 5)])\n        50\n        >>> max_aggregate([(5, 10), (10, 15), (15, 20), (20, 25)])\n        100\n        >>> max_aggregate([(5, 5), (10, 10), (15, 15), (20, 20)])\n        65\n    \"\"\"\n    tuples.sort(key=lambda x: x[1], reverse=True)\n    max_sum = 0\n    for i in range(len(tuples)):\n        max_sum += tuples[i][0]\n        if max_sum < tuples[i][1]:\n            max_sum = tuples[i][1]\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(5, 5), (10, 10), (15, 15)]))\n    print(max_aggregate([(10, 10), (20, 20), (15, 15)]))\n    print(max_aggregate([(10, 10), (20, 20), (15, 15), (5, 5)]))\n    print(max_aggregate([(5, 10), (10, 15),",
    "from typing import List\n\n\ndef max_aggregate(items: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate value from the list of tuples.\"\"\"\n    return max(sum(i) for i in items)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(2, 3), (5, 4), (3, 7), (3, 1)]))",
    "from typing import List\n\n\ndef max_aggregate(list_of_tuples: List[tuple]) -> int:\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4)])\n    9\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    14\n    \"\"\"\n    if not list_of_tuples:\n        return 0\n\n    return sum(max(x) for x in zip(*list_of_tuples))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef max_aggregate(tuples):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])\n    20\n    \"\"\"\n    if not tuples:\n        return 0\n\n    aggregate = 0\n    dict_ = defaultdict(list)\n    for t in tuples:\n        dict_[t[0]].append(t[1])\n\n    for key, values in dict_.items():\n        aggregate += max(values)\n\n    return aggregate\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(data):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)])\n    12\n    >>> max_aggregate([(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)])\n    18\n    >>> max_aggregate([(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3), (4, 1), (4, 2), (4, 3)])\n    20\n    \"\"\"\n    # A: use a dict to store the aggregate\n    # B: iterate the tuples, and update the dict\n    # C: return the max aggregate\n    aggregate = {}\n    for key, value in data:\n        if key not in aggregate:\n            aggregate[key] = 0\n        aggregate[key] += value\n    return max(aggregate.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def aggregate_max(lst):\n    \"\"\"\n    >>> aggregate_max([(1, 2), (3, 4), (5, 6), (7, 8)])\n    20\n    >>> aggregate_max([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n    30\n    \"\"\"\n    return sum(max(pair) for pair in lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(lst: List[tuple]) -> tuple:\n    \"\"\"\n    Return maximum aggregate from list of tuples.\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (3, 4, 5)])\n    (3, 4, 5)\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (1, 1, 1)])\n    (2, 3, 4)\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (1, 1, 1), (4, 5, 6)])\n    (4, 5, 6)\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (-1, -2, -3), (4, 5, 6)])\n    (4, 5, 6)\n    >>> max_aggregate([(-1, -2, -3), (-2, -3, -4), (-1, -1, -1), (4, 5, 6)])\n    (4, 5, 6)\n    \"\"\"\n    # return max(lst, key=sum)\n    # return max(lst, key=sum, default=(0, 0, 0))\n    return max(lst, key=sum, default=None)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(input_list):\n    return sum(max(x) for x in input_list)\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_aggregate(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)], 100))\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8)], 126))\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)], 156))\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10)], 200))\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10), (9, 10, 11)], 230))\ntest_function(([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6),",
    "def max_aggregate(lst):\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6)])\n    11\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (-1, -2)])\n    7\n    >>> max_aggregate([(1, 2), (3, 4), (-5, -6), (-1, -2)])\n    7\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (-1, 7)])\n    13\n    >>> max_aggregate([(1, 2), (3, 4), (-5, -6), (-1, -7)])\n    13\n    \"\"\"\n    return max(\n        [\n            sum(tuple_)\n            for tuple_ in lst\n            if sum(tuple_) > 0\n        ] or [0]\n    )\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int, int]]) -> int:\n    \"\"\"Finds maximum aggregate value in the given list of tuples.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuples with values to aggregate\n\n    Examples:\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3)])\n        6\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (1, 2)])\n        6\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (-1, 2)])\n        6\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (-1, 2), (-1, 3)])\n        6\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (-1, 2), (-1, 3), (3, 5)])\n        11\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (-1, 2), (-1, 3), (3, 5), (4, 7)])\n        11\n        >>> max_aggregate([(2, 4), (1, 1), (3, 3), (-1, 2), (-1, 3), (3, 5), (4, 7), (1, 5)])\n        12\n    \"\"\"\n    sum_values = 0\n    max_value = 0\n    for (value, aggregate) in data:\n        sum_values += value\n        if sum_values > max_value:\n            max_value = sum_values\n        if sum_values < 0:\n            sum_values = 0\n    return max_value\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(2, 4), (1, 1), (3, 3)]))",
    "from collections import namedtuple\n\n\ndef get_max_aggregate(data):\n    \"\"\"\n    >>> get_max_aggregate([('a', 10), ('b', 20), ('c', 30), ('d', 40)])\n    'abcd'\n    \"\"\"\n    # 1) Create an empty namedtuple with 2 slots.\n    # 2) Create an empty set\n    # 3) Iterate over the tuples and for each tuple\n    #    1) If the second element of the tuple is greater than the max aggregate\n    #       found so far, then set the max aggregate to that value.\n    #    2) Add the first element of the tuple to the set.\n    # 4) Iterate over the set and append the elements in the list.\n    # 5) Return the list\n    Aggregate = namedtuple('Aggregate', 'max_aggregate set')\n    aggregate = Aggregate(max_aggregate=0, set=set())\n\n    for element in data:\n        if element[1] > aggregate.max_aggregate:\n            aggregate = Aggregate(\n                max_aggregate=element[1], set={element[0]}\n            )\n        elif element[1] == aggregate.max_aggregate:\n            aggregate.set.add(element[0])\n\n    return ''.join(aggregate.set)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def max_aggregate(tuples: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not tuples:\n        return 0\n\n    max_value = 0\n    for i in range(len(tuples)):\n        max_value += tuples[i][-1]\n        if max_value < 0:\n            max_value = 0\n\n    return max_value\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([(1, 2, 3), (2, 3, 4), (-1, 1, -10)]) == 5",
    "from typing import List, Tuple\n\n\ndef max_aggregate(nums: List[Tuple[int, int]]) -> int:\n    \"\"\"Calculates the maximum aggregate of the list of tuples.\n\n    Args:\n        nums (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) == 20\n    \"\"\"\n    return sum(max(num) for num in nums)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]))",
    "from collections import defaultdict\n\n\ndef get_max_aggregate(list_of_tuples):\n    \"\"\"\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    (4, 5)\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])\n    (6, 7)\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)])\n    (7, 8)\n    \"\"\"\n    max_value = float(\"-inf\")\n    max_aggregate = []\n\n    aggregates = defaultdict(int)\n    for key, value in list_of_tuples:\n        aggregates[key] += value\n        if aggregates[key] > max_value:\n            max_value = aggregates[key]\n            max_aggregate = [key]\n        elif aggregates[key] == max_value:\n            max_aggregate.append(key)\n    return max_aggregate[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from itertools import chain\n\n\ndef max_aggregate(lst):\n    \"\"\"Return the maximum aggregate from the list of tuples.\"\"\"\n    return max(chain.from_iterable(lst))",
    "def max_aggregate(data):\n    \"\"\"\n    >>> max_aggregate([(1, 3), (2, 3), (3, 2), (4, 1)])\n    10\n    \"\"\"\n    return sum(max(x) for x in zip(*data))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def aggregate_max(items):\n    \"\"\"Return max aggregate.\"\"\"\n    if not items:\n        return 0\n    max_val = max(items, key=lambda x: x[1])[1]\n    return sum(max_val for item in items if item[1] == max_val)",
    "def get_max_aggregate(l):\n    \"\"\"\n    :param l: list of tuples\n    :return: max aggregate\n    \"\"\"\n    return max([sum(i) for i in l])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = get_max_aggregate(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([(1, 2), (3, 4), (2, 3)], 9))\ntest_function(([(1, 2), (3, 4), (5, 6)], 12))\ntest_function(([(1, 2), (3, 4), (5, 6), (10, 12)], 26))\ntest_function(([(1, 2), (3, 4), (5, 6), (10, 12), (1, 2)], 18))\ntest_function(([(1, 2), (3, 4), (5, 6), (10, 12), (1, 2), (1, 2)], 20))\ntest_function(([(1, 2), (3, 4), (5, 6), (10, 12), (1, 2), (1, 2), (1, 2)], 24))\ntest_function(([(1, 2), (3, 4), (5, 6), (10, 12), (1, 2), (1, 2), (1, 2), (1, 2)], 28))",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> float:\n    \"\"\"Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 12\n        >>> assert max_aggregate([(1, 2), (3, 4), (5, 6), (-1, -2)]) == 12\n    \"\"\"\n    return max([sum(item) for item in tuples])\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (3, 4), (5, 6)]))",
    "def max_aggregate(tuples):\n    \"\"\"Calculate the maximum aggregate from the list of tuples.\"\"\"\n    return max(map(lambda x: sum(x), tuples))",
    "from typing import List\n\n\ndef max_aggregate(tuples: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate value from the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 3), (2, 4), (3, 5)]) == 12\n    \"\"\"\n    return max(sum(pair) for pair in tuples)\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 3), (2, 4), (3, 5)]))",
    "from typing import List, Tuple\n\n\ndef max_aggregate(data: List[Tuple[int, int]]) -> int:\n    \"\"\"Return the maximum aggregate value from the list of tuples.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> assert max_aggregate([(1, 2), (2, 3), (3, 1)]) == 6\n    \"\"\"\n    return sum(max(i) for i in zip(*data))\n\n\nif __name__ == \"__main__\":\n    print(max_aggregate([(1, 2), (2, 3), (3, 1)]))",
    "from typing import List\n\n\ndef max_aggregate(data: List[tuple]) -> int:\n    \"\"\"\n    Return the maximum aggregate.\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 1)])\n    6\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 2)])\n    7\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 3)])\n    7\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 4)])\n    8\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 5)])\n    10\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 6)])\n    12\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 7)])\n    13\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 8)])\n    14\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 9)])\n    15\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 10)])\n    16\n    >>> max_aggregate([(1, 2), (2, 2), (3, 1), (4, 11)])\n    17\n    \"\"\"\n    max_agg = 0\n\n    for x in data:\n        max_agg += max(x)\n\n    return max_agg\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef max_aggregate(arr: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_value = 0\n    for a, b in arr:\n        max_value = max(max_value + a, b)\n    return max_value\n\n\nif __name__ == \"__main__\":\n    assert max_aggregate([(1, 2), (-3, 4), (0, 6), (-3, 4)]) == 10\n    assert max_aggregate([(1, 2), (-3, 4), (0, 6), (-3, 4), (-2, 2)]) == 10",
    "from collections import namedtuple\n\n\ndef max_aggregate(values):\n    \"\"\"\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4)])\n    9\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (2, 3)])\n    10\n    \"\"\"\n    # Your code goes here\n    max_val = 0\n    for a, b in values:\n        max_val = max(max_val, a + b)\n    return max_val\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(tuples: list[tuple[int, ...]]) -> int:\n    \"\"\"Return the maximum aggregate from the list of tuples.\n\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)])\n    18\n    >>> max_aggregate([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8)])\n    24\n    \"\"\"\n    return max(sum(x) for x in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(values: list) -> int:\n    \"\"\"\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])\n    20\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n    20\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)])\n    20\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)])\n    20\n    >>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)])\n    20\n    \"\"\"\n    return max(sum(t) for t in values)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef max_aggregate(values: List[tuple]) -> int:\n    \"\"\"Returns the maximum aggregate of a list of tuples.\n\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    10\n    >>> max_aggregate([(1, 2), (1, 3), (1, 4), (1, 5)])\n    14\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)])\n    15\n    >>> max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])\n    18\n    \"\"\"\n    return sum(max(x) for x in zip(*values))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef aggregate_maximum(nums: List[tuple]) -> int:\n    \"\"\"\n    Calculate the maximum aggregate.\n\n    :param nums: List of tuples.\n    :return: Maximum aggregate.\n    >>> aggregate_maximum([(1, 2), (2, 3), (3, 4), (4, 5)])\n    10\n    >>> aggregate_maximum([(1, 2), (1, 3), (1, 4), (1, 5)])\n    14\n    >>> aggregate_maximum([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3)])\n    14\n    \"\"\"\n    return max(\n        [\n            sum(num[i] for num in nums)\n            for i in range(len(nums[0]))\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef find_max_aggregate(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"Find the maximum aggregate from the list of tuples.\n\n    Args:\n        lst (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> find_max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])\n        20\n        >>> find_max_aggregate([(1, 2), (3, 4), (-5, 6), (7, 8)])\n        14\n        >>> find_max_aggregate([(-1, 2), (3, 4), (5, 6), (7, -8)])\n        14\n    \"\"\"\n    return max([sum(tup) for tup in lst])\n\n\nif __name__ == \"__main__\":\n    print(find_max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(find_max_aggregate([(1, 2), (3, 4), (-5, 6), (7, 8)]))\n    print(find_max_aggregate([(-1, 2), (3, 4), (5, 6), (7, -8)]))",
    "def get_max_aggregate(data):\n    \"\"\"\n    >>> get_max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)])\n    10\n    \"\"\"\n    # Your code here\n    max_aggregate = 0\n    for tuple in data:\n        max_aggregate += tuple[0]\n        if max_aggregate < 0:\n            max_aggregate = 0\n    return max_aggregate\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def max_aggregate(list_of_tuples):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    max_num = 0\n    for i in list_of_tuples:\n        num = i[0] * i[1]\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\ndef main():\n    list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    print(max_aggregate(list_of_tuples))\n\n\nif __name__ == '__main__':\n    main()",
    "from itertools import chain\n\n\ndef max_aggregate(list_of_tuples):\n    \"\"\"Returns the maximum aggregate value.\"\"\"\n    return max(chain.from_iterable(list_of_tuples))\n\n\nif __name__ == '__main__':  # pragma no cover\n    # These \"asserts\" using only for self-checking and not necessary for\n    # auto-testing\n    MAX_AGGREGATE = 20\n    TUPLES = [(1, 4), (2, 5), (1, 1), (1, 6), (3, 3)]\n    RESULT = max_aggregate(TUPLES)\n    assert MAX_AGGREGATE == RESULT, \"Wrong answer\"",
    "def max_aggregate(list_of_tuples):\n    \"\"\"\n    Return the maximum aggregate value.\n\n    :param list_of_tuples: list of tuples\n    :return: int\n    \"\"\"\n    max_value = 0\n    for tpl in list_of_tuples:\n        if sum(tpl) > max_value:\n            max_value = sum(tpl)\n    return max_value"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}