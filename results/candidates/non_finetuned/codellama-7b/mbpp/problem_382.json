{
  "problem": {
    "task_id": "MBPP/393",
    "prompt": "Write a function to find the list with maximum length using lambda function.",
    "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
    "test_list": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ],
    "challenge_test_list": [],
    "problem_id": 382
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def lambda_func(list1, list2, list3):\n    return (lambda a, b, c: max(a, b, c))(list1, list2, list3)\n\n\nprint(lambda_func([1, 2, 3, 4, 5], [1], [1, 2]))",
    "from functools import reduce\n\n\ndef max_len(li):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, li)\n\n\nli = [\n    [1, 2, 3],\n    [3, 4],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6, 7, 8],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n]\n\nprint(max_len(li))",
    "from typing import List\n\n\ndef max_length(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Return the list with maximum length.\n\n    >>> max_length([[1], [1, 2, 3], [1, 2], [1, 2, 3, 4]])\n    [1, 2, 3, 4]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: len(x))[-1]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1], [1, 2, 3], [1, 2], [1, 2, 3, 4]]\n    print(max_length(list_of_lists))",
    "def max_list_length(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(x))\n\nif __name__ == '__main__':\n    list_of_lists = [\n        [1, 2, 3, 4, 5],\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5, 6],\n    ]\n    print(max_list_length(list_of_lists))",
    "from typing import List\n\n\ndef find_max_length(lists: List[list]) -> List[list]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        lists (List[list]): the list of lists\n\n    Examples:\n        >>> find_max_length([[1, 2, 3], [1, 2], [1, 2, 3, 4]])\n        [[1, 2, 3, 4]]\n        >>> find_max_length([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6]])\n        [[1, 2, 3, 4, 5, 6]]\n    \"\"\"\n    return list(\n        filter(\n            lambda list_: len(list_) == max(map(len, lists)),\n            lists,\n        )\n    )\n\n\ndef find_max_length_using_max(lists: List[list]) -> List[list]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        lists (List[list]): the list of lists\n\n    Examples:\n        >>> find_max_length_using_max([[1, 2, 3], [1, 2], [1, 2, 3, 4]])\n        [[1, 2, 3, 4]]\n        >>> find_max_length_using_max([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6]])\n        [[1, 2, 3, 4, 5, 6]]\n    \"\"\"\n    return list(filter(lambda list_: len(list_) == max(map(len, lists)), lists))\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([[1, 2, 3], [1, 2], [1, 2, 3, 4]]))\n    print(find_max_length_using_max([[1, 2, 3], [1",
    "def maximum_length(list_of_lists):\n    return max(list_of_lists, key=len)\n\nlist_of_lists = [[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4]]\n\nprint(maximum_length(list_of_lists))",
    "def max_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nprint(max_length([\"python\", \"java\", \"kotlin\", \"javascript\"]))",
    "from typing import List\n\n\ndef lambda_max_list_length(lists: List) -> List:\n    \"\"\"Return the list with maximum length.\n\n    >>> lambda_max_list_length([[1], [2, 3], [4, 5, 6]])\n    [4, 5, 6]\n    >>> lambda_max_list_length([[1], [2, 3, 4, 5, 6, 7]])\n    [2, 3, 4, 5, 6, 7]\n    >>> lambda_max_list_length([[1, 2, 3], [4, 5, 6], [7, 8]])\n    [7, 8]\n    >>> lambda_max_list_length([[1, 2, 3, 4], [5, 6, 7], [8], [9]])\n    [9]\n    \"\"\"\n    return max(lists, key=lambda list_: len(list_))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_max_length(list_of_list):\n    return max(list_of_list, key=len)\n\nprint(find_max_length([[1, 2, 3], [5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3], [1, 2], [1, 2, 3, 4]]))",
    "from functools import reduce\n\n\ndef max_length(lists):\n    return reduce(lambda x, y: x if len(x) >= len(y) else y, lists)\n\n\nprint(max_length([[1, 2], [3, 4], [5, 6]]))",
    "from typing import List\n\n\ndef max_length(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        list_of_lists (List[List[int]]): list of lists.\n\n    Examples:\n        >>> max_length([[1, 2, 3], [1, 2], [1, 2, 3, 4]])\n        [1, 2, 3, 4]\n    \"\"\"\n    return max(list_of_lists, key=len)\n\n\ndef max_length_using_lambda(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        list_of_lists (List[List[int]]): list of lists.\n\n    Examples:\n        >>> max_length_using_lambda([[1, 2, 3], [1, 2], [1, 2, 3, 4]])\n        [1, 2, 3, 4]\n    \"\"\"\n    return max(list_of_lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3], [1, 2], [1, 2, 3, 4]]))\n    print(max_length_using_lambda([[1, 2, 3], [1, 2], [1, 2, 3, 4]]))",
    "from typing import List\n\n\ndef find_max_length(lists: List[list]) -> int:\n    \"\"\"Returns the maximum length of the list.\n\n    Args:\n        lists (List[list]): List of lists.\n\n    Examples:\n        >>> assert find_max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 4\n    \"\"\"\n    return max(lists, key=lambda list_: len(list_))\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))",
    "def get_max_length(list1, list2):\n    return max(list1, list2, key=lambda x: len(x))\n\n\nprint(get_max_length([\"1\", \"2\", \"3\"], [\"1\", \"2\"]))",
    "from functools import reduce\n\n\ndef maximum_list_length(list1, list2):\n    return len(list1) if len(list1) > len(list2) else len(list2)\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [1, 2, 3, 4]\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list4 = [1, 2, 3, 4, 5, 6, 7]\n\n    # Using map() + lambda\n    result = list(map(lambda x: maximum_list_length(x[0], x[1]), [(list1, list2), (list3, list4)]))\n\n    # Using reduce()\n    result = reduce(lambda a, b: a if a > b else b, result)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max_length(lists):\n    return max(lists, key=len)\n\nlists = [[1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n\nprint(find_max_length(lists))",
    "def max_length(list_of_list):\n    return max(list_of_list, key=len)\n\nif __name__ == '__main__':\n    list_of_list = [[1, 2, 3], [1, 2], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4]]\n    print(max_length(list_of_list))",
    "from typing import List\n\n\ndef max_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with maximum length.\n\n    Examples:\n        >>> assert max_list([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [3, 4, 5]\n    \"\"\"\n    return max(lists, key=lambda l: len(l))\n\n\nif __name__ == \"__main__\":\n    print(max_list([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))",
    "def max_length(lst):\n    return max(lst, key=len)\n\nprint(max_length([[1, 2], [3, 4], [5, 6, 7]]))",
    "def find_max(list1, list2, list3):\n    return max(list1, list2, list3, key=len)\n\nprint(find_max([1, 2, 3], [1, 2], [1]))\nprint(find_max([1, 2], [1, 2, 3], [1]))\nprint(find_max([1, 2], [1, 2], [1, 2, 3]))",
    "from functools import reduce\n\n\ndef max_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, list_of_lists)\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1], [2, 3], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18]]))",
    "def max_list(list1, list2):\n    return list1 if len(list1) > len(list2) else list2\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6, 7]\n    list3 = [8, 9, 10, 11, 12]\n    print(max_list(list1, list2))\n    print(max_list(list2, list3))\n\n\nif __name__ == '__main__':\n    main()",
    "from typing import List\n\n\ndef get_max_length(lists: List[List]) -> int:\n    \"\"\"Get maximum length of the list.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Examples:\n        >>> assert get_max_length([[1, 2, 3], [4, 5, 6], [7, 8]]) == 3\n        >>> assert get_max_length([[1, 2, 3], [4, 5, 6], [7, 8], [9, 10, 11, 12]]) == 4\n    \"\"\"\n    return max(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    print(get_max_length([[1, 2, 3], [4, 5, 6], [7, 8]]))\n    print(get_max_length([[1, 2, 3], [4, 5, 6], [7, 8], [9, 10, 11, 12]]))",
    "def find_max_list(list_of_lists):\n    return max(list_of_lists, key=len)\n\nprint(find_max_list([[1, 2, 3, 4], [4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5, 6]]))",
    "from typing import List\n\n\ndef max_len(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        list_of_lists (List[List[int]]): list of lists\n\n    Examples:\n        >>> max_len([[1, 2], [3], [4, 5, 6]])\n        [4, 5, 6]\n        >>> max_len([[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]])\n        [7, 8, 9, 10]\n    \"\"\"\n    return list(max(list_of_lists, key=len))\n\n\ndef main():\n    list_of_lists = [[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]]\n    print(f\"{list_of_lists} -> {max_len(list_of_lists)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_len(arr):\n    return max(arr, key=lambda x: len(x))\n\n\nprint(max_len([\"one\", \"two\", \"three\", \"four\"]))\nprint(max_len([\"one\", \"two\", \"three\", \"four\", \"five\"]))\nprint(max_len([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]))\nprint(max_len([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]))\nprint(max_len([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"]))",
    "from typing import List\n\n\ndef length_of_list(list_of_numbers: List[int]) -> int:\n    \"\"\"Return length of list of numbers.\n\n    Args:\n        list_of_numbers (List[int]): List of numbers\n\n    Returns:\n        int: Length of list\n    \"\"\"\n    return len(list_of_numbers)\n\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, 3, 4, 5]\n    print(length_of_list(list_of_numbers))\n\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(length_of_list(list_of_numbers))",
    "def find_max_length(lists):\n    return max(lists, key=lambda x: len(x))\n\n\nlists = [[1, 2, 3], [5, 6, 7], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8]]\nprint(find_max_length(lists))",
    "from functools import reduce\n\n\ndef max_len(lst):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(max_len([[1], [2, 3, 4], [5], [6, 7, 8, 9], [10]]))",
    "from functools import reduce\nfrom operator import itemgetter\n\n\ndef max_len(arr):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, arr)\n\n\ndef main():\n    print(max_len([[1, 2, 3, 4], [1, 2, 3, 4, 5, 6], [1, 2, 3]]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef get_max_length(data: List[List[int]]) -> int:\n    \"\"\"Returns the maximum length of the list.\n\n    Args:\n        data (List[List[int]]): list of list\n\n    Examples:\n        >>> assert get_max_length([[1, 2, 3], [3, 4, 5]]) == 3\n        >>> assert get_max_length([[1, 2, 3], [3, 4]]) == 3\n        >>> assert get_max_length([[1, 2], [3, 4, 5]]) == 3\n    \"\"\"\n    return max(data, key=len)\n\n\nif __name__ == \"__main__\":\n    print(get_max_length([[1, 2, 3], [3, 4, 5]]))",
    "from functools import reduce\n\n\ndef max_length(lst):\n    return reduce(lambda x, y: len(x) if len(x) > len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))",
    "def max_len(lists):\n    max_length = max(lists, key=lambda x: len(x))\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_len([[1, 2, 3], [2], [3, 4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14], [15, 16]]))",
    "def max_length(list1, list2, list3):\n    return list1 if len(list1) > len(list2) and len(list1) > len(list3) else list2 if len(list2) > len(list1) and len(list2) > len(list3) else list3\n\nprint(max_length([1, 2, 3], [1, 2, 3], [1, 2, 3]))\nprint(max_length([1, 2, 3], [1, 2], [1, 2]))\nprint(max_length([1, 2], [1, 2], [1, 2, 3]))\nprint(max_length([1, 2], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "from functools import reduce\n\n\ndef max_list(lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lists)\n\n\nif __name__ == \"__main__\":\n    print(max_list([[1, 2, 3], [4, 5], [6]]))",
    "from typing import List\n\n\ndef max_length(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with maximum length.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Examples:\n        >>> assert max_length([[1, 2, 3], [4, 5], [6]]) == [1, 2, 3]\n        >>> assert max_length([[1, 2, 3], [4, 5], [6, 7, 8]]) == [6, 7, 8]\n    \"\"\"\n    return max(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3], [4, 5], [6]]))",
    "from itertools import chain\n\n\ndef max_length(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(x))\n\n\ndef max_length_chain(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(list(chain.from_iterable(x))))\n\n\ndef max_length_builtin(list_of_lists):\n    return max(list_of_lists, key=len)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n    print(max_length(list_of_lists))\n    print(max_length_chain(list_of_lists))\n    print(max_length_builtin(list_of_lists))",
    "def max_list(lst):\n    return max(lst, key=len)\n\n\nprint(max_list([[1, 2], [3, 4], [5, 6]]))",
    "from functools import reduce\n\n\ndef max_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, list_of_lists)\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1], [2], [3, 4], [5, 6, 7]]))",
    "def max_length(*args):\n    return max(args, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef max_len(data: List) -> List:\n    \"\"\"Find the list with maximum length.\n\n    Args:\n        data (List): list of lists\n\n    Returns:\n        List: list with maximum length\n    \"\"\"\n    return max(data, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_len([[1, 2, 3], [2, 3], [3, 4, 5, 6]]))",
    "from typing import List\n\n\ndef max_length(list_of_lists: List[List]) -> List:\n    \"\"\"Return the list with maximum length.\n\n    Args:\n        list_of_lists (List[List]): the list of lists\n\n    Examples:\n        >>> max_length([[1, 2, 3], [3, 4], [5, 6, 7, 8]])\n        [5, 6, 7, 8]\n    \"\"\"\n    return max(list_of_lists, key=lambda l: len(l))\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3], [3, 4], [5, 6, 7, 8]]))",
    "def max_list_length(lst):\n    return max(lst, key=len)\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\n    print(f\"Original list: {lst}\")\n    print(f\"List with maximum length: {max_list_length(lst)}\")",
    "def max_list(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nprint(max_list([[\"a\", \"b\"], [\"c\"], [\"d\", \"e\", \"f\"]]))",
    "def find_max_list(list1, list2):\n    if len(list1) > len(list2):\n        return list1\n    else:\n        return list2\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8]\n\nprint(find_max_list(list1, list2))",
    "def find_max_length(ls):\n    return max(ls, key=lambda x: len(x))\n\n\ndef main():\n    list_of_lists = [[1, 2, 3, 4], [5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15, 16, 17]]\n    print(\"List of lists: \" + str(list_of_lists))\n    print(\"Max length list: \" + str(find_max_length(list_of_lists)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_len_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns list with maximum length using lambda function.\n\n    Args:\n        lists (List[List[int]]): list of lists to find the maximum length\n\n    Examples:\n        >>> max_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]])\n        [10]\n        >>> max_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]])\n        [10, 11, 12]\n    \"\"\"\n    return max(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]))\n    print(max_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]))",
    "def max_list_length(lists):\n    return max(lists, key=len)\n\n\nlists = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4],\n    [1, 2, 3],\n]\n\nprint(max_list_length(lists))",
    "from functools import reduce\n\n\ndef max_len(list_of_lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, list_of_lists)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5, 6], [4, 5], [5, 6, 7, 8, 9]]\n    print(f\"Maximum length list is {max_len(list_of_lists)}\")",
    "from functools import reduce\n\n\ndef max_len(x, y):\n    return x if len(x) > len(y) else y\n\n\ndef max_list_length(lst):\n    return reduce(max_len, lst)\n\n\nif __name__ == \"__main__\":\n    print(max_list_length([[1], [1, 2, 3], [1, 2, 3, 4, 5, 6]]))",
    "def longest(list1, list2, list3):\n    return list1 if len(list1) > len(list2) and len(list1) > len(list3) else list2 if len(list2) > len(list3) else list3\n\nlist1 = [1, 2, 3, 4]\nlist2 = [4, 5]\nlist3 = [5, 6, 7]\n\nprint(longest(list1, list2, list3))",
    "def find_max(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(x))\n\n\nprint(find_max([[1, 2, 3], [3, 4], [1, 2, 3, 4]]))",
    "from typing import List\n\n\ndef max_length(data: List[List[int]]) -> List[int]:\n    return max(data, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2], [3, 4], [5, 6, 7]]))",
    "def max_length(ls):\n    return max(ls, key=len)\n\n\nif __name__ == '__main__':\n    ls = [\n        [1, 2, 3],\n        [1],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6]\n    ]\n    print(max_length(ls))",
    "# Using lambda function\ndef max_length(a, b, c):\n    return lambda a, b, c: a if len(a) > len(b) and len(a) > len(c) else b if len(b) > len(a) and len(b) > len(c) else c\n\na = [\"a\", \"b\", \"c\"]\nb = [\"a\", \"b\"]\nc = [\"a\"]\n\nprint(max_length(a, b, c)(a, b, c))\nprint(max_length(a, b, c)(b, c, a))\nprint(max_length(a, b, c)(c, a, b))",
    "from functools import reduce\n\n\ndef max_list(list1, list2):\n    return len(list1) if len(list1) > len(list2) else len(list2)\n\n\ndef max_length(lists):\n    return reduce(max_list, lists)\n\n\ndef main():\n    print(max_length([[1, 2, 3], [4, 5, 6], [7, 8]]))\n\n\nif __name__ == '__main__':\n    main()",
    "from functools import reduce\n\n\ndef max_list(l):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, l)\n\n\ndef test_max_list():\n    assert max_list([[1, 2, 3], [4, 5], [6, 7, 8], [9]]) == [1, 2, 3]",
    "from functools import reduce\n\ndef max_length(list1, list2):\n    return len(list1) if len(list1) > len(list2) else len(list2)\n\ndef max_length_lambda(list1, list2):\n    return lambda a, b: a if a > b else b\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    print(reduce(max_length, [list1, list2, list3, list4]))\n    print(reduce(max_length_lambda, [list1, list2, list3, list4]))\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max_length(a, b, c):\n    return max(len(a), len(b), len(c))\n\n\ndef find_max_length_lambda(a, b, c):\n    return max(len(a), len(b), len(c))\n\n\na = [1, 2, 3, 4, 5]\nb = [1, 2, 3, 4, 5]\nc = [1, 2, 3, 4, 5]\n\nprint(find_max_length(a, b, c))\nprint(find_max_length_lambda(a, b, c))",
    "def max_length(lst):\n    return max(lst, key=len)\n\n\ndef test(expect, output):\n    print(f'Expect: {expect} \\nOutput: {output}')\n\n\ndef main():\n    test(3, max_length([1, 2, 3]))\n    test(3, max_length([1, 2, 3, 4, 5]))\n    test(4, max_length([1, 2, 3, 4, 5, 6]))\n    test(4, max_length([1, 2, 3, 4, 5, 6, 7, 8]))\n    test(6, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    test(6, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    test(6, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    test(7, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    test(10, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    test(10, max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_length(list1, list2, list3):\n    return list1 if len(list1) > len(list2) and len(list1) > len(list3) else list2 if len(list2) > len(list1) and len(list2) > len(list3) else list3\n\n# Lambda version\nmax_length = lambda list1, list2, list3: list1 if len(list1) > len(list2) and len(list1) > len(list3) else list2 if len(list2) > len(list1) and len(list2) > len(list3) else list3",
    "from functools import reduce\n\n\ndef find_max_list(lst):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(find_max_list([[1, 2], [3, 4, 5], [6, 7]]))",
    "from functools import reduce\n\n\ndef max_len(arr):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, arr)\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_len(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6]]\nsolution = [1, 2, 3, 4, 5, 6]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6]]\nsolution = [1, 2, 3, 4, 5, 6]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6]]\nsolution = [1, 2, 3, 4, 5, 6]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6]]\nsolution = [1, 2, 3, 4, 5, 6]\ntest_case = [arr, solution]\ntest_function(test_case)",
    "from functools import reduce\n\n\ndef max_length(list_of_lists):\n    \"\"\"Return the list with maximum length.\"\"\"\n    return reduce(lambda x, y: x if len(x) > len(y) else y, list_of_lists)\n\n\nprint(max_length([[1, 2, 3], [4], [5, 6, 7, 8], [9, 10]]))",
    "def list_length(l):\n    return len(l)\n\nprint(list_length([1,2,3,4]))\nprint(list_length([1,2]))\nprint(list_length([1]))\nprint(list_length([]))\n\n# Lambda function\n\nprint(max([1,2,3,4], key=lambda x: len(x)))\nprint(max([1,2], key=lambda x: len(x)))\nprint(max([1], key=lambda x: len(x)))\nprint(max([], key=lambda x: len(x)))",
    "from functools import reduce\n\n\ndef lambda_func(a, b):\n    return a if len(a) > len(b) else b\n\n\ndef lambda_func_reduce(a, b):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, a, b)\n\n\ndef main():\n    list_a = [1, 2, 3]\n    list_b = [4, 5, 6]\n    list_c = [4, 5, 6, 7]\n    list_d = [7, 8, 9]\n    print(list_a)\n    print(list_b)\n    print(list_c)\n    print(list_d)\n\n    print(\"Lambda function:\")\n    print(lambda_func(list_a, list_b))\n    print(lambda_func(list_b, list_c))\n    print(lambda_func(list_c, list_d))\n\n    print(\"Lambda function using reduce:\")\n    print(lambda_func_reduce([list_a, list_b, list_c, list_d]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_list(list1, list2, list3):\n    return max(list1, list2, list3, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    print(max_list([1, 2, 3, 4, 5], [5, 6, 7], [7, 8, 9]))",
    "from functools import reduce\n\n\ndef max_length(a, b):\n    if len(a) > len(b):\n        return a\n    else:\n        return b\n\n\ndef solution(lists):\n    \"\"\"Returns the list with maximum length.\n\n    >>> solution([[1, 2, 3], [4], [1, 2, 3, 4, 5, 6]])\n    [1, 2, 3, 4, 5, 6]\n    >>> solution([[1, 2], [3, 4, 5, 6], [7, 8, 9], [10]])\n    [1, 2, 3, 4, 5, 6]\n    >>> solution([[1, 2, 3, 4, 5], [2, 3, 4], [4, 5]])\n    [1, 2, 3, 4, 5]\n    >>> solution([[1, 2], [3, 4], [5, 6], [7]])\n    [1, 2, 3, 4, 5, 6]\n    >>> solution([[1, 2], [3, 4], [5, 6], [7], [8, 9, 10]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return reduce(lambda a, b: max_length(a, b), lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from functools import reduce\n\n\ndef max_length(list_of_list):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, list_of_list)\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3, 4], [5, 6], [7], [8, 9], [10, 11, 12]]))",
    "from functools import reduce\nfrom operator import itemgetter\n\n\ndef max_length(a: list) -> int:\n    return reduce(lambda x, y: x if len(x) > len(y) else y, a)\n\n\ndef main():\n    print(max_length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))\n    print(max_length([[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))\n    print(max_length([[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]))\n\n\nif __name__ == '__main__':\n    main()",
    "from functools import reduce\n\n\ndef max_len(lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lists)\n\n\nif __name__ == \"__main__\":\n    print(max_len([[1, 2, 3], [3, 4], [5, 6, 7, 8, 9]]))",
    "from functools import reduce\n\n\ndef lambda_sum(x, y):\n    return x + y\n\n\ndef max_len(arr):\n    return reduce(lambda_sum, arr)\n\n\ndef main():\n    print(max_len([[1, 2, 3], [1, 2], [1, 2, 3, 4]]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import List\n\n\ndef max_length(lists: List[list]) -> list:\n    return max(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))",
    "from functools import reduce\n\n\ndef find_max_length(list_of_lists: list) -> int:\n    \"\"\"\n\n    :param list_of_lists:\n    :return:\n    \"\"\"\n    return reduce(lambda x, y: len(y) if len(y) > len(x) else x, list_of_lists)\n\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4],\n        [1, 2, 3],\n        [1, 2],\n        [1],\n    ]\n\n    print(find_max_length(list_of_lists))  # 10\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_max_length(list_of_lists):\n    return max(list_of_lists, key=len)\n\n\nprint(get_max_length([[1, 2, 3], [5, 6], [7], [1, 2, 3, 4, 5, 6, 7, 8]]))",
    "from functools import reduce\n\n\ndef max_length(lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lists)\n\n\ndef test_list_lengths(lists, max_length_list):\n    assert max_length(lists) == max_length_list\n\n\ndef test_list_lengths_empty():\n    assert max_length([]) is None\n\n\ndef test_list_lengths_one():\n    assert max_length([[1, 2, 3]]) == [1, 2, 3]\n\n\ndef test_list_lengths_two():\n    assert max_length([[1, 2, 3], [4, 5]]) == [1, 2, 3]\n\n\ndef test_list_lengths_three():\n    assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [1, 2, 3]\n\n\ndef test_list_lengths_four():\n    assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [1, 2, 3]\n\n\ndef main():\n    lists = [\n        [1, 2, 3],\n        [4, 5],\n        [6, 7, 8, 9],\n        [10]\n    ]\n    max_length_list = [1, 2, 3]\n    test_list_lengths(lists, max_length_list)\n    test_list_lengths_empty()\n    test_list_lengths_one()\n    test_list_lengths_two()\n    test_list_lengths_three()\n    test_list_lengths_four()\n    print(\"Passed\")\n\n\nif __name__ == '__main__':\n    main()",
    "def max_length(ls):\n    return max(ls, key=lambda x: len(x))\n\n\nprint(max_length([[1, 2, 3], [5, 6, 7, 8], [9, 10, 11], [12, 13, 14, 15, 16]]))",
    "from typing import List\n\n\ndef find_max_length(list_of_lists: List[List]) -> int:\n    \"\"\"Finds the maximum length of the list.\n\n    Args:\n        list_of_lists (List[List]): list of lists to find max length of\n\n    Returns:\n        int: the length of the longest list\n    \"\"\"\n    return max(len(i) for i in list_of_lists)\n\n\ndef find_max_length_lambda(list_of_lists: List[List]) -> int:\n    \"\"\"Finds the maximum length of the list using lambda.\n\n    Args:\n        list_of_lists (List[List]): list of lists to find max length of\n\n    Returns:\n        int: the length of the longest list\n    \"\"\"\n    return max(len(i) for i in list_of_lists)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [5, 6, 7], [10, 11, 12, 13], [10, 11, 12]]\n    print(find_max_length(list_of_lists))\n    print(find_max_length_lambda(list_of_lists))",
    "from itertools import chain\n\ndef max_length(l):\n    return max(l, key=len)\n\nprint(max_length([[1, 2, 3], [4], [5, 6], [7], [8, 9]]))",
    "from functools import reduce\nfrom operator import itemgetter\n\n\ndef max_len(list_of_lists):\n    return reduce(\n        lambda l1, l2: len(l1) > len(l2) and l1 or l2,\n        list_of_lists,\n        list_of_lists[0]\n    )\n\n\nif __name__ == '__main__':\n    print(max_len([[1, 2], [3, 4]]))\n    print(max_len([[1, 2], [3, 4], [5, 6, 7]]))\n    print(max_len([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11]]))",
    "def max_length(*args):\n    return max(map(lambda x: len(x), args))\n\nif __name__ == '__main__':\n    print(max_length('geeks', 'for', 'geeks'))\n    print(max_length('geeks', 'for', 'geeks', 'is', 'best'))",
    "def max_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_length([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]))",
    "def max_length(l):\n    return max(l, key=lambda x: len(x))\n\n\nprint(max_length([\"python\", \"java\", \"kotlin\", \"c#\", \"javascript\"]))",
    "def find_max_length(list_of_lists):\n    return max(list_of_lists, key=len)\n\nlist_of_lists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nprint(find_max_length(list_of_lists))",
    "from functools import reduce\n\n\ndef max_list(list1, list2):\n    return len(list1) if len(list1) > len(list2) else len(list2)\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [10, 20, 30, 40, 50]\n    list_3 = [100, 200, 300, 400, 500]\n    list_4 = [1000, 2000, 3000, 4000, 5000]\n\n    # Using reduce function\n    print(reduce(max_list, [list_1, list_2, list_3, list_4]))",
    "from typing import List\n\n\ndef find_max_length(list_of_lists: List[List]) -> int:\n    \"\"\"Find max length of list using lambda function.\n\n    Args:\n        list_of_lists (List[List]): list of lists\n\n    Returns:\n        int: max length of list\n    \"\"\"\n    return max(map(lambda list_: len(list_), list_of_lists))\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([[1, 2, 3], [4, 5], [6], [7]]))\n    print(find_max_length([[1, 2, 3], [4, 5, 6], [7]]))",
    "def find_max_length(list_of_lists):\n    return max(list_of_lists, key=len)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [\n        [1, 2, 3, 4],\n        [2, 3, 4],\n        [3, 4],\n        [4],\n        [5],\n    ]\n    print(find_max_length(list_of_lists))",
    "from typing import List\n\n\ndef max_length(lists: List[list]) -> list:\n    \"\"\"Return the list with maximum length.\n\n    >>> max_length([[1, 2, 3], [1], [2, 3], [1, 2, 3, 4, 5, 6], [1, 2], [3, 4, 5]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return max(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    list_of_list = [[1, 2, 3], [1], [2, 3], [1, 2, 3, 4, 5, 6], [1, 2], [3, 4, 5]]\n    print(max_length(list_of_list))",
    "def max_len(lst):\n    return max(lst, key=lambda x: len(x))\n\nprint(max_len([\"one\", \"two\", \"three\", \"four\"]))",
    "def find_max_list_length(list_of_lists):\n    return max(map(len, list_of_lists))\n\n\nif __name__ == '__main__':\n    print(find_max_list_length([[1], [3, 4], [7, 8, 9], [5, 6, 7, 8]]))",
    "from functools import reduce\n\n\ndef max_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, list_of_lists)\n\n\ndef test_function():\n    assert max_length([[1, 2, 3], [5, 6, 7], [1, 2], [3, 4]]) == [1, 2, 3]\n    assert max_length([[1], [5, 6, 7], [1, 2], [3, 4]]) == [5, 6, 7]\n    assert max_length([[1, 2, 3], [5, 6, 7], [1, 2], [3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]\n    assert max_length([[1, 2, 3], [5, 6, 7], [1, 2], [3, 4], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]",
    "from functools import reduce\n\ndef find_max_len(lst):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lst)\n\nif __name__ == \"__main__\":\n    print(find_max_len([[1, 2, 3], [5, 6, 7], [8, 9, 10], [11, 12, 13]]))",
    "def max_len(list):\n    return max(list, key=len)\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3, 4, 5]\nlist3 = [1, 2, 3, 4, 5, 6, 7]\n\nprint(max_len(list1))\nprint(max_len(list2))\nprint(max_len(list3))\n\n# or\nprint(max(list1, list2, list3, key=len))",
    "from functools import reduce\n\ndef max_length(arr):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, arr)\n\nif __name__ == '__main__':\n    arr = [\n        [1, 2, 3],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ]\n    print(max_length(arr))",
    "from functools import reduce\n\n\ndef max_list(list_a, list_b):\n    if len(list_a) > len(list_b):\n        return list_a\n    return list_b\n\n\nmax_lists = lambda a, b: max_list(a, b)\n\n\ndef test_max_list():\n    assert reduce(max_lists, [[1, 2, 3], [3, 4, 5], [1, 2]]) == [1, 2, 3]\n    assert reduce(max_lists, [[1, 2, 3], [3, 4, 5], [1, 2, 3]]) == [1, 2, 3]\n    assert reduce(max_lists, [[1, 2, 3], [3, 4, 5], [1, 2, 3, 4]]) == [1, 2, 3, 4]\n\n\nif __name__ == \"__main__\":\n    test_max_list()",
    "from functools import reduce\n\n\ndef max_len(list_of_lists):\n    return reduce(lambda x, y: x if len(x) >= len(y) else y, list_of_lists)\n\n\nprint(max_len([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]))",
    "def maximum_length(list):\n    return max(list, key=len)\n\n\nprint(maximum_length([[1, 2, 3], [1], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]]))",
    "from functools import reduce\nfrom typing import List\n\n\ndef max_length(lists: List[List[int]]) -> int:\n    \"\"\"Return the length of the list with maximum length.\"\"\"\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lists)\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2, 3], [3, 4], [5, 6, 7], [9, 10]]))",
    "# Solution\n\n\ndef find_max_list_len(lists):\n    \"\"\"\n    >>> find_max_list_len([[1, 2], [3], [4, 5, 6]])\n    [4, 5, 6]\n    \"\"\"\n    return max(lists, key=len)\n\n\n# Short Solution\ndef find_max_list_len_short(lists):\n    \"\"\"\n    >>> find_max_list_len_short([[1, 2], [3], [4, 5, 6]])\n    [4, 5, 6]\n    \"\"\"\n    return max(lists, key=lambda list: len(list))\n\n\n\"\"\"\nWe can also use map() to solve this problem.\n\"\"\"\n\n\ndef find_max_list_len_map(lists):\n    \"\"\"\n    >>> find_max_list_len_map([[1, 2], [3], [4, 5, 6]])\n    [4, 5, 6]\n    \"\"\"\n    return max(lists, key=map(len))\n\n\n\"\"\"\nPerformance\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"",
    "def max_length(a, b, c):\n    return (lambda x, y: x if len(x) >= len(y) else y)(a, b, c)\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8]\n    c = [9, 10, 11, 12]\n\n    print(max_length(a, b, c))",
    "from typing import List\n\n\ndef find_max_length(arr: List) -> int:\n    \"\"\"Finds the maximum length of the list.\n\n    Args:\n        arr (List): the list to find the maximum length.\n\n    Examples:\n        >>> assert find_max_length([[1, 2, 3], [4, 5], [6, 7, 8]]) == 3\n    \"\"\"\n    return max(len(x) for x in arr)\n\n\ndef find_max_length_lambda(arr: List) -> int:\n    \"\"\"Finds the maximum length of the list.\n\n    Args:\n        arr (List): the list to find the maximum length.\n\n    Examples:\n        >>> assert find_max_length_lambda([[1, 2, 3], [4, 5], [6, 7, 8]]) == 3\n    \"\"\"\n    return max(len(x) for x in arr)\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([[1, 2, 3], [4, 5], [6, 7, 8]]))\n    print(find_max_length_lambda([[1, 2, 3], [4, 5], [6, 7, 8]]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}