{
  "problem": {
    "task_id": "MBPP/325",
    "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
    "test_list": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 314
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def min_square_sum(number):\n    squares = [i * i for i in range(1, int(number ** 0.5) + 1)]\n    squares.sort(reverse=True)\n    n = len(squares)\n    table = [[float('inf') for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        table[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            table[i][j] = min(table[i][j - 1], table[i - 1][j - 1] + squares[i - 1], table[i - 1][j])\n\n    return table[n][number]\n\n\nif __name__ == '__main__':\n    print(min_square_sum(100))",
    "def min_square_sum(target):\n    squares = [i*i for i in range(1, int(target**0.5)+1)]\n    squares.sort()\n    res = []\n    for i in range(len(squares)):\n        if target == 0:\n            return res\n        if target - squares[i] < 0:\n            continue\n        res.append(squares[i])\n        target -= squares[i]\n\n    return res\n\n\nprint(min_square_sum(11))\nprint(min_square_sum(12))\nprint(min_square_sum(13))\nprint(min_square_sum(20))\nprint(min_square_sum(21))\nprint(min_square_sum(22))",
    "def min_square_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n)\n    \"\"\"\n\n    min_squares = [0] * (n + 1)\n    min_squares[0] = 0\n    min_squares[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            if j * j > i:\n                break\n            min_squares[i] = min(min_squares[i], 1 + min_squares[i - j * j])\n\n    return min_squares[n]\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(25))",
    "from math import ceil, sqrt\n\n\ndef min_square_sum(n):\n    square_sum = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            square_sum += i\n            if n / i != i:\n                square_sum += ceil(n / i)\n    return square_sum\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(10))",
    "def min_square_sum(number):\n    squares = [i ** 2 for i in range(1, int(number ** 0.5) + 1)]\n    print(squares)\n    squares.sort(reverse=True)\n    print(squares)\n\n    i = 0\n    j = len(squares) - 1\n\n    while i < j:\n        print(i, j)\n        if squares[i] + squares[j] <= number:\n            i += 1\n        else:\n            j -= 1\n\n    return j - i + 1\n\n\nif __name__ == '__main__':\n    print(min_square_sum(10))",
    "def min_square(n: int) -> int:\n    \"\"\"\n    >>> min_square(2)\n    1\n    >>> min_square(13)\n    2\n    >>> min_square(12)\n    3\n    >>> min_square(4)\n    1\n    \"\"\"\n    squares = []\n    i = 1\n\n    while i ** 2 <= n:\n        squares.append(i ** 2)\n        i += 1\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        if i in squares:\n            dp[i] = 1\n            continue\n\n        dp[i] = float(\"inf\")\n\n        for square in squares:\n            if i - square < 0:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import ceil, sqrt\n\n\ndef min_squares(n):\n    \"\"\"\n    Return the minimum number of squares whose sum is equal to a given number.\n    :param n: int\n    :return: int\n    >>> min_squares(12)\n    3\n    >>> min_squares(13)\n    2\n    >>> min_squares(36)\n    3\n    >>> min_squares(100)\n    4\n    >>> min_squares(1000)\n    5\n    >>> min_squares(5)\n    1\n    >>> min_squares(6)\n    2\n    >>> min_squares(7)\n    2\n    >>> min_squares(8)\n    2\n    >>> min_squares(9)\n    3\n    \"\"\"\n    squares = [i * i for i in range(1, int(ceil(sqrt(n))) + 1)]\n    squares.sort(reverse=True)\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    for square in squares:\n        for j in range(n + 1):\n            if j >= square:\n                dp[j] = min(dp[j], dp[j - square] + 1)\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_square_sum(target):\n    \"\"\"\n    >>> min_square_sum(1)\n    [1]\n    >>> min_square_sum(3)\n    [1, 1, 1]\n    >>> min_square_sum(4)\n    [1, 1, 2]\n    >>> min_square_sum(6)\n    [1, 2, 2]\n    >>> min_square_sum(7)\n    [2, 2, 2]\n    \"\"\"\n    squares = [i ** 2 for i in range(1, int(target ** 0.5) + 1)]\n    squares.sort(reverse=True)\n\n    def min_square_sum_helper(target):\n        if target in squares:\n            return [target]\n        for square in squares:\n            if target < square:\n                break\n            subproblem = target - square\n            solution = min_square_sum_helper(subproblem)\n            if solution is not None:\n                return [square] + solution\n\n    return min_square_sum_helper(target)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_square_sum(num: int) -> int:\n    \"\"\"\n    Returns the minimum number of squares whose sum is equal to a given number.\n    >>> min_square_sum(12)\n    2\n    >>> min_square_sum(13)\n    -1\n    >>> min_square_sum(14)\n    -1\n    >>> min_square_sum(1)\n    1\n    >>> min_square_sum(0)\n    0\n    >>> min_square_sum(1000)\n    -1\n    \"\"\"\n    squares = [i * i for i in range(1, int(num ** 0.5) + 1)]\n    squares_sums = set(sum(squares[i : i + 2]) for i in range(len(squares) - 1))\n    return -1 if num not in squares_sums else squares_sums.count(num)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def minSquareSum(n):\n    # code here\n    return 0\n\n\nprint(minSquareSum(4))",
    "def square_sum(num):\n    squares = []\n    while num > 0:\n        square = num ** 0.5\n        if int(square) ** 2 == num:\n            squares.append(int(square))\n            break\n        else:\n            squares.append(int(square))\n            num -= int(square) ** 2\n    return squares\n\n\nnum = 4\nprint(square_sum(num))",
    "def minSquareSum(num: int) -> int:\n    \"\"\"\n    >>> minSquareSum(10)\n    1\n    >>> minSquareSum(11)\n    2\n    >>> minSquareSum(12)\n    2\n    >>> minSquareSum(13)\n    2\n    >>> minSquareSum(14)\n    2\n    >>> minSquareSum(15)\n    2\n    >>> minSquareSum(16)\n    2\n    >>> minSquareSum(17)\n    3\n    >>> minSquareSum(18)\n    3\n    >>> minSquareSum(19)\n    3\n    >>> minSquareSum(20)\n    3\n    >>> minSquareSum(21)\n    3\n    >>> minSquareSum(22)\n    3\n    >>> minSquareSum(23)\n    3\n    >>> minSquareSum(24)\n    3\n    >>> minSquareSum(25)\n    3\n    >>> minSquareSum(26)\n    3\n    >>> minSquareSum(27)\n    3\n    >>> minSquareSum(28)\n    3\n    >>> minSquareSum(29)\n    4\n    >>> minSquareSum(30)\n    3\n    >>> minSquareSum(31)\n    4\n    >>> minSquareSum(32)\n    3\n    >>> minSquareSum(33)\n    4\n    >>> minSquareSum(34)\n    4\n    >>> minSquareSum(35)\n    4\n    >>> minSquareSum(36)\n    4\n    >>> minSquareSum(37)\n    4\n    >>> minSquareSum(38)\n    4\n    >>> minSquareSum(39)\n    4\n    >>> minSquareSum(40)\n    4\n    >>> minSquareSum(41)\n    4\n    >>> minSquareSum(42)\n    4\n    >>> minSquareSum(43)\n    4\n    >>> minSquareSum(44)\n    4\n    >>> min",
    "def min_square_sum(num):\n    squares = []\n    i = 1\n    while i * i <= num:\n        squares.append(i * i)\n        i += 1\n    squares.sort()\n    return squares\n\n\ndef min_square_sum_rec(num, squares):\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(len(squares)):\n            if num - squares[i] >= 0:\n                count += 1\n                num -= squares[i]\n                break\n        return count + min_square_sum_rec(num, squares)\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter the number: \"))\n    squares = min_square_sum(num)\n    print(\"Squares:\", squares)\n    print(\"Minimum number of squares whose sum is equal to the number:\", min_square_sum_rec(num, squares))",
    "def min_square(n):\n    squares = [i * i for i in range(1, n + 1)]\n    squares.sort(reverse=True)\n    for i in range(n):\n        if squares[i] == n:\n            return 1\n        elif squares[i] > n:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(min_square(12))",
    "def min_square(n):\n    \"\"\"\n    Return the minimum number of squares whose sum is equal to a given number.\n    \"\"\"\n    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n\n    squares.sort(reverse=True)\n\n    def helper(squares, n, index):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        if index >= len(squares):\n            return -1\n\n        current_square = squares[index]\n        count = 1\n        while n >= 0:\n            n -= current_square\n            count += 1\n        return helper(squares, n, index + 1) + count\n\n    return helper(squares, n, 0)\n\n\ndef test_min_square():\n    \"\"\"\n    >>> min_square(1)\n    1\n    >>> min_square(13)\n    3\n    >>> min_square(100)\n    1\n    >>> min_square(14)\n    -1\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def min_square_sum(num):\n    sq = 1\n    cnt = 0\n    while sq <= num:\n        cnt += num // sq\n        sq += 1\n    return cnt\n\n\nprint(min_square_sum(10))",
    "def min_squares(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        return -1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while i - j * j >= 0:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\ndef min_squares_dp_tab(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        return -1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while i - j * j >= 0:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\ndef min_squares_dp_tab_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        return -1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while i - j * j >= 0:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\nprint(min_squares_dp_tab_2(13))",
    "def square_sum(number):\n    square_sum = 0\n    for i in range(1, number+1):\n        square_sum += i*i\n    return square_sum\n\n\ndef min_square_sum(number):\n    squares = []\n    for i in range(1, number+1):\n        squares.append(i*i)\n    squares.sort(reverse=True)\n    count = 0\n    for i in squares:\n        if i >= number:\n            return count\n        number -= i\n        count += 1\n    return count\n\n\ndef min_square_sum_dp(number):\n    squares = []\n    for i in range(1, number+1):\n        squares.append(i*i)\n    squares.sort(reverse=True)\n    dp = [0 for _ in range(number+1)]\n    dp[0] = 0\n    for i in range(1, number+1):\n        if i >= squares[0]:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i-squares[0]] + 1\n    return dp[number]\n\n\nprint(min_square_sum_dp(12))",
    "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef helper(target):\n    if target == 0:\n        return 0\n    elif target < 0:\n        return -1\n\n    for i in range(1, target + 1):\n        if helper(target - i * i) != -1:\n            return helper(target - i * i) + 1\n\n    return -1\n\n\ndef min_squares(target):\n    return helper(target)\n\n\nif __name__ == \"__main__\":\n    assert min_squares(4) == 1\n    assert min_squares(13) == 2\n    assert min_squares(15) == 2\n    assert min_squares(20) == 1\n    assert min_squares(100) == 4",
    "def min_square_sum(number):\n    \"\"\"\n    Finds the minimum number of squares whose sum is equal to a given number.\n\n    Args:\n       number(int): Input number to find the squares for\n    Returns:\n       int: The minimum number of squares whose sum is equal to the given number.\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return -1\n    if number == 1:\n        return 1\n    squares = [i * i for i in range(1, int(number ** 0.5) + 1)]\n    squares.append(0)\n    squares.sort()\n    squares_length = len(squares)\n    min_squares = 0\n    for i in range(squares_length):\n        if number <= 0:\n            return min_squares\n        if squares[i] <= number:\n            number -= squares[i]\n            min_squares += 1\n    return -1\n\n\nprint(min_square_sum(0))\nprint(min_square_sum(1))\nprint(min_square_sum(2))\nprint(min_square_sum(3))\nprint(min_square_sum(4))\nprint(min_square_sum(5))\nprint(min_square_sum(6))\nprint(min_square_sum(7))\nprint(min_square_sum(8))\nprint(min_square_sum(9))\nprint(min_square_sum(10))\nprint(min_square_sum(11))\nprint(min_square_sum(12))\nprint(min_square_sum(13))\nprint(min_square_sum(14))\nprint(min_square_sum(15))\nprint(min_square_sum(16))\nprint(min_square_sum(17))\nprint(min_square_sum(18))\nprint(min_square_sum(19))\nprint(min_square_sum(20))\nprint(min_square_sum(21))\nprint(min_square_sum(22))\nprint(min_square_sum",
    "import sys\n\n\ndef square_sum(number):\n    \"\"\"\n    This function will return minimum number of squares whose sum is equal to a given number\n    >>> square_sum(100)\n    1\n    >>> square_sum(101)\n    2\n    >>> square_sum(13)\n    3\n    >>> square_sum(14)\n    2\n    >>> square_sum(15)\n    2\n    >>> square_sum(25)\n    3\n    >>> square_sum(35)\n    3\n    >>> square_sum(36)\n    4\n    >>> square_sum(40)\n    2\n    >>> square_sum(1000)\n    2\n    >>> square_sum(10000)\n    2\n    >>> square_sum(10001)\n    3\n    >>> square_sum(10002)\n    3\n    >>> square_sum(10003)\n    3\n    >>> square_sum(10004)\n    3\n    >>> square_sum(10005)\n    3\n    >>> square_sum(10006)\n    3\n    >>> square_sum(10007)\n    3\n    >>> square_sum(10008)\n    3\n    >>> square_sum(10009)\n    3\n    >>> square_sum(10010)\n    3\n    >>> square_sum(10011)\n    3\n    >>> square_sum(10012)\n    3\n    >>> square_sum(10013)\n    3\n    >>> square_sum(10014)\n    3\n    >>> square_sum(10015)\n    3\n    >>> square_sum(10016)\n    3\n    >>> square_sum(10017)\n    3\n    >>> square_sum(10018)\n    3\n    >>> square_sum(10019)\n    3\n    >>> square_sum(10020)\n    3\n    >>> square_sum(10",
    "def min_squares(number):\n    squares = []\n    i = 1\n    while i * i <= number:\n        squares.append(i * i)\n        i += 1\n\n    dp = [float(\"inf\") for i in range(number + 1)]\n    dp[0] = 0\n\n    for i in range(1, number + 1):\n        for j in squares:\n            if i >= j:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n\n    return dp[-1]\n\n\ndef min_squares_memo(number):\n    squares = []\n    i = 1\n    while i * i <= number:\n        squares.append(i * i)\n        i += 1\n\n    dp = [float(\"inf\") for i in range(number + 1)]\n    dp[0] = 0\n\n    def helper(number):\n        if dp[number] < float(\"inf\"):\n            return dp[number]\n\n        for i in squares:\n            if number >= i:\n                dp[number] = min(dp[number], helper(number - i) + 1)\n\n        return dp[number]\n\n    return helper(number)\n\n\nprint(min_squares(13))\nprint(min_squares_memo(13))",
    "def squareSum(n):\n    squares = [i*i for i in range(1, int(n**0.5)+1)]\n    squares.sort()\n    i = 0\n    j = len(squares)-1\n    res = []\n    while i < j:\n        sum = squares[i] + squares[j]\n        if sum == n:\n            res.append(squares[i])\n            res.append(squares[j])\n            break\n        elif sum > n:\n            j -= 1\n        else:\n            res.append(squares[i])\n            i += 1\n    return res\n\n\nprint(squareSum(30))\nprint(squareSum(16))\nprint(squareSum(32))\nprint(squareSum(12))\nprint(squareSum(27))\nprint(squareSum(25))\nprint(squareSum(13))\nprint(squareSum(100))",
    "def min_squares(num: int) -> int:\n    \"\"\"\n    >>> min_squares(10)\n    2\n    >>> min_squares(0)\n    0\n    >>> min_squares(1)\n    1\n    >>> min_squares(2)\n    1\n    >>> min_squares(4)\n    2\n    >>> min_squares(11)\n    3\n    >>> min_squares(12)\n    2\n    >>> min_squares(13)\n    2\n    >>> min_squares(14)\n    2\n    >>> min_squares(15)\n    2\n    >>> min_squares(16)\n    2\n    >>> min_squares(17)\n    3\n    \"\"\"\n    # Initialize a table to store results of subproblems\n    table: list = [num + 1] * (num + 1)\n\n    # Fill entries for 0 and 1\n    for i in range(0, num + 1):\n        table[i] = 1\n        if i == 0:\n            table[i] = 0\n\n    # Fill entries for remaining values\n    for i in range(2, num + 1):\n        for j in range(1, i):\n            table[i] = min(1 + table[i - j], table[i])\n\n    return table[num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef min_squares(number):\n    # find the min number of squares\n    # 1. sqrt(number)\n    # 2. sqrt(number - i)\n    # 3. sqrt(number - 2*i)\n    # 4. sqrt(number - 3*i)\n    # ...\n    # 8. sqrt(number - 7*i)\n    # 9. sqrt(number - 8*i)\n\n    squares = []\n    i = 1\n\n    while i * i <= number:\n        squares.append(i * i)\n        i += 1\n\n    min_count = float(\"inf\")\n\n    for square in squares:\n        cur_count = 1\n        cur_number = number\n\n        while cur_number >= square:\n            cur_number -= square\n            cur_count += 1\n\n        if cur_number == 0:\n            min_count = min(min_count, cur_count)\n\n    return min_count\n\n\ndef main():\n\n    number = 12\n    assert min_squares(number) == 2\n\n    number = 13\n    assert min_squares(number) == 3\n\n    number = 16\n    assert min_squares(number) == 2\n\n    number = 17\n    assert min_squares(number) == 2\n\n    number = 225\n    assert min_squares(number) == 5\n\n    number = 1000\n    assert min_squares(number) == 3\n\n    number = 5\n    assert min_squares(number) == 1\n\n\nif __name__ == \"__main__\":\n    main()",
    "def minimum_number_of_squares(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n*sqrt(n))\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    dp = [n + 1] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    assert minimum_number_of_squares(1) == 1\n    assert minimum_number_of_squares(2) == 1\n    assert minimum_number_of_squares(3) == 1\n    assert minimum_number_of_squares(4) == 1\n    assert minimum_number_of_squares(5) == 2\n    assert minimum_number_of_squares(6) == 2\n    assert minimum_number_of_squares(7) == 2\n    assert minimum_number_of_squares(8) == 2\n    assert minimum_number_of_squares(9) == 1\n    assert minimum_number_of_squares(10) == 2\n    assert minimum_number_of_squares(11) == 2\n    assert minimum_number_of_squares(12) == 3\n    assert minimum_number_of_squares(13) == 2\n    assert minimum_number_of_squares(14) == 3\n    assert minimum_number_of_squares(15) == 2\n    assert minimum_number_of_squares(16) == 2\n    assert minimum_number_of_squares(17) == 2\n    assert minimum_number_of_squ",
    "def min_squares(n):\n    squares = [i*i for i in range(1, int(n**0.5)+1)]\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in squares:\n            if i < j:\n                break\n            dp[i] = min(dp[i], dp[i-j]+1)\n    return dp[-1]\n\n\nprint(min_squares(13))\nprint(min_squares(12))",
    "def min_square(n):\n    result = 0\n    while n % 4 == 0:\n        n /= 4\n        result += 1\n    if n % 8 == 7:\n        return -1\n    return result\n\n\nprint(min_square(20))\nprint(min_square(2))\nprint(min_square(1))\nprint(min_square(13))\nprint(min_square(14))\nprint(min_square(15))\nprint(min_square(16))",
    "def min_squares(n):\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    dp = [float(\"inf\")] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for square in squares:\n            if i >= square:\n                dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(min_squares(13))",
    "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef min_square_sum(n):\n    if n <= 3:\n        return n\n    return 1 + min(min_square_sum(n - 1), min_square_sum(n - 4), min_square_sum(n - 9))\n\n\ndef main():\n    print(\"The minimum number of squares whose sum is equal to a given number: \" +\n          str(min_square_sum(15)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square_sum(num):\n    \"\"\"\n    >>> min_square_sum(2)\n    1\n    >>> min_square_sum(10000)\n    2\n    >>> min_square_sum(3)\n    1\n    >>> min_square_sum(4)\n    2\n    >>> min_square_sum(6)\n    3\n    >>> min_square_sum(7)\n    2\n    >>> min_square_sum(8)\n    2\n    >>> min_square_sum(9)\n    1\n    >>> min_square_sum(10)\n    2\n    >>> min_square_sum(11)\n    2\n    >>> min_square_sum(12)\n    2\n    >>> min_square_sum(13)\n    2\n    >>> min_square_sum(14)\n    2\n    >>> min_square_sum(15)\n    2\n    >>> min_square_sum(16)\n    2\n    >>> min_square_sum(17)\n    2\n    >>> min_square_sum(18)\n    3\n    >>> min_square_sum(19)\n    2\n    >>> min_square_sum(20)\n    2\n    >>> min_square_sum(21)\n    2\n    >>> min_square_sum(22)\n    2\n    >>> min_square_sum(23)\n    2\n    >>> min_square_sum(24)\n    2\n    >>> min_square_sum(25)\n    2\n    >>> min_square_sum(26)\n    2\n    >>> min_square_sum(27)\n    2\n    >>> min_square_sum(28)\n    2\n    >>> min_square_sum(29)\n    2\n    >>> min_square_sum(30)\n    2\n    >>> min_square_sum(31)\n    2\n    >>> min_square_sum(32)\n    2\n    >>> min_square_sum(33)\n    2\n    >>> min_square_sum(34)\n    2\n    >>> min_square_",
    "def minSquares(n):\n\n    dp = [0 for i in range(n+1)]\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        j = 1\n        while j*j <= i:\n            dp[i] = min(dp[i], 1+dp[i-j*j])\n            j += 1\n\n    return dp[n]\n\n\nprint(minSquares(12))",
    "def min_square(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        i = 1\n        while i * i <= n:\n            i += 1\n        return i - 1\n\n\ndef main():\n    val = int(input(\"Enter the number: \"))\n    print(min_square(val))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square_sum(number):\n    squares = [i ** 2 for i in range(1, int(number ** 0.5) + 1)]\n    return min([number - i for i in squares if number >= i])",
    "def min_squares(n: int) -> int:\n    \"\"\"\n    >>> min_squares(10)\n    2\n    >>> min_squares(27)\n    3\n    >>> min_squares(100)\n    4\n    >>> min_squares(50)\n    3\n    >>> min_squares(1)\n    1\n    >>> min_squares(1000)\n    4\n    >>> min_squares(10000)\n    5\n    >>> min_squares(100000)\n    5\n    >>> min_squares(100001)\n    5\n    >>> min_squares(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: invalid input\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"invalid input\")\n    squares: list[int] = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]\n    dp: list[int] = [0] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        dp[i] = i\n\n        for j in squares:\n            if j > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - j])\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_squares(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n)\n    \"\"\"\n    if n <= 3:\n        return n\n\n    squares = []\n\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n\n    dp = [n] * (n + 1)\n\n    for i in range(n + 1):\n        dp[i] = i\n\n    for i in range(1, n + 1):\n        for square in squares:\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    print(min_squares(13))",
    "def min_square_sum(number):\n    squares = []\n    square = 1\n    while square ** 2 <= number:\n        squares.append(square ** 2)\n        square += 1\n    squares.append(number)\n    squares.sort()\n    print(squares)\n    print(len(squares))\n    min_square = len(squares)\n    for i in range(0, len(squares)):\n        j = i + 1\n        while j < len(squares):\n            if squares[i] + squares[j] == number:\n                min_square = min(min_square, i + j)\n            j += 1\n    return min_square\n\n\nprint(min_square_sum(30))\nprint(min_square_sum(41))",
    "def min_square_sum(n):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    i = 1\n    count = 1\n    while i * i <= n:\n        if n - i * i < 0:\n            break\n        else:\n            n = n - i * i\n            count += 1\n        i += 1\n\n    return count\n\n\ndef main():\n    val1 = 1\n    val2 = 2\n    val3 = 3\n    val4 = 4\n    val5 = 5\n    val6 = 6\n    val7 = 7\n    val8 = 8\n    val9 = 9\n    val10 = 10\n    val11 = 11\n    val12 = 12\n    val13 = 13\n    val14 = 14\n    val15 = 15\n    val16 = 16\n    val17 = 17\n    val18 = 18\n    val19 = 19\n    val20 = 20\n\n    op1 = min_square_sum(val1)\n    op2 = min_square_sum(val2)\n    op3 = min_square_sum(val3)\n    op4 = min_square_sum(val4)\n    op5 = min_square_sum(val5)\n    op6 = min_square_sum(val6)\n    op7 = min_square_sum(val7)\n    op8 = min_square_sum(val8)\n    op9 = min_square_sum(val9)\n    op10 = min_square_sum(val10)\n    op11 = min_square_sum(val11)\n    op12 = min_square_sum(val12)\n    op13 = min_square_sum(val13)\n    op14 = min_square_sum(val14)\n    op15 = min_square_sum(val15)\n    op16 = min_square_sum(val16)",
    "def min_squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    for i in range(1, n + 1):\n        for square in squares:\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[n]\n\n\ndef min_squares_2(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    for i in range(1, n + 1):\n        for square in squares:\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[n]\n\n\nprint(min_squares(12))\nprint(min_squares_2(12))",
    "def minSquareSum(num):\n    # Initialize a table to store the minimum number of squares whose sum is equal to a given number\n    table = [0] * (num + 1)\n\n    # Base case\n    table[0] = 0\n\n    # Initialize a square of size 1\n    table[1] = 1\n\n    # Fill the table\n    for i in range(2, num + 1):\n        table[i] = i\n        j = 1\n        while j * j <= i:\n            table[i] = min(table[i], table[i - j * j] + 1)\n            j += 1\n\n    return table[num]\n\n\nprint(minSquareSum(12))",
    "def min_square(num):\n    squares = []\n    while num > 0:\n        square = num ** 0.5\n        if square.is_integer():\n            squares.append(int(square))\n            num -= square ** 2\n        else:\n            return []\n    return squares\n\n\nprint(min_square(11))\nprint(min_square(12))\nprint(min_square(13))\nprint(min_square(14))\nprint(min_square(15))\nprint(min_square(16))\nprint(min_square(17))\nprint(min_square(18))\nprint(min_square(19))\nprint(min_square(20))\nprint(min_square(21))",
    "def min_square_sum(num):\n    square_list = []\n    i = 1\n    while i * i <= num:\n        square_list.append(i * i)\n        i += 1\n    square_list.sort(reverse=True)\n    result = [0] * (num + 1)\n    result[0] = 0\n    for i in range(1, len(result)):\n        for j in square_list:\n            if j <= i:\n                result[i] = min(result[i], result[i - j] + 1)\n            else:\n                break\n    return result[num]\n\n\ndef min_square_sum_2(num):\n    square_list = []\n    i = 1\n    while i * i <= num:\n        square_list.append(i * i)\n        i += 1\n    square_list.sort(reverse=True)\n    dp = [0] * (num + 1)\n    dp[0] = 0\n    for i in range(1, len(dp)):\n        for j in square_list:\n            if j <= i:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n            else:\n                break\n    return dp[num]",
    "def minimum_squares(n):\n    squares = []\n    i = 1\n    while i*i <= n:\n        squares.append(i*i)\n        i += 1\n\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        for square in squares:\n            if i >= square:\n                dp[i] = 1 + dp[i-square]\n            else:\n                break\n\n    return dp[n]\n\n\ndef main():\n    assert minimum_squares(12) == 2\n    assert minimum_squares(20) == 1\n    assert minimum_squares(21) == 1\n    assert minimum_squares(25) == 1\n    assert minimum_squares(26) == 2\n    assert minimum_squares(30) == 1\n    assert minimum_squares(31) == 2\n    assert minimum_squares(32) == 2\n    assert minimum_squares(33) == 2\n    assert minimum_squares(34) == 2\n    assert minimum_squares(35) == 3\n    assert minimum_squares(36) == 2\n    assert minimum_squares(37) == 3\n    assert minimum_squares(38) == 3\n    assert minimum_squares(39) == 3\n    assert minimum_squares(40) == 2\n    assert minimum_squares(41) == 3\n    assert minimum_squares(42) == 3\n    assert minimum_squares(43) == 3\n    assert minimum_squares(44) == 3\n    assert minimum_squares(45) == 4\n    assert minimum_squares(46) == 3\n    assert minimum_squares(47) == 4\n    assert minimum_squares(48) == 3\n    assert minimum_squares(49) == 4\n    assert minimum_squares(50) == 2\n    assert minimum_squares(",
    "def min_squares(n):\n    dp = [float('inf') for _ in range(n+1)]\n    dp[0] = 0\n\n    sq = [i for i in range(1, int(n**0.5)+1) if n % i == 0]\n\n    for i in range(1, n+1):\n        for j in sq:\n            if i-j >= 0:\n                dp[i] = min(dp[i], dp[i-j] + 1)\n\n    return dp[-1]\n\n\ndef main():\n    assert min_squares(13) == 2\n    assert min_squares(14) == 2\n    assert min_squares(15) == 3\n    assert min_squares(20) == 2\n    assert min_squares(21) == 2\n    assert min_squares(25) == 3\n    assert min_squares(26) == 3\n    assert min_squares(27) == 3\n    assert min_squares(28) == 3\n    assert min_squares(30) == 3\n    assert min_squares(31) == 3\n    assert min_squares(32) == 3\n    assert min_squares(33) == 3\n    assert min_squares(34) == 3\n    assert min_squares(35) == 4\n    assert min_squares(36) == 3\n    assert min_squares(37) == 4\n    assert min_squares(38) == 3\n    assert min_squares(39) == 4\n    assert min_squares(40) == 3\n    assert min_squares(41) == 4\n    assert min_squares(42) == 3\n    assert min_squares(43) == 4\n    assert min_squares(44) == 3\n    assert min_squares(45) == 4\n    assert min_squares(46) == 4\n    assert min_squ",
    "def square_sum(number):\n    if number < 0:\n        return -1\n\n    min_squares = []\n    squares = [i ** 2 for i in range(1, int(number ** 0.5) + 1)]\n\n    for square in squares:\n        if square > number:\n            break\n\n        temp = number - square\n        if temp in squares:\n            min_squares.append(square)\n            min_squares.append(temp)\n            return min_squares\n\n    return -1\n\n\nprint(square_sum(13))\nprint(square_sum(23))\nprint(square_sum(12))\nprint(square_sum(3))\nprint(square_sum(4))\nprint(square_sum(5))\nprint(square_sum(6))\nprint(square_sum(7))\nprint(square_sum(8))\nprint(square_sum(9))\nprint(square_sum(10))\nprint(square_sum(11))\nprint(square_sum(100))",
    "def min_square_sum(num):\n    \"\"\"\n    :param num: int - a positive number (integer)\n    :return: int - an integer representing the minimum number of squares whose sum is equal to the given number\n    \"\"\"\n    squares = [i * i for i in range(1, int(num ** 0.5) + 1)]\n    squares.sort()\n    return min_square_sum_helper(num, len(squares) - 1, squares)\n\n\ndef min_square_sum_helper(num, index, squares):\n    if num == 0:\n        return 0\n    if num < 0 or index < 0:\n        return -1\n    if num < squares[index]:\n        return min_square_sum_helper(num, index - 1, squares)\n    return 1 + min_square_sum_helper(num - squares[index], index - 1, squares)\n\n\ndef test_function(test_case):\n    num = test_case[0]\n    solution = test_case[1]\n    output = min_square_sum(num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([2, 1])\ntest_function([3, 1])\ntest_function([4, 1])\ntest_function([5, 2])\ntest_function([12, 3])\ntest_function([13, 2])\ntest_function([25, 5])\ntest_function([36, 6])\ntest_function([45, 4])\ntest_function([625, 9])",
    "def min_square_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n)\n    \"\"\"\n    squares = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]\n    squares_set = set(squares)\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for square in squares:\n            if square > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - square])\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(13))",
    "def min_squares(num):\n    squares = []\n    for i in range(1, num + 1):\n        squares.append(i ** 2)\n    squares.sort()\n    total = 0\n    for i in range(len(squares)):\n        if num <= 0:\n            return total\n        if num >= squares[i]:\n            total += 1\n            num -= squares[i]\n    return total\n\n\nprint(min_squares(12))",
    "def squares_sum(num):\n    squares = []\n    square = 1\n    while square * square <= num:\n        squares.append(square * square)\n        square += 1\n    return len(squares)\n\n\ndef min_squares(num):\n    squares = []\n    square = 1\n    while square * square <= num:\n        squares.append(square * square)\n        square += 1\n    if len(squares) == 0:\n        return 0\n    i = 0\n    while i < len(squares):\n        if squares[i] > num:\n            i -= 1\n        elif squares[i] == num:\n            return 1\n        else:\n            j = i + 1\n            while j < len(squares):\n                if squares[i] + squares[j] > num:\n                    j -= 1\n                elif squares[i] + squares[j] == num:\n                    return 2\n                else:\n                    k = j + 1\n                    while k < len(squares):\n                        if squares[i] + squares[j] + squares[k] > num:\n                            k -= 1\n                        elif squares[i] + squares[j] + squares[k] == num:\n                            return 3\n                        else:\n                            return 4\n                    k = j + 1\n                j = k + 1\n        i += 1\n    return 0\n\n\nif __name__ == '__main__':\n    num = 12\n    print(min_squares(num))",
    "def squareSum(number):\n    square_list = []\n    for i in range(1, number+1):\n        square_list.append(i*i)\n    square_list.sort()\n\n    square_list_len = len(square_list)\n\n    for i in range(square_list_len):\n        for j in range(i+1, square_list_len):\n            sum_squares = square_list[i] + square_list[j]\n            if sum_squares == number:\n                return 2\n            elif sum_squares > number:\n                break\n\n\nprint(squareSum(15))",
    "def min_square_sum(number):\n    squares = [i * i for i in range(1, int(number ** 0.5) + 1)]\n    squares.sort()\n\n    result = []\n    i = len(squares) - 1\n    while i >= 0:\n        if number == 0:\n            return result\n        if number >= squares[i]:\n            result.append(squares[i])\n            number -= squares[i]\n        i -= 1\n    return result\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(min_square_sum(number))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square_sum(num: int) -> int:\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    squares = []\n    for i in range(1, num + 1):\n        squares.append(i * i)\n    squares.sort(reverse=True)\n\n    i = 0\n    while num > 0:\n        if num - squares[i] >= 0:\n            num -= squares[i]\n        i += 1\n\n    return i\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(13))",
    "from math import sqrt\n\n\ndef min_squares(num: int) -> int:\n    \"\"\"\n    :param num: int, the given number\n    :return: int, the minimum number of squares whose sum is equal to a given number\n\n    >>> min_squares(1)\n    1\n    >>> min_squares(2)\n    2\n    >>> min_squares(3)\n    1\n    >>> min_squares(4)\n    1\n    >>> min_squares(5)\n    2\n    >>> min_squares(11)\n    3\n    >>> min_squares(12)\n    2\n    >>> min_squares(13)\n    2\n    >>> min_squares(14)\n    2\n    >>> min_squares(15)\n    2\n    >>> min_squares(16)\n    1\n    >>> min_squares(17)\n    3\n    >>> min_squares(18)\n    2\n    >>> min_squares(19)\n    2\n    >>> min_squares(20)\n    2\n    >>> min_squares(21)\n    3\n    \"\"\"\n    i = 1\n    squares = []\n    while i * i <= num:\n        squares.append(i * i)\n        i += 1\n    squares = sorted(squares)\n    low = 0\n    high = len(squares) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if num < squares[mid]:\n            high = mid - 1\n        elif num > squares[mid]:\n            low = mid + 1\n        else:\n            return mid + 1\n    return low + 1\n\n\ndef min_squares_v2(num: int) -> int:\n    \"\"\"\n    :param num: int, the given number\n    :return: int, the minimum number of squares whose sum is equal to a given number\n\n    >>> min_squares_v2(1)\n    1\n    >>> min_squares_v2(2)\n    2\n    >>> min_squares_v2(3)",
    "from math import sqrt\n\n\ndef find_square_sum(n):\n    result = []\n    while n > 0:\n        root = sqrt(n)\n        if root == int(root):\n            result.append(root)\n            n -= root * root\n        else:\n            result.append(int(root))\n            n -= int(root) * int(root)\n    return len(result)\n\n\ndef main():\n    assert find_square_sum(2) == 1\n    assert find_square_sum(3) == 1\n    assert find_square_sum(12) == 3\n    assert find_square_sum(13) == 2\n    assert find_square_sum(16) == 4\n    assert find_square_sum(17) == 2\n    assert find_square_sum(100) == 2\n    assert find_square_sum(2025) == 4\n    assert find_square_sum(9999) == 4\n    assert find_square_sum(123456789) == 9\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square(n):\n    squares = [i**2 for i in range(1, int(n**0.5)+1)]\n    squares.sort(reverse=True)\n\n    count = 0\n    i = 0\n    while n > 0:\n        if n >= squares[i]:\n            n -= squares[i]\n            count += 1\n        i += 1\n    return count\n\n\nprint(min_square(10))",
    "def min_square_sum(n):\n    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    squares.sort()\n\n    def helper(n):\n        count = 0\n        i = 0\n        while n > 0:\n            if n >= squares[i]:\n                n -= squares[i]\n                count += 1\n            else:\n                i += 1\n        return count\n\n    return helper(n)\n\n\nprint(min_square_sum(17))",
    "from math import ceil\n\n\ndef square_sum(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        count += n // (i * i)\n        i += 1\n    return count\n\n\ndef square_sum_2(n):\n    return int(ceil(n ** 0.5))\n\n\nif __name__ == \"__main__\":\n    print(square_sum(10))\n    print(square_sum_2(10))",
    "def min_square(num):\n    n = num\n    sq = []\n    i = 1\n    while i * i <= n:\n        sq.append(i * i)\n        i += 1\n    sq.sort()\n    print(sq)\n    n_sq = []\n    for i in range(len(sq)):\n        for j in range(i+1, len(sq)):\n            if sq[i] + sq[j] == num:\n                n_sq.append(sq[i])\n                n_sq.append(sq[j])\n                break\n    return n_sq\n\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(min_square(num))",
    "def min_square_sum(target_number):\n    squares = []\n    while target_number != 0:\n        for i in range(1, int(target_number ** 0.5) + 1):\n            if target_number % i == 0:\n                squares.append(i ** 2)\n                target_number = target_number - i ** 2\n                break\n    return len(squares)\n\n\nif __name__ == '__main__':\n    print(min_square_sum(15))\n    print(min_square_sum(12))\n    print(min_square_sum(10))\n    print(min_square_sum(13))",
    "def min_square_sum(number):\n    squares = []\n    sum_squares = 0\n    while sum_squares < number:\n        squares.append(number)\n        number -= squares[-1]\n        sum_squares += squares[-1]\n    return len(squares)\n\n\nif __name__ == \"__main__\":\n    number = 100\n    print(min_square_sum(number))",
    "def minSquareSum(n):\n    \"\"\"\n    >>> minSquareSum(13)\n    3\n    >>> minSquareSum(10)\n    2\n    >>> minSquareSum(1)\n    1\n    >>> minSquareSum(12)\n    2\n    >>> minSquareSum(100)\n    1\n    >>> minSquareSum(3)\n    1\n    >>> minSquareSum(6)\n    2\n    >>> minSquareSum(4)\n    1\n    >>> minSquareSum(5)\n    1\n    >>> minSquareSum(7)\n    2\n    \"\"\"\n    n = abs(n)\n    res = n\n\n    while n:\n        n -= int(math.sqrt(n))\n        res += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_squares(n):\n    dp = [0] * (n + 1)\n\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while i - j * j >= 0:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\nprint(min_squares(10))",
    "def min_squares(n):\n    \"\"\"\n    :param n: number\n    :return: minimum number of squares\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\ndef min_squares_dp(n):\n    \"\"\"\n    :param n: number\n    :return: minimum number of squares\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\ndef min_squares_dp_tab(n):\n    \"\"\"\n    :param n: number\n    :return: minimum number of squares\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n\ndef main():\n\n    print(\"Minimum number of",
    "def min_square_sum(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n)\n    \"\"\"\n    squares = [i * i for i in range(1, int(num ** 0.5) + 1)]\n    squares.sort()\n\n    count = 0\n    curr_sum = 0\n    i = len(squares) - 1\n\n    while curr_sum < num and i >= 0:\n        curr_sum += squares[i]\n\n        if curr_sum == num:\n            return count + 1\n        elif curr_sum < num:\n            count += 1\n            i -= 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(13))",
    "def min_square_sum(target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^1/2)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # base case\n    if target == 0:\n        return 0\n\n    # recurrence relation\n    for i in range(1, target + 1):\n        if i * i == target:\n            return 1\n\n        if i * i > target:\n            return min_square_sum(target - i) + 1\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(1))\n    print(min_square_sum(2))\n    print(min_square_sum(3))\n    print(min_square_sum(4))\n    print(min_square_sum(5))\n    print(min_square_sum(6))\n    print(min_square_sum(7))\n    print(min_square_sum(8))\n    print(min_square_sum(9))\n    print(min_square_sum(10))\n    print(min_square_sum(11))\n    print(min_square_sum(12))\n    print(min_square_sum(13))\n    print(min_square_sum(14))\n    print(min_square_sum(15))\n    print(min_square_sum(16))\n    print(min_square_sum(17))\n    print(min_square_sum(18))\n    print(min_square_sum(19))\n    print(min_square_sum(20))\n    print(min_square_sum(21))\n    print(min_square_sum(22))\n    print(min_square_sum(23))\n    print(min_square_sum(24))\n    print(min_square_sum(25))\n    print(min_square_sum(26))\n    print(min_square_sum(27))\n    print(min_square_sum(28))\n    print(min_square_sum(29))\n    print(min",
    "def min_squares(n):\n    \"\"\"\n    :param: n - number\n    return: int - minimum number of squares whose sum is equal to a given number\n    \"\"\"\n    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for square in squares:\n            if i >= square:\n                dp[i] = min(dp[i], 1 + dp[i - square])\n            else:\n                break\n    return dp[n]\n\n\nprint(min_squares(15))",
    "def min_squares(number):\n    \"\"\"\n    Returns the minimum number of squares whose sum is equal to a given number.\n    >>> min_squares(2)\n    1\n    >>> min_squares(3)\n    1\n    >>> min_squares(4)\n    1\n    >>> min_squares(6)\n    2\n    >>> min_squares(7)\n    2\n    >>> min_squares(8)\n    2\n    >>> min_squares(9)\n    1\n    >>> min_squares(10)\n    2\n    >>> min_squares(11)\n    2\n    >>> min_squares(12)\n    3\n    >>> min_squares(13)\n    2\n    >>> min_squares(14)\n    3\n    >>> min_squares(15)\n    2\n    >>> min_squares(16)\n    3\n    >>> min_squares(17)\n    3\n    >>> min_squares(18)\n    3\n    >>> min_squares(19)\n    2\n    >>> min_squares(20)\n    2\n    >>> min_squares(21)\n    2\n    >>> min_squares(22)\n    3\n    >>> min_squares(23)\n    2\n    >>> min_squares(24)\n    3\n    >>> min_squares(25)\n    3\n    >>> min_squares(26)\n    3\n    >>> min_squares(27)\n    3\n    >>> min_squares(28)\n    4\n    >>> min_squares(29)\n    3\n    >>> min_squares(30)\n    4\n    >>> min_squares(31)\n    4\n    >>> min_squares(32)\n    4\n    >>> min_squares(33)\n    4\n    >>> min_squares(34)\n    4\n    >>> min_squares(35)\n    4\n    >>> min_squares(36)\n    5\n    >>> min_squares(37)",
    "def square_sum(num):\n    squares = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            squares.append(i ** 2)\n            if (num / i) != i:\n                squares.append(int(num / i) ** 2)\n    return len(squares)\n\n\ndef main():\n    print(square_sum(10))\n    print(square_sum(2))\n    print(square_sum(3))\n    print(square_sum(5))\n    print(square_sum(6))\n\n\nif __name__ == '__main__':\n    main()",
    "def min_square(number):\n    square_sum = 1\n    count = 1\n    while square_sum < number:\n        square_sum += count\n        count += 1\n    return count\n\n\nprint(min_square(2))\nprint(min_square(1))\nprint(min_square(3))\nprint(min_square(5))\nprint(min_square(100))",
    "def min_squares(num):\n    squares = [i*i for i in range(1, int(num**0.5)+1)]\n    dp = [float('inf') for _ in range(num+1)]\n    dp[0] = 0\n\n    for i in range(1, num+1):\n        for j in squares:\n            if j > i:\n                break\n            dp[i] = min(dp[i], dp[i-j]+1)\n\n    return dp[-1]\n\nif __name__ == \"__main__\":\n    num = 13\n    print(min_squares(num))",
    "def min_square_sum(number: int) -> int:\n    \"\"\"\n    returns the minimum number of squares whose sum is equal to a given number.\n    >>> min_square_sum(100)\n    10\n    >>> min_square_sum(5)\n    2\n    >>> min_square_sum(0)\n    0\n    >>> min_square_sum(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number should be positive\n    >>> min_square_sum(12)\n    3\n    >>> min_square_sum(102)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number too big\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number should be positive\")\n\n    sq = int(number ** 0.5)\n    if sq ** 2 == number:\n        return sq\n\n    if sq ** 2 < number:\n        sq += 1\n\n    if sq ** 2 > number:\n        raise ValueError(\"Number too big\")\n\n    return sq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_square_sum(number):\n    squares = [i ** 2 for i in range(1, int(number ** 0.5) + 1)]\n    squares.sort(reverse=True)\n    i = 0\n    count = 0\n    while number > 0:\n        if number >= squares[i]:\n            number -= squares[i]\n            count += 1\n        else:\n            i += 1\n    return count\n\n\nprint(min_square_sum(12))",
    "def min_square_sum(n):\n    square_sum = [0]\n    while square_sum[-1] < n:\n        square_sum.append(square_sum[-1] + ((square_sum[-1] + 1) ** 2))\n    for i in range(len(square_sum) - 2, -1, -1):\n        if square_sum[i] >= n:\n            return i\n\n\nif __name__ == '__main__':\n    assert min_square_sum(100) == 10",
    "from math import sqrt\n\n\ndef is_perfect_square(number):\n    return int(sqrt(number)) ** 2 == number\n\n\ndef min_square_sum(number):\n    if is_perfect_square(number):\n        return 1\n\n    count = 0\n    while number > 0:\n        if is_perfect_square(number):\n            number -= int(sqrt(number)) ** 2\n            count += 1\n        else:\n            number -= 1\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert min_square_sum(5) == 2\n    assert min_square_sum(9) == 1\n    assert min_square_sum(12) == 2\n    assert min_square_sum(15) == 1",
    "def min_squares(number):\n    dp = [float(\"inf\")] * (number + 1)\n    dp[0] = 0\n\n    for i in range(1, number + 1):\n        for j in range(1, i):\n            if j * j > i:\n                break\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n\n    return dp[number]",
    "def square_sum(n):\n    res = []\n    while n > 0:\n        if n % 4 == 3:\n            res.append(1)\n        elif n % 4 == 1:\n            res.append(2)\n        elif n % 4 == 2:\n            res.append(3)\n        n = n // 4\n    return res\n\n\nprint(square_sum(6))",
    "def min_squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    # we can always use 1 square of value n\n    dp[n] = 1\n\n    # for every number k\n    for k in range(1, n + 1):\n        # iterate over all possible values of square root of k\n        # and update dp[k]\n        for square in range(1, int(k ** 0.5) + 1):\n            dp[k] = min(dp[k], 1 + dp[k - square ** 2])\n\n    return dp[n]\n\n\ndef main():\n    print(min_squares(13))\n    print(min_squares(12))\n    print(min_squares(10))\n\n\nif __name__ == '__main__':\n    main()",
    "def min_square_sum(n):\n    squares = [i * i for i in range(1, int(n**0.5) + 1)]\n    squares.append(n)\n\n    squares.sort(reverse=True)\n    print(squares)\n\n    i = 0\n    while i < len(squares):\n        if squares[i] > n:\n            i += 1\n            continue\n        j = i\n        while j < len(squares) and squares[j] <= n:\n            if squares[i] + squares[j] > n:\n                break\n            if squares[i] + squares[j] == n:\n                return 2\n            j += 1\n        i += 1\n    return -1\n\n\nprint(min_square_sum(16))\nprint(min_square_sum(19))",
    "def min_squares(n):\n    \"\"\"\n    :param n: int - number to find the min squares\n    return: int - min number of squares\n    \"\"\"\n    squares = []\n    if n == 0:\n        return 0\n    while n > 0:\n        for i in range(1, n+1):\n            if i**2 == n:\n                squares.append(i**2)\n                n = 0\n                break\n            elif i**2 > n:\n                squares.append(n)\n                n = n - squares[-1]\n                break\n            elif i**2 < n:\n                continue\n\n    return len(squares)\n\nprint(min_squares(1))\nprint(min_squares(2))\nprint(min_squares(3))\nprint(min_squares(4))\nprint(min_squares(5))\nprint(min_squares(6))\nprint(min_squares(7))\nprint(min_squares(8))\nprint(min_squares(9))\nprint(min_squares(10))\nprint(min_squares(11))\nprint(min_squares(12))\nprint(min_squares(13))\nprint(min_squares(14))\nprint(min_squares(15))\nprint(min_squares(16))\nprint(min_squares(17))\nprint(min_squares(18))\nprint(min_squares(19))\nprint(min_squares(20))\nprint(min_squares(21))\nprint(min_squares(22))\nprint(min_squares(23))\nprint(min_squares(24))\nprint(min_squares(25))\nprint(min_squares(26))\nprint(min_squares(27))\nprint(min_squares(28))\nprint(min_squares(29))\nprint(min_squares(30))\nprint(min_squares(31))\nprint(min_squares(32))\nprint(min_squares(33))",
    "def min_squares(n):\n    dp = [n+1] * (n+1)\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j > i:\n                break\n            else:\n                if j == 1:\n                    dp[i] = min(dp[i], 1)\n                else:\n                    dp[i] = min(dp[i], dp[i-j] + 1)\n\n    return dp[n]\n\n\ndef min_squares_v2(n):\n    dp = [n+1] * (n+1)\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j > i:\n                break\n            else:\n                if j == 1:\n                    dp[i] = min(dp[i], 1)\n                else:\n                    dp[i] = min(dp[i], dp[i-j] + 1)\n\n    return dp[n]\n\n\nprint(min_squares(12))\nprint(min_squares_v2(12))",
    "def min_square_sum(number):\n    result = []\n    squares = [x * x for x in range(1, int(number ** 0.5) + 1)]\n    for square in squares:\n        remainder = number - square\n        if remainder in squares:\n            result.append((square, remainder))\n    return len(result)\n\n\ndef main():\n    number = 10\n    print(f\"Number of squares whose sum is {number}: {min_square_sum(number)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square_sum(number):\n    squares = [i * i for i in range(1, int(number ** 0.5) + 1)]\n\n    def get_min_squares(number, squares):\n        if number == 0:\n            return 0\n\n        if number < 0:\n            return -1\n\n        min_squares = number + 1\n\n        for square in squares:\n            sub_square = get_min_squares(number - square, squares)\n            if sub_square == -1:\n                continue\n\n            if sub_square < min_squares:\n                min_squares = sub_square\n\n        return min_squares if min_squares != number + 1 else -1\n\n    return get_min_squares(number, squares)\n\n\nif __name__ == \"__main__\":\n    print(min_square_sum(12))\n    print(min_square_sum(13))\n    print(min_square_sum(14))",
    "def square_sum(n):\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    i = 1\n    while i * i <= n:\n        i += 1\n    return i - 1\n\n\ndef square_sum_dp(n):\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n\n    for i in range(3, n+1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i-j*j] + 1)\n            j += 1\n\n    return dp[n]\n\n\ndef main():\n    print(square_sum_dp(12))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_square_sum(n):\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    squares.sort(reverse=True)\n    res = []\n\n    def helper(n, i):\n        if n == 0:\n            return\n        if n < 0:\n            return\n\n        if i >= len(squares):\n            return\n\n        helper(n - squares[i], i + 1)\n        res.append(squares[i])\n\n    helper(n, 0)\n    return len(res)\n\n\nprint(min_square_sum(5))\nprint(min_square_sum(10))\nprint(min_square_sum(15))\nprint(min_square_sum(17))",
    "from math import ceil, sqrt\n\n\ndef min_square_sum(n):\n    \"\"\"\n    >>> min_square_sum(7)\n    2\n    >>> min_square_sum(12)\n    3\n    >>> min_square_sum(17)\n    3\n    >>> min_square_sum(19)\n    3\n    >>> min_square_sum(13)\n    1\n    >>> min_square_sum(2)\n    1\n    >>> min_square_sum(3)\n    1\n    >>> min_square_sum(4)\n    1\n    >>> min_square_sum(5)\n    2\n    >>> min_square_sum(6)\n    2\n    >>> min_square_sum(1)\n    1\n    >>> min_square_sum(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n\n    root = ceil(sqrt(n))\n\n    while root * root != n:\n        root -= 1\n\n    return root\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def squareSum(n: int) -> int:\n    \"\"\"\n    >>> squareSum(2)\n    2\n    >>> squareSum(4)\n    2\n    >>> squareSum(6)\n    3\n    >>> squareSum(7)\n    3\n    >>> squareSum(12)\n    3\n    >>> squareSum(13)\n    4\n    >>> squareSum(15)\n    2\n    >>> squareSum(17)\n    3\n    >>> squareSum(25)\n    3\n    >>> squareSum(26)\n    4\n    >>> squareSum(27)\n    4\n    >>> squareSum(28)\n    5\n    >>> squareSum(30)\n    2\n    >>> squareSum(32)\n    2\n    \"\"\"\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    min_squares = len(squares) + 1\n\n    for i in range(len(squares)):\n        sum_squares = squares[i]\n        for j in range(i + 1, len(squares)):\n            sum_squares += squares[j]\n            if sum_squares == n:\n                min_squares = min(min_squares, j - i + 1)\n                break\n            if sum_squares > n:\n                break\n\n    return min_squares\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_square_sum(n: int) -> int:\n    \"\"\"\n    This function takes the sum of the squares and the number as a parameter\n    and returns the minimum number of squares whose sum is equal to the given number.\n    >>> min_square_sum(25)\n    5\n    >>> min_square_sum(27)\n    6\n    >>> min_square_sum(42)\n    4\n    >>> min_square_sum(91)\n    5\n    >>> min_square_sum(100)\n    1\n    >>> min_square_sum(1)\n    1\n    \"\"\"\n    squares = []\n    i = 1\n\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n\n    squares.sort()\n\n    if squares[0] == n:\n        return 1\n\n    i = 0\n    j = len(squares) - 1\n\n    while i < j:\n        if squares[i] + squares[j] == n:\n            return 2\n\n        elif squares[i] + squares[j] < n:\n            i += 1\n\n        else:\n            j -= 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def min_squares(n: int) -> int:\n    \"\"\"\n    n: int\n    return: int\n    \"\"\"\n    dp = [float(\"inf\")] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(min_squares(2147483647))",
    "def min_squares(num):\n    squares = []\n    i = 1\n    while i * i <= num:\n        squares.append(i * i)\n        i += 1\n\n    n = len(squares)\n    dp = [[0 for i in range(num + 1)] for j in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, num + 1):\n            if squares[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - squares[i - 1]], dp[i - 1][j])\n    return dp[n][num]\n\n\ndef main():\n    print(\"Minimum number of squares to make the sum : \" +\n          str(min_squares(8)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def min_squares(n: int) -> int:\n    \"\"\"\n    Find minimum squares whose sum is equal to a given number.\n    >>> min_squares(100)\n    10\n    >>> min_squares(101)\n    11\n    >>> min_squares(102)\n    11\n    >>> min_squares(103)\n    12\n    >>> min_squares(104)\n    12\n    >>> min_squares(105)\n    12\n    >>> min_squares(106)\n    13\n    >>> min_squares(107)\n    13\n    >>> min_squares(108)\n    13\n    >>> min_squares(109)\n    14\n    >>> min_squares(110)\n    14\n    >>> min_squares(111)\n    15\n    >>> min_squares(112)\n    15\n    >>> min_squares(113)\n    15\n    >>> min_squares(114)\n    15\n    >>> min_squares(115)\n    15\n    \"\"\"\n    # base case\n    if n < 0:\n        return -1\n\n    # Initialization\n    min_squares = 0\n    square_sum = 1\n\n    # Recursion\n    while square_sum <= n:\n        min_squares += 1\n        square_sum += min_squares\n\n    # Final answer\n    return min_squares\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def squares_sum(n):\n    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    return squares\n\n\ndef min_squares(n):\n    squares = squares_sum(n)\n    res = [float(\"inf\")] * (n + 1)\n    res[0] = 0\n    for i in squares:\n        for j in range(i, n + 1):\n            if res[j - i] + 1 < res[j]:\n                res[j] = res[j - i] + 1\n    return res[n]\n\n\nprint(min_squares(17))",
    "def squares_sum(n):\n    squares = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]\n    squares.append(n)\n    squares.sort(reverse=True)\n    print(squares)\n    dp = [squares[0]] + [float('inf')] * (n)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if squares[j] > i:\n                break\n            dp[i] = min(dp[i], dp[i - squares[j]] + 1)\n    return dp[-1]\n\n\ndef squares_sum_eff(n):\n    squares = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]\n    squares.append(n)\n    squares.sort(reverse=True)\n    print(squares)\n    dp = [squares[0]] + [float('inf')] * (n)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if squares[j] > i:\n                break\n            dp[i] = min(dp[i], dp[i - squares[j]] + 1)\n    return dp[-1]\n\n\ndef squares_sum_eff(n):\n    squares = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]\n    squares.append(n)\n    squares.sort(reverse=True)\n    print(squares)\n    dp = [squares[0]] + [float('inf')] * (n)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if squares[j] > i:\n                break\n            dp[i] = min(dp[i], dp[i - squares[j]] + 1)\n    return dp[-1]\n\n\ndef squares_sum_eff(n):\n    squares = [i ** 2 for i in range(1, int(n ** 0.5) +",
    "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef min_square_sum(n, i=1):\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n\n    return min(min_square_sum(n - i * i, i) + 1, min_square_sum(n, i + 1))\n\n\ndef min_square_sum_dp(n):\n    table = [0] * (n + 1)\n    table[0] = 0\n    for i in range(1, n + 1):\n        table[i] = 1 + min(table[i - j * j] for j in range(1, int(i ** 0.5) + 1))\n    return table[n]\n\n\nprint(min_square_sum(12))\nprint(min_square_sum_dp(12))",
    "def min_square_sum(n):\n    squares = [i * i for i in range(1, int(n ** 0.5) + 1)]\n    squares.sort()\n\n    min_square = float('inf')\n    for i in range(len(squares)):\n        temp = n\n        count = 0\n        while temp >= squares[i]:\n            temp -= squares[i]\n            count += 1\n        if count < min_square:\n            min_square = count\n    return min_square\n\n\nprint(min_square_sum(10))\nprint(min_square_sum(12))\nprint(min_square_sum(13))\nprint(min_square_sum(15))\nprint(min_square_sum(16))\nprint(min_square_sum(17))\nprint(min_square_sum(18))",
    "def min_square_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^1/2)\n    Space Complexity: O(n)\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return -1\n\n    min_squares = number\n    squares = [i ** 2 for i in range(1, int(number ** 0.5) + 1)]\n    for square in squares:\n        if number == square:\n            return 1\n        if number > square:\n            sub_square = number - square\n            min_squares = min(min_squares, 1 + min_square_sum(sub_square))\n    return min_squares\n\n\nif __name__ == \"__main__\":\n    assert min_square_sum(1) == 1\n    assert min_square_sum(2) == 1\n    assert min_square_sum(3) == 1\n    assert min_square_sum(4) == 1\n    assert min_square_sum(5) == 2\n    assert min_square_sum(6) == 2\n    assert min_square_sum(7) == 2\n    assert min_square_sum(8) == 2\n    assert min_square_sum(9) == 1\n    assert min_square_sum(10) == 2\n    assert min_square_sum(11) == 2\n    assert min_square_sum(12) == 3\n    assert min_square_sum(13) == 2\n    assert min_square_sum(14) == 3\n    assert min_square_sum(15) == 2\n    assert min_square_sum(16) == 2\n    assert min_square_sum(17) == 2\n    assert min_square_sum(18) == 3\n    assert min_square_sum(19) == 3\n    assert min_square_sum(20) == 2\n    assert min_square_sum(21) == 2\n    assert min_square_sum(22) ==",
    "def minSquares(n):\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    square = 1\n    while square * square < n:\n        i = 1\n        while (i+square) * (i+square) <= n:\n            dp[i+square] = min(dp[i+square], dp[i] + 1)\n            i += 1\n        square += 1\n    return dp[-1]\n\nprint(minSquares(17))",
    "def find_min_squares(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*sqrt(n))\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [float(\"inf\")] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if j * j > i:\n                break\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    assert find_min_squares(17) == 2",
    "def square_sum(number: int) -> int:\n    \"\"\"\n    >>> square_sum(1)\n    1\n    >>> square_sum(2)\n    2\n    >>> square_sum(3)\n    1\n    >>> square_sum(4)\n    1\n    >>> square_sum(5)\n    2\n    >>> square_sum(6)\n    2\n    >>> square_sum(7)\n    3\n    >>> square_sum(8)\n    2\n    >>> square_sum(9)\n    1\n    >>> square_sum(10)\n    2\n    >>> square_sum(11)\n    3\n    >>> square_sum(12)\n    3\n    >>> square_sum(13)\n    2\n    >>> square_sum(14)\n    3\n    >>> square_sum(15)\n    3\n    >>> square_sum(16)\n    2\n    >>> square_sum(17)\n    4\n    >>> square_sum(18)\n    3\n    >>> square_sum(19)\n    1\n    >>> square_sum(20)\n    2\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"The number cannot be negative\")\n    if number == 1:\n        return 1\n\n    square_sum = [0]\n    for i in range(1, int(number ** 0.5) + 1):\n        square_sum.append(i ** 2)\n\n    dp = [0] * (number + 1)\n    for i in range(1, len(square_sum)):\n        for j in range(i, len(dp)):\n            if square_sum[i] > j:\n                dp[j] = max(dp[j], dp[j - square_sum[i]] + 1)\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def square_sum(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError(\"Square's sum cannot be negative\")\n\n    num_squares = 1\n    sum_squares = 1\n    while sum_squares < n:\n        num_squares += 1\n        sum_squares += num_squares\n\n    return num_squares\n\n\ndef test_square_sum():\n    assert square_sum(0) == 0\n    assert square_sum(1) == 1\n    assert square_sum(2) == 2\n    assert square_sum(3) == 1\n    assert square_sum(4) == 2\n    assert square_sum(5) == 2\n    assert square_sum(6) == 3\n    assert square_sum(7) == 2\n    assert square_sum(8) == 2\n    assert square_sum(9) == 1\n    assert square_sum(10) == 2\n    assert square_sum(11) == 2\n    assert square_sum(12) == 3\n    assert square_sum(13) == 2\n    assert square_sum(14) == 3\n    assert square_sum(15) == 2\n    assert square_sum(16) == 2\n    assert square_sum(17) == 3\n    assert square_sum(18) == 3\n    assert square_sum(19) == 2\n\n\nif __name__ == \"__main__\":\n    test_square_sum()",
    "def min_square_sum(number: int) -> int:\n    \"\"\"\n    >>> min_square_sum(10)\n    3\n    >>> min_square_sum(12)\n    2\n    >>> min_square_sum(13)\n    1\n    >>> min_square_sum(14)\n    1\n    >>> min_square_sum(15)\n    1\n    >>> min_square_sum(16)\n    1\n    >>> min_square_sum(20)\n    2\n    >>> min_square_sum(30)\n    1\n    >>> min_square_sum(31)\n    1\n    >>> min_square_sum(32)\n    1\n    >>> min_square_sum(33)\n    1\n    >>> min_square_sum(34)\n    1\n    >>> min_square_sum(35)\n    1\n    >>> min_square_sum(36)\n    1\n    >>> min_square_sum(37)\n    1\n    >>> min_square_sum(38)\n    1\n    >>> min_square_sum(39)\n    1\n    >>> min_square_sum(40)\n    1\n    >>> min_square_sum(41)\n    1\n    >>> min_square_sum(42)\n    1\n    >>> min_square_sum(43)\n    1\n    >>> min_square_sum(44)\n    1\n    >>> min_square_sum(45)\n    1\n    >>> min_square_sum(46)\n    1\n    >>> min_square_sum(47)\n    1\n    >>> min_square_sum(48)\n    1\n    >>> min_square_sum(49)\n    1\n    >>> min_square_sum(50)\n    1\n    >>> min_square_sum(51)\n    1\n    >>> min_square_sum(52)\n    1\n    >>> min_square_sum(53)\n    1\n    >>> min_square_sum(54)\n    1\n    >>> min_square_sum(55)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}