{
  "problem": {
    "task_id": "MBPP/15",
    "prompt": "Write a function to split a string at lowercase letters.",
    "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
    "test_list": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "challenge_test_list": [],
    "problem_id": 4
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def split_at_lowercase(string):\n    \"\"\"\n    Splits a string at lowercase letters.\n    :param string: string to be split.\n    :return: list of strings.\n    \"\"\"\n    if not string:\n        return []\n    result = []\n    for i, char in enumerate(string):\n        if char.islower():\n            result.append(string[0:i])\n            string = string[i:]\n    result.append(string)\n    return result\n\n\ndef main():\n    print(split_at_lowercase(\"aBc\"))\n    print(split_at_lowercase(\"abc\"))\n    print(split_at_lowercase(\"abcDef\"))\n    print(split_at_lowercase(\"abcDefGhi\"))\n    print(split_at_lowercase(\"abcDefGhiJkl\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable\nfrom expects import *\n\nfrom lib.split_at_lowercase import split_at_lowercase\n\nwith description('split_at_lowercase'):\n    with it('splits at the first lowercase letter'):\n        expect(split_at_lowercase('HelloWorld')).to(equal(['Hello', 'World']))\n\n    with it('splits at the first lowercase letter in a string with no lowercase letters'):\n        expect(split_at_lowercase('Hello')).to(equal(['Hello']))\n\n    with it('splits at the first lowercase letter in a string with multiple lowercase letters'):\n        expect(split_at_lowercase('HelloThereWorld')).to(equal(['Hello', 'There', 'World']))\n\n    with it('splits at the first lowercase letter in a string with a leading lowercase letter'):\n        expect(split_at_lowercase('helloWorld')).to(equal(['', 'hello', 'World']))\n\n    with it('splits at the first lowercase letter in a string with a trailing lowercase letter'):\n        expect(split_at_lowercase('Hellohello')).to(equal(['Hello', 'hello']))\n\n    with it('splits at the first lowercase letter in a string with multiple lowercase letters'):\n        expect(split_at_lowercase('HelloTherehelloWorld')).to(equal(['Hello', 'There', 'hello', 'World']))\n\n    with it('splits at the first lowercase letter in a string with multiple lowercase letters'):\n        expect(split_at_lowercase('HelloTherehelloWorld')).to(equal(['Hello', 'There', 'hello', 'World']))",
    "def split_at_lowercase(string):\n\n    # List of lowercase letters\n    lowercase_list = [x for x in string if x.islower()]\n\n    # List of uppercase letters\n    uppercase_list = [x for x in string if x.isupper()]\n\n    # List of letters\n    letter_list = lowercase_list + uppercase_list\n\n    # List of words\n    word_list = []\n\n    # Index of words\n    word_index_list = []\n\n    # Check if the string is empty\n    if len(string) == 0:\n        return []\n\n    # Check if the string is a single letter\n    if len(string) == 1:\n        return [string]\n\n    # Loop through the letters\n    for i in range(len(letter_list)):\n\n        # Check if the letter is the first in the string\n        if i == 0:\n\n            # Add the letter to the word list\n            word_list.append(letter_list[i])\n\n            # Add the index to the index list\n            word_index_list.append(i)\n\n            # Check if the letter is the last in the string\n            if i == len(letter_list) - 1:\n\n                # Add the index to the index list\n                word_index_list.append(i+1)\n\n        # Check if the letter is not the first in the string\n        else:\n\n            # Check if the letter is the last in the string\n            if i == len(letter_list) - 1:\n\n                # Add the index to the index list\n                word_index_list.append(i+1)\n\n            # Check if the letter is not the last in the string\n            else:\n\n                # Check if the next letter is uppercase\n                if letter_list[i+1].isupper():\n\n                    # Add the index to the index list\n                    word_index_list.append(i+1)\n\n    # Return the list of words\n    return [string[i:j] for i, j in zip(word_index_list, word_index_list[1:]+[None])]",
    "def split_at_lowercase(input):\n    # Your code goes here\n    return input\n\n\nif __name__ == '__main__':\n    input = 'Hello World'\n    print(split_at_lowercase(input))",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase('helloWorld')\n    ['hello', 'World']\n    >>> split_at_lowercase('hello')\n    ['hello']\n    \"\"\"\n    split_list = []\n    for i, char in enumerate(string):\n        if char.islower() and string[i - 1].isupper():\n            split_list.append(string[:i])\n            string = string[i:]\n    split_list.append(string)\n    return split_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split(s):\n    split_str = s[0]\n    for i in range(1, len(s)):\n        if s[i].islower() and s[i - 1].isupper():\n            split_str += \" \"\n            split_str += s[i]\n        else:\n            split_str += s[i]\n    return split_str\n\n\nif __name__ == '__main__':\n    s = \"HelloWorld\"\n    print(split(s))",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable, ungrouped-imports\nfrom expects import *\n\nfrom lib.split_at_lowercase import split_at_lowercase\n\nwith description('split_at_lowercase'):\n    with it('Splits at lowercase letters'):\n        expect(split_at_lowercase('HelloWorld')).to(equal(['Hello', 'World']))",
    "# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef split_on_lowercase(str):\n    split_str = str.split('')\n    res = []\n    i = 0\n    while i < len(split_str):\n        if split_str[i].islower():\n            res.append('')\n        res.append(split_str[i])\n        i += 1\n\n    return res\n\n\ndef main():\n    str1 = 'aAbBcCdDeE'\n    print(split_on_lowercase(str1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string: str) -> list[str]:\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        string (str): The string to split.\n\n    Returns:\n        list[str]: The split string.\n\n    Examples:\n        >>> split_at_lowercase('Hello, world!')\n        ['Hello', ', ', 'world', '!']\n        >>> split_at_lowercase('Hello, World!')\n        ['Hello', ', ', 'World', '!']\n        >>> split_at_lowercase('Hello,worlD!')\n        ['Hello', ',', 'worlD', '!']\n    \"\"\"\n    split_string = []\n    word = \"\"\n\n    for char in string:\n        if char.islower():\n            split_string.append(word)\n            word = \"\"\n            split_string.append(char)\n        else:\n            word += char\n\n    split_string.append(word)\n\n    return split_string\n\n\ndef main():\n    string = \"Hello, world!\"\n    print(f\"Split '{string}' at lowercase letters: {split_at_lowercase(string)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        string (str): String to split.\n\n    Examples:\n        >>> assert split_at_lowercase('HelloWorld') == ['Hello', 'World']\n    \"\"\"\n    return string[0] + \"\".join(\n        string[i] for i in range(1, len(string)) if string[i - 1].islower() and string[i].isupper()\n    ).split()\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"HelloWorld\"))",
    "#!/usr/bin/env python\n\nimport re\n\ndef split_lowercase(text):\n    return re.split(r\"(?=[a-z])\", text)",
    "def split_at_lowercase(string):\n\n    # check if string is empty\n    if string == \"\":\n        return [\"\"]\n\n    # split string\n    return [char if char.isupper() else \" \" + char for char in string]\n\n\ndef main():\n    print(split_at_lowercase(\"a b c d e f\"))\n    print(split_at_lowercase(\"ab c\"))\n    print(split_at_lowercase(\"ab cD\"))\n    print(split_at_lowercase(\"ab cD\"))\n    print(split_at_lowercase(\"a b cD e f\"))\n    print(split_at_lowercase(\"ab cD e f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n    print(split_at_lowercase(\"a b cDe f\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string):\n    return [string[i:i+1] for i in range(len(string)) if string[i].isupper()]\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase('aBcDeF'))",
    "def split_on_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    result = []\n    for idx, char in enumerate(string):\n        if char.islower() and idx != 0:\n            result.append(string[:idx])\n            string = string[idx:]\n    result.append(string)\n    return result\n\n\ndef split_on_lowercase_alt(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return string.split('[a-z]')",
    "def split_at_lowercase(text: str) -> list:\n    \"\"\"Split a string at lowercase letters.\n\n    Args:\n        text (str): the string to split\n\n    Examples:\n        >>> assert split_at_lowercase('aBcDeF') == ['a', 'Bc', 'De', 'F']\n    \"\"\"\n    return [\n        text[:i + 1]\n        for i in range(len(text))\n        if text[i].islower()\n    ]\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase('aBcDeF'))",
    "def split_at_lowercase(string):\n    return string.split('a')\n\n\ndef split_at_lowercase_two(string):\n    res = []\n    for i in range(len(string)):\n        if string[i].islower():\n            res.append(string[i:])\n    return res\n\n\ndef split_at_lowercase_three(string):\n    return [string[i:].lstrip() for i, c in enumerate(string) if c.islower()]\n\n\ndef main():\n    string = \"I like you. You're a good friend.\"\n    print(split_at_lowercase(string))\n    print(split_at_lowercase_two(string))\n    print(split_at_lowercase_three(string))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return \"\".join([string[i:j] for i, j in zip([0] + [k for k in range(1, len(string)) if string[k].islower()],\n                                                 [k for k in range(1, len(string)) if string[k].islower()] + [len(string)])])",
    "def split_on_lowercase(s: str) -> [str]:\n    \"\"\"Split a string on lowercase letters.\n\n    Args:\n        s (str): string to split\n\n    Returns:\n        list: list of split strings\n\n    Examples:\n        >>> assert split_on_lowercase('helloWorld') == ['hello', 'World']\n        >>> assert split_on_lowercase('helloWoRld') == ['hello', 'Wo', 'Rld']\n        >>> assert split_on_lowercase('helloWoRldX') == ['hello', 'Wo', 'Rld', 'X']\n        >>> assert split_on_lowercase('HelloWorld') == ['Hello', 'World']\n        >>> assert split_on_lowercase('HelloWorldX') == ['Hello', 'World', 'X']\n    \"\"\"\n    return [\n        sub\n        for sub in s.split(\"\")\n        if sub.isupper() or sub.islower()\n    ]\n\n\ndef split_on_lowercase_regex(s: str) -> [str]:\n    \"\"\"Split a string on lowercase letters.\n\n    Args:\n        s (str): string to split\n\n    Returns:\n        list: list of split strings\n\n    Examples:\n        >>> assert split_on_lowercase_regex('helloWorld') == ['hello', 'World']\n        >>> assert split_on_lowercase_regex('helloWoRld') == ['hello', 'Wo', 'Rld']\n        >>> assert split_on_lowercase_regex('helloWoRldX') == ['hello', 'Wo', 'Rld', 'X']\n        >>> assert split_on_lowercase_regex('HelloWorld') == ['Hello', 'World']\n        >>> assert split_on_lowercase_regex('HelloWorldX') == ['Hello', 'World', 'X']\n    \"\"\"\n    import re\n\n    return re.split(r\"(\\W)\", s)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_on_lowercase(text: str) -> str:\n    \"\"\"Split a string on lowercase letters.\n\n    Args:\n        text (str): a string\n\n    Returns:\n        str: a string\n    \"\"\"\n    return \" \".join(\n        [text[i] + text[i + 1] for i in range(len(text) - 1) if text[i + 1].islower()]\n    )\n\n\nif __name__ == \"__main__\":\n    print(split_on_lowercase(\"HelloWorld\"))\n    print(split_on_lowercase(\"HELLOWORLD\"))",
    "def split_at_lowercase(string):\n    # Your code here\n    return \"\".join([string[i:j + 1] for i, j in zip([0] + [j + 1 for j, k in enumerate(string) if k.islower()], [j for j, k in enumerate(string) if k.islower()] + [len(string)])])\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"Hello World\"))",
    "def split_at_lowercase(text):\n    \"\"\"Splits a string at lowercase letters.\"\"\"\n    return [char for char in text if char.isupper()]",
    "def split_at_lowercase(s):\n    \"\"\"\n    >>> split_at_lowercase('aBCdEf')\n    ['a', 'BC', 'dEf']\n    >>> split_at_lowercase('aBcDef')\n    ['a', 'Bc', 'Def']\n    \"\"\"\n    result = []\n    word = ''\n    for c in s:\n        if c.islower():\n            result.append(word)\n            word = ''\n        else:\n            word += c\n    if word:\n        result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return string[0:].split(\"\".join(filter(str.islower, string)))",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase(\"HelloWorld\")\n    ['Hello', 'World']\n    >>> split_at_lowercase(\"Hello\")\n    ['Hello']\n    \"\"\"\n    result = []\n    word = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            word += string[i]\n        else:\n            result.append(word)\n            word = \"\"\n            result.append(string[i])\n\n    if word != \"\":\n        result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_at_lowercase(s):\n    \"\"\"\n    >>> split_at_lowercase('helloWorld')\n    ['hello', 'World']\n    >>> split_at_lowercase('helloWorldBye')\n    ['hello', 'World', 'Bye']\n    \"\"\"\n    result = []\n    temp = ''\n    for c in s:\n        if c.islower():\n            result.append(temp)\n            temp = ''\n        else:\n            temp += c\n    result.append(temp)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def split_at_lowercase(text: str) -> list:\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        text (str): the string to split\n\n    Examples:\n        >>> assert split_at_lowercase(\"helloWorld\") == [\"hello\", \"World\"]\n        >>> assert split_at_lowercase(\"helloWorldBye\") == [\"hello\", \"World\", \"Bye\"]\n        >>> assert split_at_lowercase(\"HELLO\") == [\"HELLO\"]\n        >>> assert split_at_lowercase(\"helloWorldBye helloWorldBye\") == [\"hello\", \"World\", \"Bye\", \" \", \"hello\", \"World\", \"Bye\"]\n    \"\"\"\n    lowercase_indexes = [\n        i for i, letter in enumerate(text) if letter.islower()\n    ]\n    return [\n        text[start:end]\n        for start, end in zip(\n            [0] + lowercase_indexes, lowercase_indexes + [len(text)]\n        )\n    ]\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"helloWorld\"))\n    print(split_at_lowercase(\"helloWorldBye\"))\n    print(split_at_lowercase(\"HELLO\"))\n    print(split_at_lowercase(\"helloWorldBye helloWorldBye\"))",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        string (str): a string to be split\n\n    Examples:\n        >>> assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n        >>> assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n        >>> assert split_at_lowercase(\"Hello,  World!\") == [\"Hello, \", \"  \", \"World!\"]\n        >>> assert split_at_lowercase(\"Hello,  World!\") == [\"Hello, \", \"  \", \"World!\"]\n    \"\"\"\n    result = []\n    previous = \"\"\n    for char in string:\n        if char.islower():\n            result.append(previous)\n            previous = \"\"\n        else:\n            previous += char\n\n    if previous:\n        result.append(previous)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"Hello, world!\"))\n    print(split_at_lowercase(\"Hello,  World!\"))",
    "def split_string(string):\n    return [string[i:j+1] for i, j in zip([0] + [k for k in range(len(string)) if not string[k].islower()], range(len(string)))]\n\n\nif __name__ == '__main__':\n    print(split_string(\"Awesome\"))\n    print(split_string(\"Ab12c\"))\n    print(split_string(\"A34bc\"))\n    print(split_string(\"A34c\"))\n    print(split_string(\"Ab3c\"))\n    print(split_string(\"Ab345c\"))\n    print(split_string(\"Abc\"))\n    print(split_string(\"ABC\"))\n    print(split_string(\"\"))",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase(\"Hello, world!\")\n    ['Hello', ' ', 'world', '!']\n    >>> split_at_lowercase(\"Hello, world!\")\n    ['Hello', ' ', 'world', '!']\n    \"\"\"\n    result = []\n    i = 0\n    for letter in string:\n        if letter.islower():\n            result.append(string[i:i+1])\n            i += 1\n        else:\n            i += 1\n    return result + [string[i:]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def split_at_lowercase(str):\n    result = []\n    for i in range(len(str)):\n        if str[i].islower():\n            result.append(str[i:])\n            break\n    for i in range(len(str)):\n        if str[i].isupper():\n            result.append(str[:i])\n            break\n    return result\n\n\ndef test_split_at_lowercase():\n    \"\"\"Run simple test cases.\"\"\"\n    assert split_at_lowercase('abCd') == ['ab', 'Cd']\n    assert split_at_lowercase('abcd') == ['abcd']",
    "def split_at_lowercase(string):\n    # your code here\n    return string.split('a')\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(split_at_lowercase(\"deFghI\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert split_at_lowercase(\"deFghI\") == [\"de\", \"Fgh\", \"I\"]\n    assert split_at_lowercase(\"aAbBcC\") == [\"a\", \"AbBc\", \"C\"]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "def split_at_lowercase(str):\n    return \"\".join(list(filter(lambda x: x.isupper(), str))).join(list(map(lambda x: \" \" + x, list(filter(lambda x: x.islower(), str))))).strip()\n\n\nprint(split_at_lowercase(\"helloWorld\"))\nprint(split_at_lowercase(\"HELLOWorld\"))\nprint(split_at_lowercase(\"HelloWorld\"))\nprint(split_at_lowercase(\"HelloWorld123\"))\nprint(split_at_lowercase(\"Hello123World\"))\nprint(split_at_lowercase(\"123HelloWorld\"))\nprint(split_at_lowercase(\"HelloWorld1234567890\"))\nprint(split_at_lowercase(\"HelloWorld12345678901234567890\"))",
    "def split_at_lowercase(string):\n    return string[0:].replace(\"\", \" \")\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"aBc\") == \"Ab c\"\n    assert split_at_lowercase(\"aBcD\") == \"Ab c D\"\n    assert split_at_lowercase(\"aBcDe\") == \"Ab c De\"\n    assert split_at_lowercase(\"aBcDef\") == \"Ab c Def\"\n    assert split_at_lowercase(\"aBcDefG\") == \"Ab c Def G\"\n    assert split_at_lowercase(\"aBcDefGh\") == \"Ab c Def Gh\"",
    "def split_at_lowercase(s):\n    # Your code here\n    return s.split(' ')\n\n\nif __name__ == '__main__':\n    with open('./data.txt', 'r') as file:\n        for line in file:\n            print(split_at_lowercase(line))",
    "def split_at_lowercase(string):\n    return [string[0]] + [\n        c\n        for c, n in zip(string[1:], string)\n        if n.isupper() or c.isupper()\n    ]\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"abcdEFG\") == [\"a\", \"bcd\", \"EFG\"]\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"abcdEFG\"))",
    "def split_at_lowercase(string):\n    return re.findall('[a-z][A-Z]*', string)\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase('helloWorld'))",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Split a string at lowercase letters.\"\"\"\n\n    return [x for x in string if x.isupper() or x.isdigit() or not x.isalpha()]\n\n\ndef main():\n    \"\"\"Print the result of the split_at_lowercase function.\"\"\"\n\n    print(split_at_lowercase(\"helloWorld\"))  # ['h', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Split at lowercase letters.\n\n    Args:\n        string (str): string to split.\n\n    Examples:\n        >>> assert split_at_lowercase('helloWorld') == ['hello', 'World']\n        >>> assert split_at_lowercase('helloWorldBye') == ['hello', 'World', 'Bye']\n        >>> assert split_at_lowercase('helloWorldByeFine') == ['hello', 'World', 'Bye', 'Fine']\n        >>> assert split_at_lowercase('HelloWorld') == ['Hello', 'World']\n        >>> assert split_at_lowercase('HelloWorldBye') == ['Hello', 'World', 'Bye']\n        >>> assert split_at_lowercase('HelloWorldByeFine') == ['Hello', 'World', 'Bye', 'Fine']\n    \"\"\"\n    result: list[str] = []\n    buffer: list[str] = []\n\n    for char in string:\n        if char.isupper():\n            buffer.append(char)\n        else:\n            result.append(\"\".join(buffer))\n            buffer = [char]\n\n    if buffer:\n        result.append(\"\".join(buffer))\n\n    return result\n\n\ndef main():\n    print(split_at_lowercase(\"helloWorld\"))\n    print(split_at_lowercase(\"helloWorldBye\"))\n    print(split_at_lowercase(\"helloWorldByeFine\"))\n    print(split_at_lowercase(\"HelloWorld\"))\n    print(split_at_lowercase(\"HelloWorldBye\"))\n    print(split_at_lowercase(\"HelloWorldByeFine\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable\nfrom expects import *\n\nfrom lib.split_on_lowercase import split_on_lowercase\n\nwith description('split_on_lowercase'):\n    with it('returns an empty array for an empty string'):\n        expect(split_on_lowercase('')).to(equal([]))\n\n    with it('returns an array with one string for a string with no lowercase letters'):\n        expect(split_on_lowercase('AAA')).to(equal(['AAA']))\n\n    with it('returns an array with two strings for a string with one lowercase letter'):\n        expect(split_on_lowercase('AAaA')).to(equal(['AA', 'aA']))\n\n    with it('returns an array with three strings for a string with two lowercase letters'):\n        expect(split_on_lowercase('AAaAbB')).to(equal(['AA', 'aA', 'BB']))",
    "def split_lowercase(string):\n    result = []\n    buffer = \"\"\n\n    for char in string:\n        if char.islower():\n            result.append(buffer)\n            buffer = char\n        else:\n            buffer += char\n\n    result.append(buffer)\n    return result\n\n\nprint(split_lowercase(\"HelloWorld\"))\nprint(split_lowercase(\"HelloWorld2021\"))\nprint(split_lowercase(\"HelloWorld2021!!\"))\nprint(split_lowercase(\"HelloWorld2021!!!\"))",
    "def split(string):\n    return [x + y[0].upper() + y[1:] for x, y in zip(string, string[1:])]\n\n\nif __name__ == \"__main__\":\n    print(split(\"helloWorld\"))\n    print(split(\"helloWorldHi\"))\n    print(split(\"helloWorldHiBye\"))",
    "def split_at_lowercase(string):\n    return [string[i:j+1] for i, j in zip(range(0, len(string)), range(1, len(string)))]\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"aAbB\") == ['a', 'Ab', 'B']\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"aAbB\"))",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n\n    return [i for i in string if i.isupper()]\n\n\ndef main():\n    assert split_at_lowercase(\"abCdE\") == [\"A\", \"BD\", \"E\"]\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split(string):\n    return [string[i:j+1] for i, j in zip([0] + [m.end()-1 for m in re.finditer(r'[a-z]', string)], re.finditer(r'[a-z]', string))]",
    "def split_at_lowercase(string: str) -> list[str]:\n    \"\"\"Split at lowercase letters.\n\n    Args:\n        string (str): string to split\n\n    Returns:\n        list[str]: splitted string\n\n    Examples:\n        >>> assert split_at_lowercase('HelloWorld') == ['Hello', 'World']\n        >>> assert split_at_lowercase('HelloWorldBye') == ['Hello', 'World', 'Bye']\n        >>> assert split_at_lowercase('HelloWorldByeFine') == ['Hello', 'World', 'Bye', 'Fine']\n    \"\"\"\n    return [\n        string[i : i + 1]\n        for i in range(len(string))\n        if string[i - 1 : i].islower() and string[i].isupper()\n    ]\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"HelloWorld\"))\n    print(split_at_lowercase(\"HelloWorldBye\"))\n    print(split_at_lowercase(\"HelloWorldByeFine\"))",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n\n    if not string:\n        return []\n\n    words = []\n    word = \"\"\n    for letter in string:\n        if letter.islower():\n            words.append(word)\n            word = \"\"\n        else:\n            word += letter\n\n    words.append(word)\n\n    return words\n\n\ndef main():\n    \"\"\"Run sample split_at_lowercase functions. Do not import.\"\"\"\n    assert split_at_lowercase(\"\") == []\n    assert split_at_lowercase(\"This is a TEST\") == [\"This\", \" \", \"is\", \" \", \" \", \"TEST\"]\n    assert split_at_lowercase(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \" \", \"quick\", \" \", \"brown\", \" \", \"fox\", \" \", \"jumps\", \" \", \"over\", \" \", \"the\", \" \", \"lazy\", \" \", \"dog\"]\n    assert split_at_lowercase(\"apple\") == [\"apple\"]\n    assert split_at_lowercase(\"apple banana orange grapefruit\") == [\"apple\", \" \", \"banana\", \" \", \"orange\", \" \", \"grapefruit\"]\n    assert split_at_lowercase(\"AaBbCc\") == [\"Aa\", \"Bb\", \"Cc\"]\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(input_str):\n    # Write your code here.\n    result = []\n    for i in range(len(input_str)):\n        if input_str[i].islower():\n            result.append(input_str[i:])\n            break\n    for i in range(len(input_str) - 1, -1, -1):\n        if input_str[i].islower():\n            result.insert(0, input_str[:i + 1])\n            break\n    return result\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"abCdE\") == [\"abC\", \"dE\"]\n    assert split_at_lowercase(\"aBcde\") == [\"a\", \"Bcde\"]\n    assert split_at_lowercase(\"ABcde\") == [\"AB\", \"cde\"]",
    "def split_at_lowercase(s):\n    return s.split('')[0]\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase('helloWorld'))",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        string (str): The string to split.\n\n    Returns:\n        list: The split string.\n    \"\"\"\n    result = []\n    current = []\n    for letter in string:\n        if letter.islower():\n            result.append(\"\".join(current))\n            current = []\n        else:\n            current.append(letter)\n    result.append(\"\".join(current))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"a b c d E f g h i j k L M N O p q r s\"))",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase(\"aabbbc\")\n    ['aa', 'bbb', 'c']\n    \"\"\"\n    result = []\n    current_word = \"\"\n    for letter in string:\n        if letter.islower():\n            result.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += letter\n    result.append(current_word)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_at_lowercase(string):\n    \"\"\"Splits a string at lowercase letters.\n\n    Args:\n        string (str): The string to split.\n\n    Returns:\n        list: The string split at lowercase letters.\n    \"\"\"\n    split_string = []\n    for i, char in enumerate(string):\n        if char.islower() and i != len(string) - 1:\n            split_string.append(string[:i + 1])\n            string = string[i + 1:]\n    if string:\n        split_string.append(string)\n    return split_string\n\n\ndef main():\n    print(split_at_lowercase('Hello world'))\n    print(split_at_lowercase('HelloWorlD'))\n    print(split_at_lowercase('HelloWorld'))\n    print(split_at_lowercase('HelloWorld2'))\n    print(split_at_lowercase('HelloWorld200'))\n    print(split_at_lowercase('HelloWorld2000'))\n    print(split_at_lowercase('HelloWorld20000'))\n    print(split_at_lowercase('HelloWorld200000'))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Split a string at lowercase letters.\n\n    Args:\n        string (str): input string\n\n    Returns:\n        list: list of splitted string\n    \"\"\"\n    split_string = []\n    for i, char in enumerate(string):\n        if char.islower():\n            split_string.append(string[:i+1])\n            string = string[i+1:]\n    if string:\n        split_string.append(string)\n    return split_string\n\n\nif __name__ == \"__main__\":\n    assert split_at_lowercase(\"helloFromEdureka\") == ['hello', 'From', 'Edureka']\n    assert split_at_lowercase(\"edurekaOnlineClasses\") == ['edureka', 'Online', 'Classes']\n    assert split_at_lowercase(\"codeWars\") == ['code', 'Wars']\n    assert split_at_lowercase(\"codewars\") == ['codewars']",
    "# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase(string: str) -> list:\n    new_string = []\n    for i in range(len(string)):\n        if string[i].islower():\n            new_string.append(string[:i])\n            string = string[i:]\n    new_string.append(string)\n    return new_string\n\n\nprint(split_at_lowercase(\"helloWorld\"))\nprint(split_at_lowercase(\"helloWorldBye\"))\nprint(split_at_lowercase(\"helloWorldByeFish\"))",
    "def split_at_lowercase(string):\n    \"\"\"\n    Split string at lowercase letters.\n\n    :param string: string to split\n    :return: string splitted at lowercase letters\n    \"\"\"\n    return re.sub(r\"(?=[a-z])\", \" \", string)",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable\nfrom expects import *\n\nfrom lib.split_on_lowercase import split_on_lowercase\n\nwith description('split_on_lowercase'):\n    with it('splits on lowercase letters'):\n        expect(split_on_lowercase('Hello World')).to(equal(['Hello ', 'World']))\n\n    with it('splits on lowercase letters even if there are no lowercase letters'):\n        expect(split_on_lowercase('Hello')).to(equal(['Hello']))\n\n    with it('returns an empty list when the string is empty'):\n        expect(split_on_lowercase('')).to(equal([]))",
    "def split_at_lowercase(string):\n    # your code here\n    return string.split(\" \")\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"a b c\"))",
    "def split_on_lowercase(string):\n    \"\"\"\n    >>> split_on_lowercase('AAAABBBBcccCC')\n    ['AAAABBBB', 'ccc', 'CC']\n    >>> split_on_lowercase('abcdef')\n    ['a', 'b', 'c', 'd', 'e', 'f']\n    \"\"\"\n    split_string = []\n    word = \"\"\n    for char in string:\n        if char.islower():\n            split_string.append(word)\n            word = \"\"\n        else:\n            word += char\n    split_string.append(word)\n    return split_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase(\"abcdEF\")\n    ['abcd', 'EF']\n    >>> split_at_lowercase(\"abcdEFG\")\n    ['abcd', 'EFG']\n    \"\"\"\n    if len(string) == 0:\n        return []\n\n    if string[0].islower():\n        return [string[0]] + split_at_lowercase(string[1:])\n\n    return string[0] + split_at_lowercase(string[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_at_lowercase(string):\n    # Your code here\n    return \"\".join(string[i] if string[i].isupper() else \" \" + string[i] for i in range(len(string)))\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"abCdEfG\"))",
    "def split_at_lowercase(str):\n    return re.split(r\"(?=[a-z])\", str)",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return string.split(' ')",
    "def split_at_lowercase(string):\n\n    if not string:\n        return string\n\n    if len(string) == 1:\n        return [string]\n\n    result = []\n    curr = \"\"\n    for i in range(len(string)):\n        if i == 0:\n            curr += string[i]\n        else:\n            if string[i].islower() and string[i - 1].isupper():\n                result.append(curr)\n                curr = string[i]\n            else:\n                curr += string[i]\n\n    result.append(curr)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert split_at_lowercase(\"\") == \"\"\n    assert split_at_lowercase(\"a\") == \"a\"\n    assert split_at_lowercase(\"ab\") == \"ab\"\n    assert split_at_lowercase(\"abc\") == \"abc\"\n    assert split_at_lowercase(\"abC\") == \"abC\"\n    assert split_at_lowercase(\"abCD\") == \"abCD\"\n    assert split_at_lowercase(\"abCd\") == \"abCd\"\n    assert split_at_lowercase(\"abCdE\") == \"abCdE\"\n    assert split_at_lowercase(\"abCDe\") == \"abCDe\"\n    assert split_at_lowercase(\"abCDe\") == \"abCDe\"\n    assert split_at_lowercase(\"aBCD\") == \"aBCD\"\n    assert split_at_lowercase(\"abCD\") == \"abCD\"\n    assert split_at_lowercase(\"abcd\") == \"abcd\"\n    assert split_at_lowercase(\"abcde\") == \"abcde\"\n    assert split_at_lowercase(\"abCDe\") == \"abCDe\"\n    assert split_at_lowercase(\"abCDe\") == \"abCDe\"\n    assert split_at_lowercase(\"abcDe\") == \"abcDe\"\n    assert split_at_lowercase(\"abcDe\") == \"abcDe\"\n    assert split_at_lowercase(\"abcDe\") == \"abcDe\"\n    assert split_at",
    "import re\n\n\ndef split_at_lowercase(string):\n    return re.split(r\"(?=[a-z])\", string)\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase(\"Hello, world!\") == [\"Hello, \", \"world!\"]\n    assert split_at_lowercase",
    "def split_at_lowercase(input_str):\n    \"\"\"\n    >>> split_at_lowercase(\"abCdEf\")\n    ['ab', 'CdEf']\n    >>> split_at_lowercase(\"ab12345\")\n    ['ab', '12345']\n    \"\"\"\n    return input_str.split(\"(?<=[a-z])\")\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def split(string: str) -> list:\n    \"\"\"Split a string at lowercase letters.\n\n    Args:\n        string (str): input string.\n\n    Returns:\n        list: list of strings.\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Argument must be a string\")\n\n    return [\n        string[i: j + 1]\n        for i, j in zip(\n            [0] + [j for j, c in enumerate(string) if c.islower()],\n            [j for j, c in enumerate(string) if c.islower()] + [-1]\n        )\n    ]\n\n\ndef main():\n    string = \"helloWorld\"\n    print(f'{string} -> {split(string)}')  # helloWorld -> ['hello', 'World']\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string):\n    return [string[:i] for i, char in enumerate(string) if char.isupper()]\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"helloWorld\"))",
    "def split_at_lowercase(string: str) -> list[str]:\n    \"\"\"Split at lowercase letters.\n\n    Args:\n        string (str): input string.\n\n    Returns:\n        list[str]: list of strings.\n\n    Examples:\n        >>> assert split_at_lowercase(\"aBcDeF\") == [\"aB\", \"c\", \"DeF\"]\n    \"\"\"\n    return [string[i : i + 2] for i in range(0, len(string), 2)]\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"aBcDeF\"))",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Split a string at lowercase letters.\n\n    Args:\n        string (str): string to split.\n\n    Examples:\n        >>> assert split_at_lowercase('HelloWorld') == ['Hello', 'World']\n    \"\"\"\n    return [x for x in string if not x.islower()]\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"HelloWorld\"))",
    "def split_at_lowercase(string):\n    return string.split('')[1:]\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"aBCdeFgH\"))",
    "def split_at_lowercase(string):\n    \"\"\"Split at lowercase letters.\"\"\"\n    return string.replace('_', ' ').replace('-', ' ').split()",
    "def split_on_lowercase(string):\n    \"\"\"\n    Splits a string at lowercase letters\n    :param string: string to split\n    :return: list of strings\n    \"\"\"\n    return [x + y[0].lower() + y[1:] for x, y in zip(string, string[1:]) if y.isupper()] + [string[-1]]\n\n\nprint(split_on_lowercase(\"aBCdEfGhiJklMNOPqrSTuvWxYz\"))",
    "def split_at_lowercase(input_str):\n    \"\"\"\n    :param input_str: string to be split\n    :return: split string\n    \"\"\"\n    split_list = []\n    last_index = 0\n    for index, char in enumerate(input_str):\n        if char.islower():\n            split_list.append(input_str[last_index:index])\n            last_index = index\n    split_list.append(input_str[last_index:])\n    return split_list\n\n\ndef main():\n    print(split_at_lowercase('helloWorld'))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_at_lowercase(string: str) -> list:\n    \"\"\"Split string at lowercase letters.\n\n    Args:\n        string (str): string to split\n\n    Returns:\n        list: list with splitted strings\n\n    Example:\n    >>> split_at_lowercase(\"helloWorld\")\n    ['hello', 'World']\n\n    \"\"\"\n    result = []\n    current_word = \"\"\n\n    for char in string:\n        if char.islower():\n            result.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += char\n\n    result.append(current_word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"helloWorld\"))",
    "# Time complexity: O(n)\n# Space complexity: O(1)\ndef split_at_lowercase(string):\n    result = []\n\n    word = \"\"\n    for char in string:\n        if char.islower():\n            result.append(word)\n            word = char\n        else:\n            word += char\n    result.append(word)\n\n    return result\n\nprint(split_at_lowercase(\"HelloWorld\"))\nprint(split_at_lowercase(\"HelloWorld123\"))\nprint(split_at_lowercase(\"HelloWorld1234\"))\nprint(split_at_lowercase(\"HelloWorld12345\"))\nprint(split_at_lowercase(\"HelloWorld123456\"))",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase('helloWorld')\n    ['hello', 'World']\n    >>> split_at_lowercase('helloWorldBye')\n    ['hello', 'World', 'Bye']\n    >>> split_at_lowercase('helloWorldByeFine')\n    ['hello', 'World', 'Bye', 'Fine']\n    \"\"\"\n    return string.split('')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def split_at_lowercase(string):\n\n    return string.split(\" \")\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"HelloPython\"))",
    "def split_on_lowercase(string):\n\n    return [string[:idx] for idx, val in enumerate(string) if val.islower()]\n\n\nif __name__ == \"__main__\":\n    print(split_on_lowercase(\"helloFromEd\"))",
    "def split_at_lowercase(string):\n    return string.split('a')\n\n\ndef test_split_at_lowercase():\n    assert split_at_lowercase(\"aabbcc\") == [\"\", \"aabb\", \"cc\"]\n    assert split_at_lowercase(\"abc\") == [\"abc\"]\n    assert split_at_lowercase(\"aabbccd\") == [\"\", \"aabb\", \"ccd\"]\n    assert split_at_lowercase(\"AaBbCc\") == [\"Aa\", \"Bb\", \"Cc\"]\n\n\nif __name__ == '__main__':\n    test_split_at_lowercase()",
    "def split_at_lowercase(string):\n    return [string[i:j+1] for i, j in zip([0] + [m.end() for m in re.finditer('[a-z]', string)], re.finditer('[a-z]', string).append(m.end() for m in re.finditer('[a-z]', string)).append(len(string)))]",
    "def split_at_lowercase(string):\n    return [string[i:j+1] for i, j in zip([0] + [m.end() for m in re.finditer('[a-z]', string)], re.finditer('[A-Z]', string).tolist() + [len(string)])]\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"Hello World\"))\n    print(split_at_lowercase(\"HelloWrld\"))\n    print(split_at_lowercase(\"Hello World!\"))\n    print(split_at_lowercase(\"HelloWrld!\"))\n    print(split_at_lowercase(\"Hello World!\"))",
    "def split_at_lowercase(string: str) -> list[str]:\n    \"\"\"Split a string at lowercase letters.\"\"\"\n\n    if not string:\n        return []\n\n    split_str: list[str] = []\n\n    for index, char in enumerate(string):\n        if char.islower() and index != len(string) - 1:\n            split_str.append(string[:index])\n            string = string[index:]\n\n    split_str.append(string)\n    return split_str\n\n\nif __name__ == \"__main__\":\n    print(split_at_lowercase(\"Hello World\"))\n    print(split_at_lowercase(\"My name is Jonas Eberle\"))\n    print(split_at_lowercase(\"\"))\n    print(split_at_lowercase(\"Hello World hello World\"))",
    "def split_at_lowercase(string):\n    \"\"\"\n    :param string: str - string to split up\n    :return: list - split string\n    \"\"\"\n    return [string[i:i+2] for i in range(len(string)) if string[i].islower()]\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase('a bc d ef'))",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return [char for char in string if char.isupper() or char == ' ']\n\n\ndef main():\n    \"\"\"Print the result of the split_at_lowercase function.\"\"\"\n    print(split_at_lowercase(\"The quick brown fox jumps over the lazy dog.\"))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_on_lowercase(string):\n    if not string:\n        return []\n\n    result = []\n    last_index = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[last_index:i])\n            last_index = i + 1\n\n    if last_index < len(string):\n        result.append(string[last_index:])\n\n    return result\n\n\nif __name__ == '__main__':\n    print(split_on_lowercase('helloWorld'))\n    print(split_on_lowercase('helloWorldBye'))\n    print(split_on_lowercase('helloWorldByeBye'))\n    print(split_on_lowercase('helloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorld'))\n    print(split_on_lowercase('HelloWorldBye'))\n    print(split_on_lowercase('HelloWorldByeBye'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('helloWorld'))\n    print(split_on_lowercase('helloWorldBye'))\n    print(split_on_lowercase('helloWorldByeBye'))\n    print(split_on_lowercase('helloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorld'))\n    print(split_on_lowercase('HelloWorldBye'))\n    print(split_on_lowercase('HelloWorldByeBye'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeByeHelloWorld'))\n    print(split_on_lowercase('HelloWorldByeBye",
    "def split_at_lowercase(input_str):\n    \"\"\"\n    >>> split_at_lowercase(\"HelloWorld\")\n    ['Hello', 'World']\n    >>> split_at_lowercase(\"HelloWorldBye\")\n    ['Hello', 'World', 'Bye']\n    \"\"\"\n    return re.split(r\"(?=[a-z])\", input_str)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\n\n    Args:\n        string (str): The string to split.\n\n    Returns:\n        list: The split string.\n\n    Example:\n\n        >>> split_at_lowercase('aBcDeF')\n        ['A', 'BcDeF']\n\n    \"\"\"\n    return [string[:i] + string[i:].capitalize()\n            for i in range(len(string))\n            if string[i].islower()]",
    "def split_at_lowercase(string):\n    \"\"\"Splits a string at lowercase letters.\"\"\"\n    output = []\n    for i in range(len(string)):\n        if string[i].islower():\n            output.append(string[:i])\n            string = string[i:]\n    output.append(string)\n    return output\n\n\ndef main():\n    print(split_at_lowercase(\"aBc\"))\n    print(split_at_lowercase(\"aBcDeF\"))\n    print(split_at_lowercase(\"aBcDeFgHiJkLmN\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string):\n    \"\"\"\n    >>> split_at_lowercase(\"hello world\")\n    ['hello ', 'world']\n    >>> split_at_lowercase(\"helloWorld\")\n    ['helloW', 'orld']\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i].islower():\n            new_string += \" \"\n        new_string += string[i]\n    return new_string.split()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split(string):\n    \"\"\"\n    >>> split(\"a,b,c,D,e,F,g\")\n    ['a,b,c,', 'D', ',e,F,g']\n    \"\"\"\n    res = []\n    i = 0\n    for j in range(len(string)):\n        if string[j].islower():\n            res.append(string[i:j])\n            i = j\n    res.append(string[i:])\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def split_at_lowercase(input_string):\n    \"\"\"\n    >>> split_at_lowercase('HelloWorld')\n    ['Hello', 'World']\n    >>> split_at_lowercase('HelloWorldBye')\n    ['Hello', 'World', 'Bye']\n    >>> split_at_lowercase('HELLO')\n    ['HELLO']\n    >>> split_at_lowercase('hElLO')\n    ['hEl', 'LO']\n    \"\"\"\n\n    output_list = []\n    i = 0\n    while i < len(input_string):\n        if input_string[i].islower():\n            output_list.append(input_string[:i])\n            input_string = input_string[i:]\n            i = 0\n        i += 1\n    output_list.append(input_string)\n    return output_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# This is the answer I came up with, but I couldn't find it online.\n# It's not a bad answer, but I'm not sure if it's the best one.\ndef split_on_lowercase(s):\n    for i, char in enumerate(s):\n        if char.islower() and i != len(s) - 1:\n            return s[:i + 1] + \" \" + split_on_lowercase(s[i + 1:])\n        else:\n            return s\n\n\n# This is a better answer\ndef split_on_lowercase_better(s):\n    return \" \".join(s[i:j] for i, j in zip(range(0, len(s)), range(1, len(s) + 1)) if s[i].islower() and s[j].isupper())",
    "def split_lower_case(string: str) -> list:\n    \"\"\"Split string at lowercase letters.\n\n    Args:\n        string (str): string to split.\n\n    Returns:\n        list: list of splitted string.\n    \"\"\"\n    return string.split(\"\")\n\n\nif __name__ == \"__main__\":\n    print(split_lower_case(\"abcdeFghIjkLmnoPqrS\"))",
    "def split(string: str) -> list:\n    \"\"\"Split string at lowercase letters.\n\n    Args:\n        string (str): string to split\n\n    Examples:\n        >>> assert split('aAbB') == ['a', 'AbB']\n    \"\"\"\n    result = []\n\n    for idx, char in enumerate(string):\n        if char.islower() and (idx != 0):\n            result.append(string[:idx])\n            string = string[idx:]\n    result.append(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(split(\"aAbB\"))",
    "def split_at_lowercase(string):\n    # Your code here\n    pass",
    "def split_at_lowercase(string):\n    split_string = []\n    for i in range(len(string)):\n        if string[i].islower():\n            split_string.append(string[i])\n        else:\n            split_string.append(string[i:])\n            break\n    return split_string\n\n\nprint(split_at_lowercase(\"helloWorld\"))",
    "# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase(string):\n    result = []\n    current = \"\"\n    for c in string:\n        if c.islower():\n            result.append(current)\n            current = \"\"\n        else:\n            current += c\n    result.append(current)\n    return result\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase_2(string):\n    result = []\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[i - 1: i])\n    result.append(string[i:])\n    return result\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase_3(string):\n    result = []\n    start = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[start: i])\n            start = i + 1\n    result.append(string[start:])\n    return result\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase_4(string):\n    result = []\n    start = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[start: i])\n            start = i + 1\n    if start < len(string):\n        result.append(string[start:])\n    return result\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef split_at_lowercase_5(string):\n    result = []\n    start = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[start: i])\n            start = i + 1\n    if start < len(string):\n        result.append(string[start:])\n    return result\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef",
    "def split_at_lowercase(string):\n\n    return [x for x in string]\n\n\nif __name__ == '__main__':\n    assert split_at_lowercase(\"HelloWorld\") == ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']",
    "def split_at_lowercase(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    if not string:\n        return string\n\n    result = []\n    current = []\n    for char in string:\n        if char.islower():\n            result.append(''.join(current))\n            current = []\n            continue\n        current.append(char)\n    result.append(''.join(current))\n    return result",
    "def split_at_lowercase(string):\n    # Loop over the characters in the string.\n    for index, char in enumerate(string):\n        # Check if the current character is lowercase.\n        if char.islower():\n            # Return the substring of the string up to the lowercase character.\n            return string[:index]\n    # If the string has no lowercase letters, return the string.\n    return string\n\n\ndef main():\n    print(split_at_lowercase(\"Hello World\"))\n    print(split_at_lowercase(\"HelloWorld\"))\n    print(split_at_lowercase(\"HELLO WORLD\"))\n    print(split_at_lowercase(\"HELLOWORLD\"))\n    print(split_at_lowercase(\"HelloWorld123\"))\n    print(split_at_lowercase(\"Hello123World\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable\nfrom expects import *\n\nfrom lib.split_at_lowercase import split_at_lowercase\n\nwith description('split_at_lowercase'):\n    with it('Splits at lowercase letters'):\n        expect(split_at_lowercase('helloWorld')).to(equal(['hello', 'World']))\n\n    with it('Splits at multiple lowercase letters'):\n        expect(split_at_lowercase('helloWoRld')).to(equal(['hello', 'Wo', 'Rld']))\n\n    with it('Returns an empty list if there are no lowercase letters'):\n        expect(split_at_lowercase('HELLO')).to(equal([]))\n\n    with it('Returns a list with one element if there is only one letter'):\n        expect(split_at_lowercase('h')).to(equal(['h']))\n\n    with it('Returns a list with one element if there is only one lowercase letter'):\n        expect(split_at_lowercase('hE')).to(equal(['hE']))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}