{
  "problem": {
    "task_id": "MBPP/174",
    "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
    "test_list": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ],
    "challenge_test_list": [],
    "problem_id": 163
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def group_pairs(pairs):\n    grouped_pairs = {}\n    for pair in pairs:\n        if pair[0] in grouped_pairs:\n            grouped_pairs[pair[0]].append(pair[1])\n        else:\n            grouped_pairs[pair[0]] = [pair[1]]\n    return grouped_pairs\n\n\nprint(group_pairs([('a', 1), ('b', 2), ('a', 3), ('a', 4)]))",
    "from typing import Iterable\n\n\ndef group_pairs(pairs: Iterable) -> dict:\n    \"\"\"Group key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (Iterable): An iterable of key-value pairs.\n\n    Returns:\n        dict: A dictionary of lists.\n\n    Examples:\n        >>> group_pairs([('a', 1), ('a', 2), ('a', 3), ('b', 4), ('b', 5), ('b', 6)])\n        {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    \"\"\"\n    grouped = {}\n    for key, value in pairs:\n        grouped.setdefault(key, []).append(value)\n    return grouped\n\n\nif __name__ == \"__main__\":\n    print(group_pairs([(\"a\", 1), (\"a\", 2), (\"a\", 3), (\"b\", 4), (\"b\", 5), (\"b\", 6)]))",
    "from typing import List, Tuple\n\n\ndef create_dict_from_pairs(pairs: List[Tuple[str, str]]) -> dict:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    d = {}\n    for pair in pairs:\n        key, value = pair\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n\ndef main():\n    pairs = [\n        ('a', '1'),\n        ('a', '2'),\n        ('a', '3'),\n        ('b', '4'),\n        ('b', '5'),\n        ('b', '6'),\n        ('c', '7'),\n        ('c', '8'),\n        ('c', '9'),\n    ]\n    print(create_dict_from_pairs(pairs))\n\n\nif __name__ == '__main__':\n    main()",
    "def group_by(iterable):\n    \"\"\"Groups key-value pairs into a dictionary of lists.\"\"\"\n    result = dict()\n    for key, value in iterable:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n\nprint(group_by([(\"key1\", 1), (\"key2\", 2), (\"key1\", 3)]))",
    "def group_sequence(sequence):\n    \"\"\"\n    >>> group_sequence([(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b'), (2, 'c'), (1, 'c'), (3, 'a')])\n    {1: ['a', 'b', 'c'], 2: ['a', 'b', 'c'], 3: ['a']}\n    \"\"\"\n    grouped = {}\n    for key, value in sequence:\n        grouped.setdefault(key, []).append(value)\n    return grouped\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from typing import Any, Dict, List, Tuple\n\n\ndef group_pairs(pairs: List[Tuple[Any, Any]]) -> Dict[Any, List[Any]]:\n    \"\"\"Groups a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (List[Tuple[Any, Any]]): A list of key-value pairs.\n\n    Returns:\n        Dict[Any, List[Any]]: A dictionary of lists.\n\n    Examples:\n        >>> group_pairs([(\"foo\", 1), (\"bar\", 2), (\"foo\", 3)])\n        {'foo': [1, 3], 'bar': [2]}\n    \"\"\"\n    grouped_pairs: Dict[Any, List[Any]] = {}\n    for key, value in pairs:\n        grouped_pairs.setdefault(key, []).append(value)\n    return grouped_pairs\n\n\nif __name__ == \"__main__\":\n    print(group_pairs([(\"foo\", 1), (\"bar\", 2), (\"foo\", 3)]))",
    "def group(seq):\n    # type: (Iterable[Tuple[Any, Any]]) -> Dict[Any, List[Any]]\n    \"\"\"Group key-value pairs into a dictionary of lists.\n\n    Args:\n        seq: an iterable of key-value pairs.\n\n    Returns:\n        A dictionary of lists.\n\n    Raises:\n        TypeError: if `seq` is not an iterable of key-value pairs.\n\n    >>> group([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    try:\n        first_pair = next(iter(seq))\n    except StopIteration:\n        return {}\n    if not isinstance(first_pair, tuple):\n        raise TypeError(\"`seq` must be an iterable of key-value pairs\")\n    if len(first_pair) != 2:\n        raise TypeError(\"`seq` must be an iterable of key-value pairs\")\n    key, value = first_pair\n    result = {key: [value]}\n    for key, value in seq:\n        result.setdefault(key, []).append(value)\n    return result",
    "def group_pairs(pairs):\n    \"\"\"\n    Return a dictionary where the key is a key from pairs and the value is a list of values from pairs\n    with the same key.\n    \"\"\"\n    # Initialize an empty dictionary\n    grouped_pairs = {}\n\n    # Iterate over each pair in pairs\n    for key, value in pairs:\n        # If key is in grouped_pairs, append value to the list at key\n        if key in grouped_pairs:\n            grouped_pairs[key].append(value)\n        # Otherwise, add the key to grouped_pairs and set its value to a list containing value\n        else:\n            grouped_pairs[key] = [value]\n\n    # Return the dictionary\n    return grouped_pairs",
    "from typing import List\n\n\ndef create_dict_of_lists(seq: List[tuple]) -> dict:\n    \"\"\"Create a dict of lists.\n\n    Args:\n        seq (List[tuple]): List of key-value pairs.\n\n    Returns:\n        dict: Dictionary of lists.\n\n    Examples:\n        >>> seq = [('a', 1), ('b', 2), ('a', 3)]\n        >>> create_dict_of_lists(seq)\n        {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    res = {}\n    for key, value in seq:\n        if key not in res:\n            res[key] = [value]\n        else:\n            res[key].append(value)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(create_dict_of_lists([(\"a\", 1), (\"b\", 2), (\"a\", 3)]))",
    "def group_pairs(pairs):\n    d = {}\n    for key, value in pairs:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n\nprint(group_pairs([(\"A\", 1), (\"B\", 2), (\"A\", 3), (\"A\", 4), (\"B\", 5)]))",
    "def group_list(pairs):\n    \"\"\"\n    pairs is a list of pairs (key, value)\n    Returns a dictionary of lists\n    \"\"\"\n    new_dict = {}\n    for i in pairs:\n        if i[0] in new_dict:\n            new_dict[i[0]].append(i[1])\n        else:\n            new_dict[i[0]] = [i[1]]\n    return new_dict\n\n\nif __name__ == '__main__':\n    pairs = [(1, 10), (1, 11), (1, 12), (2, 20), (3, 30)]\n    print(group_list(pairs))",
    "def group_key_value(seq):\n    res = {}\n    for k, v in seq:\n        if k not in res:\n            res[k] = []\n        res[k].append(v)\n    return res\n\n\nprint(group_key_value([(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"a\", 4)]))",
    "from typing import List, Tuple\n\n\ndef pair_list_to_dict(pair_list: List[Tuple[str, int]]) -> dict:\n    \"\"\"\n    >>> pair_list_to_dict([('a', 1), ('b', 2), ('c', 1), ('d', 2)])\n    {'a': [1], 'b': [2], 'c': [1], 'd': [2]}\n    \"\"\"\n    return {k: [v] for k, v in pair_list}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef group_key_values(pairs: List[Tuple[str, int]]) -> dict:\n    \"\"\"Groups key-value pairs into a dictionary of lists.\"\"\"\n\n    return dict(zip(*[iter(pairs)] * 2))\n\n\nif __name__ == \"__main__\":\n    pairs = [\n        (\"a\", 1),\n        (\"a\", 2),\n        (\"a\", 3),\n        (\"b\", 4),\n        (\"b\", 5),\n        (\"c\", 6),\n    ]\n\n    print(group_key_values(pairs))",
    "def group_list(lst):\n    \"\"\"\n    >>> lst = [(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"a\", 4), (\"b\", 5)]\n    >>> group_list(lst)\n    {'a': [1, 2, 4], 'b': [3, 5]}\n    >>> lst = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n    >>> group_list(lst)\n    {'a': [1], 'b': [2], 'c': [3], 'd': [4]}\n    \"\"\"\n    result = {}\n    for key, value in lst:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef group_key_value_pairs(pairs: List[Tuple[str, int]]) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (List[Tuple[str, int]]): a list of key-value pairs\n\n    Returns:\n        dict: a dictionary of lists\n\n    Examples:\n        >>> assert group_key_value_pairs([(\"foo\", 1), (\"bar\", 2), (\"foo\", 3), (\"foo\", 4)]) == {\"foo\": [1, 3, 4], \"bar\": [2]}\n    \"\"\"\n    grouped = {}\n\n    for key, value in pairs:\n        if key in grouped:\n            grouped[key].append(value)\n        else:\n            grouped[key] = [value]\n\n    return grouped\n\n\nif __name__ == \"__main__\":\n    print(group_key_value_pairs([(\"foo\", 1), (\"bar\", 2), (\"foo\", 3), (\"foo\", 4)]))",
    "def group(pairs):\n    grouped_pairs = {}\n    for key, value in pairs:\n        if key in grouped_pairs:\n            grouped_pairs[key].append(value)\n        else:\n            grouped_pairs[key] = [value]\n    return grouped_pairs\n\n\ndef test_group():\n    assert group([(\"a\", 1), (\"b\", 2), (\"a\", 3)]) == {\"a\": [1, 3], \"b\": [2]}",
    "def key_value_pairs_to_dictionary(pairs):\n    d = {}\n    for i in range(0, len(pairs), 2):\n        key, value = pairs[i], pairs[i+1]\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\nprint(key_value_pairs_to_dictionary([1, 2, 3, 4, 5, 6]))\nprint(key_value_pairs_to_dictionary([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "from typing import List\n\n\ndef group_by_value(pairs: List[tuple[str, int]]) -> dict[int, list[str]]:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (List[tuple[str, int]]): a sequence of key-value pairs.\n\n    Returns:\n        dict[int, list[str]]: a dictionary of lists.\n\n    Examples:\n        >>> assert group_by_value([('a', 1), ('b', 1), ('c', 2), ('d', 2), ('e', 3)]) == {1: ['a', 'b'], 2: ['c', 'd'], 3: ['e']}\n    \"\"\"\n    grouped_pairs: dict[int, list[str]] = {}\n\n    for key, value in pairs:\n        grouped_pairs.setdefault(value, []).append(key)\n\n    return grouped_pairs\n\n\nif __name__ == \"__main__\":\n    print(group_by_value([(\"a\", 1), (\"b\", 1), (\"c\", 2), (\"d\", 2), (\"e\", 3)]))",
    "def group_list(seq):\n    result = {}\n    for key, value in seq:\n        result.setdefault(key, []).append(value)\n    return result\n\n# \u6d4b\u8bd5:\nif __name__ == '__main__':\n    print(group_list((('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('c', 6))))",
    "from collections import defaultdict\n\n\ndef group(pairs):\n    \"\"\"\n    Return a dictionary of lists, where each key is the same as the value in\n    the pairs.\n\n    :param pairs: A list of key-value pairs.\n    :return: A dictionary of lists.\n    \"\"\"\n    d = defaultdict(list)\n\n    for key, value in pairs:\n        d[value].append(key)\n\n    return d",
    "from typing import List, Tuple, Dict\n\n\ndef group(sequence: List[Tuple[str, str]]) -> Dict[str, List[str]]:\n    \"\"\"Groups sequence of key-value pairs into dictionary of lists.\n\n    Args:\n        sequence (List[Tuple[str, str]]): sequence of key-value pairs\n\n    Returns:\n        Dict[str, List[str]]: dictionary of lists\n    \"\"\"\n    result: Dict[str, List[str]] = {}\n\n    for key, value in sequence:\n        if key not in result:\n            result[key] = []\n\n        result[key].append(value)\n\n    return result",
    "from typing import Iterable\n\n\ndef group_by(pairs: Iterable) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    :param pairs: Sequence of key-value pairs.\n    :return: Dictionary of lists.\n\n    >>> group_by([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    grouped = {}\n\n    for key, value in pairs:\n        if key not in grouped:\n            grouped[key] = []\n\n        grouped[key].append(value)\n\n    return grouped\n\n\ndef group_by_comprehension(pairs: Iterable) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    :param pairs: Sequence of key-value pairs.\n    :return: Dictionary of lists.\n\n    >>> group_by_comprehension([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    return {key: [value for _, value in group] for key, group in groupby(pairs)}\n\n\ndef groupby(iterable: Iterable, key=None) -> Iterable:\n    \"\"\"\n    Group the items of an iterable object by a key function.\n\n    :param iterable: Iterable object.\n    :param key: Key function.\n    :return: Iterable object.\n    \"\"\"\n    if key is None:\n        key = lambda x: x\n\n    iterable = iter(iterable)\n    try:\n        value = next(iterable)\n    except StopIteration:\n        return\n\n    while True:\n        iterable_copy = iterable_copy = iter(iterable)\n        group = [(value, iterable_copy)]\n\n        while True:\n            try:\n                value = next(iterable_copy)\n            except StopIteration:\n                break\n\n            group.append((value, iterable_copy))\n\n        yield key(group[0][0]), group",
    "def group_list(items):\n    new_dict = {}\n\n    for item in items:\n        key = item[0]\n        value = item[1]\n\n        if key not in new_dict:\n            new_dict[key] = [value]\n        else:\n            new_dict[key].append(value)\n\n    return new_dict\n\n\nif __name__ == '__main__':\n    print(group_list([(1, 10), (1, 11), (2, 20), (2, 21), (1, 12)]))",
    "def pair_to_dict(pairs):\n    \"\"\"\n    >>> pair_to_dict([('a', 1), ('b', 2)])\n    {'a': [1], 'b': [2]}\n    >>> pair_to_dict([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    res = {}\n    for key, value in pairs:\n        if key not in res:\n            res[key] = [value]\n        else:\n            res[key].append(value)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def to_dict_of_lists(seq):\n    \"\"\"\n    :param seq: [(key, value), ...]\n    :return: {key: [value], ...}\n    \"\"\"\n    d = {}\n    for k, v in seq:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d\n\n\nif __name__ == '__main__':\n    print(to_dict_of_lists([('a', 1), ('b', 2), ('a', 2), ('b', 3)]))",
    "def group_by(seq):\n    d = {}\n    for k, v in seq:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n\nprint(group_by([(1, 'a'), (2, 'a'), (3, 'b'), (3, 'c'), (4, 'a')]))",
    "from typing import List, Dict\n\n\ndef group_key_value(lst: List[str]) -> Dict[str, List[str]]:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        lst (List[str]): list of key-value pairs\n\n    Returns:\n        Dict[str, List[str]]: dictionary of lists\n\n    Examples:\n        >>> assert group_key_value(['name:John', 'age:23', 'name:Alice', 'age:22']) == {'name': ['John', 'Alice'], 'age': ['23', '22']}\n    \"\"\"\n    result = {}\n\n    for item in lst:\n        key, value = item.split(\":\")\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n\nif __name__ == '__main__':\n    print(group_key_value(['name:John', 'age:23', 'name:Alice', 'age:22']))",
    "def group_pairs(pairs):\n    \"\"\"Groups a list of pairs into a dictionary of lists.\n\n    Args:\n        pairs: A list of key-value pairs.\n\n    Returns:\n        The grouped dictionary.\n    \"\"\"\n    # create an empty dict\n    group = {}\n    # iterate over the pairs\n    for key, value in pairs:\n        # if the key is not in the dict\n        if key not in group:\n            # create a new list\n            group[key] = [value]\n        else:\n            # append the value to the list\n            group[key].append(value)\n    # return the dict\n    return group\n\nprint(group_pairs([('key1', 'value1'), ('key1', 'value2'), ('key2', 'value3'), ('key2', 'value4')]))",
    "def group_list_by_key(kv_pairs):\n    \"\"\"\n    Return a dictionary of lists from a list of key-value pairs.\n    >>> group_list_by_key([(1, 2), (3, 4), (1, 5), (3, 6)])\n    {1: [2, 5], 3: [4, 6]}\n    >>> group_list_by_key([(1, 2), (1, 5), (1, 5), (3, 6), (3, 6)])\n    {1: [2, 5, 5], 3: [6, 6]}\n    \"\"\"\n    result = {}\n    for k, v in kv_pairs:\n        result.setdefault(k, []).append(v)\n    return result\n\n\ndef group_list_by_key_2(kv_pairs):\n    \"\"\"\n    Return a dictionary of lists from a list of key-value pairs.\n    >>> group_list_by_key_2([(1, 2), (3, 4), (1, 5), (3, 6)])\n    {1: [2, 5], 3: [4, 6]}\n    >>> group_list_by_key_2([(1, 2), (1, 5), (1, 5), (3, 6), (3, 6)])\n    {1: [2, 5, 5], 3: [6, 6]}\n    \"\"\"\n    result = {}\n    for k, v in kv_pairs:\n        if k not in result:\n            result[k] = [v]\n        else:\n            result[k].append(v)\n    return result\n\n\ndef group_list_by_key_3(kv_pairs):\n    \"\"\"\n    Return a dictionary of lists from a list of key-value pairs.\n    >>> group_list_by_key_3([(1, 2), (3, 4), (1, 5), (3, 6)])\n    {1: [2, 5], 3: [4, 6]}",
    "def group(seq):\n    \"\"\"Return a dictionary of lists from a sequence of key-value pairs.\"\"\"\n    if seq:\n        dic = {}\n        for k, v in seq:\n            if k in dic:\n                dic[k].append(v)\n            else:\n                dic[k] = [v]\n        return dic\n    else:\n        return {}",
    "from typing import List\n\n\ndef group_by_value(seq: List[tuple]) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        seq (List[tuple]): a sequence of key-value pairs\n\n    Returns:\n        dict: a dictionary of lists\n    \"\"\"\n    result = {}\n    for key, value in seq:\n        if value not in result:\n            result[value] = []\n        result[value].append(key)\n    return result\n\n\nif __name__ == \"__main__\":\n    seq = [(1, 1), (2, 1), (3, 2), (4, 2), (5, 3)]\n    assert group_by_value(seq) == {1: [1, 2], 2: [3, 4], 3: [5]}",
    "from typing import List, Dict\n\n\ndef group_to_dictionary(grouped_list: List[tuple]) -> Dict[str, List[str]]:\n    \"\"\"\n    >>> group_to_dictionary([(\"key1\", \"val1\"), (\"key1\", \"val2\"), (\"key2\", \"val3\")])\n    {'key1': ['val1', 'val2'], 'key2': ['val3']}\n    \"\"\"\n    result = {}\n\n    for key, value in grouped_list:\n        if key not in result:\n            result[key] = []\n\n        result[key].append(value)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def group(seq):\n    result = dict()\n    for (key, value) in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\ndef test_group():\n    assert group([(1, 'a'), (1, 'b'), (2, 'c')]) == {1: ['a', 'b'], 2: ['c']}\n    assert group([('a', 1), ('a', 2), ('b', 3)]) == {'a': [1, 2], 'b': [3]}\n\n\nif __name__ == '__main__':\n    test_group()",
    "def group_by_value(values):\n    d = {}\n    for i in values:\n        if i[1] in d:\n            d[i[1]].append(i[0])\n        else:\n            d[i[1]] = [i[0]]\n    return d\n\n\nif __name__ == \"__main__\":\n    print(group_by_value([(1, 1), (2, 1), (3, 2), (4, 2), (5, 3), (6, 3), (7, 4)]))",
    "def group_key_value(seq):\n    result = {}\n    for key, value in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "from typing import List\n\n\ndef group_pairs(pairs: List[tuple]) -> dict:\n    \"\"\"\n    >>> group_pairs([(1, 2), (1, 3), (2, 3), (3, 4), (5, 6)])\n    {1: [2, 3], 2: [3], 3: [4], 5: [6]}\n    \"\"\"\n    result = {}\n\n    for key, value in pairs:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def group_list(items):\n    result = {}\n    for key, value in items:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\ndef main():\n    print(group_list([(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"a\", 4)]))\n\nif __name__ == '__main__':\n    main()",
    "def pair_to_dict(lst):\n    d = {}\n    for pair in lst:\n        key, value = pair\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\n\nprint(pair_to_dict([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key2\", \"value3\"), (\"key1\", \"value4\")]))",
    "def group_by_key(seq):\n    result = {}\n    for key, value in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\ndef test_group_by_key():\n    assert group_by_key([(1, 1), (2, 2), (1, 2), (2, 3)]) == {1: [1, 2], 2: [2, 3]}",
    "def group(seq):\n    \"\"\"\n    Group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n    ret = {}\n    for key, val in seq:\n        if key in ret:\n            ret[key].append(val)\n        else:\n            ret[key] = [val]\n    return ret\n\ndef test_group():\n    \"\"\"\n    >>> group([('key1', 'val1'), ('key2', 'val2'), ('key2', 'val3'), ('key2', 'val4'), ('key1', 'val5')])\n    {'key1': ['val1', 'val5'], 'key2': ['val2', 'val3', 'val4']}\n    >>> group([(1, 100), (1, 200), (2, 100), (2, 200), (2, 300)])\n    {1: [100, 200], 2: [100, 200, 300]}\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "from enum import Enum\n\n\nclass KeyValuePair:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n\n\ndef group_key_value_pairs(pairs):\n    grouped = {}\n    for pair in pairs:\n        key = pair.key\n        if key not in grouped:\n            grouped[key] = []\n        grouped[key].append(pair.value)\n    return grouped\n\n\ndef main():\n    pairs = [\n        KeyValuePair(\"a\", \"foo\"),\n        KeyValuePair(\"a\", \"bar\"),\n        KeyValuePair(\"b\", \"baz\"),\n    ]\n    print(group_key_value_pairs(pairs))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from typing import Iterator, List, Tuple\n\n\ndef group_key_value(\n    key_value_pairs: List[Tuple[str, str]]\n) -> Iterator[Tuple[str, List[str]]]:\n    \"\"\"Group key-value pairs into a dictionary of lists.\n\n    :param key_value_pairs: list of key-value pairs.\n    :return: dictionary of lists.\n    >>> list(group_key_value([('a', 1), ('a', 2), ('b', 3)]))\n    [('a', [1, 2]), ('b', [3])]\n    \"\"\"\n    result: dict = {}\n\n    for key, value in key_value_pairs:\n        if key not in result:\n            result[key] = []\n\n        result[key].append(value)\n\n    return result.items()\n\n\nif __name__ == \"__main__\":\n    print(list(group_key_value([(\"a\", 1), (\"a\", 2), (\"b\", 3)])))",
    "from typing import List, Tuple\n\n\ndef build_dict(seq: List[Tuple[str, int]]) -> dict:\n    \"\"\"Build a dictionary of lists from a sequence of key-value pairs.\n\n    :param seq: Sequence of key-value pairs.\n    :return: Dictionary of lists.\n    \"\"\"\n    if not seq:\n        return {}\n\n    # Initialise dictionary with first key.\n    res = {seq[0][0]: [seq[0][1]]}\n\n    # Iterate over rest of sequence.\n    for key, value in seq[1:]:\n        # If key already exists, add value to existing list.\n        if key in res:\n            res[key].append(value)\n        # Otherwise create new list and add value to it.\n        else:\n            res[key] = [value]\n\n    return res\n\n\nif __name__ == \"__main__\":\n    print(build_dict([(\"a\", 1), (\"b\", 2), (\"a\", 3)]))",
    "def group_by(pairs):\n    \"\"\"Return a dictionary of lists.\n\n    :param pairs: list of key-value pairs\n    :return: dictionary of lists\n    \"\"\"\n    # TODO: implement me\n    pass",
    "def group_pairs(pairs):\n    # TODO: Write your code here\n    pass\n\n\npairs = [(1, 2), (2, 3), (3, 4), (1, 5), (1, 6)]\nprint(group_pairs(pairs))",
    "def pairs_to_dict(pairs):\n    \"\"\"\n    :param pairs: list of key-value pairs\n    :return: dict\n    \"\"\"\n    return_dict = dict()\n    for pair in pairs:\n        key = pair[0]\n        value = pair[1]\n        if key in return_dict.keys():\n            return_dict[key].append(value)\n        else:\n            return_dict[key] = [value]\n    return return_dict\n\n\ndef main():\n    pairs = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"a\", 3],\n        [\"c\", 4],\n        [\"b\", 5],\n        [\"a\", 6]\n    ]\n    print(pairs_to_dict(pairs))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def group_key_value(items):\n    result = {}\n\n    for item in items:\n        key, value = item.split(':')\n\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n\n    return result\n\n\nprint(group_key_value([\"1:foo\", \"2:bar\", \"1:baz\", \"2:qux\"]))",
    "def group_list(seq):\n    d = {}\n    for k, v in seq:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n\n\nprint(group_list([(1, \"one\"), (1, \"two\"), (2, \"three\"), (3, \"four\"), (3, \"five\")]))\n# {1: ['one', 'two'], 2: ['three'], 3: ['four', 'five']}",
    "def group_key_value(key_value_pairs):\n    \"\"\"\n    Return dictionary of lists.\n    \"\"\"\n\n    dictionary = dict()\n\n    for key, value in key_value_pairs:\n        if key not in dictionary:\n            dictionary[key] = [value]\n        else:\n            dictionary[key].append(value)\n\n    return dictionary\n\n\ndef test_function():\n    assert group_key_value([('a', 1), ('a', 2), ('b', 3), ('a', 6), ('b', 7), ('a', 8)]) == {\n        'a': [1, 2, 6, 8], 'b': [3, 7]}, \"Grouping failed\"\n    assert group_key_value([(1, 2), (1, 4), (2, 3)]) == {\n        1: [2, 4], 2: [3]}, \"Grouping failed\"\n    print(\"Test passed\")\n\n\ndef main():\n    test_function()\n\n\nif __name__ == '__main__':\n    main()",
    "def group_key_value_pairs(pairs):\n    grouped = {}\n    for pair in pairs:\n        key, value = pair\n        if key in grouped:\n            grouped[key].append(value)\n        else:\n            grouped[key] = [value]\n    return grouped\n\n\nif __name__ == '__main__':\n    pairs = [('key', 1), ('key', 2), ('key', 3), ('key2', 4), ('key2', 5), ('key3', 6)]\n    grouped = group_key_value_pairs(pairs)\n    print(grouped)",
    "def group_pairs(pairs):\n    \"\"\"\n    >>> group_pairs([(1, 'a'), (1, 'b'), (2, 'c')])\n    {1: ['a', 'b'], 2: ['c']}\n\n    >>> group_pairs([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd')])\n    {1: ['a', 'b'], 2: ['c', 'd']}\n\n    >>> group_pairs([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'd')])\n    {1: ['a', 'c'], 2: ['b', 'd']}\n\n    >>> group_pairs([(1, 'a'), (1, 'b'), (2, 'c'), (3, 'd')])\n    {1: ['a', 'b'], 2: ['c'], 3: ['d']}\n\n    >>> group_pairs([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (3, 'e')])\n    {1: ['a', 'b'], 2: ['c', 'd'], 3: ['e']}\n    \"\"\"\n    result = {}\n    for key, value in pairs:\n        result.setdefault(key, []).append(value)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List\n\n\ndef group_pairs(pairs: List[tuple]) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs: A sequence of key-value pairs.\n\n    Returns:\n        A dictionary of lists.\n\n    Examples:\n        >>> assert group_pairs([(1, 2), (2, 3), (1, 4)]) == {1: [2, 4], 2: [3]}\n    \"\"\"\n    result = {}\n\n    for pair in pairs:\n        if pair[0] in result:\n            result[pair[0]].append(pair[1])\n        else:\n            result[pair[0]] = [pair[1]]\n\n    return result\n\n\ndef group_pairs_optimized(pairs: List[tuple]) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs: A sequence of key-value pairs.\n\n    Returns:\n        A dictionary of lists.\n\n    Examples:\n        >>> assert group_pairs_optimized([(1, 2), (2, 3), (1, 4)]) == {1: [2, 4], 2: [3]}\n    \"\"\"\n    result = {}\n\n    for pair in pairs:\n        if pair[0] in result:\n            result[pair[0]].append(pair[1])\n        else:\n            result[pair[0]] = [pair[1]]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(group_pairs([(1, 2), (2, 3), (1, 4)]))\n    print(group_pairs_optimized([(1, 2), (2, 3), (1, 4)]))",
    "def group_key_value_pairs(pairs):\n    \"\"\"\n    :param pairs: list of key-value pairs\n    :return: dict of lists\n    \"\"\"\n    d = {}\n    for pair in pairs:\n        key = pair[0]\n        value = pair[1]\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n\ndef test_function(test_case):\n    output = group_key_value_pairs(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"False\")\n\n\npairs = [(1, \"A\",), (1, \"B\",), (2, \"A\",), (3, \"A\",), (3, \"B\",), (3, \"C\",)]\ntest_case = [pairs, {1: [\"A\", \"B\"], 2: [\"A\"], 3: [\"A\", \"B\", \"C\"]}]\ntest_function(test_case)",
    "from typing import Iterable, List, Tuple\n\n\ndef group_by(iterable: Iterable[Tuple[str, int]]) -> dict:\n    \"\"\"Group key-value pairs by key.\n\n    Args:\n        iterable (Iterable[Tuple[str, int]]): A sequence of key-value pairs.\n\n    Returns:\n        dict: A dictionary of lists.\n\n    >>> group_by([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    result = {}\n\n    for key, value in iterable:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n\n    return result\n\n\ndef group_by_comprehension(iterable: Iterable[Tuple[str, int]]) -> dict:\n    \"\"\"Group key-value pairs by key.\n\n    Args:\n        iterable (Iterable[Tuple[str, int]]): A sequence of key-value pairs.\n\n    Returns:\n        dict: A dictionary of lists.\n\n    >>> group_by_comprehension([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    return {key: [value for _, value in values] for key, values in group_by(iterable).items()}\n\n\ndef group_by_reduce(iterable: Iterable[Tuple[str, int]]) -> dict:\n    \"\"\"Group key-value pairs by key.\n\n    Args:\n        iterable (Iterable[Tuple[str, int]]): A sequence of key-value pairs.\n\n    Returns:\n        dict: A dictionary of lists.\n\n    >>> group_by_reduce([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    result = {}\n\n    for key, value in iterable:\n        if key in result:\n            result[key].append",
    "from collections import defaultdict\n\n\ndef group_by(items):\n    grouped_items = defaultdict(list)\n\n    for item in items:\n        grouped_items[item[0]].append(item[1])\n\n    return grouped_items\n\n\nif __name__ == '__main__':\n    print(group_by([('a', 1), ('b', 2), ('a', 3), ('a', 4), ('b', 5)]))",
    "def pairs_to_dict(pairs):\n    \"\"\"\n    >>> pairs_to_dict([(1, 2), (3, 4), (1, 5), (3, 6)])\n    {1: [2, 5], 3: [4, 6]}\n    \"\"\"\n    d = {}\n    for pair in pairs:\n        key, value = pair\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef group_by(iterable):\n    grouped_dict = defaultdict(list)\n\n    for item in iterable:\n        key, value = item\n        grouped_dict[key].append(value)\n\n    return grouped_dict\n\n\nprint(group_by([(1, 2), (1, 3), (2, 4), (2, 5)]))\nprint(group_by([(1, \"foo\"), (2, \"bar\"), (1, \"baz\"), (2, \"qux\")]))",
    "def group_by_keys(arr):\n    \"\"\"\n    :param arr: list of key-value tuples\n    :return: dictionary of lists\n    >>> group_by_keys([('A', 2), ('A', 3), ('B', 1), ('B', 5)])\n    {'A': [2, 3], 'B': [1, 5]}\n    \"\"\"\n    if not arr:\n        return {}\n    keys = set(key for key, value in arr)\n    result = {key: [] for key in keys}\n    for key, value in arr:\n        result[key].append(value)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef group_key_value(key_value_pairs: List[Tuple[str, int]]) -> dict:\n    \"\"\"Group key-value pairs into a dictionary of lists.\n\n    :param key_value_pairs: list of key-value pairs\n    :return: dict of lists\n    \"\"\"\n    grouped_dict = {}\n    for key, value in key_value_pairs:\n        if key not in grouped_dict:\n            grouped_dict[key] = [value]\n        else:\n            grouped_dict[key].append(value)\n    return grouped_dict\n\n\nif __name__ == \"__main__\":\n    print(group_key_value([(\"A\", 1), (\"B\", 2), (\"A\", 3), (\"A\", 4)]))",
    "def group(list_of_lists):\n    result = {}\n    for item in list_of_lists:\n        key = item[0]\n        value = item[1]\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nprint(group([[\"a\", 1], [\"a\", 2], [\"b\", 1], [\"b\", 2]]))\nprint(group([[\"a\", 1], [\"a\", 2], [\"a\", 3], [\"b\", 1], [\"b\", 2]]))\nprint(group([[\"a\", 1], [\"a\", 2], [\"b\", 1], [\"b\", 2], [\"c\", 1]]))",
    "from typing import List, Tuple\n\n\ndef group_pairs(pairs: List[Tuple[int, int]]) -> dict:\n    \"\"\"Groups a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (List[Tuple[int, int]]): a sequence of key-value pairs\n\n    Returns:\n        dict: a dictionary of lists\n    \"\"\"\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(group_pairs([(1, 2), (2, 3), (2, 4), (1, 3)]))\n    print(group_pairs([(1, 2), (1, 3), (2, 3)]))\n    print(group_pairs([(1, 2), (1, 3), (2, 3), (1, 4), (2, 4), (3, 4)]))\n    print(group_pairs([(1, 2), (1, 3), (2, 3), (1, 4), (1, 5), (2, 4), (3, 4)]))",
    "def group_pairs(pairs):\n    \"\"\"\n    >>> group_pairs([(1, 2), (2, 3), (3, 4), (3, 5), (2, 6), (1, 7)])\n    {1: [2, 7], 2: [3, 6], 3: [4, 5]}\n    \"\"\"\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def group_pairs(seq):\n    result = {}\n    for key, value in seq:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n\ndef test_group_pairs():\n    assert group_pairs([('A', 1), ('B', 2), ('A', 3), ('B', 4), ('C', 5)]) == {\n        'A': [1, 3],\n        'B': [2, 4],\n        'C': [5]\n    }\n\n\nif __name__ == '__main__':\n    test_group_pairs()",
    "def to_dict(pairs):\n    d = {}\n    for k, v in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n\ndef test_to_dict():\n    pairs = [('a', 1), ('b', 2), ('a', 3), ('a', 4), ('c', 5)]\n    assert to_dict(pairs) == {\n        'a': [1, 3, 4],\n        'b': [2],\n        'c': [5]\n    }",
    "def group_by(kv_pairs):\n    \"\"\"Return dictionary of lists.\"\"\"\n    result = {}\n    for key, value in kv_pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nprint(group_by([('a', 1), ('a', 2), ('b', 3)]))",
    "def group_key_value(seq):\n    # type: (Sequence[Tuple[Any, Any]]) -> Dict[Any, List[Any]]\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        seq: a sequence of key-value pairs\n\n    Returns:\n        a dictionary of lists\n\n    >>> group_key_value([('foo', 1), ('bar', 2), ('foo', 3)])\n    {'foo': [1, 3], 'bar': [2]}\n    \"\"\"\n    result = {}\n    for key, value in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "from typing import Iterable, Dict, List\n\n\ndef group_by(seq: Iterable, key) -> Dict[str, List]:\n    \"\"\"Group sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        seq (Iterable): Sequence of key-value pairs.\n        key (str): The key of the key-value pair.\n\n    Returns:\n        Dict[str, List]: The dictionary of lists.\n    \"\"\"\n    grouped = {}\n\n    for item in seq:\n        grouped.setdefault(item[key], []).append(item)\n\n    return grouped",
    "from typing import List\n\n\ndef list_to_dict(key_values: List) -> dict:\n    \"\"\"\n    >>> list_to_dict([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (3, 'e')])\n    {1: ['a', 'b'], 2: ['c', 'd'], 3: ['e']}\n    \"\"\"\n    result = dict()\n    for key, value in key_values:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from typing import List, Tuple\n\n\ndef group(data: List[Tuple[str, int]]) -> dict:\n    \"\"\"Group key-value pairs into a dictionary of lists.\n\n    Time complexity: O(n*log n).\n    Space complexity: O(n).\n    \"\"\"\n    # Edge case.\n    if not data:\n        return {}\n\n    # Group key-value pairs into a dictionary of lists.\n    d = {}\n\n    for key, value in data:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n\nif __name__ == \"__main__\":\n    data = [('a', 1), ('b', 2), ('a', 3)]\n    assert group(data) == {'a': [1, 3], 'b': [2]}",
    "def group_key_value(key_value_pairs):\n    grouped_dict = {}\n    for key, value in key_value_pairs:\n        if key in grouped_dict:\n            grouped_dict[key].append(value)\n        else:\n            grouped_dict[key] = [value]\n    return grouped_dict\n\n\nif __name__ == '__main__':\n    print(group_key_value([(1, 2), (1, 3), (2, 4), (2, 5), (2, 6), (3, 7), (3, 8)]))",
    "def group_key_value(sequence):\n    \"\"\"\n    >>> group_key_value([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)])\n    {'a': [1, 3], 'b': [2, 4], 'c': [5]}\n    \"\"\"\n    result = {}\n    for key, value in sequence:\n        result.setdefault(key, []).append(value)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def list_of_dict_to_dict_of_lists(list_of_dict):\n    \"\"\"\n    :param list_of_dict: list of dict\n    :return: dict of lists\n    \"\"\"\n    res = {}\n    for item in list_of_dict:\n        if item['key'] in res:\n            res[item['key']].append(item['value'])\n        else:\n            res[item['key']] = [item['value']]\n    return res\n\n\nif __name__ == '__main__':\n    list_of_dict = [\n        {'key': 'a', 'value': 1},\n        {'key': 'a', 'value': 2},\n        {'key': 'b', 'value': 3},\n        {'key': 'b', 'value': 4},\n        {'key': 'c', 'value': 5},\n        {'key': 'c', 'value': 6},\n    ]\n    res = list_of_dict_to_dict_of_lists(list_of_dict)\n    print(res)",
    "from typing import Iterable, Tuple\n\n\ndef group(items: Iterable[Tuple[str, str]]) -> dict:\n    \"\"\"Group a sequence of key-value pairs into a dictionary of lists.\n\n    >>> group([('foo', 1), ('bar', 2), ('foo', 3)])\n    {'foo': [1, 3], 'bar': [2]}\n    \"\"\"\n    result = {}\n\n    for key, value in items:\n        result.setdefault(key, []).append(value)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def group_pairs(pairs):\n    \"\"\"\n    >>> group_pairs([('foo', 1), ('bar', 2), ('foo', 2), ('baz', 2)])\n    {'foo': [1, 2], 'bar': [2], 'baz': [2]}\n    \"\"\"\n    groups = {}\n    for k, v in pairs:\n        groups[k] = groups.get(k, []) + [v]\n    return groups\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "from collections import defaultdict\n\n\ndef group_key_values(pairs):\n    result = defaultdict(list)\n    for key, value in pairs:\n        result[key].append(value)\n    return result\n\n\ndef test_group_key_values():\n    pairs = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"a\", 4), (\"c\", 1)]\n    expected = {\"a\": [1, 3, 4], \"b\": [2], \"c\": [1]}\n    assert group_key_values(pairs) == expected",
    "def group_by_keys(iterable):\n    # TODO: Implement me\n    pass\n\n\n# ## Unit Test\n\n# **The following unit test is expected to fail until you solve the challenge.**\n\n# In[ ]:\n\n\n# %load test_group_by_keys.py\nimport unittest\n\n\nclass TestGroupByKeys(unittest.TestCase):\n\n    def test_group_by_keys(self):\n        self.assertEqual(group_by_keys([]), {})\n        self.assertEqual(group_by_keys([('key', 'value')]), {'key': ['value']})\n        self.assertEqual(group_by_keys([('key', 'value1'), ('key', 'value2')]), {'key': ['value1', 'value2']})\n        self.assertEqual(group_by_keys([('key1', 'value1'), ('key2', 'value2')]), {'key1': ['value1'], 'key2': ['value2']})\n        self.assertEqual(group_by_keys([('key', 'value1'), ('key', 'value2'), ('key2', 'value3'), ('key2', 'value4')]), {'key': ['value1', 'value2'], 'key2': ['value3', 'value4']})\n        print('Success: test_group_by_keys')\n\n\ndef main():\n    test = TestGroupByKeys()\n    test.test_group_by_keys()\n\n\nif __name__ == '__main__':\n    main()\n\n\n# ## Solution Notebook\n# \n# Review the [Solution Notebook](http://nbviewer.ipython.org/github/donnemartin/interactive-coding-challenges/blob/master/arrays_strings/group_by_keys/group_by_keys_solution.ipynb) for a discussion on algorithms and code solutions.",
    "from collections import defaultdict\n\ndef group_seq(seq):\n    result = defaultdict(list)\n    for k, v in seq:\n        result[k].append(v)\n    return result\n\nif __name__ == '__main__':\n    seq = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)]\n    print(group_seq(seq))",
    "def group(pairs):\n    res = dict()\n    for key, value in pairs:\n        if key in res:\n            res[key].append(value)\n        else:\n            res[key] = [value]\n    return res\n\n\ndef test_group():\n    pairs = [\n        (\"key1\", 10),\n        (\"key2\", 20),\n        (\"key1\", 30),\n        (\"key1\", 40),\n        (\"key3\", 50),\n    ]\n    assert group(pairs) == {\n        \"key1\": [10, 30, 40],\n        \"key2\": [20],\n        \"key3\": [50],\n    }\n\n\nif __name__ == \"__main__\":\n    test_group()",
    "def group_list(list_of_tuples):\n    result = {}\n    for key, value in list_of_tuples:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(group_list([(\"name\", \"John\"), (\"age\", 18), (\"name\", \"Mary\"), (\"age\", 20)]))",
    "def group(items):\n    # type: (list) -> dict\n    \"\"\"Group key-value pairs into a dictionary of lists.\"\"\"\n    result = {}\n    for key, value in items:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result",
    "from typing import List, Tuple\n\n\ndef create_dict_of_lists(\n    key_value_pairs: List[Tuple[int, int]]\n) -> dict:\n    \"\"\"Return a dictionary of lists.\"\"\"\n    result = {}\n\n    for key, value in key_value_pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n\n    return result\n\n\nif __name__ == '__main__':\n    print(create_dict_of_lists([(1, 2), (2, 3), (2, 4), (2, 5)]))",
    "def group_pairs(pairs):\n    result = dict()\n\n    for key, value in pairs:\n        if key not in result:\n            result[key] = list()\n        result[key].append(value)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(group_pairs([('key1', 'value1'), ('key1', 'value2'), ('key2', 'value3')]))",
    "def pairs_to_dict(pairs):\n    # init dict\n    res = {}\n    # loop through pairs\n    for i in range(0, len(pairs), 2):\n        # get key and value\n        key = pairs[i]\n        value = pairs[i+1]\n        # append to list\n        if key in res:\n            res[key].append(value)\n        else:\n            res[key] = [value]\n    # return dict\n    return res\n\n\nprint(pairs_to_dict([\"key1\", \"val1\", \"key1\", \"val2\", \"key2\", \"val1\"]))",
    "from collections import defaultdict\n\n\ndef group_pairs(pairs):\n    \"\"\"Groups a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs: list of key-value pairs\n\n    Returns:\n        dict of lists\n    \"\"\"\n    result = defaultdict(list)\n    for pair in pairs:\n        result[pair[0]].append(pair[1])\n    return dict(result)\n\n\ndef test_group_pairs():\n    \"\"\"Test for group_pairs function.\"\"\"\n    assert group_pairs([\n        ('a', 1), ('a', 2), ('b', 3), ('b', 4), ('a', 5), ('c', 6)\n    ]) == {\n        'a': [1, 2, 5], 'b': [3, 4], 'c': [6]\n    }",
    "def group_pairs(seq):\n    # Your code here\n    d = {}\n    for i in range(0, len(seq), 2):\n        if seq[i] in d:\n            d[seq[i]].append(seq[i+1])\n        else:\n            d[seq[i]] = [seq[i+1]]\n    return d\n\nprint(group_pairs([\"key1\", \"val1\", \"key2\", \"val2\", \"key1\", \"val3\"]))",
    "def group_pairs(pairs):\n    # Initializing the dictionary\n    d = {}\n\n    # Iterating over the pairs\n    for pair in pairs:\n        # Extracting the key and value\n        key, value = pair\n        # If the key is in the dictionary\n        if key in d:\n            # Then append the value to the list\n            d[key].append(value)\n        else:\n            # If it is not in the dictionary, create a new list\n            # and add the value to the list\n            d[key] = [value]\n\n    # Returning the dictionary\n    return d\n\n\nif __name__ == '__main__':\n    pairs = [('key1', 'value1'), ('key2', 'value2'), ('key2', 'value3'), ('key3', 'value4'), ('key3', 'value5')]\n    print(group_pairs(pairs))",
    "def group_list(list):\n    d = {}\n    for x in list:\n        if x[0] not in d:\n            d[x[0]] = [x[1]]\n        else:\n            d[x[0]].append(x[1])\n    return d\n\nprint(group_list([('a', 1), ('a', 2), ('b', 3), ('a', 4)]))",
    "def group_pairs(pairs):\n    \"\"\"Return a dictionary of lists.\n\n    :param pairs: list of pairs\n    :type pairs: list[tuple[str, str]]\n    :return: dict of lists\n    :rtype: dict[str, list[str]]\n    \"\"\"\n    result = dict()\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"foo\", \"bar\"), (\"foo\", \"baz\"), (\"bar\", \"baz\")]\n    print(group_pairs(pairs))",
    "from collections import defaultdict\n\n\ndef create_dict_of_lists(list_of_tuples):\n    \"\"\"\n    >>> create_dict_of_lists([('a', 1), ('b', 2), ('a', 3)])\n    {'a': [1, 3], 'b': [2]}\n    \"\"\"\n    dictionary = defaultdict(list)\n    for key, value in list_of_tuples:\n        dictionary[key].append(value)\n    return dictionary\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def group_pairs(pairs):\n    \"\"\"\n    :param pairs: list of tuples in the form of (key, value)\n    :return: dict of lists\n    \"\"\"\n    grouped = {}\n    for pair in pairs:\n        if pair[0] in grouped:\n            grouped[pair[0]].append(pair[1])\n        else:\n            grouped[pair[0]] = [pair[1]]\n    return grouped\n\n\nprint(group_pairs([(\"a\", 1), (\"b\", 2), (\"a\", 3)]))\nprint(group_pairs([(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4)]))\nprint(group_pairs([(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4), (\"d\", 5)]))",
    "from typing import List, Tuple\n\n\ndef group_pairs(pairs: List[Tuple[str, int]]) -> dict:\n    \"\"\"Groups a sequence of key-value pairs into a dictionary of lists.\n\n    Args:\n        pairs (List[Tuple[str, int]]): a list of key-value pairs\n\n    Examples:\n        >>> group_pairs([(\"key1\", 1), (\"key2\", 2), (\"key1\", 3)])\n        {\"key1\": [1, 3], \"key2\": [2]}\n\n    Returns:\n        dict: a dictionary of lists\n    \"\"\"\n    grouped_pairs = {}\n    for key, value in pairs:\n        if key not in grouped_pairs:\n            grouped_pairs[key] = []\n        grouped_pairs[key].append(value)\n    return grouped_pairs\n\n\nif __name__ == \"__main__\":\n    print(group_pairs([(\"key1\", 1), (\"key2\", 2), (\"key1\", 3)]))",
    "def group_pairs(pairs):\n    \"\"\"\n    :param pairs: list of key-value pairs\n    :return: dictionary of lists\n    \"\"\"\n    dict_pairs = {}\n\n    for pair in pairs:\n        key, value = pair\n\n        if key in dict_pairs:\n            dict_pairs[key].append(value)\n        else:\n            dict_pairs[key] = [value]\n\n    return dict_pairs\n\n\nprint(group_pairs([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key2\", \"value3\"), (\"key2\", \"value4\"), (\"key3\", \"value5\")]))",
    "def group(pairs):\n    result = {}\n    for key, value in pairs:\n        result.setdefault(key, []).append(value)\n    return result\n\n\nprint(group([(1, \"a\"), (2, \"b\"), (1, \"c\"), (1, \"d\"), (2, \"e\")]))",
    "def group_by(l):\n    \"\"\"\n    >>> group_by([(1, 1), (1, 2), (1, 3), (2, 10), (2, 20), (3, 100)])\n    {1: [1, 2, 3], 2: [10, 20], 3: [100]}\n    >>> group_by([(1, 1), (1, 2), (2, 10), (2, 20), (3, 100), (1, 3)])\n    {1: [1, 2, 3], 2: [10, 20], 3: [100]}\n    \"\"\"\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def group_by(seq):\n    result = {}\n    for key, value in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n\ndef test_group_by():\n    assert group_by([('a', 1), ('a', 2), ('b', 3), ('a', 4), ('c', 5)]) == {\n        'a': [1, 2, 4],\n        'b': [3],\n        'c': [5]\n    }\n    assert group_by([('a', 'a'), ('a', 'b'), ('b', 'c'), ('a', 'd'), ('c', 'e')]) == {\n        'a': ['a', 'b', 'd'],\n        'b': ['c'],\n        'c': ['e']\n    }\n\n\nif __name__ == '__main__':\n    test_group_by()",
    "from typing import List, Tuple, Dict\n\n\ndef group_key_value_pairs(key_value_pairs: List[Tuple[str, str]]) -> Dict[str, List[str]]:\n    \"\"\"Groups key-value pairs into a dictionary.\n\n    Args:\n        key_value_pairs: list of tuples\n\n    Returns:\n        Dictionary with keys and values grouped.\n    \"\"\"\n    result: Dict[str, List[str]] = {}\n\n    for key, value in key_value_pairs:\n        if key not in result:\n            result[key] = []\n\n        result[key].append(value)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(group_key_value_pairs([(\"a\", 1), (\"a\", 2), (\"b\", 3)]))",
    "def create_dictionary(sequence):\n    dictionary = {}\n    for index, element in enumerate(sequence):\n        if element[0] not in dictionary:\n            dictionary[element[0]] = []\n        dictionary[element[0]].append(element[1])\n    return dictionary\n\n\nif __name__ == '__main__':\n    sequence = [('name', 'Andrei'), ('name', 'Mihai'), ('age', 35), ('age', 25)]\n    print(create_dictionary(sequence))",
    "def group_pairs(pairs):\n    \"\"\"Return a dictionary of lists, where each key is a unique value from pairs.\n\n    >>> pairs = [(1, 2), (2, 3), (2, 4), (4, 5)]\n    >>> group_pairs(pairs)\n    {1: [2], 2: [3, 4], 4: [5]}\n    \"\"\"\n    d = {}\n    for key, value in pairs:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\ndef group_pairs_alt(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt2(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt3(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt4(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt5(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt6(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt7(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_pairs_alt8(pairs):\n    d = {}\n    for key, value in pairs:\n        d.setdefault(key, []",
    "def group_pairs(pairs):\n    d = {}\n    for (key, value) in pairs:\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\n\ndef test_group_pairs():\n    assert group_pairs([(1, 2), (2, 3), (2, 4), (1, 3)]) == {1: [2, 3], 2: [3, 4]}\n\n\nif __name__ == \"__main__\":\n    test_group_pairs()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}