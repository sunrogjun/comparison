{
  "problem": {
    "task_id": "MBPP/279",
    "prompt": "Write a function to find the nth decagonal number.",
    "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
    "test_list": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ],
    "challenge_test_list": [],
    "problem_id": 268
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Pure-Python reference implementation\ndef nth_decagonal_number(n):\n    \"\"\"Finds the nth decagonal number.\n\n    Args:\n        n: An integer\n    Returns:\n        The nth decagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    return n * (4 * n - 3)\n\n# Pure-Python optimized implementation\ndef nth_decagonal_number_fast(n):\n    \"\"\"Finds the nth decagonal number.\n\n    Args:\n        n: An integer\n    Returns:\n        The nth decagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    if n == 0:\n        return 0\n    return (n * (n + 1) / 2)**2",
    "def nth_decagonal_number(n):\n    return n * (2 * n - 1)",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \n    :param n: int - a number\n    :return: int - nth decagonal number\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef test_nth_decagonal_number():\n    \"\"\"Test for nth_decagonal_number function.\"\"\"\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(2) == 6\n    assert nth_decagonal_number(5) == 25\n    assert nth_decagonal_number(10) == 55\n    assert nth_decagonal_number(20) == 125\n\n\nif __name__ == \"__main__\":\n    test_nth_decagonal_number()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(25)\n    125\n    >>> nth_decagonal_number(3.42)\n    231.86\n    >>> nth_decagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(-17)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(None)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(False)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(True)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number([])\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number([3])\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number({})\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number({3: 3})\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(3.7+2.8i)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number('3')\n    Traceback (most recent call last):",
    "def nth_decagonal_number(n):\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(20)\n    120\n    >>> nth_decagonal_number(30)\n    180\n    >>> nth_decagonal_number(40)\n    240\n    >>> nth_decagonal_number(50)\n    300\n    >>> nth_decagonal_number(60)\n    360\n    >>> nth_decagonal_number(70)\n    420\n    >>> nth_decagonal_number(80)\n    480\n    >>> nth_decagonal_number(90)\n    540\n    >>> nth_decagonal_number(100)\n    600\n    \"\"\"\n    return (3 * (n ** 2) - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))\n    print(nth_decagonal_number(10))",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)",
    "import math\n\n\n# @param {number} n\n# @return {number}\ndef nth_decagonal_number(n):\n    # center = (1 + math.sqrt(5)) / 2\n    # return int(math.floor(center * n * (center * n - 1)))\n    return int(n * (2 * n - 1) * (2 * n - 1))\n\n\nprint(nth_decagonal_number(100))",
    "def nth_decagonal(n):\n    return (n * (2 * n - 1)) // 2",
    "def nth_decagonal_number(n):\n    return (n * (2 * n - 1))",
    "# def nth_decagonal_number(n):\n#     return n * (4 * n - 3)\n\ndef nth_decagonal_number(n):\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(i, nth_decagonal_number(i))",
    "def nth_decagonal_number(n: int):\n    \"\"\"\n    :param n: Nth decagonal number.\n    :return: the nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(100)\n    5050\n    >>> nth_decagonal_number(1000)\n    500500\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Returns the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    100\n    >>> nth_decagonal_number(20)\n    200\n    >>> nth_decagonal_number(30)\n    270\n    >>> nth_decagonal_number(40)\n    360\n    >>> nth_decagonal_number(50)\n    450\n    >>> nth_decagonal_number(60)\n    540\n    >>> nth_decagonal_number(70)\n    630\n    >>> nth_decagonal_number(80)\n    720\n    >>> nth_decagonal_number(90)\n    820\n    >>> nth_decagonal_number(100)\n    921\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    return int(((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))",
    "def find_nth_decagonal_number(n):\n    \"\"\"\n    >>> find_nth_decagonal_number(4)\n    84\n    >>> find_nth_decagonal_number(2)\n    12\n    >>> find_nth_decagonal_number(1)\n    4\n    \"\"\"\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Return the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    109\n    >>> nth_decagonal_number(20)\n    221\n    >>> nth_decagonal_number(30)\n    261\n    >>> nth_decagonal_number(40)\n    313\n    >>> nth_decagonal_number(50)\n    371\n    >>> nth_decagonal_number(60)\n    433\n    >>> nth_decagonal_number(70)\n    495\n    >>> nth_decagonal_number(80)\n    557\n    >>> nth_decagonal_number(90)\n    619\n    >>> nth_decagonal_number(100)\n    681\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    \"\"\"\n    return (3 * (n ** 2) - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: the position of the decagonal number\n    :return: the nth decagonal number\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(20)\n    160\n    >>> nth_decagonal_number(30)\n    240\n    >>> nth_decagonal_number(40)\n    320\n    >>> nth_decagonal_number(50)\n    400\n    >>> nth_decagonal_number(60)\n    480\n    >>> nth_decagonal_number(100)\n    1000\n    >>> nth_decagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(3.4)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(True)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(False)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Returns the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    104\n    >>> nth_decagonal_number(20)\n    254\n    >>> nth_decagonal_number(30)\n    373\n    >>> nth_decagonal_number(40)\n    504\n    >>> nth_decagonal_number(50)\n    654\n    >>> nth_decagonal_number(60)\n    824\n    >>> nth_decagonal_number(70)\n    1024\n    >>> nth_decagonal_number(80)\n    1254\n    >>> nth_decagonal_number(90)\n    1504\n    >>> nth_decagonal_number(100)\n    1824\n\n    \"\"\"\n    return (3 * n**2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(100)\n    5050\n    \"\"\"\n    return n * ((2 * n) - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\n# n^2 - n + (2n - 2) + 1 = n^2 + n - 1\ndef nth_decagonal_number(n):\n    return int((n * (n ** 2 - 1)) / 2)\n\n\ndef test_nth_decagonal_number():\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(5) == 15\n    assert nth_decagonal_number(100) == 5050\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(int(input().strip())))",
    "# nth decagonal number\ndef nth_decagonal(n: int) -> int:\n    \"\"\"\n    :param n: int - an integer\n    :return: int - return the nth decagonal number\n    >>> nth_decagonal(1)\n    1\n    >>> nth_decagonal(10)\n    60\n    >>> nth_decagonal(20)\n    120\n    >>> nth_decagonal(50)\n    300\n    >>> nth_decagonal(100)\n    750\n    >>> nth_decagonal(250)\n    2250\n    \"\"\"\n    return (n * (n * 2 - 1)) // 3\n\n\n# Tests\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    The nth decagonal number is the nth number in the\n    sequence 4n^2 - 3n.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_decagonal_number(n))",
    "import math\n\n\n# n = 1, 2, ...\n# d(n) = n*(2n - 1)\n# d(1) = 1, d(2) = 4, d(3) = 9, ...\n\n\ndef nth_decagonal_number(n):\n    return n * (2*n - 1)\n\n\ndef test_decagonal_number(n):\n    return n * (n - 1)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(test_decagonal_number(n))",
    "import math\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n    \"\"\"\n    return ((3 * n ** 2 - n) / 2)\n\ndef main():\n    \"\"\"\n    Print the first 10 decagonal numbers.\n    \"\"\"\n    print \"10 decagonal numbers: \"\n    for i in range(1, 11):\n        print nth_decagonal_number(i)\n\nif __name__ == '__main__':\n    main()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    :param n: int - an integer representing the position of the decagonal number.\n    :return: int - the nth decagonal number.\n    \"\"\"\n\n    # Your code here\n    return n * n * (5 * n - 3) // 3\n\n\nif __name__ == '__main__':\n    print(nth_decagonal_number(20))",
    "# def nth_decagonal_number(n):\n#     \"\"\"\n#     :param n: int - an integer\n#     :return: int - nth decagonal number\n#     \"\"\"\n#     return int((n * (2 * n - 1)) ** 0.5)\n\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - nth decagonal number\n    \"\"\"\n    return n * (4 * n - 3) // 3",
    "def nth_decagonal(n):\n    \"\"\"\n    n: int - an integer\n    returns: the nth decagonal number\n    \"\"\"\n    return n * ((2 * n) - 1)\n\n\nprint(nth_decagonal(1))",
    "def nth_decagonal_number(n):\n    return (n * (2 * n - 1))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(nth_decagonal_number(n))",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3",
    "def nth_decagonal(n):\n    return (n*(n*3+1))//2\n\ndef main():\n    for i in range(1, 11):\n        print(f\"The {i}th decagonal number is {nth_decagonal(i)}\")\n\nif __name__ == \"__main__\":\n    main()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    54\n    >>> nth_decagonal_number(25)\n    125\n    >>> nth_decagonal_number(50)\n    3025\n    >>> nth_decagonal_number(75)\n    5150\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    55\n    >>> nth_decagonal_number(100)\n    46200\n    >>> nth_decagonal_number(1000)\n    487000\n    >>> nth_decagonal_number(10000)\n    52524500\n    \"\"\"\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# The nth decagonal number is the nth term in the triangle number sequence.\n# For example, the 5th decagonal number is 15, and is the 10th term in the\n# triangle number sequence.\n# The sequence looks like this:\n#     1, 4, 10, 20, 35, 56, 78, 101, 130, 165, 196, 231, 270, 313, 362, 409, 464, 525\n\n\ndef decagonal_number(n):\n    \"\"\"Returns the nth decagonal number.\"\"\"\n    return n * (n * 2 - 1)\n\n\ndef main():\n    n = 5\n    result = decagonal_number(n)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: Number of decagonal number.\n    :return: The nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    64\n    >>> nth_decagonal_number(20)\n    128\n    >>> nth_decagonal_number(30)\n    196\n    >>> nth_decagonal_number(40)\n    256\n    >>> nth_decagonal_number(50)\n    324\n    >>> nth_decagonal_number(60)\n    400\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef nth_decagonal_number(n):\n    return int((math.sqrt(1 + 24 * n) + 1) / 6)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))",
    "import math\n\n\n# pylint: disable=invalid-name\ndef nth_decagonal_number(n):\n    \"\"\"\n    :param n: int the nth decagonal number to find\n    :return: int the nth decagonal number\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) / 2)",
    "def nth_decagonal(n):\n    return n * n * (5 * n - 3) // 3\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal(1))\n    print(nth_decagonal(2))\n    print(nth_decagonal(3))\n    print(nth_decagonal(4))\n    print(nth_decagonal(5))\n    print(nth_decagonal(10))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: the nth decagonal number\n    :return: the nth decagonal number\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    >>> nth_decagonal_number(10)\n    100\n    >>> nth_decagonal_number(20)\n    200\n    >>> nth_decagonal_number(30)\n    300\n    >>> nth_decagonal_number(40)\n    400\n    >>> nth_decagonal_number(50)\n    500\n    >>> nth_decagonal_number(60)\n    600\n    >>> nth_decagonal_number(70)\n    700\n    >>> nth_decagonal_number(80)\n    800\n    >>> nth_decagonal_number(90)\n    900\n    >>> nth_decagonal_number(100)\n    1000\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    nth decagonal number is n * (4n - 3) / 3.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    55\n    >>> nth_decagonal_number(20)\n    165\n    >>> nth_decagonal_number(22)\n    231\n    >>> nth_decagonal_number(100)\n    5050\n    \"\"\"\n    return n * (4 * n - 3) // 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    return (n * (2 * n - 1))\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(nth_decagonal_number(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# 1, 4, 10, 20, 35, 56, 78, 101, 130, 165, 196, 235, ...\n\n\ndef nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(6)\n    23\n    >>> nth_decagonal_number(20)\n    78\n    >>> nth_decagonal_number(21)\n    84\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    return int(((1 + 24 * n) ** 0.5 - 1) / 2)",
    "def nth_decagonal(n):\n    return n*(4*n - 3)//3\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal(1))\n    print(nth_decagonal(2))\n    print(nth_decagonal(10))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    This is the same as the nth triangular number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    \"\"\"\n    return (n * (n * (n + 1)) // 2) + (n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - return the nth decagonal number\n    ---------------------------------------------\n    decagonal number:  1, 5, 16, 41, 80, ...\n\n    Decagonal number formula:\n    n*(3n-1)/2 = 1, 5, 16, 41, 80, ...\n    \"\"\"\n    return int(((3 * n) - 1) * n / 2)\n\n\ndef test_decagonal_number():\n    \"\"\"Test for nth decagonal number function.\"\"\"\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(5) == 16\n    assert nth_decagonal_number(6) == 28\n    assert nth_decagonal_number(10) == 110\n    assert nth_decagonal_number(15) == 165\n    assert nth_decagonal_number(25) == 415\n    assert nth_decagonal_number(35) == 660\n    assert nth_decagonal_number(45) == 915\n    assert nth_decagonal_number(55) == 1210\n    assert nth_decagonal_number(65) == 1521\n    assert nth_decagonal_number(75) == 1840\n    assert nth_decagonal_number(85) == 2165\n    assert nth_decagonal_number(95) == 2491\n    assert nth_decagonal_number(100) == 2821\n\n\nif __name__ == '__main__':\n    test_decagonal_number()",
    "def nthDecagonalNumber(n):\n    return n * (4 * n - 3)\n\nprint(nthDecagonalNumber(1))\nprint(nthDecagonalNumber(2))\nprint(nthDecagonalNumber(3))\nprint(nthDecagonalNumber(4))\nprint(nthDecagonalNumber(5))\nprint(nthDecagonalNumber(6))\nprint(nthDecagonalNumber(7))\nprint(nthDecagonalNumber(8))\nprint(nthDecagonalNumber(9))\nprint(nthDecagonalNumber(10))",
    "import math\n\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(100)\n    5050\n    >>> nth_decagonal_number(500)\n    12500\n    >>> nth_decagonal_number(1000)\n    30030\n    >>> nth_decagonal_number(10000)\n    150150\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - an integer\n    \"\"\"\n    return n * (n * 2 - 1)\n\n\nif __name__ == '__main__':\n    print(nth_decagonal_number(1))",
    "def nth_decagonal_number(n):\n    return n * (2 * n - 1)\n\n\nif __name__ == '__main__':\n    print(nth_decagonal_number(1))",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3)",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n ** 2 + (n - 1)) // 2",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n * (2 * n - 1)) // 2",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    return (n * (n * 2 + 1)) // 3\n\n\ndef main():\n    n = int(input('Input n: '))\n    print(f'The {n}th decagonal number is {nth_decagonal_number(n)}.')\n\n\nif __name__ == '__main__':\n    main()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Returns the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(5)\n    15\n    >>> nth_decagonal_number(25)\n    125\n    >>> nth_decagonal_number(111)\n    6565\n    >>> nth_decagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(-17)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(-2.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number(2.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_decagonal_number('abc')\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Find the nth decagonal number.\n    :param n: int\n    :return: int\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    54\n    >>> nth_decagonal_number(100)\n    4620\n    >>> nth_decagonal_number(1000)\n    53852\n    >>> nth_decagonal_number(10000)\n    61760\n    >>> nth_decagonal_number(2)\n    4\n    \"\"\"\n    return n * (n * 2 - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
    "def nth_decagonal_number(n):\n    return n*(2*n - 1)\n\n\ndef test_decagonal_number():\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(2) == 6\n    assert nth_decagonal_number(3) == 15\n    assert nth_decagonal_number(4) == 28\n    assert nth_decagonal_number(5) == 45",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return int(((9 * n ** 2) - (n - 1) ** 2) / 4)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))\n    print(nth_decagonal_number(5))",
    "# @param {number} n\n# @return {number}\ndef nth_decagonal_number(n):\n    return n * (2 * n - 1)",
    "def nth_decagonal(n: int) -> int:\n    \"\"\"\n    :param n: int\n    :return: int\n    >>> nth_decagonal(1)\n    1\n    >>> nth_decagonal(10)\n    143\n    >>> nth_decagonal(20)\n    293\n    >>> nth_decagonal(30)\n    462\n    >>> nth_decagonal(40)\n    655\n    >>> nth_decagonal(50)\n    872\n    >>> nth_decagonal(60)\n    1123\n    \"\"\"\n    return n * ((2 * n) - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def find_nth_decagonal_number(n):\n    return (n * (2 * n - 1)) ** 0.5\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_nth_decagonal_number(i))",
    "import math\n\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    Find the nth decagonal number.\n    \"\"\"\n    return int((math.sqrt(40 * n + 9) - 5) / 4)",
    "def nth_decagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef test_decagonal_number():\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(20)\n    288\n    >>> nth_decagonal_number(100)\n    5050\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Finds the nth decagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 3",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3\n\n\ndef test_decagonal_number():\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    >>> nth_decagonal_number(6)\n    36\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import math\n\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    Finds the nth decagonal number.\n    \"\"\"\n    return int((math.sqrt(8*n + 1) - 1) / 2)\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(nth_decagonal_number(i))",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\ndef test_decagonal_numbers():\n    \"\"\"\n    Tests decagonal numbers against a list of expected results.\n    \"\"\"\n    tests = [\n        (1, 1),\n        (2, 4),\n        (3, 9),\n        (4, 16),\n        (5, 25),\n        (6, 36),\n        (7, 49),\n        (8, 64),\n        (9, 81),\n        (10, 100),\n        (11, 121),\n        (12, 144),\n        (13, 169),\n        (14, 196),\n        (15, 225),\n        (16, 256),\n        (17, 289),\n        (18, 324),\n        (19, 361),\n        (20, 400),\n        (21, 441),\n        (22, 484),\n        (23, 529),\n        (24, 576),\n        (25, 625),\n        (26, 676),\n        (27, 729),\n        (28, 784),\n        (29, 841),\n        (30, 900),\n        (31, 961),\n        (32, 1024),\n        (33, 1089),\n        (34, 1156),\n        (35, 1225),\n        (36, 1296),\n        (37, 1369),\n        (38, 1444),\n        (39, 1521),\n        (40, 1600),",
    "import math\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    Find the nth decagonal number\n    \"\"\"\n    return math.ceil((math.sqrt(40 * n - 7) + 1) / 2)\n\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    n = int(input(\"Enter the nth decagonal number: \"))\n    print(f\"The {n}th decagonal number is {nth_decagonal_number(n)}.\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3)",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3)",
    "# Please print out first 10 decagonal numbers.\n\ndef find_decagonal_number(n):\n    \"\"\"\n    Finds the nth decagonal number\n    :param n: the nth number to find\n    :return: the nth decagonal number\n    \"\"\"\n    return (n * (n * 2 - 1)) // 3\n\n\ndef main():\n    for i in range(1, 11):\n        print(find_decagonal_number(i))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def nth_decagonal_number(n):\n    return int((n ** 2 + (3 * n) - 2) / 2)\n\n\ndef test_decagonal_number():\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(5)\n    15\n    >>> nth_decagonal_number(10)\n    70\n    >>> nth_decagonal_number(100)\n    5050\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "import math\n\n\ndef nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef nth_decagonal_number_formula(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (n * n - n) // 2\n\n\ndef nth_decagonal_number_math(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * n * (3 * n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    nth_decagonal_number(1) == 1\n    nth_decagonal_number(2) == 4\n    nth_decagonal_number(3) == 9\n    nth_decagonal_number(4) == 16\n    nth_decagonal_number(5) == 25\n    nth_decagonal_number(6) == 36\n    nth_decagonal_number(7) == 49\n    nth_decagonal_number(8) == 64\n    nth_decagonal_number(9) == 81\n    nth_decagonal_number(10) == 100\n\n    nth_decagonal_number_formula(1) == 1\n    nth_decagonal_number_formula(2) == 4\n    nth_decagonal_number_formula(3) == 9\n    nth_decagonal_number_formula(4) == 16\n    nth_decagonal_number_formula(5) == 25\n    nth_decagonal_number_formula(6) == 36\n    nth_decagonal_number_formula(7) == 49",
    "def nth_decagonal_number(n):\n    return (n * (2 * n - 1))\n\n\ndef test_decagonal_number():\n    \"\"\"\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    >>> nth_decagonal_number(6)\n    36\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_decagonal_number()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    n is the number of decagonal numbers to find.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(6)\n    21\n    >>> nth_decagonal_number(12)\n    60\n    >>> nth_decagonal_number(21)\n    125\n    >>> nth_decagonal_number(32)\n    220\n    >>> nth_decagonal_number(33)\n    255\n    >>> nth_decagonal_number(100)\n    5050\n    >>> nth_decagonal_number(200)\n    10100\n    >>> nth_decagonal_number(300)\n    15150\n    >>> nth_decagonal_number(400)\n    22225\n    >>> nth_decagonal_number(500)\n    31315\n    >>> nth_decagonal_number(1000)\n    50505\n    >>> nth_decagonal_number(2000)\n    101010\n    >>> nth_decagonal_number(3000)\n    151515\n    >>> nth_decagonal_number(4000)\n    222225\n    \"\"\"\n    return (3 * (n ** 2) - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)",
    "import math\n\n\n# @param {number} n\n# @return {number}\ndef find_nth_decagonal_number(n):\n    return n * (2 * n - 1)\n\n\n# @param {number} n\n# @return {number}\ndef find_nth_decagonal_number_v2(n):\n    return int(math.pow(n, 2) + n * (n - 1))",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    >>> nth_decagonal_number(6)\n    36\n    >>> nth_decagonal_number(7)\n    49\n    >>> nth_decagonal_number(8)\n    64\n    >>> nth_decagonal_number(9)\n    81\n    >>> nth_decagonal_number(10)\n    100\n    \"\"\"\n    return int(((9 * n * n) - (18 * n) + 10) / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    n is 1-indexed.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(6)\n    21\n    >>> nth_decagonal_number(21)\n    75\n    >>> nth_decagonal_number(123456)\n    7652804\n    \"\"\"\n    if n < 0:\n        raise ValueError(f\"n must be >= 0, got {n}\")\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))\n    print(nth_decagonal_number(2))\n    print(nth_decagonal_number(3))\n    print(nth_decagonal_number(4))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Returns the nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    196\n    >>> nth_decagonal_number(20)\n    798\n    >>> nth_decagonal_number(30)\n    1672\n    >>> nth_decagonal_number(40)\n    2592\n    \"\"\"\n    return n * (4 * n - 3) // 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: position of decagonal number.\n    :return: nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(5)\n    15\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(100)\n    5050\n    >>> nth_decagonal_number(200)\n    10200\n    >>> nth_decagonal_number(1000)\n    500500\n    >>> nth_decagonal_number(2000)\n    104000\n    >>> nth_decagonal_number(10000)\n    50005000\n    >>> nth_decagonal_number(20000)\n    1060000\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    n = int(input(\"Enter the position of decagonal number: \").strip())\n    result = nth_decagonal_number(n)\n    print(\"The\", n, \"th decagonal number is\", result)",
    "import math\n\n\ndef nth_decagonal_number(n):\n    return math.floor((math.sqrt(8*n + 1) - 1)/2)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))",
    "def nth_decagonal_number(n):\n    return n * (4 * n - 3) // 3",
    "def find_nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    The nth decagonal number is the number of decagonal numbers less than n.\n\n    The formula for finding the nth decagonal number is n * (4n - 3) / 2.\n    \"\"\"\n    return n * (4 * n - 3) // 2\n\n\nif __name__ == \"__main__\":\n    print(find_nth_decagonal_number(1))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(2)\n    4\n    >>> nth_decagonal_number(3)\n    9\n    >>> nth_decagonal_number(4)\n    16\n    >>> nth_decagonal_number(5)\n    25\n    >>> nth_decagonal_number(6)\n    36\n    >>> nth_decagonal_number(7)\n    49\n    >>> nth_decagonal_number(8)\n    64\n    >>> nth_decagonal_number(9)\n    81\n    >>> nth_decagonal_number(10)\n    100\n    >>> nth_decagonal_number(11)\n    121\n    >>> nth_decagonal_number(12)\n    144\n    >>> nth_decagonal_number(20)\n    282\n    >>> nth_decagonal_number(21)\n    313\n    >>> nth_decagonal_number(22)\n    345\n    >>> nth_decagonal_number(100)\n    5050\n    >>> nth_decagonal_number(101)\n    5376\n    >>> nth_decagonal_number(102)\n    5701\n    >>> nth_decagonal_number(103)\n    5927\n    >>> nth_decagonal_number(104)\n    6154\n    >>> nth_decagonal_number(105)\n    6381\n    >>> nth_decagonal_number(106)\n    6608\n    >>> nth_decagonal_number(107)\n    6835\n    >>> nth_decagonal_number(108)\n    7062",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    n: the number of the decagonal number to find.\n    return: the nth decagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(1))",
    "def nth_decagonal_number(n):\n    return n*(4*n - 3)//3\n\n\nif __name__ == '__main__':\n    print(nth_decagonal_number(1))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"Returns the nth decagonal number.\n\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    60\n    >>> nth_decagonal_number(20)\n    120\n    >>> nth_decagonal_number(30)\n    180\n    >>> nth_decagonal_number(40)\n    240\n    >>> nth_decagonal_number(50)\n    300\n    >>> nth_decagonal_number(60)\n    360\n    >>> nth_decagonal_number(70)\n    420\n    >>> nth_decagonal_number(80)\n    480\n    >>> nth_decagonal_number(90)\n    540\n    >>> nth_decagonal_number(100)\n    600\n    \"\"\"\n    return int(((9 * n ** 2 - 9 * n + 2) * n) / 6)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
    "def nth_decagonal_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - an integer\n    \"\"\"\n    return n * (4 * n - 3)\n\n\nprint(nth_decagonal_number(1))\nprint(nth_decagonal_number(10))",
    "def nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(6) == 28",
    "def nth_decagonal_number(n):\n    return ((2 * n) ** 2 - 7 * n) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, nth_decagonal_number(i))",
    "# 1 = 1, 2 = 8, 3 = 21, 4 = 34, 5 = 49, 6 = 64, 7 = 81, 8 = 100, 9 = 121\n\ndef nth_decagonal_number(n):\n    return (n * n * (3 * n - 1)) // 2\n\n\nif __name__ == '__main__':\n    print(nth_decagonal_number(1))\n    print(nth_decagonal_number(2))\n    print(nth_decagonal_number(3))\n    print(nth_decagonal_number(4))\n    print(nth_decagonal_number(5))\n    print(nth_decagonal_number(6))\n    print(nth_decagonal_number(7))\n    print(nth_decagonal_number(8))\n    print(nth_decagonal_number(9))",
    "import math\n\n\ndef nth_decagonal_number(n):\n    return (n * (2 * n - 1))\n\n\ndef test_decagonal_number():\n    assert nth_decagonal_number(1) == 1\n    assert nth_decagonal_number(5) == 15\n    assert nth_decagonal_number(10) == 60\n    assert nth_decagonal_number(100) == 5050\n    assert nth_decagonal_number(500) == 255025\n    assert nth_decagonal_number(1000) == 100100\n    print(\"All test passed!\")\n\n\nif __name__ == \"__main__\":\n    test_decagonal_number()",
    "import math\n\n\"\"\"\n1 4 10 20 35 56 77 100 134 170 214\n\"\"\"\n\n\ndef nth_decagonal_number(n):\n    return (3*n*n - n)//2\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(100000))",
    "def nth_decagonal_number(n):\n    \"\"\"\n    Finds the nth decagonal number.\n    :param n: number of decagonal number to find.\n    :return: nth decagonal number.\n    >>> nth_decagonal_number(1)\n    1\n    >>> nth_decagonal_number(10)\n    54\n    >>> nth_decagonal_number(20)\n    286\n    >>> nth_decagonal_number(30)\n    462\n    >>> nth_decagonal_number(40)\n    660\n    >>> nth_decagonal_number(50)\n    890\n    >>> nth_decagonal_number(100)\n    1774\n    >>> nth_decagonal_number(1000)\n    1048576\n    >>> nth_decagonal_number(10000)\n    1000000000\n    >>> nth_decagonal_number(100000)\n    10000000000\n    >>> nth_decagonal_number(1000000)\n    100000000000\n    >>> nth_decagonal_number(10000000)\n    1000000000000\n    >>> nth_decagonal_number(100000000)\n    10000000000000\n    >>> nth_decagonal_number(1000000000)\n    100000000000000\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def nth_decagonal_number(n):\n    return ((9 * n ** 2 - 9 * n) / 4)\n\n\nif __name__ == \"__main__\":\n    print(nth_decagonal_number(10))",
    "def nth_decagonal(n):\n    return n * (n * 2 - 1)\n\n\nif __name__ == '__main__':\n    print(nth_decagonal(1))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}