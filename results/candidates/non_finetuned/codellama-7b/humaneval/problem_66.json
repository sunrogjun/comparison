{
  "problem": {
    "task_id": "HumanEval/66",
    "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
    "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
    "entry_point": "digitSum",
    "docstring": "",
    "problem_id": 66
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "return sum(ord(x) for x in s if ord(x) > 64)\n\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\nif __name__ == '__main__':\n    test_digit_sum()",
    "# 1st-way\n    # return sum(ord(i) for i in s if i.isupper())\n\n    # 2nd-way\n    return sum(ord(i) for i in s if 65 <= ord(i) <= 90)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(\"\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "return sum(map(lambda char: ord(char), filter(lambda char: char.isupper(), s)))",
    "# Write your code here\n    return sum([ord(x) for x in s if x.isupper()])",
    "# 1st-way\n    # return sum([ord(x) for x in s if x.isupper()])\n\n    # 2nd-way\n    # return sum(map(ord, filter(str.isupper, s)))\n\n    # 3rd-way\n    return sum(map(ord, filter(str.isupper, s)))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(\"\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "return sum([ord(c) for c in s if c.isupper()])",
    "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
    "return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum2(\"\") => 0\n        digitSum2(\"abAB\") => 131\n        digitSum2(\"abcCd\") => 67\n        digitSum2(\"helloE\") => 69\n        digitSum2(\"woArBld\") => 131\n        digitSum2(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())",
    "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "result = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            result += ord(s[i])\n    return result\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            result += ord(s[i])\n    return result\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for i in s:\n        if i >= 'A' and i <= 'Z':\n            result += ord(i)\n    return result\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digit",
    "return sum([ord(i) for i in s if i.isupper()])",
    "return sum([ord(c) for c in s if c.isupper()])\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "return sum([ord(x) for x in s if 'A' <= x <= 'Z'])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum([ord(x) for x in s if x.isupper()])",
    "# return sum([ord(s) for s in s if s.isupper()])\n    return sum(ord(s) for s in s if s.isupper())",
    "sum = 0\n    for ch in s:\n        if 'A' <= ch <= 'Z':\n            sum += ord(ch) - ord('A') + 1\n    return sum\n\n\ndef test_digit_sum():\n    assert digitSum('') == 0\n    assert digitSum('abAB') == 131\n    assert digitSum('abcCd') == 67\n    assert digitSum('helloE') == 69\n    assert digitSum('woArBld') == 131\n    assert digitSum('aAaaaXa') == 153",
    "return sum([ord(c) for c in s if c.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum(ord(x) for x in s if x.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\")) # 0\n    print(digitSum(\"abAB\")) # 131\n    print(digitSum(\"abcCd\")) # 67\n    print(digitSum(\"helloE\")) # 69\n    print(digitSum(\"woArBld\")) # 131\n    print(digitSum(\"aAaaaXa\")) # 153",
    "return sum([ord(c) for c in s if c.isupper()])",
    "sum = 0\n    for c in s:\n        if ord(c) >= ord('A') and ord(c) <= ord('Z'):\n            sum += ord(c)\n    return sum\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum('') == 0, \"Empty string\"\n    assert digitSum('abA') == 131, \"abA\"\n    assert digitSum('aBcC') == 131, \"aBcC\"\n    assert digitSum('aBcd') == 131, \"aBcd\"\n    assert digitSum('aBcDe') == 131, \"aBcDe\"\n    assert digitSum('aBcD1e') == 131, \"aBcD1e\"\n    assert digitSum('aBcD1eF') == 131, \"aBcD1eF\"\n    assert digitSum('aBcDe1F') == 131, \"aBcDe1F\"\n    assert digitSum('aBcDe1Fg') == 131, \"aBcDe1Fg\"\n    assert digitSum('aBcDe1FgH') == 131, \"aBcDe1FgH\"\n    assert digitSum('aBcDe1FgHi') == 131, \"aBcDe1FgHi\"\n    assert digitSum('aBcDe1FgHi') == 131, \"aBcDe1FgHi\"\n    assert digitSum('aBcDe1FgHiJ') == 131, \"aBcDe1FgHiJ\"\n    assert digitSum('aBcDe1FgHiJk') == 131, \"aBcDe1FgHiJk\"\n    assert digitSum('aBcDe1FgHiJkL') == 131, \"aBcDe1FgHiJkL\"\n    print('Done! Go Check!')",
    "# return sum([ord(i) for i in s if i.isupper()])\n    return sum([ord(i) for i in s if i.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"abAB\"))",
    "return sum(ord(i) for i in s if ord(i) in range(65, 91))\n\n\ndef digitSum2(s):\n    return sum(ord(i) for i in s if i.isupper())\n\n\nprint(digitSum2(\"abAB\"))",
    "pass\n\n\n# TESTS\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153",
    "# s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"",
    "# create an empty sum\n    sum = 0\n\n    # loop through each character\n    for char in s:\n        # if the character is uppercase\n        if char.isupper():\n            # add its ASCII code to the sum\n            sum += ord(char)\n\n    return sum\n\n\ndef digitSum_2(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n# TESTS\n# store the function arguments and results in a list\ntest_cases = [\n    [\"\", 0],\n    [\"abAB\", 131],\n    [\"abcCd\", 67],\n    [\"helloE\", 69],\n    [\"woArBld\", 131],\n    [\"aAaaaXa\", 153],\n    [\"aAaaaXa\", 153],\n]\n\n# create a loop that test the function with every set of arguments\nfor test_case in test_cases:\n    assert digitSum(test_case[0]) == test_case[1], test_case[0]\n\n# store the function arguments and results in a list\ntest_cases_2 = [\n    [\"\", 0],\n    [\"abAB\", 131],\n    [\"abcCd\", 67],\n    [\"helloE\", 69],\n    [\"woArBld\", 131],\n    [\"aAaaaXa\", 153],\n    [\"aAaaaXa\", 153],\n]\n\n# create a loop that test the function with every set of arguments\nfor test_case in test_cases_2:\n    assert digitSum_2(test_case[0]) == test_case[1], test_case[0]",
    "# s = s.upper()\n    # s = s.replace(\" \", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"",
    "return sum([ord(i) for i in s if i.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "total = 0\n    for i in s:\n        if i.isupper():\n            total += ord(i)\n    return total\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) > 64 and ord(s[i]) < 91:\n            sum += ord(s[i])\n\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "# YOUR CODE HERE\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "return sum(ord(c) for c in s if c.isupper())\n\n\nprint(digitSum(\"aAaaaXa\"))",
    "# return sum([ord(c) for c in s if c.isupper()])\n    return sum(ord(c) for c in s if c.isupper())\n\nif __name__ == '__main__':\n    print(digitSum(\"aAaaaXa\"))",
    "# return sum(ord(c) for c in s if c.isupper())\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef main():\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\nif __name__ == '__main__':\n    main()",
    "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum",
    "# Write your code here\n    return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == \"__main__\":\n    s = input(\"Enter the string: \")\n    print(digitSum(s))",
    "return sum([ord(c) for c in s if c.isupper()])",
    "return sum([ord(c) for c in s if c.isupper()])\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "s = s.upper()\n    return sum([ord(i) for i in s if ord(i) >= 65 and ord(i) <= 90])\n\n\ndef digitSum2(s):\n    return sum([ord(i) for i in s.upper() if ord(i) >= 65 and ord(i) <= 90])\n\n\ndef digitSum3(s):\n    return sum(map(lambda i: ord(i), filter(lambda i: ord(i) >= 65 and ord(i) <= 90, s.upper())))\n\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            sum += ord(s[i])\n    return sum\n\ndef digitSum2(s):\n    return sum(ord(c) for c in s if 'A' <= c <= 'Z')\n\ndef digitSum3(s):\n    return sum(map(ord, filter(str.isupper, s)))",
    "result = 0\n    for i in s:\n        if i.isupper():\n            result += ord(i)\n    return result\n\nif __name__ == '__main__':\n    print(digitSum(input()))",
    "# return sum(ord(i) for i in s if ord(i) > 64 and ord(i) < 91)\n    return sum(ord(i) for i in s if 64 < ord(i) < 91)",
    "sum = 0\n    for s in s:\n        if s.isupper():\n            sum += ord(s)\n    return sum\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum2(\"\") => 0\n        digitSum2(\"abAB\") => 131\n        digitSum2(\"abcCd\") => 67\n        digitSum2(\"helloE\") => 69\n        digitSum2(\"woArBld\") => 131\n        digitSum2(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in s:\n        if s.isupper():\n            sum += s\n    return sum\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum3(\"\") => 0\n        digitSum3(\"abAB\") => 131\n        digitSum3(\"abcCd\") => 67\n        digitSum3(\"helloE\") => 69\n        digitSum3(\"woArBld\") => 131\n        digitSum3(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in s:\n        if s.isupper():\n            sum += int(s)\n    return sum\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum4(\"\") => 0\n        digitSum4(\"abAB\") => 131\n        digitSum4(\"abcCd\") => 67\n        digitSum4(\"helloE\") => 69\n        digitSum4(\"woArBld\") => 131\n        digitSum4(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in",
    "return sum(ord(x) for x in s if x.isupper())\n\n\ndef digitSum1(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 298\n        digitSum(\"abcCd\") => 105\n        digitSum(\"helloE\") => 143\n        digitSum(\"woArBld\") => 298\n        digitSum(\"aAaaaXa\") => 467\n    \"\"\"\n    return sum(ord(x) for x in s if x.islower())",
    "if len(s) == 0:\n        return 0\n    elif s[0].isupper():\n        return ord(s[0]) + digitSum(s[1:])\n    else:\n        return digitSum(s[1:])",
    "# your code here\n    return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum('') == 0, \"Empty string\"\n    assert digitSum('abA') == 131, \"Uppercase A\"\n    assert digitSum('abB') == 130, \"Lowercase a\"\n    assert digitSum('abBcC') == 193, \"Both uppercase and lowercase\"\n    assert digitSum('abBcCa') == 203, \"Both uppercase and lowercase, plus extra letter\"",
    "if s == \"\":\n        return 0\n    else:\n        s = s.upper()\n        return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == \"__main__\":\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "total = 0\n    for i in s:\n        if i.isupper():\n            total += ord(i)\n    return total\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(i) for i in s if i.isupper()])\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(i) for i in s if i.isupper())",
    "return sum(ord(char) for char in s if char.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum([ord(char) for char in s if char.isupper()])\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(char) for char in s if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum(ord(char) for char in s if char.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(''))\n    print(digitSum('abAB'))\n    print(digitSum('abcCd'))\n    print(digitSum('helloE'))\n    print(digitSum('woArBld'))\n    print(digitSum('aAaaaXa'))\n    print(digitSum('Abc'))\n    print(digitSum('Abc'))",
    "# Take input and store in variable inputString\n    inputString = s\n\n    # Empty string\n    if inputString == \"\":\n        return 0\n\n    # Sum all the upper case letters' ASCII values\n    return sum([ord(char) for char in inputString if char.isupper()])\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum([ord(x) for x in s if x.isupper()])",
    "return sum(ord(x) for x in s if x.isupper())",
    "return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(), s)))\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "# Return result\n    return sum([ord(x) for x in s if x.isupper()])\n\n\n# Tests\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\n# Runner\nif __name__ == \"__main__\":\n    test_digit_sum()",
    "pass\n\n\n# Tests\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\ntest_digit_sum()",
    "return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
    "total = 0\n    for i in s:\n        if 64 < ord(i) < 91:\n            total += ord(i)\n    return total",
    "return sum([ord(c) for c in s if c.isupper()])\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "return sum([ord(char) for char in s if char.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "#print(s)\n    return sum([ord(char) for char in s if char.isupper()])\n\n\ndef digitSum2(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n    print(digitSum2(\"\"))\n    print(digitSum2(\"abAB\"))\n    print(digitSum2(\"abcCd\"))\n    print(digitSum2(\"helloE\"))\n    print(digitSum2(\"woArBld\"))\n    print(digitSum2(\"aAaaaXa\"))",
    "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "# s = \"\".join(x for x in s if x.isupper())\n    # s = \"\".join(s.split())\n    # return sum(ord(x) for x in s)\n    return sum(ord(x) for x in s if x.isupper())\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "# return sum(ord(c) for c in s if c.isupper())\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(",
    "# 1st-way\n    # return sum([ord(i) for i in s if i.isupper()])\n\n    # 2nd-way\n    # return sum([ord(i) for i in s if i >= 'A' and i <= 'Z'])\n\n    # 3rd-way\n    return sum([ord(i) for i in s if 'A' <= i <= 'Z'])\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum(\"\") == 0, \"Zero\"\n    assert digitSum(\"abAB\") == 131, \"abAB\"\n    assert digitSum(\"abcCd\") == 67, \"abcCd\"\n    assert digitSum(\"helloE\") == 69, \"helloE\"\n    assert digitSum(\"woArBld\") == 131, \"woArBld\"\n    assert digitSum(\"aAaaaXa\") == 153, \"aAaaaXa\"",
    "return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum2(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum3(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum4(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum5(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum6(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum7(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum8(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum9(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum10(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum11(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum12(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum13(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum14(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum15(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum16(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum17(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digit",
    "# return sum([ord(c) for c in s if c.isupper()])\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total",
    "return sum([ord(x) for x in s if x.isupper()])\n\nif __name__ == '__main__':\n    print(digitSum(\"\")) # => 0\n    print(digitSum(\"abAB\")) # => 131\n    print(digitSum(\"abcCd\")) # => 67\n    print(digitSum(\"helloE\")) # => 69\n    print(digitSum(\"woArBld\")) # => 131\n    print(digitSum(\"aAaaaXa\")) # => 153",
    "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            sum += ord(i)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\nprint(digitSum(''))\nprint(digitSum('abAB'))\nprint(digitSum('abcCd'))\nprint(digitSum('helloE'))\nprint(digitSum('woArBld'))\nprint(digitSum('aAaaaXa'))",
    "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
    "return sum(ord(char) for char in s if char.isupper())\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())",
    "# return sum(map(ord, filter(str.isupper, s)))\n    return sum(map(ord, filter(str.isupper, s)))\n\n\n# print(digitSum(\"\"))\n# print(digitSum(\"abAB\"))\n# print(digitSum(\"abcCd\"))\n# print(digitSum(\"helloE\"))\n# print(digitSum(\"woArBld\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print",
    "# 1st-way\n    # return sum([ord(c) for c in s if c.isupper()])\n\n    # 2nd-way\n    # return sum(ord(c) for c in s if c.isupper())\n\n    # 3rd-way\n    return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(''))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum('') == 0\n    assert digitSum('abAB') == 131\n    assert digitSum('abcCd') == 67\n    assert digitSum('helloE') == 69\n    assert digitSum('woArBld') == 131\n    assert digitSum('aAaaaXa') == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "s = s.upper()\n    result = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            result += ord(i)\n    return result\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result\n\n\ndef digitSum2(s):\n    return sum([ord(c) for c in s if c.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum2(\"aAaaaXa\"))",
    "# Take a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:",
    "return sum([ord(i) for i in s if i.isupper()])",
    "# Write your code here\n    return sum(ord(c) for c in s if c.isupper())\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if ord(i) > 64 and ord(i) < 91:\n            sum += ord(i)\n    return sum\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            sum += ord(i) - 64\n        else:\n            continue\n    return sum\n\n\ndef main():\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum(map(ord, filter(str.isupper, s)))\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
    "return sum([ord(x) for x in s if x.isupper()])",
    "sum = 0\n    for char in s:\n        if ord(char) in range(65, 91):\n            sum += ord(char)\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "# 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if ord(char) > 64:\n            total += ord(char)\n    return total\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if ord(char) > 64:\n            total += ord(char)\n    return total\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return",
    "return sum(map(lambda x: ord(x), filter(lambda x: ord(x) > 64, s)))\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(x) for x in s if ord(x) > 64)\n\n\nif __name__ == '__main__':\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "return sum([ord(x) for x in s if ord(x) >= 65 and ord(x) <= 90])",
    "# Please print out this line for us\n    print(sum(map(lambda x: ord(x.upper()), list(s))))\n\n\nif __name__ == '__main__':\n    digitSum(input())",
    "sum = 0\n    for char in s:\n        if ord(char) > 64 and ord(char) < 91:\n            sum += ord(char)\n    return sum\n\n\nprint(digitSum(\"abAB\"))  # => 131\nprint(digitSum(\"abcCd\"))  # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\"))  # => 131\nprint(digitSum(\"aAaaaXa\"))  # => 153\nprint(digitSum(\"\"))  # => 0",
    "return sum([ord(x) for x in s if x.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))",
    "# Write your code here.\n    s = s.upper()\n    sum = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            sum += ord(i)\n    return sum\n\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))",
    "sum = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            sum += ord(i)\n    return sum",
    "return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") =>"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}