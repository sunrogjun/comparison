{
  "problem": {
    "task_id": "HumanEval/88",
    "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
    "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
    "entry_point": "sort_array",
    "docstring": "",
    "problem_id": 88
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if not array:\n        return []\n    return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)\n\n\nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "return array if len(array) < 2 else array[::-1] if sum(array[0], array[-1]) % 2 == 0 else array\n\n\n\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))\nprint(sort_array([]))\nprint(sort_array([5]))",
    "odd = sum(array) % 2 == 1\n\n    if odd:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([3, 3, 1, 1]) == [1, 1, 3, 3]\n    assert sort_array([3, 3, 1, 1, 2, 2]) == [2, 2, 1, 1, 3, 3]\n    assert sort_array([3, 3, 1, 1, 2, 2, 6, 6]) == [6, 6, 2, 2, 1, 1, 3, 3]\n    assert sort_array([3, 3, 1, 1, 2, 2, 6, 6, 5, 5]) == [6, 6, 5, 5, 2, 2, 1, 1, 3, 3]\n    assert sort_array([3, 3, 1, 1, 2, 2, 6, 6, 5, 5, 4, 4]) == [6, 6, 5, 5, 4, 4, 2, 2, 1, 1, 3, 3]\n    assert sort_array([3, 3, 1, 1, 2, 2, 6, 6, 5, 5, 4, 4, 5, 5]) == [6, 6, 5, 5, 4, 4, 5,",
    "if not array:\n        return array\n\n    # get the sum of the first and last index\n    sum_of_indices = array[0] + array[-1]\n\n    # sort the array based on the sum\n    if sum_of_indices % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array",
    "# Check for empty array\n    if len(array) == 0:\n        return []\n\n    # Get the sum of first and last index\n    first_last_sum = array[0] + array[-1]\n\n    # If the sum is odd, sort ascending\n    if first_last_sum % 2 == 1:\n        return sorted(array)\n    # If the sum is even, sort descending\n    else:\n        return sorted(array, reverse=True)\n\n\n# Test cases\nprint(sort_array([]))\nprint(sort_array([5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "odd = lambda x: x % 2 == 1\n    even = lambda x: x % 2 == 0\n\n    first_index = array[0]\n    last_index = array[-1]\n    sum_of_first_last = first_index + last_index\n\n    if odd(sum_of_first_last):\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n\n    print(\"Passed\")\n\ntest_sort_array()",
    "# Step 1: We begin by checking if the sum of the first and last elements of the array is odd or even\n    if sum(array) % 2 == 0:\n        # If the sum is even, we reverse the array\n        array.reverse()\n\n    # Step 2: We sort the array\n    array.sort()\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([-1, -2, 0, 1]) == [-2, -1, 0, 1]\n    assert sort_array([5, 3, 2, 10, 20, 1]) == [1, 2, 3, 5, 10, 20]\n    assert sort_array([2, 1]) == [1, 2]\n    assert sort_array([-1, -2]) == [-2, -1]\n    assert sort_array([0, 0]) == [0, 0]\n    assert sort_array([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\n    assert sort_array([0, 0, 1]) == [0, 0, 1]\n    assert sort_array([0, 1, 0]) == [0, 0, 1]\n    assert sort_array([1, 0, 1]) == [0, 1, 1]\n    assert sort_array([0, 0, 0, 1, 1, 0, 1, 1, 0, 1]) == [0, 0, 0, 1, 1, 1,",
    "# if array is empty\n    if len(array) == 0:\n        return []\n\n    # if there is an odd number of elements\n    if sum(array[0], array[-1]) % 2 == 1:\n        array.sort()\n    # if there is an even number of elements\n    else:\n        array.sort(reverse=True)\n\n    return array",
    "# return sorted(array, key=lambda x: x * 2)\n    return sorted(array, key=lambda x: sum(array) % 2)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([4, 2, 3, 1]) == [1, 2, 3, 4]\n    assert sort_array([2, 1]) == [1, 2]\n    assert sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n    assert sort_array([4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\n\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) == 0:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    first = array[0]\n    last = array[-1]\n\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "if not array:\n        return array\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    if (first_index_value + last_index_value) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef test_function():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 8]) == [8, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 8, 10]) == [10, 8, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 8, 10, 22, 20, 19, 18, 17, 16]) == [\n        16,\n        17,\n        18,\n        19,\n        20,\n        22,\n        10,\n        8,\n        6,\n        5,\n        4,\n        3,\n        2,\n        1,\n        0,\n    ]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 8, 10, 22, 20, 19, 18, 17, 16, 33]) ==",
    "# initialize variables\n    # check if array is empty or if the length of the array is 1\n    if not array or len(array) == 1:\n        return array\n\n    # get the first and last value of the array\n    first_value = array[0]\n    last_value = array[-1]\n\n    # get the sum of the first and last value of the array\n    sum_of_first_and_last = first_value + last_value\n\n    # check if the sum of the first and last value of the array is even or odd\n    if sum_of_first_and_last % 2 == 0:\n        # the sum is even, so sort the array in descending order\n        # sort the array in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # the sum is odd, so sort the array in ascending order\n        # sort the array in ascending order\n        sorted_array = sorted(array)\n\n    return sorted_array",
    "# 1. Check if the array is empty\n    if len(array) == 0:\n        return array\n\n    # 2. Get the sum of the first and last value\n    sum_values = array[0] + array[-1]\n\n    # 3. If the sum is odd, sort in ascending order\n    if sum_values % 2 == 1:\n        return sorted(array)\n\n    # 4. If the sum is even, sort in descending order\n    return sorted(array, reverse=True)\n\n\n# Test cases\nprint(sort_array([]))\nprint(sort_array([5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))\nprint(sort_array([0, 1, 2, 3, 4, 5]))\nprint(sort_array([6, 5, 4, 3, 2, 1, 0]))",
    "# find the first and last index values\n    first_index_value = array[0]\n    last_index_value = array[-1]\n\n    # get the sum of the first and last index values\n    sum_first_and_last_index_values = first_index_value + last_index_value\n\n    # if the sum is odd, sort in ascending order\n    if sum_first_and_last_index_values % 2 == 1:\n        # sort in ascending order\n        return sorted(array)\n\n    # if the sum is even, sort in descending order\n    else:\n        # sort in descending order\n        return sorted(array, reverse=True)\n\n\ndef test_sort_array_empty():\n    assert sort_array([]) == []\n\n\ndef test_sort_array_single_element():\n    assert sort_array([5]) == [5]\n\n\ndef test_sort_array_even_sum():\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n\n\ndef test_sort_array_odd_sum():\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if sum(array[0]) + sum(array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "# 1. Check the input\n    if not array or not isinstance(array, list):\n        return []\n\n    # 2. Auxiliary space: O(1)\n    # 2.1. We will use three variables:\n    #       - first_index_value, last_index_value, sum_first_last_index_values\n    # 2.2. Initialize them before the main loop\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_first_last_index_values = first_index_value + last_index_value\n\n    # 3. Algorithm\n    # 3.1. Check if we have to sort ascending or descending\n    if sum_first_last_index_values % 2 == 0:\n        # descending\n        array.sort(reverse=True)\n    else:\n        # ascending\n        array.sort()\n\n    return array\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case, reverse=sum(test_case[0:2]) % 2 == 1):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([4, 3, 5, 2, 0, 1])\ntest_function([3, 1, 2, 0])\ntest_function([3, 1, 2, 0, 5])\ntest_function([3, 1, 2, 0, 5, 7])\ntest_function([3, 1, 2, 0, 5, 7, 6])\ntest_function([3, 1, 2, 0, 5, 7, 6, 8])\ntest_function([3, 1, 2,",
    "# O(1) time complexity, O(1) space complexity\n    sum_arr = sum(array)\n    if sum_arr % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]",
    "if not array: return []\n\n    array_sum = sum(array)\n\n    if array_sum % 2 == 0:\n        return sorted(array, reverse=True)\n\n    return sorted(array)\n\n\ndef sort_array_in_place(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array: return []\n\n    array_sum = sum(array)\n\n    if array_sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([1, 2, 3, 4, 5, 6])\ntest_function([1, 3, 2, 4, 5, 6])\ntest_function([",
    "odd_even = sum(array) % 2\n    if odd_even == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)",
    "if array == []:\n        return []\n\n    if sum(array[:2]) % 2 == 0:\n        return sorted(array)\n\n    return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n    assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]\n    assert sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([3, 4, 5, 2, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\n\n    assert sort_array([1, 3, 2, 4, 5]) == [1, 3,",
    "# O(nlogn)\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n\n    sorted_array = array[:]\n    sorted_array.sort()\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        sorted_array.reverse()\n\n    return sorted_array",
    "pass",
    "# Time: O(nlog(n))\n    # Space: O(1)\n    if not array:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Time: O(n)\n    # Space: O(1)\n    if not array:\n        return array\n\n    even_flag = True\n    if sum(array[0], array[-1]) % 2 == 0:\n        even_flag = False\n\n    idx = 0\n    while idx < len(array):\n        if even_flag:\n            if array[idx] != array[0]:\n                array[0], array[idx] = array[idx], array[0]\n            else:\n                idx += 1\n        else:\n            if array[idx] != array[-1]:\n                array[-1], array[idx] = array[idx], array[-1]\n            else:\n                idx += 1\n\n    return array",
    "# O(n) time | O(n) space\n    # return array.sort() if sum(array[0], array[-1]) % 2 else array.sort(reverse=True)\n\n    # O(n) time | O(1) space\n    array.sort()\n    return array if sum(array[0], array[-1]) % 2 else array.reverse()\n\n    # O(n) time | O(1) space\n    # first_value = array[0]\n    # last_value = array[-1]\n    # if sum(first_value, last_value) % 2 == 0:\n    #     array.reverse()\n    # return array",
    "pass",
    "# 1. check if array is empty\n    if len(array) == 0:\n        return array\n\n    # 2. create a variable to store the sum of the first and last index values\n    sum_of_first_and_last_index = array[0] + array[-1]\n\n    # 3. if the sum of the first and last index values is odd, sort the array in ascending order\n    if sum_of_first_and_last_index % 2 == 1:\n        return sorted(array)\n    # 4. if the sum of the first and last index values is even, sort the array in descending order\n    else:\n        return sorted(array, reverse=True)",
    "return sorted(array, key=sum)\n\n\ndef test_function():\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([4, 3, 2, 1, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0]\n    assert sort_array([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1]\n    assert sort_array([4, 2, 2, 3, 3, 1, 0, 0, 5, 5, 6, 6]) == [0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]\n\nif __name__ == '__main__':\n    test_function()",
    "# check the input\n    if not array:\n        return []\n\n    # create a new array\n    new_array = []\n    # get the sum of first index and last index\n    sum_first_last_index = sum(array[0:2])\n\n    # if the sum is odd, sort in ascending order\n    if sum_first_last_index % 2 == 1:\n        new_array = sorted(array)\n\n    # if the sum is even, sort in descending order\n    elif sum_first_last_index % 2 == 0:\n        new_array = sorted(array, reverse=True)\n\n    return new_array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([5, 3, 2, 1, 0])\ntest_function([5, 3, 1, 0, 2])\ntest_function([3, 1, 2, 0, 5])\ntest_function([3, 1, 2, 0, 5, 6])\ntest_function([3, 1, 2, 0, 5, 6, 7])",
    "# Check empty list\n    if not array:\n        return array\n\n    # Check if first and last index value sum is even or odd\n    sum_first_last_index_value = array[0] + array[-1]\n\n    # Create new array\n    new_array = []\n\n    # Sorting\n    if sum_first_last_index_value % 2 == 0:\n        for num in array:\n            new_array.append(num)\n        new_array.sort()\n    else:\n        for num in array:\n            new_array.append(num)\n        new_array.sort(reverse=True)\n\n    return new_array\n\n    # # Alternative\n    # # Check empty list\n    # if not array:\n    #     return array\n\n    # # Check if first and last index value sum is even or odd\n    # sum_first_last_index_value = array[0] + array[-1]\n\n    # # Create new array\n    # new_array = []\n\n    # # Sorting\n    # if sum_first_last_index_value % 2 == 0:\n    #     new_array = sorted(array)\n    # else:\n    #     new_array = sorted(array, reverse=True)\n\n    # return new_array",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return array[::-1]\n\n    return array",
    "if len(array) <= 1:\n        return array\n\n    sum_first_last_index_value = sum(array[0], array[-1])\n    if sum_first_last_index_value % 2:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array",
    "pass",
    "# check empty list\n    if not array:\n        return []\n\n    # check if sum is even or odd\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        # sort in descending order\n        array.sort(reverse=True)\n    else:\n        # sort in ascending order\n        array.sort()\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        first_index_value = array[0]\n        last_index_value = array[-1]\n\n        if (first_index_value + last_index_value) % 2 == 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n\n        return array",
    "odd_even = sum(array[0:2]) % 2\n    if odd_even == 0:\n        return sorted(array)\n    return sorted(array, reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([]))\n    print(sort_array([5]))",
    "# if the sum of the first and last index value is even, sort in ascending order, else sort in descending order\n    if sum(array[:2]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([1, 2, 3, 0, 5, 4])\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([1, 2, 3, 0, 5, 4])\ntest_function([1, 2, 3, 4, 5, 6])\ntest_function([6, 5, 4, 3, 2, 1])\ntest_function([1, 3, 2, 5, 4, 6])\ntest_function([1, 3, 2, 5, 7, 6, 4])\ntest_function([3, 1, 2, 4, 5, 6])\ntest_function([3, 1, 2, 7, 5, 6, 4])\ntest_function([3, 5, 1, 7, 2, 4, 6])\ntest_function([1, 3, 2, 7, 5, 6, 4])\ntest_function([3, 1, 2, 7, 5, 6, 4])\ntest_function([1",
    "result = []\n\n    for value in array:\n        result.append(value)\n\n    if sum(result[0]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n\n    return result\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1, 0]",
    "if len(array) == 0:\n        return []\n\n    sum_of_first_and_last_index = sum(array)\n    if sum_of_first_and_last_index % 2 == 0:\n        # sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # sort in ascending order\n        return sorted(array)",
    "# O(n) time | O(1) space\n    sum = array[0] + array[-1]\n    is_ascending = sum % 2 == 1\n    sorted_array = sorted(array, reverse=not is_ascending)\n    return sorted_array",
    "if not array:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\n    return sorted(array)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([3, 1, 2, 5, 4, 6, 0]) == [0, 1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 2, 5, 4, 6, 8, 7]) == [7, 8, 6, 5, 4, 3, 2, 1]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) == 0:\n        return array\n\n    if sum(array[0:2]) % 2 == 0:\n        # even\n        return sorted(array, reverse=True)\n    else:\n        # odd\n        return sorted(array)\n\n\ndef test_sort_array_empty():\n    assert sort_array([]) == []\n\n\ndef test_sort_array_one_value():\n    assert sort_array([5]) == [5]\n\n\ndef test_sort_array_even_sum():\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n\n\ndef test_sort_array_odd_sum():\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
    "# sort the array in ascending order if the sum( first index value, last index value) is odd,\n    # or sort it in descending order if the sum( first index value, last index value) is even.\n    sum_val = sum(array)\n    if sum_val % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2]\n    assert sort_array([2, 2, 2, 2, 2, 2, 1]) == [1, 2, 2, 2, 2, 2, 2]\n    assert sort_array([2, 2, 2, 2, 2, 2, 1, 1]) == [1, 1, 2, 2, 2, 2, 2, 2]\n    assert sort_array([2, 2, 2, 2, 2, 2, 1, 1, 1]) == [1, 1, 1, 2, 2, 2, 2, 2, 2]\n    assert sort_array([2, 2, 2, 2, 2, 2, 1, 1, 1, 1]) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2]\n    assert sort_array([2, 2, 2, 2,",
    "# Time Complexity: O(nlog(n))\n    # Space Complexity: O(n)\n    return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)\n\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    # def sort_array(array):\n    #     is_even = sum(array[0], array[-1]) % 2 == 0\n    #     return sorted(array, reverse=is_even)",
    "if not array:\n        return array\n\n    first_index = array[0]\n    last_index = array[-1]\n    sum_value = first_index + last_index\n\n    if sum_value % 2 == 0:\n        return sorted(array, reverse=True)\n\n    return sorted(array)\n\n\ndef sort_array_two_pointers(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    first_index = array[0]\n    last_index = array[-1]\n    sum_value = first_index + last_index\n\n    if sum_value % 2 == 0:\n        return sorted(array, reverse=True)\n\n    return sorted(array)\n\n\ndef sort_array_dict(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) =>",
    "# O(nlog(n)) time complexity, O(n) space complexity\n    return sorted(array, key=lambda x: sum(array[0], array[-1]))\n\n    # O(n) time complexity, O(n) space complexity\n    sorted_array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array\n\n    # O(n) time complexity, O(1) space complexity\n    sorted_array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array\n\n    # O(n) time complexity, O(1) space complexity\n    sorted_array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array",
    "# check if the array is empty\n    if not array:\n        return []\n\n    # if the sum of first and last value is even, then sort in ascending order\n    if sum(array[0]) + sum(array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef test_function():\n    # These are tests to check that your solution gives the correct output\n    assert sort_array([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4]\n    assert sort_array([1, 2, 3, 0]) == [0, 1, 2, 3]\n    assert sort_array([]) == []\n    assert sort_array([0]) == [0]\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([1, 3, 2, 0, 5]) == [0, 1, 2, 3, 5]\n    assert sort_array([1, 2, 3, 0, 5]) == [0, 1, 2, 3, 5]\n    assert sort_array([1, 2, 3, 5, 0]) == [0, 1, 2, 3, 5]\n    assert sort_array([3, 1, 2, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([3, 1, 2, 5, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 2, 3, 1,",
    "if not array:\n        return array\n\n    # if the sum of the first index and the last index is odd, we sort the array in ascending order\n    if sum(array[0]) + sum(array[-1]) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\ndef test_function(test_case):\n    array = test_case[0]\n    solution = test_case[1]\n    output = sort_array(array)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[], []])\ntest_function([[5], [5]])\ntest_function([[2, 4, 3, 0, 1, 5], [0, 1, 2, 3, 4, 5]])\ntest_function([[2, 4, 3, 0, 1, 5, 6], [6, 5, 4, 3, 2, 1, 0]])\ntest_function([[1, 2, 3, 0, 5], [0, 1, 2, 3, 5]])\ntest_function([[1, 2, 3, 0, 5, 6], [0, 1, 2, 3, 5, 6]])\ntest_function([[1, 2, 3, 0, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7]])\ntest_function([[1, 2, 3, 0, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8]])\ntest_function([[1, 2, 3, 0, 5, 6, 7, 8, 9], [0, 1, 2, 3, 5, 6, 7, 8, 9]])\ntest_function([[1, 2, 3, 0, 5, 6, 7, 8, 9, 10",
    "if len(array) <= 1:\n        return array\n\n    if sum(array[0:2]) % 2 == 0:\n        return sorted(array)\n\n    return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6]",
    "# check the input\n    if not array:\n        return array\n\n    # calculate the sum\n    sum_value = array[0] + array[-1]\n\n    # sort the array\n    if sum_value % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 0, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([1, 2, 3, 0, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 0, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 0, 4, 5, 6, 7, 8]) == [8, 7, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 0, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 0, 4, 5, 6, 7, 8,",
    "if array == []:\n        return []\n\n    # find the sum of the first and last element\n    sum_first_and_last = array[0] + array[-1]\n\n    # sort in ascending order if sum is odd\n    if sum_first_and_last % 2 == 1:\n        return sorted(array)\n\n    # sort in descending order if sum is even\n    return sorted(array, reverse=True)\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([0, 0])\ntest_function([0, 1, 2, 0, 1, 2])\ntest_function([1, 0, 0, 0, 0, 0])\ntest_function([])\ntest_function([1])\ntest_function([1, 2, 3, 4, 5, 6, 7])\ntest_function([3, 1, 2, 5, 4, 6, 7])\ntest_function([3, 7, 6, 4, 5, 1, 2])",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n\n    even = odd = 0\n    for item in array:\n        if item % 2 == 0:\n            even += item\n        else:\n            odd += item\n\n    if even > odd:\n        return [i for i in range(even, odd + 1, -1)]\n    else:\n        return [i for i in range(odd, even + 1, 1)]\n\n\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "sorted_array = array\n    if len(array) > 1:\n        if sum(array[0:2]) % 2 == 0:\n            sorted_array = sorted(array, reverse=True)\n\n    return sorted_array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) == 0:\n        return []\n\n    # sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    if array[0] + array[-1] % 2 == 1:\n        return sorted(array)\n\n    # sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    # sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) <= 1:\n        return array\n\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_values = first_index_value + last_index_value\n\n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "if not array: return []\n\n    sorted_array = sorted(array)\n\n    if sum(array[0], array[-1]) % 2:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [2, 4, 3, 0, 1, 5, 6, 7]\n    assert sort_array([5, 4, 3, 2, 1, 0]) == [5, 4, 3, 2, 1, 0]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1, 0]) == [7, 6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "# todo: add more unit test\n    # check the input\n    if not array:\n        return []\n\n    odd_even = 0\n    for item in array:\n        odd_even += item\n\n    if odd_even % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\nif __name__ == '__main__':\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([]))",
    "# sort_array([5, 1, 2, 3, 4]) => [5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6]) => [6, 5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6, 7]) => [7, 6, 5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8]) => [8, 7, 6, 5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8, 9]) => [9, 8, 7, 6, 5, 1, 2, 3, 4]\n\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8, 9, 10]) => [10, 9, 8, 7, 6, 5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11]) => [11, 10, 9, 8, 7, 6, 5, 1, 2, 3, 4]\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12]) => [12, 11, 10, 9, 8, 7, 6, 5, 1, 2, 3, 4]\n\n    # sort_array([5, 1, 2, 3, 4, 6, 7, 8, 9, 1",
    "if not array:\n        return array\n\n    odd_even = sum(array[0], array[-1]) % 2\n    if odd_even == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([5, 3, 1, 4, 2]) == [2, 3, 4, 5, 1]\n    assert sort_array([5, 3, 1, 4, 2, 6]) == [2, 3, 1, 4, 5, 6]\n    assert sort_array([5, 3, 1, 4, 2, 6, 7]) == [2, 3, 1, 4, 5, 6, 7]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    if sum(array[0]) + sum(array[-1]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n\nif __name__ == \"__main__\":\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "# sort array in ascending order\n    if sum(array) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n\n\nif __name__ == '__main__':\n    # Case 1\n    print(sort_array([]))\n\n    # Case 2\n    print(sort_array([5]))\n\n    # Case 3\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n\n    # Case 4\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "# 1. check the array\n    if not array:\n        return []\n\n    # 2. check the sum of the first and the last\n    first_last_sum = array[0] + array[-1]\n\n    # 3. sort the array\n    if first_last_sum % 2 == 0:\n        return array[::-1]\n    else:\n        return array.copy()\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "# get the first index and last index value\n    first_index_value = array[0]\n    last_index_value = array[len(array) - 1]\n\n    # create an empty list\n    sorted_array = []\n\n    # check the sum of the first index and last index value\n    if (first_index_value + last_index_value) % 2 == 0:\n        # if the sum is even, sort the array in descending order\n        # sort the array in descending order\n        # create a descending order list\n        for value in range(len(array), 0, -1):\n            sorted_array.append(array[value - 1])\n    else:\n        # if the sum is odd, sort the array in ascending order\n        # sort the array in ascending order\n        # create an ascending order list\n        for value in range(len(array)):\n            sorted_array.append(array[value])\n\n    return sorted_array\n\n\ndef test_sort_array():\n    # assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
    "odd_even = sum(array[0:2])\n    if odd_even % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "if len(array) <= 1:\n        return array\n\n    sum_array = sum(array)\n    if sum_array % 2 == 0:\n        return array[::-1]\n\n    return array",
    "# My solution\n    # if len(array) == 0: return array\n    # if len(array) == 1: return array\n    # if sum(array[0], array[-1]) % 2 == 0:\n    #     array.sort(reverse=True)\n    # else:\n    #     array.sort()\n    # return array\n\n    # Optimized solution\n    if len(array) == 0: return array\n    if len(array) == 1: return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    return sorted(array, reverse=True)\n\n\n    # Optimized solution\n    # return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)\n\n\n    # Optimized solution\n    # if sum(array[0], array[-1]) % 2 == 0:\n    #     return sorted(array)\n    # else:\n    #     return sorted(array, reverse=True)\n\n    # Optimized solution\n    # if sum(array[0], array[-1]) % 2 == 0:\n    #     return sorted(array)\n    # else:\n    #     return sorted(array, reverse=True)\n\n    # Optimized solution\n    # return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)",
    "if not array:\n        return []\n\n    is_odd = sum(array) % 2\n    sorted_array = sorted(array, reverse=is_odd)\n\n    return sorted_array",
    "# Check if array is empty\n    if not array:\n        return []\n\n    # Calculate the sum of the first and last elements\n    sum_of_first_and_last = array[0] + array[-1]\n\n    # Check if the sum is even\n    if sum_of_first_and_last % 2 == 0:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)\n\n    # Sort the array in ascending order\n    return sorted(array)\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test 1\ntest_function([])\n\n# Test 2\ntest_function([5])\n\n# Test 3\ntest_function([2, 4, 3, 0, 1, 5])\n\n# Test 4\ntest_function([2, 4, 3, 0, 1, 5, 6])\n\n# Test 5\ntest_function([2, 1])\n\n# Test 6\ntest_function([1, 2])\n\n# Test 7\ntest_function([2, 1, 3, 4, 5, 6])\n\n# Test 8\ntest_function([6, 5, 4, 3, 2, 1, 0])\n\n# Test 9\ntest_function([6, 4, 2, 0, 1, 3, 5])\n\n# Test 10\ntest_function([1, 0])",
    "if not array:\n        return []\n\n    # O(n) time, O(n) space\n    # first_index_value = array[0]\n    # last_index_value = array[-1]\n    # sum_index_value = first_index_value + last_index_value\n    # if sum_index_value % 2 == 0:\n    #     return sorted(array, reverse=True)\n    # else:\n    #     return sorted(array)\n\n    # O(n) time, O(1) space\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_index_value = first_index_value + last_index_value\n    if sum_index_value % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
    "# if array is empty or has one element, return array\n    if len(array) < 2:\n        return array\n\n    # if sum of first and last element is odd, sort in ascending order\n    if sum(array[0], array[-1]) % 2 == 1:\n        return sorted(array)\n\n    # if sum of first and last element is even, sort in descending order\n    else:\n        return sorted(array, reverse=True)",
    "# Check for edge cases\n    if len(array) == 0:\n        return []\n\n    # Check for odd or even sum\n    if sum(array[0]) + sum(array[-1]) % 2 == 0:\n        # If even, sort in descending order\n        array.sort(reverse=True)\n        return array\n    else:\n        # If odd, sort in ascending order\n        array.sort()\n        return array",
    "# if the array is empty or has only one element return the array\n    if len(array) <= 1:\n        return array\n\n    # sort the array in ascending order\n    array.sort()\n\n    # if the sum of the first and last element is odd reverse the array\n    if sum(array[0]) % 2 == 1:\n        return array[::-1]\n\n    return array",
    "# sort_array([]) => []\n    # sort_array([5]) => [5]\n    # sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\n    if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if sum(array[0:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n\n    return sorted(array)",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if len(array) == 2:\n        return array if sum(array) % 2 else [array[1], array[0]]\n\n    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "pass",
    "return sorted(array, key=sum)\n\n\ndef sort_array_in_place(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    * don't use the built-in sort() method.\n    * you can't use the built-in sort() method.\n\n    Examples:\n    * sort_array_in_place([]) => []\n    * sort_array_in_place([5]) => [5]\n    * sort_array_in_place([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_in_place([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    def swap(i, j):\n        array[i], array[j] = array[j], array[i]\n\n    def reverse(i, j):\n        while i < j:\n            swap(i, j)\n            i += 1\n            j -= 1\n\n    is_reverse = sum(array[0], array[-1]) % 2 == 0\n    i, j = 0, len(array) - 1\n    while i < j:\n        while i < j and array[i] <= array[j]:\n            i += 1\n        while i < j and array[i] > array[j]:\n            j -= 1\n        swap(i, j)\n    if is_reverse:\n        reverse(0, len(array) - 1)\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([",
    "# O(n)\n    sorted_array = []\n    sum_first_last = sum(array)\n    if sum_first_last % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    return sorted_array",
    "# First find the sum of first and last index.\n    sum_of_first_and_last_index = array[0] + array[-1]\n\n    if sum_of_first_and_last_index % 2 == 0:\n        # If the sum of first and last index is even, sort the array in descending order.\n        return sorted(array, reverse=True)\n    else:\n        # If the sum of first and last index is odd, sort the array in ascending order.\n        return sorted(array)\n\n\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))\nprint(sort_array([]))\nprint(sort_array([5]))",
    "return sorted(array, key=lambda x: x * 2)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 1, 2, 0]) == [0, 1, 1, 2]\n    assert sort_array([-1, -2, -3]) == [-3, -2, -1]\n    assert sort_array([-1, -2, -3, -4, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "# First, sort the array\n    sorted_array = sorted(array)\n    # If the sum of first and last index value is odd,\n    # sort the array in ascending order.\n    # Otherwise, sort the array in descending order.\n    if sum(array[:2]) % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\n    assert sort_array([2, 1]) == [1, 2]\n    assert sort_array([]) == []\n    assert sort_array([-1, -2]) == [-2, -1]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert sort_array([3, 3, 1, 3, 2, 1, 1, 2, 2, 2, 2, 1, 2, 3, 2, 3]) == [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "return sorted(array, reverse=(sum(array[0], array[-1]) % 2 == 0))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 3, 2, 4, 6, 5]) == [1, 3, 2, 4, 6, 5]\n    assert sort_array([6, 5, 4, 3, 2, 1]) == [6, 5, 4, 3, 2, 1]\n    assert sort_array([6, 5, 4, 3, 2, 1, 0]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1]) == [7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 1,",
    "# Time Complexity: O(N)\n    # Space Complexity: O(N)\n    if not array:\n        return array\n\n    first_num = array[0]\n    last_num = array[-1]\n\n    if (first_num + last_num) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    if not array:\n        return array\n\n    first_num = array[0]\n    last_num = array[-1]\n\n    if (first_num + last_num) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1",
    "# initialize variables\n    len_array = len(array)\n    first_idx_value = array[0]\n    last_idx_value = array[len_array - 1]\n    sum_first_last_idx = first_idx_value + last_idx_value\n\n    # create an empty array to fill with the sorted values\n    sorted_array = []\n\n    # if the sum is odd, sort the array in ascending order\n    if sum_first_last_idx % 2 != 0:\n        for value in array:\n            sorted_array.append(value)\n        sorted_array.sort()\n\n    # if the sum is even, sort the array in descending order\n    elif sum_first_last_idx % 2 == 0:\n        for value in array:\n            sorted_array.append(value)\n        sorted_array.sort(reverse=True)\n\n    # return the sorted array\n    return sorted_array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([0, 0, 0, 5, 5, 5, 7, 7, 7])\ntest_function([0, 0, 0, 5, 5, 5, 7, 7, 7, 11, 11, 11])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8])\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([0, 0, 0",
    "pass",
    "# check for empty input\n    if not array:\n        return []\n\n    # sort the array\n    array.sort()\n\n    # check if the sum of the first and last element is odd\n    if sum(array[0:2]) % 2 == 1:\n        return array\n\n    # otherwise reverse the array\n    return array[::-1]",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n    # return array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# test_function([])\n# test_function([5])\n# test_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])",
    "if len(array) <= 1:\n        return array\n    else:\n        # sum of the first and last index values\n        sum_indices = array[0] + array[-1]\n\n        # ascending order\n        if sum_indices % 2 == 1:\n            array.sort()\n        # descending order\n        else:\n            array.sort(reverse=True)\n\n        return array",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n    if array[0] + array[-1] % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4]\n    assert sort_array([3, 2, 4, 1, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([1, 3, 2, 4, 5]) == [2, 3, 4, 1, 5]\n    assert sort_array([3, 5, 2, 1, 4]) == [2, 1, 3, 4, 5]\n    assert sort_array([3, 5, 2, 4, 1]) == [2, 4, 3, 1, 5]\n    assert sort_array([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\n    assert sort_array([1, 3,",
    "# 1. sort the array in ascending order\n    # 2. if sum(first index value, last index value) is odd, return the sorted array\n    # 3. if sum(first index value, last index value) is even, return the sorted array in descending order\n    #   e.g. [2, 4, 3, 0, 1, 5, 6] => [6, 5, 4, 3, 2, 1, 0]\n    #   e.g. [1, 2, 3, 4, 5, 6, 7] => [7, 6, 5, 4, 3, 2, 1]\n    # 4. return the sorted array\n    pass\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "# sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # sum(first index value, last index value) is even\n    # sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    # sum(first index value, last index value) is odd\n    # sum(first index value, last index value) is even\n\n    # Time Complexity: O(nlogn)\n    # Space Complexity: O(n)\n    sorted_array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array\n\n\ndef sort_array_two_pointer(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # sum(first index value, last index value) is even\n    # sort_array([2, 4, 3, 0, 1",
    "if not array or len(array) == 0:\n        return []\n\n    odd_even = sum(array[0:2]) % 2\n\n    if odd_even == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)",
    "# Check for edge cases\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n\n    # Sum of first and last element\n    sum_first_last = sum(array[0:2])\n\n    # If sum is odd, then sort in ascending order\n    if sum_first_last % 2 == 1:\n        array.sort()\n\n    # If sum is even, then sort in descending order\n    else:\n        array.sort(reverse=True)\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 1, 3, 5, 7, 9]) == [9, 7, 7, 6, 5, 5, 4, 3, 3, 2, 1, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "odd_even_sum = sum(array)\n    if odd_even_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
    "# find the sum of the first and last elements in the array\n    sum = array[0] + array[-1]\n\n    # if the sum is odd, sort the array in ascending order\n    if sum % 2 != 0:\n        array.sort()\n    # if the sum is even, sort the array in descending order\n    else:\n        array.sort(reverse=True)\n\n    return array",
    "if len(array) == 0:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if array[0] + array[-1] % 2 == 0:\n        return array[::-1]\n\n    return array",
    "# O(n) time | O(n) space\n    odd_even_sum = sum(array)\n    sorted_array = []\n    if odd_even_sum % 2 == 0:\n        for num in array:\n            sorted_array.append(num)\n    else:\n        for num in array:\n            sorted_array.insert(0, num)\n    return sorted_array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "# 1. check for the edge case\n    if len(array) == 0: return []\n\n    # 2. initialize variables\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_of_first_and_last_index_value = first_index_value + last_index_value\n    sorted_array = sorted(array)\n\n    # 3. check if the sum of the first and last index value is odd\n    if sum_of_first_and_last_index_value % 2 == 1:\n        # 3a. return the sorted array\n        return sorted_array\n\n    # 3b. return the sorted array in reverse\n    return sorted_array[::-1]",
    "result = []\n    for num in array:\n        result.append(num)\n\n    if sum(array[:2]) % 2 == 1:\n        result.sort()\n    else:\n        result.sort(reverse=True)\n\n    return result\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "odd_even = sum(array) % 2\n    if odd_even == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([6, 5, 4, 3, 2, 1]) == [6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1]) == [7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 2, 4, 5, 6, 7]) == [1, 3, 2, 4, 5, 6, 7]\n    assert sort_array([7, 6, 5, 4, 3, 2, 1, 0]) == [7, 6, 5, 4, 3, 2, 1, 0]\n\n    assert sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7",
    "result = []\n    odd = sum(array) % 2 != 0\n    for i in range(len(array)):\n        if odd:\n            result.append(array[i])\n        else:\n            result.append(array[-i - 1])\n    return result\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([-1, -2, -3, -0, -1, -5, -6]) == [-6, -5, -4, -3, -2, -1, -0]\n    assert sort_array([1, 2, 3, 0, 1, 5]) == [0, 1, 1, 2, 3, 5]\n    assert sort_array([1, 2, 3, 0, 1, 5, 6]) == [0, 1, 1, 2, 3, 5, 6]\n    assert sort_array([1, 2, 3, 0, 1, 5, 6, 7]) == [0, 1, 1, 2, 3, 5, 6, 7]\n    assert sort_array([-1, -2, -3, -0, -1, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1, -0]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}