{
  "problem": {
    "task_id": "HumanEval/145",
    "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
    "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "order_by_points",
    "docstring": "",
    "problem_id": 145
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "nums_with_digits = [(sum(map(int, str(num))), num, i) for i, num in enumerate(nums)]\n    return [num for _, num, _ in sorted(nums_with_digits)]\n\n\ndef order_by_points_pythonic(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted((sum(int(digit) for digit in str(num)), num, i) for i, num in enumerate(nums))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "nums_and_indexes = [(sum(int(digit) for digit in str(num)), index)\n                        for index, num in enumerate(nums)]\n    nums_and_indexes.sort(key=lambda x: x[0])\n    return [nums[index] for _, index in nums_and_indexes]\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=sum, reverse=True)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# print(nums)\n    # print(sorted(nums, key=lambda x: (sum(map(int, str(x))), x)))\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n\n\ndef order_by_points_adv(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # print(nums)\n    # print(sorted(nums, key=lambda x: (sum(map(int, str(x))), x)))\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x), reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# your code here\n    # 1. \u627e\u51fa\u6240\u6709\u6570\u5b57\u7684\u548c\n    # 2. \u6392\u5e8f\n    # 3. \u91cd\u65b0\u6392\u5e8f\n    return sorted(nums, key=lambda x: x, reverse=False)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))), reverse=False)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "return sorted(nums, key=lambda x: sum(int(y) for y in str(abs(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# sort the list of numbers by their sum of digits\n    # then sort by their original index\n    return sorted(nums, key=lambda x: (sum(int(y) for y in str(x)), nums.index(x)))\n\n\ndef order_by_points_short(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(y) for y in str(x)), nums.index(x)))\n\n\ndef order_by_points_short_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(y) for y in str(x)), nums.index(x)))\n\n\ndef order_by_points_short_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -",
    "pass\n\n\ndef test_order_by_points():\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([0]) == [0]\n    assert order_by_points([1, 2, 3]) == [1, 2, 3]\n    assert order_by_points([1, 1, 3]) == [1, 1, 3]\n\n\nif __name__ == '__main__':\n    test_order_by_points()",
    "# sort by sum of digits\n    # if they are equal, sort by index\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))",
    "def sum_digit(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_digit(x), x))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=sum_of_digits, reverse=True)\n\ndef sum_of_digits(num):\n    return sum(map(int, str(num)))\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return sorted(nums, key=lambda x: (sum_digits(x), x))\n\n\ndef sum_digits(n):\n    return sum(int(x) for x in str(n))",
    "# [1, 11, -1, -11, -12]\n    # [(-1, 2), (-11, 3), (1, 1), (11, 2), (-12, 3)]\n    # [(-12, 3), (-11, 3), (-1, 2), (1, 1), (11, 2)]\n    # [-12, -11, -1, 1, 11]\n    return sorted(nums, key=lambda x: (-sum_of_digits(x), x))\n\n\ndef sum_of_digits(num):\n    \"\"\"\n    Calculate the sum of the digits of a given integer\n    \"\"\"\n    return sum(map(int, str(num)))",
    "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "points = []\n    for i in nums:\n        points.append(sum(map(int, str(i))))\n\n    return [nums[i] for i in sorted(range(len(nums)), key=points.__getitem__)]\n\n\nif __name__ == \"__main__\":\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []",
    "def points(num):\n        return sum(int(x) for x in str(num))\n\n    return sorted(nums, key=points)\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "if not nums:\n        return []\n\n    sorted_by_points = []\n    while nums:\n        max_point = 0\n        max_index = -1\n        for index, num in enumerate(nums):\n            if sum(int(n) for n in str(num)) > max_point:\n                max_point = sum(int(n) for n in str(num))\n                max_index = index\n\n        sorted_by_points.append(nums[max_index])\n        nums.pop(max_index)\n\n    return sorted_by_points\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "points = []\n    for num in nums:\n        point = 0\n        for digit in str(abs(num)):\n            point += int(digit)\n        points.append(point)\n    return [nums[index] for index in sorted(range(len(nums)), key=lambda x: (points[x], x))]\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "pass\n\n\ndef order_by_points_descending(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_descending([1, 11, -1, -11, -12]) == [11, 1, -12, -11, -1]\n    >>> order_by_points_descending([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_and_index(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits,\n    but if the sums of their digits are equal,\n    then order them by index in original list.\n\n    For example:\n    >>> order_by_points_and_index([1, 11, -1, -11, -12]) == [-1, 1, -11, -12, 11]\n    >>> order_by_points_and_index([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_and_index_descending(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits,\n    but if the sums of their digits are equal,\n    then order them by index in original list.\n\n    For example:\n    >>> order_by_points_and_index_descending([1, 11, -1, -11, -12]) == [11, 1, -12, -11, -1]\n    >>> order_by_points_and_index_descending([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_and_index_ascending_with_duplicates(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits,\n    but if the sums of",
    "# Your code here\n    # \u628a\u6570\u5b57\u8f6c\u6362\u6210list\uff0c\u7136\u540e\u628alist\u91cc\u9762\u7684\u6570\u5b57\u62ff\u51fa\u6765\uff0c\n    # \u518d\u628a\u6570\u5b57\u8f6c\u6362\u6210str\uff0c\u7136\u540e\u8f6c\u6362\u6210list\uff0c\u62ff\u51falist\u91cc\u9762\u7684\u6570\u5b57\uff0c\n    # \u7136\u540e\u8ba1\u7b97sum\uff0c\u628asum\u5b58\u653e\u5230dict\u91cc\u9762\uff0cdict\u91cc\u9762\u7684key\u4e3asum\uff0cvalue\u4e3aindex\n    # \u6700\u540e\u6839\u636edict\u91cc\u9762\u7684key\u503c\u6392\u5e8f\n    nums_list = [str(num) for num in nums]\n    nums_list = [int(num) for num in nums_list]\n    # \u7528\u4e8e\u5b58\u653esum\n    sum_dict = {}\n    for index, num in enumerate(nums_list):\n        sum_dict[sum([int(num) for num in str(num)])] = index\n    return [nums_list[index] for index in sorted(sum_dict.keys())]\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), x))\n    return sorted_nums\n\n\ndef sum_of_digits(num):\n    return sum(map(int, str(num)))",
    "def sort_key(n):\n        return sum(int(c) for c in str(abs(n))), abs(n)\n\n    return sorted(nums, key=sort_key)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "if not nums:\n        return []\n    nums_copy = nums.copy()\n    nums_copy.sort(key=lambda x: sum_digits(x), reverse=True)\n    return nums_copy\n\n\ndef sum_digits(num):\n    \"\"\"\n    Sum all the digits of a given number.\n    For example:\n    >>> sum_digits(10) == 1\n    >>> sum_digits(123) == 6\n    >>> sum_digits(456) == 15\n    \"\"\"\n    if num == 0:\n        return 0\n    return num % 10 + sum_digits(num // 10)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "if len(nums) == 0:\n        return []\n\n    nums_by_sum_of_digits = sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n    return sorted(nums_by_sum_of_digits, key=lambda x: nums.index(x))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "#your code here\n    # 1 11 -1 -11 -12\n    # 1 2 1 -2 -2\n    # 1 2 -1 2 -2\n    # 1 2 -1 -2 2\n    # 1 2 -1 -2 -1\n\n    # sort by points\n    # 1 11 -1 -11 -12\n    # 1 2 -1 -2 -2\n    # 1 2 -1 -2 -1\n    # 1 2 -1 -2 2\n    # 1 2 -1 2 -2\n    # 1 2 -1 2 -1\n\n    # sort by index\n    # 1 -1 -2 -2 -2 -1\n    # 1 -1 -2 -2 2 -1\n    # 1 -1 -2 2 -2 -1\n    # 1 -1 -2 2 -2 2\n    # 1 -1 2 -2 -2 -1\n    # 1 -1 2 -2 2 -1\n\n    # sort by index and points\n    # 1 -1 -2 -2 -2 -1\n    # 1 -1 -2 -2 2 -1\n    # 1 -1 -2 2 -2 -1\n    # 1 -1 -2 2 -2 2\n    # 1 -1 2 -2 -2 -1\n    # 1 -1 2 -2 2 -1\n\n    # sort by index and points\n    # 1 -1 -2 -2 -2 -1\n    # 1 -1 -2 -2 2 -1\n    # 1 -1 -2 2 -2 -1\n    # 1 -1 -2 2 -2 2\n    # 1 -1 2 -2 -2 -1\n    # 1 -1 2 -2 2 -1\n\n    # sort by index and points\n    # 1 -1 -2 -2 -2 -1\n    # 1 -1 -2 -2 2 -1\n    # 1 -1 -2 2 -2 -1",
    "return sorted(nums, key=lambda x: sum_of_digits(x), reverse=True)\n\n\ndef sum_of_digits(num):\n    return sum(map(int, str(num)))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "def sum_digits(x):\n        return sum(int(y) for y in str(abs(x)))\n\n    return sorted(nums, key=sum_digits)\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([-10, -100]) == [-10, -100]\n    assert order_by_points([-1, 11, -100, 10]) == [-1, 11, -100, 10]\n    assert order_by_points([-10, -100, 100]) == [-10, -100, 100]\n    assert order_by_points([-100, -1000, -10000]) == [-100, -1000, -10000]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "# return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# TODO: Write your solution here\n    # This is an O(n^2) solution, but it's probably the simplest\n    # and it's fine for small inputs\n    return sorted(nums, key=lambda x: sum_of_digits(x))\n\n\ndef sum_of_digits(num):\n    \"\"\"\n    Return the sum of digits of a given number\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # TODO: Write your solution here\n    # This is an O(n*log(n)) solution\n    # We sort the list by the sum of digits and then we\n    # reorder the list based on the original index of the item\n    nums = sorted(nums, key=lambda x: (sum_of_digits(x), x))\n    return [item for _, item in sorted(zip(nums, range(len(nums))))]\n\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # TODO: Write your solution here\n    # This is a O(n*log",
    "sorted_nums = []\n    for num in nums:\n        num_sum = sum(int(n) for n in str(abs(num)))\n        if num_sum not in sorted_nums:\n            sorted_nums.append(num_sum)\n\n    sorted_nums.sort()\n\n    sorted_nums_index = sorted(range(len(sorted_nums)), key=lambda i: sorted_nums[i])\n    sorted_nums = [sorted_nums[i] for i in sorted_nums_index]\n\n    result = []\n    for num in nums:\n        num_sum = sum(int(n) for n in str(abs(num)))\n        index = sorted_nums.index(num_sum)\n        result.append(nums[index])\n        sorted_nums[index] = None\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,",
    "return sorted(nums, key=lambda x: (sum_digits(x), abs(x)))\n\ndef sum_digits(n):\n    \"\"\"\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(456)\n    15\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef test_sum_digits():\n    assert sum_digits(123) == 6\n    assert sum_digits(456) == 15\n    assert sum_digits(1230) == 6\n    assert sum_digits(4560) == 15\n    assert sum_digits(12300) == 6\n    assert sum_digits(45600) == 15\n\n\nif __name__ == '__main__':\n    test_sum_digits()\n    import doctest\n    doctest.testmod()",
    "def order(num):\n        return sum(map(int, str(num)))\n\n    return sorted(nums, key=order)\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n\n    def order(num):\n        return sum(map(int, str(num)))\n\n    return sorted(nums, key=order)",
    "return sorted(nums, key=lambda x: sum(int(i) for i in str(abs(x))), reverse=True)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n\n\ndef check_order(order_function):\n    assert order_function([]) == []\n    assert order_function([1]) == [1]\n    assert order_function([-1]) == [-1]\n    assert order_function([1, 2, 3]) == [1, 2, 3]\n    assert order_function([3, 2, 1]) == [1, 2, 3]\n    assert order_function([1, 1, 1]) == [1, 1, 1]\n    assert order_function([1, 1, 2]) == [1, 1, 2]\n    assert order_function([1, 1, 2, 3, 2, 1]) == [1, 1, 2, 2, 3, 1]\n    assert order_function([3, 1, 1, 1, 3, 3, 1]) == [1, 1, 1, 3, 3, 1, 3]\n    assert order_function([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_function([10, 31, 20, 11]) == [10, 20, 11, 31]\n    assert order_function([31415, 271828, 1999, 314, 1592653594]) == [\n        1999,\n        314,\n        271828,\n        31415,\n        1592653594,\n    ]\n\n\nif __name__ == \"__main__\":\n    check_order(order_by_points)",
    "return sorted(nums, key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n\n\nif __name__ == \"__main__\":\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []",
    "if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return nums\n\n    # Split the list into two halves.\n    mid = len(nums) // 2\n\n    # Recursively call the function on the two halves.\n    left = order_by_points(nums[:mid])\n    right = order_by_points(nums[mid:])\n\n    # Merge the two halves.\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] + right[right_index] > left[right_index] + right[left_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    # Append the remaining elements.\n    merged += left[left_index:]\n    merged += right[right_index:]\n    return merged\n\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n\n\ndef order_by_points_naive(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "# check for empty input list\n    if len(nums) == 0:\n        return []\n\n    # check for non-integer input list\n    if not all(type(num) == int for num in nums):\n        raise ValueError(\"All list items should be integers\")\n\n    # check for negative input list\n    if not all(num >= 0 for num in nums):\n        raise ValueError(\"All list items should be non-negative\")\n\n    # initialize a list to store the sum of each integer's digits\n    digit_sums = []\n\n    # initialize a dictionary to store the mapping from the sum of each integer's digits to the index of each integer in the input list\n    digit_sum_index_mapping = {}\n\n    # calculate the sum of each integer's digits and store it in the digit_sums list\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        digit_sums.append(digit_sum)\n\n    # initialize a list to store the sorted integers in\n    sorted_nums = []\n\n    # for each unique sum of the digits in the input list\n    for digit_sum in set(digit_sums):\n        # get the indices of the integers with the corresponding sum of the digits\n        indices = [i for i, x in enumerate(digit_sums) if x == digit_sum]\n        # add the integers at those indices to the sorted list\n        for index in indices:\n            sorted_nums.append(nums[index])\n\n    # return the sorted list\n    return sorted_nums\n\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))\nprint(order_by_points([1, 11, -1, -11, -12, 100, 101]))\nprint(order_by_points([1, 11, -1, -11, -12, 100, 101, -1000, -1001]))",
    "if len(nums) == 0:\n        return []\n    # sort nums by sum of digits\n    nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    # sort nums by index\n    nums.sort(key=lambda x: nums.index(x))\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "nums.sort(key=lambda x: sum(int(y) for y in str(abs(x))))\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "# your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=lambda x: sum(int(d) for d in str(x)), reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n    # return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]) + nums.index(x))\n    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]) + nums.index(x))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "nums = sorted(nums, key=lambda x: sum_digits(x))\n    return nums\n\n\ndef sum_digits(n):\n    return sum(map(int, str(n)))\n\n\ndef test_order_by_points():\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()",
    "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))",
    "nums.sort(key=lambda x: (sum(int(d) for d in str(x)), x))\n    return nums\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "# OrderedDict(<list of tuples>)\n    # [(1, 1), (11, 2), (-1, 1), (-11, 2), (-12, 2)]\n    # [(-1, 1), (-11, 2), (1, 1), (-12, 2), (11, 2)]\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\n\ndef order_by_points_with_collections(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # OrderedDict(<list of tuples>)\n    # [(1, 1), (11, 2), (-1, 1), (-11, 2), (-12, 2)]\n    # [(-1, 1), (-11, 2), (1, 1), (-12, 2), (11, 2)]\n    import collections\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\n\ndef order_by_points_with_lambda(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []",
    "# sort nums by sum of digits\n    # if two or more nums have the same sum of digits, sort them by index\n    # nums.sort(key=lambda num: (sum(map(int, str(num))), num))\n    nums.sort(key=lambda num: (sum(map(int, str(num))), num))\n    return nums\n\n\ndef order_by_points_two(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # sort nums by sum of digits\n    # if two or more nums have the same sum of digits, sort them by index\n    # nums.sort(key=lambda num: (sum(map(int, str(num))), num))\n    return sorted(nums, key=lambda num: (sum(map(int, str(num))), num))\n\n\ndef order_by_points_three(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # sort nums by sum of digits\n    # if two or more nums have the same sum of digits, sort them by index\n    # nums.sort(key=lambda num: (sum(map(int, str(num))), num))\n    return sorted(",
    "# sort by sum of digits\n    nums.sort(key = lambda x: sum([int(n) for n in str(x)]))\n\n    # sort by index\n    nums.sort(key = lambda x: nums.index(x))\n\n    return nums\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
    "pass",
    "def sum_digits(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n\n    return sorted(nums, key=lambda x: (sum_digits(x), x))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "if not nums:\n        return []\n\n    # O(n*log(n))\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    # O(n*n)\n    nums.sort(key=lambda x: nums.index(x))\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# if len(nums) == 0:\n    #     return []\n    # else:\n    #     return sorted(nums, key=sum_digits)\n    # return sorted(nums, key=lambda x: sum_digits(x))\n    return sorted(nums, key=lambda x: (sum_digits(x), x))\n\n\ndef sum_digits(num):\n    return sum(int(d) for d in str(num))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# O(n log n) solution\n    # O(n) space\n    # return sorted(nums, key=lambda n: sum(map(int, str(n))))\n\n    # O(n^2) solution\n    # O(1) space\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum(map(int, str(nums[i]))) > sum(map(int, str(nums[j]))):\n                nums[i], nums[j] = nums[j], nums[i]\n\n    return nums",
    "# your code here\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "pass\n\n\ndef order_by_points_v2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    points = [sum([int(n) for n in str(num)]) for num in nums]\n    return sorted(nums, key=lambda x: (points[nums.index(x)], x))\n\n\nif __name__ == '__main__':\n    print(order_by_points_v2([1, 11, -1, -11, -12]))",
    "nums = list(nums)\n    nums.sort(key=lambda x: x, reverse=True)\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Sorting the list of integers based on the sum of their digits.\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\n    # Sorting the list of integers based on their index in original list.\n    nums.sort(key=lambda x: x)\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n    return nums\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# your code here\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([3, 1, 10, 4]) == [1, 3, 4, 10]\n    assert order_by_points([]) == []\n    assert order_by_points([3, 1, 10, 4, 2]) == [1, 2, 3, 4, 10]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "# your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))), reverse=True)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([1, 11, 111]) == [1, 11, 111]\n    assert order_by_points([1]) == [1]\n    assert order_by_points([-1, -11, -12]) == [-1, -12, -11]\n    assert order_by_points([]) == []\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "# if not nums:\n    #     return []\n    #\n    # # sort by sum of digits\n    # nums.sort(key=lambda x: sum(int(i) for i in str(abs(x))))\n    #\n    # # sort by index\n    # nums.sort(key=lambda x: nums.index(x))\n    #\n    # return nums\n\n    if not nums:\n        return []\n\n    # sort by sum of digits\n    nums.sort(key=lambda x: sum(int(i) for i in str(abs(x))))\n\n    # sort by index\n    nums.sort(key=lambda x: nums.index(x))\n\n    return nums",
    "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n\n\ndef order_by_points_1(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x), reverse=True)\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)), reverse=True)\n\n\nif __name__ == '__main__':\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11]",
    "# Your code here\n\n    def key_func(num):\n        return sum(int(d) for d in str(num)), num\n\n    return sorted(nums, key=key_func)\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def key_func(num):\n        return sum(int(d) for d in str(num)), -nums.index(num)\n\n    return sorted(nums, key=key_func)\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def key_func(num):\n        return sum(int(d) for d in str(num)), -nums.index(num)\n\n    return sorted(nums, key=key_func)\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -",
    "# Your code here\n    pass",
    "# Your code here\n    # Create a dictionary with digit sum as key and original index as value\n    dict_of_sums = {sum(map(int, str(i))): i for i in nums}\n    # Sort the dictionary by key\n    sorted_dict = sorted(dict_of_sums.items(), key=lambda x: x[0])\n    # Create a list of values from sorted dictionary\n    list_of_values = [i[1] for i in sorted_dict]\n    # Return the list\n    return list_of_values\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([0]) == [0]\n    assert order_by_points([0, 0]) == [0, 0]\n    assert order_by_points([4, 5]) == [5, 4]\n    assert order_by_points([4, 5, 4]) == [5, 4, 4]\n    assert order_by_points([5, 5, 4, 4]) == [5, 5, 4, 4]\n    assert order_by_points([2, 1]) == [1, 2]\n    assert order_by_points([55, 50, 64, 69, 63, 23]) == [69, 64, 55, 63, 23, 50]\n    assert order_by_points([0, 10, 100, 1000, 0, 10, 100]) == [0, 0, 10, 10, 100, 100",
    "# TODO: write your code here\n    return sorted(nums, key=lambda x: (sum(int(y) for y in str(x)), x))\n\n\nif __name__ == \"__main__\":\n    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
    "# pass\n\n\ndef order_by_points_soln(nums):\n    def order_by_points_aux(nums, nums_sums):\n        if len(nums) <= 1:\n            return\n        pivot = nums[0]\n        left = [num for num in nums[1:] if num <= pivot]\n        right = [num for num in nums[1:] if num > pivot]\n        order_by_points_aux(left, nums_sums)\n        order_by_points_aux(right, nums_sums)\n        nums_sums.sort(key=lambda num: num[1])\n        if len(nums_sums) > 1:\n            if nums_sums[0][1] == nums_sums[1][1]:\n                if nums_sums[0][0] < nums_sums[1][0]:\n                    nums_sums[0], nums_sums[1] = nums_sums[1], nums_sums[0]\n        nums_sums.append([pivot, sum(map(int, str(pivot)))])\n        nums[0] = nums_sums.pop(0)[0]\n\n    nums_sums = [(num, sum(map(int, str(num)))) for num in nums]\n    nums_sums.sort(key=lambda num: num[1])\n    order_by_points_aux(nums, nums_sums)\n    return nums\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points_soln([1, 11, -1, -11, -12]))",
    "nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# create a list of tuples (num, sum of digits)\n    # and sort it in reverse order\n    # then return the list without the sum of digits\n\n    ordered_list = sorted(\n        [\n            (num, sum([int(char) for char in str(num)]))\n            for num in nums\n        ],\n        key=lambda x: (x[1], nums.index(x[0]))\n    )\n\n    return [x[0] for x in ordered_list]\n\n\nif __name__ == \"__main__\":\n    order_by_points([1, 11, -1, -11, -12])\n    order_by_points([])\n    import doctest\n    doctest.testmod()",
    "nums_sums = []\n    for num in nums:\n        nums_sums.append((sum([int(i) for i in str(num)]), num))\n    nums_sums.sort(key=lambda x: x[0])\n    return [i[1] for i in nums_sums]\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "nums_dict = {}\n    for num in nums:\n        nums_dict[num] = sum(int(n) for n in str(num))\n    sorted_nums = sorted(nums_dict, key=nums_dict.get)\n    return sorted_nums\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(n) for n in str(x)), x))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points_2([1, 11, -1, -11, -12]))\n    print(order_by_points_2([1, 11, -1, -11, -12]))",
    "# Sort the list by sum of digits and then by index.\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))",
    "result = []\n    while nums:\n        max_index = 0\n        for i, num in enumerate(nums):\n            if sum(int(n) for n in str(num)) > sum(int(n) for n in str(nums[max_index])):\n                max_index = i\n        result.append(nums[max_index])\n        nums.pop(max_index)\n    return result\n\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
    "# your code here\n    result = []\n    for i in range(len(nums)):\n        current_num = nums[i]\n        temp_sum = 0\n        while current_num > 0:\n            temp_sum += current_num % 10\n            current_num = current_num // 10\n        result.append([temp_sum, i])\n    result.sort(key = lambda x: (x[0], x[1]))\n    final_result = []\n    for i in range(len(result)):\n        final_result.append(nums[result[i][1]])\n    return final_result\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # your code here\n    result = []\n    for i in range(len(nums)):\n        current_num = nums[i]\n        temp_sum = 0\n        while current_num > 0:\n            temp_sum += current_num % 10\n            current_num = current_num // 10\n        result.append([temp_sum, i])\n    result.sort(key = lambda x: (x[0], x[1]))\n    final_result = []\n    for i in range(len(result)):\n        final_result.append(nums[result[i][1]])\n    return final_result\n\norder_by_points([1, 11, -1, -11, -12])",
    "# Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(order_by_points([100, 50, 10, 2]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([100, 50, 10, 2]) == [2, 10, 50, 100]\n    assert order_by_points([-1000, 50, -5, -10, 2]) == [-10, -5, 2, 50, -1000]\n    assert order_by_points([-10000, 50, -5, -10, 2]) == [-10, -5, -10000, 2, 50]\n    assert order_by_points([100000, 100, 50, 10, 2]) == [2, 10, 50, 100, 100000]\n    assert order_by_points([-100000, -100, -50, -10, -2]) == [-10, -50, -100, -2, -100000]\n    assert order_by_points([100000, -100, 50, -10, -2]) == [-2, -10, 50, -100, 100000]\n    assert order_by_points([-100000, 100, -50, -10, -2]) == [-2, -10, -50, -100, -100000]\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -",
    "if len(nums) == 0:\n        return []\n\n    sorted_nums = sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    sorted_nums = sorted(sorted_nums, key=nums.index)\n    return sorted_nums\n\n\ndef order_by_points_fast(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    sorted_nums = sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    sorted_nums = sorted(sorted_nums, key=nums.index)\n    return sorted_nums\n\n\ndef order_by_points_fastest(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    sorted_nums = sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    sorted_nums = sorted(sorted_nums, key=nums.index)\n    return sorted_nums\n\n\nif __name__ == '__main",
    "# return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), abs(x)))\n\n    # # 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "# your code here\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)), reverse=False)\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "nums = sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "pass\n\n\ndef order_by_points_v2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_v3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_v4(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# for item in nums:\n    #     digits = sum([int(digit) for digit in str(item)])\n    #     if digits in digits_sums:\n    #         digits_sums[digits].append(item)\n    #     else:\n    #         digits_sums[digits] = [item]\n    #\n    # ordered_items = []\n    # for key in sorted(digits_sums):\n    #     for item in digits_sums[key]:\n    #         ordered_items.append(item)\n    # return ordered_items\n\n    # for i, item in enumerate(nums):\n    #     digits = sum([int(digit) for digit in str(item)])\n    #     nums[i] = (digits, item, i)\n    #\n    # nums.sort()\n    # return [item for _, item, _ in nums]\n\n    for i, item in enumerate(nums):\n        digits = sum([int(digit) for digit in str(item)])\n        nums[i] = (digits, item, i)\n\n    nums.sort()\n    return [item for _, item, _ in nums]\n\n\ndef order_by_points2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # for i, item in enumerate(nums):\n    #     digits = sum([int(digit) for digit in str(item)])\n    #     nums[i] = (digits, item, i)\n    #\n    # nums.sort()\n    # return [item for _, item, _ in nums]\n\n    for i, item in enumerate(nums):",
    "def sort_order(num):\n        return sum(int(x) for x in str(num)), num\n\n    return sorted(nums, key=sort_order)\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# My solution\n    # return sorted(nums, key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n\n    # My solution 2\n    # return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n\n    # Better solution\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), -nums.index(x)))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), abs(x)))",
    "res = []\n    for i in range(len(nums)):\n        sum_num = 0\n        num = nums[i]\n        for j in str(num):\n            sum_num += int(j)\n        res.append((sum_num, i, num))\n    res.sort()\n    res = [num for _, _, num in res]\n    return res",
    "pass\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_4(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass\n\n\ndef order_by_points_5(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1",
    "pass\n\n\ndef order_by_points_alt(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_digits)\n\n\ndef sum_digits(num):\n    return sum(map(int, str(abs(num))))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))\n    print(order_by_points([1, 11, -1, -11, -12, 100, 101, 10, 110]))",
    "nums_with_sum_of_digits = [\n        (num, sum(int(digit) for digit in str(num)))\n        for num in nums\n    ]\n    return sorted(\n        nums_with_sum_of_digits,\n        key=lambda num_with_sum_of_digits: (\n            num_with_sum_of_digits[1],\n            num_with_sum_of_digits[0]\n        )\n    )\n\nif __name__ == '__main__':\n    try:\n        raw_input          # Python 2\n    except NameError:\n        raw_input = input  # Python 3\n\n    user_input = raw_input('Enter numbers separated by a comma:\\n').strip()\n    nums = [int(item) for item in user_input.split(',')]\n    print(order_by_points(nums))",
    "# [1, 11, -1, -11, -12]\n    # [(-1, -1), (1, 1), (-11, -11), (-12, -12), (11, 11)]\n    # [-1, -11, -12, 1, 11]\n    nums_by_points = [(sum(int(n) for n in str(n)), n) for n in nums]\n    nums_by_points.sort(key=lambda x: (x[0], nums.index(x[1])))\n    return [n for _, n in nums_by_points]\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "sorted_nums = []\n    for num in nums:\n        sum_digits = sum(int(i) for i in str(abs(num)))\n        sorted_nums.append((sum_digits, num))\n    sorted_nums.sort()\n    return [num for _, num in sorted_nums]\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# build a dictionary, where the key is the sum of digits of an item,\n    # and the value is a list of all items with that sum\n    dict_sum_to_items = {}\n    for num in nums:\n        sum_of_digits = sum([int(char) for char in str(num)])\n        if sum_of_digits not in dict_sum_to_items:\n            dict_sum_to_items[sum_of_digits] = [num]\n        else:\n            dict_sum_to_items[sum_of_digits].append(num)\n\n    # sort the dictionary by the sum of digits\n    sorted_dict_sum_to_items = sorted(dict_sum_to_items.items())\n\n    # sort the items in the dictionary by their index in the original list\n    sorted_nums = []\n    for _, items in sorted_dict_sum_to_items:\n        sorted_nums.extend(items)\n\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([-10, -100]) == [-10, -100]\n    assert order_by_points([-1, 2, 3, 4, 5]) == [-1, 2, 3, 4, 5]\n    assert order_by_points([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\n    assert order_by_points([100, -100, 1, -1]) == [-100, 1, -1, 100]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))",
    "pass\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))",
    "# your code here\n    #sort(nums, key = lambda x: sum(map(int, str(x))), reverse = True)\n    nums.sort(key=lambda x: (sum(map(int, str(x))), x), reverse = True)\n    return nums\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([-12345]) == [-12345]\n    assert order_by_points([0, 0, 0]) == [0, 0, 0]\n    assert order_by_points([4, 5, 1, 2, 8, 0]) == [0, 1, 2, 4, 5, 8]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}