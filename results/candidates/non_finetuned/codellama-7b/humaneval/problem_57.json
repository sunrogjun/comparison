{
  "problem": {
    "task_id": "HumanEval/57",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
    "entry_point": "monotonic",
    "docstring": "",
    "problem_id": 57
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "# check if monotonically increasing or decreasing\n    i = 1\n    while i < len(l):\n        if l[i-1] < l[i]:\n            i += 1\n        elif l[i-1] > l[i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return all(l[i] >= l[i + 1] for i in range(len(l) - 1)) or \\\n        all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\n\ndef test_monotonic():\n    assert monotonic([1, 2, 4, 20])\n    assert not monotonic([1, 20, 4, 10])\n    assert monotonic([4, 1, 0, -10])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# monotonicity = True\n    # if l == []:\n    #     return True\n    # else:\n    #     for i in range(len(l) - 1):\n    #         if l[i] > l[i + 1]:\n    #             monotonicity = False\n    #             return monotonicity\n    #     return monotonicity\n\n    monotonicity = True\n    if l == []:\n        return True\n    elif l[1] > l[0]:\n        for i in range(2, len(l)):\n            if l[i] < l[i - 1]:\n                monotonicity = False\n                return monotonicity\n    elif l[1] < l[0]:\n        for i in range(2, len(l)):\n            if l[i] > l[i - 1]:\n                monotonicity = False\n                return monotonicity\n    return monotonicity\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n\n    if l[0] < l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))",
    "if len(l) <= 1:\n        return True\n    if l[1] > l[0]:\n        return monotonic(l[1:])\n    if l[1] < l[0]:\n        return monotonic(l[1:])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if not l:\n        return True\n    elif len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1, len(l)-1):\n            if l[i] < l[i+1]:\n                continue\n            else:\n                return False\n        return True\n    elif l[0] > l[1]:\n        for i in range(1, len(l)-1):\n            if l[i] > l[i+1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n\n    if l[0] > l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    print(monotonic([1, 2, 4, 20]))\n    print(monotonic([1, 20, 4, 10]))\n    print(monotonic([4, 1, 0, -10]))",
    "# monotonicity is either strictly increasing or decreasing\n    increasing = True\n    decreasing = True\n\n    # check if list is increasing\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n\n    # check if list is decreasing\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# check for monotonicity\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n    if l[0] > l[1]:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    last = None\n    for e in l:\n        if last is not None:\n            increasing &= e >= last\n            decreasing &= e <= last\n        last = e\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\ndef main():\n    print(monotonic([1, 2, 4, 20]))\n    print(monotonic([1, 20, 4, 10]))\n    print(monotonic([4, 1, 0, -10]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if l == []:\n        return True\n    else:\n        # check if list is monotonically increasing\n        inc = True\n        for i in range(len(l)-1):\n            if l[i+1] < l[i]:\n                inc = False\n                break\n        # check if list is monotonically decreasing\n        dec = True\n        for i in range(len(l)-1):\n            if l[i+1] > l[i]:\n                dec = False\n                break\n        return inc or dec\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if not l:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    prev = l[0]\n    for x in l[1:]:\n        if increasing:\n            if x < prev:\n                increasing = False\n        if decreasing:\n            if x > prev:\n                decreasing = False\n        prev = x\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))",
    "if len(l) < 2:\n        return True\n\n    if l[0] < l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# monotonic = True\n    # for i in range(len(l) - 1):\n    #     if l[i] > l[i + 1]:\n    #         monotonic = False\n    #         break\n    # return monotonic\n\n    # monotonic = True\n    # if len(l) > 1:\n    #     if l[0] > l[1]:\n    #         monotonic = False\n    #     else:\n    #         for i in range(1, len(l) - 1):\n    #             if l[i] < l[i - 1] or l[i] > l[i + 1]:\n    #                 monotonic = False\n    #                 break\n    # return monotonic\n\n    monotonic = True\n    if len(l) > 1:\n        if l[0] > l[1]:\n            monotonic = False\n        else:\n            for i in range(1, len(l)):\n                if l[i - 1] > l[i]:\n                    monotonic = False\n                    break\n    return monotonic\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # monotonic = True\n    # for i in range(len(l) - 1):\n    #     if l[i] > l[i + 1]:\n    #         monotonic = False\n    #         break\n    # return monotonic\n\n    monotonic = True\n    if len(l) > 1:\n        if l[0] > l[1]:\n            monotonic = False\n        else:",
    "diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(diff[i] >= 0 for i in range(len(diff))) or all(diff[i] <= 0 for i in range(len(diff)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# Note: You can use any data type for the list\n    #       But the function should work for all data types\n    #       You can use any programming language that can\n    #       be integrated with Python\n    #       You can use online compilers like https://repl.it/@shreyasnayak/monotonic\n    #       You can use any programming language that you are comfortable with\n    #       If you want to learn a new language for this problem, that's fine but\n    #       please do it in your free time when you are not studying/working on other\n    #       assignments\n    #\n    # Please don't copy paste local function definitions. Please ensure that\n    # this code is integrated with your online compiler/IDE\n\n    # if len(l) == 1:\n    #     return True\n    #\n    # if l[0] < l[1]:\n    #     for i in range(1, len(l)-1):\n    #         if l[i] < l[i+1]:\n    #             continue\n    #         else:\n    #             return False\n    #     return True\n    #\n    # if l[0] > l[1]:\n    #     for i in range(1, len(l)-1):\n    #         if l[i] > l[i+1]:\n    #             continue\n    #         else:\n    #             return False\n    #     return True\n\n    # return all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n\n    if len(l) == 1:\n        return True\n\n    if l[0] < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef main():\n    print(monotonic([1, 2, 4, 20]))\n    print(monotonic([1, 20,",
    "if len(l) < 3:\n        return True\n\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    else:\n        return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "for i in range(len(l)-1):\n        if l[i+1] - l[i] < 0:\n            return False\n    return True\n\n\ndef monotonic_1(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_1([1, 2, 4, 20])\n    True\n    >>> monotonic_1([1, 20, 4, 10])\n    False\n    >>> monotonic_1([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l == sorted(l)) or (l == sorted(l, reverse=True))\n\n\ndef monotonic_2(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_2([1, 2, 4, 20])\n    True\n    >>> monotonic_2([1, 20, 4, 10])\n    False\n    >>> monotonic_2([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 0 and l[i] - l[i+1] != 0:\n            return False\n    return True\n\n\nprint(monotonic_2([1, 2, 4, 20]))\nprint(monotonic_2([1, 20, 4, 10]))\nprint(monotonic_2([4, 1, 0, -10]))",
    "if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "inc = dec = True\n    for i in range(1, len(l)):\n        if inc:\n            if l[i - 1] > l[i]:\n                inc = False\n        if dec:\n            if l[i - 1] < l[i]:\n                dec = False\n    return inc or dec\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n    else:\n        if l[0] <= l[1]:\n            return monotonic(l[1:])\n        elif l[0] >= l[1]:\n            return monotonic(l[1:])\n        else:\n            return False\n\n\ndef monotonic_iterative(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_iterative([1, 2, 4, 20])\n    True\n    >>> monotonic_iterative([1, 20, 4, 10])\n    False\n    >>> monotonic_iterative([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n    else:\n        i = 1\n        while i < len(l):\n            if l[i - 1] <= l[i] and i < len(l) - 1:\n                i += 1\n            elif l[i - 1] >= l[i] and i < len(l) - 1:\n                i += 1\n            else:\n                return False\n        return True\n\n\ndef monotonic_recursive(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_recursive([1, 2, 4, 20])\n    True\n    >>> monotonic_recursive([1, 20, 4, 10])\n    False\n    >>> monotonic_recursive([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2",
    "if len(l) < 2:\n        return True\n\n    direction = None\n    for i in range(1, len(l)):\n        if direction is None:\n            direction = 1 if l[i - 1] < l[i] else -1\n        elif direction == 1:\n            if l[i - 1] >= l[i]:\n                return False\n        else:\n            if l[i - 1] <= l[i]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "for i in range(1, len(l)):\n        if l[i-1] < l[i] and l[i] < l[i+1]:\n            return False\n        elif l[i-1] > l[i] and l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([10, 9, 6, 5, 3, 1])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i-1] > l[i] and l[i] < l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i-1] < l[i] and l[i] > l[i+1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# l = sorted(l)\n    # for i in range(len(l)-1):\n    #     if l[i] > l[i+1]:\n    #         return False\n    # return True\n    return (sorted(l) == l) | (sorted(l, reverse=True) == l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\ndef non_decreasing(l: list):\n    \"\"\"Return True if list elements are non-decreasing.\n    >>> non_decreasing([1, 2, 4, 20])\n    True\n    >>> non_decreasing([1, 2, 10, 4])\n    False\n    >>> non_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\ndef non_increasing(l: list):\n    \"\"\"Return True if list elements are non-increasing.\n    >>> non_increasing([1, 2, 4, 20])\n    False\n    >>> non_increasing([1, 2, 10, 4])\n    False\n    >>> non_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if the string is a palindrome.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_palindrome_recursive(s: str, i: int = 0, j: int = None):\n    \"\"\"Return True if the string is a palindrome.\n    >>> is_palindrome_recursive('noon')\n    True\n    >>> is_palindrome_recursive('racecar')\n    True\n    >>> is_palindrome_recursive('dented')\n    False\n    \"\"\"\n    if j is None:\n        j = len(s) - 1\n    if",
    "is_increasing = True\n    is_decreasing = True\n    prev_element = l[0]\n    for element in l[1:]:\n        if prev_element < element:\n            is_decreasing = False\n        elif prev_element > element:\n            is_increasing = False\n        prev_element = element\n    return is_increasing or is_decreasing\n\n\ndef monotonic2(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic2([1, 2, 4, 20])\n    True\n    >>> monotonic2([1, 20, 4, 10])\n    False\n    >>> monotonic2([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing = True\n    is_decreasing = True\n    prev_element = l[0]\n    for element in l[1:]:\n        if prev_element < element:\n            is_decreasing = False\n        elif prev_element > element:\n            is_increasing = False\n        prev_element = element\n    return is_increasing or is_decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# Check if the list is monotonically increasing or decreasing.\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return True\n        if l[i] < l[i - 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "direction = 0\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            if direction == -1:\n                return False\n            direction = 1\n        elif l[i] > l[i+1]:\n            if direction == 1:\n                return False\n            direction = -1\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i-1] < l[i]:\n            increasing = False\n        elif l[i-1] > l[i]:\n            decreasing = False\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if monotonic(l) or monotonic(l[::-1]):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "l = sorted(l)\n    return l == l[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True\n\n\ndef test_cases():\n    assert monotonic([1, 2, 4, 20])\n    assert not monotonic([1, 20, 4, 10])\n    assert monotonic([4, 1, 0, -10])\n    assert not monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    assert monotonic",
    "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] == l[1] or l[0] < l[1]\n    elif l[0] < l[1]:\n        return monotonic(l[1:])\n    elif l[0] > l[1]:\n        return monotonic(l[1:])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = None\n    for i in range(len(l) - 1):\n        if increasing is None:\n            increasing = l[i + 1] >= l[i]\n        elif increasing:\n            if l[i + 1] < l[i]:\n                return False\n        else:\n            if l[i + 1] > l[i]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if l == []:\n        return True\n    else:\n        if l[0] > l[1]:\n            return False\n        elif l[0] < l[1]:\n            return monotonic(l[1:])\n        else:\n            return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = None\n    for i in range(len(l) - 1):\n        if increasing is None:\n            increasing = l[i + 1] >= l[i]\n        elif increasing and l[i + 1] < l[i]:\n            return False\n        elif not increasing and l[i + 1] > l[i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# if l == sorted(l):\n    #     return True\n    # else:\n    #     return False\n    # return sorted(l) == l\n    if len(l) < 2:\n        return True\n    else:\n        if (l[0] < l[1] and all(l[i] <= l[i + 1] for i in range(len(l) - 1))) or (l[0] > l[1] and all(l[i] >= l[i + 1] for i in range(len(l) - 1))):\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if l[i] - l[i - 1] != diff:\n            return False\n    return True\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True\n\n\ndef monotonic_non_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_non_increasing([1, 2, 4, 20])\n    False\n    >>> monotonic_non_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_non_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2",
    "# return l == sorted(l) or l == sorted(l, reverse=True)\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(\n        l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [1, 2, 4, 20]\n    print(monotonic(l))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if len(l) == 0:\n        return False\n\n    is_increasing = l[0] <= l[-1]\n    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) if is_increasing else all(l[i] >= l[i+1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) <= 1:\n        return True\n\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    elif l[0] > l[1]:\n        return monotonic([-x for x in l[1:]])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) <= 1:\n        return True\n\n    is_increasing = l[0] < l[1]\n    for i in range(len(l) - 1):\n        if is_increasing != (l[i] < l[i + 1]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == list(reversed(sorted(l)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# We could make this a one liner using the all function\n    # but I think this is more readable.\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# Check that list is monotonic\n    if len(l) <= 1:\n        return True\n\n    # Check for monotonic increase\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n\n    # Check for monotonic decrease\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# check if list is empty or has only one element\n    if len(l) <= 1:\n        return True\n    # check if list is monotonically increasing\n    if l[0] <= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n        return True\n    # check if list is monotonically decreasing\n    elif l[0] >= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n        return True\n    return False\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [1, 2, 4, 20]\n    result = monotonic(l)\n    print(f'monotonic({l}): {result}')\n\n\nif __name__ == '__main__':\n    main()",
    "return all(l[i] >= l[i + 1] for i in range(len(l) - 1)) or all(\n        l[i] <= l[i + 1] for i in range(len(l) - 1)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(\n        l[i] >= l[i + 1] for i in range(len(l) - 1)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if l == []:\n        return True\n    elif l[0] < l[1]:\n        return all(x <= y for x, y in zip(l, l[1:]))\n    else:\n        return all(x >= y for x, y in zip(l, l[1:]))\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([1, 2, 4, 5, 20]))\nprint(monotonic([1, 2, 4, 5, 10]))\nprint(monotonic([1, 2, 4, 5, 1, 10]))",
    "if len(l) == 0:\n        return True\n    direction = l[1] - l[0]\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1] * direction:\n            return False\n    return True\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))",
    "for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    # Get the sign of the derivative\n    if l[0] < l[-1]:\n        sign = 1\n    else:\n        sign = -1\n    # See if the derivative is monotonic\n    for i in range(1, len(l)):\n        if sign * (l[i] - l[i-1]) < 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "is_increasing = True\n    is_decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))",
    "return is_monotonic_increasing(l) or is_monotonic_decreasing(l)\n\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True",
    "is_monotonic = True\n    is_increasing = l[0] < l[-1]\n    prev = l[0]\n    for i in range(1, len(l)):\n        if is_increasing:\n            is_monotonic = prev < l[i]\n        else:\n            is_monotonic = prev > l[i]\n        if not is_monotonic:\n            return False\n        prev = l[i]\n    return is_monotonic\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    if l[0] > l[1]:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))\n    return True",
    "if len(l) < 2:\n        return True\n    is_increasing = l[0] < l[1]\n    for i in range(1, len(l) - 1):\n        if is_increasing != (l[i] < l[i+1]):\n            return False\n    return True",
    "# TODO: implement\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "is_increasing = l[0] <= l[1]\n    for i in range(len(l) - 1):\n        if is_increasing:\n            if l[i] >= l[i + 1]:\n                return False\n        else:\n            if l[i] <= l[i + 1]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) <= 1:\n        return True\n\n    if l[0] < l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    m = 0\n    if l[0] < l[1]:\n        m = 1\n    for i in range(1, len(l)):\n        if m == 1 and l[i] < l[i-1]:\n            return False\n        if m == 0 and l[i] > l[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 3:\n        return True\n\n    if l[0] < l[1]:\n        return all(x <= y for x, y in zip(l, l[1:]))\n    else:\n        return all(x >= y for x, y in zip(l, l[1:]))\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True is string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('cat')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef reverse(s: str):\n    \"\"\"Return a string with its characters in reverse order.\n    >>> reverse('cat')\n    'tac'\n    \"\"\"\n    return s[::-1]\n\n\ndef count_vowels(s: str):\n    \"\"\"Return the number of vowels in a string.\n    >>> count_vowels('cat')\n    1\n    >>> count_vowels('elephant')\n    4\n    \"\"\"\n    return sum(c in 'aeiou' for c in s)\n\n\ndef count_consonants(s: str):\n    \"\"\"Return the number of consonants in a string.\n    >>> count_consonants('cat')\n    2\n    >>> count_consonants('elephant')\n    6\n    \"\"\"\n    return len(s) - count_vowels(s)\n\n\ndef has_no_e(s: str):\n    \"\"\"Return True if the given string contains no 'e' characters.\n    >>> has_no_e('cat')\n    False\n    >>> has_no_e('ght')\n    True\n    \"\"\"\n    return 'e' not in s\n\n\ndef has_all_e(s: str):\n    \"\"\"Return True if the given string contains at least one 'e' character.\n    >>> has_all_e('cat')\n    False\n    >>> has_all_e('ght')\n    True\n    \"\"\"\n    return 'e' in s\n\n\ndef is_abecedarian(s: str):\n    \"\"\"Return True if the",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# if len(l) <= 2:\n    #     return True\n    # elif l[0] > l[1]:\n    #     for i in range(1, len(l)):\n    #         if l[i] < l[i-1]:\n    #             return False\n    #     return True\n    # elif l[0] < l[1]:\n    #     for i in range(1, len(l)):\n    #         if l[i] > l[i-1]:\n    #             return False\n    #     return True\n\n    # return all(x <= y for x, y in zip(l, l[1:]))\n\n    # return all(x >= y for x, y in zip(l, l[1:]))\n\n    # return all(x <= y for x, y in zip(l, l[1:]))\n    # return all(x >= y for x, y in zip(l, l[1:]))\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n    direction = 1 if l[0] < l[1] else -1\n    for i in range(1, len(l)):\n        if direction > 0:\n            if l[i] < l[i-1]:\n                return False\n        elif direction < 0:\n            if l[i] > l[i-1]:\n                return False\n    return True\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or monotonic(l[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "diffs = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    diffs_pos = [d for d in diffs if d > 0]\n    diffs_neg = [d for d in diffs if d < 0]\n    return (not diffs_pos or all(diffs_pos[i] >= diffs_pos[i + 1]\n            for i in range(len(diffs_pos) - 1))) \\\n        and (not diffs_neg or all(diffs_neg[i] <= diffs_neg[i + 1]\n            for i in range(len(diffs_neg) - 1)))\n\n\ndef non_monotonic(l: list):\n    \"\"\"Returns True is list elements are not monotonically increasing or\n    decreasing.\n    >>> non_monotonic([1, 2, 4, 20])\n    False\n    >>> non_monotonic([1, 20, 4, 10])\n    True\n    >>> non_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return not monotonic(l)\n\n\ndef is_monotonic(l: list):\n    \"\"\"Returns True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)",
    "if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True is string is palindrome.\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"racecar1\")\n    False\n    >>> is_palindrome(\"racecar2race\")\n    False\n    \"\"\"\n\n    if len(s) < 2:\n        return True\n\n    for i in range(len(s)):\n        if s[i] != s[-i - 1]:\n            return False\n\n    return True\n\n\ndef is_unique(s: str):\n    \"\"\"Return True is string contains only unique characters.\n    >>> is_unique(\"abcdefghijklmnopqrstuvwxyz\")\n    True\n    >>> is_unique(\"abcdefghijklmnopqrstuvwxyzz\")\n    False\n    \"\"\"\n\n    if len(s) < 2:\n        return True\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n\n    return True\n\n\ndef is_permutation(s1: str, s2: str):\n    \"\"\"Return True if s1 is permutation of s2.\n    >>> is_permutation(\"abcdefg\", \"efgabc\")\n    True\n    >>> is_permutation(\"abcdefg\", \"efg\")\n    False\n    \"\"\"\n\n    if len(s1) != len(s2):\n        return False\n\n    if len(s1) < 2:\n        return True\n\n    for i in range(len(s1)):\n        if s1.count(s1[i]) != s2.count(s2[i",
    "# return True if l == sorted(l) or l == sorted(l, reverse=True) else False\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# monotonic_inc = monotonic_dec = True\n    # for i in range(len(l) - 1):\n    #     if l[i] < l[i + 1]:\n    #         monotonic_inc = monotonic_inc and True\n    #     elif l[i] > l[i + 1]:\n    #         monotonic_dec = monotonic_dec and True\n    #     else:\n    #         return False\n    # return monotonic_inc or monotonic_dec\n\n    monotonic_inc = monotonic_dec = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            monotonic_inc = monotonic_inc and False\n        elif l[i] < l[i + 1]:\n            monotonic_dec = monotonic_dec and True\n        else:\n            return False\n    return monotonic_inc or monotonic_dec\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return (l == sorted(l)) or (l == sorted(l, reverse=True))\n\n\ndef monotonic_no_sort(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_no_sort([1, 2, 4, 20])\n    True\n    >>> monotonic_no_sort([1, 20, 4, 10])\n    False\n    >>> monotonic_no_sort([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 3:\n        return True\n    if l[0] > l[1]:\n        return False\n    for i in range(1, len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_deque(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_deque([1, 2, 4, 20])\n    True\n    >>> monotonic_deque([1, 20, 4, 10])\n    False\n    >>> monotonic_deque([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 3:\n        return True\n    d = deque(l)\n    if d[0] > d[1]:\n        return False\n    for i in range(1, len(l) - 1):\n        if d[i] > d[i+1]:\n            return False\n    return True\n\n\ndef monotonic_deque_reverse(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_deque_reverse([1, 2, 4, 20])\n    True\n    >>> monotonic_deque_reverse([1, 20, 4, 10])\n    False\n    >>> monotonic_deque_reverse([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <",
    "increasing = l[1:] > l[:-1]\n    decreasing = l[1:] < l[:-1]\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# monotonic if difference between each element is the same\n    if len(l) < 3:\n        return True\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if l[i] - l[i - 1] != diff:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\nprint(monotonic_increasing([1, 2, 4, 20]))\nprint(monotonic_increasing([1, 20, 4, 10]))\nprint(monotonic_increasing([4, 1, 0, -10]))\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True\n\n\nprint(monotonic_decreasing([1, 2, 4, 20]))\nprint(monotonic_decreasing([1, 20, 4, 10]))",
    "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return True\n    if l[1] > l[0]:\n        for i in range(1, len(l)-1):\n            if l[i] > l[i+1]:\n                return False\n        return True\n    elif l[1] < l[0]:\n        for i in range(1, len(l)-1):\n            if l[i] < l[i+1]:\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 3:\n        return True\n\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if l[i] - l[i-1] != diff:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(l) < 3:\n        return True\n\n    if l[1] > l[0]:\n        return monotonic(l[1:])\n    elif l[1] < l[0]:\n        return monotonic(l[1:])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([1, 2, 2, 4, 20]))",
    "if l == sorted(l):\n        return True\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    prev = l[0]\n    for e in l[1:]:\n        if increasing:\n            if e < prev:\n                increasing = False\n        if decreasing:\n            if e > prev:\n                decreasing = False\n        prev = e\n    return increasing or decreasing\n\n\ndef monotonic2(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic2([1, 2, 4, 20])\n    True\n    >>> monotonic2([1, 20, 4, 10])\n    False\n    >>> monotonic2([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    prev = l[0]\n    for e in l[1:]:\n        if increasing:\n            if e < prev:\n                increasing = False\n        if decreasing:\n            if e > prev:\n                decreasing = False\n        prev = e\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "l_ = list(l)\n    for i in range(len(l_) - 1):\n        if l_[i + 1] < l_[i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = False\n        elif l[i] < l[i - 1]:\n            decreasing = False\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n    #     return True\n\n    # if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n    #     return True\n\n    # if all(l[i] >= l[i+1] for i in range(len(l)-1)) or all(l[i] <= l[i+1] for i in range(len(l)-1)):\n    #     return True\n\n    # return False\n\n    if not l:\n        return True\n\n    if l[0] < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\n    if l[0] > l[1]:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if l == []:\n        return True\n    if l[1] < l[0]:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if l[0] < l[1]:\n        # increasing\n        for i in range(1, len(l)):\n            if l[i - 1] > l[i]:\n                return False\n        return True\n    else:\n        # decreasing\n        for i in range(1, len(l)):\n            if l[i - 1] < l[i]:\n                return False\n        return True",
    "if len(l) == 0:\n        return True\n    is_increasing = l[0] <= l[1]\n    for i in range(1, len(l)):\n        if is_increasing:\n            if l[i] < l[i - 1]:\n                return False\n        else:\n            if l[i] > l[i - 1]:\n                return False\n    return True\n\n\ndef main():\n    print(monotonic([1, 2, 4, 20]))\n    print(monotonic([1, 20, 4, 10]))\n    print(monotonic([4, 1, 0, -10]))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}