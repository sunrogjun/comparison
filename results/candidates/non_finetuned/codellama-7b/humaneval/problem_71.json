{
  "problem": {
    "task_id": "HumanEval/71",
    "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
    "entry_point": "triangle_area",
    "docstring": "",
    "problem_id": 71
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p*(p-a)*(p-b)*(p-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "# Check if the three sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the area of the triangle using Heron's Formula\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nprint(triangle_area(3, 4, 5))  # == 6.00,  area of 3, 4, 5 triangle\nprint(triangle_area(1, 2, 10))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(10, 10, 10))  # == 10.00,  area of 3, 4, 5 triangle\nprint(triangle_area(10, 1, 1))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(1, 1, 1))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(1, 2, 2))  # == -1,  the three sides do not form a triangle",
    "if a + b > c and a + c > b and b + c > a:\n        return round(((a + b) * c) / 2, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a) * (s - b) * (s - c)) ** (1/2)\n        return round(area,2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 1) == -1\n    assert triangle_area(0.5, 0.5, 0.5) == -1\n    assert triangle_area(1, 1, 1) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2",
    "# your code here\n    if a + b > c and a + c > b and b + c > a:\n        return (a + b + c)/2 * ((a + b + c) - a) ** 0.5\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(triangle_area(3, 4, 5))\n    print(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c)/2\n        return (p*(p-a)*(p-b)*(p-c))**(1/2)\n    else:\n        return -1",
    "# check for validity of the triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # calculate area\n        area = 0.5 * (a + b + c) * abs(a * b - c * c)\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(1, 2, 3, 2.00, triangle_area)\ntest_case(7, 2, 3, -1, triangle_area)",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s - a)*(s - b)*(s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5)) # 6.00\nprint(triangle_area(1, 2, 10)) # -1\nprint(triangle_area(10, 2, 1)) # -1\nprint(triangle_area(5, 4, 3)) # 6.00\nprint(triangle_area(10, 2, 3)) # -1\nprint(triangle_area(5, 4, 4)) # -1\nprint(triangle_area(1, 1, 1)) # -1",
    "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a+b>c and a+c>b and b+c>a:\n        return (a+b+c)/2 * abs(a*b/2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        return (a+b+c)/2 * 0.5\n    else:\n        return -1\n    \n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b * c, 2)\n    else:\n        return -1\n\ndef test_case(test_number, output, expected):\n    print(\"Test case \" + str(test_number) + \":\" + str(output == expected))\n\n\ndef main():\n    print(\"Triangle area test\")\n    test_case(1, triangle_area(3, 4, 5), 6.00)\n    test_case(2, triangle_area(1, 2, 10), -1)\n\n\nif __name__ == \"__main__\":\n    main()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(1, 2, 3, 2.00, triangle_area)\ntest_case(2, 2, 3, 1.73, triangle_area)\ntest_case(7, 2, 3, 5.19, triangle_area)",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (((a + b) * (b + c) * (a + c)) ** 0.5)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        area = 0.5 * (a + b + c) * (a - b) * (a - c) * (b - c)\n        return round(area**(1/2), 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n\n\n# Another solution\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(abs(a * b * c) / 2, 2)\n    else:\n        return -1",
    "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) ==",
    "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a + b + c) * (a - b) * (b - c) * (a - c)\n    return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if (a+b>c) and (a+c>b) and (b+c>a):\n        p=(a+b+c)/2\n        area=(p*(p-a)*(p-b)*(p-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n    \n\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(triangle_area(3, 4, 5))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert triangle_area(3, 4, 5) == 6.00, \"First\"\n    assert triangle_area(2, 2, 2) == -1, \"Second\"\n    assert triangle_area(5, 4, 3) == 6.00, \"Third\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    result = triangle_area(a, b, c)\n    print(result)",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**(0.5)\n        return round(area, 2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        return round((a * b * 100) / 2, 2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        return round(((a+b+c)/2) * (((a+b)**2)*((a+c)**2)),2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5)) # 6.00\nprint(triangle_area(1, 2, 10)) # -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a+b>c and b+c>a and c+a>b:\n        s=(a+b+c)/2\n        area=s*(s-a)*(s-b)*(s-c)\n        return round(area**(1/2),2)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(triangle_area(3, 4, 5))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert triangle_area(3, 4, 5) == 6.00, \"First\"\n    assert triangle_area(2, 2, 2) == 4.13, \"Second\"\n    assert triangle_area(5, 4, 3) == -1, \"Third\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = (area * (area - a) * (area - b) * (area - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a+b>c and a+c>b and b+c>a:\n        p=(a+b+c)/2\n        area=((p*(p-a)*(p-b)*(p-c))**0.5)/4\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\n\ndef triangle_area2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        return round(((a+b+c)/2)*(((a+b)*(b+c)*(c+a))**0.5),2)\n    else:\n        return -1\n\n\ndef triangle_area3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        return round((s*(s-a)*(s-b)*(s-c))**0.5,2)\n    else:\n        return -1\n\n\ndef triangle_area4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef triangle_area_4(a, b, c):\n    '''",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c)/2 * 1/2 * (a**2 + b**2 + c**2)**0.5\n    else:\n        return -1\n\ndef test_case(test_number, result, expected):\n    print(\"Test Case #{0}\".format(test_number))\n    if result == expected:\n        print(\"Passed\")\n    else:\n        print(\"Failed. {0} != {1}\".format(result, expected))\n\ntest_case(1, triangle_area(3, 4, 5), 6.00)\ntest_case(2, triangle_area(1, 2, 10), -1)\ntest_case(3, triangle_area(10, 2, 5), 9.13)\ntest_case(4, triangle_area(10, 2, 12), 12.47)\ntest_case(5, triangle_area(7, 2, 5), -1)\ntest_case(6, triangle_area(1, 2, 3), -1)\ntest_case(7, triangle_area(1, 3, 2), 2.00)\ntest_case(8, triangle_area(2, 1, 3), 2.00)\ntest_case(9, triangle_area(2, 3, 1), 2.00)\ntest_case(10, triangle_area(3, 1, 2), 2.00)\ntest_case(11, triangle_area(3, 2, 1), 2.00)\ntest_case(12, triangle_area(2, 3, 1), 2.00)\ntest_case(13, triangle_area(1, 3, 2), 2.00)",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p*(p-a)*(p-b)*(p-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        return (a+b+c)/2 * ((((a+b+c)/2)**2 - a*b)**0.5)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (b + c) * (a + c)) ** 0.5\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == -1\n    assert triangle_area(1, 7, 2) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (a + c) * (b + c)) ** 0.5\n    return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a)*(s - b)*(s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a + b > c and b + c > a and c + a > b:\n        return (a*b*c)/2\n    else:\n        return -1",
    "if a+b>c and a+c>b and b+c>a:\n        s=(a+b+c)/2\n        area=(s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    return -1",
    "if a+b > c and a+c > b and b+c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    return (a+b+c)/2 if a+b>c and a+c>b and b+c>a else -1\n\n\ndef triangle_area(a, b, c):\n    return -1 if a+b<c or a+c<b or b+c<a else round((a+b+c)/2 * (a+b-c)*(a+c-b)*(b+c-a), 2)",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (a + c) * (b + c)) ** (1 / 2)\n    else:\n        return -1\n\n\ndef test_case(arg1, arg2, arg3, arg4, expected):\n    print(f\"Calling triangle_area({arg1}, {arg2}, {arg3})\")\n    result = triangle_area(arg1, arg2, arg3)\n    print(f\"  result: {result}\")\n    print(f\"  expected: {expected}\")\n    if result == expected:\n        print(\"  PASS!\")\n    else:\n        print(\"  FAIL!\")\n\n\ndef test_triangle_area():\n    test_case(3, 4, 5, 6, -1)\n    test_case(1, 2, 10, 6, -1)\n    test_case(10, 1, 1, 10, 5.24)\n    test_case(7, 2, 5, 1, 11.40)\n    test_case(1, 2, 2, 2, 1.73)\n    test_case(2, 2, 2, 2, 1.73)\n\n\nif __name__ == \"__main__\":\n    test_triangle_area()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(3, 4, 6) == -1\n    assert triangle_area(3, 3, 3) == 4.83\n    assert triangle_area(2, 2, 2) == 1.73\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(1, 2, 1) == -1\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_cases()",
    "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\ndef test_function():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area,2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if (a + b > c) and (b + c > a) and (a + c > b):\n        return (1/2) * (a + b + c) * (area_triangle(a, b, c))\n    else:\n        return -1\n    \ndef area_triangle(a, b, c):\n    return (a + b + c) / 2\n\n#print(triangle_area(3, 4, 5))\n#print(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a+b>c and a+c>b and b+c>a:\n        p=(a+b+c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n    return -1",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (a ** 2 + b ** 2 + c ** 2) ** 0.5\n    else:\n        return -1\n\n\ndef test_cases():\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(7, 2, 5) == 11.50\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(10, 5, 2) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5",
    "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = area * (area - a) * (area - b) * (area - c)\n        area = area ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n    \n    \ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(10, 2, 2) == -1\n    assert triangle_area(1, 1, 1) == -1\n    assert triangle_area(10, 2, 10) == 10.00\n    assert triangle_area(1, 1, 10) == -1\n    assert triangle_area(1, 10, 10) == 50.00\n    assert triangle_area(10, 10, 10) == 42.37\n    assert triangle_area(1, 1, 100) == -1\n    assert triangle_area(1, 100, 100) == 50.00\n    assert triangle_area(100, 1, 100) == 42.37\n    assert triangle_area(100, 1, 1) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a)*(s - b)*(s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return (a * b * c) / 2\n    else:\n        return -1\n\n\ndef triangle_area2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1\n\n\ndef triangle_area3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    return -1\n\n\ndef triangle_area4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(",
    "if a+b>c and a+c>b and b+c>a:\n        s=(a+b+c)/2\n        area=(s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a+b>c and a+c>b and b+c>a:\n        return round(((a+b+c)/2)*(math.sin(math.radians(a))),2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(7, 2, 5) == 10.50\n    assert triangle_area(10, 2, 5) == 10.50\n    assert triangle_area(10, 2, 6) == 9.75\n    assert triangle_area(10, 5, 6) == -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a+b>c and a+c>b and b+c>a:\n        return round((a+b+c)/2*((a+b)-(a+c)*(b+c)/(a+b+c)),2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nassert triangle_area(3, 4, 5) == 6.00, 'First'\nassert triangle_area(1, 2, 10) == -1, 'Second'\nassert triangle_area(10, 2, 5) == 10.00, 'Third'\nassert triangle_area(10, 2, 2) == -1, 'Fourth'\nassert triangle_area(10, 10, 20) == 50.00, 'Fifth'\nassert triangle_area(10, 20, 20) == 60.00, 'Sixth'\nassert triangle_area(10, 20, 10) == 30.00, 'Seventh'\nassert triangle_area(10, 20, 30) == -1, 'Eighth'\nassert triangle_area(10, 10, 30) == 40.00, 'Ninth'\nassert triangle_area(1, 2, 3) == -1, 'Tenth'",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    else:\n        return -1",
    "if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\n# \u53e6\u4e00\u79cd\u89e3\u6cd5\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n    return -1\n\nprint(triangle_area(3, 4, 5))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
    "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 10, 10) == 0.00\n    assert triangle_area(1, 2, 3) == 0.42\n    assert triangle_area(10, 10, 10) == 0.00\n    assert triangle_area(1, 2, 1) == -1\n    assert triangle_area(10, 2, 2) == -1\n    assert triangle_area(10, 10, 1) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "# your code here\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = (area * (area - a) * (area - b) * (area - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(10, 2, 10) == -1\n    assert triangle_area(10, 5, 5) == 10.00\n    assert triangle_area(1, 1, 1) == 0.43\n    assert triangle_area(7.0, 8.0, 9.0) == 18.52\n    assert triangle_area(100, 200, 100) == 176.76\n    assert triangle_area(10, 10, 10) == 10.00\n    assert triangle_area(10, 10, 100) == 50.26\n    assert triangle_area(10, 100, 10) == 50.26\n    assert triangle_area(1, 1, 100) == -1\n    assert triangle_area(100, 100, 1) == -1\n    assert triangle_area(1, 100, 100) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return -1",
    "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 10, 10) == 10.00\n    assert triangle_area(5, 1, 1) == 5.24\n    assert triangle_area(7.0, 2.0, 2.0) == 8.49\n    assert triangle_area(5.0, 4.0, 3.0) == 6.00\n    assert triangle_area(5.0, 12.0, 8.0) == -1\n    assert triangle_area(10.0, 20.0, 25.0) == 50.00\n    assert triangle_area(100.0, 200.0, 250.0) == 176.77\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a * b * c) ** (1/2)\n    else:\n        return -1",
    "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2)\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(3, 4, 3, -1, triangle_area)\ntest_case(3, 4, 6, 4.83, triangle_area)\ntest_case(4, 4, 3, 4.00, triangle_area)\ntest_case(4, 3, 4, -1, triangle_area)\ntest_case(4, 3, 3, 4.00, triangle_area)\ntest_case(4, 4, 5, 7.07, triangle_area)\ntest_case(5, 5, 5, 10.00, triangle_area)\ntest_case(5, 5, 6, -1, triangle_area)",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n#Alternative solutions\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\n#Test\ndef test(a, b, c):\n    print \"A triangle with sides of length\", a, b, c, \"has area\"\n    print triangle_area(a, b, c), \"unit^2\"\n\ntest(3, 4, 5)\ntest(1, 2, 10)\ntest(1, 2, 3)",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n        return round(area, 2)\n    return -1\n\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == 10.00\n    assert triangle_area(1, 2, 30) == -1\n    print(\"Test Success!\")\n\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (1 / 2)**0.5\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a + b + c) * (b + c - a) * (c + a - b) / (4 * (a + b + c))\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) / 2) ** 0.5\n    return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 3, 2) == 4.00\n    assert triangle_area(2, 1, 3) == 4.00\n    assert triangle_area(2, 3, 1) == 4.00\n    assert triangle_area(3, 1, 2) == 4.00\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(10, 1, 2) == -1\n    assert triangle_area(2, 10, 1) == -1\n    assert triangle_area(2, 1, 10) == -1\n    assert triangle_area(1, 10, 2) == -1\n    assert triangle_area(1, 2, 10) == -1\n    print(\"Test Success!\")\n\ntest_cases()",
    "if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(3, 4, 4, 4.00, triangle_area)\ntest_case(1, 1, 1, -1, triangle_area)\ntest_case(1, 2, 1, -1, triangle_area)\ntest_case(3, 4, 2, -1, triangle_area)\ntest_case(3, 4, 3, -1, triangle_area)\ntest_case(3, 4, 5, -1, triangle_area)",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s-a)*(s-b)*(s-c))**0.5\n    return -1\n\n\n\ndef test_function():\n    assert triangle_area(3, 4, 5) == 6.00, \"Triangle 3-4-5\"\n    assert triangle_area(7, 2, 3) == -1, \"Wrong triangle 7-2-3\"\n    assert triangle_area(1, 2, 10) == -1, \"Wrong triangle 1-2-10\"\n    assert triangle_area(7, 2, 3) == -1, \"Wrong triangle 7-2-3\"\n    assert triangle_area(1, 1, 1) == -1, \"Triangle 1-1-1\"\n    assert triangle_area(10, 20, 10) == -1, \"Isosceles 10-20-10\"\n    assert triangle_area(7, 20, 2) == -1, \"Isosceles 7-20-2\"\n    assert triangle_area(10, 10, 30) == -1, \"Right 10-10-30\"\n    assert triangle_area(35, 35, 50) == -1, \"Right 35-35-50\"\n    assert triangle_area(10, 20, 30) == 100, \"Scalene 10-20-30\"\n    assert triangle_area(100, 200, 100) == 5000, \"Scalene 100-200-100\"",
    "# Check if the three sides make a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
    "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c)/2\n        area = (s*(s - a)*(s - b)*(s - c))**(0.5)\n        return round(area, 2)\n    else:\n        return -1",
    "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}