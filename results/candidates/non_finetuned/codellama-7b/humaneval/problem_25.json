{
  "problem": {
    "task_id": "HumanEval/25",
    "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
    "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
    "entry_point": "factorize",
    "docstring": "",
    "problem_id": 25
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "# your task is to complete this function\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(factorize(100))",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 1:\n        raise ValueError(\"Only positive numbers are allowed\")\n\n    result = []\n    divisor = 2\n    while divisor ** 2 <= n:\n        while n % divisor == 0:\n            result.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    if n > 1:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            result.append(i)\n            n //= i\n            while n % i == 0:\n                result.append(i)\n                n //= i\n        else:\n            i += 2\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    cur = 2\n    while n > 1:\n        while n % cur == 0:\n            result.append(cur)\n            n //= cur\n        cur += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"Only positive numbers are allowed\")\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"Input number should be greater than 0\")\n\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    if n <= 0:\n        return factors\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n /= i\n                factors.append(int(i))\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n    result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return [n]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n must be greater or equal to 1\")\n    if n == 1:\n        return []\n\n    primes = []\n    factor = 2\n\n    while n > 1:\n        if n % factor == 0:\n            primes.append(factor)\n            n //= factor\n        else:\n            factor += 1\n\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n /= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# Your code here\n    if n == 1:\n        return [1]\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 2:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "primes = [2, 3, 5]\n    factors = []\n    for prime in primes:\n        while n % prime == 0:\n            factors.append(prime)\n            n //= prime\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return []\n    factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    if n == 1:\n        return factorization\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n        i += 2\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    i = 2\n    while n != 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            result.append(factor)\n            n //= factor\n            factor = 2\n        else:\n            factor += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n < 2:\n        raise ValueError(\"Number should be greater than 2\")\n\n    prime_factors = []\n    i = 2\n\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n\n    if n > 1:\n        prime_factors.append(n)\n\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "res = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                res.append(i)\n                n //= i\n                break\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_factors.append(i)\n                n //= i\n                break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "factors = []\n\n    def find_prime_factors(n, i):\n        if i * i > n:\n            if n > 1:\n                factors.append(n)\n            return\n        if n % i == 0:\n            factors.append(i)\n            find_prime_factors(n // i, i)\n        else:\n            find_prime_factors(n, i + 1)\n\n    find_prime_factors(n, 2)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            result.append(i)\n        else:\n            i += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors",
    "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    if n < 1:\n        raise ValueError(\"Only positive numbers are allowed\")\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            result.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n /= i\n                    result.append(int(i))\n                    break\n            else:\n                result.append(int(n))\n                n = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n > 1:\n        for prime in range(2, n + 1):\n            if n % prime == 0:\n                factors.append(prime)\n                n = n // prime\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n    factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError(\"Input number should be a positive integer.\")\n    if n == 0:\n        return []\n    res = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            res.append(i)\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "raise NotImplementedError()",
    "res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 2:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"Input number should be greater than zero\")\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            n //= i\n            factorization.append(i)\n        i += 1\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n\n    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                if is_prime(i):\n                    factors.append(i)\n                    n //= i\n                    break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# 1. Check if input is valid\n    if not isinstance(n, int) or n <= 0:\n        raise TypeError(\n            \"Input should be positive integer.\")\n\n    # 2. Initialize variables\n    factors: List[int] = []\n    num: int = n\n\n    # 3. Loop through all possible factors\n    # from 1 to input number and check if\n    # it is factor of input number\n    for i in range(2, num + 1):\n        # 3.1 If factor is found, then add it to list of factors\n        if num % i == 0:\n            factors.append(i)\n            # 3.2 While factor is found, keep dividing input number\n            # with the factor until input number is not divisible\n            # with it anymore\n            while num % i == 0:\n                num = num // i\n        # 3.3 If input number is 1, then we have all the factors\n        if num == 1:\n            break\n\n    # 4. Return list of factors\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors",
    "pass",
    "primes = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n            if n == 1:\n                break\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n must be a positive number\")\n    if n == 1:\n        return []\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n = n // 2\n    i = 3\n    while n != 1 and i * i <= n:\n        while n % i == 0:\n            res.append(i)\n            n = n // i\n        i += 2\n    if n != 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n    res = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            res.append(i)\n        else:\n            i += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    if n < 2:\n        return prime_factors\n\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n /= i\n    if n > 2:\n        prime_factors.append(int(n))\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    if n < 1:\n        raise ValueError(\"Only positive integer is allowed\")\n\n    while n % 2 == 0:\n        n //= 2\n        result.append(2)\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            result.append(i)\n\n    if n > 2:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n    if n != 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError('Input number should be non-negative')\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_factors.append(i)\n                n /= i\n                break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "i = 2\n    factors = []\n    while i ** 2 <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def prime_factors(n):\n        return [i for i in range(2, n + 1) if n % i == 0]\n    def prime_factorize(n):\n        if n == 1:\n            return []\n        else:\n            return [prime_factors(n)[0]] + prime_factorize(n // prime_factors(n)[0])\n    return prime_factorize(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n == 1:\n        return [1]\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return [i] + factorize(n // i)\n    return [n]",
    "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n\n    if n > 2:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "pass",
    "prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n //= i\n                break\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            result.append(i)\n            n = n // i\n        else:\n            i += 2\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n /= i\n    if n > 2:\n        factorization.append(int(n))\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n // i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n    if n > 2:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n            factors.append(divisor)\n        else:\n            divisor += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n // i\n                factorization.append(i)\n                break\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n    primes = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return []\n    if n % 2 == 0:\n        return factorize(n // 2) + [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return factorize(n // i) + [i]\n    return [n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "prime_factors = []\n    divider = 2\n    while n != 1:\n        if n % divider == 0:\n            prime_factors.append(divider)\n            n /= divider\n        else:\n            divider += 1\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        return []\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n\n    factors = []\n    curr_num = n\n    curr_prime = 2\n\n    while curr_num != 1:\n        if curr_num % curr_prime == 0:\n            factors.append(curr_prime)\n            curr_num /= curr_prime\n        else:\n            curr_prime += 1\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n must be > 0\")\n\n    if n == 1:\n        return []\n\n    factors = []\n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    if n == 1:\n        return factors\n\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    cur = 2\n    while n > 1:\n        if n % cur == 0:\n            n /= cur\n            result.append(cur)\n        else:\n            cur += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "res = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            res.append(i)\n            n //= i\n            i = 2\n        else:\n            i += 1\n    if n > 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "factorization = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            factorization.append(i)\n        i += 1\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 1:\n        raise ValueError(\"Factor can't be less than 1\")\n    prime_factors = []\n    while n > 1:\n        for prime in [2, 3, 5]:\n            if n % prime == 0:\n                prime_factors.append(prime)\n                n //= prime\n                break\n        else:\n            prime_factors.append(n)\n            break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return []\n\n    factors = []\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}