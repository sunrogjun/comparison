{
  "problem": {
    "task_id": "MBPP/490",
    "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
    "test_list": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ],
    "challenge_test_list": [],
    "problem_id": 479
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_symmetric_pairs(tup):\n    dict = {}\n    for i in tup:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    \n    for i in dict:\n        if dict[i] % 2 == 0:\n            print(i)\n\nfind_symmetric_pairs([(1,2), (2,1)])",
    "def sym_pairs(tuple_list):\n    result = []\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                result.append((tuple_list[i], tuple_list[j]))\n    return result\n\n\nprint(sym_pairs([1, 2, 3, 4, 5]))",
    "def symmetries(tuples):\n    pairs = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][0]:\n                pairs.append((tuples[i][0], tuples[j][0]))\n    return pairs\n\n\nprint(symmetries([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 1]]))",
    "def symmetric_pairs(tuple_list):\n    return [(x, y) for x, y in zip(tuple_list, tuple_list[1:]) if x!= y]",
    "def sym_pairs(tuple_list):\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i]!= tuple_list[j]:\n                print(tuple_list[i], tuple_list[j])\n\n\nsym_pairs([1, 2, 3])\nsym_pairs([1, 2, 3, 4])\nsym_pairs([1, 2, 3, 4, 5])",
    "class Solution:\n    def findPairs(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(len(nums) - 1):\n            for j in range(len(nums) - 1):\n                if nums[i] == nums[j]:\n                    result.append([i, j])\n        return result",
    "def find_pairs(t):\n    s = set(t)\n    l = len(t)\n    res = []\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                continue\n            if t[i] == t[j]:\n                res.append((i,j))\n    return res\n\n\nprint(find_pairs([1,2,3]))\nprint(find_pairs([3,2,1]))\nprint(find_pairs([1,1,2,3]))\nprint(find_pairs([1,1,1,1,2,3,3]))\nprint(find_pairs([1,1,1,1,2,3,3]))",
    "def find_symmetric_pairs(tuple_list):\n    return list(zip(tuple_list, tuple_list[1:]))\n\n\nif __name__ == '__main__':\n    print(find_symmetric_pairs([(1, 2), (1, 3), (2, 3)]))",
    "def symmetric_pairs(arr):\n    pairs = set()\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if arr[i] == arr[j]:\n                pairs.add((arr[i], arr[j]))\n    return pairs\n\n\nif __name__ == '__main__':\n    print(symmetric_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]))",
    "def symmetric(T):\n    result = []\n    for i in range(len(T) - 1):\n        for j in range(len(T) - 1):\n            if i!= j:\n                if T[i] == T[j]:\n                    result.append((T[i], T[j]))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(symmetric([1, 2, 3, 4, 5]))\n    print(symmetric([4, 2, 3, 1, 5]))\n    print(symmetric([5, 1, 2, 3, 4]))\n    print(symmetric([1, 2, 3, 4, 5]))",
    "def find_symmetric_pairs(arr):\n    return [(a, b) for a in arr for b in arr if a!= b]\n\nif __name__ == \"__main__\":\n    print(find_symmetric_pairs([(1,2), (2,1)]))\n    print(find_symmetric_pairs([(1,2), (2,3), (2,1)]))\n    print(find_symmetric_pairs([(1,2), (2,3), (3,1)]))\n    print(find_symmetric_pairs([(1,2), (2,3), (3,2)]))\n    print(find_symmetric_pairs([(1,2), (2,3), (3,1)]))",
    "def symmetric_pairs(lst):\n    pairs = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i]!= lst[j]:\n                pairs.append((lst[i], lst[j]))\n\n    return pairs\n\n\nif __name__ == \"__main__\":\n    print(symmetric_pairs([1, 2, 3, 4, 5]))",
    "def sym_pairs(tuple_list):\n    return [(i, j) for i in range(len(tuple_list)) for j in range(len(tuple_list)) if tuple_list[i] == tuple_list[j]]\n\n\nprint(sym_pairs([1, 2, 3, 4, 5]))",
    "def symmetric_pairs(arr):\n    return [(x, y) for x, y in zip(arr[:-1], arr[1:]) if x!= y]\n\n\nif __name__ == \"__main__\":\n    print(symmetric_pairs([1, 2, 3, 4]))",
    "def find_symmetric_pairs(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n\n    pairs = []\n\n    for i in range(len(tuple_list) - 1):\n        for j in range(len(tuple_list) - 1):\n            if tuple_list[i] == tuple_list[j]:\n                pairs.append([i, j])\n\n    return pairs\n\n\nif __name__ == '__main__':\n    print(find_symmetric_pairs([1, 2, 3, 4, 5]))",
    "def symmetric_pairs(tup):\n    res = []\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                res.append((tup[i], tup[j]))\n    return res\n\n\nif __name__ == \"__main__\":\n    print(symmetric_pairs((1, 2, 3)))",
    "def extract_symmetric_pairs(tup):\n    pairs = []\n    for i in range(len(tup)):\n        for j in range(len(tup)):\n            if tup[i] == tup[j]:\n                pairs.append((tup[i], tup[j]))\n    return pairs\n\nprint(extract_symmetric_pairs([(1, 2), (2, 1), (3, 1), (1, 4)]))",
    "def symmetrize(lst):\n    if len(lst) < 2:\n        return lst\n    pairs = []\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                pairs.append((lst[i], lst[j]))\n    return pairs\n\n\ndef main():\n    print(symmetrize([1, 2, 3]))\n    print(symmetrize([1, 2, 3, 4, 5]))\n    print(symmetrize([3, 2, 1, 4, 5]))\n\n\nmain()",
    "def sym_pairs(tuple_list):\n    return [(x, y) for x in tuple_list for y in tuple_list if x!= y]\n\n\nif __name__ == '__main__':\n    print(sym_pairs([(1, 1), (2, 2), (2, 1)]))\n    print(sym_pairs([(1, 1), (1, 2), (2, 2), (2, 1)]))\n    print(sym_pairs([(1, 1), (1, 2), (2, 2), (2, 1)]))\n    print(sym_pairs([(1, 1), (1, 2), (2, 2), (2, 1)]))",
    "def sym_pairs(a):\n    pair_list = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                pair_list.append((a[i], a[j]))\n    return pair_list\n\nprint(sym_pairs([1,2,3,4]))",
    "def sym_pairs(tuple_list):\n    sym_list = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                sym_list.append((tuple_list[i], tuple_list[j]))\n    return sym_list\n\n\nprint(sym_pairs([1,2,3,4,5]))",
    "def symmetric(a):\n    return [(a[i], a[j]) for i in range(len(a)) for j in range(i+1, len(a)) if a[i] == a[j]]\n\n\nprint(symmetric([1, 2, 3, 4, 5, 6, 7]))",
    "class Solution(object):\n    def symmetricPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not nums:\n            return []\n        nums = sorted(nums)\n        pairs = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    pairs.append([nums[i], nums[j]])\n        return pairs",
    "def sym_pairs(tuple_list):\n    tuple_list.sort()\n    return [(tuple_list[i], tuple_list[i+1]) for i in range(len(tuple_list)-1)]\n\nprint(sym_pairs([1,2,3]))",
    "def extract_symmetric_pairs(tuple_list):\n    tuple_list.sort()\n    res = []\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                res.append((tuple_list[i], tuple_list[j]))\n    return res\n\n\nprint(extract_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))\nprint(extract_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))\nprint(extract_symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def pair_symmetric(tuple_list):\n    pair_list = []\n    for i in range(len(tuple_list)-1):\n        for j in range(len(tuple_list)-1):\n            if tuple_list[i] == tuple_list[j]:\n                pair_list.append((tuple_list[i], tuple_list[j]))\n    return pair_list\n\n\nif __name__ == \"__main__\":\n    assert pair_symmetric([1, 2, 3]) == [(1, 2), (2, 3)]\n    assert pair_symmetric([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4), (4, 1)]\n    assert pair_symmetric([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
    "def symmetric(tuple_list):\n    dict = {}\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                if tuple_list[i] not in dict:\n                    dict[tuple_list[i]] = [tuple_list[j]]\n                else:\n                    dict[tuple_list[i]].append(tuple_list[j])\n\n    for key in dict:\n        print(key, dict[key])\n\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2, 3), (2, 3, 1), (2, 3, 4), (2, 3, 1), (1, 2, 4)]\n    symmetric(tuple_list)",
    "def symmetric_pairs(lst):\n    return [(x, y) for x in lst for y in lst if x!= y]\n\n\nprint(symmetric_pairs([1, 2, 3]))\nprint(symmetric_pairs([1, 2, 3, 4, 5]))\nprint(symmetric_pairs([1, 2, 3, 4, 5, 6]))\nprint(symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))",
    "def find_symmetric_pairs(tup):\n    l = len(tup)\n    if l < 2:\n        return []\n    res = []\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                continue\n            if tup[i] == tup[j]:\n                res.append([i, j])\n    return res\n\n\nprint(find_symmetric_pairs((1, 2, 3, 4)))\nprint(find_symmetric_pairs((1, 2, 3, 4, 5)))\nprint(find_symmetric_pairs((1, 2, 3, 4, 5, 6)))",
    "def symmetries(tuple_list):\n    # Write your code here\n    result = []\n    for i in range(0, len(tuple_list)):\n        for j in range(0, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                result.append((tuple_list[i], tuple_list[j]))\n    return result\n\nprint(symmetries([1, 2, 3, 4, 5]))",
    "def extract_pairs(arr):\n  pairs = []\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] == arr[j]:\n        pairs.append((arr[i], arr[j]))\n  return pairs\n\nprint(extract_pairs([1,2,3,4,5]))\nprint(extract_pairs([1,2,3,4,5,6,7,8]))\nprint(extract_pairs([]))\nprint(extract_pairs([1,2,3,4,5,6,7,8,9,10]))\nprint(extract_pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,145,146,147,148,145,146,147,148,145,146,147,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,146,147,145",
    "def symmetries(lst):\n    return [(a,b) for a in lst for b in lst if a!=b]\n\n\nif __name__ == \"__main__\":\n    print(symmetries([1,2,3]))\n    print(symmetries([1,2,3,4]))\n    print(symmetries([1,2,3,4,5]))",
    "def extract_symmetric_pairs(tup):\n    # Write your code here\n    return [(x, y) for x in tup for y in tup if x!= y]\n\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(extract_symmetric_pairs(tup))",
    "def symmetric_pairs(tuple_list):\n    pairs = []\n\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                pairs.append((tuple_list[i], tuple_list[j]))\n\n    return pairs\n\n\ndef main():\n    print(symmetric_pairs([1, 2, 3, 4, 5]))\n    print(symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))\n    print(symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\n\nif __name__ == '__main__':\n    main()",
    "def sym_pairs(tuple_list):\n    # Write your code here\n    res = []\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                res.append((tuple_list[i], tuple_list[j]))\n    return res\n\nprint(sym_pairs([1,2,3,4]))",
    "def find_symmetric_pairs(list):\n    list_set = set(list)\n    for i in list_set:\n        if list.count(i) % 2!= 0:\n            print(i, list.count(i), list.count(i) - list.count(i))\n\n\nif __name__ == \"__main__\":\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    find_symmetric_pairs(list_)",
    "def symmetric(tuple_list):\n    return list(zip(*sorted(zip(*tuple_list))))\n\n\nprint(symmetric([1, 2, 3, 4, 5, 6]))\nprint(symmetric([1, 2, 3, 4, 5, 6, 7]))\nprint(symmetric([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
    "def symmetric_pairs(t):\n    result = []\n    for i in range(len(t)-1):\n        for j in range(i+1, len(t)):\n            if t[i] == t[j]:\n                result.append([t[i], t[j]])\n    return result\n\n\nprint(symmetric_pairs([1, 2, 3, 4, 5]))",
    "def symmetric(lst):\n    return [(x[0], x[1]) for x in lst if x[0]!= x[1]]\n\n\nprint(symmetric([(1, 1), (1, 2), (2, 1)]))\nprint(symmetric([(1, 2), (2, 1), (1, 1)]))\nprint(symmetric([(1, 1), (1, 2), (2, 2)]))",
    "def extract_symmetric_pairs(tuple_list):\n    list_symmetric = []\n\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i == j:\n                continue\n\n            if tuple_list[i][0] == tuple_list[j][0] and tuple_list[i][1] == tuple_list[j][1]:\n                list_symmetric.append((tuple_list[i], tuple_list[j]))\n\n    return list_symmetric\n\n\nprint(extract_symmetric_pairs([(1, 2), (2, 1), (3, 1)]))",
    "def pair_symmetric(tuples):\n    pairs = []\n    for i in range(0, len(tuples)-1):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][0] and tuples[i][1] == tuples[j][1]:\n                pairs.append((tuples[i], tuples[j]))\n    return pairs",
    "def get_pairs(tup):\n    pairs = []\n    for i in range(len(tup)-1):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                pairs.append((tup[i], tup[j]))\n    return pairs\n\n\nprint(get_pairs([1, 2, 3, 4, 5]))",
    "def sym_pairs(arr):\n    arr.sort()\n    result = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                result.append((arr[i], arr[j]))\n    return result\n\n\nif __name__ == '__main__':\n    print(sym_pairs([1, 2, 3]))\n    print(sym_pairs([1, 2, 3, 4]))\n    print(sym_pairs([1, 2, 3, 4, 5]))\n    print(sym_pairs([1, 2, 3, 4, 5, 6, 7]))",
    "def find_symmetric_pairs(list_of_tuples):\n    for i in range(len(list_of_tuples) - 1):\n        for j in range(i + 1, len(list_of_tuples)):\n            if list_of_tuples[i]!= list_of_tuples[j]:\n                print(list_of_tuples[i], list_of_tuples[j])\n\n\nif __name__ == \"__main__\":\n    list_of_tuples = [(1, 2), (2, 1), (1, 3), (2, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 1), (2, 6), (6, 1)]\n    find_symmetric_pairs(list_of_tuples)",
    "def sym_pairs(tuple_list):\n    if len(tuple_list) < 2:\n        return []\n    list1 = tuple_list[:]\n    list2 = tuple_list[1:]\n    list1.sort()\n    list2.sort()\n    return [(tuple_list[i], tuple_list[j]) for i in range(len(list1)) for j in range(len(list2)) if list1[i] == list2[j]]\n\n\nprint(sym_pairs([1, 2, 3, 4]))\nprint(sym_pairs([1, 2, 4, 3]))\nprint(sym_pairs([1, 1, 1, 1]))\nprint(sym_pairs([1, 1, 1, 1]))\nprint(sym_pairs([1, 1, 1, 1, 1, 1]))\nprint(sym_pairs([1, 1, 1, 1, 1]))\nprint(sym_pairs([1, 1, 1, 1, 1, 1]))",
    "def symmetric_pairs(tuple):\n    return [(tuple[i], tuple[j]) for i in range(len(tuple)) for j in range(i+1, len(tuple)) if tuple[i] == tuple[j]]\n\n\nprint(symmetric_pairs([1, 2, 3, 4, 5]))\nprint(symmetric_pairs([1, 2, 3, 4, 5]))\nprint(symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))",
    "def sym_pairs(tup):\n    # write your code here\n    # return [(x, y) for x in tup for y in tup if x == y]\n    return [(x, y) for x, y in zip(tup, tup[1:]) if x == y]\n\n\nprint(sym_pairs((1, 2, 3)))",
    "def sym_pairs(l):\n    for i in range(len(l) - 1):\n        for j in range(len(l) - 1):\n            if l[i] == l[j]:\n                print(l[i], l[j])\n\n\nsym_pairs([1, 2, 3, 4])",
    "def get_symmetric_pairs(tuple_list):\n    return [tuple(i) for i in zip(*tuple_list) if i!= tuple(reversed(i))]\n\n\nprint(get_symmetric_pairs([(1, 2), (2, 1), (2, 3), (3, 1), (3, 2)]))\nprint(get_symmetric_pairs([(1, 2), (2, 3), (3, 1), (3, 2)]))",
    "def sym_pairs(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i == j:\n                continue\n            if lst[i] == lst[j]:\n                res.append((i, j))\n    return res\n\n\nprint(sym_pairs([1, 2, 3, 4, 5, 6]))",
    "def sym_pairs(t):\n    for i in range(len(t)-1):\n        for j in range(len(t)-1):\n            if i == j:\n                continue\n            if t[i]!= t[j]:\n                if (i, j) in t:\n                    yield (t[i], t[j])\n\n\nprint(sym_pairs([1,2,3,4,5]))",
    "def symmetric_pairs(tuple_list):\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                print(tuple_list[i], tuple_list[j])\n\n\nsymmetric_pairs([1, 2, 3, 4, 5])",
    "def symmetric_pairs(tuple_list):\n    return [(x, y) for x, y in zip(tuple_list[::2], tuple_list[1::2]) if x!= y]\n\n\nprint(symmetric_pairs([1, 2, 3]))\nprint(symmetric_pairs([3, 2, 1]))",
    "from typing import List\n\ndef symmetric_pairs(tuple_list: List[int]) -> List[List[int]]:\n    symmetric_list = []\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i]!= tuple_list[j]:\n                symmetric_list.append([tuple_list[i], tuple_list[j]])\n    return symmetric_list\n\n\nif __name__ == \"__main__\":\n    assert symmetric_pairs([1, 2, 3]) == [[1, 2], [2, 3]]\n    assert symmetric_pairs([1, 2, 3, 4, 5]) == [[1, 2, 3, 4], [3, 4, 5]]",
    "def find_pairs(arr):\n    if len(arr) < 2:\n        return []\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                pairs.append([arr[i], arr[j]])\n    return pairs\n\n\ndef main():\n    print(find_pairs([1, 2, 3]))\n    print(find_pairs([3, 2, 1]))\n\n\nmain()",
    "def symmetric_pairs(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\n\nprint(symmetric_pairs([1, 2, 3, 4, 5]))\nprint(symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "def find_symmetric(lst):\n    pairs = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i == j:\n                continue\n            if lst[i] > lst[j]:\n                pairs.append((lst[i], lst[j]))\n    return pairs\n\n\nprint(find_symmetric([1, 2, 3]))\nprint(find_symmetric([1, 2, 3, 4]))\nprint(find_symmetric([1, 2, 3, 4, 5]))",
    "class Solution:\n    def findSymmetricPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # write your code here\n        if len(nums) < 2:\n            return []\n        result = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i!= j:\n                    if nums[i]!= nums[j]:\n                        result.append([nums[i], nums[j]])\n        return result\n\n\nif __name__ == \"__main__\":\n    print(Solution().findSymmetricPairs([1, 2, 3]))",
    "def symmetric_pairs(l):\n  # Write your code here\n  return [(i,j) for i in l for j in l if i!=j]\n\nprint(symmetric_pairs([1,2,3,4,5]))",
    "def find_symmetric_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\n\nprint(find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))\nprint(find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]))\nprint(find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def symmetric(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    return [(x, y) for x in a_set if x in b_set and y in a_set]",
    "def symmetric_pairs(arr):\n    return [(a,b) for a in arr for b in arr if a!=b]",
    "def symmetric_pairs(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    if len(nums) < 2:\n        return []\n\n    pairs = []\n    for i in range(0, len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                pairs.append([nums[i], nums[j]])\n\n    return pairs",
    "def sym_pairs(tuple_list):\n    # Your code here\n    res = []\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                res.append((tuple_list[i], tuple_list[j]))\n    return res\n\n\nprint(sym_pairs([1, 2, 3, 4, 5]))\nprint(sym_pairs([1, 2, 3, 4, 5, 6, 7]))\nprint(sym_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
    "def sym_pairs(list_of_tuples):\n    dict = {}\n    for i in list_of_tuples:\n        if i[0] in dict.keys() and i[1] in dict.keys():\n            dict[i[0]].append(i[1])\n        else:\n            dict[i[0]] = [i[1]]\n        if i[1] in dict.keys() and i[0] in dict.keys():\n            dict[i[1]].append(i[0])\n        else:\n            dict[i[1]] = [i[0]]\n    return dict.values()\n\n\nprint(sym_pairs([(1, 2), (2, 1), (1, 3), (3, 1), (1, 4)]))\nprint(sym_pairs([(1, 2), (2, 1), (1, 3), (3, 1), (1, 4)]))",
    "def find_symmetric_pairs(l):\n    # Write your code here\n    l.sort()\n    res = []\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i]!= l[j]:\n                res.append((l[i], l[j]))\n    return res\n\nprint(find_symmetric_pairs([1, 2, 3, 4, 5, 6]))",
    "class Solution:\n    def findSymmetricPairs(self, nums: List[int]) -> List[List[int]]:\n        res = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    res.append([i, j])\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findSymmetricPairs([1, 2, 3, 4, 5]))",
    "def sym_pairs(l):\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i]!= l[i + 1]:\n            print(l[i], l[i + 1])\n\n\nsym_pairs([1, 2, 3, 4])",
    "def find_symmetric_pairs(tuple_list):\n    # Write your code here\n    dict = {}\n    for i in tuple_list:\n        if i[0] in dict:\n            dict[i[0]].append(i[1])\n        else:\n            dict[i[0]] = [i[1]]\n        if i[1] in dict:\n            dict[i[1]].append(i[0])\n        else:\n            dict[i[1]] = [i[0]]\n    return dict.items()\n\nprint(find_symmetric_pairs([1,2,3,4,5,6]))",
    "def symmetric_pairs(list_of_tuples):\n    list_of_tuples.sort()\n    for i in range(len(list_of_tuples) - 1):\n        if i!= len(list_of_tuples) - 2:\n            if list_of_tuples[i][0] == list_of_tuples[i + 1][1]:\n                print(list_of_tuples[i], list_of_tuples[i + 1])\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2, 3), (2, 1, 3), (2, 3, 1), (2, 3, 4), (2, 1, 4)]\n    symmetric_pairs(list_of_tuples)",
    "def sym_pairs(arr):\n    sym_pairs = []\n    for i in range(0, len(arr) - 1):\n        for j in range(0, len(arr) - 1):\n            if arr[i] == arr[j]:\n                sym_pairs.append((arr[i], arr[j]))\n    return sym_pairs\n\n\narr = [1, 2, 3, 4, 5]\nsym_pairs(arr)\nprint(sym_pairs)",
    "def symmetric(L):\n    result = []\n    for i in range(len(L)-1):\n        for j in range(i+1, len(L)):\n            if L[i] == L[j]:\n                result.append([L[i], L[j]])\n    return result\n\nprint(symmetric([1,2,3]))",
    "def find_symmetric(tuple_list):\n    for i in range(0, len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i]!= tuple_list[j]:\n                print(tuple_list[i], tuple_list[j])\n\nif __name__ == \"__main__\":\n    find_symmetric([1, 2, 3, 4, 5])\n    find_symmetric([1, 3, 4, 5])\n    find_symmetric([1, 2, 3, 4, 5])",
    "def sym_pairs(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n\n    if len(tuple_list) == 0:\n        return []\n\n    result = []\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                result.append([tuple_list[i], tuple_list[j]])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(sym_pairs([1, 2, 3, 4, 5]))",
    "class Solution:\n    def symmetricPairs(self, nums):\n        if not nums:\n            return []\n\n        pairs = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i == j:\n                    continue\n                if nums[i]!= nums[j]:\n                    pairs.append((nums[i], nums[j]))\n        return pairs",
    "def find_symmetric_pairs(lst):\n    return [(x, y) for x in lst for y in lst if x!= y]\n\n\nif __name__ == '__main__':\n    assert find_symmetric_pairs([1, 2, 3, 4]) == [(1, 2), (2, 3)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5, 6]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]",
    "def pair_symmetric(tup):\n    pair_list = []\n    for i in range(len(tup)-1):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                pair_list.append((tup[i], tup[j]))\n    return pair_list\n\n\nprint(pair_symmetric((1, 2, 3, 4, 5)))",
    "def symmetric_pairs(tuples):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    return [(i, j) for i, j in zip(tuples, tuples[1:]) if i == j]\n\n\nprint(symmetric_pairs([1, 2, 3]))",
    "def find_pairs(arr):\n    pair_list = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if (arr[i] == arr[j]):\n                pair_list.append((arr[i], arr[j]))\n    return pair_list\n\ndef main():\n    print(find_pairs([1, 2, 3, 4, 5]))\n    print(find_pairs([1, 2, 3, 4, 5, 5]))\n    print(find_pairs([]))\n    print(find_pairs([1, 1]))\n    print(find_pairs([1, 2, 3]))\n    print(find_pairs([1, 2, 3, 4]))\n    print(find_pairs([1, 2, 3, 4, 5]))\n    print(find_pairs([1, 2, 3, 4, 5, 6, 7]))\n    print(find_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nif __name__ == \"__main__\":\n    main()",
    "def symmetricPairs(list):\n    pairs = []\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1):\n            if list[i] == list[j]:\n                pairs.append((list[i], list[j]))\n    return pairs\n\ndef main():\n    list = [1, 2, 3]\n    result = symmetricPairs(list)\n    print(result)\n\nmain()",
    "def extract_symmetric_pairs(tuple_list):\n    pair_list = []\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i == j:\n                continue\n            if tuple_list[i]!= tuple_list[j]:\n                pair_list.append((tuple_list[i], tuple_list[j]))\n    return pair_list\n\n\ndef main():\n    print(extract_symmetric_pairs([(1, 2), (2, 1), (1, 3), (3, 1)]))\n\n\nif __name__ == '__main__':\n    main()",
    "def sym_pairs(t):\n    pairs = []\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            if t[i] == t[j]:\n                pairs.append((t[i], t[j]))\n    return pairs\n\n\nif __name__ == \"__main__\":\n    print(sym_pairs([1, 2, 3, 4, 5, 6, 7]))",
    "def symmetric(a,b):\n    return [(a[i], b[i]) for i in range(len(a))]\n\n\nprint(symmetric([1, 2, 3, 4, 5, 6, 7], [2, 5, 6, 8, 9, 10]))",
    "def pairs_symmetric(T):\n    pairs = []\n    for i in range(len(T) - 1):\n        for j in range(i + 1, len(T)):\n            if T[i] == T[j]:\n                pairs.append((T[i], T[j]))\n    return pairs\n\n\nif __name__ == \"__main__\":\n    print(pairs_symmetric([1, 2, 3, 4, 5, 6, 7]))",
    "def sym_pairs(arr):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\n\nprint(sym_pairs([1, 2, 3]))\nprint(sym_pairs([1, 2, 3, 4]))\nprint(sym_pairs([1, 2, 3, 4, 5]))\nprint(sym_pairs([1, 2, 3, 4, 5, 6]))",
    "class Solution:\n    def findPairs(self, nums: List[int]) -> List[List[int]]:\n        if not nums:\n            return []\n        res = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    res.append([nums[i], nums[j]])\n        return res",
    "def find_symmetric_pairs(t):\n    pairs = []\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            if t[i] == t[j]:\n                pairs.append((t[i], t[j]))\n\n    return pairs\n\n\nprint(find_symmetric_pairs([1, 2, 3, 4, 5]))\nprint(find_symmetric_pairs([1, 2, 4, 5, 3]))",
    "def pairs(tuple_list):\n    return [(tuple_1, tuple_2) for tuple_1 in tuple_list for tuple_2 in tuple_list if tuple_1 == tuple_2]\n\n\nif __name__ == \"__main__\":\n    print(pairs([(1, 2), (2, 1), (1, 3), (3, 1), (4, 4), (1, 5)]))",
    "def symmetric_pairs(arr):\n    result = []\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                if arr[i] == arr[j]:\n                    result.append((i, j))\n\n    return result\n\n\nif __name__ == '__main__':\n    print(symmetric_pairs([1, 2, 3, 4, 5]))",
    "def sym_pairs(tuples):\n    pairs = []\n    for i in range(len(tuples) - 1):\n        for j in range(len(tuples) - 1):\n            if i!= j:\n                if tuples[i][0] == tuples[j][1]:\n                    pairs.append((tuples[i][0], tuples[j][1]))\n    return pairs\n\n\nprint(sym_pairs([(1, 2), (3, 4), (4, 3)]))\nprint(sym_pairs([(1, 2), (3, 4), (4, 3)]))\nprint(sym_pairs([(1, 2), (3, 4), (4, 3)]))\nprint(sym_pairs([(1, 2), (2, 3), (3, 4)]))\nprint(sym_pairs([(1, 2), (3, 4), (4, 3)]))\nprint(sym_pairs([(1, 2), (3, 4), (4, 3)]))",
    "def symmetric_pairs(a):\n    pairs = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j and a[i] == a[j]:\n                pairs.append((a[i], a[j]))\n    return pairs\n\na = [1, 2, 3]\nprint(symmetric_pairs(a))",
    "def symmetric_pairs(T):\n    return set([tuple(sorted(i)) for i in T if i!= tuple(sorted(i))])",
    "def find_symmetric_pairs(pairs):\n    pairs = sorted(pairs)\n    if len(pairs) == 0:\n        return []\n    else:\n        left = pairs[0]\n        right = pairs[-1]\n        if left[0] == right[1]:\n            return [left, right]\n        else:\n            return find_symmetric_pairs(pairs[1:]) + find_symmetric_pairs(pairs[:-1])\n\nif __name__ == \"__main__\":\n    print(find_symmetric_pairs([(1,2), (2,1), (2,3), (3,1)]))",
    "def sym_pairs(tup):\n    for i in range(0, len(tup) - 1):\n        for j in range(i + 1, len(tup)):\n            if tup[i] == tup[j]:\n                yield tup[i], tup[j]\n\n\nif __name__ == \"__main__\":\n    print(sym_pairs((1, 2, 3, 4, 5, 6)))",
    "def find_symmetric_pairs(lst: list):\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n\nif __name__ == \"__main__\":\n    assert find_symmetric_pairs([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5, 6]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\n    assert find_symmetric_pairs([1, 2, 3, 4, 5, 6, 7]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]",
    "def get_symmetric_pairs(t):\n    if len(t) == 0:\n        return []\n\n    # check if the list is symmetric\n    if len(t) == 1:\n        return [(t[0], t[0])]\n\n    # if not, make a new list\n    new_list = []\n    for i in range(len(t)):\n        for j in range(i, len(t)):\n            if t[i] == t[j]:\n                new_list.append((t[i], t[j]))\n\n    # check if the list is symmetric\n    if len(new_list) == 0:\n        return []\n\n    # return the list\n    return new_list\n\n\nif __name__ == '__main__':\n    assert get_symmetric_pairs([1, 2, 3]) == [(1, 2), (2, 1), (3, 1)]\n    assert get_symmetric_pairs([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\n    assert get_symmetric_pairs([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
    "def symm_pairs(tup):\n    for i in range(len(tup) - 1):\n        for j in range(i + 1, len(tup)):\n            if tup[i] == tup[j]:\n                print(f\"Pair: {(tup[i], tup[j])}\")\n\n\ntup = [1, 2, 3, 4]\nsymm_pairs(tup)",
    "def symmetric_pairs(tuple_list):\n    list_of_pairs = []\n\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i][0] == tuple_list[j][0] and tuple_list[i][1] == tuple_list[j][1]:\n                list_of_pairs.append((tuple_list[i][0], tuple_list[j][0]))\n                list_of_pairs.append((tuple_list[j][0], tuple_list[i][0]))\n\n    return list_of_pairs\n\n\nprint(symmetric_pairs([(1, 2), (2, 3), (3, 1), (2, 1)]))",
    "def symmetric_pairs(l):\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                print(l[i], l[j])\n\n\nsymmetric_pairs([1, 2, 3, 4, 5, 6])\nsymmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nsymmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nsymmetric_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
    "def find_symmetric_pairs(list_of_tuples):\n    return [(x, y) for x, y in zip(list_of_tuples, list_of_tuples[1:]) if x!= y]\n\n\nprint(find_symmetric_pairs([(1, 2), (1, 3), (2, 3)]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}