{
  "problem": {
    "task_id": "MBPP/482",
    "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
    "test_list": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ],
    "challenge_test_list": [],
    "problem_id": 471
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_sequences(s):\n    # write your code here\n    import re\n\n    return re.findall(r'[A-Z]', s)\n\n\nprint(find_sequences(\"Grey Hat\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"\"))",
    "import re\n\n\ndef find_sequences(string):\n    regex_string = r\"([A-Z][a-z]+[A-Z])\"\n    regex_result = re.findall(regex_string, string)\n    return regex_result\n\n\nprint(find_sequences(\"the quick brown fox jumps over the lazy dog\"))",
    "import re\n\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r'[A-Z]', s)\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"A-Z\") == [\"A\", \"Z\"]\n    assert find_sequences(\"abcd\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"abcdabcdabcd\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]",
    "# O(n) time | O(1) space\nimport re\n\n\ndef upper_case_letters(string):\n    return bool(re.match(r'^[A-Z]{2}$', string))\n\n\ndef lower_case_letters(string):\n    return bool(re.match(r'^[a-z]{2}$', string))\n\n\nif __name__ == \"__main__\":\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"ABCD\") == False\n    assert upper_case_letters(\"abcd\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False",
    "import re\n\n\ndef find_sequences(s):\n    s = s.lower()\n    return re.findall(r\"[A-Z]\", s)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abc\"))",
    "import re\n\n\ndef find_upper_case_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    upper_case_letters = re.findall(r'[A-Z]', string)\n    return upper_case_letters\n\n\ndef find_lower_case_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    lower_case_letters = re.findall(r'[a-z]', string)\n    return lower_case_letters\n\n\nif __name__ == '__main__':\n    string = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\n    print(find_upper_case_letters(string))\n    print(find_lower_case_letters(string))",
    "import re\n\n\ndef upper_case_letters_with_lower_case(s):\n    return re.findall('[A-Z]', s)\n\n\nif __name__ == \"__main__\":\n    s = \"hello world\"\n    print(upper_case_letters_with_lower_case(s))",
    "import re\n\n\ndef check_up(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}$', string))\n\n\ndef check_lower(string):\n    # O(n^2)\n    return bool(re.match(r'^[a-z]{2}$', string))\n\n\ndef check_all(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[a-z]{2}$', string))\n\n\ndef check_all_lower(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[a-z]{2}$'))\n\n\ndef check_all_upper(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[A-Z]{2}$'))\n\n\ndef check_all_lower_upper(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[A-Z]{2}$'))\n\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(check_all(string))\n    print(check_all_lower(string))\n    print(check_all_upper(string))\n    print(check_all_lower_upper(string))",
    "import re\n\n\ndef find_sequences(string):\n    # Fill this in.\n    regex = r\"(?<=[a-z])[A-Z][a-z]\"\n    return [i for i in re.finditer(regex, string)]\n\n\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))",
    "import re\n\n\ndef find_sequences(s):\n    pattern = re.compile(r\"([A-Z][a-z])\")\n    return pattern.findall(s)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abc\"))",
    "import re\n\ndef find_sequences(string):\n    regex = r\"([A-Z][a-z]+)([A-Z])\"\n    res = re.findall(regex, string)\n    return res\n\n\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))",
    "# Solution:\n\nimport re\n\ndef check_sequences(str):\n    # Fill this in.\n    return bool(re.search(r'[A-Z][a-z]*[A-Z]', str))\n\n\nif __name__ == \"__main__\":\n    print(check_sequences(\"abababab\"))",
    "import re\n\n\ndef get_sequences(text):\n    # TODO: Implement\n    return [\n        match.group() for match in re.finditer(r'[A-Z]', text)\n    ]\n\n\nif __name__ == '__main__':\n    assert get_sequences(\"abc\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\n    assert get_sequences(\"Hello, World!\") == [\"h\", \"l\", \"w\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"n\", \"m\"]\n    assert get_sequences(\"abcdefghij\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]",
    "import re\n\ndef match_upper(string):\n    return bool(re.match('[A-Z][^A-Z]', string))\n\ndef match_lower(string):\n    return bool(re.match('[a-z][^a-z]', string))\n\ndef match_all(string):\n    return bool(re.match('^[A-Z][^A-Z]', string))\n\nif __name__ == '__main__':\n    print(match_upper(\"Ahoy! It's a good day!\"))\n    print(match_lower(\"Ahoy! It's a good day!\"))\n    print(match_all(\"Ahoy! It's a good day!\"))\n    print(match_upper(\"Ahoy! It's a good day!\"))\n    print(match_lower(\"Ahoy! It's a good day!\"))\n    print(match_all(\"Ahoy! It's a good day!\"))",
    "import re\n\n\ndef find_sequences(s):\n    # Write your code here\n    return re.findall(r\"[A-Z][a-z]+\", s)\n\n\nif __name__ == \"__main__\":\n    s = \"AbcDeEfGaHbIj\"\n    print(find_sequences(s))",
    "import re\n\n\ndef search_substring(string):\n    substring = re.findall('[A-Z]', string)\n    return substring\n\n\nprint(search_substring('abc'))\nprint(search_substring('AaBbCc'))\nprint(search_substring('AaBbCcD'))\nprint(search_substring('AaBbCcDd'))\nprint(search_substring('abcabc'))",
    "#import re\nimport os\n\ndef check_sequences(string):\n    #print(string)\n    pattern = re.compile(r'^[A-Z]{1}.*$')\n    result = pattern.findall(string)\n    return result\n\n\ndef check_sequences2(string):\n    pattern = re.compile(r'^[A-Z]{1}[a-z].*$')\n    result = pattern.findall(string)\n    return result\n\n\ndef check_sequences3(string):\n    pattern = re.compile(r'^[A-Z]{1}[A-Z].*$')\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"Ahoya\"\n    print(check_sequences(string))\n    print(check_sequences2(string))\n    print(check_sequences3(string))",
    "from re import match\n\ndef find_sequences(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for match in re.finditer('[A-Z]', string):\n        result.append(match.group())\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\"]\n    assert find_sequences(\"ABCD\") == []\n    assert find_sequences(\"\") == []",
    "from re import search\n\n\ndef upper_case(s):\n    return search(r'[A-Z][a-z]', s) is not None\n\n\nprint(upper_case('abc'))\nprint(upper_case('ABC'))\nprint(upper_case('ABCDEF'))\nprint(upper_case('A'))\nprint(upper_case('ABCDEFG'))",
    "import re\n\n\ndef find_sequences(string):\n    # Your code here\n    pattern = r\"[A-Z]{1,2}$\"\n    return re.findall(pattern, string)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"ABC\"))",
    "import re\n\ndef find_sequences(string):\n    return re.findall(r'[A-Z]{2}[a-z]{2}', string)\n\n\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello World\"))\nprint(find_sequences(\"Hello World\"))",
    "import re\n\n\ndef find_upper_lower_letters(s):\n    return re.findall(r'[A-Z]', s)\n\n\nprint(find_upper_lower_letters('ABCD'))\nprint(find_upper_lower_letters('ABC'))\nprint(find_upper_lower_letters('ABCDE'))\nprint(find_upper_lower_letters('abcd'))\nprint(find_upper_lower_letters('ABCDEabcd'))",
    "# This solution is based on https://github.com/russellmann/leetcode-python/blob/master/leetcode-python/leetcode-uppercase-lowercase-letters.py\n\nimport re\n\ndef uppercase_lowercase_letters(string):\n    pattern = re.compile(r'[A-Z]')\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"Bobby\"\n    print(uppercase_lowercase_letters(string))",
    "import re\n\ndef find_sequences(str):\n    return re.findall(r\"[A-Z]\", str)\n\n\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))",
    "# Solution 1:\nimport re\n\n\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s)]\n\n\n# Solution 2:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.IGNORECASE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.IGNORECASE)]\n\n\n# Solution 3:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.UNICODE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.UNICODE)]\n\n\n# Solution 4:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.IGNORECASE | re.UNICODE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.IGNORECASE | re.UNICODE)]\n\n\n# Solution 5:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.UNICODE) if m.group(0)!= m.group(0).lower()]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.UNICODE) if m.group(0)!= m.group(0).upper()]\n\n\n#",
    "import re\n\n\ndef upper_case_letters(string):\n    return re.findall(r'[A-Z]', string)\n\n\nif __name__ == \"__main__\":\n    print(upper_case_letters('ABC'))\n    print(upper_case_letters('aBc'))\n    print(upper_case_letters('aBc'))\n    print(upper_case_letters('aBcD'))",
    "import re\n\ndef find_sequences(input_str):\n    # your code here\n    pattern = re.compile(r'[A-Z]')\n    result = pattern.findall(input_str)\n    return result\n\nprint(find_sequences(\"Hello\"))\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello world!\"))\nprint(find_sequences(\"Hello World!\"))",
    "def find_upper_lower(string):\n    pass\n\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(find_upper_lower(string))",
    "from re import search\n\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n\n    return list(filter(lambda x: search(r\"[A-Z]\", x), s))\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"abc\"]\n    assert find_sequences(\"abc\") == [\"abc\", \"ab\"]\n    assert find_sequences(\"abc\") == [\"abc\", \"a\"]\n    assert find_sequences(\"abc\") == [\"abc\"]",
    "import re\n\ndef find_sequences(string):\n    # Your code here\n    return [x.group() for x in re.finditer(r'[A-Z][a-z]+', string)]\n\n# Test\nprint(find_sequences(\"AliceBob\"))\nprint(find_sequences(\"bob\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"AliceBobC\"))\nprint(find_sequences(\"abbc\"))\nprint(find_sequences(\"AliceBobCabc\"))\nprint(find_sequences(\"abcd\"))\nprint(find_sequences(\"abcabc\"))\nprint(find_sequences(\"AliceBobCabc\"))",
    "from regex import search\n\ndef find_sequences(s):\n    # Your code here\n    # return [s[i:i+2] for i in range(len(s)-1)]\n    return [s[i:i+1] for i in range(len(s)) if search(r'[A-Z]', s[i])]",
    "from typing import List\n\n\nclass Solution:\n    def find_sequences(self, s: str) -> List[str]:\n        from re import search\n\n        res = []\n        for i in range(len(s)):\n            if s[i] == s[i - 1] and s[i] == s[i + 1]:\n                res.append(s[0:i])\n\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().find_sequences(\"hello\") == [\"hello\"]\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\"]\n    assert Solution().find_sequences(\"hello\") == [\"helloworld\", \"hello\", \"helloworld\"]\n    assert Solution().find_sequences(\"\") == []\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\"]\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\", \"helloworld\"]",
    "import re\n\n\ndef find_upper_lower(string):\n    return re.findall(r\"[A-Z]\", string)\n\n\nif __name__ == \"__main__\":\n    string = \"Hello World\"\n    print(find_upper_lower(string))",
    "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n            if string[i+1].islower():\n                result.append(string[i+1])\n    return result\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"AaBbCc\") == [\"A\", \"b\", \"c\", \"d\"]\n    assert find_sequences(\"ABC\") == []\n    assert find_sequences(\"AB\") == []\n    assert find_sequences(\"ab\") == []",
    "from typing import List\n\n\ndef match_upper_case_letter(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"abc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"A\"\n    assert match_upper_case_letter(string) == [\"a\"]\n\n    string = \"a\"\n    assert match_upper_case_letter(string) == [\"a\"]\n\n    string = \"ABC\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"abc\"\n    assert match_upper_case_letter(string) == [\"abc\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b",
    "import re\n\n\ndef find_sequence(str):\n    # Write your code here\n    pattern = r'[A-Z]+[a-z]+[A-Z]'\n    result = re.findall(pattern, str)\n    return result\n\n\nif __name__ == '__main__':\n    print(find_sequence('Aabcccddd'))",
    "import re\n\n\ndef find_sequences(str):\n    result = []\n    pattern = r'[A-Z]'\n    for letter in re.finditer(pattern, str):\n        result.append(letter.group())\n\n    return result\n\n\nprint(find_sequences('abcdef'))",
    "from typing import List\n\n\ndef get_upper_case_lower_case_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    return [x for x in re.findall(r'[A-Z]', string) if x.isupper()]\n\n\nif __name__ == '__main__':\n    string = \"aBcDeF\"\n    print(get_upper_case_lower_case_sequences(string))",
    "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    from re import match\n\n    return [match(r\"[A-Z]{2}\", char).group() for char in string]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcabc\") == [\"abcabc\", \"abcabc\", \"abcd\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcd\") == [\"abcd\"]\n    assert find_sequences(\"abcabc\") == [\"abcabc\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcabcabc\") == [\"abcabcabc\"]\n    assert find_sequences(\"abcabcabcabc\") == [\"abcabcabc\"]",
    "from typing import List\n\n\ndef find_lowercase_uppercase(string: str) -> List[str]:\n    return list(filter(lambda x: x.isupper(), string))\n\n\nif __name__ == \"__main__\":\n    assert find_lowercase_uppercase(\"hello\") == [\"h\", \"e\", \"l\"]\n    assert find_lowercase_uppercase(\"hello world\") == [\"h\", \"o\", \"w\"]\n    assert find_lowercase_uppercase(\"Hello World\") == [\"l\", \"o\", \"w\"]\n    assert find_lowercase_uppercase(\"hello world\") == [\"h\", \"o\", \"w\"]",
    "import re\n\ndef find_sequences(s):\n    return re.findall(r'[A-Z][^a-z]+', s)\n\nprint(find_sequences(\"Hello World\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))",
    "import re\n\n\ndef find_uppercase_letters(str):\n    return re.findall(r\"[A-Z]\", str)\n\n\ndef find_lowercase_letters(str):\n    return re.findall(r\"[a-z]\", str)\n\n\nif __name__ == \"__main__\":\n    assert find_uppercase_letters(\"Hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"\") == []\n    assert find_uppercase_letters(\"Hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"Hello World\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"Hello World\") == []\n    assert find_uppercase_letters(\"Hello World\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\"]",
    "def find_upper_lower_letters(string):\n    from re import match\n    return list(filter(match, string))\n\n\nif __name__ == \"__main__\":\n    print(find_upper_lower_letters(\"hello world\"))\n    print(find_upper_lower_letters(\"HELLO WORLD\"))",
    "import re\n\n\ndef upper_case(str):\n    return bool(re.match('[A-Z]', str))\n\n\ndef lower_case(str):\n    return bool(re.match('[a-z]', str))\n\n\nif __name__ == '__main__':\n    assert upper_case('abc') is True\n    assert upper_case('abc') is False\n    assert upper_case('ABC') is False\n\n    assert lower_case('abc') is True\n    assert lower_case('abc') is False\n    assert lower_case('ABC') is False",
    "import re\n\ndef uppercase_lowercase(string):\n    return re.findall(r'[A-Z][a-z]+', string)\n\nprint(uppercase_lowercase('Python'))\nprint(uppercase_lowercase('Python3'))",
    "import re\n\ndef find_sequences(str):\n    return re.findall('[A-Z][a-z]+', str)\n\nif __name__ == '__main__':\n    str = 'abcdefghijklmnopqrstuvwxyz'\n    print(find_sequences(str))",
    "import re\n\n\ndef find_sequences(s):\n    return [i for i in re.finditer(\"[A-Z]\", s)]\n\n\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"abcd\"))\nprint(find_sequences(\"AbC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"AbC\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))",
    "import re\n\ndef find_sequences(str):\n    return re.findall(r\"[A-Z][^A-Z]*\",str)\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"aAa\"))",
    "import re\n\ndef find_sequences(string):\n    pattern = re.compile(r\"[A-Z]{1}\")\n    return pattern.findall(string)",
    "import re\n\n\ndef upper_case(str):\n    upper_case = re.findall(r'[A-Z]', str)\n    return upper_case\n\n\ndef lower_case(str):\n    lower_case = re.findall(r'[a-z]', str)\n    return lower_case\n\n\nif __name__ == '__main__':\n    print(upper_case(\"Aaaaaaaaa\"))\n    print(lower_case(\"aA\"))",
    "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    return [\n        x\n        for x in re.findall(r\"[A-Z][a-z]+\", string)\n        if x in re.findall(r\"[a-z][a-z]+\", string)\n    ]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"aab\") == [\"a\", \"b\", \"a\"]",
    "import re\n\ndef find_sequences(s):\n    # Your code here\n    return re.findall(r'[A-Z]', s)\n\nif __name__ == \"__main__\":\n    s = \"Hello World!\"\n    print(find_sequences(s))",
    "from typing import List\n\n\ndef find_sequences(s: str) -> List[str]:\n    # TODO: Write your code here\n    result = []\n    for i in range(len(s)):\n        if s[i].isupper():\n            if s[i-1].islower():\n                result.append(s[i:i+2])\n    return result",
    "import re\n\ndef sequence(s):\n    return len(re.findall(\"[A-Z][a-z]\", s))\n\nprint(sequence(\"hello world\"))\nprint(sequence(\"hello world\"))",
    "import re\n\ndef find_sequences(str):\n    return [re.findall(r\"[A-Z]\", str)]\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abcdef\"))",
    "import re\n\n\ndef search_uppercase_letters(string):\n    pattern = re.compile(r\"[A-Z]+\")\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(search_uppercase_letters(\"abc\"))",
    "import re\n\ndef find_upper_lower_letters(str):\n    return re.findall(r'[A-Z]', str)\n\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"Abcd\"))\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"Abcd\"))\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"ABC\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower",
    "import re\n\n\ndef find_sequences(string: str) -> list:\n    return [\n        m.group(0)\n        for m in re.finditer(r\"([A-Z])\", string)\n        if m.group(0) in string\n    ]\n\n\nassert find_sequences(\"ABCDEF\") == [\"A\", \"B\", \"C\", \"D\"]\nassert find_sequences(\"abc\") == [\"A\", \"B\", \"C\"]\nassert find_sequences(\"ABC\") == [\"A\", \"B\", \"C\", \"D\"]\nassert find_sequences(\"abcd\") == [\"A\", \"B\", \"C\", \"D\"]",
    "from re import search\n\n\ndef find_sequences(str):\n    return [m.group() for m in search('[A-Z][^a-z]+', str)]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"Hello world\") == [\"h\", \"l\", \"l\", \"o\", \"w\"]\n    assert find_sequences(\"aaaaa\") == [\"a\", \"a\", \"a\", \"a\", \"a\"]\n    assert find_sequences(\"\") == []\n    assert find_sequences(\"hello world\") == [\"hello\", \"world\"]",
    "from typing import List\nfrom regex import findall\n\n\ndef upper_case_lower_case_sequences(string: str) -> List[str]:\n    return findall(r'[A-Z]', string)\n\n\nif __name__ == \"__main__\":\n    assert upper_case_lower_case_sequences('A') == ['A']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']",
    "import re\n\ndef find_sequences(string):\n    pattern = r\"[A-Z][a-z]+[A-Z][a-z]+\"\n    return list(re.findall(pattern, string))\n\nprint(find_sequences(\"AbcdefG\"))",
    "import re\n\n\ndef check_upper(string):\n    return bool(re.search(r'[A-Z]', string))\n\n\ndef check_lower(string):\n    return bool(re.search(r'[a-z]', string))\n\n\nif __name__ == \"__main__\":\n    assert check_upper(\"A\") is True\n    assert check_upper(\"ab\") is False\n    assert check_upper(\"abcd\") is False\n    assert check_upper(\"abcdabc\") is True\n    assert check_upper(\"abcdabc\") is False\n    assert check_upper(\"abcdabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is True\n    assert check_upper(\"abcdabcabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is True",
    "import re\n\ndef get_lower_upper(str):\n    return re.findall(r'[A-Z]', str)\n\n\nif __name__ == '__main__':\n    print(get_lower_upper(\"Hello world\"))",
    "import re\n\n\ndef search_uppercase_lowercase(s: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", s))\n\n\nif __name__ == \"__main__\":\n    assert search_uppercase_lowercase(\"abc\") == True\n    assert search_uppercase_lowercase(\"abc\") == False\n    assert search_uppercase_lowercase(\"abcabc\") == True\n    assert search_uppercase_lowercase(\"abcdef\") == True",
    "from typing import List\n\n\ndef find_sequences(input_str: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(len(input_str)):\n        if input_str[i].isupper() and input_str[i+1].islower():\n            result.append(input_str[i:i+2])\n    return result\n\n\nif __name__ == '__main__':\n    input_str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(find_sequences(input_str))",
    "import re\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    # Your code here\n    result = []\n    for letter in re.findall('[A-Z][a-z]+', s):\n        result.append(letter)\n    return result\n\n\ns = 'AABBccDDEEF'\nprint(find_sequences(s))",
    "import re\n\n\ndef find_sequence(s):\n    upper_case = re.findall('[A-Z]', s)\n    lower_case = re.findall('[a-z]', s)\n    return upper_case + lower_case",
    "import re\n\n\ndef upper_case_letters(string):\n    upper_case_letters = re.findall('[A-Z][^A-Z]+', string)\n    return upper_case_letters\n\n\ndef lower_case_letters(string):\n    lower_case_letters = re.findall('[a-z][^a-z]+', string)\n    return lower_case_letters\n\n\nprint(upper_case_letters('Hello World'))\nprint(lower_case_letters('Hello World'))",
    "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    from re import search\n\n    result = []\n\n    for i in string:\n        if search(\"[A-Z]\", i):\n            result.append(i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcd\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcdabcd\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcdabcdab\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"\") == []",
    "import re\n\ndef find_sequences(str):\n    # code here\n    result = re.findall('[A-Z][a-z]+',str)\n    return result\n\n\n\n\n\nprint(find_sequences('hello'))",
    "import re\n\n\ndef find_upper_case_lower_case_sequences(string):\n    return re.findall(r'[A-Z][a-z]+', string)\n\n\nprint(find_upper_case_lower_case_sequences(\"ABC\"))",
    "import re\n\n\ndef get_lower_upper_letters(str):\n    pattern = re.compile(r'[A-Z][^A-Z]+')\n    return pattern.findall(str)\n\n\nprint(get_lower_upper_letters(\"I am a test\"))",
    "import re\n\ndef upper_case_letters_following_lowercase(str):\n    pattern = r\"([A-Z])([a-z])\"\n    return re.findall(pattern, str)\n\nif __name__ == \"__main__\":\n    str = \"Alice Bob Cath\"\n    print(upper_case_letters_following_lowercase(str))",
    "from re import search\n\n\ndef find_sequences(string: str) -> list[str]:\n    return [\n        word\n        for word in search(r'[A-Z][^a-z]', string)\n        if search(r'[a-z][^a-z]', word) is not None\n    ]\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"Hello\") == [\"Hello\"]\n    assert find_sequences(\"Hey\") == [\"Hey\"]\n    assert find_sequences(\"Hey\") == [\"Hey\"]\n    assert find_sequences(\"Hey\") == []",
    "import re\n\n\ndef find_sequences(string):\n    return re.findall(r\"[a-z]\", string)\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"Python\") == [\"py\"]\n    assert find_sequences(\"Python3\") == [\"py\", \"py3\"]\n    assert find_sequences(\"Python2\") == [\"py\", \"py2\", \"py3\"]\n    assert find_sequences(\"Python\") == [\"py\"]\n    assert find_sequences(\"Python3\") == [\"py\", \"py3\"]\n    assert find_sequences(\"Python2\") == [\"py\", \"py2\", \"py3\"]",
    "def upper_lower_case_sequences(string):\n    # Write your code here\n    import re\n    return [re.findall(r\"[A-Z][a-z]+\", string)]\n\n\nprint(upper_lower_case_sequences(\"Hello World\"))",
    "from typing import List\nimport re\n\n\ndef find_upper_lower_case_letters(str_: str) -> List[str]:\n    return re.findall(r'[A-Z]', str_)\n\n\nif __name__ == \"__main__\":\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == []\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]",
    "import re\n\ndef upper_lower(str):\n    pattern = re.compile(r'[A-Z][a-z]+')\n    result = pattern.findall(str)\n    return result\n\nif __name__ == '__main__':\n    str = \"Hello World\"\n    result = upper_lower(str)\n    print(result)",
    "def find_sequences(s):\n    return [i.start() for i in re.finditer(\"[A-Z]\", s)]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"ABC\") == [0, 2]\n    assert find_sequences(\"ABC\") == [0, 2, 5]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8, 10]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8, 10, 12]",
    "from typing import List\n\n\ndef get_upper_case_sequences(string: str) -> List[str]:\n    return [s for s in string if s.isupper()]\n\n\ndef get_lower_case_sequences(string: str) -> List[str]:\n    return [s for s in string if s.islower()]\n\n\nif __name__ == \"__main__\":\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\", \"cD\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"ABCD\") == [\"ABCD\"]\n    assert get_upper_case_sequences(\"abCD\") == [\"abCD\"]",
    "import re\n\ndef find_upper_lower(string):\n    return bool(re.search(r\"[A-Z]\", string))\n\nprint(find_upper_lower(\"abc\"))\nprint(find_upper_lower(\"Aa\"))\nprint(find_upper_lower(\"AB\"))\nprint(find_upper_lower(\"aAB\"))",
    "import re\n\ndef find_sequences(str):\n    return re.findall(r'[A-Z][^A-Z]*', str)\n\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello world\"))",
    "import re\n\ndef find_lower_case_letters(string):\n    return re.findall(r'[A-Z]', string)\n\nprint(find_lower_case_letters(\"Abcde\"))",
    "import re\n\ndef sequence(str):\n    return re.findall(r'[A-Z][^A-Z]*[a-z]', str)\n\n\nprint(sequence(\"aabccde\"))\nprint(sequence(\"Abccde\"))\nprint(sequence(\"AABCCDE\"))\nprint(sequence(\"AABCCDEA\"))\nprint(sequence(\"abccde\"))\nprint(sequence(\"abccdeA\"))",
    "# Python program to find upper case letters followed by lower case letters\n# using regex\n\nimport re\n\ndef find_uppercase_letters(string):\n    # Find upper case letters followed by lower case letters\n    return re.findall(r\"[A-Z]\", string)\n\n# Driver program to test above function\nstring = \"Hello World\"\nprint(find_uppercase_letters(string))",
    "import re\n\ndef search_sequence(str):\n    pattern = re.compile(r\"[A-Z]\")\n    return pattern.findall(str)\n\n\nif __name__ == '__main__':\n    str = input(\"Enter the string: \")\n    print(search_sequence(str))",
    "import re\n\n\ndef get_sequences(string):\n    return re.findall(r\"[A-Z]{1}[a-z]\", string)\n\n\nif __name__ == \"__main__\":\n    print(get_sequences(\"Hello World\"))",
    "import re\n\ndef find_sequences(string):\n    pattern = r'[A-Z][a-z]+[A-Z]'\n    result = re.findall(pattern, string)\n    return result\n\nprint(find_sequences(\"ABC\"))",
    "import re\n\n\ndef upper_case_letters(string):\n    pattern = re.compile(r\"[A-Z]{2}\")\n    result = pattern.findall(string)\n    return result\n\n\nprint(upper_case_letters(\"Hello\"))\nprint(upper_case_letters(\"Hello world\"))\nprint(upper_case_letters(\"How are you?\"))\nprint(upper_case_letters(\"Hello world\"))\nprint(upper_case_letters(\"Hello world!\"))\nprint(upper_case_letters(\"Hello world!\"))\nprint(upper_case_letters(\"hello world!\"))",
    "import re\n\n\ndef check_upper(str):\n    if re.search(r'[A-Z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_lower(str):\n    if re.search(r'[a-z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_case(str):\n    if re.search(r'[A-Z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_all(str):\n    if check_upper(str) and check_lower(str) and check_case(str):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    str1 = \"abcdefghijklmnopqrstuvwxyz\"\n    str2 = \"abcdefghijklmnopqrstuvwxyz\"\n    str3 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str4 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str5 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str6 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str7 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str8 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    print(check_all(str1))\n    print(check_all(str2))\n    print(check_all(str3))\n    print(check_all(str4))\n    print(check_all(str5))\n    print(check_all(str6))\n    print(check_all(str7))\n    print(check_all(str8))",
    "import re\n\ndef find_sequences(str):\n\tmatch = re.findall(\"[A-Z]\", str)\n\treturn match\n\n\nif __name__ == \"__main__\":\n\tprint(find_sequences(\"abc\"))",
    "import re\n\ndef find_sequences(string):\n    return re.findall(r'[A-Z][a-z]+[A-Z][a-z]+', string)\n\nprint(find_sequences(\"AbcDeFghi\"))",
    "import re\n\ndef upper_lower(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r'\\b[A-Z]\\b', s)\n\n\n\nif __name__ == '__main__':\n    print(upper_lower('abcd'))",
    "from re import search\n\n\ndef find_uppercase_letter_following_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    return search(r\"[A-Z]\", string).groups()",
    "from collections import defaultdict\nimport re\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n\n    upper_case_letters = {\n        letter: [letter for letter in s if letter.isupper()]\n        for letter in set(s)\n    }\n\n    lower_case_letters = {\n        letter: [letter for letter in s if letter.islower()]\n        for letter in set(s)\n    }\n\n    upper_case_letters_seq = set()\n    lower_case_letters_seq = set()\n\n    for upper_case_letter in upper_case_letters.values():\n        for lower_case_letter in lower_case_letters.values():\n            upper_case_letters_seq.add(upper_case_letter + lower_case_letter)\n\n    return list(upper_case_letters_seq)\n\n\nif __name__ == '__main__':\n    print(find_sequences('Hello'))\n    print(find_sequences('HELLO'))\n    print(find_sequences('HELLO WORLD'))",
    "import re\n\ndef find_sequences(str):\n    # Write your code here\n    res = re.findall(r\"[A-Z]\",str)\n    return res\n\nprint(find_sequences(\"abcdefghijklmnopqrstuvwxyz\"))",
    "import re\n\n\ndef find_uppercase(str):\n    return bool(re.search(r'[A-Z]', str))\n\n\nprint(find_uppercase('Hello World!'))\nprint(find_uppercase('hello world!'))\nprint(find_uppercase('How are you?'))\nprint(find_uppercase('How are you?'))\nprint(find_uppercase('How are you?'))",
    "from typing import List\nimport re\n\n\ndef is_upper_case_first(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string))\n\n\ndef is_lower_case_first(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string))\n\n\ndef is_upper_case_last(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]))\n\n\ndef is_lower_case_last(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[a-z]\", string[::-1][::-1]))\n\n\ndef is_upper_case_last_in_second(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[A-Z]\", string[::-1][::-1]))\n\n\ndef is_lower_case_last_in_second(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[a-z]\", string[::-1][::-1]))\n\n\ndef is_upper_case_last_in_third(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]))\n\n\ndef is_lower_case_last_in_third(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string[",
    "import re\n\n\ndef find_sequences(string):\n    pattern = r\"[A-Z][a-z]+\"\n    return list(re.findall(pattern, string))\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"AliceBob\") == [\n        \"Alice\",\n        \"Bob\",\n        \"BobA\",\n        \"AliceBob\",\n    ]",
    "import re\n\ndef upper_lower_sequences(str):\n\t\"\"\"\n\t:type str: str\n\t:rtype: list[str]\n\t\"\"\"\n\tpattern = r'[A-Z]'\n\tresults = re.findall(pattern, str)\n\treturn results\n\n\nif __name__ == \"__main__\":\n\tprint(upper_lower_sequences(\"abc\"))\n\tprint(upper_lower_sequences(\"abcc\"))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}