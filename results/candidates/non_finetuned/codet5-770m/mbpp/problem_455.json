{
  "problem": {
    "task_id": "MBPP/466",
    "prompt": "Write a function to find the peak element in the given array.",
    "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
    "test_list": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ],
    "challenge_test_list": [],
    "problem_id": 455
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_peak(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return arr[i]\n    return arr[len(arr)-1]\n\narr = [1,2,3,4,5,6,7,8,9]\nprint(find_peak(arr))",
    "def peak_element(arr):\n    if len(arr) < 2:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return peak_element(arr[:mid])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(peak_element(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[1] > arr[0] else arr[1]\n    else:\n        mid = len(arr)//2\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        else:\n            return peak_element(arr[:mid])\n\n\nif __name__ == '__main__':\n    print(peak_element([1, 2, 3, 4, 5, 6]))",
    "def find_peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return 0\n        elif arr[1] > arr[0]:\n            return 1\n    else:\n        if arr[0] > arr[1]:\n            return find_peak(arr[1:])\n        elif arr[1] > arr[0]:\n            return find_peak(arr[:-1])",
    "def peak(arr):\n    return arr[len(arr) // 2]\n\n\nif __name__ == '__main__':\n    assert peak([1, 2, 3, 4, 5, 6, 7]) == 5, 'Peak is 5'\n    assert peak([1, 2, 3, 4, 5, 6]) == 6, 'Peak is 6'\n    assert peak([]) == None, 'Peak is None'\n    assert peak([-1]) == -1, 'Peak is -1'",
    "def peak(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left\n\n\narr = [2, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7]\nprint(peak(arr))",
    "def peak(arr):\n    if arr[0] > arr[1]:\n        return arr[0]\n    elif arr[0] == arr[1]:\n        return arr[0]\n    else:\n        return arr[1]",
    "def peak(arr):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\ndef main():\n    print(peak([1, 2, 3, 4, 5, 6]))\n    print(peak([1, 2, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        else:\n            return arr[mid-1]\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(peak_element(arr))",
    "def peak(arr):\n    return arr[len(arr)//2]\n\nprint(peak([1,2,3,4,5,6,7,8,9,10]))",
    "def find_peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    start, end = 0, len(arr) - 1\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid + 1]:\n            end = mid\n        else:\n            start = mid\n    return start\n\nprint(find_peak([1, 3, 5, 2, 4]))\nprint(find_peak([1, 2, 3, 4, 5]))\nprint(find_peak([1, 2, 3, 4, 5, 6]))",
    "def peak_element(arr):\n    l = 0\n    r = len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] > arr[mid+1]:\n            r = mid-1\n        elif arr[mid] < arr[mid+1]:\n            l = mid+1\n        else:\n            return arr[mid]\n    return arr[l]\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    mid = (len(arr) - 1) // 2\n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    else:\n        return arr[mid + 1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_peak(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        return arr[0]\n    return arr[len(arr) - 1]\n\n\nif __name__ == \"__main__\":\n    print(peak_element([1, 2, 3, 4, 5, 6]))\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def peak(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    else:\n        return arr[mid - 1]\n\n\nif __name__ == \"__main__\":\n    assert peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8",
    "def find_peak(arr):\n    # Write your code here\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if arr[n//2] > arr[n//2-1] and arr[n//2] > arr[n//2+1]:\n        return n//2\n    else:\n        return n//2+1\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(find_peak(arr))",
    "def find_peak(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid - 1]:\n        return find_peak(arr[:mid])\n    else:\n        return find_peak(arr[mid + 1:])\n\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "class Solution(object):\n    def findPeakElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        elif len(nums) == 2:\n            return max(nums)\n        else:\n            mid = len(nums) // 2\n            if nums[mid] > nums[mid - 1]:\n                return nums[mid]\n            else:\n                return nums[mid - 1]\n\n\nnums = [1, 2, 3, 4, 5, 1]\ns = Solution()\nprint(s.findPeakElement(nums))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr)\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] > arr[mid - 1]:\n            return peak_element(arr[:mid])\n        elif arr[mid] > arr[mid + 1]:\n            return peak_element(arr[mid + 1:])\n\n\nif __name__ == \"__main__\":\n    print(peak_element([1, 2, 3, 4, 5, 6]))",
    "def peak_element(array):\n    if len(array) == 0:\n        return None\n    mid = len(array) // 2\n    if array[mid] > array[mid - 1] and array[mid] > array[mid + 1]:\n        return array[mid]\n    return array[mid - 1] if array[mid] > array[mid - 1] else array[mid + 1]\n\n\nprint(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
    "def find_peak(arr):\n    start = 0\n    end = len(arr) - 1\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0]\n    elif len(arr) == 3:\n        return arr[1]\n    elif len(arr) == 4:\n        return arr[2]\n    elif len(arr) == 5:\n        return arr[3]\n    elif len(arr) == 6:\n        return arr[4]\n    else:\n        return arr[end]\n\n\nprint(find_peak([1, 2, 3, 4, 5, 6, 7]))",
    "def peak(arr):\n  # Fill this in.\n  return arr.index(max(arr))\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(peak(arr))",
    "def peak(arr):\n    # write your code here\n    if len(arr) <= 2:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return arr[mid]\n    else:\n        return arr[mid-1]",
    "def peak(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        elif arr[mid] < arr[mid - 1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n    return None\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(peak(arr))",
    "def peak_element(array):\n    if len(array) <= 1:\n        return array[0]\n    else:\n        return max(array)\n\n\nif __name__ == \"__main__\":\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def peak(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return arr[i]\n    return -1\n\nprint(peak([1,3,5,2,4]))\nprint(peak([1,2,3,4,5,6,7]))\nprint(peak([1,2,3,4,5,6,7,8,9]))\nprint(peak([1,2,3,4,5,6,7,8,9,10,11]))\nprint(peak([1,2,3,4,5,6,7,8,9]))\nprint(peak([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(peak([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(peak([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        if arr[0] > arr[1]:\n            return arr[0]\n        if arr[1] > arr[2]:\n            return arr[1]\n        return arr[2]\n\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            right = mid - 1\n        elif arr[mid] < arr[mid - 1]:\n            left = mid + 1\n        else:\n            return arr[mid]\n    return arr[left]\n\n\n\narr = [0, 1, 2, 3, 4, 5, 6]\nprint(find_peak(arr))",
    "def peak_element(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n\n    if len(arr) <= 1:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return low\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(peak_element(arr))",
    "def peak(array):\n    if len(array) == 1:\n        return array[0]\n    elif len(array) == 2:\n        return array[0] if array[0] > array[1] else array[1]\n    elif len(array) == 3:\n        return array[0] if array[0] > array[1] and array[1] > array[2] else array[2]\n    else:\n        mid = len(array) // 2\n        return peak(array[:mid]) if array[0] > array[mid] else peak(array[mid:])\n\n\nif __name__ == '__main__':\n    print(peak([0, 1, 2, 3, 4, 5, 6, 7]))\n    print(peak([2, 3, 1, 0]))\n    print(peak([3, 1, 0, 2, 4]))\n    print(peak([3, 1, 0, 2, 4, 5]))\n    print(peak([3, 1, 0, 2, 4, 5, 6]))",
    "def find_peak(arr):\n    # Write your code here\n    if arr is None or len(arr) == 0:\n        return None\n    mid = len(arr) // 2\n    if arr[mid] < arr[mid-1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid+1]:\n        return arr[mid]\n    else:\n        return arr[mid-1]\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 2, 3, 4, 5, 6, 7]))\n    print(find_peak([]))\n    print(find_peak([-1]))\n    print(find_peak([-1, -2, 3, 4, 5, 6, 7]))",
    "def peak_element(arr):\n    l = len(arr)\n    if l == 1:\n        return arr[0]\n    if l == 2:\n        return arr[0] if arr[1] > arr[0] else arr[1]\n    if l == 3:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] else arr[2]\n    if l == 4:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] else arr[3]\n    if l == 5:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[4]\n    if l == 6:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[5]\n    if l == 7:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[6]\n    if l == 8:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[7]\n    if l == 9:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[8]\n    if l == 10:\n        return arr[0] if arr[1] > arr[0] and arr[2] > arr[0] and arr[3] > arr[0] and arr[4] > arr[0] else arr[9]\n    if l == 11:",
    "def peak(arr):\n    peak_index = 0\n    peak_value = arr[0]\n    for index, value in enumerate(arr):\n        if index == 0:\n            peak_value = value\n            peak_index = index\n        elif value > peak_value:\n            peak_value = value\n            peak_index = index\n    return peak_index\n\n\narr = [1, 2, 3, 1, 5, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nprint(peak(arr))",
    "def find_peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n\n    if arr[0] > arr[len(arr) - 1]:\n        return 0\n\n    if arr[len(arr) - 1] > arr[0]:\n        return len(arr) - 1\n\n    return len(arr) // 2\n\n\nif __name__ == '__main__':\n    print(find_peak([1, 3, 5, 7, 9, 11]))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] else arr[3]\n    if len(arr) == 5:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] else arr[4]\n    if len(arr) == 6:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] else arr[5]\n    return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] else arr[0]\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 2, 3, 4, 5]))",
    "def peak(arr):\n    length = len(arr)\n    if length == 0:\n        return None\n    elif length == 1:\n        return arr[0]\n    elif length == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    elif length == 3:\n        return arr[0] if arr[0] > arr[1] and arr[1] > arr[2] else arr[2]\n    elif length == 4:\n        return arr[0] if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else arr[3]\n    else:\n        mid = (length // 2)\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid-1]\n        elif arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid+1]\n        else:\n            return arr[mid]\n\n\nif __name__ == \"__main__\":\n    assert peak([]) == None\n    assert peak([1]) == 1\n    assert peak([1, 2, 3, 4]) == 2\n    assert peak([1, 2, 3, 4, 5, 6]) == 5\n    assert peak([-1, -2, -3, -4, -5]) == 5\n    assert peak([1, 2, 3, 4, 5, 6]) == 5\n    assert peak([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n    assert peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n    assert peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 12\n    assert peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,",
    "def find_peak(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def find_peak(array):\n    if len(array)<2:\n        return -1\n    if len(array)==2:\n        return array[0]\n    if array[1]>array[0]:\n        return array[0]\n    return find_peak(array[1:])\n\n\narray = [1, 2, 3, 4, 5, 6]\nprint(find_peak(array))\n\narray = [1, 2, 3, 4, 5, 6, 7]\nprint(find_peak(array))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        mid = len(arr)//2\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        else:\n            return arr[mid-1] if arr[mid] > arr[mid-1] else arr[mid+1]\n\n\nprint(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def peak_element(array):\n  left = 0\n  right = len(array) - 1\n  while left <= right:\n    mid = (left + right) // 2\n    if array[mid] > array[mid + 1]:\n      right = mid - 1\n    elif array[mid] < array[mid - 1]:\n      left = mid + 1\n    else:\n      return array[mid]\n  return None\n\nif __name__ == \"__main__\":\n  assert peak_element([1,2,3,4,5,6,7,8,9]) == 6\n  assert peak_element([1,2,3,4,5,6]) == 2\n  assert peak_element([1,2,3]) == 1\n  assert peak_element([1]) == 1",
    "def peak(arr):\n    return (arr.index(max(arr)))\n\n\nif __name__ == '__main__':\n    print(peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "def peak(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1]\n    mid = (len(arr) - 1)//2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid - 1]:\n        return arr[mid - 1]\n    else:\n        return arr[mid + 1]\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(peak(arr))",
    "def peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid - 1]\n    else:\n        return arr[mid]\n\n\narr = [2, 1, 4, 5, 6, 7]\nprint(peak(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] else arr[3]\n\ndef peak_element_2(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] else arr[3]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(peak_element(arr))\nprint(peak_element_2(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    left_most = 0\n    right_most = len(arr) - 1\n\n    while left_most < right_most:\n        mid = (left_most + right_most) // 2\n        if arr[mid] > arr[mid + 1]:\n            left_most = mid + 1\n        else:\n            right_most = mid\n    return arr[left_most]\n\n\nprint(peak_element([1, 2, 3, 4, 5, 6, 7]))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    mid = (len(arr) - 1) // 2\n\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid - 1]:\n        return peak_element(arr[:mid])\n    else:\n        return peak_element(arr[mid + 1:])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    else:\n        return find_peak(arr[left:mid])\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_peak(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    else:\n        middle = len(arr) // 2\n        if arr[middle] > arr[middle-1] and arr[middle] > arr[middle+1]:\n            return arr[middle]\n        else:\n            return arr[middle-1]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print(peak_element(arr))",
    "def peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return arr[0]\n        if arr[1] > arr[2] and arr[1] > arr[3]:\n            return arr[1]\n        if arr[2] > arr[3] and arr[2] > arr[4]:\n            return arr[2]\n    if len(arr) == 4:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return arr[0]\n        if arr[1] > arr[2] and arr[1] > arr[3]:\n            return arr[1]\n        if arr[2] > arr[3] and arr[2] > arr[4]:\n            return arr[2]\n    if len(arr) == 5:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return arr[0]\n        if arr[1] > arr[2] and arr[1] > arr[3]:\n            return arr[1]\n        if arr[2] > arr[3] and arr[2] > arr[4]:\n            return arr[2]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(peak(arr))",
    "def peak(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr)\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return arr[mid - 1]\n\narr = [1, 2, 3, 4, 5, 6]\nprint(peak(arr))",
    "def peak_element(array):\n    if len(array) == 1:\n        return array[0]\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return array[0]\n        else:\n            return array[1]\n    mid = len(array) // 2\n    if array[mid] > array[mid - 1] and array[mid] > array[mid + 1]:\n        return array[mid]\n    elif array[mid] > array[mid - 1]:\n        return peak_element(array[:mid])\n    elif array[mid] > array[mid + 1]:\n        return peak_element(array[mid + 1:])\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(peak_element(array))",
    "def find_peak(arr):\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid] < arr[mid + 1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 2, 3, 4, 5, 6]))",
    "def peak_element(arr):\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[-1]:\n        return arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    print(peak_element(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "def peak(arr):\n    return arr.index(max(arr))\n\nprint(peak([1,2,3,4,5,6,7,8,9,10]))",
    "def find_peak(arr):\n    if len(arr) < 2:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            right = mid - 1\n        elif arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            return arr[mid]\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert find_peak([1, 2, 3, 1]) == 1\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 2\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == -1",
    "def find_peak(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    mid = n // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return find_peak(arr[:mid])\n    else:\n        return find_peak(arr[mid + 1:])\n\narr = [1, 2, 3, 4, 5, 6]\nprint(find_peak(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid - 1]\n    else:\n        return arr[mid + 1]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(peak_element(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    print(peak_element(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(peak_element(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,",
    "def peak_element(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return min(arr)\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\n        return peak_element(arr[:mid])\n    elif arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return peak_element(arr[mid+1:])\n    elif arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\n        return peak_element(arr[:mid])\n    else:\n        return arr[mid]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n\n        if arr[mid] < arr[mid - 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return arr[end]\n\n\nif __name__ == '__main__':\n    print(find_peak([1, 2, 3, 1, 4, 5, 6, 7]))\n    print(find_peak([1, 2, 3, 1, 4, 5, 6, 7, 8]))\n    print(find_peak([1, 2, 3, 1, 4, 5, 6, 7, 8, 9]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
    "def peak(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] < arr[left] and arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(peak(arr))",
    "def peak_element(arr):\n    if len(arr)<2:\n        return arr[0]\n    left=0\n    right=len(arr)-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]>arr[mid+1]:\n            left=mid+1\n        else:\n            right=mid\n    return arr[left]",
    "def peak(arr):\n    return arr.index(max(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9]\n    print(peak(arr))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    mid = len(arr)//2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return peak_element(arr[:mid])\n    elif arr[mid] > arr[mid+1]:\n        return peak_element(arr[mid:])\n    else:\n        return peak_element(arr[mid+1:])\n\nprint(peak_element([1, 2, 3, 1, 4, 5, 6]))\nprint(peak_element([1, 2, 3, 4, 5, 6, 7]))",
    "def peak_element(arr):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n\n\nif __name__ == '__main__':\n    print(peak_element([1, 3, 5, 7, 9, 11, 13, 15]))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[1]\n\n    if arr[0] > arr[1]:\n        return arr[0]\n    return arr[1]\n\n\nif __name__ == \"__main__\":\n    assert find_peak([1, 3, 5, 7, 9]) == 5\n    assert find_peak([1, 3, 5, 7, 9, 1]) == 5\n    assert find_peak([1, 2, 3, 4, 5, 6, 7]) == 6\n    assert find_peak([1, 2, 3, 4, 5, 6]) == 6\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7",
    "def peak_element(arr):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(peak_element(arr))",
    "def peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return arr[0]\n    mid = len(arr)//2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid-1]:\n        return arr[mid-1]\n    else:\n        return arr[mid+1]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1]\n    print(peak(arr))\n\n    arr = [1, 2, 3, 4, 5, 1, 2, 3]\n    print(peak(arr))\n\n    arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(peak(arr))\n\n    arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(peak(arr))\n\n    arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n\n        while left < right:\n            mid = left + (right - left)//2\n            if arr[mid] > arr[mid + 1]:\n                return arr[mid]\n            elif arr[mid] < arr[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 2, 3, 4, 5, 6, 7]))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid - 1]\n    elif arr[mid] > arr[mid - 1]:\n        return peak_element(arr[:mid])\n    else:\n        return peak_element(arr[mid + 1:])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(peak_element(arr))",
    "def peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    mid = len(arr)//2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\n        return arr[mid-1]\n    else:\n        return arr[mid+1]\n\n\nif __name__ == \"__main__\":\n    arr = [2, 4, 5, 6, 7]\n    print(peak(arr))",
    "def peak_element(arr):\n    peak = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > peak:\n            peak = arr[i]\n    return peak\n\nprint(peak_element([1, 2, 3, 4, 5]))",
    "def find_peak(arr):\n    length = len(arr)\n    if length <= 1:\n        return arr[0]\n\n    if arr[0] > arr[length - 1]:\n        return arr[0]\n\n    mid = length // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n\n    return arr[mid - 1]\n\n\nif __name__ == \"__main__\":\n    print(find_peak([3, 2, 1, 5, 4]))",
    "def peak_element(arr):\n    if arr:\n        return arr[len(arr)//2]\n    else:\n        return None\n\n\narr = [3, 4, 2, 5, 1]\nprint(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] > arr[mid-1]:\n            return arr[mid-1]\n        else:\n            return arr[mid+1]\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(find_peak(arr))",
    "def peak_element(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    if len(array) == 1:\n        return array[0]\n    elif len(array) == 2:\n        return array[0] if array[0] > array[1] else array[1]\n    else:\n        mid = len(array)//2\n        if array[0] > array[mid] and array[0] > array[mid-1]:\n            return array[0]\n        elif array[0] > array[mid]:\n            return peak_element(array[mid:])\n        else:\n            return peak_element(array[:mid])\n\n\nif __name__ == \"__main__\":\n    assert peak_element([1, 2, 3, 4, 5]) == 5\n    assert peak_element([1]) == 1\n    assert peak_element([1, 2, 3]) == 2\n    assert peak_element([]) == None",
    "def peak_element(arr):\n    # write your code here\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[0] if arr[0]>arr[1] else arr[1]\n    mid = len(arr)//2\n    if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\n        return arr[mid]\n    if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\n        return arr[mid-1]\n    if arr[mid]>arr[mid+1]:\n        return arr[mid+1]\n\n\nprint(peak_element([1,2,3,4,5,6]))\nprint(peak_element([1,2,3,4]))",
    "def peak_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    mid = len(arr) // 2\n\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid - 1]:\n        return peak_element(arr[:mid])\n    else:\n        return peak_element(arr[mid + 1:])\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(peak_element(arr))",
    "def peak_element(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return min(arr)\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return arr[mid]\n    elif arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n        return find_peak(arr[:mid])\n    elif arr[mid] > arr[mid+1]:\n        return find_peak(arr[mid+1:])\n    else:\n        return find_peak(arr[:mid])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print(find_peak(arr))",
    "def find_peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    else:\n        return arr[mid - 1] if arr[mid - 1] > arr[mid] else arr[mid + 1]\n\n\narr = [2, 1, 3, 5, 4]\nprint(find_peak(arr))",
    "def peak_element(arr):\n    if arr == []:\n        return None\n    else:\n        if arr[0] > arr[len(arr)-1]:\n            return arr[0]\n        else:\n            return arr[len(arr)-1]\n\n\nprint(peak_element([1, 2, 3, 4, 5, 6, 7]))",
    "def find_peak(arr):\n    l = len(arr)\n    if l < 2:\n        return -1\n    elif l == 2:\n        return arr[0]\n    elif l == 3:\n        return arr[1]\n    else:\n        mid = l // 2\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return arr[mid]\n        else:\n            return find_peak(arr[mid+1:])\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 1]\n    print(find_peak(arr))",
    "def findPeak(arr):\n    return findPeakHelper(arr, 0, len(arr) - 1)\n\ndef findPeakHelper(arr, start, end):\n    if start > end:\n        return arr[start]\n    mid = start + (end - start)//2\n    if arr[mid] > arr[mid+1]:\n        return findPeakHelper(arr, start, mid - 1)\n    else:\n        return findPeakHelper(arr, mid + 1, end)\n\n\nif __name__ == \"__main__\":\n    print(findPeak([1, 2, 3, 4, 5, 6, 7]))",
    "class Solution(object):\n    def findPeakElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return nums[0]\n        if nums[0] > nums[1]:\n            return nums[0]\n        if nums[len(nums) - 1] > nums[len(nums) - 2]:\n            return nums[len(nums) - 1]\n        else:\n            return nums[len(nums) - 2]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findPeakElement([1, 2, 3, 4, 5])",
    "def find_peak(array):\n    if len(array) == 1:\n        return array[0]\n    elif len(array) == 2:\n        if array[0] > array[1]:\n            return array[0]\n        else:\n            return array[1]\n    else:\n        mid = len(array) // 2\n        if array[mid] > array[mid - 1] and array[mid] > array[mid + 1]:\n            return array[mid]\n        else:\n            return find_peak(array[mid:])\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 2, 3, 4, 5]))",
    "def peak_element(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    else:\n        mid = (len(arr) // 2) - 1\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return arr[mid + 1]\n\n\nif __name__ == \"__main__\":\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))",
    "def peak(array):\n    if len(array) == 1:\n        return array[0]\n    if array[0] > array[-1]:\n        return array[0]\n    if array[-1] > array[0]:\n        return array[-1]\n    return array[0]\n\n\nif __name__ == \"__main__\":\n    print(peak([1, 2, 3, 4, 5]))",
    "def find_peak(arr):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] > arr[len(arr) - 1]:\n        return arr[0]\n\n    if arr[len(arr) - 1] > arr[len(arr) - 2]:\n        return arr[len(arr) - 2]\n\n    return arr[len(arr) - 1]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(find_peak(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def peak_element(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid-1]:\n        return arr[mid]\n    else:\n        return arr[mid-1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 1, 5, 4, 2, 6, 7, 8, 9, 10]\n    print(peak_element(arr))\n\n\n\"\"\"\nTime Complexity = O(logn)\nSpace Complexity = O(1)\n\"\"\"",
    "def find_peak(arr):\n    # write your code here\n    return arr.index(max(arr))\n\n\ndef main():\n    print(find_peak([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return find_peak(arr[:mid])\n        elif arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return find_peak(arr[mid + 1:])\n\n\nif __name__ == \"__main__\":\n    print(find_peak([1, 3, 5, 2, 4]))\n    print(find_peak([1, 2, 3, 4, 5]))\n    print(find_peak([1]))\n    print(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))",
    "def peak_element(arr):\n    return arr.index(max(arr))\n\n\nif __name__ == '__main__':\n    print(peak_element([1, 3, 5, 7, 9, 2]))",
    "def peak_element(arr):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] > arr[mid + 1]:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n\n\nif __name__ == '__main__':\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def peak_element(arr):\n    if len(arr) <= 1:\n        return None\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return arr[mid - 1]\n\n\ndef main():\n    print(peak_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_peak(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] > arr[1]:\n        return arr[0]\n\n    return arr[1]",
    "def peak(arr):\n    if len(arr)<2:\n        return arr[0]\n\n    left, right = 0, len(arr)-1\n    while left<right:\n        mid = (left+right)//2\n\n        if arr[mid]>arr[mid+1]:\n            right = mid\n        else:\n            left = mid+1\n\n    return arr[left]\n\nprint(peak([1,2,4,2,1]))\nprint(peak([1,2,4,2,1,3]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\nprint(peak([1,2,4,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(peak([1,2,4,2,1,3,5",
    "def find_peak(arr):\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[0] if arr[0]>arr[1] else arr[1]\n    mid = len(arr)//2\n    if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\n        return arr[mid]\n    elif arr[mid]>arr[mid-1]:\n        return find_peak(arr[:mid])\n    elif arr[mid]>arr[mid+1]:\n        return find_peak(arr[mid+1:])\n    else:\n        return find_peak(arr[mid+1:])\n\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7]\n    print(find_peak(arr))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    mid = len(arr) // 2\n    if arr[mid] > arr[mid-1]:\n        return find_peak(arr[:mid])\n    return find_peak(arr[mid+1:])",
    "def find_peak(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return arr[0]\n\n    elif len(arr) == 2:\n        return max(arr)\n\n    else:\n        mid = (len(arr) // 2) - 1\n\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return arr[mid + 1]",
    "def peak_element(arr):\n    # your code here\n    if arr is None or len(arr) == 0:\n        return None\n    else:\n        return arr[len(arr) // 2]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(peak_element(arr))",
    "def find_peak(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] > arr[1] and arr[0] > arr[2] else arr[2]\n\n    mid = len(arr)//2\n    left = find_peak(arr[:mid])\n    right = find_peak(arr[mid:])\n    return max(left, right) if left < right else left\n\nprint(find_peak([1,2,3,4,5,6,7]))\nprint(find_peak([1,2,3,4,5,6,7]))\nprint(find_peak([1,2,3,4,5,6]))\nprint(find_peak([1,2,3,4,5,6,7]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}