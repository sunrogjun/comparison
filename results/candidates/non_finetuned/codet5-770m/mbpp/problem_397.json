{
  "problem": {
    "task_id": "MBPP/408",
    "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "test_list": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ],
    "challenge_test_list": [],
    "problem_id": 397
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n\n        if len(nums1)!= len(nums2):\n            return -1\n\n        dic = {}\n        for i in range(len(nums1)):\n            dic[nums1[i]] = dic.get(nums1[i], 0) + 1\n\n        result = 0\n        for i in range(len(nums2)):\n            if nums2[i] in dic and dic[nums2[i]] == 1:\n                result += 1\n            elif nums2[i] in dic:\n                dic[nums2[i]] -= 1\n\n        return result",
    "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        counter = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    counter += 1\n                    if counter >= k:\n                        return counter\n        return 0\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    out = 2\n    res = Solution().findPairs(nums, k)\n    assert res == out",
    "def k_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(i+1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                count += 1\n                if count == k:\n                    return True\n    return False\n\n\nprint(k_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 3))\nprint(k_pairs([1, 2, 3, 4, 5], [3, 4, 5, 6], 2))",
    "def find_pairs(nums1, nums2, k):\n    # write your code here\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                counter += 1\n\n    return counter\n\n\nprint(find_pairs([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3))\nprint(find_pairs([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 4))",
    "def k_pairs(arr1, arr2, k):\n    n1, n2 = len(arr1), len(arr2)\n\n    if n1 < n2:\n        return k_pairs(arr2, arr1, k)\n\n    count = [0] * (n2 + 1)\n\n    for i in range(n1):\n        if i < n2:\n            count[arr2[i]] += 1\n\n    for i in range(n2 + 1):\n        if i < n1:\n            count[i] += 1\n\n    count = [count[i] for i in range(n2 + 1)]\n    count.sort()\n\n    return count[k - 1]",
    "from typing import List\n\n\ndef pair_count(arr1: List[int], arr2: List[int], k: int) -> int:\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n        if count == k:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert pair_count([1, 2, 3, 4], [2, 3, 4, 5], 2) == -1\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 2) == 0\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 3) == 0\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 4) == 4\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 5) == -1\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 6) == -1\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 7) == 3\n    assert pair_count([1, 2, 3, 4], [1, 2, 3, 4], 8) == -1",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return -1\n        n = len(nums1)\n        nums1.sort()\n        nums2.sort()\n        return sum(x == y for x, y in zip(nums1, nums2))\n\n\ns = Solution()\nprint(s.findPairs([1, 1, 1, 1, 1], [1, 1, 1, 1, 1], 2))",
    "def find_pairs(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return 0\n    if k == 1:\n        return sum([arr1[i] == arr2[0] for i in range(len(arr1))])\n    res = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            res += find_pairs(arr1[i+1:], arr2[1:], k-1)\n    return res\n\n\ndef main():\n    print(find_pairs([1, 2, 3], [1, 2, 3], 3))\n    print(find_pairs([1, 2, 3], [1, 2, 3], 2))\n    print(find_pairs([1, 2, 3], [1, 2, 3], 1))\n    print(find_pairs([1, 2, 3], [1, 2, 3], 4))\n    print(find_pairs([1, 2, 3], [1, 2, 3], 5))\n\n\nmain()",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        # Write your code here\n        arr1 = {}\n        arr2 = {}\n        for i in range(len(nums1)):\n            arr1[nums1[i]] = i\n        for j in range(len(nums2)):\n            arr2[nums2[j]] = j\n        count = 0\n        for i in range(len(nums1)):\n            if arr1[nums1[i]] in arr2 and arr2[nums2[i]] in arr1:\n                count += 1\n        return count",
    "def find_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n            if count == k:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    assert find_pairs([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6], 3) == True\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2) == True\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2) == False\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 3) == True\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 4) == True\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 5) == False\n    assert find_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 6) == False",
    "def find_pairs(arr, k):\n    return len(set(arr)) - (k % len(set(arr)))\n\n\ndef find_pairs2(arr, k):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] and i!= j:\n                result += 1\n    return result\n\n\nprint(find_pairs([1, 2, 3], 2))\nprint(find_pairs2([1, 2, 3], 2))",
    "from typing import List\n\n\ndef count_pairs(arr1: List[int], arr2: List[int], k: int) -> int:\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\nprint(count_pairs([1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], 3))",
    "def find_kth_pair(arr1, arr2, k):\n    # Write your code here\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nprint(find_kth_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return 0\n        result = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[0]:\n                for j in range(1, len(nums2)):\n                    if nums1[i] == nums2[j]:\n                        result += 1\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [1, 2, 3, 4, 5]\n    k = 4\n    print(sol.findPairs(nums1, nums2, k))",
    "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n        nums.sort()\n        return sum([(i+1) * (j+1) for i, j in zip(nums[:-k], nums[k:])])",
    "def k_pairs(arr1, arr2, k):\n    if len(arr1) == 0:\n        return 0\n    if len(arr2) == 0:\n        return 0\n    if k == 0:\n        return 0\n    if k == 1:\n        return min(len(arr1), len(arr2))\n    if k == 2:\n        return min(len(arr1), len(arr2)) * (len(arr1) + len(arr2)) // 2\n    if k > 2:\n        return 0\n\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\ndef k_pairs_2(arr1, arr2, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return min(len(arr1), len(arr2))\n    if k == 2:\n        return min(len(arr1), len(arr2)) * (len(arr1) + len(arr2)) // 2\n    if k > 2:\n        return 0\n\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(k_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2))\n    print(k_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 1))\n    print(k_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2))\n    print(k_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 0))\n    print(k_pairs([1, 2, 3, 4, 5, 6], [1,",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        nums1.sort()\n        nums2.sort()\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\n\n\ns = Solution()\nprint(s.findPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2))",
    "def kthPair(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return -1\n    if k > len(arr1):\n        return -1\n    for i in range(0, k):\n        for j in range(i+1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                return j\n    return -1\n\n\nif __name__ == '__main__':\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 3))\n    print(kthPair([1, 2, 3, 4], [2, 3, 4], 2))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 1))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 2))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 3))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 4))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 5))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 6))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 7))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 8))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 9))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 10))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 11))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3, 4], 12))\n    print(kthPair([1, 2, 3, 4], [1, 2, 3,",
    "def k_pairs(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return \"Arrays must be of equal length\"\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n        if count == k:\n            return count\n    return \"No pairs with same elements\"\n\n\nif __name__ == \"__main__\":\n    print(k_pairs([1, 2, 3, 4, 5], [4, 1, 2, 3, 4], 2))",
    "def countPairs(arr1, arr2, k):\n    if not arr1 or not arr2:\n        return 0\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(0, len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert countPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2) == 3\n    assert countPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3) == 2\n    assert countPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4) == 3\n    assert countPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5) == 0\n    assert countPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6) == 1",
    "def find_pairs(a, b, k):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == b[j]:\n                count += 1\n            if count == k:\n                return True\n    return False\n\n\nprint(find_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 2, 4, 5, 6], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [4, 3, 2, 5, 6], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 2))",
    "def find_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n        elif arr1[i] < arr2[0]:\n            count += 1\n        elif arr1[i] > arr2[0]:\n            count += 1\n\n    return count\n\nprint(find_pairs([1,2,3,4], [2,3,4,5], 2))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return 0\n        dic = {}\n        for i in range(len(nums1)):\n            dic[nums1[i]] = dic.get(nums1[i], 0) + 1\n            dic[nums2[i]] = dic.get(nums2[i], 0) + 1\n        res = 0\n        for key, value in dic.items():\n            if value == k:\n                res += 1\n        return res",
    "def find_pairs(arr1, arr2, k):\n    # write your code here\n    if not arr1:\n        return 0\n    if not arr2:\n        return 0\n    return sum([(x == y) for x in arr1 for y in arr2])\n\n\nprint(find_pairs([1, 2, 3, 4, 5], [2, 4, 6, 7, 8], 3))",
    "def count_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    pairs = 0\n    for i in range(len(arr1)):\n        for j in range(i + 1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                pairs += 1\n    return pairs\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3], [1, 2, 3], 3))\n    print(count_pairs([1, 2, 3], [1, 2, 3], 4))\n    print(count_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6))",
    "def find_k_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(0, len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [2, 3, 4, 5, 6, 7]\n    k = 3\n    print(find_k_pairs(arr1, arr2, k))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2:\n            return 0\n        res = 0\n        nums1.sort()\n        nums2.sort()\n        for i in range(len(nums1)):\n            if i == 0:\n                continue\n            if nums1[i] == nums2[0]:\n                res += 1\n            if res >= k:\n                return res\n        return 0",
    "def find_k_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    res = 0\n    for i in range(len(arr1) - k + 1):\n        if arr1[i] == arr2[i]:\n            res += 1\n    return res\n\n\nprint(find_k_pairs([2, 5, 6, 2, 3, 3, 1, 4, 3, 5, 4, 4, 5], [2, 5, 6, 2, 3, 3, 1, 4, 3, 5, 4, 4, 5], 3))",
    "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        if len(nums) < k:\n            return count\n        for i in range(len(nums) - k + 1):\n            for j in range(i + k, len(nums) - 1):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.findPairs([1, 2, 3, 4, 5], 2)",
    "def find_k_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n                if count == k:\n                    return True\n    return False\n\n\nprint(find_k_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 2))\nprint(find_k_pairs([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 2))\nprint(find_k_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 3))\nprint(find_k_pairs([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 5))",
    "def find_pairs(a, b, k):\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                count += 1\n    return count\n\n\nprint(find_pairs([1, 2, 3, 4, 5], [3, 5, 6, 7], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [4, 6, 7, 8], 3))\nprint(find_pairs([1, 2, 3, 4, 5], [5, 6, 7, 8, 9], 5))\nprint(find_pairs([1, 2, 3, 4, 5], [8, 9, 10, 11], 4))\nprint(find_pairs([1, 2, 3, 4, 5], [2, 3, 5, 8, 9], 3))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        num_dict = {}\n        for i in nums1:\n            if i not in num_dict.keys():\n                num_dict[i] = 1\n            else:\n                num_dict[i] += 1\n        for i in nums2:\n            if i not in num_dict.keys():\n                num_dict[i] = 1\n            else:\n                num_dict[i] += 1\n        ans = 0\n        for i in num_dict.keys():\n            if i == 1:\n                ans += k\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        if len(nums1)!= len(nums2):\n            return 0\n\n        pairs = {}\n        for i in range(len(nums1)):\n            if nums1[i] not in pairs:\n                pairs[nums1[i]] = 0\n\n            if nums2[i] not in pairs:\n                pairs[nums2[i]] = 0\n\n            pairs[nums1[i]]+=1\n            pairs[nums2[i]]+=1\n\n        ans = 0\n        for pair in pairs:\n            if pair in pairs.values():\n                ans += 1\n\n        return ans\n\n\nif __name__ == \"__main__\":\n    nums1 = [1,2,3,4,5]\n    nums2 = [1,2,3,4,5]\n    k = 2\n\n    sol = Solution()\n    ans = sol.findPairs(nums1, nums2, k)\n    print(ans)",
    "def k_pairs(arr1, arr2, k):\n\n    if k == 0:\n        return 0\n\n    if k == 1:\n        return len(arr1) * len(arr2)\n\n    res = 0\n\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                res += k\n\n    return res\n\n\nprint(k_pairs([1, 2, 3], [2, 3, 4], 3))\nprint(k_pairs([1, 2, 3], [2, 3, 4], 2))\nprint(k_pairs([1, 2, 3], [2, 3, 4], 1))\nprint(k_pairs([1, 2, 3], [2, 3, 4], 0))",
    "from typing import List\n\n\ndef find_kth_pair(nums1: List[int], nums2: List[int], k: int) -> int:\n    count = 0\n    for num in nums1:\n        if num in nums2:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert find_kth_pair([1, 1, 2, 3, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 3\n    assert find_kth_pair([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 1, 3, 5, 7, 8, 9, 4, 6], 2) == 2",
    "def k_pairs(arr1, arr2, k):\n    n = len(arr1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\nprint(k_pairs([1, 2, 3, 4], [2, 3, 4, 1], 2))\nprint(k_pairs([1, 2, 3, 4], [2, 3, 4, 1], 3))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5], 3))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6], 4))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7], 4))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7], 3))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3))\nprint(k_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3))",
    "def find_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(find_pairs([1,2,3,4,5,6,7], [4,5,6,7], 3))",
    "def k_pairs(arr1, arr2, k):\n    # Write your code here\n    pairs = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            pairs += 1\n    return pairs\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(k_pairs([1,2,3], [4,5,6], 3))\n    print(k_pairs([1,2,3], [4,5,6], 2))\n    print(k_pairs([1,2,3], [4,5,6], 4))\n    print(k_pairs([1,2,3], [4,5,6], 5))\n    print(k_pairs([1,2,3], [4,5,6], 6))\n    print(k_pairs([1,2,3], [4,5,6], 7))\n    print(k_pairs([1,2,3], [4,5,6], 8))",
    "def find_pairs(arr1, arr2, k):\n    # Write your code here\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nk = 2\nprint(find_pairs(arr1, arr2, k))",
    "def find_pairs(arr1, arr2, k):\n    # Write your code here\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n    if count >= k:\n        return count\n    else:\n        return 0\n\n\nprint(find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4))\nprint(find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5))",
    "def two_element_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\nprint(two_element_pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 2))",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        if len(nums1)!= len(nums2):\n            return 0\n        arr1 = [0] * len(nums1)\n        arr2 = [0] * len(nums2)\n        for i in range(len(nums1)):\n            arr1[i] = nums1[i]\n        for i in range(len(nums2)):\n            arr2[i] = nums2[i]\n        arr1.sort()\n        arr2.sort()\n        pairs = 0\n        for i in range(len(arr1)):\n            for j in range(i + 1, len(arr1)):\n                if arr1[i] == arr2[j]:\n                    pairs += 1\n        return pairs\n\n\ns = Solution()\nprint(s.findPairs([1,2,3], [3,2,1], 2))\nprint(s.findPairs([1,2,3], [1,2,3], 3))\nprint(s.findPairs([1,2,3], [1,2,3], 4))",
    "def k_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-k+1):\n        if arr[i] == arr[i+k-1]:\n            count += 1\n    return count\n\n\nprint(k_pairs([1, 2, 3, 4], 2))\nprint(k_pairs([1, 2, 3, 4], 3))\nprint(k_pairs([1, 2, 3, 4], 1))\nprint(k_pairs([1, 2, 3, 4], 4))",
    "class Solution(object):\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return -1\n        hash = {}\n        for i in range(len(nums1)):\n            hash[nums1[i]] = nums2[i]\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] in hash and hash[nums1[i]]!= nums2[i]:\n                count += 1\n        return count\n\na = Solution()\nprint a.findKPairs([1,2,3,4,5], [2,3,4,5,6], 3)",
    "from typing import List\n\n\ndef find_pairs(arr1: List[int], arr2: List[int], k: int) -> int:\n    if len(arr1)!= len(arr2):\n        return 0\n\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert find_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 2) == 1\n    assert find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2) == 2\n    assert find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3) == 4\n    assert find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4) == 0",
    "def find_pairs(arr1, arr2, k):\n    # Write your code here\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n    return count\n\n\nprint(find_pairs([1, 3, 5, 6], [2, 4, 6, 7], 2))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return 0\n\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[0]:\n                count += 1\n            elif nums1[i] < nums2[0]:\n                break\n            else:\n                count -= 1\n\n        return count\n\na = Solution()\nprint a.findPairs([1, 2, 3], [1, 3, 4], 2)",
    "def k_pairs(arr1, arr2, k):\n    d = {}\n    for i in arr1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in arr2:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 0\n    for i in d:\n        if d[i] == 1 and d[i] <= k:\n            ans += 1\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(k_pairs([1, 1, 2, 2, 3], [1, 1, 3, 3, 3], 3))\n    print(k_pairs([1, 1, 2, 2, 3], [1, 1, 3, 3, 3], 5))\n    print(k_pairs([1, 1, 2, 2, 3], [1, 1, 3, 3, 3], 3))",
    "def findPairs(arr1, arr2, k):\n    return arr1 + arr2\n\n\nprint(findPairs([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], 3))",
    "def numPairs(arr1, arr2, k):\n    # Write your code here\n    result = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            result += 1\n\n    return result\n\n\nprint(numPairs([1, 1, 1, 1, 1], [1, 1, 1, 1, 1], 3))",
    "def numPairs(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return 0\n\n    pairs = {}\n    for i in range(len(arr1)):\n        if arr1[i] not in pairs:\n            pairs[arr1[i]] = 1\n        else:\n            pairs[arr1[i]] += 1\n\n    return len([key for key in pairs if pairs[key] == k])",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        if k == 0:\n            return 0\n        return sum([(nums1[i] == nums2[i]) for i in range(len(nums1))])",
    "def find_k_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nprint(find_k_pairs([1, 2, 3], [3, 1, 2], 2))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return 0\n        if len(nums1) == 0:\n            return 0\n        if len(nums2) == 0:\n            return 0\n        nums1.sort()\n        nums2.sort()\n        count = 0\n        for i in range(len(nums1)):\n            if i < len(nums2):\n                if nums1[i] == nums2[i]:\n                    count += 1\n                elif i == 0 or nums1[i]!= nums2[i - 1]:\n                    count += 1\n            else:\n                break\n        return count",
    "from collections import Counter\n\n\ndef count_pairs(a, b, k):\n    counter = Counter(a)\n    return counter.get(b[0], 0) + counter.get(b[1], 0) + k\n\n\na = [1, 2, 3, 4, 5]\nb = [1, 3, 5, 7]\nk = 3\nprint(count_pairs(a, b, k))",
    "def k_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-k+1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\nprint(k_pairs([1,2,3,4], 2))",
    "def find_k_pairs_one_element(arr1, arr2, k):\n    # write your code here\n    if not arr1:\n        return 0\n    if not arr2:\n        return 0\n    if len(arr1)!= len(arr2):\n        return 0\n    result = 0\n    for i in range(0, len(arr1)):\n        for j in range(i+1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [5, 6, 7, 8, 9, 10], 3))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 2))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 1))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 5))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 4))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 3))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 2))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 1))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 0))\n    print(find_k_pairs_one_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10",
    "def find_k_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    res = 0\n    for i in range(0, len(arr1)):\n        if arr1[i] == arr2[0]:\n            res += 1\n            if res == k:\n                return True\n    return False\n\n\nprint(find_k_pairs([1, 2, 3], [1, 2, 3], 2))",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        if len(nums1)!= len(nums2):\n            return 0\n\n        result = 0\n        nums1.sort()\n        nums2.sort()\n\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[0]:\n                result += 1\n                if result == k:\n                    return 0\n\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPairs([1, 2, 3, 4, 5, 6], [4, 5, 6], 2))",
    "def k_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    arr1 = [2, 3, 4, 5, 7, 8]\n    arr2 = [3, 4, 5, 6, 7, 8]\n    k = 3\n    print(k_pairs(arr1, arr2, k))",
    "def find_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            count += 1\n    return count\n\n\nprint(find_pairs([1, 2, 3], [4, 5, 6], 3))\nprint(find_pairs([1, 2, 3], [4, 5, 6], 4))\nprint(find_pairs([1, 2, 3, 4], [5, 6, 7, 8], 5))",
    "def find_pairs(arr1, arr2, k):\n    pair_count = 0\n    for i in range(len(arr1)):\n        for j in range(i+1, len(arr2)):\n            if arr1[i] == arr2[j]:\n                pair_count += 1\n    return pair_count\n\n\nif __name__ == \"__main__\":\n    assert find_pairs([1, 1, 1, 2, 2, 2], [1, 2, 2, 2, 3, 3], 2) == 6\n    assert find_pairs([1, 1, 1, 2, 2, 2], [1, 2, 2, 2, 3, 3], 3) == 4",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n\n        result = 0\n        nums1.sort()\n        nums2.sort()\n\n        for i in range(0, len(nums1)):\n            if nums1[i] == nums2[0]:\n                result += 1\n\n            if i + 1 < len(nums1):\n                if nums1[i] == nums2[1]:\n                    result += 1\n\n        return result",
    "def findPairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n                if count == k:\n                    return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(findPairs([1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2], 3))",
    "def k_pairs(arr1, arr2, k):\n    if k < 0 or len(arr1)!= len(arr2):\n        return 0\n    count = 0\n    for i in range(0, len(arr1)):\n        for j in range(0, len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n            if count == k:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    print(k_pairs([1, 2, 3, 4, 5], [4, 2, 5, 1, 3], 3))",
    "def find_pairs(arr1, arr2, k):\n    res = 0\n    for i in range(len(arr1)):\n        for j in range(i + 1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                res += 1\n    return res\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nk = 2\nprint(find_pairs(arr1, arr2, k))",
    "def k_pairs(arr1, arr2, k):\n    result = 0\n    for i in range(len(arr1)):\n        for j in range(i+1, len(arr1)):\n            if arr1[i] == arr2[j]:\n                result += 1\n    return result\n\nprint(k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2))",
    "def find_pairs(arr1, arr2, k):\n    num1 = [0] * len(arr1)\n    num2 = [0] * len(arr2)\n    for i in range(len(arr1)):\n        num1[i] = arr1[i]\n\n    for i in range(len(arr2)):\n        num2[i] = arr2[i]\n\n    num1_set = set(num1)\n    num2_set = set(num2)\n    num1_list = list(num1_set)\n    num2_list = list(num2_set)\n    num1_list.sort()\n    num2_list.sort()\n    count = 0\n    for i in range(len(num1_list)):\n        if num1_list[i] in num2_list:\n            count += 1\n    return count\n\n\nprint(find_pairs([1, 2, 3, 4], [1, 2, 3, 4], 3))\nprint(find_pairs([1, 2, 3, 4], [1, 2, 3, 4], 4))\nprint(find_pairs([1, 2, 3, 4], [1, 2, 3, 4], 5))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2 or len(nums1)!= len(nums2):\n            return 0\n        n = len(nums1)\n        res = 0\n        for i in range(n):\n            if nums1[i] == nums2[i]:\n                res += 1\n                if res == k:\n                    return 1\n        return 0",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        return sum(1 for i in range(len(nums1)) if (nums1[i] == nums2[i]))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return 0\n\n        if k == 0:\n            return 0\n\n        dict = {}\n        for num in nums1:\n            dict[num] = dict.get(num, 0) + 1\n\n        for num in nums2:\n            if num in dict:\n                dict[num] -= 1\n                if dict[num] == 0:\n                    del dict[num]\n\n        return len(dict)",
    "class Solution:\n    def findPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(i + 1, len(nums1)):\n                if nums1[i] == nums2[j]:\n                    count += 1\n        return count",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        # Write your code here\n        return len(set(nums1) & set(nums2))",
    "def count_pairs(arr1, arr2, k):\n    result = 0\n    for i in range(len(arr1)):\n        for j in range(i+1, len(arr1)):\n            if arr1[i] == arr2[j] and (i!= j):\n                result += 1\n    return result\n\n\narr1 = [1, 2, 3, 4]\narr2 = [2, 3, 4, 5]\nk = 3\n\nprint(count_pairs(arr1, arr2, k))",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.countPairs(nums1, nums2, k)\n\n    def countPairs(self, nums1, nums2, k):\n        if len(nums1)!= len(nums2):\n            return 0\n        else:\n            res = 0\n            for i in range(len(nums1)):\n                for j in range(i+1, len(nums1)):\n                    if nums1[i] == nums2[j]:\n                        res += 1\n                        if res == k:\n                            return 1\n            return 0",
    "def find_pairs(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return -1\n\n    if k == 1:\n        return sum([arr1[i] == arr2[i] for i in range(len(arr1))])\n\n    result = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(find_pairs([1, 2, 3], [1, 2, 3], 2))\n    print(find_pairs([1, 2, 3], [2, 3], 2))\n    print(find_pairs([1, 2, 3], [3, 4, 5], 2))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n\n        # Initialize the counter\n        counter = 0\n        # Count the number of pairs\n        for i in range(0, len(nums1)):\n            # Check if the first number is in the second array\n            if nums1[i] in nums2:\n                counter += 1\n        return counter",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        num1, num2 = set(nums1), set(nums2)\n        if len(num1)!= len(num2):\n            return 0\n        return sum([num1.intersection(num2) for _ in range(k)])",
    "def two_sum(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    res = 0\n    for i in range(len(arr1)):\n        if arr1[i] + arr2[i] == k:\n            res += 1\n    return res\n\n\nprint(two_sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))\nprint(two_sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4))\nprint(two_sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5))\nprint(two_sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6))\nprint(two_sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 7))",
    "def count_pairs(arr1, arr2, k):\n    n = len(arr1)\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(n):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nprint(count_pairs([1, 1, 1], [1, 1, 1], 3))\nprint(count_pairs([1, 1, 1], [1, 1, 1], 4))\nprint(count_pairs([1, 1, 1], [1, 1, 1], 5))\nprint(count_pairs([1, 1, 1], [1, 1, 1], 6))\nprint(count_pairs([1, 1, 1], [1, 1, 1], 7))",
    "def count_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    return len([i for i in arr1 if i in arr2])\n\nprint(count_pairs([2,1,1,2,3,5], [1,1,2,3,5], 3))\nprint(count_pairs([1,2,3,4,5], [1,1,2,3,4,5], 2))\nprint(count_pairs([1,2,3,4,5], [1,2,3,4,5], 4))",
    "def pair_count(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n            if count == k:\n                return True\n    return False\n\n\narr1 = [1, 2, 3, 4]\narr2 = [2, 3, 4]\nk = 4\n\nprint(pair_count(arr1, arr2, k))",
    "def k_pairs(arr, k):\n    if k == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    elif k == 1:\n        return (arr[0] * arr[0])\n    else:\n        return (arr[0] * k) + (k * (k - 1))\n\n\nprint(k_pairs([1, 2, 3, 4, 5], 3))\nprint(k_pairs([1, 2, 3, 4, 5], 4))\nprint(k_pairs([1, 2, 3, 4, 5], 5))\nprint(k_pairs([1, 2, 3, 4, 5], 6))\nprint(k_pairs([1, 2, 3, 4, 5], 7))\nprint(k_pairs([1, 2, 3, 4, 5], 8))\nprint(k_pairs([1, 2, 3, 4, 5], 9))",
    "def k_pairs(arr1, arr2, k):\n    n = len(arr1)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr1[i] == arr2[j]:\n                pairs += 1\n    return pairs\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4]\n    k = 2\n    print(k_pairs(arr1, arr2, k))",
    "def find_pairs(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nk = 2\nprint(find_pairs(arr1, arr2, k))",
    "def two_array(arr1, arr2, k):\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 2\n    print(two_array(arr1, arr2, k))",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        if len(nums1)!= len(nums2):\n            return -1\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[0]:\n                if i == 0 or nums1[i-1]!= nums2[0]:\n                    count += 1\n        return count",
    "def k_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    count = 0\n    for i in range(0, len(arr1) - k + 1):\n        for j in range(0, len(arr2) - k + 1):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(k_pairs([1, 2, 3, 4, 5, 6, 7], [2, 5, 7, 8, 9, 10], 2))",
    "from typing import List\n\n\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        if k <= 0 or k > n:\n            return 0\n\n        hash_map = {}\n        for i in range(n):\n            if nums[i] in hash_map:\n                hash_map[nums[i]].append(i)\n            else:\n                hash_map[nums[i]] = [i]\n\n        count = 0\n        for i in range(n):\n            for j in hash_map[nums[i]]:\n                count += 1\n                if count == k:\n                    return 1\n        return 0\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    k = 2\n    out = 2\n    res = Solution().findPairs(nums, k)\n    assert res == out\n\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 4\n    out = 2\n    res = Solution().findPairs(nums, k)\n    assert res == out",
    "class Solution:\n    def findPairs(self, nums1, nums2, k):\n        nums1.sort()\n        nums2.sort()\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count",
    "from typing import List\n\n\ndef find_pairs(arr1: List[int], arr2: List[int], k: int) -> int:\n    pairs = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            pairs += 1\n    return pairs\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4, 5, 6]\n    k = 2\n    print(find_pairs(arr1, arr2, k))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_k_pairs(arr1, arr2, k):\n    pairs = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                pairs += 1\n                if pairs == k:\n                    return True\n    return False\n\n\nprint(find_k_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 3))",
    "def find_pairs(arr1, arr2, k):\n    # write your code here\n    dic1={}\n    dic2={}\n    for x in arr1:\n        if x not in dic1:\n            dic1[x]=1\n        else:\n            dic1[x]+=1\n    for x in arr2:\n        if x not in dic2:\n            dic2[x]=1\n        else:\n            dic2[x]+=1\n    count=0\n    for x in dic1:\n        if dic1[x]==1:\n            count+=dic2[x]\n    if count>k:\n        return count\n    else:\n        return 0",
    "from typing import List\n\n\ndef find_k_pairs(arr: List[int], k: int) -> int:\n    return arr.count(1) // k\n\n\nif __name__ == '__main__':\n    assert find_k_pairs([1, 2, 3, 4, 5, 6], 3) == 2\n    assert find_k_pairs([1, 2, 3, 4, 5, 6], 5) == 2",
    "def find_pairs(arr1, arr2, k):\n\n    # make a dictionary of pairs\n    pairs = {}\n\n    for i in range(len(arr1)):\n        if arr1[i] not in pairs:\n            pairs[arr1[i]] = 1\n        else:\n            pairs[arr1[i]] += 1\n\n    # find the number of pairs\n    count = 0\n    for key in pairs:\n        if pairs[key] == k:\n            count += 1\n\n    return count\n\n\ndef main():\n    print(find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2))\n    print(find_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 2))\n    print(find_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 1))\n    print(find_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums1) < len(nums2):\n            return self.findPairs(nums2, nums1, k)\n        if len(nums2) < len(nums1):\n            return self.findPairs(nums1, nums2, k)\n\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j] and i!= j:\n                    count += 1\n        return count",
    "def find_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    arr1_set = set(arr1)\n    arr2_set = set(arr2)\n    return len(arr1_set.intersection(arr2_set))\n\n\nif __name__ == \"__main__\":\n    assert find_pairs([1, 1, 2, 2, 3, 3, 4], [1, 2, 3], 3) == 2\n    assert find_pairs([1, 1, 2, 2, 3, 3, 4], [1, 2, 3], 4) == 0\n    assert find_pairs([1, 1, 2, 2, 3, 3, 4], [1, 2, 3], 3) == 0",
    "def find_pairs(nums1, nums2, k):\n    n = len(nums1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums1[i] == nums2[j]:\n                count += 1\n\n    return count\n\n\nprint(find_pairs([1, 2, 3], [4, 5, 6], 2))",
    "def k_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - k):\n        if arr[i] == arr[i + k - 1]:\n            count += 1\n    return count\n\n\nprint(k_pairs([1, 2, 3, 4, 5], 3))",
    "def k_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[0]:\n            count += 1\n\n        if i < k - 1:\n            if arr1[i + 1] == arr2[k - 1]:\n                count += 1\n\n    return count\n\n\nprint(k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}