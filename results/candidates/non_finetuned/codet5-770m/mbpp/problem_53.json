{
  "problem": {
    "task_id": "MBPP/64",
    "prompt": "Write a function to sort a list of tuples using lambda.",
    "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
    "test_list": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ],
    "challenge_test_list": [],
    "problem_id": 53
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sort(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\ndef main():\n    lst = [(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\")]\n    print(sort(lst))\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuples(list_of_tuples):\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n    return sorted_list\n\n\nif __name__ == '__main__':\n    print(sort_tuples([('a', 'b'), ('b', 'a'), ('b', 'c'), ('c', 'a'), ('c', 'b')]))",
    "def sort(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    test_tuples = [\n        (\"Alice\", \"Bob\"),\n        (\"Bob\", \"Alice\"),\n        (\"Cheese\", \"David\"),\n        (\"David\", \"Cheese\"),\n        (\"Alice\", \"David\"),\n    ]\n    print(sort(test_tuples))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "def sorted_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[1])\n\n\nif __name__ == \"__main__\":\n    tuples = [(\"bob\", 15), (\"jack\", 32), (\"jill\", 22), (\"jane\", 19), (\"bob\", 40)]\n    print(sort_tuples(tuples))",
    "# Solution 1\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0])\n\n# Solution 2\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[1])\n\n# Solution 3\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1])\n\n# Solution 4\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2])\n\n# Solution 5\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3])\n\n\n# Solution 6\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3] * tup[4])\n\n# Solution 7\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3] * tup[4] * tup[5] * tup[6] * tup[7])\n\n# Solution 8\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3] * tup[4] * tup[5] * tup[6] * tup[7] * tup[8])\n\n# Solution 9\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3] * tup[4] * tup[5] * tup[6] * tup[7] * tup[8] * tup[9])\n\n# Solution 10\n\ndef sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0] * tup[1] * tup[2] * tup[3] * tup[4] * tup[5] * tup[6] * tup[7] * tup[8]",
    "def sort(tup):\n    return sorted(tup, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    test_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    print(sort(test_tup))",
    "from typing import List\n\n\ndef sort_tuples(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(lst, key=lambda x: x[0])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    test_list = [\n        (\"a\", \"b\"),\n        (\"c\", \"d\"),\n        (\"e\", \"f\"),\n        (\"g\", \"h\"),\n        (\"i\", \"j\"),\n        (\"k\", \"l\"),\n        (\"m\", \"n\"),\n        (\"o\", \"p\"),\n        (\"q\", \"r\"),\n        (\"s\", \"t\"),\n        (\"u\", \"v\"),\n        (\"v\", \"w\"),\n        (\"x\", \"y\"),\n        (\"z\", \"x\")\n    ]\n    print(sort_tuples(test_list))",
    "import random\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])\n\ndef main():\n    tuples = [(random.randint(1,10), random.randint(1,10)) for i in range(100)]\n    print(sort_tuples(tuples))\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuple(tuples):\n    tuples.sort(key=lambda t: t[0])\n    return tuples\n\n\ndef test_function():\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(5,4), (2,3), (3,4), (1,2)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(5,4), (2,3), (3,4), (1,2)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(1,2), (3,4), (2,3), (5,4)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(2,3), (3,4), (5,4), (1,2)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(1,2), (2,3), (3,4), (5,4)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(5,4), (2,3), (3,4), (1,2)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(1,2), (2,3), (3,4), (5,4)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(1,2), (2,3), (3,4), (5,4)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,4)]) == [(2,3), (1,4), (3,4), (5,4)]\n    assert sort_tuple([(1,2), (3,4), (2,3), (5,",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef main():\n    print(sort_tuples([(1, 2), (2, 4), (3, 5), (4, 6)]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuples(tup):\n    return sorted(tup, key=lambda x: x[1])\n\n#Test\ntup = [('A', 2), ('B', 1), ('C', 3), ('D', 4)]\nprint(sort_tuples(tup))",
    "def sort(list_of_tuples):\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[0])\n    return sorted_list\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 3), (2, 5), (3, 8), (4, 7), (5, 4)]\n    print(sort(list_of_tuples))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples([(1, \"A\"), (2, \"B\"), (3, \"C\")]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 2), (1, 3), (2, 4), (2, 3)]))",
    "def sort_tuples(tuples):\n    tuples.sort(key=lambda tup: tup[0])\n    return tuples\n\n\nprint(sort_tuples([(1, 2), (2, 3), (1, 4), (3, 1)]))",
    "def sort_by_lambda(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nprint(sort_by_lambda([('a', 1), ('b', 2), ('c', 3), ('d', 4)]))\nprint(sort_by_lambda([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]))\nprint(sort_by_lambda([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]))",
    "import random\n\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0] * x[1])\n\n\ndef main():\n    print(sort_tuples([(random.randint(1, 100), random.randint(1, 100)) for _ in range(10)]))\n\n\nif __name__ == '__main__':\n    main()",
    "def sort_tuples(l):\n    return sorted(l, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    l = [(1, 'a'), (2, 'b'), (3, 'c')]\n    print(sort_tuples(l))",
    "from operator import itemgetter\n\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=itemgetter(0))\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(\"A\", 3), (\"B\", 4), (\"C\", 5)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples([(1,2),(3,4),(5,6),(7,8),(9,10)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    test_list = [\n        (\"Alice\", \"Bob\", \"Charlie\"),\n        (\"Alice\", \"Bob\", \"David\"),\n        (\"Alice\", \"Bob\", \"David\"),\n        (\"Alice\", \"Bob\", \"Charlie\"),\n        (\"Alice\", \"Bob\", \"Charlie\"),\n    ]\n    assert sort_tuples(test_list) == sorted(test_list, key=lambda x: x[0])",
    "def sorted_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])\n\n\nprint(sorted_tuples([(1, 2), (2, 1), (3, 4), (3, 2)]))",
    "def sort_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4)]))\nprint(sort_tuples([(1, 2), (3, 4), (2, 1)]))",
    "def sort_by_lambda(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    assert sort_by_lambda([(\"k\", 2), (\"a\", 1), (\"b\", 3), (\"c\", 4)]) == [(\"b\", 3), (\"c\", 4), (\"k\", 1), (\"a\", 2)]",
    "from functools import reduce\n\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4)]))",
    "sort = lambda x: x[1]\n\nprint(sort([(1,1), (2,2), (3,3), (4,4)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 'A'), (2, 'B'), (3, 'C')]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef main():\n    print(sort_tuples([(\"a\", 1), (\"b\", 2), (\"c\", 3)]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[1])\n\n\nif __name__ == '__main__':\n    # Test Case 1\n    print(sort_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4)]))\n\n    # Test Case 2\n    print(sort_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]))\n\n    # Test Case 3\n    print(sort_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9)]))",
    "def sort(l):\n    return sorted(l, key = lambda x: x[1])\n\nl = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)]\nprint(sort(l))",
    "from functools import cmp_to_key\n\ndef sort(list_of_tuples):\n    list_of_tuples.sort(key=lambda x: x[1])\n    return list_of_tuples\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    # Test 1\n    test_cases = [\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [2,3,4,1,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5])\n    ]\n\n    for test_case in test_cases:\n        assert sort(test_case) == test_case\n\n    # Test 2\n    test_cases = [\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [2,3,4,1,5])\n    ]\n\n    for test_case in test_cases:\n        assert cmp_to_key(lambda x, y: x[1] - y[1])(sort(test_case)) == cmp_to_key(lambda x, y: x[1] - y[1])\n\n    # Test 3\n    test_cases = [\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [1,2,3,4,5]),\n        ([(1,2), (2,3), (3,4), (4,5)], [1,",
    "def sort(l):\n    return sorted(l, key=lambda x: x[1])\n\nl = [(1, 2), (3, 4), (5, 6)]\nprint(sort(l))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])\n\nif __name__ == '__main__':\n    assert sort_tuples([(1, 'a'), (2, 'b'), (3, 'c')]) == [(3, 'c'), (2, 'a'), (1, 'b')]",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])",
    "def sort_by_key(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    test_data = [\n        (1, 2, 3),\n        (1, 4, 5),\n        (2, 3, 4),\n        (2, 4, 5),\n    ]\n\n    assert sort_by_key(test_data) == [(1, 2), (2, 4), (1, 3), (3, 5)]\n\n    test_data = [\n        (1, 2, 3, 4),\n        (1, 2, 3, 4),\n        (2, 3, 4),\n        (2, 4, 5),\n    ]\n\n    assert sort_by_key(test_data) == [(2, 3), (2, 4), (1, 2), (3, 4), (4, 5)]",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])\n\n\nif __name__ == \"__main__\":\n    tuples = [\n        (\"apple\", \"banana\"),\n        (\"orange\", \"cherry\"),\n        (\"mango\", \"papaya\"),\n        (\"pineapple\", \"papaya\"),\n    ]\n    print(sort_tuples(tuples))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])",
    "def sorted_tuples(l):\n    return sorted(l, key=lambda t: t[0])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 3), (3, 4)]))",
    "import random\n\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\ndef test_sort():\n    test_tuples = [(random.randint(0, 1000), random.randint(0, 1000))\n                  for _ in range(10)]\n    sorted_tuples = sort_tuples(test_tuples)\n    assert sorted_tuples == sorted(test_tuples, key=lambda x: x[0])",
    "from random import randint\n\n\ndef random_list(size):\n    return [(randint(0, 100), randint(0, 100)) for _ in range(size)]\n\n\ndef sort(list):\n    return sorted(list, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sort(random_list(10)))",
    "sort_tuple = lambda t: t[1]\n\n\ndef sort_tuple(t):\n    return sorted(t, key=lambda t: t[1])",
    "def sort_tuple(tuples):\n    tuples.sort(key=lambda tup: tup[0])\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))",
    "# Sort a list of tuples using lambda\n# TODO:\n# 1. Use list comprehension to get a list of tuples\n# 2. Sort the list\n# 3. Return the sorted list\n# 4. Use list comprehension to get a list of tuples\n# 5. Use list comprehension to get a list of tuples\n\n# Solution 1\n\n# List comprehension\n# TODO:\n# 1. Use list comprehension to get a list of tuples\n# 2. Sort the list\n# 3. Return the sorted list\n# 4. Use list comprehension to get a list of tuples\n# 5. Use list comprehension to get a list of tuples\n\n# Solution 2\n\n# TODO:\n# 1. Use list comprehension to get a list of tuples\n# 2. Sort the list\n# 3. Return the sorted list\n# 4. Use list comprehension to get a list of tuples\n# 5. Use list comprehension to get a list of tuples\n\n\ndef sort_list(list_of_tuples):\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[0])\n    return sorted_list\n\n\ndef main():\n    list_of_tuples = [\n        (10, \"Bob\", \"David\"),\n        (20, \"Jane\", \"Jack\"),\n        (30, \"Jane\", \"Doe\"),\n        (40, \"Mary\", \"Kristian\"),\n        (50, \"Mary\", \"Joe\"),\n        (60, \"Mary\", \"Mary\"),\n    ]\n    print(\"Original list is:\")\n    print(list_of_tuples)\n    print(\"Sorted list is:\")\n    print(sort_list(list_of_tuples))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sort(arr):\n    return sorted(arr, key = lambda tup: tup[0])\n\n\nprint(sort([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "from typing import List\n\n\ndef sort_by_lambda(tuple_list: List[tuple]) -> List[tuple]:\n    return sorted(tuple_list, key=lambda x: x[0])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key = lambda x: x[1])",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nprint(sort_tuples([('a', 1), ('b', 2), ('c', 3)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])",
    "def sort_tuples(tup):\n    return sorted(tup, key=lambda tup: tup[0])\n\nprint(sort_tuples([(1, 2), (2, 3), (1, 1), (3, 2)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == [(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)]",
    "def sort_by_lambda(lst):\n    return sorted(lst, key=lambda tup: tup[0])\n\nprint(sort_by_lambda([(1, 2), (2, 1), (2, 3), (3, 1), (1, 2)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])",
    "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0])",
    "def sorted_tuples(lst):\n    return sorted(lst, key=lambda x: x[0])\n\nprint(sorted_tuples([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]))",
    "def sort_by_lambda(l):\n    return sorted(l, key=lambda tup: tup[0])\n\nif __name__ == '__main__':\n    t = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(sort_by_lambda(t))",
    "import random\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    list_of_tuples = [\n        ('a', 10),\n        ('b', 20),\n        ('c', 30),\n        ('d', 40),\n        ('e', 50),\n        ('f', 60),\n    ]\n    print(sort_tuples(list_of_tuples))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])",
    "import random\n\ndef sort_tuple(list):\n    random.shuffle(list)\n    return list\n\ndef test_sort_tuple():\n    test_list = [(1,1), (1,2), (1,3), (2,3), (3,3), (4,3), (4,4), (5,4), (5,5), (6,4), (6,5), (7,5)]\n    assert sort_tuple(test_list) == sorted(test_list)",
    "def sort_by_lambda(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nprint(sort_by_lambda([(\"John\", 9), (\"Mary\", 8), (\"Luke\", 7), (\"John\", 5), (\"Jones\", 6), (\"Luke\", 4)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (3, 4), (5, 6)]))",
    "def sort(data):\n    return sorted(data, key=lambda x: x[1])\n\n\nprint(sort([(\"a\", 2), (\"b\", 1), (\"c\", 0), (\"d\", 3)]))",
    "def sort(arr):\n    return sorted(arr, key=lambda x: x[1])",
    "def sort_tuples(tuples):\n    tuples.sort(key=lambda x: x[0])\n    return tuples\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1,2),(1,3),(2,3),(2,4),(2,5),(3,4),(4,5)]) == [(1,4),(1,3),(2,3),(2,4),(2,5),(3,4),(3,5)]",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[1])\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "def sorted_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sorted_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "def sort_tuple(tup):\n    return sorted(tup, key=lambda tup: tup[0])",
    "import random\n\n\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\ndef main():\n    random_tuples = []\n    for i in range(0, random.randint(1, 10)):\n        random_tuples.append((random.randint(1, 100), random.randint(1, 100)))\n    print(random_tuples)\n    print(sort_tuples(random_tuples))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda t: t[0])",
    "from typing import List, Tuple\n\n\ndef sort_tuples(tuples: List[Tuple]) -> List[Tuple]:\n    \"\"\"\n    Sort a list of tuples using lambda\n    :param tuples:\n    :return:\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([]) == []\n    assert sort_tuples([(1, 2), (3, 4)]) == sorted([(3, 4), (2, 1)])\n    assert sort_tuples([(1, 2), (3, 4)]) == sorted([(2, 1), (1, 3)])\n    assert sort_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]) == sorted([(7, 8), (3, 4), (5, 6), (1, 2)])",
    "sort_list = sorted(list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[1], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1])))[1:-1])))[1:-1])))))))))))\nprint(sort_list)",
    "def sort_tuples(l):\n    return sorted(l, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 1), (1, 4), (4, 1), (3, 2), (2, 4)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 3), (3, 2), (2, 1)]))",
    "def sort(lst):\n    return sorted(lst, key=lambda x: x[0])",
    "def sort_tuple(l):\n    return sorted(l, key=lambda t: t[0])\n\n\ndef test_sort_tuple():\n    assert sort_tuple([(1, 2), (2, 3), (3, 1)]) == [(1, 2), (2, 3), (3, 1)]",
    "def sort_tuple(tuple_list):\n    tuple_list.sort(key=lambda tup: tup[0])\n    return tuple_list\n\nif __name__ == \"__main__\":\n    print(sort_tuple([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 2), (3, 4), (5, 6)]) == [(5, 6), (4, 3), (2, 1)]\n    assert sort_tuples([(1, 2), (3, 4), (5, 6)]) == [(5, 6), (4, 3), (2, 1)]",
    "def sort_tuples(tuples):\n    sorted_tuples = sorted(tuples, key = lambda tup: tup[1])\n    return sorted_tuples\n\ndef test_function():\n    sorted_tuples = sort_tuples([(\"apples\", 5), (\"oranges\", 10), (\"apples\", 2), (\"oranges\", 3), (\"apples\", 1)])\n    assert sorted_tuples == [(\"apples\", 1), (\"apples\", 2), (\"oranges\", 3), (\"oranges\", 4)]\n\nif __name__ == \"__main__\":\n    test_function()",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])",
    "def sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuple([(3, \"a\"), (5, \"b\"), (8, \"c\"), (1, \"d\")]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 'a'), (2, 'b'), (3, 'c')]))",
    "import unittest\n\nfrom sort_tuples import sort_tuples\n\n\nclass TestSortTuples(unittest.TestCase):\n    def test_sort_tuples(self):\n        test_data = [\n            (('a', 'b'), 'a'),\n            (('b', 'a'), 'b'),\n            (('b', 'c'), 'c'),\n            (('c', 'b'), 'a'),\n            (('c', 'd'), 'b'),\n            (('d', 'c'), 'c'),\n            (('d', 'e'), 'c'),\n            (('e', 'd'), 'b'),\n            (('e', 'f'), 'd'),\n            (('f', 'e'), 'e'),\n            (('f', 'g'), 'd'),\n        ]\n        self.assertEqual(sort_tuples(test_data), ['b', 'c', 'd', 'e', 'f', 'g', 'a'])\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "from typing import List\n\ndef sort_by_lambda(lst: List[Tuple]) -> List[Tuple]:\n    return sorted(lst, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    test_list = [(0, 1), (0, 2), (1, 0), (1, 2)]\n    print(sort_by_lambda(test_list))",
    "import random\n\ndef sort(l):\n    return sorted(l, key = lambda tup: tup[1])\n\nrandom.shuffle(sort([(random.random(), random.random()) for _ in range(1000)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (3, 4), (5, 6)]))",
    "def sort_by_lambda(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    test_list = [\n        (\"A\", 1),\n        (\"B\", 2),\n        (\"C\", 3),\n        (\"D\", 4),\n    ]\n    assert sort_by_lambda(test_list) == [\n        (\"D\", 4),\n        (\"C\", 3),\n        (\"B\", 2),\n        (\"A\", 1),\n    ]",
    "from functools import cmp_to_key\n\n\ndef sort_tuples(tuples: list):\n    return sorted(tuples, key=cmp_to_key(lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (2, 1), (3, 4), (4, 3)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    print(sort_tuples(tuples))",
    "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[0])",
    "import random\n\ndef sort(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda t: t[0])\n\ndef main():\n    random_list = [(random.randint(0, 100), random.randint(0, 100)) for _ in range(100)]\n    print(sort(random_list))\n\nif __name__ == \"__main__\":\n    main()",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 1)]))",
    "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0] * x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))",
    "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    print(sort_tuples([('bob', 20), ('alice', 30), ('jane', 40)]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}