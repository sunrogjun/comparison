{
  "problem": {
    "task_id": "MBPP/50",
    "prompt": "Write a function to find the list with minimum length using lambda function.",
    "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
    "test_list": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "challenge_test_list": [],
    "problem_id": 39
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def min_len(lst):\n    return min(map(len, lst))\n\n\nif __name__ == '__main__':\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 19",
    "def min_len(l):\n    return min(map(len, l))\n\n\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def minimum_length(list_of_numbers):\n    return list(filter(lambda x: len(x) > 0, list_of_numbers))\n\n\nif __name__ == \"__main__\":\n    print(minimum_length([1, 2, 3, 4, 5]))\n    print(minimum_length([2, 3, 4, 5, 6]))",
    "def min_length(lst):\n    return min(map(lambda x: len(x), lst))\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(min_length([]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 1",
    "def min_len_list(list_of_int):\n    return min(list_of_int, key=len)\n\n\nif __name__ == \"__main__\":\n    print(min_len_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
    "list_data = [1, 2, 3, 4, 5]\n\nlist_data_min = list(filter(lambda x: len(x) >= 3, list_data))\nprint(list_data_min)",
    "def min_length(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    assert min_length([1, 2, 3, 4]) == 3\n    assert min_length([]) == 0",
    "def min_length(arr):\n    return min(map(lambda x: len(x), arr))",
    "def min_length(lst):\n    return min(lst, key=len)\n\n\nprint(min_length([1, 2, 3, 4, 5]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
    "list_to_find = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 170, 173, 176, 177, 181, 182, 183, 184, 185, 186, 186, 187, 188, 188, 191, 193, 195, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199,",
    "def min_length(arr):\n    return min(map(len, arr))\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5]))",
    "def min_length(lst):\n    return min(map(len,lst))\n\nlst = [1,2,3,4,5,6,7,8,9]\nprint(min_length(lst))",
    "# Solution:\nmin_len = min(map(lambda x: len(x), list_of_numbers))\nprint(min_len)\n\n# Solution:\nmin_len = min(map(lambda x: len(x), list_of_numbers))\nprint(min_len)",
    "def minimum_length(my_list):\n    return min(map(len, my_list))\n\n\nprint(minimum_length([1, 2, 3, 4, 5, 6]))",
    "def minimum_length(lst):\n    return sorted(lst, key=len)\n\n\nprint(minimum_length([3, 4, 5, 6, 7, 8]))",
    "from typing import List\n\n\ndef minimum_length(lst: List[int]) -> int:\n    return min(len(lst), len(set(lst)))\n\n\nif __name__ == '__main__':\n    assert minimum_length([1, 2, 3, 4, 5]) == 2\n    assert minimum_length([]) == 0\n    assert minimum_length([1, 2, 3, 4, 5, 6]) == 4\n    assert minimum_length([1, 2, 3, 4, 5, 6, 7]) == 6\n    assert minimum_length([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n    assert minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6",
    "from typing import List\n\n\ndef find_min_length(lst: List[int]) -> int:\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    test_list: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(f\"list with min length: {find_min_length(test_list)}\")",
    "list_1 = [1, 2, 3, 4, 5, 6, 7]\nmin_len = min(map(lambda x: len(x), list_1))\nprint(min_len)\n\n# Output: 5",
    "def min_length(lst):\n    return min(len(lst), len(set(lst)))\n\n\nprint(min_length([1, 2, 3, 4, 5]))",
    "from typing import List\n\n\ndef find_min_length(l: List[int]) -> int:\n    return min(l, key=len)\n\n\nif __name__ == \"__main__\":\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 4\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 5",
    "def min_list_len(lst):\n    return min(map(len, lst))\n\n\nif __name__ == \"__main__\":\n    print(min_list_len([1, 2, 3, 4]))\n    print(min_list_len([]))\n    print(min_list_len([3, 4, 5, 6, 7]))\n    print(min_list_len([4, 5, 6, 7, 8, 9, 10]))",
    "list1 = [1, 2, 3, 4, 5]\nmin_len = min([len(x) for x in list1])\nprint(f\"Min length is {min_len}\")\n\n\"\"\"\nOutput:\n\nMin length is 4\n\"\"\"",
    "def min_length(lst):\n    return min(map(len, lst))\n\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))",
    "def list_min_length(list_of_numbers):\n    return min(list_of_numbers, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    list_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9])",
    "def minimum_length(list):\n    return min(map(lambda x: len(x), list))\n\n\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7]))\nprint(minimum_length([1, 2, 3, 4, 5]))\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7]))",
    "def minimum_length(arr):\n    return min(map(lambda x: len(x), arr))",
    "list_of_numbers = [10, 20, 30, 40]\n\nmin_length = lambda list_of_numbers: min(len(list_of_numbers), len(set(list_of_numbers)))\n\nprint(min_length(list_of_numbers))",
    "def min_length(arr):\n    return min(map(len, arr))\n\n\ndef test_min_length():\n    assert min_length([1, 2, 3, 4, 5]) == 2\n    assert min_length([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 4\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2",
    "def find_min_length(list):\n    return min(list, key=len)\n\n\nprint(find_min_length([1, 2, 3, 4, 5, 6]))",
    "from typing import List\n\n\ndef min_len_list(lst: List[int]) -> int:\n    return min(lst, key=len)\n\n\nif __name__ == \"__main__\":\n    print(min_len_list([1, 2, 3]))",
    "def minimum_length(arr):\n    return min(map(lambda x: len(x), arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(minimum_length(arr))",
    "def min_len(arr):\n    return min([len(arr)])\n\n\narr = [2, 1, 3, 4, 5]\nprint(min_len(arr))\n\n\ndef min_len(arr):\n    return min(map(lambda x: len(x), arr))\n\n\narr = [2, 1, 3, 4, 5]\nprint(min_len(arr))\n\n\ndef min_len(arr):\n    return min(filter(lambda x: len(x) > 1, arr))\n\n\narr = [2, 1, 3, 4, 5]\nprint(min_len(arr))\n\n\ndef min_len(arr):\n    return min(map(lambda x: len(x) > 1, filter(lambda x: x > 1, arr)))\n\n\narr = [2, 1, 3, 4, 5]\nprint(min_len(arr))\n\n\ndef min_len(arr):\n    return min(map(lambda x: len(x) > 1, filter(lambda x: x == 1, arr)))\n\n\narr = [2, 1, 3, 4, 5]\nprint(min_len(arr))",
    "def min_len(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    print(min_len([1, 2, 3, 4]))\n    print(min_len([1, 2, 3, 4, 5]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "list_1 = [1, 2, 3, 4, 5]\nlist_2 = [1, 2, 3, 4, 5]\n\nprint(min(list_1, list_2))",
    "def min_length(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nprint(min_length([1, 2, 3, 4, 5]))",
    "from functools import reduce\n\n\ndef min_len(nums):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, nums)\n\n\nif __name__ == '__main__':\n    print(min_len([1, 2, 3, 4, 5]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def find_min_len(list):\n    return min(map(lambda x: len(x), list))\n\n\nif __name__ == \"__main__\":\n    print(find_min_len([1, 2, 3, 4, 5]))",
    "def find_min_length(list_of_numbers):\n    return list(filter(lambda x: len(x)>=1, list_of_numbers))\n\ndef main():\n    print(find_min_length([1,2,3,4,5,6,7]))\n\nif __name__ == \"__main__\":\n    main()",
    "list_of_numbers = [3, 5, 6, 9, 6, 7, 8, 9, 9, 8, 6, 7, 6, 9, 9, 8, 9, 6, 7, 6, 9, 9, 8, 9, 6, 7, 6, 7, 9, 9, 6, 7, 8, 9, 9, 6, 7, 6, 6, 9, 9, 7, 8, 9, 6, 7, 8, 8, 8, 9, 8, 9, 9, 8, 6, 7, 6, 6, 7, 6, 6, 8, 9, 9, 6, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,",
    "def minimum_length(nums):\n    return min(nums, key=len)\n\n\nif __name__ == \"__main__\":\n    assert minimum_length([1, 2, 3]) == 1\n    assert minimum_length([1, 2, 3, 4]) == 2\n    assert minimum_length([1, 2, 3, 4, 5]) == 3\n    assert minimum_length([]) == 0",
    "def minimum_length(list_of_numbers):\n    return min(list_of_numbers)\n\n\nif __name__ == \"__main__\":\n    print(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def list_min_len(lst):\n    return min(map(len, lst))\n\nprint(list_min_len([1, 2, 3, 4, 5, 6, 7, 8]))",
    "import numpy as np\n\n\ndef min_len(list):\n    return min(list, key=len)\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(min_len(list))",
    "def min_length(l):\n    return min(map(lambda x: len(x), l))\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(min_length(l))",
    "def minimum_length(my_list):\n    return min(map(len, my_list))\n\n\nif __name__ == \"__main__\":\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(minimum_length(my_list))",
    "def find_min_len(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nprint(find_min_len([1, 2, 3, 4, 5, 6]))",
    "list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmin_len = min([len(str(i)) for i in list_1])\n\nprint(min_len)\n\n\ndef minimum_len(list_1):\n    min_len = min([len(str(i)) for i in list_1])\n    return min_len\n\n\nprint(minimum_len(list_1))",
    "def min_len_lambda(l):\n    return min(l, key=len)\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(min_len_lambda(l))",
    "def min_length(list_):\n    return min(list_, key=len)\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5]\n    print(list_)\n    print(min_length(list_))\n\n\nif __name__ == '__main__':\n    main()",
    "def min_list_length(list):\n    return min([len(list)])\n\n\nif __name__ == '__main__':\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_list_length(test_list))",
    "def minimum_length(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == '__main__':\n    print(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def find_min_len(lst):\n    return min(lst, key=len)\n\n\nprint(find_min_len([1, 2, 3, 4, 5, 6]))\nprint(find_min_len([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def find_min_length(list_of_numbers):\n    return min(list_of_numbers, key=len)\n\n\nprint(find_min_length([1, 2, 3, 4, 5, 6]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def min_len(arr):\n    return min(len(arr), len(set(arr)))\n\n\nprint(min_len([1, 2, 3, 4, 5, 6, 7]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "def min_length(list):\n    return min(map(len, list))\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(min_length(list))",
    "def min_len(arr):\n    return min(map(lambda x: len(x), arr))\n\n\narr = [1, 2, 3, 4, 5]\nprint(min_len(arr))",
    "def min_length(list_of_numbers):\n    return min(list_of_numbers, key=len)\n\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))\nprint(min_length([1, 2, 3, 4, 5, 6]))\nprint(min_length([]))",
    "def min_list_len(list):\n    return min(map(len, list))\n\n\nlist = [\"apple\", \"banana\", \"cherry\"]\nprint(min_list_len(list))",
    "list_of_numbers = [1,2,3,4,5,6,7,8,9]\n\nminimum_length_list = list(map(lambda x: len(x), list_of_numbers))\n\nprint(minimum_length_list)",
    "def min_len(list):\n    return min(map(len, list))\n\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_len(list))",
    "def min_length(list_of_numbers):\n    return min(list_of_numbers, key=len)\n\n\ndef min_length_with_lambda(list_of_numbers):\n    return min(list_of_numbers, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(min_length(list_of_numbers))\n    print(min_length_with_lambda(list_of_numbers))",
    "def min_length(l):\n    return min(map(len, l))\n\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def min_length(list_):\n    return min(list_, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5]))",
    "def min_length(list_of_numbers):\n    return list(filter(lambda x: len(x) > 0, list_of_numbers))\n\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
    "def min_length(l):\n    return min(map(lambda x: len(x), l))\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_length(l))",
    "def min_length(l):\n    return min(l, key=len)\n\n\nif __name__ == \"__main__\":\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6",
    "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(min(list_of_numbers))",
    "def minimum_length(list_of_numbers):\n    return list(filter(lambda number: len(number) >= 1, list_of_numbers))\n\nif __name__ == \"__main__\":\n    assert minimum_length([1,2,3,4]) == [1,2,3]\n    assert minimum_length([1,2,3,4,5]) == [1,2,3,4,5]\n    assert minimum_length([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n    assert minimum_length([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
    "def min_len(lst):\n    return min(map(len, lst))\n\n\nprint(min_len([1, 2, 3, 4, 5, 6, 7]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def find_min_length(list_):\n    return min(list_, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_min_length(list_))",
    "def min_length(arr):\n    return min(map(len, arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_length(arr))",
    "def minimum_length(lst):\n    return min(map(len, lst))\n\n\nprint(minimum_length([1, 2, 3, 4, 5]))",
    "def find_min_length(arr):\n    return min(map(lambda x: len(x), arr))\n\n\nprint(find_min_length([1, 2, 3, 4, 5]))\nprint(find_min_length([4, 5, 6, 7, 8]))\nprint(find_min_length([]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))",
    "def min_len(arr):\n    return min(map(lambda x: len(x), arr))\n\n\nif __name__ == \"__main__\":\n    print(min_len([1, 2, 3, 4, 5]))\n    print(min_len([4, 5, 6, 7]))",
    "def find_min_length(nums):\n    return min(map(len, nums))\n\n\nif __name__ == '__main__':\n    print(find_min_length([1, 2, 3, 4, 5, 6, 7]))\n    print(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def min_length(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_length(lst))",
    "list1 = [1,2,3,4,5]\nprint(list1)\nmin_len = min(list1, key=len)\nprint(min_len)",
    "list = [1,2,3,4,5,6,7,8,9]\nmin_length = min(list, key = len)\nprint(min_length)",
    "def min_len(lst):\n    return min(map(len, lst))",
    "def min_len(list_):\n    return min(list_, key=lambda x: len(x))\n\n\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def min_length(list_of_numbers):\n    return list(filter(lambda x: len(x)>0, list_of_numbers))\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "# Solution 1\n\nfrom functools import reduce\n\n\ndef find_min_length(lst):\n    return reduce(lambda x, y: min(x, y), lst)\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_min_length(lst))\n\n# Solution 2\n\nfrom functools import reduce\n\n\ndef find_min_length(lst):\n    return min(map(len, lst))\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_min_length(lst))",
    "def min_len_list(list_):\n    return min(list_, key=len)\n\n\nprint(min_len_list([1, 2, 3, 4, 5, 6]))\nprint(min_len_list([]))",
    "list_of_numbers = [1, 2, 3, 4, 5, 6]\nmin_length = lambda x: len(x)\n\nprint(min_length(list_of_numbers))",
    "# O(n) time | O(n) space\ndef min_list_length(l):\n    return min(map(len, l))\n\n# Test\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_list_length(l))",
    "def min_length(lst):\n    return min([len(lst)] + [len(item) for item in lst])\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5]))\n    print(min_length([1, 2, 3, 4, 5, 6]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "from typing import List\n\n\ndef min_len(list: List) -> List:\n    return [len(x) for x in list if len(x) >= 1]\n\n\nif __name__ == \"__main__\":\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(min_len([]))",
    "list_to_find = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nminimum_length = min(list_to_find)\n\nprint(minimum_length)",
    "def find_min(list):\n    return min(list, key=len)\n\n\nprint(find_min([1, 2, 3, 4, 5]))",
    "def min_length(list):\n    return min(list, key=len)\n\n\nprint(min_length([1, 2, 3, 4, 5]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def find_min_length(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == '__main__':\n    print(find_min_length([1, 2, 3, 4, 5]))",
    "def min_length(l):\n    return min(l, key=len)",
    "list = [1, 2, 3, 4, 5]\n\nprint(min(list))",
    "def min_len_func(l):\n    return min(map(len, l))\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6]\n    print(min_len_func(l))\n\n\nif __name__ == '__main__':\n    main()",
    "def min_len(lst):\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(min_len(lst))",
    "def find_min_len_list(list_of_numbers):\n    return list(filter(lambda x: len(x) > len(list_of_numbers), list_of_numbers))\n\n\nif __name__ == '__main__':\n    print(find_min_len_list([1, 2, 3, 4, 5]))\n    print(find_min_len_list([]))\n    print(find_min_len_list([1, 2, 3, 4, 5, 6]))\n    print(find_min_len_list([1, 2, 3, 4, 5, 6, 7]))",
    "def min_len(list):\n    return min(map(len, list))",
    "def minimum_length(list_of_numbers):\n    return min(list_of_numbers, key=len)\n\n\nif __name__ == \"__main__\":\n    print(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def minimum_length(l):\n    return min(map(len, l))",
    "def min_length(list_of_numbers):\n    return min(list_of_numbers, key=len)\n\n\nprint(min_length([1, 2, 3, 4, 5]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}