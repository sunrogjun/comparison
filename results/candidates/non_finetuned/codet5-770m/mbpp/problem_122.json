{
  "problem": {
    "task_id": "MBPP/133",
    "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
    "test_list": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ],
    "challenge_test_list": [],
    "problem_id": 122
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sum_negative(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nif __name__ == '__main__':\n    assert sum_negative([-3, -5, -3, -4, -3, -2, -3, -2, -1]) == 6",
    "list_of_numbers = [4, -1, 2, -3]\n\nprint(list_of_numbers)\nprint(sum(list_of_numbers))",
    "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-2, -4, -6, -8]))",
    "nums = [9, -3, -4, -5, -1, -2, -5]\n\n# define the sum of negative numbers\nsum_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\n# call the sum of negative numbers\nprint(sum_negative(nums))",
    "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, 3, -5, -7, -4, -10]))",
    "import unittest\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nclass Test(unittest.TestCase):\n    def test_negative_sum(self):\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3]), 6)\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3, 4]), 6)\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3, 4, 5, 6]), 6)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def sum_of_negatives(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(sum_of_negatives([-3, 4, -1, -2, 1, 2]))",
    "sum_negative = lambda x: sum([i for i in x if i < 0])\n\nprint(sum_negative([-3, -5, -7, -9, -11]))",
    "def negative_sum(num):\n    return sum(map(lambda x: -x, num))",
    "list = [-1, -2, -3, -4, -5]\nsum = lambda x: x if x >= 0 else 0\nprint(sum(list))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-3, -2, -1, -4, -5, -6, -7]))",
    "sum_negative = lambda num: sum(filter(lambda x: x < 0, num))\n\nprint(sum_negative([-1, 2, -3, -4, 5]))",
    "list_of_numbers = [3, -5, 10, -2, 0, -2]\n\nprint(list_of_numbers)\n\nsum_of_negative_numbers = list(map(lambda x: x if x < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nnumbers = [1, -2, 3, 4, 5, -6]\nprint(negative_sum(numbers))",
    "def negative_sum(list_):\n    return sum(filter(lambda x: x < 0, list_))\n\n\nlist_ = [3, -5, 4, -6]\nprint(negative_sum(list_))",
    "def negative_sum(list_num):\n    return sum(filter(lambda x: x < 0, list_num))\n\n\nlist_num = [1, -2, 3, 4, -5, 6]\nprint(negative_sum(list_num))",
    "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([-1, -2, -3, -4]))",
    "from functools import reduce\n\n\ndef negative_sum(nums):\n    return reduce(lambda x, y: x + y, nums, 0)\n\n\nif __name__ == '__main__':\n    assert negative_sum([-1, 2, 3]) == 4\n    assert negative_sum([0, -1, 2, 3]) == 4\n    assert negative_sum([2, -3, 0, -1, -2, -4]) == -6",
    "numbers = [1, -2, 3, 4, 5]\n\nsum_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\nprint(sum_negative(numbers))\n\n\n# O(n) time | O(n) space",
    "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\ndef main():\n    print(negative_sum([-1, -2, -3, -4, -5]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, 4, 2, -2, 7, -4]))",
    "list_of_numbers = [2, -3, 4, -5, -6, -7]\n\nsum = sum(map(lambda x: x if x < 0 else 0, list_of_numbers))\n\nprint(sum)",
    "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([-1, -4, 3, 2, -8, 10]))",
    "list_of_negative_numbers = [1, -2, 3, 4, 5]\n\nsum_negative_numbers = list(map(lambda x: x if x < 0 else 0, list_of_negative_numbers))\n\nprint(sum_negative_numbers)",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-3, 4, -1, 2, -5, 1]))",
    "nums = [-1, -2, -3, -4, -5, -6]\n\nprint(sum(map(lambda x: x * -1, nums)))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-2, -3, 4, -5, 6, -7]))",
    "# Using lambda function\n\nsum_negative = lambda nums: sum(filter(lambda x: x < 0, nums))\n\n\n# Using lambda function\n\nsum_negative_list = list(filter(lambda x: x < 0, [1, 2, 3, -4, 5, 6, 7, 8, 9]))\n\nprint(sum_negative_list)",
    "def negative_sum(numbers):\n    return sum([n for n in numbers if n < 0])\n\nnumbers = [1, -3, 4, 5]\nprint(negative_sum(numbers))",
    "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\ndef test_negative_sum():\n    assert negative_sum([-2, 0, -3, -4]) == 12",
    "def negative_sum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))\n\n\nprint(negative_sum([-1, 2, -4, -8, 9, 3, -2, -5]))\nprint(negative_sum([-1, 2, -4, -8, 9, 3, -2, -5, -6, -7]))",
    "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-1, 0, 3, 4, 2]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\nprint(negative_sum([1, -1, 2, -2, -3, -3]))",
    "def negative_sum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, 2, -3]))",
    "list = [1, -2, -3]\n\ndef negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\nprint(negative_sum(list))",
    "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-1, 2, -3, 4, -5]))",
    "def sum_negative_numbers(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_negative_numbers([-1, -2, -3, -4, -5]))",
    "def sum_neg(a):\n    return sum(filter(lambda x: x<0, a))\n\na = [1, -2, 3, -4]\nprint(sum_neg(a))\n\n\"\"\"\nTime Complexity : O(n)\nSpace Complexity : O(1)\n\"\"\"",
    "def negative_sum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nprint(negative_sum([4, -2, 3, -5, -7]))\nprint(negative_sum([-2, -5, -7, -9]))",
    "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nprint(negative_sum([-3, -2, 1, 0, 5]))",
    "def sum_neg(l):\n    return sum(filter(lambda x: x < 0, l))\n\n\ndef test():\n    assert sum_neg([-1, 4, -5, 2, 3]) == 6\n    assert sum_neg([-1, -1, -1, -1, -1]) == 5\n\n\ntest()",
    "import numpy as np\n\n\ndef negative_sum(numbers):\n    return np.sum(list(filter(lambda x: x < 0, numbers)))\n\n\ndef main():\n    print(negative_sum([-1, 2, 3, -5, -4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "list_of_numbers = [1, 2, -3, -4, 5, 6, -7, -8, -9, -10]\n\n\ndef negative_sum(list_of_numbers):\n    return sum(list(filter(lambda x: x < 0, list_of_numbers)))\n\n\nprint(negative_sum(list_of_numbers))",
    "# def negative_sum(nums):\n#     return sum(filter(lambda x: x < 0, nums))\n\n\ndef negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n\ndef negative_sum(arr):\n    return sum(map(lambda x: x if x < 0 else 0, arr))\n\n\ndef main():\n    arr = [5, -3, -4, -7, -8]\n    print(negative_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def negative_sum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nprint(negative_sum([-2, -3, -4, -5, -6]))",
    "def negative_sum(lst):\n    return sum([num for num in lst if num < 0])\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, lst))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))",
    "# def negative_sum(numbers):\n#     return sum(filter(lambda x: x < 0, numbers))\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-10, -1, 5, 0, 3, 2, -3, -5, -6]))",
    "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nassert negative_sum([-1, -2, -3, -4]) == 5\nassert negative_sum([-1, -2, -3, -4, -5]) == 10",
    "numbers = list(map(lambda x: -x, input().split()))\nprint(sum(numbers))",
    "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n# Testing\ntest_list = [-1, 2, -3, 4, -5, 6, -7, 8, 9]\nprint(negative_sum(test_list))",
    "# solution 1\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\n# solution 2\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))",
    "sum_neg = lambda x: -x\nprint(sum_neg(5))\nprint(sum_neg(10))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))",
    "# A list of negative numbers\nnumbers = [3, -2, 4, -5]\n\n# Calling lambda function\nsum_of_negative_numbers = lambda x: x if x < 0 else 0\n\n# Calling sum_of_negative_numbers function\nsum_of_negative_numbers_sum = sum(map(lambda x: sum_of_negative_numbers(x), numbers))\n\n# Printing sum of negative numbers\nprint(f\"Sum of negative numbers is {sum_of_negative_numbers_sum}\")",
    "numbers = [0, -2, -3, -4, -5]\n\nprint(f\"Sum of negative numbers in the given list is {sum(map(lambda x: x if x < 0 else 0, numbers))}\")",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "list_of_numbers = [-1, -2, -3, -4, -5]\n\nsum_of_negative_numbers = list(map(lambda num: num if num < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)\n\n# Output: [-1, -2, -3, -4, -5]",
    "numbers = [4, -2, 3, -1]\n\nsum = lambda x: x + sum(filter(lambda y: y < 0, x))\n\nprint(sum(numbers))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]))",
    "numbers = [1, -2, -3, 4, -5]\nprint(sum(filter(lambda x: x < 0, numbers)))",
    "list_of_numbers = [3, -2, -3, -5, -4, -6, -7, -8]\n\nprint(\"The sum of the negative numbers is {}\".format(sum(filter(lambda x: x < 0, list_of_numbers))))",
    "def sum_negative(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(sum_negative([-4, -3, -2, -1]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "def negative_sum(numbers):\n    return sum(map(lambda x: -x, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([3, 4, -3, -4]))",
    "def negative_sum(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nif __name__ == \"__main__\":\n    assert negative_sum([-1, -2, -3, -4, -5]) == 0, \"0\"",
    "def negative_sum(list_num):\n    return sum(filter(lambda x: x < 0, list_num))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-3, 4, -7, -5, -2, -8, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-3, -2, -1, 0, 4, 5]))",
    "list = [4, -5, -1, -2, -3, -4, -6, -7, -8, -9]\n\nsum = lambda x: x + sum(filter(lambda y: y < 0, x))\n\nprint(sum(list))",
    "def negative_sum(list_num):\n    return sum(filter(lambda num: num < 0, list_num))\n\n\nprint(negative_sum([-4, -5, -2, -3, -6, -7]))",
    "def negative_sum(nums):\n    return sum(map(lambda x: -x, nums))\n\n\nprint(negative_sum([4, -5, 6, -7]))",
    "sum_negative = lambda nums: sum(filter(lambda x: x < 0, nums))\n\nprint(sum_negative([-1, 0, 1, 2, -3]))",
    "# add negative numbers\nsum = lambda numbers: sum(map(lambda x: -x, numbers))\n\n# run the function\nprint(sum([1,2,-3]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-2, -5, -3, -4, -1]))",
    "# solution\n\nsum = lambda x: sum([num for num in x if num < 0])\n\nprint(sum([1, 2, -3, 4]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-10, -3, -7, -2, -9]))",
    "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-5, -2, -1, -4, -3]))",
    "def sum_negatives(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == \"__main__\":\n    print(sum_negatives([-1, -2, -3, -4]))",
    "list_of_numbers = [-2, -3, -4, -5]\n\nsum_of_negative_numbers = list(map(lambda num: num if num < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)",
    "def sum_of_negative_numbers(list_of_numbers):\n    return list(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_of_negative_numbers([-1, -2, -3, -4, -5, -6]))",
    "def sum_negative(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(sum_negative([0, -1, -2, -3, -4, -5]))",
    "# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n\n# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n\ndef sum_negative_numbers(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_negative_numbers([-1, 1, 2, 3, 4]))",
    "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-2, -3, -4, -5]))",
    "from math import sqrt\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nif __name__ == \"__main__\":\n    assert negative_sum([-2, -3, -4]) == 4\n    assert negative_sum([-1, 0, -2, -3, -4]) == 9\n    assert negative_sum([-1, 0, -2, -3, -4, -5]) == 6\n    assert negative_sum([-1, 0, -2, -3, -4, -5, -6]) == -9\n    assert negative_sum([-1, 0, -2, -3, -4, -5, -6, -7, -8, -9]) == -10",
    "def negative_sum(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4]))",
    "def sum_neg(nums):\n    return sum(map(lambda x: -x, nums))\n\nprint(sum_neg([-5, -1, -3, 0, -3, -10]))",
    "from functools import reduce\n\nnumbers = [1, -3, 5, -7, 4]\nsum = reduce(lambda x, y: x + y, numbers, 0)\nprint(sum)",
    "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\n\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 6\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 6\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0",
    "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nprint(negative_sum([-4, -1, 0, 2, 5, -3]))\nprint(negative_sum([-4, -1, 0, 2, 5, -3, -2, -1]))\nprint(negative_sum([-4, -1, 0, 2, 5, -3, -2, -1, -3]))",
    "# Solution:\nsum = lambda x: x if x > 0 else 0\nprint(sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]))",
    "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-5, -2, -3, -4, -7]))",
    "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nif __name__ == '__main__':\n    nums = [1, -1, 3, -2, 4, -5]\n    print(negative_sum(nums))",
    "numbers = [10, -4, 5, 3, -2, -1, 8, 7]\n\nsum_of_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\nprint(sum_of_negative(numbers))",
    "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-3, 4, -2, 1, -5, 2]))",
    "from functools import reduce\n\n\ndef negative_sum(numbers):\n    return reduce(lambda x, y: x + y, numbers, 0)\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, -3, -4, -5, -7]))",
    "numbers = [2, -3, -4, -5, -6, -7]\n\nsum_neg_numbers = lambda x: x if x >= 0 else 0\n\nprint(sum_neg_numbers(numbers))",
    "# Solution:\n\ndef negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, 2, -3, 4, -5]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9, -10]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))",
    "numbers = [1, -2, -3, 4, 5]\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum(numbers))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}