{
  "problem": {
    "task_id": "MBPP/124",
    "prompt": "Write a function to get the angle of a complex number.",
    "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
    "test_list": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ],
    "challenge_test_list": [],
    "problem_id": 113
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return f'{self.real}+{self.imag}i'\n\n    def __add__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real + other.real, self.imag + other.imag)\n\n        return NotImplemented\n\n    def __sub__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real - other.real, self.imag - other.imag)\n\n        return NotImplemented\n\n    def __mul__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real * other.real - self.imag * other.imag, self.real * other.imag + self.imag * other.real)\n\n        return NotImplemented\n\n    def __truediv__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real / other.real, self.imag / other.imag)\n\n        return NotImplemented\n\n    def __mod__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real % other.real, self.imag % other.imag)\n\n        return NotImplemented\n\n    def __pow__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real ** other.real, self.imag ** other.imag)\n\n        return NotImplemented\n\n    def __eq__(self, other):\n        if isinstance(other, Complex):\n            return self.real == other.real and self.imag == other.imag\n\n        return NotImplemented\n\n    def __ne__(self, other):\n        if isinstance(other, Complex):\n            return self.real!= other.real or self.imag!= other.imag\n\n        return NotImplemented\n\n    def __gt__(self, other):\n        if isinstance(other, Complex):\n            return self.real > other.real or self.imag > other.imag\n\n        return NotImplemented\n\n    def __ge__(self, other):\n        if isinstance(other, Complex",
    "import math\n\n\ndef get_angle(complex_number):\n    \"\"\"\n    :type complex_number: complex\n    :rtype: float\n    \"\"\"\n    return math.atan2(complex_number.imag, complex_number.real)\n\n\nif __name__ == '__main__':\n    print(get_angle(complex(1, 2)))",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n    \n    def get_angle(self):\n        return (self.real * self.imag) / 2\n\nc = Complex(3, 5)\nprint(c.get_angle())",
    "import math\n\nclass Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n    def angle(self):\n        return math.atan2(self.imag, self.real)\n\nc1 = Complex(2,-3)\nprint(c1.angle())",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n    def __repr__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n    def angle(self):\n        return (self.real * self.imaginary).real / 2\n\n\nif __name__ == \"__main__\":\n    c1 = Complex(3, -4)\n    c2 = Complex(3, 4)\n    c3 = Complex(3, -2)\n    print(c1)\n    print(c2)\n    print(c3)\n    print(c1.angle())\n    print(c2.angle())\n    print(c3.angle())\n    print(c1.angle() + c2.angle() + c3.angle())",
    "import math\n\ndef get_angle(c):\n    return math.degrees(math.atan2(c.imag, c.real))\n\nif __name__ == \"__main__\":\n    c = complex(1, 1)\n    print(get_angle(c))",
    "import math\n\n\ndef angle(r, theta):\n    return math.acos(math.sqrt(r**2 + theta**2))\n\n\ndef main():\n    r = complex(int(input()), int(input()))\n    theta = float(input())\n    print(angle(r, theta))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_angle(c):\n    return (c.real**2 + c.imag**2) / 2\n\n\ndef test_get_angle():\n    assert get_angle(complex(0, 0)) == 0\n    assert get_angle(complex(1, 0)) == 90\n    assert get_angle(complex(-1, 0)) == 180\n    assert get_angle(complex(0, 1)) == 90\n    assert get_angle(complex(0, -1)) == 180\n    assert get_angle(complex(-1, 1)) == 90\n    assert get_angle(complex(-1, -1)) == 180",
    "import math\n\nclass Complex(object):\n\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return math.atan2(self.imag, self.real)\n\n    def __repr__(self):\n        return \"Complex({0}, {1})\".format(self.real, self.imag)\n\nif __name__ == \"__main__\":\n    c = Complex(1, 2)\n    print(c)\n    print(c.angle())",
    "def angle(c):\n    return round(c.real * c.real + c.imag * c.imag, 2)\n\n\nc = complex(3, -4)\nprint(angle(c))",
    "def angle(complex_num):\n    return complex_num.real * complex_num.real + complex_num.imag * complex_num.imag\n\n\ndef main():\n    complex_num = complex(3, -2)\n    print(angle(complex_num))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imag * other.imag,\n                      self.real * other.imag + self.imag * other.real)\n\n    def __div__(self, other):\n        return Complex(self.real / other.real, self.imag / other.imag)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imag / other.imag)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imag % other.imag)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other.real, self.imag ** other.imag)\n\n    def __abs__(self):\n        return Complex(abs(self.real), abs(self.imag))\n\n    def __repr__(self):\n        return f'Complex({self.real}, {self.imag})'\n\n\ndef angle(complex_num):\n    return complex_num.__add__(Complex(1, 1))\n\n\nif __name__ == \"__main__\":\n    c1 = Complex(1, 1)\n    c2 = Complex(2, 3)\n    c3 = Complex(4, 5)\n    c4 = Complex(6, 7)\n    c5 = Complex(8, 9)\n    c6 = Complex(10, 11)\n    c7 = Complex(12, 13)\n    c8 = Complex(14, 15)\n\n    print(f'angle of {c1} + {c2} = {angle(c1 + c2)}')\n    print(f'angle of {c1} - {c2} = {",
    "import math\n\ndef angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\n# Tests\nc = complex(0, 0)\nprint(angle(c))\n\nc = complex(2, 3)\nprint(angle(c))\n\nc = complex(1, 1)\nprint(angle(c))\n\nc = complex(1, -1)\nprint(angle(c))",
    "def get_angle(c):\n    \"\"\"\n    :type c: complex\n    :rtype: float\n    \"\"\"\n    return (c.real * c.real + c.imag * c.imag) / 2\n\n\nif __name__ == '__main__':\n    c = complex(1, 2)\n    print(get_angle(c))",
    "from math import radians, cos, sin, degrees\n\ndef get_angle(num):\n    \"\"\"\n    :type num: complex\n    :rtype: float\n    \"\"\"\n    angle = degrees(radians(num.real))\n    return angle",
    "def angle_complex(c1, c2):\n    return abs(c1.real - c2.real) + abs(c1.imag - c2.imag)\n\n\nprint(angle_complex(1 + 0j, 1 + 0j))\nprint(angle_complex(1 + 0j, 1 + 0j))\nprint(angle_complex(1 + 0j, 1 + 0j))",
    "def angle(c):\n    return (c.real * c.real + c.imag * c.imag) / 2.0\n\n\ndef main():\n    c1 = complex(0, 0)\n    print(angle(c1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def angle(complex_num):\n    return math.degrees(math.atan2(complex_num.real, complex_num.imag))",
    "import math\n\ndef get_angle(c):\n    return math.acos(c.imag/c.real)\n\ndef main():\n    c = complex(3, 4)\n    print(get_angle(c))\n\nif __name__ == \"__main__\":\n    main()",
    "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __add__(self, other):\n        return ComplexNumber(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return ComplexNumber(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return ComplexNumber(self.real * other.real - self.imag * other.imag,\n                            self.real * other.imag + self.imag * other.real)\n\n    def __truediv__(self, other):\n        return ComplexNumber(self.real / other.real, self.imag / other.imag)\n\n    def __mod__(self, other):\n        return ComplexNumber(self.real % other.real, self.imag % other.imag)\n\n    def __pow__(self, other):\n        return ComplexNumber(self.real ** other, self.imag ** other)\n\n    def __abs__(self):\n        return ComplexNumber(abs(self.real), abs(self.imag))\n\n    def __str__(self):\n        return f\"ComplexNumber({self.real}, {self.imag})\"\n\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(3, 2)\n    c2 = ComplexNumber(4, -1)\n    c3 = ComplexNumber(-3, 2)\n\n    print(f'angle of {c1} + {c2} = {c1.angle(c2)}')\n    print(f'angle of {c1} - {c2} = {c1.angle(c2)}')\n    print(f'angle of {c1} * {c2} = {c1.angle(c2)}')\n    print(f'angle of {c1} / {c2} = {c1.angle(c2)}')\n    print(f'angle of {c1} ** {c2} = {c1.angle(c2)}')\n    print(f'angle",
    "import math\n\ndef complex_angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\n\ndef main():\n    c = complex(2, 1)\n    print(complex_angle(c))\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\n\nclass Complex:\n\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n    def angle(self):\n        return math.acos(self.imaginary / self.real)\n\n\nif __name__ == \"__main__\":\n    c = Complex(3, -4)\n    print(c)\n    print(c.angle())",
    "def angle_complex(c):\n    return c.real * c.real + c.imag * c.imag\n\n\nif __name__ == \"__main__\":\n    c = complex(1, 2)\n    print(angle_complex(c))",
    "def complex_angle(a, b):\n    return (a.real*b.real - a.imag*b.imag) / (2*a.real*b.real)\n\n\na = complex(1, 2)\nb = complex(3, 4)\nprint(complex_angle(a, b))",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return (self.real * self.real + self.imag * self.imag) / 2\n\n\nif __name__ == \"__main__\":\n    c = Complex(3, -4)\n    print(c.angle())",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return self.real * self.imag / 2.0\n\nif __name__ == \"__main__\":\n    c1 = Complex(3, 4)\n    c2 = Complex(4, 5)\n    print(c1.angle())\n    print(c2.angle())",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def get_angle(self):\n        return abs(self.imag / self.real)\n\n\nclass Solution:\n    def get_angle(self, complex_num):\n        return round(Complex(complex_num.real, complex_num.imag).get_angle(), 2)\n\n\nif __name__ == \"__main__\":\n    complex_num = Complex(1, 0)\n    solution = Solution()\n    print(solution.get_angle(complex_num))",
    "import math\n\ndef angle(c):\n    return math.degrees(math.atan(c.real/c.imag))\n\nc1 = complex(2, 3)\nc2 = complex(4, 5)\n\nprint(angle(c1))\nprint(angle(c2))",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return f'Complex({self.real}, {self.imag})'\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imag * other.imag, self.real * other.imag + self.imag * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imag / other.imag)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imag % other.imag)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other, self.imag ** other)\n\n    def __abs__(self):\n        return Complex(abs(self.real), abs(self.imag))\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imag)\n\n    def __eq__(self, other):\n        return self.real == other.real and self.imag == other.imag\n\n    def __ne__(self, other):\n        return self.real!= other.real or self.imag!= other.imag\n\n    def __gt__(self, other):\n        return self.real > other.real or self.imag > other.imag\n\n    def __ge__(self, other):\n        return self.real >= other.real or self.imag >= other.imag\n\n    def __lt__(self, other):\n        return self.real < other.real or self.imag < other.imag\n\n    def __le__(self, other):\n        return self.real <= other.real or self.imag <= other.imag\n\n\nif __name__ == '__main",
    "import math\n\n\ndef get_angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\n\nif __name__ == '__main__':\n    c = complex(1, 2)\n    print(get_angle(c))",
    "def angle(complex_num):\n    return complex_num.real * complex_num.real + complex_num.imag * complex_num.imag\n\n\nprint(angle(complex(1, 2)))",
    "def angle(c):\n    return (c.real*c.real + c.imag*c.imag)/2.0\n\nprint(angle(complex(1,0)))\nprint(angle(complex(2,1)))\nprint(angle(complex(1,-2)))\nprint(angle(complex(-2,-1)))\nprint(angle(complex(0,1)))\nprint(angle(complex(0,-1)))\nprint(angle(complex(0,0)))",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imag * other.imag,\n                      self.real * other.imag + self.imag * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imag / other.imag)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imag % other.imag)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other.real, self.imag ** other.imag)\n\n    def __eq__(self, other):\n        return self.real == other.real and self.imag == other.imag\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __lt__(self, other):\n        return self.real < other.real\n\n    def __gt__(self, other):\n        return self.real > other.real\n\n    def __le__(self, other):\n        return self.real <= other.real\n\n    def __ge__(self, other):\n        return self.real >= other.real\n\n    def __str__(self):\n        return '({}, {})'.format(self.real, self.imag)\n\n    def __repr__(self):\n        return '({}, {})'.format(self.real, self.imag)\n\n    def __hash__(self):\n        return hash((self.real, self.imag))\n\n\nif __name__ == '__main__':\n    complex1 = Complex(3, 4)\n    complex2 = Complex(0, 4)\n    print(complex",
    "from math import radians, cos, sin, asin\n\ndef angle(a):\n    return radians(asin(cos(a.real/2) * cos(a.imag/2) + sin(a.real/2) * sin(a.imag/2)))\n\nif __name__ == '__main__':\n    a = complex(0, 0)\n    print(angle(a))",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return f'{self.real} + j {self.imaginary}'\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                      self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imaginary % other.imaginary)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other.real, self.imaginary ** other.imaginary)\n\n    def __floordiv__(self, other):\n        return Complex(self.real // other.real, self.imaginary // other.imaginary)\n\n    def __eq__(self, other):\n        return self.real == other.real and self.imaginary == other.imaginary\n\n    def __ne__(self, other):\n        return self.real!= other.real or self.imaginary!= other.imaginary\n\n    def __gt__(self, other):\n        return self.real > other.real or self.imaginary > other.imaginary\n\n    def __ge__(self, other):\n        return self.real >= other.real or self.imaginary >= other.imaginary\n\n    def __lt__(self, other):\n        return self.real < other.real or self.imaginary < other.imaginary\n\n    def __le__(self, other):\n        return self.real <= other.",
    "import math\n\nclass Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary, self.real * other.imaginary + self.imaginary * other.real)\n\n    def __div__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imaginary % other.imaginary)\n\n    def __str__(self):\n        return str(self.real) + \"+\" + str(self.imaginary) + \"i\"\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imaginary)\n\n    def __pos__(self):\n        return Complex(self.real, self.imaginary)\n\n    def __eq__(self, other):\n        return self.real == other.real and self.imaginary == other.imaginary\n\n    def __ne__(self, other):\n        return self.real!= other.real or self.imaginary!= other.imaginary\n\n    def __gt__(self, other):\n        return self.real > other.real or self.imaginary > other.imaginary\n\n    def __ge__(self, other):\n        return self.real >= other.real or self.imaginary >= other.imaginary\n\n    def __lt__(self, other):\n        return self.real < other.real or self.imaginary < other.imaginary\n\n    def __le__(self, other):\n        return self.real <= other.real or self.imaginary <= other.imaginary\n\n    def angle(",
    "import math\n\ndef angle(c):\n    return math.degrees(math.atan2(c.imag, c.real))\n\n\nprint(angle(complex(1, 2)))\nprint(angle(complex(0, -1)))",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        return \"Complex({}, {})\".format(self.real, self.imaginary)\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary, self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imaginary % other.imaginary)\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imaginary)\n\n    def __pow__(self, power):\n        return Complex(self.real ** power, self.imaginary ** power)\n\n    def __abs__(self):\n        return Complex(abs(self.real), abs(self.imaginary))\n\n    def angle(self):\n        return 0.5 * (self.real + self.imaginary)",
    "from math import radians\n\ndef get_angle(complex_num):\n    return radians(complex_num.real*complex_num.real + complex_num.imag*complex_num.imag)\n\nprint(get_angle(complex(1,2)))",
    "class Complex(object):\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def get_angle(self):\n        return abs(self.imag) / abs(self.real)\n\n\nif __name__ == '__main__':\n    c = Complex(3, -4)\n    print(c.get_angle())",
    "from math import sqrt\n\n\ndef complex_angle(c: complex) -> float:\n    return atan2(c.real, c.imag)\n\n\ndef test_complex_angle():\n    c = complex(1, -1)\n    assert complex_angle(c) == 90\n\n    c = complex(1, 1)\n    assert complex_angle(c) == 0\n\n    c = complex(1, 0)\n    assert complex_angle(c) == 0\n\n    c = complex(-1, 1)\n    assert complex_angle(c) == -90\n\n    c = complex(-1, -1)\n    assert complex_angle(c) == 90\n\n    c = complex(1, 1)\n    assert complex_angle(c) == 90\n\n    c = complex(1, -1)\n    assert complex_angle(c) == 90",
    "import math\n\n\ndef angle(c):\n    return math.atan(math.sqrt(c.real ** 2 + c.imag ** 2))\n\n\nc = complex(1, 2)\nprint(angle(c))",
    "import math\n\ndef complex_angle(complex_number):\n    return math.degrees(math.atan2(complex_number.imag, complex_number.real))\n\nif __name__ == \"__main__\":\n    print(\"The angle of a complex number is {}\".format(complex_angle(complex(1, 2))))",
    "class Complex(object):\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __repr__(self):\n        return 'Complex({}, {})'.format(self.real, self.imag)\n\n\ndef angle(c):\n    return c.real * c.imag / 2\n\n\ndef main():\n    c = Complex(1, 2)\n    print(angle(c))\n\n\nif __name__ == '__main__':\n    main()",
    "class Complex:\n    def __init__(self, real=0, imag=0):\n        self.real = real\n        self.imag = imag\n    def get_angle(self):\n        return math.acos(self.imag / self.real)\n\nc = Complex(1, 1)\nprint(c.get_angle())",
    "def get_angle(c):\n    return (c.real*c.real + c.imag*c.imag)/2\n\n\nc = complex(0, 0)\nprint(get_angle(c))",
    "import math\n\n\ndef get_angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\n\nif __name__ == \"__main__\":\n    print(get_angle(complex(2, 3)))",
    "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def angle(self):\n        return (self.imaginary.real * self.imaginary.real +\n                self.imaginary.imag * self.imaginary.imag) / 2\n\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(3, 1)\n    c2 = ComplexNumber(2, -4)\n    print(c1.angle())\n    print(c2.angle())\n\n    c3 = ComplexNumber(2, -2)\n    print(c3.angle())",
    "def angle(c):\n    return (c.real * c.real + c.imag * c.imag) / 2\n\n\nif __name__ == '__main__':\n    c1 = complex(2, 3)\n    c2 = complex(3, -2)\n    print(angle(c1))\n    print(angle(c2))",
    "import math\n\n\ndef get_angle(complex_num):\n    # complex_num = complex(0,0)\n    return math.acos(complex_num.imag / complex_num.real)\n\n\ndef main():\n    print(get_angle(complex(1, 0)))\n    print(get_angle(complex(0, 1)))\n    print(get_angle(complex(1, 1)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Complex(object):\n\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return (self.real * self.imag).real\n\n\ndef main():\n    c = Complex(3, 4)\n    print(c.angle())\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\n\nclass Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return \"({}, {})\".format(self.real, self.imag)\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imag * other.imag,\n                      self.real * other.imag + self.imag * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imag / other.imag)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other.real,\n                      self.imag ** other.imag)\n\n    def __div__(self, other):\n        return Complex(self.real / other.real, self.imag / other.real)\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imag)\n\n    def __abs__(self):\n        return math.sqrt(self.real ** 2 + self.imag ** 2)\n\n    def __eq__(self, other):\n        if self.real == other.real and self.imag == other.imag:\n            return True\n        else:\n            return False\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __ge__(self, other):\n        if self.real >= other.real and self.imag >= other.imag:\n            return True\n        else:\n            return False\n\n    def __gt__(self, other):\n        return not self.__eq__(other)\n\n    def __le__(self, other):\n        if self.real <= other.real and self.imag <= other.imag:\n            return True\n        else:",
    "def get_angle(c):\n    return c.real*c.real + c.imag*c.imag\n\ndef get_angle(c):\n    return math.degrees(math.atan2(c.imag, c.real))\n\nif __name__ == '__main__':\n    c = complex(1, 2)\n    print(get_angle(c))",
    "import math\n\n\ndef get_angle(complex_num):\n    return math.degrees(math.atan2(complex_num.real, complex_num.imag))\n\n\nif __name__ == '__main__':\n    print(get_angle(complex(1, 2)))\n    print(get_angle(complex(-1, 2)))\n    print(get_angle(complex(0, 1)))",
    "def angle(r):\n    return r.real*r.real + r.imag*r.imag\n\nprint(angle(complex(0,0)))\nprint(angle(complex(0,1)))\nprint(angle(complex(0,-1)))",
    "def get_angle(c):\n    return c.real * c.real + c.imag * c.imag\n\n\nc = complex(1, 2)\nprint(get_angle(c))",
    "import math\n\n\ndef complex_angle(c):\n    return math.acos(c.imag)\n\n\nif __name__ == '__main__':\n    c = complex(3, 4)\n    print(complex_angle(c))",
    "import math\n\ndef get_angle(c):\n    return math.degrees(math.acos(c.real * c.real + c.imag * c.imag))\n\n\nif __name__ == \"__main__\":\n    print(get_angle(complex(3, -1)))",
    "import math\n\ndef complex_to_angle(c):\n    angle = math.atan2(c.real, c.imag)\n    return angle\n\n\nprint(complex_to_angle(complex(-2, -1)))\nprint(complex_to_angle(complex(2, -1)))\nprint(complex_to_angle(complex(0, 0)))",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({}, {})\".format(self.real, self.imaginary)\n\n    def __repr__(self):\n        return str(self)\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                      self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def angle(self):\n        return math.degrees(math.atan2(self.imaginary, self.real))\n\n\nif __name__ == \"__main__\":\n    c1 = Complex(1, 2)\n    c2 = Complex(3, 4)\n    print(c1 + c2)\n    print(c1 - c2)\n    print(c1 * c2)\n    print(c1 / c2)",
    "import math\n\ndef complex_angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\n\nif __name__ == \"__main__\":\n    c1 = complex(1, 2)\n    print(complex_angle(c1))",
    "from math import atan2\n\ndef get_angle(a, b):\n    return atan2(b.real, b.imag)\n\n\nif __name__ == '__main__':\n    c = complex(2, 1)\n    print(get_angle(c, c))",
    "def angle(c):\n    return abs(c.real) + abs(c.imag)",
    "def angle(c):\n    return c.real * c.real + c.imag * c.imag\n\n\nif __name__ == \"__main__\":\n    c = complex(0, 1)\n    print(angle(c))",
    "def complex_angle(c):\n    return c.real * c.real + c.imag * c.imag\n\nprint(complex_angle(complex(1, 2)))\nprint(complex_angle(complex(1, -2)))\nprint(complex_angle(complex(-1, 2)))\nprint(complex_angle(complex(-1, -2)))",
    "def get_angle(c):\n    return (c.real * c.real + c.imag * c.imag) / 2\n\nc = complex(0, 0)\nprint(f\"The angle of {c} is {get_angle(c)}\")",
    "import math\n\ndef complex_angle(complex_num):\n    complex_num = complex_num.real + 1j * complex_num.imag\n    return math.acos(complex_num.real / complex_num.imag)\n\nif __name__ == \"__main__\":\n    complex_num = complex(1, 2)\n    print(complex_angle(complex_num))",
    "import math\n\n\ndef angle(c):\n    return math.atan2(c.imag, c.real)\n\n\nc = complex(2, 1)\nprint(angle(c))\n\nc = complex(4, 3)\nprint(angle(c))\n\nc = complex(1, -1)\nprint(angle(c))\n\nc = complex(3, -2)\nprint(angle(c))\n\nc = complex(2, 1)\nprint(angle(c))\n\nc = complex(1, -2)\nprint(angle(c))\n\nc = complex(1, 2)\nprint(angle(c))\n\nc = complex(1, 2)\nprint(angle(c))\n\nc = complex(2, 3)\nprint(angle(c))\n\nc = complex(3, 2)\nprint(angle(c))\n\nc = complex(4, 2)\nprint(angle(c))\n\nc = complex(1, -3)\nprint(angle(c))\n\nc = complex(1, 2)\nprint(angle(c))\n\nc = complex(1, -2)\nprint(angle(c))\n\nc = complex(1, 2)\nprint(angle(c))\n\nc = complex(1, 2)\nprint(angle(c))",
    "import math\n\ndef angle(c):\n    return math.acos(c.real * c.real + c.imag * c.imag)\n\n\nprint(angle(complex(1, 2)))\nprint(angle(complex(1, -2)))\nprint(angle(complex(0, 1)))\nprint(angle(complex(0, -1)))\nprint(angle(complex(1, 1)))\nprint(angle(complex(1, -1)))\nprint(angle(complex(-1, 1)))",
    "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return (self.imag * self.imag + self.real * self.real) / 2\n\n\n# Test\n\nc1 = Complex(3, -4)\nc2 = Complex(0, 0)\n\nprint(c1.angle())\nprint(c2.angle())",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def angle(self):\n        return self.real * self.imaginary / 2\n\n\nc1 = Complex(3, 5)\nc2 = Complex(4, -3)\n\nprint(c1.angle())\nprint(c2.angle())",
    "import math\n\ndef angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\nprint(angle(complex(1, -1)))\nprint(angle(complex(1, 1)))\nprint(angle(complex(2, -2)))\nprint(angle(complex(2, 1)))\nprint(angle(complex(3, 2)))\nprint(angle(complex(3, -1)))",
    "import math\n\n\ndef angle(c):\n    angle = math.acos(math.sqrt(c.real ** 2 + c.imag ** 2))\n    return angle\n\n\ndef main():\n    c = complex(1 + 0j, 2 + 0j)\n    print(angle(c))\n\n\nif __name__ == '__main__':\n    main()",
    "def angle(c):\n    return abs(c.imag) + abs(c.real)\n\n\nif __name__ == '__main__':\n    c1 = complex(1, 2)\n    c2 = complex(3, 4)\n\n    print(angle(c1))\n    print(angle(c2))",
    "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def get_angle(self):\n        return (self.real * self.imag) / 2.0\n\n\nif __name__ == '__main__':\n    complex_number = ComplexNumber(3.0, -2.0)\n    print(complex_number.get_angle())",
    "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def get_angle(self):\n        return (self.real * self.real + self.imag * self.imag) / 2\n\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(2, 3)\n    c2 = ComplexNumber(5, -2)\n    c3 = ComplexNumber(2, -3)\n    print(c1.get_angle())\n    print(c2.get_angle())\n    print(c3.get_angle())",
    "def angle(complex_number):\n    \"\"\"\n    :type complex_number: complex\n    :rtype: float\n    \"\"\"\n    angle = (complex_number.real * complex_number.real + complex_number.imag * complex_number.imag) / 2\n    return angle\n\n\nif __name__ == '__main__':\n    a = complex(2, 3)\n    print(angle(a))",
    "import math\n\n\ndef get_angle(complex_num):\n    return math.atan2(complex_num.imag, complex_num.real)\n\n\ndef main():\n    print(get_angle(complex(1, 2)))\n    print(get_angle(complex(3, 4)))\n    print(get_angle(complex(5, 6)))\n    print(get_angle(complex(7, 8)))\n    print(get_angle(complex(9, 10)))\n    print(get_angle(complex(11, 12)))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\nclass Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                      self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __pow__(self, other):\n        return Complex(self.real ** other.real - self.imaginary ** other.imaginary,\n                      self.real ** other.imaginary + self.imaginary ** other.real)\n\n    def angle(self):\n        return math.acos(self.real * self.real + self.imaginary * self.imaginary)\n\nif __name__ == '__main__':\n    c1 = Complex(3, 4)\n    c2 = Complex(2, -1)\n    c3 = Complex(1, 2)\n    print(c1)\n    print(c2)\n    print(c3)\n    print(c1 + c2)\n    print(c3 - c2)\n    print(c1 * c2)\n    print(c3 / c2)\n    print(c1 ** c2)\n    print(c3 ** c2)",
    "def angle(r1, r2):\n    return (2 * math.acos(r1.imag / r2.imag))\n\nprint(angle(1, 2))\nprint(angle(3, 4))\nprint(angle(1, 1))\nprint(angle(3, 3))\nprint(angle(1, -1))\nprint(angle(-1, 1))\nprint(angle(0, 1))\nprint(angle(0, -1))\nprint(angle(0, 3))\nprint(angle(0, 4))\nprint(angle(0, 5))\nprint(angle(0, 6))\nprint(angle(0, -4))\nprint(angle(1, -2))\nprint(angle(1, 2))\nprint(angle(1, -2))\nprint(angle(1, 1))\nprint(angle(1, -1))\nprint(angle(1, -3))\nprint(angle(1, -4))\nprint(angle(1, -5))\nprint(angle(1, -6))\nprint(angle(1, -7))\nprint(angle(1, -8))\nprint(angle(1, -9))\nprint(angle(1, -10))\nprint(angle(1, -11))\nprint(angle(1, -12))\nprint(angle(1, -13))\nprint(angle(1, -14))\nprint(angle(1, -15))\nprint(angle(1, -16))\nprint(angle(1, -17))\nprint(angle(1, -18))\nprint(angle(1, -19))\nprint(angle(1, -20))\nprint(angle(1, -21))\nprint(angle(1, -22))\nprint(angle(1, -23))\nprint(angle(1, -24))\nprint(angle(1, -25))\nprint(angle(1, -26))\nprint(angle(1, -27))\nprint(angle(1, -28))\nprint(angle(1, -29))\nprint(angle(1, -30))\nprint(angle(1, -31))\nprint(angle(1, -32))\nprint(angle(1, -33))",
    "import math\n\ndef angle_complex(a, b):\n    return math.degrees(math.atan2(b.imag, b.real))\n\nprint(angle_complex(complex(3, 4), complex(5, 6)))",
    "import math\n\ndef get_angle(x,y):\n    return math.acos(math.sqrt(x**2 + y**2))\n\n\ndef main():\n    c = complex(0,0)\n    print(get_angle(c, c))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef get_angle(a, b):\n    return math.degrees(math.atan2(b.real, b.imag))",
    "import math\n\ndef angle(c):\n    return math.degrees(math.atan2(c.real, c.imag))\n\ndef main():\n    print(angle(complex(1, 0)))\n    print(angle(complex(0, 1)))\n    print(angle(complex(0, 0)))\n\nif __name__ == '__main__':\n    main()",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def angle(self):\n        return 2 * (self.real.real + self.imaginary.imaginary)\n\n\nif __name__ == '__main__':\n    c = Complex(3, 2)\n    print(c.angle())",
    "import math\n\nclass Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return \"({0}, {1})\".format(self.real, self.imag)\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imag + other.imag)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imag - other.imag)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imag * other.imag,\n                      self.real * other.imag + self.imag * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real,\n                      self.imag / other.imag)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real,\n                      self.imag % other.imag)\n\n    def angle(self):\n        return math.degrees(math.atan2(self.imag, self.real))\n\n\nif __name__ == \"__main__\":\n    c = Complex(3, 4)\n    print(c)\n    print(c + c)\n    print(c - c)\n    print(c * c)\n    print(c / c)\n    print(c % c)\n    print(c ** c)\n    print(c % c)",
    "import math\n\ndef angle(complex_num):\n    return math.acos(complex_num.real*complex_num.real + complex_num.imag*complex_num.imag)\n\n\nif __name__ == \"__main__\":\n    print(angle(complex(1, 2)))\n    print(angle(complex(4, -2)))\n    print(angle(complex(-1, -2)))",
    "def angle(c):\n    return c.imag\n\n\ndef test_angle():\n    assert angle(complex(1, -1)) == 1.5\n    assert angle(complex(1, 0)) == 0\n    assert angle(complex(0, 1)) == 1\n    assert angle(complex(0, -1)) == 0\n    assert angle(complex(1, 2)) == 1\n    assert angle(complex(-1, 2)) == 0\n    assert angle(complex(1, -2)) == 0\n    assert angle(complex(-1, -2)) == 0",
    "def angle(complex_num):\n\treturn (complex_num.real * complex_num.real + complex_num.imag * complex_num.imag) * 0.5\n\nprint(angle(complex(2,3)))\nprint(angle(complex(-2,3)))",
    "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                      self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __str__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n\nif __name__ == \"__main__\":\n    c1 = Complex(2, 5)\n    c2 = Complex(5, 1)\n    print(c1 + c2)\n    print(c1 - c2)\n    print(c1 * c2)\n    print(c1 / c2)\n    print(c1 ** c2)\n    print(c1 + c2 * c2)\n    print(c1 - c2 ** c2)\n    print(c1 * c2 ** c2)\n    print(c1 / c2 ** c2)",
    "from math import pi\n\n\ndef get_angle(complex_num):\n    return pi * (complex_num.real + 1j * complex_num.imag) / 2\n\n\nif __name__ == \"__main__\":\n    print(get_angle(complex(1, 1)))\n    print(get_angle(complex(1, -1)))\n    print(get_angle(complex(0, 0)))\n    print(get_angle(complex(1, 1)))\n    print(get_angle(complex(1, -1)))\n    print(get_angle(complex(0, 0)))\n    print(get_angle(complex(1, 1)))",
    "def angle(c):\n    return c.real * c.real + c.imag * c.imag\n\n\ndef test_angle():\n    assert angle(complex(0, 0)) == 0\n    assert angle(complex(0, 1)) == 0\n    assert angle(complex(0, -1)) == 90\n    assert angle(complex(1, 0)) == 90\n    assert angle(complex(1, 1)) == 90\n    assert angle(complex(1, -1)) == 90\n    assert angle(complex(-1, 0)) == 270\n    assert angle(complex(-1, 1)) == 270\n    assert angle(complex(-1, -1)) == 270",
    "def angle(c):\n    angle = c.real * c.real + c.imag * c.imag\n    return angle\n\n\nc1 = complex(3, -4)\nc2 = complex(5, -6)\n\nprint(angle(c1))\nprint(angle(c2))",
    "import math\n\nclass Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"Complex({:.4f}, {:.4f})\".format(self.real, self.imaginary)\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                      self.real * other.imaginary + self.imaginary * other.real)\n\n    def __div__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def angle(self):\n        return math.degrees(math.acos(self.__mul__(self)))\n\nif __name__ == \"__main__\":\n    c1 = Complex(1, 1)\n    c2 = Complex(2, -1)\n    print(c1 + c2)\n    print(c1 * c2)\n    print(c1 / c2)\n    print(c1 % c2)\n    print(c1 ** c2)\n    print(c1 / c2)\n    print(c1 ** c2)",
    "import math\n\n\ndef get_angle(complex_number):\n    complex_number = complex_number.real + 1j * complex_number.imag\n    return math.degrees(math.acos(complex_number.real / complex_number.imag))\n\n\nprint(get_angle(complex(0, 0)))\nprint(get_angle(complex(0, 1)))\nprint(get_angle(complex(1, 0)))\nprint(get_angle(complex(1, 1)))\nprint(get_angle(complex(1, 2)))",
    "import math\n\n\ndef angle(c):\n    return math.acos(abs(c.real) * abs(c.imag))\n\n\nc = complex(3, 2)\nprint(angle(c))",
    "class Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, other):\n        return Complex(self.real + other.real, self.imaginary + other.imaginary)\n\n    def __sub__(self, other):\n        return Complex(self.real - other.real, self.imaginary - other.imaginary)\n\n    def __mul__(self, other):\n        return Complex(self.real * other.real - self.imaginary * other.imaginary,\n                     self.real * other.imaginary + self.imaginary * other.real)\n\n    def __truediv__(self, other):\n        return Complex(self.real / other.real, self.imaginary / other.imaginary)\n\n    def __mod__(self, other):\n        return Complex(self.real % other.real, self.imaginary % other.imaginary)\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imaginary)\n\n    def __abs__(self):\n        return Complex(abs(self.real), abs(self.imaginary))\n\n    def __repr__(self):\n        return f\"Complex({self.real}, {self.imaginary})\"\n\n\ndef get_angle(c):\n    return (c.real + c.imaginary) / 2.0\n\n\nif __name__ == \"__main__\":\n    c1 = Complex(3, -5)\n    c2 = Complex(1, 4)\n\n    print(f\"Complex(3, -5) = {c1}\")\n    print(f\"Complex(1, 4) = {c2}\")\n    print(f\"Complex(3, 4) = {get_angle(c2)}\")\n    print(f\"Complex(3, -4) = {get_angle(c1)}\")",
    "import math\n\nclass Complex:\n\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def angle(self):\n        return math.acos(self.imag / self.real)\n\n    def __repr__(self):\n        return \"({}, {})\".format(self.real, self.imag)\n\nc1 = Complex(1, 2)\nc2 = Complex(2, 1)\n\nprint(c1.angle())\nprint(c2.angle())",
    "from math import atan2, radians\n\ndef angle(c):\n    return radians(atan2(c.real, c.imag))\n\ndef main():\n    c = complex(1, 2)\n    print(angle(c))\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef angle(c):\n    # c = complex(0, 0)\n    return math.degrees(math.atan2(c.real, c.imag))\n\n\nprint(angle(complex(1, 2)))\nprint(angle(complex(1, -2)))\nprint(angle(complex(-1, -2)))\nprint(angle(complex(2, -3)))\nprint(angle(complex(2, 3)))\nprint(angle(complex(2, -3)))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}