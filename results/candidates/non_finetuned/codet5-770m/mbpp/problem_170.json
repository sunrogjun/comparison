{
  "problem": {
    "task_id": "MBPP/181",
    "prompt": "Write a function to find the longest common prefix in the given set of strings.",
    "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
    "test_list": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ],
    "challenge_test_list": [],
    "problem_id": 170
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n\n        if len(strs) == 1:\n            return strs[0]\n\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n\n        for i in range(min(len(strs), len(strs[0]))):\n            if strs[0][i] == strs[1][i]:\n                return strs[0][i]\n\n        return \"\"",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    if len(strs) == 1:\n        return strs[0]\n\n    prefix = strs[0]\n\n    for i in range(1, len(strs)):\n        if strs[i] == prefix:\n            continue\n\n        else:\n            return prefix\n\n    return prefix\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return ''\n        \n        if len(strs) == 1:\n            return strs[0]\n        \n        longest_prefix = strs[0]\n        for i in range(1, len(strs)):\n            if longest_prefix == '':\n                return strs[i]\n            \n            for j in range(len(strs[i])):\n                if strs[i][j]!= strs[i - 1][j]:\n                    return longest_prefix\n            \n        return longest_prefix",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else strs[1]\n        if len(strs) == 3:\n            return strs[0] if strs[0] == strs[1] == strs[2] else strs[2]\n        if len(strs) == 4:\n            return strs[0] if strs[0] == strs[1] == strs[2] == strs[3] else strs[3]\n        if len(strs) == 5:\n            return strs[0] if strs[0] == strs[1] == strs[2] == strs[3] == strs[4] else strs[4]\n        return strs[0]",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return ''\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == '':\n            return prefix\n        elif len(strs[i]) > len(prefix):\n            prefix = strs[i]\n\n    return prefix\n\n\nif __name__ == '__main__':\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\", \"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    elif len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return strs[1]\n    else:\n        str1 = strs[0]\n        str2 = strs[1]\n        for i in range(len(str1)):\n            if i < len(str2):\n                if str1[i]!= str2[i]:\n                    return str1[:i]\n        return str1",
    "class Solution:\n    # @param s, a list of string\n    # @return a string\n    def longestCommonPrefix(self, s):\n        if not s:\n            return \"\"\n        prefix = s[0]\n        for i in range(1, len(s)):\n            if s[i]!= prefix:\n                return prefix\n        return prefix",
    "def longestCommonPrefix(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if len(str1) == 1:\n        return str1[0]\n    if len(str2) == 1:\n        return str2[0]\n    min_len = min(len(str1), len(str2))\n    for i in range(min_len):\n        if str1[i]!= str2[i]:\n            return str1[0:i+1]\n    return str1[0:min_len]\n\n\nif __name__ == \"__main__\":\n    print(longestCommonPrefix(\"flower\", \"flow\"))\n    print(longestCommonPrefix(\"flowerflower\", \"flow\"))\n    print(longestCommonPrefix(\"flow\", \"flow\"))\n    print(longestCommonPrefix(\"flower\", \"\"))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == prefix:\n            continue\n        else:\n            return prefix\n    return prefix\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print(longestCommonPrefix(strs))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return ''\n    elif len(strs) == 1:\n        return strs[0]\n    elif len(strs) == 2:\n        return strs[0] if strs[0] == strs[1] else strs[1]\n\n    if len(strs) == 3:\n        return strs[0] if strs[0] == strs[2] else strs[1] if strs[1] == strs[2] else strs[2]\n\n    lcp = []\n    for i in range(min(len(strs), len(lcp))):\n        if i == 0:\n            lcp.append(strs[i])\n        elif len(strs) == 1:\n            lcp.append(strs[0])\n        elif len(strs) == 2:\n            lcp.append(strs[0] if strs[0] == strs[1] else strs[1])\n        elif len(strs) == 3:\n            lcp.append(strs[0] if strs[0] == strs[2] else strs[1] if strs[1] == strs[2] else strs[2])\n    return ''.join(lcp)\n\n\nif __name__ == \"__main__\":\n    assert longestCommonPrefix([]) == ''\n    assert longestCommonPrefix([\"a\"]) == 'a'\n    assert longestCommonPrefix([\"a\", \"a\"]) == 'a'\n    assert longestCommonPrefix([\"a\", \"a\", \"a\"]) == 'a'\n    assert longestCommonPrefix([\"a\", \"a\", \"a\", \"a\"]) == 'a'\n    assert longestCommonPrefix([\"ab\", \"ab\", \"ab\"]) == 'ab'\n    assert longestCommonPrefix([\"ab\", \"ab\", \"ab\"]) == 'ab'",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs:\n        if not len(s) or s[0] == prefix:\n            continue\n        else:\n            prefix = s[0]\n    return prefix\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"dog\", \"racecar\"]))\nprint(longestCommonPrefix([\"dog\", \"racecar\", \"car\"]))\nprint(longestCommonPrefix([\"dog\", \"racecar\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n\n        common_prefix = \"\"\n        for i, s in enumerate(strs[0]):\n            for j, s2 in enumerate(strs[1:]):\n                if i == j:\n                    common_prefix += s\n                else:\n                    break\n\n        return common_prefix\n\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n    common = \"\"\n    for i in range(min(len(strings), len(common))):\n        if i == 0:\n            common += strings[0]\n        elif strings[i] == common:\n            common += strings[i]\n        else:\n            return common\n    return common\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    strs.sort(key=lambda x: len(x))\n    i = 0\n    while i < len(strs[0]):\n        if len(strs) == 1:\n            return strs[0][i]\n        for j in range(len(strs)):\n            if i == len(strs[j]):\n                return strs[j][i]\n            if strs[j][i]!= strs[0][i]:\n                return strs[0][i]\n        i += 1\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if len(str1) > len(str2):\n        return longestCommonPrefix(str2, str1)\n    else:\n        return str1[0]\n\nprint(longestCommonPrefix(\"flower\",\"flow\"))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n\n        minlen = min([len(s) for s in strs])\n        res = strs[0][:minlen]\n\n        for i in range(1, len(strs)):\n            if len(res) == 0 or len(strs[i]) < minlen:\n                res = strs[0][:minlen]\n            else:\n                for j in range(minlen):\n                    if strs[i][j]!= res[j]:\n                        return res[:j]\n                res = strs[0][:minlen]\n\n        return res\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print Solution().longestCommonPrefix(strs)",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        longest_common_prefix = ''\n        for i in range(min(len(strs), len(longest_common_prefix))):\n            if longest_common_prefix == '':\n                longest_common_prefix = strs[0][i]\n            else:\n                for j in range(len(strs)):\n                    if strs[j][i]!= longest_common_prefix[i]:\n                        return longest_common_prefix\n        return longest_common_prefix\n\nprint Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"])",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    # Find the longest common prefix\n    prefix = strs[0]\n    for str in strs:\n        if len(str) < len(prefix):\n            prefix = str\n\n    return prefix\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([]))\nprint(longestCommonPrefix([\"\", \"\", \"\"]))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    else:\n        return strs[0][0]\n\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        i = 0\n        while i < len(strs[0]):\n            for s in strs:\n                if s[i]!= strs[0][i]:\n                    return strs[0][:i]\n            i += 1\n        return strs[0]",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if len(strs) == 0:\n            return ''\n        prefix = strs[0]\n        for i in range(1, len(prefix)):\n            if prefix[i]!= strs[0][i]:\n                return prefix[:i]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"\"\n    assert Solution().longestCommonPrefix([\"dog\",\"racecar\",\"car\"]) == \"car\"",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    # \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u7a7a\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\n    if len(strs[0]) == 1:\n        return strs[0]\n\n    # \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709\u91cd\u590d\u5b57\u7b26\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\n    if len(strs) == 1:\n        return strs[0]\n\n    # \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4e00\u81f4\uff0c\u5219\u5224\u65ad\u662f\u5426\u662f\u4e24\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6\n    if len(strs) > 1:\n        min_len = min([len(s) for s in strs])\n\n        # \u5224\u65ad\u662f\u5426\u662f\u4e24\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6\n        for i in range(min_len):\n            # \u5224\u65ad\u662f\u5426\u662f\u6700\u5c0f\u5b57\u7b26\n            if all([s[i] == strs[0][i] for s in strs]):\n                # \u5982\u679c\u662f\u4e24\u4e2a\u5b57\u7b26\uff0c\u5219\u5224\u65ad\u662f\u5426\u662f\u4e24\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6\n                if len(strs) > 2:\n                    return strs[0][0:min_len]\n                else:\n                    return strs[0][0:i]\n            # \u5426\u5219\u5219\u63d2\u5165\n            else:\n                strs.insert(0, strs",
    "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        return strs[0] + strs[1]\n    if len(strs) == 3:\n        if strs[0] == strs[1] == strs[2]:\n            return strs[0]\n        return strs[0] + strs[1] + strs[2]\n    if len(strs) == 4:\n        if strs[0] == strs[1] == strs[2] == strs[3]:\n            return strs[0]\n        return strs[0] + strs[1] + strs[2] + strs[3]\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"f\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"flow\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"f\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"flow\"",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n\n        # find the longest common prefix\n        longest_prefix = strs[0]\n        for i in range(1, len(strs)):\n            if longest_prefix[0] == strs[i][0]:\n                continue\n            else:\n                break\n\n        return longest_prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print Solution().longestCommonPrefix(strs)",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    elif len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return strs[1]\n    elif len(strs) == 3:\n        if strs[0] == strs[1] and strs[0] == strs[2]:\n            return strs[0]\n        else:\n            return \"\"\n    else:\n        longest = strs[0]\n        for i in range(1, len(strs)):\n            if longest[i]!= strs[i][0]:\n                return longest[:i]\n            else:\n                longest = longest[i:]\n    return longest\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if len(strs) == 0:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return strs[1]\n\n        prefix = strs[0]\n        for i in range(len(strs[0])):\n            for s in strs:\n                if i >= len(s):\n                    return prefix\n                if s[i]!= prefix[i]:\n                    return prefix\n        return prefix",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == \"\":\n            return prefix\n        else:\n            for j in range(len(prefix)):\n                if strs[i][j]!= prefix[j]:\n                    return prefix[:j]\n            return prefix",
    "def longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if not strings:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        return strings[0] + strings[1]\n    prefix = strings[0]\n    for i in range(len(strings) - 1):\n        if prefix[i]!= strings[i + 1]:\n            return prefix[:i + 1]\n        prefix = prefix[:i + 1]\n    return prefix",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return ''\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        return longestCommonPrefix(strs[1:]) + strs[0]\n\nif __name__ == '__main__':\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if len(strs) == 0:\n            return ''\n        elif len(strs) == 1:\n            return strs[0]\n\n        longest_common_prefix = ''\n        for i in range(min(len(strs), len(longest_common_prefix))):\n            for string in strs:\n                if i >= len(string):\n                    return longest_common_prefix\n                elif string[i]!= longest_common_prefix[i]:\n                    return longest_common_prefix\n            longest_common_prefix += strs[0][i]\n\n        return longest_common_prefix\n\n\nif __name__ == '__main__':\n    assert Solution().longestCommonPrefix([]) == ''\n    assert Solution().longestCommonPrefix([\"foo\", \"bar\"]) == 'foo'\n    assert Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"]) == 'flow'\n    assert Solution().longestCommonPrefix([\"flower\", \"flow\"]) == 'flow'",
    "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) <= 1:\n        return strs[0]\n    for i in range(1, min(len(strs), len(strs[0]))):\n        for s in strs:\n            if i < len(s) and s[i]!= strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == '__main__':\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n\n        if len(strs) == 1:\n            return strs[0]\n\n        res = strs[0]\n        for s in strs[1:]:\n            if len(res) < len(s):\n                res = s\n\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"])",
    "def longest_common_prefix(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if len(str1) > len(str2):\n        return str1\n    if len(str2) > len(str1):\n        return str2\n\n    i = 0\n    while i < min(len(str1), len(str2)):\n        if str1[i]!= str2[i]:\n            return str1[:i]\n        i += 1\n    return str1\n\n\nprint(longest_common_prefix(\"abc\", \"abc\"))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            if strs[i][0]!= prefix[-1]:\n                return prefix\n            prefix = prefix[1:]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print(Solution().longestCommonPrefix(strs))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if len(strs) == 0:\n            return \"\"\n        elif len(strs) == 1:\n            return strs[0]\n        elif len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n        else:\n            prefix = strs[0]\n            for i in range(1, len(strs)):\n                if strs[i] == prefix:\n                    continue\n                else:\n                    return prefix\n            return prefix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"\"\n    assert s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"\"\n    assert s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"\"",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == \"\":\n            return prefix\n        for j in range(0, len(strs[i])):\n            if j < len(prefix):\n                if strs[i][j]!= prefix[j]:\n                    return prefix\n            else:\n                return prefix\n    return prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(longestCommonPrefix(strs))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n\n        min_len = min([len(s) for s in strs])\n        prefix = []\n        for i in range(min_len):\n            if all([s[i] == s[0] for s in strs]):\n                prefix.append(strs[0][i])\n            else:\n                break\n\n        return ''.join(prefix)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"flow\"",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    elif len(strs) == 2:\n        return strs[0] if strs[0] == strs[1] else strs[1]\n    else:\n        commonPrefix = strs[0]\n        for i in range(1, len(strs)):\n            if len(set(strs[i])) == 1:\n                commonPrefix = commonPrefix[:-1]\n            else:\n                break\n        return commonPrefix\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\"]))\nprint(longestCommonPrefix([]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        # Find the longest common prefix of all the strings\n        # and return it\n        return strs[0]\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return ''\n\n    common_prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == common_prefix:\n            common_prefix += strs[i]\n        else:\n            return common_prefix\n    return common_prefix\n\n\nif __name__ == '__main__':\n    assert longestCommonPrefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    # find the longest common prefix\n    prefix = strs[0]\n    for string in strs[1:]:\n        if len(string) < len(prefix):\n            prefix = string\n\n    return prefix\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        common_prefix = strs[0]\n        for i in range(1, len(strs)):\n            if len(common_prefix) == 0 or len(strs[i]) == 0:\n                return \"\"\n            if strs[i][0]!= common_prefix[0]:\n                return common_prefix\n            common_prefix = common_prefix[1:]\n        return common_prefix\n\n\ns = Solution()\nprint s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"])",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return ''\n\n        min_len = min(len(s) for s in strs)\n        prefix = strs[0][:min_len]\n\n        for s in strs:\n            if len(s) < min_len:\n                break\n            for i in range(min_len):\n                if s[i]!= prefix[i]:\n                    return prefix[:i]\n            prefix = prefix[:-1]\n\n        return prefix",
    "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n    else:\n        common_prefix = strings[0]\n        for string in strings:\n            if len(string) < len(common_prefix):\n                common_prefix = string\n        return common_prefix\n\n\nstrings = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strings))",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for s in strs[1:]:\n            if not prefix or len(prefix) == 0 or prefix[0]!= s[0]:\n                return prefix\n            prefix = prefix[1:]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"car\"",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n\n    for str in strs:\n        if len(prefix) == 0:\n            return str\n        if len(str) == 1:\n            continue\n\n        for i in range(len(prefix)):\n            if not prefix[i].startswith(str[0]):\n                return prefix[:i]\n\n    return prefix",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    min_len = min([len(s) for s in strs])\n    return strs[0][:min_len]\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print(longestCommonPrefix(strs))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return ''\n\n    prefix = strs[0]\n    for s in strs[1:]:\n        if len(s) == 0:\n            continue\n\n        for i in range(len(prefix)):\n            if s[i]!= prefix[i]:\n                return prefix[:i]\n\n    return prefix\n\n\nif __name__ == '__main__':\n    assert longestCommonPrefix([\"flower\", \"flow\", \"flight\"]) == \"flow\"\n    assert longestCommonPrefix([\"flower\", \"flow\"]) == \"flow\"\n    assert longestCommonPrefix([]) == ''\n    assert longestCommonPrefix([\"a\", \"b\"]) == \"\"\n    assert longestCommonPrefix([\"a\", \"a\"]) == \"\"",
    "def longestCommonPrefix(str1, str2):\n    if not str1 or not str2:\n        return ''\n\n    min_len = min(len(str1), len(str2))\n    for i in range(min_len):\n        if str1[i]!= str2[i]:\n            return str1[:i]\n\n    return str1\n\n\ndef longestCommonPrefix2(str1, str2):\n    if not str1 or not str2:\n        return ''\n\n    prefix = str1[0]\n    for i in range(1, len(str1)):\n        if str1[i]!= str2[i]:\n            return prefix\n        prefix = prefix + str1[i]\n\n    return prefix\n\n\nif __name__ == '__main__':\n    print(longestCommonPrefix(\"abc\", \"abc\"))\n    print(longestCommonPrefix(\"abcd\", \"abcd\"))\n    print(longestCommonPrefix(\"abcd\", \"abcdabcd\"))\n    print(longestCommonPrefix(\"abcd\", \"abcdabcdabcd\"))\n    print(longestCommonPrefix(\"abcd\", \"abcdabcdabcdabcd\"))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return ''\n        common_prefix = strs[0]\n        for i in range(1, len(common_prefix)):\n            for j in range(len(strs)):\n                if j >= i:\n                    if strs[j][i]!= common_prefix[i]:\n                        return common_prefix[:i]\n        return common_prefix\n\n\ns = Solution()\nprint(s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0]\n    commonPrefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i]!= commonPrefix:\n            return commonPrefix\n    return commonPrefix\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 1:\n            return strs[0]\n\n        # Sort the strings by length\n        strs.sort(key=len)\n        # Get the first string and compare it with the second\n        first_string = strs[0]\n        for i in range(1, len(strs)):\n            if first_string[i]!= strs[i]:\n                return first_string[:i]\n        return first_string\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print(Solution().longestCommonPrefix(strs))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return ''\n\n        prefix = strs[0]\n        for s in strs:\n            if len(s) == 0:\n                continue\n\n            if len(prefix) == 0:\n                return s\n\n            for i in range(len(prefix)):\n                if i >= len(s) or prefix[i]!= s[i]:\n                    return prefix[:i]\n\n        return prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    s = Solution()\n    print(s.longestCommonPrefix(strs))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    i = 0\n    j = len(strs[0])\n    while i < len(strs) and j >= 0:\n        if strs[i][j] == \"\":\n            i += 1\n            j -= 1\n        elif i < len(strs) and strs[i][j]!= strs[0][j]:\n            return strs[0][:i]\n        else:\n            i += 1\n            j -= 1\n    return strs[0]\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0] + strs[1]\n    for i in range(len(strs[0])):\n        for s in strs:\n            if i >= len(s):\n                return strs[0][:i]\n            elif s[i]!= strs[1][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n    print(longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n    print(longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n    print(longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))",
    "def longestCommonPrefix(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if len(str1) == 1 and len(str2) == 1:\n        return str1[0]\n    # find the longest common prefix\n    common_prefix = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            return common_prefix\n    return common_prefix\n\n\nprint(longestCommonPrefix(\"flower\",\"flow\"))\nprint(longestCommonPrefix(\"flower\",\"flower\"))\nprint(longestCommonPrefix(\"flower\",\"flow\"))\nprint(longestCommonPrefix(\"flower\",\"flower\"))\nprint(longestCommonPrefix(\"flower\",\"flower\"))\nprint(longestCommonPrefix(\"flower\",\"flower\"))",
    "class Solution:\n    # @param {string[]} s\n    # @return {string}\n    def longestCommonPrefix(self, s):\n        if len(s) == 0:\n            return \"\"\n        min_len = min([len(s[0]) for s in s])\n        ans = \"\"\n        for i in range(min_len):\n            for s in s:\n                if i < len(s) and s[i]!= s[0]:\n                    return ans\n            ans += s[0]\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(sol.longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n    print(sol.longestCommonPrefix([\"dog\",\"racecar\",\"car\",\"racecar\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n\n        min_len = min([len(s) for s in strs])\n\n        prefix = strs[0][:min_len]\n        for i in range(1, len(strs)):\n            if len(strs[i]) < min_len:\n                return prefix\n\n            if strs[i][:min_len]!= prefix:\n                return prefix\n\n        return prefix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]) == \"flow\"\n    assert s.longestCommonPrefix([\"dog\", \"racecar\", \"car\"]) == \"\"",
    "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    else:\n        if strs[0] == strs[-1]:\n            return strs[0]\n        for i in range(min(len(strs), len(strs[0]))):\n            if all(strs[0][j] == strs[i][j] for j in range(len(strs))):\n                return strs[0][:i]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs:\n            return \"\"\n\n        common_prefix = strs[0]\n        for i in range(1, len(common_prefix)):\n            if all([common_prefix[i - 1] == s[i] for s in strs]):\n                common_prefix = common_prefix[:i]\n            else:\n                return common_prefix\n\n        return common_prefix\n\n\ns = Solution()\nprint(s.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0] if strs[0] == strs[1] else \"\"\n    if len(strs) == 3:\n        return strs[0] if strs[0] == strs[1] == strs[2] else \"\"\n    # this is the case where there are more than two strings\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == \"\":\n            continue\n        if len(prefix) > 0:\n            for j in range(len(strs[i])):\n                if prefix[j]!= strs[i][j]:\n                    return prefix\n        prefix = strs[i]\n    return prefix",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return ''\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i == len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return strs[0][:i]\n    return strs[0]\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0] if strs[0] == strs[1] else strs[1]\n\n    for i in range(min(len(strs), len(strs[0]))):\n        for j in range(1, len(strs)):\n            if strs[j][i]!= strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"flow\"\n    assert longest_common_prefix([\"flower\", \"flow\"]) == \"flower\"\n    assert longest_common_prefix([\"flower\", \"flow\"]) == \"flower\"\n    assert longest_common_prefix([\"flower\", \"flower\", \"flower\"]) == \"flow\"\n    assert longest_common_prefix([\"flower\", \"flow\", \"flower\"]) == \"flower\"",
    "def longestCommonPrefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if len(set(strs[i])) == 1:\n            prefix = prefix[:-1] + strs[i]\n        else:\n            return prefix\n    return prefix\n\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\"]))\nprint(longestCommonPrefix([\"flower\",\"flower\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if len(set(strs[i]))!= 1:\n            return prefix\n        prefix = prefix[:-1]\n    return prefix\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(str1, str2):\n    common_prefix = ''\n    if len(str1) == 0 or len(str2) == 0:\n        return common_prefix\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return common_prefix\n    return common_prefix\n\nif __name__ == \"__main__\":\n    str1 = \"flower\"\n    str2 = \"flow\"\n    print(longestCommonPrefix(str1, str2))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 1:\n        return strs[0]\n\n    if len(strs) == 0:\n        return \"\"\n\n    prefix = strs[0]\n\n    for i in range(1, len(strs)):\n        if strs[i] == \"\":\n            continue\n\n        if strs[i].startswith(prefix):\n            prefix = strs[i][len(prefix):]\n        else:\n            return prefix\n\n    return prefix\n\n\nif __name__ == \"__main__\":\n    print(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == \"\":\n            return prefix\n        else:\n            for j in range(0, len(prefix)):\n                if strs[i][j]!= prefix[j]:\n                    return prefix[:j]\n    return prefix\n\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(len(prefix)):\n            for s in strs:\n                if i >= len(s):\n                    break\n                if s[i]!= prefix[i]:\n                    return prefix[:i]\n        return prefix\n\nprint Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"])",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    min_len = min([len(s) for s in strs])\n    prefix = [strs[0][:min_len]]\n    for s in strs:\n        if len(s) < min_len:\n            return \"\"\n        if s[0] == prefix[-1]:\n            prefix.append(s[min_len:])\n        else:\n            return \"\"\n    return prefix[0]",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n        res = strs[0]\n        for i in range(1, len(strs)):\n            if len(set(res).intersection(set(strs[i]))) == 0:\n                return res\n            res = res[:-1]\n        return res",
    "def longest_common_prefix(string1, string2):\n    if len(string1) == 0 or len(string2) == 0:\n        return \"\"\n    if len(string1) == 1:\n        return string1[0]\n    if len(string2) == 1:\n        return string2[0]\n    if string1[0] == string2[0]:\n        return longest_common_prefix(string1[1:], string2[1:])\n    if string1[0]!= string2[0]:\n        return longest_common_prefix(string1[0], string2[0])\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix(\"abcd\", \"abc\"))\n    print(longest_common_prefix(\"a\", \"a\"))\n    print(longest_common_prefix(\"abc\", \"abc\"))\n    print(longest_common_prefix(\"abc\", \"abc\"))\n    print(longest_common_prefix(\"abc\", \"ab\"))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n\n        if len(strs) == 1:\n            return strs[0]\n\n        for i in range(min(len(strs), len(strs[0]))):\n            for s in strs:\n                if not i or s[i]!= strs[0][i]:\n                    return strs[0][0:i]\n        return strs[0][0]",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    if len(strs) == 1:\n        return strs[0]\n\n    commonPrefix = strs[0]\n    for s in strs:\n        if len(commonPrefix) == 0 or len(s) < len(commonPrefix):\n            commonPrefix = s\n        else:\n            break\n    return commonPrefix\n\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Find the longest common prefix\n    prefix = \"\"\n    for i in range(len(strs[0])):\n        if i == 0:\n            continue\n        for j in range(1, len(strs)):\n            if j == 0:\n                continue\n            if strs[j][i]!= strs[0][i]:\n                return prefix\n        prefix += strs[0][i]\n\n    return prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strs))",
    "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    common = strs[0]\n    for s in strs:\n        if len(common) == 0 or len(s) == 0:\n            return common\n        for i in range(0, len(common)):\n            if s[i]!= common[i]:\n                return common[:i]\n    return common\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if len(strs[i]) == 0:\n            return prefix\n        if strs[i][0]!= prefix[0]:\n            return prefix\n    return prefix\n\n\nif __name__ == \"__main__\":\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\",\"flight\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            if len(prefix) > 0 and strs[i] == prefix:\n                continue\n            prefix = prefix[:-1]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    result = Solution().longestCommonPrefix(strs)\n    print(result)",
    "def longestCommonPrefix(str1, str2):\n    if not str1 or not str2:\n        return \"\"\n    if len(str1) == 1 and len(str2) == 1:\n        return str1[0]\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    res = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return res\n        res += str1[i]\n    return res\n\nprint(longestCommonPrefix(\"abc\", \"abc\"))\nprint(longestCommonPrefix(\"ab\", \"abc\"))\nprint(longestCommonPrefix(\"abc\", \"abcd\"))",
    "def longest_common_prefix(strs):\n    if not strs:\n        return ''\n\n    if len(strs) == 1:\n        return strs[0]\n\n    i = 0\n    j = len(strs[0])\n    while i < len(strs) and j > 0:\n        if strs[i][j] == strs[0][j]:\n            i += 1\n            j -= 1\n        else:\n            return strs[0][:i]\n\n    return strs[0]\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\nprint(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))",
    "class Solution:\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        else:\n            return strs[0][:min(map(len, strs))]",
    "def longest_common_prefix(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return ''\n\n    prefix = str1[0]\n    for i in range(len(str1)):\n        if prefix[i]!= str2[0]:\n            return prefix\n\n    return prefix",
    "class Solution:\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n\n        min_len = min([len(s) for s in strs])\n        longest_common_prefix = \"\"\n        for i in range(min_len):\n            if longest_common_prefix == \"\":\n                longest_common_prefix += strs[0][i]\n            else:\n                for j in range(1, len(strs)):\n                    if strs[j][i]!= strs[0][i]:\n                        return longest_common_prefix\n                longest_common_prefix += strs[0][i]\n\n        return longest_common_prefix\n\n\nprint(Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(Solution().longestCommonPrefix([\"flower\",\"flow\"]))\nprint(Solution().longestCommonPrefix([\"flower\"]))\nprint(Solution().longestCommonPrefix([]))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i]!= prefix:\n            return prefix\n\n    return prefix\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "def longest_common_prefix(str1, str2):\n    if len(str1) == 0:\n        return str2\n    if len(str2) == 0:\n        return str1\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return str1[:i + 1]\n    return str1\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix(\"flower\", \"flow\") == \"flow\"\n    assert longest_common_prefix(\"flow\", \"\") == \"\"\n    assert longest_common_prefix(\"\", \"flow\") == \"\"\n    assert longest_common_prefix(\"flow\", \"flow\") == \"flow\"\n    assert longest_common_prefix(\"flow\", \"flowing\") == \"flowing\"\n    assert longest_common_prefix(\"flowing\", \"flowing\") == \"flowing\"\n    assert longest_common_prefix(\"flowing\", \"flowingflowing\") == \"flowingflowing\"\n    assert longest_common_prefix(\"flowingflowing\", \"flowing\") == \"flowingflowing\"\n    assert longest_common_prefix(\"flowingflowing\", \"flowingflowingflowing\") == \"flowingflowing\"\n    assert longest_common_prefix(\"flowingflowingflowingflowing\", \"flowing\") == \"flowingflowing\"\n    assert longest_common_prefix(\"flowingflowingflowingflowing\", \"flowing\") == \"flowingflowingflowing\"",
    "def longestCommonPrefix(strs):\n    # Write your code here\n    if not strs:\n        return \"\"\n    result = \"\"\n    for s in strs:\n        if len(set(s)) == 1:\n            result += s[0]\n        else:\n            break\n    return result\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) <= 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0] if strs[0] == strs[1] else strs[1]\n    if len(strs) == 3:\n        if strs[0] == strs[1] == strs[2]:\n            return strs[0]\n        else:\n            return strs[1]\n    else:\n        if strs[0] == strs[1] == strs[2]:\n            return strs[0]\n        else:\n            for i in range(3, len(strs)):\n                if strs[i - 3] == strs[i - 2] == strs[i - 1]:\n                    return strs[i - 3]\n            return strs[0]",
    "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    # check if strs is empty\n    if len(strs) == 1:\n        return strs[0]\n\n    # find the longest common prefix\n    common_prefix = strs[0]\n    for i in range(1, len(strs)):\n        if common_prefix == \"\":\n            return common_prefix\n        if strs[i]!= common_prefix:\n            return common_prefix\n\n    return common_prefix\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\nprint(longest_common_prefix([\"flower\", \"flow\"]))\nprint(longest_common_prefix([\"flower\", \"flower\"]))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for i in range(len(prefix)):\n            if len(set(strs[0]))!= 1:\n                return prefix[:i]\n            prefix = prefix[i]\n        return prefix\n\ns = Solution()\nprint(s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))",
    "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        if strs[0] == strs[-1]:\n            return strs[0]\n        else:\n            return strs[0][:-1]\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strs))",
    "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if strs[i] == prefix:\n            continue\n        else:\n            return prefix\n    return prefix\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n    print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n    print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n    print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    if strs[0] == strs[1]:\n        return strs[0]\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if prefix[0]!= strs[i]:\n            return prefix\n        prefix = prefix[1:]\n\n    return prefix\n\n\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(longestCommonPrefix(strs))",
    "def longest_common_prefix(str1, str2):\n    if len(str1) == 0:\n        return \"\"\n    if len(str2) == 0:\n        return str1\n    if len(str1) > len(str2):\n        return longest_common_prefix(str2, str1)\n    result = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return result\n        result += str1[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"], [\"flight\", \"flow\", \"flower\"]))\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"], [\"flow\", \"flower\"]))\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"], [\"flow\", \"flow\", \"flower\"]))\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"], [\"flow\", \"flow\", \"flower\"]))",
    "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    common = strs[0]\n    for string in strs[1:]:\n        if len(common) > len(string):\n            common = string\n    return common\n\n\nif __name__ == '__main__':\n    print(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(longestCommonPrefix([\"flower\",\"flow\"]))\n    print(longestCommonPrefix([\"flower\",\"flower\",\"flower\"]))\n    print(longestCommonPrefix([\"flower\",\"flower\",\"flower\"]))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n\n        prefix = strs[0]\n        for s in strs[1:]:\n            if len(prefix) == 0:\n                prefix = s\n            elif len(s) < len(prefix):\n                break\n        return prefix\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(s.longestCommonPrefix([]))",
    "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n\n    common_prefix = strings[0]\n    for s in strings:\n        if len(s) == 1:\n            common_prefix = s\n            break\n        else:\n            if not s[0] == common_prefix[-1]:\n                return common_prefix\n            else:\n                common_prefix = common_prefix[1:]\n    return common_prefix\n\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    else:\n        return strs[0][0]\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            if len(set(prefix) & set(strs[i])) == 0:\n                return prefix\n            prefix = prefix[0]\n        return prefix\n\nif __name__ == \"__main__\":\n    s = Solution()\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print s.longestCommonPrefix(strs)",
    "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            if strs[i] == prefix:\n                continue\n            else:\n                return prefix\n        return prefix\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"flower\",\"flow\"]) == \"flow\"\n    assert Solution().longestCommonPrefix([\"flower\",\"flower\"]) == \"\"\n    assert Solution().longestCommonPrefix([\"flow\", \"flow\"]) == \"flow\"",
    "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n    for i in range(len(strs[0])):\n        if strs[0][i] == strs[1][i]:\n            return strs[0][i]\n    return strs[0]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}