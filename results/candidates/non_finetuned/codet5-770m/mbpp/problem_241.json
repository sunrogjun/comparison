{
  "problem": {
    "task_id": "MBPP/252",
    "prompt": "Write a python function to convert complex numbers to polar coordinates.",
    "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
    "test_list": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ],
    "challenge_test_list": [],
    "problem_id": 241
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef complex_to_polar(x, y):\n    #convert complex number to polar coordinate\n    r = math.sqrt(x**2 + y**2)\n    phi = math.atan2(y, x)\n    theta = math.degrees(phi)\n    return r, theta\n\nx = complex(1, -1)\ny = complex(1, 1)\n\nr, theta = complex_to_polar(x, y)\nprint(r, theta)",
    "import numpy as np\n\n\ndef complex_to_polar(x):\n    x = np.array(x)\n    return np.arctan2(x.imag, x.real)\n\n\nif __name__ == \"__main__\":\n    c = complex(1, -1)\n    print(complex_to_polar(c))",
    "def complex_to_polar(complex_number):\n    complex_number = complex_number.real + 1j * complex_number.imag\n    return complex_number.real, complex_number.imag\n\n\ndef polar_to_complex(real, imag):\n    return complex(real, imag)",
    "def complex_to_polar(complex_number):\n    return (complex_number.real, complex_number.imag)\n\ndef main():\n    complex_number = complex(1, 2)\n    print(complex_to_polar(complex_number))\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\n\ndef complex_to_polar(complex):\n    if complex.real == 0:\n        return 0, 0\n    else:\n        return math.atan2(complex.imag, complex.real), math.degrees(math.atan2(complex.imag, complex.real))\n\n\ndef polar_to_complex(angle, polar):\n    return math.sqrt(angle**2 + polar**2)\n\n\nif __name__ == \"__main__\":\n    print(complex_to_polar(complex(0, 0)))\n    print(complex_to_polar(complex(1, 0)))\n    print(complex_to_polar(complex(0, 1)))\n    print(complex_to_polar(complex(1, 1)))\n    print(complex_to_polar(complex(0, -1)))\n    print(complex_to_polar(complex(-1, 0)))\n    print(complex_to_polar(complex(0, 0)))\n    print(complex_to_polar(complex(1, 1)))\n    print(complex_to_polar(complex(0, -1)))\n    print(complex_to_polar(complex(-1, 0)))",
    "def complex_to_polar(complex_num):\n\n    #Converting complex to polar coordinates\n    polar_num = complex_num.real * complex_num.imag\n\n    return polar_num\n\nprint(complex_to_polar(complex(1,2)))\nprint(complex_to_polar(complex(3,4)))\nprint(complex_to_polar(complex(5,6)))",
    "def complex_to_polar(c):\n    x = c.real\n    y = c.imag\n    return x*y\n\ndef polar_to_complex(x,y):\n    r = complex(x,y)\n    return r\n\nprint(complex_to_polar(complex(1,2)))\nprint(complex_to_polar(complex(1,-2)))\nprint(complex_to_polar(complex(2,-3)))\nprint(complex_to_polar(complex(1,-2),complex(2,3)))\nprint(polar_to_complex(0,0))\nprint(polar_to_complex(0,1))\nprint(polar_to_complex(0,-1))\nprint(polar_to_complex(1,1))",
    "def complex_to_polar(c):\n    return c.real, c.imag\n\n\nc = complex(1, 2)\n\nprint(complex_to_polar(c))",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r, i\n\n\ncomplex_2 = complex(1, 2)\nr, i = complex_to_polar(complex_2)\nprint(r, i)",
    "def polar_to_cart(r, theta):\n    return r * np.cos(theta), r * np.sin(theta)\n\n\nr = float(input(\"Enter complex number r: \"))\ntheta = float(input(\"Enter complex number theta: \"))\nr_cart, theta_cart = polar_to_cart(r, theta)\nprint(f\"r = {r} \u03b8 = {r_cart} \u03c0 = {theta_cart}\")",
    "def complex2polar(c):\n    r = c.real\n    y = c.imag\n    return r, y\n\n\nc = complex(-2, 1)\nr, y = complex2polar(c)\nprint(r, y)",
    "import math\n\n\ndef complex_to_polar(c):\n    if c.imag == 0:\n        return 0, 0\n    else:\n        return math.degrees(math.atan2(c.real, c.imag)), math.degrees(math.atan2(c.imag, c.real))\n\n\nif __name__ == \"__main__\":\n    print(complex_to_polar(complex(1, 2)))",
    "def complex_to_polar(x, y, z):\n    x = x.real\n    y = y.real\n    z = z.real\n    r = x*x + y*y + z*z\n    theta = 2*3.14159/r\n    return theta, r\n\n\nif __name__ == \"__main__\":\n    c1 = complex(-1+0j, 1+0j, 0+0j)\n    c2 = complex(-1+0j, 1+0j, 1+0j)\n    print(complex_to_polar(c1, c2, 0))",
    "import math\n\n\ndef complex_to_polar(c):\n    return math.atan2(c.real, c.imag)\n\n\ndef polar_to_complex(r):\n    return complex(r * math.cos(math.radians(180)), r * math.sin(math.radians(180)))\n\n\nprint(complex_to_polar(complex(0, 0)))\nprint(complex_to_polar(polar_to_complex(0.5)))\nprint(complex_to_polar(polar_to_complex(0)))\nprint(complex_to_polar(polar_to_complex(-0.5)))",
    "import numpy as np\n\n\ndef complex2polar(c):\n    r = np.sqrt(c.real ** 2 + c.imag ** 2)\n    theta = np.arctan2(c.imag, c.real)\n    return r, theta",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real**2 + c.imag**2)\n    phi = math.atan2(c.imag, c.real)\n    theta = math.degrees(phi)\n\n    return r, theta\n\n\nc = complex(0,1)\nr, theta = complex_to_polar(c)\nprint(f\"r: {r}\\ntheta: {theta}\")",
    "import math\n\ndef complex_to_polar(x, y):\n    r = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    return angle, r\n\ndef main():\n    x = -1 + 2j\n    y = -1 - 2j\n    angle, r = complex_to_polar(x, y)\n    print(f\"The angle is: {angle}\")\n    print(f\"The radius is: {r}\")\n\nif __name__ == \"__main__\":\n    main()",
    "def complex_to_polar(c):\n    return (c.real, c.imag)\n\ndef polar_to_complex(r, i):\n    return r + 1j * i",
    "import math\n\ndef complex_to_polar(complex_number):\n    x = math.atan2(complex_number.imag, complex_number.real)\n    y = math.degrees(x)\n    return x, y\n\nprint(complex_to_polar(3+2j))",
    "def complex_to_polar(x, y, z):\n    # x, y, z are complex numbers\n    # calculate the angle of x, y and z\n    r = z / abs(z)\n    theta = (y * r) - (x * r * r)\n    phi = (x * r * r) + (y * r)\n    return theta, phi\n\n\nprint(complex_to_polar(2, 4, -1))",
    "import numpy as np\n\ndef complex_to_polar(c):\n    # complex to polar\n    x = np.arctan2(c.imag, c.real)\n    y = np.arcsin(c.imag / np.sqrt(c.real * c.real + c.imag * c.imag))\n    return [x, y]\n\nc = complex(3, -1)\nprint(complex_to_polar(c))",
    "def complex_to_polar(complex_num):\n    #y = complex_num.real\n    #x = complex_num.imag\n    #r = y/x\n    #phi = atan2(y,x)\n    #return r,phi\n    r = (complex_num.real**2 + complex_num.imag**2)**0.5\n    phi = (2*complex_num.real*complex_num.imag)\n    return r,phi",
    "import math\n\n\ndef complex_to_polar(complex_number):\n    polar_coordinate = math.degrees(math.atan2(complex_number.real, complex_number.imag))\n    return polar_coordinate\n\n\nif __name__ == \"__main__\":\n    c1 = complex(1, 2)\n    c2 = complex(2, 1)\n    print(complex_to_polar(c1))\n    print(complex_to_polar(c2))",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r, i",
    "def complex_to_polar(complex_num):\n    c = complex_num.real\n    s = complex_num.imag\n\n    return c * (1/2) + s * (1/2)\n\n\nc = complex(0, 0)\nprint(\"Complex number is: \", c)\n\nr = complex_to_polar(c)\nprint(\"Complex number is: \", r)",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r, i\n\n\nc = complex(3, -5)\nr, i = complex_to_polar(c)\nprint(r, i)",
    "def complex_to_polar(c):\n    return c.real * c.conjugate().real, c.imag * c.conjugate().imag\n\ndef polar_to_complex(r, i):\n    return r + i * 1j",
    "import math\n\ndef complex_to_polar(c):\n    if c.real == 0:\n        if c.imag == 0:\n            return 0,0\n        else:\n            return 0,math.atan2(c.imag,c.real)\n    else:\n        return math.atan2(c.imag,c.real),c.angle()\n\ndef polar_to_complex(a,b):\n    return complex(a*math.cos(b),a*math.sin(b))\n\nif __name__ == \"__main__\":\n    print(complex_to_polar(complex(-1,1)))\n    print(complex_to_polar(complex(1,2)))\n    print(complex_to_polar(complex(0,-1)))\n    print(complex_to_polar(complex(0,1)))\n    print(complex_to_polar(complex(-1,-1)))\n    print(complex_to_polar(complex(1,1)))\n    print(complex_to_polar(complex(-1,-1)))\n    print(complex_to_polar(complex(-1,1)))\n    print(complex_to_polar(complex(1,-1)))\n    print(complex_to_polar(complex(1,1)))\n    print(complex_to_polar(complex(0,-1)))\n    print(complex_to_polar(complex(0,1)))\n    print(complex_to_polar(complex(-1,-1)))\n    print(complex_to_polar(complex(-1,1)))\n    print(complex_to_polar(complex(1,-1)))\n    print(complex_to_polar(complex(-1,1)))",
    "def complex_to_polar(complex_num):\n    complex_num_rad = complex_num.real\n    complex_num_deg = complex_num.imag\n\n    return complex_num_rad, complex_num_deg\n\nif __name__ == \"__main__\":\n    complex_num = complex(1, 2)\n    complex_num_rad, complex_num_deg = complex_to_polar(complex_num)\n    print(f\"Complex number is {complex_num_rad} {complex_num_deg} degrees\")",
    "def complex_to_polar(complex_num):\n    r = complex_num.real\n    i = complex_num.imag\n    return (r, i)\n\nprint(complex_to_polar(3 + 2j))",
    "def polar(c):\n    r = c.real\n    if r > 0:\n        theta = 2*r\n        phi = c.imag\n    elif r == 0:\n        theta = 0\n        phi = 0\n    else:\n        theta = 0\n        phi = 2*r\n    return [theta, phi]\n\nprint(polar(3+1j+1j))",
    "def complexToPolar(c):\n    r = c.real\n    theta = c.imag\n    return r, theta\n\nc = complex(1, 2)\nr, theta = complexToPolar(c)\nprint(\"r = %f, theta = %f\" % (r, theta))",
    "def complex_to_polar(c):\n    r = c.real\n    y = c.imag\n    return r, y\n\n\nprint(complex_to_polar(1 + 1j))",
    "def complex_to_polar(c):\n    r = c.real\n    phi = c.imag\n    return (r, phi)\n\n\nif __name__ == \"__main__\":\n    c = complex(0, 1)\n    print(complex_to_polar(c))",
    "def complex2polar(c):\n    r = c.real\n    theta = c.imag * 2 * pi\n    return r, theta",
    "import numpy as np\n\n\ndef complex2polar(x, y):\n    r = np.sqrt(x ** 2 + y ** 2)\n    if r < 1e-6:\n        return 0, 0\n    theta = np.arctan2(y, x)\n    return theta, r\n\n\nif __name__ == '__main__':\n    print(complex2polar(2, 3))\n    print(complex2polar(2, -3))",
    "def complex_to_polar(complex_num):\n    \"\"\"\n    Complex to polar\n    :param complex_num: Complex to polar\n    :return: polar coordinates\n    \"\"\"\n    r = complex_num.real\n    theta = complex_num.imag\n    return r, theta\n\n\nif __name__ == \"__main__\":\n    r = complex(0, 0)\n    theta = complex(0, 0)\n    print(complex_to_polar(r))\n    print(complex_to_polar(theta))",
    "import math\n\n\ndef complex_to_polar(complex_num):\n    complex_num = complex_num.real + 1j*complex_num.imag\n    return complex_num.real, complex_num.imag\n\n\ndef main():\n    print(complex_to_polar(math.sqrt(1+2j)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def complex_to_polar(c):\n    return c.real, c.imag\n\n\ndef polar_to_complex(r, i):\n    return r + i * 1j\n\n\nif __name__ == \"__main__\":\n    r = complex(0, 1)\n    i = complex(0, 1)\n\n    print(f\"Complex numbers are {complex_to_polar(r)}, {polar_to_complex(r, i)}\")",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real**2 + c.imag**2)\n    theta = math.atan2(c.imag, c.real)\n    phi = math.degrees(math.atan2(c.imag, c.real))\n    return r, theta, phi\n\nc = complex(3, -1)\nr, theta, phi = complex_to_polar(c)\nprint(f\"Complex to polar coordinates is {r} {theta} {phi}\")\n\nc = complex(3, -2)\nr, theta, phi = complex_to_polar(c)\nprint(f\"Complex to polar coordinates is {r} {theta} {phi}\")\n\nc = complex(3, -3)\nr, theta, phi = complex_to_polar(c)\nprint(f\"Complex to polar coordinates is {r} {theta} {phi}\")\n\nc = complex(3, -4)\nr, theta, phi = complex_to_polar(c)\nprint(f\"Complex to polar coordinates is {r} {theta} {phi}\")",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real**2 + c.imag**2)\n    theta = math.atan2(c.imag, c.real)\n    return r, theta",
    "def complex_to_polar(c):\n    r = c.real\n    theta = c.imag * 2 * math.pi / 360\n    return r, theta\n\n\nc = complex(0, 0)\nr, theta = complex_to_polar(c)\nprint(r)\nprint(theta)",
    "def complex_to_polar(c):\n    r = c.real\n    p = c.imag\n    return (r, p)\n\n\nc = complex(2, -3)\nr, p = complex_to_polar(c)\nprint(\"Complex number is: {0} and polar coordinates are: {1}\".format(c, r, p))",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return (r, i)\n\nif __name__ == '__main__':\n    c1 = complex(-1 + 0j, 1 + 0j)\n    c2 = complex(0, 0)\n    print(complex_to_polar(c1))\n    print(complex_to_polar(c2))",
    "import math\n\n\ndef complex_to_polar(c):\n    \"\"\"\n    Complex to polar coordinates\n    :param c: complex number\n    :return: complex number in polar coordinates\n    \"\"\"\n    r = math.sqrt(c.real ** 2 + c.imag ** 2)\n    phi = math.atan2(c.imag, c.real)\n    return r * math.cos(phi), r * math.sin(phi)\n\n\nif __name__ == '__main__':\n    c = complex(0, 1)\n    print(complex_to_polar(c))",
    "import numpy as np\n\n\ndef complex_to_polar(complex_num):\n    complex_num = np.array(complex_num)\n    x = complex_num[0]\n    y = complex_num[1]\n    z = complex_num[2]\n\n    r = np.sqrt(x**2 + y**2)\n    theta = np.arctan2(y, x)\n    phi = np.arctan2(z, r)\n\n    return r, theta, phi\n\n\nprint(complex_to_polar(complex(0, 0, 0)))",
    "from math import *\n\ndef complex_to_polar(c):\n    return (acos(sqrt(c.real**2 + c.imag**2)), atan2(c.imag, c.real))\n\nif __name__ == \"__main__\":\n    c = complex(2, 0)\n    print(\"Complex number = {0}\".format(c))\n    print(\"Polar coordinates = {0}\".format(complex_to_polar(c)))",
    "import math\n\ndef complex_to_polar(c):\n    return math.atan2(c.real, c.imag)\n\n\ndef polar_to_complex(p):\n    return complex(p)\n\n\nif __name__ == \"__main__\":\n    c = polar_to_complex(0)\n    print(\"Complex: {}\".format(c))\n    p = complex_to_polar(c)\n    print(\"Polar: {}\".format(p))",
    "def complex_to_polar(complex_num):\n    \"\"\"\n    Complex to polar\n    :param complex_num: complex number\n    :return: polar coordinates\n    \"\"\"\n    polar_num = complex_num.real * complex_num.imag\n    return polar_num",
    "import math\n\ndef complex_to_polar(complex_number):\n    complex_number_complex = complex(complex_number.real, complex_number.imag)\n    return complex_number_complex.real, complex_number_complex.imag\n\n\nif __name__ == '__main__':\n    print(complex_to_polar(complex(1, 2)))\n    print(complex_to_polar(complex(2, 1)))\n    print(complex_to_polar(complex(-3, -5)))\n    print(complex_to_polar(complex(1, 0)))\n    print(complex_to_polar(complex(0, 0)))\n    print(complex_to_polar(complex(-1, 1)))\n    print(complex_to_polar(complex(-1, -1)))\n    print(complex_to_polar(complex(-1, -1.1)))",
    "def complex_to_polar(x, y, z):\n    r_x = (x.real**2) + (y.real**2) + (z.real**2)\n    r_y = (x.imag**2) + (y.imag**2) + (z.imag**2)\n    r_z = (x.real**2) + (y.imag**2) - (z.real**2)\n    return r_x, r_y, r_z\n\n\nr_x, r_y, r_z = complex_to_polar(1, 2, 3)\nprint(r_x, r_y, r_z)",
    "import numpy as np\n\ndef complex_to_polar(complex_num):\n\n    x = np.angle(complex_num)\n    y = np.arctan2(complex_num.real, complex_num.imag)\n\n    return x, y\n\n\nprint(complex_to_polar(np.complex(1, 2)))",
    "import math\n\ndef complex_to_polar(c):\n    return (math.acos(c.real), math.asin(c.imag))\n\n\nif __name__ == \"__main__\":\n    c1 = complex(0, 1)\n    print(complex_to_polar(c1))",
    "import math\n\ndef complex_to_polar(complex_num):\n    return math.atan2(complex_num.real, complex_num.imag)\n\nif __name__ == \"__main__\":\n    c = complex(0, 0)\n    print(complex_to_polar(c))",
    "import math\n\n\ndef complex2polar(c):\n    \"\"\"\n    c = complex number\n    \"\"\"\n    x = math.atan2(c.imag, c.real)\n    y = math.asin(c.imag / math.sqrt(c.real ** 2 + c.imag ** 2))\n    z = math.degrees(x) + 90 - math.degrees(y)\n    return (z, x, y)\n\n\ndef polar2complex(z, x, y):\n    \"\"\"\n    z = polar coordinate\n    x = x coordinate\n    y = y coordinate\n    \"\"\"\n    c = complex(z, x)\n    c = c * math.cos(y) - c * math.sin(y)\n    c = c * math.sin(x) + c * math.cos(x)\n    return c",
    "def complex_to_polar(c):\n    return (c.real, c.imag)\n\n\nc = complex(3, -4)\nprint(complex_to_polar(c))",
    "import math\n\ndef complex2polar(x):\n    return math.atan2(x.imag,x.real)\n\nprint(complex2polar(3+4j))\nprint(complex2polar(-3+4j))\n\n\"\"\"\nTime Complexity: O(log(n))\nSpace Complexity: O(1)\n\"\"\"",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r,i\n\nr,i = complex_to_polar(3.5)\nprint(r)\nprint(i)",
    "import math\n\ndef complex_to_polar(complex_num):\n    r = math.sqrt(complex_num.real**2 + complex_num.imag**2)\n    phi = math.atan2(complex_num.imag, complex_num.real)\n    theta = math.degrees(phi)\n    return (r, theta)\n\n\nprint(complex_to_polar(complex(1, 2)))\nprint(complex_to_polar(complex(3, 4)))\nprint(complex_to_polar(complex(5, 6)))\nprint(complex_to_polar(complex(7, 8)))",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real**2 + c.imag**2)\n    phi = math.atan2(c.imag, c.real)\n    theta = math.degrees(phi)\n    return r, theta\n\nprint(complex_to_polar(complex(0, 0)))\nprint(complex_to_polar(complex(1, 0)))\nprint(complex_to_polar(complex(0, 1)))\nprint(complex_to_polar(complex(1, 1)))",
    "import math\n\ndef complex_to_polar(x):\n    return math.atan2(x.imag,x.real)\n\nprint(complex_to_polar(1+0j))\nprint(complex_to_polar(1-0j))\nprint(complex_to_polar(0+0j))\nprint(complex_to_polar(0-0j))",
    "import math\n\ndef complex_to_polar(c):\n    return math.atan2(c.real, c.imag)\n\n\nprint(complex_to_polar(complex(-3,2)))",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real**2 + c.imag**2)\n    theta = math.atan2(c.imag, c.real)\n    return r, theta\n\nif __name__ == \"__main__\":\n    c = complex(3, 4)\n    r, theta = complex_to_polar(c)\n    print(f\"r = {r}\")\n    print(f\"theta = {theta}\")",
    "import math\n\ndef complex_to_polar(c):\n    x = c.real\n    y = c.imag\n    return math.atan2(y, x)\n\nprint(complex_to_polar(complex(1, 2)))\nprint(complex_to_polar(complex(1, 3)))\nprint(complex_to_polar(complex(2, 3)))",
    "import math\n\n\ndef complex_to_polar(x):\n    return math.atan2(x.imag, x.real)\n\n\ndef polar_to_complex(x):\n    return x * math.cos(x) + x * math.sin(x)\n\n\nprint(complex_to_polar(1 + 1j))\nprint(polar_to_complex(1 + 1j))",
    "def polar_coords(x, y):\n    r = x.real\n    phi = x.imag\n    phi = (phi + 180) % 360\n    theta = y.real\n    theta = (theta + 90) % 360\n    return r, phi, theta\n\n\nr, phi, theta = polar_coords(5 + 3j, -3 + 4j)\nprint(f\"r = {r}\")\nprint(f\"phi = {phi}\")\nprint(f\"theta = {theta}\")",
    "def polar_coordinates(c):\n    \"\"\"\n    Complex to polar coordinates\n    \"\"\"\n    r = c.real\n    theta = c.imag\n    return r, theta\n\n\nif __name__ == \"__main__\":\n    c1 = complex(0, 0)\n    r1, theta1 = polar_coordinates(c1)\n    print(f\"r: {r1}, theta: {theta1}\")",
    "import math\nimport numpy as np\n\ndef complex_to_polar(c):\n    x = math.radians(c.real)\n    y = math.radians(c.imag)\n    return x,y\n\nif __name__ == \"__main__\":\n    c1 = complex(0,0)\n    c2 = complex(1,0)\n    c3 = complex(0,1)\n    c4 = complex(1,1)\n    print(complex_to_polar(c1))\n    print(complex_to_polar(c2))\n    print(complex_to_polar(c3))\n    print(complex_to_polar(c4))",
    "def complex_to_polar(c):\n    r = c.real\n    theta = c.imag\n\n    return r, theta",
    "import math\n\n\ndef complex_to_polar(complex_num):\n    x = complex_num.real\n    y = complex_num.imag\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return r, theta\n\n\nif __name__ == '__main__':\n    complex_num = complex(2, 3)\n    r, theta = complex_to_polar(complex_num)\n    print(f'r: {r}')\n    print(f'theta: {theta}')",
    "def complex2polar(c):\n    r = c.real\n    i = c.imag\n    return (r, i)",
    "import math\n\ndef complex_to_polar(x):\n    return math.degrees(math.atan2(x.real, x.imag))\n\ndef polar_to_complex(p):\n    return complex(p*math.cos(math.pi/2), p*math.sin(math.pi/2))\n\n\nprint(complex_to_polar(complex(0, 0)))\nprint(complex_to_polar(complex(-0.1, 0)))\nprint(complex_to_polar(complex(0, 1)))\nprint(complex_to_polar(complex(-0.1, 1)))",
    "def polar(c):\n    return c.real, c.imag",
    "import math\n\n\ndef complex2polar(c):\n    r = math.sqrt(c.real ** 2 + c.imag ** 2)\n    phi = math.atan2(c.imag, c.real)\n    theta = math.degrees(phi)\n    return (r, theta)\n\n\ndef polar2complex(r, theta):\n    c = complex(r * math.cos(theta), r * math.sin(theta))\n    return c",
    "def complex_to_polar(c):\n    return c.real, c.imag\n\n\ndef polar_to_complex(r, i):\n    return r * i\n\n\nif __name__ == \"__main__\":\n    c = complex(1, 2)\n    print(complex_to_polar(c))\n    r = complex(3, 4)\n    print(polar_to_complex(r, 1))",
    "import math\n\ndef complex_to_polar(x):\n    if x.imag == 0:\n        return \"No complex number\"\n    else:\n        return math.atan2(x.real, x.imag)\n\n\nif __name__ == '__main__':\n    print(complex_to_polar(complex(0, 1)))\n    print(complex_to_polar(complex(2, -3)))\n    print(complex_to_polar(complex(1, -2)))\n    print(complex_to_polar(complex(-2, 3)))",
    "import math\nimport numpy as np\n\ndef complex_to_polar(c):\n    r = c.real\n    phi = c.imag\n    r_rad = math.radians(r)\n    phi_rad = math.radians(phi)\n    r_cos = math.cos(r_rad)\n    phi_cos = math.cos(phi_rad)\n    r_sin = math.sin(r_rad)\n    phi_sin = math.sin(phi_rad)\n    r_tan = math.tan(r_rad)\n    phi_tan = math.tan(phi_rad)\n    return [r_cos, r_sin, r_tan, phi_cos, phi_sin, phi_tan]\n\n\nif __name__ == '__main__':\n    print(complex_to_polar(complex(1, -1)))\n    print(complex_to_polar(complex(1, 0)))\n    print(complex_to_polar(complex(0, 1)))",
    "import math\n\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real ** 2 + c.imag ** 2)\n    theta = math.atan2(c.imag, c.real)\n    phi = math.degrees(theta)\n    return r, theta, phi\n\n\nc = complex(1, 1)\nr, theta, phi = complex_to_polar(c)\nprint(f\"The complex number is {c}\")\nprint(f\"The polar coordinates are {r}, {theta}, {phi}\")",
    "import math\n\ndef complex_to_polar(x, y, z):\n    r = math.sqrt(x*x + y*y + z*z)\n    theta = math.atan2(y, x)\n    phi = math.atan2(z, r)\n    return theta, phi\n\nprint(complex_to_polar(2, 2, 2))\n\nprint(complex_to_polar(2, -2, 2))\n\nprint(complex_to_polar(3, 3, 3))\n\nprint(complex_to_polar(-3, -3, -3))\n\nprint(complex_to_polar(1, 1, 1))\n\nprint(complex_to_polar(1, -1, 1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, 1, -1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, -1, 1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, 1, 1))\n\nprint(complex_to_polar(1, -1, 1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, 1, -1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, 1, 1))\n\nprint(complex_to_polar(1, 1, -1))\n\nprint(complex_to_polar(1, -1, 1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint(complex_to_polar(1, 1, 1))\n\nprint(complex_to_polar(1, -1, 1))\n\nprint(complex_to_polar(1, 1, -1))\n\nprint(complex_to_polar(1, -1, -1))\n\nprint",
    "def complex_to_polar(complex_num):\n    \"\"\"\n    Complex to polar\n    :param complex_num: complex number\n    :return: polar coordinates\n    \"\"\"\n    return complex_num.real, complex_num.imag\n\n\nif __name__ == \"__main__\":\n    print(complex_to_polar(complex(1, 2)))\n    print(complex_to_polar(complex(2, 1)))",
    "def complex_to_polar(c):\n    return c.real, c.imag",
    "import math\n\n\ndef polar_to_complex(r, theta):\n    c = math.cos(theta)\n    s = math.sin(theta)\n    return complex(r * c - s * math.sin(r), r * s + c * math.cos(r))\n\n\nprint(polar_to_complex(1, 0))",
    "def complex_to_polar(c):\n    x = c.real\n    y = c.imag\n\n    return x, y\n\n\nc = complex(3, -4)\nprint(complex_to_polar(c))",
    "def complex_to_polar(x, y):\n    return x*y.conjugate()\n\n\nprint(complex_to_polar(1, 1))\nprint(complex_to_polar(1, -1))\nprint(complex_to_polar(-1, 1))\nprint(complex_to_polar(-1, -1))",
    "import math\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real ** 2 + c.imag ** 2)\n    phi = math.atan2(c.imag, c.real)\n    theta = math.degrees(phi)\n    return r, theta\n\n\ndef polar_to_complex(r, theta):\n    c = math.cos(theta) * math.cos(r) + math.sin(theta) * math.sin(r)\n    return c\n\n\n\nif __name__ == '__main__':\n    print(\"Complex numbers to polar coordinates\")\n    print(\"---------------------------\")\n    c = complex(1, 2)\n    r, theta = complex_to_polar(c)\n    print(\"r = \", r, \"theta = \", theta)\n    print(\"---------------------------\")\n    c = polar_to_complex(r, theta)\n    print(\"r = \", r, \"theta = \", theta)",
    "import math\n\ndef complex_to_polar(x, y):\n    r = math.sqrt(x*x + y*y)\n    phi = math.atan2(y, x)\n    theta = math.degrees(phi)\n    return r, theta\n\nx = complex(1, -2)\ny = complex(2, -1)\nprint(complex_to_polar(x, y))",
    "import math\n\n\ndef complex_to_polar(c):\n    r = math.sqrt(c.real ** 2 + c.imag ** 2)\n    phi = math.atan2(c.imag, c.real)\n    theta = math.degrees(phi)\n\n    return r, theta\n\n\nc = complex(1, -2)\nr, theta = complex_to_polar(c)\nprint(r, theta)",
    "def complex_to_polar(complex_num):\n    return (complex_num.real, complex_num.imag)\n\n\nif __name__ == \"__main__\":\n    print(complex_to_polar(complex(1, 1)))",
    "import math\n\ndef complex_to_polar(c):\n    x = c.real\n    y = c.imag\n    r = math.sqrt(x*x + y*y)\n    theta = math.atan2(y, x)\n    phi = math.degrees(theta)\n    return r, phi\n\n\nc = complex(1, 1)\nr, phi = complex_to_polar(c)\nprint(f\"r = {r}, phi = {phi}\")",
    "import math\n\ndef complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r * math.pi / 180, i * 180 / math.pi\n\n\ndef main():\n    c = complex(2, 3)\n    print(complex_to_polar(c))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef complex_to_polar(c):\n\n    return (math.degrees(math.atan2(c.imag, c.real)), math.degrees(math.atan2(c.real, c.imag)))\n\n\nif __name__ == '__main__':\n    print(complex_to_polar(complex(-1 + 2j)))",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    return r*r + i*i\n\n\nprint(complex_to_polar(complex(0, 1)))\nprint(complex_to_polar(complex(0, -1)))\nprint(complex_to_polar(complex(-1, 0)))",
    "def complex2polar(complex_number):\n    c = complex_number.real\n    s = complex_number.imag\n    x = c * s\n    y = s * c\n    z = c * c\n    return x, y, z",
    "import math\n\ndef complex_to_polar(c):\n    x = c.real\n    y = c.imag\n    r = math.sqrt(x*x + y*y)\n    if r == 0:\n        return 0, 0\n    theta = math.acos(y/r)\n    phi = math.asin(x/r)\n    return theta, phi\n\nc = complex(2, 3)\nprint(complex_to_polar(c))",
    "def complex_to_polar(c):\n    \"\"\"\n    c: complex number\n    returns: polar coordinates\n    \"\"\"\n    r = c.real\n    y = c.imag\n    r = r * 2 * 3.141592653589793238462643383279502884197169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375105820974944592307815716939937510582097494459230781571693993751058209749445923078157169399375",
    "import math\n\ndef complex2polar(x):\n    x = x.real + 1j*x.imag\n    return x.real, x.imag\n\ndef polar2complex(x):\n    return complex(x.real, x.imag)\n\ndef complex2polar(x):\n    return math.atan2(x.imag, x.real)\n\ndef polar2complex(x):\n    return complex(math.degrees(math.atan2(x.imag, x.real)), math.degrees(math.asin(x.imag / x.real)))\n\ndef main():\n    print(complex2polar(complex(-1+0j)))\n    print(complex2polar(complex(1+0j)))\n    print(complex2polar(complex(0+0j)))\n    print(complex2polar(complex(0+0j)))\n\nif __name__ == \"__main__\":\n    main()",
    "def complex_to_polar(c):\n    return c.real, c.imag",
    "import numpy as np\n\ndef complex_to_polar(complex_num):\n    polar_num = np.arctan2(complex_num.imag, complex_num.real)\n    return polar_num\n\nprint(complex_to_polar(complex_num=np.complex(0, 1)))",
    "import math\n\ndef complex_to_polar(c):\n    return math.atan2(c.real, c.imag)\n\ndef polar_to_complex(p):\n    return math.sqrt(p ** 2 + 1)\n\ndef main():\n    complex_num = complex(0,0)\n    print(\"Complex number is: \", complex_num)\n    print(\"Polar coordinates is: \", complex_to_polar(complex_num))\n    print(\"Complex number is: \", polar_to_complex(complex_to_polar(complex_num)))\n\n\nif __name__ == '__main__':\n    main()",
    "def complex_to_polar(c):\n    r = c.real\n    i = c.imag\n    theta = 2*pi*r\n    phi = 2*pi*i\n    return theta, phi\n\nc = complex(1,2)\nprint(complex_to_polar(c))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}