{
  "problem": {
    "task_id": "MBPP/12",
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
    "test_list": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ],
    "challenge_test_list": [],
    "problem_id": 1
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sort_rows(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: void Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > 0:\n                matrix[i][j], matrix[i][j-1] = matrix[i][j-1], matrix[i][j]\n\n    return matrix",
    "def sort_rows(arr):\n    if len(arr) == 0:\n        return\n    m = len(arr)\n    n = len(arr[0])\n    for i in range(m):\n        for j in range(n):\n            arr[i][j] = sum(arr[i])\n    return arr\n\n\nif __name__ == '__main__':\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_rows(arr))",
    "def sort(mat):\n    for i in range(len(mat)):\n        for j in range(len(mat[0])):\n            sum = 0\n            for k in range(len(mat)):\n                sum += mat[k][j]\n            mat[i][j] = sum\n    return mat\n\n\ndef main():\n    mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort(mat))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sortMatrix(matrix):\n    rowSum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            rowSum += matrix[i][j]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = matrix[i][j] / rowSum\n    return matrix\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sortMatrix(matrix))",
    "def sort_matrix(matrix):\n    for i in range(len(matrix[0])):\n        for j in range(len(matrix)):\n            if matrix[j][i] > matrix[j][i+1]:\n                matrix[j], matrix[j+1] = matrix[j+1], matrix[j]\n\n    return matrix\n\n\nif __name__ == '__main__':\n    matrix = [[1, 3, 5, 7], [2, 4, 6, 8], [9, 8, 2, 3], [1, 2, 5, 3]]\n    print(sort_matrix(matrix))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[i][j] + min(matrix[i][j], matrix[j][i])\n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[i][j] % 10",
    "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if j == 0:\n                matrix[i][j] = matrix[i][j] + matrix[i][j - 1]\n            elif j == len(matrix[i]) - 1:\n                matrix[i][j] = matrix[i][j] + matrix[i][j - 1]\n            else:\n                matrix[i][j] = matrix[i][j] + max(matrix[i][j - 1], matrix[i][j - 2])\n\n    return matrix\n\n\nmatrix = [[3, 2, 1, 6], [5, 1, 3, 2], [2, 5, 4, 3]]\nprint(sort_matrix(matrix))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if len(matrix) < 2:\n            return\n\n        sum_row = [0] * len(matrix[0])\n        for row in matrix:\n            for i in range(len(row)):\n                sum_row[i] += row[i]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                matrix[i][j] = matrix[i][j] - sum_row[j]\n\n\n\n\na = Solution()\nprint(a.sortMatrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "def sort_rows(matrix):\n    sum_list = []\n    for row in matrix:\n        sum_list.append(sum(row))\n    return sorted(sum_list, reverse=True)\n\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\nprint(sort_rows(matrix))",
    "class Solution:\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if i == 0:\n                    matrix[i][j] += matrix[i][j+1]\n                elif i == m-1:\n                    matrix[i][j] += matrix[i+1][j]\n                else:\n                    matrix[i][j] += min(matrix[i+1][j], matrix[i][j+1])\n\n\na = Solution()\nb = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\na.sortMatrix(b)\nprint(b)",
    "def sort_matrix(matrix):\n    if len(matrix) == 0:\n        return\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] > matrix[i][i]:\n                matrix[i], matrix[i][j] = matrix[i][j], matrix[i][j]\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] > 0:\n                matrix[i][j] = 0\n\n    return matrix\n\n\nprint(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(sort_matrix([[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15]]))",
    "def sortMatrix(matrix):\n\t#Write your code here\n\tsum_sum = 0\n\tfor i in range(len(matrix)):\n\t\tfor j in range(len(matrix[0])):\n\t\t\tsum_sum += matrix[i][j]\n\tsorted_matrix = []\n\tfor i in range(len(matrix)):\n\t\tsorted_matrix.append([])\n\t\tfor j in range(len(matrix[0])):\n\t\t\tif sum_sum-matrix[i][j] < 0:\n\t\t\t\tsorted_matrix[i].append(matrix[i][j])\n\t\t\t\tsorted_matrix[len(sorted_matrix)-1].append(matrix[len(sorted_matrix)-1][j])\n\t\t\t\tsum_sum -= matrix[i][j]\n\t\t\telse:\n\t\t\t\tsorted_matrix[i].append(matrix[i][j])\n\t\t\t\tsum_sum += matrix[i][j]\n\treturn sorted_matrix\n\n\n\n\nif __name__ == '__main__':\n\tmatrix = [[1,2,3],[4,5,6],[7,8,9]]\n\tprint(sortMatrix(matrix))",
    "class Solution:\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if i < j:\n                    matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    matrix[i][j] = matrix[i][j] / matrix[i][i]\n        return matrix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    m = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    s.sortMatrix(m)\n    for i in range(len(m)):\n        print(m[i])",
    "def sort_by_sum(matrix):\n    # write your code here\n    return sorted(matrix, key=lambda row: sum(row))\n\n\nif __name__ == \"__main__\":\n    print(sort_by_sum([[2, 1, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "def matrix_sort(matrix):\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] > matrix[j][i]:\n                temp = matrix[i]\n                matrix[i] = matrix[j]\n                matrix[j] = temp\n    return matrix",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if len(matrix) < 2:\n            return\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i == 0 or j == 0:\n                    matrix[i][j] = matrix[i][j] + matrix[i-1][j] + matrix[i][j-1]\n                else:\n                    matrix[i][j] = min(matrix[i][j], matrix[i-1][j]+matrix[i][j-1])",
    "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: void Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] > matrix[j][i]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 5, 7, 10, 11], [2, 4, 8, 12, 13], [3, 6, 9, 16, 17], [4, 8, 10, 12, 15], [5, 9, 11, 13, 16]]\n    print(sort_matrix(matrix))",
    "def sort_by_sum(matrix):\n    # Fill this in.\n    return matrix",
    "def sort_rows(matrix):\n    total = sum(matrix)\n    sorted_rows = []\n    for row in matrix:\n        sorted_rows.append([total - i for i in row])\n    return sorted_rows\n\nprint(sort_rows([[1, 2, 3], [4, 5, 6]]))\nprint(sort_rows([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]))\nprint(sort_rows([[1, 2, 3, 4], [5, 6, 7, 8]]))",
    "def sort_rows(matrix):\n    # write your code here\n    rows = []\n    for row in matrix:\n        rows.append(row)\n    rows.sort(key=lambda row: sum(row))\n    for row in rows:\n        print(row)\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]]\n    sort_rows(matrix)",
    "def sort_matrix(matrix):\n    sum_of_rows = 0\n    for i in range(len(matrix)):\n        sum_of_rows += matrix[i][0]\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == sum_of_rows:\n                sorted_matrix.append([matrix[i][j], i])\n    return sorted_matrix\n\n\nmatrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\nprint(sort_matrix(matrix))",
    "def sort_matrix(m):\n    rows = len(m)\n    cols = len(m[0])\n    for i in range(rows):\n        for j in range(cols):\n            m[i][j] = m[i][j] + m[i][j-1]\n    return m\n\nif __name__ == \"__main__\":\n    print(sort_matrix([[2,3,1,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[2,3,1,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\n    print(sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,",
    "from typing import List\n\n\ndef sort_rows(matrix: List[List[int]]) -> List[int]:\n    sorted_rows = []\n    for i in range(len(matrix)):\n        sum_of_rows = 0\n        for j in range(len(matrix[i])):\n            sum_of_rows += matrix[i][j]\n        sorted_rows.append(sum_of_rows)\n    return sorted(sorted_rows)",
    "def sort_by_sum(matrix):\n    rows = len(matrix)\n    if rows == 0:\n        return []\n    col_sums = [0 for _ in range(rows)]\n    for i in range(rows):\n        for j in range(i, rows):\n            col_sums[j] += matrix[i][j]\n\n    sorted_rows = []\n    for i in range(rows):\n        sorted_rows.append(matrix[i])\n\n    sorted_rows.sort(key=lambda row: col_sums[i])\n    return sorted_rows\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_by_sum(matrix))\n    matrix = [[2, 3, 1], [3, 4, 6], [4, 5, 7]]\n    print(sort_by_sum(matrix))\n    matrix = [[1, 2, 3], [4, 5, 6]]\n    print(sort_by_sum(matrix))\n    matrix = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [111, 112, 113, 114, 115, 116, 117, 118,",
    "def sort_matrix(matrix):\n    # Sort the rows in ascending order\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if j > i:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n\n    # Print the sorted matrix\n    for row in matrix:\n        print(row)\n\n\nif __name__ == \"__main__\":\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)\n\n    m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort_matrix(m)",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n\n        m = len(matrix)\n        n = len(matrix[0])\n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] > 0:\n                    matrix[i][j] = matrix[i][j] * (n - 1)\n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] > 0:\n                    matrix[i][j] = matrix[i][j] // matrix[i][j]\n\n\nmatrix = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]\n]\n\ns = Solution()\ns.sortMatrix(matrix)\nprint matrix",
    "def sort_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_rows = 0\n    for i in range(rows):\n        sum_rows += matrix[i][i]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = matrix[i][j] / sum_rows\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_matrix(matrix))",
    "def sort_rows(matrix):\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    if len(matrix) == 0:\n        return []\n\n    sum_of_rows = [0] * len(matrix)\n    for row in matrix:\n        for i in range(len(row)):\n            sum_of_rows[i] += row[i]\n\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        sorted_matrix.append([sum_of_rows[i]])\n\n    return sorted_matrix\n\n\nif __name__ == '__main__':\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(sort_rows(matrix))",
    "def sort_rows(matrix):\n    if not matrix:\n        return []\n    n = len(matrix)\n    rows = []\n    for i in range(n):\n        rows.append([])\n        for j in range(n):\n            rows[i].append(matrix[i][j])\n    return sorted(rows, key=sum)\n\n\nif __name__ == \"__main__\":\n    print(sort_rows([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n        n = len(matrix)\n        for i in range(n):\n            for j in range(i+1, n):\n                matrix[i][j] += matrix[j][i]\n        for i in range(n):\n            for j in range(n-1, i, -1):\n                matrix[i][j] += matrix[j][i]",
    "def matrix_sort(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = matrix[i][j] + matrix[i][j-1]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[5, 3, -2],\n              [1, 4, -3],\n              [-4, -1, -2]]\n    print(matrix_sort(matrix))",
    "def sort_rows(matrix):\n    sum_rows = sum([row[0] for row in matrix])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] += sum_rows\n    return matrix",
    "def sort_rows(matrix):\n    sum_matrix = [0] * len(matrix)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            sum_matrix[i] += matrix[i][j]\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        sorted_matrix.append([])\n        for j in range(len(matrix[0])):\n            sorted_matrix[i].append(matrix[i][j] / sum_matrix[i])\n    return sorted_matrix\n\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_rows(matrix))",
    "def sort_rows(matrix):\n    n = len(matrix)\n    if n == 0:\n        return []\n\n    sum_row = 0\n    for i in range(n):\n        sum_row += matrix[i][i]\n\n    sorted_list = []\n    for i in range(n):\n        row = [matrix[i][j] for j in range(n)]\n        row.sort()\n        sorted_list.append(row)\n\n    return sorted_list\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_rows(matrix))",
    "def sort_by_sum(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] += matrix[i-1][j]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_by_sum(matrix))",
    "class Solution:\n    def sortMatrix(self, matrix):\n        # Write your code here\n        return sorted(matrix, key=lambda x: sum(x))\n\n\na = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nb = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\ns = Solution()\nprint(s.sortMatrix(a))\nprint(s.sortMatrix(b))",
    "def sort_matrix(matrix):\n    # Your code here\n    sum_rows = []\n    for row in matrix:\n        sum_rows.append(sum(row))\n    return sorted(sum_rows, reverse=True)\n\n\nprint(sort_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "from typing import List\n\n\ndef sort_rows(matrix: List[List[int]]) -> None:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i == 0:\n                matrix[0][j], matrix[i][j] = matrix[i][j], matrix[0][j]\n            else:\n                matrix[i][j] += matrix[i-1][j]\n\n\nif __name__ == \"__main__\":\n    assert sort_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [7, 8, 9],\n        [2, 3, 4],\n        [1, 5, 6],\n    ]\n    assert sort_rows([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [2, 3, 4, 5, 6],\n        [3, 4, 5, 6, 7],\n    ]",
    "def sort_by_sum(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: void Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] += matrix[i-1][j]\n    for i in range(len(matrix)):\n        matrix[i].sort()\n\n\nif __name__ == \"__main__\":\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]",
    "def sort_matrix(matrix):\n    sum_rows = sum(matrix[0])\n    for i in range(1, len(matrix)):\n        sum_rows += matrix[i][0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = matrix[i][j] / sum_rows\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4],\n              [5, 6, 7, 8],\n              [9, 10, 11, 12],\n              [13, 14, 15, 16]]\n    print(sort_matrix(matrix))",
    "def sort_by_sum(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if j == 0:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] += matrix[i - 1][j - 1]\n    return matrix",
    "def sort_rows(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i][0]\n    arr.sort(key = lambda x: x[0])\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            arr[i][j] = arr[i][j] / sum\n    return arr\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_rows(arr))",
    "def sort_rows(matrix):\n    # Fill this in.\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] += matrix[i][j-1]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\n    print(sort_rows(matrix))",
    "def sort_rows(matrix):\n    # write your code here\n    rows_sum = 0\n    for row in matrix:\n        rows_sum += sum(row)\n\n    rows = []\n    for row in matrix:\n        if sum(row) <= rows_sum:\n            rows.append(row)\n    return rows",
    "def sort_rows(matrix):\n    sum = 0\n    for row in matrix:\n        sum += row[0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = matrix[i][j] / sum\n    return matrix",
    "def matrix_sort(matrix):\n    sum_rows = sum(row for row in matrix)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == sum_rows:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matrix_sort(matrix))",
    "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > 0:\n                matrix[i][j], matrix[i][j-1] = matrix[i][j-1], matrix[i][j]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_matrix(matrix))",
    "def sort_rows(matrix):\n    \"\"\"\n    Sort the given matrix by sum of its rows\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i == j:\n                matrix[i][j] = matrix[i][j] + matrix[i][j+1]\n            else:\n                matrix[i][j] = max(matrix[i][j], matrix[i][j+1])\n    return matrix",
    "def sort_rows(matrix):\n    sum_rows = []\n    for row in matrix:\n        sum_rows.append(sum(row))\n    return sorted(sum_rows)\n\nif __name__ == \"__main__\":\n    print(sort_rows([[1,2,3],[4,5,6],[7,8,9]]))\n    print(sort_rows([[1,2,3],[4,5,6],[7,8,9]]))\n    print(sort_rows([[1,2,3],[4,5,6],[7,8,9]]))",
    "def matrix_sort(matrix):\n    # write your code here\n    # sort the rows in ascending order according to the sum of the rows\n    # return sorted(matrix, key=lambda x: sum(x))\n    return sorted(matrix, key=lambda x: sum(x))\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[2, 3, 4], [5, 6, 7], [8, 9, 10]]))",
    "def sort_rows(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > matrix[i][j - 1]:\n                matrix[i][j], matrix[i][j - 1] = matrix[i][j - 1], matrix[i][j]\n    return matrix\n\n\nif __name__ == '__main__':\n    print(sort_rows([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
    "def sort_rows(matrix):\n    sum_row = sum(row for row in matrix)\n    sorted_rows = []\n    for i in range(len(matrix)):\n        sorted_rows.append([row[i] for row in matrix])\n    return sorted(sorted_rows, key=lambda x: sum_row - x[i])\n\n\ndef main():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_rows(matrix))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        # if not matrix: return\n        # n = len(matrix)\n        # for i in range(n-1, -1, -1):\n        #     for j in range(i+1, n):\n        #         # if matrix[i][j] > matrix[i+1][j]:\n        #         #     matrix[i], matrix[j] = matrix[j], matrix[i]\n        #         # print i, j, matrix[i], matrix[j]\n        #         # print matrix\n        #         # print\n        #         # print matrix[i], matrix[j]\n        #         if matrix[i][j] > matrix[i+1][j]:\n        #             matrix[i], matrix[j] = matrix[j], matrix[i]\n        # print matrix\n\n        # O(n^2)\n        for i in range(len(matrix)):\n            for j in range(i+1, len(matrix)):\n                if matrix[i][j] > matrix[i+1][j+1]:\n                    matrix[i], matrix[j] = matrix[j], matrix[i]\n        # print matrix\n        # O(n)\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] > matrix[i+1][j+1]:\n                    matrix[i], matrix[j] = matrix[j], matrix[i]\n        print matrix\n\n\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\ns = Solution()\ns.sortMatrix(matrix)\nprint matrix",
    "def sort_rows(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] < matrix[i][j + 1]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_rows(matrix))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in range(n):\n            for j in range(m):\n                if i == j:\n                    matrix[i][j] = matrix[i][j] % m\n                else:\n                    matrix[i][j] = min(matrix[i][j], matrix[i][j-1] + matrix[i-1][j])\n        for i in range(n):\n            for j in range(m):\n                matrix[i][j] = matrix[i][j] % m\n\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\ns = Solution()\ns.sortMatrix(matrix)\nprint(matrix)",
    "class Solution:\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                matrix[j][i] += matrix[i][j]\n\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] = matrix[i][j] // matrix[i][i]\n\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] %= n\n\n        return matrix\n\n\n\nif __name__ == '__main__':\n    matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]\n    sol = Solution()\n    print(sol.sortMatrix(matrix))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i == 0:\n                    matrix[i][j] = 0\n                elif i == len(matrix) - 1:\n                    matrix[i][j] = 0\n                else:\n                    matrix[i][j] = matrix[i - 1][j] + matrix[i][j]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i == 0:\n                    matrix[i][j] = 0\n                elif i == len(matrix) - 1:\n                    matrix[i][j] = 0\n                else:\n                    matrix[i][j] = matrix[i][j] + matrix[i - 1][j]\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    solution = Solution()\n    solution.sortMatrix(matrix)\n    print(matrix)",
    "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: None Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    if len(matrix) == 0:\n        return\n\n    sum_of_rows = [0] * len(matrix[0])\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            sum_of_rows[j] += matrix[i][j]\n\n    index = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = matrix[i][j] - sum_of_rows[j]\n\n        index += 1\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    sort_matrix(matrix)\n    assert matrix == [[13, 14, 15, 16], [9, 10, 11, 12], [2, 3, 4, 5], [1, 6, 7, 8]]",
    "def sort_rows(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        sum += matrix[i]\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        sorted_matrix.append(matrix[i])\n    sorted_matrix.sort(key=lambda x: sum - x[i])\n    return sorted_matrix",
    "def sort_by_sum(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: None Do not return anything, modify arr in-place instead.\n    \"\"\"\n    if not arr:\n        return None\n    m = len(arr)\n    n = len(arr[0])\n    arr[:] = sorted(arr, key=lambda x: sum(x))\n    for i in range(m):\n        for j in range(n):\n            if j < m - 1:\n                arr[i][j] += arr[i + 1][j]\n            else:\n                arr[i][j] += arr[i][j - 1]\n\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    sort_by_sum(arr)\n    print(arr)",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    matrix[i][j] = 0\n                else:\n                    matrix[i][j] = matrix[i][j] + matrix[i][j-1]\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] > 0:\n                    matrix[i][j] = j\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] > 0:\n                    matrix[i][j] = 0\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] = matrix[i][j] % n\n\n\nif __name__ == \"__main__\":\n    matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n    s = Solution()\n    s.sortMatrix(matrix)\n    print matrix",
    "def sort(m):\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] > m[i][j + 1]:\n                m[i][j], m[i][j + 1] = m[i][j + 1], m[i][j]\n    return m\n\n\nm = [[4, 2, 8, 1], [5, 3, 7, 9], [1, 2, 5, 6], [3, 6, 8, 9]]\nprint(sort(m))",
    "def sort_rows(matrix):\n    if len(matrix) <= 1:\n        return matrix\n\n    sum_of_rows = [0] * len(matrix)\n\n    for i in range(len(matrix)):\n        sum_of_rows[i] = sum(matrix[i])\n\n    sorted_rows = []\n\n    for i in range(len(matrix)):\n        sorted_rows.append(matrix[i][sum_of_rows.index(sum(matrix[i]))])\n\n    return sorted_rows\n\n\nif __name__ == \"__main__\":\n    print(sort_rows([[2, 4, 6], [5, 8, 9], [1, 3, 7]]))",
    "def sort_matrix(m):\n    return sorted(m, key = lambda x: sum(x))",
    "def sort_rows(matrix):\n    if len(matrix) == 0:\n        return None\n    sum_rows = [0] * len(matrix[0])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            sum_rows[j] += matrix[i][j]\n    sorted_rows = sorted(range(len(sum_rows)), key=lambda k: sum_rows[k])\n    return [matrix[i] for i in sorted_rows]\n\n\nprint(sort_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def sort_matrix(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] += matrix[j][i]\n            else:\n                matrix[i][j] += min(matrix[j][i], matrix[i][j])\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[5, 4, 3, 2], [2, 3, 1, 0], [7, 6, 4, 8]]\n    print(sort_matrix(matrix))",
    "def sort_matrix(matrix):\n    sum_rows = 0\n    for row in matrix:\n        sum_rows += row[0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = matrix[i][j] / sum_rows\n    return matrix\n\n\nprint(sort_matrix([[1, 2, 3, 4, 5], [2, 4, 5, 6, 7], [3, 6, 7, 8, 9], [4, 8, 9, 10, 11], [5, 10, 11, 12, 13]]))",
    "def sort_matrix(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    sorted_matrix = [[0 for i in range(n)] for j in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            sorted_matrix[i][j] = matrix[i][j] + sorted_matrix[i - 1][j]\n\n    return sorted_matrix\n\n\nprint(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def sort_matrix(matrix):\n    sum_rows = []\n    for row in matrix:\n        sum_rows.append(sum(row))\n    sum_rows.sort()\n    for row in matrix:\n        print(row)\n    print(sum_rows)\n\n\nif __name__ == '__main__':\n    matrix = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n    sort_matrix(matrix)",
    "def sort_matrix(matrix):\n    sum_rows = []\n    for row in matrix:\n        sum_rows.append(sum(row))\n    sum_rows.sort()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = sum_rows[i]\n\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsort_matrix(matrix)\nprint(matrix)",
    "def sort_by_sum(matrix):\n    rows = []\n    for i in range(len(matrix)):\n        rows.append(sum(matrix[i]))\n    return sorted(rows)\n\n\nif __name__ == \"__main__\":\n    print(sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(sort_by_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = matrix[i][j] + matrix[i][j - 1]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16], [17, 18, 19, 20, 21]]\n    print(sort_matrix(matrix))",
    "def sort_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] > matrix[i][i]:\n                matrix[i][j], matrix[i][i] = matrix[i][i], matrix[i][j]\n    return matrix\n\nprint(sort_matrix([[1,2,3,4],[5,6,7,8]]))",
    "def sort_rows(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > matrix[i][j-1]:\n                matrix[i][j], matrix[i][j-1] = matrix[i][j-1], matrix[i][j]\n    return matrix\n\ndef main():\n    matrix = [[0,2,3,0],[2,4,1,6],[3,0,5,8],[0,6,0,8]]\n    print(sort_rows(matrix))\n\nmain()",
    "def sort_rows(matrix):\n    rows = [0] * len(matrix)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            rows[i] += matrix[i][j]\n    sorted_rows = [0] * len(matrix)\n    for i in range(len(matrix)):\n        sorted_rows[i] = rows[i]\n    return sorted_rows\n\n\nprint(sort_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def matrix_sort(matrix):\n    sum_rows = [0] * len(matrix)\n    for row in matrix:\n        for i in range(len(row)):\n            sum_rows[i] += row[i]\n    sorted_rows = []\n    for i in range(len(matrix)):\n        sorted_rows.append(sum_rows[i])\n    return sorted(sorted_rows)\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def sort_rows(matrix):\n    rows = len(matrix)\n    columns = len(matrix[0])\n\n    for row in range(rows):\n        for column in range(columns):\n            matrix[row][column] = matrix[row][column] + matrix[row][column+1] + matrix[row][column+2] + matrix[row][column+3]\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    m = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_rows(m))",
    "def matrix_sort(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: None Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    if len(matrix) == 0:\n        return\n\n    sum_rows = 0\n    for row in matrix:\n        sum_rows += sum(row)\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] < sum_rows:\n                matrix[i][j], matrix[sum_rows-i][j] = matrix[sum_rows-i][j], matrix[i][j]\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(matrix)\n    matrix_sort(matrix)\n    print(matrix)",
    "def sort_by_sum(m):\n    m = [[x for x in row] for row in m]\n    m.sort(key=lambda x: sum(x))\n    return m\n\n\nprint(sort_by_sum([[1,2,3,4,5],[2,4,6,8,10]]))",
    "def sort_matrix(matrix):\n    rows = len(matrix)\n    colums = len(matrix[0])\n    for i in range(rows):\n        for j in range(colums):\n            if matrix[i][j] > 0:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n\n\nprint(sort_matrix([[1, 2, 3], [4, 5, 6]]))",
    "def matrix_sort(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    sorted_matrix = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            sorted_matrix[i][j] = matrix[i][j] + sorted_matrix[i - 1][j]\n    return sorted_matrix\n\n\nif __name__ == \"__main__\":\n    print(matrix_sort([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "class Solution:\n    def sortMatrix(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix:\n            return\n        row_sums = [0] * len(matrix)\n        for i, row in enumerate(matrix):\n            row_sums[i] = sum(row)\n\n        for i in range(len(matrix)):\n            for j in range(len(row)):\n                matrix[i][j] = row_sums[j] - matrix[i][j]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    sol.sortMatrix(matrix)\n    print(matrix)",
    "def sort_rows(matrix):\n    sorted_matrix = []\n    for row in matrix:\n        sorted_matrix.append(sum(row))\n\n    return sorted_matrix\n\n\ndef main():\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_rows(matrix))\n\n\nif __name__ == '__main__':\n    main()",
    "def sort_rows(matrix):\n    # write your code here\n    sum_list = []\n    for row in matrix:\n        sum_list.append(sum(row))\n    return sorted(sum_list)\n\n\nprint(sort_rows([[1, 2, 3, 4], [5, 6, 7, 8]]))",
    "def sort_rows(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n\n\nif __name__ == '__main__':\n    matrix = [[2, 7, 1, 1], [3, 5, 1, 9], [3, 6, 2, 1]]\n    print(sort_rows(matrix))",
    "def sort_by_sum(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] > matrix[i][j+1]:\n                matrix[i][j], matrix[i][j+1] = matrix[i][j+1], matrix[i][j]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    print(sort_by_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "def sort_matrix(matrix):\n    # Your code here\n    # Return a list of sorted rows\n    sorted_rows = []\n    for i in range(len(matrix)):\n        sum_row = 0\n        for j in range(len(matrix[0])):\n            sum_row += matrix[i][j]\n        sorted_rows.append(sum_row)\n    return sorted_rows\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_matrix(matrix))",
    "def sort_matrix(matrix):\n    if not matrix or len(matrix) == 0:\n        return []\n\n    # calculate the sum of the rows\n    sum_rows = 0\n    for row in matrix:\n        sum_rows += sum(row)\n\n    # sort the rows according to the sum\n    matrix.sort(key=lambda row: sum(row))\n\n    return matrix\n\n\nif __name__ == \"__main__\":\n    assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9, 1, 2, 3]\n    assert sort_matrix([[2, 3, 1], [3, 1, 5], [1, 2, 5]]) == [1, 2, 3, 5, 3]\n    assert sort_matrix([[2, 3, 1], [3, 1, 5]]) == [1, 2, 3, 5]",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                matrix[i][j] = matrix[i][j] + sum(matrix[i])\n        return matrix\n\n\na = Solution()\nprint a.sortMatrix([[1,2,3],[4,5,6],[7,8,9]])",
    "def sort_matrix(matrix):\n    total = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            total += matrix[i][j]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = matrix[i][j] / total\n    return matrix\n\n\nprint(sort_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
    "class Solution(object):\n    def sortMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if matrix[i][j] > matrix[j][i]:\n                    matrix[i], matrix[j] = matrix[j], matrix[i]\n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[i][j] - matrix[j][i]\n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                matrix[i][j] = matrix[i][j] / matrix[j][i]\n\n        return matrix\n\n\na = Solution()\nb = [[1, 4, 2, 3, 5], [2, 3, 5, 1, 4]]\nprint(a.sortMatrix(b))",
    "def sort_by_sum(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: void Do not return anything, modify matrix in-place instead.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i == 0:\n                matrix[i][j] = sum(matrix[i][j:])\n            else:\n                matrix[i][j] += matrix[i-1][j]\n\n\nif __name__ == \"__main__\":\n    matrix = [[2, 5, 7], [3, 4, 6], [8, 9, 10]]\n    sort_by_sum(matrix)\n    print(matrix)",
    "def sort_rows(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    arr = [[0 for i in range(n)] for j in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            arr[i][j] = matrix[i][j]\n\n    for i in range(m):\n        for j in range(n):\n            arr[i][j] += arr[i][j-1]\n\n    return [x[0] for x in sorted(arr, key=lambda x: x[1])]\n\n\nif __name__ == \"__main__\":\n    assert sort_rows([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 9, 10, 11, 2, 3, 4, 5, 6, 7, 8]\n    assert sort_rows([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 9, 10, 11, 2, 3, 4, 5, 6, 7, 8]",
    "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > 0:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n\n\nif __name__ == \"__main__\":\n    matrix = [[4, 8, 2, 7, 1, 9],\n              [2, 5, 6, 3, 4, 8],\n              [1, 9, 8, 7, 6, 5],\n              [3, 4, 6, 2, 5, 1],\n              [7, 6, 5, 1, 3, 4],\n              [9, 4, 8, 3, 2, 7]]\n    print(sort_matrix(matrix))",
    "def sort_rows(arr):\n    rows = len(arr)\n    cols = len(arr[0])\n    res = [[] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            res[i].append(arr[i][j])\n    for i in range(rows):\n        for j in range(cols):\n            arr[i][j] = res[i][j]\n    return arr\n\n\narr = [[2, 3, 4, 5], [6, 7, 8, 9], [1, 2, 3, 4], [5, 6, 7, 8]]\nprint(sort_rows(arr))",
    "def sort_matrix(matrix):\n    if not matrix:\n        return\n    sum_row = 0\n    for i in range(len(matrix[0])):\n        sum_row += matrix[0][i]\n\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        sorted_row = []\n        for j in range(len(matrix[0])):\n            sorted_row.append(matrix[i][j])\n        sorted_matrix.append(sorted_row)\n\n    sorted_matrix = sorted(sorted_matrix, key=lambda x: x[sum_row])\n    return sorted_matrix\n\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(sort_matrix(matrix))",
    "def sort_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sorted_matrix = [[0 for col in range(cols)] for row in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0:\n                sorted_matrix[i][j] = matrix[i][j]\n            elif j == 0:\n                sorted_matrix[i][j] = matrix[i][0]\n            else:\n                sorted_matrix[i][j] = sorted_matrix[i - 1][j] + matrix[i][j]\n\n    return sorted_matrix\n\n\ndef test_function():\n    assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n\n\ntest_function()",
    "def sort_rows(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sum += matrix[i][j]\n    for i in range(len(matrix)):\n        matrix[i] = sorted(matrix[i], key=lambda x: sum - x)\n    return matrix\n\n\ndef main():\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(sort_rows(matrix))\n\n\nmain()",
    "def sort_matrix(matrix):\n    sum_rows = 0\n    for i in range(len(matrix)):\n        sum_rows += matrix[i][i]\n    sorted_rows = []\n    for i in range(len(matrix)):\n        sorted_rows.append(matrix[i][0])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] < sum_rows:\n                sorted_rows.append(matrix[i][j])\n                sum_rows -= matrix[i][j]\n    return sorted_rows\n\n\nif __name__ == \"__main__\":\n    print(sort_matrix([[2, 1, 5, 8], [4, 8, 5, 3], [6, 7, 1, 9]]))\n    print(sort_matrix([[2, 1, 5, 8], [4, 8, 5, 3], [6, 7, 1, 9]]))",
    "def sort_by_sum(matrix):\n    # write your code here\n    m = len(matrix)\n    for i in range(m):\n        for j in range(m):\n            if i == j:\n                matrix[i][j] = matrix[i][j] + matrix[j][i]\n            else:\n                matrix[i][j] = max(matrix[i][j], matrix[j][i])\n    return matrix"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}