{
  "problem": {
    "task_id": "MBPP/265",
    "prompt": "Write a function to split a list for every nth element.",
    "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
    "test_list": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ],
    "challenge_test_list": [],
    "problem_id": 254
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def split_list(list, n):\n    return list[n:] + list[:n]\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 3))",
    "def split(l, n):\n    return l[::n]\n\nprint(split([1,2,3,4,5,6,7,8,9], 3))\nprint(split([1,2,3,4,5,6,7,8,9], 4))\nprint(split([1,2,3,4,5,6,7,8,9], 5))\nprint(split([1,2,3,4,5,6,7,8,9], 6))\nprint(split([1,2,3,4,5,6,7,8,9], 7))",
    "def split(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_2(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_3(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_4(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_5(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_6(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_7(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_8(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_9(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]\n\n\ndef split_10(lst, n):\n    return [lst[i * n: (i + 1) * n] for i in range(len(lst) // n + 1)]",
    "def split_list(a, n):\n    return [a[i:i+n] for i in range(0, len(a), n)]",
    "def split_list(list_, nth):\n    return list_[nth::nth]",
    "def split_list_every_nth(lst, n):\n    res = []\n    for i in range(n):\n        res.append(lst[i::n])\n    return res\n\nif __name__ == \"__main__\":\n    assert split_list_every_nth([1,2,3,4,5,6,7,8,9], 5) == [[1,2,3,4,5], [6,7,8,9]]\n    assert split_list_every_nth([1,2,3,4,5,6,7,8,9], 4) == [[1,2,3,4,5], [6,7,8,9]]\n    assert split_list_every_nth([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3,4,5], [6,7,8,9]]\n    assert split_list_every_nth([1,2,3,4,5,6,7,8,9], 2) == [[1,2,3,4,5], [6,7,8,9]]\n    assert split_list_every_nth([1,2,3,4,5,6,7,8,9], 1) == [[1,2,3,4,5], [6,7,8,9]]",
    "def split(arr, n):\n    return [arr[i*n:(i+1)*n] for i in range(len(arr)//n)]",
    "def split_list(list_of_numbers, nth):\n    result = []\n\n    for i in range(nth):\n        result.append(list_of_numbers[i*len(list_of_numbers):(i+1)*len(list_of_numbers)])\n\n    return result\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list_nth(lst, n):\n    if n == 1:\n        return [lst[0]]\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 2\n    print(split_list_nth(lst, n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list(list, n):\n    return list[n:] + list[:n]\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(split_list(list, 2))",
    "def split_list(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]",
    "def split_list(l, n):\n    return [l[i * n:(i + 1) * n] for i in range(len(l) // n + 1)]",
    "def split_list(lst, n):\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i:i+n])\n    return res\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([1, 2, 3, 4, 5], 2))",
    "def split_list(list_, split_at):\n    return list_[split_at::split_at]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))",
    "def split_list(l, n):\n    return l[n:], l[:n]\n\nprint(split_list([1,2,3,4,5,6,7], 2))",
    "def split(l, n):\n    return [l[i * n : (i + 1) * n] for i in range(len(l) // n + 1)]\n\n\nl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(split(l, 2))",
    "def split_list(my_list, n):\n    return [my_list[i * n : (i + 1) * n] for i in range(len(my_list) // n + 1)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list, n):\n    return [list[i*n:(i+1)*n] for i in range(len(list)//n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1,2,3,4,5], 3))",
    "def split_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]",
    "def split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n\nprint(split([1, 2, 3, 4, 5], 2))\nprint(split([1, 2, 3, 4, 5], 3))\nprint(split([1, 2, 3, 4, 5], 4))\nprint(split([1, 2, 3, 4, 5], 5))\nprint(split([1, 2, 3, 4, 5], 6))\nprint(split([1, 2, 3, 4, 5], 7))\nprint(split([1, 2, 3, 4, 5], 8))\nprint(split([1, 2, 3, 4, 5], 9))\nprint(split([1, 2, 3, 4, 5], 10))",
    "import numpy as np\n\n\ndef split_list(n, arr, step=1):\n    result = []\n    for i in range(0, len(arr), step):\n        result.append(arr[i:i+step])\n    return result\n\n\ndef test_split_list():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 4\n    assert split_list(n, arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 2) == [1, 2, 3, 4]\n    assert split_list(n, arr, 3) == [1, 2, 3, 4, 5]\n    assert split_list(n, arr, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 5\n    assert split_list(n, arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 7\n    assert split_list(n, arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(n, arr, 4) == [1",
    "def split_list(a, n):\n    return [a[i::n] for i in range(n)]\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 5))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 6))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 7))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 8))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 9))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 3))",
    "def split_list(list, n):\n    return list[0::n] + list[1::n]",
    "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 3))",
    "def split_list(list_, split_num):\n    return [list_[i:i+split_num] for i in range(0, len(list_), split_num)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list_, n):\n    return list_[0:n] + list_[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(list, nth):\n    return list[0::nth] + list[1::nth]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 3, 4, 5, 6, 7]\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 4, 5, 6, 7]\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 4) == [1, 2, 3, 4, 5, 6, 7]\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 5) == [1, 2, 3, 4, 5, 6, 7]\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 6) == [1, 2, 3, 4, 5, 6, 7]",
    "def split_list_by(l,n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\nif __name__ == '__main__':\n    print(split_list_by([1,2,3,4,5],2))",
    "def split_list(my_list, n):\n    result = []\n    for i in range(0, len(my_list), n):\n        result.append(my_list[i:i + n])\n    return result\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 2))",
    "def split_list(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\ndef split_list_fast(l, n):\n    if len(l) == 0:\n        return [l]\n\n    mid = len(l)//2\n    return [l[:mid], l[mid:]]\n\n\ndef split_list_slow(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))",
    "def split_list(list, n):\n    if n == 1:\n        return [list[0]]\n    else:\n        return [list[i:i+n] for i in range(0, len(list), n)]\n\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(split_list(list, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_list(l, n):\n    return [l[i * n: (i + 1) * n] for i in range(len(l) // n + 1)]\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 3\n    print(split_list(l, n))",
    "def split_list(list, n):\n    return list[0:n] + list[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(arr, n):\n    # Your code here\n    return [arr[i:i+n] for i in range(0, len(arr), n)]",
    "def split_list(a, n):\n    if n == 1:\n        return [a]\n    else:\n        return [a[i:i+n] for i in range(0, len(a), n)]\n\n\ndef main():\n    l = [2, 7, 5, 6, 9, 9, 6, 5, 4, 3, 3, 2, 8, 5, 7, 9, 8]\n    print(split_list(l, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list(l, n):\n    l_size = len(l)\n    return [l[i:i + n] for i in range(0, l_size, n)]\n\nif __name__ == '__main__':\n    assert split_list([1, 2, 3, 4, 5], 3) == [1, 2], \"Test 1\"\n    assert split_list([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4], \"Test 2\"\n    assert split_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5], \"Test 3\"\n    assert split_list([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5], \"Test 4\"\n    assert split_list([1, 2, 3, 4, 5], 7) == [1, 2, 3, 4, 5], \"Test 5\"\n    assert split_list([1, 2, 3, 4, 5], 8) == [1, 2, 3, 4, 5], \"Test 6\"",
    "def split_list(list_, n):\n    return list_[n:] + list_[:n]\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(split_list(list1, 5))",
    "def split(lst, n):\n    return lst[::n]\n\n\nprint(split([1, 2, 3, 4, 5], 3))",
    "def split_list(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2, 3], [4, 5, 6, 7, 8, 9, 10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2], [3, 4], [5, 6, 7, 8, 9, 10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\n\nif __name__ == \"__main__\":\n    test_split_list()",
    "def split(l, n):\n    res = []\n    for i in range(0, len(l), n):\n        res.append(l[i:i+n])\n    return res\n\n\nprint(split([1, 2, 3, 4, 5], 3))\nprint(split([1, 2, 3, 4, 5], 2))\nprint(split([1, 2, 3, 4, 5], 1))",
    "def split_list(list, nth):\n    if nth == 1:\n        return list[:nth]\n    else:\n        return split_list(list[:nth], nth - 1) + [list[nth]]\n\n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(split_list(test_list, 3))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))",
    "def split_list(list, n):\n    return list[0:n] + list[n:]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list, n):\n    result = []\n    for i in range(0, len(list), n):\n        result.append(list[i : i + n])\n    return result\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))",
    "def split_list(l: list, n: int) -> list:\n    return l[0:n] + l[n:]\n\nprint(split_list([1,2,3,4,5,6], 3))",
    "def split_list(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list, n):\n    return list[0::n]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 2\n    print(split_list(list, n))",
    "def split_list(arr, n):\n    split_list = []\n    for i in range(0, len(arr), n):\n        split_list.append(arr[i:i+n])\n    return split_list\n\ndef test():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    assert split_list(arr, 4) == [[1,2,3], [4,5,6], [7,8,9], [10]]\n\nif __name__ == '__main__':\n    test()",
    "def split_list(list, n):\n    result = []\n    for i in range(n):\n        result.append(list[i::n])\n    return result\n\nprint(split_list([1,2,3,4], 2))",
    "def split_list(list, n):\n    if len(list) <= n:\n        return [list]\n\n    result = []\n    for i in range(0, len(list), n):\n        result.append(list[i:i + n])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5]\n    n = 3\n    print(split_list(list, n))",
    "def split_list(list,n):\n    return [list[i::n] for i in range(n)]\n\n\nlist = [1,2,3,4,5,6,7,8,9,10]\n\nprint(split_list(list,2))",
    "def split(l, n):\n    return l[0:n], l[n:]\n\nl = [1, 2, 3, 4, 5]\nn = 3\n\nprint(split(l, n))",
    "def split_list(l, n):\n    return l[::n]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))",
    "def split_list(arr, n):\n    return [arr[i:i + n] for i in range(0, len(arr), n)]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(arr, 4))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(arr, 5))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(arr, 1))",
    "def split_list(list_, n):\n    return [list_[i:i+n] for i in range(0, len(list_), n)]",
    "def split_list(l, n):\n    if len(l) == 1:\n        return [l]\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5))",
    "def split_list(a, n):\n    return [a[i:i+n] for i in range(0, len(a), n)]\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))",
    "def split_list(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))",
    "def split_list(l, n):\n    return l[0:n] + l[n+1:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split(lst, n):\n    if n == 1:\n        return [lst]\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n\n    return result\n\nprint(split([1, 2, 3, 4, 5, 6], 2))\nprint(split([1, 2, 3, 4, 5, 6], 3))\nprint(split([1, 2, 3, 4, 5, 6], 4))\nprint(split([1, 2, 3, 4, 5, 6], 5))\nprint(split([1, 2, 3, 4, 5, 6], 6))",
    "def split(lst, n):\n\treturn lst[:n] + lst[n:]\n\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))",
    "def split_list_every_nth(list, nth):\n    return [list[i:i+nth] for i in range(0, len(list), nth)]\n\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(split_list_every_nth(list, 3))",
    "def split_list(list, n):\n    # Your code here\n    return list[0:n] + list[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list, n):\n    return list[0::n]\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(split_list(l, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_list_by_every_nth(input_list, n):\n    return [input_list[i * n: (i + 1) * n] for i in range(len(input_list) // n)]\n\n\nif __name__ == \"__main__\":\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 5) == [[1], [2, 3], [4], [5]]\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 6) == [[1, 2, 3, 4, 5], [6]]\n    assert split_list_by_every_nth([1, 2, 3, 4, 5], 7) == [[1, 2, 3, 4, 5], [6, 7]]",
    "def split_list(list, n):\n    return [list[i*n:(i+1)*n] for i in range(len(list)/n)]\n\nprint(split_list([1,2,3,4,5], 3))\nprint(split_list([1,2,3,4,5], 4))\nprint(split_list([1,2,3,4,5], 5))",
    "def split_list(list_of_elements, nth):\n    if nth <= 0:\n        return list_of_elements\n    return [list_of_elements[i:i + nth] for i in range(0, len(list_of_elements), nth)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 6))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 7))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))",
    "def split_list(lst, n):\n    return lst[n::n]\n\n\nif __name__ == \"__main__\":\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print(split_list(lst, 5))\n    print(split_list(lst, 4))\n    print(split_list(lst, 3))\n    print(split_list(lst, 2))\n    print(split_list(lst, 1))",
    "def split_list(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n\nif __name__ == \"__main__\":\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 3\n    print(split_list(list_, n))",
    "def split_list(list, n):\n    if n == 0:\n        return [list[0]]\n    else:\n        return [list[i:i+n] for i in range(0, len(list), n)]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75",
    "def split_list(list, n):\n    return list[0:n] + list[n:]",
    "def split_list(list, nth):\n    return list[nth:nth+len(list)]\n\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],3))",
    "def split(n, lst):\n    return lst[::n]",
    "def split_list(list, n):\n    return list[0:n] + list[n:]",
    "def split_list(l, n):\n    return l[:n] + l[n:]",
    "def split_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))",
    "def split_list(list_, nth):\n    if nth == 0:\n        return list_\n    else:\n        return split_list(list_[nth:], nth - 1) + list_[:nth]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n\n\nif __name__ == '__main__':\n    main()",
    "def split_list(lst, n):\n    # split list into n lists\n    return [lst[i::n] for i in range(n)]\n\n\ndef test_split_list():\n    lst = [1, 2, 3, 4, 5]\n    assert split_list(lst, 1) == [1, 2, 3, 4, 5]\n    assert split_list(lst, 2) == [1, 2, 3, 4]\n    assert split_list(lst, 3) == [1, 2, 3, 4, 5]\n    assert split_list(lst, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(lst, 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(lst, 6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(lst, 7) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(lst, 8) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(lst, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nif __name__ == \"__main__\":\n    test_split_list()",
    "def split(list, n):\n    if n == 1:\n        return [list[0]]\n    else:\n        return list[0:n] + list[n:]\n\nif __name__ == \"__main__\":\n    print(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(l, n):\n    if n == 1:\n        return [l[0]]\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\nprint(split_list([1,2,3,4,5], 3))",
    "def split(list, nth):\n    if nth > len(list):\n        return list\n    else:\n        return list[0:nth] + list[nth+1:]\n\n\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "def split_list(list_, nth):\n    \"\"\"\n    :type list_: list\n    :type nth: int\n    :rtype: list\n    \"\"\"\n    if len(list_) == 0:\n        return list_\n    if nth == 0:\n        return [list_[0]]\n    else:\n        return [list_[i:i+nth] for i in range(0, len(list_), nth)]\n\n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    test_nth = 3\n    print(split_list(test_list, test_nth))",
    "def split_list(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 2))",
    "def split_list(list, n):\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint",
    "def split_list(list, n):\n    n = int(n)\n    return list[n:]+list[:n]\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 6))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 7))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 8))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 9))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 10))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 11))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 12))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 13))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 14))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,",
    "def split_list(list_to_split, nth):\n    if nth == 1:\n        return [list_to_split[0]]\n    else:\n        return list_to_split[0:nth] + list_to_split[nth:]\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))",
    "def split(l, n):\n    return [l[i:i + n] for i in range(0, len(l), n)]\n\n\nif __name__ == \"__main__\":\n    print(split([1, 2, 3, 4, 5], 3))\n    print(split([1, 2, 3, 4, 5], 4))\n    print(split([1, 2, 3, 4, 5], 5))",
    "def split_list(list, n):\n    if len(list) < n:\n        return [list]\n    return [list[i*n:(i+1)*n] for i in range(len(list)/n)]\n\nprint(split_list([1,2,3,4,5], 2))",
    "def split_list(l, n):\n    l_split = []\n    for i in range(0, len(l), n):\n        l_split.append(l[i:i + n])\n    return l_split\n\nprint(split_list([1, 2, 3, 4, 5], 3))",
    "def split_list(list, n):\n    return list[n:] + list[:n]\n\nprint(split_list([1, 2, 3, 4, 5], 2))",
    "def split_list(list, n):\n    return list[0:n] + list[n:]\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 3))\nprint(split_list([1,2,3,4,5,6,7,8,9], 5))\nprint(split_list([1,2,3,4,5,6,7,8,9], 7))\nprint(split_list([1,2,3,4,5,6,7,8,9], 10))",
    "def split_list(lst,n):\n    if n == 1:\n        return lst\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\n\nif __name__ == \"__main__\":\n    print(split_list([1,2,3,4,5,6,7,8,9,10],3))\n    print(split_list([1,2,3,4,5,6,7,8,9,10],2))\n    print(split_list([1,2,3,4,5,6,7,8,9,10],1))",
    "def split_list(list, n):\n    return list[0:n] + list[n:]",
    "def split(list, n):\n    return list[::n]\n\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(split(list, 3))",
    "def split_list(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}