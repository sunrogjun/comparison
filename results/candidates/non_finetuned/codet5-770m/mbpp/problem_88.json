{
  "problem": {
    "task_id": "MBPP/99",
    "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
    "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
    "test_list": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ],
    "challenge_test_list": [],
    "problem_id": 88
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution:\n    def decimalToBinary(self, decimal: int) -> str:\n        if decimal < 0:\n            return \"-1\"\n        if decimal == 0:\n            return \"0\"\n        ans = \"\"\n        while decimal > 0:\n            ans = str(decimal % 2) + ans\n            decimal //= 2\n        return ans[::-1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.decimalToBinary(0) == \"0\"\n    assert s.decimalToBinary(1) == \"1\"\n    assert s.decimalToBinary(2) == \"11\"\n    assert s.decimalToBinary(3) == \"101\"\n    assert s.decimalToBinary(4) == \"10101\"\n    assert s.decimalToBinary(5) == \"1000110\"\n    assert s.decimalToBinary(6) == \"0110\"\n    assert s.decimalToBinary(7) == \"011111\"\n    assert s.decimalToBinary(8) == \"111111\"\n    assert s.decimalToBinary(9) == \"11111111\"\n    assert s.decimalToBinary(10) == \"1111111111\"",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    else:\n        return str(num) + \" \" + decimal_to_binary(num // 2)\n\ndef main():\n    print(decimal_to_binary(0))\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def decimalToBinary(self, decimal):\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        if decimal == 0:\n            return \"0\"\n\n        binary_string = \"\"\n        while decimal!= 0:\n            binary_string += str(decimal % 2)\n            decimal //= 2\n        return binary_string\n\nprint Solution().decimalToBinary(12)",
    "def decimal_to_binary(dec):\n    if dec == 0:\n        return \"0\"\n    if dec == 1:\n        return \"1\"\n    if dec < 10:\n        return str(dec)\n    if dec > 10:\n        return str(dec) + \"0\"\n    if dec % 2 == 0:\n        return decimal_to_binary(dec // 2) + \"1\"\n    else:\n        return decimal_to_binary(dec // 2) + \"0\"\n\n\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(1201))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(901))\nprint(decimal_to_binary(911))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))\nprint(decimal_to_binary(9111))",
    "def convert_decimal(decimal_number):\n    return bin(decimal_number)[2:]\n\n\nprint(convert_decimal(10))\nprint(convert_decimal(0))\nprint(convert_decimal(0.5))\nprint(convert_decimal(0.1))\nprint(convert_decimal(0.001))",
    "def decimalToBinary(num):\n    if num == 0:\n        return \"0\"\n    else:\n        return str(num) + \" \" + decimalToBinary(num // 2)\n\n\nprint(decimalToBinary(7))",
    "def decimal_to_binary(n):\n    return bin(n)[2:]\n\ndef decimal_to_binary2(n):\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n) + \"1\"\n\nprint(decimal_to_binary2(10))\nprint(decimal_to_binary2(11))\nprint(decimal_to_binary2(12))\nprint(decimal_to_binary2(13))\nprint(decimal_to_binary2(14))\nprint(decimal_to_binary2(15))\nprint(decimal_to_binary2(16))\nprint(decimal_to_binary2(17))\nprint(decimal_to_binary2(18))\nprint(decimal_to_binary2(19))\nprint(decimal_to_binary2(20))\nprint(decimal_to_binary2(21))\nprint(decimal_to_binary2(22))\nprint(decimal_to_binary2(23))\nprint(decimal_to_binary2(24))\nprint(decimal_to_binary2(25))\nprint(decimal_to_binary2(26))\nprint(decimal_to_binary2(27))\nprint(decimal_to_binary2(28))\nprint(decimal_to_binary2(29))\nprint(decimal_to_binary2(30))\nprint(decimal_to_binary2(31))\nprint(decimal_to_binary2(32))\nprint(decimal_to_binary2(33))\nprint(decimal_to_binary2(34))\nprint(decimal_to_binary2(35))\nprint(decimal_to_binary2(36))\nprint(decimal_to_binary2(37))\nprint(decimal_to_binary2(38))\nprint(decimal_to_binary2(39))\nprint(decimal_to_binary2(40))\nprint(decimal_to_binary2(41))\nprint(decimal_to_binary2(42))\nprint(decimal_to_binary2(43))\nprint(decimal_to_binary2(44))\nprint(decimal_to_binary2(45))\nprint(decimal_",
    "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]\n\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(64))\nprint(decimal_to_binary(128))\nprint(decimal_to_binary(256))\nprint(decimal_to_binary(512))\nprint(decimal_to_binary(1024))\nprint(decimal_to_binary(2048))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(64192))",
    "class Solution:\n    def decimalToBinary(self, num: int) -> str:\n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = -num\n        result = []\n        while num!= 0:\n            result.append(str(num % 2))\n            num //= 2\n        return \"\".join(reversed(result))",
    "def decimal_to_binary(num: int) -> str:\n    num = bin(num)\n    return num[2:]\n\n\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2 ** 5))",
    "def decimal_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\nif __name__ == '__main__':\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(40))\n    print(decimal_to_binary(50))\n    print(decimal_to_binary(60))\n    print(decimal_to_binary(70))\n    print(decimal_to_binary(80))\n    print(decimal_to_binary(90))\n    print(decimal_to_binary(100))\n    print(decimal_to_binary(1000))\n    print(decimal_to_binary(10000))\n    print(decimal_to_binary(10000000))",
    "def decimal_to_binary(num):\n    num_str = str(num)\n    bin_num = []\n    for i in num_str:\n        bin_num.append(int(i))\n    return bin_num\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a decimal number: \"))\n    print(decimal_to_binary(num))",
    "def decimal_to_binary(dec):\n    bin_str = ''\n    while dec > 0:\n        bin_str += str(dec % 2)\n        dec //= 2\n    return bin_str\n\n\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(15))",
    "def decimal_to_binary(num):\n    binary = []\n    while num > 0:\n        binary.append(num % 2)\n        num = num // 2\n\n    return binary\n\n\nif __name__ == \"__main__\":\n    decimal = 10\n    print(decimal_to_binary(decimal))",
    "def decimal_to_binary(num):\n    binary_list = []\n    while num > 0:\n        binary_list.append(num % 2)\n        num = num // 2\n    return binary_list\n\nprint(decimal_to_binary(10))",
    "def decimal_to_binary(num):\n    num_str = str(num)\n    binary = \"\"\n    for i in range(len(num_str) - 1, -1, -1):\n        binary += num_str[i]\n\n    return binary\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2) == \"1\"\n    assert decimal_to_binary(3) == \"0\"\n    assert decimal_to_binary(4) == \"0\"\n    assert decimal_to_binary(5) == \"1\"\n    assert decimal_to_binary(6) == \"1\"\n    assert decimal_to_binary(7) == \"0\"\n    assert decimal_to_binary(8) == \"1\"\n    assert decimal_to_binary(9) == \"0\"\n    assert decimal_to_binary(10) == \"0\"",
    "def decimal_to_binary(num):\n    bin_str = \"\"\n    while num > 0:\n        bin_str += str(num % 2)\n        num = num // 2\n    return bin_str\n\n\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(5))",
    "def decimal2bin(decimal):\n    if decimal < 0:\n        return \"negative number\"\n    bin_string = \"\"\n    while decimal > 0:\n        bin_string += str(decimal % 2)\n        decimal //= 2\n    return bin_string\n\n\nprint(decimal2bin(3))\nprint(decimal2bin(-4))\nprint(decimal2bin(0))",
    "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    else:\n        return str(decimal) + \" \" + decimal_to_binary(decimal // 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(0))",
    "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    result = []\n    while decimal_number > 0:\n        result.append(str(decimal_number % 2))\n        decimal_number //= 2\n    return ''.join(reversed(result))\n\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(",
    "class Solution:\n    def decimalToBinary(self, decimal):\n        if decimal == 0:\n            return \"0\"\n        return self.binaryToDecimal(decimal)\n\n    def binaryToDecimal(self, num):\n        res = []\n        while num > 0:\n            res.append(num % 2)\n            num //= 2\n        return res[::-1]",
    "def decimal_to_binary(num):\n    # write your code here\n    return bin(num)[2:]\n\ndef test_case(num):\n    print(decimal_to_binary(num))\n\ntest_case(100)\ntest_case(10)\ntest_case(-100)\ntest_case(-10)\ntest_case(0)\ntest_case(1)\ntest_case(2)\ntest_case(3)\ntest_case(4)\ntest_case(5)\ntest_case(6)\ntest_case(7)\ntest_case(8)\ntest_case(9)\ntest_case(10)\ntest_case(11)\ntest_case(12)\ntest_case(13)\ntest_case(14)\ntest_case(15)\ntest_case(16)\ntest_case(17)\ntest_case(18)\ntest_case(19)\ntest_case(20)\ntest_case(21)\ntest_case(22)\ntest_case(23)\ntest_case(24)\ntest_case(25)\ntest_case(26)\ntest_case(27)\ntest_case(28)\ntest_case(29)\ntest_case(30)\ntest_case(31)\ntest_case(32)\ntest_case(33)\ntest_case(34)\ntest_case(35)\ntest_case(36)\ntest_case(37)\ntest_case(38)\ntest_case(39)\ntest_case(40)\ntest_case(41)\ntest_case(42)\ntest_case(43)\ntest_case(44)\ntest_case(45)\ntest_case(46)\ntest_case(47)\ntest_case(48)\ntest_case(49)\ntest_case(50)\ntest_case(51)\ntest_case(52)\ntest_case(53)\ntest_case(54)\ntest_case(55)\ntest_case(56)\ntest_case(57)\ntest_case(58)\ntest_case(59)\ntest_case(60)\ntest_case(61)",
    "def decimal_to_binary(num):\n    if num < 0:\n        raise Exception('Invalid input.')\n    elif num == 0:\n        return '0'\n    else:\n        return str(num)\n\n\ndef binary_to_decimal(binary):\n    if binary == '0':\n        return 0\n    else:\n        return int(binary[len(binary)-1])\n\n\nif __name__ == '__main__':\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(2) == '11'\n    assert decimal_to_binary(3) == '1010'\n    assert decimal_to_binary(4) == '1010100'\n    assert decimal_to_binary(5) == '10110100'\n    assert decimal_to_binary(6) == '1011100'\n    assert decimal_to_binary(7) == '10111100'\n    assert decimal_to_binary(8) == '10111101'\n    assert decimal_to_binary(9) == '101111011'\n    assert decimal_to_binary(10) == '101111011'\n    assert decimal_to_binary(11) == '101111011'\n    assert decimal_to_binary(12) == '101111011'\n    assert decimal_to_binary(13) == '101111011'\n    assert decimal_to_binary(14) == '101111011'\n    assert decimal_to_binary(15) == '101111011'\n    assert decimal_to_binary(16) == '101111011'\n    assert decimal_to_binary(17) == '101111011'\n    assert decimal_to_binary(18) == '101111011'\n    assert decimal_to_binary(19) == '101111011'\n    assert decimal_to_binary(20) == '101111011'\n    assert decimal_to_binary(21) == '101111011'\n    assert decimal_to_binary(22) == '101111011'\n    assert decimal_to_binary",
    "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    decimal = 10\n    print(decimal_to_binary(decimal))",
    "def decimal_to_binary(n):\n    # write your code here\n    if n == 0:\n        return '0'\n    if n < 0:\n        return '0' + decimal_to_binary(-n)\n    return '1' + decimal_to_binary(n//2)\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(-1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(-2))\nprint(decimal_to_binary(-3))\nprint(decimal_to_binary(-4))\nprint(decimal_to_binary(-5))\nprint(decimal_to_binary(-6))\nprint(decimal_to_binary(-7))\nprint(decimal_to_binary(-8))\nprint(decimal_to_binary(-9))\nprint(decimal_to_binary(-10))\nprint(decimal_to_binary(-11))\nprint(decimal_to_binary(-12))\nprint(decimal_to_binary(-13))\nprint(decimal_to_binary(-14))\nprint(decimal_to_binary(-15))\nprint(decimal_to_binary(-16))\nprint(decimal_to_binary(-17))\nprint(decimal_to_binary(-18))\nprint(decimal_to_binary(-19))\nprint(decimal_to_binary(-20))\nprint(decimal_to_binary(-21))\nprint(decimal_to_binary(-22))\nprint(decimal_to_binary(-23))\nprint(decimal_to_binary(-24))\nprint(decimal_to_binary(-25))\nprint(decimal_to_binary(-26))\nprint(decimal_to_binary(-27))\nprint(decimal_to_binary(-28))\nprint(decimal_to_binary(-29))\nprint(decimal_to_binary(-30))\nprint(decimal_to_binary(-31))\nprint(decimal_to_binary(-32))\nprint(decimal_to_binary(-33))\nprint(decimal_to_binary(-34))\nprint(decimal_to_binary(-35))\nprint(decimal_to_binary(-36))\nprint(decimal_to_binary(-37))",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    else:\n        return str(num % 2) + decimal_to_binary(num // 2)\n\n\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(0))",
    "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))",
    "def decimal_to_binary(decimal_num):\n    return bin(decimal_num)[2:]\n\n\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(-12))\nprint(decimal_to_binary(0x12))",
    "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n % 2) + decimal_to_binary(n // 2)\n\n\nprint(decimal_to_binary(5))",
    "def decimal2binary(num):\n    binary = []\n    while num > 0:\n        binary.append(str(num % 2))\n        num = num // 2\n    return binary\n\ndef decimal2binary2(num):\n    binary = []\n    while num > 0:\n        binary.append(str(num % 2))\n        num = num // 2\n    return \"\".join(binary)\n\nprint(decimal2binary(3))\nprint(decimal2binary2(3))",
    "def decimal_to_binary(decimal_number):\n    decimal_number = str(decimal_number)\n    binary = []\n    while len(decimal_number) > 0:\n        binary.append(decimal_number[len(decimal_number) - 1])\n        decimal_number = decimal_number[:len(decimal_number) - 1]\n    return binary\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(-1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary",
    "def decimal_to_binary(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    binary = \"\"\n    while n!= 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n\nif __name__ == '__main__':\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2) == \"11\"\n    assert decimal_to_binary(3) == \"101\"\n    assert decimal_to_binary(4) == \"10111\"\n    assert decimal_to_binary(5) == \"10110110111\"\n    assert decimal_to_binary(6) == \"1110110110111\"\n    assert decimal_to_binary(7) == \"1011011011111\"\n    assert decimal_to_binary(8) == \"101010101010111\"\n    assert decimal_to_binary(9) == \"101010101010111\"\n    assert decimal_to_binary(10) == \"101010101010111\"",
    "def decimalToBinary(num):\n    binary = []\n    while num > 0:\n        binary.append(str(num % 2))\n        num = num // 2\n    return binary[::-1]\n\nprint(decimalToBinary(10))",
    "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    binary_string = []\n    while decimal!= 0:\n        binary_string.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary_string.reverse()\n    return \"\".join(binary_string)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))",
    "def decimal_to_binary(decimal_number):\n    result = \"\"\n\n    if decimal_number == 0:\n        return \"0\"\n\n    while decimal_number > 0:\n        result = str(decimal_number % 2) + result\n        decimal_number //= 2\n\n    return result\n\n\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))",
    "def decimalToBinary(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return str(n) +'' + decimalToBinary(n-1)\n\n\nprint(decimalToBinary(0))\nprint(decimalToBinary(1))\nprint(decimalToBinary(2))\nprint(decimalToBinary(3))\nprint(decimalToBinary(4))\nprint(decimalToBinary(5))\nprint(decimalToBinary(6))\nprint(decimalToBinary(7))\nprint(decimalToBinary(8))\nprint(decimalToBinary(9))\nprint(decimalToBinary(10))\nprint(decimalToBinary(11))\nprint(decimalToBinary(12))\nprint(decimalToBinary(13))\nprint(decimalToBinary(14))\nprint(decimalToBinary(15))\nprint(decimalToBinary(16))\nprint(decimalToBinary(17))\nprint(decimalToBinary(18))\nprint(decimalToBinary(19))\nprint(decimalToBinary(20))\nprint(decimalToBinary(21))\nprint(decimalToBinary(22))\nprint(decimalToBinary(23))\nprint(decimalToBinary(24))\nprint(decimalToBinary(25))\nprint(decimalToBinary(26))\nprint(decimalToBinary(27))\nprint(decimalToBinary(28))\nprint(decimalToBinary(29))\nprint(decimalToBinary(30))\nprint(decimalToBinary(31))\nprint(decimalToBinary(32))\nprint(decimalToBinary(33))\nprint(decimalToBinary(34))\nprint(decimalToBinary(35))\nprint(decimalToBinary(36))\nprint(decimalToBinary(37))\nprint(decimalToBinary(38))\nprint(decimalToBinary(39))\nprint(decimalToBinary(40))\nprint(decimalToBinary(41))\nprint(decimalToBinary(42))\nprint(decimalToBinary(43))\nprint(decimalToBinary(44))\nprint(decimalToBinary(45))\nprint(decimalToBinary(46))\nprint(decimalToBinary(47))\nprint(decimalToBinary(48))\nprint(decimalToBinary(49))",
    "class Solution(object):\n    def decimalToBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        while n > 0:\n            res += str(n % 2)\n            n //= 2\n        return res[::-1]",
    "class Solution(object):\n    def decimalToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        res = []\n        while num:\n            res.append(str(num % 2))\n            num = num // 2\n        return \"\".join(res[::-1])\n\n\nif __name__ == '__main__':\n    assert Solution().decimalToBinary(1) == \"0\"\n    assert Solution().decimalToBinary(2) == \"1\"\n    assert Solution().decimalToBinary(3) == \"1\"\n    assert Solution().decimalToBinary(4) == \"0\"\n    assert Solution().decimalToBinary(5) == \"0\"\n    assert Solution().decimalToBinary(6) == \"0\"\n    assert Solution().decimalToBinary(7) == \"1\"\n    assert Solution().decimalToBinary(8) == \"1\"\n    assert Solution().decimalToBinary(9) == \"1\"\n    assert Solution().decimalToBinary(10) == \"1\"\n    assert Solution().decimalToBinary(11) == \"1\"\n    assert Solution().decimalToBinary(12) == \"1\"\n    assert Solution().decimalToBinary(13) == \"1\"\n    assert Solution().decimalToBinary(14) == \"0\"\n    assert Solution().decimalToBinary(15) == \"0\"\n    assert Solution().decimalToBinary(16) == \"0\"\n    assert Solution().decimalToBinary(17) == \"0\"\n    assert Solution().decimalToBinary(18) == \"0\"\n    assert Solution().decimalToBinary(19) == \"0\"\n    assert Solution().decimalToBinary(20) == \"0\"\n    assert Solution().decimalToBinary(21) == \"0\"\n    assert Solution().decimalToBinary(22) == \"0\"\n    assert Solution().decimalToBinary(23) == \"1\"\n    assert Solution().decimalToBinary(24) == \"1\"\n    assert Solution().decimalToBinary(25) == \"1\"\n    assert Solution().decimalToBinary(26) == \"1\"\n    assert Solution().decimalToBinary(27) == \"1\"",
    "def decimal_to_binary(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '11'\n    if n == 3:\n        return '101'\n    if n == 4:\n        return '10111'\n    if n == 5:\n        return '101111'\n    if n == 6:\n        return '101011'\n    if n == 7:\n        return '1010111'\n    if n == 8:\n        return '10111111'\n    if n == 9:\n        return '1010111111'\n    if n == 10:\n        return '10111111111'\n    if n == 11:\n        return '1011111111'\n    if n == 12:\n        return '1011111111111'\n    if n == 13:\n        return '1011111111111'\n    if n == 14:\n        return '1011111111111'\n    if n == 15:\n        return '1011111111111'\n    if n == 16:\n        return '1011111111111'\n    if n == 17:\n        return '10111111111'\n    if n == 18:\n        return '10111111111'\n    if n == 19:\n        return '10111111111'\n    if n == 20:\n        return '10111111111'\n    if n == 21:\n        return '10111111111'\n    if n == 22:\n        return '10111111111'\n    if n == 23:\n        return '10111111111'\n    if n == 24:\n        return '10111111111'\n    if n == 25:\n        return '10111111111'\n    if n == 26:\n        return '10111111111'\n    if n == 27:\n        return '10111111111'\n    if n == 28:\n        return '10111111111'\n    if n == 29:\n        return '10111111111'\n    if n == 30:\n        return '10111111111'\n    if n == 31:\n        return '10111111111'\n    if n",
    "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\n\ndef main():\n    decimal = int(input(\"Enter a decimal number: \"))\n    print(f\"The binary equivalent of {decimal} is {decimal_to_binary(decimal)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(num):\n    binary_num = []\n    while num > 0:\n        binary_num.append(str(num % 2))\n        num = num // 2\n    return binary_num\n\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))",
    "def decimal_to_binary(num: int) -> str:\n    res = []\n    while num > 0:\n        res.append(str(num % 2))\n        num = num // 2\n    return ''.join(reversed(res))\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(3) == \"11\"\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(-1) == \"-1\"",
    "def decimal_to_binary(num):\n    res = []\n    while num > 0:\n        res.append(num % 2)\n        num = num // 2\n    res.reverse()\n    return res\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(100))",
    "class Solution(object):\n    def decimalToBinary(self, decimal):\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        if decimal == 0:\n            return \"0\"\n        else:\n            return str(bin(decimal))[2:]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.decimalToBinary(8)",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    elif num < 0:\n        return \"-0\" + decimal_to_binary(-num)\n    else:\n        return str(num) + decimal_to_binary(num // 2)\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2) == \"10\"\n    assert decimal_to_binary(3) == \"100\"\n    assert decimal_to_binary(4) == \"101\"\n    assert decimal_to_binary(5) == \"1010\"\n    assert decimal_to_binary(6) == \"01010101\"\n    assert decimal_to_binary(7) == \"0101010101\"\n    assert decimal_to_binary(8) == \"0101010101\"\n    assert decimal_to_binary(9) == \"010101010101\"\n    assert decimal_to_binary(10) == \"010101010101\"\n    assert decimal_to_binary(11) == \"010101010101\"\n    assert decimal_to_binary(12) == \"010101010101\"\n    assert decimal_to_binary(13) == \"01010101010101\"\n    assert decimal_to_binary(14) == \"01010101010101\"\n    assert decimal_to_binary(15) == \"01010101010101\"\n    assert decimal_to_binary(16) == \"0101010101010101\"\n    assert decimal_to_binary(17) == \"01010101010101010101\"\n    assert decimal_to_binary(18) == \"01010101010101010101\"\n    assert decimal_to_binary(19) == \"010101010101010101010101\"\n    assert decimal_to_binary(20) == \"010101010101010101010101\"\n    assert decimal_to_binary(21) == \"01010101010101",
    "def decimal_to_binary(n):\n    return bin(n)\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(0))\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(13))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(17))\n    print(decimal_to_binary(18))\n    print(decimal_to_binary(19))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(21))\n    print(decimal_to_binary(22))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(31))\n    print(decimal_to_binary(32))\n    print(decimal_to_binary(33))\n    print(decimal_to_binary(34))\n    print(decimal_to_binary(35))\n    print(decimal_to_binary(36))\n    print(decimal_to_binary(37))\n    print(decimal_to_binary(38))",
    "def decimalToBinary(num):\n    res = []\n    while num:\n        res.append(num % 2)\n        num = num // 2\n    return res\n\nprint(decimalToBinary(2))\nprint(decimalToBinary(3))\nprint(decimalToBinary(4))",
    "def decimal_to_binary(n):\n    return bin(n)[2:]\n\n\nassert decimal_to_binary(3) == \"101\"\nassert decimal_to_binary(0) == \"0\"\nassert decimal_to_binary(-1) == \"1\"",
    "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    else:\n        return decimal_to_binary(num/2) + num%2\n\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(1024))",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    elif num == 1:\n        return \"1\"\n    else:\n        result = []\n        while num > 0:\n            result.append(num % 2)\n            num //= 2\n        return \"\".join(reversed(result))\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(4))",
    "def decimal_to_binary(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    res = ''\n    while num > 0:\n        res = str(num % 2) + res\n        num //= 2\n\n    return res[::-1]\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(2) == '11'\n    assert decimal_to_binary(3) == '10'\n    assert decimal_to_binary(4) == '01'\n    assert decimal_to_binary(5) == '0101'\n    assert decimal_to_binary(6) == '1111'\n    assert decimal_to_binary(7) == '1110101'\n    assert decimal_to_binary(8) == '11111111'\n    assert decimal_to_binary(9) == '1111111111'\n    assert decimal_to_binary(10) == '01111111'\n    assert decimal_to_binary(11) == '1111111111'\n    assert decimal_to_binary(12) == '111111111111'\n    assert decimal_to_binary(13) == '111111111111'\n    assert decimal_to_binary(14) == '111111111111'\n    assert decimal_to_binary(15) == '111111111111'\n    assert decimal_to_binary(16) == '111111111111'\n    assert decimal_to_binary(17) == '111111111111'\n    assert decimal_to_binary(18) == '111111111111'\n    assert decimal_to_binary(19) == '111111111111'\n    assert decimal_to_binary(20) == '111111111111'\n    assert decimal_to_binary(21) == '111111111111'\n    assert decimal_to_binary(22) == '111111111111'\n    assert decimal_to_binary(23) == '111111111111'\n    assert decimal_to_binary(24) == '111111111111'\n    assert decimal_to_binary(25) == '111111111111",
    "def decimal_to_binary(n):\n    binary = []\n    while n:\n        binary.append(n % 2)\n        n = n // 2\n    return binary\n\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint(decimal_to_binary(42))\nprint(decimal_to_binary(43))\nprint(decimal_to_binary(44))\nprint(decimal_to_binary(45))\nprint(decimal_to_binary(46))\nprint(decimal_to_binary(47))\nprint(decimal_to_binary(48))\nprint(decimal_to_binary(49))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(51))\nprint(decimal_",
    "class Solution(object):\n    def convert(self, decimal, base):\n        \"\"\"\n        :type decimal: int\n        :type base: int\n        :rtype: str\n        \"\"\"\n        if base == 1:\n            return str(decimal)\n        else:\n            return str(self.convert(decimal, base-1)) + self.convert(decimal//base, base)\n\n\nif __name__ == \"__main__\":\n    assert Solution().convert(1, 1) == \"0\"\n    assert Solution().convert(1, 2) == \"100\"\n    assert Solution().convert(1, 3) == \"1010\"\n    assert Solution().convert(1, 4) == \"11101\"\n    assert Solution().convert(0, 1) == \"0\"\n    assert Solution().convert(0, 2) == \"0\"\n    assert Solution().convert(0, 3) == \"0\"\n    assert Solution().convert(0, 4) == \"0\"",
    "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return str(num) +''\n\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint(decimal_to_binary(42))\nprint(decimal_to_binary(43))\nprint(decimal_to_binary(44))\nprint(decimal_to_binary(45))\nprint(decimal_to_binary(46))\nprint(decimal_to_binary(47))\nprint(decimal_to_binary(48))\nprint(decimal_to_binary(49))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(51))\nprint(decimal_to_binary",
    "def decimalToBinary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary[::-1]\n\nprint(decimalToBinary(0))\nprint(decimalToBinary(1))\nprint(decimalToBinary(2))\nprint(decimalToBinary(3))\nprint(decimalToBinary(4))\nprint(decimalToBinary(5))\nprint(decimalToBinary(6))\nprint(decimalToBinary(7))\nprint(decimalToBinary(8))\nprint(decimalToBinary(9))\nprint(decimalToBinary(10))\nprint(decimalToBinary(11))\nprint(decimalToBinary(12))\nprint(decimalToBinary(13))\nprint(decimalToBinary(14))\nprint(decimalToBinary(15))\nprint(decimalToBinary(16))\nprint(decimalToBinary(17))\nprint(decimalToBinary(18))\nprint(decimalToBinary(19))\nprint(decimalToBinary(20))\nprint(decimalToBinary(21))\nprint(decimalToBinary(22))\nprint(decimalToBinary(23))\nprint(decimalToBinary(24))\nprint(decimalToBinary(25))\nprint(decimalToBinary(26))\nprint(decimalToBinary(27))\nprint(decimalToBinary(28))\nprint(decimalToBinary(29))\nprint(decimalToBinary(30))\nprint(decimalToBinary(31))\nprint(decimalToBinary(32))\nprint(decimalToBinary(33))\nprint(decimalToBinary(34))\nprint(decimalToBinary(35))\nprint(decimalToBinary(36))\nprint(decimalToBinary(37))\nprint(decimalToBinary(38))\nprint(decimalToBinary(39))\nprint(decimalToBinary(40))\nprint(decimalToBinary(41))\nprint(decimalToBinary(42))\nprint(decimalToBinary(43))\nprint(decimalToBinary(44))\nprint(decimalToBinary(45))\nprint(decimalToBinary(46))\nprint(decimalToBinary(47))\nprint(decimalToBinary(48))\nprint(decimalToBinary(49))\nprint(decimalToBinary(50))\nprint(decimal",
    "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    if decimal == 1:\n        return '1'\n    if decimal < 10:\n        return str(decimal)\n    if decimal < 100:\n        return str(decimal) + '0'\n    return str(decimal) + '1'\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(100))",
    "class Solution(object):\n    def decimalToBinary(self, decimal):\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        if decimal == 0:\n            return \"0\"\n        binary = []\n        while decimal > 0:\n            binary.append(str(decimal % 2))\n            decimal = decimal // 2\n        return \"\".join(binary[::-1])",
    "def decimal_to_binary(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    if num == 0:\n        return \"0\"\n    res = \"\"\n    while num > 0:\n        res = str(num % 2) + res\n        num = num // 2\n    return res\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"0\"\n    assert decimal_to_binary(2) == \"1\"\n    assert decimal_to_binary(3) == \"1\"\n    assert decimal_to_binary(4) == \"1\"\n    assert decimal_to_binary(5) == \"1\"\n    assert decimal_to_binary(6) == \"1\"\n    assert decimal_to_binary(7) == \"1\"\n    assert decimal_to_binary(8) == \"1\"\n    assert decimal_to_binary(9) == \"1\"\n    assert decimal_to_binary(10) == \"1\"\n    assert decimal_to_binary(11) == \"1\"\n    assert decimal_to_binary(12) == \"1\"\n    assert decimal_to_binary(13) == \"1\"\n    assert decimal_to_binary(14) == \"1\"\n    assert decimal_to_binary(15) == \"0\"\n    assert decimal_to_binary(16) == \"0\"\n    assert decimal_to_binary(17) == \"0\"\n    assert decimal_to_binary(18) == \"0\"\n    assert decimal_to_binary(19) == \"0\"\n    assert decimal_to_binary(20) == \"0\"\n    assert decimal_to_binary(21) == \"0\"\n    assert decimal_to_binary(22) == \"0\"\n    assert decimal_to_binary(23) == \"0\"\n    assert decimal_to_binary(24) == \"0\"\n    assert decimal_to_binary(25) == \"0\"\n    assert decimal_to_binary(26) == \"0\"\n    assert decimal_to_binary(27) == \"0",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    elif num == 1:\n        return \"1\"\n    else:\n        return str(num) + \" \" + decimal_to_binary(num//2)\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(13))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(17))\n    print(decimal_to_binary(18))\n    print(decimal_to_binary(19))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(21))\n    print(decimal_to_binary(22))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(31))\n    print(decimal_to_binary(32))\n    print(decimal_to_binary(33))\n    print(decimal_to_binary(34))\n    print(decimal_to_binary(35))\n    print(decimal_to_binary(36))\n    print(decimal_",
    "def decimal_to_binary(num):\n    binary = []\n    while num > 0:\n        binary.append(num % 2)\n        num = num // 2\n    return binary\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint(decimal_to_binary(42))\nprint(decimal_to_binary(43))\nprint(decimal_to_binary(44))\nprint(decimal_to_binary(45))\nprint(decimal_to_binary(46))\nprint(decimal_to_binary(47))\nprint(decimal_to_binary(48))\nprint(decimal_to_binary(49))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(51))\nprint(decimal",
    "class Solution:\n    def decimalToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = []\n        while num > 0:\n            res.append(str(num % 2))\n            num = num // 2\n        res.reverse()\n        return '0' + ''.join(res)\n\n\ns = Solution()\nprint(s.decimalToBinary(4))",
    "def decimal_to_binary(num):\n    return bin(num)[2:]\n\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(10) == '100'\n    assert decimal_to_binary(11) == '101'\n    assert decimal_to_binary(100) == '1010'\n    assert decimal_to_binary(1010) == '101101'",
    "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary\n\n\nprint(decimal_to_binary(5))",
    "def decimal_to_binary(num):\n    res = \"\"\n    while num:\n        res = str(num % 2) + res\n        num //= 2\n    return res\n\n\nprint(decimal_to_binary(3))",
    "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    decimal_to_binary(5)",
    "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal_num!= 0:\n        decimal_num = decimal_num // 2\n        binary = str(decimal_num) + binary\n    return binary\n\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(0))",
    "def decimal_to_binary(dec):\n    # Base case\n    if dec == 0:\n        return \"0\"\n    # Recursive case\n    elif dec < 10:\n        return str(dec) + \" \" + decimal_to_binary(dec - 1)\n    else:\n        return str(dec) + \" \" + decimal_to_binary(dec - 10) + \" \" + decimal_to_binary(dec - 10)\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(10) == \"01\"\n    assert decimal_to_binary(11) == \"101\"\n    assert decimal_to_binary(12) == \"1101\"\n    assert decimal_to_binary(13) == \"11001\"\n    assert decimal_to_binary(14) == \"10101\"\n    assert decimal_to_binary(15) == \"10111\"\n    assert decimal_to_binary(16) == \"1011111\"\n    assert decimal_to_binary(17) == \"10111111011\"\n    assert decimal_to_binary(18) == \"10111111011\"\n    assert decimal_to_binary(19) == \"10111111011\"",
    "class Solution(object):\n    def decimalToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        num = abs(num)\n        res = ''\n        while num > 0:\n            res = str(num % 2) + res\n            num = num // 2\n        return res[::-1]\n\n\na = Solution()\nprint(a.decimalToBinary(1))\nprint(a.decimalToBinary(2))\nprint(a.decimalToBinary(3))\nprint(a.decimalToBinary(4))\nprint(a.decimalToBinary(5))\nprint(a.decimalToBinary(6))\nprint(a.decimalToBinary(7))\nprint(a.decimalToBinary(8))\nprint(a.decimalToBinary(9))\nprint(a.decimalToBinary(10))\nprint(a.decimalToBinary(11))\nprint(a.decimalToBinary(12))\nprint(a.decimalToBinary(13))\nprint(a.decimalToBinary(14))\nprint(a.decimalToBinary(15))\nprint(a.decimalToBinary(16))\nprint(a.decimalToBinary(17))\nprint(a.decimalToBinary(18))\nprint(a.decimalToBinary(19))\nprint(a.decimalToBinary(20))\nprint(a.decimalToBinary(21))\nprint(a.decimalToBinary(22))\nprint(a.decimalToBinary(23))\nprint(a.decimalToBinary(24))\nprint(a.decimalToBinary(25))\nprint(a.decimalToBinary(26))\nprint(a.decimalToBinary(27))\nprint(a.decimalToBinary(28))\nprint(a.decimalToBinary(29))\nprint(a.decimalToBinary(30))\nprint(a.decimalToBinary(31))\nprint(a.decimalToBinary(32))\nprint(a.decimalToBinary(33))\nprint(a.decimalToBinary(34))\nprint(a.decimalToBinary(35))\nprint(a.decimalToBinary(36))\nprint(a.decimalToBinary(",
    "class Solution:\n    def decimalToBinary(self, num: int) -> str:\n        if num == 0:\n            return '0'\n        ans = ''\n        while num > 0:\n            ans += str(num % 2)\n            num //= 2\n        return ans[::-1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.decimalToBinary(0))\n    print(s.decimalToBinary(1))\n    print(s.decimalToBinary(2))\n    print(s.decimalToBinary(3))\n    print(s.decimalToBinary(4))\n    print(s.decimalToBinary(5))\n    print(s.decimalToBinary(6))\n    print(s.decimalToBinary(7))\n    print(s.decimalToBinary(8))\n    print(s.decimalToBinary(9))\n    print(s.decimalToBinary(10))",
    "def decimal2bin(decimal):\n    if decimal == 0:\n        return \"0\"\n\n    if decimal < 0:\n        return \"-1\"\n\n    decimal = abs(decimal)\n\n    bin_number = \"\"\n\n    while decimal > 0:\n        bin_number = str(decimal % 2) + bin_number\n        decimal = decimal // 2\n\n    return bin_number[::-1]",
    "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    return f\"{n:b}\"\n\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint(decimal_to_binary(42))\nprint",
    "def decimal2bin(n):\n    if n == 0:\n        return '0'\n    if n < 0:\n        return '-0'\n    if n == 1:\n        return '1'\n    bin_str = ''\n    while n > 0:\n        bin_str += str(n % 2)\n        n //= 2\n    return bin_str[::-1]\n\n\nprint(decimal2bin(10))",
    "def dec_to_bin(dec):\n    if dec == 0:\n        return \"0\"\n    else:\n        return str(dec) + \" \" + dec_to_bin(dec//2)\n\ndec = int(input(\"Enter the decimal number: \"))\nprint(dec_to_bin(dec))",
    "def decimalToBinary(num):\n    if num == 0:\n        return '0'\n    return ''.join(str(int(num % 2)) for num in str(num))\n\n\nif __name__ == \"__main__\":\n    assert decimalToBinary(0) == '0'\n    assert decimalToBinary(1) == '1'\n    assert decimalToBinary(2) == '11'\n    assert decimalToBinary(3) == '101'\n    assert decimalToBinary(4) == '10101'\n    assert decimalToBinary(5) == '1010101'\n    assert decimalToBinary(6) == '10110101'\n    assert decimalToBinary(7) == '101011100'\n    assert decimalToBinary(8) == '101101101'\n    assert decimalToBinary(9) == '101011101'\n    assert decimalToBinary(10) == '101011111'\n    assert decimalToBinary(11) == '101011110'\n    assert decimalToBinary(12) == '10101111111'\n    assert decimalToBinary(13) == '1010111111111'\n    assert decimalToBinary(14) == '101011111111111'\n    assert decimalToBinary(15) == '101011111111111'\n    assert decimalToBinary(16) == '101011111111111'\n    assert decimalToBinary(17) == '10101111111111111'\n    assert decimalToBinary(18) == '101011111111111111111'\n    assert decimalToBinary(19) == '1010111111111111111111111'\n    assert decimalToBinary(20) == '10101111111111111111111111111'\n    assert decimalToBinary(21) == '101011111111111111111111111111111'\n    assert decimalToBinary(22) == '1010111111111111111111111111111111111'\n    assert decimalToBinary(23) == '1010111111111111111111111111111111111'\n    assert decimalToBinary(24) == '10101111111111111111111111111111111111111'\n    assert decimalToBinary(25) == '1010111111111111111111111111111111111'\n    assert decimalToBinary(26) == '101011111",
    "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    if decimal == 1:\n        return \"1\"\n    if decimal == 2:\n        return \"1\"\n    if decimal % 2 == 0:\n        return decimal_to_binary(decimal // 2) + \"0\"\n    else:\n        return decimal_to_binary(decimal // 2) + \"1\"\n\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal",
    "def decimal_to_binary(dec):\n    return bin(dec)[2:]\n\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))",
    "def decimal_to_binary(decimal_num):\n    return bin(decimal_num)\n\n\nprint(decimal_to_binary(3))",
    "def decimal2bin(num):\n    bin_str = ''\n    while num > 0:\n        bin_str += str(num % 2)\n        num //= 2\n    return bin_str\n\n\ndef decimal2bin_recursive(num):\n    if num == 0:\n        return '0'\n    elif num == 1:\n        return '1'\n    else:\n        return str(num % 2) + decimal2bin_recursive(num // 2)\n\n\ndef main():\n    print(decimal2bin(2))\n    print(decimal2bin_recursive(2))\n    print(decimal2bin(8))\n    print(decimal2bin_recursive(8))\n    print(decimal2bin(0))\n    print(decimal2bin_recursive(0))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimalToBinary(num):\n    binary = []\n    while num > 0:\n        binary.append(num % 2)\n        num //= 2\n\n    return binary\n\n\ndef binaryToDecimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += binary[i] * (2 ** i)\n\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(decimalToBinary(15))\n    print(binaryToDecimal([0, 1, 2, 3, 4, 5]))",
    "class Solution(object):\n    def decimalToBinary(self, decimal):\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        if decimal == 0:\n            return '0'\n        result = []\n        while decimal > 0:\n            result.append(str(decimal % 2))\n            decimal = decimal // 2\n        return ''.join(result)",
    "class Solution:\n    def decimalToBinary(self, decimal: int) -> str:\n        res = []\n        while decimal > 0:\n            digit = decimal % 2\n            res.append(str(digit))\n            decimal //= 2\n        res.reverse()\n        return \"\".join(res)\n\n\nif __name__ == \"__main__\":\n    print(Solution().decimalToBinary(1))",
    "def decimal_to_binary(num):\n    res = ''\n    while num:\n        res = str(num % 2) + res\n        num = num // 2\n    return res\n\n\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(64))\nprint(decimal_to_binary(128))\nprint(decimal_to_binary(256))\nprint(decimal_to_binary(512))\nprint(decimal_to_binary(1024))\nprint(decimal_to_binary(2048))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(524288))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_",
    "class Solution:\n    def decimalToBinary(self, num: int) -> str:\n        if num == 0:\n            return \"0\"\n        result = []\n        while num > 0:\n            result.append(num % 2)\n            num //= 2\n        return \"\".join(result[::-1])\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.decimalToBinary(0) == \"0\"\n    assert sol.decimalToBinary(1) == \"0\"\n    assert sol.decimalToBinary(2) == \"1\"\n    assert sol.decimalToBinary(3) == \"1\"\n    assert sol.decimalToBinary(4) == \"1\"\n    assert sol.decimalToBinary(5) == \"0\"\n    assert sol.decimalToBinary(6) == \"1\"\n    assert sol.decimalToBinary(7) == \"0\"\n    assert sol.decimalToBinary(8) == \"0\"\n    assert sol.decimalToBinary(9) == \"0\"\n    assert sol.decimalToBinary(10) == \"0\"",
    "def decimal_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\n\nprint(decimal_to_binary(4))",
    "def decimal_to_binary(num):\n    binary = []\n    while num:\n        binary.append(str(num % 2))\n        num //= 2\n    return''.join(binary)\n\n\ndef test():\n    assert decimal_to_binary(12) == \"100\"\n    assert decimal_to_binary(1) == \"0\"\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(-5) == \"0\"\n\n\ntest()",
    "class Solution:\n    def decimalToBinary(self, num):\n        return bin(num)[2:]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.decimalToBinary(12))\n    print(sol.decimalToBinary(-1))\n    print(sol.decimalToBinary(0))",
    "def decimal_to_binary(decimal_num):\n    # Your code here\n    if decimal_num == 0:\n        return \"0\"\n    else:\n        return str(bin(decimal_num))[2:]\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2) == \"10\"\n    assert decimal_to_binary(3) == \"100\"\n    assert decimal_to_binary(4) == \"101\"\n    assert decimal_to_binary(5) == \"1011\"\n    assert decimal_to_binary(6) == \"0100\"\n    assert decimal_to_binary(7) == \"0101\"\n    assert decimal_to_binary(8) == \"0111\"\n    assert decimal_to_binary(9) == \"01111\"",
    "def decimal2binary(decimal_num):\n    return bin(decimal_num)[2:]\n\nif __name__ == \"__main__\":\n    assert decimal2binary(0) == '0'\n    assert decimal2binary(1) == '1'\n    assert decimal2binary(2) == '1'\n    assert decimal2binary(3) == '1'\n    assert decimal2binary(4) == '0'\n    assert decimal2binary(5) == '0'\n    assert decimal2binary(6) == '0'\n    assert decimal2binary(7) == '0'\n    assert decimal2binary(8) == '0'\n    assert decimal2binary(9) == '0'\n    assert decimal2binary(10) == '0'\n    assert decimal2binary(11) == '1'\n    assert decimal2binary(12) == '1'\n    assert decimal2binary(13) == '1'\n    assert decimal2binary(14) == '1'\n    assert decimal2binary(15) == '1'\n    assert decimal2binary(16) == '1'\n    assert decimal2binary(17) == '1'\n    assert decimal2binary(18) == '1'\n    assert decimal2binary(19) == '1'\n    assert decimal2binary(20) == '1'\n    assert decimal2binary(21) == '1'\n    assert decimal2binary(22) == '1'\n    assert decimal2binary(23) == '1'\n    assert decimal2binary(24) == '0'\n    assert decimal2binary(25) == '0'\n    assert decimal2binary(26) == '0'\n    assert decimal2binary(27) == '0'\n    assert decimal2binary(28) == '0'\n    assert decimal2binary(29) == '0'\n    assert decimal2binary(30) == '0'\n    assert decimal2binary(31) == '0'\n    assert decimal2binary(32) == '0'\n    assert decimal2binary(33) == '0'\n    assert decimal2binary(34) == '0'\n    assert decimal2binary(35) == '0'\n    assert decimal2binary(36) ==",
    "def decimal_to_binary(decimal_num):\n    binary_num = \"\"\n    while decimal_num > 0:\n        binary_num += str(decimal_num % 2)\n        decimal_num //= 2\n    return binary_num\n\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint(decimal_to_binary(42))\nprint",
    "class Solution:\n    def decimalToBinary(self, decimal):\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        if decimal == 0:\n            return \"0\"\n\n        if decimal == 1:\n            return \"1\"\n\n        res = []\n        while decimal > 0:\n            res.append(str(decimal % 2))\n            decimal = decimal // 2\n\n        res.reverse()\n\n        return \"\".join(res)",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        while num > 0:\n            res += str(num % 2)\n            num //= 2\n        return res[::-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.toBinary(10)",
    "def decimal_to_binary(decimal_num):\n    binary = \"\"\n    while decimal_num:\n        binary += str(decimal_num % 2)\n        decimal_num = decimal_num // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    decimal_num = int(input(\"Enter a decimal number: \"))\n    print(f\"The binary equivalent of {decimal_num} is {decimal_to_binary(decimal_num)}\")",
    "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    res = \"\"\n    while num > 0:\n        res += str(num % 2)\n        num = num // 2\n    return res[::-1]\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a decimal number: \"))\n    print(decimal_to_binary(num))",
    "def decimal_to_binary(decimal_number):\n    binary_number = []\n    while decimal_number > 0:\n        binary_number.append(str(decimal_number % 2))\n        decimal_number = decimal_number // 2\n    return \" \".join(binary_number)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n    print(decimal_to_binary(10))",
    "def decimal_to_binary(num: int) -> str:\n    result = ''\n    while num > 0:\n        result = str(num % 2) + result\n        num //= 2\n    return result[::-1]\n\n\nif __name__ == '__main__':\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(2) == '1'\n    assert decimal_to_binary(5) == '11'\n    assert decimal_to_binary(6) == '10'\n    assert decimal_to_binary(7) == '100'\n    assert decimal_to_binary(8) == '101'\n    assert decimal_to_binary(9) == '011'\n    assert decimal_to_binary(10) == '10101'\n    assert decimal_to_binary(11) == '111111'\n    assert decimal_to_binary(12) == '111001'\n    assert decimal_to_binary(13) == '110101'\n    assert decimal_to_binary(14) == '111011'\n    assert decimal_to_binary(15) == '11111100'\n    assert decimal_to_binary(16) == '11011011'\n    assert decimal_to_binary(17) == '111111011'\n    assert decimal_to_binary(18) == '11111111'\n    assert decimal_to_binary(19) == '11111111011'",
    "class Solution:\n    def decimalToBinary(self, decimal: int) -> str:\n        if decimal == 0:\n            return '0'\n        result = []\n        while decimal:\n            result.append(str(decimal % 2))\n            decimal //= 2\n        return ''.join(result[::-1])",
    "def decimal_to_binary(dec_num):\n    binary = []\n    while dec_num > 0:\n        binary.append(dec_num % 2)\n        dec_num = dec_num // 2\n    return binary\n\n\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))",
    "def decimal_to_binary(decimal_num):\n    binary_num = \"\"\n    while decimal_num > 0:\n        binary_num += str(decimal_num % 2)\n        decimal_num /= 2\n    return binary_num\n\n\ndef main():\n    print(decimal_to_binary(0))\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def decimal_to_binary(num):\n    num = str(num)\n    num_list = []\n    for i in range(len(num)):\n        num_list.append(int(num[i]))\n    return num_list\n\n\nprint(decimal_to_binary(123))",
    "def decimal_to_bin(num):\n    if num < 0:\n        return \"-\" + decimal_to_bin(-num)\n    if num == 0:\n        return \"0\"\n    if num == 1:\n        return \"1\"\n    if num == 2:\n        return \"1\"\n    if num == 3:\n        return \"0\"\n    if num == 4:\n        return \"1\"\n    if num == 5:\n        return \"0\"\n    if num == 6:\n        return \"1\"\n    if num == 7:\n        return \"1\"\n    if num == 8:\n        return \"0\"\n    if num == 9:\n        return \"1\"\n    if num == 10:\n        return \"0\"\n    if num == 11:\n        return \"1\"\n    if num == 12:\n        return \"1\"\n    if num == 13:\n        return \"0\"\n    if num == 14:\n        return \"1\"\n    if num == 15:\n        return \"1\"\n    if num == 16:\n        return \"1\"\n    if num == 17:\n        return \"1\"\n    if num == 18:\n        return \"0\"\n    if num == 19:\n        return \"1\"\n    if num == 20:\n        return \"1\"\n    if num == 21:\n        return \"1\"\n    if num == 22:\n        return \"0\"\n    if num == 23:\n        return \"1\"\n    if num == 24:\n        return \"1\"\n    if num == 25:\n        return \"1\"\n    if num == 26:\n        return \"1\"\n    if num == 27:\n        return \"1\"\n    if num == 28:\n        return \"1\"\n    if num == 29:\n        return \"1\"\n    if num == 30:\n        return \"0\"\n    if num == 31:\n        return \"1\"\n    if num == 32:\n        return \"1\"\n    if num == 33:\n        return \"1\"\n    if num == 34:\n        return \"0\"\n    if num == 35:\n        return \"1\"\n    if num == 36:\n        return \"1"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}