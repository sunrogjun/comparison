{
  "problem": {
    "task_id": "MBPP/379",
    "prompt": "Write a function to find the surface area of a cuboid.",
    "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
    "test_list": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ],
    "challenge_test_list": [],
    "problem_id": 368
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def area(r, h, w):\n    area = (r ** 2 + h ** 2 + w ** 2) ** (1/2)\n    return area\n\nprint(area(10, 10, 10))",
    "def surface_area(r, h, theta):\n    return (r * r * r) / 2 + (h * h * h) / 2 + (theta * theta * theta) / 2\n\n\nprint(surface_area(10, 10, 10))",
    "def area(r, h):\n    return 3.14 * (r ** 2) + 2 * h * (r + h)\n\nprint(area(1, 1))\nprint(area(1, 2))\nprint(area(2, 1))\nprint(area(2, 2))\nprint(area(2, 3))\nprint(area(3, 1))\nprint(area(3, 2))\nprint(area(3, 3))",
    "def surface_area(length, width, height):\n    return length * width * height\n\nprint(surface_area(5, 3, 3))",
    "def surface_area(a, b, c):\n    return (a * b * c) / 2\n\n\nprint(surface_area(2, 4, 6))",
    "def surface_area(radius):\n    area = (4/3) * radius**3\n    return area\n\n\nprint(surface_area(5))",
    "def cuboid(x, y, z):\n    area = 0.5 * (x**2 + y**2 + z**2)\n    return area\n\nprint(cuboid(1, 2, 3))\nprint(cuboid(2, 2, 1))\nprint(cuboid(4, 5, 2))",
    "def surface_area(a, b, c):\n    return (a*b*c)/2\n\nprint(surface_area(3, 4, 2))",
    "def surface_area(r, theta, phi):\n    return r * r * r * (theta * theta + phi * phi)\n\n\nprint(surface_area(4, 0, 0))\nprint(surface_area(4, 0, 90))\nprint(surface_area(4, 90, 0))",
    "def surface_area(r, h, a):\n    return r * h * a\n\nprint(surface_area(1, 2, 3))",
    "def cuboid_area(r, h):\n    return r**2 * h**2",
    "def area_cuboid(a, b, c):\n    area = a * b * c\n    return area\n\n\ndef main():\n    a = float(input('Enter the area of the cuboid: '))\n    b = float(input('Enter the radius of the cuboid: '))\n    c = float(input('Enter the height of the cuboid: '))\n    print('The surface area of the cuboid is', area_cuboid(a, b, c))\n\n\nif __name__ == '__main__':\n    main()",
    "def surfaceArea(radius, height, width):\n    return (radius * radius) + (height * height) + (width * width)\n\n\ndef main():\n    print(\"surface area of cuboid = \", surfaceArea(3, 3, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def surface_area(n, m):\n    return (n * m) / 2\n\nprint(surface_area(4, 8))",
    "def cuboid_area(radius, height):\n    return 2 * radius * height",
    "def area(x, y, z):\n    return (x**2 + y**2 + z**2)**0.5\n\n\ndef main():\n    x = float(input(\"x: \"))\n    y = float(input(\"y: \"))\n    z = float(input(\"z: \"))\n    print(\"area:\", area(x, y, z))\n\n\nif __name__ == '__main__':\n    main()",
    "def area(r, theta, phi):\n    return r * r * (theta ** 2) * (phi ** 2)\n\n\ndef main():\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n    print(area(4, 1.57, 1.57))\n\n\nmain()",
    "from math import pi\n\ndef cuboid_area(r):\n    return pi * r**3\n\nprint(cuboid_area(4))\nprint(cuboid_area(3))\nprint(cuboid_area(2))",
    "def surface_area(r, theta, phi):\n    return (4 / 3) * r * (theta ** 2) * (phi ** 2)\n\n\ndef test():\n    assert surface_area(2, 0, 0) == 8\n    assert surface_area(1, 0, 0) == 4\n    assert surface_area(1, 1, 0) == 4\n    assert surface_area(2, 1, 1) == 2\n\n\nif __name__ == '__main__':\n    test()",
    "def surfaceArea(x, y, z):\n    area = ((x**2 + y**2 + z**2)**(0.5))**(1/2)\n    return area\n\n\nif __name__ == \"__main__\":\n    print(surfaceArea(1, 1, 1))\n    print(surfaceArea(3, 3, 3))\n    print(surfaceArea(2, 2, 2))\n    print(surfaceArea(5, 5, 5))",
    "from math import sqrt\n\ndef cuboid_area(radius, height, width):\n    return sqrt(((radius**2) + (height**2) + (width**2)))\n\nprint(cuboid_area(3,3,3))\nprint(cuboid_area(5,5,5))\nprint(cuboid_area(4,5,5))",
    "def area(l, r, h):\n    return l * r * h\n\n\nprint(area(5, 10, 5))",
    "def area(a, b, c):\n    return a * b * c\n\n\nprint(area(1, 2, 3))",
    "def area_cuboid(a, b, c):\n    area = (a * b * c) / 2\n    return area\n\nprint(area_cuboid(5, 5, 5))\nprint(area_cuboid(4, 4, 4))\nprint(area_cuboid(3, 3, 3))\nprint(area_cuboid(2, 2, 2))\nprint(area_cuboid(1, 1, 1))",
    "def surface_area(a, b, c):\n    return (a * b * c) / 2\n\nif __name__ == '__main__':\n    print(surface_area(3, 4, 6))",
    "def surfaceArea(x,y,z):\n    area = 0.5*(x**2+y**2+z**2)\n    return area\n\n\nprint(surfaceArea(10,10,10))",
    "def area_cuboid(r1, r2, r3):\n    return (r1*r2*r3)\n\nprint(area_cuboid(5, 5, 5))\nprint(area_cuboid(2, 2, 2))\nprint(area_cuboid(3, 3, 3))\nprint(area_cuboid(3, 3, 4))\nprint(area_cuboid(5, 5, 5))",
    "def surfaceArea(radius, area):\n    return (radius**2)*area",
    "def surface_area(radius):\n    area = radius * radius * 3.1415926535897932384626433832795028841971693993751058209749445923\n    return area\n\nprint(surface_area(3))",
    "def surfaceArea(a, b, c):\n    area = a * b * c\n    return area\n\nprint(surfaceArea(1, 2, 3))\nprint(surfaceArea(1, 2, 4))\nprint(surfaceArea(1, 2, 5))",
    "def area_cuboid(r):\n    return r**2\n\n\nprint(area_cuboid(5))",
    "from math import pi\n\n\ndef surfaceArea(r, theta, phi):\n    a = pi * r * r * r * r / 4\n    b = 2 * pi * r * r * r * r\n    c = pi * r * r * r * r\n    return a * b * c\n\n\ndef main():\n    r = float(input(\"Enter radius of the cuboid: \"))\n    theta = float(input(\"Enter the angle of the cuboid: \"))\n    phi = float(input(\"Enter the angle of the cuboid: \"))\n    print(\"The surface area of a cuboid is\", surfaceArea(r, theta, phi))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def surface_area(r, theta, phi):\n    r = r * r\n    theta = theta * theta\n    phi = phi * phi\n    return r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r",
    "def area(r, h, theta):\n    return r * h * theta\n\nprint(area(1, 1, 1))\nprint(area(2, 2, 1))\nprint(area(2, 2, 2))",
    "def area(a, b, c):\n    return (a * b + c * c) * 0.5\n\nprint(area(3, 4, 5))\nprint(area(4, 2, 3))",
    "def cuboid_area(radius, height, width):\n    area = (radius * radius + height * height + width * width) * 0.5\n    return area\n\n\nradius = float(input(\"Enter radius: \"))\nheight = float(input(\"Enter height: \"))\nwidth = float(input(\"Enter width: \"))\nprint(\"Area of cuboid is:\", cuboid_area(radius, height, width))",
    "def surface_area(r,h,w):\n    return r*r*h*w\n\nprint(surface_area(2,2,2))\nprint(surface_area(1,1,1))\nprint(surface_area(1,2,3))\nprint(surface_area(2,2,3))\nprint(surface_area(2,2,3))\nprint(surface_area(2,2,3))\nprint(surface_area(2,2,3))\nprint(surface_area(2,2,3))\nprint(surface_area(2,2,3))",
    "def surfaceArea(a, b, c):\n    return a * b * c",
    "import math\n\ndef cuboid_area(r, h):\n    return math.pi * r ** 2 * h ** 2\n\ndef main():\n    print(cuboid_area(3, 2))\n\nif __name__ == \"__main__\":\n    main()",
    "def surface_area(r):\n    a = 4 * r ** 2\n    return a\n\n\nr = float(input(\"Enter radius of the cuboid: \"))\nprint(\"The surface area of a cuboid is: \", surface_area(r))",
    "def surface_area(a, b, c):\n    area = (a * b * c) / 2\n    return area\n\n\nprint(surface_area(10, 10, 10))",
    "def cuboid_area(r, h, a):\n    return r*h*a\n\n\nprint(cuboid_area(4, 4, 2))",
    "def surface_area(radius, height):\n    return (radius ** 2) * height\n\n\nprint(surface_area(4, 3))",
    "def surfaceArea(r):\n    return (4/3) * r**3\n\n\nif __name__ == \"__main__\":\n    print(surfaceArea(3))",
    "def surface_area(r, h, a):\n    return (a*r*r)*(h*h)\n\n\nprint(surface_area(5, 4, 4))",
    "def surface_area(radius, height):\n    return 4 * radius * height",
    "def cuboid_area(r,h,w):\n    return (r*r)*(h*h)*(w*w)\n\nprint(cuboid_area(1,2,3))",
    "def surface_area(r, h):\n    return (r * r) + (h * h)\n\n\nprint(surface_area(3, 4))",
    "def surface_area(x1, y1, z1, x2, y2, z2):\n    return (x2 - x1) * (y2 - y1) * (z2 - z1)\n\n\nprint(surface_area(2, 2, 2, 1, 1, 1))\nprint(surface_area(1, 1, 2, 2, 3, 3))\nprint(surface_area(0, 0, 0, 0, 0, 0))",
    "def cuboid_area(r, h):\n    return (r * h) / 2\n\n\ndef main():\n    print(cuboid_area(2, 1))\n    print(cuboid_area(2, 2))\n    print(cuboid_area(2, 3))\n    print(cuboid_area(2, 4))\n    print(cuboid_area(2, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def surface_area(r, theta, phi):\n    return (r ** 2) * (np.sin(theta) ** 2) * (np.cos(phi) ** 2)\n\n\nprint(surface_area(r=8, theta=np.pi / 2, phi=np.pi / 2))",
    "def surface_area(r, h, w):\n    return r * h * w\n\n\nprint(surface_area(3, 4, 5))",
    "def cuboid_area(n, m):\n    r = n * m\n    return r\n\n\ndef test():\n    assert cuboid_area(4, 4) == 36\n    assert cuboid_area(2, 2) == 2\n    assert cuboid_area(2, 3) == 6\n    assert cuboid_area(1, 2) == 2\n    assert cuboid_area(4, 3) == 6\n    assert cuboid_area(4, 5) == 9\n    assert cuboid_area(2, 4) == 6\n    assert cuboid_area(4, 6) == 9\n    assert cuboid_area(2, 6) == 8\n    assert cuboid_area(2, 4) == 8\n    assert cuboid_area(3, 4) == 8\n    assert cuboid_area(3, 5) == 8\n    assert cuboid_area(3, 6) == 8\n    assert cuboid_area(3, 7) == 8\n    assert cuboid_area(4, 6) == 8\n    assert cuboid_area(4, 7) == 8\n    assert cuboid_area(4, 8) == 8\n    assert cuboid_area(4, 9) == 8\n    assert cuboid_area(4, 10) == 8\n    assert cuboid_area(4, 11) == 8\n    assert cuboid_area(4, 12) == 8\n    assert cuboid_area(3, 12) == 8\n    assert cuboid_area(3, 11) == 8\n    assert cuboid_area(3, 10) == 8\n    assert cuboid_area(3, 9) == 8\n    assert cuboid_area(4, 9) == 8\n    assert cuboid_area(4, 10) == 8\n    assert cuboid_area(4, 9) == 8\n    assert cuboid_area(4, 11) == 8\n    assert cuboid_area(4, 9) == 8\n    assert cuboid_area(4, 12) == 8\n    assert cuboid_area(4, 11) == 8",
    "def surfaceArea(a, b, c):\n    return a * b * c",
    "from math import pi, sqrt, atan2\n\ndef area(r, theta, phi):\n    a = (r**2) * pi * r * (2 * r * (1 - r)) / (r * r * (1 - r))\n    return a * (pi * r * r * (1 - r)) / (2 * r * r * (1 - r))\n\nr = float(input(\"r: \"))\ntheta = float(input(\"theta: \"))\nphi = float(input(\"phi: \"))\n\nprint(f\"Area of cuboid is {area(r, theta, phi):.2f}\")",
    "def surfaceArea(a,b,c):\n    return a*b*c\n\n\nprint(surfaceArea(3,2,1))",
    "def surfaceArea(r, theta, phi):\n    return r * r * np.sin(theta) * np.sin(phi)\n\n\ndef main():\n    print(surfaceArea(3, np.pi/4, np.pi/2))\n\n\nif __name__ == '__main__':\n    main()",
    "def surfaceArea(r, theta, phi):\n    s = 4 * r * r * r * (theta - phi)\n    return s\n\nr = float(input(\"radius of the cuboid: \"))\ntheta = float(input(\"theta of the cuboid: \"))\nphi = float(input(\"phi of the cuboid: \"))\n\narea = surfaceArea(r, theta, phi)\n\nprint(\"The surface area of a cuboid is\", area)",
    "def cuboid_area(r,h,a):\n    return r*h*a\n\n\n# Driver program to test above function\nr = float(input(\"Enter radius of the cuboid: \"))\nh = float(input(\"Enter height of the cuboid: \"))\na = float(input(\"Enter the area of the cuboid: \"))\nprint(\"The surface area of the cuboid is \", cuboid_area(r,h,a))",
    "def area(x,y,z):\n    return (x*x+y*y+z*z)**0.5\n\n\nprint(area(3,3,3))",
    "def cuboid(r, h, a):\n    return r * h * a\n\nprint(cuboid(1, 1, 1))\nprint(cuboid(1, 1, 0.5))\nprint(cuboid(1, 1, 0.5))\nprint(cuboid(1, 1, 1))",
    "from math import pi\n\ndef surfaceArea(r, h):\n    return (r * h) * pi\n\nprint(surfaceArea(2, 2))",
    "def surface_area(r, theta, phi):\n    a = (r**2 + theta**2 + phi**2)**(1/2)\n    return a\n\n\nif __name__ == \"__main__\":\n    print(surface_area(5, 6, 7))",
    "def surface_area(r, h):\n    return r * h\n\n\nprint(surface_area(1, 1))\nprint(surface_area(2, 1))\nprint(surface_area(3, 1))",
    "def surface_area(r, h):\n    return (r**2) * (h**2)\n\nprint(surface_area(1, 1))\nprint(surface_area(1, 2))\nprint(surface_area(2, 1))\nprint(surface_area(2, 2))\nprint(surface_area(2, 3))\nprint(surface_area(3, 1))\nprint(surface_area(3, 2))\nprint(surface_area(3, 3))\nprint(surface_area(4, 1))\nprint(surface_area(4, 2))\nprint(surface_area(4, 3))\nprint(surface_area(5, 1))\nprint(surface_area(5, 2))\nprint(surface_area(5, 3))",
    "def cuboid_area(length, width, height):\n    return (length * width) * (height * height)\n\n\nprint(cuboid_area(10, 10, 10))",
    "import math\n\ndef area(a, b, c):\n    return math.pi * (a**2 + b**2 + c**2)\n\n\nprint(area(3, 4, 5))",
    "import math\n\ndef area(r, theta, phi):\n    return math.pi * (r ** 2) * (math.cos(theta) * math.cos(phi))\n\nprint(area(r=3, theta=0, phi=0))\nprint(area(r=3, theta=math.pi/2, phi=math.pi/2))\nprint(area(r=3, theta=math.pi/4, phi=0))",
    "def surface_area(r,h):\n    return (r*r+h*h)**0.5\n\nprint(surface_area(4,8))",
    "def cuboid_area(r):\n    return (3.14 * r) ** 2\n\nprint(cuboid_area(1))",
    "def area(n):\n    area = 0.5 * (n**2)\n    return area\n\n\nprint(area(5))",
    "def cuboid_area(l, h, w):\n    a = l * h * w\n    return a\n\n\nprint(cuboid_area(1, 2, 3))",
    "def cuboid_area(r, h):\n    return (r**2 + h**2)**0.5\n\nprint(cuboid_area(10, 10))\nprint(cuboid_area(10, 20))\nprint(cuboid_area(20, 30))\nprint(cuboid_area(30, 40))",
    "def surface_area(radius, area):\n\treturn area * (radius * radius)\n\n\nif __name__ == \"__main__\":\n\tprint(surface_area(5, 3))\n\tprint(surface_area(1, 0.5))",
    "def area(n):\n    area = n*(n+1)*(2*n+1)//6\n    return area\n\nprint(area(4))\nprint(area(5))\nprint(area(6))",
    "def surface_area(r, theta, phi):\n    return (r**2)*(theta**2)*(phi**2)\n\nprint(surface_area(3, 2, 1))",
    "from math import pi\n\ndef surface_area(r, theta):\n    return pi*(r**2)*(theta**2)",
    "def surface_area(r, theta, phi):\n    r = r * (r + r) / 2\n    return r * (theta * theta + phi * phi) / 2\n\nr = float(input(\"Enter radius of the cuboid: \"))\ntheta = float(input(\"Enter the angle of the cuboid in radians: \"))\nphi = float(input(\"Enter the angle of the cuboid in radians: \"))\n\nprint(\"The surface area of the cuboid is \", surface_area(r, theta, phi))",
    "def surface_area(a, b, c):\n    return (a + b + c) * 0.5\n\n\nprint(surface_area(3, 4, 2))",
    "def cuboid_area(x, y, z):\n    return (x*x + y*y + z*z)**(1/2)\n\n\nprint(cuboid_area(2, 3, 4))",
    "def cuboid_area(r, theta):\n    \"\"\"\n    :type r: float\n    :type theta: float\n    :rtype: float\n    \"\"\"\n    return r**2*np.cos(theta)\n\n\nif __name__ == '__main__':\n    print(cuboid_area(5, np.pi/2))",
    "def area(r):\n    return 3.14 * r ** 2\n\nprint(area(1))\nprint(area(2))\nprint(area(3))\nprint(area(4))",
    "def surface_area(r, theta):\n    return r**2 * np.sin(theta)\n\nif __name__ == \"__main__\":\n    r = float(input(\"r: \"))\n    theta = float(input(\"theta: \"))\n    print(surface_area(r, theta))",
    "import math\n\ndef area(r, h):\n    a = math.pi * (r**2) * h\n    return a\n\nprint(area(1, 1))\nprint(area(1, 2))\nprint(area(2, 1))\nprint(area(2, 2))\nprint(area(3, 1))\nprint(area(3, 2))",
    "def surface_area(radius, height, width):\n\t# Write your code here\n\treturn (radius*radius*width)*(height*height)\n\n\nprint(surface_area(3, 4, 5))",
    "def surfaceArea(r, theta, phi):\n    r2 = r * r\n    theta2 = theta * theta\n    phi2 = phi * phi\n\n    return (r2 + theta2 + phi2) ** 0.5",
    "def surfaceArea(r,h,w):\n    r = r/2\n    h = h/2\n    w = w/2\n    return r*r + h*h + w*w\n\n\nprint(surfaceArea(3,2,3))",
    "def surface_area(radius, height):\n    return (radius * radius) * (height * height)\n\n\nif __name__ == \"__main__\":\n    print(surface_area(5, 5))",
    "def area(r, theta, phi):\n    return r**2 * (theta**2 + phi**2)",
    "from math import pi\n\ndef cuboid_area(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a * b * c) / 2\n\ndef test():\n    assert cuboid_area(3, 3, 3) == 7\n    assert cuboid_area(1, 2, 2) == 4\n    assert cuboid_area(1, 2, 1) == 1\n    assert cuboid_area(1, 2, 3) == 0\n    assert cuboid_area(1, 2, 4) == 0\n    assert cuboid_area(2, 3, 4) == 0\n    assert cuboid_area(2, 2, 3) == 0\n    assert cuboid_area(3, 2, 4) == 0\n    assert cuboid_area(3, 2, 1) == 0\n    assert cuboid_area(3, 1, 4) == 0\n\nif __name__ == '__main__':\n    test()",
    "def area(a, b, c):\n    return a * b * c\n\n\nprint(area(2, 2, 2))\nprint(area(1, 1, 1))",
    "def surface_area(r, h, b):\n    return r * h * b\n\n\nprint(surface_area(1.5, 3, 1.5))",
    "def cuboid_area(r, theta, phi):\n    area = 4 * r * r * (np.cos(theta) * np.cos(phi))\n    return area\n\nprint(cuboid_area(3, 0, 0))",
    "def cuboid_area(r, h, a):\n    return (r**2 + h**2 + a**2)**0.5\n\nprint(cuboid_area(1, 1, 1))",
    "def surface_area(r, theta, phi):\n    return r**2 * math.sin(theta) * math.sin(phi)\n\n\nprint(surface_area(0, 0, 0))\nprint(surface_area(0, math.pi / 2, 0))\nprint(surface_area(0, math.pi / 2, math.pi / 2))\nprint(surface_area(0, 0, math.pi / 4))",
    "def cuboid_area(radius):\n    return radius**2 * 3.14159\n\n\nprint(cuboid_area(5))",
    "def area(r,h,w):\n    return (r*r*r) + (h*h*h) + (w*w*w)\n\nprint(area(1,1,1))",
    "def area(r, theta, phi):\n    return (3 * r * r) / 2\n\n\nprint(area(1, 2, 3))\nprint(area(1, 3, 2))\nprint(area(2, 2, 3))\nprint(area(3, 3, 2))",
    "def area(r, theta, phi, alpha, beta):\n    return r * r * r * (alpha * alpha - beta * beta) / (4 * np.pi)\n\n\nprint(area(1, 0, 0, 0, 1))\nprint(area(1, 0, 0, 1, 0))\nprint(area(1, 0, 1, 0, 0))\nprint(area(1, 1, 0, 0, 0))\nprint(area(1, 1, 1, 0, 0))\nprint(area(1, 1, 1, 1, 0))\nprint(area(1, 1, 1, 1, 1))\nprint(area(1, 1, 1, 1, 1))\nprint(area(1, 1, 1, 1, 1))\nprint(area(1, 1, 1, 1, 1))\nprint(area(1, 1, 1, 1, 1))\nprint(area(1, 1, 1, 1, 1))",
    "def surfaceArea(r, h, w):\n    return (2 * r * h) + (2 * w * r)\n\n\nprint(surfaceArea(3, 3, 3))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}