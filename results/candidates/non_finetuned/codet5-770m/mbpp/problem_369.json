{
  "problem": {
    "task_id": "MBPP/380",
    "prompt": "Write a function to generate a two-dimensional array.",
    "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
    "test_list": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ],
    "challenge_test_list": [],
    "problem_id": 369
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def generate_array(n, m):\n    return [[0 for i in range(m)] for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(generate_array(n, m))",
    "def generate_array(n, m):\n    return [[0 for _ in range(n)] for _ in range(m)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3, 3))",
    "def generate_array(n):\n    return [[i for i in range(n)] for _ in range(n)]",
    "def generate_array(n):\n    return [[i, j] for i in range(n) for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(2))",
    "def generate_array(n):\n    return [[i, j] for i in range(n) for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(5))",
    "def generate_two_dimensional_array(n):\n    result = []\n    for i in range(n):\n        result.append([])\n    for i in range(n):\n        result[i].append(i)\n    return result\n\n\ndef main():\n    n = int(input(\"Enter the number of rows: \"))\n    print(generate_two_dimensional_array(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def generate_array(n):\n    return [[i * j for j in range(n)] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(2))",
    "def array_generator(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\n\n\ndef print_array(array):\n    for row in array:\n        print(row)\n\n\nif __name__ == '__main__':\n    print_array(array_generator(4, 4))",
    "def generate_array(n):\n    return [[int(i) for i in input().split()] for _ in range(n)]\n\n\nprint(generate_array(2))",
    "def generate_array(n, m):\n    return [[0 for x in range(m)] for y in range(n)]\n\n\ndef print_array(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            print(a[i][j], end=' ')\n        print()\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    a = generate_array(n, m)\n    print_array(a)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def array(n):\n    print(f\"[{n}]\\n\")\n    for i in range(n):\n        print(f\"{i} {i+1}\\n\")\n\n\narray(4)",
    "def generate_2d_array(n, m):\n    return [[0] * m for i in range(n)]\n\ndef test_generate_2d_array():\n    assert generate_2d_array(2, 3) == [[0, 0], [0, 0]]\n    assert generate_2d_array(3, 2) == [[0, 0, 0], [0, 0, 0]]\n    assert generate_2d_array(3, 4) == [[0, 0, 0, 0], [0, 0, 0, 0]]\n    assert generate_2d_array(2, 4) == [[0, 0, 0, 0], [0, 0, 0, 0]]\n\n\nif __name__ == '__main__':\n    test_generate_2d_array()",
    "def generate_array(n):\n    return [[i for i in range(n)] for _ in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3))",
    "def generate_2d_array(n):\n\treturn [[i for i in range(n)] for j in range(n)]\n\n\nif __name__ == \"__main__\":\n\tprint(generate_2d_array(5))",
    "def array2d(n, m):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(m):\n            arr[i].append(0)\n    return arr",
    "def generate_2d_array(n):\n    return [[i for i in range(n)] for i in range(n)]\n\n\ndef generate_2d_array_iterative(n):\n    return [[i for i in range(n)] for i in range(n)]\n\n\ndef generate_2d_array_recursive(n):\n    if n == 1:\n        return [[]]\n    else:\n        return [[i] + [j] for i in generate_2d_array_recursive(n - 1) for j in generate_2d_array(n - 1)]\n\n\nif __name__ == '__main__':\n    print(generate_2d_array(5))\n    print(generate_2d_array_iterative(5))\n    print(generate_2d_array_recursive(5))",
    "def array(n):\n    return [[i] * n for i in range(n)]",
    "def generate_array(n, m):\n    array = []\n    for i in range(n):\n        array.append([])\n        for j in range(m):\n            array[i].append(j)\n    return array\n\n\nprint(generate_array(3, 4))",
    "def generate_array(n):\n    return [list(map(int, input().split())) for _ in range(n)]\n\n\nif __name__ == '__main__':\n    print(generate_array(3))\n    print(generate_array(4))",
    "def array_2d(n, m):\n    if n > m:\n        return [array_2d(n-1, m) for _ in range(n)]\n    return [[0 for _ in range(m)] for _ in range(n)]\n\ndef print_array(array):\n    print('\\n'.join(''.join(str(row) for row in col) for col in array))\n\narray = array_2d(3, 3)\nprint_array(array)",
    "def generate_array(n):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(n):\n            arr[i].append(0)\n    return arr\n\n\narr = generate_array(5)\nprint(arr)",
    "def generate_two_dimensional_array(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: list\n    \"\"\"\n    return [[0] * m for _ in range(n)]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    array = generate_two_dimensional_array(n, m)\n    for row in array:\n        print(row)",
    "def generate_array(n, m):\n    return [[0 for i in range(m)] for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    array = generate_array(3, 3)\n    print(array)",
    "def generate_array(rows, cols):\n    array = []\n    for i in range(rows):\n        array.append([])\n        for j in range(cols):\n            array[i].append(0)\n    return array\n\narray = generate_array(3, 4)\nprint(array)",
    "def generate_array(n):\n    return [[i for i in range(n)] for j in range(n)]\n\n\ndef test_generate_array():\n    assert generate_array(5) == [[0, 1, 2, 3, 4, 5],\n                                    [6, 7, 8, 9, 10, 11],\n                                    [12, 13, 14, 15, 16, 17],\n                                    [18, 19, 20, 21, 22, 23],\n                                    [24, 25, 26, 27, 28, 29]]",
    "import numpy as np\n\ndef generate_array(size, num_of_elements):\n    return np.random.randint(low=0, high=num_of_elements, size=size).tolist()\n\n\nif __name__ == '__main__':\n    print(generate_array(10, 10))\n    print(generate_array(10, 20))",
    "def generate_array(rows, cols):\n    return [[i, j] for i in range(rows) for j in range(cols)]\n\n\nprint(generate_array(2, 4))",
    "def generate_array(n_rows, n_cols):\n    return [[None for i in range(n_cols)] for j in range(n_rows)]\n\n\nif __name__ == '__main__':\n    array = generate_array(2, 3)\n    print(array)",
    "import numpy as np\n\n\ndef generate_array(n_rows, n_cols):\n    return np.array(np.random.randint(0, 10, (n_rows, n_cols)))\n\n\nif __name__ == '__main__':\n    print(generate_array(3, 5))",
    "def create_array(n):\n    arr = []\n    for i in range(n):\n        arr.append(list())\n    return arr\n\ndef print_array(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            print(arr[i][j], end=\" \")\n        print(\"\")\n\n\ndef main():\n    n = int(input())\n    arr = create_array(n)\n    print_array(arr)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\nTime Complexity: O(n^2)\nSpace Complexity: O(n^2)\n\"\"\"",
    "import numpy as np\n\ndef generate_array(n, m):\n    return np.random.randn(n, m)",
    "def two_dimensional_array():\n    \"\"\"\n    A function to generate a two-dimensional array.\n    :return: A two-dimensional array\n    \"\"\"\n    # write your code here\n    return [[1,2,3],[4,5,6]]\n\nif __name__ == '__main__':\n    print(two_dimensional_array())",
    "def array_2d(n):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(n):\n            arr[i].append(None)\n    return arr\n\nprint(array_2d(2))",
    "def generate_two_dimensional_array(n):\n    return [[i for i in range(n)] for _ in range(n)]\n\n\nprint(generate_two_dimensional_array(5))",
    "import numpy as np\n\ndef generate_array(n, m):\n    return np.random.rand(n, m)\n\n\nif __name__ == '__main__':\n    n = 5\n    m = 5\n    arr = generate_array(n, m)\n    print(arr)",
    "def generate_array(n):\n    return [[i for i in range(n)] for i in range(n)]\n\ndef print_array(array):\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            print(array[i][j], end=\" \")\n        print()\n\nif __name__ == \"__main__\":\n    array = generate_array(4)\n    print_array(array)",
    "def generate_two_dimensional_array(rows, cols):\n    return [[0 for i in range(cols)] for j in range(rows)]",
    "def generate_array(n):\n    return [list(map(int, input().split())) for _ in range(n)]\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = generate_array(n)\n    print(arr)",
    "def generate_array(n):\n    return [[0 for x in range(n)] for y in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(2))",
    "def two_dimensional_array(n):\n    return [[i,j] for i in range(n) for j in range(n)]\n\nif __name__ == \"__main__\":\n    print(two_dimensional_array(3))",
    "import numpy as np\n\ndef generate_array(size):\n    return np.random.randint(0, 100, size)\n\n\nif __name__ == \"__main__\":\n    print(generate_array(5))",
    "def create_2d_array(n):\n    return [[i, j] for i in range(n) for j in range(n)]\n\n\nprint(create_2d_array(3))",
    "def generate_array(rows, columns):\n    return [[row[i] for row in range(rows)] for i in range(columns)]\n\nif __name__ == \"__main__\":\n    print(generate_array(2, 4))",
    "def generate_array(n, m):\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(i * j)\n        result.append(row)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(generate_array(4, 4))",
    "def generate_array(n):\n    return [[i for i in range(n)] for _ in range(n)]\n\n\nprint(generate_array(10))",
    "def generate_array(n):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(n):\n            arr[i].append(i)\n            arr[j].append(j)\n    return arr\n\n\nif __name__ == '__main__':\n    print(generate_array(3))",
    "def generate_array(n):\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    return a\n\nprint(generate_array(5))",
    "def two_dimensional_array(n):\n    return [[i for i in range(n)] for j in range(n)]\n\nprint(two_dimensional_array(2))",
    "import numpy as np\n\ndef generate_array(dim):\n    return np.array(np.random.randint(0,100,size=(dim,dim)), dtype=np.int8)",
    "def generate(n, m):\n    array = []\n    for i in range(n):\n        array.append([])\n        for j in range(m):\n            array[i].append(None)\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(generate(3, 4))",
    "def generate_array(rows, cols):\n    return [[i for i in range(cols)] for j in range(rows)]\n\n\narray = generate_array(5, 5)\nprint(array)",
    "def generate_2d_array(n):\n    \"\"\"\n    :type n: int\n    :rtype: list\n    \"\"\"\n    return [list(map(int, input().split())) for _ in range(n)]\n\n\nif __name__ == '__main__':\n    for i in generate_2d_array(3):\n        print(i)",
    "def generate_array(n):\n    return [[i for i in range(n)] for j in range(n)]\n\nprint(generate_array(5))\nprint(generate_array(3))\nprint(generate_array(7))",
    "def generate_array(size):\n    \"\"\"\n    :type size: int\n    :rtype: list\n    \"\"\"\n    result = []\n    for i in range(size):\n        result.append([])\n        for j in range(size):\n            result[i].append(0)\n    return result\n\n\nprint(generate_array(5))",
    "def create_array(num_rows, num_cols):\n    return [[None] * num_cols for _ in range(num_rows)]\n\n\nif __name__ == '__main__':\n    assert create_array(2, 2) == [[1, 1], [1, 1]]\n    assert create_array(3, 3) == [[1, 2, 3], [2, 3, 4], [3, 4, 5]]",
    "def two_dimensional_array(n):\n    # Write your code here\n    return [list(map(int, input().split())) for _ in range(n)]",
    "def array(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: list\n    \"\"\"\n    return [[0 for x in range(m)] for y in range(n)]\n\n\ndef main():\n    array_list = array(5, 3)\n    for x in range(len(array_list)):\n        for y in range(len(array_list[x])):\n            print(array_list[x][y], end=\" \")\n        print()\n\n\nif __name__ == \"__main__\":\n    main()",
    "def generate_array(n_rows, n_cols):\n    array = []\n    for i in range(n_rows):\n        row = []\n        for j in range(n_cols):\n            row.append(0)\n        array.append(row)\n    return array\n\n\nprint(generate_array(3, 4))",
    "def generate_array(n):\n    return [[i for i in range(n)] for j in range(n)]\n\nprint(generate_array(5))",
    "def generate_array(n, m):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(m):\n            arr[i].append(i)\n    return arr",
    "def generate_two_dimensional_array(n, m):\n    return [[0 for i in range(m)] for j in range(n)]",
    "def generate_array(rows, cols):\n    return [[None for _ in range(cols)] for _ in range(rows)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3, 5))",
    "def generate_array(rows, cols):\n    return [[None for col in range(cols)] for row in range(rows)]\n\n\nprint(generate_array(3, 4))",
    "def generate_two_dimensional_array(rows, columns):\n    \"\"\"\n    :type rows: int\n    :type columns: int\n    :rtype: list[list[int]]\n    \"\"\"\n\n    return [[i for i in range(columns)] for j in range(rows)]",
    "def generate_2d_array(n):\n    return [[int(x) for x in input().split()] for _ in range(n)]\n\n\nprint(generate_2d_array(4))",
    "def generate_array(n):\n    \"\"\"\n    :type n: int\n    :rtype: list\n    \"\"\"\n    return [[i, j] for i in range(n) for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    assert generate_array(2) == [[0, 0], [0, 0]]\n    assert generate_array(3) == [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    assert generate_array(4) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]",
    "def generate_array(n, m):\n    return [[0] * m for _ in range(n)]\n\n\nif __name__ == \"__main__\":\n    a = generate_array(3, 3)\n    print(a)",
    "def generate_array(rows, cols):\n    return [[0 for x in range(cols)] for y in range(rows)]",
    "def generate_array(n, m):\n    array = []\n    for i in range(n):\n        array.append([])\n        for j in range(m):\n            array[i].append(0)\n    return array\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3, 5))",
    "def generate_array(n):\n    return [[i for i in range(n)] for j in range(n)]",
    "def generate_array(size):\n    return [[i for i in range(size)] for i in range(size)]\n\n\ndef test():\n    arr = generate_array(3)\n    for i in range(3):\n        print(arr[i])\n\n\nif __name__ == \"__main__\":\n    test()",
    "def generate_array(n,m):\n    return [[None for i in range(m)] for j in range(n)]",
    "def generate_two_dim_array():\n    arr = []\n    for i in range(2):\n        arr.append(list(map(int, input().split())))\n    return arr\n\n\nif __name__ == '__main__':\n    print(generate_two_dim_array())",
    "def generate_array(n, m):\n    if n == 0 or m == 0:\n        return []\n    return [[0 for _ in range(m)] for _ in range(n)]\n\n\nif __name__ == '__main__':\n    print(generate_array(2, 3))",
    "def generate_2d_array():\n    arr = []\n    for i in range(2):\n        arr.append(list(map(int, input().split())))\n    return arr\n\nprint(generate_2d_array())",
    "def generate_array(n):\n    return [[i for i in range(n)] for j in range(n)]",
    "def create_array(size):\n    return [[0 for _ in range(size)] for _ in range(size)]\n\n\nif __name__ == \"__main__\":\n    array = create_array(3)\n    print(array)",
    "def array2(size):\n    arr = []\n    for i in range(size):\n        arr.append([])\n        for j in range(size):\n            arr[i].append(0)\n    return arr\n\ndef print_array(arr):\n    print(arr[0])\n    print(arr[1])\n    print(arr[2])\n    print(arr[3])\n    print(arr[4])\n\n\ndef main():\n    arr = array2(4)\n    print_array(arr)\n\nif __name__ == \"__main__\":\n    main()",
    "import numpy as np\n\ndef generate(n):\n    arr = np.empty((n,n))\n    arr[0] = [1,2,3]\n    arr[1] = [4,5,6]\n    arr[2] = [7,8,9]\n    arr[3] = [10,11,12]\n    arr[4] = [13,14,15]\n    arr[5] = [16,17,18]\n    arr[6] = [19,20,21]\n    arr[7] = [22,23,24]\n    arr[8] = [25,26,27]\n    arr[9] = [28,29,30]\n    return arr\n\nif __name__ == \"__main__\":\n    print(generate(5))",
    "def generate_array(n):\n    return [[0 for x in range(n)] for y in range(n)]\n\n\ndef print_array(array):\n    for row in array:\n        for element in row:\n            print(element, end=' ')\n        print()\n\n\ndef main():\n    print_array(generate_array(2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def generate_array(n, m):\n    return [[None] * m for _ in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3, 4))",
    "def generate_array(rows, cols):\n    \"\"\"\n    :type rows: int\n    :type cols: int\n    :rtype: list\n    \"\"\"\n    return [[0 for col in range(cols)] for row in range(rows)]\n\n\ndef main():\n    print(generate_array(2, 2))\n\n\nif __name__ == '__main__':\n    main()",
    "def generate_array(n):\n    return [[None for _ in range(n)] for _ in range(n)]\n\n\nif __name__ == '__main__':\n    array = generate_array(2)\n    print(array)\n    print(array[0][0])\n    print(array[1][1])",
    "def generate_array(n, m):\n    return [[i for i in range(m)] for j in range(n)]\n\n\nprint(generate_array(5, 5))",
    "def generate_array(n):\n    return [[0] * n for _ in range(n)]\n\n\nif __name__ == '__main__':\n    print(generate_array(4))",
    "def array(n):\n    a = []\n    for i in range(n):\n        a.append(list(map(float, input().split())))\n    return a\n\ndef array2(n):\n    return [[i,j] for i in range(n) for j in range(n)]\n\ndef main():\n    n = int(input())\n    arr = array(n)\n    print(arr)\n\nif __name__ == '__main__':\n    main()",
    "def generate_array(n_rows, n_cols):\n    \"\"\"\n    :type n_rows: int\n    :type n_cols: int\n    :rtype: list\n    \"\"\"\n    array = []\n    for i in range(n_rows):\n        row = []\n        for j in range(n_cols):\n            row.append(i)\n        array.append(row)\n    return array\n\n\nif __name__ == \"__main__\":\n    print(generate_array(3, 4))",
    "def generate_array(m, n):\n    arr = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(j)\n        arr.append(row)\n    return arr\n\n\nif __name__ == \"__main__\":\n    m = int(input(\"Enter number of rows: \"))\n    n = int(input(\"Enter number of columns: \"))\n    arr = generate_array(m, n)\n    print(arr)",
    "def generate_array(size):\n    return [[0] * size for i in range(size)]",
    "def generate(n):\n    arr = [[0 for x in range(n)] for x in range(n)]\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(generate(3))",
    "def generate_array(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\n\n\ndef main():\n    print(generate_array(3, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def generate_array(n):\n    return [[0 for x in range(n)] for y in range(n)]\n\n\ndef print_array(array):\n    for row in array:\n        print(row)\n\n\nprint_array(generate_array(2))",
    "def generate_array(n, m):\n    return [[None for _ in range(n)] for _ in range(m)]\n\n\nif __name__ == \"__main__\":\n    a = generate_array(5, 5)\n    print(a)\n\n    a = generate_array(5, 5)\n    print(a)",
    "def generate_array(n):\n    return [[i, j] for i in range(n) for j in range(n)]\n\n\nprint(generate_array(3))",
    "def two_dimensional_array():\n    array = []\n\n    for i in range(2):\n        array.append([])\n\n    return array\n\n\nprint(two_dimensional_array())",
    "def generate_2d_array(n):\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    return arr\n\n\narr = generate_2d_array(2)\n\nfor i in range(len(arr)):\n    print(arr[i])",
    "def generate_array(n, m):\n    return [[0 for i in range(m)] for j in range(n)]\n\n\nif __name__ == '__main__':\n    print(generate_array(3, 4))",
    "def generate_2d_array(n):\n    return [[i for i in range(n)] for j in range(n)]\n\n\nprint(generate_2d_array(10))",
    "def generate_array(n, m):\n    array = []\n    for i in range(n):\n        array.append([])\n        for j in range(m):\n            array[i].append(0)\n    return array\n\n\nprint(generate_array(5, 2))",
    "import numpy as np\n\ndef generate_array(size, offset):\n    arr = np.zeros((size, size), dtype=int)\n    for i in range(size):\n        for j in range(size):\n            arr[i][j] = i * j + offset\n    return arr\n\n\ndef main():\n    arr = generate_array(5, 3)\n    print(arr)\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}