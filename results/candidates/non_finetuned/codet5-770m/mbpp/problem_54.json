{
  "problem": {
    "task_id": "MBPP/65",
    "prompt": "Write a function of recursion list sum.",
    "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
    "test_list": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ],
    "challenge_test_list": [],
    "problem_id": 54
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[-1] + sum(arr[:-1])\n\n\narr = [1, 2, 3, 4]\nprint(sum(arr))",
    "class Solution:\n    def sumOfRecursion(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.sumOfRecursion(n-1) + self.sumOfRecursion(n-2)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.sumOfRecursion(1) == 1\n    assert sol.sumOfRecursion(2) == 2\n    assert sol.sumOfRecursion(3) == 6\n    assert sol.sumOfRecursion(4) == 12\n    assert sol.sumOfRecursion(5) == 18\n    assert sol.sumOfRecursion(6) == 24\n    assert sol.sumOfRecursion(7) == 30\n    assert sol.sumOfRecursion(8) == 48\n    assert sol.sumOfRecursion(9) == 60\n    assert sol.sumOfRecursion(10) == 72",
    "def sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum(arr[1:])\n\n\nprint(sum([2, 3, 4, 5]))",
    "def sum_recursion(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + sum_recursion(nums[1:])\n\n\ndef main():\n    print(sum_recursion([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_recursive(n):\n    if n <= 0:\n        return 0\n    return n + sum_recursive(n - 1)\n\n\nprint(sum_recursive(1))",
    "def sum_recursion(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[-1] + sum_recursion(arr[:-1])\n\n\nprint(sum_recursion([1, 2, 3, 4, 5]))\nprint(sum_recursion([1, 2, 3, 4, 5, 6, 7]))",
    "def sum_list(n, l):\n    if n == 0:\n        return 0\n    return l[n] + sum_list(n - 1, l)\n\n\nif __name__ == '__main__':\n    print(sum_list(5, [1, 2, 3, 4, 5]))",
    "def sum_rec(n):\n    if n == 0:\n        return 0\n    return n + sum_rec(n - 1)\n\n\ndef test_sum_rec():\n    assert sum_rec(0) == 0\n    assert sum_rec(1) == 1\n    assert sum_rec(2) == 3\n    assert sum_rec(3) == 6\n    assert sum_rec(4) == 9\n    assert sum_rec(5) == 12\n    assert sum_rec(6) == 15\n    assert sum_rec(7) == 18\n    assert sum_rec(8) == 21\n    assert sum_rec(9) == 24\n    assert sum_rec(10) == 28\n    assert sum_rec(11) == 32\n    assert sum_rec(12) == 34\n    assert sum_rec(13) == 38\n    assert sum_rec(14) == 42\n    assert sum_rec(15) == 44\n    assert sum_rec(16) == 50\n    assert sum_rec(17) == 56\n    assert sum_rec(18) == 58\n    assert sum_rec(19) == 60\n    assert sum_rec(20) == 64\n    assert sum_rec(21) == 70\n    assert sum_rec(22) == 72\n    assert sum_rec(23) == 76\n    assert sum_rec(24) == 80\n    assert sum_rec(25) == 88\n    assert sum_rec(26) == 100\n    assert sum_rec(27) == 120\n    assert sum_rec(28) == 144\n    assert sum_rec(29) == 168\n    assert sum_rec(30) == 176\n    assert sum_rec(31) == 182\n    assert sum_rec(32) == 224\n    assert sum_rec(33) == 288\n    assert sum_rec(34) == 296\n    assert sum_rec(35) == 320\n    assert sum_rec(36) == 352\n    assert sum_rec(37) == 384\n    assert sum_rec(38) == 388\n    assert sum_rec(39) == 416\n    assert sum_rec(40) == 432\n    assert sum",
    "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    return list[0] + sum_list(list[1:])\n\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3]))",
    "def recursion(arr, current_sum):\n    if len(arr) == 0:\n        return current_sum\n    else:\n        return arr[0] + recursion(arr[1:], current_sum)\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    print(f'List: {arr}')\n    print(f'Sum: {recursion(arr, 0)}')\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_recursion(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + sum_recursion(l[1:])\n\nprint(sum_recursion([1, 2, 3]))",
    "def recursion_list_sum(l: list) -> int:\n    if len(l) == 0:\n        return 0\n\n    return l[0] + recursion_list_sum(l[1:])\n\n\ndef main():\n    l = [1, 2, 3]\n    print(recursion_list_sum(l))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    def sumRecursion(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return nums[0] + self.sumRecursion(nums[1:])\n\n    def sum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return nums[0] + self.sum(nums[1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.sum([1, 2, 3, 4, 5]))\n    print(s.sum([1, 2, 3, 4, 5, 6]))",
    "def sum_list(lst):\n    if len(lst) == 0:\n        return 0\n    return lst[0] + sum_list(lst[1:])\n\n\nif __name__ == \"__main__\":\n    assert sum_list([]) == 0\n    assert sum_list([1]) == 1\n    assert sum_list([1, 2]) == 3\n    assert sum_list([1, 2, 3]) == 6",
    "def sum_list(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_list(l[1:])\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_list(l))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def recursion_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + recursion_sum(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(recursion_sum([1, 2, 3, 4, 5]))\n    print(recursion_sum([1, 2, 3, 4, 5, 6]))\n    print(recursion_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(recursion_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(recursion_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156,",
    "def sum_recursion(n):\n    if n == 1:\n        return n\n    else:\n        return n + sum_recursion(n - 1)\n\n\nassert sum_recursion(1) == 1\nassert sum_recursion(2) == 2\nassert sum_recursion(3) == 6",
    "def recursion_sum(n, a):\n    if n == 0:\n        return a\n    else:\n        return recursion_sum(n-1, a+n)\n\ndef main():\n    print(recursion_sum(10, []))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def sumOfRecursion(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return self.sumOfRecursion(nums[1:]) + nums[0]",
    "def sum_list(list_):\n    if len(list_) == 1:\n        return list_[0]\n    else:\n        return list_[0] + sum_list(list_[1:])\n\nprint(sum_list([1,2,3]))",
    "def sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    return nums[0] + sum(nums[1:])\n\n\nprint(sum([3, 4, 5]))",
    "def sum_recursion(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_recursion(arr[1:])\n\n\nprint(sum_recursion([3, 5, 6, 7]))",
    "def recursion_sum(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + lst[1]\n\nprint(recursion_sum([1,2,3,4,5]))",
    "def sum_list(l, n):\n    if n == 0:\n        return 0\n    else:\n        return l[n] + sum_list(l, n - 1)\n\n\ndef sum_list_recur(l, n):\n    if n == 0:\n        return 0\n    else:\n        return l[n] + sum_list_recur(l, n - 1)\n\n\nprint(sum_list([1, 2, 3], 4))\nprint(sum_list([1, 2, 3], 5))\nprint(sum_list([1, 2, 3], 6))\nprint(sum_list([1, 2, 3], 7))\nprint(sum_list([1, 2, 3], 8))\nprint(sum_list([1, 2, 3], 9))",
    "def sum_list(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + list[1]\n\n\nprint(sum_list([1, 2, 3, 4, 5]))\nprint(sum_list([1, 2, 3, 4, 5]))\nprint(sum_list([1, 2, 3, 4, 5, 6]))\nprint(sum_list([1, 2, 3, 4, 5, 6, 7]))\nprint(sum_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "class Solution:\n    def sum_recursion(self, nums):\n        if not nums:\n            return 0\n        return nums[0] + self.sum_recursion(nums[1:])\n\n    def sum_recursion_2(self, nums):\n        if not nums:\n            return 0\n        return nums[0] + self.sum_recursion_2(nums[1:])",
    "def sum_recursion(arr, n, r):\n    if n == 0:\n        return 0\n    else:\n        return arr[n-1] + sum_recursion(arr, n-1, r)\n\n\nprint(sum_recursion([1, 2, 3, 4], 3, 0))\nprint(sum_recursion([1, 2, 3, 4], 2, 0))\nprint(sum_recursion([1, 2, 3, 4], 1, 0))",
    "def sum_recursion(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    return arr[n-1] + sum_recursion(arr, n-1)\n\n\nif __name__ == \"__main__\":\n    print(sum_recursion([1, 2, 3, 4], 4))\n    print(sum_recursion([1, 2, 3, 4], 5))\n    print(sum_recursion([1, 2, 3, 4], 6))\n    print(sum_recursion([1, 2, 3, 4], 7))",
    "def sum_recur(arr, i):\n    if i == len(arr):\n        return 0\n    return arr[i] + sum_recur(arr, i + 1)\n\n\nprint(sum_recur([1, 2, 3], 0))",
    "class Solution:\n    def listSum(self, nums, target):\n        if len(nums) == 0:\n            return 0\n        return self.listSum(nums[1:], target - nums[0]) + nums[0]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.listSum([1, 2, 3, 4, 5], 6))",
    "def sum_list(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_list(list[1:])\n\n\nif __name__ == \"__main__\":\n    print(sum_list([1, 2, 3, 4, 5]))",
    "def sum_list(n):\n    if n == 0:\n        return 0\n    return n + sum_list(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(sum_list(3))",
    "def sum_recursion(l):\n    if len(l) == 1:\n        return l[0]\n\n    return l[0] + sum_recursion(l[1:])\n\n\nprint(sum_recursion([1, 2, 3, 4]))",
    "def sum_recursion(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_recursion(list[1:])\n\n\ndef sum_recursion2(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_recursion2(list[1:])\n\n\nif __name__ == \"__main__\":\n    print(sum_recursion([1, 2, 3]))\n    print(sum_recursion2([1, 2, 3]))",
    "def list_sum(list, k):\n    if k == 0:\n        return list[0]\n    else:\n        return list[k] + list_sum(list, k - 1)\n\n\nif __name__ == '__main__':\n    print(list_sum([], 0))\n    print(list_sum([1], 0))\n    print(list_sum([1, 2, 3], 3))",
    "def sum_recursion(l):\n    if len(l) == 0:\n        return 0\n    return l[0] + sum_recursion(l[1:])\n\n\nprint(sum_recursion([1, 2, 3]))",
    "def recursion_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursion_sum(n - 1)\n\n\nprint(recursion_sum(5))",
    "def sum_rec(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_rec(l[1:])\n\n\ndef sum_rec_2(l):\n    return l[0] + l[1] if len(l) == 2 else sum_rec_2(l[1:])\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(sum_rec(l))\n    print(sum_rec_2(l))",
    "def sum_recursive(arr, n):\n    if n == 0:\n        return 0\n    else:\n        return arr[n-1] + sum_recursive(arr, n-1)\n\ndef sum_iterative(arr, n):\n    if n == 0:\n        return 0\n    else:\n        return arr[n-1] + sum_iterative(arr, n-1)\n\ndef sum_list(arr, n):\n    if n == 0:\n        return 0\n    else:\n        return arr[n-1] + sum_list(arr, n-1)\n\ndef main():\n    arr = [1, 2, 3]\n    n = len(arr)\n    print(sum_recursive(arr, n))\n    print(sum_iterative(arr, n))\n    print(sum_list(arr, n))\n\nif __name__ == '__main__':\n    main()",
    "def sum_recursion(nums, current_sum):\n    if len(nums) == 0:\n        return current_sum\n    else:\n        return nums[0] + sum_recursion(nums[1:], current_sum)\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    print(sum_recursion(nums, 0))\n\nif __name__ == '__main__':\n    main()",
    "def sum_list(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_list(list[1:])\n\nprint(sum_list([1, 2, 3, 4]))\nprint(sum_list([1, 2, 3, 4, 5]))\nprint(sum_list([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def sum(n):\n    if n == 1:\n        return 0\n    return n + sum(n - 1)\n\n\nprint(sum(6))",
    "def list_sum(l, res=0):\n    if l == []:\n        return res\n    else:\n        return l[0] + list_sum(l[1:], res)\n\nprint(list_sum([1, 2, 3]))",
    "def sum_recursive(n):\n    if n == 1:\n        return 0\n    else:\n        return n + sum_recursive(n - 1)\n\n\ndef sum_iterative(n):\n    if n == 1:\n        return 0\n    else:\n        return n + sum_iterative(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(sum_recursive(5))\n    print(sum_iterative(5))",
    "def sum_recur(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + sum_recur(l[1:])\n\n\nprint(sum_recur([1, 2, 3, 4]))",
    "def sum_list(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[-1] + sum_list(arr[:-1])\n\nif __name__ == \"__main__\":\n    assert sum_list([1, 2, 3, 4, 5]) == 6\n    assert sum_list([1, 2]) == 2",
    "def sum_rec(n):\n    if n == 0:\n        return 0\n    return n + sum_rec(n - 1)\n\n\nprint(sum_rec(10))",
    "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + sum_list(list[1:])\n\n\ndef test_sum_list():\n    assert sum_list([1, 2, 3]) == 6\n    assert sum_list([1, 2, 4]) == 9\n    assert sum_list([1, 2, 4, 3, 5]) == 12",
    "class Solution(object):\n    def sumOfRecurrences(self, list):\n        \"\"\"\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if not list:\n            return 0\n        return self.sumOfRecurrences(list[1:]) + list[0]\n\n\nlist = [1, 2, 3]\nprint(Solution().sumOfRecurrences(list))",
    "def sum_rec(l, n):\n    if n == 0:\n        return 0\n    else:\n        return l[n] + sum_rec(l, n - 1)\n\n\ndef sum_rec_2(l, n):\n    if n == 0:\n        return 0\n    else:\n        return l[n] + l[n - 1] + sum_rec_2(l, n - 2)\n\n\ndef main():\n    l = [1, 2, 3, 4, 5]\n    n = len(l)\n    print(f'l = {l}, n = {n}, sum = {sum_rec(l, n)}')\n    print(f'l = {l}, n = {n}, sum = {sum_rec_2(l, n)}')\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_recursive(a):\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_recursive(a[1:])\n\ndef sum_iterative(a):\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_iterative(a[1:])\n\na = [1, 2, 3, 4, 5]\nprint(sum_recursive(a))\nprint(sum_iterative(a))",
    "def sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum(arr[1:])",
    "def sum_recursion(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + sum_recursion(l[1:])\n\nprint(sum_recursion([1,2,3,4]))",
    "def sum_recursion(n):\n    if n == 1:\n        return 0\n    return n + sum_recursion(n - 1)\n\n\nif __name__ == '__main__':\n    print(sum_recursion(5))",
    "def sum_rec(num, memo):\n    if num in memo:\n        return memo[num]\n\n    memo[num] = num + sum_rec(num - 1, memo)\n    return memo[num]\n\n\ndef sum_rec2(num, memo):\n    if num in memo:\n        return memo[num]\n\n    memo[num] = num + sum_rec2(num - 1, memo)\n    return memo[num]\n\n\nprint(sum_rec([1, 2, 3, 4], {}))\nprint(sum_rec2([1, 2, 3, 4], {}))",
    "def sum(a):\n    if len(a) == 0:\n        return 0\n    return a[0] + sum(a[1:])",
    "def list_sum(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + list_sum(l[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([]))\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def sum_recur(l, r):\n    if r == 0:\n        return l\n    return l + sum_recur(l, r - 1)\n\n\ndef main():\n    print(sum_recur([1, 2, 3, 4], 6))\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_recur(n):\n    if n == 1:\n        return n\n    else:\n        return n + sum_recur(n - 1)\n\n\ndef test_sum_recur():\n    assert sum_recur(5) == 6",
    "def list_sum(lst):\n    if len(lst) == 0:\n        return 0\n    return lst[0] + list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    print(list_sum([]))\n    print(list_sum([1, 2, 3, 4, 5, 6]))\n    print(list_sum([1, 2, 3, 4, 5, 6, 7]))",
    "def sum_list(l):\n    if l == []:\n        return 0\n    else:\n        return l[0] + sum_list(l[1:])\n\nif __name__ == \"__main__\":\n    l = [1,2,3,4]\n    print(sum_list(l))",
    "def sum_recursion(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_recursion(l[1:])\n\n\ndef sum_recursion_2(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_recursion_2(l[1:])\n\n\nif __name__ == \"__main__\":\n    print(sum_recursion([1, 2, 3, 4, 5]))\n    print(sum_recursion_2([1, 2, 3, 4, 5]))",
    "def list_sum(arr, i):\n    if i == len(arr):\n        return 0\n    return arr[i] + list_sum(arr, i+1)\n\n\nprint(list_sum([1, 2, 3], 0))",
    "def list_sum(l):\n    if len(l) == 0:\n        return 0\n    return l[0] + list_sum(l[1:])\n\n\nif __name__ == \"__main__\":\n    assert list_sum([1, 2, 3, 4]) == 6\n    assert list_sum([1, 2, 3, 4, 5]) == 10",
    "def sum_list(list_):\n    if len(list_) == 1:\n        return list_[0]\n    return list_[0] + sum_list(list_[1:])\n\n\nprint(sum_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def sum_recursion(arr, sum, i):\n    if i == len(arr):\n        sum = sum + arr[i]\n    else:\n        sum = sum_recursion(arr, sum, i + 1)\n    return sum\n\n\narr = [1, 2, 3, 4]\nsum = sum_recursion(arr, 0, 0)\nprint(sum)",
    "def list_sum(list):\n    if len(list) == 0:\n        return 0\n    return list[0] + list_sum(list[1:])\n\n\nif __name__ == \"__main__\":\n    print(list_sum([1, 2, 3, 4, 5]))",
    "def sum_rec(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_rec(arr[1:])\n\ndef sum_rec_2(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + arr[1] + sum_rec_2(arr[2:])\n\ndef sum_rec_3(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + arr[1] + arr[2] + sum_rec_3(arr[3:])\n\nprint(sum_rec([1, 2, 3]))\nprint(sum_rec_2([1, 2, 3]))\nprint(sum_rec_3([1, 2, 3]))",
    "def sum_recursive(l: list):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_recursive(l[1:])\n\n\nif __name__ == '__main__':\n    print(sum_recursive([1, 2, 3, 4, 5]))",
    "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sumOfRecursion(self, head: ListNode) -> int:\n        if head is None:\n            return 0\n        return self.sumOfRecursion(head.next) + head.val\n\n\nif __name__ == \"__main__\":\n    solu = Solution()\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l3 = ListNode(3)\n    l4 = ListNode(4)\n    l1.next = l2\n    l2.next = l3\n    l3.next = l4\n    assert solu.sumOfRecursion(l1) == 6\n    assert solu.sumOfRecursion(l2) == 9\n    assert solu.sumOfRecursion(l3) == 12\n    assert solu.sumOfRecursion(l4) == 15",
    "def list_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + list_sum(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def sum_recursion(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] + sum_recursion(l[1:])\n\n\nprint(sum_recursion([1, 2, 3]))",
    "def sum_list(n, l):\n    if n == 0:\n        return l\n    return l[n-1] + sum_list(n-1, l)\n\nprint(sum_list(5, [1, 2, 3, 4]))\nprint(sum_list(5, [1, 2, 3, 4, 5]))",
    "class Solution:\n    def listSum(self, nums, target):\n        if not nums:\n            return 0\n\n        if nums[0] == target:\n            return nums[0]\n\n        return self.listSum(nums[1:], target) + self.listSum(nums[0:1], target)",
    "def sum_recur(nums):\n    if len(nums) == 0:\n        return 0\n    return nums[0] + sum_recur(nums[1:])\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    print(sum_recur(nums))\n\n\nif __name__ == '__main__':\n    main()",
    "def sum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + sum(l[1:])",
    "def sum_recursion(arr, n):\n    if n == 0:\n        return 0\n    return arr[n] + sum_recursion(arr, n - 1)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_recursion(arr, len(arr)))",
    "def sum_recursion(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_recursion(arr[1:])\n\n\ndef main():\n    print(sum_recursion([]))\n    print(sum_recursion([1]))\n    print(sum_recursion([2, 3, 4, 5]))\n    print(sum_recursion([3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_list(l):\n    if len(l) == 0:\n        return 0\n    return l[0] + sum_list(l[1:])\n\n\nif __name__ == \"__main__\":\n    print(sum_list([1, 2, 3, 4, 5]))",
    "def list_sum(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + list_sum(arr[1:])\n\nprint(list_sum([1, 2, 3, 4]))",
    "def list_sum(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + list_sum(list[1:])\n\n\ndef main():\n    print(list_sum([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    def listSum(self, nums: list, target: int) -> int:\n        if not nums:\n            return 0\n        if target == 0:\n            return nums[0]\n        return self.listSum(nums[1:], target - nums[0]) + nums[0]",
    "def sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    return arr[0] + sum(arr[1:])\n\n\nprint(sum([1, 2, 3, 4, 5]))",
    "class Solution(object):\n    def sumRecur(self, arr):\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            return arr[0] + self.sumRecur(arr[1:])",
    "def sum_list(list):\n    if list == []:\n        return 0\n    else:\n        return list[0] + sum_list(list[1:])\n\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4]\n    print(sum_list(list))",
    "def sum_list(l):\n    if not l:\n        return 0\n    else:\n        return l[0] + sum_list(l[1:])\n\n\nprint(sum_list([1, 2, 3]))",
    "def sum_rec(num, sum_list):\n    if num == 0:\n        return 0\n    else:\n        return num + sum_rec(num - 1, sum_list)\n\n\ndef main():\n    num_list = [1, 2, 3, 4, 5]\n    sum_list = [1, 2, 3, 4, 5]\n    print(sum_rec(num_list[0], sum_list))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def sumRecur(self, nums, start):\n        if start == len(nums):\n            return sum(nums)\n        else:\n            return self.sumRecur(nums, start + 1) + nums[start]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().sumRecur(nums, 0))",
    "def sum_recursion(n):\n    if n == 1:\n        return 0\n    else:\n        return n + sum_recursion(n - 1)\n\n\nif __name__ == '__main__':\n    print(sum_recursion(3))",
    "def sum_recursion(l, n):\n    if l == []:\n        return 0\n    else:\n        return l[0] + sum_recursion(l[1:], n)\n\n\nprint(sum_recursion([1, 2, 3, 4, 5, 6, 7], 4))",
    "def sum_list(list):\n    if len(list) == 1:\n        return list[0]\n    return list[0] + sum_list(list[1:])\n\n\nif __name__ == \"__main__\":\n    print(sum_list([1, 2, 3, 4, 5]))",
    "def sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    return nums[0] + sum(nums[1:])\n\n\ndef main():\n    print(sum([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_list(l):\n\tif len(l) == 0:\n\t\treturn 0\n\telse:\n\t\treturn l[0] + sum_list(l[1:])\n\nprint(sum_list([1,2,3]))\nprint(sum_list([1,2,3,4,5]))",
    "def list_sum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + list_sum(l[1:])\n\nprint(list_sum([1, 2, 3, 4, 5]))",
    "class Solution(object):\n    def sum_recursion(self, n, sum_list):\n        \"\"\"\n        :type n: int\n        :type sum_list: List[int]\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return sum_list[0]\n        else:\n            return self.sum_recursion(n - 1, sum_list) + self.sum_recursion(n - 1, sum_list)",
    "def sum_recursion(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + sum_recursion(arr[1:])\n\nprint(sum_recursion([1,2,3,4,5]))",
    "def sum_recursion(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[-1] + sum_recursion(lst[:-1])\n\n\nprint(sum_recursion([1, 2, 3, 4]))\nprint(sum_recursion([1, 2, 3, 4, 5]))\nprint(sum_recursion([1, 2, 3, 4, 5, 6]))\nprint(sum_recursion([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_recursion([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(sum_recursion([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158",
    "def sum_recursive(arr, target):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    return arr[0] + sum_recursive(arr[1:], target - arr[0])\n\n\ndef sum_iterative(arr, target):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    return arr[0] + sum_iterative(arr[1:], target - arr[0])\n\n\nprint(sum_recursive([1, 2, 3], 5))\nprint(sum_iterative([1, 2, 3], 5))",
    "def sum_rec(n):\n    if n == 0:\n        return 0\n    return n + sum_rec(n - 1)\n\n\ndef sum_rec_2(n):\n    if n == 0:\n        return 0\n    return n + sum_rec_2(n - 1) + n\n\n\nif __name__ == \"__main__\":\n    print(sum_rec_2(5))",
    "def sum_list(list_):\n    if list_ is None:\n        return 0\n    else:\n        return list_[0] + sum_list(list_[1:])\n\n\nprint(sum_list([]))\nprint(sum_list([1]))\nprint(sum_list([1, 2]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}