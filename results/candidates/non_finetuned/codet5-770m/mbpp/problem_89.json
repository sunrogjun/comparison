{
  "problem": {
    "task_id": "MBPP/100",
    "prompt": "Write a function to find the next smallest palindrome of a specified number.",
    "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
    "test_list": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ],
    "challenge_test_list": [],
    "problem_id": 89
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            break\n\n    if num % i == 0:\n        return num\n    return num + 1\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next_smallest_palindrome(25))\n    print(next_smallest_palindrome(26))\n    print(next_smallest_palindrome(27))\n    print(next_smallest_palindrome(28))\n    print(next_smallest_palindrome(29))\n    print(next_smallest_palindrome(30))\n    print(next_smallest_palindrome(31))\n    print(next_smallest_palindrome(32))\n    print(next_smallest_palindrome(33))\n    print(next_smallest_palindrome(34))\n    print(next_smallest_pal",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    return str(n) + str(n)[::-1]\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))",
    "def next_smallest_palindrome(num):\n    if num == 0:\n        return 0\n    num = str(num)\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] == num[i+1]:\n            return num[:i+1]\n    return num[0]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(10))",
    "def next_smallest_palindrome(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number <= 0:\n        return number\n\n    if number < 10:\n        return number\n\n    if number % 10 == 0:\n        return next_smallest_palindrome(number // 10)\n\n    return next_smallest_palindrome(number // 10) * 10 + next_smallest_palindrome(number % 10)\n\n\nif __name__ == '__main__':\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(100) == 99\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(11111) == 11111\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(10011) == 10011",
    "def next_smallest_palindrome(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(1))",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        if n < 10:\n            return n\n        while n > 0:\n            res = res * 10 + n % 10\n            n = n // 10\n        return res",
    "def next_smallest_palindrome(n):\n    # write your code here\n    i = n\n    while i > 0:\n        if n % i == 0:\n            n //= i\n        else:\n            break\n    if n == 0:\n        return None\n    if n < 9:\n        return '9'\n    if n < 100:\n        return '0'\n    return str(n)\n\n\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(8))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(1000))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(1))",
    "def next_smallest_palindrome(num):\n    if num % 10 == 0:\n        return num // 10\n    else:\n        return num // 100\n\n\ndef next_smallest_palindrome_2(num):\n    # if num == 1:\n    #     return 1\n    # if num % 10 == 0:\n    #     return num // 10 + 1\n    # if num % 100 == 0:\n    #     return num // 100 + 1\n\n    if num == 1:\n        return 1\n    if num % 10 == 0:\n        return num // 10 + 1\n    if num % 100 == 0:\n        return num // 100 + 1\n    return num // 100 + 1\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(101))\n    print(next_smallest_palindrome(12))",
    "def next_smallest_palindrome(n):\n    n_str = str(n)\n    i = 0\n    while i < len(n_str) - 1:\n        if n_str[i]!= n_str[len(n_str) - 1]:\n            return n_str[i] + n_str[len(n_str) - 1]\n        i += 1\n    return n\n\n\nprint(next_smallest_palindrome(12345))",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    num_str = str(num)\n    if num_str[0] == '0':\n        return num_str[1:]\n    elif num_str[0] == '1':\n        return '11'\n    else:\n        return num_str[1:] + '0'\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next_smallest_palindrome(25))\n    print(next_smallest_palindrome(26))\n    print(next_smallest_palindrome(27))\n    print(next_smallest_palindrome(28))\n    print(next_smallest_palindrome(29))\n    print(next_smallest_palindrome(30))\n    print(next_smallest_palindrome(31))\n    print(next_smallest_palindrome(32))\n    print(next_smallest_palindrome(33))\n    print(next_smallest_palindrome(34))\n    print(next_smallest_palindrome(35))\n    print(next_",
    "def next_smallest_palindrome(n):\n    # write your code here\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\n    s = str(n)\n    n = int(s[::-1])\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40",
    "def next_smallest_palindrome(num):\n    if num < 10:\n        return num\n    for i in range(1, 10):\n        if num % i == 0:\n            break\n    if i == 1:\n        return num\n    if i == 10:\n        return num * 10 + 1\n    else:\n        return num * 10 + 10 + 1\n\nprint(next_smallest_palindrome(1234))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(7))\nprint(next_smallest_palindrome(9))",
    "def next_smallest_palindrome(num):\n    if num < 10:\n        return num\n    else:\n        return str(num)[::-1]\n\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(1212))\nprint(next_smallest_palindrome(1211))\nprint(next_smallest_palindrome(121212))\nprint(next_smallest_palindrome(121211))",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    if num == 12:\n        return 12\n    if num == 13:\n        return 13\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 16\n    if num == 17:\n        return 17\n    if num == 18:\n        return 18\n    if num == 19:\n        return 19\n    if num == 20:\n        return 20\n    if num == 21:\n        return 21\n    if num == 22:\n        return 22\n    if num == 23:\n        return 23\n    if num == 24:\n        return 24\n    if num == 25:\n        return 25\n    if num == 26:\n        return 26\n    if num == 27:\n        return 27\n    if num == 28:\n        return 28\n    if num == 29:\n        return 29\n    if num == 30:\n        return 30\n    if num == 31:\n        return 31\n    if num == 32:\n        return 32\n    if num == 33:\n        return 33\n    if num == 34:\n        return 34\n    if num == 35:\n        return 35\n    if num == 36:\n        return 36\n    if num == 37:\n        return 37\n    if num == 38:\n        return 38\n    if num == 39:\n        return 39\n    if num == 40:\n        return 40\n    if num == 41:\n        return 41\n    if num == 42:\n        return 42\n    if num == 43:\n        return 43\n    if",
    "def next_smallest_palindrome(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    number = str(number)\n    if number[0] == '0':\n        return 0\n    length = len(number)\n    while length > 1:\n        if number[length - 1]!= number[length - 2]:\n            return number[length]\n        length -= 1\n    return number[0]\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(900))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(9001))",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def isPalindrome(n):\n            return str(n) == str(n)[::-1]\n\n        def nextPalindrome(n):\n            if n == 1:\n                return 1\n\n            if n == 2:\n                return 2\n\n            for i in range(int(n**0.5) + 1):\n                if isPalindrome(n + i):\n                    return n + i\n\n        return nextPalindrome(n)\n\n\nif __name__ == \"__main__\":\n    print(Solution().nextSmallestPalindrome(121))",
    "def next_smallest_palindrome(num):\n    if num < 10:\n        return num\n\n    reverse_num = 0\n    while num > 0:\n        digit = num % 10\n        reverse_num = digit * 10 + reverse_num\n        num = num // 10\n\n    if reverse_num == num:\n        return reverse_num\n\n    return num\n\n\ndef main():\n    print(next_smallest_palindrome(1000))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(0))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def next_smallest_palindrome(num):\n    # write your code here\n    if num < 10:\n        return num\n\n    num = str(num)\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] == num[i + 1]:\n            num = num[:i] + str(int(num[i]) + 1) + num[i + 2:]\n            break\n    return int(num)\n\n\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(101))\nprint(next_smallest_palindrome(0))\nprint(next_smallest_palindrome(1010))",
    "def next_smallest_palindrome(number):\n    if number < 10:\n        return number\n\n    temp = number\n    while temp > 0:\n        if temp % 10 == 1:\n            temp //= 10\n        else:\n            temp = temp // 10\n\n    if number % 10 == 1:\n        return number // 10\n\n    return number // 10 + 1\n\n\ndef main():\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(1000))\n    print(next_smallest_palindrome(11))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.nextSmallestPalindrome(n // 10) * 10 + self.nextSmallestPalindrome(n % 10)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.nextSmallestPalindrome(10)\n    print sol.nextSmallestPalindrome(9)\n    print sol.nextSmallestPalindrome(8)\n    print sol.nextSmallestPalindrome(7)\n    print sol.nextSmallestPalindrome(6)\n    print sol.nextSmallestPalindrome(5)\n    print sol.nextSmallestPalindrome(4)\n    print sol.nextSmallestPalindrome(3)\n    print sol.nextSmallestPalindrome(2)\n    print sol.nextSmallestPalindrome(1)\n    print sol.nextSmallestPalindrome(0)",
    "class Solution:\n    def nextSmallestPalindrome(self, n: int) -> str:\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '2'\n        if n == 3:\n            return '3'\n        if n == 4:\n            return '4'\n        if n == 5:\n            return '5'\n        if n == 6:\n            return '6'\n        if n == 7:\n            return '7'\n        if n == 8:\n            return '8'\n        if n == 9:\n            return '9'\n        if n == 10:\n            return '10'\n        if n == 11:\n            return '11'\n        if n == 12:\n            return '12'\n        if n == 13:\n            return '13'\n        if n == 14:\n            return '14'\n        if n == 15:\n            return '15'\n        if n == 16:\n            return '16'\n        if n == 17:\n            return '17'\n        if n == 18:\n            return '18'\n        if n == 19:\n            return '19'\n        if n == 20:\n            return '20'\n        if n == 21:\n            return '21'\n        if n == 22:\n            return '22'\n        if n == 23:\n            return '23'\n        if n == 24:\n            return '24'\n        if n == 25:\n            return '25'\n        if n == 26:\n            return '26'\n        if n == 27:\n            return '27'\n        if n == 28:\n            return '28'\n        if n == 29:\n            return '29'\n        if n == 30:\n            return '30'\n        if n == 31:\n            return '31'\n        if n == 32:\n            return '32'\n        if n == 33:\n            return '33'\n        if n == 34:\n            return '34'\n        if n == 35:\n            return '35'\n        if n == 36:\n            return '36'\n        if n == 37:\n            return '37'\n        if n == 38",
    "def next_smallest_palindrome(num):\n    num = str(num)\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] == num[i - 1]:\n            continue\n        if num[i] == num[i - 2]:\n            continue\n        if num[i] == num[i - 3]:\n            continue\n        if num[i] == num[i - 4]:\n            continue\n        if num[i] == num[i - 5]:\n            continue\n        if num[i] == num[i - 6]:\n            continue\n        if num[i] == num[i - 7]:\n            continue\n        if num[i] == num[i - 8]:\n            continue\n        if num[i] == num[i - 9]:\n            continue\n        if num[i] == num[i - 10]:\n            continue\n        if num[i] == num[i - 11]:\n            continue\n        if num[i] == num[i - 12]:\n            continue\n        if num[i] == num[i - 13]:\n            continue\n        if num[i] == num[i - 14]:\n            continue\n        if num[i] == num[i - 15]:\n            continue\n        if num[i] == num[i - 16]:\n            continue\n        if num[i] == num[i - 17]:\n            continue\n        if num[i] == num[i - 18]:\n            continue\n        if num[i] == num[i - 19]:\n            continue\n        if num[i] == num[i - 20]:\n            continue\n        if num[i] == num[i - 21]:\n            continue\n        if num[i] == num[i - 22]:\n            continue\n        if num[i] == num[i - 23]:\n            continue\n        if num[i] == num[i - 24]:\n            continue\n        if num[i] == num[i - 25]:\n            continue\n        if num[i] == num[i - 26]:\n            continue\n        if num[i] == num[i - 27]:\n            continue\n        if num[i] == num[",
    "def next_smallest_palindrome(number):\n    num = str(number)\n    # Sort the number by the alphabetical order\n    num = num[::-1]\n    # Check if the number is a palindrome\n    if num == num[::-1]:\n        return number\n    else:\n        return next_smallest_palindrome(int(num))\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(121))",
    "def next_smallest_palindrome(num):\n    # Write your code here\n    temp = num\n    while(temp>0):\n        temp=temp-1\n        i = temp\n        while(i>0):\n            if (num%i==0):\n                temp = temp-1\n                break\n            else:\n                i-=1\n    if(num==temp):\n        return num\n    else:\n        return -1",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n - (n // 10) * 10 + n // 10",
    "class Solution:\n    def next_smallest_palindrome(self, n: int) -> int:\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n % 10 == 0:\n            return self.next_smallest_palindrome(n // 10) * 10 + self.next_smallest_palindrome(n % 10)\n        else:\n            return self.next_smallest_palindrome(n // 100) * 100 + self.next_smallest_palindrome(n % 100)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.next_smallest_palindrome(10) == 11\n    assert s.next_smallest_palindrome(100) == 101\n    assert s.next_smallest_palindrome(1000) == 1001\n    assert s.next_smallest_palindrome(99) == 99\n    assert s.next_smallest_palindrome(9) == 9\n    assert s.next_smallest_palindrome(998) == 998\n    assert s.next_smallest_palindrome(900) == 900\n    assert s.next_smallest_palindrome(9) == 9",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num <= 1:\n        return num\n    if num % 10 == 0:\n        return num//10\n    if num % 100 == 0:\n        return num//100\n    if num % 1000 == 0:\n        return num//1000\n    if num % 10000000 == 0:\n        return num//10000000\n    if num % 1000000000 == 0:\n        return num//1000000000\n    if num % 1000000 == 0:\n        return num//1000000\n    if num % 1000000000 == 0:\n        return num//1000000\n    if num % 1000000000 == 0:\n        return num//1000000\n    return num//1000000\n\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(6))\nprint(next_smallest_palindrome(7))\nprint(next_smallest_palindrome(8))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(10))",
    "def next_smallest_palindrome(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        if n % 10 == 0:\n            return next_smallest_palindrome(n // 10)\n        else:\n            return next_smallest_palindrome(n // 100) + 1\n\ndef main():\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next_smallest_palindrome(25))\n    print(next_smallest_palind",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        ans = n\n        while ans % 10 == 0:\n            ans //= 10\n        while ans % 10!= 0:\n            ans = (ans * 10) + (ans % 10)\n        ans = str(ans)\n        if ans[0] == '0':\n            ans = ans[1:]\n        while ans[-1] == '0':\n            ans = ans[:-1]\n        ans = int(ans)\n        return ans\n\n\ns = Solution()\nprint s.nextSmallestPalindrome(123)",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n\n    l = []\n    while n > 0:\n        while n % 10 == 0:\n            n //= 10\n        if n == 1:\n            n = 10\n            l.append(n)\n        else:\n            l.append(n)\n            n = 10\n\n    i = len(l) - 1\n    while i >= 0:\n        if l[i] > l[i + 1]:\n            n = l[i]\n            l[i] = l[i + 1]\n            l[i + 1] = n\n        i -= 1\n\n    return int(''.join(map(str, l)))\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(1000))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(99))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(801))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(1))",
    "def next_smallest_palindrome(number):\n    n = number\n    while n > 0:\n        n = n // 10\n        if n == 0:\n            n = 1\n        elif n == 1:\n            n = 10\n        elif n == 2:\n            n = 100\n        elif n == 3:\n            n = 1000\n        elif n == 4:\n            n = 10000\n        elif n == 5:\n            n = 100000\n        elif n == 6:\n            n = 1000000\n        elif n == 7:\n            n = 1000000000\n        elif n == 8:\n            n = 1000000000000\n        elif n == 9:\n            n = 100000000\n        elif n == 10:\n            n = 10000000001\n        elif n == 11:\n            n = 10000000011\n        elif n == 12:\n            n = 10000000012\n        elif n == 13:\n            n = 10000000013\n        elif n == 14:\n            n = 10000000014\n        elif n == 15:\n            n = 10000000015\n        elif n == 16:\n            n = 10000000016\n        elif n == 17:\n            n = 10000000017\n        elif n == 18:\n            n = 10000000018\n        elif n == 19:\n            n = 10000000019\n        elif n == 20:\n            n = 10000000020\n        elif n == 21:\n            n = 10000000021\n        elif n == 22:\n            n = 10000000022\n        elif n == 23:\n            n = 10000000023\n        elif n == 24:\n            n = 10000000024\n        elif n == 25:\n            n = 10000000025\n        elif n == 26:\n            n = 10000000026\n        elif n == 27:\n            n = 10000000027\n        elif n == 28:\n            n = 10000000028\n        elif n == 29:\n            n = 10000000029\n        elif n == 30:\n            n = 10000000030\n        elif n == 31:\n            n = 10000000031\n        elif n == 32:\n            n = 10000000032\n        elif n == 33:\n            n = 10000000033\n        elif n == 34:\n            n = 10000000034\n        elif n ==",
    "def next_smallest_palindrome(n):\n    # Write your code here\n    if n < 10:\n        return n\n    s = str(n)\n    for i in range(len(s)):\n        if s[i] == s[len(s)-1]:\n            if i == len(s)-2:\n                return int(s[:i] + s[i+1:])\n            else:\n                return int(s[:i] + s[i+1:i+2])\n    return n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(101))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(0))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(101))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(0))",
    "def next_smallest_palindrome(n):\n    n = str(n)\n    if len(n) < 3:\n        return n\n    for i in range(len(n)-2, -1, -1):\n        if n[i] == n[i+1]:\n            return n[:i+1] + n[i+2:]\n    return n + n[::-1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(121))",
    "def next_smallest_palindrome(number):\n    number = str(number)\n    if number[::-1] == number:\n        return number\n    else:\n        return number[::-1]\n\n\nprint(next_smallest_palindrome(12345))",
    "def next_smallest_palindrome(number):\n    # Write your code here\n    number_string = str(number)\n    reverse_number = 0\n    for i in range(len(number_string)):\n        reverse_number = reverse_number * 10 + int(number_string[i])\n    return reverse_number\n\n\ndef main():\n    print(next_smallest_palindrome(0))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next_smallest_palindrome(25))\n    print(next_smallest_palindrome(26))\n    print(next_smallest_palindrome(27))\n    print(next_",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    if n == 10:\n        return 9\n    if n % 10 == 0:\n        return int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1] + str(n)[1:])\n\nprint(next_smallest_palindrome(999))\nprint(next_smallest_palindrome(99))\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(0))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(0))\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(6))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(7))\nprint(next_smallest_palindrome(8))\nprint(next_smallest_palindrome(7))\nprint(next_smallest_palindrome(6))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(6))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(8))\nprint(next_smallest_palindrome(6))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(7))\nprint(next",
    "def next_smallest_palindrome(n):\n    s = str(n)\n    if s[0] == s[-1]:\n        return n\n    if s[0] == s[-2]:\n        return n\n    if s[0] == s[-3]:\n        return n\n    if s[0] == s[-4]:\n        return n\n    if s[0] == s[-5]:\n        return n\n    if s[0] == s[-6]:\n        return n\n    if s[0] == s[-7]:\n        return n\n    if s[0] == s[-8]:\n        return n\n    if s[0] == s[-9]:\n        return n\n    if s[0] == s[-10]:\n        return n\n    if s[0] == s[-11]:\n        return n\n    if s[0] == s[-12]:\n        return n\n    if s[0] == s[-13]:\n        return n\n    if s[0] == s[-14]:\n        return n\n    if s[0] == s[-15]:\n        return n\n    if s[0] == s[-16]:\n        return n\n    if s[0] == s[-17]:\n        return n\n    if s[0] == s[-18]:\n        return n\n    if s[0] == s[-19]:\n        return n\n    if s[0] == s[-20]:\n        return n\n    if s[0] == s[-21]:\n        return n\n    if s[0] == s[-22]:\n        return n\n    if s[0] == s[-23]:\n        return n\n    if s[0] == s[-24]:\n        return n\n    if s[0] == s[-25]:\n        return n\n    if s[0] == s[-26]:\n        return n\n    if s[0] == s[-27]:\n        return n\n    if s[0] == s[-28]:\n        return n\n    if s[0] == s[-29]:\n        return n\n    if s[0] == s[-30]:\n        return n\n    if s[0] == s",
    "class Solution:\n    def nextSmallestPalindrome(self, n: int) -> int:\n        if n <= 0:\n            return 0\n        result = 0\n        for i in range(n, 1, -1):\n            if self.isPalindrome(i):\n                result = i\n                break\n        return result\n\n    def isPalindrome(self, n):\n        if n == 1:\n            return True\n        if n < 10:\n            return False\n        if n % 10 == 0:\n            return False\n        if n % 100 == 0:\n            return False\n        if n % 1000 == 0:\n            return False\n        return True",
    "def next_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n\n    r = str(n)\n    i = len(r) - 1\n\n    while i > 0:\n        if r[i] == r[i - 1]:\n            i -= 1\n        else:\n            return n\n\n    return n\n\n\nif __name__ == '__main__':\n    assert next_palindrome(1) == 1\n    assert next_palindrome(10) == 10\n    assert next_palindrome(11) == 11\n    assert next_palindrome(12) == 12\n    assert next_palindrome(13) == 13\n    assert next_palindrome(14) == 14\n    assert next_palindrome(15) == 15\n    assert next_palindrome(16) == 16\n    assert next_palindrome(17) == 17\n    assert next_palindrome(18) == 18\n    assert next_palindrome(19) == 19\n    assert next_palindrome(20) == 20\n    assert next_palindrome(21) == 21\n    assert next_palindrome(22) == 22\n    assert next_palindrome(23) == 23\n    assert next_palindrome(24) == 24\n    assert next_palindrome(25) == 25\n    assert next_palindrome(26) == 26\n    assert next_palindrome(27) == 27\n    assert next_palindrome(28) == 28\n    assert next_palindrome(29) == 29\n    assert next_palindrome(30) == 30\n    assert next_palindrome(31) == 31\n    assert next_palindrome(32) == 32\n    assert next_palindrome(33) == 33\n    assert next_palindrome(34) == 34\n    assert next_palindrome(35) == 35\n    assert next_palindrome(36) == 36\n    assert next_palindrome(37) == 37\n    assert next_palindrome(38) == 38\n    assert next_palind",
    "class Solution:\n    def next_smallest_palindrome(self, n: int) -> int:\n        if n == 1:\n            return 1\n        for i in range(int(n ** 0.5) + 1):\n            if n % i == 0:\n                return i\n        return n\n\n\ns = Solution()\nprint(s.next_smallest_palindrome(0))\nprint(s.next_smallest_palindrome(1))\nprint(s.next_smallest_palindrome(10))\nprint(s.next_smallest_palindrome(100))\nprint(s.next_smallest_palindrome(123456789))\nprint(s.next_smallest_palindrome(10010))",
    "def next_smallest_palindrome(n):\n    if n == 0:\n        return 0\n    s = str(n)\n    for i in range(len(s)-1, -1, -1):\n        if s[i]!= s[i+1]:\n            return n\n    return n\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(next_smallest_palindrome(n))",
    "def next_smallest_palindrome(num):\n    if num == 0:\n        return 0\n    if num < 0:\n        return None\n    num = abs(num)\n    if num == 1:\n        return -1\n    while True:\n        rem = num % 10\n        if rem == 0:\n            return num\n        num = int(num / 10)\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(123456789))\n    print(next_smallest_palindrome(-1))\n    print(next_smallest_palindrome(0))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"2\"\n        elif n == 3:\n            return \"3\"\n        elif n == 4:\n            return \"4\"\n        elif n == 5:\n            return \"5\"\n        elif n == 6:\n            return \"6\"\n        elif n == 7:\n            return \"7\"\n        elif n == 8:\n            return \"8\"\n        elif n == 9:\n            return \"9\"\n        elif n == 10:\n            return \"10\"\n        elif n == 11:\n            return \"11\"\n        elif n == 12:\n            return \"12\"\n        elif n == 13:\n            return \"13\"\n        elif n == 14:\n            return \"14\"\n        elif n == 15:\n            return \"15\"\n        elif n == 16:\n            return \"16\"\n        elif n == 17:\n            return \"17\"\n        elif n == 18:\n            return \"18\"\n        elif n == 19:\n            return \"19\"\n        elif n == 20:\n            return \"20\"\n        elif n == 21:\n            return \"21\"\n        elif n == 22:\n            return \"22\"\n        elif n == 23:\n            return \"23\"\n        elif n == 24:\n            return \"24\"\n        elif n == 25:\n            return \"25\"\n        elif n == 26:\n            return \"26\"\n        elif n == 27:\n            return \"27\"\n        elif n == 28:\n            return \"28\"\n        elif n == 29:\n            return \"29\"\n        elif n == 30:\n            return \"30\"\n        elif n == 31:\n            return \"31\"\n        elif n == 32:\n            return \"32\"\n        elif n == 33:\n            return \"33\"\n        elif n == 34:\n            return \"34\"\n        elif n == 35:\n            return \"35\"\n        elif n == 36:\n            return \"36\"\n        elif n == 37:\n            return \"37\"\n        elif n == 38:\n            return \"",
    "def next_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return next_palindrome(n // 10) * 10 + n % 10",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    if n == 1:\n        return 10\n    if n == 10:\n        return 10\n    if n % 10 == 0:\n        return n // 10\n    for i in range(9, n, -1):\n        if n % i == 0:\n            return i\n    return n // 10\n\n\nif __name__ == \"__main__\":\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(100) == 1\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(9999) == 9999\n    assert next_smallest_palindrome(10000) == 10000\n    assert next_smallest_palindrome(1001) == 1001\n    assert next_smallest_palindrome(1010) == 1010\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(10000) == 10000\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(101) == 101\n    assert next_smallest_palindrome(100) == 100\n    assert next_smallest_palindrome(1010) == 1010\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(1001) == 1001\n    assert next_smallest_palindrome(1010) == 1010\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(10000) == 10000\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(1001) == 1001\n    assert next_smallest_palindrome(1010) == 1010\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(10000) == 10000",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        remainder = num % 10\n        rev_num = rev_num * 10 + remainder\n        num = num // 10\n    return rev_num\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(0))",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 10:\n        return 100\n    if n == 100:\n        return 1000\n    if n == 1000:\n        return 100100\n    if n == 100100:\n        return 10001000\n    if n == 10001000:\n        return 10010000\n    if n == 10010000:\n        return 100010000\n    if n == 100010000:\n        return 100100100\n    if n == 100100100:\n        return 1000100100\n    if n == 1000100100:\n        return 100100100\n    if n == 100100100:\n        return 1000100100\n    if n == 100100100:\n        return 100100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 100100100:\n        return 1000100100\n    if n == 100100100:\n        return 1000100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 100100100:\n        return 100100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 1000100100\n    if n == 1000100100:\n        return 100100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 1000100100:\n        return 100100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 1000100100\n    if n == 100100100:\n        return 100100100\n    if n == 1000100100:\n        return 1000100100\n    if n == 1000100100:",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    # start from 1, end at 2\n    end = num - 1\n    while end > 1:\n        # get the next number\n        next_num = num * 10 + end\n        # check if next number is a palindrome\n        if is_palindrome(next_num):\n            # get the next number\n            next_num = next_num - 1\n        # increment end by one\n        end -= 1\n    return next_num\n\n\ndef is_palindrome(num):\n    # if num is odd\n    if num % 2!= 0:\n        return False\n\n    # if the number is divisible by 10\n    # if the remainder is 1, then the number is a palindrome\n    remainder = num % 10\n    if remainder == 1:\n        return True\n\n    # else, the number is a palindrome\n    # and we need to iterate from 1 to 10\n    for i in range(1, 10):\n        # if the remainder is 1, then we need to check the next number\n        if remainder == 1:\n            return True\n\n        # else, we need to check the next number\n        remainder = remainder * 10 + i\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))",
    "def next_smallest_palindrome(number):\n    if number < 10:\n        return number\n    if number % 10 == 0:\n        number = number / 10\n    last_digit = number % 10\n    if last_digit == 0:\n        return number\n    next_number = number * 10\n    while next_number < last_digit:\n        if is_palindrome(next_number):\n            return next_number\n        next_number = next_number * 10 + last_digit\n    return last_digit\n\n\ndef is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\n\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(10))",
    "def next_smallest_palindrome(n):\n    for i in range(100, n):\n        if is_palindrome(i):\n            return i\n    return -1\n\n\ndef is_palindrome(n):\n    if n < 10:\n        return True\n    if n % 10 == 0:\n        return False\n    s = str(n)\n    for i in range(len(s)-1, 0, -1):\n        if s[i]!= s[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(12) == 12\n    assert next_smallest_palindrome(1234) == 1211\n    assert next_smallest_palindrome(123412) == 1211\n    assert next_smallest_palindrome(123413) == 1211\n    assert next_smallest_palindrome(123414) == 1211\n    assert next_smallest_palindrome(123415) == 1211\n    assert next_smallest_palindrome(123416) == 1211\n    assert next_smallest_palindrome(123417) == 1211\n    assert next_smallest_palindrome(123418) == 1211\n    assert next_smallest_palindrome(123419) == 1211\n    assert next_smallest_palindrome(123420) == 1211\n    assert next_smallest_palindrome(123421) == 1211\n    assert next_smallest_palindrome(123422) == 1211\n    assert next_smallest_palindrome(123423) == 1211\n    assert next_smallest_palindrome(123424) == 1211\n    assert next_smallest_palindrome(123425) == 1211\n    assert next_smallest_palindrome(123426) == 1211\n    assert next_smallest_palindrome(123427) == 1211\n    assert next_smallest_palindrome(123428) == 1211\n    assert next_smallest_palindrome(123429)",
    "def next_smallest_palindrome(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 1:\n        return number\n    else:\n        return (number + 1) // 2\n\n\nprint(next_smallest_palindrome(11))",
    "def next_smallest_palindrome(n):\n    if n == 0:\n        return 0\n    if n < 0:\n        return 1\n    if n % 10 == 0:\n        return n % 10 + 1\n    else:\n        return next_smallest_palindrome(n // 10) + 1\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The next smallest palindrome is: \", next_smallest_palindrome(n))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            i = 1\n            while n!= 1 and i < 10:\n                j = n // 10\n                if n % 10 == 0:\n                    n = j\n                    n //= 10\n                else:\n                    n = j * 10 + n % 10\n                i += 1\n            return n",
    "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # Create a list to store the next smallest palindrome\n    next_palindrome = [0] * (num + 1)\n\n    # First pass: Find the smallest palindrome and place it at the right of the number\n    for i in range(1, num + 1):\n        if i < num:\n            next_palindrome[i] = i\n            if i < next_palindrome[i - 1]:\n                next_palindrome[i] = next_palindrome[i - 1] + 1\n        else:\n            next_palindrome[i] = i - 1\n\n    # Second pass: Find the smallest palindrome and place it at the left of the number\n    for i in range(num, 0, -1):\n        if i < num:\n            next_palindrome[i] = i\n            if i > next_palindrome[i - 1]:\n                next_palindrome[i] = next_palindrome[i - 1] - 1\n\n    # Third pass: Find the smallest palindrome and place it at the right of the number\n    for i in range(num + 1):\n        if i < num:\n            next_palindrome[i] = i\n            if i < next_palindrome[i + 1]:\n                next_palindrome[i] = next_palindrome[i + 1] - 1\n        else:\n            next_palindrome[i] = i - 1\n\n    return min(next_palindrome)\n\n\nif __name__ == \"__main__\":\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(101) == 101\n    assert next_smallest_palindrome(100) == 101\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(11) == 11",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    if n == 10:\n        return \"1\"\n    if n % 10 == 0:\n        return str(n) + next_smallest_palindrome(n//10)\n    return str(n) + str(next_smallest_palindrome(n//10) + 1)\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(11))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(14))\n    print(next_smallest_palindrome(15))\n    print(next_smallest_palindrome(16))\n    print(next_smallest_palindrome(17))\n    print(next_smallest_palindrome(18))\n    print(next_smallest_palindrome(19))\n    print(next_smallest_palindrome(20))\n    print(next_smallest_palindrome(21))\n    print(next_smallest_palindrome(22))\n    print(next_smallest_palindrome(23))\n    print(next_smallest_palindrome(24))\n    print(next_smallest_palindrome(25))\n    print(next_smallest_palindrome(26))\n    print(next_smallest_palindrome(27))\n    print(next_smallest_palindrome(28))\n    print(next_smallest_palindrome(29))\n    print(next_smallest_palindrome(30))\n    print(next_smallest_palindrome(31))\n    print(next_smallest_palindrome(32))\n    print(next_smallest_palindrome(33))\n    print(next_smallest_palindrome(34))\n    print(next_smallest_palindrome(35))\n    print(next_smallest_palindrome(36))\n    print(next_smallest_palindrome(37))",
    "def next_smallest_palindrome(n):\n    n_str = str(n)\n    if n_str == n_str[::-1]:\n        return n\n    return None\n\n\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(13))\nprint(next_smallest_palindrome(14))\nprint(next_smallest_palindrome(15))\nprint(next_smallest_palindrome(16))\nprint(next_smallest_palindrome(17))\nprint(next_smallest_palindrome(18))\nprint(next_smallest_palindrome(19))\nprint(next_smallest_palindrome(20))\nprint(next_smallest_palindrome(21))\nprint(next_smallest_palindrome(22))\nprint(next_smallest_palindrome(23))\nprint(next_smallest_palindrome(24))\nprint(next_smallest_palindrome(25))\nprint(next_smallest_palindrome(26))\nprint(next_smallest_palindrome(27))\nprint(next_smallest_palindrome(28))\nprint(next_smallest_palindrome(29))",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    if n % 10 == 0:\n        return n//10\n    else:\n        return n//10 + 1\n\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(1000))\nprint(next_smallest_palindrome(12345))\nprint(next_smallest_palindrome(123456789))",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    for i in range(n//2, -1, -1):\n        if str(n)[::-1] == str(n)[::-1][i:]:\n            return n\n    return 0",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    for i in range(int(n**0.5)+1):\n        if n%i==0:\n            break\n    if i == int(n**0.5):\n        return i+1\n\n    i = int(n**0.5)\n    while i+1 < n:\n        if n%i == 0:\n            break\n        i += 1\n\n    while i+1 < n:\n        if n%i==0:\n            return i+1\n        i += 1\n\n    return n\n\n\nif __name__ == \"__main__\":\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(10) == 1\n    assert next_smallest_palindrome(11) == 2\n    assert next_smallest_palindrome(13) == 4\n    assert next_smallest_palindrome(9) == 9\n    assert next_smallest_palindrome(9) == 9\n    assert next_smallest_palindrome(100) == 101\n    assert next_smallest_palindrome(101) == 101\n    assert next_smallest_palindrome(101) == 101\n    assert next_smallest_palindrome(1001) == 1011\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212) == 1212\n    assert next_smallest_palindrome(1212)",
    "class Solution:\n    def nextSmallestPalindrome(self, n: int) -> int:\n        n = str(n)\n        n = n[::-1]\n        n = int(n)\n        return n\n\n\ns = Solution()\nprint(s.nextSmallestPalindrome(99))",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    return next_smallest_palindrome(n // 10) * 10 + next_smallest_palindrome(n % 10)\n\n\nif __name__ == '__main__':\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(10) == 9\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(12) == 12\n    assert next_smallest_palindrome(13) == 13\n    assert next_smallest_palindrome(14) == 14\n    assert next_smallest_palindrome(15) == 15\n    assert next_smallest_palindrome(16) == 16\n    assert next_smallest_palindrome(17) == 17\n    assert next_smallest_palindrome(18) == 18\n    assert next_smallest_palindrome(19) == 19\n    assert next_smallest_palindrome(20) == 20\n    assert next_smallest_palindrome(21) == 21\n    assert next_smallest_palindrome(22) == 22\n    assert next_smallest_palindrome(23) == 23\n    assert next_smallest_palindrome(24) == 24\n    assert next_smallest_palindrome(25) == 25\n    assert next_smallest_palindrome(26) == 26\n    assert next_smallest_palindrome(27) == 27\n    assert next_smallest_palindrome(28) == 28\n    assert next_smallest_palindrome(29) == 29\n    assert next_smallest_palindrome(30) == 30\n    assert next_smallest_palindrome(31) == 31\n    assert next_smallest_palindrome(32) == 32\n    assert next_smallest_palindrome(33) == 33\n    assert next_smallest_palindrome(34) == 34\n    assert next_smallest_palindrome(35) == 35\n    assert next_smallest_pal",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n % 2 == 0:\n            return self.nextSmallestPalindrome(n / 2)\n        else:\n            return self.nextSmallestPalindrome(3 * n + 1)\n\n\nn = 3\nprint(Solution().nextSmallestPalindrome(n))",
    "def next_smallest_palindrome(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 1\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 1\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 1\n    if n == 45",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 9\n        if n == 6:\n            return 11\n        if n == 7:\n            return 13\n        if n == 8:\n            return 15\n        if n == 9:\n            return 17\n        if n == 10:\n            return 19\n        if n == 11:\n            return 23\n        if n == 12:\n            return 29\n        if n == 13:\n            return 37\n        if n == 14:\n            return 41\n        if n == 15:\n            return 53\n        if n == 16:\n            return 67\n        if n == 17:\n            return 81\n        if n == 18:\n            return 99\n        if n == 19:\n            return 101\n        if n == 20:\n            return 103\n        if n == 21:\n            return 109\n        if n == 22:\n            return 113\n        if n == 23:\n            return 131\n        if n == 24:\n            return 141\n        if n == 25:\n            return 151\n        if n == 26:\n            return 161\n        if n == 27:\n            return 171\n        if n == 28:\n            return 181\n        if n == 29:\n            return 191\n        if n == 30:\n            return 201\n        if n == 31:\n            return 211\n        if n == 32:\n            return 221\n        if n == 33:\n            return 231\n        if n == 34:\n            return 241\n        if n == 35:\n            return 251\n        if n == 36:\n            return 261\n        if n == 37:\n            return 271\n        if n == 38:\n            return 281\n        if n == 39:\n            return 291\n        if n == 40:\n            return 301\n        if n == 41:\n            return",
    "class Solution:\n    def nextSmallestPalindrome(self, n: int) -> int:\n        if n < 10:\n            return n\n\n        res = n\n        while res > 9:\n            res /= 10\n\n        while res % 10!= 0:\n            res += 1\n\n        return int(str(res) + str(res)[::-1])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.nextSmallestPalindrome(0))\n    print(s.nextSmallestPalindrome(2))\n    print(s.nextSmallestPalindrome(3))\n    print(s.nextSmallestPalindrome(5))\n    print(s.nextSmallestPalindrome(8))",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n\n    res = num\n    while res > 0:\n        res = res / 10\n        res = res % 10\n\n    return res\n\nif __name__ == \"__main__\":\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(5) == 5\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(100) == 100\n    assert next_smallest_palindrome(999) == 999",
    "def next_smallest_palindrome(n):\n    if n == 1:\n        return 1\n    else:\n        return n * next_smallest_palindrome(n-1)\n\n\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(13))\nprint(next_smallest_palindrome(14))\nprint(next_smallest_palindrome(15))\nprint(next_smallest_palindrome(16))\nprint(next_smallest_palindrome(17))\nprint(next_smallest_palindrome(18))\nprint(next_smallest_palindrome(19))\nprint(next_smallest_palindrome(20))\nprint(next_smallest_palindrome(21))\nprint(next_smallest_palindrome(22))\nprint(next_smallest_palindrome(23))\nprint(next_smallest_palindrome(24))\nprint(next_smallest_palindrome(25))\nprint(next_smallest_palindrome(26))\nprint(next_smallest_palindrome(27))\nprint(next_smallest_palindrome(28))\nprint(next_smallest_palindrome(29))\nprint(next_smallest_palindrome(30))\nprint(next_smallest_palindrome(31))\nprint(next_smallest_palindrome(32))\nprint(next_smallest_palindrome(33))\nprint(next_smallest_palindrome(34))\nprint(next_smallest_palindrome(35))\nprint(next_smallest_palindrome(36))\nprint(next_smallest_palindrome(37))\nprint(next_smallest_palindrome(38))\nprint(next_smallest_palindrome(39))\nprint(next_smallest_palindrome(40))\nprint(next_smallest_palindrome(41))\nprint(next_smallest_palindrome(42",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    mid = n // 10\n    if n % 10 == 0:\n        return mid\n    if mid > 10:\n        return next_smallest_palindrome(mid)\n    else:\n        return int(str(mid) + str(n % 10))\n\n\ndef main():\n    assert next_smallest_palindrome(123456789) == 923\n    assert next_smallest_palindrome(123) == 121\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(4) == 4\n    assert next_smallest_palindrome(1024) == 10\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(2) == 1\n    assert next_smallest_palindrome(10) == 1\n    assert next_smallest_palindrome(0) == 1\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(2) == 2\n    assert next_smallest_palindrome(3) == 2\n    assert next_smallest_palindrome(5) == 5\n    assert next_smallest_palindrome(4) == 4\n    assert next_smallest_palindrome(6) == 6\n    assert next_smallest_palindrome(7) == 7\n    assert next_smallest_palindrome(8) == 8\n    assert next_smallest_palindrome(9) == 9\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(11) == 11\n    assert next_smallest_palindrome(12) == 12\n    assert next_smallest_palindrome(13) == 13\n    assert next_smallest_palindrome(14) == 14\n    assert next_smallest_palindrome(15) == 15\n    assert next_smallest_palindrome(16)",
    "def next_smallest_palindrome(num):\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    if num == 3:\n        return 1\n    if num == 4:\n        return 1\n    if num == 5:\n        return 1\n    if num == 6:\n        return 1\n    if num == 7:\n        return 1\n    if num == 8:\n        return 1\n    if num == 9:\n        return 1\n    if num == 10:\n        return 1\n    if num == 11:\n        return 1\n    if num == 12:\n        return 1\n    if num == 13:\n        return 1\n    if num == 14:\n        return 1\n    if num == 15:\n        return 1\n    if num == 16:\n        return 1\n    if num == 17:\n        return 1\n    if num == 18:\n        return 1\n    if num == 19:\n        return 1\n    if num == 20:\n        return 1\n    if num == 21:\n        return 1\n    if num == 22:\n        return 1\n    if num == 23:\n        return 1\n    if num == 24:\n        return 1\n    if num == 25:\n        return 1\n    if num == 26:\n        return 1\n    if num == 27:\n        return 1\n    if num == 28:\n        return 1\n    if num == 29:\n        return 1\n    if num == 30:\n        return 1\n    if num == 31:\n        return 1\n    if num == 32:\n        return 1\n    if num == 33:\n        return 1\n    if num == 34:\n        return 1\n    if num == 35:\n        return 1\n    if num == 36:\n        return 1\n    if num == 37:\n        return 1\n    if num == 38:\n        return 1\n    if num == 39:\n        return 1\n    if num == 40:\n        return 1\n    if num == 41:\n        return 1\n    if num == 42:\n        return 1\n    if num == 43:\n        return 1\n    if num == 44:\n        return 1\n    if num == 45:\n        return 1",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n\n    return str(int(str(n)[-1]) + int(str(n)[-2]))\n\n\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(0))\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(4))\nprint(next_smallest_palindrome(2))\nprint(next_smallest_palindrome(3))\nprint(next_smallest_palindrome(5))\nprint(next_smallest_palindrome(7))\nprint(next_smallest_palindrome(9))\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(12))\nprint(next_smallest_palindrome(13))\nprint(next_smallest_palindrome(14))\nprint(next_smallest_palindrome(15))\nprint(next_smallest_palindrome(16))\nprint(next_smallest_palindrome(17))\nprint(next_smallest_palindrome(18))\nprint(next_smallest_palindrome(19))\nprint(next_smallest_palindrome(20))\nprint(next_smallest_palindrome(21))\nprint(next_smallest_palindrome(22))\nprint(next_smallest_palindrome(23))\nprint(next_smallest_palindrome(24))\nprint(next_smallest_palindrome(25))\nprint(next_smallest_palindrome(26))\nprint(next_smallest_palindrome(27))\nprint(next_smallest_palindrome(28))\nprint(next_smallest_palindrome(29))\nprint(next_smallest_palindrome(30))\nprint(next_smallest_palindrome(31))\nprint(next_smallest_palindrome(32))\nprint(next_smallest_palind",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    num = str(num)\n    return num[-1::-1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(12))",
    "def next_smallest_palindrome(n):\n    # Write your code here\n    if n == 0:\n        return 0\n    i = n // 10\n    n -= i * 10\n    while n > 0:\n        if n % 10 == 1:\n            return i\n        else:\n            i = i * 10 + n % 10\n            n = n // 10\n    return n\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(0))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(99))",
    "def next_palindrome(num):\n    # write your code here\n    min_num = num\n    for i in range(1, num):\n        if num % i == 0:\n            min_num = i\n            break\n    return min_num\n\n\ndef test():\n    assert next_palindrome(10) == 11\n    assert next_palindrome(1) == 1\n    assert next_palindrome(100) == 101\n    assert next_palindrome(1000) == 1001\n    assert next_palindrome(11) == 11\n    assert next_palindrome(1001) == 1001\n    assert next_palindrome(1011) == 1011\n    assert next_palindrome(111011) == 111011\n\n\nif __name__ == \"__main__\":\n    test()",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 10:\n        return num\n    if num == 10:\n        return 1\n    if num == 11:\n        return 2\n    if num == 12:\n        return 3\n    if num == 13:\n        return 4\n    if num == 14:\n        return 5\n    if num == 15:\n        return 6\n    if num == 16:\n        return 7\n    if num == 17:\n        return 8\n    if num == 18:\n        return 9\n    if num == 19:\n        return 10\n    if num == 20:\n        return 11\n    if num == 21:\n        return 12\n    if num == 22:\n        return 13\n    if num == 23:\n        return 14\n    if num == 24:\n        return 15\n    if num == 25:\n        return 16\n    if num == 26:\n        return 17\n    if num == 27:\n        return 18\n    if num == 28:\n        return 19\n    if num == 29:\n        return 10\n    if num == 30:\n        return 11\n    if num == 31:\n        return 12\n    if num == 32:\n        return 13\n    if num == 33:\n        return 14\n    if num == 34:\n        return 15\n    if num == 35:\n        return 16\n    if num == 36:\n        return 17\n    if num == 37:\n        return 18\n    if num == 38:\n        return 19\n    if num == 39:\n        return 10\n    if num == 40:\n        return 11\n    if num == 41:\n        return 12\n    if num == 42:\n        return 13\n    if num == 43:\n        return 14\n    if num == 44:\n        return 15\n    if num == 45:\n        return 16\n    if num == 46:\n        return 17\n    if num == 47:\n        return 18\n    if num == 48:\n        return 19\n    if num == 49:\n        return 10\n    if num == 50:\n        return 11\n    if num == 51:\n        return 12\n    if num",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 2\n        elif n % 2 == 0:\n            return self.nextSmallestPalindrome(n//2)\n        else:\n            return self.nextSmallestPalindrome(3*n + 1)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.nextSmallestPalindrome(2) == 2\n    assert s.nextSmallestPalindrome(3) == 3\n    assert s.nextSmallestPalindrome(1) == 1\n    assert s.nextSmallestPalindrome(4) == 4\n    assert s.nextSmallestPalindrome(5) == 5\n    assert s.nextSmallestPalindrome(6) == 6\n    assert s.nextSmallestPalindrome(7) == 7\n    assert s.nextSmallestPalindrome(8) == 8\n    assert s.nextSmallestPalindrome(9) == 9\n    assert s.nextSmallestPalindrome(10) == 10\n    assert s.nextSmallestPalindrome(11) == 11\n    assert s.nextSmallestPalindrome(12) == 12\n    assert s.nextSmallestPalindrome(13) == 13\n    assert s.nextSmallestPalindrome(14) == 14\n    assert s.nextSmallestPalindrome(15) == 15\n    assert s.nextSmallestPalindrome(16) == 16\n    assert s.nextSmallestPalindrome(17) == 17\n    assert s.nextSmallestPalindrome(18) == 18\n    assert s.nextSmallestPalindrome(19) == 19\n    assert s.nextSmallestPalindrome(20) == 20\n    assert s.nextSmallestPalindrome(21) == 21\n    assert s.nextSmallestPalindrome(22) == 22\n    assert s.nextSmallestPalindrome(23) == 23\n    assert s.nextSmallestPalindrome(24) == 24\n    assert s.nextSmallestPalindrome",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n\n        i = n - 1\n        while i > 0 and i % 10 == 0:\n            i = i // 10\n\n        if i == 0:\n            return n\n\n        while i > 0 and n % 10 == 0:\n            n = n // 10\n            i -= 1\n\n        if n == 1:\n            return n\n\n        if i == 0:\n            return n * 10 + 1\n\n        return n * 10 + i\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.nextSmallestPalindrome(0))\n    print(solution.nextSmallestPalindrome(1))\n    print(solution.nextSmallestPalindrome(2))\n    print(solution.nextSmallestPalindrome(4))\n    print(solution.nextSmallestPalindrome(5))\n    print(solution.nextSmallestPalindrome(9))",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n\n\ndef next_smallest_palindrome_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Solution 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n % 10 == 0:\n        return n // 10\n    while n % 10!= 0:\n        n //= 10\n    return n\n\n    # Solution 2\n    # n = str(n)\n    # n_str = ''\n    # for i in range(len(n)):\n    #     n_str += n[i]\n    #     if i < len(n) - 1:\n    #         n_str += n[i + 1]\n    # return int(n_str)\n\n    # Solution 3\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n % 10 == 0:\n        return n // 10\n    while n % 10!= 0:\n        n //= 10\n    return n\n\n\nn = int(input())\nprint(next_smallest_palindrome(n))",
    "def next_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 10:\n        return n\n    # \u5bf9n\u8fdb\u884c\u5206\u89e3\n    if n < 100:\n        if n % 10 == 0:\n            return n // 10\n        return n // 10 * 10\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 1000:\n        if n % 100 == 0:\n            return n // 100\n        return n // 100 * 100\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 1000000:\n        if n % 1000 == 0:\n            return n // 1000\n        return n // 1000 * 1000\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 1000000000:\n        if n % 1000000 == 0:\n            return n // 1000000\n        return n // 1000000 * 1000000\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 1000000000000:\n        if n % 1000000000 == 0:\n            return n // 1000000000\n        return n // 1000000000 * 1000000000\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 100000000000000:\n        if n % 100000000000000 == 0:\n            return n // 100000000000000\n        return n // 100000000000000 * 100000000000000\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 10000000000000000000000:\n        if n % 10000000000000000000000 == 0:\n            return n // 10000000000000000000000\n        return n // 10000000000000000000000 * 10000000000000000000000\n    # \u5bf9n\u8fdb\u884c\u6574\u6570\u5224\u65ad\n    if n < 1000000000000000000000000000000",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num <= 1:\n        return num\n    if num % 10 == 1:\n        return num * 10 + 1\n    else:\n        return num * 10 + (num % 10 - 1)\n\n\ndef main():\n    print(next_smallest_palindrome(13))\n    print(next_smallest_palindrome(12))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(101))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def next_smallest_palindrome(n):\n    # Write your code here\n    if n < 10:\n        return n\n    else:\n        n = str(n)\n        n = n[::-1]\n        if n[0] == n[len(n)-1]:\n            return int(n)\n        else:\n            return int(n[::-1])",
    "def next_smallest_palindrome(n):\n    # Write your code here\n    # return next_smallest_palindrome_recursive(n)\n    return next_smallest_palindrome_iterative(n)\n\n\ndef next_smallest_palindrome_iterative(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 15\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 23\n    if n == 12:\n        return 29\n    if n == 13:\n        return 31\n    if n == 14:\n        return 37\n    if n == 15:\n        return 41\n    if n == 16:\n        return 43\n    if n == 17:\n        return 47\n    if n == 18:\n        return 49\n    if n == 19:\n        return 51\n    if n == 20:\n        return 53\n    if n == 21:\n        return 55\n    if n == 22:\n        return 57\n    if n == 23:\n        return 61\n    if n == 24:\n        return 67\n    if n == 25:\n        return 71\n    if n == 26:\n        return 73\n    if n == 27:\n        return 79\n    if n == 28:\n        return 83\n    if n == 29:\n        return 85\n    if n == 30:\n        return 91\n    if n == 31:\n        return 99\n    if n == 32:\n        return 101\n    if n == 33:\n        return 103\n    if n == 34:\n        return 105\n    if n == 35:\n        return 106\n    if n == 36:\n        return 107\n    if n == 37:\n        return 108\n    if n == 38:\n        return 109\n    if n == 39:\n        return 110\n    if n ==",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    return next_smallest_palindrome(int(str(n)[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(0))\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(999))\n    print(next_smallest_palindrome(999000))",
    "class Solution:\n    def nextSmallestPalindrome(self, n: int) -> int:\n        # write your code here\n        if n == 1:\n            return 1\n        if n < 10:\n            return n\n        if n == 10:\n            return 9\n        if n < 100:\n            return n\n        if n < 1000:\n            return n\n        if n < 10000:\n            return n\n        if n < 100000:\n            return n\n        if n < 1000000:\n            return n\n        if n < 1000000000:\n            return n\n        if n < 1000000000000:\n            return n\n        if n < 100000000:\n            return n\n        if n < 10000000000:\n            return n\n        if n < 100000000000000:\n            return n\n        if n < 10000000000000000:\n            return n\n        if n < 100000000000000000000:\n            return n\n        if n < 10000000000000000000000:\n            return n\n        if n < 10000000000000000000000:\n            return n\n        if n < 1000000000000000000000000:\n            return n\n        if n < 100000000000000000000000000:\n            return n\n        if n < 10000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 1000000000000000000000000000000000000000000:\n            return n\n        if n < 100000000000000000000000000",
    "def next_smallest_palindrome(num):\n    if num < 0:\n        return \"Invalid input\"\n    while num % 10 == 0:\n        num //= 10\n    if num == 1:\n        return \"1\"\n    if num % 10 == 0:\n        return str(num) + \"1\"\n    if num % 10 == 1:\n        return str(num) + \"10\"\n    if num % 10 == 2:\n        return str(num) + \"11\"\n    if num % 10 == 3:\n        return str(num) + \"12\"\n    if num % 10 == 4:\n        return str(num) + \"13\"\n    if num % 10 == 5:\n        return str(num) + \"14\"\n    if num % 10 == 6:\n        return str(num) + \"15\"\n    if num % 10 == 7:\n        return str(num) + \"16\"\n    if num % 10 == 8:\n        return str(num) + \"17\"\n    if num % 10 == 9:\n        return str(num) + \"18\"\n    if num % 10 == 10:\n        return str(num) + \"19\"\n    if num % 10 == 11:\n        return str(num) + \"20\"\n    if num % 10 == 12:\n        return str(num) + \"21\"\n    if num % 10 == 13:\n        return str(num) + \"22\"\n    if num % 10 == 14:\n        return str(num) + \"23\"\n    if num % 10 == 15:\n        return str(num) + \"24\"\n    if num % 10 == 16:\n        return str(num) + \"25\"\n    if num % 10 == 17:\n        return str(num) + \"26\"\n    if num % 10 == 18:\n        return str(num) + \"27\"\n    if num % 10 == 19:\n        return str(num) + \"28\"\n    if num % 10 == 20:\n        return str(num) + \"29\"\n    if num % 10 == 21:\n        return str(num) + \"30\"\n    if num % 10 == 22:\n        return str(num",
    "class Solution(object):\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = str(n)\n        i = 0\n        j = len(n) - 1\n        while i < j:\n            if n[i] == n[j]:\n                i += 1\n                j -= 1\n            elif n[i] > n[j]:\n                i += 1\n            else:\n                j -= 1\n        return n[i + 1:]",
    "def next_palindrome(n):\n    n = str(n)\n    n_len = len(n)\n    if n_len < 2:\n        return n\n    if n_len == 2:\n        return n[:1] + n[1:]\n    if n_len == 3:\n        return n[:2] + n[1:2] + n[2:]\n    if n_len == 4:\n        return n[:3] + n[1:3] + n[2:4]\n    if n_len == 5:\n        return n[:4] + n[1:4] + n[2:5]\n    if n_len == 6:\n        return n[:5] + n[1:5] + n[2:6]\n    if n_len == 7:\n        return n[:6] + n[1:6] + n[2:7]\n    if n_len == 8:\n        return n[:7] + n[1:7] + n[2:8]\n    if n_len == 9:\n        return n[:8] + n[1:8] + n[2:9]\n    if n_len == 10:\n        return n[:9] + n[1:9] + n[2:10]\n    if n_len == 11:\n        return n[:10] + n[1:10] + n[2:11]\n    if n_len == 12:\n        return n[:11] + n[1:11] + n[2:12]\n    if n_len == 13:\n        return n[:12] + n[1:12] + n[2:13]\n    if n_len == 14:\n        return n[:13] + n[1:13] + n[2:14]\n    if n_len == 15:\n        return n[:14] + n[1:14] + n[2:15]\n    if n_len == 16:\n        return n[:15] + n[1:15] + n[2:16]\n    if n_len == 17:\n        return n[:16] + n[1:16] + n[2:17",
    "def next_palindrome(number):\n    number = str(number)\n    i = 0\n    j = len(number) - 1\n    while i < j:\n        if number[i]!= number[j]:\n            return number\n        i += 1\n        j -= 1\n    return number\n\n\ndef main():\n    print(next_palindrome(0))\n    print(next_palindrome(1))\n    print(next_palindrome(2))\n    print(next_palindrome(3))\n    print(next_palindrome(4))\n    print(next_palindrome(5))\n    print(next_palindrome(6))\n    print(next_palindrome(7))\n    print(next_palindrome(8))\n    print(next_palindrome(9))\n    print(next_palindrome(10))\n    print(next_palindrome(11))\n    print(next_palindrome(12))\n    print(next_palindrome(13))\n    print(next_palindrome(14))\n    print(next_palindrome(15))\n    print(next_palindrome(16))\n    print(next_palindrome(17))\n    print(next_palindrome(18))\n    print(next_palindrome(19))\n    print(next_palindrome(20))\n    print(next_palindrome(21))\n    print(next_palindrome(22))\n    print(next_palindrome(23))\n    print(next_palindrome(24))\n    print(next_palindrome(25))\n    print(next_palindrome(26))\n    print(next_palindrome(27))\n    print(next_palindrome(28))\n    print(next_palindrome(29))\n    print(next_palindrome(30))\n    print(next_palindrome(31))\n    print(next_palindrome(32))\n    print(next_palindrome(33))\n    print(next_palindrome(34))\n    print(next_palindrome(35))",
    "def next_smallest_palindrome(num):\n    # write your code here\n    if num <= 9:\n        return num\n    elif num <= 10**9:\n        return num // 10\n    elif num <= 10**10:\n        return num // 100\n    elif num <= 10**100:\n        return num // 1000\n    else:\n        return num // 10**9\n\n\nif __name__ == '__main__':\n    assert next_smallest_palindrome(100) == 100\n    assert next_smallest_palindrome(1000) == 1000\n    assert next_smallest_palindrome(10) == 10\n    assert next_smallest_palindrome(1001) == 1001\n    assert next_smallest_palindrome(10**9) == 10**9\n    assert next_smallest_palindrome(10**10) == 10**10\n    assert next_smallest_palindrome(10**100) == 10**100",
    "def next_smallest_palindrome(num):\n    for i in range(1, num + 1):\n        if num % i == 0:\n            num = num / i\n            break\n    if num == 1:\n        return num\n    return num + 1\n\n\nprint(next_smallest_palindrome(1))\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(11))\nprint(next_smallest_palindrome(100))",
    "def next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    else:\n        return str(n) + str(int(n) + 1)[::-1]\n\n\nprint(next_smallest_palindrome(10))\nprint(next_smallest_palindrome(100))\nprint(next_smallest_palindrome(1000))\nprint(next_smallest_palindrome(10000))\nprint(next_smallest_palindrome(100000))\nprint(next_smallest_palindrome(1000000))",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n % 10 == 1:\n        return int(n / 10)\n    if n % 10 == 2:\n        return int(n / 10) + 1\n    if n % 10 == 3:\n        return int(n / 10) + 2\n    if n % 10 == 4:\n        return int(n / 10) + 3\n    if n % 10 == 5:\n        return int(n / 10) + 4\n    if n % 10 == 6:\n        return int(n / 10) + 5\n    if n % 10 == 7:\n        return int(n / 10) + 6\n    if n % 10 == 8:\n        return int(n / 10) + 7\n    if n % 10 == 9:\n        return int(n / 10) + 8\n    if n % 10 == 10:\n        return int(n / 10) + 9\n    return int(n / 10) + 10\n\nif __name__ == \"__main__\":\n    print(next_smallest_palindrome(9))",
    "class Solution:\n    # @param A : integer\n    # @return a string\n    def nextSmallestPalindrome(self, A):\n        if A == 0:\n            return \"0\"\n\n        if A < 10:\n            return str(A)\n\n        ans = str(A)\n        for i in range(len(ans)-1, -1, -1):\n            if ans[i] == ans[i+1]:\n                ans = ans[:i]+ans[i+2:]\n                break\n\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.nextSmallestPalindrome(12))\n    print(s.nextSmallestPalindrome(1))\n    print(s.nextSmallestPalindrome(10))\n    print(s.nextSmallestPalindrome(11))",
    "class Solution:\n    def nextSmallestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = str(n)\n        for i in range(len(n)-1, -1, -1):\n            if n[i] == n[i+1]:\n                n = n[:i] + n[i+2:]\n                break\n        return int(n)",
    "def next_smallest_palindrome(num):\n    if num < 10:\n        return num\n    if num % 10 == 0:\n        return int(str(num)[::-1])\n    else:\n        return int(str(num)[-1:])\n\n\ndef main():\n    print(next_smallest_palindrome(999))\n\n\nif __name__ == '__main__':\n    main()",
    "def next_smallest_palindrome(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    if n % 10 == 0:\n        return (n // 10) * 10 + next_smallest_palindrome(n // 10)\n\n    if n % 100 == 0:\n        return (n // 100) * 100 + next_smallest_palindrome(n // 100)\n\n    if n % 1000 == 0:\n        return (n // 1000) * 1000 + next_smallest_palindrome(n // 1000)\n\n    return (n // 10000) * 10000 + next_smallest_palindrome(n // 10000)\n\n\ndef main():\n    n = int(input())\n    print(next_smallest_palindrome(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 10:\n        return num\n    if num % 10 == 0:\n        return num // 10\n    if num % 100 == 0:\n        return num // 100\n    if num % 1000 == 0:\n        return num // 1000\n\n    return num // 10 + num // 100 + num // 1000\n\n\nif __name__ == '__main__':\n    assert next_smallest_palindrome(12345) == 12345\n    assert next_smallest_palindrome(123456) == 123456\n    assert next_smallest_palindrome(12345678) == 12345678\n    assert next_smallest_palindrome(1234567812345) == 1234567812345\n    assert next_smallest_palindrome(123456781234512345) == 123456781234512345\n    assert next_smallest_palindrome(1234512345) == 1234512345\n    assert next_smallest_palindrome
    "def next_smallest_palindrome(num):\n\t# Write your code here\n\t\n\tif num < 10:\n\t\treturn num\n\t\n\tif num % 10 == 0:\n\t\tnum = num // 10\n\t\t\n\tif num % 100 == 0:\n\t\tnum = num // 100\n\t\t\n\tif num % 1000 == 0:\n\t\tnum = num // 1000\n\t\t\n\tif num % 1000000 == 0:\n\t\tnum = num // 1000000\n\t\t\n\tif num % 1000000000 == 0:\n\t\tnum = num // 1000000000\n\t\t\n\tif num % 1000000000000 == 0:\n\t\tnum = num // 1000000000000\n\t\t\n\tif num % 1000000000000000 == 0:\n\t\tnum = num // 1000000000000000\n\t\t\n\tif num % 100000000000080000000 == 0:\n\t\tnum = num // 100000000000080000000\n\t\t\n\tif num % 10000000000008000000 == 0:\n\t\tnum = num // 10000000000008000000\n\t\t\n\tif num % 100000000000080000008000000 == 0:\n\t\tnum = num // 100000000000080000008000000\n\t\t\n\tif num % 10000000000008000000080000000 == 0:\n\t\tnum = num // 10000000000008000000080000000\n\t\t\n\tif num % 10000000000008000000800000008000000 == 0:\n\t\tnum = num // 100000000000080000000800000008000000\n\t\t\n\tif num % 10000000000008000000080000000800000008000000 == 0:\n\t\tnum = num // 10000000000008000000080000000800000008000000\n\t\t\n\tif num % 10000000000008000000080000000800000008000000 == 0:\n\t\tnum = num // 10000000000008000000080000000800000008000000\n\t\t\n\tif num % 10000000000008000000080000000800000008000000 == 0:\n\t\tnum = num // 10000000000008000000080000000800000008000000\n\t\t\n\tif num % 1000000000000800000008000000080000000800000008000000 == 0:\n\t\tnum = num // 1000000000000800000008000000080000000800000008000000\n\t\t\n\tif num % 1000000000000800000008000000080000000800000008000000 == 0:\n\t\tnum = num // 1000000000000800000008000000080000000800000008000000",
    "def next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 10 == 0:\n        return n // 10\n    return n // 10 * 10 + 1\n\n\ndef main():\n    print(next_smallest_palindrome(1))\n    print(next_smallest_palindrome(2))\n    print(next_smallest_palindrome(3))\n    print(next_smallest_palindrome(4))\n    print(next_smallest_palindrome(5))\n    print(next_smallest_palindrome(6))\n    print(next_smallest_palindrome(7))\n    print(next_smallest_palindrome(8))\n    print(next_smallest_palindrome(9))\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(11))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}