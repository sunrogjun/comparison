{
  "problem": {
    "task_id": "MBPP/463",
    "prompt": "Write a function to find the maximum product subarray of the given array.",
    "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
    "test_list": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ],
    "challenge_test_list": [],
    "problem_id": 452
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_product(arr):\n    max_product = 0\n    current_max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_max_product = max(arr[i], current_max_product * arr[i])\n        max_product = max(max_product, current_max_product)\n\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [3, 2, -3, 4, -2, -5, 3, -1]\n    print(max_product(arr))",
    "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if len(nums) == 1:\n            return nums[0]\n        max_prod = nums[0]\n        min_prod = nums[0]\n        for i in nums:\n            if i > max_prod:\n                max_prod = i\n            if i < min_prod:\n                min_prod = i\n        return max_prod * min_prod",
    "def maximum_product(arr):\n    max_prod = 0\n    max_prod_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n            max_prod_index = i\n    return max_prod, max_prod_index\n\nif __name__ == \"__main__\":\n    arr = [1, -2, 3, -4, -1, 2, 1, -5, 4]\n    print(maximum_product(arr))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\na = Solution()\nprint(a.maxProduct([-2,3,-4,5]))",
    "def max_product(a):\n    if len(a) == 0:\n        return 0\n    return a[0] * max_product(a[1:])\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    assert max_product([2, 3, -4]) == 3\n    assert max_product([-1, -2, 3, -4]) == 4",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        max_product = arr[0]\n        for i in range(1, len(arr)):\n            max_product = max(max_product * arr[i], arr[i])\n        return max_product\n\n\narr = [2, 3, -1, 4, -2, -3]\nprint(max_product(arr))",
    "def max_product_subarray(array):\n    max_product = float(\"-inf\")\n    max_product_sum = float(\"-inf\")\n    min_product = float(\"inf\")\n    min_product_sum = float(\"inf\")\n    for i in range(len(array)):\n        if array[i] > 0:\n            max_product_sum = max(array[i], array[i] * max_product_sum)\n            max_product = max(max_product, max_product_sum)\n            min_product_sum = min(array[i], array[i] * min_product_sum)\n            min_product = min(min_product, min_product_sum)\n    return max_product, max_product_sum, min_product, min_product_sum\n\nprint(max_product_subarray([-2, -3, -1, 4, -2, -5, -7, -1, 2, 1, -3, 4]))",
    "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n\n    max_product = arr[0]\n    current_max_product = arr[0]\n    for i in range(1, n):\n        current_max_product = max(arr[i], current_max_product * arr[i])\n        max_product = max(current_max_product, max_product)\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [1, -1, 2, -2, 3, -3]\n    print(max_product(arr))",
    "def max_product(arr):\n    if not arr:\n        return 0\n    max_product = max_product_helper(arr, 0, 0)\n    return max_product\n\n\ndef max_product_helper(arr, start, end):\n    if end - start <= 1:\n        return max(arr[start], arr[end])\n    mid = (start + end) // 2\n    left = max_product_helper(arr, start, mid)\n    right = max_product_helper(arr, mid + 1, end)\n    return max(left, right)\n\n\nif __name__ == \"__main__\":\n    assert max_product([-2, 3, -2, 4, -2]) == 3\n    assert max_product([-2, 3, -2, 4, -2]) == 6",
    "def max_product_subarray(arr):\n    max_prod = 0\n    max_sum = 0\n    max_index = 0\n    for i in range(len(arr)):\n        max_sum += arr[i]\n        if max_sum > max_prod:\n            max_prod = max_sum\n            max_index = i\n    return max_index, max_prod\n\n\ndef main():\n    print(max_product_subarray([-2, -3, -1, 4, -2]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, 3, -4, -5, -6]))",
    "def max_product_subarray(array):\n    max_product = 0\n    max_product_index = 0\n    min_product = 0\n\n    for index in range(len(array)):\n        product = 1\n        for value in array:\n            product *= value\n\n        if product > max_product:\n            max_product = product\n            max_product_index = index\n\n        if product < min_product:\n            min_product = product\n            min_product_index = index\n\n    return max_product_index, max_product\n\n\nprint(max_product_subarray([-2, -3, -4, -5, -6, -7, -8, -9]))",
    "def max_product(arr):\n    n = len(arr)\n    # if the array is empty, return 0\n    if n == 0:\n        return 0\n    # get the maximum product of all subarrays\n    max_product = float(\"-inf\")\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product = 0\n    current_max_product = 0\n    for i in range(n):\n        current_max_product = arr[i] * max_product\n        if current_max_product < 0:\n            current_max_product = 0\n        max_product = max(current_max_product, max_product)\n    return max_product\n\n\nprint(max_product([1, 2, 3, -4, 5, 6, -7]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7]))\nprint(max_product([-2, -3, -4, -5, -6, -7]))\nprint(max_product([]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7, -8]))",
    "def max_product(arr):\n    max_prod = -float('inf')\n    max_prod_idx = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_prod = max(max_prod, arr[i] * arr[i])\n            max_prod_idx = i\n    return max_prod, max_prod_idx\n\nprint(max_product([-2,3,-1,4,2]))",
    "def max_product_subarray(arr):\n    max_product = 0\n    current_max_product = 0\n    current_max_product_index = 0\n\n    for i in range(len(arr)):\n        if i == 0:\n            current_max_product = arr[i]\n            current_max_product_index = i\n        else:\n            if arr[i] > current_max_product:\n                current_max_product = arr[i]\n                current_max_product_index = i\n\n        max_product = max(max_product, current_max_product * arr[i])\n\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_product_subarray([1, 2, 3, -3, 4]) == 6",
    "def max_product(arr):\n    max_prod = 0\n    curr_max = 0\n    curr_min = arr[0]\n    for i in range(len(arr)):\n        if i == 0:\n            curr_max = arr[i]\n        elif arr[i] < curr_min:\n            curr_min = arr[i]\n        else:\n            curr_max = max(curr_max * arr[i], curr_min * arr[i])\n            curr_min = arr[i]\n        max_prod = max(max_prod, curr_max)\n    return max_prod\n\n\ndef main():\n    arr = [2, 3, -4, 5, -5, -5, 7, -7]\n    print(max_product(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_product(a):\n    # a = [1, 2, 3, -4]\n    max_product = a[0]\n    for i in range(1, len(a)):\n        max_product = max(a[i], max_product * a[i])\n    return max_product\n\n\nprint(max_product([-1, 2, 3, -4]))",
    "def max_product(arr):\n    # write your code here\n    max_prod = 0\n    max_prod_sum = 0\n    for i in range(len(arr)):\n        max_prod_sum += arr[i]\n        if max_prod_sum > max_prod:\n            max_prod = max_prod_sum\n    return max_prod\n\n\narr = [1, 3, -3, 5, -2, 4]\nprint(max_product(arr))",
    "def maximum_product_subarray(arr):\n    max_product = float(\"-inf\")\n    curr_max_product = float(\"-inf\")\n    for i in range(len(arr)):\n        curr_max_product = max(arr[i], curr_max_product * arr[i])\n        max_product = max(curr_max_product, max_product)\n\n    return max_product\n\n\nprint(maximum_product_subarray([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = 0\n    max_value = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_value = i\n\n    return max_value\n\n\narr = [1, 2, -3, 4, -5, 6]\nprint(max_product(arr))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod * arr[i], arr[i])\n        min_prod = min(min_prod * arr[i], arr[i])\n    return max_prod\n\nif __name__ == '__main__':\n    arr = [2, 3, -3, -2, -1]\n    print(max_product(arr))",
    "def max_product_subarray(arr):\n    max_prod = arr[0]\n    max_prod_max = arr[0]\n    for i in range(1, len(arr)):\n        max_prod_max = max(max_prod_max*arr[i], arr[i])\n        max_prod = max(max_prod, max_prod_max)\n\n    return max_prod\n\n\nprint(max_product_subarray([-1, 4, -1, -2, 1, 2, 3, -4]))",
    "def max_product(arr):\n    max_sum = 0\n    current_sum = 0\n    max_product = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_product = arr[i]\n        if current_sum < 0:\n            current_sum = 0\n    return max_product\n\n\nprint(max_product([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]))\nprint(max_product([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]))\nprint(max_product([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_prod = nums[0]\n        min_prod = nums[0]\n        for i in range(1, len(nums)):\n            max_prod = max(nums[i], max_prod * nums[i])\n            min_prod = min(nums[i], min_prod * nums[i])\n        return max(max_prod, min_prod)",
    "def max_product(arr):\n    # Write your code here\n    max_prod = float('-inf')\n    min_prod = float('inf')\n    for num in arr:\n        if num > max_prod:\n            max_prod = num\n        if num < min_prod:\n            min_prod = num\n    return max_prod * min_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, -4, -5, -6, -7]))",
    "def max_product(arr):\n    if arr is None:\n        return None\n    if len(arr) == 0:\n        return None\n    max_prod = arr[0]\n    max_prod_curr = arr[0]\n    for i in range(1, len(arr)):\n        max_prod_curr = max(max_prod_curr * arr[i], arr[i])\n        max_prod = max(max_prod, max_prod_curr)\n    return max_prod\n\n\ndef main():\n    print(max_product([-1, 0, 1, 2, -3, 4, -5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_product(arr):\n    max_product = 0\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_product = max(current_product, max_product)\n\n    return max_product\n\nprint(max_product([1, 2, 3, -3, 4]))\nprint(max_product([-3, 2, -1, 4]))\nprint(max_product([-2, 3, -1, 4]))",
    "def max_product(arr):\n    # Find the maximum product\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod * arr[i], arr[i])\n\n    return max_prod\n\n\nif __name__ == '__main__':\n    assert max_product([-2, -4, -5, -6, -7, -8, -9, -10, -11]) == 20",
    "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    max_product_sum = arr[0]\n    for i in range(1, n):\n        max_product = max(arr[i], max_product * arr[i])\n        max_product_sum = max(max_product_sum, arr[i])\n    return max_product, max_product_sum\n\n\narr = [5, -2, -2, 1, -4, -3, -2, -1, 5]\nprint(max_product(arr))",
    "def max_product_subarray(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product*arr[i], arr[i])\n        min_product = min(min_product*arr[i], arr[i])\n    return max_product*min_product\n\n\ndef main():\n    print(max_product_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def maximum_product_subarray(arr):\n    product = 0\n    for i in range(len(arr)):\n        product = max(product * arr[i], arr[i])\n    return product\n\n\nprint(maximum_product_subarray([-2, -3, 4, -1, 2, 1, -5, 4]))\nprint(maximum_product_subarray([-2, -3, 4, -1, 2, 1, -5, 4, -1, -2, 2]))",
    "def max_product_subarray(arr):\n    max_prod = 0\n    max_prod_sub_arr = [0] * len(arr)\n\n    for i in range(len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n        max_prod_sub_arr[i] = max_prod\n\n    return max(max_prod_sub_arr)\n\n\nprint(max_product_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        max_prod = nums[0]\n        min_prod = nums[0]\n\n        for num in nums[1:]:\n            max_prod = max(num, max_prod * num)\n            min_prod = min(num, min_prod * num)\n\n        return max(max_prod, min_prod)\n\n\nif __name__ == '__main__':\n    assert Solution().maxProduct([-2,1,-3,4,-1,2,1,-5,4]) == 6",
    "def max_product(arr):\n    max_prod = -1\n    max_prod_curr = 0\n    for i in range(len(arr)):\n        max_prod_curr = max(arr[i], max_prod_curr * arr[i])\n        max_prod = max(max_prod, max_prod_curr)\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = float(\"-inf\")\n    cur_max_product = float(\"-inf\")\n    cur_sum = float(\"-inf\")\n\n    for i in arr:\n        cur_sum = max(i, cur_sum*i)\n        if cur_sum > max_product:\n            max_product = cur_sum\n        if cur_max_product < max_product:\n            cur_max_product = max_product\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, -1, -2, -3, -4, -5, -6]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            max_product = max(current_product, max_product)\n        else:\n            current_product = max(arr[i], current_product * arr[i])\n            max_product = max(current_product, max_product)\n    return max_product\n\n\nprint(max_product([-2, -3, -4, -1, 2, 3, 4]))",
    "def max_product(arr):\n    max_product = 0\n    current_max_product = 1\n    current_min_product = 1\n    for num in arr:\n        current_max_product = max(current_max_product*num, num)\n        current_min_product = min(current_min_product*num, num)\n        max_product = max(current_max_product, max_product)\n    return max_product\n\n\narr = [2, -1, 3, -2, 1, -4]\nprint(max_product(arr))",
    "def max_product(array):\n    max_prod = array[0]\n    min_prod = array[0]\n    for num in array[1:]:\n        max_prod = max(max_prod*num, num)\n        min_prod = min(min_prod*num, num)\n    return max_prod\n\n\nif __name__ == '__main__':\n    print(max_product([-2, -3, -4, -5, -6]))",
    "def max_product(arr):\n    max_product = 0\n    current_max_product = 1\n    for i in range(len(arr)):\n        current_max_product *= arr[i]\n        if current_max_product > max_product:\n            max_product = current_max_product\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [2, 3, -1, -2, 4]\n    print(max_product(arr))",
    "def max_product(a):\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return 0\n    a.sort()\n    max_product = a[0]\n    for i in range(1, n):\n        max_product = max(max_product * a[i], a[i])\n    return max_product\n\n\nprint(max_product([-2, 0, 3, -4]))\nprint(max_product([-1, -3, -4, -2, -5, -6]))\nprint(max_product([-1, -3, -4, -2, -5, -6, -7, -8, -9, -10, -11, -12]))",
    "class Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return nums[0]\n        dp = [0] * (len(nums) + 1)\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n\n        for i in range(2, len(nums) + 1):\n            dp[i] = max(dp[i - 2] * nums[i - 1], dp[i - 1] * nums[i - 2], nums[i - 1])\n\n        return dp[-1]\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([-2, -3, -4]) == 6\n    assert Solution().maxProduct([-2, 2, -3, 4]) == 6",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_prod = nums[0] * nums[0]\n        max_prod_last = nums[0] * nums[0]\n        for i in range(1, n):\n            max_prod = max(nums[i] * nums[i], max_prod * nums[i], nums[i] * nums[i], nums[i] * nums[i])\n            max_prod_last = max(max_prod, max_prod_last * nums[i])\n        return max(max_prod, max_prod_last)\n\n\na = Solution()\nprint(a.maxProduct([-2,3,-4,5,-1,2,1,-5,4]))",
    "def max_product_subarray(arr):\n    max_prod = 0\n    curr_max = 0\n    curr_min = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n        max_prod = max(max_prod, curr_max)\n    return max_prod\n\n\nprint(max_product_subarray([-2, 4, -3, 2, -1, 5, 4]))",
    "def max_product(array):\n    max_product = 0\n    current_max_product = 0\n    for i in range(len(array)):\n        current_max_product = max(current_max_product * array[i], array[i])\n        max_product = max(current_max_product, max_product)\n    return max_product\n\nprint(max_product([-1, -2, -3, 4, -2, -1, 2]))",
    "def max_product(arr):\n    max_product = arr[0]\n    max_product_sum = arr[0]\n    max_product_index = 0\n\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        max_product_sum = max(max_product_sum, arr[i])\n        if arr[i] > max_product:\n            max_product_index = i\n\n    return max_product, max_product_sum, max_product_index\n\n\nif __name__ == '__main__':\n    assert max_product([-2, 0, 3, -2, 4]) == (2, 4, -2)\n    assert max_product([-2, 4, -2, -3]) == (4, -2, -2)\n    assert max_product([-2, -2, -2, -2, -2]) == (2, 2, -2)",
    "def max_product(arr):\n    max_product = 0\n    min_product = arr[0]\n    for i in arr:\n        if i > max_product:\n            max_product = i\n        if i < min_product:\n            min_product = i\n    return max_product * min_product\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4, -1, -2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product_subarray(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product*arr[i], max_product*arr[j])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    assert max_product_subarray([-2, -3, -4, -1, 5, -2]) == 15\n    assert max_product_subarray([-1, 2, 3]) == 6\n    assert max_product_subarray([-1, -2, -3, -4]) == 6\n    assert max_product_subarray([-1, -2, -3, -4, -5, -6]) == 16\n    assert max_product_subarray([]) == 0\n    assert max_product_subarray([1]) == 1\n    assert max_product_subarray([-1]) == -1",
    "def max_product_subarray(arr):\n    n = len(arr)\n    arr_max = [arr[0]] * n\n    max_product = arr[0]\n    for i in range(1, n):\n        arr_max[i] = max(arr[i], arr_max[i-1] * arr[i])\n        max_product = max(max_product, arr_max[i])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [1, -3, -2, -4]\n    print(max_product_subarray(arr))",
    "def max_product(arr):\n  if len(arr) == 1:\n    return arr[0]\n  arr_len = len(arr)\n  max_product = 0\n  min_product = 1\n  for i in range(1, arr_len):\n    if arr[i] > min_product:\n      min_product = arr[i]\n    elif arr[i] < min_product:\n      max_product = arr[i]\n\n  return max_product\n\n\nif __name__ == '__main__':\n  print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = 0\n    min_product = float('inf')\n    for i in range(len(arr)):\n        product = 1\n        for j in range(len(arr)):\n            product *= arr[j]\n            if product < min_product:\n                min_product = product\n        max_product = max(max_product, min_product * arr[i])\n    return max_product\n\n\nprint(max_product([2, 3, -2, 4, -3, 2, -1, 1]))",
    "def max_product_subarray(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n\n    return max_product\n\n\narr = [2, -3, 4, -2, -1, 5]\nprint(max_product_subarray(arr))",
    "def max_product_subarray(arr):\n    # Write your code here\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            min_product = min(min_product*arr[i], arr[i])\n        else:\n            max_product = max(max_product*arr[i], arr[i])\n    return max(max_product, min_product)",
    "def max_product(arr):\n    return max(arr) * max(arr)\n\nprint(max_product([-2,-3,4,-2,1,2,3,4]))",
    "def max_product(arr):\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod*arr[i], arr[i])\n    return max_prod\n\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    # Write your code here\n    # initialize the maximum product\n    max_product = 0\n    # initialize the current product\n    current_product = 1\n    # initialize the current index\n    current_index = 0\n\n    for i in range(len(arr)):\n        # update the current product\n        current_product = max(arr[i], arr[i] * current_product)\n        # update the maximum product\n        max_product = max(max_product, current_product)\n        # update the current index\n        current_index = max(i, current_index + 1)\n\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_prod = 0\n    curr_prod = 1\n    for i in range(len(arr)):\n        curr_prod = curr_prod * arr[i]\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n\n    return max_prod\n\nprint(max_product([-2, -3, -4, -1, 2, 3, 4]))",
    "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_product_arr = [arr[0]]\n    max_product_arr.append(max(arr[0], arr[1]))\n    for i in range(2, len(arr)):\n        max_product_arr.append(max(max_product_arr[-1] * arr[i], arr[i]))\n    return max(max_product_arr)\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product_subarray(arr):\n    if not arr:\n        return 0\n\n    max_prod = float('-inf')\n    max_prod_index = 0\n    current_max_prod = float('-inf')\n    current_max_prod_index = 0\n\n    for i, e in enumerate(arr):\n        current_max_prod = max(e, current_max_prod * e, current_max_prod * e, e)\n\n        if current_max_prod > max_prod:\n            max_prod = current_max_prod\n            max_prod_index = i\n\n    return max_prod, max_prod_index\n\n\ndef test_function():\n    assert max_product_subarray([-2, -3, 4, -1, 2, 1, -5, 4]) == (2, 4)\n    assert max_product_subarray([-2, 2, -3]) == (2, 2)\n    assert max_product_subarray([-2]) == (0, 0)\n    assert max_product_subarray([]) == (0, 0)\n    assert max_product_subarray([-2, -3, -4, -5, -6]) == (2, 4)\n    assert max_product_subarray([-2, -3, -4, -5]) == (2, 4)\n    assert max_product_subarray([-2, -3, -4, -5, -6, -7]) == (2, 4)\n\n\ntest_function()",
    "def max_product_subarray(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product = arr[0]\n    cur_max_product = arr[0]\n\n    for i in range(1, n):\n        cur_max_product = max(cur_max_product * arr[i], arr[i])\n        max_product = max(max_product, cur_max_product)\n\n    return max_product\n\narr = [2, -3, 4, -1, -2, 1]\nprint(max_product_subarray(arr))",
    "def max_product(arr):\n    max_prod = arr[0]\n    current_max_prod = arr[0]\n    for i in range(1, len(arr)):\n        current_max_prod = max(arr[i], arr[i]*current_max_prod)\n        max_prod = max(current_max_prod, max_prod)\n    return max_prod\n\n\nprint(max_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_product = max(current_product, max_product)\n\n    return max_product\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product_subarray(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = float(\"-inf\")\n    cur_max_product = 1\n    for i in range(len(arr)):\n        cur_max_product *= arr[i]\n        if cur_max_product > max_product:\n            max_product = cur_max_product\n    return max_product\n\n\nprint(max_product_subarray([-2, -3, -4, -5]))\nprint(max_product_subarray([-1, -2, -3]))\nprint(max_product_subarray([1, 2, 3, 4, 5]))\nprint(max_product_subarray([]))\nprint(max_product_subarray([1, 2, -3, 4]))",
    "def max_product(arr):\n    max_prod = -float('inf')\n    max_ind = -1\n    for ind, val in enumerate(arr):\n        if val > max_prod:\n            max_prod = val\n            max_ind = ind\n    return max_prod, max_ind\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, -4, -2, 1, 2, 3, -4, -2]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = arr[0]\n    max_product_curr = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i], arr[i])\n        max_product_curr = max(max_product, max_product_curr * arr[i])\n\n    return max_product_curr\n\narr = [2, -2, 3, -3, 4, -4, 5, -5]\nprint(max_product(arr))",
    "def max_product(arr):\n    max_product = -1\n    left_product = 1\n    right_product = 1\n    for i in arr:\n        max_product = max(i * max_product, i * left_product, i * right_product)\n        left_product = max(i, left_product * i)\n        right_product = max(i, right_product * i)\n    return max_product\n\nprint(max_product([-2, -3, 4, -1, 2, 1]))\nprint(max_product([1, 2, 3, -4]))\nprint(max_product([-2, -3, -1, 2, 1]))\nprint(max_product([-2, -3, -1, 2, 1, -4, 5]))",
    "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        result = nums[0]\n        for i in range(1, len(nums)):\n            result = max(result * nums[i], nums[i])\n        return result\n\n\nif __name__ == \"__main__\":\n    nums = [1, -2, 3, -4, -5, -6, -7, -8, -9]\n    solution = Solution()\n    print(solution.maxProduct(nums))",
    "def max_product(arr):\n    # Write your code here\n    arr.sort()\n    return max(arr[-1] * arr[0], arr[-1] * arr[1])",
    "def max_product_subarray(arr):\n    # Write your code here\n    max_prod = 0\n    min_prod = float(\"inf\")\n    for i in arr:\n        if i < min_prod:\n            min_prod = i\n        if i > max_prod:\n            max_prod = i\n    return max_prod\n\n\nprint(max_product_subarray([-2, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7, -1, 2, 1, -3, 4, -5, -7]))",
    "def max_product(arr):\n    arr.sort()\n    product = 1\n    cur_max = arr[0] * arr[0]\n    for i in range(1, len(arr)):\n        product = max(product, arr[i] * arr[i])\n        cur_max = max(cur_max, product)\n    return cur_max\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_val = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_val = max(max_val * arr[i], arr[i])\n        max_product = max(max_product, max_val)\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [2, -3, 4, -5, -6, 7]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n\n    return max_product\n\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in arr:\n        if i < min_product:\n            min_product = i\n        if i > max_product:\n            max_product = i\n    return max_product\n\nprint(max_product([-2,3,-5,-7,-1,2,3,5,7]))\nprint(max_product([-1,-2,3,4,-6,-5,-4]))\nprint(max_product([-1,-2,3,4,-6,-5,-4,2]))",
    "def max_product(arr):\n    max_prod = 0\n    cur_max = 0\n\n    for i in range(len(arr)):\n        cur_max = max(cur_max * arr[i], arr[i])\n        max_prod = max(max_prod, cur_max)\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product_subarray(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1, len(arr)):\n        min_prod = min(min_prod * arr[i], arr[i])\n        max_prod = max(max_prod * arr[i], arr[i])\n\n    return max(max_prod, min_prod)\n\n\nif __name__ == \"__main__\":\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n    assert max_product_subarray([1, 2, 3, -4]) == 6\n    assert max_product_subarray([-1, -2, -3, -4]) == -1",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n\n        product = nums[0]\n        max_product = nums[0]\n\n        for num in nums[1:]:\n            product = max(num, product * num)\n            max_product = max(max_product, product)\n\n        return max_product\n\n\ns = Solution()\nprint s.maxProduct([-2, -3, 4, -1, 2, 1])",
    "def max_product(arr):\n    max_product = arr[0]\n    max_product_current = arr[0]\n    for i in range(1, len(arr)):\n        max_product_current = max(max_product, arr[i] * max_product_current)\n        max_product = max(max_product, max_product_current)\n    return max_product\n\nif __name__ == \"__main__\":\n    print(max_product([2,3,4,5,-1]))\n    print(max_product([-1, -2, -3]))\n    print(max_product([-1, -2, -3, 4, 5, -1]))\n    print(max_product([-1, -2, -3, 4, 5]))\n    print(max_product([-1, -2, -3, 4, 5, -1, -2, -3]))",
    "def max_product_subarray(arr):\n    max_product = arr[0]\n    current_max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_max_product = max(arr[i], current_max_product * arr[i])\n        max_product = max(current_max_product, max_product)\n\n    return max_product\n\nprint(max_product_subarray([-2, 3, -2, 4]))",
    "def max_product(arr):\n    max_prod = -1\n    min_prod = -1\n    max_prod_max = -1\n    max_prod_min = -1\n    min_prod_max = -1\n    min_prod_min = -1\n    for i in range(len(arr)):\n        max_prod_max = max(max_prod_max * arr[i], arr[i])\n        max_prod_min = min(max_prod_min * arr[i], arr[i])\n        min_prod_max = max(min_prod_max * arr[i], arr[i])\n        min_prod_min = min(min_prod_min * arr[i], arr[i])\n\n    return max(max_prod_max, max_prod_min)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -1, 4, -2, -3]\n    print(max_product(arr))",
    "def max_product_subarray(arr):\n    max_prod = arr[0]\n    curr_max = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], arr[i] * curr_max)\n        max_prod = max(curr_max, max_prod)\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    assert max_product_subarray([-2, 0, 1, -3, 4]) == 6\n    assert max_product_subarray([1, 2, 3, 4]) == 6",
    "def max_product(arr):\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n    return max_prod\n\nif __name__ == '__main__':\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9]) == 25\n    assert max_product([-2, -3, -4, -5]) == 25\n    assert max_product([-2, -3, -4, -5, -6, -7]) == 25\n    assert max_product([-2, -3, -4, -5, -6, -7, -8]) == 25\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9]) == 30\n    assert max_product([-2, -3, -4, -5, -6]) == 30\n    assert max_product([-2, -3, -4, -5]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8]) == 30\n    assert max_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == 30\n    assert max_product([-2",
    "def max_product(array):\n    # Write your code here\n    max_product = array[0]\n    min_product = array[0]\n    for i in range(1, len(array)):\n        max_product = max(max_product * array[i], array[i])\n        min_product = min(min_product * array[i], array[i])\n    return max_product\n\n\nif __name__ == '__main__':\n    array = [3, -2, 4, -3, 2, 1]\n    print(max_product(array))",
    "def max_product(arr):\n    max_product = 0\n    current_max_product = 1\n    for i in range(len(arr)):\n        current_max_product = max(current_max_product * arr[i], arr[i])\n        max_product = max(current_max_product, max_product)\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [2, -2, 3, 4, -2, -1]\n    print(max_product(arr))",
    "def maximum_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    arr.sort()\n    left_max = 0\n    right_max = 0\n    result = 0\n    for i in range(len(arr)):\n        if i == 0:\n            left_max = arr[i]\n        elif arr[i] > left_max:\n            left_max = arr[i]\n        if i + 1 == len(arr):\n            right_max = arr[i]\n        elif arr[i] < right_max:\n            right_max = arr[i]\n        result = max(result, left_max * right_max)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(maximum_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_product(arr[:-1]), max_product(arr[1:]))\n\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product_subarray(arr):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n\n    max_product = float(\"-inf\")\n    max_product_pos = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            max_product = max(max_product, arr[i] * arr[j], arr[i] * arr[j] * arr[i] * arr[j])\n\n        if max_product > max_product_pos:\n            max_product_pos = max_product\n\n    return max_product_pos\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, -2, -4, 4, -5]\n    print(max_product_subarray(arr))",
    "def max_product(arr):\n    max_product = 0\n    current_max = 0\n    current_min = 0\n    for i in range(len(arr)):\n        current_max = max(current_max * arr[i], arr[i])\n        current_min = min(current_min * arr[i], arr[i])\n        max_product = max(current_max, max_product)\n    return max_product\n\n\ndef max_product_2(arr):\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(current_max * arr[i], arr[i])\n        current_min = min(current_min * arr[i], arr[i])\n        max_product = max(current_max, max_product)\n    return max_product\n\n\ndef max_product_3(arr):\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(current_max * arr[i], arr[i])\n        current_min = min(current_min * arr[i], arr[i])\n        max_product = max(current_max, max_product)\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(max_product(arr))\n    print(max_product_2(arr))\n    print(max_product_3(arr))",
    "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\narr = [5, -2, 3, -4, -5, -6, 7]\nprint(max_product(arr))",
    "def maximum_product(arr):\n    max_prod = -1\n    max_prod_so_far = 0\n    current_prod = 1\n    for i in arr:\n        current_prod *= i\n        if current_prod > max_prod_so_far:\n            max_prod_so_far = current_prod\n            max_prod = current_prod\n        else:\n            current_prod = 1\n    return max_prod\n\nprint(maximum_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n\n    res = arr[0]\n    max_res = res\n    for i in range(1, n):\n        res = max(arr[i], res * arr[i])\n        if res > max_res:\n            max_res = res\n    return max_res\n\n\narr = [1, 3, -1, 4, -2, -2]\nprint(max_product(arr))",
    "def max_product_subarray(arr):\n    # Fill this in.\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n\n    return max_product, min_product\n\n\nprint(max_product_subarray([2, 3, -1, -2, 4]))",
    "def max_product(arr):\n    max_prod = 0\n    min_prod = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_prod = arr[0]\n            min_prod = arr[0]\n        else:\n            max_prod = max(max_prod*arr[i], arr[i])\n            min_prod = min(min_prod*arr[i], arr[i])\n    return max_prod, min_prod\n\n\nprint(max_product([-2, 2, -3, 4, -1, 2, 1, -5, 4]))",
    "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = nums[0]\n        min_product = nums[0]\n\n        for i in range(1, len(nums)):\n            max_product = max(max_product*nums[i], nums[i])\n            min_product = min(min_product*nums[i], nums[i])\n\n        return max(max_product, min_product)\n\nif __name__ == \"__main__\":\n    print(Solution().maxProduct([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return max(max(arr[0], arr[1] * arr[2]),\n                   max(arr[0] * arr[2], arr[1] * arr[3], arr[2] * arr[3]))\n\n\nif __name__ == '__main__':\n    arr = [2, 3, -2, -4, 5, -1, -3]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product\n\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = 0\n    current_product = 1\n    for i in arr:\n        current_product *= i\n        max_product = max(max_product, current_product)\n    return max_product\n\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([-2, -1, -5, -4]))",
    "def max_product(arr):\n    product = 0\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            product = max(product*arr[i], arr[j]*arr[j])\n        max_product = max(max_product, product)\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_product = 0\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n        max_product = max(current_product, max_product)\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, 3, -4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_prod = 0\n    curr_prod = arr[0]\n    for i in range(1, n):\n        curr_prod = max(curr_prod * arr[i], arr[i])\n        max_prod = max(max_prod, curr_prod)\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))\n    print(max_product([-2, -3, -1, 2, 1, -5, 4]))\n    print(max_product([-2, -3, -1, 2, 1, -5, 4, -2, -3]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}