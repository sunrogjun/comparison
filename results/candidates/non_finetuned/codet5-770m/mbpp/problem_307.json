{
  "problem": {
    "task_id": "MBPP/318",
    "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
    "test_list": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ],
    "challenge_test_list": [],
    "problem_id": 307
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def cuboid_volume(sides):\n    volume = 0\n    if sides <= 0:\n        return volume\n    for i in range(sides):\n        volume += i**3\n    return volume\n\n\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(6))",
    "def max_volume(sides):\n    if sides < 0:\n        return 0\n    return sides * (sides + 1) / 2\n\nif __name__ == '__main__':\n    print(max_volume(4))\n    print(max_volume(3))\n    print(max_volume(2))\n    print(max_volume(1))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides > 0:\n        return sides * (sides - 1)\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))",
    "def max_volume(sides):\n    # Write your code here\n    return sides * sides * sides\n\nprint(max_volume(6))\nprint(max_volume(9))",
    "def max_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume = max(volume, i**2)\n    return volume\n\nsides = int(input(\"Enter sides:\"))\nprint(max_volume(sides))",
    "def find_max_volume(side_list):\n    max_volume = 0\n    for i in side_list:\n        max_volume = max(max_volume, i*i*i)\n    return max_volume\n\nif __name__ == '__main__':\n    print(find_max_volume([1, 3, 6, 10]))",
    "def find_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return (sides**3) / 2\n\n\nif __name__ == \"__main__\":\n    print(find_volume(10))\n    print(find_volume(5))\n    print(find_volume(2))\n    print(find_volume(10))",
    "def max_volume(sides):\n    if sides < 0:\n        return 0\n    if sides == 0:\n        return 1\n    return sides**3 * max_volume(sides-1)\n\nprint(max_volume(3))",
    "def volume(sides):\n    max_volume = 0\n    for i in range(sides):\n        max_volume = max(max_volume, sides*sides*sides)\n    return max_volume\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))",
    "def find_max_volume(sides):\n    volume = 0\n    for i in range(1, sides+1):\n        volume += (sides - i) * i\n    return volume\n\nprint(find_max_volume(3))\nprint(find_max_volume(5))\nprint(find_max_volume(10))",
    "def cuboid_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume += i**3\n    return volume\n\nprint(cuboid_volume(4))\nprint(cuboid_volume(5))\nprint(cuboid_volume(6))",
    "def max_volume(sides):\n    return (sides**3) / 4\n\n\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))\nprint(max_volume(6))",
    "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    return sides ** 3\n\n\nprint(max_volume(6))",
    "def cuboid_volume(side1,side2,side3):\n    return (side1*side2*side3)/2\n\nprint(cuboid_volume(5,2,5))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    if sides == 2:\n        return 4\n\n    if sides % 2 == 0:\n        return max(sides // 2, max_volume(sides // 2) + max_volume(sides // 4))\n    else:\n        return max(sides // 2, max_volume(sides // 4) + max_volume(sides // 8))\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))",
    "def cuboid(sides):\n    return (sides**3)\n\n\nprint(cuboid(6))",
    "def cuboid(n):\n    volume = 0\n    for i in range(n):\n        volume += 4\n        volume -= 2\n    return volume\n\n\nprint(cuboid(5))",
    "def max_volume(sides):\n    return sides * (sides + 1) * (sides + 2) / 6\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))",
    "def max_volume(side):\n    if side <= 0:\n        return 0\n    if side == 1:\n        return 4\n    if side == 2:\n        return 6\n    if side == 3:\n        return 9\n    return 12\n\nprint(max_volume(5))",
    "def cuboid_volume(side):\n    return side * (side + 1) / 2\n\ndef main():\n    print(cuboid_volume(10))\n    print(cuboid_volume(5))\n    print(cuboid_volume(5))\n    print(cuboid_volume(0))\n\nif __name__ == \"__main__\":\n    main()",
    "def volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nprint(volume(4))\nprint(volume(5))\nprint(volume(6))",
    "def max_volume(sides):\n    if sides <= 0:\n        return 0\n\n    return sides * (sides + 1) / 2\n\nprint(max_volume(5))",
    "def cuboid(sides):\n    sides = int(sides)\n    if sides == 0:\n        return 0\n    volume = sides * sides * sides * sides\n    return volume\n\n\nprint(cuboid(1))\nprint(cuboid(2))\nprint(cuboid(3))\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))\nprint(cuboid(9))\nprint(cuboid(10))",
    "def cuboid(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(8))",
    "def cuboid(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\nprint(cuboid(2))\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))",
    "def max_volume(a, b, c):\n    if a+b+c==0:\n        return 0\n    elif a+b+c<0:\n        return 0\n    else:\n        return a*b*c/(4*a+b+c)\n\nprint(max_volume(5, 10, 6))\nprint(max_volume(4, 5, 6))\nprint(max_volume(5, -5, 10))\nprint(max_volume(10, -5, -5))",
    "def cuboid_volume(sides):\n    if sides < 0:\n        return -1\n    else:\n        return sides**3",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    return max(sides, (sides * sides) / 2)\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))\nprint(max_volume(8))\nprint(max_volume(9))",
    "def cuboid_volume(sides):\n    volume = 0\n    for i in range(1, sides+1):\n        volume += (i**2)\n    return volume\n\n\nprint(cuboid_volume(3))",
    "def max_volume(sides):\n    return sides ** 3\n\n\nsides = int(input(\"Enter the sides of the cuboid: \"))\nprint(\"Maximum volume is\", max_volume(sides))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides <= 1:\n        return sides * sides * sides\n    if sides <= 4:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3)\n    if sides <= 7:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4)\n    if sides <= 10:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5)\n    if sides <= 12:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6)\n    if sides <= 14:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7)\n    if sides <= 16:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8)\n    if sides <= 18:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8) * (sides + 9) * (sides + 10)\n    if sides <= 20:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8) * (sides + 9) * (sides + 10) * (sides + 11)\n    if sides <= 22:",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    return sides**3\n\nprint(max_volume(5))\nprint(max_volume(8))\nprint(max_volume(13))\nprint(max_volume(22))",
    "def maxVolume(sides):\n    volume = 0\n    if sides <= 1:\n        return volume\n    for i in range(1,sides+1):\n        volume = max(volume,(sides-i)*(i**3))\n    return volume\n\nprint(maxVolume(4))",
    "def max_volume(sides):\n    return sides ** 3\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(8))",
    "def volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides**3\n\n\nprint(volume(3))",
    "def cuboid_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides ** 3\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(3))",
    "def find_max_volume(sides):\n    max_volume = 0\n    for i in range(1, sides + 1):\n        volume = (i ** 3) * (i ** 2) * (i + 1)\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume\n\nprint(find_max_volume(5))\nprint(find_max_volume(6))\nprint(find_max_volume(9))",
    "def max_volume(sides):\n    if sides < 0:\n        return \"Invalid sides\"\n    elif sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\nprint(max_volume(2))",
    "def find_volume(sides):\n    if sides == 0:\n        return 0\n    elif sides > 0:\n        return sides * (sides - 1) * (sides - 2) * (sides - 3) / 6\n    else:\n        return 0\n\nprint(find_volume(1))\nprint(find_volume(2))\nprint(find_volume(3))\nprint(find_volume(4))\nprint(find_volume(5))\nprint(find_volume(6))",
    "import math\n\n\ndef max_volume(sides):\n    return math.sqrt(sides*sides-4*sides*sides)\n\n\nprint(max_volume(8))",
    "def max_volume(sides):\n    return sides ** 3\n\nprint(max_volume(5))\nprint(max_volume(15))\nprint(max_volume(17))\nprint(max_volume(31))",
    "def max_volume(sides):\n    # if sides > 100:\n    #     return 0\n    # else:\n    #     return sides * sides * sides * sides\n    return sides * sides * sides * sides\n\nprint(max_volume(100))\n\n# if sides > 100:\n#     return 0\n# else:\n#     return sides * sides * sides * sides",
    "def cuboid_volume(sides):\n    cuboid_volume = 0\n    for i in range(sides):\n        cuboid_volume += (i ** 2)\n    return cuboid_volume\n\n\nprint(cuboid_volume(4))",
    "def find_max_volume(sides):\n    total_volume = 0\n    for i in range(sides):\n        total_volume += (i ** 3)\n    return total_volume\n\nprint(find_max_volume(1))\nprint(find_max_volume(2))\nprint(find_max_volume(3))\nprint(find_max_volume(4))\nprint(find_max_volume(5))",
    "def cuboid(sides):\n    if sides < 0:\n        print(\"Invalid sides\")\n    else:\n        volume = sides * (sides + 1) / 2\n        print(\"The volume of the cuboid is\", volume)\n\n\ncuboid(0)\ncuboid(1)\ncuboid(2)\ncuboid(3)\ncuboid(4)\ncuboid(5)",
    "def volume(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * volume(n - 1)\n\nprint(volume(4))",
    "def max_volume(sides):\n    if sides < 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\ndef main():\n    print(max_volume(1))\n    print(max_volume(2))\n    print(max_volume(3))\n    print(max_volume(4))\n    print(max_volume(5))\n\nif __name__ == '__main__':\n    main()",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 2\n    return max(2, sides * sides)\n\nprint(max_volume(3))\nprint(max_volume(6))\nprint(max_volume(10))",
    "def cuboid(side_1, side_2, side_3):\n    return side_1 * side_2 * side_3\n\n\nprint(cuboid(4, 3, 2))",
    "def cuboid_volume(sides):\n    return sides**3\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(10))\n    print(cuboid_volume(5))\n    print(cuboid_volume(0))",
    "def max_volume(sides):\n    volume = 0\n    for side in sides:\n        volume += side ** 3\n    return volume\n\n\ndef max_volume2(sides):\n    if sides == 0:\n        return 0\n    elif sides == 1:\n        return 1\n    else:\n        return max_volume2(sides - 1) + max_volume2(sides - 2) + max_volume2(sides - 3)\n\n\nprint(max_volume(5))\nprint(max_volume2(5))",
    "def cuboid(a, b, c):\n    if a+b+c > 100:\n        print(\"Error\")\n        return\n    return a*b*c\n\na = int(input(\"Enter the sum of sides of the cuboid: \"))\nb = int(input(\"Enter the sum of sides of the cuboid: \"))\nc = int(input(\"Enter the sum of sides of the cuboid: \"))\n\nprint(\"The volume of a cuboid with given sum of sides is:\", cuboid(a,b,c))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    elif sides == 1:\n        return 1\n    else:\n        return sides * max_volume(sides-1)\n\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))",
    "def cuboid(sides):\n    sides = sorted(sides)\n    return sides[0]*sides[1]*sides[2]\n\n\nprint(cuboid([1, 2, 3]))\nprint(cuboid([1, 2, 3, 4]))\nprint(cuboid([1, 2, 3, 4, 5]))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nif __name__ == '__main__':\n    print(max_volume(1))\n    print(max_volume(2))\n    print(max_volume(3))\n    print(max_volume(4))\n    print(max_volume(5))\n    print(max_volume(6))\n    print(max_volume(7))",
    "def cuboid(sides):\n    # return the maximum volume of a cuboid with given sum of sides\n    return sides**3\n\nif __name__ == \"__main__\":\n    print(cuboid(3))\n    print(cuboid(6))\n    print(cuboid(4))\n    print(cuboid(10))\n    print(cuboid(12))\n    print(cuboid(14))\n    print(cuboid(20))\n    print(cuboid(24))\n    print(cuboid(30))\n    print(cuboid(40))\n    print(cuboid(50))\n    print(cuboid(60))\n    print(cuboid(70))\n    print(cuboid(80))\n    print(cuboid(100))\n    print(cuboid(120))\n    print(cuboid(150))\n    print(cuboid(200))\n    print(cuboid(250))\n    print(cuboid(300))\n    print(cuboid(400))\n    print(cuboid(500))\n    print(cuboid(600))\n    print(cuboid(700))\n    print(cuboid(800))\n    print(cuboid(900))",
    "def cuboid_volume(sides):\n    # Your code here\n    total_volume = 0\n    for i in range(1, sides+1):\n        total_volume += i * (i * i)\n    return total_volume\n\nprint(cuboid_volume(10))\nprint(cuboid_volume(15))\nprint(cuboid_volume(20))\nprint(cuboid_volume(25))",
    "def max_volume(sides):\n    volume = 0\n    if sides == 0:\n        return 0\n    for i in range(1, sides + 1):\n        volume += i * i * i\n    return volume\n\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(15))",
    "def max_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))\nprint(max_volume(8))",
    "def cuboid(sides):\n    return sides**3\n\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(8))\nprint(cuboid(13))\nprint(cuboid(15))\nprint(cuboid(21))",
    "def max_volume(sides):\n    return sides**3\n\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(40))\nprint(max_volume(50))",
    "def cuboid(side_sum):\n    return (side_sum * 2)\n\n\nprint(cuboid(4))",
    "def maximumVolume(a, b, c):\n    if a > b and a > c:\n        return max(a, b, c)\n    elif b > a and b > c:\n        return max(b, a, c)\n    elif c > a and c > b:\n        return max(c, a, b)\n    else:\n        return 0\n\nprint(maximumVolume(2, 2, 2))",
    "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    else:\n        return sides * (sides + 1) * (2 * sides - 1)",
    "def max_volume(sides):\n    if sides <= 0:\n        return 0\n\n    max_volume = 0\n    for side in range(1, sides + 1):\n        volume = side ** 3\n        if volume > max_volume:\n            max_volume = volume\n\n    return max_volume\n\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(30))",
    "def cuboid_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid_volume(3))\nprint(cuboid_volume(5))\nprint(cuboid_volume(7))",
    "def max_volume(sides):\n    volume = 0\n    for i in range(sides):\n        volume += i**3\n    return volume\n\n\nif __name__ == '__main__':\n    print(max_volume(5))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    return sides ** 3\n\n\nif __name__ == \"__main__\":\n    print(max_volume(3))\n    print(max_volume(4))",
    "def cuboid(sides):\n    return sides ** 3\n\n\nprint(cuboid(10))\nprint(cuboid(5))\nprint(cuboid(15))",
    "def max_volume(sides):\n    return sides**3\n\nprint(max_volume(10))\nprint(max_volume(3))\nprint(max_volume(2))\nprint(max_volume(5))",
    "def cuboid(sides):\n    if sides < 0:\n        raise Exception('Invalid sides')\n    else:\n        max_volume = 0\n        for i in range(sides):\n            max_volume = max(max_volume, (i ** 2) * (i ** 3))\n        return max_volume\n\nif __name__ == '__main__':\n    sides = int(input('Enter the sides of the cuboid: '))\n    print('Maximum volume of cuboid is:'+ str(cuboid(sides)))",
    "def cuboid_volume(sides):\n    max_volume = 0\n    for i in range(sides):\n        max_volume = max(max_volume, i * (i + 1) / 2)\n    return max_volume\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(5))",
    "def maximum_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume = max(volume,i**3)\n    return volume\n\n\nprint(maximum_volume(6))\nprint(maximum_volume(7))\nprint(maximum_volume(8))",
    "def max_volume(sides):\n    return sides ** 3\n\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(30))",
    "def max_volume(sides):\n    volume = 0\n    for side in sides:\n        volume += side * (side + 1) / 2\n    return volume\n\n\nsides = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(max_volume(sides))",
    "def max_volume(sides):\n    if sides < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    volume = 0\n    for side in sides:\n        volume += side**3\n\n    return volume\n\n\nprint(max_volume([1,2,3,4]))\nprint(max_volume([-1,-2,-3,-4]))\nprint(max_volume([4,2,1,0]))",
    "def cuboid(sides):\n    if sides <= 0:\n        return 0\n    else:\n        return sides**3\n\nprint(cuboid(3))\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))\nprint(cuboid(9))",
    "def cuboid_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid_volume(10))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nprint(max_volume(3))",
    "def max_volume(sides):\n    total = 0\n    for i in range(sides):\n        total += i**3\n    return total\n\nprint(max_volume(10))",
    "def max_volume(n, s):\n    if n == 0:\n        return 0\n    if n == 1:\n        return s\n    return max(s*n, max_volume(n-1, s))\n\n\nprint(max_volume(3, 3))",
    "def cuboid(sides):\n    cuboid_volume = 0\n    for i in range(sides):\n        cuboid_volume += (sides - i)**3\n    return cuboid_volume\n\nprint(cuboid(3))\nprint(cuboid(6))\nprint(cuboid(4))\nprint(cuboid(7))",
    "def find_max_volume(sides):\n    max_volume = 0\n    for i in range(sides+1):\n        max_volume = max(max_volume, sides * (sides + 1) / 2)\n    return max_volume\n\n\ndef main():\n    sides = int(input(\"Enter sides: \"))\n    print(find_max_volume(sides))\n\nif __name__ == \"__main__\":\n    main()",
    "def max_volume(sides):\n    total_volume = 0\n    total_volume = sides*sides*sides\n    return total_volume\n\nprint(max_volume(8))",
    "def cuboid(sides):\n    if sides > 4:\n        return -1\n    return (sides ** 3) / 6\n\nsides = int(input(\"Enter the sides of the cuboid: \"))\nprint(\"The maximum volume is: \", cuboid(sides))",
    "def max_volume(sides):\n    if sides < 0:\n        return 0\n    if sides == 0:\n        return 1\n    return max_volume(sides-1) + max_volume(sides-2) + max_volume(sides-3)\n\n\nprint(max_volume(1))\nprint(max_volume(2))\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))",
    "def max_volume(sides):\n    return sides ** 3\n\n\nprint(max_volume(4))\nprint(max_volume(9))\nprint(max_volume(12))",
    "def cuboid(sides):\n    volume = 0\n    for i in range(sides):\n        volume = volume + (i**2)\n    return volume\n\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(7))\nprint(cuboid(11))",
    "def cuboid_volume(sides):\n    return sides**3\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(4))\n    print(cuboid_volume(6))\n    print(cuboid_volume(8))\n    print(cuboid_volume(10))",
    "def cuboid(sides):\n    sides = int(sides)\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    return 1 + max(cuboid(sides - 1), cuboid(sides - 2), cuboid(sides - 3))\n\nprint(cuboid(5))\nprint(cuboid(4))\nprint(cuboid(3))\nprint(cuboid(2))",
    "def cuboid_volume(sides):\n    return sides**3\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(3))\n    print(cuboid_volume(5))\n    print(cuboid_volume(8))\n    print(cuboid_volume(10))\n    print(cuboid_volume(15))",
    "def cuboid(side1, side2, side3):\n    side1 = int(side1)\n    side2 = int(side2)\n    side3 = int(side3)\n    if side1 < 0:\n        side1 = 0\n    if side2 < 0:\n        side2 = 0\n    if side3 < 0:\n        side3 = 0\n    if side1 > side2 and side1 > side3:\n        return side1 * side2 * side3\n    if side2 > side1 and side2 > side3:\n        return side2 * side3\n    if side3 > side1 and side3 > side2:\n        return side3 * side2\n    return 0\n\nprint(cuboid(0, 0, 0))\nprint(cuboid(1, 1, 1))\nprint(cuboid(2, 2, 2))\nprint(cuboid(3, 3, 3))\nprint(cuboid(4, 4, 4))",
    "def max_volume(sides):\n    if sides<0:\n        return 0\n    else:\n        return (sides**3)\n\nsides = int(input(\"Enter the number of sides: \"))\nprint(\"The maximum volume of cuboid with given sum of sides is :\", max_volume(sides))",
    "def max_volume(sides):\n    volume = 0\n    for i in range(sides):\n        volume += i\n    return volume\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(7))\nprint(max_volume(11))",
    "def cuboid_volume(sides):\n    return sides**3\n\nprint(cuboid_volume(4))\nprint(cuboid_volume(1))\nprint(cuboid_volume(2))\nprint(cuboid_volume(3))",
    "def cuboid_volume(sides):\n    # Your code here\n    volume = 0\n    for i in range(1,sides+1):\n        volume += (i**3)\n    return volume\n\nprint(cuboid_volume(5))\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(2))\nprint(cuboid_volume(1))",
    "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides <= 3:\n        return sides * sides * sides\n    return max_volume(sides - 2) + max_volume(sides - 1) + max_volume(sides - 0.5)\n\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(9))\nprint(max_volume(8))",
    "def max_volume(sides):\n    volume = 0\n    while sides > 0:\n        volume = volume + (sides * (sides - 1)) / 2\n        sides = sides - 1\n    return volume\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(5))\nprint(max_volume(2))\nprint(max_volume(15))",
    "def max_volume(sides):\n    if sides <= 1:\n        return sides\n    else:\n        return max_volume(sides - 1) * sides\n\nprint(max_volume(6))\nprint(max_volume(4))\nprint(max_volume(3))",
    "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    volume = 0\n    for i in range(1, sides + 1):\n        volume += i * (i + 1) / 2\n    return volume\n\n\ndef main():\n    print(max_volume(int(input(\"Enter the number of sides: \"))))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}