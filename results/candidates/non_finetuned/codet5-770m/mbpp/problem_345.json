{
  "problem": {
    "task_id": "MBPP/356",
    "prompt": "Write a function to find the third angle of a triangle using two angles.",
    "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
    "test_list": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ],
    "challenge_test_list": [],
    "problem_id": 345
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from math import atan2\n\n\ndef third_angle(a, b):\n    return atan2(b, a)\n\n\nprint(third_angle(3.14, 4.2))",
    "from math import atan2\n\n\ndef third_angle(a, b):\n    return atan2(b, a)\n\n\nprint(third_angle(0, 0))\nprint(third_angle(1, 0))\nprint(third_angle(0, 2))\nprint(third_angle(2, 0))",
    "def get_third_angle(angle1, angle2):\n    if angle1 > angle2:\n        angle1, angle2 = angle2, angle1\n\n    a1 = (angle1 * 180) / 360\n    a2 = (angle2 * 180) / 360\n\n    return a2 - a1\n\n\nprint(get_third_angle(90, 90))\nprint(get_third_angle(180, 180))\nprint(get_third_angle(180, 90))",
    "def third_angle(a, b, c):\n    # Your code here\n    return (a + b + c) / 3\n\n\nprint(third_angle(2, 4, 6))",
    "def third_angle(a,b):\n    return (a * b) / 2\n\nprint(third_angle(2,3))",
    "def third_angle(a, b):\n    return (a + b) / 2",
    "import math\n\ndef find_third_angle(a, b):\n    return math.acos((a ** 2 + b ** 2) / (2 * (a + b)))\n\nif __name__ == '__main__':\n    print(find_third_angle(1, 1))\n    print(find_third_angle(2, 2))\n    print(find_third_angle(3, 3))\n    print(find_third_angle(4, 4))\n    print(find_third_angle(5, 5))\n    print(find_third_angle(6, 6))\n    print(find_third_angle(7, 7))\n    print(find_third_angle(8, 8))\n    print(find_third_angle(9, 9))\n    print(find_third_angle(10, 10))\n    print(find_third_angle(11, 11))\n    print(find_third_angle(12, 12))",
    "def find_third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    # Your code here\n    return (a + b + c) / 3\n\n\nif __name__ == \"__main__\":\n    print(find_third_angle(3, 4, 5))",
    "import math\n\n\ndef third_angle(a, b, c):\n    return math.degrees(math.atan2(a - b, c - b))\n\n\nprint(third_angle(1, 2, 3))\nprint(third_angle(1, 2, 2))\nprint(third_angle(2, 2, 1))\nprint(third_angle(2, 2, 3))\nprint(third_angle(2, 2, 4))",
    "def third_angle(a, b, c):\n    return (a + b + c) / 3\n\nprint(third_angle(1, 2, 3))",
    "def third_angle(a, b, c):\n    angle_1 = (a + b + c) / 2\n    angle_2 = (a + c + b) / 2\n    angle_3 = (a + b + c) / 2\n    return angle_1, angle_2, angle_3\n\nprint(third_angle(0, 0, 0))\nprint(third_angle(0, 0, 90))\nprint(third_angle(90, 0, 0))\nprint(third_angle(90, 90, 0))",
    "def third_angle(a, b):\n    return a * b / 3\n\nprint(third_angle(3, 6))",
    "def find_third_angle(a,b):\n    return a*b/2\n\nprint(find_third_angle(0,0))\nprint(find_third_angle(0,90))\nprint(find_third_angle(90,0))\nprint(find_third_angle(90,90))\nprint(find_third_angle(90,-90))\nprint(find_third_angle(90,90))\nprint(find_third_angle(0,-90))\nprint(find_third_angle(0,-90,90))\nprint(find_third_angle(0,-90,-90))\nprint(find_third_angle(0,-90,-90,90))\nprint(find_third_angle(90,-90,-90,90))\nprint(find_third_angle(90,-90,-90,-90))",
    "def thirdAngle(a,b,c):\n    # Find the third angle\n    s=((a*b)+(b*c)+(c*a))/2\n    # Return the third angle\n    return s\n\nprint(thirdAngle(0,0,0))\nprint(thirdAngle(0,0,180))\nprint(thirdAngle(90,90,90))",
    "def third_angle(a, b):\n    a = float(a)\n    b = float(b)\n    return (a + b) / 2.0\n\nif __name__ == \"__main__\":\n    print(third_angle(2, 4))\n    print(third_angle(4, 2))",
    "def third_angle(a,b):\n    return (a*b) / 2\n\nprint(third_angle(1,2))\nprint(third_angle(2,1))",
    "def third_angle(a, b):\n    c = (a + b) / 2\n    return c\n\nif __name__ == '__main__':\n    a = float(input(\"Enter first angle: \"))\n    b = float(input(\"Enter second angle: \"))\n    print(\"Third angle of a triangle using two angles: \", third_angle(a, b))",
    "def find_third_angle(a, b):\n    # Your code here\n    if a == b:\n        return 0\n    if a < b:\n        return 90 - (90 - a) % 360\n    else:\n        return 90 + (90 + b) % 360\n\n\nprint(find_third_angle(45, 90))\nprint(find_third_angle(45, -90))",
    "def find_third_angle(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    print(a,b,c)\n    if (a > b and a > c):\n        return a\n    if (b > a and b > c):\n        return b\n    if (c > a and c > b):\n        return c\n    else:\n        return 0",
    "def third_angle(a, b):\n    a_rad = float(a)\n    b_rad = float(b)\n    return a_rad * b_rad / 2\n\n\nif __name__ == '__main__':\n    print(third_angle(8, 6))\n    print(third_angle(6, 8))\n    print(third_angle(9, 8))",
    "def third_angle(a, b):\n    a = float(a)\n    b = float(b)\n    return (a + b) / 2\n\n\nprint(third_angle(1, 2))",
    "def third_angle(a, b):\n    if a == 0 or b == 0:\n        raise ValueError(\"Both angles should be greater than zero.\")\n    else:\n        return (2 * (a + b)) / 3\n\nif __name__ == \"__main__\":\n    print(third_angle(0, 0))\n    print(third_angle(0, 10))\n    print(third_angle(10, 0))\n    print(third_angle(10, 10))\n    print(third_angle(10, 0))",
    "def third_angle(a, b, c):\n    return (a + b + c) / 3\n\n\nprint(third_angle(1, 2, 3))",
    "def thirdAngle(a, b):\n    return (a + b) / 2\n\nprint(thirdAngle(5, 8))\nprint(thirdAngle(2, 7))\nprint(thirdAngle(6, 8))",
    "import math\n\n\ndef get_third_angle(a, b):\n    return math.degrees(math.atan2(b, a))\n\n\nif __name__ == '__main__':\n    print(get_third_angle(1, 2))\n    print(get_third_angle(1, 4))\n    print(get_third_angle(2, 3))\n    print(get_third_angle(3, 4))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\n\nprint(third_angle(45, 45))\nprint(third_angle(45, 30))\nprint(third_angle(45, 30))\nprint(third_angle(45, 40))\nprint(third_angle(45, 40))\nprint(third_angle(45, 45))\nprint(third_angle(45, 30))\nprint(third_angle(45, 40))",
    "import math\n\ndef third_angle(a, b):\n    return math.atan2(b, a)\n\n\ndef main():\n    a = float(input(\"Enter the first angle:\"))\n    b = float(input(\"Enter the second angle:\"))\n\n    print(f\"The third angle of a triangle using two angles is: {third_angle(a, b)}\")\n\nif __name__ == \"__main__\":\n    main()",
    "def third_angle(a, b):\n    # Your code here\n    if a > b:\n        a, b = b, a\n    return abs(a - b)\n\n\nprint(third_angle(3, 4))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\n\ndef test():\n    assert third_angle(0, 0) == 0\n    assert third_angle(0, 90) == 90\n    assert third_angle(90, 90) == 90\n    assert third_angle(90, 0) == 0\n    assert third_angle(90, -90) == 180\n\n\nif __name__ == '__main__':\n    test()",
    "def get_third_angle(a, b):\n  return (a + b) * 0.5\n\n\nif __name__ == \"__main__\":\n  print(get_third_angle(1, 1))\n  print(get_third_angle(1, 2))\n  print(get_third_angle(2, 1))\n  print(get_third_angle(2, 2))\n  print(get_third_angle(3, 1))\n  print(get_third_angle(3, 2))",
    "def get_angle(a,b):\n    return (a*a + b*b) / 2\n\n\n\nprint(get_angle(4,7))\nprint(get_angle(7,4))\nprint(get_angle(2,5))",
    "def thirdAngle(a,b):\n    return (a+b)/2\n\nprint(thirdAngle(10,20))",
    "import math\n\ndef three_angles(a, b, c):\n    #calculate the third angle\n    s = math.sqrt(a**2 + b**2 + c**2)\n    if s < 0:\n        print(\"the third angle is not possible\")\n    elif s == 0:\n        print(\"the third angle is 0\")\n    elif s == math.pi/2:\n        print(\"the third angle is 180\")\n    else:\n        print(s)\n\nthree_angles(0, 0, 0)",
    "def find_third_angle(a, b):\n    return (a + b) / 2",
    "def third_angle(a, b, c):\n    # Calculate the third angle\n    return (((((b**2) + (c**2))**(1/2))**(1/3))/(2*a*b*c))**(1/3)\n\n\nprint(third_angle(2, 4, 6))",
    "import math\n\ndef third_angle(a, b):\n    return (math.degrees(math.atan2(a, b)) + 90) % 360\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))",
    "def third_angle(a,b):\n    return (a*a+b*b)/2\n\nprint(third_angle(3,4))",
    "import math\n\ndef third_angle(a, b):\n    theta1 = math.radians(a)\n    theta2 = math.radians(b)\n    theta3 = math.radians(3 * (theta1 + theta2))\n    print(theta3)\n\nthird_angle(30, 60)",
    "def third_angle(a, b):\n    return (a + b) / 2\n\n\nif __name__ == \"__main__\":\n    assert third_angle(1, 2) == 1.5\n    assert third_angle(2, 1) == 0.5",
    "def third_angle(a, b):\n    # Your code here\n    return a + b + 360",
    "from math import pi\n\n\ndef third_angle(a, b):\n    return (a * b) / (2 * pi)\n\n\nprint(third_angle(1, 1))\nprint(third_angle(1, 2))\nprint(third_angle(2, 1))\nprint(third_angle(2, 2))",
    "def find_third_angle(a, b):\n    return (a + b) / 2\n\n\nprint(find_third_angle(1, 1))",
    "def get_third_angle(a, b):\n    return (a + b) / 2\n\na = float(input(\"Enter first angle: \"))\nb = float(input(\"Enter second angle: \"))\n\nprint(get_third_angle(a, b))",
    "def third_angle(a, b):\n    a = float(a)\n    b = float(b)\n    return (((a * a) + (b * b)) / 2)\n\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))",
    "import math\n\ndef third_angle(a, b):\n    return (math.degrees(math.atan2(b, a)) + 180) % 360\n\nif __name__ == \"__main__\":\n    print(third_angle(0, 0))\n    print(third_angle(0, 90))\n    print(third_angle(90, 0))\n    print(third_angle(90, 90))\n    print(third_angle(90, 180))\n    print(third_angle(180, 90))\n    print(third_angle(180, 180))\n    print(third_angle(180, 270))\n    print(third_angle(270, 90))\n    print(third_angle(270, 180))\n    print(third_angle(270, 270))",
    "import math\n\ndef third_angle(a, b):\n    return math.degrees(math.atan2(a, b))\n\n\nprint(third_angle(2, 3))",
    "def third_angle(a, b):\n    c = (a + b) / 2\n    if c < 0:\n        print(\"The angle of a triangle should be greater than 0\")\n    elif c > 360:\n        print(\"The angle of a triangle should be less than 360\")\n    elif c == 0:\n        print(\"The angle of a triangle should be zero\")\n    else:\n        print(\"The third angle of a triangle is: \", c)\n\n\nthird_angle(0, 0)\nthird_angle(90, 90)\nthird_angle(180, 180)",
    "import math\n\ndef third_angle(a, b):\n    return (math.degrees(math.atan2(a, b)))\n\nprint(third_angle(1, 2))\nprint(third_angle(1, 0))\nprint(third_angle(2, 0))\nprint(third_angle(0, 2))\nprint(third_angle(0, 1))\nprint(third_angle(0, -2))\nprint(third_angle(2, -2))\nprint(third_angle(2, 1))\nprint(third_angle(1, -2))\nprint(third_angle(-2, 2))\nprint(third_angle(-2, -1))\nprint(third_angle(-2, 0))\nprint(third_angle(-2, 2))",
    "from math import pi, radians\n\n\ndef third_angle(a, b):\n    return radians(3 * (a + b))\n\n\nprint(third_angle(1, 1))\nprint(third_angle(1, 2))\nprint(third_angle(2, 1))\nprint(third_angle(2, 2))\nprint(third_angle(3, 1))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\nprint(third_angle(5, 3))",
    "def third_angle(a, b, c):\n    return a + b + c\n\nprint(third_angle(2, 3, 4))",
    "def third_angle(a, b, c):\n    a = a % 360\n    b = b % 360\n    c = c % 360\n    return (a + b + c) % 360",
    "from math import atan2\n\n\ndef third_angle(a, b):\n    return atan2(b, a)\n\n\nprint(third_angle(45, 45))\nprint(third_angle(45, -45))\nprint(third_angle(45, 90))\nprint(third_angle(45, -90))\nprint(third_angle(45, -45))",
    "import math\n\n\ndef third_angle(a, b):\n    \"\"\"\n    :param a: float\n    :param b: float\n    :return: float\n    \"\"\"\n    return math.degrees(math.atan2(b, a))\n\n\nprint(third_angle(1, 2))\nprint(third_angle(2, 1))\nprint(third_angle(1, 3))",
    "def third_angle(a, b):\n    # Your code here\n    return (a + b) / 2\n\nprint(third_angle(2, 3))",
    "def find_third_angle(a, b):\n    return ((a + b) / 2)\n\nprint(find_third_angle(2, 2))\nprint(find_third_angle(2, 3))\nprint(find_third_angle(3, 2))\nprint(find_third_angle(3, 3))",
    "def third_angle(a,b):\n    return (a + b) / 2",
    "def third_angle(a, b):\n    return (a + b) / 2",
    "import math\n\ndef third_angle(a, b):\n    return math.acos(math.sin(b)/math.sin(a))\n\n\nprint(third_angle(1, 2))\nprint(third_angle(2, 1))",
    "def thirdAngle(a, b):\n    angle = (a + b) / 2\n    return angle\n\n\nprint(thirdAngle(1, 2))\nprint(thirdAngle(2, 3))\nprint(thirdAngle(2, 3))\nprint(thirdAngle(3, 1))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))",
    "def third_angle(a, b):\n    c = (a + b) / 2\n    return c\n\nprint(third_angle(2, 3))",
    "def third_angle(a, b):\n    return (a * b) / 2",
    "def get_third_angle(a, b):\n    if a < b:\n        theta = (a + b) / 2\n        return theta\n    else:\n        theta = (a - b) / 2\n        return theta\n\n\nif __name__ == \"__main__\":\n    print(get_third_angle(5, 8))\n    print(get_third_angle(3, 5))",
    "def third_angle(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return (a + b) / 2\n\n\nprint(third_angle(1, 2))\nprint(third_angle(2, 1))\nprint(third_angle(1, 0))",
    "def triangle_third_angle(a, b):\n    return (a + b) / 2\n\n\nprint(triangle_third_angle(3, 6))",
    "def third_angle(a, b):\n    return a + b",
    "def find_third_angle(a,b,c):\n    return (a + b + c)/3\n\nprint(find_third_angle(0,0,0))\nprint(find_third_angle(0,0,180))\nprint(find_third_angle(180,0,0))\nprint(find_third_angle(180,0,180))",
    "def third_angle(a, b):\n    return (((a * b) + (b * a)) / 2) % 360\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))",
    "def third_angle(a, b):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :rtype: float\n    \"\"\"\n    return (a + b) * 0.5\n\n\nif __name__ == \"__main__\":\n    print(third_angle(0.5, 0.5))",
    "from math import atan2\n\ndef third_angle(a, b):\n    c = atan2(b, a)\n    return c\n\nprint(third_angle(1, 0))",
    "def third_angle(a,b):\n\treturn (a + b + 90) % 360 - 90\n\nprint(third_angle(10,20))",
    "def third_angle(a, b, c):\n    # Your code here\n    return (a + b + c) / 3\n\nprint(third_angle(1, 1, 1))\nprint(third_angle(1, 2, 1))\nprint(third_angle(2, 2, 2))",
    "def third_angle(a, b):\n    if a > b:\n        return a - b\n    else:\n        return b - a\n\n\nprint(third_angle(2, 4))\nprint(third_angle(4, 2))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\nprint(third_angle(2, 2))\nprint(third_angle(3, 2))\nprint(third_angle(4, 2))",
    "def thirdAngle(a, b):\n    return (a + b) / 2\n\nprint(thirdAngle(3, 5))",
    "import math\n\n\ndef third_angle(a, b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    if angle1 < angle2:\n        return math.degrees(math.atan2(angle2 - angle1, angle1 - angle2))\n    else:\n        return math.degrees(math.atan2(angle1 - angle2, angle1 - angle2))\n\n\nprint(third_angle(1, 1))\nprint(third_angle(2, 2))\nprint(third_angle(1, 2))",
    "def third_angle(a, b):\n    return (a + b) / 2\n\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))",
    "def third_angle(a, b):\n    a = float(a)\n    b = float(b)\n    return (a + b) / 2\n\n\nprint(third_angle(12, 45))\nprint(third_angle(15, 45))\nprint(third_angle(20, 30))",
    "def third_angle(a, b):\n    return (a + b) % 360\n\nprint(third_angle(60, 60))",
    "def third_angle(a, b):\n    a = a * 180 / 3.14159\n    b = b * 180 / 3.14159\n    third_angle = (a + b)\n    return third_angle\n\nprint(third_angle(45, 30))",
    "def find_third_angle(a, b):\n    if a == b:\n        return 0\n    elif a > b:\n        a, b = b, a\n    return (a * b) / 2\n\n\nprint(find_third_angle(1, 2))\nprint(find_third_angle(2, 3))\nprint(find_third_angle(3, 4))\nprint(find_third_angle(4, 3))",
    "import math\n\ndef find_third_angle(a, b):\n    a = math.radians(a)\n    b = math.radians(b)\n\n    return (a + b) / 2\n\nprint(find_third_angle(0, 0))\nprint(find_third_angle(1, 0))\nprint(find_third_angle(0, 1))\nprint(find_third_angle(1, 1))",
    "def third_angle(a, b, c):\n    # Your code here\n    return (a + b + c) / 3\n\n\nprint(third_angle(0, 0, 0))\nprint(third_angle(1, 0, 0))\nprint(third_angle(0, 1, 0))\nprint(third_angle(1, 1, 0))",
    "import math\n\n\ndef third_angle(a, b):\n    return math.degrees(math.atan2(b, a))\n\n\nprint(third_angle(0, 0))\nprint(third_angle(0, 90))\nprint(third_angle(90, 0))",
    "def find_third_angle(a, b):\n    return a + b + 2*b*b\n\n\nprint(find_third_angle(0, 0))\nprint(find_third_angle(0, 90))\nprint(find_third_angle(90, 90))",
    "def third_angle(a, b):\n    angle = (a + b) / 2\n    return angle\n\nprint(third_angle(4, 2))",
    "def third_angle(a, b, c):\n    # your code here\n    if a == b == c:\n        return 0\n    elif a == b or a == c or b == c:\n        return 90\n    elif a > b > c:\n        return 90 - (90 - a)\n    elif b > a > c:\n        return 90 - (90 - b)\n    elif c > a > b:\n        return 90 - (90 - c)\n\n\nprint(third_angle(1, 1, 1))\nprint(third_angle(1, 2, 1))\nprint(third_angle(2, 2, 2))",
    "def third_angle(a, b):\n    return ((a**2 + b**2)**0.5)**0.5\n\n\nprint(third_angle(2, 3))\nprint(third_angle(5, 3))\nprint(third_angle(2, 6))",
    "def third_angle(a, b):\n    return (a + b) % 360\n\nprint(third_angle(90, 0))\nprint(third_angle(90, 90))\nprint(third_angle(0, 0))",
    "def third_angle(a, b):\n    return (a + b) % 360\n\n\nprint(third_angle(45, 90))",
    "def third_angle(a, b):\n    return (a + b + 180) % 360 - 180\n\n\nprint(third_angle(40, 60))\nprint(third_angle(40, 80))",
    "import math\n\ndef third_angle(a, b):\n    return math.degrees(math.atan2(b, a))\n\nprint(third_angle(45, 30))",
    "def third_angle(a, b):\n    return (a * b) / 2\n\nprint(third_angle(3, 6))\nprint(third_angle(6, 3))\nprint(third_angle(2, 1))",
    "def third_angle(a,b,c):\n    theta_a = (a * a) + (b * b) + (c * c)\n    theta_b = (a * b) + (b * c) + (c * a)\n    theta_c = (a * c) + (b * a) + (c * b)\n    return math.degrees(math.atan2(theta_b,theta_a))\n\nprint(third_angle(0,0,0))",
    "def third_angle(a,b):\n    \"\"\"\n    a: float\n    b: float\n    :return: float\n    \"\"\"\n    if a > b:\n        a,b = b,a\n    return (2*a + b) % 360\n\nprint(third_angle(2,3))\nprint(third_angle(4,5))\nprint(third_angle(5,2))\nprint(third_angle(2,4))\nprint(third_angle(3,3))\nprint(third_angle(3,2))",
    "import math\n\ndef third_angle(a, b, c):\n    return math.atan2(b - a, c - a)\n\nprint(third_angle(0, 0, 0))\nprint(third_angle(0, math.pi, 0))\nprint(third_angle(math.pi, 0, 0))\nprint(third_angle(0, math.pi, math.pi))\nprint(third_angle(math.pi, 0, math.pi))",
    "def third_angle(a, b, c):\n    if a < b and a < c:\n        if b < c:\n            return a + b + c\n        else:\n            return b + c + a\n    else:\n        return a + b + c\n\nprint(third_angle(1, 2, 3))",
    "def third_angle(a, b, c):\n    return (a + b + c) / 3\n\n\nprint(third_angle(12, 13, 14))",
    "def find_third_angle(a, b):\n    a = float(a)\n    b = float(b)\n    return (a + b + 2) * (a + b + 3) / 4"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}