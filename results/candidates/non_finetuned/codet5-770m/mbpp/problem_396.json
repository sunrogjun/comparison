{
  "problem": {
    "task_id": "MBPP/407",
    "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
    "test_list": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ],
    "challenge_test_list": [],
    "problem_id": 396
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    s = str(n)\n    temp = []\n    for i in s:\n        temp.append(int(i))\n    temp.reverse()\n    return int(\"\".join(map(str, temp)))",
    "def next_bigger_number(n):\n    res = []\n    while n > 0:\n        res.append(n % 10)\n        n = n // 10\n\n    res.reverse()\n    res = \"\".join([str(x) for x in res])\n    return res\n\n\nprint(next_bigger_number(12))",
    "def next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = list(str(n))\n    n.reverse()\n    return int(''.join(n))",
    "def next_bigger(n):\n    n = str(n)\n    b = 0\n    for i in range(len(n)):\n        if n[i] < '0':\n            b = i + 1\n            break\n    for i in range(b):\n        n = n[:i] + str(int(n[i]) + 1) + n[i + 1:]\n    return int(n)\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(1234))\n    print(next_bigger(123))\n    print(next_bigger(456))\n    print(next_bigger(56))\n    print(next_bigger(1234567))\n    print(next_bigger(12345678))",
    "def next_bigger(num):\n    next_num = str(num)\n    for i in range(len(next_num) - 1, 0, -1):\n        next_num = next_num[:i] + str(int(next_num[i]) + 1) + next_num[i + 1:]\n    return int(next_num)\n\nif __name__ == \"__main__\":\n    assert next_bigger(1234) == 1230\n    assert next_bigger(4321) == 4321\n    assert next_bigger(21222) == 21222",
    "class Solution:\n    def nextBiggerNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        d = []\n        d = [int(i) for i in str(n)]\n        d.reverse()\n        return d[0] * 10 + d[1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nextBiggerNumber(123))",
    "def next_bigger_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return int(str(num)[::-1] + str(num)[::-1])\n\n\nprint(next_bigger_number(123))",
    "def next_bigger_number(num):\n    # Write your code here\n    next_number = num + 1\n    while num > 0:\n        if num % 10 > next_number % 10:\n            next_number = next_number / 10\n        else:\n            next_number = next_number * 10\n        num = num // 10\n    return next_number\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(123))",
    "def next_bigger_number(n):\n    n_str = str(n)\n    n_len = len(n_str)\n    i = n_len - 1\n\n    while i >= 0:\n        if n_str[i] > n_str[i + 1]:\n            n_str = n_str[:i] + str(n_str[i + 1]) + n_str[i + 2:]\n            break\n        i -= 1\n\n    return int(n_str)\n\n\nprint(next_bigger_number(123))\nprint(next_bigger_number(1234))\nprint(next_bigger_number(1234567))",
    "def next_bigger_number(number):\n    num = list(str(number))\n    for i in range(len(num)):\n        num[i] = num[i] + 1\n        if num[i] > 9:\n            num[i] = 0\n    num.reverse()\n    return int(''.join(num))\n\n\nprint(next_bigger_number(1234))",
    "def next_bigger_number(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    res = 0\n    while number > 0:\n        res = res * 10 + number % 10\n        number //= 10\n    return res\n\n\nif __name__ == '__main__':\n    print(next_bigger_number(0))\n    print(next_bigger_number(1))\n    print(next_bigger_number(2))\n    print(next_bigger_number(3))\n    print(next_bigger_number(4))\n    print(next_bigger_number(5))\n    print(next_bigger_number(6))\n    print(next_bigger_number(7))\n    print(next_bigger_number(8))\n    print(next_bigger_number(9))",
    "def next_bigger(num: int) -> int:\n    num = str(num)\n    num = [int(i) for i in num]\n    num.reverse()\n    return int(''.join(str(i) for i in num))\n\n\nprint(next_bigger(123))",
    "def next_bigger(num):\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + next_bigger(num // 10)\n\n\nprint(next_bigger(123456))",
    "def next_bigger_number(num: int) -> int:\n    while num > 0:\n        num = num // 10\n        num = num % 10\n    return num\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(3) == 4\n    assert next_bigger_number(4) == 5\n    assert next_bigger_number(5) == 6\n    assert next_bigger_number(6) == 7",
    "def next_bigger_number(n):\n    if n < 10:\n        return n\n\n    res = 0\n    while n > 0:\n        res = res * 10 + n % 10\n        n //= 10\n\n    return res\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(1234))\n    print(next_bigger_number(56))\n    print(next_bigger_number(123))\n    print(next_bigger_number(5))\n    print(next_bigger_number(7))\n    print(next_bigger_number(8))\n    print(next_bigger_number(9))",
    "def next_bigger_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    result = num\n    while num > 0:\n        digit = num % 10\n        result = digit * 10 + result\n        num = num // 10\n    return result",
    "def next_bigger(num):\n    if num < 10:\n        return num\n    else:\n        return num + 10\n\n\nprint(next_bigger(1234))\nprint(next_bigger(5678))\nprint(next_bigger(12345678))\nprint(next_bigger(123456789))\nprint(next_bigger(123456789012))\nprint(next_bigger(1234567890123))\nprint(next_bigger(12345678901235678))\nprint(next_bigger(12345678901235678123456789))\nprint(next_bigger(1234567890123567812345678901235678))\nprint(next_bigger
    "def next_bigger_number(n):\n    if n < 10:\n        return n\n    else:\n        return str(n // 10) + str(n % 10)\n\n\nprint(next_bigger_number(4321))",
    "def next_bigger_number(n):\n    while n > 9:\n        n -= 9\n        n //= 10\n    n += 9\n    while n > 0:\n        n //= 10\n        n -= 9\n        n *= 10\n    return n\n\nprint(next_bigger_number(123))",
    "def next_bigger_number(number):\n    number = list(str(number))\n    for i in range(len(number)):\n        if i == len(number)-1:\n            number.append(str(int(number[i])+1))\n        else:\n            number[i] = str(int(number[i])+1)\n    return int(\"\".join(number))\n\n\nprint(next_bigger_number(123))",
    "def next_bigger_number(num):\n    # Your code here\n    new_num = num\n    while True:\n        if new_num == 0:\n            return 0\n        elif new_num > 9:\n            new_num = new_num % 10\n        else:\n            new_num = new_num // 10\n        if new_num == 0:\n            break\n    return new_num",
    "def next_bigger_number(num):\n    next_num = 0\n    while num > 0:\n        next_num = num % 10 + next_num\n        num //= 10\n    return next_num\n\n\nprint(next_bigger_number(1234))\nprint(next_bigger_number(100))\nprint(next_bigger_number(0))",
    "def next_bigger_number(num):\n    if num < 10:\n        return num\n    else:\n        digits = [int(x) for x in str(num)]\n        next_bigger_number = digits[0]\n        for i in range(1, len(digits)):\n            next_bigger_number = next_bigger_number * 10 + digits[i]\n        return next_bigger_number\n\n\nif __name__ == '__main__':\n    print(next_bigger_number(1))\n    print(next_bigger_number(9))\n    print(next_bigger_number(5))",
    "def next_bigger_number(number):\n    number = list(str(number))\n    next_number = 0\n    for index, digit in enumerate(number):\n        next_number += int(digit) * (10 ** (index + 1))\n    return next_number\n\n\nprint(next_bigger_number(123))\nprint(next_bigger_number(456))\nprint(next_bigger_number(876))",
    "def next_bigger_number(num):\n    if num == 0:\n        return 0\n    num = str(num)\n    res = \"\"\n    for i in range(len(num)):\n        res += str(num[i] * 2)\n        if i < len(num) - 1:\n            res += \" \"\n    return int(res)\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(0) == 0\n    assert next_bigger_number(1) == 1\n    assert next_bigger_number(2) == 2\n    assert next_bigger_number(3) == 3\n    assert next_bigger_number(4) == 4\n    assert next_bigger_number(5) == 5\n    assert next_bigger_number(6) == 6\n    assert next_bigger_number(7) == 7\n    assert next_bigger_number(8) == 8\n    assert next_bigger_number(9) == 9\n    assert next_bigger_number(10) == 10\n    assert next_bigger_number(11) == 11\n    assert next_bigger_number(12) == 12\n    assert next_bigger_number(13) == 13\n    assert next_bigger_number(14) == 14\n    assert next_bigger_number(15) == 15\n    assert next_bigger_number(16) == 16\n    assert next_bigger_number(17) == 17\n    assert next_bigger_number(18) == 18\n    assert next_bigger_number(19) == 19\n    assert next_bigger_number(20) == 20\n    assert next_bigger_number(21) == 21\n    assert next_bigger_number(22) == 22\n    assert next_bigger_number(23) == 23\n    assert next_bigger_number(24) == 24\n    assert next_bigger_number(25) == 25\n    assert next_bigger_number(26) == 26\n    assert next_bigger_number(27) == 27\n    assert next_bigger_number(28) == 28\n    assert next_bigger",
    "def next_bigger_number(number):\n    number = list(str(number))\n    num = len(number)\n    for i in range(num - 1, -1, -1):\n        number[i] = str(int(number[i]) + 1)\n    return int(''.join(number))\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(123) == 1231231\n    assert next_bigger_number(123456789) == 1234567891231",
    "def next_bigger_number(num):\n    for i in range(len(num)):\n        if num[i] > 9:\n            num = num[:i] + str(int(num[i]) + 1) + num[i+1:]\n            return num\n    return num\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(\"123456\"))\n    print(next_bigger_number(\"123\"))\n    print(next_bigger_number(\"\"))",
    "def next_bigger_number(n):\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n    return int(''.join(reversed(n)))\n\n\ndef main():\n    print(next_bigger_number(12345))\n    print(next_bigger_number(123456789))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def next_bigger(num):\n    # Your code here\n    num_list = list(str(num))\n    num_list.reverse()\n    num_str = \"\".join(num_list)\n    return int(num_str)\n\nprint(next_bigger(1234))",
    "def next_bigger_number(num):\n    if num < 10:\n        return num\n    else:\n        return str(int(str(num)[::-1]) + 1)\n\n\nprint(next_bigger_number(1))\nprint(next_bigger_number(2))\nprint(next_bigger_number(3))\nprint(next_bigger_number(4))\nprint(next_bigger_number(5))\nprint(next_bigger_number(6))\nprint(next_bigger_number(7))\nprint(next_bigger_number(8))\nprint(next_bigger_number(9))\nprint(next_bigger_number(10))",
    "def next_bigger_number(n):\n    res = []\n    while n > 0:\n        res.append(n % 10)\n        n //= 10\n    return res[::-1]\n\n\nprint(next_bigger_number(1234))\nprint(next_bigger_number(2))\nprint(next_bigger_number(3))\nprint(next_bigger_number(4))\nprint(next_bigger_number(5))\nprint(next_bigger_number(6))\nprint(next_bigger_number(7))\nprint(next_bigger_number(8))\nprint(next_bigger_number(9))\nprint(next_bigger_number(10))",
    "def next_bigger_number(number):\n    # Your code here\n    next_number = number\n    while next_number!= 0:\n        next_number = next_number // 10\n        next_number = next_number * 10 + next_number % 10\n    return next_number\n\n\nprint(next_bigger_number(1234))",
    "def next_bigger(num):\n    # Write your code here\n    res = num\n    while res > 0:\n        res, remainder = divmod(res, 10)\n        res = remainder\n    return res\n\n\nprint(next_bigger(123456789))",
    "def next_bigger_number(num):\n    num = list(str(num))\n    num.reverse()\n    return int(''.join(num))\n\n\nprint(next_bigger_number(123))",
    "def next_bigger_number(number):\n    # write your code in Python 3.6\n    # Your code here\n    result = []\n    num = 0\n    while number:\n        result.append(number % 10)\n        number = number // 10\n    for i in range(len(result) - 1, -1, -1):\n        num = result[i] + num\n    return num\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(1234))",
    "def next_bigger_number(number):\n    number = str(number)\n    number = list(number)\n\n    while len(number) > 1:\n        number[0] = number[0] * 10 + number[1]\n        number = list(number)\n\n    return int(''.join(number))\n\n\nprint(next_bigger_number(1234))",
    "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n\n    return int(str(n)[::-1])\n\n\nprint(next_bigger_number(123))",
    "def next_bigger_number(number: int) -> int:\n    number_list = list(str(number))\n    new_number = \"\"\n    i = len(number_list) - 1\n    while i >= 0:\n        if number_list[i] < number_list[i + 1]:\n            new_number += number_list[i]\n            i -= 1\n        else:\n            new_number += number_list[i + 1]\n            i -= 1\n    return int(new_number)\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(0) == 0\n    assert next_bigger_number(1) == 1\n    assert next_bigger_number(2) == 1\n    assert next_bigger_number(3) == 2\n    assert next_bigger_number(4) == 2\n    assert next_bigger_number(5) == 3\n    assert next_bigger_number(6) == 4\n    assert next_bigger_number(7) == 4\n    assert next_bigger_number(8) == 5\n    assert next_bigger_number(9) == 6\n    assert next_bigger_number(10) == 7\n    assert next_bigger_number(11) == 8\n    assert next_bigger_number(12) == 9\n    assert next_bigger_number(13) == 10\n    assert next_bigger_number(14) == 11\n    assert next_bigger_number(15) == 12\n    assert next_bigger_number(16) == 13\n    assert next_bigger_number(17) == 14\n    assert next_bigger_number(18) == 15\n    assert next_bigger_number(19) == 16\n    assert next_bigger_number(20) == 17\n    assert next_bigger_number(21) == 18\n    assert next_bigger_number(22) == 19\n    assert next_bigger_number(23) == 20\n    assert next_bigger_number(24) == 21\n    assert next_bigger_number(25) == 22\n    assert next_bigger_number(26)",
    "def next_bigger_number(number):\n    return str(int(str(number)[::-1]) + 1)",
    "def next_bigger_number(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        return -1\n    else:\n        return (num % 10) + (next_bigger_number(num // 10))",
    "def next_bigger_number(num):\n    new_num = num\n    for i in range(len(str(num))):\n        new_num = new_num * 10 + int(str(num)[i])\n    return new_num\n\nprint(next_bigger_number(123))",
    "def next_bigger(number):\n    n = str(number)\n    n = n[::-1]\n    return int(n)\n\nprint(next_bigger(12))",
    "def next_bigger_number(n):\n    res = 0\n    for i in range(len(str(n))):\n        res += int(str(n)[i]) * (10 ** (len(str(n)) - i - 1))\n    return res\n\n\ndef main():\n    assert next_bigger_number(12) == 13\n    assert next_bigger_number(14) == 15\n    assert next_bigger_number(18) == 19\n    assert next_bigger_number(19) == 20\n    assert next_bigger_number(21) == 22\n    assert next_bigger_number(24) == 25\n    assert next_bigger_number(25) == 26\n    assert next_bigger_number(27) == 28\n    assert next_bigger_number(29) == 30\n    assert next_bigger_number(32) == 33\n    assert next_bigger_number(34) == 34\n    assert next_bigger_number(35) == 35\n    assert next_bigger_number(36) == 36\n    assert next_bigger_number(37) == 37\n    assert next_bigger_number(38) == 38\n    assert next_bigger_number(39) == 39\n    assert next_bigger_number(40) == 40\n    assert next_bigger_number(41) == 41\n    assert next_bigger_number(42) == 42\n    assert next_bigger_number(43) == 43\n    assert next_bigger_number(44) == 44\n    assert next_bigger_number(45) == 45\n    assert next_bigger_number(46) == 46\n    assert next_bigger_number(47) == 47\n    assert next_bigger_number(48) == 48\n    assert next_bigger_number(49) == 49\n    assert next_bigger_number(50) == 50\n    assert next_bigger_number(51) == 51\n    assert next_bigger_number(52) == 52\n    assert next_bigger_number(53) == 53\n    assert next_bigger_number(54) == 54\n    assert next_bigger_",
    "def next_bigger(num):\n    if num < 10:\n        return num\n    else:\n        return num + (num // 10)\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(2))\n    print(next_bigger(3))\n    print(next_bigger(4))\n    print(next_bigger(5))\n    print(next_bigger(6))\n    print(next_bigger(7))\n    print(next_bigger(8))\n    print(next_bigger(9))",
    "def next_bigger(n):\n    if n < 10:\n        return n\n    new_number = int(str(n)[-1])\n    return new_number * 10 + next_bigger(new_number)\n\n\ndef next_bigger_iter(n):\n    while True:\n        n = int(str(n)[-1])\n        if n > 10:\n            return n\n\n\nif __name__ == \"__main__\":\n    n = next_bigger_iter(1234)\n    assert n == 1234, n\n    n = next_bigger_iter(8)\n    assert n == 8, n",
    "class Solution(object):\n    def next_bigger_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = list(str(n))\n        n.reverse()\n        n = int(\"\".join(n))\n        return n\n\n\nif __name__ == '__main__':\n    assert Solution().next_bigger_number(3) == 4\n    assert Solution().next_bigger_number(9) == 4\n    assert Solution().next_bigger_number(4) == 9\n    assert Solution().next_bigger_number(2) == 8\n    assert Solution().next_bigger_number(1) == 1",
    "def next_bigger_number(num):\n    if num < 10:\n        return num\n\n    if num % 10 == 0:\n        return num // 10\n\n    while num % 10 > 0:\n        num //= 10\n\n    return num + 1\n\n\nprint(next_bigger_number(9))\nprint(next_bigger_number(10))\nprint(next_bigger_number(20))\nprint(next_bigger_number(100))\nprint(next_bigger_number(1000))\nprint(next_bigger_number(9999))",
    "def next_bigger(number):\n    # Your code here\n    if number == 0:\n        return 0\n    else:\n        return number % 10 + 1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(0))\n    print(next_bigger(1))\n    print(next_bigger(2))\n    print(next_bigger(3))\n    print(next_bigger(4))\n    print(next_bigger(5))\n    print(next_bigger(6))\n    print(next_bigger(7))\n    print(next_bigger(8))\n    print(next_bigger(9))\n    print(next_bigger(10))",
    "def next_bigger_number(n):\n    if n < 10:\n        return n\n    else:\n        return int(str(n)[::-1]) + 1\n\n\nprint(next_bigger_number(12345))",
    "def next_bigger_number(num):\n    res = 0\n    for i in range(len(num)):\n        res = res * 10 + int(num[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(\"1234567890\"))",
    "def next_bigger_number(n):\n    res = n\n    while n!= 0:\n        res = res * 10 + n % 10\n        n = int(n / 10)\n\n    return res\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(10))\n    print(next_bigger_number(0))\n    print(next_bigger_number(1))\n    print(next_bigger_number(2))\n    print(next_bigger_number(3))\n    print(next_bigger_number(4))\n    print(next_bigger_number(5))\n    print(next_bigger_number(6))\n    print(next_bigger_number(7))\n    print(next_bigger_number(8))\n    print(next_bigger_number(9))\n    print(next_bigger_number(10))\n    print(next_bigger_number(11))\n    print(next_bigger_number(12))\n    print(next_bigger_number(13))\n    print(next_bigger_number(14))\n    print(next_bigger_number(15))\n    print(next_bigger_number(16))\n    print(next_bigger_number(17))\n    print(next_bigger_number(18))\n    print(next_bigger_number(19))\n    print(next_bigger_number(20))\n    print(next_bigger_number(21))\n    print(next_bigger_number(22))\n    print(next_bigger_number(23))\n    print(next_bigger_number(24))\n    print(next_bigger_number(25))\n    print(next_bigger_number(26))\n    print(next_bigger_number(27))\n    print(next_bigger_number(28))\n    print(next_bigger_number(29))\n    print(next_bigger_number(30))\n    print(next_bigger_number(31))\n    print(next_bigger_number(32))\n    print(next_",
    "def next_bigger(num):\n    new_num = \"\"\n    for i in range(len(num)):\n        if num[i] > 9:\n            new_num += str(num[i])\n            num = num[:i] + str(num[i+1]) + num[i+2:]\n    return int(new_num)\n\n\nprint(next_bigger(123))",
    "def next_bigger_number(num):\n    return int(\"\".join(sorted(str(num))[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(123))\n    print(next_bigger_number(1234))\n    print(next_bigger_number(123456))",
    "def next_bigger(num):\n\tnum = str(num)\n\tnum = num[::-1]\n\twhile len(num) < len(num[::-1]):\n\t\tnum = '0' + num\n\treturn int(num)\n\nprint(next_bigger(12345))",
    "def next_bigger_number(num):\n    num = str(num)\n    for i in range(len(num)):\n        if num[i] < '9':\n            num = num[:i] + str(int(num[i]) + 1) + num[i+1:]\n            break\n    return int(num)\n\nprint(next_bigger_number(1))",
    "def next_bigger(num):\n    new_num = 0\n    for i in range(len(num)):\n        new_num += num[i] * (10 ** (i + 1))\n    return new_num\n\n\nprint(next_bigger(int(input(\"Enter a number: \"))))",
    "def next_bigger(num):\n    new_num = 0\n    while num!= 0:\n        new_num = new_num * 10 + num % 10\n        num = int(num / 10)\n    return new_num\n\n\nprint(next_bigger(5))",
    "def rearrange(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 10 == 0:\n        return rearrange(n // 10) * 10 + rearrange(n % 10)\n    else:\n        return rearrange(n // 10) * 10 + rearrange(n % 10) * 10 + rearrange(n % 10)\n\n\nprint(rearrange(10))",
    "def next_bigger_number(num: int) -> int:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    if num == 0:\n        return 0\n\n    while num > 9:\n        num = num // 10\n        next_bigger_num = num % 10\n        num = next_bigger_num\n\n    return num\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(5) == 9\n    assert next_bigger_number(7) == 1\n    assert next_bigger_number(6) == 2\n    assert next_bigger_number(4) == 3\n    assert next_bigger_number(1) == 1",
    "def next_bigger_number(number):\n    digits = [int(i) for i in str(number)]\n    if len(digits) == 1:\n        return number\n\n    for i in range(len(digits) - 1, 0, -1):\n        digits[i] += 1\n\n    new_number = \"\"\n    for i in digits:\n        new_number += str(i)\n\n    return int(new_number)\n\n\nprint(next_bigger_number(123))\nprint(next_bigger_number(456))\nprint(next_bigger_number(45654))",
    "def next_bigger_number(num):\n    n = num\n    while n > 9:\n        n = n // 10\n\n    return n * 10 + num % 10\n\n\nprint(next_bigger_number(123456789))",
    "def next_bigger_number(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n\n    # Your code here\n    num_str = str(number)\n    num_str = num_str[::-1]\n    return int(num_str)",
    "def next_bigger_number(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    while True:\n        number = int(str(number)[::-1])\n        if number > 9:\n            return number",
    "def next_bigger_number(n):\n    i = 0\n    while i < len(str(n)):\n        while n > 0:\n            if n % 10 > i:\n                n /= 10\n            else:\n                n = n // 10\n            i += 1\n    return n\n\nprint(next_bigger_number(9))\nprint(next_bigger_number(916))\nprint(next_bigger_number(9123))\nprint(next_bigger_number(918))\nprint(next_bigger_number(924))\nprint(next_bigger_number(9))",
    "def next_bigger_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    res = 1\n    while num > 0:\n        res *= 10\n        res += num % 10\n        num //= 10\n    return res\n\nprint(next_bigger_number(7))",
    "def next_bigger_number(number: int):\n    next_bigger = 0\n    while number > 0:\n        next_bigger += 1\n        number //= 10\n\n    return next_bigger\n\n\ndef main():\n    print(next_bigger_number(10))\n    print(next_bigger_number(12))\n    print(next_bigger_number(21))\n    print(next_bigger_number(4096))\n    print(next_bigger_number(10000))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rearrange(num):\n    new_num = []\n    while num > 0:\n        digit = num % 10\n        new_num.append(digit)\n        num = int(num / 10)\n    return new_num\n\nprint(rearrange(123456789))\nprint(rearrange(1234567890))",
    "def next_bigger_number(n):\n    return str(int(n) + 1)\n\nprint(next_bigger_number(12345678))",
    "def next_bigger(n: int) -> int:\n    n = str(n)\n    b = 0\n    for i in n:\n        b = int(i) * 10 + b\n    return b\n\n\nprint(next_bigger(1234))\nprint(next_bigger(123456789))\nprint(next_bigger(0))\nprint(next_bigger(99999999))\nprint(next_bigger(9999999999))\nprint(next_bigger(99999999998))",
    "def next_bigger_number(number):\n    return int(str(number)[::-1] + str(number)[1:])\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(123))\n    print(next_bigger_number(0))\n    print(next_bigger_number(6))",
    "def next_bigger_number(num):\n    return num + 1 if num < 9 else num\n\n\nprint(next_bigger_number(7))\nprint(next_bigger_number(8))\nprint(next_bigger_number(9))",
    "def next_bigger_number(n):\n    new_n = 0\n    while n > 0:\n        new_n = (new_n * 10) + n % 10\n        n = n // 10\n    return new_n\n\nprint(next_bigger_number(42))",
    "def next_bigger_number(num):\n    return int(''.join(sorted(str(num))[::-1]))\n\n\nprint(next_bigger_number(123456))",
    "def next_bigger_number(number):\n    if number == 0:\n        return 0\n    number_list = list(str(number))\n    for i in range(len(number_list)):\n        number_list[i] = str(number_list[i] + 1)\n    number_list[0] = str(1)\n    number_list = ''.join(number_list)\n    return int(number_list)\n\n\nprint(next_bigger_number(12345))",
    "class Solution:\n    def next_bigger_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = str(n)\n        length = len(n)\n        if length == 1:\n            return n\n        else:\n            n_list = list(n)\n            n_list.reverse()\n            n = \"\".join(n_list)\n            return n",
    "def next_bigger_num(num):\n    i = 1\n    while True:\n        if num < 10:\n            break\n        elif num % 10 > 0:\n            num = num // 10\n            num += 1\n        else:\n            break\n        i += 1\n    return i\n\n\nprint(next_bigger_num(123))\nprint(next_bigger_num(456))\nprint(next_bigger_num(123))\nprint(next_bigger_num(456))\nprint(next_bigger_num(12345))",
    "def next_bigger_number(num):\n    num = str(num)\n    new_num = []\n    for i in range(len(num)):\n        if num[i] < '9':\n            new_num.append(str(int(num[i]) + 1))\n        else:\n            new_num.append(str(int(num[i]) + 2))\n    return int(''.join(new_num))\n\n\nif __name__ == '__main__':\n    print(next_bigger_number(123))\n    print(next_bigger_number(12))\n    print(next_bigger_number(2))\n    print(next_bigger_number(232))\n    print(next_bigger_number(2322))\n    print(next_bigger_number(9))\n    print(next_bigger_number(912))\n    print(next_bigger_number(91212))\n    print(next_bigger_number(9121212))\n    print(next_bigger_number(912121212))\n    print(next_bigger_number(91212121212))\n    print(next_bigger_number(91212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212",
    "def next_bigger_number(number):\n    new_number = []\n    while number > 0:\n        new_number.append(number % 10)\n        number //= 10\n    return new_number[::-1]\n\n\nassert next_bigger_number(12345) == [1, 2, 3, 5, 8, 9, 0]\nassert next_bigger_number(123456) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert next_bigger_number(12345678) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0]\nassert next_bigger_number(123456787) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]\nassert next_bigger_number(12345678708) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]\nassert next_bigger_number(1234567870812) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0]",
    "def next_bigger_number(n):\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    return n\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(next_bigger_number(n))",
    "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = str(n)\n    for i in range(len(n) - 1, -1, -1):\n        if n[i] < n[i + 1]:\n            return int(n[0:i] + str(int(n[0:i]) + 1) + n[i + 1:])\n        else:\n            return int(n[0:i])\n\n\ndef main():\n    print(next_bigger_number(123456789))\n\n\nif __name__ == '__main__':\n    main()",
    "def next_bigger_number(n):\n    if n == 0:\n        return 0\n    n = str(n)\n    last = n[-1]\n    while len(n) > 1:\n        last = n[-1]\n        if int(last) > int(n[-1]):\n            n = n[:-1]\n        else:\n            n = n[:-1] + \"0\" + n[-1]\n    return int(n)\n\nprint(next_bigger_number(12))\nprint(next_bigger_number(1))\nprint(next_bigger_number(0))\nprint(next_bigger_number(5))",
    "def next_bigger_number(n):\n    if n < 10:\n        return n\n    return str(n // 10) + str(n % 10)\n\n\nprint(next_bigger_number(1234))",
    "def next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    while n > 0:\n        res = res * 10 + n % 10\n        n //= 10\n    return res\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(123))",
    "def next_bigger_number(num: int) -> int:\n    num_str = str(num)\n    res = int(num_str[::-1])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(1234) == 12345\n    assert next_bigger_number(12345) == 12345\n    assert next_bigger_number(123) == 123",
    "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    res = 1\n    while n > 0:\n        res *= 10\n        res += n % 10\n        n //= 10\n    return res\n\n\nif __name__ == '__main__':\n    assert next_bigger_number(5) == 4\n    assert next_bigger_number(0) == 0\n    assert next_bigger_number(1) == 1\n    assert next_bigger_number(9) == 9\n    assert next_bigger_number(900) == 9\n    assert next_bigger_number(4321) == 4321",
    "def next_bigger_number(number):\n    digits = list(str(number))\n    for i in range(len(digits) - 1, -1, -1):\n        digits[i] = str(int(digits[i]) + 1)\n    digits.reverse()\n    return int(''.join(digits))\n\nprint(next_bigger_number(123))\nprint(next_bigger_number(1234))\nprint(next_bigger_number(123456))\nprint(next_bigger_number(123456789))",
    "def next_bigger_number(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.reverse()\n    num_str = ''.join(num_list)\n    return int(num_str)\n\n\nif __name__ == '__main__':\n    print(next_bigger_number(9))",
    "def next_bigger_number(num):\n    # print(num)\n    num_list = list(str(num))\n    for i in range(len(num_list)):\n        if num_list[i] > '0' and num_list[i] < '9':\n            num_list[i] = '9'\n            num_list.append('0')\n        else:\n            break\n    return int(''.join(num_list))\n\n\nprint(next_bigger_number(123))\nprint(next_bigger_number(0))\nprint(next_bigger_number(9))\nprint(next_bigger_number(99))\nprint(next_bigger_number(1))",
    "def rearrange_digits(number):\n    number_str = str(number)\n    new_number = \"\"\n    for i in range(len(number_str)):\n        new_number += number_str[i]\n        if i!= len(number_str) - 1:\n            new_number += \".\"\n    return new_number\n\n\ndef test():\n    assert rearrange_digits(123) == \"123.12\"\n    assert rearrange_digits(123.1) == \"123.12.1\"\n    assert rearrange_digits(123.1.2) == \"123.12.2\"\n    assert rearrange_digits(123.12) == \"123\"\n    assert rearrange_digits(123.12.1) == \"123.12.1\"\n    assert rearrange_digits(123.12.2) == \"123.12.2\"\n    assert rearrange_digits(123.12.3) == \"123.12.3\"\n    assert rearrange_digits(123.12.4) == \"123.12.4\"\n    assert rearrange_digits(123.12.5) == \"123.12.5\"\n    assert rearrange_digits(123.12.6) == \"123.12.6\"\n    assert rearrange_digits(123.12.7) == \"123.12.7\"\n    assert rearrange_digits(123.12.8) == \"123.12.8\"\n    assert rearrange_digits(123.12.9) == \"123.12.9\"\n    assert rearrange_digits(123.12.10) == \"123.12.10\"\n\n\nif __name__ == '__main__':\n    test()",
    "def next_bigger_number(num):\n    num = str(num)\n    return int(num[-1]) * int(num[-2]) * int(num[-3]) * int(num[-4]) * int(num[-5])\n\n\nprint(next_bigger_number(123))",
    "def rearrange_digits(num):\n    num = str(num)\n    num = num[::-1]\n    return int(num)\n\n\nif __name__ == \"__main__\":\n    print(rearrange_digits(123456789))\n    print(rearrange_digits(123456789123456))\n    print(rearrange_digits(123456789123456123456))",
    "def next_bigger_number(num):\n    if num == 0:\n        return 0\n    else:\n        num = num * 10 + 1\n        return next_bigger_number(num)\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(15))",
    "def next_bigger(n):\n    if n == 0:\n        return 0\n    else:\n        return n + next_bigger(n//10)\n\n\ndef main():\n    assert next_bigger(2) == 3\n    assert next_bigger(9) == 4\n    assert next_bigger(12) == 2\n    assert next_bigger(24) == 6\n    assert next_bigger(1) == 2\n    assert next_bigger(5) == 4\n    assert next_bigger(8) == 6\n    assert next_bigger(11) == 3\n    assert next_bigger(16) == 9\n\n\nif __name__ == \"__main__\":\n    main()",
    "def next_bigger(n):\n    return int(\"\".join(str(int(x)) for x in str(n)))\n\n\nprint(next_bigger(123))\nprint(next_bigger(12345))\nprint(next_bigger(123456789))",
    "def next_bigger(num):\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + next_bigger(num // 10)\n\n\nprint(next_bigger(1234))",
    "def next_bigger_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    while num > 9:\n        num = num // 10\n    return num * 10 + 1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger_number(5))\n    print(next_bigger_number(8))\n    print(next_bigger_number(12))",
    "def next_bigger_number(num):\n    if num > 9:\n        return num\n\n    num = str(num)\n\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] > '9':\n            num = num[:i] + '9' + num[i:]\n            break\n\n    return int(num)\n\n\nprint(next_bigger_number(1234567890))",
    "def next_bigger_number(n):\n    next_number = 0\n    while n > 0:\n        digit = n % 10\n        next_number = digit * 10 + next_number\n        n //= 10\n    return next_number\n\nprint(next_bigger_number(2))\nprint(next_bigger_number(3))\nprint(next_bigger_number(4))\nprint(next_bigger_number(5))\nprint(next_bigger_number(6))\nprint(next_bigger_number(7))\nprint(next_bigger_number(8))\nprint(next_bigger_number(9))\nprint(next_bigger_number(10))\nprint(next_bigger_number(11))\nprint(next_bigger_number(12))\nprint(next_bigger_number(13))\nprint(next_bigger_number(14))\nprint(next_bigger_number(15))\nprint(next_bigger_number(16))\nprint(next_bigger_number(17))\nprint(next_bigger_number(18))\nprint(next_bigger_number(19))\nprint(next_bigger_number(20))\nprint(next_bigger_number(21))\nprint(next_bigger_number(22))\nprint(next_bigger_number(23))\nprint(next_bigger_number(24))\nprint(next_bigger_number(25))\nprint(next_bigger_number(26))\nprint(next_bigger_number(27))\nprint(next_bigger_number(28))\nprint(next_bigger_number(29))\nprint(next_bigger_number(30))\nprint(next_bigger_number(31))\nprint(next_bigger_number(32))\nprint(next_bigger_number(33))\nprint(next_bigger_number(34))\nprint(next_bigger_number(35))\nprint(next_bigger_number(36))\nprint(next_bigger_number(37))\nprint(next_bigger_number(38))\nprint(next_bigger_",
    "def next_bigger_number(number: int) -> int:\n    number = str(number)\n    while len(number) > 1:\n        number = str(int(number[0]) + int(number[1]))\n    return int(number[0])",
    "def next_bigger_number(n):\n    return int(\"\".join(sorted(str(n))[::-1]))\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(12345) == 9081\n    assert next_bigger_number(123456789) == 9081\n    assert next_bigger_number(12) == 12\n    assert next_bigger_number(0) == 0\n    assert next_bigger_number(9) == 9\n    assert next_bigger_number(0) == 9"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}