{
  "problem": {
    "task_id": "MBPP/314",
    "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
    "test_list": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ],
    "challenge_test_list": [],
    "problem_id": 303
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_sum_adjacent_numbers(n):\n    return max(n**2 - n*(n+1), 0)\n\nprint(max_sum_adjacent_numbers(2))\nprint(max_sum_adjacent_numbers(3))\nprint(max_sum_adjacent_numbers(4))\nprint(max_sum_adjacent_numbers(5))",
    "def max_sum_2d(grid):\n    n = len(grid)\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1])\n            elif i == n-1 or j == n-1:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1] + grid[i+1][j])\n            else:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1] + grid[i+1][j+1])\n    return max_sum\n\n\ngrid = [[1, 2, 3], [4, 5, 6]]\nprint(max_sum_2d(grid))",
    "def max_sum_adjacent(arr):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if i > j:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i - 1][j])\n    return max_sum\n\n\nprint(max_sum_adjacent([[1, 2, 3], [4, 5, 6]]))",
    "class Solution(object):\n    def maxSum2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        n = len(grid)\n        if n < 2:\n            return 0\n        m = 0\n        for i in range(1, n):\n            for j in range(1, n):\n                if i == 1 and j == 1:\n                    m = max(m, grid[i][j] + grid[i][j])\n                elif i == 1:\n                    m = max(m, grid[i][j] + grid[i][j-1] + grid[i-1][j])\n                elif j == 1:\n                    m = max(m, grid[i][j] + grid[i-1][j-1] + grid[i-1][j])\n        return m\n\n\n\n\ns = Solution()\nprint s.maxSum2([[2,3,1],[4,5,6]])",
    "def max_sum_adjacent(arr):\n    n = len(arr)\n    max_sum = 0\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n\n    return max_sum\n\n\narr = [2, 4, 6, 8, 10, 12]\n\nprint(max_sum_adjacent(arr))",
    "def max_sum_adjacent(grid):\n    m = len(grid)\n    n = len(grid[0])\n    if m == 1:\n        return grid[0][0]\n    if n == 1:\n        return grid[0][0]\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    dp[0][1] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    dp[1][1] = grid[1][0]\n    for i in range(2, m):\n        for j in range(2, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[m-1][n-1]\n\n\nprint(max_sum_adjacent([[2, 2], [2, 2]]))",
    "def max_sum_2(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                max_sum = arr[i][j]\n            elif i == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j - 1])\n            elif j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i - 1][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i - 1][j - 1])\n\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum_2([[2, 4], [5, 6]]))",
    "def max_sum_rectangular_grid(n):\n    if n <= 2:\n        return 0\n    if n == 3:\n        return 1\n    max_sum = 0\n    for i in range(2, n):\n        for j in range(i):\n            max_sum = max(max_sum, n - i + j)\n    return max_sum\n\n\n\nprint(max_sum_rectangular_grid(5))\nprint(max_sum_rectangular_grid(6))\nprint(max_sum_rectangular_grid(7))\nprint(max_sum_rectangular_grid(8))\nprint(max_sum_rectangular_grid(9))",
    "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    dp = [0 for i in range(n)]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]) + arr[i]\n\n    return dp[n-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum([[1, 2, 3], [4, 5, 6]]) == 10\n    assert max_sum([[1, 2, 3], [4, 5, 6]]) == 10\n    assert max_sum([[1, 2, 3], [4, 5, 6]]) == 10",
    "def max_sum(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    m = 0\n    for i in range(1, len(arr)):\n        m = max(m, arr[i] + arr[i-1])\n    return m\n\n\nprint(max_sum([[1, 2, 3, 4], [2, 4, 6, 8], [3, 5, 7, 9], [4, 6, 8, 10]]))",
    "class Solution:\n    def max_sum(self, grid):\n        m = len(grid)\n        n = len(grid[0])\n        if m == 1:\n            return grid[0][0]\n        elif m == 2:\n            return grid[0][0] + grid[0][1]\n        elif m == 3:\n            return grid[0][0] + grid[0][1] + grid[0][2]\n        elif m == 4:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][0]\n        elif m == 5:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][1] + grid[1][2] + grid[2][0]\n        elif m == 6:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][1] + grid[1][2] + grid[2][1] + grid[2][2] + grid[3][0]\n        elif m == 7:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][1] + grid[1][2] + grid[2][1] + grid[2][2] + grid[3][1] + grid[3][2] + grid[4][0]\n        elif m == 8:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][1] + grid[1][2] + grid[2][1] + grid[2][2] + grid[3][1] + grid[3][2] + grid[4][0] + grid[4][1] + grid[4][2] + grid[5][0]\n        else:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][1] + grid[1][2] + grid[2][1] + grid[2][2] + grid[3][1] + grid[3][2] + grid[4][0",
    "def max_sum_of_2xn(n):\n    if n == 1:\n        return 1\n    return n * max_sum_of_2xn(n - 1)\n\n\nprint(max_sum_of_2xn(2))",
    "class Solution:\n    def max_sum_two_chosen_numbers(self, grid: List[List[int]]) -> int:\n        if len(grid) < 2:\n            return 0\n        for i in range(len(grid) - 1):\n            for j in range(len(grid[0]) - 1):\n                grid[i][j] += max(grid[i + 1][j], grid[i][j + 1])\n        return max(grid[-1])\n\n\nif __name__ == '__main__':\n    grid = [[1, 3, 5], [2, 4, 6]]\n    print(Solution().max_sum_two_chosen_numbers(grid))",
    "def max_sum_rectangular(n, arr):\n    # Fill this in.\n    res = 0\n    for i in range(1, len(arr)):\n        res = max(res, arr[i] + arr[i-1])\n    return res\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(max_sum_rectangular(n, arr))",
    "def max_sum(grid):\n    m = len(grid)\n    n = len(grid[0])\n    if m > n:\n        return max(grid)\n    elif m == n:\n        return grid[0][0] + grid[0][n - 1]\n    else:\n        return max(grid[0][0], grid[0][n - 1]) + max(grid[1][0], grid[1][n - 1])\n\n\nprint(max_sum([[1, 2], [3, 4]]))\nprint(max_sum([[2, 1, 1], [2, 1, 1]]))",
    "def max_sum_2x2(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_sum_2x2(arr[0:-1]), max_sum_2x2(arr[1:])) + arr[-1]\n\n\nif __name__ == '__main__':\n    print(max_sum_2x2([1,2,3,4,5,6,7,8,9]))",
    "def max_sum_rectangular_grid(n):\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = 0\n    dp[0][1] = 1\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + dp[0][i-2]\n        dp[1][i] = dp[1][i-1] + dp[1][i-2]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + dp[i][j-1]\n\n    return dp[n-1][n-1]\n\n\nprint(max_sum_rectangular_grid(2))",
    "def max_adjacent_sum(arr):\n    max_sum = 0\n    for i in range(1, len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == 1:\n                max_sum = max(max_sum, arr[i-1][j] + arr[i][j-1])\n    return max_sum\n\n\nif __name__ == '__main__':\n    arr = [[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n    print(max_adjacent_sum(arr))",
    "def max_sum_rectangular_grid(arr):\n    n = len(arr)\n    if n == 2:\n        return arr[0][0] + arr[1][1]\n    if n == 3:\n        return max(arr[0][0], arr[1][0], arr[2][0])\n    if n == 4:\n        return max(arr[0][0], arr[1][0], arr[2][0], arr[3][0])\n    if n == 5:\n        return max(arr[0][0], arr[1][0], arr[2][0], arr[3][0], arr[4][0])\n    if n == 6:\n        return max(arr[0][0], arr[1][0], arr[2][0], arr[3][0], arr[4][0], arr[5][0])\n    if n == 7:\n        return max(arr[0][0], arr[1][0], arr[2][0], arr[3][0], arr[4][0], arr[5][0], arr[6][0])\n\nprint(max_sum_rectangular_grid([[1, 2, 3], [4, 5, 6]]))",
    "def max_sum_two_chosen_numbers(n):\n    return max(n*(n-1), 2*(n-2))\n\n\ndef main():\n    print(max_sum_two_chosen_numbers(4))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_sum_2(arr):\n    max_sum = -float('inf')\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i > j:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\narr = [[1, 2], [3, 4]]\nprint(max_sum_2(arr))\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(max_sum_2(arr))",
    "def max_adjacent_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_adjacent_sum([[2, 3], [4, 5]]))",
    "class Solution(object):\n    def maxSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if grid == []:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0 for x in range(n)] for y in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = max(grid[i][0], grid[i-1][0])\n        for i in range(1, n):\n            dp[0][i] = max(grid[0][i], grid[0][i-1])\n\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return max(dp[-1])",
    "def max_sum_2d(arr):\n    # Write your code here\n    if len(arr) <= 1:\n        return 0\n    m = len(arr)\n    n = len(arr[0])\n    max_sum = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j] + arr[i + 1][j + 1] + arr[i][j + 1] + arr[i + 1][j])\n    return max_sum\n\n\narr = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(max_sum_2d(arr))",
    "def max_sum_adjacent(grid):\n    n = len(grid)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i > 0 and j > 0:\n                max_sum = max(max_sum, grid[i][j] + grid[i-1][j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n    assert max_sum_adjacent([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 40\n    assert max_sum_adjacent([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 60\n    assert max_sum_adjacent([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 80",
    "def max_sum_rectangular(arr):\n    n = len(arr)\n    arr.sort()\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            elif arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\nprint(max_sum_rectangular([2, 5, 6, 7, 8, 9, 10]))",
    "def max_sum_adjacent(n, arr):\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n*n)\n    \"\"\"\n    # fill in the array\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            arr[i][j] = max(arr[i][j], arr[i-1][j-1]+arr[i-1][j]+arr[i-1][j+1])\n    return arr[-1][-1]\n\n\nprint(max_sum_adjacent(2, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def max_adjacent_sum(matrix):\n    if len(matrix) < 2:\n        return matrix[0][0]\n    else:\n        return max(matrix[0][0] + matrix[1][0], matrix[0][1] + matrix[1][1])\n\n\nif __name__ == \"__main__\":\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))",
    "class Solution:\n    def maxSum2(self, grid):\n        n = len(grid)\n        max_sum = 0\n        for i in range(n):\n            for j in range(n):\n                if i == 0 or i == n-1 or j == 0 or j == n-1:\n                    max_sum += grid[i][j]\n                else:\n                    max_sum = max(max_sum, grid[i-1][j] + grid[i][j-1] + grid[i+1][j])\n        return max_sum\n\n    def maxSum(self, grid):\n        n = len(grid)\n        max_sum = 0\n        for i in range(n):\n            for j in range(n):\n                if i == 0 or i == n-1 or j == 0 or j == n-1:\n                    max_sum += grid[i][j]\n                else:\n                    max_sum = max(max_sum, grid[i-1][j] + grid[i][j-1] + grid[i+1][j])\n        return max_sum",
    "def max_sum_adjacent(arr, n):\n    arr.sort()\n    arr.reverse()\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            max_sum = max(max_sum, arr[i]+arr[j])\n    return max_sum",
    "class Solution:\n    def maxSum(self, grid):\n        return max(self.dfs(grid, 0, 0), self.dfs(grid, 0, 1))\n    \n    def dfs(self, grid, x, y):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n            return 0\n        if grid[x][y] == 2:\n            return grid[x][y]\n        else:\n            return max(grid[x][y], grid[x][y] + self.dfs(grid, x-1, y) + self.dfs(grid, x+1, y))",
    "def max_sum_adjacent_numbers(arr):\n    if len(arr) < 2:\n        return 0\n\n    arr.sort()\n    result = 0\n    for i in range(1, len(arr)):\n        result += max(arr[i - 1], arr[i])\n\n    return result\n\n\nprint(max_sum_adjacent_numbers([-2, -3, 5, -2, -1, 2, -4]))",
    "def max_sum_2d(arr, n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return max(arr)\n    return max(max_sum_2d(arr, n-1), max_sum_2d(arr, n-2)) + max(arr[0][0], arr[0][1])\n\ndef main():\n    arr = [\n        [1, 2],\n        [3, 4]\n    ]\n    n = len(arr)\n    print(max_sum_2d(arr, n))\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum_adjacent_numbers(arr):\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left, right = 0, len(arr) - 1\n    max_sum = 0\n\n    while left < right:\n        max_sum = max(max_sum, arr[left] + arr[right])\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_sum",
    "def max_sum(arr):\n    n = len(arr)\n    if n == 2:\n        return arr[0][0] + arr[1][1]\n    elif n == 1:\n        return arr[0][0]\n\n    max_sum = -sys.maxsize\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if i == 0 and j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j])\n            elif i == 0 and j == n - 1:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j + 1])\n            elif i == 0 and j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j + 1] + arr[i + 1][j])\n            elif i == n - 1 and j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j + 1] + arr[i + 1][j + 1] + arr[i + 1][j + 1])\n            elif i == n - 1 and j == n - 1:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j + 1] + arr[i + 1][j + 1] + arr[i + 1][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i + 1][j] + arr[i + 1][j + 1] + arr[i + 1][j + 1] + arr[i + 1][j + 2])\n\n    return max_sum\n\n\narr = [\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]\n]\n\nprint(max_sum(arr))",
    "class Solution:\n    def maxSum2(self, grid):\n        n = len(grid)\n        for i in range(1,n):\n            for j in range(1,n):\n                grid[i][j] = max(grid[i-1][j],grid[i][j-1]) + grid[i][j]\n        return max(grid[n-1][n-1],grid[n-1][n])",
    "def max_sum_rectangular_grid(n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                max_sum = max(max_sum, i + j)\n            else:\n                max_sum = max(max_sum, i + j + i)\n    return max_sum\n\n\ndef main():\n    print(\"Maximum sum for rectangular grid is: \" + str(max_sum_rectangular_grid(2)))\n    print(\"Maximum sum for rectangular grid is: \" + str(max_sum_rectangular_grid(3)))\n    print(\"Maximum sum for rectangular grid is: \" + str(max_sum_rectangular_grid(4)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum_2d(grid):\n    if len(grid) == 2:\n        return max(grid[0][0]+grid[1][1], grid[0][1]+grid[1][0])\n    else:\n        return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[1][0]+grid[1][1])\n\n\ndef max_sum_2d(grid):\n    # check if the grid is 2d\n    if len(grid) == 2:\n        return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1])\n    else:\n        # check if the grid is 3d\n        if len(grid[0]) == 2:\n            return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[0][2]+grid[1][2])\n        else:\n            return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[0][2]+grid[1][2], grid[1][0]+grid[1][1], grid[1][2]+grid[1][2])\n\n\ndef max_sum_3d(grid):\n    if len(grid) == 2:\n        return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[0][2]+grid[1][2])\n    else:\n        if len(grid[0]) == 2:\n            return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[0][2]+grid[1][2], grid[1][0]+grid[1][1], grid[1][2]+grid[1][2])\n        else:\n            return max(grid[0][0]+grid[1][0], grid[0][1]+grid[1][1], grid[0][2]+grid[1][2], grid[1][0]+grid[1][1], grid[1][2]+grid[1][2])",
    "def max_sum(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    return max(arr[0], arr[1]) + max_sum(arr[2:])\n\ndef test_max_sum():\n    assert max_sum([[1,2,3],[4,5,6],[7,8,9]]) == 12\n    assert max_sum([[1,2,3],[4,5,6],[7,8,9]]) == 18\n    assert max_sum([[1,2,3],[4,5,6],[7,8,9]]) == 21\n    assert max_sum([[1,2,3],[4,5,6]]) == 28\n    assert max_sum([[1,2,3],[4,5,6]]) == 36\n    assert max_sum([[1,2,3],[4,5,6]]) == 42",
    "def max_sum_adjacent_numbers(n, arr):\n    m = 1\n    for i in range(1, n):\n        m = max(m, arr[i-1] + arr[i])\n    return m\n\nif __name__ == \"__main__\":\n    print(max_sum_adjacent_numbers(4, [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]))",
    "def max_sum_adjacent(arr):\n    n = len(arr)\n    if n <= 2:\n        return 0\n    if arr[0][0] + arr[1][1] + arr[0][1] + arr[1][0] < arr[0][1] + arr[1][0] + arr[0][0] + arr[1][1]:\n        return arr[0][0] + arr[1][1] + arr[0][1] + arr[1][0]\n    if arr[0][1] + arr[1][0] + arr[0][0] + arr[1][1] < arr[0][1] + arr[1][0] + arr[0][0] + arr[1][1]:\n        return arr[0][1] + arr[1][0] + arr[0][0] + arr[1][1]\n    if arr[0][1] + arr[1][1] + arr[0][0] + arr[1][0] + arr[1][1] < arr[0][1] + arr[1][1] + arr[0][0] + arr[1][0]:\n        return arr[0][1] + arr[1][1] + arr[0][0] + arr[1][0] + arr[1][0] + arr[0][1]\n    return arr[0][0] + arr[1][1] + arr[0][1] + arr[1][0] + arr[0][1] + arr[1][1]\n\n\ndef max_sum_adjacent_2(arr):\n    n = len(arr)\n    if n <= 2:\n        return 0\n    if arr[0][0] + arr[1][1] + arr[0][1] + arr[1][0] < arr[0][1] + arr[1][0] + arr[1][1] + arr[0][0] + arr[1][0]:\n        return arr[0][0] + arr[1][1] + arr[0][1] + arr[1][0]\n    if arr[0][1] + arr[1][0] + arr[0][0",
    "def max_sum(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(grid)\n    # initialize the maximum sum\n    max_sum = 0\n    # iterate through the grid\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                max_sum = grid[i][j]\n            else:\n                max_sum = max(max_sum, grid[i][j] + grid[i-1][j])\n    return max_sum\n\n\ndef max_sum_2(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(grid)\n    max_sum = 0\n    # initialize the maximum sum\n    max_sum = max(max_sum, grid[0][0] + grid[1][1])\n    for i in range(1, n):\n        max_sum = max(max_sum, grid[i][0] + grid[i-1][1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2], [3, 4]]))",
    "def max_sum_2(arr):\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n\n    max_sum = arr[0][0] + arr[0][1]\n    for i in range(1, n-1):\n        for j in range(0, i):\n            max_sum = max(max_sum, arr[i][j] + arr[i+1][j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_2([[1, 2], [3, 4]]))\n    print(max_sum_2([[2, 3], [1, 4]]))",
    "def max_sum_2x2(grid):\n    if not grid or not grid[0]:\n        return 0\n    n = len(grid)\n    max_sum = grid[0][0] + grid[0][1]\n    for i in range(1, n):\n        for j in range(1, n):\n            max_sum = max(max_sum, grid[i][j] + grid[i][j-1] + grid[i-1][j])\n    return max_sum\n\ndef max_sum_3x3(grid):\n    if not grid or not grid[0]:\n        return 0\n    n = len(grid)\n    max_sum = grid[0][0] + grid[0][1] + grid[0][2]\n    for i in range(1, n):\n        for j in range(1, n):\n            max_sum = max(max_sum, grid[i][j] + grid[i-1][j-1] + grid[i-1][j] + grid[i-1][j+1] + grid[i][j+1] + grid[i+1][j-1] + grid[i+1][j] + grid[i+1][j+1] + grid[i+2][j])\n    return max_sum\n\ndef max_sum_4x4(grid):\n    if not grid or not grid[0]:\n        return 0\n    n = len(grid)\n    max_sum = grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3]\n    for i in range(1, n):\n        for j in range(1, n):\n            max_sum = max(max_sum, grid[i][j] + grid[i-1][j-1] + grid[i-1][j] + grid[i-1][j+1] + grid[i][j+1] + grid[i+1][j-1] + grid[i+1][j] + grid[i+1][j+1] + grid[i+2][j-1] + grid[i+2][j] + grid[i",
    "class Solution(object):\n    def max_sum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(grid) < 2:\n            return 0\n        if len(grid) == 2:\n            return grid[0][0] + grid[1][1]\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(2)]\n        dp[0][0] = grid[0][0]\n        dp[0][1] = grid[0][1]\n        for i in range(1, len(grid)):\n            dp[0][i] = max(dp[0][i-1], dp[0][i-2])\n            dp[1][i] = max(dp[1][i-1], dp[1][i-2])\n            dp[1][i-1] = max(dp[1][i-1], dp[1][i-2])\n            dp[1][i-2] = max(dp[1][i-1], dp[1][i-2])\n        return max(dp[0][0], dp[1][0])\n\ns = Solution()\nprint s.max_sum([[1,2,3],[4,5,6]])",
    "def max_sum_of_two_adjacent_numbers(grid):\n    if len(grid) < 2:\n        return 0\n\n    for i in range(1, len(grid)):\n        for j in range(i):\n            if grid[i][j] + grid[i][j-1] > grid[i-1][j]:\n                grid[i][j] += grid[i-1][j]\n\n    return grid[0][0]",
    "def max_sum_adjacent(n, grid):\n    # Write your code here\n    if n == 1:\n        return grid[0][0]\n\n    max_sum = grid[0][0]\n    for i in range(1, n):\n        max_sum = max(max_sum + grid[i][0], grid[i][0])\n    for j in range(1, n):\n        max_sum = max(max_sum + grid[0][j], grid[0][j])\n    for k in range(1, n):\n        max_sum = max(max_sum + grid[k][k], grid[k][k])\n    return max_sum\n\n\ndef main():\n    n = 4\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(max_sum_adjacent(n, grid))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum_adjacent(arr):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n-2):\n        for j in range(n-2):\n            if i == j:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j+1] + arr[i+1][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i+1][j] + arr[i][j+1] + arr[i+2][j])\n    return max_sum\n\n\narr = [[2, 3, 4], [5, 6, 7], [8, 9, 10]]\nprint(max_sum_adjacent(arr))",
    "def max_sum_adjacent_numbers(arr):\n    max_sum = 0\n    for i in range(len(arr)-2):\n        for j in range(len(arr[0])):\n            if arr[i][j] == 1:\n                max_sum = max(max_sum, arr[i+1][j]+arr[i][j+1])\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum_adjacent_numbers([[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]))",
    "def max_sum(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(grid) == 1:\n        return grid[0][0]\n    if len(grid) == 2:\n        return max(grid[0][0] + grid[1][0], grid[0][1] + grid[1][1])\n    if len(grid) == 3:\n        return max(grid[0][0] + grid[1][0] + grid[2][0], grid[0][1] + grid[1][1] + grid[2][1], grid[0][2] + grid[1][2])\n    if len(grid) == 4:\n        return max(grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0], grid[0][1] + grid[1][1] + grid[2][1] + grid[3][1] + grid[4][0], grid[0][2] + grid[1][2] + grid[2][2] + grid[3][2] + grid[4][2], grid[0][3] + grid[1][3] + grid[2][3] + grid[3][3] + grid[4][3])\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2], [3, 4]]))",
    "def max_sum(grid):\n    # Write your code here\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            max_sum = max(max_sum, grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 1][j + 2] + grid[i + 2][j + 1] + grid[i + 2][j + 2])\n    return max_sum\n\nprint(max_sum([[2, 2], [2, 3]]))",
    "def max_sum(arr):\n    n = len(arr)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n\nif __name__ == \"__main__\":\n    arr = [[1,2,3],\n           [4,5,6],\n           [7,8,9]]\n    print(max_sum(arr))",
    "class Solution:\n    def maxSum(self, grid: List[List[int]]) -> int:\n        if len(grid) == 0 or len(grid[0]) == 0:\n            return 0\n        max_sum = 0\n        for row in grid:\n            for num in row:\n                max_sum = max(num, max_sum + num)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\n    print(s.maxSum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))",
    "def max_sum_rectangular(n):\n    result = 0\n\n    for i in range(1, n):\n        for j in range(1, n):\n            result = max(result, i + j)\n\n    return result\n\n\nprint(max_sum_rectangular(6))",
    "class Solution:\n    def maxSum(self, grid):\n        n = len(grid)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(n):\n                if i == 0 or i == j:\n                    dp[i][j] = grid[i][j]\n                else:\n                    dp[i][j] = max(grid[i][j], grid[i-1][j] + grid[i+1][j])\n        return dp[n-1][n-1]",
    "def max_sum_rect(n, arr):\n    if not arr:\n        return 0\n    if not n:\n        return max(arr[0])\n    arr_sum = [0] * (n + 2)\n    arr_sum[0] = arr[0]\n    arr_sum[1] = max(arr[0], arr[1])\n    for i in range(2, n + 1):\n        arr_sum[i] = max(arr_sum[i - 1], arr_sum[i - 2]) + arr[i - 1]\n    return arr_sum[n]\n\n\nif __name__ == '__main__':\n    print(max_sum_rect(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "def max_adjacent_sum(n, arr):\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                arr[i][j] += arr[i+1][j]\n            elif i == n-1:\n                arr[i][j] += arr[i-1][j]\n            elif j == 0:\n                arr[i][j] += arr[i][j+1]\n            elif j == n-1:\n                arr[i][j] += arr[i][j-1]\n    return max(arr)\n\n\ndef max_adjacent_sum_2(n, arr):\n    return max(arr[0][0]+arr[0][n-1]+arr[n-1][0]+arr[n-1][n-1], arr[n-1][0]+arr[n-1][n-1]+arr[0][0]+arr[0][n-1])\n\n\nprint(max_adjacent_sum(2, [[2, 2], [2, 3]]))\nprint(max_adjacent_sum_2(2, [[2, 2], [2, 3]]))",
    "class Solution:\n    def maxSum2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(grid) == 0:\n            return 0\n\n        def helper(i, j):\n            if i == j:\n                return grid[i][j]\n\n            if i > j:\n                return max(grid[i][j], grid[i][j+1] + grid[i+1][j])\n\n            return max(grid[i][j], grid[i+1][j]+grid[i][j+1])\n\n        return max(helper(0, 0), helper(0, 1), helper(1, 0), helper(1, 1))",
    "def max_sum(grid):\n    max_sum = 0\n    for row in grid:\n        for col in row:\n            max_sum = max(max_sum, col + col)\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6]]))",
    "def max_sum_adjacent_numbers(grid):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_sum = 0\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                max_sum = max(max_sum, grid[row][col] + grid[row][col+1] + grid[row+1][col] + grid[row+1][col+1])\n\n    return max_sum\n\n\n\n\nif __name__ == \"__main__\":\n    print(max_sum_adjacent_numbers([[1, 2], [2, 3]]))\n    print(max_sum_adjacent_numbers([[1, 2, 1, 2], [2, 2, 3, 4]]))\n    print(max_sum_adjacent_numbers([[1, 2], [2, 3, 4, 4], [3, 4, 5, 5], [4, 5, 6, 6]]))\n    print(max_sum_adjacent_numbers([[1, 2, 2, 2], [3, 4, 5, 6], [4, 5, 6, 6]]))\n    print(max_sum_adjacent_numbers([[1, 1], [2, 2]]))",
    "class Solution:\n    def maxSum2(self, grid: List[List[int]]) -> int:\n        if not grid:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        n = len(grid)\n        # initialize the result\n        result = float(\"-inf\")\n        for i in range(n):\n            for j in range(n):\n                if i == 0:\n                    result = max(result, grid[i][j] + grid[i][j-1])\n                elif j == 0:\n                    result = max(result, grid[i][j] + grid[i-1][j])\n                else:\n                    result = max(result, grid[i][j] + grid[i-1][j-1] + grid[i][j-1])\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.maxSum2([[1, 1], [1, 1]]) == 2\n    assert s.maxSum2([[1, 2], [2, 3]]) == 3",
    "def max_sum(arr):\n    if len(arr) < 2:\n        return 0\n    elif len(arr) == 2:\n        return arr[0] + arr[1]\n    else:\n        max_sum = max(arr[0], arr[1])\n        for i in range(2, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    print(max_sum(arr))",
    "def max_sum_rectangular(grid):\n    max_sum = float('-inf')\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            max_sum = max(max_sum, grid[i][j] + grid[i][j+1] + grid[i+1][j] + grid[i+1][j+1])\n    return max_sum\n\n\nprint(max_sum_rectangular([[3, 4, 2], [6, 1, 8]]))",
    "class Solution:\n    # @param {integer[]} grid\n    # @return {integer}\n    def maxSum(self, grid):\n        n = len(grid)\n        if n == 2:\n            return grid[0][0] + grid[0][1]\n        else:\n            return max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])",
    "def max_sum(arr, n):\n    # Fill this in.\n    res = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == j:\n                res += arr[i][j]\n            elif i!= j:\n                res += max(arr[i][j], arr[i + 1][j])\n                res += max(arr[i + 1][j], arr[i][j + 1])\n\n    return res\n\n\nprint(max_sum([[1, 2], [3, 4]], 2))",
    "def max_sum_rect(arr, n):\n    # Write your code here\n    if n == 1:\n        return arr[0][0]\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i - 1][j] + arr[i][j - 1])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i - 1][j - 1] + arr[i][j + 1])\n    return max_sum\n\n\narr = [[1, 2, 3], [4, 5, 6]]\nn = 3\nprint(max_sum_rect(arr, n))",
    "def max_sum_adjacent(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])",
    "def max_adjacent_sum(n, arr):\n    if n == 2:\n        return arr[0][0] + arr[1][1]\n\n    arr.sort()\n    max_sum = 0\n\n    for i in range(len(arr) - 2):\n        if arr[i][0] + arr[i+1][1] < arr[i+2][0]:\n            max_sum = max(max_sum, arr[i][0] + arr[i+1][1])\n\n    return max_sum\n\nprint(max_adjacent_sum(5, [[1,2,3,4], [5,6,7,8], [9,10,11,12]]))",
    "def max_sum(grid):\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if i == 0:\n                max_sum = max(grid[i][j], grid[i][j] + grid[i][j])\n            elif j == 0:\n                max_sum = max(grid[i][j], max_sum)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2, 3, 4], [5, 6, 7, 8]]))",
    "def max_sum(arr, n):\n    arr.sort()\n    return arr[n-1] + arr[n-2]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    n = 4\n    print(max_sum(arr, n))",
    "def max_sum_rectangular_grid(n):\n    # write your code here\n    if n==2:\n        return n**2\n    elif n==3:\n        return n**2 - 2\n    else:\n        return max_sum_rectangular_grid(n-1) + max_sum_rectangular_grid(n-2) + max_sum_rectangular_grid(n-3)\n\nprint(max_sum_rectangular_grid(3))\nprint(max_sum_rectangular_grid(4))\nprint(max_sum_rectangular_grid(5))",
    "def max_sum(arr):\n    if not arr:\n        return 0\n    arr.sort()\n    return arr[-1] + max(max_sum(arr[1:]), max_sum(arr[:-1]))\n\nif __name__ == \"__main__\":\n    print(max_sum([1,2,3,4]))\n    print(max_sum([3,4,2,1]))",
    "def max_sum(n, arr):\n    max_sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            max_sum = max(max_sum, arr[i-2][j-2]+arr[i-2][j-1])\n    return max_sum\n\nprint(max_sum(4, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
    "def max_sum(arr):\n    if not arr:\n        return 0\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if j == 0 or i == 0:\n                max_sum += arr[i][j]\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i-1][j])\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6]]))",
    "def max_sum(arr):\n    # Write your code here\n    max_sum = 0\n    for i in range(len(arr)-2):\n        for j in range(len(arr[0])-2):\n            if arr[i][j] > max_sum:\n                max_sum = arr[i][j]\n    return max_sum\n\n\nif __name__ == '__main__':\n    arr = [[2, 2, 2],\n           [2, 2, 2],\n           [2, 2, 2]]\n    print(max_sum(arr))",
    "def max_sum_adjacent(grid):\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = grid[i][0] + dp[i-1][0]\n    for j in range(1, n):\n        dp[0][j] = grid[0][j] + dp[0][j-1]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if i > 0 and j > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            elif i > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j])\n            elif j > 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j])\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([[1, 1], [1, 1]]) == 2\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[1, 1, 1, 1], [1, 1, 1, 1]]) == 6\n    assert max_sum_adjacent([[",
    "def max_adjacent_sum(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return max(arr[0], arr[1])\n    if len(arr) == 2:\n        return max(arr[0], arr[1], arr[0] + arr[1])\n\n    # O(n^2) time | O(1) space\n    max_sum = 0\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j - 1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_adjacent_sum([[1, 2, 3], [4, 5, 6]]))",
    "def max_sum_rectangular(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if i == 0 and j == 0:\n                grid[i][j] += grid[i][j + 1]\n            elif i == 0 and j == len(grid[i]) - 1:\n                grid[i][j] += grid[i][j - 1]\n            elif i == len(grid) - 1 and j == 0:\n                grid[i][j] += grid[i][j + 1]\n            elif i == len(grid) - 1 and j == len(grid[i]) - 1:\n                grid[i][j] += grid[i][j - 1]\n    return max(grid)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_rectangular([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "class Solution(object):\n    def maxSumRectangularGrid(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m, n = len(grid), len(grid[0])\n        if m < 2 or n < 2:\n            return 0\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for i in range(1, n + 1):\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j])\n                else:\n                    dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m][n]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSumRectangularGrid([[1, 2], [3, 4]])\n    print s.maxSumRectangularGrid([[5, 1, 6], [2, 4, 8]])\n    print s.maxSumRectangularGrid([[1, 2, 3], [4, 5, 6]])\n    print s.maxSumRectangularGrid([[1, 2, 3], [4, 5, 6]])\n    print s.maxSumRectangularGrid([[1, 2, 3], [4, 5, 6]])\n    print s.maxSumRectangularGrid([[1, 2, 3], [4, 5, 6]])\n    print s.maxSumRectangularGrid([[1, 2, 3], [4, 5, 6]])\n    print s.maxSum",
    "def max_sum(arr):\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    arr.append(max(arr[0], arr[1]))\n    return max(arr[0], arr[1]) + max(arr[0] + arr[1], arr[0] + arr[1] + arr[0], arr[0] + arr[1] + arr[1])\n\n\nprint(max_sum([-1, 2, -3, -4]))\nprint(max_sum([0, 0, 0, 0]))\nprint(max_sum([1, 1, 1, 1]))\nprint(max_sum([-1, -1, -1, -1]))\nprint(max_sum([-1, -1, -1, -1, -1, -1]))",
    "def max_sum(arr, n):\n    # Your code here\n    if n == 2:\n        return arr[0][0] + arr[1][1]\n    elif n == 3:\n        return arr[0][0] + arr[1][1] + arr[2][2]\n    else:\n        return max(arr[0][0], arr[1][1], arr[2][2])\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6]], 3))\nprint(max_sum([[1, 2, 3], [4, 5, 6]], 2))\nprint(max_sum([[1, 2, 3], [4, 5, 6]], 1))\nprint(max_sum([[1, 2, 3], [4, 5, 6]], 0))",
    "class Solution:\n    def maxSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n\n        n = len(grid)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[0][i] = max(dp[0][i-1], grid[0][i])\n\n        for j in range(1, n):\n            dp[j][0] = max(dp[j-1], grid[j][0])\n\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n        return dp[n-1][n-1]",
    "class Solution:\n    def max_sum_two_chosen(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(grid) == 0:\n            return 0\n\n        max_sum = 0\n        for row in grid:\n            for i in range(len(row)):\n                for j in range(len(row)):\n                    if i == j:\n                        continue\n                    if i + 1 < len(row) and row[i] + row[i + 1] > max_sum:\n                        max_sum = row[i] + row[i + 1]\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 1], [1, 2]]\n    print(Solution().max_sum_two_chosen(grid))",
    "class Solution:\n    def max_sum_2x2(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        if n < 2:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i-1] + grid[0][i]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]",
    "class Solution:\n    def maxSum2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n        if len(grid) < 2:\n            return 0\n\n        max_sum = float('-inf')\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    continue\n                for k in range(len(grid)):\n                    if k == i or k == j:\n                        continue\n                    max_sum = max(max_sum, grid[i][j] + grid[k][j])\n\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSum2([[1, 1, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                     [0, 0, 0, 0, 0, 0, 0, 0, 0]]))",
    "def max_sum_adjacent(n, arr):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if arr[i][j] > max_sum:\n                    max_sum = arr[i][j]\n            else:\n                if arr[i][j] > max_sum:\n                    max_sum = arr[i][j]\n    return max_sum\n\n\nif __name__ == '__main__':\n    n = 5\n    arr = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(max_sum_adjacent(n, arr))",
    "class Solution(object):\n    def maxSum2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(grid) < 2:\n            return 0\n        n = len(grid)\n        dp = [[0 for x in range(n)] for x in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n\n        for i in range(1, n):\n            dp[i][i] = max(dp[i-1][i], dp[i-1][i-1]) + grid[i][i]\n\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n        return dp[n-1][n-1]\n\n\ngrid = [[0, 0], [0, 0]]\nprint(Solution().maxSum2(grid))",
    "def max_sum_2xn(arr):\n    if arr is None or len(arr) == 0:\n        return 0\n    else:\n        arr.sort()\n        return max(arr[0] + arr[1], arr[0] + arr[1] + arr[2])",
    "class Solution(object):\n    def maximumSum2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(grid) == 1:\n            return grid[0][0]\n        m = len(grid)\n        n = len(grid[0])\n\n        dp = [[0 for _ in range(n+1)] for _ in range(2)]\n\n        dp[0][0] = grid[0][0]\n\n        for i in range(m):\n            for j in range(n):\n                if i > 0 and j > 0:\n                    dp[0][j] = max(dp[0][j-1], grid[i-1][j])\n                if i > 0:\n                    dp[0][j] = max(dp[0][j], grid[i-1][j])\n                if j > 0:\n                    dp[0][j] = max(dp[0][j], grid[i][j-1])\n                if i < m-1 and j > 0:\n                    dp[1][j] = max(dp[1][j-1], grid[i+1][j])\n                if j < n-1:\n                    dp[1][j] = max(dp[1][j], grid[i][j+1])\n        return dp[m-1][n-1]",
    "def max_sum(grid):\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j + 1])\n            else:\n                max_sum = max(max_sum, grid[i][j] + grid[i - 1][j])\n    return max_sum\n\n\ngrid = [[1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]]\n\nprint(max_sum(grid))",
    "def max_adjacent_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    if n == 2:\n        return max(arr[0] + arr[1], arr[1])\n    max_sum = 0\n    for i in range(1, n-1):\n        max_sum = max(max_sum, arr[i] + arr[i-1])\n    return max_sum\n\n\nprint(max_adjacent_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "def max_sum_2x(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_sum = arr[0]\n    for i in range(len(arr)-1):\n        max_sum = max(max_sum, arr[i]*arr[i+1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_2x([1, 2, 3, 4, 5]))",
    "class Solution:\n    def maxSum(self, grid: List[List[int]]) -> int:\n        if len(grid) == 2:\n            return max(grid[0][0]+grid[1][1], grid[1][1]+grid[0][0])\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 0:\n            return 0\n        max_sum = 0\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                max_sum = max(max_sum, grid[i][j]+grid[i-1][j-1])\n        return max_sum\n\n\ngrid = [[1, 3, 4], [2, 5, 6], [7, 8, 9]]\ns = Solution()\nprint(s.maxSum(grid))",
    "def max_sum(n):\n    # write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n\n    return 0\n\n\nprint(max_sum(2))",
    "class Solution:\n    def maxSumRectangular(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        dp[0][1] = grid[0][1]\n        for i in range(1, m):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1]) + grid[i][0]\n            dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + grid[i][1]\n        for j in range(1, n):\n            dp[0][j] = max(dp[0][j-1], dp[0][j-1]) + grid[0][j]\n            dp[1][j] = max(dp[1][j-1], dp[1][j-1]) + grid[1][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j]) + grid[i][j]\n        return dp[m-1][n-1]",
    "def max_sum(arr):\n    if arr == None:\n        return None\n    if arr[0] == None:\n        return arr[0]\n    if arr[1] == None:\n        return arr[1]\n    return max(arr[0], arr[1]) + max(max_sum(arr[0:2]), max_sum(arr[1:3]))\n\n\nprint(max_sum([[1, 2, 3, 4], [5, 6, 7, 8]]))\nprint(max_sum([[1, 2], [3, 4]]))\nprint(max_sum([[1, 2, 3], [4, 5, 6]]))\nprint(max_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
    "class Solution(object):\n    def max_sum_2(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if grid == []:\n            return 0\n        n = len(grid)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = grid[i][j]\n                if i > 0 and j > 0:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return max(dp[-1])",
    "def max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    arr_max = max(arr)\n    arr_min = min(arr)\n    return max(arr_max + arr_min, max_sum(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(max_sum(arr))",
    "def max_sum_2d(arr):\n    if len(arr) <= 2:\n        return max(arr)\n\n    max_sum = 0\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            if i == j:\n                continue\n            max_sum = max(max_sum, arr[i][j] + max_sum)\n\n    return max_sum\n\n\ndef max_sum_3d(arr):\n    if len(arr) <= 2:\n        return max(arr)\n\n    max_sum = 0\n    for i in range(len(arr[0])):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            max_sum = max(max_sum, arr[i][j] + arr[i][j] + arr[i][j])\n\n    return max_sum\n\n\ndef max_sum_4d(arr):\n    if len(arr) <= 2:\n        return max(arr)\n\n    max_sum = 0\n    for i in range(len(arr[0])):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            max_sum = max(max_sum, arr[i][j] + arr[i][j] + arr[i][j] + arr[i][j])\n\n    return max_sum\n\n\ndef main():\n    arr = [\n        [1, 2, 3, 4, 5],\n        [1, 3, 5, 7, 9],\n        [7, 9, 3, 2, 1],\n        [4, 5, 2, 3, 1],\n        [6, 4, 9, 3, 1]\n    ]\n\n    print(max_sum_2d(arr))\n    print(max_sum_3d(arr))\n    print(max_sum_4d(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_sum_2x2(arr):\n    if not arr:\n        return 0\n    res = 0\n    i = 0\n    j = len(arr) - 1\n    while i < len(arr) and j >= 0:\n        if arr[i][j] == 1:\n            res += arr[i][j]\n            i += 1\n            j -= 1\n        elif arr[i][j] == 2:\n            i += 1\n        elif arr[i][j] == 3:\n            j -= 1\n    return res\n\nprint(max_sum_2x2([[1, 2, 3, 4, 5, 6, 7, 8],\n                    [2, 4, 5, 7, 8, 9, 10, 11],\n                    [3, 6, 7, 9, 10, 11, 12, 13]]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}