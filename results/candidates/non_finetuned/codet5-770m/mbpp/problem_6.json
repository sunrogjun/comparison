{
  "problem": {
    "task_id": "MBPP/17",
    "prompt": "Write a function to find the perimeter of a square.",
    "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
    "test_list": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ],
    "challenge_test_list": [],
    "problem_id": 6
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def perimeter(r):\n    return r**2\n\nprint(perimeter(5))\nprint(perimeter(4))\nprint(perimeter(3))\nprint(perimeter(2))\nprint(perimeter(1))",
    "def perimeter(r):\n\tperim = 2*r\n\treturn perim",
    "def perimeter(r):\n    return 2*r\n\nprint(perimeter(5))",
    "def perimeter(n):\n    return 2 * n\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return 2*r\n\nprint(perimeter(4))\nprint(perimeter(5))\nprint(perimeter(6))\nprint(perimeter(7))\nprint(perimeter(8))\nprint(perimeter(9))\nprint(perimeter(10))",
    "def perimeter(n):\n    return n * 2\n\nprint(perimeter(6))\nprint(perimeter(4))\nprint(perimeter(2))",
    "def perimeter(r):\n    return 2 * r * r\n\nprint(perimeter(4))",
    "def perimeter(length):\n    return 2 * length",
    "def perimeter(length):\n    perimeter = 2 * length\n    return perimeter",
    "def perimeter(r):\n    return 2 * r",
    "def perimeter(r):\n    return (2 * r) + (2 * r)\n\nprint(perimeter(4))\nprint(perimeter(5))\nprint(perimeter(10))",
    "def perimeter(width, height):\n    return 2 * width + 2 * height",
    "def perimeter(r):\n    return 2 * r\n\nprint(perimeter(4))",
    "def perimeter(r):\n    return (r**2)",
    "def perimeter(r):\n    return 2 * r\n\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return 2 * r\n\n\nprint(perimeter(6))",
    "def perimeter(n):\n    return n * n\n\nprint(perimeter(4))",
    "def perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (2 * n)\n\n\nif __name__ == \"__main__\":\n    print(perimeter(5))\n    print(perimeter(4))\n    print(perimeter(3))\n    print(perimeter(2))",
    "def perimeter(a):\n    return 2 * a\n\nprint(perimeter(5))\nprint(perimeter(4))\nprint(perimeter(3))",
    "def perimeter(square):\n    return (square * square) - 2 * square\n\n\nprint(perimeter(4))",
    "def perimeter(r):\n    return 2 * r * r",
    "def perimeter(radius):\n    return 2 * radius + 1\n\n\nif __name__ == '__main__':\n    assert perimeter(2) == 4\n    assert perimeter(3) == 6\n    assert perimeter(4) == 9\n    assert perimeter(5) == 12",
    "def perimeter(n):\n    return n * (n + 1) / 2\n\nprint(perimeter(5))\nprint(perimeter(7))",
    "def perimeter(a):\n    return (a*2)*(a+1)\n\n\nprint(perimeter(8))",
    "def perimeter(n):\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to 0\")\n\n    if n == 0:\n        return 0\n\n    return 2 * (n + 1)\n\n\nif __name__ == \"__main__\":\n    print(perimeter(4))\n    print(perimeter(5))\n    print(perimeter(6))\n    print(perimeter(7))\n    print(perimeter(8))\n    print(perimeter(9))\n    print(perimeter(10))\n    print(perimeter(11))",
    "def perimeter(r):\n    return 2 * r",
    "def perimeter(x):\n    return x * x\n\n\nprint(perimeter(4))\nprint(perimeter(5))\nprint(perimeter(7))",
    "def perimeter(side):\n    return side * 2\n\nprint(perimeter(5))",
    "def perimeter(x):\n    return 2 * x\n\nprint(perimeter(10))",
    "def perimeter(n):\n    return n * n\n\nif __name__ == '__main__':\n    print(perimeter(5))",
    "def perimeter(a):\n    return a**2",
    "def perimeter(n):\n    return n * n\n\nprint(perimeter(6))",
    "def perimeter(r):\n    return 2 * r\n\nprint(perimeter(4))",
    "def perimeter(a):\n    perim = 2 * (a + a)\n    return perim\n\nprint(perimeter(5))",
    "def perimeter(n):\n    return n*(n+1)//2\n\nprint(perimeter(4))\nprint(perimeter(8))\nprint(perimeter(16))",
    "def perimeter(r):\n    return 2 * r * r\n\nprint(perimeter(4))\nprint(perimeter(6))\nprint(perimeter(8))",
    "def perimeter(r):\n    return 2*r\n\nprint(perimeter(3))\nprint(perimeter(5))\nprint(perimeter(7))\nprint(perimeter(9))\nprint(perimeter(11))\nprint(perimeter(13))\nprint(perimeter(15))\nprint(perimeter(17))\nprint(perimeter(19))\nprint(perimeter(21))\nprint(perimeter(23))\nprint(perimeter(25))\nprint(perimeter(29))\nprint(perimeter(31))\nprint(perimeter(37))\nprint(perimeter(41))",
    "def perimeter(size):\n    return 2 * size\n\n\ndef main():\n    print(perimeter(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def perimeter(n):\n    if n == 0:\n        return 0\n    return 2 * n + 1\n\n\nprint(perimeter(3))",
    "def perimeter(side):\n    return 2*side\n\nprint(perimeter(5))\nprint(perimeter(7))\nprint(perimeter(10))\nprint(perimeter(15))",
    "def perimeter(a):\n    return 2*a\n\nprint(perimeter(4))",
    "def perimeter(length):\n    return 2 * length + 1\n\nprint(perimeter(10))\nprint(perimeter(20))\nprint(perimeter(30))\nprint(perimeter(40))\nprint(perimeter(50))\nprint(perimeter(60))\nprint(perimeter(70))\nprint(perimeter(80))\nprint(perimeter(90))\nprint(perimeter(100))",
    "def perimeter(side):\n    perimeter = side * side\n    return perimeter\n\n\nprint(perimeter(4))",
    "def perimeter(a):\n    return a * 2\n\nprint(perimeter(4))",
    "def perimeter(r):\n    return 2 * r\n\n\nprint(perimeter(2))\nprint(perimeter(4))\nprint(perimeter(6))\nprint(perimeter(8))",
    "def perimeter(n):\n    return 2 * n + 1\n\n\nprint(perimeter(10))",
    "def perimeter(n):\n    perim = n * n\n    return perim\n\n\nprint(perimeter(10))",
    "def perimeter(x):\n    perimeter = 2 * (x + x)\n    return perimeter",
    "def perimeter(n):\n    return n * 2\n\n\nprint(perimeter(4))",
    "def square_perimeter(n):\n    return 2 * (n + 1)\n\n\nprint(square_perimeter(5))",
    "def perimeter(length):\n    perimeter = 2*length\n    return perimeter\n\nprint(perimeter(6))",
    "def perimeter(n):\n    return (2 * n) + (2 * n - 1)\n\n\nprint(perimeter(2))\nprint(perimeter(4))\nprint(perimeter(8))\nprint(perimeter(16))\nprint(perimeter(32))\nprint(perimeter(64))",
    "def perimeter(side_length):\n    return side_length * 2\n\n\nprint(perimeter(4))",
    "def perimeter(a):\n    return a * a\n\nprint(perimeter(4))",
    "def perimeter(r):\n    return 2 * (r + r)\n\nprint(perimeter(4))\nprint(perimeter(5))",
    "def perimeter(r):\n    return 2*r + 1\n\nif __name__ == '__main__':\n    print(perimeter(5))\n    print(perimeter(10))",
    "def perimeter(x):\n    return x*x\n\nif __name__ == '__main__':\n    print(perimeter(4))",
    "def perimeter(r):\n    perimeter = 2 * r\n    return perimeter\n\n\nprint(perimeter(4))",
    "def perimeter(radius):\n    return 2 * radius * radius\n\n\nprint(perimeter(10))",
    "def perimeter(side):\n    return side * side\n\nprint(perimeter(5))\nprint(perimeter(4))\nprint(perimeter(3))\nprint(perimeter(2))\nprint(perimeter(1))",
    "def perimeter(a):\n    return a * 2\n\n\nif __name__ == \"__main__\":\n    print(perimeter(4))",
    "def perimeter(radius):\n    return (2 * radius) + 1\n\nif __name__ == '__main__':\n    print(perimeter(3))\n    print(perimeter(5))\n    print(perimeter(10))\n    print(perimeter(20))\n    print(perimeter(30))\n    print(perimeter(40))",
    "def perimeter(a):\n    return a * (a + 1) / 2\n\n\nprint(perimeter(4))",
    "def perimeter(r):\n    return 2 * r + 1",
    "def perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return (2 * side) - side\n\n\nprint(perimeter(5))",
    "def perimeter(side):\n\treturn 2 * side\n\nif __name__ == \"__main__\":\n\tside = int(input(\"Enter the side of the square: \"))\n\tprint(\"The perimeter of the square is: \" + str(perimeter(side)))",
    "def perimeter(length):\n    perimeter = 2*length\n    return perimeter\n\nprint(perimeter(5))",
    "def perimeter(n):\n    return (n ** 2)\n\nprint(perimeter(4))",
    "def perimeter(a):\n    return a**2\n\nprint(perimeter(2))",
    "def perimeter(x, y):\n    return x*y",
    "def perimeter(a):\n    return (a * 2)\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return 2*r\n\nprint(perimeter(4))",
    "def perimeter(radius):\n    return (2 * radius) + 1\n\nprint(perimeter(5))",
    "def perimeter(x):\n    return 2*x+2\n\nprint(perimeter(10))",
    "def perimeter(n):\n    return 2 * (n + 1)\n\n\ndef main():\n    print(perimeter(1))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def perimeter(r):\n    return 2 * r\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return (r*r)\n\nprint(perimeter(5))",
    "def perimeter(x):\n    return x * 2\n\n\nprint(perimeter(4))",
    "def perimeter(n):\n    return n*n\n\nprint(perimeter(10))\nprint(perimeter(20))\nprint(perimeter(40))\nprint(perimeter(50))\nprint(perimeter(60))\nprint(perimeter(70))\nprint(perimeter(80))\nprint(perimeter(90))\nprint(perimeter(100))\nprint(perimeter(120))\nprint(perimeter(160))\nprint(perimeter(200))\nprint(perimeter(220))",
    "def perimeter(a):\n    perimeter = a * a\n    return perimeter\n\nprint(perimeter(5))",
    "def perimeter(a):\n    return 2 * (a + a)",
    "def perimeter(square_size):\n    perimeter = 2 * (square_size + 1)\n    return perimeter\n\n\nprint(perimeter(5))",
    "def perimeter(n):\n    if n == 1:\n        return 0\n    else:\n        return 2*n - 2\n\nprint(perimeter(3))",
    "def perimeter(n):\n    return (n * 2)\n\n\nprint(perimeter(3))",
    "def perimeter(r):\n    return 2*r\n\nprint(perimeter(4))",
    "def perimeter(n):\n    return (n * (n + 1)) // 2\n\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return 2 * r\n\n\nprint(perimeter(5))",
    "def perimeter(length):\n    return 2 * length\n\nprint(perimeter(5))",
    "def perimeter(n):\n  return 2 * n\n\n\nprint(perimeter(5))",
    "def perimeter(a):\n    return 2 * (a + a)\n\n\ndef main():\n    print(perimeter(2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def perimeter(r):\n    return 2 * (r + 1)",
    "def perimeter(n):\n    return (2 * n) + 1\n\n\ndef test_perimeter():\n    assert perimeter(5) == 8\n    assert perimeter(10) == 23",
    "def perimeter(a):\n    return 2*a\n\nprint(perimeter(1))\nprint(perimeter(4))\nprint(perimeter(8))\nprint(perimeter(16))\nprint(perimeter(32))",
    "def perimeter(n):\n    return n * (n + 1) / 2\n\nprint(perimeter(3))\nprint(perimeter(5))\nprint(perimeter(7))",
    "def perimeter(r):\n    return 2 * r\n\n\nprint(perimeter(5))",
    "def perimeter(n):\n    return n*2\n\nprint(perimeter(4))",
    "def perimeter(n):\n    return n * 2\n\nprint(perimeter(10))",
    "def perimeter(r):\n    return 2 * r * r\n\nprint(perimeter(4))",
    "def perimeter(side):\n    perimeter = 2 * side\n    return perimeter\n\nprint(perimeter(5))",
    "def perimeter(r):\n    return r * r"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}