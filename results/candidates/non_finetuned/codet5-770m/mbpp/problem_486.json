{
  "problem": {
    "task_id": "MBPP/497",
    "prompt": "Write a function to find the surface area of a cone.",
    "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
    "test_list": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ],
    "challenge_test_list": [],
    "problem_id": 486
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def surface_area(radius):\n    area = 3.14159*radius*radius\n    return area\n\nradius = float(input(\"Enter the radius of the cone: \"))\n\narea = surface_area(radius)\nprint(\"The area of the cone is: \", area)",
    "def surfaceAreaCone(a, b, c):\n    area = (a * b) + (c * c)\n    return area\n\n\nprint(surfaceAreaCone(2, 3, 4))",
    "import math\n\ndef cone_area(r, h):\n    return r * h\n\n\nr = float(input(\"r: \"))\nh = float(input(\"h: \"))\n\nprint(cone_area(r, h))",
    "def surface_area(radius, area_per_side):\n    return area_per_side * (radius ** 2)\n\nprint(surface_area(5, 3))",
    "def area_cone(length, width):\n    area = length * width\n    return area\n\n\nprint(area_cone(2, 2))",
    "def cone_area(a, b, c):\n    return a * b * c\n\nprint(cone_area(1, 2, 3))\nprint(cone_area(2, 4, 6))\nprint(cone_area(2, 4, 4))\nprint(cone_area(2, 4, 1))",
    "def cone_area(height, width):\n    return height * width\n\nprint(cone_area(2, 3))\nprint(cone_area(2, 2))\nprint(cone_area(2, 1))",
    "def cone_area(radius):\n    cone_area = 4*3.14159*radius**2\n    return cone_area\n\n\nprint(cone_area(5))",
    "def cone_area(r, h):\n    return r * h\n\n\nprint(cone_area(3, 4))",
    "def cone_area(r):\n    return (4/3)*r**3\n\nprint(cone_area(4))",
    "def surface_area(r, h):\n    return 2*r*h\n\nprint(surface_area(1, 2))",
    "def cone_area(r,h):\n    area = r * h\n    return area\n\nprint(cone_area(1,2))",
    "def area(r,h):\n    area = r * h\n    return area\n\n\nprint(area(2,3))",
    "def cone_area(r,h):\n    return 3.14*r*h\n\nprint(cone_area(4,6))\nprint(cone_area(3,4))\nprint(cone_area(2,3))",
    "def cone_area(r, h):\n    a = (r ** 2 + h ** 2) ** 0.5\n    return a\n\n\nprint(cone_area(1.5, 1.5))",
    "def cone_area(r, h):\n    return (4/3)*(r*r + h*h)\n\n\nprint(cone_area(2, 2))\nprint(cone_area(3, 2))\nprint(cone_area(5, 2))\nprint(cone_area(7, 2))",
    "def cone(r, h):\n    # Your code here\n    return r * h\n\nprint(cone(3, 4))",
    "def surfaceArea(r,h):\n    area = (r * h)\n    return area\n\nr = float(input(\"radius: \"))\nh = float(input(\"height: \"))\n\nprint(\"surface area: \", surfaceArea(r,h))",
    "def cone_area(r, theta):\n    return r * r * theta * theta\n\nprint(cone_area(1, 1))",
    "def cone_area(radius):\n    return 3.14159 * radius * radius\n\nprint(cone_area(3))\nprint(cone_area(5))\nprint(cone_area(7))\nprint(cone_area(10))",
    "def cone_area(r, h):\n    return r * h\n\ndef main():\n    print(cone_area(1, 1))\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\ndef surface_area(r):\n    return (3.14 * r**2) * sqrt(3)\n\nprint(surface_area(1))",
    "def cone_area(r, h):\n    return r * h\n\n\nprint(cone_area(1, 1))\nprint(cone_area(2, 1))",
    "def surface_area(r, h):\n    return r*h\n\nprint(surface_area(5, 3))",
    "def cone_area(r,h):\n    area=r*h\n    return area\n\nprint(cone_area(20,10))\nprint(cone_area(20,10))",
    "def cone_area(a, b, c):\n    return (a * b * c) / 2\n\n\nprint(cone_area(1, 2, 3))",
    "def cone_area(radius):\n    return 3.14 * (radius**2)\n\n\nif __name__ == '__main__':\n    print(cone_area(3))",
    "def cone_area(r,h):\n\tarea = r * h\n\treturn area\n\nprint(cone_area(3,4))",
    "import math\n\n\ndef surface_area(radius):\n    return 4.0 * math.pi * radius**2\n\n\ndef main():\n    print(\"The surface area of a cone is \" + str(surface_area(float(input(\"Radius: \")))))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def cone_area(a, b):\n    return (b*b - 4*a*a)\n\n\nprint(cone_area(4, 4))",
    "def cone_area(n):\n    area = 0\n    for i in range(n):\n        area += (2 * (i + 1))\n    return area\n\nif __name__ == \"__main__\":\n    print(cone_area(3))\n    print(cone_area(4))\n    print(cone_area(5))",
    "def surface_area(cone):\n    return cone * (cone * (cone - 1)) / 2\n\nprint(surface_area(6))",
    "def cone_area(r, h):\n    return 2 * r * h\n\nprint(cone_area(3, 4))\nprint(cone_area(3, 3))\nprint(cone_area(3, 5))",
    "def cone_area(r, h):\n    return (2 * r * h) / 3\n\nprint(cone_area(1, 3))\nprint(cone_area(5, 7))\nprint(cone_area(5, 6))\nprint(cone_area(2, 3))",
    "def cone_area(r, h):\n    return r * h\n\n\nif __name__ == \"__main__\":\n    print(cone_area(4, 2))",
    "def surface_area(r):\n    return (3.14159 * r**2) / 2\n\n\ndef main():\n    print(surface_area(float(input(\"Enter radius: \"))))\n\n\nif __name__ == '__main__':\n    main()",
    "def cone_area(r, h):\n    return (4/3) * r * h\n\nprint(cone_area(1, 1))\nprint(cone_area(3, 1))\nprint(cone_area(5, 1))\nprint(cone_area(7, 1))\nprint(cone_area(1, 2))\nprint(cone_area(5, 2))\nprint(cone_area(7, 2))",
    "def surfaceArea(r,h):\n    return (r**2 + h**2)**0.5\n\nprint(surfaceArea(4,4))",
    "def cone_area(length, width):\n    return length * width\n\n\nif __name__ == \"__main__\":\n    print(cone_area(10, 20))",
    "def cone_area(r,h):\n    return r*h\n\nprint(cone_area(10,20))\nprint(cone_area(20,10))\nprint(cone_area(5,15))",
    "def cone_area(r, h):\n    a = (r ** 2 + h ** 2) ** (1/2)\n    return a\n\nprint(cone_area(3, 2))",
    "import math\n\n\ndef cone_area(r, h):\n    area = math.pi * (r**2) * (h**2)\n    return area\n\n\nprint(cone_area(3, 4))",
    "import math\n\ndef surfaceArea(x, y, z):\n    return math.pi * x * y * z\n\nprint(surfaceArea(5, 2, 1))",
    "def surfaceArea(radius):\n    return 3.14159 * radius ** 2\n\nprint(surfaceArea(1.5))\nprint(surfaceArea(2.5))\nprint(surfaceArea(3.5))",
    "from math import pi\n\n\ndef cone_area(r, h):\n    return r * h * pi\n\n\ndef main():\n    r = float(input(\"Enter the radius of the cone: \"))\n    h = float(input(\"Enter the height of the cone: \"))\n    print(\"The area of a cone is {}\".format(cone_area(r, h)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def surface_area(r, theta):\n    a = 4 * r * r * np.sin(theta)\n    b = 2 * r * r * np.cos(theta)\n    return a + b\n\nr = float(input(\"Radius of the cone: \"))\ntheta = float(input(\"Angle of the cone: \"))\n\narea = surface_area(r, theta)\n\nprint(\"The surface area of the cone is\", area)",
    "def surface_area(radius):\n    return 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(5))",
    "def cone_area(r,h):\n    return r*h",
    "def cone(r,h,a):\n    # your code here\n    return r*h*a\n\nprint(cone(3,2,3))",
    "def surfaceArea(a,b):\n    return a*b\n\ncone = float(input(\"Enter the cone area:\"))\nprint(\"The surface area of a cone is:\",surfaceArea(cone,cone))",
    "def cone_area(l, r):\n    return (r-l) * (l+r) / 2\n\nprint(cone_area(1, 2))\nprint(cone_area(2, 1))\nprint(cone_area(1, 3))\nprint(cone_area(3, 1))\nprint(cone_area(2, 2))\nprint(cone_area(3, 2))",
    "def cone_area(r):\n    return 3.14 * r ** 2\n\n\nr = float(input(\"Enter radius of cone: \"))\nprint(\"The surface area of a cone is: \", cone_area(r))",
    "def surface_area(length, width):\n    return length*width",
    "def cone_area(a, b, c):\n    area = (a + b + c) / 2\n    return area\n\n\ncone_area(2, 3, 4)",
    "def surfaceArea(height, width):\n    return height * width\n\n\nprint(surfaceArea(4, 6))",
    "import math\n\ndef cone_area(radius):\n    return radius * math.pi * (radius**2)\n\nprint(cone_area(2))\nprint(cone_area(3))\nprint(cone_area(4))\nprint(cone_area(5))\nprint(cone_area(6))\nprint(cone_area(7))\nprint(cone_area(8))\nprint(cone_area(9))\nprint(cone_area(10))\nprint(cone_area(11))\nprint(cone_area(12))\nprint(cone_area(13))\nprint(cone_area(14))\nprint(cone_area(15))\nprint(cone_area(16))\nprint(cone_area(17))\nprint(cone_area(18))\nprint(cone_area(19))\nprint(cone_area(20))",
    "def cone_area(r, h):\n    return r * h\n\n\nprint(cone_area(2, 2))",
    "def cone_area(r, h):\n    return (r**2)*(h**2)\n\nprint(cone_area(1, 2))\nprint(cone_area(2, 3))\nprint(cone_area(3, 4))\nprint(cone_area(4, 5))",
    "def cone_area(a,b,c):\n    area = (a*b)*(c*c)\n    return area\n\nprint(cone_area(5,2,3))",
    "def cone_area(r, h):\n    return (2 * r * h) / 3\n\nprint(cone_area(3, 2))",
    "def cone_area(a, b):\n    area = (a * b) / 2\n    return area\n\nprint(cone_area(1, 2))",
    "def cone_area(r,h):\n    return (r*h)\n\nprint(cone_area(3,2))",
    "def surface_area(r, h):\n    return (r ** 2 + h ** 2) ** 0.5\n\n\nprint(surface_area(2, 3))",
    "def surface_area(r, h):\n    return r * h\n\n\nprint(surface_area(5, 4))",
    "def cone_area(r, theta):\n    return 4*r*theta\n\n\nr = float(input(\"r: \"))\ntheta = float(input(\"theta: \"))\nprint(cone_area(r, theta))",
    "def surface_area(r, h, a):\n    return (r**2 + h**2) * a\n\ndef main():\n    print(surface_area(3, 3, 3))\n\nif __name__ == \"__main__\":\n    main()",
    "def cone_area(a, b, c):\n    return (a * b + c * c) * 0.5\n\n\nprint(cone_area(2, 3, 5))",
    "def cone_area(r):\n    return (4 * r)\n\n\nprint(cone_area(3))\nprint(cone_area(6))",
    "def cone_area(r, h):\n    return (3.14 * r * h) / 2\n\nif __name__ == '__main__':\n    print(cone_area(5, 6))",
    "def cone_area(r, h):\n    return r * h\n\nprint(cone_area(2, 2))",
    "def surface_area(r):\n    return 3.14159 * r**2\n\n\nassert surface_area(1) == 3.14159\nassert surface_area(2) == 6.28318530718\nassert surface_area(3) == 9.80665",
    "def cone(r,h):\n    return 3.14 * r * h\n\nprint(cone(3.14,3.14))",
    "def surface_area(r, h):\n    return 3.14159 * r * h\n\nprint(surface_area(4, 2))",
    "def cone_area(length, width):\n    return length * width\n\n\nprint(cone_area(5, 5))",
    "def area_of_cone(r, theta, phi):\n    return (r**2) * (theta * phi)\n\n\nprint(area_of_cone(5, 5, 5))",
    "def cone_area(x, y):\n    area = (x * y) / 2\n    return area\n\nprint(cone_area(3, 1))",
    "def surface_area(r, theta, phi):\n    return ((4/3) * r**3) * (2 * np.arctan(np.sqrt(2)) + np.arctan(np.sqrt(2)) * np.cos(theta) * np.cos(phi))\n\n\n# TESTS\nassert surface_area(1, 0, 0) == 0\nassert surface_area(1, 0, np.pi/2) == 2\nassert surface_area(2, 0, 0) == 4\nassert surface_area(2, 0, np.pi/2) == 6\nassert surface_area(2, 0, np.pi) == 8\nassert surface_area(1, 0, np.pi/2) == 6\nassert surface_area(1, 0, np.pi) == 8\nassert surface_area(1, 0, -np.pi/2) == 6\nassert surface_area(1, 0, -np.pi) == 8",
    "def cone_area(r):\n    return (4/3) * r**3\n\nprint(cone_area(5))",
    "from math import pi\n\ndef cone_area(r,h):\n    return r*h\n\nr = float(input(\"radius: \"))\nh = float(input(\"height: \"))\nprint(\"area: \", cone_area(r,h))",
    "import math\n\n\ndef cone_area(radius, height):\n    return math.pi * radius * height\n\n\nprint(cone_area(1, 2))\nprint(cone_area(2, 3))\nprint(cone_area(1, 4))\nprint(cone_area(3, 3))",
    "def cone_area(r,h):\n    area = 2 * r * h\n    return area\n\nprint(cone_area(1,3))\nprint(cone_area(3,2))\nprint(cone_area(2,2))\nprint(cone_area(1,1))",
    "def cone_area(r, theta, phi):\n    return (3.14 * r * r) / 2\n\n\nif __name__ == \"__main__\":\n    r = float(input(\"r: \"))\n    theta = float(input(\"theta: \"))\n    phi = float(input(\"phi: \"))\n\n    print(\"The cone area is\", cone_area(r, theta, phi))",
    "def surface_area(radius):\n    \"\"\"\n    :param radius:\n    :return:\n    \"\"\"\n    return 4 * (radius ** 2)\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert surface_area(5) == 120\n    assert surface_area(3) == 280\n    assert surface_area(7) == 330\n    assert surface_area(10) == 390\n    assert surface_area(15) == 430\n    assert surface_area(18) == 490\n    assert surface_area(19) == 530\n    assert surface_area(21) == 590\n    assert surface_area(25) == 630\n    assert surface_area(30) == 690\n    assert surface_area(35) == 730\n    assert surface_area(40) == 790\n    assert surface_area(45) == 830\n    assert surface_area(50) == 890\n    assert surface_area(55) == 930\n    assert surface_area(60) == 990\n    assert surface_area(65) == 1030\n    assert surface_area(70) == 1130\n    assert surface_area(75) == 1230\n    assert surface_area(80) == 1330\n    assert surface_area(85) == 1430\n    assert surface_area(90) == 1530\n    assert surface_area(95) == 1630\n    assert surface_area(100) == 1730\n\n\nif __name__ == \"__main__\":\n    main()",
    "def area(r, theta):\n    return r * theta * (r + theta) / 2\n\nprint(area(3, 4))\nprint(area(5, 6))\nprint(area(7, 8))\nprint(area(9, 10))\nprint(area(11, 12))",
    "def cone_area(a,b,c):\n    return a*b*c",
    "def cone_area(a, b, c):\n    return a * b * c\n\n\nif __name__ == '__main__':\n    print(cone_area(4, 2, 3))",
    "def cone_area(r,h):\n    return r*h\n\nprint(cone_area(2,3))",
    "def cone_area(r, h):\n    area = r * h\n    return area\n\n\nif __name__ == \"__main__\":\n    print(cone_area(1, 1))\n    print(cone_area(2, 1))\n    print(cone_area(2, 2))\n    print(cone_area(3, 2))\n    print(cone_area(3, 3))\n    print(cone_area(4, 3))\n    print(cone_area(4, 4))",
    "def cone_area(r,h):\n    area = 2 * r * h\n    return area\n\nprint(cone_area(3,2))\nprint(cone_area(3,3))",
    "def cone_area(r, h):\n    return r * h\n\nprint(cone_area(10, 10))",
    "def surface_area(r, h):\n    return 2 * r * h\n\nif __name__ == \"__main__\":\n    print(surface_area(3, 2))\n    print(surface_area(3, 3))\n    print(surface_area(3, 4))",
    "def cone_area(r, h):\n    return (2 * r * h) / 3\n\n\nprint(cone_area(3, 5))",
    "def cone_area(r, theta):\n    return r*theta\n\ndef main():\n    print(cone_area(4, 3))\n\nif __name__ == \"__main__\":\n    main()",
    "def cone_area(r, h):\n    return r * h\n\nprint(cone_area(1.0, 1.0))\nprint(cone_area(1.0, 2.0))\nprint(cone_area(2.0, 1.0))\nprint(cone_area(2.0, 2.0))\nprint(cone_area(2.0, 3.0))",
    "def cone_area(r):\n    return (4/3) * r**2\n\nprint(cone_area(8))\nprint(cone_area(4))\nprint(cone_area(5))",
    "def cone_area(a, b):\n    return (a**2 + b**2)**(1/2)\n\nif __name__ == '__main__':\n    print(cone_area(2, 3))",
    "def surface_area(radius):\n    return 3.14 * radius * radius\n\nprint(surface_area(5))",
    "def cone_area(r, h):\n    return r * h",
    "def surface_area(r, h):\n    return (3 * r * h) / 2\n\n\nprint(surface_area(1, 1))",
    "def cone_area(r, h):\n    return r*h"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}