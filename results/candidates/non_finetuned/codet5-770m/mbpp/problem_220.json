{
  "problem": {
    "task_id": "MBPP/231",
    "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
    "test_list": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ],
    "challenge_test_list": [],
    "problem_id": 220
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_sum(nums):\n    if len(nums) < 3:\n        return max(nums)\n    return max(nums[0], max(nums[1], nums[2]), max(nums[1], nums[2] + nums[0]))",
    "def max_sum(triangle):\n    left = len(triangle)\n    right = len(triangle[0])\n\n    max_sum = 0\n    for i in range(left):\n        for j in range(right):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, triangle[i][j] + triangle[i-1][j])\n            else:\n                max_sum = max(max_sum, triangle[i-1][j] + triangle[i][j] + triangle[i-1][j-1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "import pytest\n\ndef maximum_sum(nums):\n    max_sum = nums[0]\n    for i in range(1, len(nums)):\n        max_sum = max(max_sum + nums[i], nums[i])\n    return max_sum\n\ndef test_maximum_sum():\n    assert maximum_sum([2, 3, 4, 5]) == 10\n    assert maximum_sum([1, 2, 3, 4]) == 6\n    assert maximum_sum([1, 2, 4]) == 4\n    assert maximum_sum([2, 2, 3, 1]) == 6\n    assert maximum_sum([1, 1, 1]) == 1\n    assert maximum_sum([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 6\n    assert maximum_sum([1, 2, 2, 2]) == 6\n    assert maximum_sum([2, 3, 4]) == 8\n\nif __name__ == '__main__':\n    pytest.main([__file__])",
    "class Solution:\n    def maxSumRightTriangle(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        if len(nums) == 1:\n            return nums[0]\n\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n\n        return max_sum\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.maxSumRightTriangle([1, 2, 3]) == 6\n    assert s.maxSumRightTriangle([1, 2, 3, 4]) == 7\n    assert s.maxSumRightTriangle([1]) == 1",
    "class Solution(object):\n    def maximumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        return -1\n\n\n\ns = Solution()\nprint s.maximumSum([-2, 0, 3, -5, 4])",
    "class Solution:\n    def maximumSumRightTriangle(self, nums):\n        nums.sort()\n        i = len(nums) - 2\n        j = len(nums) - 1\n        max_sum = nums[i] + nums[j]\n        while i > 0 and j > 0:\n            if nums[i] + nums[j] > max_sum:\n                max_sum = nums[i] + nums[j]\n            if nums[i] + nums[j] < 0:\n                j -= 1\n            else:\n                i -= 1\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [2, -2, -3, 4, -3, -2, 1]\n    s = Solution()\n    print(s.maximumSumRightTriangle(nums))",
    "def max_sum(n):\n    n.sort()\n    return n[-1] + max(n[0:-1])\n\n\nprint(max_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_triangle_sum(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums[0], nums[1] + max_triangle_sum(nums[2:]))",
    "def max_triangle_sum(a):\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n\n    m = max(a[0], a[1])\n    for i in range(2, n):\n        m = max(a[i], a[i-1] + a[i-2])\n    return m",
    "def max_sum_of_right_triangle(arr):\n    max_sum = 0\n    for i in range(1, len(arr)):\n        for j in range(len(arr[i])):\n            if j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i-1][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i-1][j-1])\n    return max_sum\n\n\nprint(max_sum_of_right_triangle([[1, 2, 3], [4, 5, 6]]))",
    "def max_sum_right_triangle(n):\n    if n == 1:\n        return n\n\n    res = 0\n    for i in range(n-1, 0, -1):\n        res += n - i\n\n    return res\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"Maximum sum of the right triangle is {}\".format(max_sum_right_triangle(n)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)-1, 0, -1):\n        max_sum = max(max_sum + arr[i], arr[i-1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum([-2, -1, 4, -3, 2, 1, -5, 4]))",
    "def max_triangle(n):\n    return sum(n)\n\n\nprint(max_triangle([1, 2, 3]))",
    "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)-1, -1, -1):\n        if i == 0:\n            max_sum = max(max_sum, arr[i])\n        else:\n            max_sum = max(max_sum, arr[i] + max_sum)\n    return max_sum\n\n\nprint(max_sum([-2, -3, -4, -5, -7, -1, 2, 3, 4, 5, 7, 1]))",
    "def max_sum_right_triangle(a):\n    n = len(a)\n    if n <= 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return a[0] + a[1] + a[2]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3]\n\n    l = max_sum_right_triangle(a[:n//2])\n    r = max_sum_right_triangle(a[n//2:])\n\n    return max(l, r)\n\n\ndef test_max_sum_right_triangle():\n    assert max_sum_right_triangle([1, 2, 3, 4]) == 6\n    assert max_sum_right_triangle([1, 3, 4, 5]) == 6\n    assert max_sum_right_triangle([1, 2, 3, 5]) == 6\n    assert max_sum_right_triangle([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 15",
    "def max_sum(numbers):\n    max_sum = 0\n    for i in range(len(numbers)):\n        for j in range(len(numbers[0])):\n            if i == 0:\n                max_sum = max(max_sum, numbers[i][j] + numbers[i][j + 1])\n            elif i == 1:\n                max_sum = max(max_sum, numbers[i][j] + numbers[i - 1][j])\n            elif i == 2:\n                max_sum = max(max_sum, numbers[i][j] + numbers[i - 1][j] + numbers[i - 2][j])\n    return max_sum\n\n\nprint(max_sum([[1, 3, 5, 7, 9, 11, 13, 15],\n                 [2, 4, 6, 8, 10, 12, 15],\n                 [3, 5, 7, 9, 11, 13, 15]]))",
    "def max_triangle(n):\n    if n == 1:\n        return n\n    return max(n[0], max_triangle(n[1:])) + n[0]",
    "def max_sum(n, s):\n    \"\"\"\n    :type n: int\n    :type s: int\n    :rtype: int\n    \"\"\"\n    if n == 0 or s == 0:\n        return 0\n    if n == 1:\n        return s\n    if s == 1:\n        return max(s, max_sum(n - 1, s - 1))\n    return max(s, max_sum(n - 1, s - 2)) + max(s, max_sum(n - 2, s - 2))\n\n\nif __name__ == \"__main__\":\n    assert max_sum(1, 0) == 0\n    assert max_sum(1, 1) == 1\n    assert max_sum(2, 3) == 6\n    assert max_sum(3, 3) == 6\n    assert max_sum(4, 3) == 9\n    assert max_sum(5, 3) == 10\n    assert max_sum(6, 3) == 12\n    assert max_sum(7, 3) == 15\n    assert max_sum(8, 3) == 18\n    assert max_sum(9, 3) == 21\n    assert max_sum(10, 3) == 24\n    assert max_sum(11, 3) == 29\n    assert max_sum(12, 3) == 36\n    assert max_sum(13, 3) == 41\n    assert max_sum(14, 3) == 49\n    assert max_sum(15, 3) == 64\n    assert max_sum(16, 3) == 72\n    assert max_sum(17, 3) == 84\n    assert max_sum(18, 3) == 96\n    assert max_sum(19, 3) == 98\n    assert max_sum(20, 3) == 101\n    assert max_sum(21, 3) == 108\n    assert max_sum(22, 3) == 112\n    assert max_sum(23, 3) == 130\n    assert max_sum(24, 3) == 146\n    assert max_sum(25, 3) == 165\n    assert max_sum(26, 3) == 179\n    assert max_sum(27, 3) == 181\n    assert",
    "class Solution(object):\n    def maximumSum(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if not triangle:\n            return 0\n        left, right = 0, len(triangle) - 1\n        while left < right:\n            triangle[left] += max(triangle[left + 1], triangle[left + 2])\n            left += 1\n            right -= 1\n        return triangle[0]\n\n\na = Solution()\nprint(a.maximumSum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_sum_right_triangle(numbers):\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return max(numbers[0], numbers[1])\n    left_triangle = max_sum_right_triangle(numbers[:len(numbers)//2])\n    right_triangle = max_sum_right_triangle(numbers[len(numbers)//2:])\n    return max(left_triangle, right_triangle)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_right_triangle([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "class Solution:\n    def maximumSum(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if len(triangle) <= 1:\n            return triangle[0]\n\n        n = len(triangle)\n        max_sum = triangle[0]\n        for i in range(1, n):\n            for j in range(0, i):\n                max_sum = max(max_sum + triangle[j], triangle[i])\n\n        return max_sum\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.maximumSum([1,2,3,4,5,6,7,8]))",
    "class Solution:\n    def maxSumRightTriangle(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if len(triangle) < 2:\n            return triangle[0]\n\n        max_sum = triangle[0]\n        for i in range(1, len(triangle)):\n            max_sum = max(max_sum + triangle[i], triangle[i] + max_sum)\n\n        return max_sum",
    "def max_sum_right_triangle(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_sum = 0\n    max_sum_left = 0\n\n    for i in range(len(arr)-2, -1, -1):\n        max_sum = max(max_sum, max_sum_left + arr[i])\n        max_sum_left = max(max_sum_left, arr[i])\n\n    return max(max_sum, max_sum_left)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_right_triangle([1, 2, 3, 4, 5]))",
    "def max_sum_right_triangle(arr):\n    n = len(arr)\n    arr.sort(reverse=True)\n    max_sum = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_right_triangle([1, 5, -4, 3, 2]))",
    "def max_sum(a):\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    elif n == 2:\n        return max(a[0], a[1])\n\n    max_sum = a[0]\n    for i in range(1, n):\n        if i == 1:\n            max_sum = a[0]\n        else:\n            max_sum = max(a[i-1] + a[i], max_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    a = [2, 4, 7, 11, 15]\n    print(max_sum(a))",
    "class Solution(object):\n    def max_sum_right_triangle(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        max_sum = nums[0] + nums[1]\n        for i in range(2, n):\n            max_sum = max(max_sum, nums[i] + nums[i-1])\n        return max_sum\n\nif __name__ == \"__main__\":\n    print Solution().max_sum_right_triangle([-1,0,-2,3,-4])\n    print Solution().max_sum_right_triangle([0,1,2,3,4])\n    print Solution().max_sum_right_triangle([-1])",
    "def max_sum_right_triangle(n):\n    # Write your code here\n    # Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n[0], n[1]) + max_sum_right_triangle(n[2:])\n\n\nif __name__ == '__main__':\n    print(max_sum_right_triangle(5))",
    "class Solution:\n    def maxSum(self, triangle: List[int]) -> int:\n        if len(triangle) == 1:\n            return triangle[0]\n\n        max_sum = triangle[0]\n\n        for i in range(1, len(triangle)):\n            max_sum = max(triangle[i], max_sum + triangle[i])\n\n        return max_sum\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.maxSum([2, 3, 4, 5]))\n    print(s.maxSum([4, 2, 1]))\n    print(s.maxSum([-3, -2, -1]))",
    "def max_triangle(nums):\n    # Write your code here\n    max_sum = float('-inf')\n    for i in range(len(nums) - 1, -1, -1):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        max_sum = max(max_sum, sum)\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_triangle([1, 2, 3, 4]))\n    print(max_triangle([1, 3, 4, 2]))",
    "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def maximumSum(self, A):\n        if len(A) == 0:\n            return 0\n        left, right = 0, len(A) - 1\n        max_sum = 0\n\n        while left < right:\n            if A[left] + A[right] > max_sum:\n                max_sum = A[left] + A[right]\n\n            if A[left] + A[right] < 0:\n                left += 1\n            else:\n                right -= 1\n\n        return max_sum\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.maximumSum([-2, -3, 4, -1, 2, 1, -5, 4]))\n    print(solution.maximumSum([-1, -1, -1, -1, -1, -1, -1]))",
    "class Solution:\n    def max_sum_triangle(self, triangle):\n        if len(triangle) <= 1:\n            return triangle[0]\n        # find the maximum of the two sides\n        s1 = self.max_sum_triangle(triangle[:-1])\n        s2 = self.max_sum_triangle(triangle[1:])\n        # find the maximum of the three sides\n        s3 = self.max_sum_triangle(triangle[:-2])\n        # find the maximum of the four sides\n        s4 = self.max_sum_triangle(triangle[2:])\n        # find the maximum of the four sides\n        s5 = self.max_sum_triangle(triangle[3:])\n        # find the maximum of the four sides\n        s6 = self.max_sum_triangle(triangle[4:])\n\n        return max(s1, s2, s3, s4, s5, s6)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.max_sum_triangle([1, 2, 3, 4, 5, 6, 7]))",
    "def max_sum(a):\n    n = len(a)\n    if n < 2:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    else:\n        return max(max_sum(a[:n//2]), max_sum(a[n//2:]))\n\nprint(max_sum([1,2,3,4,5,6,7]))\nprint(max_sum([1,2,-3,4,5,-6,7]))\nprint(max_sum([1,2,3,-3,4,5,-6,-7]))\nprint(max_sum([-1,-2,-3,-4,-5,-6,-7]))\nprint(max_sum([-1,-2,-3,-4,-5,-6,-7]))",
    "def max_sum_triangle(triangle):\n    # Your code here\n    if triangle == []:\n        return 0\n    if len(triangle) == 1:\n        return triangle[0]\n    # Find the maximum of the two left sides\n    max_left = max(triangle[0], triangle[1])\n    # Find the maximum of the two right sides\n    max_right = max(triangle[-1], triangle[-2])\n    # Find the sum of the left and right sides\n    max_sum = max_left + max_right\n    # Iterate through the two sides\n    for i in range(len(triangle)-2, -1, -1):\n        # Update the sum of the two sides\n        max_sum = max(max_left, max_right, max_left + max_right)\n        # Update the left side\n        max_left = max(max_left, max_right)\n        # Update the right side\n        max_right = max(max_left, max_right)\n    return max_sum\n\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3, 4, 5]\n    print(max_sum_triangle(triangle))",
    "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n\n    sum = max(arr[0], arr[1])\n    for i in range(2, n):\n        sum = max(sum, arr[i] + arr[i-1])\n    return sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum([1, 3, -1, 2, -3, 4, -2, 1, 5]) == 6\n    assert max_sum([1, -2, 3, 4, -1, 2, -3, 4, -2, 1, 5]) == 6\n    assert max_sum([-1]) == -1\n    assert max_sum([-2]) == -2\n    assert max_sum([-3, -4, -5, -6]) == -6",
    "def max_sum(triangle):\n    max_sum = triangle[0]\n    for i in range(1, len(triangle)):\n        max_sum = max(max_sum + triangle[i], triangle[i-1])\n    return max_sum\n\n\nprint(max_sum([1, 2, 4, 5, 6, 7, 8, 9]))",
    "def max_sum(n):\n    n.sort()\n    return sum(n[0:(n[-1]+1)//2])\n\nprint(max_sum([-1, -3, 4, -2, -1, 5]))\nprint(max_sum([-2, -3, 4, -1, -5, -7, -8, -9]))",
    "def max_sum_triangle(nums):\n    if len(nums) <= 2:\n        return max(nums)\n    else:\n        return max(nums[0], max_sum_triangle(nums[1:])) + max(nums[-1], nums[0])",
    "class Solution:\n    def maxSumRightTriangle(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return max(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i - 1], dp[i - 2] + nums[i - 2])\n        return dp[-1]",
    "class Solution:\n    def maximumSum(self, triangle: List[int]) -> int:\n        if len(triangle) == 0:\n            return 0\n\n        n = len(triangle)\n        max_sum = triangle[0]\n        for i in range(1, n):\n            max_sum = max(triangle[i], max_sum + triangle[i-1])\n\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maximumSum([-1, 0, 1, 2, -1, -4]))\n    print(s.maximumSum([3, 2, -1, -4]))\n    print(s.maximumSum([0]))\n    print(s.maximumSum([-1, -1]))",
    "class Solution(object):\n    def maxSumRightTriangle(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(triangle)\n        if n == 0:\n            return 0\n        if n == 1:\n            return triangle[0]\n        # get the last two numbers\n        last_two_numbers = triangle[-2:]\n        last_two_numbers.reverse()\n        # create a dict to store the maximum sum\n        max_sum = 0\n        for i in range(0, n - 1):\n            # find the maximum sum\n            max_sum = max(max_sum, last_two_numbers[i] + last_two_numbers[i + 1])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.maxSumRightTriangle([1]) == 1\n    assert sol.maxSumRightTriangle([1, 2]) == 2\n    assert sol.maxSumRightTriangle([1, 2, 3]) == 6\n    assert sol.maxSumRightTriangle([1, 2, 3, 4]) == 9\n    assert sol.maxSumRightTriangle([4, 3, 2, 1]) == 9",
    "def max_sum_right_triangle(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n[0], n[1], n[2] + max_sum_right_triangle(n[3:]))\n\n\nprint(max_sum_right_triangle([1, 2, 3, 4, 5, 6]))",
    "class Solution(object):\n    def maxSumRightTriangle(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        triangle.sort()\n        return triangle[-1] + max(triangle[-2], triangle[-3])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.maxSumRightTriangle([1, 2, 3, 4]) == 6\n    assert s.maxSumRightTriangle([-2, -3, -4, -5]) == 0",
    "def right_triangle_sum(arr):\n    arr.sort()\n    return arr[-1] + max(arr[-2:])",
    "class Solution:\n    # @param A : integer\n    # @return an integer\n    def maximumSum(self, A):\n        if A == None or A == []:\n            return 0\n        N = len(A)\n        dp = [[0 for x in range(N)] for x in range(N)]\n        dp[0][0] = A[0]\n        for i in range(1, N):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + A[i])\n        for i in range(N-2, -1, -1):\n            dp[i][i] = max(dp[i+1][i+1], dp[i+1][i] + A[i])\n        return dp[0][N-1]",
    "class Solution:\n    # @param A : integer\n    # @return an integer\n    def maximumSum(self, A):\n        if A == 0:\n            return 0\n        if A == 1:\n            return 1\n        if A == 2:\n            return 2\n        res = A[0]\n        for i in range(1, len(A)):\n            res = max(res, A[i] + A[i-1])\n        return res\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maximumSum([1, 2, 3, 4, 5, 6, 7]))",
    "def max_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum = max(max_sum + i, i)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum(3) == 4\n    assert max_sum(5) == 6\n    assert max_sum(7) == 8",
    "def max_sum_right_triangle(triangle):\n    max_sum = 0\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(0, i):\n            if j == 0:\n                max_sum = triangle[i][j] + max(triangle[i][j+1], triangle[i+1][j])\n            elif j == i - 1:\n                max_sum = max(triangle[i][j], triangle[i+1][j+1])\n            else:\n                max_sum = max(triangle[i][j], triangle[i+1][j]+triangle[i+1][j+1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    triangle = [[2, 3, 4],\n                [5, 6, 7],\n                [1, 2, 3, 4]]\n    print(max_sum_right_triangle(triangle))",
    "def max_sum_right_triangle(triangle):\n    # write your code here\n    max_sum = 0\n    for i in range(len(triangle)-1, 0, -1):\n        for j in range(i):\n            max_sum = max(max_sum + triangle[i-1][j], max_sum + triangle[i-1][j+1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_right_triangle([[2, 1, -1, -2], [3, -1, 1, -3], [-1, 2, -3, 1]]))",
    "def max_triangle_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(max_triangle_sum(n-1), max_triangle_sum(n-2), max_triangle_sum(n-3)) + n\n\n\nprint(max_triangle_sum(5))",
    "def maximum_sum(array):\n    n = len(array)\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return max(array[0], array[1])\n    left = [0 for i in range(n - 1)]\n    right = [0 for i in range(n - 1)]\n    for i in range(1, n - 1):\n        left[i] = array[i - 1]\n        right[i] = array[i]\n    for i in range(1, n - 2):\n        left[i] = left[i - 1] + array[i]\n        right[i] = right[i + 1] + array[i]\n    return max(left) + max(right)\n\n\nprint(maximum_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]))",
    "def max_sum_triangle(nums):\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            max_sum = max(max_sum + nums[i], nums[i] + nums[i + j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(max_sum_triangle(nums))",
    "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j + 1])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j - 1] + arr[i + 1][j])\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "class Solution(object):\n    def max_triangle_sum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left < right:\n            if nums[left] + nums[right] > nums[left] + nums[right]:\n                left += 1\n            elif nums[left] + nums[right] < nums[left] + nums[right]:\n                right -= 1\n            else:\n                return nums[left] + nums[right]\n        return nums[left]",
    "def maximum_sum(triangle):\n    if len(triangle) == 0:\n        return 0\n\n    max_sum = triangle[0] + triangle[0]\n\n    for i in range(1, len(triangle)):\n        max_sum = max(max_sum + triangle[i], triangle[i] + max_sum)\n\n    return max_sum\n\n\nprint(maximum_sum([-1, -1, -1, -1, -1, -1, -1, -1, -1]))",
    "def max_sum(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_sum = arr[0]\n    for i in range(1, n):\n        max_sum = max(arr[i], max_sum + arr[i])\n\n    return max_sum\n\n\nprint(max_sum([1, 2, 3, 4, 5]))",
    "def max_sum(arr):\n    max_sum = 0\n    for i in range(1, len(arr)):\n        max_sum += max(arr[i-1], 0)\n    return max_sum\n\n\ndef main():\n    arr = [1, -1, 2, 4, -1, -5]\n    print(max_sum(arr))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    def max_sum(self, triangle):\n        if not triangle:\n            return 0\n        left, right = 0, len(triangle) - 1\n        while left < right:\n            triangle[left] += max(triangle[left+1], triangle[left+2])\n            left += 1\n        return triangle[0]",
    "class Solution:\n    def max_triangle_sum(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return max(nums[0], nums[1], nums[-1]) + max(nums[-1], nums[0])",
    "def max_triangle(n):\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max(max_sum + i, i)\n    return max_sum\n\n\nprint(max_triangle(6))\nprint(max_triangle(5))\nprint(max_triangle(3))\nprint(max_triangle(4))\nprint(max_triangle(1))",
    "def max_sum(arr):\n    arr.sort()\n    return max(arr[-1]+arr[-2], arr[-3]+arr[-4])\n\nif __name__ == \"__main__\":\n    print(max_sum([1,-2,3,4,5]))\n    print(max_sum([-2,-1,0,2,1,-4]))\n    print(max_sum([2,-3,4,-2,-1]))",
    "def max_sum_right_triangle(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    arr.sort()\n\n    return max(arr[0] + arr[1], arr[0] + arr[2])\n\n\nprint(max_sum_right_triangle([3, 4, 5]))\nprint(max_sum_right_triangle([1, 2, 3, 4, 5]))\nprint(max_sum_right_triangle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_sum_right_triangle([4, 3, 2, 1, 5, 2, 3, 4, 6]))",
    "def max_sum(arr):\n    max_sum = arr[0] + max(arr[1:])\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + arr[i-1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [10, 2, 5, 3, 7, 11, 14]\n    print(max_sum(arr))",
    "def max_sum(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n\n    max_sum_of_first_two = max(arr[0], arr[1]) + max(arr[2], arr[3])\n    max_sum_of_third_two = max(arr[0], arr[1]) + max(arr[2], arr[3]) + max(arr[4], arr[5])\n    max_sum_of_fourth_two = max(arr[0], arr[1]) + max(arr[2]) + max(arr[3], arr[4]) + max(arr[5])\n    max_sum_of_fifth_two = max(arr[0], arr[1]) + max(arr[2]) + max(arr[3], arr[4]) + max(arr[5])\n    max_sum_of_sixth_two = max(arr[0], arr[1]) + max(arr[2]) + max(arr[3], arr[4]) + max(arr[5])\n\n    return max(max_sum_of_first_two, max_sum_of_third_two, max_sum_of_fourth_two, max_sum_of_fifth_two, max_sum_of_sixth_two)\n\n\nprint(max_sum([4, -1, 5, -2, -3]))",
    "def max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n[0] + max_sum(n[1:]), n[0] + max_sum(n[1:-1]))\n\n\nif __name__ == '__main__':\n    assert max_sum([1, 2, 3]) == 6",
    "class Solution:\n    def maximumSumRightTriangle(self, nums: List[int]) -> int:\n        max_sum = float(\"-inf\")\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n            max_sum = max(max_sum, nums[i] + nums[i - 1])\n        return max_sum",
    "def max_sum_right_triangle(n):\n    return max([0] + [max(0, i + n - i) for i in range(1, n + 1)])\n\n\nassert max_sum_right_triangle(3) == 6\nassert max_sum_right_triangle(4) == 9\nassert max_sum_right_triangle(5) == 12",
    "def max_sum(nums):\n    if len(nums) <= 1:\n        return nums[0]\n\n    mid = len(nums) // 2\n    left = max_sum(nums[:mid])\n    right = max_sum(nums[mid:])\n    return max(left, right) + nums[0]\n\n\nprint(max_sum([2, 7, 11, 15, 19]))",
    "def right_triangle(arr):\n    # Write your code here\n    arr = sorted(arr)\n    return sum(arr[1:])\n\nif __name__ == \"__main__\":\n    print(right_triangle([4, 2, -3, 1]))\n    print(right_triangle([2, 4, -3, 1]))\n    print(right_triangle([4, -2, 2, -3, 1]))\n    print(right_triangle([-2, 2, 4, -3, 1]))",
    "class Solution:\n    def maximum_sum(self, nums):\n        if not nums:\n            return 0\n        max_sum = float(\"-inf\")\n        for i in range(len(nums)-1, -1, -1):\n            for j in range(i+1):\n                max_sum = max(max_sum, nums[i]+nums[j])\n        return max_sum\n\n\nnums = [4, -2, 3, -1, -5, 2, 1]\nprint(Solution().maximum_sum(nums))",
    "def max_triangle(arr):\n    max_sum = 0\n    for i in range(len(arr)-2, -1, -1):\n        for j in range(len(arr[i])):\n            max_sum = max(max_sum, arr[i][j] + arr[i+1][j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_triangle([1, -1, 2, 3, -1, -2, 4]) == 6\n    assert max_triangle([1, -1, 2, 3, -1, -2, 4]) == 10",
    "def max_sum_right_triangle(num):\n    max_sum = 0\n    for i in range(len(num) - 1, 0, -1):\n        max_sum = max_sum + num[i]\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_right_triangle([1, 2, 3, 4, 5]))",
    "class Solution:\n    def max_triangle_sum(self, nums: list[int]) -> int:\n        for i in range(len(nums) - 2, -1, -1):\n            nums[i] += max(nums[i + 1], nums[i + 2])\n        return max(nums)\n\n\nif __name__ == \"__main__\":\n    print(Solution().max_triangle_sum([-1, -2, 3, -4, -1, 2, 1, -5, 4]))",
    "class Solution(object):\n    def max_sum(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if len(triangle) == 0:\n            return 0\n        left = 0\n        right = len(triangle) - 1\n        while left < right:\n            if triangle[left][right] > triangle[left + 1][right]:\n                left += 1\n            elif triangle[left][right] < triangle[left + 1][right]:\n                right -= 1\n            else:\n                return triangle[left][right]\n        return triangle[left][right]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n    assert s.max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 24\n    assert s.max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 34",
    "def max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return max(max_sum(arr[:-1]), max_sum(arr[1:])) + arr[0]\n\n\nif __name__ == '__main__':\n    print(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(max_sum([-3, -2, -1]))",
    "def max_sum(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return max(max_sum(arr[0:-1]), max_sum(arr[1:])) + arr[0]\n\n\ndef main():\n    print(max_sum([1, 2, 3]))\n    print(max_sum([-2, -3, 4, -1]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum(triangle):\n    max_sum = 0\n    i = 0\n    j = len(triangle) - 1\n    while i < j:\n        max_sum = max(max_sum + triangle[i][j], triangle[i][j] + triangle[i + 1][j])\n        i += 1\n        j -= 1\n    return max_sum\n\nif __name__ == '__main__':\n    triangle = [\n        [2, 3, 4],\n        [3, 2, 1],\n        [4, 5, 6]\n    ]\n    print(max_sum(triangle))",
    "def max_sum_right_triangle(n):\n    if n == 1:\n        return n\n    else:\n        return max(n[0], n[1], n[2] + max_sum_right_triangle(n[1:]))\n\n\nn = int(input())\nprint(max_sum_right_triangle(n))",
    "def max_sum_right_triangle(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    elif n == 3:\n        return max(arr[0], arr[1], arr[2])\n    else:\n        max_sum = 0\n        for i in range(2, n):\n            max_sum = max(max_sum + arr[i], max_sum + arr[i-1])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    print(max_sum_right_triangle(arr))",
    "class Solution:\n    def maximumSum(self, triangle: List[int]) -> int:\n        return self.find_max_sum(triangle)\n    \n    def find_max_sum(self, triangle: List[int]) -> int:\n        if len(triangle) == 1:\n            return triangle[0]\n        left_sum = self.find_max_sum(triangle[:-1])\n        right_sum = self.find_max_sum(triangle[1:])\n        return max(left_sum + right_sum, triangle[0])",
    "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if n == 2:\n        return arr[0] + arr[1]\n    if n == 3:\n        return max(arr[0] + arr[1], arr[2] + arr[3])\n    if n == 4:\n        return max(arr[0] + arr[1], arr[2] + arr[3], arr[3] + arr[4])\n    if n == 5:\n        return max(arr[0] + arr[1], arr[2] + arr[3], arr[3] + arr[4], arr[4] + arr[5])\n    if n == 6:\n        return max(arr[0] + arr[1], arr[2] + arr[3], arr[3] + arr[4], arr[4] + arr[5], arr[5] + arr[6])\n\n\nprint(max_sum([2, 3, 1, 5, 4, 8]))\nprint(max_sum([2, 3, 4, 5, 6, 7]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nprint(max_sum([1, 2,",
    "class Solution(object):\n    def maxSumRightTriangle(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if len(triangle) == 1:\n            return triangle[0]\n        m = max(triangle[0], triangle[-1])\n        for i in range(1, len(triangle)):\n            m = max(triangle[i], m + triangle[i-1])\n        return m\n\na = Solution()\nprint(a.maxSumRightTriangle([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "class Solution:\n    def max_sum(self, nums):\n        if len(nums) < 2:\n            return max(nums)\n\n        return max(nums[0] + max(nums[1:]), max(nums[1:]), nums[-1] + max(nums[-2:]) )",
    "class Solution(object):\n    def maxSumRightTriangle(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0]\n        result = triangle[0]\n        for i in range(1, len(triangle)):\n            result = max(result + triangle[i], triangle[i])\n        return result\n\na = Solution()\nprint a.maxSumRightTriangle([1, -1, 3, -2, 4, -5])",
    "def max_sum_triangle(triangle):\n    if len(triangle) == 1:\n        return triangle[0]\n    if len(triangle) == 2:\n        return max(triangle[0], triangle[1])\n\n    max_sum = triangle[0] + max(triangle[1], triangle[2])\n    for i in range(3, len(triangle)):\n        max_sum = max(max_sum, triangle[i] + max(triangle[i - 1], triangle[i - 2]))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_triangle([-2, -1, 0, 3, 4, 5]))\n    print(max_sum_triangle([3, 2, -1, 4, -2, 5, -3]))\n    print(max_sum_triangle([-3, -2, 1, -1, 4, 5, -3]))",
    "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    max_sum = 0\n    for i in range(1,n):\n        max_sum = max(max_sum,arr[i-1]+arr[i])\n    return max_sum",
    "def right_triangle_sum(n):\n    # write your code here\n    if n <= 1:\n        return n\n    else:\n        return max(right_triangle_sum(n-1), right_triangle_sum(n-2) + n)\n\nif __name__ == '__main__':\n    print(right_triangle_sum(5))",
    "def right_triangle(n):\n    n.sort()\n    return n[n.index(max(n))]\n\nprint(right_triangle([1,2,3,4,5]))",
    "class Solution:\n    def maximumSum(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if triangle == []:\n            return 0\n        if triangle == [0]:\n            return triangle[0]\n        n = len(triangle)\n        i = 0\n        j = n - 1\n        while i < j:\n            if triangle[i] + triangle[j] > triangle[i + 1] + triangle[j + 1]:\n                i += 1\n            elif triangle[i] + triangle[j] > triangle[i + 1]:\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        return triangle[i]",
    "def max_triangle(triangle):\n    max_sum = 0\n    for i in range(len(triangle) - 1, -1, -1):\n        temp_sum = 0\n        for j in range(i + 1):\n            temp_sum += triangle[i][j]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    triangle = [\n        [1, 2, 3, 4, 5],\n        [7, 6, 4, 3, 2],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5]\n    ]\n    print(max_triangle(triangle))",
    "def max_sum(arr):\n    max_sum = -1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j - 1] + arr[i][j - 2])\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3, 4], [2, 5, 6, 7], [3, 4, 5, 6], [4, 6, 7, 8]]))",
    "def max_sum_right_triangle(n):\n    if n == 1:\n        return n\n\n    if n == 2:\n        return n\n\n    for i in range(2, n):\n        if i % 2 == 0:\n            for j in range(0, i):\n                if j == 0:\n                    return max(n - j, n - i)\n                else:\n                    return max(n - j, n - i) + max(n - j, n - i)\n    return n\n\n\nif __name__ == \"__main__\":\n    assert max_sum_right_triangle(5) == 10\n    assert max_sum_right_triangle(4) == 15\n    assert max_sum_right_triangle(3) == 12\n    assert max_sum_right_triangle(2) == 6\n    assert max_sum_right_triangle(1) == 0",
    "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if j == 0:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j + 1])\n            elif j == len(arr[i]) - 1:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j - 1])\n            else:\n                max_sum = max(max_sum, arr[i][j] + arr[i][j - 1] + arr[i][j + 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum([-2, 0, 3, -5, 4]))",
    "def max_sum(a):\n    return max(a[-1], *a[:-1])\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    print(max_sum(a))",
    "def max_sum(arr):\n    if len(arr) < 2:\n        return arr[0]\n    else:\n        return max(arr[0], max_sum(arr[1:])) + max(arr[0], max_sum(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    print(max_sum([-1, 0, 1, -2, 3, 4]))",
    "def max_sum(arr):\n    m = max(arr)\n    for i in range(len(arr)-2,-1,-1):\n        m = max(m,arr[i]+arr[i+1])\n    return m\n\nprint(max_sum([1,2,3,4,5]))",
    "def max_sum(triangle):\n    if len(triangle) == 0:\n        return 0\n    return max(triangle[-1], triangle[-2]) + max(triangle[-3], triangle[-1])\n\n\nif __name__ == \"__main__\":\n    triangle = [2, 3, -1, 5, -2, -3, 4]\n    print(max_sum(triangle))",
    "def right_triangle(triangle):\n    n = len(triangle)\n    if n <= 1:\n        return triangle[0]\n    left_sum = right_triangle(triangle[1:])\n    right_sum = right_triangle(triangle[0:n-1])\n    return max(left_sum, right_sum) + triangle[n-1]",
    "def max_triangle(arr):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1):\n            max_sum = max(arr[j] + arr[i], max_sum)\n    return max_sum\n\n\nprint(max_triangle([3, 2, 1, 5, 4]))",
    "def max_sum_right_triangle(triangle):\n    triangle.sort()\n    return sum(triangle[-1::-2])\n\nprint(max_sum_right_triangle([5,1,-2,4]))",
    "class Solution:\n    def maximumSum(self, nums):\n        n = len(nums)\n        if n < 2:\n            return 0\n\n        if n == 1:\n            return max(nums[0], nums[1])\n\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i - 1], dp[i - 2] + nums[i - 1])\n\n        return dp[n]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}