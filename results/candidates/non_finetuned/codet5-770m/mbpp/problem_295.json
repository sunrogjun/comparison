{
  "problem": {
    "task_id": "MBPP/306",
    "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "test_list": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ],
    "challenge_test_list": [],
    "problem_id": 295
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_sum_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    else:\n        max_sum = 0\n        for i in range(k, n):\n            if i == k:\n                max_sum = max(max_sum, arr[i] + arr[i-k])\n            else:\n                max_sum = max(max_sum, arr[i] + arr[i-k] + max_sum_subsequence(arr, i-k))\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 3))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 4))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 5))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 6))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 7))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 8))\n    print(max_sum_subsequence([2, 3, 4, 5, 6, 7], 9))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        n = len(nums)\n        dp = [0 for i in range(n+1)]\n        dp[0] = nums[0]\n        for i in range(1, n+1):\n            for j in range(0, i):\n                if nums[j] > nums[i-1]:\n                    dp[i] = max(dp[i], dp[j]+nums[i-1])\n        return dp[n] + k\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5]\n    k = 5\n    print(sol.maxSumIncreasingSubsequence(nums, k))",
    "def max_sum_increasing_subsequence(array, k):\n    n = len(array)\n    if k > n:\n        return 0\n    prefix = [0 for i in range(n)]\n    for i in range(n):\n        prefix[i] = array[i]\n        for j in range(i + 1, n):\n            if array[j] > array[i]:\n                prefix[i] += prefix[j]\n    prefix[k] = prefix[k] + prefix[n - k]\n    return max(prefix)\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 2))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 4))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 3))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 7))",
    "def max_sum_increasing_subsequence(arr, n, k):\n    if k == 0:\n        return 0\n\n    if k > n:\n        return max_sum_increasing_subsequence(arr, n - 1, k)\n\n    if k < 0:\n        return max_sum_increasing_subsequence(arr, n, k)\n\n    if k == 1:\n        return max(arr[0], arr[1])\n\n    return max(arr[0], max_sum_increasing_subsequence(arr, n - 1, k - 1), arr[1])\n\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4], 3, 2))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4], 4, 2))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4], 5, 1))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4], 6, 1))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        # Write your code here\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n\n        nums.sort()\n        dp = [[0 for _ in range(k+1)] for _ in range(len(nums)+1)]\n        for i in range(1, len(nums)+1):\n            for j in range(1, k+1):\n                if i == 1:\n                    dp[i][j] = nums[i-1]\n                elif i == 2:\n                    dp[i][j] = nums[i-1] + nums[i-2]\n                else:\n                    dp[i][j] = max(nums[i-1] + nums[i-2], dp[i-1][j-1])\n        return dp[len(nums)][k]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 4\n    print(sol.maxSumIncreasingSubsequence(nums, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if j < i:\n                dp[i] = max(dp[i], dp[j] + arr[j - 1])\n            else:\n                dp[i] = max(dp[i], dp[j] + arr[j])\n\n    return dp[k]\n\n\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4], 4))",
    "def max_increasing_subseq_sum(arr, k):\n    if k == 0:\n        return 0\n\n    # initialize prefix sum\n    prefix_sum = [0] * (k + 1)\n    prefix_sum[0] = arr[0]\n\n    # populate prefix sum\n    for i in range(1, k + 1):\n        prefix_sum[i] = max(prefix_sum[i - 1] + arr[i], arr[i])\n\n    # populate prefix sum\n    for i in range(k, len(arr)):\n        prefix_sum[i] = max(prefix_sum[i - 1] + arr[i], arr[i])\n\n    return prefix_sum[-1]\n\n\nif __name__ == '__main__':\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 3))\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 4))\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 5))\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 7))\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 8))\n    print(max_increasing_subseq_sum([3, 2, 1, 5, 4], 10))",
    "def max_sum_increasing_subsequence(n, k):\n    if n < 1:\n        return 0\n    else:\n        return max(n, k) + max_sum_increasing_subsequence(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(max_sum_increasing_subsequence(n, k))",
    "def max_increasing_subseq_with_kth_element(arr, k):\n    if k == 0:\n        return max(arr)\n    max_sum = 0\n    for i in range(len(arr) - 1, -1, -1):\n        max_sum = max(max_sum, sum(arr[:i] + [arr[i] + k]))\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_increasing_subseq_with_kth_element([1, 2, 3, 4, 5], 2) == 7\n    assert max_increasing_subseq_with_kth_element([1, 2, 3, 4, 5], 1) == 5\n    assert max_increasing_subseq_with_kth_element([1, 2, 3, 4, 5], 0) == 5\n    assert max_increasing_subseq_with_kth_element([1, 2, 3, 4, 5], 3) == 10",
    "class Solution:\n    def maxSumIncreaseSubsequence(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum + k",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    m = max(arr[0], arr[k])\n    for i in range(1, n):\n        m = max(m, arr[i] + arr[i-1])\n    return m\n\n\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 2))",
    "def max_sum_increasing_subsequence(arr, k):\n    m = max_sum_recursive(arr, 0, 0, k)\n    return m\n\n\ndef max_sum_recursive(arr, i, j, k):\n    if i == j:\n        return arr[i]\n    if k > i:\n        return max(arr[i], max_sum_recursive(arr, i + 1, j, k - 1))\n    return max(arr[i], max_sum_recursive(arr, i + 1, j, k))\n\n\nprint(max_sum_increasing_subsequence([1, 3, 5, 7, 9, 11], 5))",
    "def max_sum_increasing_subsequence(array, k):\n    prefix_sum = [0] * len(array)\n    prefix_sum[0] = array[0]\n    for i in range(1, len(array)):\n        prefix_sum[i] = prefix_sum[i - 1] + array[i]\n    max_sum = 0\n    for i in range(len(array) - 1, -1, -1):\n        if k > i:\n            max_sum = max(max_sum, prefix_sum[i] - prefix_sum[k])\n        else:\n            break\n    return max_sum\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 2))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 3))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 4))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 6))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 7))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 8))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 9))",
    "def max_sum_increasing_subsequence(arr, k):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    result = 0\n\n    for i in range(k):\n        result = max(result, arr[i] + max_sum_increasing_subsequence(arr[i + 1:], k - i - 1))\n\n    return result\n\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 3))",
    "class Solution:\n    def max_sum_of_increasing_subseq(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > len(nums):\n            return 0\n        dp = [0 for _ in range(len(nums))]\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-1], nums[i] + dp[i-2])\n        return dp[k-1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.max_sum_of_increasing_subseq([1,2,3,4], 1))",
    "def max_sum_increasing_subsequence(arr, k):\n    if k > len(arr):\n        return 0\n\n    prefix = [0]\n    prefix.extend(arr[:k])\n    max_sum = 0\n    for i in range(1, len(arr)):\n        current_sum = 0\n        current_sum += prefix[i-1]\n        max_sum = max(max_sum, current_sum)\n        prefix.append(arr[i])\n    return max_sum\n\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7], 4))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7], 5))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7], 6))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7], 7))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k <= 0:\n        return 0\n    prefix_sum = [0] * (n+1)\n    prefix_sum[0] = arr[0]\n    for i in range(1, n+1):\n        prefix_sum[i] = max(prefix_sum[i-1]+arr[i], arr[i])\n    return max(prefix_sum[n+k])\n\n\narr = [2, 1, 4, 3, 5]\nk = 3\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 2\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 0\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 4\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 5\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 6\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 7\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 8\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 9\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 10\nprint(max_sum_increasing_subsequence(arr, k))\n\narr = [1, 2, 3, 4, 5]\nk = 11\nprint(",
    "def max_sum_subsequence(arr, n, k):\n    if k == 0:\n        return max(arr)\n\n    if k == n:\n        return max(arr[:i+1])\n\n    # if k > n:\n    #     return max(arr[:i+1])\n\n    # if arr[i] > arr[i-1]:\n    #     return max(arr[:i+1]) + max_sum_subsequence(arr, n-1, k-i)\n    # else:\n    #     return max(arr[:i+1]) + max_sum_subsequence(arr, n-1, k)\n\n    # if arr[i] < arr[i-1]:\n    #     return max_sum_subsequence(arr[:i+1], n-1, k)\n    # else:\n    #     return max_sum_subsequence(arr[:i+1], n-1, k)\n\n\nif __name__ == '__main__':\n    print(max_sum_subsequence([0, -1, 1, -2, 3, -4, 5], 4, 3))\n    print(max_sum_subsequence([0, -1, 1, -2, 3, -4, 5], 5, 3))\n    print(max_sum_subsequence([0, -1, 1, -2, 3, -4, 5], 5, 4))\n    print(max_sum_subsequence([0, -1, 1, -2, 3, -4, 5], 7, 3))\n    print(max_sum_subsequence([0, -1, 1, -2, 3, -4, 5], 7, 4))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans, nums[i] + nums[i-1])\n\n        return ans",
    "class Solution(object):\n    def maxSubsequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum + k\n\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.maxSubsequence([1, 2, 3, 4, 5, 6, 7, 8], 6)",
    "def max_sum_of_increasing_subsequence(arr, k):\n    arr.sort()\n    n = len(arr)\n    i = 0\n    j = 0\n    max_sum = 0\n    while i < n and j < k:\n        if arr[i] < arr[j]:\n            max_sum = max(max_sum, arr[i] + arr[j])\n        else:\n            max_sum = max(max_sum, arr[j] + arr[i])\n        i += 1\n        j += 1\n    return max_sum\n\n\narr = [3, 6, 9, 2, 7, 1, 4]\nk = 3\n\nprint(max_sum_of_increasing_subsequence(arr, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    arr.sort()\n    result = 0\n    for i in range(k, n):\n        result = max(result, arr[i] + max_sum_of_increasing_subsequence(arr[i + 1:], k - i - 1))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([2, 3, 4, 5, 6, 7], 4))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    dp = [0 for i in range(n + 1)]\n    dp[0] = arr[0]\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], arr[i - 1] + dp[i - 2])\n    return dp[k]\n\n\nprint(max_sum_increasing_subsequence([4, 2, -1, 3, 5, 1, -2], 3))",
    "def max_sum_of_increasing_subseq(arr, k):\n    prefix_sum = [0] * len(arr)\n    prefix_sum[0] = arr[0]\n    prefix_sum[1] = arr[0]\n    for i in range(2, len(arr)):\n        prefix_sum[i] = max(prefix_sum[i-1]+arr[i], arr[i])\n    return prefix_sum[k-1]\n\n\nprint(max_sum_of_increasing_subseq([1, 2, 3, 4, 5], 2))",
    "class Solution:\n    def maxSubSequence(self, nums, k):\n        # write your code here\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        max_sum = nums[0]\n        max_sum_before = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, nums[i] + max_sum_before)\n            max_sum_before = max(nums[i], max_sum_before)\n        return max_sum\n\n\ns = Solution()\nprint(s.maxSubSequence([1, 2, 3, 4, 5], 2))",
    "def max_sum_of_increasing_subsequence(nums, k):\n    if k == 0:\n        return 0\n    if k > 0 and nums[k] >= nums[k - 1]:\n        return max_sum_of_increasing_subsequence(nums[:k], k - 1) + nums[k]\n    return max_sum_of_increasing_subsequence(nums[:k], k)\n\n\nif __name__ == '__main__':\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 2))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 5))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 4))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 3))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 1))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 0))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -1))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 0))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -2))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -3))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -4))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -5))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], -6))\n    print(max_sum_of_increasing_subsequence",
    "# Time: O(N), where N is the length of a sequence\n# Space:O(N)\nclass Solution:\n    def maxSumIncreaseSubseq(self, nums, k):\n        max_sum = 0\n        prefix_sum = 0\n\n        for i in range(1, len(nums)):\n            prefix_sum = max(prefix_sum, nums[i] + k)\n            max_sum = max(max_sum, prefix_sum)\n\n        return max_sum",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1, n+1):\n        for j in range(0, k+1):\n            dp[i][j] = max(dp[i-1][j], arr[i-1]+dp[i-1][j-1])\n    return dp[n][k]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 4\nprint(max_sum_of_increasing_subsequence(arr, k))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums: List[int], k: int) -> int:\n        i = 0\n        n = len(nums)\n        prefix = [0] * (n + 1)\n        prefix[0] = nums[0]\n        max_sum = 0\n\n        while i < n:\n            if i < k:\n                prefix[i + 1] = prefix[i] + nums[i]\n            else:\n                prefix[i + 1] = max(prefix[i], prefix[i + 1 - k] + nums[i])\n\n            max_sum = max(max_sum, prefix[i + 1])\n            i += 1\n\n        return max_sum",
    "class Solution:\n    def maxSubsequence(self, nums, k):\n        if k == 0:\n            return 0\n        n = len(nums)\n        dp = [0 for i in range(n + 1)]\n        dp[0] = nums[0]\n        dp[1] = nums[1]\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])\n        return dp[k]\n\n\ns = Solution()\nprint(s.maxSubsequence([1, 2, 3], 1))\nprint(s.maxSubsequence([1, 2, 3], 2))\nprint(s.maxSubsequence([1, 2, 3], 3))\nprint(s.maxSubsequence([1, 2, 3], 4))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k == 0:\n        return 0\n    elif k > n:\n        return max_sum_of_increasing_subsequence(arr[:k], k)\n    elif k == 1:\n        return arr[0]\n    elif k == 2:\n        return max(arr[0], arr[1] + arr[2])\n    else:\n        return max(max_sum_of_increasing_subsequence(arr[:k], k), max_sum_of_increasing_subsequence(arr[k:], k-1), max_sum_of_increasing_subsequence(arr[k:], k-2))\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 3\n    print(max_sum_of_increasing_subsequence(arr, k))\n\n\nmain()",
    "def max_sum_increasing_subseq(n, k):\n    max_sum = n\n    for i in range(1, n):\n        max_sum = max(max_sum + i, i)\n    return max_sum + k\n\n\nif __name__ == '__main__':\n    print(max_sum_increasing_subseq(5, 3))\n    print(max_sum_increasing_subseq(10, 5))",
    "def max_sum_increasing_subsequence(prefix, k, i):\n    max_sum = 0\n    # print(prefix, k, i)\n    for j in range(i, len(prefix)):\n        # print(prefix[j], k, j)\n        # if k > j:\n        #     prefix[j] += prefix[j-1]\n        # else:\n        #     prefix[j] += prefix[j]\n        prefix[j] += prefix[j-k]\n        # print(prefix)\n        max_sum = max(max_sum, prefix[j])\n    return max_sum\n\n\n\nprefix = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 2\ni = 4\nprint(max_sum_increasing_subsequence(prefix, k, i))",
    "def max_sum_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    else:\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        dp[0][0] = arr[0]\n        dp[0][1] = max(arr[0], arr[1])\n        for i in range(2, n + 1):\n            dp[i][0] = max(dp[i - 1][0], arr[i - 1] + dp[i - 2][0])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 2][1])\n        return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    k = 13\n    print(max_sum_subsequence(arr, k))",
    "def max_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n\n    curr_max = 0\n    curr_max_sum = 0\n    curr_sum = 0\n\n    for i in range(0, k):\n        curr_sum = arr[i]\n        curr_max = max(curr_max, curr_sum)\n        curr_max_sum = max(curr_max_sum, curr_sum + arr[i])\n\n    return curr_max + curr_max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 7\n\n    print(max_increasing_subsequence(arr, k))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    prefix_sum = [0 for i in range(n)]\n    max_sum = 0\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        if i >= k:\n            max_sum = max(prefix_sum[i], max_sum)\n    return max_sum\n\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 4))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 2))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 1))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 0))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], -1))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 7))\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], -2))",
    "def max_sum_increasing_subseq(prefix, k):\n    if not prefix:\n        return 0\n    if prefix[-1] < k:\n        return max_sum_increasing_subseq(prefix[:-1], k)\n    return max(prefix[-1], prefix[-1] + k)\n\n\ndef test_max_sum_increasing_subseq():\n    assert max_sum_increasing_subseq([2, 3, 4, 7], 6) == 30\n    assert max_sum_increasing_subseq([2, 3, 4, 7], 3) == 28\n    assert max_sum_increasing_subseq([2, 3, 4, 7], 5) == 28\n    assert max_sum_increasing_subseq([2, 3, 4, 7], 4) == 28\n    assert max_sum_increasing_subseq([2, 3, 4, 7], 2) == 2",
    "def max_subsequence(arr, k):\n    if k == 0:\n        return 0\n\n    m = max(arr[:k])\n    n = max(arr[k:])\n\n    return m + n\n\n\nprint(max_subsequence([1, 2, 3, 4, 5], 4))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1,n+1):\n        dp[i][0] = max(dp[i-1][0],dp[i-1][1] + arr[i])\n    for i in range(1,k+1):\n        for j in range(1,n+1):\n            if j == i:\n                dp[j][i] = dp[j-1][i-1]\n            else:\n                dp[j][i] = max(dp[j][i-1],dp[j-1][i] + arr[j])\n    return dp[n][k]\n\n\nif __name__ == '__main__':\n    print(max_sum_of_increasing_subsequence([2,3,4,5,6,7,8,9],5))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],4))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],3))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],5))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],5))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],2))\n    print(max_sum_of_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11],1))\n    print(",
    "def max_sum_increasing_subsequence(arr, k):\n    # Write your code here\n    n = len(arr)\n    if k < 0:\n        return 0\n    if k == 0:\n        return max(arr)\n    if k == 1:\n        return max(arr[0], arr[1])\n    if k > n:\n        return 0\n    return max(arr[0], max_sum_increasing_subsequence(arr[1:], k)) + max(arr[k], arr[k-1])\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 5\nprint(max_sum_increasing_subsequence(arr, k))\n\n\n\"\"\"\nTime Complexity : O(n)\nSpace Complexity : O(n)\n\"\"\"",
    "def max_sum_of_increasing_subsequence(nums, k):\n    if k == 0:\n        return nums[0]\n\n    if k > len(nums):\n        return max_sum_of_increasing_subsequence(nums[1:], k)\n\n    prefix_sum = nums[0]\n    for i in range(1, len(nums)):\n        prefix_sum = max(prefix_sum + nums[i], nums[i])\n\n    return max(prefix_sum, max_sum_of_increasing_subsequence(nums[1:], k - 1))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 4, 5, 6, 7]\n    k = 2\n    print(max_sum_of_increasing_subsequence(nums, k))",
    "def max_increasing_subsequence(arr, k):\n    n = len(arr)\n    arr.sort()\n    return max_increasing_subsequence_helper(arr, 0, n, k)\n\n\ndef max_increasing_subsequence_helper(arr, i, n, k):\n    if i == n:\n        return arr[i]\n\n    max_sum = 0\n    if i > 0:\n        max_sum = max_increasing_subsequence_helper(arr, i-1, n, k)\n\n    if k > i:\n        max_sum = max_increasing_subsequence_helper(arr, i+1, n, k-i)\n\n    return max_sum\n\n\nprint(max_increasing_subsequence([1, 3, 5, 6, 8, 10, 12], 4))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        # write your code here\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])\n\n        for i in range(k, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - k] + nums[i])\n        return dp[n]",
    "def max_increasing_subseq(a, k):\n    n = len(a)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            max_sum = max(max_sum, a[i] + a[j])\n    return max_sum + k\n\n\nif __name__ == '__main__':\n    assert max_increasing_subseq([1, 2, 3], 2) == 6\n    assert max_increasing_subseq([1, 2, 3, 4], 2) == 6\n    assert max_increasing_subseq([1, 2, 3, 4, 5], 2) == 12\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6], 2) == 12\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7], 2) == 18\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8], 2) == 24\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 28\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 36\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 36\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 48\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 58\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 72\n    assert max_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 72\n    assert max_increasing_subseq([1,",
    "def max_sum_subseq(nums, k):\n    max_sum = 0\n    prefix = [0 for _ in range(len(nums))]\n    prefix[0] = nums[0]\n    for i in range(1, len(nums)):\n        prefix[i] = max(prefix[i - 1] + nums[i], nums[i])\n        max_sum = max(max_sum, prefix[i])\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum_subseq([2, 4, -2, 1, -3, 5], 2))\n    print(max_sum_subseq([2, 4, -2, 1, -3, 5], 2))\n    print(max_sum_subseq([1], 2))\n    print(max_sum_subseq([1], 1))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [[0 for x in range(k+1)] for x in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1, n+1):\n        for j in range(0, k+1):\n            if j <= i:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-arr[i-1]] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 4))",
    "class Solution(object):\n    def maxSubSequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        prefix = nums[:k]\n        prefix_sum = [0] * (k+1)\n        prefix_sum[0] = prefix[0]\n        for i in range(1, k+1):\n            prefix_sum[i] = prefix[i] + max(prefix_sum[i-1], prefix_sum[i-2])\n        return prefix_sum[k]\n\na = Solution()\nprint(a.maxSubSequence([3,2,1], 3))\nprint(a.maxSubSequence([3,2,1], 4))\nprint(a.maxSubSequence([3,2,1], 5))\nprint(a.maxSubSequence([3,2,1], 6))\nprint(a.maxSubSequence([3,2,1], 7))\nprint(a.maxSubSequence([3,2,1], 8))\nprint(a.maxSubSequence([3,2,1], 9))\nprint(a.maxSubSequence([3,2,1], 10))\nprint(a.maxSubSequence([3,2,1], 11))\nprint(a.maxSubSequence([3,2,1], 12))\nprint(a.maxSubSequence([3,2,1], 13))\nprint(a.maxSubSequence([3,2,1], 14))\nprint(a.maxSubSequence([3,2,1], 15))\nprint(a.maxSubSequence([3,2,1], 16))\nprint(a.maxSubSequence([3,2,1], 17))\nprint(a.maxSubSequence([3,2,1], 18))\nprint(a.maxSubSequence([3,2,1], 19))\nprint(a.maxSubSequence([3,2,1], 20))\nprint(a.maxSubSequence([3,2,1], 21))\nprint(a.maxSubSequence([3,2,1], 22))",
    "class Solution:\n    def maxSubSeq(self, nums, k):\n        if len(nums) < 1 or k < 1:\n            return 0\n        dp = [0] * (len(nums) + 1)\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, len(nums) + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])\n        return dp[k]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSubSeq([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3))",
    "def max_sum_increasing_subsequence(arr, k):\n    if k > len(arr):\n        return 0\n    elif k == 0:\n        return max(arr)\n    else:\n        return max(arr[k-1] + max_sum_increasing_subsequence(arr, k-1), max(arr[k-1], max_sum_increasing_subsequence(arr, k-2)))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 3))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 2))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 7))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 0))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 9))",
    "class Solution:\n    def maxSubSequence(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if k == 1:\n            return max(nums[0], nums[1])\n\n        prefix_sum = [nums[0]]\n        for i in range(1, len(nums)):\n            prefix_sum.append(prefix_sum[i - 1] + nums[i])\n\n        max_sum = 0\n        for i in range(k - 1, len(prefix_sum)):\n            max_sum = max(max_sum, prefix_sum[i] + prefix_sum[i - 1])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSubSequence([2, 1, -3, 4, -1, 5, 3, 2], 4))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if k > n:\n        return max_sum_of_increasing_subsequence(arr[1:], k)\n    if k == 1:\n        return max(arr[0], arr[1] + max_sum_of_increasing_subsequence(arr[2:], k - 1))\n    if k == 2:\n        return max(arr[0], arr[1] + max_sum_of_increasing_subsequence(arr[2:], k - 2))\n    return max(arr[0], arr[1] + max_sum_of_increasing_subsequence(arr[2:], k - 3))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    k = 4\n    print(max_sum_of_increasing_subsequence(arr, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    max_sum = arr[0]\n    current_sum = 0\n    for i in range(1, n):\n        current_sum = max(current_sum + arr[i], arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum + k\n\n\nif __name__ == '__main__':\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 2))",
    "def max_subsequence(arr, k):\n    # write your code here\n    n = len(arr)\n    dp = [0 for i in range(n+1)]\n    dp[0] = arr[0]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j <= i:\n                dp[i] = max(dp[i], dp[i-j]+arr[j])\n            else:\n                dp[i] = max(dp[i], dp[i-k]+arr[j])\n    return dp[-1]\n\n\nif __name__ == '__main__':\n    print(max_subsequence([1, 2, 3, 4, 5], 5))\n    print(max_subsequence([1, 2, 3, 4, 5], 7))\n    print(max_subsequence([1, 2, 3, 4, 5], 8))\n    print(max_subsequence([1, 2, 3, 4, 5], 9))\n    print(max_subsequence([1, 2, 3, 4, 5], 10))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    m = [0] * len(arr)\n    m[0] = arr[0]\n    for i in range(1, len(arr)):\n        m[i] = max(m[i-1] + arr[i], m[i-k] + arr[i])\n    return m[-1]\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([2, 3, 1, 2, 4], 3))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    if not arr or len(arr) == 0:\n        return 0\n\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = max(result, arr[i] + max_sum_of_increasing_subsequence(arr[i:], k - i))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 3))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k <= 0 or n == 0:\n        return 0\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return max(arr[0], max_sum_of_increasing_subsequence(arr[1:], k - 1))\n    return max(arr[0], max_sum_of_increasing_subsequence(arr[1:], k - 1) + arr[k])\n\n\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5, 6], 2))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = arr[0]\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1], arr[i-1]+dp[i-k])\n    return dp[n]\n\nif __name__ == \"__main__\":\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 3) == 11\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 5) == 30\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 0) == 0\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 2) == 12\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 1) == 13\n    assert max_sum_of_increasing_subsequence([1,3,6,7,9], 3) == 16",
    "class Solution:\n    def max_sum_increasing_subsequence(self, nums, k):\n        n = len(nums)\n        if n < k:\n            return 0\n        if k == 1:\n            return nums[0]\n        max_sum = nums[0] + max(nums[1:k + 1])\n        for i in range(k, n):\n            max_sum = max(max_sum, nums[i] + nums[i - k + 1])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 4]\n    k = 3\n    print(s.max_sum_increasing_subsequence(nums, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    if k == 1:\n        return arr[0]\n    max_sum = arr[0]\n    for i in range(1, n):\n        if i == 1:\n            max_sum = max(arr[i], max_sum + arr[i])\n        elif i == k:\n            max_sum = max(max_sum, arr[i])\n        else:\n            max_sum = max(max_sum, arr[i] + max_sum_of_increasing_subsequence(arr, k - 1))\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 5))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 4))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 6))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums: List[int], k: int) -> int:\n        if k == 0:\n            return sum(nums)\n        if k > len(nums):\n            return 0\n\n        max_sum = 0\n        for i in range(len(nums) - 1, k, -1):\n            max_sum = max(max_sum + nums[i], nums[i - 1])\n\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxSumIncreasingSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 11",
    "def max_sum_of_increasing_subsequence(arr, n, k):\n    if n == 0:\n        return 0\n    if k > n:\n        return max_sum_of_increasing_subsequence(arr, n - k, k)\n    elif k == 0:\n        return max(arr[0], arr[1])\n    else:\n        return max(arr[0] + max_sum_of_increasing_subsequence(arr, n - k, k - 1), arr[1] + max_sum_of_increasing_subsequence(arr, n - k - 1, k))\n\n\nprint(max_sum_of_increasing_subsequence([5, 4, 3, 2, 1], 4, 3))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k < 0:\n            return -1\n\n        dp = [0 for _ in range(n + 1)]\n        dp[0] = nums[0]\n        dp[1] = nums[1]\n        for i in range(2, n + 1):\n            dp[i] = max(nums[i - 1] + dp[i - 2], dp[i - 1] + nums[i - 2])\n        return dp[n]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumIncreasingSubsequence([1, 2, 3, 4, 5, 6, 7], 3))\n    print(sol.maxSumIncreasingSubsequence([1, 2, 3, 4, 5, 6, 7], 2))\n    print(sol.maxSumIncreasingSubsequence([1, 2, 3, 4, 5, 6, 7], 1))",
    "def max_sum_of_increasing_subsequence(prefix, k):\n    max_sum = 0\n    for i in range(len(prefix)):\n        if i < k:\n            max_sum = max(prefix[i] + max_sum, prefix[i])\n        else:\n            max_sum = max(prefix[i] + max_sum, prefix[i] + max_sum)\n    return max_sum\n\n\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 4))\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 5))\nprint(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 6))",
    "def max_sum_of_increasing_subsequence(prefix, k):\n    if len(prefix) == 0:\n        return 0\n    if k <= 0:\n        return max_sum_of_increasing_subsequence(prefix[1:], k)\n    if k > len(prefix):\n        return max_sum_of_increasing_subsequence(prefix, k-len(prefix))\n    else:\n        return max(prefix[0] + max_sum_of_increasing_subsequence(prefix[1:], k),\n                   prefix[0] + max_sum_of_increasing_subsequence(prefix, k-len(prefix)))\n\n\ndef main():\n    print(max_sum_of_increasing_subsequence([], 0))\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4], 2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_subseq_sum(arr, k):\n    arr = sorted(arr)\n    n = len(arr)\n    if k > n:\n        return -1\n    res = [0] * (n + 1)\n    res[0] = arr[0]\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            if arr[j] > arr[i - 1]:\n                res[i] = max(res[i], res[j] + arr[i - 1])\n        res[i] = max(res[i], arr[i - 1])\n    return res[n]\n\n\nprint(max_subseq_sum([-1, 0, 1, 2, -3, 4], 3))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, k+1):\n            max_sum = max(max_sum, arr[i]+arr[j])\n    return max_sum\n\n\narr = [2, 4, 6, 8, 10]\nk = 5\nprint(max_sum_increasing_subsequence(arr, k))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums: List[int], k: int) -> int:\n        return self.findMaxSumIncreasingSubsequence(nums, 0, k)\n\n    def findMaxSumIncreasingSubsequence(self, nums: List[int], i: int, k: int) -> int:\n        if i == len(nums):\n            return 0\n\n        if i == 0:\n            return nums[i]\n\n        if i == 1:\n            return max(nums[i], nums[i-1] + nums[i-2])\n\n        return max(nums[i-1], nums[i-2] + nums[i])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSumIncreasingSubsequence([1, 2, 3, 4, 5, 6], 2))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n\n    return max_sum + k\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 3\n    print(max_sum_of_increasing_subsequence(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_sum_of_increasing_subsequence(nums, k):\n    # Fill this in.\n    n = len(nums)\n    max_sum = 0\n    max_sum_of_increasing_subsequence_helper(nums, k, n, 0, 0, max_sum)\n    return max_sum\n\ndef max_sum_of_increasing_subsequence_helper(nums, k, n, prev_idx, prev_sum, current_sum):\n    # Base Case\n    if k == 0:\n        if prev_sum == 0:\n            return current_sum\n        else:\n            return prev_sum\n\n    # Recursive Case\n    if k > 0:\n        max_sum_of_increasing_subsequence_helper(nums, k - 1, n, prev_idx + 1, prev_sum + nums[prev_idx], current_sum)\n    return max_sum_of_increasing_subsequence_helper(nums, k, n, prev_idx + 1, prev_sum, current_sum + nums[prev_idx])\n\nprint(max_sum_of_increasing_subsequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5))",
    "class Solution(object):\n    def maxSumIncreasingSubseq(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 0:\n            return 0\n        if k == 0:\n            return nums[0]\n        if len(nums) == 1:\n            return nums[0] + self.maxSumIncreasingSubseq(nums[1:], k)\n\n        max_sum = 0\n        for i in range(len(nums) - 1):\n            cur_sum = nums[i] + self.maxSumIncreasingSubseq(nums[i+1:], k - i)\n            max_sum = max(max_sum, cur_sum)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [2, 7, 11, 15]\n    k = 3\n    print sol.maxSumIncreasingSubseq(nums, k)",
    "# Time: O(n) Space: O(n)\ndef max_subsequence_sum(arr, n, k):\n    if k == 0:\n        return 0\n    if k > n:\n        return -1\n    if k == 1:\n        return max(arr[0], arr[1])\n    if k == 2:\n        return max(arr[0], arr[1] + max(arr[0], arr[2]))\n    if k > 2:\n        return max(max_subsequence_sum(arr, n, k - 2), max_subsequence_sum(arr, n - 1, k - 1))\n\n\nprint(max_subsequence_sum([1, 2, 3], 2, 3))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 0:\n                dp[i][j] = arr[i - 1]\n            elif i > 1 and arr[i - 1] > arr[i - 2]:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j] + arr[i - 2])\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j])\n    return dp[n][k]\n\n\narr = [2, 1, 3, 4, 5]\nk = 3\nprint(max_sum_of_increasing_subsequence(arr, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    # write your code here\n    n = len(arr)\n    max_sum = -1 * float('inf')\n    max_sum_prefix = 0\n    max_sum_postfix = 0\n    i = 0\n    while i < n:\n        if i + k > n:\n            return max_sum\n        max_sum_prefix = max(max_sum_prefix, arr[i] + max_sum_postfix)\n        max_sum_postfix = max(max_sum_postfix, max_sum_prefix)\n        i += 1\n    return max_sum\n\n\narr = [3, 2, 4, 7, 1]\nk = 4\n\nprint(max_sum_of_increasing_subsequence(arr, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    max_sum = 0\n    prefix_sum = 0\n    for i in range(len(arr)):\n        prefix_sum = arr[i] + prefix_sum\n        if k <= i:\n            max_sum = max(prefix_sum, max_sum)\n        else:\n            k -= i\n    return max_sum\n\n\nprint(max_sum_of_increasing_subsequence([2, 3, 4, 5, 6, 7], 3))\nprint(max_sum_of_increasing_subsequence([2, 3, 4, 5, 6, 7], 4))\nprint(max_sum_of_increasing_subsequence([2, 3, 4, 5, 6, 7], 8))",
    "def max_sum_increasing_subsequence(nums, k):\n    # Write your code here\n    dp = [0] * (k + 1)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[i - 1], nums[i] + dp[i - 1])\n    return dp[k]\n\n\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = max(arr[i], prefix_sum[i-1] + arr[i])\n    return prefix_sum[k]\n\nif __name__ == \"__main__\":\n    assert max_sum_of_increasing_subsequence([1,2,3,4,5], 2) == 5\n    assert max_sum_of_increasing_subsequence([1,2,3,4,5], 0) == 0\n    assert max_sum_of_increasing_subsequence([1,2,3,4,5], 1) == 5\n    assert max_sum_of_increasing_subsequence([1,2,3,4,5], 2) == 6\n    assert max_sum_of_increasing_subsequence([1,2,3,4,5], 3) == 7",
    "def max_sum_increasing_subseq(arr, k):\n    if k == 0:\n        return arr[0]\n    arr = sorted(arr)\n    dp = [0] * (k + 1)\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n    for i in range(2, k + 1):\n        dp[i] = max(arr[i - 1] + dp[i - 2], dp[i - 1])\n    return dp[k]\n\nprint(max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 3))\nprint(max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 4))\nprint(max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 5))",
    "class Solution(object):\n    def maxSubSequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 0:\n            return 0\n        prefix = [0] * (k + 1)\n        prefix[0] = nums[0]\n        for i in range(1, len(nums)):\n            prefix[i] = max(prefix[i - 1], nums[i] + prefix[i - 1])\n        return max(prefix)\n\n\nif __name__ == \"__main__\":\n    print(Solution().maxSubSequence([1, 2, 3, 4, 5], 3))",
    "def max_sum_increasing_subseq(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if k == 0:\n        return max(arr[0], arr[1])\n    if k > n:\n        return max_sum_increasing_subseq(arr[1:], k)\n    if k > n - 1:\n        return max(arr[0], max_sum_increasing_subseq(arr[1:], k - 1))\n    return max(arr[0], max_sum_increasing_subseq(arr[1:], k - 1) + arr[k])\n\n\ndef test_max_sum_increasing_subseq():\n    assert max_sum_increasing_subseq([1, 2, 3], 1) == 4\n    assert max_sum_increasing_subseq([1, 2, 3], 2) == 6\n    assert max_sum_increasing_subseq([1, 2, 3], 3) == 9\n    assert max_sum_increasing_subseq([1, 2, 3], 4) == 12\n    assert max_sum_increasing_subseq([1, 2, 3], 5) == 15\n    assert max_sum_increasing_subseq([1, 2, 3], 6) == 18\n    assert max_sum_increasing_subseq([1, 2, 3], 7) == 25\n    assert max_sum_increasing_subseq([1, 2, 3], 8) == 30\n    assert max_sum_increasing_subseq([1, 2, 3], 9) == 36\n    assert max_sum_increasing_subseq([1, 2, 3], 10) == 45\n    assert max_sum_increasing_subseq([1, 2, 3], 11) == 55\n    assert max_sum_increasing_subseq([1, 2, 3], 12) == 70\n    assert max_sum_increasing_subseq([1, 2, 3], 13) == 90\n    assert max_sum_increasing_subseq([1, 2, 3], 14) == 100",
    "class Solution(object):\n    def maxSumIncreasingSubsequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if k == 0:\n            return 0\n        if k == n:\n            return nums[0]\n        if k > n:\n            return nums[0]\n        l = 0\n        r = n - 1\n        if k > n:\n            return nums[0]\n        while l < r:\n            mid = l + (r - l) // 2\n            if nums[mid] > nums[k]:\n                r = mid\n            else:\n                l = mid + 1\n        return max(nums[l], nums[r] + nums[k])",
    "class Solution:\n    def maxSubSeq(self, nums, k):\n        # write your code here\n        if k==0:\n            return 0\n        if k==1:\n            return nums[0]\n        max_sum=0\n        for i in range(1,len(nums)):\n            max_sum=max(max_sum+nums[i],nums[i])\n        return max_sum+k\n\n\nif __name__==\"__main__\":\n    sol=Solution()\n    nums=[1,2,3,4,5,6,7,8]\n    k=5\n    print(sol.maxSubSeq(nums, k))",
    "class Solution:\n    def maxSubSequence(self, nums, k):\n        if k > len(nums):\n            return 0\n\n        res = [0] * (k + 1)\n        res[0] = nums[0]\n\n        for i in range(1, k + 1):\n            for j in range(len(nums)):\n                if j > i:\n                    res[i] = max(res[i], res[j] + nums[j])\n\n        return res[-1]\n\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.maxSubSequence([1, 2, 3, 4, 5], 5) == 5\n    assert s.maxSubSequence([1, 2, 3, 4, 5], 2) == 3\n    assert s.maxSubSequence([1, 2, 3, 4, 5], 1) == 2\n    assert s.maxSubSequence([1, 2, 3, 4, 5], 0) == 0\n    assert s.maxSubSequence([1, 2, 3, 4, 5], 5) == 10",
    "def max_sum_subseq(arr, n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        return max(arr[0] + max_sum_subseq(arr[1:], n - 1), arr[n] + max_sum_subseq(arr[1:], n - 1))\n\n\nif __name__ == '__main__':\n    print(max_sum_subseq([1, 2, 3, 4, 5], 4))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 5))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 6))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 7))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 8))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 9))\n    print(max_sum_subseq([1, 2, 3, 4, 5], 10))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        n = len(nums)\n        prefix = [0] * n\n        prefix[0] = nums[0]\n        for i in range(1, n):\n            prefix[i] = prefix[i - 1] + nums[i]\n\n        result = 0\n        for i in range(1, k):\n            result = max(result, prefix[i] - prefix[i - 1])\n\n        return result\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    k = 4\n    out = 9\n    assert Solution().maxSumIncreasingSubsequence(nums, k) == out",
    "class Solution:\n    def maxSubsequence(self, nums, k):\n        n = len(nums)\n        if n == 0 or k < 0:\n            return 0\n        elif k == 0:\n            return max(nums)\n        else:\n            return max(self.maxSubsequence(nums[:k], k), self.maxSubsequence(nums[k:], n))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSubsequence([], 0))\n    print(s.maxSubsequence([2, 3, 2, 1, 5, 4, 2, 3, 1, 6], 3))",
    "def max_subsequence(arr, k):\n    # Fill this in.\n    n = len(arr)\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(arr[i] + dp[i-1], dp[i-1])\n    for i in range(n-2, -1, -1):\n        dp[i] = max(arr[i] + dp[i+1], dp[i+1])\n    return dp[k]\n\n\narr = [1, 2, 3, 4, 5, 6]\nk = 4\nprint(max_subsequence(arr, k))",
    "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k == 0:\n        return 0\n    if k > n:\n        return max_sum_increasing_subsequence(arr[1:], k)\n    if k == 1:\n        return max(arr[0], arr[1] + max_sum_increasing_subsequence(arr[2:], k - 1))\n    elif k > n - 1:\n        return max(max_sum_increasing_subsequence(arr[1:], k), max_sum_increasing_subsequence(arr[2:], k - 1) + arr[0])\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 5))",
    "class Solution(object):\n    def maxSubSequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return nums[0]\n\n        n = len(nums)\n        dp = [[0 for i in range(k + 1)] for j in range(n)]\n\n        for i in range(n):\n            dp[i][0] = nums[i]\n\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                if j <= i:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i]] + nums[i])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i]] + nums[i])\n\n        return dp[n - 1][k]\n\n\na = Solution()\nprint(a.maxSubSequence([1,2,3,4,5], 2))",
    "class Solution:\n    def maxSumIncreasingSubseq(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n        result = nums[0]\n        for i in range(1, len(nums)):\n            result = max(result, nums[i] + result)\n        return result + k",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums, k):\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n\n        dp = [0 for _ in range(n+1)]\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n\n        for i in range(2, n+1):\n            dp[i] = max(dp[i-1], dp[i-2]+nums[i-1])\n\n        return dp[k]\n\n\n\"\"\"\nTime complexity : O(n^2)\nSpace complexity : O(1)\n\"\"\"",
    "class Solution:\n    def maxSumIncreasingSubseq(self, nums, k):\n        # write your code here\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        for i in range(1, n + 1):\n            for j in range(i):\n                if nums[j] > nums[j + 1]:\n                    dp[i] = max(dp[i], dp[j] + nums[j + 1])\n        return dp[n]\n\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSumIncreasingSubseq([2, 2, 3, 1, 5, 4], 4))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    length = len(arr)\n    if length == 0 or k > length:\n        return 0\n    elif k == 0:\n        return arr[0]\n    else:\n        return max(arr[0], arr[k - 1] + max_sum_of_increasing_subsequence(arr[1:], k - 1))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([-1, 2, -3, 4, -1, 5, 6, 7], 4))",
    "def max_sum_increasing_subsequence(array, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return array[0]\n    max_sum = 0\n    for i in range(1, len(array)):\n        max_sum = max(max_sum + array[i], array[i] + max_sum_increasing_subsequence(array[i:], k - 1))\n    return max_sum\n\n\narray = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(max_sum_increasing_subsequence(array, k))",
    "def max_sum_of_increasing_subseq(arr, k):\n    n = len(arr)\n    max_sum = arr[0]\n\n    for i in range(1, n):\n        if k > i:\n            max_sum = max(max_sum, arr[i] + max_sum_of_increasing_subseq(arr, k-i))\n        else:\n            max_sum = max(max_sum, arr[i])\n    return max_sum\n\n\nprint(max_sum_of_increasing_subseq([1, 2, 3, 4, 5, 6, 7], 3))",
    "def max_sum_subseq(nums, k):\n    if k == 0:\n        return 0\n\n    if k == 1:\n        return nums[0]\n\n    if k == 2:\n        return max(nums[0], nums[1])\n\n    if k > 2:\n        return max(nums[0], max_sum_subseq(nums[1:], k - 1) + nums[k - 2])\n\n    return max(nums[0], max_sum_subseq(nums[1:], k) + nums[k - 1])\n\n\nprint(max_sum_subseq([1, 2, 3, 4, 5], 5))\nprint(max_sum_subseq([1, 2, 3, 4, 5], 3))\nprint(max_sum_subseq([1, 2, 3, 4, 5], 2))\nprint(max_sum_subseq([1, 2, 3, 4, 5], 1))",
    "class Solution(object):\n    def maxSumIncreasingSubsequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        if k == 0:\n            return max(nums)\n        prefix_sum = [0] * (n + 1)\n        prefix_sum[0] = nums[0]\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n        max_sum = 0\n        for i in range(n, 0, -1):\n            for j in range(0, k):\n                if j >= i:\n                    max_sum = max(max_sum, prefix_sum[i] - prefix_sum[j])\n            prefix_sum[i] = max_sum\n        return max(prefix_sum[n])\n\n\ns = Solution()\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 3))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 0))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 4))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 5))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 6))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 7))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 8))\nprint(s.maxSumIncreasingSubsequence([3, 4, 5, 7], 9))",
    "def max_sum_increasing_subsequence(prefix, i, k):\n    if i == 0:\n        return prefix[i]\n    if k > i:\n        return max(prefix[i-1]+max_sum_increasing_subsequence(prefix, i-k, k), prefix[i]+max_sum_increasing_subsequence(prefix, i-k, k))\n    else:\n        return max(prefix[i-1]+max_sum_increasing_subsequence(prefix, i-k+1, k), prefix[i]+max_sum_increasing_subsequence(prefix, i-k+1, k))\n\n\nif __name__ == '__main__':\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 1, 3))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 2, 3))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 4, 3))\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 5, 3))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    n = len(arr)\n    if k > n:\n        return -1\n    if k == 0:\n        return max(arr)\n    arr_sum = [0] * (k + 1)\n    arr_sum[0] = arr[0]\n    for i in range(1, k + 1):\n        arr_sum[i] = max(arr_sum[i - 1] + arr[i], arr_sum[i - 1] + arr[i - 1] + arr[i - 1])\n    return arr_sum[-1]\n\n\ndef max_sum_of_increasing_subsequence_2(arr, k):\n    n = len(arr)\n    if k > n:\n        return -1\n    if k == 0:\n        return max(arr)\n    arr_sum = [0] * (k + 1)\n    arr_sum[0] = arr[0]\n    for i in range(1, k + 1):\n        arr_sum[i] = max(arr_sum[i - 1] + arr[i], arr_sum[i - 1] + arr[i - 1] + arr[i - 1])\n    return arr_sum[-1]\n\n\narr = [2, 6, 8, 10, 12, 15, 16]\nk = 3\nprint(max_sum_of_increasing_subsequence_2(arr, k))",
    "def max_sum_of_increasing_subsequence(arr, k):\n    if k == 0:\n        return arr[0]\n    if k == 1:\n        return arr[0] + arr[1]\n\n    # for each element in the array\n    max_sum_of_increasing_subsequence_arr = [0] * (k + 1)\n    max_sum_of_increasing_subsequence_arr[0] = arr[0]\n    max_sum_of_increasing_subsequence_arr[1] = max(arr[1], max_sum_of_increasing_subsequence_arr[0] + arr[1])\n\n    for i in range(2, k + 1):\n        max_sum_of_increasing_subsequence_arr[i] = max(max_sum_of_increasing_subsequence_arr[i - 1], max_sum_of_increasing_subsequence_arr[i - 2] + arr[i])\n\n    return max_sum_of_increasing_subsequence_arr[k]\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_increasing_subsequence([1, 2, 3, 4, 5], 3))",
    "class Solution:\n    def maxSumIncreasingSubsequence(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        if n <= 1:\n            return 0\n        elif n == 2:\n            return nums[0] + nums[1]\n        if k == 0:\n            return max(nums[0], nums[1])\n        if k == 1:\n            return max(nums[0], nums[1] + nums[2])\n        if k == 2:\n            return max(nums[0], nums[1] + nums[2] + nums[3])\n        if k > 2:\n            return self.maxSumIncreasingSubsequence(nums[1:], k)\n        else:\n            return self.maxSumIncreasingSubsequence(nums[1:], k - 1)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 0) == 1\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 1) == 2\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 2) == 3\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 3) == 4\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 4) == 5\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 5) == 6\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 6) == 7\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 7) == 8\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 8) == 9\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 9) == 10\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 10) == 11\n    assert sol.maxSumIncreasingSubsequence([1, 2, 3], 11) == 12"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}