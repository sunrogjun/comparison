{
  "problem": {
    "task_id": "MBPP/80",
    "prompt": "Write a function to find the nth tetrahedral number.",
    "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
    "test_list": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ],
    "challenge_test_list": [],
    "problem_id": 69
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution:\n    def nthTetrahedralNumber(self, n: int) -> int:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            return 22\n        if n == 24:\n            return 23\n        if n == 25:\n            return 24\n        if n == 26:\n            return 25\n        if n == 27:\n            return 26\n        if n == 28:\n            return 27\n        if n == 29:\n            return 28\n        if n == 30:\n            return 29\n        if n == 31:\n            return 30\n        if n == 32:\n            return 31\n        if n == 33:\n            return 32\n        if n == 34:\n            return 33\n        if n == 35:\n            return 34\n        if n == 36:\n            return 35\n        if n == 37:\n            return 36\n        if n == 38:\n            return 37\n        if n == 39:\n            return 38\n        if n == 40:\n            return 39\n        if n == 41:\n            return 40\n        if n == 42:\n            return 41\n        if n == 43:\n            return 42\n        if n == 44:\n            return 43\n        if n",
    "class Solution(object):\n    def find_nth_tetrahedral(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            n = -n\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 9\n        else:\n            return self.find_nth_tetrahedral(n - 1) + self.find_nth_tetrahedral(n - 2) + self.find_nth_tetrahedral(n - 3)",
    "from math import sqrt, pi, sin, cos\n\ndef tetrahedral(n):\n    a = int(sqrt(n))\n    b = int(2*pi*a)\n    c = int(n-a)\n    return a*b*c\n\ndef main():\n    n = int(input(\"Enter the number of tetrahedra: \"))\n    print(tetrahedral(n))\n\nif __name__ == \"__main__\":\n    main()",
    "def tetrahedron_number(n):\n    if n < 3:\n        return n\n    return (tetrahedron_number(n - 1) + tetrahedron_number(n - 2)) % 100007\n\n\nif __name__ == \"__main__\":\n    print(tetrahedron_number(3))",
    "def nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # O(n^2) time | O(n) space\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41",
    "import math\n\n\ndef tetrahedral(n):\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n\n    return math.prod([tetrahedral(n - 1), tetrahedral(n - 2), tetrahedral(n - 3)])\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(1))\n    print(tetrahedral(2))\n    print(tetrahedral(3))\n    print(tetrahedral(4))\n    print(tetrahedral(5))\n    print(tetrahedral(6))\n    print(tetrahedral(7))\n    print(tetrahedral(8))",
    "def find_tetrahedral(n):\n    a, b, c = 0, 0, 0\n    for i in range(n):\n        a, b, c = b, c, a+b+c\n    return a\n\nif __name__ == \"__main__\":\n    print(find_tetrahedral(3))\n    print(find_tetrahedral(4))\n    print(find_tetrahedral(5))\n    print(find_tetrahedral(6))\n    print(find_tetrahedral(7))\n    print(find_tetrahedral(8))\n    print(find_tetrahedral(9))\n    print(find_tetrahedral(10))",
    "def find_tetrahedron(n):\n    tetrahedron = 1\n    for i in range(2, n+1):\n        tetrahedron = tetrahedron * (2*i - 1)\n\n    return tetrahedron\n\n\nprint(find_tetrahedron(4))",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n\n    return tetrahedral(n - 1) + tetrahedral(n - 2) + tetrahedral(n - 3) + tetrahedral(n - 4)\n\n\nprint(tetrahedral(8))\nprint(tetrahedral(9))\nprint(tetrahedral(10))\nprint(tetrahedral(11))\nprint(tetrahedral(12))\nprint(tetrahedral(13))\nprint(tetrahedral(14))\nprint(tetrahedral(15))\nprint(tetrahedral(16))\nprint(tetrahedral(17))\nprint(tetrahedral(18))\nprint(tetrahedral(19))\nprint(tetrahedral(20))\nprint(tetrahedral(21))\nprint(tetrahedral(22))\nprint(tetrahedral(23))\nprint(tetrahedral(24))\nprint(tetrahedral(25))\nprint(tetrahedral(26))\nprint(tetrahedral(27))\nprint(tetrahedral(28))\nprint(tetrahedral(29))\nprint(tetrahedral(30))\nprint(tetrahedral(31))\nprint(tetrahedral(32))\nprint(tetrahedral(33))\nprint(tetrahedral(34))\nprint(tetrahedral(35))\nprint(tetrahedral(36))\nprint(tetrahedral(37))\nprint(tetrahedral(38))\nprint(tetrahedral(39))\nprint(tetrahedral(40))\nprint(tetrahedral(41))\nprint(tetrahedral(42))\nprint(tetrahedral(43))\nprint(tetrahedral(44))\nprint(tetrahedral(45))\nprint(tetrahedral(46))\nprint(tetrahedral(47))\nprint",
    "def nth_tetrahedral(n):\n    return 3 * n + 1\n\n\ndef main():\n    print(nth_tetrahedral(5))\n    print(nth_tetrahedral(10))\n    print(nth_tetrahedral(15))\n\n\nif __name__ == '__main__':\n    main()",
    "def tetrahedral(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n\n    return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3) + tetrahedral(n-4)",
    "import math\n\ndef nth_tetrahedral(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 1\n    elif n == 3:\n        return 1 + 2 + 1\n    elif n == 4:\n        return 1 + 3 + 1\n    elif n == 5:\n        return 1 + 4 + 1\n    elif n == 6:\n        return 1 + 5 + 1\n    elif n == 7:\n        return 1 + 6 + 1\n    elif n == 8:\n        return 1 + 7 + 1\n    elif n == 9:\n        return 1 + 8 + 1\n    elif n == 10:\n        return 1 + 9 + 1\n    elif n == 11:\n        return 1 + 10 + 1\n    elif n == 12:\n        return 1 + 11 + 1\n    elif n == 13:\n        return 1 + 12 + 1\n    elif n == 14:\n        return 1 + 13 + 1\n    elif n == 15:\n        return 1 + 14 + 1\n    elif n == 16:\n        return 1 + 15 + 1\n    elif n == 17:\n        return 1 + 16 + 1\n    elif n == 18:\n        return 1 + 17 + 1\n    elif n == 19:\n        return 1 + 18 + 1\n    elif n == 20:\n        return 1 + 19 + 1\n    elif n == 21:\n        return 1 + 20 + 1\n    elif n == 22:\n        return 1 + 21 + 1\n    elif n == 23:\n        return 1 + 22 + 1\n    elif n == 24:\n        return 1 + 23 + 1\n    elif n == 25:\n        return 1 + 24 + 1\n    elif n == 26:\n        return 1 + 25 + 1\n    elif n == 27:\n        return 1 + 26 + 1\n    elif n == 28:\n        return 1 + 27 + 1\n    elif n == 29:\n        return 1 + 28 + 1\n    elif n == 30:\n        return 1 + 29 + 1\n    elif n == 31:\n        return 1 + 30 + 1\n    elif n == 32:\n        return 1 + 31 + 1\n    elif n == 33:\n        return 1 + 32 + 1\n    elif n == 34:",
    "def find_nth_tetrahedral(n):\n    if n == 1:\n        return 1\n    else:\n        return n + find_nth_tetrahedral(n-1)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_tetrahedral(3))",
    "def find_nth_tetrahedral_number(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    elif n==6:\n        return 5\n    elif n==7:\n        return 6\n    elif n==8:\n        return 7\n    elif n==9:\n        return 8\n    elif n==10:\n        return 9\n    elif n==11:\n        return 10\n    elif n==12:\n        return 11\n    elif n==13:\n        return 12\n    elif n==14:\n        return 13\n    elif n==15:\n        return 14\n    elif n==16:\n        return 15\n    elif n==17:\n        return 16\n    elif n==18:\n        return 17\n    elif n==19:\n        return 18\n    elif n==20:\n        return 19\n    elif n==21:\n        return 20\n    elif n==22:\n        return 21\n    elif n==23:\n        return 22\n    elif n==24:\n        return 23\n    elif n==25:\n        return 24\n    elif n==26:\n        return 25\n    elif n==27:\n        return 26\n    elif n==28:\n        return 27\n    elif n==29:\n        return 28\n    elif n==30:\n        return 29\n    elif n==31:\n        return 30\n    elif n==32:\n        return 31\n    elif n==33:\n        return 32\n    elif n==34:\n        return 33\n    elif n==35:\n        return 34\n    elif n==36:\n        return 35\n    elif n==37:\n        return 36\n    elif n==38:\n        return 37\n    elif n==39:\n        return 38\n    elif n==40:\n        return 39\n    elif n==41:\n        return 40\n    elif n==42:\n        return 41\n    elif n==43:\n        return 42\n    elif n==44:\n        return 43\n    elif n==45:\n        return 44",
    "def tetrahedron(n):\n    return n**3 + n**2 + n + 1\n\nprint(tetrahedron(12))",
    "def tetrahedral_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n",
    "import math\n\ndef nth_tetrahedral(n):\n    return math.sqrt((n**2) - (4*(n**2) - 6*(n**2) - 2*(n**2)))\n\nprint(nth_tetrahedral(4))\nprint(nth_tetrahedral(6))\nprint(nth_tetrahedral(8))\nprint(nth_tetrahedral(10))\nprint(nth_tetrahedral(12))\nprint(nth_tetrahedral(14))\nprint(nth_tetrahedral(16))\nprint(nth_tetrahedral(18))\nprint(nth_tetrahedral(20))\nprint(nth_tetrahedral(24))\nprint(nth_tetrahedral(28))\nprint(nth_tetrahedral(32))\nprint(nth_tetrahedral(36))\nprint(nth_tetrahedral(40))\nprint(nth_tetrahedral(44))\nprint(nth_tetrahedral(48))\nprint(nth_tetrahedral(56))\nprint(nth_tetrahedral(64))\nprint(nth_tetrahedral(72))\nprint(nth_tetrahedral(84))\nprint(nth_tetrahedral(96))\nprint(nth_tetrahedral(108))\nprint(nth_tetrahedral(112))\nprint(nth_tetrahedral(124))\nprint(nth_tetrahedral(128))\nprint(nth_tetrahedral(160))\nprint(nth_tetrahedral(192))\nprint(nth_tetrahedral(256))\nprint(nth_tetrahedral(320))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_tetrahedral(384))\nprint(nth_",
    "def tetrahedral(n):\n    return n*(n+1)*(2*n+1)//6\n\n\nprint(tetrahedral(6))",
    "class Solution:\n    def nthTetrahedralNumber(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42\n        if n == 43:\n            return 43\n        if n",
    "def tetrahedral_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 + 2\n    if n == 3:\n        return 1 + 2 + 3\n    if n == 4:\n        return 1 + 2 + 3 + 4\n    if n == 5:\n        return 1 + 2 + 3 + 4 + 5\n    if n == 6:\n        return 1 + 2 + 3 + 4 + 5 + 6\n    if n == 7:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7\n    if n == 8:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    if n == 9:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral_number(6))",
    "from typing import List\n\n\ndef tetrahedral(n: int) -> int:\n    if n <= 3:\n        return n\n    return tetrahedral(n - 1) + tetrahedral(n - 2) + tetrahedral(n - 3)\n\n\nif __name__ == \"__main__\":\n    assert tetrahedral(1) == 1\n    assert tetrahedral(2) == 2\n    assert tetrahedral(3) == 3\n    assert tetrahedral(4) == 6\n    assert tetrahedral(5) == 9\n    assert tetrahedral(6) == 12\n    assert tetrahedral(7) == 15\n    assert tetrahedral(8) == 18\n    assert tetrahedral(9) == 21\n    assert tetrahedral(10) == 28\n    assert tetrahedral(11) == 36\n    assert tetrahedral(12) == 45\n    assert tetrahedral(13) == 55\n    assert tetrahedral(14) == 89\n    assert tetrahedral(15) == 144\n    assert tetrahedral(16) == 288\n    assert tetrahedral(17) == 384\n    assert tetrahedral(18) == 488\n    assert tetrahedral(19) == 588\n    assert tetrahedral(20) == 688\n    assert tetrahedral(21) == 788\n    assert tetrahedral(22) == 888\n    assert tetrahedral(23) == 988\n    assert tetrahedral(24) == 1088\n    assert tetrahedral(25) == 1188\n    assert tetrahedral(26) == 1288\n    assert tetrahedral(27) == 1388\n    assert tetrahedral(28) == 1488\n    assert tetrahedral(29) == 1588\n    assert tetrahedral(30) == 1688\n    assert tetrahedral(31) == 1788\n    assert tetrahedral(32) == 1888\n    assert tetrahedral(33) == 1988\n    assert tetrahedral(34) == 2088\n    assert tetrahedral(35) == 2188\n    assert tetrahedral(36) == 2288\n    assert tetrahedral(37) == 2388\n    assert tetrahedral(38)",
    "def find_tetrahedral(n):\n    tetrahedra = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return tetrahedra[n-1]",
    "def tetrahedral(n):\n    tetrahedra = [0, 0, 0]\n    tetrahedra[n - 1] = tetrahedra[n - 2] + tetrahedra[n - 3]\n    return tetrahedra[n - 1]\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(5))",
    "def nth_tetrahedral(n):\n    # Write your code here\n    return n*n*n\n\n\nprint(nth_tetrahedral(1))\nprint(nth_tetrahedral(2))\nprint(nth_tetrahedral(3))\nprint(nth_tetrahedral(4))",
    "def tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3)",
    "import math\n\ndef nth_tetrahedral(n):\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))",
    "def tetrahedral(n):\n    return (n**3 + n**2 - n - 1)**(1/3)\n\ndef main():\n    print(tetrahedral(int(input())))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def nthTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = [0, 1, 1]\n        b = [0, -1, 1]\n        c = [1, 0, -1]\n        d = [-1, 1, 0]\n        e = [1, -1, 0]\n        f = [-1, 0, 1]\n        return a[n-1] + b[n-1] + c[n-1] + d[n-1] + e[n-1] + f[n-1]",
    "def tetrahedral(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 4\n    if n==3:\n        return 9\n    if n==4:\n        return 16\n    if n==5:\n        return 25\n    if n==6:\n        return 36\n    if n==7:\n        return 49\n    if n==8:\n        return 64\n    if n==9:\n        return 81\n\nprint(tetrahedral(10))\nprint(tetrahedral(11))\nprint(tetrahedral(12))\nprint(tetrahedral(13))\nprint(tetrahedral(14))\nprint(tetrahedral(15))\nprint(tetrahedral(16))\nprint(tetrahedral(17))\nprint(tetrahedral(18))\nprint(tetrahedral(19))\nprint(tetrahedral(20))",
    "def tetrahedral(n):\n    return n*(n+1)*(2*n+1)//6\n\nif __name__ == \"__main__\":\n    print(tetrahedral(6))",
    "def nth_tetrahedral(n):\n    return n * (n + 1) * (2 * n + 1) * (3 * n + 1) / 6\n\n\nprint(nth_tetrahedral(3))",
    "def find_tetrahedral(n):\n    return n ** 3\n\nprint(find_tetrahedral(3))",
    "def tetrahedral(n):\n    # Write your code here\n    return n**3\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(4))",
    "def tetrahedral(n):\n    return (n * (n + 1)) // 2\n\n\ndef tetrahedral2(n):\n    return (n * (n + 2)) // 3\n\n\ndef tetrahedral3(n):\n    return (n * (n + 3)) // 4\n\n\ndef tetrahedral4(n):\n    return (n * (n + 4)) // 5",
    "def tetrahedral_number(n):\n    if n == 1:\n        return 0\n    else:\n        return (n+1)*(n+2)*(n+3)//6\n\n\nprint(tetrahedral_number(3))",
    "from math import sqrt\n\ndef tetrahedral(n):\n    # Find the nth tetrahedral number\n    return (n * (n + 1) * (2 * n + 1) * (3 * n + 1)) / 6\n\n\ndef main():\n    print(tetrahedral(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def tetrahedral(n):\n    # Write your code here\n    tetrahedra = []\n    for i in range(1, n+1):\n        tetrahedra.append(i * (i + 1) / 2)\n    return sum(tetrahedra)\n\n\nprint(tetrahedral(5))",
    "def nth_tetrahedral(n):\n    # Write your code here\n    i = 1\n    while i < n:\n        i += 1\n        print(i)\n\n\nnth_tetrahedral(5)",
    "def nth_tetrahedral(n):\n    # Write your code here\n    return (n + 1)",
    "def tetrahedron(n):\n    return n * (n + 1) / 2\n\n\ndef main():\n    print(tetrahedron(5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def tetrahedral(n):\n    # Write your code here.\n    return (n*(n+1)*(2*n+1)*(3*n+1))/6\n\nprint(tetrahedral(3))",
    "def tetrahedral(n):\n    tetrahedra = [0, 1, 1, 1, 1, 2, 2, 2, 2, 2]\n    return tetrahedra[n]",
    "class Solution:\n    def nthTetrahedralNumber(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            return 11\n        if n == 23:\n            return 12\n        if n == 24:\n            return 12\n        if n == 25:\n            return 13\n        if n == 26:\n            return 13\n        if n == 27:\n            return 14\n        if n == 28:\n            return 14\n        if n == 29:\n            return 15\n        if n == 30:\n            return 15\n        if n == 31:\n            return 16\n        if n == 32:\n            return 16\n        if n == 33:\n            return 17\n        if n == 34:\n            return 17\n        if n == 35:\n            return 18\n        if n == 36:\n            return 18\n        if n == 37:\n            return 19\n        if n == 38:\n            return 19\n        if n == 39:\n            return 20\n        if n == 40:\n            return 20\n        if n == 41:\n            return 21\n        if n == 42:\n            return 21\n        if n == 43:\n            return 22\n        if n",
    "def tetrahedral(n):\n    tetrahedra = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 193, 196, 197, 198, 199, 195, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,",
    "def find_tetrahedral_number(n):\n    if n == 0:\n        return 0\n    else:\n        return 3*n + 1",
    "def tetrahedral_number(n):\n    tetrahedra = {\n        1: 1,\n        2: 1,\n        3: 1,\n        4: 2,\n        5: 4,\n        6: 8,\n        7: 16,\n        8: 32,\n        9: 64,\n        10: 128,\n        11: 256,\n        12: 512,\n        13: 1024,\n        14: 2048,\n        15: 4096\n    }\n    return tetrahedra[n]\n\nprint(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(10))\nprint(tetrahedral_number(11))\nprint(tetrahedral_number(12))\nprint(tetrahedral_number(13))\nprint(tetrahedral_number(14))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(16))\nprint(tetrahedral_number(17))\nprint(tetrahedral_number(18))\nprint(tetrahedral_number(19))\nprint(tetrahedral_number(20))\nprint(tetrahedral_number(21))\nprint(tetrahedral_number(22))\nprint(tetrahedral_number(23))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(25))\nprint(tetrahedral_number(26))\nprint(tetrahedral_number(27))\nprint(tetrahedral_number(28))\nprint(tetrahedral_number(29))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(31))\nprint(tetrahedral_number(32))\nprint(tetrahedral_number(33))\nprint(tetrahedral_number(34))\nprint(tetrahedral_number(35))\nprint(t",
    "def nth_tetrahedral(n):\n    # Write your code here\n    tetrahedrons = [1, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return tetrahedrons[n-1]",
    "def nth_tetrahedral(n):\n    # Write your code here\n    return (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9)\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral(5))",
    "def nth_tetrahedral(n):\n    return (1 + n * (1 + n * (1 + n * (1 + n * (1 + n * (1 + n * (1 + n * (1 + n * (1 + n * (2 + 2 * (1 + 2 * (1 + 2 * (1 + 2 * (2 + 2)))))))))))))) / 6\n\n\ndef main():\n    print(nth_tetrahedral(5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def nth_tetrahedral(n):\n    # Write your code here\n    tetrahedra = []\n    for i in range(1, n+1):\n        tetrahedra.append(i**3)\n    return tetrahedra[n]\n\nprint(nth_tetrahedral(3))\nprint(nth_tetrahedral(4))\nprint(nth_tetrahedral(5))\nprint(nth_tetrahedral(6))\nprint(nth_tetrahedral(7))\nprint(nth_tetrahedral(8))\nprint(nth_tetrahedral(9))\nprint(nth_tetrahedral(10))\nprint(nth_tetrahedral(11))\nprint(nth_tetrahedral(12))\nprint(nth_tetrahedral(13))\nprint(nth_tetrahedral(14))\nprint(nth_tetrahedral(15))\nprint(nth_tetrahedral(16))\nprint(nth_tetrahedral(17))\nprint(nth_tetrahedral(18))\nprint(nth_tetrahedral(19))\nprint(nth_tetrahedral(20))\nprint(nth_tetrahedral(21))\nprint(nth_tetrahedral(22))\nprint(nth_tetrahedral(23))\nprint(nth_tetrahedral(24))\nprint(nth_tetrahedral(25))\nprint(nth_tetrahedral(26))\nprint(nth_tetrahedral(27))\nprint(nth_tetrahedral(28))\nprint(nth_tetrahedral(29))\nprint(nth_tetrahedral(30))\nprint(nth_tetrahedral(31))\nprint(nth_tetrahedral(32))\nprint(nth_tetrahedral(33))\nprint(nth_tetrahedral(34))\nprint(nth_tetrahedral(35))\nprint(nth_tetrahedral(36))\nprint(nth_tetrahedral(37))\nprint(nth_tetrahedral(38))\nprint(nth_tetrahedral(39))\nprint(n",
    "def tetrahedral_number(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 2\n    elif n == 3:\n        return 1 + 2 + 3\n    elif n == 4:\n        return 1 + 2 + 3 + 4\n    elif n == 5:\n        return 1 + 2 + 3 + 4 + 5\n    elif n == 6:\n        return 1 + 2 + 3 + 4 + 5 + 6\n    elif n == 7:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7\n    elif n == 8:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    elif n == 9:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    elif n == 10:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n    elif n == 11:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n    elif n == 12:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n    elif n == 13:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n    elif n == 14:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n    elif n == 15:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\n    elif n == 16:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\n    elif n == 17:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\n    elif n == 18:\n        return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 +",
    "class Solution(object):\n    def nthTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return -1\n\n        a = [1, 2, 3]\n        b = [4, 5, 6]\n        c = [7, 8, 9]\n\n        for i in range(n - 1):\n            a = b\n            b = c\n            c = a\n\n        return a[n - 1]",
    "def tetrahedral(n):\n    a = n // 3\n    b = n - a * 3\n    c = n - (a + b) * 3\n    return a + b + c\n\nprint(tetrahedral(3))",
    "def find_nth_tetrahedral(n, a, b, c):\n    return a*b*c + n\n\n\nprint(find_nth_tetrahedral(2, 2, 2, 2))\nprint(find_nth_tetrahedral(2, 3, 4, 5))\nprint(find_nth_tetrahedral(2, 3, 4, 5))\nprint(find_nth_tetrahedral(2, 4, 4, 4))",
    "def tetrahedral(n):\n    return sum([i**3 for i in range(1, n+1)])\n\nprint(tetrahedral(1))\nprint(tetrahedral(2))\nprint(tetrahedral(3))\nprint(tetrahedral(4))\nprint(tetrahedral(5))\nprint(tetrahedral(6))\nprint(tetrahedral(7))\nprint(tetrahedral(8))\nprint(tetrahedral(9))",
    "def find_tetrahedral(n):\n    n = int(n)\n    tetrahedra = [0] * (n + 1)\n    tetrahedra[0] = 1\n    tetrahedra[1] = 2\n    tetrahedra[2] = 4\n    for i in range(3, n + 1):\n        tetrahedra[i] = tetrahedra[i - 1] + tetrahedra[i - 2] + tetrahedra[i - 3]\n    return tetrahedra[n]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_tetrahedral(n))",
    "def tetrahedral(n):\n    if n <= 0:\n        raise ValueError('n must be > 0')\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return",
    "def nth_tetrahedral(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 9\n    if n == 5:\n        return 12\n    if n == 6:\n        return 15\n    if n == 7:\n        return 18\n    if n == 8:\n        return 21\n    if n == 9:\n        return 24\n    if n == 10:\n        return 27\n    if n == 11:\n        return 30\n    if n == 12:\n        return 38\n    if n == 13:\n        return 42\n    if n == 14:\n        return 49\n    if n == 15:\n        return 54\n    if n == 16:\n        return 56\n    if n == 17:\n        return 60\n    if n == 18:\n        return 69\n    if n == 19:\n        return 81\n    if n == 20:\n        return 89\n    if n == 21:\n        return 100\n    if n == 22:\n        return 110\n    if n == 23:\n        return 120\n    if n == 24:\n        return 150\n    if n == 25:\n        return 180\n    if n == 26:\n        return 220\n    if n == 27:\n        return 230\n    if n == 28:\n        return 240\n    if n == 29:\n        return 260\n    if n == 30:\n        return 280\n    if n == 31:\n        return 300\n    if n == 32:\n        return 310\n    if n == 33:\n        return 320\n    if n == 34:\n        return 330\n    if n == 35:\n        return 340\n    if n == 36:\n        return 350\n    if n == 37:\n        return 360\n    if n == 38:\n        return 370\n    if n == 39:\n        return 380\n    if n == 40:\n        return 390\n    if n == 41:\n        return 400\n    if n == 42:\n        return 410\n    if n == 43:\n        return 420\n    if n == 44:\n        return 4",
    "def tetrahedral_number(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n ==",
    "def tetrahedral(n):\n    return (n*(n+1))//2\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(3))\n    print(tetrahedral(5))\n    print(tetrahedral(10))\n    print(tetrahedral(15))\n    print(tetrahedral(20))\n    print(tetrahedral(25))\n    print(tetrahedral(30))\n    print(tetrahedral(35))\n    print(tetrahedral(40))\n    print(tetrahedral(45))\n    print(tetrahedral(50))\n    print(tetrahedral(55))\n    print(tetrahedral(60))\n    print(tetrahedral(65))\n    print(tetrahedral(70))\n    print(tetrahedral(75))\n    print(tetrahedral(80))\n    print(tetrahedral(85))\n    print(tetrahedral(90))\n    print(tetrahedral(100))\n    print(tetrahedral(105))\n    print(tetrahedral(120))\n    print(tetrahedral(150))\n    print(tetrahedral(160))\n    print(tetrahedral(170))\n    print(tetrahedral(170))",
    "import math\n\ndef tetrahedral_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tetrahedral_num(n-1) + tetrahedral_num(n-2) + tetrahedral_num(n-3)\n\nprint(tetrahedral_num(int(input(\"Enter the number of tetrahedral numbers: \"))))",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n\n    return (3*tetrahedral(n-1)+2*tetrahedral(n-2)\n            +3*tetrahedral(n-3))\n\n\nif __name__ == '__main__':\n    print(tetrahedral(5))",
    "def nth_tetrahedral(n):\n    tetrahedra = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return tetrahedra[n-1]\n\nprint(nth_tetrahedral(4))",
    "def nth_tetrahedral(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n ==",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 12\n    if n == 7:\n        return 18\n    if n == 8:\n        return 24\n    if n == 9:\n        return 32\n    if n == 10:\n        return 48\n    if n == 11:\n        return 64\n    if n == 12:\n        return 96\n    if n == 13:\n        return 128\n    if n == 14:\n        return 160\n    if n == 15:\n        return 192\n    if n == 16:\n        return 288\n    if n == 17:\n        return 384\n    if n == 18:\n        return 456\n    if n == 19:\n        return 576\n    if n == 20:\n        return 688\n    if n == 21:\n        return 784\n    if n == 22:\n        return 888\n    if n == 23:\n        return 988\n    if n == 24:\n        return 1088\n    if n == 25:\n        return 1188\n    if n == 26:\n        return 1288\n    if n == 27:\n        return 1388\n    if n == 28:\n        return 1488\n    if n == 29:\n        return 1588\n    if n == 30:\n        return 1688\n    if n == 31:\n        return 1788\n    if n == 32:\n        return 1888\n    if n == 33:\n        return 1988\n    if n == 34:\n        return 2088\n    if n == 35:\n        return 2188\n    if n == 36:\n        return 2288\n    if n == 37:\n        return 2388\n    if n == 38:\n        return 2488\n    if n == 39:\n        return 2588\n    if n == 40:\n        return 2688\n    if n == 41:\n        return 2788\n    if n == 42:\n        return 2888\n    if n == 43:\n        return 2988",
    "def tetrahedral(n):\n    # Write your code here\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return 3\n\nprint(tetrahedral(5))\nprint(tetrahedral(6))\nprint(tetrahedral(8))",
    "def tetrahedral(n):\n\treturn ((n-1)**2 + n**3)**(1/3)\n\nif __name__ == '__main__':\n\tprint(tetrahedral(int(input())))",
    "def tetrahedral(n):\n    return n*(n+1)/2\n\n\ndef tetrahedral2(n):\n    return n*(n+1)/3\n\n\ndef tetrahedral3(n):\n    return n*(n+1)/4\n\n\ndef tetrahedral4(n):\n    return n*(n+1)/5\n\n\ndef tetrahedral5(n):\n    return n*(n+1)/6\n\n\ndef tetrahedral6(n):\n    return n*(n+1)/7\n\n\ndef tetrahedral7(n):\n    return n*(n+1)/8\n\n\ndef tetrahedral8(n):\n    return n*(n+1)/9\n\n\ndef tetrahedral9(n):\n    return n*(n+1)/10\n\n\ndef tetrahedral10(n):\n    return n*(n+1)/11\n\n\nif __name__ == '__main__':\n    print(tetrahedral(8))\n    print(tetrahedral(11))\n    print(tetrahedral(13))\n    print(tetrahedral(15))\n    print(tetrahedral(17))\n    print(tetrahedral(19))\n    print(tetrahedral(21))\n    print(tetrahedral(26))\n    print(tetrahedral(29))\n    print(tetrahedral(31))\n    print(tetrahedral(33))\n    print(tetrahedral(35))\n    print(tetrahedral(37))\n    print(tetrahedral(39))\n    print(tetrahedral(41))\n    print(tetrahedral(42))\n    print(tetrahedral(44))\n    print(tetrahedral(45))\n    print(tetrahedral(46))\n    print(tetrahedral(47))\n    print(tetrahedral(48))\n    print(tetrahedral(49))\n    print(tetrahedral(50))\n    print(tetrahedral(51))\n    print(tetrahedral(52))\n    print(tetrahedral(53))\n    print(tetrahedral(54))\n    print(tetrahedral(55))\n    print(tetrahedral(56))",
    "def tetrahedral(n):\n    # Write your code here\n    return (n * (n + 1) * (n + 2) * (n + 3)) / 6\n\nprint(tetrahedral(3))\nprint(tetrahedral(5))\nprint(tetrahedral(10))\nprint(tetrahedral(15))",
    "from math import sqrt\n\ndef tetrahedral(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 3\n\telif n == 3:\n\t\treturn 6\n\telse:\n\t\ta = tetrahedral(n - 1)\n\t\tb = tetrahedral(n - 2)\n\t\tc = tetrahedral(n - 3)\n\t\treturn a * b * c\n\nif __name__ == \"__main__\":\n\tprint(tetrahedral(5))",
    "def tetrahedral(n):\n    # write your code in Python 3.6\n    return (n*(n-1)*(2*n-1)*(3*n-1))/6\n\nprint(tetrahedral(9))",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n    return (3 * n - 1) / 2\n\n\nif __name__ == '__main__':\n    print(tetrahedral(4))\n    print(tetrahedral(5))\n    print(tetrahedral(6))\n    print(tetrahedral(7))\n    print(tetrahedral(8))\n    print(tetrahedral(9))",
    "def tetrahedral(n):\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(3))",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 6\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 8\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 10\n    if n == 17:\n        return 10\n    if n == 18:\n        return 10\n    if n == 19:\n        return 10\n    if n == 20:\n        return 11\n    if n == 21:\n        return 11\n    if n == 22:\n        return 12\n    if n == 23:\n        return 12\n    if n == 24:\n        return 12\n    if n == 25:\n        return 13\n    if n == 26:\n        return 13\n    if n == 27:\n        return 14\n    if n == 28:\n        return 14\n    if n == 29:\n        return 15\n    if n == 30:\n        return 15\n    if n == 31:\n        return 16\n    if n == 32:\n        return 16\n    if n == 33:\n        return 17\n    if n == 34:\n        return 17\n    if n == 35:\n        return 18\n    if n == 36:\n        return 18\n    if n == 37:\n        return 19\n    if n == 38:\n        return 19\n    if n == 39:\n        return 20\n    if n == 40:\n        return 20\n    if n == 41:\n        return 21\n    if n == 42:\n        return 21\n    if n == 43:\n        return 22\n    if n == 44:\n        return 22\n    if n == 45:\n        return 23\n    if n == 46",
    "def tetrahedral(n):\n    return n**3 + n**2 - n + 1\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(2))",
    "def tetrahedral_number(n):\n    num = 1\n    for i in range(n):\n        num = num * 3 + 1\n    return num",
    "def nth_tetrahedral_number(n):\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    for i in range(1, n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d\n\n\nprint(nth_tetrahedral_number(3))",
    "def nth_tetrahedral(n):\n    return (n*(n+1)//2)*(3*n+1)//2",
    "def tetrahedral(n):\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    return 0\n\n\nprint(tetrahedral(int(input())))",
    "def find_nth_tetrahedral(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 22\n    if n == 13:\n        return 24\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 36\n    if n == 18:\n        return 38\n    if n == 19:\n        return 40\n    if n == 20:\n        return 44\n    if n == 21:\n        return 48\n    if n == 22:\n        return 56\n    if n == 23:\n        return 64\n    if n == 24:\n        return 72\n    if n == 25:\n        return 80\n    if n == 26:\n        return 96\n    if n == 27:\n        return 98\n    if n == 28:\n        return 108\n    if n == 29:\n        return 112\n    if n == 30:\n        return 120\n    if n == 31:\n        return 144\n    if n == 32:\n        return 168\n    if n == 33:\n        return 192\n    if n == 34:\n        return 224\n    if n == 35:\n        return 288\n    if n == 36:\n        return 324\n    if n == 37:\n        return 332\n    if n == 38:\n        return 348\n    if n == 39:\n        return 350\n    if n == 40:\n        return 424\n    if n == 41:\n        return 432\n    if n == 42:\n        return 444\n    if n == 43:\n        return 456",
    "def tetrahedral(n):\n    if n < 0:\n        raise ValueError\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 6\n\n    if n == 5:\n        return 8\n\n    if n == 6:\n        return 10\n\n    if n == 7:\n        return 12\n\n    if n == 8:\n        return 14\n\n    if n == 9:\n        return 16\n\n    if n == 10:\n        return 18\n\n    if n == 11:\n        return 20\n\n    raise ValueError\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(3))",
    "def nth_tetrahedral(n):\n    return n*(n+1)*(2*n+1)*(3*n+1)//6\n\nprint(nth_tetrahedral(5))\nprint(nth_tetrahedral(8))\nprint(nth_tetrahedral(13))\nprint(nth_tetrahedral(15))\nprint(nth_tetrahedral(18))\nprint(nth_tetrahedral(20))\nprint(nth_tetrahedral(22))\nprint(nth_tetrahedral(26))\nprint(nth_tetrahedral(30))\nprint(nth_tetrahedral(34))\nprint(nth_tetrahedral(42))\nprint(nth_tetrahedral(48))\nprint(nth_tetrahedral(54))\nprint(nth_tetrahedral(58))\nprint(nth_tetrahedral(60))\nprint(nth_tetrahedral(64))\nprint(nth_tetrahedral(70))\nprint(nth_tetrahedral(80))\nprint(nth_tetrahedral(88))\nprint(nth_tetrahedral(90))\nprint(nth_tetrahedral(100))\nprint(nth_tetrahedral(110))\nprint(nth_tetrahedral(120))\nprint(nth_tetrahedral(130))\nprint(nth_tetrahedral(140))\nprint(nth_tetrahedral(150))\nprint(nth_tetrahedral(160))\nprint(nth_tetrahedral(170))\nprint(nth_tetrahedral(180))\nprint(nth_tetrahedral(181))\nprint(nth_tetrahedral(190))\nprint(nth_tetrahedral(192))\nprint(nth_tetrahedral(195))\nprint(nth_tetrahedral(200))\nprint(nth_tetrahedral(210))\nprint(nth_tetrahedral(220))\nprint(nth_tetrahedral(230))\nprint(nth_tetrahedral(240))\nprint(nth_tetrahedral(251))\nprint(",
    "def tetrahedral(n):\n    tetrahedra = [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4]\n    for i in range(1, n + 1):\n        tetrahedra[i] = tetrahedra[i - 1] + tetrahedra[i - 2] + tetrahedra[i - 3]\n    return tetrahedra[n]\n\n\nprint(tetrahedral(10))",
    "def find_nth_tetrahedral(n):\n    # write your code here\n    tetrahedron = {0:1, 1:1, 2:1, 3:2, 4:2, 5:2, 6:2, 7:2, 8:2, 9:2, 10:2, 11:2, 12:2, 13:2, 14:2, 15:2, 16:2, 17:2, 18:2, 19:2, 20:2, 21:2, 22:2, 23:2, 24:2, 25:2, 26:2, 27:2, 28:2, 29:2, 30:2, 31:2, 32:2, 33:2, 34:2, 35:2, 36:2, 37:2, 38:2, 39:2, 40:2, 41:2, 42:2, 43:2, 44:2, 45:2, 46:2, 47:2, 48:2, 49:2, 50:2, 51:2, 52:2, 53:2, 54:2, 55:2, 56:2, 57:2, 58:2, 59:2, 60:2, 61:2, 62:2, 63:2, 64:2, 65:2, 66:2, 67:2, 68:2, 69:2, 70:2, 71:2, 72:2, 73:2, 74:2, 75:2, 76:2, 77:2, 78:2, 79:2, 80:2, 81:2, 82:2, 83:2, 84:2, 85:2, 86:2, 87:2, 88:2, 89:2, 90:2, 91:2, 92:2, 93:2, 94:2, 95:2, 96:2, 97:2, 98:2, 99:2, 100:2, 101:2, 102:2, 103:2, 104:2, 105:2, 106:2, 107:2, 108:2, 109:2, 110:2, 111:2, 112:2, 113:2, 114:2, 115:2, 116:2, 117:2, 118:2,",
    "def tetrahedral(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    else:\n        return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3) + tetrahedral(n-4)\n\n\nprint(tetrahedral(10))",
    "def tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n\n    return 0\n\n\nif __name__ == '__main__':\n    print(tetrahedral(5))",
    "def tetrahedral(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 + tetrahedral(n - 1) + tetrahedral(n - 2)\n\n\nprint(tetrahedral(5))",
    "def tetrahedral_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 1 + 1\n    elif n == 3:\n        return 1 + 1 + 2\n    elif n == 4:\n        return 1 + 2 + 1\n    elif n == 5:\n        return 1 + 2 + 2 + 1\n    elif n == 6:\n        return 1 + 2 + 3 + 1\n    elif n == 7:\n        return 1 + 2 + 3 + 2\n    elif n == 8:\n        return 1 + 2 + 3 + 3 + 1\n    elif n == 9:\n        return 1 + 2 + 3 + 3 + 2\n    elif n == 10:\n        return 1 + 2 + 3 + 3 + 3 + 1\n    elif n == 11:\n        return 1 + 2 + 3 + 3 + 3 + 2\n    elif n == 12:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 1\n    elif n == 13:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 2\n    elif n == 14:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 1\n    elif n == 15:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 2\n    elif n == 16:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 2\n    elif n == 17:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 1\n    elif n == 18:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 2\n    elif n == 19:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 1\n    elif n == 20:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 2\n    elif n == 21:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 2\n    elif n == 22:\n        return 1 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 1\n    elif n == 23:\n        return 1 + 2 + 3 + 3 + 3",
    "class Solution:\n    # @param A : integer\n    # @param B : integer\n    # @param C : integer\n    # @return an integer\n    def tetrahedralNumber(self, A, B, C):\n        # write your code in Python 3.6\n        if (A == B and A == C):\n            return 3\n        if (B == C and B == A):\n            return 2\n        if (C == A and C == B):\n            return 1\n        if (A == B and C == A):\n            return 0\n        if (B == C and A == A):\n            return 4\n        if (C == A and B == B):\n            return 5\n        if (A == B and C == C):\n            return 6\n        if (B == C and A == B):\n            return 7\n        if (C == A and B == C):\n            return 8\n        if (A == C and B == A):\n            return 9\n        if (B == C and A == B):\n            return 10\n        if (C == B and A == C):\n            return 11\n        if (A == C and B == B):\n            return 12\n        if (B == A and C == A):\n            return 13\n        if (A == B and C == B):\n            return 14\n        if (B == C and A == C):\n            return 15\n        if (A == B and C == A):\n            return 16\n        if (B == A and C == B):\n            return 17\n        if (C == A and B == C):\n            return 18\n        if (A == B and C == A):\n            return 19\n        if (B == A and C == B):\n            return 20\n        if (C == A and B == C):\n            return 21\n        if (A == B and C == C):\n            return 22\n        if (B == A and C == A):\n            return 23\n        if (A == B and C == B):\n            return 24\n        if (A == B and C == C):\n            return 25\n        if (A == B and C == A):\n            return 26\n        if (A == B and C == B):\n            return",
    "def find_tetrahedral(n):\n    if n < 3:\n        return n\n    return (n * (n + 1) * (2 * n + 3)) / 6\n\n\nprint(find_tetrahedral(3))",
    "def tetrahedral(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3) + tetrahedral(n-4)",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n\n    return (n-1) * (n-2) * (n-3) * (n-4)\n\n\ndef main():\n    print(tetrahedral(8))\n\n\nif __name__ == '__main__':\n    main()",
    "def tetrahedral(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    return 0",
    "class Tetrahedral:\n\n    def __init__(self, n):\n        self.n = n\n\n    def tetrahedral(self):\n        return self.n\n\nif __name__ == \"__main__\":\n    t = Tetrahedral(2)\n    print(t.tetrahedral())",
    "def tetrahedral(n):\n    return sum(range(1, n+1))\n\nprint(tetrahedral(5))",
    "def tetrahedral(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3)\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral(7))",
    "def tetrahedral(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 16\n    else:\n        return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3)\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print(i, tetrahedral(i))",
    "def tetrahedral(n):\n    return int(n**0.5)",
    "import math\n\ndef tetrahedral(n):\n    return n*(n+1)*(2*n+1)//6\n\nprint(tetrahedral(1))",
    "def tetrahedral(n):\n    return n*(n+1)*(n+2)*(2*n+1)\n\nif __name__ == '__main__':\n    print(tetrahedral(5))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}