{
  "problem": {
    "task_id": "MBPP/468",
    "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
    "test_list": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ],
    "challenge_test_list": [],
    "problem_id": 457
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def maximum_product(arr):\n    arr.sort()\n    max_prod = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_prod *= arr[i]\n    return max_prod\n\n\nprint(maximum_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            result = nums[0]\n            for i in range(1, len(nums)):\n                result = max(result, nums[i] * nums[i-1])\n            return result\n\n\ns = Solution()\nprint s.maxProduct([1, 3, 2, -4])",
    "def max_product(array):\n    max_product = 0\n    min_product = array[0]\n    for i in range(1, len(array)):\n        if array[i] > min_product:\n            max_product = max(max_product, array[i] * min_product)\n            min_product = min(min_product, array[i])\n        else:\n            min_product = array[i]\n    return max_product\n\n\nprint(max_product([1, 2, 3, 4, 5]))",
    "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = nums[0]\n        for i in range(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n        return max_prod\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [2, 3, -2, 4]\n    print(s.maxProduct(nums))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([2, 4, 7, 6, 4, 1]))",
    "class Solution:\n    def findMaxProduct(self, nums: list) -> int:\n        n = len(nums)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = nums[i]\n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-nums[i]]+nums[i])\n        return dp[n-1][n-1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.findMaxProduct([-1, 2, 3, -1, -4]) == 9\n    assert s.findMaxProduct([-1, -2, -3]) == 3\n    assert s.findMaxProduct([-1]) == 1\n    assert s.findMaxProduct([]) == 1",
    "def max_product(arr):\n    arr.sort()\n    res = 0\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i-1] > res:\n            res = arr[i] * arr[i-1]\n    return res\n\nprint(max_product([2,3,-1,4,5]))",
    "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        ans = nums[0]\n        for i in range(1, n):\n            ans = max(ans * nums[i], nums[i])\n        return ans",
    "def maximum_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = 0\n    for num in arr:\n        max_product = max(max_product, num * maximum_product(arr[1:]))\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(maximum_product([3, 2, 1]))\n    print(maximum_product([1, 2, 3]))\n    print(maximum_product([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def max_product_increasing_subsequence(arr):\n    max_product = -1\n    max_product_arr = [-1] * len(arr)\n\n    for i in range(len(arr)):\n        max_product_arr[i] = arr[i]\n        max_product = max(max_product, max_product_arr[i] * max_product_arr[i - 1])\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product_increasing_subsequence([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    arr.sort()\n    return arr[len(arr) - 1] * max(arr[0], arr[1])\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, 3, -1, -4, 2, 1, -5, 4]))",
    "def max_product(arr):\n    max_prod = -1\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n            j += 1\n        i += 1\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([-2, -3, -4, -5, -6, -7, -8, -9]))\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([]))\n    print(max_product([-2, -3, -4, -5, -6]))\n    print(max_product([-2, -3, -4, -5, -6, -7]))\n    print(max_product([-2, -3, -4, -5, -6, -7, -8, -9]))",
    "def max_product(arr):\n    # Find the maximum product of the increasing subsequence of the given array\n    if len(arr) == 1:\n        return arr[0]\n\n    product = arr[0]\n    for i in range(1, len(arr)):\n        product = max(product * arr[i], arr[i])\n\n    return product\n\n\nprint(max_product([1, 2, 3, 4, 5]))",
    "def max_product(arr):\n    return max_product_helper(arr, 0)\n\n\ndef max_product_helper(arr, left):\n    if left == len(arr):\n        return arr[left]\n\n    if arr[left] > arr[left - 1]:\n        return max_product_helper(arr, left + 1)\n    else:\n        return max(arr[left], arr[left - 1] * max_product_helper(arr, left + 1))\n\n\narr = [2, 2, 4, 7, 5, 8]\nprint(max_product(arr))\n\narr = [1, 2, 3, 4, 5]\nprint(max_product(arr))\n\narr = [1, 2, 3, 4, 5]\nprint(max_product(arr))\n\narr = [2, 2, 2, 2, 2]\nprint(max_product(arr))\n\narr = [1, 2, 2, 2, 2]\nprint(max_product(arr))\n\narr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nprint(max_product(arr))",
    "class Solution:\n    def maximumProduct(self, nums):\n        # write your code here\n        nums.sort()\n        return max(nums[0] * nums[1] * nums[2] * nums[3], nums[1] * nums[2] * nums[3])",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\narr = [1, 2, 3, 4, 5]\nprint(max_product(arr))",
    "def max_product_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod * arr[i], arr[i])\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    assert max_product_increasing_subsequence([1, 2, 3]) == 12\n    assert max_product_increasing_subsequence([1, 2, 3, 4]) == 24\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5]) == 60\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6]) == 120",
    "def max_product(arr):\n    max_product = 0\n    curr_max = 1\n    for i in range(1, len(arr)):\n        curr_max *= arr[i]\n        if curr_max > max_product:\n            max_product = curr_max\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 17",
    "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] * max_product(arr[1:]), arr[-1] * max_product(arr[:-1]))\n\n\narr = [2, -1, 3, -2, 5, -4]\nprint(max_product(arr))",
    "class Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        dp = [0 for i in range(n + 1)]\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, n + 1):\n            dp[i] = max(nums[i - 1] * dp[i - 2], nums[i - 1] * dp[i - 3])\n\n        return dp[n]",
    "def max_product(nums):\n    if len(nums) < 2:\n        return max(nums)\n    else:\n        return max(nums[0] * max_product(nums[1:]))\n\n\nif __name__ == \"__main__\":\n    print(max_product([1, 2, 3, 4]))\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
    "def max_product(arr):\n    max_prod = 0\n    if len(arr) == 1:\n        return max_prod\n    if arr[0] > 0:\n        max_prod = max(max_prod, arr[0] * max_product(arr[1:]))\n    else:\n        max_prod = max(max_prod, arr[-1] * max_product(arr[1:-1]))\n    return max_prod\n\n\nif __name__ == '__main__':\n    arr = [1, 2, -2, 3, -4, 5, -6]\n    print(max_product(arr))",
    "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    max_product = 0\n    max_product = max(max_product, arr[0] * arr[1])\n\n    for i in range(2, n):\n        max_product = max(max_product, arr[i] * arr[i - 1])\n\n    return max_product\n\n\n\n\n\n\nprint(max_product([-2, 3, -1, 1, 2, 4]))",
    "def max_product_increasing_subsequence(arr):\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod, arr[i] * arr[i - 1])\n    return max_prod\n\n\nprint(max_product_increasing_subsequence([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        max_product = arr[0]\n        for i in range(1, len(arr)):\n            max_product = max(max_product * arr[i], arr[i])\n        return max_product",
    "def max_product(arr):\n    arr.sort()\n    max_prod = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_prod = max(max_prod, arr[i] * arr[i - 1])\n    return max_prod\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(max_product(arr))",
    "def max_product(arr):\n    # Your code here\n    max_product = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\nprint(max_product([5,2,10,9,3]))",
    "def max_product(arr):\n    if len(arr) <= 1:\n        return max(arr)\n    else:\n        max_product_1 = max(arr[0], arr[1])\n        max_product_2 = max(arr[0], arr[1] * arr[2])\n        for i in range(3, len(arr)):\n            max_product_1 = max(max_product_1, arr[i])\n            max_product_2 = max(max_product_2, arr[i] * arr[i - 1])\n        return max(max_product_1, max_product_2)\n\n\nprint(max_product([-2, 1, -3, 4]))",
    "def max_product(arr):\n    max_product = 0\n    if len(arr) == 0:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_product = max(max_product, arr[i] * arr[i - 1])\n        else:\n            max_product = max(max_product, arr[i] * arr[i - 1] * arr[i - 2])\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(max_product(arr))",
    "def max_product(nums):\n    max_prod = nums[0]\n    min_prod = nums[0]\n    for i in range(1, len(nums)):\n        max_prod = max(max_prod * nums[i], nums[i])\n        min_prod = min(min_prod * nums[i], nums[i])\n    return max_prod\n\n\nprint(max_product([-1, -2, -3, 4, -5]))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [3,2,-5,4,7,1]\n    print(max_product(arr))",
    "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_product(arr[:-1]), max_product(arr[1:]))\n\nprint(max_product([-2,-3,4,-1,2,1,5]))",
    "def max_product(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return max(arr[0] * max_product(arr[1:]), arr[0] * max_product(arr[1:-1]))\n\n\nprint(max_product([-2, -1, 0, 3, -5, 2, 4, -1, 5, 1, -2, -3, -4, -5, 2]))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\nprint(max_product([-2, -1, 0, 3, 4, 5, 7]))\nprint(max_product([-2, -1, 0, 3, 4, 5, 7, 8]))\nprint(max_product([-2, -1, 0, 3, 4, 5, 7, 8, 9, 10]))",
    "def max_product(arr):\n    arr.sort()\n    m = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < m:\n            m = arr[i]\n    return m * arr[0]\n\n\ndef main():\n    arr = [2, 4, 6, 8, 10]\n    print(max_product(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max_product(arr):\n    product = 0\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i, -1):\n            product = max(product, arr[i] * arr[j])\n    return product\n\n\narr = [1, 2, 3, 4, 5]\nprint(find_max_product(arr))",
    "def max_product(arr):\n    arr.sort()\n    res = 1\n    for i in range(len(arr)):\n        res = max(res, arr[i] * res)\n    return res\n\n\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def maximum_product_subsequence(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return max(arr[0] * maximum_product_subsequence(arr[1:]), arr[0] * maximum_product_subsequence(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    print(maximum_product_subsequence([1, 2, 3, 4]))",
    "def max_product(arr):\n    max_product = 0\n    current_max_product = 0\n    for i in range(len(arr)):\n        if i == 0:\n            current_max_product = arr[i]\n        elif arr[i] > current_max_product:\n            current_max_product = arr[i]\n        else:\n            current_max_product *= arr[i]\n        max_product = max(max_product, current_max_product)\n    return max_product\n\n\n\nprint(max_product([1,2,3,4,5,6,7,8,9]))\nprint(max_product([1,2,3,4,5,6,7,8,9,10]))\nprint(max_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,140,141,142,143,144,145,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,",
    "def max_product_increasing_subsequence(arr):\n    arr = [0] + arr\n    max_product = 0\n    i = 0\n    j = 1\n    while i < len(arr) - 1:\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i] * arr[j])\n            j += 1\n        i += 1\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product_increasing_subsequence([-1, 2, 3, -4, 5, -6]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = 0\n    max_prod = 0\n\n    for i in range(len(arr)):\n        max_prod = max(max_prod, arr[i] * max_product)\n        max_product = max(max_prod, arr[i] * arr[i])\n\n    return max_prod\n\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([-1, -2, -3, -4, -5, -6, -7, -8]))\nprint(max_product([3, 2, -1, -4, 5]))\nprint(max_product([-3, -2, -1, -4, 5, -6]))\nprint(max_product([-3, -2, -1, -4, 5, -6, 7]))\nprint(max_product([-3, -2, -1, -4, 5, -6, 7, 8]))\nprint(max_product([-3, -2, -1, -4, 5, -6, 7, 8, 9]))\nprint(max_product([-3, -2, -1, -4, 5, -6, 7, 8, 9, 10]))",
    "def max_product(arr):\n    arr.sort()\n    return max(arr[-1] * arr[0] * arr[1] * arr[2], arr[-1] * arr[1] * arr[3] * arr[4], arr[-1] * arr[2] * arr[3] * arr[4])\n\n\nprint(max_product([-2, 1, -3, 4, -1, 2, 1]))",
    "class Solution:\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        max_prod = nums[0]\n        max_prod_2 = nums[0]\n        for i in range(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n            max_prod_2 = max(max_prod_2 * nums[i], nums[i])\n        return max(max_prod, max_prod_2)",
    "def max_product(array):\n    max_product = 0\n    for i in range(len(array)-1):\n        for j in range(i+1, len(array)):\n            if array[i] * array[j] > max_product:\n                max_product = array[i] * array[j]\n    return max_product\n\n\nprint(max_product([3, 4, 5, 6, 7]))\nprint(max_product([2, 2, 2, 3, 4, 5, 6, 7, 8]))",
    "def max_product(arr):\n    n = len(arr)\n    # Initialize all products to zero\n    max_prod = [0] * n\n    max_prod[0] = 1\n    max_prod[1] = 1\n    # Initialize all products to 1\n    for i in range(2, n):\n        max_prod[i] = max_prod[i - 1] * arr[i - 1]\n\n    for i in range(2, n):\n        for j in range(i - 2, -1, -1):\n            max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n\n    return max_prod[n - 1]\n\n\nprint(max_product([-2, -3, 4, -1, 2, 1, -5, 4]))",
    "def max_product(arr):\n    prod_max = 0\n    prod_max_array = [0] * len(arr)\n\n    for i in range(1, len(arr)):\n        prod_max_array[i] = arr[i] * prod_max_array[i - 1]\n        prod_max = max(prod_max, prod_max_array[i])\n\n    return prod_max\n\n\nif __name__ == '__main__':\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))",
    "def max_product_increasing_subsequence(arr):\n    max_product = 0\n    max_prod = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_prod = arr[i]\n            continue\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n        else:\n            max_product = max_prod\n    return max_product\n\n\nprint(max_product_increasing_subsequence([1, 2, 3, 4, 5]))\nprint(max_product_increasing_subsequence([1, 2, 3, 4, 5, 6]))\nprint(max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
    "def find_max_product(arr):\n    max_product = 0\n    min_product = 0\n    max_product_arr = [max_product]*len(arr)\n    min_product_arr = [min_product]*len(arr)\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_product_arr[i] = arr[i]\n        else:\n            min_product_arr[i] = arr[i]\n    for i in range(len(arr)):\n        max_product = max(max_product_arr[i], max_product*min_product_arr[i])\n    return max_product\n\nprint(find_max_product([2, 4, -1, -6, -8, -2, -3, 5, -4, -1]))\nprint(find_max_product([1, 3, -3]))",
    "def maximum_product(arr):\n  max_product = 0\n  current_max_product = 1\n  for i in range(1, len(arr)):\n    current_max_product = max(arr[i], current_max_product * arr[i])\n    max_product = max(current_max_product, max_product)\n  return max_product\n\n\nprint(maximum_product([1, 2, 3, 4]))\nprint(maximum_product([-1, 0, 1, 2, 3, 4]))\nprint(maximum_product([-2, -3, -1, 0, 1, 2, 3, 4]))\nprint(maximum_product([-1, 0, -2, -3, -4]))\nprint(maximum_product([-2, -3, -1, 0, 1, 2, 3, 4]))\nprint(maximum_product([-2, -3, -1, 0, 1, 2, 3, 4, 5]))\nprint(maximum_product([-2, -3, -1, 0, 1, 2, 3, 4, 5, 6, 7]))\nprint(maximum_product([-2, -3, -1, 0, 1, 2, 3, 4, 5, 6, 7]))",
    "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_prod = arr[0]\n    max_prod_val = arr[1]\n    for i in range(2, len(arr)):\n        max_prod = max(max_prod * arr[i], max_prod_val)\n        max_prod_val = max(max_prod_val * arr[i], arr[i])\n    return max_prod\n\nprint(max_product([2, 3, 4, 5]))\nprint(max_product([2, 3, 4, 5, 6]))\nprint(max_product([2, 3, 4, 5, 6, 7]))\nprint(max_product([2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_product([2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def find_max_product(arr):\n    length = len(arr)\n    if length < 2:\n        return 0\n    max_product = 0\n    for i in range(1, length):\n        for j in range(i):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\nprint(find_max_product([-2, 1, -3, 4, -1, 2, 1]))",
    "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n\n        max_product = nums[0]\n        max_product_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_product:\n                max_product = nums[i]\n                max_product_index = i\n\n        max_product_index += 1\n        max_product_index = max_product_index + 1\n\n        max_product = nums[max_product_index]\n        for i in range(max_product_index + 1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n\n        return max_product\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    out = 9\n    res = Solution().maximumProduct(nums)\n    assert res == out",
    "def max_product(nums):\n    prod = nums[0]\n    for i in range(1, len(nums)):\n        prod = max(prod * nums[i], nums[i])\n    return prod\n\n\nprint(max_product([-10, -3, -2, -1, 4, 2, 1, 5]))",
    "def maximum_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = 0\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        if arr[i] < min_product:\n            min_product = arr[i]\n\n    return max_product * min_product\n\n\nif __name__ == \"__main__\":\n    assert maximum_product([1, 2, 3]) == 6\n    assert maximum_product([2, 3, 1]) == 6\n    assert maximum_product([1, 2, 3, 4]) == 24\n    assert maximum_product([3, 2, 1, 4]) == 6",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_prod = nums[0]\n        for i in range(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n        return max_prod\n\na = Solution()\nprint(a.maxProduct([-2, -3, 4, -1, 2, 1]))",
    "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max_prod = nums[0]\n        for i in range(1, n):\n            max_prod = max(max_prod * nums[i], nums[i])\n        return max_prod\n\n\na = Solution()\nprint(a.maximumProduct([-2, -3, 4, -1, 2, 1]))",
    "def max_product(arr):\n    arr.sort()\n    max_arr = [1]*len(arr)\n    for i in range(1,len(arr)):\n        max_arr[i] = arr[i] * max_arr[i-1]\n    return max(max_arr)\n\narr = [1,2,3,4,5]\nprint(max_product(arr))",
    "class Solution:\n    def maxProduct(self, nums):\n        max_product = nums[0]\n        for num in nums[1:]:\n            max_product = max(max_product * num, num)\n        return max_product",
    "def max_product(arr):\n    arr.sort()\n    return max(arr[0] * arr[1] * arr[2] * arr[3], arr[0] * arr[1] * arr[2] * arr[3])\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([-2, -1, -3, -4, -5]))\nprint(max_product([-2, -1, -3, -4, -5, -6]))\nprint(max_product([-2, -1, -3, -4, -5, -6, -7, -8, -9]))\nprint(max_product([-2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\nprint(max_product([-2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\nprint(max_product([-2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))",
    "def max_product(arr):\n    # Fill this in.\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product([1, 2, 3, 4, 5]))",
    "def max_product_increasing_subseq(arr):\n    # Create a stack to store the maximum product of increasing subsequence\n    max_product = 0\n    stack = []\n\n    for element in arr:\n        if not stack:\n            stack.append(element)\n            continue\n\n        # If the element is greater than the stack top\n        if element > stack[-1]:\n            max_product = max(max_product, stack[-1] * stack[-2])\n            stack.pop()\n        else:\n            stack.append(element)\n\n    return max_product\n\n\ndef main():\n    arr = [1, 2, 4, 6, 8]\n    print(max_product_increasing_subseq(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_prod = 0\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n        max_prod = max(max_prod, prod)\n    return max_prod\n\n\nprint(max_product([1, 2, 3, 4, 5]))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        ans = float(\"-inf\")\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                ans = max(ans, nums[i] * nums[j])\n        return ans\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([2, 3, -3]) == 6\n    assert Solution().maxProduct([1, 2, -3]) == 1\n    assert Solution().maxProduct([]) == 0\n    assert Solution().maxProduct([-2, -1]) == 2",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        max_prod = 0\n        max_prod_sum = 0\n        for i in range(len(arr)):\n            max_prod_sum = max(max_prod_sum, arr[i] * max_product(arr[:i] + arr[i+1:]))\n            max_prod = max(max_prod, max_prod_sum)\n        return max_prod\n\nprint(max_product([1, 2, 3, 4]))\nprint(max_product([-1, 0, 1, 2, 3, 4]))\nprint(max_product([-1, 0, 1, 2, -3, 4]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    left = 0\n    right = 0\n    ans = 0\n    while right < len(arr):\n        if arr[right] < arr[left]:\n            ans = max(ans, arr[left] * arr[right])\n            left += 1\n        else:\n            right += 1\n    return ans\n\n\nprint(max_product([3, 4, 5, 7, 2, 1, 6]))\nprint(max_product([3, 1, 2, 4]))\nprint(max_product([4, 2, 1, 6]))\nprint(max_product([2, 2, 2, 2, 2]))\nprint(max_product([2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]))",
    "def max_product_increasing_subsequence(arr):\n    max_product = arr[0] * arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i])\n    return max_product\n\nprint(max_product_increasing_subsequence([-1, -2, -3, -4, -5]))",
    "def max_product(arr):\n    max_prod = arr[0] * arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod, arr[i] * arr[i])\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_product(arr))",
    "def max_product(arr):\n    max_product = 0\n    max_product_arr = []\n    max_product_arr.append(1)\n\n    for i in range(len(arr)):\n        max_product = max(max_product, max_product_arr[i] * arr[i])\n        max_product_arr.append(max_product)\n\n    return max(max_product_arr)\n\n\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def maximum_product(arr):\n    max_prod = 0\n    max_prod_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_prod_num = arr[i]\n            continue\n        for j in range(i, len(arr)):\n            max_prod_num = max(max_prod_num*arr[j], arr[i])\n            if max_prod_num > max_prod:\n                max_prod = max_prod_num\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(maximum_product([1, 2, 3, 4, 5]))",
    "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        max_product = 0\n        for i in range(1, n):\n            max_product = max(max_product, arr[i] * arr[i-1])\n        return max_product\n\nprint(max_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5]))",
    "def max_product(arr):\n    # Write your code here\n    arr.sort()\n    n = len(arr)\n    max_product = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\nprint(max_product([2, 3, 4, 5, 6]))",
    "def maximum_product_of_increasing_subsequence(nums):\n  max_prod = nums[0]\n  for num in nums:\n    max_prod = max(max_prod * num, num)\n  return max_prod\n\nif __name__ == '__main__':\n  nums = [1, 2, 3, 4]\n  print(maximum_product_of_increasing_subsequence(nums))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i] * arr[i - 1])\n    return max_product\n\nprint(max_product([-2, -1, 4, -3, 2, 1, -5]))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n\nprint(max_product([1,2,3,4,5]))",
    "class Solution:\n    def find_max_product(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        product = 1\n        for i in range(len(nums) - 1):\n            product *= nums[i + 1]\n\n        return product\n\n\nif __name__ == \"__main__\":\n    print(Solution().find_max_product([-2, 3, -2, 1, -3, 4, -2, -1, 2, 1, -5, 4]))",
    "def find_max_product(arr):\n    max_prod = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            max_prod = max(max_prod, arr[i]*arr[i+1])\n        else:\n            i += 1\n    return max_prod\n\nprint(find_max_product([1,-2,3,-4,5,6,7,8,9]))\nprint(find_max_product([-2,-1,0,1]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([1,-2,3,-4,5,6,7,8,9]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1,0]))\nprint(find_max_product([-2,-1",
    "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\n\na = Solution()\nprint a.maximumProduct([2, 3, 4, 5, 6, 7])",
    "class Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        m = max(nums)\n        s = 0\n        for i in range(len(nums)):\n            s += nums[i] * m\n            m = max(m, s)\n        return m\n\n\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().maxProduct(nums))",
    "def max_product(arr):\n    arr.sort()\n    if len(arr) < 2:\n        return arr[0]\n    else:\n        return max(arr[0] * max_product(arr[1:]), arr[0] * max_product([arr[1]]))\n\n\nif __name__ == '__main__':\n    arr = [2, 3, -4, 5, -6, 7]\n    print(max_product(arr))",
    "def maximum_product(arr):\n    max_product = 0\n    current_max_product = 1\n    for i in range(len(arr)-1, 0, -1):\n        current_max_product *= arr[i]\n        max_product = max(max_product, current_max_product)\n    return max_product\n\nprint(maximum_product([1,3,4,-2]))",
    "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    max_product_for_subsequence = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        max_product_for_subsequence = max(max_product_for_subsequence, max_product)\n    return max_product_for_subsequence\n\n\nif __name__ == \"__main__\":\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(max_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]))",
    "def maximumProduct(arr):\n    arr.sort()\n    return max(arr[0]*arr[1]*arr[2]*arr[3], arr[0]*arr[1]*arr[3])\n\nprint(maximumProduct([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(maximumProduct([1, 2, 3, 4, 5]))\nprint(maximumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "def max_product(arr):\n    arr.sort()\n    n = len(arr)\n    max_prod = 0\n    for i in range(n-1):\n        max_prod = max(max_prod * arr[i], arr[i+1])\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([5, 10, 20, 30, 40]))",
    "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        i = 0\n        for j in range(len(nums)):\n            if i < len(nums) - 1:\n                if nums[i] < nums[i+1]:\n                    max_prod = max(max_prod, nums[i] * nums[i+1])\n            i += 1\n        return max_prod\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.maximumProduct([-1, 1, -2, 3, 4]))",
    "def max_product(arr):\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([-1, -2, -3, -4, -5, -6]))",
    "def max_product(arr):\n    max_prod = 0\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod*arr[i], arr[i])\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(max_product([-1, -2, -3, -4, -5, -6, -7, -8]))",
    "def max_product(nums):\n    if len(nums) <= 1:\n        return nums[0]\n\n    start, end = 0, len(nums) - 1\n    max_prod = 0\n\n    while start < end:\n        max_prod = max(max_prod, nums[start] * nums[end])\n\n        if nums[start] < nums[end]:\n            start += 1\n        else:\n            end -= 1\n\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    assert max_product([1, 2, 3, 4, 5]) == 15\n    assert max_product([1, 2, 3, 4, 5, 6, 7]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 120\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 120",
    "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return nums[0]\n        result = nums[0]\n        for num in nums[1:]:\n            result = max(result * num, num)\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maximumProduct([-2,1,-3,4])",
    "def maximum_product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        max_prod = max(max_prod * arr[i], arr[i])\n    return max_prod\n\nprint(maximum_product([-1, -2, 3, 4, -1, -2]))",
    "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[0])\n    arr.sort()\n    return max(arr[0] * arr[1], arr[1] * arr[0], arr[0] * arr[2])\n\n\nif __name__ == \"__main__\":\n    print(max_product([-1, -2, -3, -4, -5, -6]))",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n\narr = [3, 1, 2, 4, -1, 5]\nprint(max_product(arr))",
    "def max_product(arr):\n    arr.sort()\n\n    prod_arr = [1] * len(arr)\n    prod_arr[0] = 1\n\n    for i in range(1, len(arr)):\n        prod_arr[i] = arr[i] * prod_arr[i - 1]\n\n    max_product = prod_arr[len(arr) - 1]\n\n    for i in range(len(arr) - 2, -1, -1):\n        max_product = max(max_product, prod_arr[i] * prod_arr[i + 1])\n\n    return max_product\n\n\nprint(max_product([4, 3, 2, -4, 7, 5]))",
    "def max_product(nums):\n    max_product = nums[0]\n    for num in nums[1:]:\n        if num > max_product:\n            max_product = num\n    return max_product\n\nprint(max_product([2,4,1,3,5]))\nprint(max_product([2,4,1,3,5,6]))\nprint(max_product([2,4,1,3,5,7]))\nprint(max_product([2,4,1,3,5,6,7,8]))",
    "def max_product(arr):\n    max_product = 0\n    cur_prod = 1\n    for i in arr:\n        cur_prod *= i\n        max_product = max(max_product, cur_prod)\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print(max_product(arr))",
    "class Solution:\n    def maximumProduct(self, nums):\n        nums.sort()\n        l = len(nums)\n        max_prod = 0\n        for i in range(l - 1):\n            for j in range(i + 1, l):\n                prod = nums[i] * nums[j]\n                if prod > max_prod:\n                    max_prod = prod\n        return max_prod\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, -1, 4, -2, 5]\n    s = Solution()\n    print(s.maximumProduct(arr))",
    "def find_max_product(arr):\n    n = len(arr)\n    max_prod = -float(\"inf\")\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n    return max_prod\n\nprint(find_max_product([-2, -3, -1, 4, -1, 2, 1]))\nprint(find_max_product([-2, -3, -1, 4, -1, 2, 1]))\nprint(find_max_product([-2, -3, -1, 4, -1, 2, 1, 4]))\nprint(find_max_product([-2, -3, -1, 4, -1, 2, 1, 4, 6, 7]))",
    "def max_product(arr):\n    max_product = 0\n    max_product_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product_product:\n                max_product = arr[i] * arr[j]\n                max_product_product = max_product\n    return max_product\n\nprint(max_product([2, 5, -2, 7, -3, 10, 11, -4, 1, -5]))\nprint(max_product([1, -2, 3, 4, 5, -6, 7, -8, 9, -10, -11]))",
    "def maximum_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = 0\n    current_max = 0\n\n    for i in range(1, len(arr)):\n        current_max = max(current_max * arr[i], arr[i])\n        max_product = max(current_max, max_product)\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    assert maximum_product([2, 3, 4]) == 6\n    assert maximum_product([1, 2, 3, 4]) == 9",
    "def max_product(arr):\n    if len(arr) < 2:\n        return max(arr)\n\n    max_prod = arr[0] * max(arr[1:])\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod, arr[i] * arr[i-1])\n\n    return max_prod\n\n\nprint(max_product([-3, -2, -1, 4, -1, -2, -3]))\nprint(max_product([-3, -2, -1, 4, -1, -2, -3, -4]))",
    "def max_product(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    prod = nums[0]\n    for i in range(1, len(nums)):\n        prod = max(prod * nums[i], nums[i])\n    return prod\n\n\nif __name__ == '__main__':\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}