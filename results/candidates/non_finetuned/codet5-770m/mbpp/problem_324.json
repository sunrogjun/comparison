{
  "problem": {
    "task_id": "MBPP/335",
    "prompt": "Write a function to find the sum of arithmetic progression.",
    "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
    "test_list": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ],
    "challenge_test_list": [],
    "problem_id": 324
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    total = 0\n    for i in range(2, n + 1):\n        total += i\n    return total\n\n\ndef main():\n    print(sum_arithmetic_progression(1_000_000))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithmetic_progression(num):\n    total = 0\n    for i in range(1,num):\n        total += i\n    return total\n\nprint(arithmetic_progression(20))",
    "def arithmeticProgressionSum(n, a):\n    return (a * (n + 1))\n\n\ndef main():\n    print(arithmeticProgressionSum(10, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithmetic_progression(n):\n    return n * (n + 1) / 2\n\n\nprint(arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    # Your code here\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(100))",
    "def arithmetic_progression(n):\n    if n == 0:\n        return 0\n    return n + arithmetic_progression(n - 1)\n\n\nprint(arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(10))",
    "def arithmetic_progression(n):\n\tsum = 0\n\tfor i in range(1, n + 1):\n\t\tsum += i\n\treturn sum\n\nprint(arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return n * sum_arithmetic_progression(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(10))\nprint(arithmetic_progression(15))\nprint(arithmetic_progression(20))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(5))",
    "def sum_arithmetic_progression(n):\n    return sum(range(1, n + 1))\n\n\nprint(sum_arithmetic_progression(20))",
    "def arith_progression(n):\n    # Write your code here\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += i\n    return sum_\n\n\nprint(arith_progression(10))",
    "def arithmetic_progression(n):\n    if n <= 1:\n        return n\n    return n + arithmetic_progression(n-1)\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    return sum(range(1, n+1))\n\nif __name__ == '__main__':\n    print(sum_arithmetic_progression(100))",
    "def sum_of_arithmetic_progression(n):\n    return sum(range(1,n+1))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n\n    return sum\n\n\nprint(arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(arithmetic_progression(10))\nprint(arithmetic_progression(100))\nprint(arithmetic_progression(1000))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(5))",
    "def sum_arithmetic_progression(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\n\nprint(sum_arithmetic_progression(10))",
    "def sum_arithmetic_progression(n, start=1, end=10000000):\n    \"\"\"\n    :type n: int\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return start\n    if n == 2:\n        return start + end\n    if n == 3:\n        return start + end + 2\n    if n == 4:\n        return start + end + 2 + 3\n    if n == 5:\n        return start + end + 2 + 3 + 4\n    if n == 6:\n        return start + end + 2 + 3 + 4 + 5\n    if n == 7:\n        return start + end + 2 + 3 + 4 + 5 + 6\n    if n == 8:\n        return start + end + 2 + 3 + 4 + 5 + 6 + 7\n    if n == 9:\n        return start + end + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    if n == 10:\n        return start + end + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n    if start > end:\n        return 0\n    return start + end\n\n\nprint(sum_arithmetic_progression(2))",
    "def sum_arithmetic_progression(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n\ndef main():\n    n = int(input(\"Enter the number of terms: \"))\n    print(\"The sum of arithmetic progression is\", sum_arithmetic_progression(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithmetic_progression(start, end, step):\n    total = 0\n    for i in range(start, end + 1, step):\n        total += i\n    return total\n\n\nprint(arithmetic_progression(1, 100, 1))",
    "def arithmetic_progression(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + arithmetic_progression(n - 1)\n\n\nprint(arithmetic_progression(5))",
    "def sum_of_arithmetic_progression(n):\n    result = 0\n    for i in range(2, n):\n        result += i\n    return result\n\nif __name__ == \"__main__\":\n    print(sum_of_arithmetic_progression(20))",
    "def sum_arithmetic_progression(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(arithmetic_progression(10))",
    "def sum_arithmetic_progression(start, end, step):\n    if end == 1:\n        return start\n    return start + step * (end - start)\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(1, 10, 1))\n    print(sum_arithmetic_progression(10, 20, 2))\n    print(sum_arithmetic_progression(1, 100, 1))",
    "def sum_arithmetic_progression(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(1, 100))",
    "def arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n\n    sum = 1\n    for i in range(2, n + 1):\n        sum = sum + i\n    return sum\n\n\nif __name__ == '__main__':\n    assert arithmetic_progression(10) == 15\n    assert arithmetic_progression(4) == 2\n    assert arithmetic_progression(100) == 965",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(4))",
    "def sum_arithmetic_progression(n):\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    # write your code here\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(10))",
    "def sum_of_arithmetic_progression(start, end):\n    return sum(range(start, end + 1))\n\n\nprint(sum_of_arithmetic_progression(1, 100))",
    "def arithmetic_progression(n):\n    if n <= 1:\n        return n\n    return (n * arithmetic_progression(n - 1))\n\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(5))",
    "def arithmetic_progression(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n\nprint(arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    return (n + 1) * (n + 2) / 3",
    "def arithmetic_progression(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result\n\nprint(arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    while n > 1:\n        sum += n\n        n -= 1\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n\nprint(arithmetic_progression(10))",
    "def arithmetic_progression(start, end):\n    return sum([i for i in range(start, end + 1)])\n\nprint(arithmetic_progression(1, 100))",
    "def arithmetic_progression(n):\n    total = 0\n    i = 1\n    while i <= n:\n        total += i\n        i += 1\n    return total\n\n\ndef test_function():\n    assert arithmetic_progression(1) == 1\n    assert arithmetic_progression(2) == 1\n    assert arithmetic_progression(3) == 2\n    assert arithmetic_progression(4) == 3\n    assert arithmetic_progression(5) == 4\n    assert arithmetic_progression(6) == 5\n    assert arithmetic_progression(7) == 6\n    assert arithmetic_progression(8) == 7\n    assert arithmetic_progression(9) == 8\n    assert arithmetic_progression(10) == 9\n    assert arithmetic_progression(11) == 10\n    assert arithmetic_progression(12) == 11\n    assert arithmetic_progression(13) == 12\n    assert arithmetic_progression(14) == 13\n    assert arithmetic_progression(15) == 14\n    assert arithmetic_progression(16) == 15\n    assert arithmetic_progression(17) == 16\n    assert arithmetic_progression(18) == 17\n    assert arithmetic_progression(19) == 18\n    assert arithmetic_progression(20) == 19\n    assert arithmetic_progression(21) == 20\n    assert arithmetic_progression(22) == 21\n    assert arithmetic_progression(23) == 22\n    assert arithmetic_progression(24) == 23\n    assert arithmetic_progression(25) == 24\n    assert arithmetic_progression(26) == 25\n    assert arithmetic_progression(27) == 26\n    assert arithmetic_progression(28) == 27\n    assert arithmetic_progression(29) == 28\n    assert arithmetic_progression(30) == 29\n    assert arithmetic_progression(31) == 30\n    assert arithmetic_progression(32) == 31\n    assert arithmetic_progression(33) == 32\n    assert arithmetic_progression(34) == 33\n    assert arithmetic_progression(35) == 34\n    assert arithmetic_progression(36) == 35\n    assert arithmetic_progression(37) == 36\n    assert arithmetic_progression(38) == 37\n    assert arithmetic_",
    "def arithmetic_progression(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n\n\ndef main():\n    print(arithmetic_progression(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_arithmetic_progression(n):\n    return n * (n + 1) // 2\n\n\nprint(sum_arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        return n + sum_arithmetic_progression(n - 1)\n\n\nprint(sum_arithmetic_progression(5))",
    "def arithmetic_progression(start, end, step):\n    total = start\n    while total < end:\n        yield total\n        total += step\n\n\ndef test_arithmetic_progression():\n    assert arithmetic_progression(0, 10, 1) == 0\n    assert arithmetic_progression(0, 10, 2) == 1\n    assert arithmetic_progression(0, 10, 3) == 2\n    assert arithmetic_progression(0, 10, 4) == 3\n    assert arithmetic_progression(0, 10, 5) == 4\n    assert arithmetic_progression(0, 10, 6) == 5\n    assert arithmetic_progression(0, 10, 7) == 6\n    assert arithmetic_progression(0, 10, 8) == 7\n    assert arithmetic_progression(0, 10, 9) == 8\n    assert arithmetic_progression(0, 10, 10) == 10",
    "def arithmetic_progression(n):\n    # Your code here\n    sum_ = 0\n    for i in range(1, n + 1):\n        sum_ += i\n    return sum_\n\n\nif __name__ == \"__main__\":\n    assert arithmetic_progression(10) == 12\n    assert arithmetic_progression(20) == 32\n    assert arithmetic_progression(100) == 720",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(5))",
    "def sum_arithmetic_progression(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\n\nprint(sum_arithmetic_progression(10))",
    "def arith_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n\n\nprint(arith_progression(10))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(5))",
    "def arithmetic_progression(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n\nprint(arithmetic_progression(100))",
    "def arithmetic_progression(n):\n\tsum = 0\n\tfor i in range(2, n+1):\n\t\tsum += i\n\treturn sum\n\n\nprint(arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(1))",
    "def sum_arithmetic_progression(n):\n    if n < 1:\n        return 0\n    return (n * (n + 1) // 2) + sum_arithmetic_progression(n - 1)\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(3))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(arithmetic_progression(10))",
    "def arithmetic_progression(n, m):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n\n    return result\n\nprint(arithmetic_progression(1,10))",
    "def arithmetic_progression(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(1000))",
    "def sum_arithmetic_progression(n):\n    return n*(n+1)//2\n\nprint(sum_arithmetic_progression(100))\nprint(sum_arithmetic_progression(1000))\nprint(sum_arithmetic_progression(10000))\nprint(sum_arithmetic_progression(1000000))",
    "def sum_of_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_arithmetic_progression(10))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_arithmetic_progression(100))",
    "def arithmetic_progression(n):\n    if n == 1:\n        return 1\n    else:\n        return n + arithmetic_progression(n - 1)\n\n\nif __name__ == \"__main__\":\n    assert arithmetic_progression(5) == 3\n    assert arithmetic_progression(10) == 6\n    assert arithmetic_progression(100) == 136",
    "def arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\nprint(arithmetic_progression(10))",
    "def arithmetic_progression(num):\n    sum = 0\n    for i in range(1, num + 1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(1))\nprint(arithmetic_progression(10))\nprint(arithmetic_progression(100))\nprint(arithmetic_progression(10000))",
    "def sum_arithmetic_progression(start, end, step):\n    \"\"\"\n    :param start: the start value\n    :type start: int\n    :param end: the end value\n    :type end: int\n    :param step: the step value\n    :type step: int\n    :return: the sum of arithmetic progression\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(start, end + 1, step):\n        result += i\n    return result\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(sum_arithmetic_progression(0, 100, 1))\n    print(sum_arithmetic_progression(1, 100, 1))\n    print(sum_arithmetic_progression(0, 100, 2))\n    print(sum_arithmetic_progression(1, 100, 2))\n    print(sum_arithmetic_progression(0, 100, 3))\n    print(sum_arithmetic_progression(1, 100, 3))\n    print(sum_arithmetic_progression(0, 100, 4))\n    print(sum_arithmetic_progression(1, 100, 4))\n    print(sum_arithmetic_progression(0, 100, 5))\n    print(sum_arithmetic_progression(1, 100, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_of_arithmetic_progression(num, i):\n    if i == 0:\n        return num\n    else:\n        return num + sum_of_arithmetic_progression(num, i-1)\n\n\nprint(sum_of_arithmetic_progression(100, 5))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(5))",
    "def arithmetic_progression(start, end, step):\n    sum = 0\n    for i in range(start, end + 1, step):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(0, 100, 2))\nprint(arithmetic_progression(0, 100, 1))\nprint(arithmetic_progression(0, 100, 3))\nprint(arithmetic_progression(0, 100, 4))\nprint(arithmetic_progression(0, 100, 5))\nprint(arithmetic_progression(0, 100, 6))\nprint(arithmetic_progression(0, 100, 7))\nprint(arithmetic_progression(0, 100, 8))\nprint(arithmetic_progression(0, 100, 9))",
    "def arithmetic_progression(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n\n\ndef main():\n    n = int(input(\"Please enter a number: \"))\n    print(arithmetic_progression(n))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nprint(arithmetic_progression(5))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    i = 1\n    while i < n:\n        sum += i\n        i += 1\n    return sum\n\n\nprint(sum_arithmetic_progression(1000))",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    return sum([i ** n for i in range(1, n + 1)])\n\n\ndef main():\n    print(arithmetic_progression(10))\n\n\nif __name__ == '__main__':\n    main()",
    "def arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(3))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    print(f\"The sum of arithmetic progression of {n} is: {sum_arithmetic_progression(n)}\")",
    "def arith_progression(n):\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i\n        i += 1\n    return sum\n\n\nprint(arith_progression(100))",
    "def sum_arithmetic_progression(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum\n\n\nprint(sum_arithmetic_progression(1, 100000))\nprint(sum_arithmetic_progression(1, 10000))\nprint(sum_arithmetic_progression(1, 100000))\nprint(sum_arithmetic_progression(0, 100000))\nprint(sum_arithmetic_progression(0, 10000))\nprint(sum_arithmetic_progression(0, 100000))\nprint(sum_arithmetic_progression(0, 100000))\nprint(sum_arithmetic_progression(0, 100000))",
    "def arithmetic_progression(n, a, b):\n    sum = 0\n    for i in range(n):\n        sum += a * i + b\n    return sum\n\nprint(arithmetic_progression(10, 1, 0))\nprint(arithmetic_progression(10, 2, 1))\nprint(arithmetic_progression(10, 3, 1))\nprint(arithmetic_progression(10, 4, 1))\nprint(arithmetic_progression(10, 5, 1))\nprint(arithmetic_progression(10, 6, 1))\nprint(arithmetic_progression(10, 7, 1))\nprint(arithmetic_progression(10, 8, 1))\nprint(arithmetic_progression(10, 9, 1))\nprint(arithmetic_progression(10, 10, 1))",
    "def sum_arithmetic_progression(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + sum_arithmetic_progression(n-1)\n\nprint(sum_arithmetic_progression(20))",
    "def arithmetic_progression(n):\n    if n == 1:\n        return 1\n    else:\n        return n + arithmetic_progression(n - 1)",
    "def sum_arithmetic_progression(n, a=1, b=0, c=1):\n    return a * (b + c) + (n - 1) * (a + c)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a positive integer: \"))\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    print(f\"The sum of arithmetic progression of {n} is {sum_arithmetic_progression(n)}\")",
    "def arithmetic_progression(n):\n    return sum([i**i for i in range(1, n + 1)])\n\n\ndef test():\n    assert arithmetic_progression(10) == 362880\n\n\ntest()",
    "def arithmetic_progression(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n\nprint(arithmetic_progression(10))",
    "def arithmetic_progression(num):\n    sum = 0\n    for i in range(1, num + 1):\n        sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(3))\n    print(arithmetic_progression(10))\n    print(arithmetic_progression(100))\n    print(arithmetic_progression(1000))",
    "def sum_arithmetic_progression(n):\n    # Write your code here\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\nprint(sum_arithmetic_progression(6))",
    "def sum_of_arithmetic_progression(start, end, step):\n    sum = 0\n    for i in range(start, end + 1, step):\n        sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_of_arithmetic_progression(1, 100, 3))",
    "def arithmetic_progression(start, end):\n    total = 0\n    for i in range(start, end+1):\n        total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(1, 10))",
    "def arithmeticProgression(n):\n    return sum(range(1, n+1))\n\nprint(arithmeticProgression(1000))",
    "def sum_arithmetic_progression(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\ndef main():\n    print(sum_arithmetic_progression(10))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def arithmetic_progression(start, end, step):\n    total = 0\n    for i in range(start, end + 1, step):\n        total += i\n    return total\n\n\nif __name__ == '__main__':\n    print(arithmetic_progression(1, 10, 1))\n    print(arithmetic_progression(1, 10, 2))\n    print(arithmetic_progression(1, 10, 3))\n    print(arithmetic_progression(1, 10, 4))\n    print(arithmetic_progression(1, 10, 5))\n    print(arithmetic_progression(1, 10, 6))\n    print(arithmetic_progression(1, 10, 7))\n    print(arithmetic_progression(1, 10, 8))\n    print(arithmetic_progression(1, 10, 9))\n    print(arithmetic_progression(1, 10, 10))\n    print(arithmetic_progression(1, 10, 11))",
    "def arithmetic_progression(n):\n    # Write your code here\n    result = 0\n    for i in range(1,n+1):\n        result += i\n    return result\n\nprint(arithmetic_progression(100))",
    "def sum_arithmetic_progression(num):\n    sum = 0\n    for i in range(1, num + 1):\n        sum += i\n    return sum\n\n\nprint(sum_arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    return sum([i for i in range(n + 1)])\n\n\nprint(arithmetic_progression(1))\nprint(arithmetic_progression(10))\nprint(arithmetic_progression(100))\nprint(arithmetic_progression(1000))\nprint(arithmetic_progression(1000000))",
    "def sum_arithmetic_progression(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\nprint(sum_arithmetic_progression(10))",
    "def arithmetic_progression(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\nprint(arithmetic_progression(10))",
    "def sum_arithmetic_progression(n, m):\n    return n * m\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    print(sum_arithmetic_progression(n, m))\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}