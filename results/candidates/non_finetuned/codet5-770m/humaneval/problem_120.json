{
  "problem": {
    "task_id": "HumanEval/120",
    "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
    "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
    "entry_point": "maximum",
    "docstring": "",
    "problem_id": 120
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if k <= 0 or len(arr) < k:\n        return []\n\n    l, r = 0, len(arr) - 1\n    res = []\n\n    while l <= r:\n        mid = (l + r) // 2\n\n        if arr[mid] == arr[mid - k]:\n            l = mid + 1\n\n        elif arr[mid] == arr[mid + k]:\n            r = mid - 1\n\n        else:\n            res.append(arr[mid])\n            l = mid + 1\n\n    return res\n\n\ndef main():\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n\n\nif __name__ == '__main__':\n    main()",
    "arr.sort()\n    return arr[:k]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert minimum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert minimum([4, -4, 4], 1) == [4, 4]\n    assert maximum([4, -4, 4], 2) == [4, 4]",
    "arr.sort()\n    return arr[-k:]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert minimum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Time: O(nlogn)\n    # Space: O(n)\n    return sorted(arr)[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 0:\n        return []\n    arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([], 1) == []",
    "if not arr:\n        return []\n    \n    # get the largest number\n    largest = -1\n    for num in arr:\n        if num > largest:\n            largest = num\n    \n    # sort the list of numbers\n    arr.sort()\n    \n    # get the number of elements\n    n = len(arr)\n    \n    # if there are more than k elements, return a sorted list\n    if n > k:\n        return arr[:k]\n    \n    # otherwise return the number of elements as is\n    return arr",
    "if len(arr) == 0:\n        return []\n\n    if len(arr) < k:\n        return arr\n\n    res = []\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    res = arr[left:left + k]\n\n    return res\n\n\ndef main():\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
    "if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    elif k == 1:\n        return sorted(arr, reverse=True)\n    elif k == 2:\n        return sorted(arr, key=lambda x: x)\n    elif k > len(arr):\n        return maximum(arr[1:], k - len(arr))\n    else:\n        return maximum(arr[:k], k) + maximum(arr[k:], k - len(arr))\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "return sorted(arr, key=lambda x: -x)[:k]\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    Using a dict to track the maximum of the given list of numbers.\n\n    Time: O(n log k)\n    Space: O(1)\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_dict = {}\n    for num in arr:\n        if num not in max_dict:\n            max_dict[num] = 1\n        else:\n            max_dict[num] += 1\n\n    max_list = []\n    for num in max_dict:\n        if max_dict[num] == k:\n            max_list.append(num)\n\n    return sorted(max_list)\n\n\ndef maximum3(arr, k):\n    \"\"\"\n    Using a dict to track the maximum of the given list of numbers.\n\n    Time: O(n log k)\n    Space: O(1)\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of",
    "if len(arr) < k:\n        return sorted(arr)\n    maximum_idx = len(arr) - k\n    maximum_value = arr[maximum_idx]\n    for i in range(maximum_idx - 1, -1, -1):\n        if arr[i] > maximum_value:\n            maximum_value = arr[i]\n    return sorted(arr[0:maximum_idx] + [maximum_value])\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 48 ms\n    # Memory: 13.4 MB\n    if len(arr) == 0:\n        return []\n    if k == 0:\n        return sorted(arr)\n\n    if len(arr) == 1:\n        return sorted([arr[0]])\n\n    if k == 1:\n        return [max(arr[0], arr[1])]\n\n    max_num = max(arr[0], arr[1])\n    min_num = min(arr[0], arr[1])\n    res = []\n    for i in range(k):\n        res.append(max_num)\n        if max_num < min_num:\n            res.append(min_num)\n        max_num = max(max_num, arr[0])\n        min_num = min(min_num, arr[1])\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "n = len(arr)\n    if k > n:\n        return sorted(arr)\n    elif k == n:\n        return arr\n    else:\n        start = 0\n        end = k\n        res = []\n        while end < n:\n            if arr[start] <= arr[end]:\n                res.append(arr[start])\n                start += 1\n            else:\n                res.append(arr[end])\n                end += 1\n        return res\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    Time: O(nlogk)\n    Space: O(k)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum2([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) == 0:\n        return []\n    if k <= 0:\n        return sorted(arr)\n    if len(arr) == 1:\n        return sorted(arr)[:k]\n\n    maximum_index = 0\n    maximum_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum_value:\n            maximum_index = i\n            maximum_value = arr[i]\n    \n    maximum_index += 1\n\n    return sorted(arr[:maximum_index]) + sorted(arr[maximum_index:])\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) == 1:\n        return arr\n    if k == 1:\n        return sorted(set(arr))\n    if k == 2:\n        return sorted(list(set(arr)))\n\n    return sorted(list(set(arr) | set(sorted(arr, reverse=True))))[:k]",
    "if len(arr) < k:\n        return arr\n\n    return sorted(arr, key=lambda x: -x)[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 0:\n        return sorted(arr)\n    max_value = max(arr)\n    min_value = min(arr)\n    max_index = arr.index(max_value)\n    min_index = arr.index(min_value)\n    if max_index + k > min_index:\n        return maximum(arr[:max_index + k], k) + [max_value]\n    if max_index + k < min_index:\n        return maximum(arr[min_index + k:], k)\n    return [max_value]\n\n\ndef maximum_v2(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if k == 0:\n        return sorted(arr)\n    max_value = max(arr)\n    min_value = min(arr)\n    max_index = arr.index(max_value)\n    min_index = arr.index(min_value)\n    if max_index + k > min_index:\n        return maximum_v2(arr[:max_index + k], k) + [max_value]\n    if max_index + k < min_index:\n        return maximum_v2(arr[min_index + k:], k)\n    return [max_value]\n\n\ndef maximum_v3(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if k == 0:\n        return sorted(arr)\n    max_value = max(arr)\n    min_value = min(arr)\n    max_index = arr.index(max_value)\n    min_index = arr.index(min_value)\n    if max_index + k > min_index:\n        return maximum_v3(arr[:max_index + k], k) + [max_value]\n    if max_index + k < min_index:\n        return maximum_v3(arr[min_index + k:], k)\n    return [max_value]\n\n\ndef maximum_v4(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(",
    "# Runtime: 60 ms, faster than 90.06% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 68.76% of Python3 online submissions for Maximum.\n    return sorted(arr)[-k:] + sorted(arr)[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "return sorted(arr, key=lambda x: x if len(arr) >= k else -x)\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "result = []\n    for i in range(len(arr)):\n        if i >= k:\n            result.append(arr[i])\n    return sorted(result)\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if i >= k:\n            result.append(arr[i])\n    result.sort()\n    return result",
    "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n\n    # Find the maximum element in the array\n    # If it is larger than the k, we will put it in the list\n    # Otherwise we will search for the k elements\n    # If the k element is smaller than the maximum element, we will put the maximum element in the list\n    # Otherwise we will search for the k elements\n    # If the k element is equal to the maximum element, we will put the maximum element in the list\n\n    max_element = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n            max_index = i\n\n    # If the k element is smaller than the maximum element, we will put the maximum element in the list\n    if k < max_index:\n        return maximum(arr[max_index:], k)\n\n    # If the k element is equal to the maximum element, we will put the maximum element in the list\n    if k == max_index:\n        return [max_element]\n\n    # Search for the k elements\n    # Note that the range of the list will be in the range of [-1000, 1000]\n    # So we will check the range of the range of the list of the k elements\n    # and add the maximum element if it is not in the list\n    # Note that the range of the list will be in the range of [-1000, 1000]\n    # So we will check the range of the range of the list of the k elements\n    # and add the maximum element if it is in the list\n    # Note that the range of the list will be in the range of [-1000, 1000]\n    # So we will check the range of the range of the list of the k elements\n    # and add the maximum element if it is in the list\n    max_index_list = []\n    for i in range(0, len(arr)):\n        if i >= k:\n            max_index_list.append(i)\n\n    # Check the range of the list of the k elements\n    # and add the maximum element if",
    "if k <= 0:\n        return []\n    arr = sorted(arr)\n    n = len(arr)\n    if k == 1:\n        return arr\n    if k == n:\n        return [arr[0]]\n    res = []\n    res.extend([arr[0] for _ in range(k - 1)])\n    for i in range(1, n):\n        res.append(max(arr[i], arr[i - 1] + arr[i]))\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([1, 1, -1, -1, -1, -1], 3) == [1, -1, -1, -1]",
    "if k == 1:\n        return sorted(arr)\n\n    # \u5b9a\u4e49\u6700\u5927\u503c\u548c\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u4e2d\u6700\u5927\u503c\u7684\u4f4d\u7f6e\n    max_value = -1e10\n    max_index = 0\n    min_value = float('inf')\n    min_index = 0\n\n    for i in range(k):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n\n        if arr[min_index] < min_value:\n            min_value = arr[min_index]\n            min_index = i\n\n    # \u4f7f\u7528\u961f\u5217\u4e2d\u7684\u6307\u9488\u548c\u5b57\u5178\u6765\u67e5\u627e\u6700\u5927\u503c\uff0c\u627e\u5230\u5176\u4ed6\u7684\u503c\n    max_value_dict = dict()\n    max_value_dict[max_value] = max_index\n\n    for i in range(k):\n        if arr[max_value_dict[max_value]]!= max_value:\n            max_value_dict[arr[max_value]] = i\n\n    # \u904d\u5386\u5b57\u5178\uff0c\u5e76\u628a\u503c\u540e\u5411\u524d\u79fb\u52a8\uff0c\u4f7f\u5f97\u5176\u4ed6\u7684\u503c\u5c0f\u4e8e\u5f53\u524d\u503c\u7684\u503c\u5c31\u653e\u5165\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\n    # \u5982\u679c\u5f53\u524d\u503c\u5c0f\u4e8e\u5f53\u524d\u503c\u5c31\u653e\u5165\u524d\u540e\u4e24\u4e2a\ufffd",
    "arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
    "arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "return sorted(arr[:k], key=lambda x: (-x, x))\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, key=lambda x: (x, -x))\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert minimum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "max_num = 0\n    max_index = -1\n    result = []\n\n    for index, value in enumerate(arr):\n        if value > max_num:\n            max_num = value\n            max_index = index\n\n        if max_index == 0 or max_index == k - 1:\n            result.append(max_num)\n\n    return result\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([], 0) == []\n    assert maximum([-1], 0) == [-1]\n    assert maximum([-1], 1) == [-1, -1]\n    assert maximum([-1], 2) == [-1, -1]",
    "if not arr:\n        return []\n    res = []\n    count = 0\n    for i in range(len(arr)):\n        if count == k:\n            res.append(arr[i])\n        if count < k:\n            res.append(arr[i])\n            count += 1\n    return res\n\n\ndef maximum_2(arr, k):\n    \"\"\"\n    Time: O(nlogn)\n    Space: O(n)\n    \"\"\"\n    if not arr:\n        return []\n    res = []\n    index = 0\n    while index < len(arr):\n        if index + k > len(arr):\n            res.append(arr[index])\n            index += 1\n        else:\n            if res and res[-1] < arr[index + k]:\n                res.pop()\n            res.append(arr[index])\n            index += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum_2([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 32 ms, faster than 98.24% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 17.00% of Python3 online submissions for Maximum.\n    arr.sort()\n    return arr[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) < k:\n        return arr\n\n    # this is the only way to do this\n    # arr.sort()\n    # arr = arr[::-1]\n    # return arr[:k]\n\n    # this is the most efficient way\n    arr.sort()\n    return arr[-k:]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Time complexity: O(n^2)\n    # Space complexity: O(n)\n    arr.sort()\n    res = []\n    for i in range(0, len(arr), k):\n        res.append(arr[i])\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "res = []\n    for i in range(len(arr)):\n        for j in range(i, i+k):\n            if j < len(arr):\n                res.append(arr[j])\n    return res",
    "if k == 1:\n        return sorted(arr)\n    elif k == 2:\n        return sorted(arr, key=lambda x: (-x, x))\n    elif k == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr, key=lambda x: (-x, x))\n\n\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "arr.sort()\n    return arr[-k:]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 1:\n        return sorted(arr)\n    if len(arr) == k:\n        return sorted(arr[:k])\n    # \u521d\u59cb\u5316\u5b57\u5178\n    max_dict = {}\n    for i in range(len(arr)):\n        # \u5224\u65ad\u662f\u5426\u88ab\u5c3e\u90e8\u51fa\u73b0\n        if arr[i] not in max_dict:\n            max_dict[arr[i]] = [arr[i]]\n        else:\n            # \u5224\u65ad\u662f\u5426\u88ab\u5c3e\u90e8\u51fa\u73b0\n            if len(max_dict[arr[i]]) == k:\n                max_dict[arr[i]].append(arr[i])\n            else:\n                max_dict[arr[i]].append(arr[i])\n    # \u5982\u679c\u6ca1\u6709\u5c3e\u90e8\u51fa\u73b0\uff0c\u5c31\u6309\u5b57\u5178\u91cc\u9762\u627e\u5230\u5bf9\u5e94\u7684\u6700\u5927\u503c\n    max_value = -1\n    max_key = []\n    for key in max_dict:\n        if len(max_dict[key]) == k:\n            max_value = max(max_value, max(max_dict[key]))\n            max_key.append(key)\n    # \u5c06\u5bf9\u5e94\u7684\u6700\u5927\u503c\u52a0\u5165max_key\u4e2d\n    max_key.append(max_value)\n    # \u6309\u5b57\u5178\u91cc\u9762\u627e\u5230\u5bf9\u5e94\u7684\u6700\u5927\u503c\u52a0\u5165\u5230max_key\u4e2d\n    for key in max_dict:\n        if len(max_dict[key]) == k:\n            max_key.append(key)\n    return sorted(max_key)",
    "return sorted(arr)[-k:]\n\n\ndef maximum_2(arr, k):\n    \"\"\"\n    Solution 1:\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n        The function will return the maximum k numbers in the array.\n\n        Runtime: 32 ms, faster than 94.86% of Python3 online submissions for Maximum.\n        Memory Usage: 14.5 MB, less than 100.00% of Python3 online submissions for Maximum.\n\n        Example 1:\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n        Example 2:\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n        Example 3:\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    \"\"\"\n    return sorted(arr)[-k:]\n\n\ndef maximum_3(arr, k):\n    \"\"\"\n    Solution 2:\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n        The function will return the maximum k numbers in the array.\n\n        Runtime: 32 ms, faster than 94.86% of Python3 online submissions for Maximum.\n        Memory Usage: 14.5 MB, less than 100.00% of Python3 online submissions for Maximum.\n\n        Example 1:\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n        Example 2:\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n        Example 3:\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    \"\"\"\n    return sorted(arr)[-k:]\n\n\ndef maximum_4(arr, k):\n    \"\"\"\n    Solution 3:\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n        The function will return the maximum k numbers in the array.\n\n        Runtime: 32 ms",
    "if len(arr) <= k:\n        return sorted(arr)\n    \n    left, right = 0, k\n    while right > left:\n        mid = (left + right) // 2\n        if arr[mid] > arr[left]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return sorted(arr[:left]) + sorted(arr[right:])\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 1:\n        return sorted(set(arr))\n    elif k == 2:\n        return sorted(set(arr) - set([arr[0]]))\n    elif k == 0:\n        return sorted(set(arr))\n    else:\n        return sorted(set(arr) - set([arr[0], arr[k-1]]))\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 1:\n        return sorted(set(arr) - set([arr[0]]))\n    elif k == 2:\n        return sorted(set(arr) - set([arr[0], arr[k-1]]))\n    elif k == 0:\n        return sorted(set(arr))\n    else:\n        return sorted(set(arr) - set([arr[0], arr[k-1]]))\n\n\ndef largest(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the largest k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3",
    "arr.sort()\n    return arr[-k:]\n\n\ndef maximum_2(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(k)\n\n    The main idea is to sort the array and return the maximum k numbers in it.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\ndef maximum_3(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n\n    The main idea is to use a stack to store the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    stack = []\n    for i in arr:\n        while stack and i > stack[-1]:\n            stack.pop()\n        stack.append(i)\n        if len(stack) >",
    "if k == 0:\n        return arr\n    max_num = max(arr)\n    res = []\n    for i in range(k):\n        if arr[arr.index(max_num)]!= max_num:\n            res.append(max_num)\n            max_num = max(arr)\n    res.append(max_num)\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 0:\n        return arr\n\n    if k == 1:\n        return sorted(arr)\n\n    res = []\n\n    for i in range(len(arr)):\n        if i < len(arr) - k:\n            res.append(arr[i])\n        else:\n            res.append(arr[-1])\n\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k > len(arr):\n        return arr\n    if k == 1:\n        return sorted(arr)\n    return sorted(arr, key=lambda x: (-x, arr.index(x)))[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 32 ms, faster than 89.63% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.2 MB, less than 97.48% of Python3 online submissions for Maximum.\n    if len(arr) < k:\n        return arr\n    for i in range(k, len(arr)):\n        arr.append(arr[i-k])\n    return sorted(arr)\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
    "if not arr:\n        return []\n    if k == 1:\n        return sorted(arr)\n    res = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > arr[j]:\n                res.append(arr[i])\n                break\n    return res[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Solution 1\n    # Runtime: 316 ms, faster than 89.03% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 97.31% of Python3 online submissions for Maximum.\n    if len(arr) <= k:\n        return sorted(arr)\n    else:\n        arr.sort()\n        return arr[-k:]\n\n    # Solution 2\n    # Runtime: 316 ms, faster than 89.03% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 97.31% of Python3 online submissions for Maximum.\n    if len(arr) <= k:\n        return sorted(arr)\n    else:\n        arr.sort(reverse=True)\n        return arr[-k:]\n\n    # Solution 3\n    # Runtime: 316 ms, faster than 89.03% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 97.31% of Python3 online submissions for Maximum.\n    arr.sort()\n    return arr[:k]\n\n    # Solution 4\n    # Runtime: 316 ms, faster than 89.03% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 97.31% of Python3 online submissions for Maximum.\n    arr.sort(reverse=True)\n    return arr[:k]",
    "if len(arr) <= k:\n        return arr\n    return sorted(arr[-k:])\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    return sorted(arr[:k])\n\n\ndef main():\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    print(minimum(arr, k))\n\n\nmain()",
    "if k == 1:\n        return sorted(arr)\n\n    # O(n^2)\n    # O(n)\n    # O(k)\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(n)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(n)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n\n    # O(n^2)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(",
    "# O(n) time | O(1) space\n    # O(n) space\n    if not arr:\n        return []\n    if not k:\n        return arr\n\n    # O(n) time | O(1) space\n    # O(n) space\n    result = []\n    max_len = 0\n    for i in range(len(arr)):\n        if len(result) < k:\n            result.append(arr[i])\n            if len(result) < k:\n                max_len = i + 1\n            else:\n                break\n        else:\n            if len(result) < k:\n                result.append(arr[i])\n                if len(result) < k:\n                    max_len = i + 1\n                else:\n                    break\n            elif len(result) < k:\n                result.append(arr[i])\n                max_len = i\n                break\n            else:\n                break\n\n    return result[0:max_len]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([-3, -4, 5], 3, [-4, -3, 5]),\n        ([4, -4, 4], 2, [4, 4]),\n        ([-3, 2, 1, 2, -1, -2, 1], 1, [2]),\n    ]\n    for test in tests:\n        assert maximum(*test) == test[1]",
    "if not arr:\n        return []\n    elif k == 1:\n        return sorted(arr)\n    elif k == 2:\n        return sorted(arr)[:k]\n    else:\n        return sorted(arr)[-k:]\n\n\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1, 3, 4, 5]\nk = 1\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1, 3, 4, 5, 6]\nk = 1\nprint(maximum(arr, k))",
    "if k == 0:\n        return arr\n    result = []\n    index = 0\n    while index < k:\n        result.append(max(arr[index:]))\n        index += 1\n    return result\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return arr\n    result = []\n    index = 0\n    while index < k:\n        result.append(min(arr[index:]))\n        index += 1\n    return result\n\n\ndef main():\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    print(minimum(arr, k))\n\n\nmain()",
    "if len(arr) < k:\n        return arr\n\n    i = 0\n    j = len(arr) - 1\n    res = []\n\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] > arr[i]:\n            i = mid + 1\n        else:\n            j = mid\n\n    if arr[i] > arr[j]:\n        res = [arr[i]] + maximum(arr[i + 1:], k)\n    else:\n        res = [arr[j]] + maximum(arr[i + 1:], k)\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "res = []\n    arr.sort()\n    for i in range(len(arr)-k):\n        res.append(arr[i])\n    return res\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [1]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    arr.sort()\n    for i in range(len(arr)-k):\n        res.append(arr[i])\n    return res\n\n\ndef sorted_array(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []",
    "if k <= 0 or len(arr) <= k:\n        return arr\n    if k == 1:\n        return arr[:k]\n\n    max_value = arr[0]\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n\n    if max_index == 0:\n        return arr\n    if k == 1:\n        return arr[:max_index]\n\n    return [max_value] + maximum(arr[max_index+1:], k-1)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 1:\n        return arr[0]\n    else:\n        return sorted(arr, key=lambda x: x[-k:])\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 30 ms\n    # Memory: 13.9 MB\n    if not arr or k < 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == k:\n        return sorted(arr)\n    \n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + k]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sorted(arr[left:right + 1])",
    "def find_kth(arr, k, start, end):\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if arr[mid] <= arr[end]:\n                start = mid\n            else:\n                end = mid\n        return start\n\n    def merge(start, end, result):\n        while start < end:\n            if result[start] < result[end]:\n                result[start], result[end] = result[end], result[start]\n                start += 1\n            else:\n                result[end], result[start] = result[start], result[end]\n                end -= 1\n\n    if len(arr) <= k:\n        return arr\n\n    result = [arr[0]]\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        if arr[start] <= arr[end]:\n            merge(start, end, result)\n            start += 1\n        else:\n            merge(start, end, result)\n            result.pop()\n            end -= 1\n\n    merge(start, end, result)\n\n    return result\n\n\narr = [4, -4, 4]\nk = 2\n\nprint(maximum(arr, k))",
    "def find_max(arr, k):\n        if len(arr) == 0:\n            return 0\n        elif len(arr) == 1:\n            return arr[0]\n        elif len(arr) == 2:\n            if arr[0] > arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        elif len(arr) == k:\n            return max(arr)\n        else:\n            return find_max(arr[1:], k)\n        \n    return sorted(arr, key = find_max)\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n    res = []\n    l = len(arr)\n    for i in range(k):\n        res.append(max(arr[i:l]))\n    return res",
    "if k == 0:\n        return arr\n    \n    length = len(arr)\n    if length < k:\n        return arr\n    \n    start = 0\n    end = length - k\n    result = []\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[start]:\n            result.append(arr[start])\n            start = mid + 1\n        else:\n            result.append(arr[mid])\n            end = mid - 1\n    if end == length - k:\n        result.append(arr[end])\n    return result",
    "if len(arr) < k:\n        return arr\n    if len(arr) == k:\n        return [max(arr)]\n    mid = len(arr) // 2\n    left = maximum(arr[:mid], k)\n    right = maximum(arr[mid:], k)\n    return sorted(left + right)\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) < k:\n        return arr\n    res = []\n    for i in range(len(arr)):\n        res.append(max(arr[i:i + k]))\n    return sorted(res)\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    O(n^2)\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    >>> arr = [-3, -4, 5]\n    >>> k = 3\n    >>> maximum2(arr, k)\n    [-4, -3, 5]\n\n    >>> arr = [4, -4, 4]\n    >>> k = 2\n    >>> maximum2(arr, k)\n    [4, 4]\n\n    >>> arr = [-3, 2, 1, 2, -1, -2, 1]\n    >>> k = 1\n    >>> maximum2(arr, k)\n    [2]\n    \"\"\"\n    if len(arr) < k:\n        return arr\n    res = []\n    for i in range(len(arr)):\n        if len(res) < k:\n            res.append(max(arr[i:i + k]))\n        else:\n            res[res.index(max(arr[i:i + k]))] = max(res[res.index(max(arr[i:i + k]))], arr[i])\n    return sorted(res)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# Runtime: 40 ms\n    # Memory: 13.6 MB\n    if k <= 0 or len(arr) < k:\n        return []\n    elif k == 1:\n        return arr[:k]\n    elif k == 2:\n        return sorted(set(arr))\n    elif k == len(arr):\n        return sorted(set(arr[:k]), reverse=True)\n    else:\n        return maximum(arr[1:], k - 1) + [max(arr[:k])]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "return sorted(arr)[:k]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr)[:k]\n\n\ndef merge(arr1, arr2, k):\n    \"\"\"\n    Given two sorted arrays arr1 and arr2, merge them into a new sorted array.\n\n    Example 1:\n\n        Input: arr1 = [1, 2, 3], arr2 = [4, 5], k = 2\n        Output: [1, 4, 5]\n\n    Example 2:\n\n        Input: arr1 = [1, 2, 3], arr2 = [4, 5], k = 3\n        Output: [1, 2, 4, 5]\n\n    Example 3:\n\n        Input: arr1 = [1, 2, 3], arr2 = [4, 5], k = 1\n        Output: [1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(arr1 + arr2)[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert minimum([4, -4, 4], 2) == [4, 4]\n    assert merge([1, 2, 3], [4, 5], 3) == [1, 2, 3, 4, 5]\n    assert",
    "if len(arr) <= k:\n        return arr\n    if arr[0] == -1000:\n        arr.pop(0)\n    arr.sort()\n    return arr[:k]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    if arr[0] == -1000:\n        arr.pop(0)\n    arr.sort()\n    return arr[:k]\n\n\ndef merge(a, b):\n    \"\"\"\n    Merge two sorted lists.\n\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(a) < len(b):\n        a, b = b, a\n    result = [0] * len(b)\n    for i, num in enumerate(a):\n        result[i] = num\n    for i, num in enumerate(b):\n        result[i] = num\n    return result\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Sort the input array.\n\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr",
    "if len(arr) < k:\n        return arr\n    return sorted(arr[:k], key=lambda x: x)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "res = []\n    if k == 1:\n        return arr\n\n    for i in range(len(arr)):\n        if len(res) == 0 or arr[i] > res[-1]:\n            res.append(arr[i])\n        else:\n            res.pop()\n\n    return res + [max(res)]\n\n\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))",
    "if len(arr) <= k:\n        return arr\n\n    left, right = 0, len(arr) - 1\n    result = []\n    while left < right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] < arr[mid + 1]:\n            result.append(arr[mid])\n            left = mid + 1\n        else:\n            result.append(arr[mid + 1])\n            right = mid - 1\n\n    result.extend(arr[left:right + 1])\n    return result\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n\n    result = []\n    for i in range(len(arr) - k + 1):\n        result.append(arr[i:i + k])\n\n    result.sort(key=lambda x: x[-1])\n    return result\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum2([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum2([4, -4, 4], 2) == [4, 4]\n    assert maximum2([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum2([4, -4, 4], 3) == [4, 4]\n    assert maximum2([4, -4, 4], 4) == [4, 4]\n    assert maximum2([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum2([4, -4, 4], 2) == [4, 4]",
    "if not arr:\n        return []\n    \n    if k == 1:\n        return sorted(arr)\n    \n    res = []\n    for i in range(len(arr)):\n        if i < k:\n            res.append(arr[i])\n        else:\n            res.sort()\n            res.append(arr[i - k])\n    return res\n\n\ndef maximum_2(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if not arr:\n        return []\n    \n    res = []\n    for i in range(len(arr)):\n        if i < k:\n            res.append(arr[i])\n        else:\n            res.sort()\n            res.append(arr[i - k])\n    return res\n\n\ndef maximum_3(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if not arr:\n        return []\n    \n    res = []\n    for i in range(len(arr)):\n        if i < k:\n            res.append(arr[i])\n        else:\n            res.sort(reverse=True)\n            res.append(arr[i - k])\n    return res",
    "if k == 0:\n        return []\n    if k == 1:\n        return sorted(arr)\n    if k > len(arr):\n        return sorted(arr)[:k]\n    i = 0\n    j = k - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] > arr[mid-1]:\n            i = mid + 1\n        else:\n            j = mid\n    return sorted(arr[:i]) + sorted(arr[i:])\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k > len(arr):\n        return arr\n\n    arr.sort()\n    return arr[:k]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return arr\n\n    arr.sort()\n    return arr[:k]\n\n\ndef merge(arr, left, right):\n    \"\"\"\n    Given two sorted arrays arr[left] and arr[right], merge them into one sorted array.\n\n    Example 1:\n\n        Input: arr = [4, -4, 4], left = 0, right = 3\n        Output: [4, -3, 4]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], left = 0, right = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [4, -4, 4], left = 0, right = 1\n        Output: [4, 4]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= left <= right <= len(arr)\n    \"\"\"\n    if left < right:\n        mid = (left + right) // 2\n        merge(arr, left, mid)\n        merge",
    "if k > len(arr):\n        return arr\n    if k == 0:\n        return sorted(arr)\n    mid = len(arr) // 2\n    left = maximum(arr[:mid], k - 1)\n    right = maximum(arr[mid:], k)\n    return [max(left, right)]",
    "if len(arr) <= k:\n        return arr\n    return sorted(arr, key=lambda x: (-x, x))[:k]\n\n\ndef maximum_recursive(arr, k):\n    \"\"\"\n    Recursive solution.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    if arr[0] == -1000:\n        return [0]\n    return maximum_recursive(arr[1:], k) + [arr[0]]\n\n\ndef maximum_recursion(arr, k):\n    \"\"\"\n    Recursive solution.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    if arr[0] == -1000:\n        return [0]\n    return maximum_recursion(arr[1:], k) + [arr[0]]\n\n\ndef maximum_recursive_1(arr, k):\n    \"\"\"\n    Recursive solution.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    if arr[0] == -1000:\n        return [0]\n    return maximum_recursive_1(arr[1:], k) + [arr[0]]",
    "arr.sort()\n    return arr[k - 1 : k + 1]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) == 1:\n        return arr\n    \n    if k == 1:\n        return arr\n    \n    result = [0] * k\n    max_idx = 0\n    max_val = arr[0]\n    for idx, val in enumerate(arr):\n        if val > max_val:\n            max_val = val\n            max_idx = idx\n        result[max_idx] = val\n    \n    for idx, val in enumerate(arr[1:], 1):\n        if val > max_val:\n            max_val = val\n            max_idx = idx\n        result[max_idx] = val\n    \n    return result",
    "if len(arr) < k:\n        return arr\n    arr.sort()\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "arr.sort()\n    return arr[:k]\n\n\ndef maximum_2(arr, k):\n    \"\"\"\n    Two pointer solution.\n\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # two pointer solution\n    # Time: O(nlogn)\n    # Space: O(n)\n    # Runtime: 68 ms, faster than 84.67% of Python3 online submissions for Maximum Array.\n    # Memory Usage: 13.1 MB, less than 100.00% of Python3 online submissions for Maximum Array.\n    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\n\ndef maximum_3(arr, k):\n    \"\"\"\n    Two pointer solution.\n\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # two pointer solution\n    # Time: O(nlogn)\n    # Space: O(n)\n    # Runtime: 68 ms, faster than 84.67% of Python3 online submissions for Maximum Array.\n    # Memory Usage: 13.1 MB, less than 100.00% of Python3 online submissions for Maximum Array.\n    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([-3, -4, 5], 3, [-4, -3, 5]),\n        ([-3, 2, 1, 2, -1, -2, 1], 1, [2]),\n        ([-3, 2, 1, 2, -1, -2, 1], 2, [2]),\n        ([-3, 2, 1, 2, -1, -2, 1], 3, [-3, 2, 1, 2, -1, -2, 1])\n    ]\n    for t in tests:\n        print(maximum(*t),'=> ', maximum_2(*t))\n        print(maximum(*t),'=> ', maximum_3(*t))",
    "# Runtime: 52 ms, faster than 8.95% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.9 MB, less than 89.57% of Python3 online submissions for Maximum.\n    arr = sorted(arr)\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n\n    # use binary search to find the maximum\n    left, right = 0, len(arr) - 1\n    while left + 1 < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > arr[mid - 1]:\n            right = mid\n        else:\n            left = mid\n    if arr[left] > arr[left - 1]:\n        return maximum(arr[left:], k)\n    else:\n        return maximum(arr[left:left + k], k)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) < k:\n        return arr\n    else:\n        return sorted(arr)[-k:]\n\n\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))",
    "res = []\n    for i in range(k):\n        res.append(max(arr))\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([1, 1, 1], 2) == [1, 1]",
    "if len(arr) == 1:\n        return arr\n    if k == 1:\n        return sorted(arr, reverse=True)\n    arr_len = len(arr)\n    if arr_len == 2:\n        return sorted(arr, key=lambda x: (-x, arr[0]))\n    if arr_len == 3:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1]))\n    if arr_len == 4:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2]))\n    if arr_len == 5:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3]))\n    if arr_len == 6:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4]))\n    if arr_len == 7:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]))\n    if arr_len == 8:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]))\n    if arr_len == 9:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]))\n    if arr_len == 10:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]))\n    if arr_len == 11:\n        return sorted(arr, key=lambda x: (-x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]))\n    if arr_len == 12:",
    "if k == 1:\n        return sorted(arr)\n    \n    # O(n) space: O(n)\n    # Runtime: 12 ms, faster than 95.52% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.8 MB, less than 19.19% of Python3 online submissions for Maximum.\n    arr = sorted(arr)\n    n = len(arr)\n    i = n - k\n    j = i + k\n    \n    while i >= 0 and j < n:\n        if arr[i] <= arr[j]:\n            arr[i + k] = arr[j]\n            j += 1\n        else:\n            arr[i - k] = arr[j]\n            i -= 1\n    if i >= 0:\n        arr[i + k:] = sorted(arr[i + k:])\n    return arr\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    \n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    \n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n    \n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 3\n    print(maximum(arr, k))",
    "# Runtime: 36 ms\n    # Memory: 13.3 MB\n    if k == 0:\n        return arr\n    if k == 1:\n        return sorted(set(arr))\n\n    # create a set to store the maximum value\n    max_set = set()\n\n    for i in arr:\n        max_set.add(i)\n        if len(max_set) == k:\n            max_set.remove(max(max_set))\n\n    # sort the set to get the maximum value\n    return sorted(max_set)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "max_index = -1\n    max_value = -float('inf')\n    for index, value in enumerate(arr):\n        if index == 0:\n            if value > max_value:\n                max_index = index\n                max_value = value\n        elif index < max_index:\n            if value > max_value:\n                max_index = index\n                max_value = value\n        elif index == max_index:\n            if value > max_value:\n                max_value = value\n    return arr[:max_index + 1] + [max_value] + arr[max_index + 1:]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "arr.sort()\n    return arr[:k]\n\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4, -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
    "res = []\n    for num in arr:\n        while len(res) < k:\n            res.append(num)\n        res.sort()\n        res.pop()\n        res.append(num)\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "def find_kth_max(arr, k):\n        if k == 0:\n            return arr[0]\n        start, end = 0, len(arr) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if arr[mid] > arr[mid + 1]:\n                start = mid\n            else:\n                end = mid\n        return arr[start]\n    \n    return sorted(arr, key = lambda x: (x, -x))[:k]\n\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))",
    "if k > len(arr):\n        return sorted(arr)\n    if k == 1:\n        return sorted(arr)\n    return sorted(arr, key = lambda x: x, reverse = True)[:k]\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
    "if not arr:\n        return []\n    \n    # Find the maximum number in the array.\n    maximum_number = max(arr)\n    # Create a list of the maximum number in the array.\n    maximum_list = [maximum_number]\n    # Iterate through the array until it's the maximum number.\n    for i in range(1, len(arr)):\n        if arr[i] > maximum_number:\n            maximum_number = max(arr[i:])\n            maximum_list.append(maximum_number)\n        else:\n            maximum_list.append(arr[i])\n\n    # Return the maximum number in the list.\n    return maximum_list[:k]\n\n\n# Test cases:\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4, -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
    "if len(arr) <= k:\n        return arr\n    max_val = max(arr)\n    max_index = arr.index(max_val)\n    return arr[max_index : max_index + k]",
    "# Runtime: 48 ms, faster than 95.42% of Python3 online submissions for Maximum Array.\n    # Memory Usage: 14.6 MB, less than 100.00% of Python3 online submissions for Maximum Array.\n    maximum_list = []\n    if len(arr) > k:\n        maximum_list = sorted(arr[:k])\n    else:\n        maximum_list = sorted(arr)\n    return maximum_list\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 1:\n        return sorted(arr)\n    result = []\n    for i in range(len(arr)):\n        if len(result) < k:\n            result.append(arr[i])\n        elif i == 0:\n            result[0] = arr[i]\n            continue\n        elif arr[i] > result[0]:\n            result.insert(0, arr[i])\n            continue\n        elif arr[i] < result[-1]:\n            result.pop()\n            result.append(arr[i])\n            continue\n        elif arr[i] == result[-1]:\n            result.pop()\n            result.append(arr[i])\n            continue\n    return result\n\n\ndef maximum_v2(arr, k):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if len(result) < k:\n            result.append(arr[i])\n        elif i == 0:\n            result[0] = arr[i]\n            continue\n        elif arr[i] > result[0]:\n            result.insert(0, arr[i])\n            continue\n        elif arr[i] < result[-1]:\n            result.pop()\n            result.append(arr[i])\n            continue\n        elif arr[i] == result[-1]:\n            result.pop()\n            result.append(arr[i])\n            continue\n    return result\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k < 1:\n        return []\n    if k == 1:\n        return sorted(arr)\n    if k == len(arr):\n        return sorted(arr)[:k]\n    maximum_count = 0\n    maximum_value = 0\n    maximum_index = 0\n    for index, value in enumerate(arr):\n        if maximum_count < k:\n            maximum_count += 1\n            if maximum_value < value:\n                maximum_value = value\n                maximum_index = index\n        else:\n            arr[maximum_index] = value\n            maximum_count -= 1\n            if maximum_count == 0:\n                maximum_index += 1\n    return maximum(arr, k)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([], 0) == []\n    assert maximum([1], 1) == [1]\n    assert maximum([1, 2, 3, 4, 5], 2) == [3, 4, 5]",
    "# sort the array\n    arr.sort()\n\n    # create a temporary list to hold the maximum number\n    maximum = [arr[0]]\n\n    # loop through the array\n    for i in range(1, len(arr)):\n        # if the current number is greater than the maximum\n        if arr[i] > maximum[-1]:\n            # increment the maximum number\n            maximum.append(arr[i])\n        # if the current number is lesser than the maximum\n        elif arr[i] < maximum[-1]:\n            # decrement the maximum number\n            maximum.pop()\n        # if the current number is the maximum\n        else:\n            # if the maximum number is not the current number\n            maximum.append(arr[i])\n\n    # return the result\n    return maximum[:k]\n\n\nif __name__ == '__main__':\n    tests = [\n        ([-3, -4, 5], 3, [-4, -3, 5]),\n        ([4, -4, 4], 2, [4, 4]),\n        ([-3, 2, 1, 2, -1, -2, 1], 1, [2])\n    ]\n    for test in tests:\n        print('Input: {}'.format(test))\n        print('Output: {}'.format(maximum(*test)))",
    "if k < 1:\n        return []\n    if len(arr) < k:\n        return arr\n    res = []\n    for i in range(k):\n        res.append(max(arr[i:]))\n    res.sort()\n    return res\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k < 1:\n        return []\n    if len(arr) < k:\n        return arr\n    res = []\n    for i in range(k):\n        res.append(min(arr[i:]))\n    res.sort()\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert minimum([4, -4, 4], 2) == [4, 4]\n    assert minimum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 128 ms\n    # Memory: 13.7 MB\n    if k == 1:\n        return arr\n    result = []\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid + 1]:\n            end = mid - 1\n        else:\n            result.append(arr[mid])\n            start = mid + 1\n    result.extend(arr[start:end + 1])\n    return result\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if not arr:\n        return []\n    arr.sort()\n    if len(arr) == 1:\n        return arr\n    if len(arr) == k:\n        return arr[:k]\n    return maximum(arr[:k], k) + [arr[-1]] + maximum(arr[k:], k)\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) <= k:\n        return arr\n    if arr[0] >= arr[-1]:\n        return maximum(arr[1:], k)\n    return maximum(arr[1:], k - 1) + [arr[0]]\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if k == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if k == 1:\n        return sorted(arr)\n    l = len(arr)\n    res = []\n    for i in range(k):\n        res.append(max(arr[l-i-1], arr[l-i]))\n        l -= 1\n    return res\n\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "if len(arr) == 0:\n        return []\n\n    # Sort the array in ascending order.\n    arr.sort()\n\n    # Return the first k elements of the sorted array.\n    return arr[0:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
    "# Runtime: 32 ms, faster than 94.51% of Python3 online submissions for Maximum.\n    # Memory Usage: 13.1 MB, less than 89.97% of Python3 online submissions for Maximum.\n    if k == 0:\n        return arr\n    if len(arr) == 1:\n        return [arr[0]]\n\n    res = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= arr[mid + 1]:\n            res.append(arr[mid])\n            left = mid + 1\n        else:\n            res.append(arr[mid + 1])\n            right = mid - 1\n    res.append(arr[right])\n    return res"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}