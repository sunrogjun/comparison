{
  "problem": {
    "task_id": "HumanEval/117",
    "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
    "entry_point": "select_words",
    "docstring": "",
    "problem_id": 117
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "import re\n    # Your code here\n    regex = re.compile(r\"\\b({})\\b\".format(n))\n    words = regex.findall(s)\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    words_list = s.split()\n    for word in words_list:\n        if len(word) == n:\n            words.append(word)\n    return words",
    "return [word for word in s.split() if word.count(n) == 1]\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "import re\n    import string\n    if s == \"\":\n        return []\n\n    # check if s contains only letters and spaces\n    if not all(c.isalpha() or c == \" \" for c in s):\n        return []\n\n    # create a regular expression to match the input string\n    regex = re.compile(r'[' + ''.join(string.ascii_lowercase) + r']')\n\n    # create a list of all words from the input string\n    words = regex.split(s)\n\n    # create a list of words that contain exactly n consonants\n    words = [word for word in words if regex.match(word)]\n\n    # return the list of words\n    return words",
    "words = []\n    words = s.split()\n    for word in words:\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Your code here\n    if s == \"\":\n        return []\n\n    word_list = []\n    for i in s.split():\n        if i.count(n) > 0:\n            word_list.append(i)\n    return word_list\n\n\ndef select_words2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words2(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words2(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words2(\"simple white space\", 2) ==> []\n    select_words2(\"Hello world\", 4) ==> [\"world\"]\n    select_words2(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Your code here\n    if s == \"\":\n        return []\n\n    word_list = []\n    for i in s.split():\n        if i.count(n) > 0:\n            word_list.append(i)\n\n    return [word for word in word_list if word.count(n) == 1]\n\n\ndef select_words3(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words3(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words3(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words3(\"simple white space",
    "import re\n    import string\n    s = re.sub(r\"[^a-zA-Z]\", \" \", s).lower()\n    return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "pass\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    words = s.split()\n    if len(words) == n:\n        return words\n    else:\n        return []\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    if not s:\n        return words\n    words = s.split()\n    for i in range(len(words)):\n        if words[i].count(' ') == n:\n            words[i] = words[i].replace(' ', '')\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s) - n + 1):\n        word = s[i:i + n]\n        if word not in words:\n            words.append(word)\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if not s:\n        return []\n    words = s.split()\n    return [word for word in words if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    if n == 0:\n        return []\n    if s[0]!= \" \":\n        return []\n    words = []\n    for word in s.split(\" \"):\n        if len(word) == n:\n            words.append(word)\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[0:i])\n            s = s[i+1:]\n        else:\n            words.append(s[i])\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words",
    "# Your code here\n    import re\n    import string\n    import operator\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\n# Tests\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
    "if s == '':\n        return []\n    else:\n        return [w for w in s.split() if len(w) == n]\n\n\n# Tests\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if len(s) == 0:\n        return []\n\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = s.split()\n    words.sort()\n    return [word for word in words if len(word) == n]",
    "if s == \"\":\n        return []\n    else:\n        return [word for word in s.split(\" \") if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if word.count(n) == 1]\n\n\nif __name__ == '__main__':\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if s.count(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "import re\n    word_list = []\n    word_list = re.split(r\"[a-zA-Z]+\", s)\n    word_list.sort()\n    count = 0\n    for i in range(len(word_list)):\n        if word_list[i] == n:\n            count += 1\n            if count == len(word_list):\n                return word_list\n    return word_list",
    "if len(s) == 0:\n        return []\n    return [word for word in s.split() if len(word) == n]",
    "if s == \"\":\n        return []\n    \n    # Your code here\n    words = []\n    for char in s:\n        if char.isalpha() and char!= \" \":\n            words.append(char)\n    return words[:n]",
    "if s == '':\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n]\n\n\ndef select_words_1(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_1(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_1(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_1(\"simple white space\", 2) ==> []\n    select_words_1(\"Hello world\", 4) ==> [\"world\"]\n    select_words_1(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n]\n\n\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_2(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_2(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_2(\"simple white space\", 2) ==> []\n    select_words_2(\"Hello world\", 4) ==> [\"world\"]\n    select_words_2(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    else:",
    "if s == \"\":\n        return []\n    words = s.split()\n    word_set = set(words)\n    return [word for word in words if word in word_set]\n\n\ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if n <= 1:\n        return []\n    return [word for word in s.split() if word.count(s[0]) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    return [word for word in s.split(' ') if len(word) == n]\n\n\nif __name__ == '__main__':\n    print(select_words('Mary had a little lamb', 4))\n    print(select_words('Mary had a little lamb', 3))\n    print(select_words('simple white space', 2))\n    print(select_words('Hello world', 4))\n    print(select_words('Uncle sam', 3))",
    "if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == 2:\n        return [s, s]\n    if len(s) == 3:\n        return [s, s, s]\n\n    words = s.split(' ')\n    words = list(filter(lambda x: x!= '', words))\n    for i in range(len(words) - 1):\n        words[i] = words[i] +'' + words[i + 1]\n    if len(words) <= n:\n        return words\n    else:\n        return select_words(words, n)\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if len(s) == 0:\n        return []\n    res = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper() and i == 0:\n                if len(res) < n:\n                    res.append(s[i])\n            elif s[i].islower():\n                if len(res) < n:\n                    res.append(s[i])\n        else:\n            continue\n    return res",
    "import re\n    import string\n    words = re.split(r'[a-zA-Z]',s)\n    words = [word for word in words if word!= '']\n    return [word for word in words if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    words = []\n    words = s.split()\n    if len(words) >= n:\n        return words[:n]\n    else:\n        return []",
    "if len(s) == 0:\n        return []\n    if n == 0:\n        return ['']\n    \n    # your code here\n    # use a dictionary to store the consonant counts\n    counts = {}\n    # initialize a list to store the result\n    result = []\n    # iterate through the string and add the words from the string to the result\n    for word in s.split():\n        # check to see if the word is already in the dictionary\n        if word in counts:\n            counts[word] += 1\n        else:\n            # if not, add the word to the dictionary\n            counts[word] = 1\n\n    # iterate through the dictionary and check if the count is equal to or greater than n\n    for word, count in counts.items():\n        if count >= n:\n            result.append(word)\n\n    # return the result\n    return result",
    "# Your code here\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isdigit():\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if n < 0 or n > len(s):\n        return []\n    if n == 1:\n        return [\"%s\" % s]\n    if n == len(s):\n        return [\"%s %s\" % (s[0], s[1])]\n    words = []\n    for i in range(len(s) - n + 1):\n        words.append(\" \".join(s[i:i + n]))\n    return words",
    "if s == \"\":\n        return []\n    # Your code here\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\n# Test Cases\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    import re\n    words = re.findall(r'[a-z]+', s)\n    return [word for word in words if len(word) == n]\n\n\n# Testing\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
    "if s == \"\":\n        return []\n    words = s.split()\n    return [word for word in words if word.count(n) == 1]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Write your code here\n    if s == \"\":\n        return []\n    words = s.split()\n    count = 0\n    for word in words:\n        if word.count(str(n)) == 1:\n            return [word]\n        else:\n            count += 1\n    if count == n:\n        return []\n    else:\n        return []\n\n# Tests\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if word.count(n) == 1]\n\n\n# Tests\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if not s:\n        return []\n\n    # Your code here\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = s.split()\n    words = list(filter(lambda x: x!= \"\", words))\n    return words[:n]\n\nprint(select_words(\"Mary had a little lamb\", 4))",
    "if len(s) == 0:\n        return []\n    words = []\n    words_list = s.split()\n    for word in words_list:\n        if len(word) == n:\n            words.append(word)\n    return words",
    "words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if i == 0 or i == len(s) - 1:\n            if s[i]!='':\n                words.append(s[i])\n        else:\n            if s[i - 1] =='':\n                words.append(s[i - 1])\n                if s[i]!='':\n                    words.append(s[i])\n            elif s[i]!='':\n                words.append(s[i - 1])\n                words.append(s[i])\n    return words",
    "result = []\n    if s == \"\":\n        return result\n    else:\n        s = s.split()\n        for i in range(len(s)):\n            if s[i] == \" \":\n                for j in range(len(s)):\n                    if s[j]!= \" \":\n                        result.append(s[i] + \" \" + s[j])\n            else:\n                for j in range(len(s)):\n                    if s[j]!= \" \":\n                        result.append(s[i] + s[j])\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] =='':\n            words.append(s[i:i+1])\n    if len(words) == 0:\n        return []\n    else:\n        return words[:n]\n\n\n# Tests\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if word.count(n) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    \n    # return a list of words from the string s that contain exactly n consonants, in order these words appear in the string s\n    # if the string s is empty then the function should return an empty list\n    if s == \"\":\n        return []\n    \n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words",
    "words = []\n    if s == \"\":\n        return words\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\n\n# test cases\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    if s == \"\":\n        return words\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[:i])\n    for i in range(len(words)):\n        if len(words[i]) == n:\n            words.pop(i)\n    return words",
    "# Your code here\n    # define a list of words\n    words = []\n    # for each character in the string s\n    for i in range(len(s)):\n        # check if the character is a space\n        if s[i] =='':\n            # add the word to the list of words\n            words.append(s[i+1:i+n+1])\n    \n    # return the list of words\n    return words\n\n# test cases\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "s = s.lower()\n    word_list = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        else:\n            if s[i] in s:\n                if i + 1 == len(s) or s[i + 1] == \" \":\n                    word_list.append(s[i:i + n])\n    return word_list\n\n\ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if s == \"\":\n        return []\n    s = s.lower()\n    res = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            res.append(s[i:i + 1])\n    return res\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if i == 0 or i == len(s) - 1:\n            words.append(s[i])\n        else:\n            if s[i] =='':\n                words.append(s[i])\n            else:\n                words.append(s[i])\n    return words[:n]",
    "if len(s) == 0:\n        return []\n    words = []\n    for char in s:\n        if char.isalpha():\n            if len(words) + 1 == n:\n                words.append(char)\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] =='':\n            words.append(s[i:])\n        else:\n            words.append(s[i])\n    return words",
    "# Your code here\n    if s == '':\n        return []\n    else:\n        word_list = []\n        for word in s.split(' '):\n            if len(word) == n:\n                word_list.append(word)\n        return word_list\n\n\nif __name__ == '__main__':\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
    "import re\n    # Your code here\n    # Your solution should be in the form of a list\n    # Example 1:\n    # s = \"Mary had a little lamb\"\n    # n = 4\n    # Output: [\"little\", \"Mary\", \"lamb\"]\n    # Example 2:\n    # s = \"simple white space\"\n    # n = 2\n    # Output: []\n    # Example 3:\n    # s = \"Hello world\"\n    # n = 4\n    # Output: [\"world\"]\n    # Example 4:\n    # s = \"Uncle sam\"\n    # n = 3\n    # Output: [\"Uncle\"]\n    # Example 5:\n    # s = \"Bobby\"\n    # n = 3\n    # Output: [\"Bobby\"]\n    # Example 6:\n    # s = \"Bobby\"\n    # n = 4\n    # Output: [\"Bobby\"]\n    # Example 7:\n    # s = \"Bobby\"\n    # n = 5\n    # Output: [\"Bobby\"]\n    # Example 8:\n    # s = \"Bobby\"\n    # n = 8\n    # Output: [\"Bobby\"]\n    # Example 9:\n    # s = \"Bobby\"\n    # n = 4\n    # Output: [\"Bobby\"]\n    # Example 10:\n    # s = \"Bobby\"\n    # n = 6\n    # Output: [\"Bobby\"]\n    # Example 11:\n    # s = \"Mary had a little lamb\"\n    # n = 4\n    # Output: [\"little\", \"Mary\", \"lamb\"]\n    # Example 12:\n    # s = \"Mary had a little lamb\"\n    # n = 6\n    # Output: [\"Mary\", \"lamb\"]\n    # Example 13:\n    # s = \"simple white space\"\n    # n = 2\n    # Output: []\n    # Example 14:\n    # s = \"Hello world\"\n    # n = 4\n    # Output: [\"world\"]\n    # Example 15:\n    # s = \"Uncle sam\"\n    # n = 3\n    # Output: [\"Un",
    "if s == \"\":\n        return []\n    s = s.split()\n    return [word for word in s if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Write your code here\n    words = []\n    if s == '':\n        return words\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                for j in range(i + 1, len(s)):\n                    if s[i].isupper() and s[j].isalpha():\n                        if s[i] == s[j] and s[i] not in words:\n                            words.append(s[i])\n    return words",
    "words = []\n    if len(s) == 0:\n        return words\n    words = s.split()\n    for i in range(len(words)):\n        if i == n:\n            return words\n        if len(words[i]) == n:\n            words[i] = words[i][:n]\n    return words",
    "words = []\n    for word in s.split(\" \"):\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if not s:\n        return []\n    if len(s) == 1:\n        return [s]\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        if i < len(s) - 1:\n            words.append(s[i:i+n])\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    word = []\n    words = s.split()\n    for word in words:\n        if word.count(n) == 1:\n            word.append(word)\n        else:\n            continue\n    return word\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if not s:\n        return []\n\n    # Your code here\n\n    # Create a list to hold the words in the string s\n    words = []\n    for word in s.split(\" \"):\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    else:\n        word_list = s.split()\n        return [word for word in word_list if word.count(n) > 1]\n\n\ndef select_words_recursive(s, n, word_list):\n    if s == \"\":\n        return []\n    else:\n        if n == 1:\n            word_list.append(s)\n            return word_list\n        else:\n            return select_words_recursive(s[1:], n-1, word_list)\n\n\ndef main():\n    print(select_words_recursive(\"Mary had a little lamb\", 4, []))\n    print(select_words_recursive(\"Mary had a little lamb\", 3, [\"Mary\", \"lamb\"]))\n    print(select_words_recursive(\"simple white space\", 2, []))\n    print(select_words_recursive(\"Hello world\", 4, [\"world\"]))\n    print(select_words_recursive(\"Uncle sam\", 3, [\"Uncle\"]))\n\n\nif __name__ == '__main__':\n    main()",
    "pass\n\n\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_2(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_2(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_2(\"simple white space\", 2) ==> []\n    select_words_2(\"Hello world\", 4) ==> [\"world\"]\n    select_words_2(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    pass\n\n\ndef select_words_3(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_3(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_3(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_3(\"simple white space\", 2) ==> []\n    select_words_3(\"Hello world\", 4) ==> [\"world\"]\n    select_words_3(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    pass\n\n\ndef select_words_4(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty",
    "if s == \"\":\n        return []\n    # Your code here\n    return [word for word in s.split() if s.count(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n\n    # Your code here\n    words = s.split()\n    for word in words:\n        if len(word) == n:\n            yield word\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = s.split()\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    result = []\n    for key, value in word_count.items():\n        if value == n:\n            result.append(key)\n    return result\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if not s:\n        return []\n    if not n:\n        return s.split()\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words",
    "if len(s) == 0:\n        return []\n    if s == \"\":\n        return []\n    s = s.lower()\n    s = s.split(\" \")\n    res = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue\n        if s[i] == \" \":\n            res.append(s[i])\n            continue",
    "words = []\n    if len(s) == 0:\n        return words\n    # if len(s) == 1:\n    #     words.append(s)\n    # else:\n    #     for i in range(1, len(s)):\n    #         if s[i] =='':\n    #             words.append(s[:i])\n    #             words.append(s[i:])\n    #             break\n    #     return words\n    words = s.split()\n    return [word for word in words if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\n\ndef select_words2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words2(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words2(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words2(\"simple white space\", 2) ==> []\n    select_words2(\"Hello world\", 4) ==> [\"world\"]\n    select_words2(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n]",
    "if len(s) == 0:\n        return []\n    \n    word_list = s.split()\n    \n    if len(word_list) == 0:\n        return []\n    \n    word_list.sort()\n    \n    word_list = word_list[:n]\n    \n    return word_list",
    "return [word for word in s.split() if len(word) == n]\n\n# test\ns = \"Mary had a little lamb\"\nn = 4\nprint(select_words(s, n))\n\ns = \"simple white space\"\nn = 2\nprint(select_words(s, n))\n\ns = \"Hello world\"\nn = 4\nprint(select_words(s, n))\n\ns = \"Uncle sam\"\nn = 3\nprint(select_words(s, n))",
    "s = s.split()\n    return [word for word in s if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = s.split()\n    return [word for word in words if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = s.split()\n    return [word for word in words if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == \"\":\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result",
    "if not s:\n        return []\n    s_list = s.split()\n    res = []\n    for word in s_list:\n        if len(word) == n:\n            res.append(word)\n    return res",
    "words = []\n    if len(s) == 0:\n        return words\n    \n    for word in s.split():\n        if word.count(n) == 1:\n            words.append(word)\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "pass\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == '':\n        return []\n    else:\n        word_list = s.split()\n        return [word for word in word_list if word.count(n) == 1]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        words.append(s[i])\n    words.sort()\n    for i in range(len(words)):\n        if words[i] == \" \":\n            continue\n        if words[i] == \" \":\n            words[i] = \"\"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words[i] == \" \":\n            words[i] = \" \"\n        if words",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "if s == '':\n        return []\n    s = s.split()\n    s.sort()\n    return [word for word in s if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "return [word for word in s.split() if len(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "# Your code here\n    return [word for word in s.split() if word.count(n) == 1]\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    assert select_words(\"\", 0) == []\n    assert select_words(\"hello\", 0) == []\n    assert select_words(\"hello world\", 0) == [\"world\"]\n    assert select_words(\"hello world\", 1) == [\"hello\"]\n    assert select_words(\"hello world\", 2) == [\"hello\"]\n    assert select_words(\"hello world\", 3) == [\"hello\", \"world\"]\n    assert select_words(\"hello world\", 4) == [\"hello\", \"world\"]\n    assert select_words(\"hello world\", 5) == [\"hello\", \"world\", \"world\", \"hello\"]\n    assert select_words(\"hello world\", 6) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\"]\n    assert select_words(\"hello world\", 7) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]\n    assert select_words(\"hello world\", 8) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"world\"]\n    assert select_words(\"hello world\", 9) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"world\"]\n    assert select_words(\"hello world\", 10) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\", \"world\"]\n    assert select_words(\"hello world\", 11) == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    assert select_words(\"hello world\", 12)",
    "if s == \"\":\n        return []\n    words = []\n    for word in s.split():\n        if word.count(n) == n:\n            words.append(word)\n    return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "import string\n    s = s.lower()\n    words = []\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            if i < len(s) - 1:\n                if s[i + 1] =='':\n                    words.append(s[i:i+2])\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
    "words = []\n    if len(s) == 0:\n        return words\n    words = s.split()\n    for word in words:\n        if len(word) == n:\n            words.append(word)\n    return words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}