{
  "problem": {
    "task_id": "HumanEval/48",
    "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
    "entry_point": "is_palindrome",
    "docstring": "",
    "problem_id": 48
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if not text:\n        return True\n\n    if len(text) <= 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])",
    "if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])",
    "if not text:\n        return True\n    if len(text) % 2:\n        return False\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if len(text) == 2:\n        return text[0] == text[1]\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])",
    "if not text:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if not text:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    if not text:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome_2(text[1:-1])",
    "if len(text) == 1:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n\n    if len(text) == 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome_2(text[1:-1])\n\n\ndef is_palindrome_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_3('')\n    True\n    >>> is_palindrome_3('aba')\n    True\n    >>> is_palindrome_3('aaaaa')\n    True\n    >>> is_palindrome_3('zbcd')\n    False\n    \"\"\"\n\n    if len(text) == 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome_3(text[1:-1])\n\n\ndef is_palindrome_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_4('')\n    True\n    >>> is_palindrome_4('aba')\n    True\n    >>> is_palindrome_4('aaaaa')\n    True\n    >>> is_palindrome_4('zbcd')\n    False\n    \"\"\"\n\n    if len(text) == 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome_4(text[1:-1])\n\n\nif __name__ == \"__",
    "if len(text) <= 1:\n        return True\n\n    first_letter = text[0]\n    last_letter = text[-1]\n\n    if first_letter.lower()!= last_letter.lower():\n        return False\n\n    return is_palindrome(text[1:-1])",
    "if not text:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
    "if len(text) <= 1:\n        return True\n    else:\n        first = text[0]\n        second = text[1:]\n        return first == second[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 1:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == \"\":\n        return True\n\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left]!= text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(text) < 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if text == '':\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False",
    "if text == '':\n        return True\n    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if not text:\n        return True\n    if len(text) < 2:\n        return True\n\n    first_char = text[0]\n    second_char = text[1]\n\n    if first_char!= second_char:\n        return False\n\n    return is_palindrome(text[2:])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "text = text.lower()\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])",
    "if text == text[::-1]:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    first = text[0]\n    second = text[1:]\n\n    return first == second[::-1]",
    "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n\n    testmod()",
    "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    else:\n        if text[0]!= text[-1]:\n            return False\n        return is_palindrome(text[1:-1])",
    "if text == '':\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    left, right = 0, len(text) - 1\n    while left <= right:\n        if text[left].lower()!= text[right].lower():\n            return False\n        left, right = left + 1, right - 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    first_char = text[0]\n    second_char = text[1:]\n\n    return first_char == second_char[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if text == \"\":\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) < 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if len(text) == 1:\n        return True\n    first = text[0]\n    second = text[1:]\n    if first!= second[::-1]:\n        return False\n    return True",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "text = text.lower()\n    if len(text) <= 1:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    if len(text) == 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if text == \"\":\n        return True\n    if len(text) < 2:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]",
    "if text == '':\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])",
    "if len(text) < 2:\n        return True\n    first = text[0]\n    second = text[1:]\n    if first!= second[::-1]:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 1:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if text == '':\n        return True\n\n    if len(text) < 2:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])",
    "if text == \"\":\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n\n    first_char = text[0]\n    last_char = text[-1]\n\n    if first_char!= last_char:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) < 1:\n        return True\n\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\ndef main():\n    print(is_palindrome(''))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome('zbcd'))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if len(text) < 1:\n        return True\n    else:\n        first = text[0]\n        if first!= text[-1]:\n            return False\n        else:\n            return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if text == text[::-1]:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 0:\n        return True\n\n    first_letter = text[0]\n    if first_letter not in 'aeiou':\n        return False\n\n    return first_letter == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "text_lower = text.lower()\n    return text_lower == text_lower[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if text == '':\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}