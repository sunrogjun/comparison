{
  "problem": {
    "task_id": "HumanEval/155",
    "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
    "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "even_odd_count",
    "docstring": "",
    "problem_id": 155
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "even_count = 0\n    odd_count = 0\n\n    # check if num is positive\n    if num < 0:\n        num = num * -1\n\n    # if num is positive, count the number of even digits\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n\n        # if num is positive, count the number of odd digits\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()",
    "even_digits = 0\n    odd_digits = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)",
    "if num < 0:\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        odd_count += 1\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if digit == \"0\":\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)",
    "even_count = 0\n    odd_count = 0\n    if num > 0:\n        even_count = num % 2\n    if num < 0:\n        odd_count = num % 2\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "odd_count = 0\n    even_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(123))\n    print(even_odd_count(-12))\n    print(even_odd_count(1))\n\n\nif __name__ == '__main__':\n    main()",
    "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_count += 1\n        elif digit == '1':\n            odd_count += 1\n    return (even_count, odd_count)",
    "even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\nprint(even_odd_count2(-12))\nprint(even_odd_count2(123))",
    "count = 0\n    for i in str(num):\n        if i == '0':\n            count += 1\n        else:\n            break\n    return count, int(count)\n\n\ndef main():\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()",
    "if num < 0:\n        return (0, 0)\n    num = abs(num)\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()",
    "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))",
    "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()",
    "if num < 0:\n        num = num * -1\n    even_digit = 0\n    odd_digit = 0\n    while num > 0:\n        even_digit += (num % 10)\n        num = num // 10\n    return (even_digit, odd_digit)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "odd_count = 0\n    even_count = 0\n    if num < 0:\n        num = -num\n\n    while num > 0:\n        odd_count += 1\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))\nprint(even_odd_count(10))\nprint(even_odd_count(-1))",
    "even = 0\n    odd = 0\n    num = str(num)\n    for i in num:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "if num < 0:\n        return (0, 0)\n\n    even_num = 0\n    odd_num = 0\n\n    while num > 0:\n        odd_num += 1\n        if num % 2 == 0:\n            even_num += 1\n        num //= 10\n\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "count = 0\n    for i in str(num):\n        if i == '0':\n            count += 1\n        else:\n            break\n    return (count, count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()",
    "return (num % 10, num // 10)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\ndef test_even_odd_count_negative():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)",
    "even_odd = 0\n    while num > 0:\n        even_odd += 1\n        num = num//10\n    return (even_odd, num)\n\n\ndef even_odd_count_recursive(num):\n    \"\"\"Recursive function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive(-12) ==> (1, 1)\n        even_odd_count_recursive(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num)\n    else:\n        return (num-1, num)\n\n\ndef even_odd_count_recursive2(num):\n    \"\"\"Recursive function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive2(-12) ==> (1, 1)\n        even_odd_count_recursive2(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num)\n    else:\n        return (num-1, num)\n\n\ndef even_odd_count_iterative(num):\n    \"\"\"Iterative function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_iterative(-12) ==> (1, 1)\n        even_odd_count_iterative(123) ==> (1, 2)\n    \"\"\"\n    even_odd = 0\n    while num > 0:\n        even_odd += 1\n        num = num//10\n    return (even_odd, num)\n\n\ndef even_odd_count_recursive_iterative(num):\n    \"\"\"Iterative function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive_iterative(-12) ==> (1, 1)\n        even_odd_count",
    "if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num:\n        even += num % 2\n        num = num // 2\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234) == (1, 2)\n    assert even_odd_count(12345) == (1, 2)",
    "return tuple(map(int, str(num)))\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "return (num // 10, num % 10)",
    "even = 0\n    odd = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        num //= 2\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))\n    print(even_odd_count(-12))",
    "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    if num == 0:\n        return (0, 0)\n    while num > 0:\n        digit = num % 10\n        if digit == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if num < 0:\n        num = num * -1\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()",
    "even_num = 0\n    odd_num = 0\n    for digit in str(num):\n        if digit == '2':\n            odd_num += 1\n        else:\n            even_num += 1\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        num = num + 2**31\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_odd_count = 0\n    odd_count = 0\n\n    if num < 0:\n        num = num * -1\n\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            even_odd_count += 1\n        else:\n            odd_count += 1\n\n    return (even_odd_count, odd_count)",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    num = int(input('Enter a number: '))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()",
    "even_count = 0\n    odd_count = 0\n    if num > 0:\n        for digit in str(num):\n            if digit == '0':\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(456) == (0, 0)",
    "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
    "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        odd += num % 2\n        even += num // 2\n        num //= 10\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "even_num = 0\n    odd_num = 0\n\n    if num > 0:\n        while num >= 10:\n            even_num += 1\n            num = num // 10\n    else:\n        while num < 0:\n            odd_num += 1\n            num = num * 10\n\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        num = -num\n    even_digit = 0\n    odd_digit = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_digit += 1\n        else:\n            odd_digit += 1\n    return (even_digit, odd_digit)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num == 0:\n        return (0, 0)\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_odd += 1\n    return even_odd, num\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()",
    "if num < 0:\n        num = abs(num)\n        return num % 2, num // 2\n    else:\n        return num % 2, num // 2 + 1\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_odd = 0\n    if num % 2 == 0:\n        even_odd = 1\n    return (even_odd, num // 2)",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
    "if num < 0:\n        num = -num\n    even_num, odd_num = 0, 0\n    while num > 0:\n        even_num += (num % 2)\n        num /= 2\n    return even_num, odd_num\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n            num /= 2\n        else:\n            odd_count += 1\n            num /= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n\n    if num < 0:\n        num = -num\n\n    while num > 0:\n        even += 1\n        if num % 2 == 0:\n            odd += 1\n        num = num / 2\n\n    return (even, odd)",
    "if num == 0:\n        return (0, 0)\n\n    even = 0\n    odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)",
    "if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for c in str(num):\n        if c % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()",
    "if num < 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    num = -12\n    result = even_odd_count(num)\n    assert result == (1, 1)\n    # Test 2\n    num = 123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 3\n    num = -12.123\n    result = even_odd_count(num)\n    assert result == (1, 1)\n    # Test 4\n    num = 123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 5\n    num = -12.123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 6\n    num = 123.123.123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 7\n    num = -12.123.123.123\n    result = even_odd_count(num)\n    assert result == (1",
    "even_count = 0\n    odd_count = 0\n    num = str(num)\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    while num!= 0:\n        num, mod = divmod(num, 10)\n        even_count += 1\n    return (even_count, odd_count)\n\n\ndef test_function(test_case):\n    result = even_odd_count(test_case[0])\n    if result == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_cases = [\n    (-12, (1, 1)),\n    (123, (1, 2))\n]\n\nfor test_case in test_cases:\n    test_function(test_case)",
    "even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
    "even = 0\n    odd = 0\n    for char in str(num):\n        if char % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        even_count += 1 if digit % 2 == 0 else 0\n        num //= 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        num = -num\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        even_count += num % 2\n        num = num // 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_odd_count = 0, 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_odd_count += 1\n        else:\n            odd_count += 1\n    return (even_odd_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_2(-12) ==> (1, 1)\n        even_odd_count_2(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count_2(-12))\nprint(even_odd_count_2(123))\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_3(-12) ==> (1, 1)\n        even_odd_count_3(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count_3(-12))\nprint(even_odd_count_3(123))",
    "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num == 0:\n        return 0, 0\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i == \"0\":\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()",
    "if num < 0:\n        return (0, 0)\n\n    even, odd = 0, 0\n\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234) == (1, 2)\n\n    assert even_odd_count(-123) == (0, 0)\n    assert even_odd_count(123) == (0, 0)\n    assert even_odd_count(1234) == (0, 0)\n\n    assert even_odd_count(-1234) == (0, 0)\n    assert even_odd_count(1234) == (0, 0)\n    assert even_odd_count(123456789) == (0, 0)\n\n    assert even_odd_count(-12345) == (1, 1)\n    assert even_odd_count(123456) == (1, 2)\n    assert even_odd_count(12345) == (1, 2)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)",
    "even_count = 0\n    odd_count = 0\n    if num > 0:\n        while num > 0:\n            odd_count += 1\n            num //= 10\n    else:\n        while num < 0:\n            even_count += 1\n            num = num * 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "return (num % 2, num % 2)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if num < 0:\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(-2))\nprint(even_odd_count(0))\nprint(even_odd_count(3))",
    "if num < 0:\n        return (0, 0)\n    even_digits = 0\n    odd_digits = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 2\n    return (even_digits, odd_digits)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "return (num // 10, num % 10)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
    "even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    if num % 2 == 0:\n        even_count = 1\n    if num % 2 == 1:\n        odd_count = 1\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 1)\n    assert even_odd_count(2) == (1, 2)\n    assert even_odd_count(3) == (1, 2)\n    assert even_odd_count(4) == (1, 2)\n    assert even_odd_count(5) == (1, 2)\n    assert even_odd_count(6) == (1, 2)\n    assert even_odd_count(7) == (1, 2)\n    assert even_odd_count(8) == (1, 2)\n    assert even_odd_count(9) == (1, 2)\n    assert even_odd_count(10) == (1, 2)\n    assert even_odd_count(11) == (1, 2)\n    assert even_odd_count(12) == (1, 2)\n    assert even_odd_count(13) == (1, 2)\n    assert even_odd_count(14) == (1, 2)\n    assert even_odd_count(15) == (1, 2)\n    assert even_odd_count(16) == (1, 2)\n    assert even_odd_count(17) == (1, 2)\n    assert even_odd_count(18) == (1, 2)\n    assert even_odd_count(19) == (1, 2)\n    assert even_odd_count(20) == (1, 2)\n    assert even_odd_count(21) == (1, 2)\n    assert even_odd_count(22) == (1, 2)\n    assert",
    "even_odd_count = []\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_odd_count.append(int(i))\n    return tuple(even_odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()",
    "even_odd_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_odd_count += 1\n        else:\n            odd_count += 1\n    return (even_odd_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        return (-1, -1)\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
    "even = 0\n    odd = 0\n    if num >= 0:\n        while num > 0:\n            even += num % 2\n            num //= 2\n        while num > 0:\n            odd += num % 2\n            num //= 2\n    return (even, odd)\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(4) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()",
    "if num < 0:\n        return (num % 2, num // 2)\n    else:\n        return (num % 2, num // 2)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()",
    "even = 0\n    odd = 0\n    if num >= 0:\n        even = int(num / 2)\n        num = num - even * 2\n    if num < 0:\n        odd = int(num / 2)\n        num = num - odd * 2\n    return (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n\n    for digit in str(num):\n        if digit == \"2\":\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even = 0\n    odd = 0\n\n    for digit in str(num):\n        if digit == '0':\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '2':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        num = num * -1\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    if num > 0:\n        while num > 0:\n            if num % 2 == 0:\n                even_count += 1\n            num //= 2\n    else:\n        while num < 0:\n            if num % 2 == 0:\n                odd_count += 1\n            num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (1, 1)\n    if num % 2 == 0:\n        return (1, 2)\n    return (2, 1)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()",
    "even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))",
    "count = 0\n    while num > 0:\n        count += num % 10\n        num = num // 10\n    return (count, count + 1)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n\n\ndef main():\n    test_even_odd_count()\n\n\nif __name__ == \"__main__\":\n    main()",
    "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '2':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 1)\n    assert even_odd_count(2) == (2, 1)\n    assert even_odd_count(3) == (3, 1)\n    assert even_odd_count(4) == (3, 2)\n    assert even_odd_count(5) == (3, 3)\n    assert even_odd_count(6) == (3, 4)\n    assert even_odd_count(7) == (3, 5)\n    assert even_odd_count(8) == (3, 6)\n    assert even_odd_count(9) == (3, 7)\n    assert even_odd_count(10) == (3, 8)\n    assert even_odd_count(11) == (3, 9)\n    assert even_odd_count(12) == (3, 10)\n    assert even_odd_count(13) == (3, 11)\n    assert even_odd_count(14) == (3, 12)\n    assert even_odd_count(15) == (3, 13)\n    assert even_odd_count(16) == (3, 14)\n    assert even_odd_count(17) == (3, 15)\n    assert even_odd_count(18) == (3, 16)\n    assert even_odd_count(19) == (3, 17)\n    assert even_odd_count(20) == (3, 18)\n    assert even_odd_count(21) == (3, 19)\n    assert even_odd_count(22) ==",
    "if num < 0:\n        return (-1, -1)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        even_count += num % 2\n        num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
    "even = 0\n    odd = 0\n    for c in str(num):\n        if c % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}