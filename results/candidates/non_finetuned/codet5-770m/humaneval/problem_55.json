{
  "problem": {
    "task_id": "HumanEval/55",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
    "entry_point": "fib",
    "docstring": "",
    "problem_id": 55
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime(10)\n    1\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef fib_sieve(n: int):\n    \"\"\"Return the nth Fibonacci sieve number.\n    >>> fib_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_sieve(1)\n    [1]\n    >>> fib_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    sieve = [1]\n    for i in range(3, n+1):\n        if n % i == 0:\n            sieve.append(i)\n    return sieve\n\n\ndef fib_prime_sieve(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_prime_sieve(1)\n    [1]\n    >>> fib_prime_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
    "if n <= 2:\n        return n\n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a = 1\n    b = 0\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_p(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_p(10)\n    55\n    >>> fib_p(1)\n    1\n    >>> fib_p(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_p(n - 1) + fib_p(n - 2) + fib_p(n - 3)\n\n\ndef fib_l(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_l(10)\n    55\n    >>> fib_l(1)\n    1\n    >>> fib_l(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_l(n - 1) + fib_l(n - 2) + fib_l(n - 3)\n\n\ndef fib_r(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_r(10)\n    55\n    >>> fib_r(1)\n    1\n    >>> fib_r(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_r(n - 1) + fib_r(n - 2) + fib_r(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    f1 = 0\n    f2 = 1\n    for _ in range(2, n + 1):\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n\n    return f3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return b",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError('n must be greater than 0')\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_recursive(n: int, memo=None):\n    \"\"\"Return n-th Fibonacci number recursively.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        memo[n] = n\n        return n\n    memo[n] = fib_recursive(n - 1, memo) + fib_recursive(n - 2, memo)\n    return memo[n]\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return n-th Fibonacci number, with prime.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    i = 2\n    j = 3\n    while j < n:\n        i = j\n        j += i\n    return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError('n must be greater than 0')\n\n    if n == 0 or n == 1:\n        return n\n\n    return fib(n-1) + fib(n-2)",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)",
    "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a = 0\n    b = 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
    "if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b",
    "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n must be positive\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
    "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_gen(n: int):\n    \"\"\"Generate n-th Fibonacci number.\n    >>> fib_gen(10)\n    55\n    >>> fib_gen(1)\n    1\n    >>> fib_gen(8)\n    21\n    \"\"\"\n    fib_list = []\n    for i in range(n):\n        fib_list.append(fib(i))\n    return fib_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_2(10)\n    55\n    >>> fib_2(1)\n    1\n    >>> fib_2(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_3(10)\n    55\n    >>> fib_3(1)\n    1\n    >>> fib_3(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_4(10)\n    55\n    >>> fib_4(1)\n    1\n    >>> fib_4(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
    "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a = 1\n    b = 0\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n <= 0:\n        raise ValueError('n must be greater than 0.')\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}