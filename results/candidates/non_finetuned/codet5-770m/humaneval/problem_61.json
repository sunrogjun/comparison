{
  "problem": {
    "task_id": "HumanEval/61",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
    "entry_point": "correct_bracketing",
    "docstring": "",
    "problem_id": 61
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    return not stack\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing2(\"(\")\n    False\n    >>> correct_bracketing2(\"()\")\n    True\n    >>> correct_bracketing2(\"(()())\")\n    True\n    >>> correct_bracketing2(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \")\":\n                    return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets_dict = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if brackets_dict[bracket]!= bracket:\n            return False\n    return True\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket in \"{\":\n            stack.append(bracket)\n        elif bracket in \"}\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack",
    "open_brackets = []\n    close_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            open_brackets.append(bracket)\n        elif bracket == \")\":\n            if len(open_brackets) == 0:\n                return False\n            if open_brackets.pop()!= bracket:\n                return False\n    return len(open_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "open_brackets = [False] * len(brackets)\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            open_brackets[i] = True\n        elif brackets[i] == \")\":\n            if open_brackets[i]:\n                return False\n            else:\n                open_brackets[i] = False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = list(brackets)\n    brackets.reverse()\n    for i in range(len(brackets)):\n        if brackets[i]!= \"(\" and brackets[i]!= \")\":\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack",
    "open_brackets = []\n    close_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            open_brackets.append(bracket)\n        elif bracket == \")\":\n            if len(open_brackets) == 0:\n                return False\n            else:\n                open_brackets.pop()\n        else:\n            close_brackets.append(bracket)\n    return len(open_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) == 0:\n        return False\n\n    if brackets[0]!= \"(\":\n        return False\n\n    if brackets[-1]!= \")\":\n        return False\n\n    if brackets[1:-1]!= brackets[2:-2]:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                top = stack.pop()\n                if top!= bracket:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    return True",
    "brackets = list(brackets)\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            if brackets[i + 1] == \")\":\n                brackets.pop(i)\n            else:\n                return False\n        elif brackets[i] == \")\":\n            if brackets[i - 1] == \"(\":\n                brackets.pop(i)\n            else:\n                return False\n    if len(brackets) == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets_list = brackets.split(\" \")\n    for bracket in brackets_list:\n        if bracket == \"(\":\n            continue\n        elif bracket == \")\":\n            if brackets_list.index(bracket) == len(brackets_list) - 1:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    return brackets.count(\"(\") == brackets.count(\")\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = list(brackets)\n    brackets.sort()\n    return brackets[0] == brackets[-1] and correct_bracketing(brackets[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
    "stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n                else:\n                    return True\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) == 0:\n        return True\n\n    open_brackets = []\n    close_brackets = []\n\n    for char in brackets:\n        if char == \"(\":\n            open_brackets.append(char)\n        elif char == \")\":\n            close_brackets.append(char)\n\n    if len(open_brackets) == 0 or len(close_brackets) == 0:\n        return False\n\n    for open_bracket in open_brackets:\n        if open_bracket not in close_brackets:\n            return False\n\n    return True\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack[-1]!= \"(\":\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()()\"))\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\")(()\")\n    print(correct_bracketing(\"))\"))",
    "stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "bracket_map = {\"(\": \")\", \")\": \"(\"}\n    stack = []\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if bracket_map[stack[-1]]!= bracket:\n                return False\n            stack.pop()\n    return not stack",
    "open_brackets = {\"(\", \"[\", \"{\", \"<\", \"<=\", \">\"}\n    close_brackets = {\")\", \"]\", \"}\", \"]\", \">\", \">=\"}\n    if not brackets:\n        return False\n    for bracket in brackets:\n        if bracket not in open_brackets:\n            return False\n        if bracket not in close_brackets:\n            return False\n    return True",
    "brackets_dict = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\"\n    }\n    for bracket in brackets:\n        if bracket not in brackets_dict:\n            return False\n    return True",
    "if brackets is None or len(brackets) == 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if bracket == \"(\":\n                if top!= \"(\":\n                    return False\n            elif bracket == \")\":\n                if top!= \")\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if brackets == \"\":\n        return False\n    if len(brackets) % 2 == 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) < 2:\n        return True\n    for i in range(len(brackets) - 1):\n        if brackets[i]!= brackets[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "open_brackets = ['(', '[', '{']\n    close_brackets = [')', ']', '}']\n\n    for bracket in brackets:\n        if bracket in open_brackets:\n            open_brackets.remove(bracket)\n        elif bracket in close_brackets:\n            close_brackets.remove(bracket)\n        else:\n            return False\n    return len(open_brackets) == 0 and len(close_brackets) == 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if not brackets:\n        return True\n    if brackets[0] == \"(\":\n        if brackets[-1] == \")\":\n            return correct_bracketing(brackets[1:-1])\n        else:\n            return False\n    elif brackets[-1] == \")\":\n        return correct_bracketing(brackets[:-1])\n    else:\n        return False\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n    if brackets[0] == \"(\":\n        if brackets[-1] == \")\":\n            return correct_bracketing_2(brackets[1:-1])\n        else:\n            return correct_bracketing_2(brackets[:-1])\n    elif brackets[-1] == \")\":\n        return correct_bracketing_2(brackets[:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= bracket:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return brackets == brackets.replace(\"(\", \"\").replace(\")\", \"\").replace(\")\", \"\")",
    "if len(brackets) < 2:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    return len(stack) == 0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if char!= top:\n                return False\n    if not stack:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return bracket_count(brackets) == 0\n\n\ndef bracket_count(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the number of opening brackets.\n\n    >>> bracket_count(\"(\")\n    0\n    >>> bracket_count(\"()\")\n    1\n    >>> bracket_count(\"(()())\")\n    2\n    >>> bracket_count(\")(()\")\n    0\n    \"\"\"\n    brackets_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            brackets_count += 1\n        elif bracket == \")\":\n            brackets_count -= 1\n        if brackets_count < 0:\n            return brackets_count\n    return brackets_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) % 2 == 1:\n        return False\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for b in brackets:\n        if b in opening_brackets:\n            stack.append(b)\n        elif b in closing_brackets:\n            if len(stack) == 0 or opening_brackets[stack.pop()]!= closing_brackets[b]:\n                return False\n    return len(stack) == 0\n\n\ndef main():\n    print(correct_bracketing(\"()\"))\n    print(correct_bracketing(\"[]\"))\n    print(correct_bracketing(\"([])\"))\n    print(correct_bracketing(\"([)]\"))\n    print(correct_bracketing(\"((()())\"))\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\"(()())\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= bracket:\n                    return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) > 0:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "open_brackets = [\n        \"(\",\n        \"[\",\n        \"{\",\n        \"<\",\n        \">\",\n        \"<=\",\n        \">=\",\n        \"!=\",\n    ]\n    close_brackets = [\n        \")\",\n        \"]\",\n        \"}\",\n        \"]\",\n        \")\",\n        \"]\"\n    ]\n    for bracket in brackets:\n        if bracket in open_brackets:\n            return False\n        if bracket in close_brackets:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not brackets:\n        return True\n    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                if stack.pop()!= \"(\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return (\n        brackets.count(\"(\") == brackets.count(\")\")\n        and brackets.count(\"(\") == brackets.count(\")\")\n        and brackets.count(\"(\") == brackets.count(\")\")\n        and brackets.count(\"(\") == brackets.count(\")\")\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= \"(\" and top!= \")\":\n                return False\n    return len(stack) == 0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()\")\n          )\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\")(()\")\n          )",
    "stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n                else:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()()\"))\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\")(()\")\n    print(correct_bracketing(\"((())))\"))",
    "if not brackets:\n        return True\n\n    open_brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\"\n    }\n    close_brackets = {\n        \")\": \")\",\n        \"]\": \"]\"\n    }\n\n    for bracket in brackets:\n        if bracket in open_brackets.keys():\n            if bracket == close_brackets[open_brackets[bracket]]:\n                continue\n            else:\n                return False\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) < 2:\n        return False\n    open_brackets = [\"(\", \"[\", \"{\", \"<\", \">\"]\n    close_brackets = [\")\", \"]\", \"}\", \"{\", \"<\"]\n    for bracket in brackets:\n        if bracket not in open_brackets:\n            return False\n        if bracket not in close_brackets:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"()())\"))\n    print(correct_bracketing(\"((()())\"))\n    print(correct_bracketing(\"))()())\"))",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(\"(\")\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n        else:\n            pass\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= bracket:\n                return False\n    return not stack\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= bracket:\n                return False\n    return not stack",
    "open_brackets = [i for i in range(len(brackets))]\n    close_brackets = [i for i in range(len(brackets))]\n\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            open_brackets[i] += 1\n        elif brackets[i] == \")\":\n            close_brackets[i] += 1\n\n    for i in range(len(open_brackets)):\n        if open_brackets[i]!= close_brackets[i]:\n            return False\n    return True\n\n\ndef correct_bracketing_1(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_1(\"(\")\n    False\n    >>> correct_bracketing_1(\"()\")\n    True\n    >>> correct_bracketing_1(\"(()())\")\n    True\n    >>> correct_bracketing_1(\")(()\")\n    False\n    \"\"\"\n\n    open_brackets = [i for i in range(len(brackets))]\n    close_brackets = [i for i in range(len(brackets))]\n\n    for i in range(len(open_brackets)):\n        if brackets[i] == \"(\":\n            open_brackets[i] += 1\n        elif brackets[i] == \")\":\n            close_brackets[i] += 1\n\n    for i in range(len(open_brackets)):\n        if open_brackets[i]!= close_brackets[i]:\n            return False\n    return True\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n\n    open_brackets = [i for",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == \"(\":\n                continue\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n        else:\n            return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()\") == True)\n    print(correct_bracketing(\"(()())\") == True)\n    print(correct_bracketing(\")(()\") == False)",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) > 0:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()\")\n          )\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\")(()\")\n          )",
    "brackets_set = set()\n    for bracket in brackets:\n        if bracket == \"(\":\n            brackets_set.add(\"(\")\n        elif bracket == \")\":\n            brackets_set.add(\")\")\n\n    if not brackets_set:\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) > 0:\n                if stack[-1]!= \"(\":\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return not stack\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return not stack",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == \"(\":\n                continue\n            elif top == \")\":\n                return False\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = brackets.replace(\")\", \"\").replace(\"(\", \"\")\n    if brackets == \"\":\n        return True\n    elif brackets[0] == \"(\" and brackets[-1] == \")\":\n        return correct_bracketing(brackets[1:-1])\n    else:\n        return False",
    "brackets = brackets.replace(\")\", \"\").replace(\"(\", \"\")\n    return brackets.count(\"(\") == brackets.count(\")\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "opening_bracket = \"\"\n    closing_bracket = \"\"\n\n    for b in brackets:\n        if b == \"(\":\n            opening_bracket += b\n        elif b == \")\":\n            closing_bracket += b\n\n    if opening_bracket == closing_bracket:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= b:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack",
    "stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                top = stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if brackets == \"\":\n        return True\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if opening_brackets[bracket]!= closing_brackets[bracket]:\n                return False\n        else:\n            if closing_brackets[bracket]!= opening_brackets[bracket]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if char!= top:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= bracket:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n        else:\n            pass\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
    "if brackets is None or len(brackets) == 0:\n        return False\n    opening_bracket = []\n    closing_bracket = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            opening_bracket.append(bracket)\n        elif bracket == \")\":\n            closing_bracket.append(bracket)\n        else:\n            if len(opening_bracket)!= 0:\n                opening_bracket.pop()\n            elif len(closing_bracket)!= 0:\n                closing_bracket.pop()\n    if len(opening_bracket)!= 0 or len(closing_bracket)!= 0:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for bracket in brackets:\n        if opening_brackets.get(bracket) == closing_brackets.get(bracket):\n            continue\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = list(brackets)\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n        elif brackets[i] == \")\":\n            if not stack:\n                return False\n            else:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                elif stack[-1] == \")\":\n                    stack.pop()\n        else:\n            stack.pop()\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False",
    "stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                top_bracket = stack.pop()\n            else:\n                return False\n\n    return not stack",
    "opening_brackets = []\n    closing_brackets = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            opening_brackets.append(bracket)\n        elif bracket == \")\":\n            closing_brackets.append(bracket)\n\n    if not opening_brackets or not closing_brackets:\n        return True\n\n    if len(opening_brackets) == len(closing_brackets):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "opening_brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\"\n    }\n    closing_brackets = {\n        \")\": \")\",\n        \"]\": \"]\"\n    }\n\n    return all(opening_brackets[c] == closing_brackets[c] for c in brackets)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if char!= top:\n                    return False\n    return not stack",
    "# if brackets is empty return True\n    if brackets == \"\":\n        return True\n\n    # if brackets is only one element return True\n    if len(brackets) == 1:\n        return brackets == \"(\"\n\n    # otherwise return false\n    return brackets[0] == \"(\" and brackets[-1] == \")\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                if stack.pop()!= \"(\":\n                    return False\n        else:\n            continue\n\n    return len(stack) == 0",
    "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if opening_brackets[bracket]!= closing_brackets[bracket]:\n                return False\n        else:\n            if closing_brackets[bracket]!= opening_brackets[bracket]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == \"(\":\n                continue\n            elif top == \")\":\n                return False\n            else:\n                return False\n        else:\n            continue\n\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if char == \")\":\n                    if top!= \"(\":\n                        return False\n                else:\n                    if top!= \"(\":\n                        return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) % 2 == 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n            if top_bracket == \"(\":\n                continue\n            elif top_bracket == \")\":\n                continue\n            else:\n                return False\n    return not stack\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n    if len(brackets) % 2 == 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n            if top_bracket == \"(\":\n                continue\n            elif top_bracket == \")\":\n                continue\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            if len(stack) == 1:\n                if stack[0] == \"(\":\n                    return False\n                elif stack[-1] == \")\":\n                    return False\n            else:\n                if stack[len(stack) - 1] == \"(\":\n                    return False\n                elif stack[-1] == \")\":\n                    return False\n        else:\n            stack.append(bracket)\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                top = stack.pop()\n                if top!= bracket:\n                    return False\n            else:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    print(correct_bracketing(\"(\"))\n    print(correct_bracketing(\"()\")\n          )\n    print(correct_bracketing(\"(()())\"))\n    print(correct_bracketing(\")(()\")\n          )",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "brackets = brackets.replace(\")\", \"\").replace(\"(\", \"\")\n    if len(brackets) == 0:\n        return True\n    for i in range(len(brackets) - 1):\n        if brackets[i]!= brackets[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= bracket:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\":\n                    continue\n                elif top == \")\":\n                    return False\n    return not stack",
    "stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if stack:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) == 0:\n        return True\n    if brackets[0] == \"(\" and brackets[-1] == \")\":\n        return correct_bracketing(brackets[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(brackets) == 0:\n        return True\n    if brackets.count(\"(\")!= brackets.count(\")\"):\n        return False\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0",
    "if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n                elif top == \")\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}