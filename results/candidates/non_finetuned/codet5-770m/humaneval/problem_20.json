{
  "problem": {
    "task_id": "HumanEval/20",
    "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
    "entry_point": "find_closest_elements",
    "docstring": "",
    "problem_id": 20
  },
  "model_name": "codet5-770m",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = None\n    largest = None\n    for num in numbers:\n        if smallest is None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n        if largest is None:\n            largest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_to_other = numbers[0]\n    closest_to_smaller = numbers[0]\n    for number in numbers:\n        if number < closest_to_other:\n            closest_to_other = number\n        elif number > closest_to_smaller:\n            closest_to_smaller = number\n    return closest_to_smaller, closest_to_other\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n\n    for number in numbers:\n        if smallest_number is None or number < smallest_number:\n            smallest_number = number\n        if largest_number is None or number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        smallest_number = numbers[0]\n        smallest_index = 0\n        for index, number in enumerate(numbers):\n            if number < smallest_number:\n                smallest_number = number\n                smallest_index = index\n        largest_number = numbers[-1]\n        largest_index = len(numbers) - 1\n        for index, number in enumerate(numbers):\n            if number > largest_number:\n                largest_number = number\n                largest_index = index\n        return numbers[smallest_index], numbers[largest_index]",
    "smallest = numbers[0]\n    largest = numbers[0]\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n        if n > largest:\n            largest = n\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return sorted(numbers, reverse=True)[0], sorted(numbers, reverse=True)[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_number_to_other = numbers[0]\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers:\n        if number < closest_number_to_other:\n            smallest_number = number\n        elif number > closest_number_to_other:\n            largest_number = number\n        closest_number_to_other = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        raise ValueError('The list of numbers should have at least two elements')\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    larger_number = numbers[0]\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        if larger_number < number:\n            larger_number = number\n    return smallest_number, larger_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(numbers) <= 2:\n        return numbers[0], numbers[1]\n    smaller, larger = None, None\n    for number in numbers:\n        if smaller is None:\n            smaller = number\n        if larger is None:\n            larger = number\n        elif number < smaller:\n            smaller = number\n        elif number > larger:\n            larger = number\n    return smaller, larger\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    larger_number = numbers[0]\n\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        elif smallest_number < number:\n            larger_number = number\n\n    return smallest_number, larger_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "numbers.sort()\n    return numbers[0], numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "sorted_numbers = sorted(numbers)\n    smallest_number = sorted_numbers[0]\n    larger_number = sorted_numbers[1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > larger_number:\n            larger_number = number\n    return smallest_number, larger_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n\n        if largest_number is None:\n            largest_number = number\n        elif largest_number < number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers to select two that are the closest to each other\")\n    numbers.sort()\n    return numbers[0], numbers[1]",
    "if len(numbers) < 2:\n        raise ValueError(f\"The list of numbers should have at least two elements: {numbers}\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return min_value, max_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)",
    "smallest = float(\"inf\")\n    largest = float(\"-inf\")\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n        elif n > largest:\n            largest = n\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(numbers) < 2:\n        raise ValueError('Numbers list must have at least two elements')\n\n    smallest = numbers[0]\n    smallest_index = 0\n    for index, number in enumerate(numbers):\n        if number < smallest:\n            smallest = number\n            smallest_index = index\n\n    larger = numbers[smallest_index + 1]\n    larger_index = len(numbers) - 1\n    for index, number in enumerate(numbers):\n        if number > larger:\n            larger = number\n            larger_index = index\n\n    return smallest, larger\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers:\n        if abs(num - smallest) < abs(largest - num):\n            largest = num\n        if abs(num - largest) < abs(smallest - num):\n            smallest = num\n    return smallest, largest",
    "closest_to_each_other = numbers[0]\n    smallest_number = closest_to_each_other\n    largest_number = closest_to_each_other\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for number in numbers[1:-1]:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return sorted(numbers, key=lambda n: abs(n - numbers[0]), reverse=True)[0], sorted(numbers, key=lambda n: abs(n - numbers[1]), reverse=True)[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = float('inf')\n    largest = float('-inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_element = (smallest_number, largest_number)\n    return closest_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_to_each_other = numbers[0]\n    closest_to_smaller_number = numbers[0]\n\n    for number in numbers:\n        if number < closest_to_each_other:\n            closest_to_each_other = number\n        elif number > closest_to_smaller_number:\n            closest_to_smaller_number = number\n\n    return closest_to_each_other, closest_to_smaller_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float(\"inf\")\n    smallest_index = -1\n    for index, number in enumerate(numbers):\n        if index == 0:\n            continue\n        if number < smallest_number:\n            smallest_number = number\n            smallest_index = index\n    return numbers[smallest_index], numbers[0]",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_1: float = numbers[0]\n    closest_2: float = numbers[0]\n    for num in numbers[1:]:\n        if num < closest_1:\n            closest_1 = num\n        elif num > closest_2:\n            closest_2 = num\n    return closest_1, closest_2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_numbers: List[float] = []\n    smallest_number: float = float(\"inf\")\n    smallest_number_index: int = -1\n    for index, number in enumerate(numbers):\n        if index == 0:\n            smallest_number = number\n            smallest_number_index = index\n        elif index == len(numbers) - 1:\n            largest_number = number\n            largest_number_index = index\n        else:\n            if number < smallest_number:\n                smallest_number = number\n                smallest_number_index = index\n            if number > largest_number:\n                largest_number = number\n                largest_number_index = index\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(numbers) < 2:\n        raise ValueError('Must have at least two numbers')\n\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number",
    "if len(numbers) < 2:\n        raise ValueError('Expected at least two numbers')\n\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [x for x in numbers if x == largest_number]\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float('inf')\n    smallest_number_index = 0\n\n    for index, number in enumerate(numbers):\n        if index == 0:\n            smallest_number = number\n            smallest_number_index = index\n        elif index == 1:\n            continue\n        else:\n            if abs(number - smallest_number) < abs(number - smallest_number_index):\n                smallest_number = number\n                smallest_number_index = index\n\n    return smallest_number, smallest_number_index\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        if largest_number is None:\n            largest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "min_num = float(\"inf\")\n    max_num = -float(\"inf\")\n    for number in numbers:\n        if number < min_num:\n            min_num = number\n        if number > max_num:\n            max_num = number\n    return min_num, max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_element = float('inf')\n    largest_element = float('-inf')\n\n    for number in numbers:\n        if number < smallest_element:\n            smallest_element = number\n        elif number > largest_element:\n            largest_element = number\n\n    return smallest_element, largest_element\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not numbers:\n        return ()\n    return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_1 = None\n    closest_2 = None\n    for number in numbers:\n        if closest_1 is None:\n            closest_1 = number\n            closest_2 = number\n        elif number < closest_1:\n            closest_1 = number\n        elif number > closest_2:\n            closest_2 = number\n    return closest_1, closest_2\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[0]\n\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "sorted_numbers = sorted(numbers)\n    smallest_number = sorted_numbers[0]\n    largest_number = sorted_numbers[len(numbers) - 1]\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest_number:\n            smallest_number = numbers[i]\n        if numbers[i] > largest_number:\n            largest_number = numbers[i]\n\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers:\n        if abs(num - smallest) > abs(num - largest):\n            smallest = num\n        elif abs(num - largest) > abs(num - smallest):\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float(\"inf\")\n    largest_number = float(\"-inf\")\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_smaller = float(\"inf\")\n    closest_larger = float(\"-inf\")\n\n    for number in numbers:\n        if number < closest_smaller:\n            closest_smaller = number\n        elif number > closest_larger:\n            closest_larger = number\n\n    return closest_smaller, closest_larger",
    "smallest_number = float(\"inf\")\n    largest_number = -float(\"inf\")\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "numbers = sorted(numbers)\n    return numbers[0], numbers[-1]",
    "smallest = min(numbers)\n    largest = max(numbers)\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        if largest_number is None:\n            largest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if not numbers:\n        return (0.0, 0.0)\n\n    # Find the closest number to each other and return them in order\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return (smallest_number, largest_number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "# sort the list of numbers\n    numbers.sort()\n\n    # find the two closest numbers\n    smallest_number = numbers[0]\n    larger_number = numbers[1]\n\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > larger_number:\n            larger_number = number\n\n    return smallest_number, larger_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_numbers = None\n    closest_number = None\n    for number in numbers:\n        if closest_numbers is None:\n            closest_numbers = [number]\n            closest_number = number\n        elif closest_numbers[-1] > number:\n            closest_numbers.append(number)\n            closest_number = number\n        else:\n            closest_numbers.pop(-1)\n    return closest_number, closest_numbers[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "assert len(numbers) >= 2, \"Must have at least two numbers\"\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for num in numbers:\n        if smallest_number is None or num < smallest_number:\n            smallest_number = num\n        if largest_number is None or num > largest_number:\n            largest_number = num\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest = float(\"inf\")\n    largest = float(\"-inf\")\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n        elif largest < number:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    if smallest_number == largest_number:\n        return smallest_number, largest_number\n    else:\n        return largest_number, smallest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = float('inf')\n    largest_number = -float('inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    else:\n        smallest_index = numbers.index(min(numbers))\n        largest_index = numbers.index(max(numbers))\n        return numbers[smallest_index], numbers[largest_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = None\n    largest = None\n    for num in numbers:\n        if smallest is None:\n            smallest = num\n            largest = num\n        elif num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\")\n    return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "smallest = numbers[0]\n    largest = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "closest_element = None\n    smallest_element = None\n    largest_element = None\n\n    for num in numbers:\n        if closest_element is None:\n            closest_element = num\n        elif num < closest_element:\n            closest_element = num\n        elif num > closest_element:\n            closest_element = num\n\n    return smallest_element, largest_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest = min(numbers)\n    largest = max(numbers)\n    return smallest, largest",
    "smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "assert len(numbers) >= 2\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "assert len(numbers) >= 2\n\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}