{
  "problem": {
    "task_id": "HumanEval/23",
    "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
    "canonical_solution": "    return len(string)\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
    "entry_point": "strlen",
    "docstring": "",
    "problem_id": 23
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "return len(string)\n\ndef char_count(string: str) -> int:\n    \"\"\" Return number of characters in string\n    >>> char_count('abc')\n    3\n    >>> char_count('abcd')\n    4\n    \"\"\"\n    return len(string)\n\ndef char_count_in_range(string: str, min: int, max: int) -> int:\n    \"\"\" Return number of characters in string between min and max\n    >>> char_count_in_range('abc', 0, 3)\n    3\n    >>> char_count_in_range('abc', 3, 4)\n    1\n    >>> char_count_in_range('abc', 0, 4)\n    3\n    \"\"\"\n    return len(string)\n\ndef char_count_in_range_no_end(string: str, min: int, max: int) -> int:\n    \"\"\" Return number of characters in string between min and max, without end\n    >>> char_count_in_range_no_end('abc', 0, 3)\n    2\n    >>> char_count_in_range_no_end('abc', 3, 4)\n    1\n    >>> char_count_in_range_no_end('abc', 0, 4)\n    3\n    \"\"\"\n    return len(string)\n\ndef count_words(string: str) -> int:\n    \"\"\" Return number of words in string\n    >>> count_words('abc')\n    1\n    >>> count_words('abcd')\n    2\n    >>> count_words('abcd efgh')\n    3\n    \"\"\"\n    return len(string.split())\n\ndef count_words_in_range(string: str, min: int, max: int) -> int:\n    \"\"\" Return number of words in string between min and max\n    >>> count_words_in_range('abc', 0, 3)\n    1\n    >>> count_words_in_range('abc', 3, 4)\n    2\n    >>> count_words_in_range('abc', 0, 4)\n    3\n    \"\"\"\n    return len(string.split())\n\ndef count_words_in_range_no_end(string: str, min: int, max",
    "return len(string)\n\ndef replace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all instances of old replaced by new\n    >>> replace('abc', 'a', 'b')\n    'bbc'\n    >>> replace('abc', 'a', 'b', 2)\n    'b'\n    \"\"\"\n    return string.replace(old, new)\n\ndef split(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of string split by sep\n    >>> split('abc', 'b')\n    ['a', 'c']\n    >>> split('abc', 'c')\n    ['ab']\n    \"\"\"\n    return [string.split(sep) for string in string.split()]\n\ndef join(strings: List[str], sep: str) -> str:\n    \"\"\" Join list of strings with sep\n    >>> join(['a', 'b'], 'c')\n    'abc'\n    >>> join(['a', 'b'], 'd')\n    'da'\n    \"\"\"\n    return sep.join(strings)\n\ndef trim(string: str) -> str:\n    \"\"\" Remove leading and trailing whitespace\n    >>> trim('  a b c')\n    'a b c'\n    >>> trim('  a b c ')\n    'a b c'\n    >>> trim('  a b c  ')\n    'a b c'\n    >>> trim('  a b c  ')\n    'a b c'\n    \"\"\"\n    return string.strip()\n\ndef strip(string: str) -> str:\n    \"\"\" Remove leading and trailing whitespace\n    >>> strip('  a b c')\n    'a b c'\n    >>> strip('  a b c ')\n    'a b c'\n    >>> strip('  a b c  ')\n    'a b c'\n    >>> strip('  a b c  ')\n    'a b c'\n    \"\"\"\n    return string.lstrip()\n\ndef lstrip(string: str) -> str:\n    \"\"\" Remove leading whitespace\n    >>> lstrip('  a b c')\n    'a b c'\n    >>> lstrip('  a b c ')\n    '",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return given string lowercased\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return given string uppercased\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of a substring with a new substring\n    >>> strreplace('ABC', 'A', 'X')\n    'BCX'\n    >>> strreplace('ABC', 'A', 'X')\n    'ABCX'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strsplit(string: str, sep: str, maxsplit: int = -1) -> List[str]:\n    \"\"\" Split given string into a list\n    >>> strsplit('ABCDEFG', '')\n    ['ABCDEFG']\n    >>> strsplit('ABCDEFG', 'A')\n    ['', 'ABC', 'DEFG']\n    >>> strsplit('ABCDEFG', 'A', maxsplit=2)\n    ['ABC', 'DEFG']\n    >>> strsplit('ABCDEFG', 'A', maxsplit=3)\n    ['ABC', 'DEFG']\n    >>> strsplit('ABCDEFG', 'A', maxsplit=1)\n    ['ABCDEFG']\n    \"\"\"\n    return string.split(sep, maxsplit)\n\n\ndef strjoin(strings: List[str], sep: str = '') -> str:\n    \"\"\" Join given list of strings into one string\n    >>> strjoin(['A', 'B', 'C'])\n    'ABC'\n    >>> strjoin(['A', 'B', 'C'], sep='-')\n    'A-B-C'\n    >>> strjoin(['A', 'B', 'C'], sep='-')\n    'A-B-C'\n    >>> strjoin(['A', 'B', 'C'], sep='-', sep2='_')\n    'A_B_C'\n    >>> strjoin(['",
    "return len(string)\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\" Check if given IP is valid\n    >>> is_valid_ip('1.2.3.4')\n    True\n    >>> is_valid_ip('1.2.3.4.5')\n    True\n    >>> is_valid_ip('1.2.3.4.5.6')\n    False\n    >>> is_valid_ip('1.2.3.4.5.6.7')\n    False\n    >>> is_valid_ip('1.2.3.4.')\n    False\n    >>> is_valid_ip('1.2.3.4.5.6.7.8')\n    False\n    \"\"\"\n    return IP_REGEX.match(ip) is not None\n\ndef is_valid_ipv6(ip: str) -> bool:\n    \"\"\" Check if given IPV6 is valid\n    >>> is_valid_ipv6('1.2.3.4')\n    False\n    >>> is_valid_ipv6('1.2.3.4.5')\n    False\n    >>> is_valid_ipv6('1.2.3.4.5.6')\n    False\n    >>> is_valid_ipv6('1.2.3.4.5.6.7')\n    False\n    >>> is_valid_ipv6('1.2.3.4.5.6.7.8')\n    False\n    >>> is_valid_ipv6('1.2.3.4.5.6.7.8.9.0')\n    True\n    \"\"\"\n    return IPV6_REGEX.match(ip) is not None\n\ndef is_valid_ipv4_or_ipv6(ip: str) -> bool:\n    \"\"\" Check if given IP is valid\n    >>> is_valid_ipv4_or_ipv6('1.2.3.4')\n    True\n    >>> is_valid_ipv4_or_ipv6('1.2.3.4.5')\n    True\n    >>> is_valid_ipv4_or_ipv6('1",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return given string lowercase\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return given string uppercase\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef striptags(string: str) -> str:\n    \"\"\" Return given string with all HTML tags removed\n    >>> striptags('<p>foo</p>')\n    'foo'\n    >>> striptags('<p>foo</p><p>bar</p>')\n    'foobar'\n    >>> striptags('<p>foo<p>bar</p>')\n    'foobar'\n    \"\"\"\n    return string.replace('<', '').replace('>', '')\n\n\ndef strjoin(strings: list, separator: str ='') -> str:\n    \"\"\" Join given strings with given separator\n    >>> strjoin(['a', 'b', 'c'])\n    'a b c'\n    >>> strjoin(['a', 'b', 'c'], ',')\n    'a,b,c'\n    >>> strjoin(['a', 'b', 'c'], ':')\n    'a:b:c'\n    >>> strjoin(['a', 'b', 'c'], ':','')\n    'a b c'\n    >>> strjoin(['a', 'b', 'c'], ':','').replace(' ', '')\n    'a:b:c'\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError('Expected list, got {}'.format(type(strings).__name__))\n    if separator == '':\n        return ''.join(strings)\n    return separator.join(strings)\n\n\ndef strsplit(string: str, sep: str ='') -> list:\n    \"\"\" Split given string into list of strings using given separator\n    >>> strsplit('foo bar')\n    ['foo', 'bar']\n    >>> strsplit('foo,bar')",
    "return len(string)\n\ndef strstrip(string: str) -> str:\n    \"\"\" Remove leading and trailing whitespace\n    >>> strstrip('  abc  ')\n    'abc'\n    >>> strstrip('  abc  ')\n    'abc'\n    >>> strstrip('  abc')\n    'abc'\n    >>> strstrip('abc')\n    'abc'\n    \"\"\"\n    return string.strip()\n\ndef strlower(string: str) -> str:\n    \"\"\" Convert string to lower case\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Convert string to upper case\n    >>> strupper('ABC')\n    'ABC'\n    >>> strupper('ABC')\n    'ABC'\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str, count: int = 0) -> str:\n    \"\"\" Replace all occurrences of a substring with a new substring\n    >>> strreplace('abcabcabc', 'abc', 'xyz', 2)\n    'xyzzyxyzzyxyzzy'\n    >>> strreplace('abcabcabc', 'abc', 'xyz', 2)\n    'xyzzyxyzzyxyzzy'\n    >>> strreplace('abcabcabc', 'abc', 'xyz', 1)\n    'xyzxyzxyzxyz'\n    \"\"\"\n    return string.replace(old, new, count)\n\ndef strjoin(strings: str, delimiter: str = '') -> str:\n    \"\"\" Join a list of strings with a delimiter\n    >>> strjoin(['a', 'b'])\n    'a'\n    >>> strjoin(['a', 'b'], '|')\n    'a|b'\n    >>> strjoin(['a', 'b'], '|')\n    'a|b'\n    >>> strjoin(['a', 'b'], '|')\n    'a|b'\n    >>> strjoin(['a', 'b",
    "return len(string)\n\ndef is_str(string: str) -> bool:\n    \"\"\" Return true if given string is string, otherwise return false\n    >>> is_str('abc')\n    True\n    >>> is_str(1)\n    False\n    \"\"\"\n    return isinstance(string, str)\n\ndef is_iterable(obj: object) -> bool:\n    \"\"\" Return true if given object is iterable, otherwise return false\n    >>> is_iterable([1, 2, 3])\n    True\n    >>> is_iterable('abc')\n    False\n    \"\"\"\n    return hasattr(obj, '__iter__')\n\ndef is_str_iterable(obj: object) -> bool:\n    \"\"\" Return true if given object is string iterable, otherwise return false\n    >>> is_str_iterable([1, 2, 3])\n    True\n    >>> is_str_iterable('abc')\n    False\n    \"\"\"\n    return is_str(obj) and is_iterable(obj)\n\ndef is_list(obj: object) -> bool:\n    \"\"\" Return true if given object is list, otherwise return false\n    >>> is_list([1, 2, 3])\n    True\n    >>> is_list(1)\n    False\n    \"\"\"\n    return isinstance(obj, list)\n\ndef is_tuple(obj: object) -> bool:\n    \"\"\" Return true if given object is tuple, otherwise return false\n    >>> is_tuple((1, 2, 3))\n    True\n    >>> is_tuple(1)\n    False\n    \"\"\"\n    return isinstance(obj, tuple)\n\ndef is_dict(obj: object) -> bool:\n    \"\"\" Return true if given object is dict, otherwise return false\n    >>> is_dict({'a': 1, 'b': 2, 'c': 3})\n    True\n    >>> is_dict(1)\n    False\n    \"\"\"\n    return isinstance(obj, dict)\n\ndef is_set(obj: object) -> bool:\n    \"\"\" Return true if given object is set, otherwise return false\n    >>> is_set(set([1, 2, 3]))\n    True\n    >>> is_set({'a': 1,",
    "return len(string)\n\n\ndef str2int(string: str) -> int:\n    \"\"\" Return int representation of given string\n    >>> str2int('')\n    0\n    >>> str2int('abc')\n    97\n    \"\"\"\n    return int(string)\n\n\ndef str2float(string: str) -> float:\n    \"\"\" Return float representation of given string\n    >>> str2float('')\n    0.0\n    >>> str2float('abc')\n    97.0\n    \"\"\"\n    return float(string)\n\n\ndef int2str(value: int) -> str:\n    \"\"\" Return string representation of given int\n    >>> int2str(0)\n    '0'\n    >>> int2str(97)\n    '97'\n    \"\"\"\n    return str(value)\n\n\ndef float2str(value: float) -> str:\n    \"\"\" Return string representation of given float\n    >>> float2str(0.0)\n    '0.0'\n    >>> float2str(97.0)\n    '97.0'\n    \"\"\"\n    return str(value)\n\n\ndef str2bool(string: str) -> bool:\n    \"\"\" Return boolean representation of given string\n    >>> str2bool('')\n    False\n    >>> str2bool('abc')\n    False\n    >>> str2bool('true')\n    True\n    >>> str2bool('yes')\n    True\n    >>> str2bool('on')\n    True\n    >>> str2bool('1')\n    True\n    \"\"\"\n    if string in ('', '0', 'false', 'no', 'off', 'no', 'false', '0'):\n        return False\n    else:\n        return True\n\n\ndef bool2str(value: bool) -> str:\n    \"\"\" Return string representation of given bool\n    >>> bool2str(False)\n    'false'\n    >>> bool2str(True)\n    'true'\n    \"\"\"\n    if value:\n        return 'true'\n    else:\n        return 'false'\n\n\ndef is_str(value: object) -> bool:\n    \"\"\" Return True if given object is a string, False otherwise\n    >>> is_str(1)\n    False\n    >>> is",
    "return len(string)\n\n\ndef is_integer(s: str) -> bool:\n    \"\"\" Return True if s is an integer.\n    >>> is_integer('')\n    False\n    >>> is_integer('abc')\n    False\n    >>> is_integer(123)\n    True\n    >>> is_integer('123')\n    True\n    >>> is_integer(1.23)\n    False\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_float(s: str) -> bool:\n    \"\"\" Return True if s is a float.\n    >>> is_float('')\n    False\n    >>> is_float('abc')\n    False\n    >>> is_float(123)\n    True\n    >>> is_float('123')\n    True\n    >>> is_float(1.23)\n    True\n    >>> is_float(True)\n    False\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_boolean(s: str) -> bool:\n    \"\"\" Return True if s is a boolean.\n    >>> is_boolean('')\n    False\n    >>> is_boolean('abc')\n    False\n    >>> is_boolean(123)\n    False\n    >>> is_boolean('123')\n    False\n    >>> is_boolean(True)\n    True\n    >>> is_boolean(False)\n    True\n    \"\"\"\n    try:\n        bool(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_number(s: str) -> bool:\n    \"\"\" Return True if s is a number.\n    >>> is_number('')\n    False\n    >>> is_number('abc')\n    False\n    >>> is_number(123)\n    True\n    >>> is_number('123')\n    True\n    >>> is_number(1.23)\n    True\n    >>> is_number(True)\n    False\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_string(s:",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('Abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase string\n    >>> strupper('abc')\n    'ABC'\n    >>> strupper('Abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all occurences of old string replaced by new string\n    >>> strreplace('abcdef', 'c', 'd')\n    'ddddddddd'\n    >>> strreplace('abcdef', 'c', '')\n    'abdef'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strreplace_all(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all occurences of old string replaced by new string\n    >>> strreplace_all('abcdef', 'c', 'd')\n    'ddddddddd'\n    >>> strreplace_all('abcdef', 'c', '')\n    'abd'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of all substrings separated by sep\n    >>> strsplit('abc', 'b')\n    ['a', 'a', 'a']\n    >>> strsplit('abc', 'a')\n    ['', 'c', 'c']\n    \"\"\"\n    return string.split(sep)\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join all strings in list into one string\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\ndef strsplit_any(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of all substrings separated by sep\n    >>> strsplit_any('abc', 'b')",
    "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if given string is a palindrome.\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd",
    "return len(string)\n\n\ndef is_even(n: int) -> bool:\n    \"\"\" Return True if n is even and False otherwise\n    >>> is_even(2)\n    True\n    >>> is_even(3)\n    False\n    \"\"\"\n    return n % 2 == 0",
    "return len(string)\n\n\ndef strconcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate strings\n    >>> strconcat('abc', 'def')\n    'abcdef'\n    >>> strconcat('abc', 'def', 'ghi')\n    'abcdefghi'\n    \"\"\"\n    return string1 + string2\n\n\ndef strjoin(string1: str, string2: str) -> str:\n    \"\"\" Concatenate strings\n    >>> strjoin('abc', 'def')\n    'abcdef'\n    >>> strjoin('abc', 'def', 'ghi')\n    'abcdefghi'\n    \"\"\"\n    return string1 + string2\n\n\ndef strsplit(string: str, sep: str ='') -> List[str]:\n    \"\"\" Split string into list\n    >>> strsplit('abc def ghi')\n    ['abc', 'def', 'ghi']\n    >>> strsplit('abc def ghi', sep='')\n    ['abc def', 'ghi']\n    \"\"\"\n    return string.split(sep)\n\n\ndef strtrim(string: str) -> str:\n    \"\"\" Trim string\n    >>> strtrim('abc def ghi')\n    'abc def ghi'\n    >>> strtrim('  abc def ghi  ')\n    'abc def ghi'\n    >>> strtrim('  abc def ghi  ')\n    'abc def ghi'\n    >>> strtrim('  abc def ghi  ', sep=' ')\n    'abc def ghi'\n    >>> strtrim('  abc def ghi  ', sep=' ')\n    'abc def ghi'\n    \"\"\"\n    return string.strip()\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Lower case string\n    >>> strlower('ABC DEF')\n    'abc def'\n    >>> strlower('ABC DEF')\n    'abc def'\n    >>> strlower('ABC DEF','')\n    'abc def'\n    >>> strlower('ABC DEF','')\n    'abc def'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\"",
    "return len(string)\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Reverse given string\n    >>> strrev('abc')\n    'cba'\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    return ''.join(reversed(string))\n\n\ndef strreplace(string: str, old: str, new: str, count: int = 0) -> str:\n    \"\"\" Return new string replacing given old substring\n    >>> strreplace('abc', 'b', 'c', 2)\n    'acd'\n    >>> strreplace('abc', 'b', 'c', 0)\n    'abc'\n    \"\"\"\n    return string.replace(old, new, count)\n\n\ndef strfind(string: str, substring: str, start: int = 0) -> int:\n    \"\"\" Find given substring in given string\n    >>> strfind('abc', 'b')\n    1\n    >>> strfind('abc', 'b', 2)\n    1\n    >>> strfind('abc', 'b', -1)\n    2\n    \"\"\"\n    return string.find(substring, start)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case version of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case version of given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strset(string: str, index: int, value: str) -> str:\n    \"\"\" Set value at given index in given string\n    >>> strset('abc', 1, 'a')\n    'abc'\n    \"\"\"\n    return string[:index] + value + string[index + 1:]\n\n\ndef strget(string: str, index: int) -> str:\n    \"\"\" Return value at given index in given string\n    >>> strget('abc', 1)\n    'a'\n    \"\"\"\n    return string[index]\n\n\ndef strgetall(string: str, index: int) -> str:\n    \"\"\" Return all values at given index in given string\n    >>> strget",
    "return len(string)\n\ndef split(string: str, delimiter: str) -> List[str]:\n    \"\"\" Split given string using delimiter\n    >>> split('abc','')\n    ['a', 'b', 'c']\n    >>> split('abc', 'xyz')\n    ['abc']\n    \"\"\"\n    return [s for s in string.split(delimiter) if s]\n\ndef join(strings: List[str], delimiter: str) -> str:\n    \"\"\" Join given list of strings using delimiter\n    >>> join(['a', 'b', 'c'],'')\n    'a b c'\n    \"\"\"\n    return delimiter.join(strings)\n\ndef is_string(obj: Any) -> bool:\n    \"\"\" Check if given object is a string\n    >>> is_string('')\n    False\n    >>> is_string('abc')\n    True\n    \"\"\"\n    return isinstance(obj, str)\n\ndef is_number(obj: Any) -> bool:\n    \"\"\" Check if given object is a number\n    >>> is_number('')\n    False\n    >>> is_number('abc')\n    False\n    >>> is_number(1)\n    True\n    \"\"\"\n    return isinstance(obj, numbers.Number)\n\ndef is_iterable(obj: Any) -> bool:\n    \"\"\" Check if given object is iterable\n    >>> is_iterable('')\n    False\n    >>> is_iterable([])\n    False\n    >>> is_iterable(1)\n    False\n    >>> is_iterable('abc')\n    True\n    >>> is_iterable(range(3))\n    True\n    \"\"\"\n    return hasattr(obj, '__iter__')\n\ndef is_iterable_with_length(obj: Any) -> bool:\n    \"\"\" Check if given object is iterable with length\n    >>> is_iterable_with_length('')\n    False\n    >>> is_iterable_with_length([])\n    False\n    >>> is_iterable_with_length(1)\n    False\n    >>> is_iterable_with_length('abc')\n    True\n    >>> is_iterable_with_",
    "return len(string)\n\ndef to_int(number: str) -> int:\n    \"\"\" Convert string to int.\n    >>> to_int('42')\n    42\n    >>> to_int('0')\n    0\n    >>> to_int('-42')\n    -42\n    \"\"\"\n    try:\n        return int(number)\n    except ValueError:\n        return 0\n\ndef to_float(number: str) -> float:\n    \"\"\" Convert string to float.\n    >>> to_float('42.0')\n    42.0\n    >>> to_float('0')\n    0.0\n    >>> to_float('-42')\n    -42.0\n    >>> to_float('0.0')\n    0.0\n    >>> to_float('-0.0')\n    -0.0\n    >>> to_float('42.0')\n    42.0\n    >>> to_float('-42.0')\n    -42.0\n    \"\"\"\n    try:\n        return float(number)\n    except ValueError:\n        return 0.0\n\ndef to_bool(string: str) -> bool:\n    \"\"\" Convert string to bool.\n    >>> to_bool('true')\n    True\n    >>> to_bool('false')\n    False\n    >>> to_bool('42')\n    False\n    \"\"\"\n    return string.lower() == 'true'\n\ndef is_integer(string: str) -> bool:\n    \"\"\" Check if given string is an integer.\n    >>> is_integer('42')\n    True\n    >>> is_integer('42.0')\n    True\n    >>> is_integer('-42.0')\n    False\n    \"\"\"\n    try:\n        to_int(string)\n        return True\n    except ValueError:\n        return False\n\ndef is_float(string: str) -> bool:\n    \"\"\" Check if given string is a float.\n    >>> is_float('42.0')\n    True\n    >>> is_float('42')\n    False\n    >>> is_float('-42.0')\n    False\n    >>> is_float('false')\n    False\n    >>> is_float('true')\n    False\n    \"\"\"",
    "return len(string)\n\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first character in given string\n    >>> strchr('abc', 'a')\n    'a'\n    \"\"\"\n    return string[0]\n\n\ndef strrchr(string: str, char: str) -> str:\n    \"\"\" Return last character in given string\n    >>> strrchr('abc', 'a')\n    'a'\n    \"\"\"\n    return string[-1]\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strsplit(string: str, separator: str) -> Iterable[str]:\n    \"\"\" Return string split by separator\n    >>> list(strsplit('abc,def,ghi', ','))\n    ['abc', 'def', 'ghi']\n    >>> list(strsplit('abc,def,ghi', ',')[:2])\n    ['abc', 'def,ghi']\n    \"\"\"\n    return string.split(separator)\n\n\ndef split(string: str, separator: str) -> List[str]:\n    \"\"\" Return string split by separator\n    >>> split('abc,def,ghi', ',')\n    ['abc', 'def', 'ghi']\n    >>> split('abc,def,ghi', ',')[:2]\n    ['abc', 'def,ghi']\n    \"\"\"\n    return [s for s in string.split(separator) if s]\n\n\ndef join(strings: Iterable[str], separator: str = '') -> str:\n    \"\"\" Join strings with separator\n    >>> join(['abc', 'def', 'ghi'])\n    'abc,def,ghi'\n    >>> join(['abc', 'def', 'ghi'], ',')\n    'abc,def,ghi'\n    >>> join(['abc', 'def', 'ghi",
    "return len(string)\n\ndef strchr(string: str, ch: int) -> str:\n    \"\"\" Return the first character in string that is equal to ch\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'z')\n    'abc'\n    \"\"\"\n    return string[ch]\n\ndef strrchr(string: str, ch: int) -> str:\n    \"\"\" Return the last character in string that is equal to ch\n    >>> strrchr('abc', 'a')\n    'a'\n    >>> strrchr('abc', 'z')\n    'z'\n    \"\"\"\n    return string[-1 - ch]\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('abc', 'ab')\n    0\n    >>> strcmp('abc', 'xyz')\n    -1\n    >>> strcmp('abc', 'xyz')\n    0\n    \"\"\"\n    return cmp(string1, string2)\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare n characters in two strings\n    >>> strncmp('abc', 'ab', 2)\n    0\n    >>> strncmp('abc', 'xyz', 2)\n    -1\n    >>> strncmp('abc', 'xyz', 4)\n    -1\n    >>> strncmp('abc', 'xyz', 3)\n    0\n    \"\"\"\n    return cmp(string1[:n], string2[:n])\n\ndef strcpy(dest: str, src: str) -> None:\n    \"\"\" Copy string from src to dest\n    >>> strcpy('abc', 'xyz')\n    'xyz'\n    \"\"\"\n    dest[:len(src)] = src\n\ndef strncpy(dest: str, src: str, n: int) -> None:\n    \"\"\" Copy string from src to dest, up to n characters\n    >>> strncpy('abc', 'xyz', 2)\n    'xy'\n    >>> strncpy('abc', 'xyz', 3)\n    'xyz",
    "return len(string)\n\n\ndef strsplit(string: str) -> List[str]:\n    \"\"\" Split given string into list of strings\n    >>> strsplit('')\n    []\n    >>> strsplit('abc')\n    ['', 'abc']\n    \"\"\"\n    return string.split()\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join given list of strings into one string\n    >>> strjoin(['a', 'b'])\n    'ab'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Lower case given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Upper case given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreverse(string: str) -> str:\n    \"\"\" Reverse given string\n    >>> strreverse('abc')\n    'cba'\n    \"\"\"\n    return string[::-1]\n\n\ndef strreplace(string: str, pattern: str, replacement: str) -> str:\n    \"\"\" Replace all occurrences of given pattern with given replacement\n    >>> strreplace('abcabc', 'abc', 'x')\n    'xxcxxc'\n    >>> strreplace('abcabc', 'abc', 'x')\n    'abcabc'\n    \"\"\"\n    return string.replace(pattern, replacement)\n\n\ndef strsplitlines(string: str) -> List[str]:\n    \"\"\" Split string into list of strings\n    >>> strsplitlines('abc\\ndef\\nghi\\n')\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    return string.splitlines()\n\n\ndef strstr(string: str, sub: str) -> str:\n    \"\"\" Return first occurrence of given string in given string\n    >>> strstr('abcdef', 'c')\n    'c'\n    >>> strstr('abcdef', 'x')\n    ''\n    \"\"\"\n    return string.find(sub)\n\n\ndef strstrlower(string: str, sub: str) -> str:\n    \"\"\" Return first occurrence of given string in",
    "return len(string)\n\n\ndef string_contains(string: str, item: str) -> bool:\n    \"\"\" Return true if given string contains given item\n    >>> string_contains('abcd', 'bc')\n    True\n    >>> string_contains('abcd', 'bcdef')\n    False\n    >>> string_contains('abcd', 'x')\n    False\n    >>> string_contains('abcd', 'ab')\n    True\n    \"\"\"\n    return item in string\n\n\ndef string_find(string: str, item: str) -> int:\n    \"\"\" Return index of first occurrence of given item in given string\n    >>> string_find('abcd', 'bc')\n    2\n    >>> string_find('abcd', 'bcdef')\n    -1\n    >>> string_find('abcd', 'x')\n    -1\n    >>> string_find('abcd', 'ab')\n    0\n    \"\"\"\n    return string.find(item)\n\n\ndef string_split(string: str, separator: str ='') -> List[str]:\n    \"\"\" Return list of tokens from given string\n    >>> string_split('abcd abcd abcd')\n    ['abcd', 'abcd', 'abcd']\n    >>> string_split('abcd')\n    ['abcd']\n    >>> string_split('abcd','')\n    ['abcd']\n    \"\"\"\n    return [item for item in string.split(separator) if item]\n\n\ndef string_replace(string: str, pattern: str, replacement: str) -> str:\n    \"\"\" Return given string with given pattern replaced by given replacement\n    >>> string_replace('abcd', 'ab', 'X')\n    'XcdXcdX'\n    >>> string_replace('abcd', 'ab', 'X')\n    'XcdXcdX'\n    >>> string_replace('abcd', 'ab', '')\n    'abc'\n    >>> string_replace('abcd', 'ab', '')\n    'abc'\n    >>> string_replace('abcd', 'ab', '')\n    'abc'\n    \"\"\"\n    return string.replace(pattern, replacement)\n\n\ndef string_split_by(string",
    "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if given string is a palindrome\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('aab')\n    False\n    \"\"\"\n    return string == string[::-1]\n\ndef is_palindrome_rev(string: str) -> bool:\n    \"\"\" Return True if given string is a palindrome\n    >>> is_palindrome_rev('abcd')\n    True\n    >>> is_palindrome_rev('aab')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_sub_palindrome(string: str, sub_str: str) -> bool:\n    \"\"\" Return True if given string is a sub-palindrome of given string\n    >>> is_sub_palindrome('abcd', 'abc')\n    True\n    >>> is_sub_palindrome('abcd', 'abd')\n    False\n    \"\"\"\n    if len(string) < len(sub_str):\n        return False\n    return string[:len(sub_str)] == sub_str\n\ndef is_sub_palindrome_rev(string: str, sub_str: str) -> bool:\n    \"\"\" Return True if given string is a sub-palindrome of given string\n    >>> is_sub_palindrome_rev('abcd', 'abc')\n    True\n    >>> is_sub_palindrome_rev('abcd', 'abd')\n    False\n    \"\"\"\n    if len(string) < len(sub_str):\n        return False\n    return string[-len(sub_str):] == sub_str\n\n\ndef is_palindrome_rev_sub(string: str, sub_str: str) -> bool:\n    \"\"\" Return True if given string is a sub-palindrome of given string\n    >>> is_palindrome_rev_sub('abcd', 'abc')\n    True\n    >>> is_palindrome_rev_sub('abcd', 'abd')\n    False\n    \"\"\"\n    if len(string) < len(sub_str):",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase version of given string\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return string without leading and trailing whitespace\n    >>> strstrip('  abc  ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all occurrences of old replaced with new\n    >>> strreplace('ABCABCABC', 'ABC', 'DEF')\n    'DEFDEFDEF'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strjoin(string: str, sep: str) -> str:\n    \"\"\" Join string elements with given separator\n    >>> strjoin('ABC','')\n    'ABC'\n    >>> strjoin('ABC', '-')\n    'ABC-'\n    \"\"\"\n    return sep.join(string)\n\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Split string elements with given separator\n    >>> strsplit('ABC-DEF-GHI', '-')\n    ['ABC', 'DEF', 'GHI']\n    \"\"\"\n    return string.split(sep)\n\n\ndef strsplitlines(string: str) -> List[str]:\n    \"\"\" Split string elements with line separator\n    >>> strsplitlines('ABCDEF\\nGHI')\n    ['ABCDEF', 'GHI']\n    \"\"\"\n    return string.splitlines()\n\n\ndef strjoinlines(lines: List[str]) -> str:\n    \"\"\" Join string elements with line separator\n    >>> strjoinlines(['ABC', 'DEF', 'GHI'])\n    'ABCDEF\\nGHI'\n    \"\"\"\n    return ''.join(lines)\n\n\ndef strsplitlines(string: str) -> List[str]:\n    \"\"\" Split string elements with line separ",
    "return len(string)\n\n\ndef get_chars(string: str) -> str:\n    \"\"\" Get characters from string\n    >>> get_chars('')\n    ''\n    >>> get_chars('abc')\n    'abc'\n    \"\"\"\n    return string\n\n\ndef split(string: str) -> Tuple[str,...]:\n    \"\"\" Split string into list of strings\n    >>> split('abc')\n    ('abc',)\n    >>> split('abc,def')\n    ('abc', 'def')\n    >>> split(',abc,def')\n    (',abc', 'def')\n    >>> split('abc,def,')\n    ('abc', 'def')\n    \"\"\"\n    return string.split(',')\n\n\ndef join(strings: Iterable[str]) -> str:\n    \"\"\" Join strings with comma\n    >>> join(['abc', 'def'])\n    'abc,def'\n    >>> join(['abc', 'def', 'ghi'])\n    'abc,def,ghi'\n    \"\"\"\n    return ','.join(strings)\n\n\ndef get_random_string(length: int) -> str:\n    \"\"\" Return random string of given length\n    >>> get_random_string(0)\n    ''\n    >>> get_random_string(1)\n    ''\n    >>> get_random_string(10)\n    '1234'\n    >>> get_random_string(15)\n    'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    return ''.join(choice(string.ascii_uppercase + string.digits)\n                   for _ in range(length))",
    "return len(string)\n\n\ndef sub(string: str, start: int, end: int, string2: str, start2: int, end2: int) -> str:\n    \"\"\" Replace substring\n    >>> sub('abc', 0, 3, 'def', 0, 3)\n    'def'\n    >>> sub('abc', 0, 3, 'def', 0, 2)\n    'ab'\n    >>> sub('abc', 0, 3, 'def', 0, 1)\n    'a'\n    >>> sub('abc', 0, 3, 'def', 0, -1)\n    'abc'\n    \"\"\"\n    return string[start:end] + string2[start2:end2]\n\n\ndef replace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace substring\n    >>> replace('abc', 'a', 'b')\n    'bcb'\n    >>> replace('abc', 'bc', 'd')\n    'dd'\n    >>> replace('abc', 'ab', 'c')\n    'cbc'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef find(string: str, string2: str, start: int, end: int) -> int:\n    \"\"\" Find substring\n    >>> find('abc', 'abc', 0, 3)\n    0\n    >>> find('abc', 'ab', 0, 3)\n    1\n    >>> find('abc', 'bc', 0, 3)\n    2\n    >>> find('abc', 'abc', 0, 1)\n    0\n    >>> find('abc', 'abc', -1, 3)\n    -1\n    \"\"\"\n    return string.find(string2, start, end)\n\n\ndef rfind(string: str, string2: str, start: int, end: int) -> int:\n    \"\"\" Find substring\n    >>> rfind('abc', 'abc', 0, 3)\n    0\n    >>> rfind('abc', 'ab', 0, 3)\n    -1\n    >>> rfind('abc', 'bc', 0, 3)\n    2\n    >>> rfind('abc', 'abc', 0, 1)\n    -1\n    >>> rfind('abc', 'abc', -1",
    "return len(string)\n\n\ndef split_on_char(string: str, char: str) -> List[str]:\n    \"\"\" Return list of strings split on given character\n    >>> split_on_char('abc', 'a')\n    ['abc']\n    >>> split_on_char('abc', 'b')\n    ['abc']\n    >>> split_on_char('abc', 'c')\n    ['abc']\n    >>> split_on_char('abc', 'd')\n    ['abc']\n    >>> split_on_char('abc', 'a')\n    ['abc']\n    >>> split_on_char('abc', 'z')\n    ['abc']\n    >>> split_on_char('abc', 'x')\n    ['abc']\n    >>> split_on_char('abc','')\n    ['abc']\n    >>> split_on_char('abc','')\n    ['abc']\n    >>> split_on_char('abc', '')\n    ['abc']\n    >>> split_on_char('abc','')\n    ['abc']\n    >>> split_on_char('abc','')\n    ['abc']\n    >>> split_on_char('abc', '')\n    ['abc']\n    \"\"\"\n    return [string[0:i] for i in range(len(string)) if string[i] == char]\n\n\ndef join_on_char(strings: List[str], char: str) -> str:\n    \"\"\" Return string concatenation of given strings with given character\n    >>> join_on_char(['abc', 'def'], 'x')\n    'abcdef'\n    >>> join_on_char(['abc', 'def'], 'z')\n    'abcdef'\n    >>> join_on_char(['abc', 'def'], 'y')\n    'abcdef'\n    >>> join_on_char(['abc', 'def'], 'x')\n    'abcdef'\n    >>> join_on_char(['abc', 'def'], '')\n    'abcdef'\n    >>> join_on_char(['abc', 'def'],'')\n    'abc def'\n    \"\"\"\n    return ''.join([string + char",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case version of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case version of given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, pattern: str, repl: str, count: int = 0) -> str:\n    \"\"\" Return string with all occurrences of given pattern replaced with given replacement\n    >>> strreplace('abcabcabc', 'abc', '123')\n    '1123123123'\n    >>> strreplace('abcabcabc', 'abc', '123', 3)\n    '123123123'\n    >>> strreplace('abcabcabc', 'abc', '123', -1)\n    '123abcabc'\n    >>> strreplace('abcabcabc', 'abc', '123', -2)\n    'abcabc123'\n    \"\"\"\n    return string.replace(pattern, repl, count)\n\ndef strsplit(string: str, sep: str, maxsplit: int = 0) -> list:\n    \"\"\" Return string split into list of strings by given separator\n    >>> strsplit('abcabcabc', 'abc')\n    ['abc', 'abc', 'abc']\n    >>> strsplit('abcabcabc', 'abc', 3)\n    ['abc', 'abc', 'abc']\n    >>> strsplit('abcabcabc', 'abc', -1)\n    ['abcabcabc']\n    \"\"\"\n    return string.split(sep, maxsplit)\n\ndef strjoin(strings: list) -> str:\n    \"\"\" Return string from given list of strings\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\ndef strjoinlines(strings: list) -> str:\n    \"\"\" Return string from given list of strings\n    >>> strjoinlines(['a', 'b', 'c'])\n    'a\\nb\\",
    "return len(string)\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join given strings\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef strsplit(string: str, sep: str ='') -> List[str]:\n    \"\"\" Split given string at given separator\n    >>> strsplit('abc')\n    ['abc']\n    >>> strsplit('abc  def')\n    ['abc','def']\n    >>> strsplit('abc  def', sep ='')\n    ['abc', 'def']\n    \"\"\"\n    return [s.strip() for s in string.split(sep)]\n\n\ndef strrstrip(string: str, sep: str ='') -> str:\n    \"\"\" Strip given string from end\n    >>> strrstrip('abc def', sep ='')\n    'abc def'\n    >>> strrstrip('abc def', sep ='')\n    'abc'\n    >>> strrstrip('abc def', sep ='')\n    'abc'\n    \"\"\"\n    return string.strip(sep)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Convert given string to lower case\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Convert given string to upper case\n    >>> strupper('ABC')\n    'ABC'\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreplace(string: str, old: str, new: str, count: int = -1) -> str:\n    \"\"\" Replace given string with given new string\n    >>> strreplace('abc', 'c', 'd')\n    'db'\n    >>> strreplace('abc', 'c', 'd', 3)\n    'abc'\n    \"\"\"\n    if count == -1:\n        count = len(old)\n    return string.replace(old, new, count)\n\n\ndef strlstrip(string: str) -> str:",
    "return len(string)\n\n\ndef strchr(string: str, char: int) -> str:\n    \"\"\" Return character at given position in given string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    \"\"\"\n    return string[char]\n\n\ndef strrchr(string: str, char: int) -> str:\n    \"\"\" Return last character in given string\n    >>> strrchr('abc', 'a')\n    'a'\n    >>> strrchr('abc', 'b')\n    'b'\n    \"\"\"\n    return string[-1]\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('aBc')\n    'abc'\n    >>> strlower('abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase version of given string\n    >>> strupper('ABC')\n    'ABC'\n    >>> strupper('aBc')\n    'ABC'\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreplace(string: str, pattern: str, repl: str) -> str:\n    \"\"\" Return string with all occurrences of pattern replaced by repl\n    >>> strreplace('abc', 'a', 'b')\n    'bc'\n    >>> strreplace('abc', 'a', 'b')\n    'bc'\n    >>> strreplace('abc', 'a', 'b')\n    'bc'\n    \"\"\"\n    return string.replace(pattern, repl)\n\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Split given string into a list of strings\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc', 'abc')\n    ['', '', '', '', '']\n    >>> strsplit('abc', 'a')\n    ['', '', '', '', '']\n    >>> strsplit('abc', '')",
    "return len(string)\n\n\ndef get_hash(string: str) -> int:\n    \"\"\" Return hash of given string\n    >>> get_hash('abc')\n    9\n    >>> get_hash('abc')\n    9\n    \"\"\"\n    return hash(string)\n\n\ndef get_hash_code(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code('abc')\n    9\n    >>> get_hash_code('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_2(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code_2('abc')\n    9\n    >>> get_hash_code_2('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_3(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code_3('abc')\n    9\n    >>> get_hash_code_3('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_4(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code_4('abc')\n    9\n    >>> get_hash_code_4('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_5(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code_5('abc')\n    9\n    >>> get_hash_code_5('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_6(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>> get_hash_code_6('abc')\n    9\n    >>> get_hash_code_6('abc')\n    9\n    \"\"\"\n    return get_hash(string)\n\n\ndef get_hash_code_7(string: str) -> int:\n    \"\"\" Return hash code of given string\n    >>>",
    "return len(string)\n\n\ndef char_at(string: str, index: int) -> str:\n    \"\"\" Return character at given index of string\n    >>> char_at('abc', 0)\n    'a'\n    >>> char_at('abc', 2)\n    'c'\n    \"\"\"\n    return string[index]\n\n\ndef str_replace(old: str, new: str, string: str) -> str:\n    \"\"\" Return string with old substring replaced by new\n    >>> str_replace('abc', 'd', 'abcabc')\n    'dd'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef str_split(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of string split by sep\n    >>> str_split('abc','')\n    ['abc']\n    >>> str_split('abc d ef','')\n    ['abc', 'd', 'ef']\n    >>> str_split('abc d ef', 'd')\n    ['abc','ef']\n    \"\"\"\n    return string.split(sep)\n\n\ndef str_join(strings: List[str]) -> str:\n    \"\"\" Return string joined by sep\n    >>> str_join(['abc', 'd', 'ef'])\n    'abc d ef'\n    \"\"\"\n    return sep.join(strings)\n\n\ndef str_match(string: str, pattern: str) -> bool:\n    \"\"\" Return True if string matches pattern\n    >>> str_match('abc', 'a*')\n    True\n    >>> str_match('abc', 'a*')\n    True\n    >>> str_match('abc', 'a*d')\n    False\n    \"\"\"\n    return bool(re.match(pattern, string))\n\n\ndef str_find(string: str, pattern: str) -> int:\n    \"\"\" Return index of first occurrence of pattern in string\n    >>> str_find('abcabcabc', 'a')\n    0\n    >>> str_find('abcabcabc', 'b')\n    2\n    >>> str_find('abcabcabc', 'a')\n    0\n    \"\"\"\n    return string.find(pattern)\n\n\ndef str_splitlines(string: str",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case of given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return stripped string\n    >>> strstrip('  abc')\n    'abc'\n    \"\"\"\n    return string.strip()\n\n\ndef strcontains(string: str, substr: str) -> bool:\n    \"\"\" Return true if given string contains given string\n    >>> strcontains('abc', 'b')\n    True\n    >>> strcontains('abc', 'a')\n    False\n    \"\"\"\n    return string.find(substr)!= -1\n\n\ndef strcount(string: str, substr: str) -> int:\n    \"\"\" Return number of occurrences of given string\n    >>> strcount('abcabc', 'bc')\n    2\n    >>> strcount('abcabc', 'a')\n    1\n    \"\"\"\n    return string.count(substr)\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with replaced string\n    >>> strreplace('abcabc', 'a', 'b')\n    'bbbbbb'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strsplit(string: str, sep: str ='') -> List[str]:\n    \"\"\" Return list of split string\n    >>> strsplit('abc')\n    ['abc']\n    >>> strsplit('abc abc')\n    ['abc', 'abc']\n    >>> strsplit('abc abc')\n    ['abc', 'abc']\n    \"\"\"\n    return string.split(sep)\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Return string formed by joining given list of strings\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with old string replaced by new\n    >>> strreplace('abc', 'a', 'b')\n    'bc'\n    >>> strreplace('abc', 'a', '')\n    ''\n    \"\"\"\n    if not old:\n        return new\n    return string.replace(old, new)\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of strings from string split by sep\n    >>> strsplit('abc','')\n    ['a', 'b', 'c']\n    >>> strsplit('abc', '', 2)\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split(sep)\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join list of strings with sep\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin([])\n    ''\n    \"\"\"\n    return sep.join(strings)\n\ndef strjoinlines(strings: List[str]) -> str:\n    \"\"\" Join list of strings with sep\n    >>> strjoinlines(['a', 'b', 'c'])\n    'abc'\n    >>> strjoinlines([])\n    ''\n    \"\"\"\n    return sep.join(strings)\n\ndef strjoinlines2(strings: List[str]) -> str:\n    \"\"\" Join list of strings with sep\n    >>> strjoinlines2(['a', 'b', 'c'])\n    'abc'\n    >>> strjoinlines2([])\n    ''\n    \"\"\"\n    return sep.join(strings)\n\ndef strpad(string: str, length: int, fillchar: str ='') -> str:\n    \"\"\" Pad",
    "return len(string)\n\n\ndef strfind(string: str, sub: str) -> int:\n    \"\"\" Return index of first occurrence of given string\n    >>> strfind('abcabc', 'bc')\n    2\n    >>> strfind('abcabc', 'ab')\n    0\n    \"\"\"\n    return string.find(sub)\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of given string with given string\n    >>> strreplace('abcabc', 'bc', 'ab')\n    'abcabc'\n    >>> strreplace('abcabc', 'abc', 'ab')\n    'abcabc'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join given list of strings with given string\n    >>> strjoin(['abc', 'def'])\n    'abcdef'\n    >>> strjoin(['abc', 'def'])\n    'abcdef'\n    >>> strjoin([])\n    ''\n    >>> strjoin(['abc', '', 'def'])\n    'abcdef'\n    \"\"\"\n    if not strings:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    return ''.join(strings)\n\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Split given string into list of strings using given separator\n    >>> strsplit('abcdef', 'def')\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'abc')\n    ['', '', 'def']\n    >>> strsplit('abcdef', 'def')\n    ['', '', '']\n    >>> strsplit('abcdef', 'def')\n    []\n    \"\"\"\n    if not string:\n        return []\n    if string.find(sep) < 0:\n        return [string]\n    return string.split(sep)\n\n\ndef strstrip(string: str) -> str:\n    \"\"\" Remove leading and trailing whitespace from given string\n    >>> strstrip('abc')\n    'abc'\n    >>> strstrip('  abc  ')\n    'abc'\n    \"\"\"\n    return string.strip",
    "return len(string)\n\n\ndef is_valid_phone_number(number: str) -> bool:\n    \"\"\" Check if given string is a valid phone number\n    >>> is_valid_phone_number('123-456-7890')\n    True\n    >>> is_valid_phone_number('123456789')\n    False\n    >>> is_valid_phone_number('123456789a')\n    False\n    >>> is_valid_phone_number('123456789')\n    False\n    >>> is_valid_phone_number('123456789abc')\n    False\n    >>> is_valid_phone_number('123456789a')\n    False\n    >>> is_valid_phone_number('123456789')\n    False\n    >>> is_valid_phone_number('12345678901')\n    False\n    >>> is_valid_phone_number('12345678901a')\n    False\n    >>> is_valid_phone_number('12345678901')\n    False\n    >>> is_valid_phone_number('12345678901-a')\n    False\n    >>> is_valid_phone_number('12345678901')\n    False\n    >>> is_valid_phone_number('12345678901-')\n    False\n    \"\"\"\n    if not re.match(r'^\\d{3,9}$', number):\n        return False\n    if len(number) == 9:\n        if number[-1] == '-':\n            return False\n    return True\n\n\ndef is_valid_email(email: str) -> bool:\n    \"\"\" Check if given string is a valid email address\n    >>> is_valid_email('foo@bar.com')\n    True\n    >>> is_valid_email('foo@bar.com.au')\n    True\n    >>> is_valid_email('foo@bar.com.co')\n    True\n    >>> is_valid_email('foo@bar.com.co.au')\n    True\n    >>> is_valid_email('foo@bar.com.co.au.foo')\n    False\n    >>> is_valid_email('foo@bar.com.co.au.foo.foo')",
    "return len(string)\n\n\ndef strpad(string: str, width: int, padchar: str ='') -> str:\n    \"\"\" Return string padded with padchar to given width.\n    >>> strpad('abc', 10)\n   ' abc'\n    >>> strpad('abc', 10, '*')\n    '***abc'\n    \"\"\"\n    if not string:\n        return string\n    if len(string) > width:\n        return string[:width]\n    return string + padchar * (width - len(string))\n\n\ndef get_filename(basename: str) -> str:\n    \"\"\" Return given basename without extension.\n    >>> get_filename('abc.ext')\n    'abc'\n    >>> get_filename('abc.ext', '.py')\n    'abc.py'\n    \"\"\"\n    if '.' not in basename:\n        return basename\n    return basename[:basename.rfind('.')]\n\n\ndef get_ext(filename: str) -> str:\n    \"\"\" Return filename extension.\n    >>> get_ext('abc.ext')\n    'ext'\n    >>> get_ext('abc.py')\n    'py'\n    \"\"\"\n    return filename.split('.')[-1]\n\n\ndef get_file_mtime(filename: str) -> int:\n    \"\"\" Return modification time of given filename.\n    >>> get_file_mtime('abc.py')\n    0\n    >>> get_file_mtime('abc.ext')\n    0\n    >>> get_file_mtime('abc.py', '.py')\n    0\n    >>> get_file_mtime('abc.py', '.py', mtime=0)\n    0\n    >>> get_file_mtime('abc.py', '.py', mtime=100)\n    100\n    \"\"\"\n    if not filename:\n        return 0\n    if '.' not in filename:\n        return 0\n    if filename.endswith('.py'):\n        return 0\n    try:\n        mtime = os.path.getmtime(filename)\n    except OSError:\n        return 0\n    return mtime\n\n\ndef get_file_size(filename: str) ->",
    "return len(string)\n\n\ndef is_number(string: str) -> bool:\n    \"\"\" Return True if given string is a number\n    >>> is_number('')\n    False\n    >>> is_number('abc')\n    False\n    >>> is_number('123')\n    True\n    \"\"\"\n    return isinstance(string, str) and all(ord(c) >= ord('0') and ord(c) <= ord('9') for c in string)\n\n\ndef is_integer(string: str) -> bool:\n    \"\"\" Return True if given string is an integer\n    >>> is_integer('')\n    False\n    >>> is_integer('abc')\n    False\n    >>> is_integer('123')\n    True\n    \"\"\"\n    return is_number(string) and string.isdigit()\n\n\ndef is_float(string: str) -> bool:\n    \"\"\" Return True if given string is a float\n    >>> is_float('')\n    False\n    >>> is_float('abc')\n    False\n    >>> is_float('123')\n    False\n    >>> is_float('123.0')\n    True\n    \"\"\"\n    return is_number(string) and string.isnumeric()\n\n\ndef is_str(string: str) -> bool:\n    \"\"\" Return True if given string is a str\n    >>> is_str('')\n    False\n    >>> is_str('abc')\n    False\n    >>> is_str('123')\n    True\n    >>> is_str('123.0')\n    False\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_list(string: str) -> bool:\n    \"\"\" Return True if given string is a list\n    >>> is_list('')\n    False\n    >>> is_list('abc')\n    False\n    >>> is_list('123')\n    False\n    >>> is_list('123.0')\n    False\n    >>> is_list('[1, 2, 3]')\n    True\n    \"\"\"\n    return isinstance(string, list)\n\n\ndef is_dict(string: str) -> bool:\n    \"\"\" Return True if given string is a dict\n    >>> is_dict('')\n    False",
    "return len(string)\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings and return a negative integer if string1 < string2,\n    zero if string1 == string2, a positive integer if string1 > string2.\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'xyz')\n    -1\n    >>> strcmp('abc', 'ABC')\n    1\n    >>> strcmp('abc', 'abcd')\n    -1\n    \"\"\"\n    return cmp(string1, string2)\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare two strings of length n and return a negative integer if string1 < string2,\n    zero if string1 == string2, a positive integer if string1 > string2.\n    >>> strncmp('abc', 'abc', 3)\n    0\n    >>> strncmp('abc', 'xyz', 3)\n    -1\n    >>> strncmp('abc', 'ABC', 3)\n    1\n    >>> strncmp('abc', 'abcd', 3)\n    -1\n    \"\"\"\n    return cmp(string1[:n], string2[:n])\n\ndef strncmp_ignore_case(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare two strings of length n and return a negative integer if string1 < string2,\n    zero if string1 == string2, a positive integer if string1 > string2.\n    >>> strncmp_ignore_case('abc', 'abc', 3)\n    0\n    >>> strncmp_ignore_case('abc', 'xyz', 3)\n    -1\n    >>> strncmp_ignore_case('abc', 'ABC', 3)\n    1\n    >>> strncmp_ignore_case('abc', 'abcd', 3)\n    -1\n    \"\"\"\n    return cmp(string1[:n].lower(), string2[:n].lower())\n\ndef strncmp_ignore_case_and_pad(string1: str, string2: str, n: int, pad_length: int",
    "return len(string)\n\ndef strconcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strconcat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return string1 + string2\n\ndef strcut(string: str, pos: int, len: int) -> str:\n    \"\"\" Cut string at given position\n    >>> strcut('abcdefg', 2, 3)\n    'abcd'\n    \"\"\"\n    return string[:pos] + string[pos + len:]\n\ndef strpad(string: str, length: int) -> str:\n    \"\"\" Pad string to given length\n    >>> strpad('abcdefg', 5)\n   ' abcdefg'\n    \"\"\"\n    return'' * (length - len(string)) + string\n\ndef strreverse(string: str) -> str:\n    \"\"\" Reverse string\n    >>> strreverse('abcdefg')\n    'gfedcba'\n    \"\"\"\n    return string[::-1]\n\ndef strlower(string: str) -> str:\n    \"\"\" Lower string\n    >>> strlower('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Upper string\n    >>> strupper('abcdefghijklmnopqrstuvwxyz')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old_string: str, new_string: str) -> str:\n    \"\"\" Replace all occurrences of old string with new string\n    >>> strreplace('abcdefg', 'ef', 'gh')\n    'abcdefgh'\n    \"\"\"\n    return string.replace(old_string, new_string)\n\ndef strsplit(string: str, split_string: str) -> List[str]:\n    \"\"\" Split string into a list of strings\n    >>> strsplit('abcdefg','')\n    ['abcdefg']\n    >>> strsplit",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase version of given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreplace(string: str, old: str, new: str, max_occurs: int = 0) -> str:\n    \"\"\" Replace given string with new string in given string\n    >>> strreplace('abc', 'a', 'X')\n    'bXbXcX'\n    >>> strreplace('abc', 'a', 'X', 1)\n    'bXbcX'\n    >>> strreplace('abc', 'a', 'X', 2)\n    'bXbXcX'\n    >>> strreplace('abc', 'a', 'X', 3)\n    'bXbXcX'\n    >>> strreplace('abc', 'a', 'X', 4)\n    'bXbXcX'\n    >>> strreplace('abc', 'a', 'X', 0)\n    'bXbXcX'\n    \"\"\"\n    return string.replace(old, new, max_occurs)\n\n\ndef strsplit(string: str, split_char: str ='') -> list:\n    \"\"\" Split given string on given character\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc', '",
    "return len(string)\n\ndef index(string: str, sub: str, start: int = 0) -> int:\n    \"\"\" Return index of substring in given string\n    >>> index('abcdef', 'c', 0)\n    0\n    >>> index('abcdef', 'c', 1)\n    1\n    >>> index('abcdef', 'c', -1)\n    3\n    >>> index('abcdef', 'c', -2)\n    Traceback (most recent call last):\n   ...\n    IndexError: substring not found\n    >>> index('abcdef', 'c', -3)\n    Traceback (most recent call last):\n   ...\n    IndexError: substring not found\n    >>> index('abcdef', 'c', 100)\n    Traceback (most recent call last):\n   ...\n    IndexError: substring not found\n    \"\"\"\n    return string.find(sub, start)\n\ndef split(string: str, split_char: str) -> List[str]:\n    \"\"\" Return list of words in given string\n    >>> split('abcde', 'c')\n    ['abc', 'de']\n    >>> split('abcde', '')\n    ['abcde']\n    >>> split('abcde','')\n    ['abcde']\n    >>> split('abcde', 'd')\n    ['abc', 'de']\n    >>> split('abcde', 'abc')\n    ['', '', 'de']\n    >>> split('abcde', 'abcd')\n    ['abcde']\n    >>> split('abcde', 'abcde')\n    ['abcde']\n    >>> split('abcde', 'abcdef')\n    ['abcde']\n    >>> split('abcde', 'abcde ')\n    ['abcde']\n    >>> split('abcde', 'abcd')\n    ['abcde']\n    >>> split('abcde', 'abcd ')\n    ['abcde']\n    \"\"\"\n    return [word for word in string.split(split_char) if word]\n\ndef join(words: List[str], sep: str) -> str:\n    \"\"\" Join given list of strings with given separator\n    >>> join(['a', 'b', 'c'],''",
    "return len(string)\n\n\ndef get_first_line(string: str) -> str:\n    \"\"\" Return first line of given string\n    >>> get_first_line('abc\\ndef')\n    'abc'\n    \"\"\"\n    return string.splitlines()[0]\n\n\ndef get_last_line(string: str) -> str:\n    \"\"\" Return last line of given string\n    >>> get_last_line('abc\\ndef')\n    'def'\n    \"\"\"\n    return string.splitlines()[-1]\n\n\ndef get_lines(string: str) -> List[str]:\n    \"\"\" Return all lines of given string\n    >>> get_lines('abc\\ndef')\n    ['abc', 'def']\n    \"\"\"\n    return string.splitlines()\n\n\ndef get_lines_with_indentation(string: str) -> List[str]:\n    \"\"\" Return all lines of given string with indentation\n    >>> get_lines_with_indentation('abc\\n  def')\n    ['  abc',' def']\n    \"\"\"\n    return get_lines(string).strip().splitlines(True)\n\n\ndef get_first_line_with_indentation(string: str) -> str:\n    \"\"\" Return first line of given string with indentation\n    >>> get_first_line_with_indentation('abc\\n  def')\n    'abc'\n    \"\"\"\n    return get_lines_with_indentation(string).pop(0)\n\n\ndef get_last_line_with_indentation(string: str) -> str:\n    \"\"\" Return last line of given string with indentation\n    >>> get_last_line_with_indentation('abc\\n  def')\n    'def'\n    \"\"\"\n    return get_lines_with_indentation(string).pop(-1)\n\n\ndef get_lines_with_indentation_and_newline(string: str) -> List[str]:\n    \"\"\" Return all lines of given string with indentation and newline\n    >>> get_lines_with_indentation_and_newline('abc\\n  def\\n')\n    ['  abc',' def']\n    \"\"\"\n    return get_lines",
    "return len(string)\n\n\ndef is_str(string: str) -> bool:\n    \"\"\" Return True if given string is a string, False otherwise\n    >>> is_str('')\n    False\n    >>> is_str('abc')\n    True\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_str_or_bytes(string: str) -> bool:\n    \"\"\" Return True if given string is a string, False otherwise\n    >>> is_str_or_bytes('')\n    False\n    >>> is_str_or_bytes('abc')\n    True\n    \"\"\"\n    return is_str(string) or isinstance(string, bytes)\n\n\ndef is_str_or_bytes_or_unicode(string: str) -> bool:\n    \"\"\" Return True if given string is a string, False otherwise\n    >>> is_str_or_bytes_or_unicode('')\n    False\n    >>> is_str_or_bytes_or_unicode('abc')\n    True\n    \"\"\"\n    return is_str_or_bytes(string) or isinstance(string, unicode)\n\n\ndef is_unicode(string: str) -> bool:\n    \"\"\" Return True if given string is a unicode string, False otherwise\n    >>> is_unicode('')\n    False\n    >>> is_unicode('abc')\n    True\n    \"\"\"\n    return isinstance(string, unicode)\n\n\ndef is_unicode_or_bytes(string: str) -> bool:\n    \"\"\" Return True if given string is a unicode string, False otherwise\n    >>> is_unicode_or_bytes('')\n    False\n    >>> is_unicode_or_bytes('abc')\n    True\n    \"\"\"\n    return is_unicode(string) or isinstance(string, bytes)\n\n\ndef is_unicode_or_bytes_or_str(string: str) -> bool:\n    \"\"\" Return True if given string is a unicode string, False otherwise\n    >>> is_unicode_or_bytes_or_str('')\n    False\n    >>> is_unicode_or_bytes_or_str('abc')\n    True\n    \"\"\"\n    return is_unicode_",
    "return len(string)\n\ndef strjoin(strings: list) -> str:\n    \"\"\" Join a list of strings with a space\n    >>> strjoin(['a', 'b', 'c'])\n    'a b c'\n    \"\"\"\n    return''.join(strings)\n\ndef strfind(string: str, substr: str) -> int:\n    \"\"\" Return index of the first occurrence of substr in string\n    >>> strfind('abc', 'b')\n    1\n    >>> strfind('abc', 'a')\n    0\n    \"\"\"\n    return string.find(substr)\n\ndef strfindr(string: str, substr: str) -> int:\n    \"\"\" Return last index of the first occurrence of substr in string\n    >>> strfindr('abc', 'b')\n    2\n    >>> strfindr('abc', 'a')\n    3\n    \"\"\"\n    return string.rfind(substr)\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurences of old string with new\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strreplacer(string: str, old: str, new: str) -> str:\n    \"\"\" Replace last occurence of old string with new\n    >>> strreplacer('abc', 'a', 'b')\n    'bca'\n    \"\"\"\n    return string.replace(old, new, 1)\n\ndef strsplit(string: str, sep: str) -> list:\n    \"\"\" Split a string into a list of strings using sep\n    >>> strsplit('abc','')\n    ['a', 'b', 'c']\n    >>> strsplit('abc', 'a')\n    ['b', 'c']\n    >>> strsplit('abc', 'b')\n    ['a', 'c']\n    \"\"\"\n    return string.split(sep)\n\ndef strsplitr(string: str, sep: str) -> list:\n    \"\"\" Split a string into a list of strings using sep\n    >>> strsplitr('abc','')\n    ['a', 'b', 'c']\n    >>>",
    "return len(string)\n\n\ndef strip(string: str) -> str:\n    \"\"\" Return string without leading and trailing whitespaces\n    >>> strip('  abc  ')\n    'abc'\n    >>> strip('  abc  ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\n\ndef is_number(string: str) -> bool:\n    \"\"\" Return True if given string is a number\n    >>> is_number('')\n    False\n    >>> is_number('abc')\n    False\n    >>> is_number('  abc  ')\n    False\n    >>> is_number('  123  ')\n    True\n    \"\"\"\n    return string.isdigit()\n\n\ndef is_alpha(string: str) -> bool:\n    \"\"\" Return True if given string is a letter\n    >>> is_alpha('')\n    False\n    >>> is_alpha('abc')\n    True\n    >>> is_alpha('  abc  ')\n    False\n    >>> is_alpha('  abc  ')\n    False\n    \"\"\"\n    return string.isalpha()\n\n\ndef is_lower(string: str) -> bool:\n    \"\"\" Return True if given string is lower case\n    >>> is_lower('')\n    False\n    >>> is_lower('abc')\n    False\n    >>> is_lower('  abc  ')\n    False\n    >>> is_lower('  abc  ')\n    False\n    >>> is_lower('ABC')\n    True\n    \"\"\"\n    return string.islower()\n\n\ndef is_upper(string: str) -> bool:\n    \"\"\" Return True if given string is upper case\n    >>> is_upper('')\n    False\n    >>> is_upper('abc')\n    False\n    >>> is_upper('  abc  ')\n    False\n    >>> is_upper('  abc  ')\n    False\n    >>> is_upper('ABC')\n    True\n    \"\"\"\n    return string.isupper()\n\n\ndef is_whitespace(string: str) -> bool:\n    \"\"\" Return True if given string is whitespace\n    >>> is_whitespace('')\n    False\n    >>> is_whitespace('abc')\n    False\n    >>> is_whitespace('  abc  ')",
    "return len(string)\n\n\ndef strjoin(string1: str, string2: str) -> str:\n    \"\"\" Join two strings\n    >>> strjoin('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return string1 + string2\n\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Split string on sep\n    >>> strsplit('abcdef', 'c')\n    ['abc', 'def']\n    \"\"\"\n    return string.split(sep)\n\n\ndef strchr(string: str, chr: str) -> str:\n    \"\"\" Find character chr in string\n    >>> strchr('abcdef', 'a')\n    'a'\n    >>> strchr('abcdef', 'z')\n    Traceback (most recent call last):\n       ...\n    ValueError: substring not found in string\n    >>> strchr('abcdef','')\n    Traceback (most recent call last):\n       ...\n    ValueError: substring not found in string\n    >>> strchr('abcdef','')\n    Traceback (most recent call last):\n       ...\n    ValueError: substring not found in string\n    \"\"\"\n    if chr not in string:\n        raise ValueError('substring not found in string')\n    return chr\n\n\ndef strlen_chr(string: str, chr: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_chr('abcdef', 'a')\n    3\n    >>> strlen_chr('abcdef', 'z')\n    Traceback (most recent call last):\n       ...\n    ValueError: substring not found in string\n    \"\"\"\n    return strchr(string, chr).__len__()\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace string occurrences with new string\n    >>> strreplace('abcdef', 'c', 'z')\n    'abzef'\n    >>> strreplace('abcdef', 'z', 'z')\n    'abcdef'\n    >>> strreplace('abcdef', 'z', 'zz')\n    Traceback (most recent call last",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strlowercase(string: str) -> str:\n    \"\"\" Return lowercase string\n    >>> strlowercase('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strreplace(string: str, find: str, replace: str, count: int = 0) -> str:\n    \"\"\" Replace all occurrences of a string within a string\n    >>> strreplace('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'X', 'Y')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    >>> strreplace('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'X', 'Y', 2)\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"\n    return string.replace(find, replace, count)\n\ndef strsplit(string: str, sep: str, maxsplit: int = -1) -> List[str]:\n    \"\"\" Split string by given separator\n    >>> list(strsplit('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'X'))\n    ['ABC', 'DEF', 'GHIJ', 'KLMN', 'OPQR', 'STUVW', 'XYZ']\n    >>> list(strsplit('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'X', 2))\n    ['ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n    \"\"\"\n    return string.split(sep, maxsplit)\n\ndef strtitle(string: str) -> str:\n    \"\"\" Return titlecase string\n    >>> strtitle('abc')\n    'Abc'\n    >>> strtitle('ABC')\n    'Abc'\n    >>> strtitle('AbC')\n    'Abc'\n    >>> strtitle('abc')\n    'Abc'\n    \"\"\"\n    return string.title()\n\ndef strtrim(string: str, chars: str) -> str:\n    \"\"\"",
    "return len(string)\n\n\ndef strsubstr(string: str, start: int, end: int) -> str:\n    \"\"\" Return substring of given string\n    >>> strsubstr('abc', 0, 2)\n    'ab'\n    >>> strsubstr('abc', 0, -1)\n    'abc'\n    >>> strsubstr('abc', -1, 0)\n    ''\n    >>> strsubstr('abc', 2, -1)\n    ''\n    >>> strsubstr('abc', -1, -1)\n    ''\n    \"\"\"\n    return string[start:end]\n\n\ndef strjoin(strings: list, sep: str) -> str:\n    \"\"\" Join list of strings with given separator\n    >>> strjoin(['a', 'b', 'c'], '-')\n    'a-b-c'\n    >>> strjoin(['a', 'b', 'c'], '')\n    'abc'\n    >>> strjoin(['a', 'b', 'c'], ',')\n    'a,b,c'\n    >>> strjoin(['a', 'b', 'c'], '|')\n    'a|b|c'\n    \"\"\"\n    return sep.join(strings)\n\n\ndef strrep(string: str, num: int) -> str:\n    \"\"\" Repeatedly repeat given string\n    >>> strrep('abc', 3)\n    'abcabcabc'\n    >>> strrep('abc', 0)\n    ''\n    \"\"\"\n    return ''.join(string * num)\n\n\ndef strsub(string: str, start: int, end: int) -> str:\n    \"\"\" Return substring of given string\n    >>> strsub('abc', 0, 2)\n    'ab'\n    >>> strsub('abc', 0, -1)\n    'abc'\n    >>> strsub('abc', -1, 0)\n    ''\n    >>> strsub('abc', 2, -1)\n    ''\n    >>> strsub('abc', -1, -1)\n    ''\n    \"\"\"\n    return string[start:end]\n\n\ndef strsplit(string: str, sep: str, maxsplit: int) -> list:\n    \"\"\" Split string by given separator",
    "return len(string)\n\n\ndef get_random_string(length: int = 10) -> str:\n    \"\"\" Generate a random string\n    >>> get_random_string(10)\n    'hgvk'\n    \"\"\"\n    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))\n\n\ndef get_random_string_list(length: int = 10) -> List[str]:\n    \"\"\" Generate a random string list\n    >>> get_random_string_list(10)\n    ['hgvk','mvk', 'cvvk']\n    \"\"\"\n    return [get_random_string(length) for i in range(length)]\n\n\ndef get_random_string_list_with_length(length: int) -> List[str]:\n    \"\"\" Generate a random string list\n    >>> get_random_string_list_with_length(10)\n    ['hgvk','mvk', 'cvvk']\n    \"\"\"\n    return [get_random_string(length) for i in range(length)]\n\n\ndef get_random_string_list_with_length_and_distribution(length: int, distribution: List[float] = [0.5, 0.5]) -> List[str]:\n    \"\"\" Generate a random string list\n    >>> get_random_string_list_with_length_and_distribution(10)\n    ['hgvk','mvk', 'cvvk']\n    \"\"\"\n    return [get_random_string(length) for i in range(length)]\n\n\ndef get_random_string_list_with_length_and_distribution_and_prefix(length: int, distribution: List[float] = [0.5, 0.5], prefix: str = '') -> List[str]:\n    \"\"\" Generate a random string list\n    >>> get_random_string_list_with_length_and_distribution_and_prefix(10)\n    ['hgvk','mvk', 'cvvk']\n    \"\"\"\n    return [prefix + get_random_string(length) for i in range(length)]\n\n\ndef get_random_string_",
    "return len(string)\n\n\ndef strfind(string: str, substring: str, start: int = 0) -> int:\n    \"\"\" Return position of first occurance of substring in string\n    >>> strfind('abcdef', 'c')\n    3\n    >>> strfind('abcdef', 'c', start=2)\n    6\n    \"\"\"\n    return string.find(substring, start)\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurances of string old with string new\n    >>> strreplace('abcdef', 'c', 'd')\n    'dddefd'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Split string into list of strings\n    >>> strsplit('abcdef', 'c')\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'c', 2)\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'c', 3)\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'c', 4)\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'c', 5)\n    ['abc', 'def']\n    >>> strsplit('abcdef', 'c', 6)\n    ['abc', 'def']\n    \"\"\"\n    return string.split(sep)\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join strings with string separator\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abcd'\n    >>> strjoin(['a', 'b', 'c', 'd', 'e'])\n    'abcde'\n    >>> strjoin(['a', 'b', 'c', 'd', 'e', 'f'])\n    'abcdef'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef strjoin_lines(strings: List[str]) -> str:\n    \"\"\" Join strings with string separator\n    >>> strjoin_lines(['a',",
    "return len(string)\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join strings\n    >>> strjoin(['a','b'])\n    'ab'\n    \"\"\"\n    return ''.join(strings)\n\ndef strsplit(string: str) -> List[str]:\n    \"\"\" Split string at whitespace\n    >>> strsplit('abc def')\n    ['abc', 'def']\n    >>> strsplit('abc def  ')\n    ['abc def']\n    \"\"\"\n    return string.split()\n\ndef strfind(string: str, substr: str) -> int:\n    \"\"\" Return index of first occurence of substr\n    >>> strfind('abc def', 'def')\n    2\n    >>> strfind('abc def', 'abc')\n    0\n    \"\"\"\n    return string.find(substr)\n\ndef strfindall(string: str, substr: str) -> List[int]:\n    \"\"\" Return indices of all occurences of substr\n    >>> strfindall('abc def', 'def')\n    [2, 2]\n    >>> strfindall('abc def', 'abc')\n    [0]\n    \"\"\"\n    return [i for i, s in enumerate(string) if s == substr]\n\ndef strfindlast(string: str, substr: str) -> int:\n    \"\"\" Return last index of first occurence of substr\n    >>> strfindlast('abc def', 'def')\n    4\n    >>> strfindlast('abc def', 'abc')\n    0\n    \"\"\"\n    return string.rfind(substr)\n\ndef strfindlastall(string: str, substr: str) -> List[int]:\n    \"\"\" Return indices of all occurences of substr\n    >>> strfindall('abc def', 'def')\n    [4, 4]\n    >>> strfindall('abc def', 'abc')\n    [0, 0]\n    \"\"\"\n    return [i for i, s in enumerate(string) if s == substr]\n\ndef strfindallre(string: str, regex: str) -> List[int]:\n    \"\"\" Return indices of all occurences of regex\n    >>> strfindallre('abc def', 'def')\n    [2, 2",
    "return len(string)\n\n\ndef count(string: str) -> int:\n    \"\"\" Return number of occurrences of given string\n    >>> count('abc')\n    3\n    >>> count('ab')\n    2\n    \"\"\"\n    return string.count(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if given string is a palindrome\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('aab')\n    True\n    >>> is_palindrome('aabb')\n    True\n    \"\"\"\n    return string == reverse(string)\n\n\ndef reverse(string: str) -> str:\n    \"\"\" Reverse given string\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\n    return string[::-1]",
    "return len(string)\n\ndef strncasecmp(s1: str, s2: str, n: int = -1) -> int:\n    \"\"\" Return n-th character of given strings and compare them\n    >>> strncasecmp('abc', 'abc', 0)\n    0\n    >>> strncasecmp('abc', 'ABC', 1)\n    -1\n    >>> strncasecmp('abc', 'ABC', 2)\n    1\n    >>> strncasecmp('abc', 'ABC', 3)\n    0\n    \"\"\"\n    return cmp(s1[:n], s2[:n])\n\ndef strncasecmp_l(s1: str, s2: str, n: int = -1) -> int:\n    \"\"\" Return n-th character of given strings and compare them\n    >>> strncasecmp_l('abc', 'abc', 0)\n    0\n    >>> strncasecmp_l('abc', 'ABC', 1)\n    1\n    >>> strncasecmp_l('abc', 'ABC', 2)\n    -1\n    >>> strncasecmp_l('abc', 'ABC', 3)\n    0\n    \"\"\"\n    return cmp(s1[:n].lower(), s2[:n].lower())\n\ndef strncasecmp_l2(s1: str, s2: str, n: int = -1) -> int:\n    \"\"\" Return n-th character of given strings and compare them\n    >>> strncasecmp_l2('abc', 'abc', 0)\n    0\n    >>> strncasecmp_l2('abc', 'ABC', 1)\n    1\n    >>> strncasecmp_l2('abc', 'ABC', 2)\n    -1\n    >>> strncasecmp_l2('abc', 'ABC', 3)\n    0\n    \"\"\"\n    return cmp(s1[:n].lower(), s2[:n].lower())\n\ndef strncmp(s1: str, s2: str, n: int = -1) -> int:\n    \"\"\" Return n-th character of given strings and compare them\n    >>> strncmp('abc', 'abc', 0)\n    0\n    >>> strncmp('",
    "return len(string)\n\n\ndef str_to_int(string: str) -> int:\n    \"\"\" Convert string to int\n    >>> str_to_int('123')\n    123\n    >>> str_to_int('abc')\n    Traceback (most recent call last):\n   ...\n    ValueError: str_to_int('abc')\n    \"\"\"\n    try:\n        return int(string)\n    except ValueError:\n        raise ValueError('str_to_int({!r})'.format(string))\n\n\ndef str_to_float(string: str) -> float:\n    \"\"\" Convert string to float\n    >>> str_to_float('123')\n    123.0\n    >>> str_to_float('abc')\n    Traceback (most recent call last):\n   ...\n    ValueError: str_to_float('abc')\n    \"\"\"\n    try:\n        return float(string)\n    except ValueError:\n        raise ValueError('str_to_float({!r})'.format(string))\n\n\ndef str_to_bool(string: str) -> bool:\n    \"\"\" Convert string to bool\n    >>> str_to_bool('True')\n    True\n    >>> str_to_bool('False')\n    False\n    >>> str_to_bool('abc')\n    Traceback (most recent call last):\n   ...\n    ValueError: str_to_bool('abc')\n    \"\"\"\n    if string.lower() == 'true':\n        return True\n    elif string.lower() == 'false':\n        return False\n    else:\n        raise ValueError('str_to_bool({!r})'.format(string))\n\n\ndef str_to_list(string: str) -> list:\n    \"\"\" Convert string to list\n    >>> str_to_list('abc')\n    ['a', 'b', 'c']\n    >>> str_to_list('123')\n    ['1', '2', '3']\n    >>> str_to_list('123,4')\n    ['1', '2', '3', '4']\n    \"\"\"\n    return [str_to_int(s) for s in string.split(',')]\n\n\ndef str_to_dict",
    "return len(string)\n\n\ndef get_word(string: str) -> str:\n    \"\"\" Return first word of given string\n    >>> get_word('abc')\n    'abc'\n    >>> get_word('abc def')\n    'abc'\n    \"\"\"\n    return string.split(' ')[0]\n\n\ndef get_rest(string: str) -> str:\n    \"\"\" Return rest of given string\n    >>> get_rest('abc def')\n    'def'\n    >>> get_rest('abc def ghi')\n    'ghi'\n    \"\"\"\n    return string.split(' ')[1:]\n\n\ndef get_words(string: str) -> List[str]:\n    \"\"\" Return list of words in given string\n    >>> get_words('abc def')\n    ['abc', 'def']\n    >>> get_words('abc def ghi')\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    return string.split(' ')\n\n\ndef get_words_in_string(string: str) -> List[str]:\n    \"\"\" Return list of words in given string\n    >>> get_words_in_string('abc def')\n    ['abc', 'def']\n    >>> get_words_in_string('abc def ghi')\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    return get_words(string)\n\n\ndef get_words_in_string_in_set(string: str) -> Set[str]:\n    \"\"\" Return set of words in given string\n    >>> get_words_in_string_in_set('abc def')\n    set(['abc', 'def'])\n    >>> get_words_in_string_in_set('abc def ghi')\n    set(['abc', 'def', 'ghi'])\n    \"\"\"\n    return set(get_words_in_string(string))\n\n\ndef get_words_in_string_in_set_in_list(string: str) -> List[Set[str]]:\n    \"\"\" Return list of sets of words in given string\n    >>> get_words_in_string_in_set_in_list('abc def')\n    [set(['abc', 'def']), set(['abc', '",
    "return len(string)\n\ndef split(string: str, sep: str) -> List[str]:\n    \"\"\" Split string by sep\n    >>> split('a,b,c', ',')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split(sep)\n\ndef splitlines(string: str) -> List[str]:\n    \"\"\" Split string by line\n    >>> splitlines('a\\nb\\nc\\n')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.splitlines()\n\ndef split_lines(string: str) -> List[str]:\n    \"\"\" Split string by line\n    >>> split_lines('a\\nb\\nc\\n')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split('\\n')\n\ndef join(items: List[str]) -> str:\n    \"\"\" Join list of strings\n    >>> join(['a', 'b', 'c'])\n    'a,b,c'\n    \"\"\"\n    return ','.join(items)\n\ndef join_lines(items: List[str]) -> str:\n    \"\"\" Join list of strings with line separator\n    >>> join_lines(['a', 'b', 'c'])\n    'a,b,c'\n    \"\"\"\n    return '\\n'.join(items)\n\ndef strip(string: str) -> str:\n    \"\"\" Strip leading and trailing spaces\n    >>> strip(' a  b  c ')\n    'a,b,c'\n    \"\"\"\n    return string.strip()\n\ndef lower(string: str) -> str:\n    \"\"\" Lower case\n    >>> lower('A')\n    'a'\n    \"\"\"\n    return string.lower()\n\ndef upper(string: str) -> str:\n    \"\"\" Upper case\n    >>> upper('a')\n    'A'\n    \"\"\"\n    return string.upper()\n\ndef title(string: str) -> str:\n    \"\"\" Title case\n    >>> title('a')\n    'A'\n    \"\"\"\n    return string.title()\n\ndef capitalize(string: str) -> str:\n    \"\"\" Capitalize\n    >>> capitalize('a')\n    'A'",
    "return len(string)\n\n\ndef split(string: str, separator: str) -> List[str]:\n    \"\"\" Split given string by given separator\n    >>> split('abc','')\n    ['abc']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    >>> split('abc  def','')\n    ['abc', 'def']\n    \"\"\"\n    return string.split(separator)\n\n\ndef split_lines(string: str) -> List[str]:\n    \"\"\" Split given string by new line\n    >>> split_lines('abc\\ndef')\n    ['abc', 'def']\n    >>> split_lines('abc\\ndef')\n    ['abc', 'def']\n    >>> split_lines('abc\\ndef')\n    ['abc', 'def']\n    >>> split",
    "return len(string)\n\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return index of given character in given string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'x')\n    Traceback (most recent call last):\n   ...\n    ValueError: 'x' is not in string\n    >>> strchr('abc', 'c')\n    Traceback (most recent call last):\n   ...\n    ValueError: 'c' is not in string\n    >>> strchr('abc', 'z')\n    Traceback (most recent call last):\n   ...\n    ValueError: 'z' is not in string\n    \"\"\"\n    try:\n        return string.index(char)\n    except ValueError as e:\n        raise e",
    "return len(string)\n\n\ndef strchr(string: str, chr: int) -> str:\n    \"\"\" Return index of first character in given string\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'z')\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strchr('abc', 256)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strchr('abc', -1)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strchr('abc', None)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    \"\"\"\n    if chr < 0 or chr > 255:\n        raise ValueError('chr must be in range(0, 256)')\n    return string[chr]\n\n\ndef strrchr(string: str, chr: int) -> str:\n    \"\"\" Return index of last character in given string\n    >>> strrchr('abc', 'b')\n    'b'\n    >>> strrchr('abc', 'z')\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strrchr('abc', 256)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strrchr('abc', -1)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    >>> strrchr('abc', None)\n    Traceback (most recent call last):\n   ...\n    ValueError: chr must be in range(0, 256)\n    \"\"\"\n    if chr < 0 or chr > 255:\n        raise ValueError('chr must be in range(0, 256",
    "return len(string)\n\n\ndef join(iterable: Iterable, sep: str ='', reverse: bool = False) -> str:\n    \"\"\" Join given iterable with sep\n    >>> join(('a', 'b', 'c'), sep='-')\n    'a-b-c'\n    >>> join(('a', 'b', 'c'), sep='-', reverse=True)\n    'c-b-a'\n    >>> join(('a', 'b', 'c'), sep='-', reverse=True)\n    'c-b-a'\n    \"\"\"\n    return sep.join(sorted(iterable, key=strlen, reverse=reverse))\n\n\ndef get_next_line(file: file) -> str:\n    \"\"\" Return next line from given file object\n    >>> get_next_line(open('test.txt'))\n    'line 1\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 2\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 3\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 4\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 5\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 6\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 7\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 8\\n'\n    >>> get_next_line(open('test.txt'))\n    'line 9\\n'\n    \"\"\"\n    return next(file).strip()\n\n\ndef get_next_lines(file: file, num: int) -> Iterable:\n    \"\"\" Return next num lines from given file object\n    >>> get_next_lines(open('test.txt'), 3)\n    ['line 1', 'line 2', 'line 3']\n    >>> get_next_lines(open('test.txt'), 1)\n    ['line 1', 'line 2', 'line 3']\n    >>> get_next_lines(",
    "return len(string)\n\ndef strchr(string: str, chr: int) -> int:\n    \"\"\" Return index of first occurrence of chr in string\n    >>> strchr('abc', 97)\n    1\n    >>> strchr('abc', 'a')\n    0\n    \"\"\"\n    return string.find(chr)\n\ndef strrchr(string: str, chr: int) -> int:\n    \"\"\" Return index of last occurrence of chr in string\n    >>> strrchr('abc', 97)\n    3\n    >>> strrchr('abc', 'a')\n    -1\n    \"\"\"\n    return string.rfind(chr)\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'xyz')\n    -1\n    \"\"\"\n    return cmp(string1, string2)\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare two strings up to given n-1 characters\n    >>> strncmp('abc', 'abc', 1)\n    0\n    >>> strncmp('abc', 'abc', 2)\n    0\n    >>> strncmp('abc', 'abc', 3)\n    -1\n    >>> strncmp('abc', 'xyz', 3)\n    -1\n    \"\"\"\n    return cmp(string1[:n], string2[:n])\n\ndef strncmp_ignore_case(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare two strings up to given n-1 characters, ignoring case\n    >>> strncmp_ignore_case('abc', 'abc', 1)\n    0\n    >>> strncmp_ignore_case('abc', 'abc', 2)\n    0\n    >>> strncmp_ignore_case('abc', 'abc', 3)\n    -1\n    >>> strncmp_ignore_case('abc', 'xyz', 3)\n    -1\n    \"\"\"\n    return cmp(string1[:n].lower(), string2[:n].",
    "return len(string)\n\ndef str2num(string: str) -> int:\n    \"\"\" Convert string to integer\n    >>> str2num('abc')\n    0\n    >>> str2num('123')\n    123\n    >>> str2num('abc123')\n    123\n    >>> str2num('123abc')\n    123\n    \"\"\"\n    if not string:\n        return 0\n    return int(string)\n\ndef num2str(number: int) -> str:\n    \"\"\" Convert integer to string\n    >>> num2str(123)\n    '123'\n    >>> num2str(12345)\n    '12345'\n    >>> num2str(12345678)\n    '12345678'\n    >>> num2str(123456789)\n    '123456789'\n    >>> num2str(12345678901)\n    '12345678901'\n    >>> num2str(1234567890123)\n    '1234567890123'\n    >>> num2str(123456789012345)\n    '123456789012345'\n    >>> num2str(1234567890123456)\n    '1234567890123456'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number < 0:\n        return '-' + str(-number)\n    return str(number)\n\ndef str2bool(string: str) -> bool:\n    \"\"\" Convert string to boolean\n    >>> str2bool('')\n    False\n    >>> str2bool('true')\n    True\n    >>> str2bool('false')\n    False\n    >>> str2bool('True')\n    True\n    >>> str2bool('False')\n    False\n    \"\"\"\n    if not string:\n        return False\n    string = string.lower()\n    if string in ('true', 'yes', 'y', 'on', 't', '1'):\n        return True\n    if string in ('false', 'no', 'n', 'off', 'f', '0'):\n        return False\n    raise ValueError('Unrecognized bool value: {}'.format(string))\n\ndef str2list(string: str) ->",
    "return len(string)\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of old string with new string\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strjoin(string: str, *, sep: str ='') -> str:\n    \"\"\" Join a list of strings using sep\n    >>> strjoin(['a', 'b', 'c'])\n    'a b c'\n    >>> strjoin(['a', 'b', 'c'], sep='--')\n    'a--b--c'\n    \"\"\"\n    return sep.join(string)\n\n\ndef strsplit(string: str, sep: str ='') -> Iterator[str]:\n    \"\"\" Split string using sep\n    >>> list(strsplit('abc'))\n    ['a', 'b', 'c']\n    >>> list(strsplit('a--b--c'))\n    ['a', '--', 'b', '--', 'c']\n    \"\"\"\n    for i in range(0, len(string), sep.__len__()):\n        yield string[i:i + sep.__len__()]\n\n\ndef strfind(string: str, sub: str) -> int:\n    \"\"\" Find index of first occurrence of given string\n    >>> strfind('abc', 'b')\n    1\n    >>> strfind('abc', 'x')\n    Traceback (most recent call last):\n       ...\n    ValueError: substring not found\n    >>> strfind('abc', 'a')\n    0\n    \"\"\"\n    return string.find(sub)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Lower case string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Upper case string\n    >>> strupper('abc')\n    'ABC'\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strtrim(",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('AbC')\n    'abc'\n    >>> strlower('abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strrep(string: str, rep: str) -> str:\n    \"\"\" Return string with all occurrences of string replaced with rep\n    >>> strrep('abc', 'xyz')\n    'xyxyxyxy'\n    >>> strrep('abcabcabc', 'xyz')\n    'xyxyxyxy'\n    >>> strrep('abcabcabc', 'xyz')\n    'xyxyxyxy'\n    \"\"\"\n    return string.replace(string, rep)\n\ndef strreplace(string: str, rep: str, rep2: str) -> str:\n    \"\"\" Return string with all occurrences of rep string replaced with rep2\n    >>> strreplace('abc', 'a', 'b')\n    'bbc'\n    >>> strreplace('abcabcabc', 'a', 'b')\n    'bbcbcbcbc'\n    >>> strreplace('abcabcabc', 'a', 'b')\n    'bbcbcbcbc'\n    \"\"\"\n    return string.replace(rep, rep2)\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of tokens from string\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc abc abc','')\n    ['abc', 'abc', 'abc']\n    >>> strsplit('abc abc abc','')\n    ['abc', 'abc', 'abc']\n    \"\"\"\n    return string.split(sep)\n\ndef strtolower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strtolower('ABC')\n    'abc'\n    >>> strtolower('AbC')\n    'abc'\n    >>> strtolower('abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strtoupper(string: str) ->",
    "return len(string)\n\ndef strreverse(string: str) -> str:\n    \"\"\" Reverse given string\n    >>> strreverse('abc')\n    'cba'\n    \"\"\"\n    return string[::-1]\n\ndef strsub(string: str, start: int, end: int) -> str:\n    \"\"\" Return substring of given string\n    >>> strsub('abc', 0, 2)\n    'bc'\n    >>> strsub('abc', 0, 1)\n    'a'\n    >>> strsub('abc', -1, 1)\n    ''\n    \"\"\"\n    return string[start:end]\n\ndef strsplit(string: str, sep: str) -> Iterable[str]:\n    \"\"\" Split given string by given separator\n    >>> list(strsplit('a,b,c,d', ','))\n    ['a', 'b', 'c', 'd']\n    >>> list(strsplit('a,b,c,d',''))\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    return (s.strip() for s in string.split(sep))\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace given string with given regex\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strjoin(strings: Iterable[str]) -> str:\n    \"\"\" Join given strings with given separator\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abcd'\n    >>> strjoin(['a', 'b', 'c', 'd'], '&')\n    'abcd'\n    >>> strjoin(['a', 'b', 'c', 'd'], '&')\n    'abcd'\n    >>> strjoin('a', 'b', 'c', 'd')\n    'abcd'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abcd'\n    \"\"\"\n    return ''.join(strings)",
    "return len(string)\n\n\ndef get_substring(string: str, start: int, end: int) -> str:\n    \"\"\" Return substring of given string\n    >>> get_substring('abc', 0, 2)\n    'bc'\n    >>> get_substring('abc', 1, 3)\n    'c'\n    >>> get_substring('abc', -1, 0)\n    ''\n    >>> get_substring('abc', 0, -1)\n    ''\n    \"\"\"\n    return string[start:end]\n\n\ndef get_char(string: str, index: int) -> str:\n    \"\"\" Return character at given index\n    >>> get_char('abc', 0)\n    'a'\n    >>> get_char('abc', 1)\n    'b'\n    >>> get_char('abc', 2)\n    'c'\n    >>> get_char('abc', 3)\n    Traceback (most recent call last):\n       ...\n    IndexError: string index out of range\n    >>> get_char('abc', -1)\n    Traceback (most recent call last):\n       ...\n    IndexError: string index out of range\n    >>> get_char('abc', 4)\n    Traceback (most recent call last):\n       ...\n    IndexError: string index out of range\n    \"\"\"\n    return string[index]\n\n\ndef get_char_index(string: str, char: str) -> int:\n    \"\"\" Return index of given character\n    >>> get_char_index('abc', 'a')\n    0\n    >>> get_char_index('abc', 'b')\n    1\n    >>> get_char_index('abc', 'c')\n    2\n    >>> get_char_index('abc', 'x')\n    Traceback (most recent call last):\n       ...\n    ValueError: string contains invalid character\n    >>> get_char_index('abc', 'y')\n    Traceback (most recent call last):\n       ...\n    ValueError: string contains invalid character\n    \"\"\"\n    for i, c in enumerate(string):\n        if c == char:\n            return i\n    raise ValueError(\"string contains invalid character\")\n\n\ndef get_char_index",
    "return len(string)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case version of given string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('AbC')\n    'abc'\n    >>> strlower('aBc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return string without leading and trailing whitespace\n    >>> strstrip('  abc')\n    'abc'\n    >>> strstrip('  aBc  ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case version of given string\n    >>> strupper('abc')\n    'ABC'\n    >>> strupper('AbC')\n    'ABC'\n    >>> strupper('aBc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurences of old string with new string\n    >>> strreplace('abcabc', 'abc', 'xyz')\n    'xyzxyz'\n    >>> strreplace('abcabc', 'abc', '')\n    'abcabc'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strjoin(strings: list[str]) -> str:\n    \"\"\" Join strings in given list with given glue\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\ndef strchr(string: str, c: str) -> str:\n    \"\"\" Return first occurence of given character in given string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'd')\n    ''\n    \"\"\"\n    return string.find(c)\n\ndef strr",
    "return len(string)\n\n\ndef to_camel_case(string: str) -> str:\n    \"\"\" Convert a string to camel case\n    >>> to_camel_case('abc')\n    'Abc'\n    >>> to_camel_case('a_b_c')\n    'AbC'\n    >>> to_camel_case('__')\n    '__'\n    >>> to_camel_case('__a')\n    '__a'\n    >>> to_camel_case('abc__')\n    'Abc__'\n    \"\"\"\n    return ''.join(string.title()[0].lower() + string.title()[1:].lower() for string in string.split('_'))\n\n\ndef camel_case_to_underscore(string: str) -> str:\n    \"\"\" Convert a camel case string to underscore\n    >>> camel_case_to_underscore('Abc')\n    'abc'\n    >>> camel_case_to_underscore('Abc_def')\n    'abc_def'\n    >>> camel_case_to_underscore('Abc_def__ghi')\n    'abc_def_ghi'\n    >>> camel_case_to_underscore('Abc_def__ghi__jkl')\n    'abc_def_ghi_jkl'\n    \"\"\"\n    return ''.join(string[0].lower() + string[1:] for string in string.split('_'))\n\n\ndef camel_case_to_underscore_no_spaces(string: str) -> str:\n    \"\"\" Convert a camel case string to underscore\n    >>> camel_case_to_underscore_no_spaces('Abc')\n    'abc'\n    >>> camel_case_to_underscore_no_spaces('Abc_def')\n    'abc_def'\n    >>> camel_case_to_underscore_no_spaces('Abc_def__ghi')\n    'abc_def_ghi'\n    >>> camel_case_to_underscore_no_spaces('Abc_def__ghi__jkl')\n    'abc_def_ghi_jkl'\n    \"\"\"\n    return ''.join",
    "return len(string)\n\ndef strstrip(string: str) -> str:\n    \"\"\" Remove leading and trailing whitespace from given string\n    >>> strstrip(' abc ')\n    'abc'\n    >>> strstrip(' abc  ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\ndef strlower(string: str) -> str:\n    \"\"\" Return given string with all characters lower-cased\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return given string with all characters upper-cased\n    >>> strupper('abc')\n    'ABC'\n    >>> strupper('ABC')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Return list of string split by given separator\n    >>> strsplit('abc','')\n    ['', '', 'abc']\n    >>> strsplit('abc','')\n    ['', 'abc']\n    \"\"\"\n    return string.split(sep)\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return given string with all occurrences of given substring replaced\n    >>> strreplace('abcabc', 'abc', 'xyz')\n    'xyzxyz'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strindex(string: str, sub: str) -> int:\n    \"\"\" Return index of given substring in given string\n    >>> strindex('abcabc', 'abc')\n    0\n    >>> strindex('abcabc', 'c')\n    3\n    \"\"\"\n    return string.find(sub)\n\ndef strcount(string: str, sub: str) -> int:\n    \"\"\" Return number of occurrences of given substring in given string\n    >>> strcount('abcabc', 'abc')\n    2\n    >>> strcount('abcabc', 'c')\n    1\n    \"\"\"\n    return string.count(sub)\n\ndef strjoin(string: str, sep: str) -> str:",
    "return len(string)\n\n\ndef strchr(string: str, character: str) -> str:\n    \"\"\" Return position of given character in string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    \"\"\"\n    return string.find(character)\n\n\ndef strrchr(string: str, character: str) -> str:\n    \"\"\" Return position of given character in string\n    >>> strrchr('abc', 'a')\n    'a'\n    >>> strrchr('abc', 'b')\n    'b'\n    \"\"\"\n    return string.rfind(character)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return upper case string\n    >>> strupper('abc')\n    'ABC'\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all instances of old replaced with new\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strsplit(string: str, delimiter: str) -> List[str]:\n    \"\"\" Split string by delimiter\n    >>> strsplit('a b c','')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split(delimiter)\n\n\ndef strjoin(strings: List[str]) -> str:\n    \"\"\" Join strings with delimiter\n    >>> strjoin(['a', 'b', 'c'])\n    'a b c'\n    \"\"\"\n    return''.join(strings)\n\n\ndef strjoin(strings: List[str], delimiter: str) -> str:\n    \"\"\" Join strings with delimiter",
    "return len(string)\n\n\ndef split(string: str, sep: str) -> List[str]:\n    \"\"\" Split string on sep and return list of split parts\n    >>> split('', sep=' ')\n    []\n    >>> split('abc', sep=' ')\n    ['abc']\n    >>> split(' abc  def ', sep=' ')\n    ['abc', 'def']\n    \"\"\"\n    return string.split(sep)\n\n\ndef join(list_of_strings: List[str], sep: str) -> str:\n    \"\"\" Join strings on sep and return string\n    >>> join(['a', 'b', 'c'], sep=' ')\n    'a b c'\n    >>> join(['a', 'b', 'c'], sep='   ')\n    'a b c'\n    >>> join(['a', 'b', 'c'], sep='   ')\n    'a   b   c'\n    >>> join(['a', 'b', 'c'], sep='   ')\n    'a   b   c'\n    \"\"\"\n    return sep.join(list_of_strings)\n\n\ndef sub_str(string: str, sub: str, start: int, end: int = -1) -> str:\n    \"\"\" Replace first occurence of sub in string\n    >>> sub_str('abcdef', 'f', 0)\n    'abcdef'\n    >>> sub_str('abcdef', 'f', 2)\n    'abcde'\n    >>> sub_str('abcdef', 'f', 2, 3)\n    'abcde'\n    >>> sub_str('abcdef', 'f', -1, 3)\n    'abcde'\n    >>> sub_str('abcdef', 'f', -1, -1)\n    'abcdef'\n    >>> sub_str('abcdef', 'f', 0, -1)\n    'abcdef'\n    >>> sub_str('abcdef', 'f', 0, 2)\n    'abcde'\n    >>> sub_str('abcdef', 'f', 0, 3)\n    'abcde'\n    \"\"\"\n    return string[:start] + string[end:]\n\n\ndef str_replace(string: str, sub: str",
    "return len(string)\n\n\ndef replace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace first occurence of old string with new string\n    >>> replace('abc', 'a', 'b')\n    'bbc'\n    >>> replace('abc', 'a', 'b', 0)\n    'b'\n    >>> replace('abc', 'a', 'b', 1)\n    'bc'\n    >>> replace('abc', 'a', 'b', -1)\n    'bc'\n    >>> replace('abc', 'a', 'b', -2)\n    'bc'\n    >>> replace('abc', 'a', 'b', 3)\n    'cbc'\n    >>> replace('abc', 'a', 'b', -3)\n    'cbc'\n    >>> replace('abc', 'a', 'b', -4)\n    'cbc'\n    \"\"\"\n    if not string:\n        return ''\n    if string.startswith(old):\n        return new + string[len(old):]\n    if string.endswith(old):\n        return string[:-len(old)] + new\n    return string\n\n\ndef replace_all(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of old string with new string\n    >>> replace_all('abc', 'a', 'b')\n    'bbc'\n    >>> replace_all('abc', 'a', 'b', 0)\n    'b'\n    >>> replace_all('abc', 'a', 'b', 1)\n    'bc'\n    >>> replace_all('abc', 'a', 'b', -1)\n    'bc'\n    >>> replace_all('abc', 'a', 'b', -2)\n    'bc'\n    >>> replace_all('abc', 'a', 'b', 3)\n    'cbc'\n    >>> replace_all('abc', 'a', 'b', -3)\n    'cbc'\n    >>> replace_all('abc', 'a', 'b', -4)\n    'cbc'\n    \"\"\"\n    if not string:\n        return ''\n    return replace(string, old, new, 0, -",
    "return len(string)\n\ndef get_file_size(filename: str) -> int:\n    \"\"\" Return file size\n    >>> get_file_size('/tmp/hello.txt')\n    3\n    \"\"\"\n    return os.path.getsize(filename)\n\ndef get_file_md5(filename: str) -> str:\n    \"\"\" Return file md5\n    >>> get_file_md5('/tmp/hello.txt')\n    '9a3a5dbb7b4b8a9b5e1a5f75da2e633'\n    \"\"\"\n    md5 = hashlib.md5()\n    with open(filename, 'rb') as f:\n        for chunk in iter(lambda: f.read(4096), b''):\n            md5.update(chunk)\n    return md5.hexdigest()\n\ndef get_file_sha1(filename: str) -> str:\n    \"\"\" Return file sha1\n    >>> get_file_sha1('/tmp/hello.txt')\n    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    \"\"\"\n    sha1 = hashlib.sha1()\n    with open(filename, 'rb') as f:\n        for chunk in iter(lambda: f.read(4096), b''):\n            sha1.update(chunk)\n    return sha1.hexdigest()\n\ndef get_file_sha256(filename: str) -> str:\n    \"\"\" Return file sha256\n    >>> get_file_sha256('/tmp/hello.txt')\n    '9e8e0a6f4b6b1c5c3bae5f2c9b6b4a8e5f3d4d2c3a7b0f9b2d8b5b2d9f0f6b3d4c3a5b7b4b8a9b5e1a5f75da2e633'\n    \"\"\"\n    sha256 = hashlib.sha256()\n    with open(filename, 'rb') as f",
    "return len(string)\n\n\ndef add(a: int, b: int) -> int:\n    \"\"\" Add two numbers\n    >>> add(3, 4)\n    7\n    >>> add(5, -6)\n    1\n    \"\"\"\n    return a + b\n\n\ndef sub(a: int, b: int) -> int:\n    \"\"\" Subtract two numbers\n    >>> sub(3, 4)\n    -1\n    >>> sub(5, -6)\n    -7\n    \"\"\"\n    return a - b\n\n\ndef mul(a: int, b: int) -> int:\n    \"\"\" Multiply two numbers\n    >>> mul(3, 4)\n    12\n    >>> mul(5, -6)\n    -30\n    \"\"\"\n    return a * b\n\n\ndef div(a: int, b: int) -> int:\n    \"\"\" Divide two numbers\n    >>> div(3, 4)\n    0.75\n    >>> div(5, -6)\n    -0.5\n    \"\"\"\n    return a / b\n\n\ndef mod(a: int, b: int) -> int:\n    \"\"\" Modulo two numbers\n    >>> mod(3, 4)\n    1\n    >>> mod(5, -6)\n    1\n    \"\"\"\n    return a % b\n\n\ndef pow(a: int, b: int) -> int:\n    \"\"\" Raise to power\n    >>> pow(3, 3)\n    27\n    >>> pow(5, -6)\n    -9\n    \"\"\"\n    return a ** b\n\n\ndef sqrt(a: int) -> int:\n    \"\"\" Return square root\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(0)\n    Traceback (most recent call last):\n   ...\n    ValueError: Negative numbers cannot be square roots\n    >>> sqrt(-5)\n    Traceback (most recent call last):\n   ...\n    ValueError: Negative numbers cannot be square roots\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Negative numbers cannot be square roots\")\n    return a ** 0.5\n\n\ndef fact(n: int) -> int:\n    \"\"\" Factorial\n    >>> fact(5)",
    "return len(string)\n\ndef strjoin(string: str, separator: str) -> str:\n    \"\"\" Join string elements by separator\n    >>> strjoin('a', 'b')\n    'ab'\n    >>> strjoin('a', 'b', 'c')\n    'abc'\n    \"\"\"\n    return separator.join(string)\n\ndef strsplit(string: str, separator: str) -> List[str]:\n    \"\"\" Split string by separator\n    >>> strsplit('a b c','')\n    ['a', 'b', 'c']\n    >>> strsplit('a b c','')\n    ['a', 'b c']\n    >>> strsplit('a b c','')\n    ['a', 'b c']\n    \"\"\"\n    return string.split(separator)\n\ndef strlower(string: str) -> str:\n    \"\"\" Convert string to lower case\n    >>> strlower('A')\n    'a'\n    >>> strlower('Abc')\n    'abc'\n    >>> strlower('Abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Convert string to upper case\n    >>> strupper('a')\n    'A'\n    >>> strupper('Abc')\n    'ABC'\n    >>> strupper('Abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace string by new string\n    >>> strreplace('abcd', 'a', 'b')\n    'bcbd'\n    >>> strreplace('abcd', 'a', 'b')\n    'bcbd'\n    >>> strreplace('abcd', 'a', 'b')\n    'bcbd'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strreplaceall(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of old string by new string\n    >>> strreplaceall('abcd', 'a', 'b')\n    'bcbd'\n    >>> strreplaceall('abcd', 'a', 'b')",
    "return len(string)\n\n\ndef join(strings: List[str], delimiter: str = '') -> str:\n    \"\"\" Join list of strings with given delimiter\n    >>> join(['a', 'b', 'c'], '-')\n    'a-b-c'\n    \"\"\"\n    return delimiter.join(strings)\n\n\ndef split(string: str, delimiter: str ='') -> List[str]:\n    \"\"\" Split given string using given delimiter\n    >>> split('abc')\n    ['a', 'b', 'c']\n    >>> split('a-b-c')\n    ['a-b-c']\n    \"\"\"\n    return [s for s in string.split(delimiter)]\n\n\ndef split_on_delimiters(string: str, delimiters: List[str]) -> List[str]:\n    \"\"\" Split given string using given delimiters\n    >>> split_on_delimiters('abc', [' '])\n    ['a', 'b', 'c']\n    >>> split_on_delimiters('a-b-c', [' '])\n    ['a-b-c']\n    >>> split_on_delimiters('a-b-c', ['d'])\n    ['a-b-c']\n    >>> split_on_delimiters('a-b-c', ['a', 'b', 'c'])\n    ['a-b-c']\n    \"\"\"\n    return [s for s in string.split(delimiters[0]) if delimiters[1:]]\n\n\ndef split_at_delimiters(string: str, delimiters: List[str]) -> Tuple[str, str]:\n    \"\"\" Split given string using given delimiters and return tuple with first and second parts\n    >>> split_at_delimiters('abc', [' '])\n    ('a', 'b')\n    >>> split_at_delimiters('a-b-c', [' '])\n    ('a-b-c', None)\n    >>> split_at_delimiters('a-b-c', ['d'])\n    ('a-b-c', None)\n    >>> split_at_del",
    "return len(string)\n\n\ndef count(string: str, sub: str) -> int:\n    \"\"\" Count number of occurences of substring\n    >>> count('abcabcabc', 'abc')\n    3\n    >>> count('abcabcabc', 'd')\n    0\n    \"\"\"\n    return string.count(sub)\n\n\ndef count_with_in(string: str, sub: str, in_string: str) -> int:\n    \"\"\" Count number of occurences of substring in given string\n    >>> count_with_in('abcabcabc', 'abc', '')\n    3\n    >>> count_with_in('abcabcabc', 'abc', 'xyz')\n    0\n    \"\"\"\n    return string.count(sub, in_string)\n\n\ndef contains(string: str, sub: str) -> bool:\n    \"\"\" Return True if given string contains substring\n    >>> contains('abcabcabc', 'abc')\n    True\n    >>> contains('abcabcabc', 'd')\n    False\n    \"\"\"\n    return string.find(sub) >= 0\n\n\ndef contains_with_in(string: str, sub: str, in_string: str) -> bool:\n    \"\"\" Return True if given string contains substring in given string\n    >>> contains_with_in('abcabcabc', 'abc', '')\n    True\n    >>> contains_with_in('abcabcabc', 'abc', 'xyz')\n    False\n    \"\"\"\n    return string.find(sub, in_string) >= 0\n\n\ndef starts_with(string: str, prefix: str) -> bool:\n    \"\"\" Return True if given string starts with prefix\n    >>> starts_with('abcabcabc', 'abc')\n    True\n    >>> starts_with('abcabcabc', 'abcd')\n    False\n    \"\"\"\n    return string.startswith(prefix)\n\n\ndef ends_with(string: str, suffix: str) -> bool:\n    \"\"\" Return True if given string ends with suffix\n    >>> ends_with('abcabcabc', 'abc')\n    True\n    >>> ends_with('abcabcabc', 'abd')\n    False\n    \"\"\"\n    return string.endswith(suffix)\n\n\ndef sub_",
    "return len(string)\n\n\ndef is_string(string: str) -> bool:\n    \"\"\" Return True if string is a string\n    >>> is_string('abc')\n    True\n    >>> is_string(123)\n    False\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_string_or_empty(string: str) -> bool:\n    \"\"\" Return True if string is a string or empty string\n    >>> is_string_or_empty('')\n    True\n    >>> is_string_or_empty('abc')\n    True\n    >>> is_string_or_empty(123)\n    False\n    \"\"\"\n    return is_string(string) or string == ''\n\n\ndef is_string_or_none(string: str) -> bool:\n    \"\"\" Return True if string is a string or None\n    >>> is_string_or_none('')\n    True\n    >>> is_string_or_none('abc')\n    True\n    >>> is_string_or_none(None)\n    True\n    >>> is_string_or_none(123)\n    False\n    \"\"\"\n    return is_string(string) or string is None\n\n\ndef is_integer(string: str) -> bool:\n    \"\"\" Return True if string is an integer\n    >>> is_integer('')\n    False\n    >>> is_integer('abc')\n    False\n    >>> is_integer(123)\n    True\n    >>> is_integer(-123)\n    True\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_integer_or_none(string: str) -> bool:\n    \"\"\" Return True if string is an integer or None\n    >>> is_integer_or_none('')\n    False\n    >>> is_integer_or_none('abc')\n    False\n    >>> is_integer_or_none(123)\n    True\n    >>> is_integer_or_none(-123)\n    True\n    \"\"\"\n    return is_integer(string) or string is None\n\n\ndef is_float(string: str) -> bool:\n    \"\"\" Return True if string is a float\n    >>> is_float(",
    "return len(string)\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of old with new in string\n    >>> strreplace('abcdefghijkl', 'bc', 'cd')\n    'abcdefghijkl'\n    >>> strreplace('abcdefghijkl', 'bc', 'cd')\n    'abcdefghijkl'\n    >>> strreplace('abcdefghijkl', 'bc', 'cd')\n    'abcdefghijkl'\n    >>> strreplace('abcdefghijkl', 'bc', 'cd')\n    'abcdefghijkl'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strrfind(string: str, substr: str) -> int:\n    \"\"\" Return position of last occurrence of substr in string\n    >>> strrfind('abcdefghijkl', 'h')\n    7\n    >>> strrfind('abcdefghijkl', 'j')\n    -1\n    \"\"\"\n    return string.rfind(substr)\n\ndef strrfindall(string: str, substr: str) -> list:\n    \"\"\" Return all positions of last occurrence of substr in string\n    >>> strrfindall('abcdefghijkl', 'h')\n    [0, 7]\n    >>> strrfindall('abcdefghijkl', 'j')\n    []\n    \"\"\"\n    return [string.rfind(substr) for substr in string if substr in string]\n\ndef strsplit(string: str, delimiter: str) -> list:\n    \"\"\" Split string using delimiter\n    >>> strsplit('abc','')\n    ['', '', 'abc']\n    >>> strsplit('abc','')\n    ['', '', 'abc']\n    >>> strsplit('abc','')\n    ['', '', 'abc']\n    >>> strsplit('abc','')\n    ['', '', 'abc']\n    \"\"\"\n    return [string[i:i+len(delimiter)] for i in range(0, len(string) - 1, len(delimiter))]\n\ndef strtitle(string: str) -> str:\n    \"\"\" Return string with first letter capital",
    "return len(string)\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return string without leading and trailing whitespace\n    >>> strstrip('  abc   ')\n    'abc'\n    >>> strstrip('  abc  ')\n    ''\n    \"\"\"\n    return string.strip()\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercased string\n    >>> strlower('Abc')\n    'abc'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercased string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str, count: int = -1) -> str:\n    \"\"\" Return string with all occurrences of old string replaced by new string\n    >>> strreplace('abcde', 'ab', 'X')\n    'Xcde'\n    \"\"\"\n    return string.replace(old, new, count)\n\ndef strsplit(string: str, sep: str) -> List[str]:\n    \"\"\" Return string split by sep\n    >>> strsplit('abc','')\n    ['abc']\n    >>> strsplit('abc def','')\n    ['abc', 'def']\n    >>> strsplit('abc  def','')\n    ['abc', 'def']\n    >>> strsplit('abc def','')\n    ['abc', 'def']\n    \"\"\"\n    return string.split(sep)\n\ndef strjoin(parts: List[str], sep: str ='') -> str:\n    \"\"\" Return concatenated string\n    >>> strjoin(['abc', 'def'])\n    'abcdef'\n    >>> strjoin(['abc', 'def'], sep='--')\n    'abc--def'\n    \"\"\"\n    return sep.join(parts)\n\ndef strjoin2(parts: List[str], sep: str ='') -> str:\n    \"\"\" Return concatenated string\n    >>> strjoin2(['abc', 'def'])\n    'abcdef'\n    >>> strjoin2(['abc', 'def'], sep='--')\n    '",
    "return len(string)\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return character at given position\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'x')\n    ''\n    \"\"\"\n    pos = string.find(char)\n    if pos == -1:\n        return ''\n    else:\n        return char\n\ndef strrchr(string: str, char: str) -> str:\n    \"\"\" Return last character in given string\n    >>> strrchr('abc', 'a')\n    'a'\n    >>> strrchr('abc', 'b')\n    'b'\n    >>> strrchr('abc', 'c')\n    'c'\n    >>> strrchr('abc', 'x')\n    ''\n    \"\"\"\n    pos = string.rfind(char)\n    if pos == -1:\n        return ''\n    else:\n        return char\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if strings are equal, -1 if string1 is smaller and +1 if string2 is smaller\n    >>> strcmp('abc', 'def')\n    0\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'bcd')\n    -1\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abcd', 'abc')\n    1\n    >>> strcmp('abcd', 'abc')\n    0\n    >>> strcmp('abcd', 'abcdef')\n    -1\n    >>> strcmp('abcd', 'abcdef')\n    0\n    \"\"\"\n    return (string1 > string2) - (string1 < string2)\n\ndef strcmp_case(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if strings are equal, -1 if string1 is smaller and +1 if string2 is smaller\n    >>> strcmp_case('abc', 'def')\n    0",
    "return len(string)\n\n\ndef is_int(string: str) -> bool:\n    \"\"\" Return true if given string is integer\n    >>> is_int('1')\n    True\n    >>> is_int('abc')\n    False\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_float(string: str) -> bool:\n    \"\"\" Return true if given string is float\n    >>> is_float('1')\n    False\n    >>> is_float('abc')\n    False\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_number(string: str) -> bool:\n    \"\"\" Return true if given string is number\n    >>> is_number('1')\n    True\n    >>> is_number('abc')\n    False\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_string(string: str) -> bool:\n    \"\"\" Return true if given string is string\n    >>> is_string('1')\n    False\n    >>> is_string('abc')\n    True\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_str(string: str) -> bool:\n    \"\"\" Return true if given string is string\n    >>> is_str('1')\n    False\n    >>> is_str('abc')\n    True\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_list(string: str) -> bool:\n    \"\"\" Return true if given string is list\n    >>> is_list('1')\n    False\n    >>> is_list('abc')\n    False\n    \"\"\"\n    return isinstance(string, list)\n\n\ndef is_tuple(string: str) -> bool:\n    \"\"\" Return true if given string is tuple\n    >>> is_tuple('1')\n    False\n    >>> is_tuple('abc')\n    False\n    \"\"\"\n    return isinstance(string, tuple)\n\n\ndef is_dict(string: str) -> bool:\n    \"\"\" Return true if given string is dictionary\n    >>> is_dict('1')",
    "return len(string)\n\ndef strrep(string: str, rep: str) -> str:\n    \"\"\" Return a string made by repeating the given string\n    >>> strrep('abc', 'x')\n    'xxabcx'\n    >>> strrep('abc', 'x')\n    'abc'\n    \"\"\"\n    return rep * strlen(string)\n\ndef strrev(string: str) -> str:\n    \"\"\" Return a string made by reversing the given string\n    >>> strrev('abc')\n    'cba'\n    >>> strrev('abc')\n    'abc'\n    \"\"\"\n    return string[::-1]\n\ndef strjoin(strings: list[str]) -> str:\n    \"\"\" Return a string made by joining the given strings\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin(['a', 'b', 'c', 'd'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\ndef strsplit(string: str) -> list[str]:\n    \"\"\" Return a list of strings made by splitting the given string\n    >>> strsplit('')\n    []\n    >>> strsplit('abc')\n    ['abc']\n    >>> strsplit('a b c')\n    ['a', 'b', 'c']\n    >>> strsplit('a b c ')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split()\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return a string made by replacing the given string with the given string\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    >>> strreplace('abc', 'a', 'b')\n    'bcb'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strlower(string: str) -> str:\n    \"\"\" Return a string made by lowercasing the given string\n    >>> strlower('ABC')\n    'abc'\n    >>> strlower('A B C')\n    'a b c'\n    \"\"\"\n    return string.",
    "return len(string)\n\n\ndef is_iterable(value: object) -> bool:\n    \"\"\" Return True if value is iterable\n    >>> is_iterable(1)\n    False\n    >>> is_iterable(iter([]))\n    True\n    >>> is_iterable([1, 2, 3])\n    True\n    \"\"\"\n    return hasattr(value, '__iter__')\n\n\ndef is_string(value: object) -> bool:\n    \"\"\" Return True if value is a string\n    >>> is_string('')\n    True\n    >>> is_string(1)\n    False\n    >>> is_string(1.0)\n    False\n    >>> is_string(['a', 'b', 'c'])\n    True\n    \"\"\"\n    return isinstance(value, str)\n\n\ndef is_string_like(value: object) -> bool:\n    \"\"\" Return True if value is a string-like object\n    >>> is_string_like('')\n    False\n    >>> is_string_like(1)\n    False\n    >>> is_string_like(1.0)\n    False\n    >>> is_string_like('abc')\n    True\n    >>> is_string_like(['a', 'b', 'c'])\n    True\n    \"\"\"\n    return hasattr(value, '__iter__') or isinstance(value, str)\n\n\ndef is_iterable_like(value: object) -> bool:\n    \"\"\" Return True if value is iterable-like\n    >>> is_iterable_like('')\n    False\n    >>> is_iterable_like(1)\n    False\n    >>> is_iterable_like(1.0)\n    False\n    >>> is_iterable_like([1, 2, 3])\n    True\n    \"\"\"\n    return hasattr(value, '__iter__')\n\n\ndef is_number(value: object) -> bool:\n    \"\"\" Return True if value is a number\n    >>> is_number(1)\n    True\n    >>> is_number(1.0)\n    True\n    >>> is_number('')\n    False\n    >>> is_number(['a', 'b', 'c'])",
    "return len(string)\n\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lowercase version of given string\n    >>> strlower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n\n\ndef strupper(string: str) -> str:\n    \"\"\" Return uppercase version of given string\n    >>> strupper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n\n\ndef strjoin(strings: list[str]) -> str:\n    \"\"\" Join given strings with space\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with given old and new string replaced\n    >>> strreplace('abc', 'b', 'c')\n    'acc'\n    >>> strreplace('abc', 'c', 'd')\n    'abc'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strsplit(string: str, delimiter: str ='') -> list[str]:\n    \"\"\" Split given string using given delimiter\n    >>> strsplit('abcdefg','')\n    ['abc', 'def', 'g']\n    \"\"\"\n    return string.split(delimiter)\n\n\ndef strfind(string: str, sub: str) -> int:\n    \"\"\" Return index of first occurrence of given substring\n    >>> strfind('abcdefg', 'f')\n    2\n    >>> strfind('abcdefg', 'x')\n    Traceback (most recent call last):\n   ...\n    ValueError: substring not found\n    >>> strfind('abcdefg', 'f')\n    2\n    \"\"\"\n    return string.find(sub)\n\n\ndef strreplacechars(string: str, chars: str) -> str:\n    \"\"\" Replace given characters with spaces\n    >>> strreplacechars('abcdefg', 'bc')\n    'a  b  cdefg'\n    \"\"\"\n    return string.replace(''.join(chars),'')\n\n\ndef strremovechars(string: str, chars: str) -> str:",
    "return len(string)\n\n\ndef substr(string: str, start: int, length: int) -> str:\n    \"\"\" Return substring of given string\n    >>> substr('abcdef', 0, 3)\n    'abc'\n    >>> substr('abcdef', 1, 3)\n    'bc'\n    >>> substr('abcdef', 3, 1)\n    'f'\n    >>> substr('abcdef', 3, 3)\n    ''\n    \"\"\"\n    return string[start:start+length]\n\n\ndef is_number(string: str) -> bool:\n    \"\"\" Return True if given string is a number\n    >>> is_number('123')\n    True\n    >>> is_number('ab')\n    False\n    \"\"\"\n    try:\n        float(string)\n    except ValueError:\n        return False\n    return True\n\n\ndef is_integer(string: str) -> bool:\n    \"\"\" Return True if given string is an integer\n    >>> is_integer('123')\n    True\n    >>> is_integer('ab')\n    False\n    \"\"\"\n    try:\n        int(string)\n    except ValueError:\n        return False\n    return True\n\n\ndef is_true(string: str) -> bool:\n    \"\"\" Return True if given string is a True\n    >>> is_true('true')\n    True\n    >>> is_true('false')\n    False\n    \"\"\"\n    return string.lower() == 'true'\n\n\ndef is_false(string: str) -> bool:\n    \"\"\" Return True if given string is a False\n    >>> is_false('false')\n    True\n    >>> is_false('true')\n    False\n    \"\"\"\n    return string.lower() == 'false'\n\n\ndef is_string(string: str) -> bool:\n    \"\"\" Return True if given string is a string\n    >>> is_string('true')\n    False\n    >>> is_string('123')\n    True\n    \"\"\"\n    return isinstance(string, str)\n\n\ndef is_list(string: str) -> bool:\n    \"\"\" Return True if given string is a list\n    >>> is_list('123')\n    False\n    >>> is_list('[123]')\n    True\n    \"\"\"\n    return",
    "return len(string)\n\n\ndef get_length(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> get_length('')\n    0\n    >>> get_length('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef is_empty(string: str) -> bool:\n    \"\"\" Return True if string is empty\n    >>> is_empty('')\n    True\n    >>> is_empty('abc')\n    False\n    \"\"\"\n    return string == ''\n\n\ndef is_not_empty(string: str) -> bool:\n    \"\"\" Return True if string is not empty\n    >>> is_not_empty('')\n    False\n    >>> is_not_empty('abc')\n    True\n    \"\"\"\n    return string!= ''\n\n\ndef is_substring(string: str, substring: str) -> bool:\n    \"\"\" Return True if substring is substring of string\n    >>> is_substring('abc', 'a')\n    True\n    >>> is_substring('abc', 'b')\n    True\n    >>> is_substring('abc', 'c')\n    True\n    >>> is_substring('abc', 'd')\n    False\n    >>> is_substring('abc', 'abc')\n    True\n    >>> is_substring('abc', 'abd')\n    False\n    \"\"\"\n    return string.find(substring) >= 0\n\n\ndef is_not_substring(string: str, substring: str) -> bool:\n    \"\"\" Return True if substring is not substring of string\n    >>> is_not_substring('abc', 'a')\n    False\n    >>> is_not_substring('abc', 'b')\n    False\n    >>> is_not_substring('abc', 'c')\n    False\n    >>> is_not_substring('abc', 'd')\n    True\n    >>> is_not_substring('abc', 'abc')\n    False\n    >>> is_not_substring('abc', 'abd')\n    True\n    \"\"\"\n    return string.find(substring) < 0\n\n\ndef is_prefix(string: str, prefix: str) -> bool:\n    \"\"\" Return True if string is",
    "return len(string)\n\n\ndef get_random_string(length: int, alphabet: str) -> str:\n    \"\"\" Return random string with given length and given alphabet\n    >>> get_random_string(3, 'abcdefghijklmnopqrstuvwxyz')\n    'cdfghjy'\n    \"\"\"\n    return ''.join(random.choice(alphabet) for _ in range(length))",
    "return len(string)\n\n\ndef replace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all occurences of old replaced by new\n    >>> replace('abcdef', 'c', 'd')\n    'dd'\n    >>> replace('abcdef', 'c', 'd')\n    'ad'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef get_file_content(filename: str) -> str:\n    \"\"\" Return content of file\n    >>> get_file_content('test.txt')\n    'Hello, World!'\n    \"\"\"\n    with open(filename) as f:\n        return f.read()\n\n\ndef get_file_content_as_list(filename: str) -> List[str]:\n    \"\"\" Return content of file as list of strings\n    >>> get_file_content_as_list('test.txt')\n    ['Hello,', 'World!']\n    \"\"\"\n    with open(filename) as f:\n        return f.readlines()\n\n\ndef get_file_name(filename: str) -> str:\n    \"\"\" Return filename without path\n    >>> get_file_name('/home/user/test.txt')\n    'test.txt'\n    >>> get_file_name('/home/user/test.txt/')\n    'test.txt'\n    \"\"\"\n    return os.path.basename(filename)\n\n\ndef get_file_name_without_ext(filename: str) -> str:\n    \"\"\" Return filename without extension\n    >>> get_file_name_without_ext('/home/user/test.txt')\n    'test'\n    >>> get_file_name_without_ext('/home/user/test.txt/')\n    'test'\n    \"\"\"\n    return os.path.splitext(os.path.basename(filename))[0]\n\n\ndef get_file_ext(filename: str) -> str:\n    \"\"\" Return filename extension\n    >>> get_file_ext('/home/user/test.txt')\n    'txt'\n    >>> get_file_ext('/home/user/test.txt/')\n    'txt'\n    \"\"\"\n    return os.path",
    "return len(string)\n\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if two strings are identical, -1 if string1 < string2 and 1 if string1 > string2\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'xyz')\n    -1\n    >>> strcmp('xyz', 'abc')\n    1\n    \"\"\"\n    return cmp(string1, string2)\n\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Return 0 if two strings are identical, -1 if string1 < string2 and 1 if string1 > string2\n    >>> strncmp('abc', 'abc', 3)\n    0\n    >>> strncmp('abc', 'xyz', 3)\n    -1\n    >>> strncmp('xyz', 'abc', 3)\n    1\n    >>> strncmp('xyz', 'abc', 4)\n    -1\n    >>> strncmp('xyz', 'abc', 5)\n    1\n    \"\"\"\n    return cmp(string1[:n], string2[:n])\n\n\ndef strncmp_case(string1: str, string2: str, n: int) -> int:\n    \"\"\" Return 0 if two strings are identical, -1 if string1 < string2 and 1 if string1 > string2\n    >>> strncmp_case('abc', 'abc', 3)\n    0\n    >>> strncmp_case('abc', 'xyz', 3)\n    -1\n    >>> strncmp_case('xyz', 'abc', 3)\n    1\n    >>> strncmp_case('xyz', 'abc', 4)\n    -1\n    >>> strncmp_case('xyz', 'abc', 5)\n    1\n    \"\"\"\n    return cmp(string1[:n].lower(), string2[:n].lower())\n\n\ndef strncmp_case_insensitive(string1: str, string2: str, n: int) -> int:\n    \"\"\" Return 0 if two strings are identical, -1 if string1 < string2 and 1 if string1 > string2",
    "return len(string)\n\ndef is_odd(x: int) -> bool:\n    \"\"\" Return True if x is odd, False otherwise\n    >>> is_odd(1)\n    False\n    >>> is_odd(3)\n    True\n    \"\"\"\n    return x % 2!= 0\n\ndef is_even(x: int) -> bool:\n    \"\"\" Return True if x is even, False otherwise\n    >>> is_even(1)\n    True\n    >>> is_even(3)\n    False\n    \"\"\"\n    return x % 2 == 0\n\ndef is_prime(x: int) -> bool:\n    \"\"\" Return True if x is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    if x % 3 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    i = 5\n    while True:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_prime_list(list: List[int]) -> bool:\n    \"\"\" Return True if all elements of list are prime, False otherwise\n    >>> is_prime_list([2, 3, 5, 7])\n    True\n    >>> is_prime_list([2, 3, 5, 7, 11])\n    False\n    >>> is_prime_list([1, 2, 3, 4, 5, 6, 7, 8])\n    False\n    \"\"\"\n    for x in list:\n        if not is_prime(x):\n            return False\n    return True\n\ndef is_prime_set(set: Set[int]) -> bool:\n    \"\"\" Return True if all elements of set are prime, False otherwise\n    >>> is_prime_set(set([]))\n    True\n    >>> is_prime_set(set([2, 3, 5, 7]))",
    "return len(string)\n\ndef split(string: str, sep: str) -> List[str]:\n    \"\"\" Split string using sep\n    >>> split('abcd', 'c')\n    ['abcd']\n    >>> split('abcd', 'c', 2)\n    ['ab', 'cd']\n    \"\"\"\n    return string.split(sep)\n\ndef splitlines(string: str) -> List[str]:\n    \"\"\" Split string using newline as separator\n    >>> splitlines('a\\nb\\nc')\n    ['a', 'b', 'c']\n    >>> splitlines('a\\r\\nb\\r\\nc')\n    ['a', 'b', 'c']\n    >>> splitlines('a\\nb\\r\\nc')\n    ['a', 'b', 'c']\n    >>> splitlines('a\\r\\nb\\r\\nc')\n    ['a', 'b', 'c']\n    >>> splitlines('a\\rb\\nc')\n    ['a\\r', 'b', 'c']\n    >>> splitlines('a\\r\\nb\\r\\nc')\n    ['a\\r\\n', 'b', 'c']\n    \"\"\"\n    return string.splitlines()\n\ndef strip(string: str) -> str:\n    \"\"\" Strip leading/trailing whitespace\n    >>> strip(' abc ')\n    'abc'\n    >>> strip(' abc ')\n    'abc'\n    >>> strip(' abc ')\n    'abc'\n    >>> strip(' abc ')\n    'abc'\n    >>> strip('abc')\n    ''\n    >>> strip('abc')\n    ''\n    >>> strip('abc ')\n    'abc'\n    >>> strip('abc ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\ndef title(string: str) -> str:\n    \"\"\" Return title case string\n    >>> title('abc')\n    'Abc'\n    >>> title('Abc')\n    'Abc'\n    >>> title('Abc')\n    'Abc'\n    >>> title('Abc')\n    'Abc'\n    \"\"\"\n    return string.title()\n\ndef unquote(string: str) -> str:\n    \"\"\" Return",
    "return len(string)\n\n\ndef is_number(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_number('')\n    False\n    >>> is_number('123')\n    True\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_digit(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_digit('')\n    False\n    >>> is_digit('123')\n    True\n    \"\"\"\n    return string.isdigit()\n\n\ndef is_alpha(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_alpha('')\n    False\n    >>> is_alpha('123')\n    True\n    \"\"\"\n    return string.isalpha()\n\n\ndef is_lower(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_lower('')\n    False\n    >>> is_lower('123')\n    True\n    \"\"\"\n    return string.islower()\n\n\ndef is_upper(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_upper('')\n    False\n    >>> is_upper('123')\n    True\n    \"\"\"\n    return string.isupper()\n\n\ndef is_hex(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_hex('')\n    False\n    >>> is_hex('123')\n    True\n    \"\"\"\n    return string.startswith('0x')\n\n\ndef is_bin(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_bin('')\n    False\n    >>> is_bin('123')\n    True\n    \"\"\"\n    return string.startswith('0b')\n\n\ndef is_bin_lower(string: str) -> bool:\n    \"\"\" Return true if given string is a number\n    >>> is_bin_lower('')\n    False\n    >>> is_bin_lower('123')\n    True\n    \"\"\"\n    return",
    "return len(string)\n\ndef string_replace(string: str, from_string: str, to_string: str) -> str:\n    \"\"\" Replace all occurrences of a string in a string\n    >>> string_replace('aabbcc', 'a', 'b')\n    'bbcc'\n    >>> string_replace('aabbcc', 'a', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    'babbcc'\n    >>> string_replace('aabbcc', 'aabb', 'b')\n    '",
    "return len(string)\n\n\ndef char_len(string: str) -> int:\n    \"\"\" Return length of given string, including trailing whitespace\n    >>> char_len('')\n    0\n    >>> char_len('abc')\n    3\n    \"\"\"\n    return len(string) - strlen(string) - 1\n\n\ndef str_len(string: str) -> int:\n    \"\"\" Return length of given string, excluding trailing whitespace\n    >>> str_len('')\n    0\n    >>> str_len('abc')\n    3\n    \"\"\"\n    return len(string) - strlen(string)\n\n\ndef to_str(string: str) -> str:\n    \"\"\" Convert given string to a string,\n    including trailing whitespace\n    >>> to_str('abc')\n    'abc'\n    \"\"\"\n    return string\n\n\ndef to_str_len(string: str) -> int:\n    \"\"\" Convert given string to a string,\n    excluding trailing whitespace\n    >>> to_str_len('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef to_char_len(string: str) -> int:\n    \"\"\" Convert given string to a string,\n    excluding trailing whitespace\n    >>> to_char_len('abc')\n    3\n    \"\"\"\n    return len(string) - strlen(string) - 1\n\n\ndef to_char_str(string: str) -> str:\n    \"\"\" Convert given string to a string,\n    including trailing whitespace\n    >>> to_char_str('abc')\n    'abc'\n    \"\"\"\n    return string\n\n\ndef to_char_str_len(string: str) -> int:\n    \"\"\" Convert given string to a string,\n    excluding trailing whitespace\n    >>> to_char_str_len('abc')\n    3\n    \"\"\"\n    return len(string) - strlen(string)\n\n\ndef to_str_len_plus_one(string: str) -> int:\n    \"\"\" Convert given string to a string,\n    including trailing whitespace\n    >>> to_str_len_plus_one('abc')\n    3\n    \"\"\"\n    return len(string) + 1\n\n\ndef to_char_str_plus_one",
    "return len(string)\n\ndef char_to_int(char: str) -> int:\n    \"\"\" Return integer value of given character\n    >>> char_to_int('a')\n    97\n    >>> char_to_int('b')\n    98\n    \"\"\"\n    if char.isalpha():\n        return ord(char) - ord('a') + 1\n    else:\n        return ord(char) - ord('A') + 1\n\ndef int_to_char(number: int) -> str:\n    \"\"\" Return character value of given integer\n    >>> int_to_char(97)\n    'a'\n    >>> int_to_char(98)\n    'b'\n    \"\"\"\n    if number >= ord('a') and number <= ord('z'):\n        return chr(number + ord('a') - 1)\n    elif number >= ord('A') and number <= ord('Z'):\n        return chr(number + ord('A') - 1)\n    else:\n        return chr(number + ord('0') - 1)\n\ndef string_to_int(string: str) -> int:\n    \"\"\" Return integer value of given string\n    >>> string_to_int('abc')\n    97\n    >>> string_to_int('abcdef')\n    98\n    \"\"\"\n    return sum(char_to_int(char) for char in string)\n\ndef int_to_string(number: int) -> str:\n    \"\"\" Return string value of given integer\n    >>> int_to_string(97)\n    'a'\n    >>> int_to_string(98)\n    'b'\n    \"\"\"\n    return int_to_char(number) * len(str(number))\n\ndef int_to_lower_case(number: int) -> int:\n    \"\"\" Return lower case integer value of given integer\n    >>> int_to_lower_case(97)\n    97\n    >>> int_to_lower_case(98)\n    98\n    \"\"\"\n    return number % 26 + ord('a')\n\ndef int_to_upper_case(number: int) -> int:\n    \"\"\" Return upper case integer value of given integer\n    >>> int_to_upper_",
    "return len(string)\n\ndef strrchr(string: str, char: int) -> str:\n    \"\"\" Return last occurence of given character in given string\n    >>> strrchr('abc', 'a')\n    'a'\n    >>> strrchr('abc', 'b')\n    'b'\n    >>> strrchr('abc', 'c')\n    'c'\n    \"\"\"\n    try:\n        return string.rindex(char)\n    except ValueError:\n        return None\n\ndef strcmp(a: str, b: str) -> int:\n    \"\"\" Compare two strings and return 0 if they are equal, -1 if a < b, 1 if a > b\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'xyz')\n    -1\n    >>> strcmp('abc', 'xyzabc')\n    1\n    >>> strcmp('', '')\n    0\n    \"\"\"\n    return a.lower() == b.lower()\n\ndef strncmp(a: str, b: str, n: int) -> int:\n    \"\"\" Compare n characters of two strings and return 0 if they are equal, -1 if a < b, 1 if a > b\n    >>> strncmp('abc', 'abc', 3)\n    0\n    >>> strncmp('abc', 'xyz', 3)\n    -1\n    >>> strncmp('abc', 'xyzabc', 3)\n    1\n    >>> strncmp('', '', 3)\n    0\n    \"\"\"\n    return a[:n].lower() == b[:n].lower()\n\ndef strncmp_ignore_case(a: str, b: str, n: int) -> int:\n    \"\"\" Compare n characters of two strings ignoring case, return 0 if they are equal, -1 if a < b, 1 if a > b\n    >>> strncmp_ignore_case('abc', 'abc', 3)\n    0\n    >>> strncmp_ignore_case('abc', 'xyz', 3)\n    -1\n    >>> strncmp_ignore_case('abc', 'xyzabc', 3)\n    1\n    >>> strncmp_ignore_case",
    "return len(string)\n\ndef strrchr(string: str, c: int) -> str:\n    \"\"\" Return last occurence of character c in string\n    >>> strrchr('abc', 'b')\n    'b'\n    >>> strrchr('abc', 'a')\n    ''\n    \"\"\"\n    if string[-1] == c:\n        return string[-1]\n    return ''\n\ndef strchr(string: str, c: int) -> str:\n    \"\"\" Return first occurence of character c in string\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'a')\n    'a'\n    \"\"\"\n    if c == string[0]:\n        return string[0]\n    return ''\n\ndef strrchr2(string: str, c: int) -> str:\n    \"\"\" Return last occurence of character c in string, but only 2\n    >>> strrchr2('abc', 'b')\n    'b'\n    >>> strrchr2('abc', 'a')\n    'a'\n    >>> strrchr2('abc', 'b')\n    'b'\n    >>> strrchr2('abc', 'a')\n    'a'\n    >>> strrchr2('abc', 'c')\n    ''\n    \"\"\"\n    if c == string[-1]:\n        return string[-1]\n    return ''\n\ndef strchr2(string: str, c: int) -> str:\n    \"\"\" Return first occurence of character c in string, but only 2\n    >>> strchr2('abc', 'b')\n    'b'\n    >>> strchr2('abc', 'a')\n    'a'\n    >>> strchr2('abc', 'b')\n    'b'\n    >>> strchr2('abc', 'a')\n    'a'\n    >>> strchr2('abc', 'c')\n    ''\n    \"\"\"\n    if c == string[0]:\n        return string[0]\n    return ''\n\ndef strlower(string: str) -> str:\n    \"\"\" Return lower case of given string",
    "return len(string)\n\ndef strjoin(string_list: list[str]) -> str:\n    \"\"\" Join given list of strings\n    >>> strjoin(['a', 'b', 'c'])\n    'abc'\n    >>> strjoin([])\n    ''\n    \"\"\"\n    return ''.join(string_list)\n\ndef strsplit(string: str, maxsplit: int = -1) -> list[str]:\n    \"\"\" Split string into list of strings using given maxsplit value\n    >>> strsplit('a b c', maxsplit=1)\n    ['a', 'b', 'c']\n    >>> strsplit('a b c', maxsplit=0)\n    ['a', 'b c']\n    >>> strsplit('a b c', maxsplit=3)\n    ['a', 'b', 'c']\n    >>> strsplit('a b c', maxsplit=-1)\n    ['a', 'b', 'c']\n    >>> strsplit('a b c', maxsplit=-1)\n    ['a', 'b', 'c']\n    >>> strsplit('a b c', maxsplit=10)\n    ['a', 'b', 'c']\n    \"\"\"\n    return [s for s in string.split(maxsplit) if s]\n\ndef strlower(string: str) -> str:\n    \"\"\" Convert string to lower case\n    >>> strlower('A')\n    'a'\n    >>> strlower('Abc')\n    'abc'\n    >>> strlower('Abc')\n    'abc'\n    >>> strlower('A B C')\n    'a b c'\n    \"\"\"\n    return string.lower()\n\ndef strupper(string: str) -> str:\n    \"\"\" Convert string to upper case\n    >>> strupper('a')\n    'A'\n    >>> strupper('Abc')\n    'ABC'\n    >>> strupper('Abc')\n    'ABC'\n    >>> strupper('A B C')\n    'A B C'\n    \"\"\"\n    return string.upper()\n\ndef strreplace(string: str, old: str, new: str, maxsplit: int = -1) -> str:\n    \"\"\" Replace occurences of old string with new string using given maxsplit",
    "return len(string)\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if strings are equal\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'def')\n    -1\n    >>> strcmp('def', 'abc')\n    1\n    \"\"\"\n    return string1 == string2\n\ndef strncmp(string1: str, string2: str, maxlen: int) -> int:\n    \"\"\" Return 0 if strings are equal, otherwise return -1 or 1\n    >>> strncmp('abc', 'abc', 3)\n    0\n    >>> strncmp('abc', 'def', 3)\n    -1\n    >>> strncmp('def', 'abc', 3)\n    1\n    >>> strncmp('def', 'abc', 4)\n    -1\n    >>> strncmp('def', 'abc', 5)\n    -1\n    >>> strncmp('def', 'abc', 6)\n    -1\n    >>> strncmp('def', 'abc', 7)\n    -1\n    >>> strncmp('def', 'abc', 8)\n    -1\n    >>> strncmp('def', 'abc', 9)\n    -1\n    >>> strncmp('def', 'abc', 10)\n    -1\n    >>> strncmp('def', 'abc', 11)\n    -1\n    >>> strncmp('def', 'abc', 12)\n    -1\n    >>> strncmp('def', 'abc', 13)\n    -1\n    >>> strncmp('def', 'abc', 14)\n    -1\n    >>> strncmp('def', 'abc', 15)\n    -1\n    \"\"\"\n    if maxlen < 0:\n        return string1.startswith(string2)\n    elif maxlen == 0:\n        return 0\n    else:\n        return string1.startswith(string2) and len(string1) >= maxlen\n\ndef strrchr(string: str, c: str) -> str:\n    \"\"\" Return the first character of given string that is not c\n    >>> strrchr('abc', 'a')\n    'b'",
    "return len(string)\n\n\ndef str_to_int(string: str) -> int:\n    \"\"\" Return integer representation of given string\n    >>> str_to_int('123')\n    123\n    >>> str_to_int('abc')\n    Traceback (most recent call last):\n       ...\n    ValueError: 'abc' is not a valid integer\n    \"\"\"\n    try:\n        return int(string)\n    except ValueError:\n        raise ValueError('{} is not a valid integer'.format(string))\n\n\ndef str_to_bool(string: str) -> bool:\n    \"\"\" Return boolean representation of given string\n    >>> str_to_bool('true')\n    True\n    >>> str_to_bool('false')\n    False\n    >>> str_to_bool('0')\n    False\n    >>> str_to_bool('1')\n    True\n    \"\"\"\n    if string.lower() == 'true':\n        return True\n    elif string.lower() == 'false':\n        return False\n    elif string.lower() == '0':\n        return False\n    elif string.lower() == '1':\n        return True\n    else:\n        raise ValueError('{} is not a valid boolean'.format(string))\n\n\ndef str_to_float(string: str) -> float:\n    \"\"\" Return float representation of given string\n    >>> str_to_float('123')\n    123.0\n    >>> str_to_float('abc')\n    Traceback (most recent call last):\n       ...\n    ValueError: 'abc' is not a valid float\n    \"\"\"\n    try:\n        return float(string)\n    except ValueError:\n        raise ValueError('{} is not a valid float'.format(string))\n\n\ndef str_to_datetime(string: str) -> datetime:\n    \"\"\" Return datetime representation of given string\n    >>> str_to_datetime('123')\n    datetime.datetime(1970, 1, 1, 0, 0)\n    >>> str_to_datetime('abc')\n    Traceback (most recent call last):\n       ...\n    ValueError: 'abc' is not a valid datetime\n    \"\"\"\n    try:"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}