{
  "problem": {
    "task_id": "HumanEval/88",
    "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
    "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
    "entry_point": "sort_array",
    "docstring": "",
    "problem_id": 88
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if not array:\n        return []\n\n    n = len(array)\n    sum = 0\n    for i in range(n):\n        sum += array[i]\n\n    if sum % 2 == 1:\n        return sort_array(sorted(array, reverse=True))\n    else:\n        return sort_array(sorted(array))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()",
    "if not array:\n        return array\n\n    sum = sum_array(array)\n\n    if sum % 2 == 1:\n        return sort_array(sort_array_down(array))\n    else:\n        return sort_array(sort_array_up(array))\n\n\n# Time:  O(n)\n# Space: O(n)\n# Stack: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)\n# DP: O(n)",
    "if not array:\n        return []\n\n    n = len(array)\n    if n == 1:\n        return array\n    if n == 2:\n        return array\n\n    # Find the maximum value in the array\n    max_value = max(array)\n\n    # Find the sum of first and last index values\n    sum_first_last_index_value = sum(array[0:n - 1])\n    if sum_first_last_index_value % 2 == 1:\n        return sort_array(array[0:n - 1])\n    else:\n        return sort_array(array[n - 1:0:-1])\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 4, 3, 0, 2, 5]))",
    "length = len(array)\n    if length < 2:\n        return array\n    if sum(array[0], array[length - 1]) % 2 == 0:\n        return sort_array_sorted(array)\n    else:\n        return sort_array_sorted(sorted(array, reverse=True))\n\n\ndef sort_array_sorted(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_sorted([]) => []\n    * sort_array_sorted([5]) => [5]\n    * sort_array_sorted([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_sorted([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length < 2:\n        return array\n    sorted_array = sorted(array)\n    new_array = [sorted_array[0]]\n    for i in range(1, length):\n        if sorted_array[i - 1] + sorted_array[i] == 2 * sorted_array[i]:\n            new_array.append(sorted_array[i])\n        else:\n            new_array.append(sorted_array[i - 1])\n    return new_array\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 2, 3, 4, 5]))\n    print(sort_array_sorted([1, 2, 3, 4, 5]))",
    "if len(array) < 2:\n        return array\n\n    sorted_array = array[:]\n    while len(sorted_array) > 1:\n        sorted_array_sum = sum(sorted_array)\n        if sorted_array_sum % 2 == 1:\n            sorted_array_sum = sorted_array_sum - 1\n            sorted_array[0], sorted_array[-1] = sorted_array[-1], sorted_array[0]\n        else:\n            sorted_array_sum = sorted_array_sum / 2\n            sorted_array[0], sorted_array[-1] = sorted_array[-1], sorted_array[0]\n\n        sorted_array = sorted_array[:len(sorted_array) - 1]\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1]]\n    if len(array) == 3:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2]]\n    if len(array) == 4:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3]]\n    if len(array) == 5:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3], array[4]]\n    if len(array) == 6:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3], array[4], array[5]]\n    if len(array) == 7:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3], array[4], array[5], array[6]]\n    if len(array) == 8:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3], array[4], array[5], array[6], array[7]]\n    if len(array) == 9:\n        return [array[0]] if (sum(array) % 2 == 0) else [array[1], array[2], array[3], array[4], array[5], array[6], array[7], array[8]]\n    return sort_array(sorted(array))\n\n\nclass Solution:\n    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range",
    "assert(len(array) > 0)\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0]] + [array[1]]\n    if len(array) == 3:\n        return [array[0]] + [array[1]] + [array[2]]\n    if len(array) == 4:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]]\n    # sort the list\n    array = sorted(array)\n    # sort the list in ascending order\n    if sum(array) % 2 == 1:\n        array = [array[i] for i in reversed(range(len(array)))]\n    else:\n        array = [array[i] for i in range(len(array))]\n    return array",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    if sum(array[0:len(array) - 1]) % 2 == 1:\n        return sort_array_desc(array)\n    else:\n        return sort_array_asc(array)\n\n\ndef sort_array_desc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_desc([]) => []\n    * sort_array_desc([5]) => [5]\n    * sort_array_desc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_desc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    if sum(array[0:len(array) - 1]) % 2 == 1:\n        return sort_array_asc(array)\n    else:\n        return sort_array_desc(array)\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 2, 3, 4, 5, 6, 7]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6, 7]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]))",
    "if len(array) == 0:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array_in_ascending_order(array)\n    else:\n        return sort_array_in_descending_order(array)\n\nif __name__ == '__main__':\n    print(sort_array([1, 3, 2, 5, 4, 7]))\n    print(sort_array([1, 3, 2, 5, 4, 7, 6]))\n    print(sort_array([1, 2, 3, 4, 5, 6, 7]))",
    "if not array:\n        return []\n\n    result = []\n    for i in range(len(array)):\n        sum = array[i]\n        for j in range(i, len(array)):\n            if array[j] + array[j+1] == sum:\n                array[j+1], array[j] = array[j], array[j+1]\n                break\n        result.append(array[i])\n\n    return result\n\n\nif __name__ == '__main__':\n    print(sort_array([3, 5, 1, 2, 4]))",
    "if not array: return []\n    if len(array) == 1: return array\n    #if len(array) == 2: return [0, array[0]]\n    array.sort(key=lambda x: x)\n    if len(array) % 2 == 0: return array\n    return [0] + array\n\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {void} Do not return anything, modify nums in-place instead.\n    def sortColors(self, nums):\n        nums = sort_array(nums)\n        for i in xrange(len(nums)):\n            if i % 2 == 0:\n                nums[i] = 1\n            else:\n                nums[i] = 0\n        return nums\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "if not array:\n        return []\n\n    sum = sum_array(array)\n\n    if sum % 2 == 1:\n        return sort_array_descending(array)\n    else:\n        return sort_array_ascending(array)\n\ndef sort_array_ascending(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_ascending([]) => []\n    * sort_array_ascending([5]) => [5]\n    * sort_array_ascending([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_ascending([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    i = 0\n    j = len(array) - 1\n\n    while i < j:\n        if array[i] + array[j] <= 0:\n            return array[:i + 1] + array[j + 1:]\n        elif array[i] + array[j] > 0:\n            array[i], array[j] = array[j], array[i]\n            i += 1\n            j -= 1\n        else:\n            raise Exception(\"sum of first and last index value should be zero\")\n\n    return array\n\ndef sort_array_descending(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_descending",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if sum(array) % 2 == 0:\n        return sort_array_by_sum(array, 0, len(array) - 1)\n    else:\n        return sort_array_by_sum(array, 0, len(array) - 1)",
    "if not array: return array\n    if len(array) == 1: return array\n    if len(array) == 2: return array\n    if len(array) == 3: return [array[0]+array[2], array[1]+array[2], array[0]+array[1]]\n    # sort the numbers\n    array = list(array)\n    array.sort()\n    # sort the list again\n    array = [array[0]+array[2], array[1]+array[2], array[0]+array[1]]\n    return array\n\n\ndef sort_array_backwards(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_backwards([]) => []\n    * sort_array_backwards([5]) => [5]\n    * sort_array_backwards([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array_backwards([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array: return array\n    if len(array) == 1: return array\n    if len(array) == 2: return array\n    if len(array) == 3: return [array[0]+array[2], array[1]+array[2], array[0]+array[1]]\n    # sort the numbers\n    array = list(array)\n    array.sort(reverse=True)\n    # sort the list again\n    array = [array[0]+array[2], array[1]+array[2], array[0]+array[1]]\n    return array\n\n\ndef sort_array_in_place(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort",
    "if len(array) == 0:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if len(array) == 2:\n        return [array[0]] + array[1:]\n\n    max_sum = sum(array)\n    if max_sum % 2 == 0:\n        return sort_array(array[:len(array) // 2]) + sort_array(array[len(array) // 2:])\n    else:\n        return sort_array(array[:len(array) // 2]) + sort_array([array[len(array) // 2]] + array[len(array) // 2:])\n\n\nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0]] + [array[1]]\n    if len(array) == 3:\n        return [array[0]] + [array[1]] + [array[2]]\n    if len(array) == 4:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]]\n    if len(array) == 5:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]]\n    if len(array) == 6:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]]\n    if len(array) == 7:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]] + [array[6]]\n    if len(array) == 8:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]] + [array[6]] + [array[7]]\n    if len(array) == 9:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]] + [array[6]] + [array[7]] + [array[8]]\n    if len(array) == 10:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]] + [array[6]] + [array[7]] + [array[8]] + [array[9]]\n    if len(array) == 11:\n        return [array[0]] + [array[1]] + [array[2]] + [array[3]] + [array[4]] + [array[5]] + [array[6]] + [array",
    "# write your code here\n    if len(array) == 0:\n        return []\n\n    n = len(array)\n    if n == 1:\n        return array\n\n    left = 0\n    right = n - 1\n    while left < right:\n        if array[left] + array[right] == 0:\n            return sort_array(array[left:right + 1])\n        elif array[left] + array[right] > 0:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n        else:\n            if array[left] > array[right]:\n                array[left], array[right] = array[right], array[left]\n                left += 1\n                right -= 1\n            else:\n                array[left], array[right] = array[right], array[left]\n                left += 1\n                right -= 1\n    return array\n\n\nclass Solution(object):\n    def sortArrayByParity(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return sort_array(nums)\n\n\nif __name__ == '__main__':\n    so = Solution()\n    print(so.sortArrayByParity([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if sum(array[0], array[-1]) % 2:\n            return sort_array(sorted(array, key=lambda x: x, reverse=True))\n        else:\n            return sort_array(sorted(array, key=lambda x: x))\n\nclass Solution(object):\n    def sortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        nums.sort(reverse=True)\n        nums.sort(reverse=False)",
    "if len(array) <= 1:\n        return array\n    if len(array) % 2 == 1:\n        return array[0:len(array) - 1]\n    else:\n        return array[0:len(array) - 2] + [array[len(array) - 1]] + [array[0:len(array) - 2]]\n\n\ndef is_sorted(array):\n    \"\"\"\n    Check if the given array is sorted or not.\n\n    Examples:\n    * is_sorted([]) => True\n    * is_sorted([1, 2, 3]) => True\n    * is_sorted([1, 2, 3, 5]) => False\n    \"\"\"\n    if len(array) <= 1:\n        return True\n    return array[0] <= array[1]\n\n\ndef swap(array, i, j):\n    \"\"\"\n    Swap two elements of the given array,\n    the first element is i,\n    the second element is j.\n\n    Examples:\n    * swap([1, 2, 3, 4], 1, 2) => [1, 2, 3, 4]\n    * swap([1, 2, 3, 4], 2, 1) => [1, 2, 3, 4]\n    \"\"\"\n    array[i], array[j] = array[j], array[i]\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [6, 5, 4, 3, 2, 1, 0, 7]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) == [6, 5, 4, 3, 2, 1, 0, 7, 8]\n    assert sort_array([2, 4, 3, 0, 1, 5,",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sort_array(array[:-1]) + [array[-1]]\n    else:\n        return sort_array(array[1:]) + [array[0]]\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    if __name__ == '__main__':\n        print(sort_array([0, 1, 2, 3, 4, 5]))\n        print(sort_array([1, 2, 3, 4, 5, 6]))\n        print(sort_array([1, 2, 3, 4, 5, 6, 7]))\n        print(sort_array([1, 2, 3, 4, 5, 6, 7, 8]))\n\nif __name__ == '__main__':\n    main()",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        return sort_array(array[0:len(array) - 1])\n    else:\n        return sort_array(array[len(array) - 1:0:-1])\n\n\ndef get_max_sum(nums):\n    \"\"\"\n    Given an array of non-negative integers, return the largest sum of the given array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_max_sum([1, -1, -3, 4, -5, -2]) => 6\n    * get_max_sum([-10, -5, -3, -1, 1, 5, 10]) => 15\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0] + nums[1], nums[1] + nums[0])\n    return max(get_max_sum(nums[0:len(nums) - 2]), max(nums[len(nums) - 2] + nums[len(nums) - 1], nums[len(nums) - 1] + nums[len(nums) - 2]))\n\n\ndef get_max_sum_2(nums):\n    \"\"\"\n    Given an array of non-negative integers, return the largest sum of the given array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_max_sum_2([1, -1, -3, 4, -5, -2]) => 6\n    * get_max_sum_2([-10, -5, -3, -1, 1, 5, 10]) => 15\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:",
    "return sorted(array)\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 2, 3, 4, 5]))",
    "# write your code here\n    n = len(array)\n    if n == 0:\n        return array\n    if n == 1:\n        return array[0]\n\n    sorted = [array[0]]\n    for i in range(1, n):\n        if array[i] == 0 and i == 1:\n            sorted.append(0)\n        else:\n            if array[i] + array[i - 1] > 0:\n                sorted.append(array[i])\n            else:\n                sorted.append(array[i] + array[i - 1])\n\n    return sorted\n\nif __name__ == '__main__':\n    arr = [0, 1, 2, 3, 4, 5]\n    print(sort_array(arr))\n    arr = [1, 0, 1, 2, 3, 4]\n    print(sort_array(arr))\n    arr = [3, 2, 1, 4, 5]\n    print(sort_array(arr))\n    arr = [1, 2, 3, 4, 5]\n    print(sort_array(arr))\n    arr = [4, 3, 2, 1, 5]\n    print(sort_array(arr))\n    arr = [1, 2, 3, 4, 5]\n    print(sort_array(arr))\n    arr = [1, 2, 3, 4, 5, 6]\n    print(sort_array(arr))",
    "if len(array) < 2:\n        return array\n\n    i = 0\n    j = len(array) - 1\n    while i < j:\n        if array[i] + array[j] < 0:\n            array[i], array[j] = array[j], array[i]\n        elif array[i] + array[j] == 0:\n            array[i], array[j] = array[j], array[i]\n        else:\n            j -= 1\n        i += 1\n\n    return array",
    "return sorted(array)\n\n\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums = sort_array(nums)\n        return [self.threeSum(nums, 0, len(nums) - 1)]",
    "array = list(array)\n    n = len(array)\n    if n == 0:\n        return array\n    if n == 1:\n        return array\n    if n == 2:\n        return [array[0], array[1]]\n    if n % 2 == 0:\n        return sort_array(array[:n/2]) + sort_array(array[n/2:])\n    else:\n        return sort_array(array[:n/2]) + [array[n/2]] + sort_array(array[n/2:])\n\n\n# Your NumArray object will be instantiated and called as such:\n# numArray = NumArray(nums)\n# numArray.sumRange(0, 2)\n# numArray.sumRange(2, 4)",
    "if len(array) <= 1:\n        return array\n    if len(array) == 2:\n        return sorted(array)\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sort_array(sorted(array))\n    else:\n        return sort_array(sorted(array, reverse=True))",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    odd_sum = sum(array[0:len(array) - 1])\n    even_sum = sum(array[0:len(array) - 1])\n    if odd_sum % 2 == 1:\n        return sort_array(array[0:len(array) - 1])\n    else:\n        return sort_array(array[len(array) - 1:0:-1]) + array\n\nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "if len(array) < 2:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sort_array(array[::-1])\n    return sort_array(array[::-1])\n\n\ndef sort_array_reverse(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_reverse([]) => []\n    * sort_array_reverse([5]) => [5]\n    * sort_array_reverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array_reverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sort_array_reverse(array[::-1])\n    return sort_array_reverse(array[::-1])\n\n\ndef merge(array1, array2):\n    \"\"\"\n    Given two arrays, merge them into one array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * merge([], []) => []\n    * merge([2, 4, 3], [5, 6, 7]) => [2, 4, 3, 5, 6, 7]\n    \"\"\"\n    if len(array1) == 0:\n        return array2\n    if len(array2) == 0:\n        return array1\n    if array1[0] > array2[0]:\n        array1[0] = array2[0]\n    if array2[-1] > array1[-1]:\n        array1[-1] = array2[-1]\n    array1[0",
    "if not array:\n        return []\n\n    # get the sum of first and last index\n    sum_first_last = array[0] + array[len(array) - 1]\n\n    # get the sum of first and last index\n    if sum_first_last % 2 == 0:\n        # sort in ascending order\n        return sort_array_asc(array)\n    else:\n        # sort in descending order\n        return sort_array_desc(array)\n\n\ndef sort_array_asc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_asc([]) => []\n    * sort_array_asc([5]) => [5]\n    * sort_array_asc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_asc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    i = 0\n    j = len(array) - 1\n    while i < j:\n        if array[i] + array[j] < 0:\n            # swap the values\n            array[i], array[j] = array[j], array[i]\n        i += 1\n        j -= 1\n\n    return array\n\n\ndef sort_array_desc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_desc([]) => []",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return array\n    sum = sum_of_first_and_last_index_value(array)\n    if sum % 2 == 1:\n        return sort_array_in_ascending_order(array)\n    else:\n        return sort_array_in_descending_order(array)\n\n\ndef sum_of_first_and_last_index_value(array):\n    \"\"\"\n    Given an array of non-negative integers, return the sum of the first and last index value.\n\n    Examples:\n    * sum_of_first_and_last_index_value([]) => 0\n    * sum_of_first_and_last_index_value([1]) => 1\n    * sum_of_first_and_last_index_value([1, 2, 3, 4]) => 6\n    * sum_of_first_and_last_index_value([2, 4, 3, 0, 1, 5, 6]) => 12\n    \"\"\"\n    if not array:\n        return 0\n    return sum(array)\n\n\ndef sort_array_in_ascending_order(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_in_ascending_order([]) => []\n    * sort_array_in_ascending_order([5]) => [5]\n    * sort_array_in_ascending_order([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_in_ascending_order([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0] + array[1]]\n\n    mid = len(array) / 2\n    left = sort_array(array[:mid])\n    right = sort_array(array[mid:])\n\n    left_sum = 0\n    right_sum = 0\n    for i in range(len(left)):\n        left_sum += left[i]\n    for i in range(len(right)):\n        right_sum += right[i]\n    if left_sum + right_sum % 2 == 0:\n        return left + right\n    else:\n        return right + left\n\n\nif __name__ == \"__main__\":\n    array = [4, 5, 6, 3, 1, 2]\n    print(sort_array(array))\n    array = [5, 4, 3, 2, 1, 6]\n    print(sort_array(array))",
    "return sorted(array) if sum(array) % 2 == 1 else sorted(array, reverse=True)\n\nif __name__ == '__main__':\n    print sort_array([])\n    print sort_array([5])\n    print sort_array([2, 4, 3, 0, 1, 5])\n    print sort_array([2, 4, 3, 0, 1, 5, 6])",
    "# write your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if array[0] == 0:\n        return array\n    if sum(array) % 2 == 0:\n        return sort_array(array[:len(array) - 1]) + [array[-1]] + sort_array(array[1:len(array)])\n    else:\n        return sort_array(array[:len(array) - 1]) + [array[-1]] + sort_array(array[1:len(array)]) + [array[0]]\n\n\nprint(sort_array([1, 2, 3, 4, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "if not array:\n        return []\n\n    l = len(array)\n    # sort in ascending order if sum( first index value, last index value) is odd,\n    # or sort in descending order if sum( first index value, last index value) is even.\n    if l == 1:\n        return array\n    if array[0] + array[-1] % 2 == 0:\n        return sort_array(array[1:-1]) + array[-1]\n    else:\n        return sort_array(array[1:-1]) + [array[-1]]\n\n\nif __name__ == '__main__':\n    print(sort_array([3, 4, 5, 2, 1]))\n    print(sort_array([3, 4, 5, 2, 1, 6]))",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    odd = sum(array[0:len(array) - 1])\n    if odd % 2 == 0:\n        return sort_array(sorted(array))\n    else:\n        return sort_array(sorted(array, reverse=True))\n\n\ndef remove_duplicates(array):\n    \"\"\"\n    Given an array of non-negative integers, remove duplicates in-place.\n    For example,\n    * [1, 1, 1, 3, 3, 5]\n    => [1, 1, 3, 5]\n    * [1, 3, 3, 5]\n    => [1, 3, 5]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    previous_index = 0\n    for i in range(1, len(array)):\n        if array[i] == array[previous_index]:\n            continue\n        else:\n            array[previous_index] = array[i]\n            previous_index += 1\n    return array[:previous_index]\n\n\ndef remove_duplicates_from_array(array):\n    \"\"\"\n    Given an array of non-negative integers, remove duplicates in-place.\n    For example,\n    * [1, 1, 1, 3, 3, 5]\n    => [1, 1, 3, 5]\n    * [1, 3, 3, 5]\n    => [1, 3, 5]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    previous_index = 0\n    for i in range(1, len(array)):\n        if array[i] == array[previous_index]:\n            continue\n        else:\n            array[previous_index] = array[i]\n            previous_index += 1\n    return array[:previous_index]\n\n\nif __name__ == '__main__':\n    print(sort_array([5, 6, 4, 3, 2, 1]))",
    "if not array:\n        return array\n    result = array[:]\n    if sum(array) % 2 == 0:\n        result.sort()\n    else:\n        result.sort(reverse=True)\n    return result\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_array([]) == [], \"Test sort_array #1\"\n    assert sort_array([5]) == [5], \"Test sort_array #2\"\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Test sort_array #3\"\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Test sort_array #4\"",
    "if len(array) <= 1:\n        return array\n\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        return sort_array(sorted(array))\n\n    return sort_array(sorted(array, reverse=True))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sort_array(sorted(array))\n    else:\n        return sort_array(sorted(array, reverse=True))\n\n\ndef main():\n    \"\"\"\n    Example:\n    * sort_array([1, 3, 2, 5, 4, 6]) => [1, 2, 3, 4, 5, 6]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    print(sort_array([1, 3, 2, 5, 4, 6]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    mid = len(array) / 2\n    left = sort_array(array[:mid])\n    right = sort_array(array[mid:])\n    if left[-1] + right[0] == 0:\n        return left + right\n    return right + left\n\n\n# Time:  O(n^2)\n# Space: O(1)\ndef sort_array2(array):\n    \"\"\"\n    Given an array of non-negative integers, you need to find the largest product of two numbers in the array.\n    Example:\n    Input: [2,3,6,4,7]\n    Output: 14\n    Explanation: The largest product is 7 * 6 = 42.\n    Note:\n    * The length of the given array is positive and will not exceed 50,000.\n    * The integers in the given array are in the range of -100,000 to 100,000.\n\n    Reference:\n    * https://leetcode.com/problems/largest-product-of-two-sums/\n    \"\"\"\n    if not array:\n        return 0\n    return max(\n        [\n            product(array[:mid], array[mid:])\n            for mid in range(1, len(array))\n        ]\n    )\n\n\n# Time:  O(n)\n# Space: O(n)\ndef product(array, index):\n    \"\"\"\n    Given an array and an index, return the product of the element at the index and the next element in the array.\n    Example:\n    Input: [2,3,6,4,7], 1\n    Output: 42\n    Explanation: The product of the element at the index 1 and the next element in the array is 2 * 3 * 6 * 4 * 7 = 42.\n    Note:\n    * The length of the given array is positive and will not exceed 50,000.\n    * The index is in the range of 0 to the length of the given array.\n\n    Reference:\n    * https://leetcode.com/problems/largest-product-of-two-sums/\n    \"\"\"\n    return array[index] * (array",
    "# sort the array\n    return sorted(array)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.sort_array([])\n    print s.sort_array([5])\n    print s.sort_array([2, 4, 3, 0, 1, 5])\n    print s.sort_array([2, 4, 3, 0, 1, 5, 6])",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array(array[:-1]) + [array[-1]] + sort_array(array[:-1])\n\n    return sort_array(array[:-1]) + [array[-1]]",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if array[0] > array[1]:\n        array[0], array[1] = array[1], array[0]\n    odd_sum = sum(array[0:len(array) - 1])\n    even_sum = sum(array[1:len(array)])\n    if odd_sum % 2!= 0:\n        array[0], array[len(array) - 1] = array[len(array) - 1], array[0]\n    else:\n        array[1], array[len(array) - 1] = array[len(array) - 1], array[1]\n    return sort_array(array)",
    "if len(array) <= 1:\n        return array\n\n    sorted_array = []\n    sum_of_first_index_and_last_index = array[0] + array[-1]\n\n    if sum_of_first_index_and_last_index % 2 == 1:\n        sorted_array.append(array[-1])\n        sorted_array.extend(array[:-1])\n    else:\n        sorted_array.extend(array[:-1])\n        sorted_array.append(array[-1])\n\n    return sorted_array",
    "if len(array) == 0:\n        return array\n\n    sum = sum_array(array)\n    if sum % 2 == 0:\n        return sort_array_desc(array)\n    else:\n        return sort_array_asc(array)\n\n\ndef sort_array_asc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_asc([]) => []\n    * sort_array_asc([5]) => [5]\n    * sort_array_asc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_asc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n\n    copy = copy_array(array)\n    copy.sort()\n    return copy\n\n\ndef sort_array_desc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_desc([]) => []\n    * sort_array_desc([5]) => [5]\n    * sort_array_desc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array_desc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) ==",
    "if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if len(array) == 2:\n        return [max(array)]\n\n    sum = sum(array)\n    if sum % 2 == 0:\n        return sort_array(array[0:len(array) - 1]) + [array[-1]]\n    else:\n        return sort_array(array[1:len(array) - 1]) + [array[0]]\n\n\nif __name__ == '__main__':\n    print(sort_array([3, 1, 5, 4, 2, 6]))\n    print(sort_array([6, 5, 4, 3, 2, 1]))\n    print(sort_array([6, 5, 4, 3, 2, 1, 0]))\n    print(sort_array([6, 5, 4, 3, 2, 1, 0, 7, 8]))\n    print(sort_array([6, 5, 4, 3, 2, 1, 0, 7, 8, 9, 10]))\n    print(sort_array([6, 5, 4, 3, 2, 1, 0, 7, 8, 9, 10, 11]))",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return [array[0], array[1]]\n        else:\n            return [array[1], array[0]]\n    array = sort_array(array[:])\n    array.extend(sort_array(array[:]))\n    return array\n\n\ndef main():\n    \"\"\"\n    Example:\n    Input:\n        [[3, 0, 4, 1, 2],\n         [5, 6, 4, 3, 1],\n         [1, 2, 3, 4, 5]]\n    Output:\n        [1, 2, 3, 4, 5]\n    Explanation:\n    The sum of first index value and last index value is odd.\n    The sum of first index value and last index value is even.\n    \"\"\"\n    print(sort_array([[3, 0, 4, 1, 2], [5, 6, 4, 3, 1], [1, 2, 3, 4, 5]]))\n\n\nif __name__ == '__main__':\n    main()",
    "array = array[:]\n    length = len(array)\n    if length <= 1:\n        return array\n    first_sum = array[0] + array[length - 1]\n    if first_sum % 2 == 0:\n        return sort_array(array[1:length - 1])\n    else:\n        return sort_array(array[1:length]) + [array[0]]\n\n\n# Your SortArray object will be instantiated and called as such:\n# obj = SortArray()\n# param_1 = obj.sort_array(param_1)\nclass SortArray:\n    def __init__(self):\n        self.array = []\n\n    def sort_array(self, array):\n        \"\"\"\n        Given an array of non-negative integers, return a new array of integers with the same\n        elements as the input array, but sorted in ascending order.\n\n        Note:\n        * don't change the given array.\n\n        Examples:\n        * sort_array([]) => []\n        * sort_array([5]) => [5]\n        * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n        * sort_array([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n        \"\"\"\n        self.array = array[:]\n        length = len(array)\n        if length <= 1:\n            return array\n        first_sum = array[0] + array[length - 1]\n        if first_sum % 2 == 0:\n            return sort_array(array[1:length - 1])\n        else:\n            return sort_array(array[1:length]) + [array[0]]\n\n\n# Your SortArray object will be instantiated and called as such:\n# obj = SortArray()\n# param_1 = obj.sort_array(param_1)",
    "# write your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [0, 1, 2, 3, 4, 5]\n    if len(array) == 3:\n        return [0, 1, 2, 3, 4, 5]\n    if len(array) == 4:\n        return [0, 1, 2, 3, 4, 5]\n    if len(array) == 5:\n        return [0, 1, 2, 3, 4, 5]\n    if len(array) == 6:\n        return [0, 1, 2, 3, 4, 5]\n    return sort_array(array[:len(array)//2]) + sort_array(array[len(array)//2:])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print(sort_array(arr))",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [0 if array[0] < array[1] else 1]\n    s = sum(array)\n    if s % 2 == 0:\n        return sort_array(array[:len(array)//2] + array[len(array)//2:])\n    else:\n        return sort_array(array[len(array)//2:]) + sort_array(array[:len(array)//2])\n\n\nclass Solution(object):\n    def nextGreaterElement(self, findNth, arr):\n        \"\"\"\n        :type findNth: int\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return -1\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] if arr[1] > findNth else arr[1]\n        findNth = findNth % len(arr)\n        # find the first element greater than findNth\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) / 2\n            if arr[mid] > findNth:\n                right = mid - 1\n            elif arr[mid] < findNth:\n                left = mid + 1\n            else:\n                return arr[mid]\n        return arr[left]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(sort_array(arr))\n    print(Solution().nextGreaterElement(3, arr))",
    "if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sort_array(array[0:len(array) - 1]) + [array[-1]]\n    else:\n        return sort_array(array[1:len(array)]) + [array[0]]\n\n\ndef main():\n    \"\"\"\n    Example:\n    Input:\n    [2, 4, 3, 0, 1, 5]\n    Output:\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
    "if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    mid = len(array) / 2\n    array_a = array[:mid]\n    array_b = array[mid:]\n\n    sort_array(array_a)\n    sort_array(array_b)\n\n    if sum(array_a) % 2 == 0:\n        return array_a + array_b\n    else:\n        return array_b + array_a\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return sort_array(digits)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.plusOne([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert s.plusOne([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        return sort_array(sorted(array))\n    else:\n        return sort_array(sorted(array, reverse=True))\n\n\ndef get_k_largest_values(array, k):\n    \"\"\"\n    Given an array of non-negative integers and an integer k, return k largest values of the given array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_k_largest_values([-1, 1, -1, 2, 3, 4, 5, 1, -1, -2, 3], 2) => [-1, 1]\n    * get_k_largest_values([-1, 1, -1, 2, 3, 4, 5, 1, -1, -2, 3, 2], 3) => [-1, 1, 2]\n    * get_k_largest_values([-1, 1, -1, 2, 3, 4, 5, 1, -1, -2, 3, 2, 2], 3) => [-1, 1, 2]\n    \"\"\"\n    if not array or len(array) < k:\n        return []\n    if len(array) == k:\n        return array\n    if len(array) == k + 1:\n        return [array[0]]\n    if len(array) == k + 2:\n        return [array[0], array[1]]\n    return get_k_largest_values(sorted(array, reverse=True)[0:k + 1], k)\n\n\ndef get_k_smallest_values(array, k):\n    \"\"\"\n    Given an array of non-negative integers and an integer k, return k smallest values of the given array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_k_smallest_values([-1, 1, -1, 2, 3, 4, 5, 1, -1, -2, 3, 2, 2], 2) => [-1, 1]\n    * get_k_smallest_values([-1",
    "if len(array) <= 1:\n        return array\n\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sort_array(array[1:-1]) + [array[-1]]\n    else:\n        return sort_array(array[1:-1]) + [array[0]]\n\nif __name__ == '__main__':\n    print(sort_array([0, 1, 2, 3, 4, 5]))\n    print(sort_array([1, 2, 3, 4, 5]))\n    print(sort_array([1, 2, 3, 4, 5, 6]))",
    "if len(array) == 0:\n        return array\n    sum = 0\n    for i in range(0, len(array)):\n        sum += array[i]\n    if sum % 2 == 1:\n        return sort_array(sort_array(array))\n    else:\n        return sort_array(array)\n\n\n# sort_array([5, 3, 1, 2, 4, 0]) => [0, 1, 2, 3, 4, 5]\n# sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return sorted(array)\n    if len(array) == 3:\n        return sorted(array)\n    if len(array) % 2 == 0:\n        return sorted(array)\n    return sorted(array, reverse=True)\n\n\ndef sort_array_by_sum(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_by_sum([]) => []\n    * sort_array_by_sum([5]) => [5]\n    * sort_array_by_sum([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_by_sum([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return sorted(array)\n    if len(array) == 3:\n        return sorted(array)\n    if len(array) % 2 == 0:\n        return sorted(array)\n    return sorted(array, key=lambda x: sum(x))",
    "if len(array) <= 1:\n        return array\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        return sort_array(array[0:len(array) - 1]) + array[len(array) - 1:]\n    else:\n        return sort_array(array[1:len(array)]) + [0] + array[0:len(array) - 1]\n\n\ndef main():\n    \"\"\"\n    Example:\n    Input:\n    [5]\n    [2, 4, 3, 0, 1, 5, 6]\n    Output:\n    [0, 1, 2, 3, 4, 5]\n    [6, 5, 4, 3, 2, 1]\n    \"\"\"\n    array = [5, 2, 4, 3, 0, 1, 5, 6]\n    print(sort_array(array))\n\n\nif __name__ == '__main__':\n    main()",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0] - array[1]] if array[0] > array[1] else [array[1] - array[0]]\n\n    array = sorted(array)\n    if sum(array[0:2]) % 2:\n        return [array[0] - array[1]] + sort_array(array[2:])\n    return sort_array(array[2:]) + [array[0] - array[1]]\n\n\nif __name__ == '__main__':\n    assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
    "if not array: return array\n    if len(array) <= 1: return array\n    return sorted(array, key=lambda x: (x, -x))\n\n\ndef is_sorted_array(array):\n    \"\"\"\n    Given an array of non-negative integers, check if the given array is sorted in ascending order.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * is_sorted_array([]) => False\n    * is_sorted_array([2, 4, 3, 0, 1, 5]) => True\n    * is_sorted_array([2, 4, 3, 0, 1, 5, 6]) => False\n    \"\"\"\n    if not array: return False\n    if len(array) <= 1: return True\n    return sorted(array, key=lambda x: (x, -x)) == array\n\nif __name__ == '__main__':\n    assert is_sorted_array([]) == False\n    assert is_sorted_array([2, 4, 3, 0, 1, 5]) == True\n    assert is_sorted_array([2, 4, 3, 0, 1, 5, 6]) == False",
    "if not array:\n        return array\n\n    n = len(array)\n    sorted_array = []\n\n    for i in range(n):\n        sorted_array.append(array[i])\n        if i < n - 1:\n            sorted_array[i] += sorted_array[i + 1]\n            sorted_array[i] /= 2\n\n    return sorted_array",
    "if not array:\n        return []\n\n    n = len(array)\n    if n == 1:\n        return array\n    if n == 2:\n        return sorted(array)\n\n    if sum(array) % 2:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\n\ndef sort_array_with_length(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_with_length([]) => []\n    * sort_array_with_length([5]) => [5]\n    * sort_array_with_length([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_with_length([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    n = len(array)\n    if n == 1:\n        return array\n    if n == 2:\n        return sorted(array)\n\n    if sum(array) % 2:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\n\ndef sort_array_with_length_and_reverse(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_with_length_and_reverse([]) => []\n    * sort_array_with_length_and_reverse([5]) => [5]\n    * sort_array_with",
    "if len(array) == 0:\n        return array\n\n    length = len(array)\n    if length <= 1:\n        return array\n\n    if length == 2:\n        return array\n\n    if sum(array[0], array[length - 1]) % 2 == 0:\n        return sort_array(array[0:length // 2]) + sort_array(array[length // 2:])\n    else:\n        return sort_array(array[length // 2:]) + sort_array(array[0:length // 2])\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 2, 3, 4, 5]))",
    "if len(array) < 2:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array_in_ascending_order(array)\n    else:\n        return sort_array_in_descending_order(array)\n\ndef sort_array_in_ascending_order(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_in_ascending_order([]) => []\n    * sort_array_in_ascending_order([5]) => [5]\n    * sort_array_in_ascending_order([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_in_ascending_order([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if array[i] + array[j] > array[i] + array[j + 1]:\n                array[j], array[i] = array[i], array[j]\n                break\n    return array\n\ndef sort_array_in_descending_order(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_in_descending_order([]) => []\n    * sort_array",
    "if not array:\n        return array\n\n    n = len(array)\n    if n == 1:\n        return array\n\n    if n % 2 == 1:\n        return sorted(array)\n\n    sorted_array = [0] * (n / 2)\n    for i in range(0, n / 2):\n        sorted_array[i] = array[i * 2]\n\n    for i in range(1, n / 2):\n        sorted_array[i] = array[i * 2] + array[(i - 1) * 2]\n\n    return sorted_array\n\n\nif __name__ == '__main__':\n    print(sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6, 7]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]))",
    "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return array\n\n    # calculate the sum of first and last index\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n    if sum_first_last % 2 == 0:\n        return array[0:2] + sort_array(array[2:-2]) + [last] + sort_array(array[-2:])\n    else:\n        return array[0:2] + sort_array(array[2:-2]) + [first] + sort_array(array[-2:])\n\n\nif __name__ == '__main__':\n    import sys\n\n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    solution = \"\"\n    T = int(f.readline().strip())\n    for _ in range(T):\n        N = int(f.readline().strip())\n        s = f.readline().strip()\n        solution = \"\".join(sorted(s))\n    print(solution)",
    "if len(array) <= 1:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array(sorted(array))\n\n    return sort_array(sorted(array, reverse=True))\n\n\nif __name__ == '__main__':\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([0, 1, 2, 3, 4, 5]))",
    "if not array:\n        return array\n\n    sum_array = []\n    for i in range(len(array)):\n        sum_array.append(sum(array[:i] + array[i + 1:]))\n\n    if sum_array[0] % 2 == 0:\n        sort_array(array[:0:-1])\n    else:\n        sort_array(array[1:])\n\n    return array\n\ndef main():\n    \"\"\"\n    Example:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n\nif __name__ == '__main__':\n    main()",
    "if not array:\n        return array\n\n    sum = sum_array(array)\n    if sum % 2 == 0:\n        return sort_array_ascending(array)\n    else:\n        return sort_array_descending(array)\n\n\ndef sum_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return the sum of the integers in the array.\n    If the array is empty, return 0.\n\n    Example:\n    * sum_array([]) => 0\n    * sum_array([5]) => 5\n    * sum_array([2, 4, 3, 0, 1, 5]) => 15\n    * sum_array([2, 4, 3, 0, 1, 5, 6]) => 21\n    \"\"\"\n    if not array:\n        return 0\n    return sum(array)\n\n\ndef sort_array_ascending(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_ascending([]) => []\n    * sort_array_ascending([5]) => [5]\n    * sort_array_ascending([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_ascending([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    return array[0:len(array)] + [array[i] for i in range(len(array))[::-1]]\n\ndef sort_array_descending(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if",
    "if len(array) < 2:\n        return array\n\n    sorted_array = []\n    sum_of_array = 0\n    for element in array:\n        sum_of_array += element\n        sorted_array.append(element)\n\n    if sum_of_array % 2 == 1:\n        sorted_array = sorted(sorted_array, reverse=True)\n    else:\n        sorted_array = sorted(sorted_array)\n\n    return sorted_array\n\n\ndef main():\n    \"\"\"\n    Example 1:\n    Given an array sorted in ascending order,\n    return an array sorted in descending order.\n    \"\"\"\n    array = [1, 2, 3, 4, 5, 6]\n    print(sort_array(array))\n\n    array = [1, 2, 3, 4, 5, 6, 7]\n    print(sort_array(array))\n\n    array = [7, 6, 5, 4, 3, 2, 1]\n    print(sort_array(array))\n\n    array = [1, 2, 3, 4, 5, 6, 7]\n    print(sort_array(array))\n\n\nif __name__ == '__main__':\n    main()",
    "if not array:\n        return []\n\n    # find the sum of first and last element\n    first_sum = sum(array[0:len(array) - 1])\n    last_sum = sum(array[len(array) - 1:])\n\n    # if sum is odd, sort in ascending order\n    if first_sum % 2:\n        return sort_array(array[:]) + sort_array(array[:-1])\n\n    # if sum is even, sort in descending order\n    return sort_array(array[:]) + sort_array(array[:-1][::-1])",
    "if not array:\n        return array\n\n    # sort the array in ascending order\n    if sum(array) % 2:\n        return sort_array(array[::-1])\n\n    # sort the array in descending order\n    return sort_array(list(reversed(array)))",
    "if not array: return array\n    length = len(array)\n    if length == 1: return array\n    if length == 2:\n        if array[0] + array[1] > 0: return [array[0] + array[1], 0]\n        else: return [0, array[0] + array[1]]\n    else:\n        if sum(array[0:length / 2]) % 2 == 1:\n            return sort_array(array[:length / 2]) + sort_array(array[length / 2:])\n        else:\n            return sort_array(array[:length / 2]) + sort_array(array[length / 2:]) * -1\n\n\nif __name__ == '__main__':\n    print(sort_array([3, 6, 9, 2, 1, 7, 5]))\n    print(sort_array([3, 6, 9, 2, 1, 7, 5, 8]))\n    print(sort_array([3, 6, 9, 2, 1, 7, 5, 8, 1, 1, 1]))",
    "if not array:\n        return array\n\n    def sum_of_array(array):\n        return sum(array)\n\n    if sum_of_array(array) % 2:\n        return sort_array_in_desc(array)\n    else:\n        return sort_array_in_asc(array)\n\n\ndef sort_array_in_asc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n    or sort it in descending order if the sum( first index value, last index value) is odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_in_asc([]) => []\n    * sort_array_in_asc([5]) => [5]\n    * sort_array_in_asc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_in_asc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    def sum_of_array(array):\n        return sum(array)\n\n    if sum_of_array(array) % 2:\n        return sort_array_in_asc(array[1:]) + [array[0]] + sort_array_in_asc(array[:1])\n    else:\n        return sort_array_in_asc(array[1:]) + [array[0]] + sort_array_in_asc(array[:1])\n\n\ndef sort_array_in_desc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n    or sort it in descending order if the sum( first index value, last index value) is odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    *",
    "n = len(array)\n    if n == 0:\n        return []\n    if n == 1:\n        return [array[0]]\n    if n == 2:\n        return [array[0], array[1]]\n\n    s = array[0]\n    for i in range(1, n):\n        s += array[i]\n        if s % 2 == 0:\n            s += array[i]\n        else:\n            s -= array[i]\n\n    return [s] + sort_array(array[:n - 1]) + sort_array(array[n - 1:])\n\n\nif __name__ == \"__main__\":\n    print(sort_array([1, 3, 2, 5, 7, 8, 9, 6, 4]))",
    "n = len(array)\n    if n == 0:\n        return array\n\n    if n % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n\n    :param s: string to check\n    :return: True if string is a palindrome\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_palindrome_recursive(s):\n    \"\"\"\n    Check if a string is a palindrome using a recursive algorithm.\n    This is an O(n^2) algorithm.\n\n    :param s: string to check\n    :return: True if string is a palindrome\n    \"\"\"\n    if not s:\n        return True\n    return s[0] == s[-1] and is_palindrome_recursive(s[1:-1])\n\n\ndef is_palindrome_iterative(s):\n    \"\"\"\n    Check if a string is a palindrome using an iterative algorithm.\n    This is an O(n^2) algorithm.\n\n    :param s: string to check\n    :return: True if string is a palindrome\n    \"\"\"\n    n = len(s)\n    for i in range(n / 2):\n        if s[i]!= s[n - i - 1]:\n            return False\n    return True\n\n\ndef is_palindrome_dp(s):\n    \"\"\"\n    Check if a string is a palindrome using a dynamic programming algorithm.\n    This is an O(n^2) algorithm.\n\n    :param s: string to check\n    :return: True if string is a palindrome\n    \"\"\"\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = dp[i + 1][j] + (s[i] == s[j] and dp[i + 1][j + 1])\n    return dp[0][n - 1] == 1\n\n\ndef is",
    "if not array: return array\n    if len(array) <= 1: return array\n    odd_sum = sum(array[0], array[-1])\n    if odd_sum % 2:\n        return sort_array(sorted(array, reverse=True))\n    else:\n        return sort_array(sorted(array))\n\n\ndef sort_array_by_length(array):\n    \"\"\"\n    Given an array of strings, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the length of the given array is even,\n    or sort it in descending order if the length of the given array is odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_by_length(['a', 'b', 'c']) => ['c', 'b', 'a']\n    * sort_array_by_length(['a', 'b', 'c', 'd']) => ['d', 'c', 'b', 'a']\n    * sort_array_by_length(['a', 'b', 'c', 'd', 'e']) => ['e', 'd', 'c', 'b', 'a']\n    * sort_array_by_length(['a', 'b', 'c', 'd', 'e', 'f']) => ['f', 'e', 'd', 'c', 'b', 'a']\n    \"\"\"\n    if not array: return array\n    if len(array) <= 1: return array\n    even_sum = sum(len(element) for element in array)\n    if even_sum % 2:\n        return sort_array_by_length(sorted(array, reverse=True))\n    else:\n        return sort_array_by_length(sorted(array))",
    "if not array:\n        return []\n    array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 1:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([1, 2, 3, 4, 5, 6]))\n    print(sort_array([1, 2, 3, 4, 5]))",
    "n = len(array)\n    if n == 0:\n        return []\n\n    if n == 1:\n        return array[0]\n\n    if n == 2:\n        return sorted(array)\n\n    if n % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\n# https://leetcode.com/problems/median-of-two-sorted-arrays/\n# Given two integer arrays A and B sorted in ascending order,\n# return the median of the two sorted arrays.\n# The definition of median is the middle value in the sorted array.\n# If there are even numbers in A and B, return the mean of the two middle values.\n#\n# Example 1:\n# Input: A = [1, 3], B = [2]\n# Output: 2\n# Example 2:\n# Input: A = [1, 2], B = [3, 4]\n# Output: (2 + 3) / 2 = 2.5\n# Example 3:\n# Input: A = [1, 2, 3], B = [4, 5]\n# Output: (2 + 3 + 4) / 3 = 3.333\n#\n# Note:\n#     You may assume all input arrays have the same size.\n#     A and B have equal lengths.\n#     There are no duplicates in A or B.\n#     All numbers in A and B are in the range of 32-bit signed integers.\n#\n# Follow up:\n#     If you are not sure about the code,\n#     please check out our leetcode problem submission to see how\n#     you will solve this problem.\n#\n# Companies\n# Google\n# Related Topics\n# Array\n# Similar Questions\n# Sort Two Sorted Arrays II\nclass Solution(object):\n    def findMedianSortedArrays(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: float\n        \"\"\"\n        if not A or not B:\n            return None\n\n        if len(A) + len(B) == 1:\n            return min(A) if len(A) == 1 else max(B)",
    "if not array:\n        return []\n\n    if len(array) <= 1:\n        return array\n\n    # create a copy of the array\n    sorted_array = []\n    for i in range(len(array)):\n        sorted_array.append(array[i])\n\n    # sort the array\n    sorted_array = sorted(sorted_array, key=lambda x: x)\n\n    # reverse the sorted array\n    sorted_array = sorted_array[::-1]\n\n    return sorted_array",
    "res = []\n    if len(array) == 0:\n        return res\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0]] if array[0] <= array[1] else [array[1]]\n    res = []\n    for i in range(len(array)):\n        res.append(array[i])\n        res[i] = res[i] + res[i+1]\n    res = sorted(res)\n    res = [res[i] for i in range(len(res))]\n    return res\n\n\ndef sort_list(lst):\n    \"\"\"\n    Given a list, return a copy of the given list after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given list.\n\n    Examples:\n    * sort_list([]) => []\n    * sort_list([5]) => [5]\n    * sort_list([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_list([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    res = []\n    if len(lst) == 0:\n        return res\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0]] if lst[0] <= lst[1] else [lst[1]]\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i])\n        res[i] = res[i] + res[i+1]\n    res = sorted(res)\n    res = [res[i] for i in range(len(res))]\n    return res\n\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers,",
    "if len(array) < 2:\n        return array\n\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n\n\nif __name__ == '__main__':\n    print(sort_array([0, 1, 2, 3, 4, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1]))\n    print(sort_array([2, 4, 3, 0]))\n    print(sort_array([2, 4, 3]))\n    print(sort_array([2, 4]))\n    print(sort_array([2]))\n    print(sort_array([]))",
    "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    # get first and last element\n    first = array[0]\n    last = array[-1]\n\n    # get sum of first and last element\n    sum_first_last = first + last\n\n    # sort array\n    sorted_array = sorted(array)\n\n    if sum_first_last % 2 == 0:\n        return sorted_array\n\n    return sorted_array[::-1]\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_array([1, 3, 2]) == [2, 3, 1], \"Example\"\n    assert sort_array([-1, -3, -2]) == [-2, -3, -1], \"Example\"\n    assert sort_array([2, 3, 1, 5]) == [1, 2, 3, 5], \"Example\"\n    assert sort_array([1, 2, 3, 5, 6]) == [5, 3, 1, 2, 6], \"Example\"\n    assert sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0], \"Example\"",
    "if len(array) < 2:\n        return array\n\n    if sum(array[0:len(array) - 1]) % 2 == 1:\n        return sort_array_in_ascending_order(array)\n    else:\n        return sort_array_in_descending_order(array)\n\nif __name__ == '__main__':\n    print(sort_array([3, 3, 3, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "# write your code here\n    if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0], array[1]]\n    if len(array) == 3:\n        return [array[0], array[1], array[2]]\n    if len(array) == 4:\n        return [array[0], array[1], array[2], array[3]]\n    if len(array) == 5:\n        return [array[0], array[1], array[2], array[3], array[4]]\n    if len(array) == 6:\n        return [array[0], array[1], array[2], array[3], array[4], array[5]]\n    if len(array) == 7:\n        return [array[0], array[1], array[2], array[3], array[4], array[5], array[6]]\n    if len(array) == 8:\n        return [array[0], array[1], array[2], array[3], array[4], array[5], array[6], array[7]]\n    return sort_array(sorted(array))\n\nif __name__ == \"__main__\":\n    assert sort_array([]) == []\n    assert sort_array([1]) == [1]\n    assert sort_array([1, 2]) == [1, 2]\n    assert sort_array([2, 1]) == [2, 1]\n    assert sort_array([3, 2, 1]) == [1, 2, 3]\n    assert sort_array([1, 2, 3, 4]) == [4, 3, 2, 1]\n    assert sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 2, 3, 4, 5, 6",
    "# write your code here\n    if not array:\n        return []\n    if len(array) <= 1:\n        return array\n    if sum(array[0], array[-1]) % 2:\n        return sort_array(sorted(array, reverse=True))\n    else:\n        return sort_array(sorted(array))\n\n\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not nums:\n            return []\n        nums = sorted(nums)\n        result = []\n        for i in range(len(nums) - 2):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                if i + 2 >= len(nums):\n                    continue\n                else:\n                    # find the largest\n                    j = i + 1\n                    while j < len(nums) - 1:\n                        if nums[i] + nums[j] + nums[j + 1] > nums[i]:\n                            j += 1\n                        else:\n                            break\n                    if i + 1 == j:\n                        continue\n                    k = j + 1\n                    while k < len(nums) - 1:\n                        if nums[i] + nums[k] + nums[j + 1] > nums[i]:\n                            k += 1\n                        else:\n                            break\n                    if i + 1 == k:\n                        continue\n                    # find the smallest\n                    l = k + 1\n                    while l < len(nums) - 1:\n                        if nums[i] + nums[l] + nums[j + 1] < nums[i]:\n                            l += 1\n                        else:\n                            break\n                    if i + 1 == l:\n                        continue\n                    # find the largest\n                    m = l + 1\n                    while m < len(nums) - 1:\n                        if nums[i] + nums[m] + nums[j + 1] < nums[i]:\n                            m += 1\n                        else:\n                            break\n                    if i + 1 == m:\n                        continue",
    "if len(array) < 2:\n        return array\n\n    # build a hash table to check if the sum of the first and last elements is odd\n    table = {(array[0], array[-1]): 0}\n    for i in range(1, len(array) - 1):\n        # if the sum of the first and last elements is odd, sort the array\n        if (array[i] + array[i - 1]) % 2!= 0:\n            table[(array[i], array[i - 1])] = i\n\n    # build a sorted array by using the hash table to calculate the index\n    result = []\n    for i in range(0, len(array)):\n        # if the sum of the first and last elements is even, sort the array\n        if (array[i] + array[i - 1]) % 2 == 0:\n            result.append(array[table[(array[i], array[i - 1])]])\n        else:\n            result.append(array[i])\n\n    return result",
    "if len(array) < 1:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    sum = sum(array)\n    if sum % 2 == 0:\n        return sort_array(list(reversed(array)))\n    else:\n        return sort_array(array)\n\n\nif __name__ == \"__main__\":\n    print(sort_array([1, 3, 2, 4, 5]))",
    "if len(array) < 1:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array(sorted(array))\n    else:\n        return sort_array(sorted(array, reverse=True))\n\n\ndef sort_array_reverse(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_reverse([]) => []\n    * sort_array_reverse([5]) => [5]\n    * sort_array_reverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array_reverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 1:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if sum(array) % 2 == 0:\n        return sort_array_reverse(sorted(array, reverse=True))\n    else:\n        return sort_array_reverse(sorted(array))\n\n\ndef sort_array_reverse_test(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_reverse_test([]) => []\n    * sort_array_reverse_test([5]) => [5]\n    * sort_array_reverse_test([2, 4, 3, 0, 1, 5]) =>",
    "# write your code here\n    if not array:\n        return array\n\n    arr = [array[0]]\n    for i in range(1, len(array)):\n        arr.append(array[i])\n        if arr[i] < arr[i-1]:\n            arr.append(arr[i])\n    return arr\n\n\nif __name__ == '__main__':\n    print(sort_array([3, 1, 4, 1, 5]))",
    "if not array:\n        return []\n\n    result = []\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        sum_left = array[left]\n        sum_right = array[right]\n        if sum_left + sum_right % 2 == 0:\n            result.append(sum_left + sum_right / 2)\n            left += 1\n            right -= 1\n        else:\n            result.append(sum_right - sum_left + 1)\n            right -= 1\n\n    result.append(array[left] + array[right])\n    result.reverse()\n    return result",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return [array[0] + array[1] % 2, array[1]]\n        else:\n            return [array[0] + array[1] % 2, array[1]]\n    if len(array) % 2 == 0:\n        return sort_array(array[:len(array) / 2]) + [array[len(array) / 2]] + sort_array(array[len(array) / 2:])\n    else:\n        return sort_array(array[:len(array) / 2]) + [array[len(array) / 2]]\n\ndef merge_sort(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * merge_sort([]) => []\n    * merge_sort([5]) => [5]\n    * merge_sort([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * merge_sort([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n    if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return [array[0] + array[1] % 2, array[1]]\n        else:\n            return [array[0] + array[1] % 2, array[1]]\n    if len(array) % 2 == 0:\n        return merge_sort(array[:len(array) / 2]) + [array[len(array) / 2]]",
    "if len(array) < 2:\n        return array\n\n    def helper(array, start, end):\n        if start == end:\n            return\n\n        mid = (start + end) / 2\n        array[start], array[mid] = array[mid], array[start]\n        helper(array, start, mid - 1)\n        helper(array, mid + 1, end)\n\n    helper(array, 0, len(array) - 1)\n    return array\n\n\nclass Solution(object):\n    def is_palindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if not x:\n            return True\n\n        if x < 0:\n            return False\n\n        return self.is_palindrome(self.reverse(x))\n\n    def reverse(self, x):\n        return x[::-1]\n\n    def is_palindrome_recur(self, x):\n        if not x:\n            return True\n\n        if x < 0:\n            return False\n\n        if self.is_palindrome(x):\n            return True\n\n        return self.is_palindrome_recur(self.reverse(x))\n\n    def is_palindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if not x:\n            return True\n\n        if x < 0:\n            return False\n\n        if x == 1 or x == 0:\n            return True\n\n        return self.is_palindrome(self.reverse(x))\n\n\nif __name__ == '__main__':\n    assert Solution().is_palindrome(0)\n    assert Solution().is_palindrome(1)\n    assert Solution().is_palindrome(2)\n    assert Solution().is_palindrome(3)\n    assert Solution().is_palindrome(4)\n    assert Solution().is_palindrome(5)\n    assert Solution().is_palindrome(6)\n    assert Solution().is_palindrome(7)\n    assert Solution().is_palindrome(8)\n    assert Solution().is_palindrome(9)\n    assert Solution",
    "if not array: return array\n\n    new_array = []\n    for i in xrange(len(array)):\n        if i == 0:\n            new_array.append(array[i])\n        elif i == len(array) - 1:\n            new_array.append(array[i])\n        else:\n            if sum(array[0:i+1]) % 2 == 0:\n                new_array.append(array[i])\n            else:\n                new_array.append(array[i])\n\n    return new_array\n\nif __name__ == \"__main__\":\n    print sort_array([])\n    print sort_array([5])\n    print sort_array([2, 4, 3, 0, 1, 5])\n    print sort_array([2, 4, 3, 0, 1, 5, 6])",
    "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    sorted_array = []\n    for element in array:\n        if element % 2 == 1:\n            sorted_array.append(element)\n        else:\n            sorted_array.append(0 - element)\n    return sorted_array",
    "if len(array) == 0:\n        return array\n\n    sum = array[0]\n    for i in range(1, len(array)):\n        sum += array[i]\n        array[i] = sum % 2\n\n    return array\n\ndef get_arr(num):\n    \"\"\"\n    Get the array from the given number.\n    Note:\n    * the range of the array is from [0, num)\n    * if num is even, then the first index value is 0, the last index value is num - 1\n    * if num is odd, then the first index value is 1, the last index value is num - 1\n    \"\"\"\n    arr = []\n    for i in range(0, num):\n        arr.append(i)\n\n    return arr\n\nif __name__ == '__main__':\n    print sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print get_arr(10)",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0] + array[1]]\n    if sum(array[0:len(array) - 1]) % 2 == 0:\n        return sort_array(array[0:len(array) - 1]) + [array[len(array) - 1]]\n    else:\n        return sort_array(array[0:len(array) - 1]) + [array[len(array) - 1] + array[0]]",
    "if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    odd = sum(array) % 2\n    if odd:\n        return sorted(array)\n    else:\n        return sorted(list(reversed(array)))\n\n\nclass Solution(object):\n    def sortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return\n        nums = sort_array(nums)\n        for i in range(len(nums) - 1):\n            if nums[i] + nums[i + 1] == 0:\n                nums[i + 1], nums[i] = nums[i], nums[i + 1]",
    "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return array\n    if len(array) == 3:\n        return array\n    if len(array) == 4:\n        return array\n    if len(array) == 5:\n        return array\n    if len(array) == 6:\n        return array\n    sum = sum(array)\n    if sum % 2 == 0:\n        return sort_array(array[:2] + [array[-2]] + sort_array(array[2:]))\n    else:\n        return sort_array(array[:2] + [array[-2]] + sort_array(array[2:] + [array[-1]]))\n\n\nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5]))",
    "if not array: return []\n    if len(array) == 1: return array\n    if len(array) == 2: return array\n    if len(array) % 2 == 1:\n        return sorted(array, key=lambda x: x)\n    else:\n        return sorted(array, key=lambda x: x, reverse=True)\n\ndef sum_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return the sum of all numbers in the array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sum_array([]) => 0\n    * sum_array([1]) => 1\n    * sum_array([1, 2, 3]) => 6\n    * sum_array([1, 2, 3, 4, 5, 6]) => 18\n    \"\"\"\n    if not array: return 0\n    if len(array) == 1: return array[0]\n    if len(array) == 2: return array[0] + array[1]\n    return sum(array)\n\ndef product_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return the product of all numbers in the array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * product_array([]) => 1\n    * product_array([1]) => 1\n    * product_array([1, 2, 3]) => 6\n    * product_array([1, 2, 3, 4, 5, 6]) => 36\n    \"\"\"\n    if not array: return 1\n    if len(array) == 1: return array[0]\n    if len(array) == 2: return array[0] * array[1]\n    return reduce(lambda x, y: x * y, array)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0] + array[1]]\n    if len(array) == 3:\n        return [array[0] + array[1] + array[2]]\n    if len(array) == 4:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:\n            return [array[0] + array[1] + array[2] + array[3]]\n    if len(array) == 5:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:\n            return [array[0] + array[1] + array[2] + array[3]]\n    if len(array) == 6:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:\n            return [array[0] + array[1] + array[2] + array[3]]\n    if len(array) == 7:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:\n            return [array[0] + array[1] + array[2] + array[3]]\n    if len(array) == 8:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:\n            return [array[0] + array[1] + array[2] + array[3]]\n    if len(array) == 9:\n        if sum(array[0:3]) % 2 == 1:\n            return [array[3] + array[2] + array[1] + array[0]]\n        else:"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}