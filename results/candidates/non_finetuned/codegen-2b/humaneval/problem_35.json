{
  "problem": {
    "task_id": "HumanEval/35",
    "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
    "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
    "entry_point": "max_element",
    "docstring": "",
    "problem_id": 35
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "return max(l) if len(l) > 0 else 0\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if len(l) > 0 else 0\n\ndef mean_element(l: list):\n    \"\"\"Return average element in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.3333333333333333\n    \"\"\"\n    return sum(l) / float(len(l))\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    s = sorted(l)\n    if len(s) % 2 == 0:\n        return (s[len(s) / 2] + s[len(s) / 2 - 1]) / 2.0\n    else:\n        return s[len(s) / 2]\n\ndef median_element_with_swap(l: list):\n    \"\"\"Return median element in the list with a swap operation.\n    >>> median_element_with_swap([1, 2, 3])\n    2\n    >>> median_element_with_swap([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    s = sorted(l)\n    if len(s) % 2 == 0:\n        return (s[len(s) / 2] + s[len(s) / 2 - 1]) / 2.0\n    else:\n        return s[len(s) / 2]",
    "if not l:\n        return None\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)",
    "if not l:\n        return None\n    return max(l)",
    "if not l:\n        raise ValueError(\"empty list\")\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])[0]",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\ndef min_max_element(l: list):\n    \"\"\"Return the minimum and maximum element in the list.\n    >>> min_max_element([1, 2, 3])\n    (1, 3)\n    >>> min_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    return min(l), max(l) if l else None\n\ndef median(l: list):\n    \"\"\"Return the median of the list.\n    >>> median([1, 2, 3, 4, 5])\n    3.5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n/2 - 1] + l[n/2]) / 2.0\n    else:\n        return l[n/2]\n\ndef mean(l: list):\n    \"\"\"Return the mean of the list.\n    >>> mean([1, 2, 3, 4, 5])\n    3\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.3333333333333333\n    \"\"\"\n    return sum(l) / len(l) if l else None\n\ndef median_mean_dev(l: list):\n    \"\"\"Return the median, mean and standard deviation of the list.\n    >>> median_mean_dev([1, 2, 3, 4, 5])\n    (3.5, 3.5, 0.0)\n    >>> median_mean_dev([5, 3, -5",
    "if len(l) == 1:\n        return l[0]\n    else:\n        return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        return min(l, key=lambda x: x)\n\n\ndef partition(l: list, k: int):\n    \"\"\"Partition the list into two lists with the first k elements.\n    >>> partition([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4], [5]]\n    >>> partition([1, 2, 3, 4, 5], 4)\n    [[1, 2, 3, 4], [5]]\n    \"\"\"\n    pivot = l[k]\n    l[k], l[k-1] = l[k-1], l[k]\n    i = 0\n    for i in range(k-1, -1, -1):\n        if l[i] < pivot:\n            l[i+1], l[i] = l[i], l[i+1]\n            i += 1\n    l[i+1], l[i] = l[i], l[i+1]\n    return l\n\n\ndef sort(l: list):\n    \"\"\"Sort the list in-place.\n    >>> sort([5, 4, 3, 2, 1])\n    >>> print(l)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    l.sort()\n\n\ndef shuffle(l: list):\n    \"\"\"Shuffle the list.\n    >>> shuffle([1, 2, 3, 4, 5])\n    >>> print(l)\n    [5, 1, 4, 2, 3]\n    \"\"\"\n    random.shuffle(l)\n\n\ndef group(l: list, n: int):\n    \"\"\"Group the list into n-element groups.",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef find_min(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> find_min([1, 2, 3])\n    1\n    >>> find_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef find_max(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max([1, 2, 3])\n    3\n    >>> find_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=lambda x: x)\n\n\ndef find_min_max(l: list):\n    \"\"\"Return minimum and maximum elements in the list.\n    >>> find_min_max([1, 2, 3])\n    (1, 3)\n    >>> find_min_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (1, -10)\n    \"\"\"\n    return min(l, key=lambda x: x), max(l, key=lambda x: x)\n\n\ndef find_min_max_element(l: list):\n    \"\"\"Return minimum and maximum element in the list.\n    >>> find_min_max_element([1, 2, 3])\n    (1, 3)\n    >>> find_min_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (1, -10)\n    \"\"\"\n    return min(l, key=lambda x: x), max",
    "if not l:\n        raise ValueError(\"Cannot find maximum of an empty list\")\n    return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot find minimum of an empty list\")\n    return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return the median element in the list.\n    >>> median_element([1, 2, 3, 4, 5])\n    3\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot find median of an empty list\")\n    return sorted(l)[int(len(l) / 2)]\n\n\ndef mean_element(l: list):\n    \"\"\"Return the mean element in the list.\n    >>> mean_element([1, 2, 3, 4, 5])\n    3.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot find mean of an empty list\")\n    return sum(l) / len(l)\n\n\ndef standard_deviation_element(l: list):\n    \"\"\"Return the standard deviation element in the list.\n    >>> standard_deviation_element([1, 2, 3, 4, 5])\n    2.8284271247461903\n    >>> standard_deviation_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot find standard deviation of an empty list\")\n    return math.sqrt(",
    "if not l:\n        return None\n    return max(l) if l else 0\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l) if l else 0\n\ndef mean(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean([1, 2, 3, 4])\n    2.5\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1.5\n    \"\"\"\n    return sum(l) / len(l) if l else 0\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l.sort()\n    if not l:\n        return None\n    return l[len(l) // 2]\n\ndef mode(l: list):\n    \"\"\"Return mode of the list.\n    >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    l.sort()\n    if len(l) == 1:\n        return l[0]\n    if l[0]!= l[-1]:\n        return l[0]\n    i = 1\n    while i < len(l):\n        if l[i]!= l[i - 1]:\n            return l[i]\n        i += 1\n    return l[0]\n\ndef product(l: list):",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef argmin(l: list):\n    \"\"\"Return index of the minimum element in the list.\n    >>> argmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef argmax(l: list):\n    \"\"\"Return index of the maximum element in the list.\n    >>> argmax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return max(l, key=lambda x: x)\n\ndef argminmax(l: list):\n    \"\"\"Return index of the minimum element in the list.\n    >>> argminmax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef argminmax_with_default(l: list, default: object = 0):\n    \"\"\"Return index of the minimum element in the list.\n    >>> argminmax_with_default([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef argminmax_with_default_with_default(l: list, default: object = 0, default_1: object = -1):\n    \"\"\"Return index of the minimum element in the list.\n    >>> argminmax_with_default_with_default([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"",
    "if not l:\n        return None\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return the median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return (l + [0])[len(l) // 2]\n\n\ndef random_element(l: list):\n    \"\"\"Return a random element in the list.\n    >>> random_element([1, 2, 3])\n    2\n    >>> random_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return l[random.randrange(len(l))]\n\n\ndef median_of_medians(l: list):\n    \"\"\"Return the median of the median elements in the list.\n    >>> median_of_medians([1, 2, 3, 4, 5, 6])\n    3.5\n    >>> median_of_medians([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return (l + [0])[len(l) // 2]\n\n\ndef median_of_means(l: list):\n    \"\"\"Return the median of the means of the elements in the list.\n    >>> median_of_means([1, 2, 3, 4, 5, 6])\n    3.5\n    >>> median_of_means([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return sum(l",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return sum(l) / 2.0\n\n\ndef mean(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean([1, 2, 3, 4])\n    2.5\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5.5\n    \"\"\"\n    return sum(l) / float(len(l))\n\n\ndef standard_deviation(l: list):\n    \"\"\"Return standard deviation of the list.\n    >>> standard_deviation([1, 2, 3, 4])\n    2.5\n    >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.8284271247461903\n    \"\"\"\n    return math.sqrt(sum([x**2 for x in l]) / float(len(l)))\n\n\ndef sum(l: list):\n    \"\"\"Return sum of the list.\n    >>> sum([1, 2, 3, 4])\n    10\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return sum(l)\n\n\ndef sum_squares(l: list):\n    \"\"\"Return sum of squares of the list.\n    >>> sum_squares([1, 2, 3, 4])\n    55",
    "if not l:\n        return None\n    return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)\n\ndef get_max_length_from_list(l: list):\n    \"\"\"Return maximum length of list.\n    >>> get_max_length_from_list([1, 2, 3])\n    3\n    >>> get_max_length_from_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return max(map(len, l))\n\ndef get_min_length_from_list(l: list):\n    \"\"\"Return minimum length of list.\n    >>> get_min_length_from_list([1, 2, 3])\n    1\n    >>> get_min_length_from_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    return min(map(len, l))\n\ndef get_max_length_from_set(s: set):\n    \"\"\"Return maximum length of list.\n    >>> get_max_length_from_set(set([1, 2, 3]))\n    3\n    >>> get_max_length_from_set(set([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    9\n    \"\"\"\n    return max(map(len, s))\n\ndef get_min_length_from_set(s: set):\n    \"\"\"Return minimum length of list.\n    >>> get_min_length_from_set(set([1, 2, 3]))\n    1\n    >>> get_min_length_from_set(set([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef max_value(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_value([1, 2, 3])\n    3\n    >>> max_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=lambda x: x, reverse=True)\n\n\ndef min_value(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_value([1, 2, 3])\n    1\n    >>> min_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x, reverse=True)\n\n\ndef sum_of_list(l: list):\n    \"\"\"Sum of all elements in the list.\n    >>> sum_of_list([1, 2, 3])\n    6\n    >>> sum_of_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return sum(l)\n\n\ndef mean_of_list(l: list):\n    \"\"\"Mean of all elements in the list.\n    >>> mean_of_list([1, 2, 3])\n    2.0\n    >>> mean_of_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    return sum_of_list(l) / len(l)\n\n\ndef median_of_list(l: list):\n    \"\"\"Median of all elements in the list.\n    >>>",
    "if not l:\n        return None\n    return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)\n\ndef mean(l: list):\n    \"\"\"Return average of elements in the list.\n    >>> mean([1, 2, 3, 4])\n    2.5\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1.5\n    \"\"\"\n    if not l:\n        return None\n    return sum(l) / len(l)\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median([1, 2, 3, 4])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    if not l:\n        return None\n    sorted_l = sorted(l)\n    return sorted_l[len(l)//2]\n\ndef stdev(l: list):\n    \"\"\"Return standard deviation of elements in the list.\n    >>> stdev([1, 2, 3, 4])\n    2.5\n    >>> stdev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.25\n    \"\"\"\n    if not l:\n        return None\n    return math.sqrt(var(l))\n\ndef var(l: list):\n    \"\"\"Return variance of elements in the list.\n    >>> var([1, 2, 3, 4])\n    2.5\n    >>> var([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4.25\n    \"\"\"\n    if not l:\n        return None\n    return sum((x-mean",
    "if len(l) == 0:\n        return None\n    else:\n        return max(l, key=lambda x: x)\n\ndef max_element_with_indices(l: list):\n    \"\"\"Return maximum element and indices in the list.\n    >>> max_element_with_indices([1, 2, 3])\n    (3, [0, 2])\n    >>> max_element_with_indices([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, [0, 5, 8, 10])\n    \"\"\"\n    if len(l) == 0:\n        return None, None\n    else:\n        return max(l, key=lambda x: x), [i for i, x in enumerate(l) if x == max(l, key=lambda x: x)]\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return min(l, key=lambda x: x)\n\ndef min_element_with_indices(l: list):\n    \"\"\"Return minimum element and indices in the list.\n    >>> min_element_with_indices([1, 2, 3])\n    (1, [0])\n    >>> min_element_with_indices([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, [0, 1, 3, 5, 8])\n    \"\"\"\n    if len(l) == 0:\n        return None, None\n    else:\n        return min(l, key=lambda x: x), [i for i, x in enumerate(l) if x == min(l, key=lambda x: x)]\n\ndef median(l: list):\n    \"\"\"Return median element in the list.\n    >>> median([1, 2, 3])\n    2",
    "if not l:\n        return None\n    return max(l) if l[0] > l[1] else max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l) if l[0] < l[1] else min(l)\n\n\ndef is_sorted(l: list):\n    \"\"\"Check if the list is sorted.\n    >>> is_sorted([4, 3, 2, 1])\n    True\n    >>> is_sorted([4, 3, 2, 1, 5])\n    False\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:]))\n\n\ndef find_first_unique_value(l: list, l2: list):\n    \"\"\"Find first unique value in l.\n    >>> find_first_unique_value([1, 2, 3, 1, 1, 3], [1, 2, 3])\n    3\n    >>> find_first_unique_value([1, 2, 3, 1, 1, 3], [1, 2, 3, 4])\n    -1\n    \"\"\"\n    if not l or not l2:\n        return -1\n\n    for i, val in enumerate(l):\n        if val in l2:\n            return i\n\n    return -1\n\n\ndef get_random_sample(l: list, k: int):\n    \"\"\"Get k random elements from the list.\n    >>> get_random_sample([1, 2, 3, 4, 5], 2)\n    [1, 5]\n    >>> get_random_sample([1, 2, 3, 4, 5], 6)\n    [1, 2, 3, 4, 5, 5]\n    \"\"\"\n    if not l:\n        return []\n\n    if k > len(l):\n        return l\n\n    return random.sample(l, k)\n\n\ndef get_random_sample_from_",
    "if len(l) == 0:\n        raise ValueError(\"empty list\")\n    return max(l) if l else 0\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"empty list\")\n    return min(l) if l else 0\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"empty list\")\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n/2 - 1] + l[n/2]) / 2.0\n    return l[n/2]\n\ndef mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    return sum(l) / len(l)\n\ndef median_element_in_range(l: list, min_val: int, max_val: int):\n    \"\"\"Return median element in the list within the range of min_val and max_val.\n    >>> median_element_in_range([1, 2, 3], 1, 5)\n    2\n    >>> median_element_in_range([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5, -5)\n    -5\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"empty list\")",
    "return max(l) if l else None",
    "if not l:\n        raise ValueError(\"list is empty\")\n    return max(l)[0]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"list is empty\")\n    return min(l)[0]\n\n\ndef median(l: list):\n    \"\"\"Return median element in the list.\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5.5\n    \"\"\"\n    return (min_element(l) + max_element(l)) / 2\n\n\ndef sort_list_by_key(l: list, key: callable):\n    \"\"\"Sort a list by a given key.\n    >>> sort_list_by_key([1, 2, 3], lambda x: x)\n    [1, 2, 3]\n    \"\"\"\n    return sorted(l, key=key)\n\n\ndef partition(l: list, pivot: int, left: int, right: int):\n    \"\"\"Partition list into two lists around a pivot element.\n    >>> partition([1, 2, 3, 4, 5], 3, 0, 3)\n    [[1, 2, 3], [4, 5]]\n    >>> partition([1, 2, 3, 4, 5], 3, 1, 3)\n    [[1, 2, 3], [4, 5]]\n    \"\"\"\n    pivot_value = l[pivot]\n    l[pivot], l[left] = l[left], l[pivot]\n    return [l[:left], l[right:]] + [l[left:pivot], l[pivot:]] + [l[right:]]\n\n\ndef quicksort(l: list, key: callable):\n    \"\"\"Quicksort a list.\n    >>> quicksort([1, 2, 3, 4",
    "if not l:\n        return None\n    return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l) if l else None",
    "return max(l) if l else None\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return (max(l) + min(l)) / 2 if l else None\n\n\ndef median_element_from_sorted_list(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_from_sorted_list([1, 2, 3])\n    2\n    >>> median_element_from_sorted_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return (max(l) + min(l)) / 2 if l else None\n\n\ndef median_element_from_sorted_list_with_insertion_sort(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_from_sorted_list_with_insertion_sort([1, 2, 3])\n    2\n    >>> median_element_from_sorted_list_with_insertion_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l.sort()\n    return (max(l) + min(l)) / 2 if l else None\n\n\ndef median_element_from_sorted_list_with_merge_sort(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_from_sorted_list_with_merge_sort([1, 2, 3",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)",
    "if not l:\n        return None\n    return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4, 5])\n    2.5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2-1] + l[len(l)//2]) / 2.0\n    else:\n        return l[len(l)//2]\n\ndef average(l: list):\n    \"\"\"Return average of the list.\n    >>> average([1, 2, 3, 4, 5])\n    3.0\n    >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    return sum(l) / len(l)\n\ndef range_sum(l: list):\n    \"\"\"Return range sum of the list.\n    >>> range_sum([1, 2, 3, 4, 5])\n    15\n    >>> range_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -15\n    \"\"\"\n    return sum(l)\n\ndef sum(l: list):\n    \"\"\"Return sum of the list.\n    >>> sum([1, 2, 3, 4, 5])\n    10\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -35\n    \"\"\"\n    return sum(l)\n\ndef product(l:",
    "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return min(l)",
    "if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    min_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] < min_elem:\n            min_elem = l[i]\n    return min_elem\n\ndef median(l: list):\n    \"\"\"Return the median of the list.\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([2, 3, 4, 5, 7])\n    3.5\n    >>> median([1, 2, 3, 4, 5, 6, 7])\n    3.5\n    \"\"\"\n    l = sorted(l)\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    else:\n        return l[len(l) / 2]\n\ndef mean(l: list):\n    \"\"\"Return the mean of the list.\n    >>> mean([1, 2, 3, 4])\n    2.5\n    >>> mean([2, 3, 4, 5, 7])\n    4.0\n    >>> mean([1, 2, 3, 4, 5, 6, 7])\n    4.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    return sum(l) / float(len(l))\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return the median absolute deviation of the",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\ndef product(l: list):\n    \"\"\"Return the product of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2\n    \"\"\"\n    return reduce(operator.mul, l) if l else None\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -16\n    \"\"\"\n    return sum(l) if l else None\n\ndef mean(l: list):\n    \"\"\"Return mean of all elements in the list.\n    >>> mean([1, 2, 3])\n    2\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.3333333333333333\n    \"\"\"\n    return sum_element(l) / len(l) if l else None\n\ndef median(l: list):\n    \"\"\"Return median of all elements in the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return sorted(l)[len(l) // 2] if l else None\n\ndef mode(l: list):\n    \"\"\"Return mode of all elements in the list.\n    >>> mode([1, 2, 3])\n    3\n    >>> mode([5, 3, -5, 2, -",
    "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l)\n    return max(max_element(l[:i]) for i in range(1, len(l)))\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return min(l)\n    return min(min_element(l[:i]) for i in range(1, len(l)))\n\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    if not l:\n        return None\n    return (max_element(l[:len(l) // 2]) + min_element(l[:len(l) // 2])) / 2\n\n\ndef mean(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -4.75\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3])\n    1\n    >>> median_absolute_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.75\n    \"\"\"\n    return median(l) - mean(l)",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef get_max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> get_max_element([1, 2, 3])\n    3\n    >>> get_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\ndef get_min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> get_min_element([1, 2, 3])\n    1\n    >>> get_min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\ndef get_median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> get_median_element([1, 2, 3])\n    2\n    >>> get_median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\ndef get_mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> get_mean_element([1, 2, 3])\n    2.0\n    >>> get_mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.0",
    "# max_element is a function so it is not an attribute\n    return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # min_element is a function so it is not an attribute\n    return min(l, key=lambda x: x)\n\ndef is_palindrome(l: list):\n    \"\"\"Check if list is a palindrome.\n    >>> is_palindrome([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_palindrome([1, 2, 3, 4, 5, 6, 7])\n    False\n    \"\"\"\n    # is_palindrome is a function so it is not an attribute\n    return all(l[i] == l[-i-1] for i in range(len(l)-1))\n\ndef is_permutation(l: list, r: list):\n    \"\"\"Check if list is a permutation of list r.\n    >>> is_permutation([1, 2, 3], [2, 3, 1])\n    True\n    >>> is_permutation([1, 2, 3], [1, 3, 2])\n    False\n    >>> is_permutation([1, 2, 3], [3, 2, 1])\n    False\n    >>> is_permutation([1, 2, 3], [1, 2, 4])\n    False\n    \"\"\"\n    # is_permutation is a function so it is not an attribute\n    return all(l[i] == r[i] for i in range(len(l)))\n\ndef is_subsequence(l: list, r: list):\n    \"\"\"Check if list is a subsequence of list r.\n    >>> is_subsequence([1, 2, 3], [1, 2, 3])\n    True\n    >>> is_subsequence([1, 2, 3], [1, 2, 4])\n    False\n    >>> is_subsequence([1,",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef argmax(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> argmax([1, 2, 3])\n    1\n    >>> argmax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4\n    \"\"\"\n    return max(l, key=lambda x: x).index\n\n\ndef argmin(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> argmin([1, 2, 3])\n    0\n    >>> argmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -4\n    \"\"\"\n    return min(l, key=lambda x: x).index\n\n\ndef argmax_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> argmax_index([1, 2, 3])\n    0\n    >>> argmax_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    return max(l, key=lambda x: x).index\n\n\ndef argmin_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> argmin_index([1, 2, 3])\n    1\n    >>> argmin_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4\n    \"\"\"\n    return min(l, key=lambda x: x).index\n\n\ndef argmax_argmin(l: list):\n    \"\"\"Return index of maximum and minimum element in the list.\n    >>> argmax_argmin([1, 2,",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]\n\ndef average(l: list):\n    \"\"\"Return the average of the list.\n    >>> average([1, 2, 3, 4])\n    2.5\n    >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.0\n    \"\"\"\n    return sum(l) / len(l)\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return the median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3, 4])\n    2.0\n    >>> median_absolute_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return abs(l[0] - median(l))\n    return (median(l) - min(l)) / (max(l) - min(l))\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"",
    "if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return min(l, key=lambda x: x)\n\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return (l[len(l) // 2] + l[(len(l) // 2) - 1]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean([1, 2, 3])\n    2\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    5.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return float(sum(l)) / len(l)\n\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3])\n    1\n    >>> median_absolute_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4.0\n    \"\"\"\n    if len(l) == 0:",
    "return max(l) if l else 0\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else 0\n\ndef remove_duplicates(l: list):\n    \"\"\"Remove duplicate elements in the list.\n    >>> remove_duplicates([1, 1, 2, 2, 2, 3, 3, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    return [x for x in l if x not in l]\n\ndef count_occurences(l: list, val: int):\n    \"\"\"Count the number of occurences of val in the list.\n    >>> count_occurences([1, 2, 3, 1, 2, 3, 4], 2)\n    2\n    >>> count_occurences([1, 2, 3, 1, 2, 3, 4], 3)\n    1\n    \"\"\"\n    return sum([1 for x in l if x == val])\n\ndef remove_duplicates_from_set(set_: set):\n    \"\"\"Remove duplicate elements from the set.\n    >>> remove_duplicates_from_set(set([1, 1, 2, 2, 2, 3, 3, 3, 4]))\n    set([1, 2, 3, 4])\n    \"\"\"\n    return set([x for x in set_ if x not in set_])\n\ndef remove_duplicates_from_list(l: list):\n    \"\"\"Remove duplicate elements from the list.\n    >>> remove_duplicates_from_list([1, 1, 2, 2, 2, 3, 3, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    return [x for x in l if x not in l]\n\ndef remove_duplicates_from_tuple(t: tuple):\n    \"\"\"Remove duplicate elements from the tuple.\n    >>> remove_duplicates_from_tuple((1, 1, 2",
    "return max(l, key=lambda x: x) if l else None\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x) if l else None",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None",
    "max_val = l[0]\n    for v in l[1:]:\n        if v > max_val:\n            max_val = v\n    return max_val",
    "return max(l, key=lambda x: x)\n\ndef max_min_element(l: list):\n    \"\"\"Return maximum and minimum elements in the list.\n    >>> max_min_element([1, 2, 3])\n    (3, 1)\n    >>> max_min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    return max(l, key=lambda x: x), min(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef min_max_element(l: list):\n    \"\"\"Return minimum and maximum elements in the list.\n    >>> min_max_element([1, 2, 3])\n    (1, 3)\n    >>> min_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123)\n    \"\"\"\n    return min(l, key=lambda x: x), max(l, key=lambda x: x)\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2\n    \"\"\"\n    return (len(l) + 1) / 2\n\ndef mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean_element([1, 2, 3])\n    2\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    5.5\n    \"\"\"\n    return sum(l) / len(",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef remove_duplicates(l: list):\n    \"\"\"Remove duplicates from the list.\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n\ndef partition(l: list, x: int):\n    \"\"\"Partition the list into two sublists based on x.\n    >>> partition([1, 2, 3, 4], 2)\n    ([1, 2], [3, 4])\n    \"\"\"\n    less = []\n    greater = []\n    i = 0\n    while i < len(l):\n        if l[i] <= x:\n            less.append(l[i])\n        else:\n            greater.append(l[i])\n        i += 1\n    return (less, greater)\n\ndef find_kth_largest(l: list, k: int):\n    \"\"\"Find the kth largest element in the list.\n    >>> find_kth_largest([1, 2, 3, 4], 2)\n    3\n    >>> find_kth_largest([1, 2, 3, 4], 5)\n    None\n    \"\"\"\n    less, greater = partition(l, k)\n    return greater[0]",
    "if not l:\n        raise ValueError('List is empty.')\n    if len(l) == 1:\n        return l[0]\n    max_value = l[0]\n    max_index = 0\n    for index, value in enumerate(l):\n        if value > max_value:\n            max_value = value\n            max_index = index\n    return max_value, max_index",
    "if not l:\n        raise ValueError('max_element requires at least one element')\n\n    if len(l) == 1:\n        return l[0]\n\n    return max(l, key=lambda x: x[0])\n\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    0\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4\n    \"\"\"\n    if not l:\n        raise ValueError('max_element_index requires at least one element')\n\n    if len(l) == 1:\n        return 0\n\n    return max(enumerate(l), key=lambda x: x[1][0])[0]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError('min_element requires at least one element')\n\n    if len(l) == 1:\n        return l[0]\n\n    return min(l, key=lambda x: x[0])\n\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    if not l:\n        raise ValueError('min_element_index requires at least one element')\n\n    if len(l) == 1:\n        return 0\n\n    return min(enumerate(l), key=lambda x: x[1][0])[0]",
    "return max(l, key=lambda x: x)",
    "if not l:\n        raise ValueError(\"list is empty\")\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])[0]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"list is empty\")\n    if len(l) == 1:\n        return l[0]\n    return min(l, key=lambda x: x[0])[0]\n\n\ndef max_min_element(l: list):\n    \"\"\"Return maximum and minimum element in the list.\n    >>> max_min_element([1, 2, 3])\n    (3, 1)\n    >>> max_min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    if not l:\n        raise ValueError(\"list is empty\")\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])[0], min(l, key=lambda x: x[0])[0]",
    "if not l:\n        return None\n    max_val = l[0]\n    max_ind = 0\n    for i, val in enumerate(l):\n        if val > max_val:\n            max_val = val\n            max_ind = i\n    return l[max_ind]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n#\n# Iterative\n#\n\ndef iterate_lcm(l: list, n: int):\n    \"\"\"Find LCM of all elements in the list.\n    >>> list(iterate_lcm([1, 2, 3], 3))\n    [1, 2, 3]\n    >>> list(iterate_lcm([1, 2, 3], 4))\n    [1, 2, 3, 4]\n    >>> list(iterate_lcm([1, 2, 3], 6))\n    [1, 2, 3, 4, 5, 6]\n    >>> list(iterate_lcm([1, 2, 3], 7))\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> list(iterate_lcm([1, 2, 3], 8))\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    result = [1]\n    for i in range(1, n):\n        result.append(lcm(result[-1], i))\n    return result\n\n\ndef iterate_lcm2(l: list, n: int):\n    \"\"\"Find LCM of all elements in the list.\n    >>> list(iterate_lcm2([1, 2, 3], 3))\n    [1, 2, 3]\n    >>> list(iterate_lcm2([1, 2, 3], 4))\n    [1, 2, 3]\n    >>> list(iterate_lcm2([1, 2, 3], 6))\n    [1, 2, 3]\n    >>> list(iterate_lcm2([1, 2, 3], 7))\n    [1, 2, 3]\n    >>> list(iterate_lcm2([1, 2,",
    "return max(l) if l else None\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None",
    "return max(l, key=lambda x: x)\n\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    0\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4\n    \"\"\"\n    return max(l, key=lambda x: x).index(x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    return min(l, key=lambda x: x).index(x)\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return sum(l)\n\n\ndef sum_element_index(l: list):\n    \"\"\"Return index of sum of all elements in the list.\n    >>> sum_element_index([1, 2, 3])\n    0\n    >>> sum_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    return sum(l).index(x)\n\n\ndef average_element(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>>",
    "return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Check whether list is monotonic increasing.\n    >>> is_monotonic_increasing([1, 2, 3])\n    True\n    >>> is_monotonic_increasing([1, 2, 3, 4])\n    False\n    >>> is_monotonic_increasing([1, 2, 3, 4, 5])\n    True\n    \"\"\"\n    return max_element(l) >= min_element(l)\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Check whether list is monotonic decreasing.\n    >>> is_monotonic_decreasing([1, 2, 3])\n    False\n    >>> is_monotonic_decreasing([1, 2, 3, 4])\n    True\n    >>> is_monotonic_decreasing([1, 2, 3, 4, 5])\n    False\n    \"\"\"\n    return max_element(l) <= min_element(l)\n\ndef is_monotonic(l: list):\n    \"\"\"Check whether list is monotonic.\n    >>> is_monotonic([1, 2, 3])\n    True\n    >>> is_monotonic([1, 2, 3, 4])\n    True\n    >>> is_monotonic([1, 2, 3, 4, 5])\n    False\n    \"\"\"\n    return is_monotonic_increasing(l) and is_monotonic_decreasing(l)\n\ndef is_sorted(l: list):\n    \"\"\"Check whether list is sorted.\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    \"\"\"\n    return all(a <= b for a, b in zip(l, l[1",
    "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])[0]\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return min(l, key=lambda x: x[0])[0]\n\ndef argmin(l: list):\n    \"\"\"Return position of the minimum element in the list.\n    >>> argmin([1, 2, 3])\n    0\n    >>> argmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return 0\n    return min(l, key=lambda x: x[0])[0]\n\ndef argmax(l: list):\n    \"\"\"Return position of the maximum element in the list.\n    >>> argmax([1, 2, 3])\n    2\n    >>> argmax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return 0\n    return max(l, key=lambda x: x[0])[0]\n\ndef get_max_index(l: list):\n    \"\"\"Get maximum index in the list.\n    >>> get_max_index([1, 2, 3])\n    2\n    >>> get_max_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    return argmax(l)\n\ndef get_min_index(l: list):\n    \"\"\"Get minimum index in",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4])\n    2\n    >>> median([4, 5, 3, 2])\n    2.5\n    >>> median([-10, 1, 2, 3, 4])\n    1.5\n    \"\"\"\n    return sorted(l, reverse=True)[int(len(l) / 2)]\n\ndef mean(l: list):\n    \"\"\"Return average of the list.\n    >>> mean([1, 2, 3, 4])\n    2\n    >>> mean([4, 5, 3, 2])\n    3.5\n    >>> mean([-10, 1, 2, 3, 4])\n    2.5\n    \"\"\"\n    return sum(l) / float(len(l))\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3, 4])\n    2\n    >>> median_absolute_deviation([4, 5, 3, 2])\n    3.0\n    >>> median_absolute_deviation([-10, 1, 2, 3, 4])\n    2.5\n    \"\"\"\n    return math.sqrt(median_absolute_deviation(l))\n\ndef median_absolute_deviation_with_stdev(l: list):\n    \"\"\"Return median absolute deviation of the list.\n    >>> median_absolute_deviation_with_stdev([1, 2, 3, 4])\n    2\n    >>> median_absolute_deviation_with_stdev([4, 5, 3, 2])\n    3.0\n    >>> median_absolute_deviation_with_stdev([-10, 1, 2, 3, 4])\n    2",
    "return max(l) if len(l) > 0 else -sys.maxsize\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if len(l) > 0 else sys.maxsize\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l.sort()\n    return l[len(l)/2]\n\ndef mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    return sum(l)/float(len(l))\n\ndef median_average_element(l: list):\n    \"\"\"Return median average element in the list.\n    >>> median_average_element([1, 2, 3])\n    2.0\n    >>> median_average_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.0\n    \"\"\"\n    return median_element(l) * 0.5\n\ndef mean_average_element(l: list):\n    \"\"\"Return mean average element in the list.\n    >>> mean_average_element([1, 2, 3])\n    2.5\n    >>> mean_average_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return mean_element(l) * 0.5\n\ndef stddev_element(l: list",
    "return max(l, key=lambda x: x) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x) if l else None\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l = sorted(l)\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 if l else None\n\ndef median_element_and_mean(l: list):\n    \"\"\"Return median element and mean value in the list.\n    >>> median_element_and_mean([1, 2, 3])\n    (2, 2)\n    >>> median_element_and_mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (0, 0)\n    \"\"\"\n    l = sorted(l)\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2, sum(l) / len(l)",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef sum_of_list(l: list):\n    \"\"\"Return sum of list elements.\n    >>> sum_of_list([1, 2, 3, 4])\n    10\n    >>> sum_of_list([1, 2, 3, 4, 5])\n    20\n    >>> sum_of_list([])\n    0\n    \"\"\"\n    return sum(l)\n\ndef average_of_list(l: list):\n    \"\"\"Return average of list elements.\n    >>> average_of_list([1, 2, 3, 4])\n    2.0\n    >>> average_of_list([1, 2, 3, 4, 5])\n    3.0\n    >>> average_of_list([])\n    0.0\n    \"\"\"\n    return sum_of_list(l) / len(l)\n\ndef median_of_list(l: list):\n    \"\"\"Return median of list.\n    >>> median_of_list([1, 2, 3, 4, 5])\n    3.0\n    >>> median_of_list([1, 2, 3, 4])\n    2.0\n    >>> median_of_list([])\n    0.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\ndef find_max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element([1, 2, 3])\n    3\n    >>> find_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return max(l, key=lambda x: x)\n\ndef find_min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>>",
    "return max(l, key=lambda x: x)",
    "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return min(l)\n\n\ndef merge_sort(l: list, key: Callable):\n    \"\"\"Merge sort algorithm.\n    >>> merge_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], lambda x: x)\n    [-10, -5, 3, 5, 9, 123, -3, 2, -1, 1, 3, -5]\n    >>> merge_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], lambda x: x*x)\n    [-10, -5, 3, 5, 9, 123, -3, 2, -1, 1, 3, -5]\n    \"\"\"\n    if not l:\n        return l\n    if len(l) == 1:\n        return l\n    return merge_sort(l[:len(l)//2], key) + \\\n           merge_sort(l[len(l)//2:], key) + \\\n           [key(x) for x in l]\n\n\ndef quick_sort(l: list, key: Callable):\n    \"\"\"Quick sort algorithm.\n    >>> quick_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], lambda x: x)\n    [-10, -5, 3, 5, 9, 123, -3, 2, -1, 1, 3, -5]\n    >>> quick_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10],",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef sum_of_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_of_elements([1, 2, 3])\n    6\n    >>> sum_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return sum(l)\n\n\ndef average_of_elements(l: list):\n    \"\"\"Return average of elements in the list.\n    >>> average_of_elements([1, 2, 3])\n    2.5\n    >>> average_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -0.5\n    \"\"\"\n    return sum_of_elements(l) / len(l)\n\n\ndef median_of_elements(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median_of_elements([1, 2, 3])\n    2\n    >>> median_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\ndef number_of_elements_in_range(l: list, min_, max_):\n    \"\"\"Return number of elements in the range [min_, max_].\n    >>> number_of_elements_in_range([1, 2, 3], 2, 5)\n    3\n    >>> number_of_elements_in_range([5, 3, -5, 2, -3, 3, 9, 0, 123, 1",
    "if not l:\n        return None\n    return max(l)\n\n\ndef max_element_with_index(l: list):\n    \"\"\"Return maximum element in the list and its index.\n    >>> max_element_with_index([1, 2, 3])\n    (3, 0)\n    >>> max_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 4)\n    \"\"\"\n    if not l:\n        return None, None\n    return max(l), max(l).index(max(l))\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l)\n\n\ndef min_element_with_index(l: list):\n    \"\"\"Return minimum element in the list and its index.\n    >>> min_element_with_index([1, 2, 3])\n    (1, 0)\n    >>> min_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 3)\n    \"\"\"\n    if not l:\n        return None, None\n    return min(l), min(l).index(min(l))\n\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3, 4])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    if not l:\n        return None\n    return sorted(l)[len(l) // 2]\n\n\ndef median_with_index(l: list):\n    \"\"\"Return median of the list and its index.\n    >>> median_with_index([1, 2, 3, 4])\n    (2, 1)\n    >>>",
    "if not l:\n        return None\n    return max(l)\n\ndef max_element_with_index(l: list):\n    \"\"\"Return maximum element and its index in the list.\n    >>> max_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 3)\n    \"\"\"\n    return max(enumerate(l), key=lambda x: x[1])[0]",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return (max(l) + min(l)) / 2\n\ndef mean(l: list):\n    \"\"\"Return the mean of the list.\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.0\n    \"\"\"\n    return sum(l) / len(l)\n\ndef std(l: list):\n    \"\"\"Return standard deviation of the list.\n    >>> std([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.828427125\n    \"\"\"\n    return math.sqrt(sum([(x - mean(l)) ** 2 for x in l]) / len(l))\n\ndef var(l: list):\n    \"\"\"Return the variance of the list.\n    >>> var([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    5.0\n    \"\"\"\n    return sum([(x - mean(l)) ** 2 for x in l]) / len(l)\n\ndef skewness(l: list):\n    \"\"\"Return the skewness of the list.\n    >>> skewness([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1.28644908\n    \"\"\"\n    return (sum([(x - mean(l)) ** 3 for x in l]) /\n            (len(l) ** (1",
    "max_value = min_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n        elif i < min_value:\n            min_value = i\n    return max_value\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_value = max_value = l[0]\n    for i in l:\n        if i < min_value:\n            min_value = i\n        elif i > max_value:\n            max_value = i\n    return min_value\n\n\ndef sort_list(l: list, reverse=False):\n    \"\"\"Sort list using quick sort algorithm.\n    >>> sort_list([1, 2, 3, 4])\n    >>> sort_list([4, 3, 2, 1])\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4], reverse=True)\n    >>> sort_list([1, 2, 3, 4],",
    "return max(l, key=lambda x: x)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l = sorted(l)\n    return l[len(l)//2]\n\ndef mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.3333333333333333\n    \"\"\"\n    return sum(l) / len(l)\n\ndef mode_element(l: list):\n    \"\"\"Return mode element in the list.\n    >>> mode_element([1, 2, 3])\n    2\n    >>> mode_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l = sorted(l)\n    return l[len(l)//2]\n\ndef stddev_element(l: list):\n    \"\"\"Return stddev element in the list.\n    >>> stddev_element([1, 2, 3])\n    0.7071067811865475\n    >>> stddev_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.2250738585072014\n    \"\"\"\n    l = sorted(l)\n    mean = mean_element(l)\n    return (sum(l[",
    "return max(l, key=lambda x: x)\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    1\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return max(l, key=lambda x: x[0])[1]\n\ndef max_element_value(l: list):\n    \"\"\"Return maximum element value in the list.\n    >>> max_element_value([1, 2, 3])\n    3\n    >>> max_element_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=lambda x: x[1])[1]\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return min(l, key=lambda x: x[0])[1]\n\ndef min_element_value(l: list):\n    \"\"\"Return minimum element value in the list.\n    >>> min_element_value([1, 2, 3])\n    1\n    >>> min_element_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return min(l, key=lambda x: x[1])[1]",
    "return max(l) if l else 0\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else 0\n\ndef minmax_element(l: list):\n    \"\"\"Return minimum and maximum element in the list.\n    >>> minmax_element([1, 2, 3])\n    (1, 3)\n    >>> minmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123)\n    \"\"\"\n    return (min_element(l), max_element(l))\n\ndef get_max_min(l: list):\n    \"\"\"Return maximum and minimum element in the list.\n    >>> get_max_min([1, 2, 3])\n    (3, 1)\n    >>> get_max_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123)\n    \"\"\"\n    return minmax_element(l)\n\ndef get_min_max(l: list):\n    \"\"\"Return minimum and maximum element in the list.\n    >>> get_min_max([1, 2, 3])\n    (1, 3)\n    >>> get_min_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123)\n    \"\"\"\n    return minmax_element(l)\n\ndef get_median_of_three(l: list):\n    \"\"\"Return median of three elements in the list.\n    >>> get_median_of_three([1, 2, 3])\n    2\n    >>> get_median_of_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return (sum(l) - l[0] - l[",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\ndef count_if(predicate: Callable, l: list) -> int:\n    \"\"\"Count elements of list where predicate is true.\n    >>> count_if(lambda x: x > 0, [1, -2, 3, 4, 5])\n    4\n    \"\"\"\n    return sum(1 for x in l if predicate(x))\n\ndef sum_if(predicate: Callable, l: list) -> int:\n    \"\"\"Sum elements of list where predicate is true.\n    >>> sum_if(lambda x: x > 0, [1, -2, 3, 4, 5])\n    -5\n    \"\"\"\n    return sum(1 for x in l if predicate(x))\n\ndef product_if(predicate: Callable, l: list) -> int:\n    \"\"\"Product elements of list where predicate is true.\n    >>> product_if(lambda x: x > 0, [1, -2, 3, 4, 5])\n    -120\n    \"\"\"\n    return product(1 for x in l if predicate(x))\n\ndef any_if(predicate: Callable, l: list) -> bool:\n    \"\"\"Return true if any element in list where predicate is true.\n    >>> any_if(lambda x: x > 0, [1, -2, 3, 4, 5])\n    True\n    \"\"\"\n    return any(1 for x in l if predicate(x))\n\ndef all_if(predicate: Callable, l: list) -> bool:\n    \"\"\"Return true if all elements in list where predicate is true.\n    >>> all_if(lambda x: x > 0, [1, -2, 3, 4, 5])\n    True\n    \"\"\"\n    return all(1 for x in l if predicate(x))",
    "return max(l) if l else None\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\n\ndef median(l: list):\n    \"\"\"Return median of the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l = sorted(l)\n    return l[len(l) // 2] if len(l) > 0 else None\n\n\ndef median_with_alternate(l: list):\n    \"\"\"Return median of the list.\n    >>> median_with_alternate([1, 2, 3])\n    2\n    >>> median_with_alternate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n\ndef mean(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    return sum(l) / len(l) if l else None\n\n\ndef mean_with_alternate(l: list):\n    \"\"\"Return mean of the list.\n    >>> mean_with_alternate([1, 2, 3])\n    2.0\n    >>> mean_with_alternate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5",
    "if not l:\n        return None\n\n    max_elem = l[0]\n    max_elem_idx = 0\n    for idx, elem in enumerate(l):\n        if elem > max_elem:\n            max_elem = elem\n            max_elem_idx = idx\n\n    return max_elem, max_elem_idx\n\n\ndef max_element_idx(l: list):\n    \"\"\"Return maximum element index in the list.\n    >>> max_element_idx([1, 2, 3])\n    0\n    >>> max_element_idx([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    max_elem, max_elem_idx = max_element(l)\n    return max_elem_idx\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n\n    min_elem = l[0]\n    min_elem_idx = 0\n    for idx, elem in enumerate(l):\n        if elem < min_elem:\n            min_elem = elem\n            min_elem_idx = idx\n\n    return min_elem, min_elem_idx\n\n\ndef min_element_idx(l: list):\n    \"\"\"Return minimum element index in the list.\n    >>> min_element_idx([1, 2, 3])\n    0\n    >>> min_element_idx([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    min_elem, min_elem_idx = min_element(l)\n    return min_elem_idx",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef min_max_element(l: list):\n    \"\"\"Return minimum and maximum element in the list.\n    >>> min_max_element([1, 2, 3])\n    (1, 3)\n    >>> min_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123)\n    \"\"\"\n    return min(l), max(l)\n\n\ndef min_max_avg_element(l: list):\n    \"\"\"Return minimum, maximum and average element in the list.\n    >>> min_max_avg_element([1, 2, 3])\n    (1, 3, 2.0)\n    >>> min_max_avg_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 123, 5.0)\n    \"\"\"\n    return min(l), max(l), sum(l) / len(l)",
    "if len(l) == 0:\n        raise ValueError(\"empty list\")\n\n    if len(l) == 1:\n        return l[0]\n\n    return max(l, key=lambda x: x[0])\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"empty list\")\n\n    if len(l) == 1:\n        return l[0]\n\n    return min(l, key=lambda x: x[0])",
    "if not l:\n        return None\n    else:\n        return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return median(l, key=lambda x: x)\n\n\ndef median_element_from_sorted_list(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_from_sorted_list([1, 2, 3])\n    2\n    >>> median_element_from_sorted_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return median(l)\n\n\ndef median_element_from_sorted_list_2(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_from_sorted_list_2([1, 2, 3])\n    2\n    >>> median_element_from_sorted_list_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return median(l, key=lambda x: x)\n\n\ndef median_element_from_sorted_list_3(l: list):",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -15\n    \"\"\"\n    return sum(l, key=lambda x: x)",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef find_index(l: list, val: int, start: int = 0):\n    \"\"\"Return index of element in the list, that equals the given value.\n    >>> find_index([1, 2, 3, 4, 5, 6], 3)\n    2\n    >>> find_index([1, 2, 3, 4, 5, 6], 4)\n    3\n    >>> find_index([1, 2, 3, 4, 5, 6], 7)\n    Traceback (most recent call last):\n   ...\n    ValueError: 7 is not in the list\n    >>> find_index([1, 2, 3, 4, 5, 6], -1)\n    Traceback (most recent call last):\n   ...\n    ValueError: -1 is not in the list\n    \"\"\"\n    return l.index(val, start)\n\n\ndef find_first(l: list, val: int):\n    \"\"\"Return first index of element in the list that equals the given value.\n    >>> find_first([1, 2, 3, 4, 5, 6], 3)\n    2\n    >>> find_first([1, 2, 3, 4, 5, 6], 4)\n    3\n    >>> find_first([1, 2, 3, 4, 5, 6], 7)\n    Traceback (most recent call last):\n   ...\n    ValueError: 7 is not in the list\n    >>> find_first([1, 2, 3, 4, 5, 6], -1)\n    Traceback (most recent call last):\n   ...\n    ValueError: -1 is not in the list\n    \"\"\"\n    return find_index(l, val)\n\n\ndef find_last(l: list, val: int):\n    \"\"\"Return last index of element in the list that",
    "return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l) if l else None\n\ndef max_length(l: list):\n    \"\"\"Return maximum length of the list.\n    >>> max_length([1, 2, 3])\n    3\n    >>> max_length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return len(max(l, key=len)) if l else 0\n\ndef min_length(l: list):\n    \"\"\"Return minimum length of the list.\n    >>> min_length([1, 2, 3])\n    1\n    >>> min_length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    return len(min(l, key=len)) if l else 0",
    "if len(l) == 0:\n        raise ValueError(\"Empty list\")\n    return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Empty list\")\n    return min(l)",
    "if not l:\n        return None\n    return max(l, key=lambda x: x)\n\n\ndef max_element_with_index(l: list):\n    \"\"\"Return the maximum element in the list and its index.\n    >>> max_element_with_index([1, 2, 3])\n    (3, 2)\n    >>> max_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 4)\n    \"\"\"\n    if not l:\n        return None\n    return max(l, key=lambda x: x), len(l) - 1\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l, key=lambda x: x)\n\n\ndef min_element_with_index(l: list):\n    \"\"\"Return the minimum element in the list and its index.\n    >>> min_element_with_index([1, 2, 3])\n    (1, 0)\n    >>> min_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 3)\n    \"\"\"\n    if not l:\n        return None\n    return min(l, key=lambda x: x), len(l) - 1\n\n\ndef mean(l: list):\n    \"\"\"Return the arithmetic mean of the elements in the list.\n    >>> mean([1, 2, 3, 4])\n    2.5\n    >>> mean([1, 2, 3, 4, 5])\n    3.5\n    \"\"\"\n    if not l:\n        return None\n    return sum(l) / len(l)\n\n\ndef median(l: list):\n    \"\"\"Return the median of the elements in the list.\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([",
    "if len(l) == 0:\n        return None\n    else:\n        return max(l, key=lambda x: x)",
    "# TODO: add a max_element_inplace method.\n    return l[0]\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # TODO: add a min_element_inplace method.\n    return l[0]\n\ndef random_element(l: list):\n    \"\"\"Return a random element in the list.\n    >>> random_element([1, 2, 3])\n    2\n    >>> random_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # TODO: add a random_element_inplace method.\n    return l[random.randint(0, len(l) - 1)]\n\ndef random_list(l: list, n: int = 10):\n    \"\"\"Return a random list of n elements.\n    >>> random_list([1, 2, 3])\n    [2, 3, 1]\n    >>> random_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 1, -3, 9, -5, 3, 123, 2, 3, -10, 5]\n    \"\"\"\n    # TODO: add a random_list_inplace method.\n    return [random.randint(0, n) for _ in range(n)]\n\ndef random_shuffle(l: list):\n    \"\"\"Shuffle the list.\n    >>> random_shuffle([1, 2, 3])\n    [3, 2, 1]\n    >>> random_shuffle([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 1, -3, 9, -5, 3, 123, 2, 3, -10, 5]\n    \"\"\"\n    # TODO: add a random_shuffle_inplace method.\n    random.",
    "if not l:\n        return None\n    return max(l)",
    "max_val = None\n    max_index = 0\n    for i, val in enumerate(l):\n        if val > max_val:\n            max_val = val\n            max_index = i\n    return l[max_index]\n\ndef max_element_two(l: list):\n    \"\"\"Return maximum element in the list, taking into account equal values.\n    >>> max_element_two([1, 2, 3])\n    3\n    >>> max_element_two([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = None\n    max_index = 0\n    for i, val in enumerate(l):\n        if val > max_val:\n            max_val = val\n            max_index = i\n    if max_index > 0:\n        return l[max_index - 1]\n    else:\n        return l[0]\n\ndef max_element_three(l: list):\n    \"\"\"Return maximum element in the list, taking into account equal values.\n    >>> max_element_three([1, 2, 3])\n    3\n    >>> max_element_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = None\n    max_index = 0\n    for i, val in enumerate(l):\n        if val > max_val:\n            max_val = val\n            max_index = i\n    if max_index > 0:\n        return l[max_index - 1]\n    else:\n        return l[0]",
    "if not l:\n        raise ValueError(\"Cannot find the maximum element of an empty list\")\n    return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot find the minimum element of an empty list\")\n    return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l.sort()\n    if not l:\n        raise ValueError(\"Cannot find the median element of an empty list\")\n    return l[len(l) // 2]\n\n\ndef median_element_with_replacement(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element_with_replacement([1, 2, 3])\n    2\n    >>> median_element_with_replacement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    l.sort()\n    if not l:\n        raise ValueError(\"Cannot find the median element of an empty list\")\n    return l[len(l) // 2]\n\n\ndef mean(l: list):\n    \"\"\"Return mean value in the list.\n    >>> mean([1, 2, 3])\n    2\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.5\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef mode(l: list):\n    \"\"\"Return mode element in the list.\n    >>> mode([1, 2, 3])",
    "if not l:\n        raise ValueError('Empty list')\n    return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError('Empty list')\n    return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    if not l:\n        raise ValueError('Empty list')\n    return sorted(l)[(len(l) - 1) // 2]\n\n\ndef median_average(l: list):\n    \"\"\"Return median and average of elements in the list.\n    >>> median_average([1, 2, 3])\n    (2, 2.5)\n    >>> median_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (0, -1.25)\n    \"\"\"\n    if not l:\n        raise ValueError('Empty list')\n    return median_element(l), sum(l) / len(l)\n\n\ndef median_deviation(l: list):\n    \"\"\"Return median and deviation of elements in the list.\n    >>> median_deviation([1, 2, 3])\n    (2, 1)\n    >>> median_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (0, 2.5)\n    \"\"\"\n    if not l:\n        raise ValueError('Empty list')\n    return median_element(l), sum(l) / len(l) - median_average(l)[1]\n\n\ndef median_deviation_bounded(l:",
    "return max(l, key=lambda x: x)",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef is_in_list(element: object, l: list):\n    \"\"\"Check if element is in list.\n    >>> is_in_list(1, [1, 2, 3])\n    True\n    >>> is_in_list(0, [1, 2, 3])\n    False\n    \"\"\"\n    return element in l\n\n\ndef is_even(number: int):\n    \"\"\"Check if number is even.\n    >>> is_even(2)\n    False\n    >>> is_even(4)\n    True\n    \"\"\"\n    return number % 2 == 0\n\n\ndef is_odd(number: int):\n    \"\"\"Check if number is odd.\n    >>> is_odd(2)\n    True\n    >>> is_odd(4)\n    False\n    \"\"\"\n    return not is_even(number)\n\n\ndef is_prime(n: int):\n    \"\"\"Check if number is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    return not is_even(n) and not is_in_list(n, [2, 3, 5, 7, 11, 13])\n\n\ndef is_palindrome(n: int):\n    \"\"\"Check if number is palindrome.\n    >>> is_palindrome(2)\n    False\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(1234)\n    True\n    >>> is_palindrome(0)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_happy(n: int):\n    \"\"\"Check if number is happy.\n    >>> is_happy(1)\n    False\n    >>> is_happy",
    "if not l:\n        raise ValueError('Empty list.')\n    return max(l) if len(l) > 1 else l[0]",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef median(l: list):\n    \"\"\"Return the median of the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2\n    else:\n        return l[len(l) / 2]\n\n\ndef median_average(l: list):\n    \"\"\"Return the median of the list.\n    >>> median_average([1, 2, 3])\n    2\n    >>> median_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3.5\n    \"\"\"\n    return median(l)\n\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return the median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3])\n    1\n    >>> median_absolute_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.84892\n    \"\"\"\n    median = median(l)\n    return median_absolute_deviation_from_median(median, l)\n\n\ndef median_absolute_deviation_from_median(median: float, l: list):\n    \"\"\"Return the median absolute deviation of the list.\n    >>> median_absolute_deviation_from_median(2, [1, 2, 3])\n    1\n    >>> median_absolute_deviation",
    "# TODO: implement it better\n    return max(l) if l else None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # TODO: implement it better\n    return min(l) if l else None\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if len(l) == 0:\n        raise ValueError('Cannot find the max element from an empty list.')\n    return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Cannot find the min element from an empty list.')\n    return min(l, key=lambda x: x)\n\n\ndef get_all_combinations(l: list, n: int):\n    \"\"\"Get all n-combinations of l.\n    >>> get_all_combinations([1, 2, 3], 3)\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    >>> get_all_combinations([1, 2, 3], 2)\n    [[1, 2], [1, 3], [2, 3]]\n    \"\"\"\n    if n == 0:\n        yield []\n    else:\n        for i in range(len(l)):\n            for cc in get_all_combinations(l[:i] + l[i + 1:], n - 1):\n                yield [l[i]] + cc",
    "if len(l) == 0:\n        return None\n    else:\n        return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return min(l)\n\n\ndef argmax_element(l: list):\n    \"\"\"Return the index of the maximum element in the list.\n    >>> argmax_element([1, 2, 3])\n    1\n    >>> argmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return max(enumerate(l), key=lambda t: t[1])[0]\n\n\ndef argmin_element(l: list):\n    \"\"\"Return the index of the minimum element in the list.\n    >>> argmin_element([1, 2, 3])\n    0\n    >>> argmin_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return min(enumerate(l), key=lambda t: t[1])[0]",
    "if not l:\n        raise ValueError(\"Empty list\")\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])\n\n\ndef max_element_with_value_sorted(l: list):\n    \"\"\"Return maximum element in the list, but the value is sorted.\n    >>> max_element_with_value_sorted([1, 2, 3])\n    3\n    >>> max_element_with_value_sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"Empty list\")\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: (x[1], x[0]))\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"Empty list\")\n    if len(l) == 1:\n        return l[0]\n    return min(l, key=lambda x: x[0])\n\n\ndef min_element_with_value_sorted(l: list):\n    \"\"\"Return minimum element in the list, but the value is sorted.\n    >>> min_element_with_value_sorted([1, 2, 3])\n    1\n    >>> min_element_with_value_sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"Empty list\")\n    if len(l) == 1:\n        return l[0]\n    return min(l, key=lambda x: (x[1], x[0]))\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([",
    "if not l:\n        return None\n    return max(l) if not isinstance(l[0], float) else l[0]\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    return min(l) if not isinstance(l[0], float) else l[0]",
    "if len(l) == 0:\n        raise ValueError('List is empty')\n    elif len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return l[0]\n    else:\n        return max_element(l[1:])",
    "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return max(l)\n    return max(l, key=lambda x: x[0])\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return min(l)\n    return min(l, key=lambda x: x[0])\n\n\ndef median(l: list):\n    \"\"\"Return median element in the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2\n    return l[len(l) // 2]\n\n\ndef mean(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean([1, 2, 3])\n    2\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1.25\n    \"\"\"\n    if not l:\n        return None\n    return sum(l) / len(l)\n\n\ndef median_absolute_deviation(l: list):\n    \"\"\"Return median absolute deviation of the list.\n    >>> median_absolute_deviation([1, 2, 3])\n    0\n    >>> median_absolute_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.0",
    "if not l:\n        raise ValueError(\"Cannot calculate max element from empty list\")\n    return max(l)\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot calculate min element from empty list\")\n    return min(l)\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_elements([1, 2, 3, 4])\n    10\n    >>> sum_elements([-1, -2, -3, -4])\n    -10\n    >>> sum_elements([])\n    0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot calculate sum element from empty list\")\n    return sum(l)\n\ndef mean_elements(l: list):\n    \"\"\"Return mean of all elements in the list.\n    >>> mean_elements([1, 2, 3, 4])\n    2.5\n    >>> mean_elements([1, 2, 3, 4])\n    2.5\n    >>> mean_elements([1, 2, 3, 4])\n    2.5\n    >>> mean_elements([])\n    0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot calculate mean element from empty list\")\n    return sum_elements(l) / len(l)\n\ndef median_elements(l: list):\n    \"\"\"Return median of all elements in the list.\n    >>> median_elements([1, 2, 3, 4])\n    2\n    >>> median_elements([1, 2, 3, 4])\n    2\n    >>> median_elements([1, 2, 3, 4])\n    2\n    >>> median_elements([1, 2, 3, 4])\n    2\n    >>> median_elements([])\n    0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Cannot calculate median element from",
    "if not l:\n        raise ValueError('empty list')\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])[0]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise ValueError('empty list')\n    if len(l) == 1:\n        return l[0]\n    return min(l, key=lambda x: x[0])[0]\n\n\ndef get_min_max_value(l: list):\n    \"\"\"Return the minimum and maximum value in the list.\n    >>> get_min_max_value([1, 2, 3])\n    (1, 3)\n    >>> get_min_max_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (9, -10)\n    \"\"\"\n    if not l:\n        raise ValueError('empty list')\n    if len(l) == 1:\n        return l[0], l[0]\n    return min(l, key=lambda x: x[0]), max(l, key=lambda x: x[0])\n\n\ndef get_min_max_value_index(l: list):\n    \"\"\"Return the minimum and maximum value in the list, and the index of the\n    minimum and maximum value in the list.\n    >>> get_min_max_value_index([1, 2, 3])\n    (1, 3, 0)\n    >>> get_min_max_value_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (9, -10, 3)\n    \"\"\"\n    if not l:\n        raise ValueError('empty list')\n    if len(l) == 1:\n        return l[0], l[0], 0\n    return min(l, key=lambda",
    "if not l:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return min(l, key=lambda x: x)",
    "return max(l, key=lambda x: x)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef argmax_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> argmax_element([1, 2, 3])\n    2\n    >>> argmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -3\n    \"\"\"\n    return argmax(l, key=lambda x: x)\n\n\ndef argmin_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> argmin_element([1, 2, 3])\n    1\n    >>> argmin_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return argmin(l, key=lambda x: x)\n\n\ndef argmax(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> argmax([1, 2, 3])\n    3\n    >>> argmax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return max(l, key=lambda x: x)\n\n\ndef argmin(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> argmin([1, 2, 3])\n    1\n    >>> argmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return min(l, key=lambda x: x)\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3,",
    "if not l:\n        raise TypeError(\"no elements\")\n\n    try:\n        return max(l)\n    except ValueError:\n        raise TypeError(\"no elements\")\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        raise TypeError(\"no elements\")\n\n    try:\n        return min(l)\n    except ValueError:\n        raise TypeError(\"no elements\")",
    "if not l:\n        return None\n\n    return max(l, key=lambda x: x)\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
    "if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return max(l, key=lambda x: x[0])"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}