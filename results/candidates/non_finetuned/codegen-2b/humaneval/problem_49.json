{
  "problem": {
    "task_id": "HumanEval/49",
    "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
    "entry_point": "modp",
    "docstring": "",
    "problem_id": 49
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "assert n > 0\n    assert p > 0\n    assert p < n\n    if p == 1:\n        return 0\n    if p == 2:\n        return n % 2\n    return pow(2, p-1, p) % n\n\ndef modp2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp2(3, 5)\n    2\n    >>> modp2(1101, 101)\n    2\n    >>> modp2(0, 101)\n    1\n    >>> modp2(3, 11)\n    8\n    >>> modp2(100, 101)\n    1\n    \"\"\"\n    assert n > 0\n    assert p > 0\n    assert p < n\n    if p == 1:\n        return 0\n    if p == 2:\n        return n % 2\n    return pow(2, p-1, p) % n\n\ndef modp3(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp3(3, 5)\n    2\n    >>> modp3(1101, 101)\n    2\n    >>> modp3(0, 101)\n    1\n    >>> modp3(3, 11)\n    8\n    >>> modp3(100, 101)\n    1\n    \"\"\"\n    assert n > 0\n    assert p > 0\n    assert p < n\n    if p == 1:\n        return 0\n    if p == 2:\n        return n % 2\n    return pow(2, p-1, p) % n\n\ndef modp4(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp4(3, 5)\n    2\n    >>> modp4(1101, 101)\n    2\n    >>> modp4(0, 101)\n    1\n    >>> modp4(3, 11)\n    8\n    >>> modp4(100, 101)\n    1\n    \"\"\"\n    assert n > 0\n    assert p > 0\n    assert p < n\n    if p == 1",
    "return (n % p) if n >= 0 else (p + n % -p) % p\n\ndef modinv(p: int, m: int):\n    \"\"\"Return the multiplicative inverse of p modulo m (p*q)\n    >>> modinv(3, 4)\n    3\n    >>> modinv(3, 5)\n    1\n    >>> modinv(3, 7)\n    2\n    >>> modinv(3, 11)\n    4\n    >>> modinv(0, 1)\n    Traceback (most recent call last):\n   ...\n    ZeroDivisionError: modinv(0, 1)\n    >>> modinv(3, 100)\n    Traceback (most recent call last):\n   ...\n    ValueError: modinv(3, 100)\n    >>> modinv(3, 101)\n    Traceback (most recent call last):\n   ...\n    ValueError: modinv(3, 101)\n    \"\"\"\n    if p == 0 or m == 1:\n        raise ZeroDivisionError(\"modinv(0, 1) or modinv(1, 1)\")\n    if m == 0:\n        raise ValueError(\"modinv(3, 100) or modinv(3, 101)\")\n    p, m = int(p), int(m)\n    if p < 0 or m < 0:\n        raise ValueError(\"modinv(3, 100) or modinv(3, 101)\")\n    if m == 1:\n        return 1\n    if p == 1 or p == m:\n        return 1\n    # Recursive case\n    q = 1\n    while p > 1:\n        q = (q * p) % m\n        p = (p - q * q) % m\n    return q\n\ndef modexp(x: int, p: int, m: int):\n    \"\"\"Return x^p mod m (p * x * x^-1)\n    >>> modexp(3, 2, 5)\n    3\n    >>> modexp(3, 2, 7)\n    7\n    >>> modexp(3, 2, 101)\n    2\n    >>> modexp(3, 2, 100)\n    Traceback (most recent call last):\n   ...",
    "assert p > 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)\n\ndef mod(n: int, m: int):\n    \"\"\"Return n % m (be aware of numerics).\n    >>> mod(7, 5)\n    2\n    >>> mod(-7, 5)\n    -2\n    >>> mod(7, -5)\n    -2\n    >>> mod(-7, -5)\n    2\n    >>> mod(7, 0)\n    7\n    >>> mod(-7, 0)\n    -7\n    >>> mod(7, 1)\n    0\n    >>> mod(-7, 1)\n    0\n    \"\"\"\n    assert m > 0\n    return (n % m)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return (inverse of n modulo p) (be aware of numerics).\n    >>> modp_inv(7, 5)\n    2\n    >>> modp_inv(-7, 5)\n    -2\n    >>> modp_inv(7, -5)\n    -2\n    >>> modp_inv(-7, -5)\n    2\n    >>> modp_inv(7, 0)\n    7\n    >>> modp_inv(-7, 0)\n    -7\n    >>> modp_inv(7, 1)\n    0\n    >>> modp_inv(-7, 1)\n    0\n    \"\"\"\n    assert p > 0\n    return mod(n, p)\n\ndef mod_pow(n: int, p: int, k: int):\n    \"\"\"Return n^k (be aware of numerics).\n    >>> mod_pow(5, 7, 3)\n    25\n    >>> mod_pow(5, 7, -3)\n    -25\n    >>> mod_pow(5, 7, 0)\n    1\n    >>> mod_pow(5, 7, 1)\n    5\n    >>> mod_pow(5, 7, -1)\n    -5\n    >>> mod_pow(5, 7, 2)\n    25\n    >>> mod_pow(5, 7, -2)\n    -25",
    "return pow(2, n, p)\n\ndef modinv(p: int, q: int):\n    \"\"\"Compute modular inverse.\n    >>> modinv(11, 101)\n    5\n    >>> modinv(11, 101)\n    5\n    >>> modinv(11, 101)\n    5\n    \"\"\"\n    return modp(p - q * modp(1, p), p)\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(101)\n    False\n    >>> is_prime(101)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    r = 5\n    while r < n:\n        r += 2\n    f = pow(r, n - 1, n)\n    if f == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if f == n - 1:\n            return True\n        if f % i == 0:\n            return False\n    return True\n\ndef is_prime_v2(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_v2(2)\n    False\n    >>> is_prime_v2(3)\n    True\n    >>> is_prime_v2(11)\n    False\n    >>> is_prime_v2(101)\n    False\n    >>> is_prime_v2(101)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    r = 5\n    while r < n:\n        r += 2\n    f = pow(r, n - 1, n)\n    if f == 1:\n        return False",
    "return (n % p) % p\n\n\ndef modmul(n: int, m: int):\n    \"\"\"Return n * m modulo p (be aware of numerics).\n    >>> modmul(3, 5)\n    15\n    >>> modmul(1101, 101)\n    6\n    >>> modmul(0, 101)\n    0\n    >>> modmul(3, 11)\n    9\n    >>> modmul(100, 101)\n    1\n    \"\"\"\n    return (n * m) % m\n\n\ndef modexp(n: int, e: int):\n    \"\"\"Return n ^ e modulo p (be aware of numerics).\n    >>> modexp(3, 2)\n    9\n    >>> modexp(1101, 101)\n    25\n    >>> modexp(0, 101)\n    0\n    >>> modexp(3, 11)\n    9\n    >>> modexp(100, 101)\n    1\n    \"\"\"\n    return (n ** e) % m\n\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n ** p modulo p (be aware of numerics).\n    >>> modpow(3, 5)\n    3\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    8\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    return (n ** p) % m\n\n\ndef modinv(n: int, m: int):\n    \"\"\"Return n modulo inverse of m (be aware of numerics).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    8\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modpow(m, modp(n, m))\n\n\ndef modsqrt(n: int, m: int):\n    \"\"\"Return square root of n modulo m (be aware of numerics).\n    >>> modsqrt(3, 5)",
    "return pow(2, n, p)\n\ndef modmul(a: int, b: int, m: int):\n    \"\"\"Return a*b mod m (be aware of numerics).\n    >>> modmul(3, 5, 101)\n    5\n    >>> modmul(3, 7, 101)\n    1\n    >>> modmul(3, 11, 101)\n    1\n    >>> modmul(3, 11, 101)\n    3\n    >>> modmul(3, 101, 101)\n    101\n    >>> modmul(3, 101, 101)\n    101\n    >>> modmul(3, 3, 101)\n    3\n    \"\"\"\n    return (a*b) % m\n\ndef modexp(a: int, b: int, m: int):\n    \"\"\"Return a^b mod m (be aware of numerics).\n    >>> modexp(3, 5, 101)\n    15\n    >>> modexp(3, 7, 101)\n    3\n    >>> modexp(3, 11, 101)\n    3\n    >>> modexp(3, 101, 101)\n    3\n    >>> modexp(3, 3, 101)\n    3\n    >>> modexp(3, 3, 101)\n    3\n    \"\"\"\n    return pow(a, b, m)\n\ndef modinv(n: int, m: int):\n    \"\"\"Return the multiplicative inverse of n modulo m (be aware of numerics).\n    >>> modinv(3, 101)\n    3\n    >>> modinv(3, 101)\n    3\n    >>> modinv(3, 101)\n    3\n    >>> modinv(3, 101)\n    3\n    >>> modinv(3, 101)\n    3\n    >>> modinv(3, 101)\n    3\n    \"\"\"\n    return modexp(m, (modp(n, m) - 1), m)\n\ndef modpow(a: int, b: int, m: int):\n    \"\"\"Return a^b mod m (be aware of numerics).\n    >>> modpow(3, 5, 101)\n    15\n    >>> modpow(3, 7, 101)\n    3",
    "if n == 0:\n        return 1\n    return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(3, 11)\n    3\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(modp(p, p - 2), a, p)\n\ndef modexp(a: int, b: int, p: int):\n    \"\"\"Return a^b modulo p (be aware of numerics).\n    >>> modexp(3, 2, 5)\n    3\n    >>> modexp(3, 2, 11)\n    7\n    >>> modexp(3, 2, 101)\n    3\n    >>> modexp(3, 2, 100)\n    1\n    >>> modexp(100, 101, 101)\n    1\n    \"\"\"\n    return pow(a, b, p)\n\ndef modmul(a: int, b: int, p: int):\n    \"\"\"Return a*b modulo p (be aware of numerics).\n    >>> modmul(3, 2, 5)\n    3\n    >>> modmul(3, 2, 11)\n    7\n    >>> modmul(3, 2, 101)\n    3\n    >>> modmul(3, 2, 100)\n    1\n    >>> modmul(100, 101, 101)\n    1\n    \"\"\"\n    return pow(a, b, p)\n\ndef modpow(a: int, n: int, p: int):\n    \"\"\"Return a^n modulo p (be aware of numerics).\n    >>> modpow(3, 2, 5)\n    3\n    >>> modpow(3, 2, 11)\n    7\n    >>> modpow(3, 2, 101)\n    3\n    >>> modpow(3, 2, 100)\n    1\n    >>> modpow(100, 101, 101)\n    1\n    \"\"\"\n    return pow(a, n, p",
    "return pow(2, n, p)\n\ndef modinv(n: int, m: int):\n    \"\"\"Return the multiplicative inverse of n modulo m (be aware of numerics).\n    >>> modinv(3, 5)\n    1\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    3\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modp(m, pow(m, (n-1), n))\n\ndef modexp(n: int, e: int, m: int):\n    \"\"\"Return n raised to the e-th power modulo m (be aware of numerics).\n    >>> modexp(3, 3, 5)\n    3\n    >>> modexp(1101, 3, 101)\n    7\n    >>> modexp(0, 3, 101)\n    0\n    >>> modexp(3, 3, 11)\n    3\n    >>> modexp(100, 3, 101)\n    7\n    \"\"\"\n    return pow(n, e, m)\n\ndef modgcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b (be aware of numerics).\n    >>> modgcd(3, 5)\n    3\n    >>> modgcd(1101, 101)\n    5\n    >>> modgcd(0, 101)\n    1\n    >>> modgcd(3, 11)\n    3\n    >>> modgcd(100, 101)\n    101\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef modlcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b (be aware of numerics).\n    >>> modlcm(3, 5)\n    15\n    >>> modlcm(1101, 101)\n    55\n    >>> modlcm(0, 101)\n    1\n    >>> modlcm(3, 11)\n    15\n    >>> modlcm(100, 101)\n    101\n    \"\"\"\n    return a * b / modgcd(a",
    "return pow(2, n, p)\n\ndef gcd(a: int, b: int):\n    \"\"\"Greatest common divisor.\n    >>> gcd(3, 7)\n    3\n    >>> gcd(4, 7)\n    1\n    >>> gcd(0, 0)\n    0\n    >>> gcd(4, -7)\n    -4\n    >>> gcd(0, -7)\n    0\n    >>> gcd(-4, 7)\n    -4\n    >>> gcd(-4, -7)\n    4\n    >>> gcd(0, 0)\n    0\n    >>> gcd(-4, -7)\n    -4\n    \"\"\"\n    while b:\n        a, b = b, a%b\n    return a\n\ndef lcm(a: int, b: int):\n    \"\"\"Least common multiple.\n    >>> lcm(3, 7)\n    21\n    >>> lcm(4, 7)\n    28\n    >>> lcm(0, 0)\n    0\n    >>> lcm(4, -7)\n    -28\n    >>> lcm(0, -7)\n    0\n    >>> lcm(-4, 7)\n    28\n    >>> lcm(-4, -7)\n    -28\n    >>> lcm(0, 0)\n    0\n    >>> lcm(-4, -7)\n    -28\n    \"\"\"\n    return a * b / gcd(a, b)",
    "return (2**n) % p\n\ndef modinv(a: int, m: int):\n    \"\"\"Return the modular multiplicative inverse of a modulo m (be aware of numerics).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(3, 7)\n    5\n    >>> modinv(0, 7)\n    0\n    >>> modinv(1, 7)\n    2\n    >>> modinv(6, 7)\n    2\n    >>> modinv(3, 11)\n    3\n    >>> modinv(6, 11)\n    5\n    \"\"\"\n    return (a % m) if (a % m)!= 0 else modp(m, a % m)\n\ndef isprime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> isprime(2)\n    True\n    >>> isprime(3)\n    True\n    >>> isprime(4)\n    False\n    >>> isprime(5)\n    False\n    >>> isprime(6)\n    True\n    >>> isprime(7)\n    False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(2**3)\n    True\n    >>> is_prime(2**3+1)\n    False\n    >>> is_prime(2**3+2)\n    True\n    >>> is_prime(2**3+3)\n    False\n    >>> is_prime(2**3+5)\n    False\n    >>> is_prime(2**3+6)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True",
    "return pow(2, n, p)\n\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n modulo m (be aware of numerics).\n    >>> modm(3, 5)\n    3\n    >>> modm(1101, 101)\n    3\n    >>> modm(0, 101)\n    1\n    >>> modm(3, 11)\n    8\n    >>> modm(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, m)\n\n\ndef modm_inv(n: int, m: int):\n    \"\"\"Return inverse of 2^n modulo m (be aware of numerics).\n    >>> modm_inv(3, 5)\n    2\n    >>> modm_inv(1101, 101)\n    2\n    >>> modm_inv(0, 101)\n    1\n    >>> modm_inv(3, 11)\n    8\n    >>> modm_inv(100, 101)\n    1\n    \"\"\"\n    return pow(m, -1, n)\n\n\ndef modm_inv2(n: int, m: int):\n    \"\"\"Return inverse of 2^n modulo m (be aware of numerics).\n    >>> modm_inv2(3, 5)\n    2\n    >>> modm_inv2(1101, 101)\n    2\n    >>> modm_inv2(0, 101)\n    1\n    >>> modm_inv2(3, 11)\n    8\n    >>> modm_inv2(100, 101)\n    1\n    \"\"\"\n    return pow(m, -1, n)\n\n\ndef modm_inv3(n: int, m: int):\n    \"\"\"Return inverse of 2^n modulo m (be aware of numerics).\n    >>> modm_inv3(3, 5)\n    2\n    >>> modm_inv3(1101, 101)\n    2\n    >>> modm_inv3(0, 101)\n    1\n    >>> modm_inv3(3, 11)\n    8\n    >>> modm_inv3(100, 101)\n    1\n    \"\"\"\n    return pow(m, -1, n)",
    "return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n % m.\n    >>> modm(3, 5)\n    2\n    >>> modm(1101, 101)\n    3\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    1\n    >>> modm(100, 101)\n    101\n    \"\"\"\n    return pow(2, n, m) % m\n\ndef modpow(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modpow(3, 5)\n    3\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    8\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n % m.\n    >>> modm(3, 5)\n    2\n    >>> modm(1101, 101)\n    3\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    1\n    >>> modm(100, 101)\n    101\n    \"\"\"\n    return pow(2, n, m) % m\n\ndef modpowm(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modpowm(3, 5)\n    3\n    >>> modpowm(1101, 101)\n    2\n    >>> modpowm(0, 101)\n    1\n    >>> modpowm(3, 11)\n    8\n    >>> modpowm(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n % m.\n    >>> modm(3, 5)\n    2\n    >>> modm(1101, 101)",
    "return pow(2, n, p)\n\n\ndef divmod(a: int, b: int):\n    \"\"\"Divide a by b and return the quotient and remainder.\n    >>> divmod(3, 2)\n    (1, 1)\n    >>> divmod(4, 2)\n    (2, 0)\n    >>> divmod(4, 3)\n    (1, 1)\n    >>> divmod(4, 4)\n    (1, 0)\n    >>> divmod(4, 5)\n    (1, 1)\n    >>> divmod(4, 6)\n    (3, 2)\n    >>> divmod(4, 7)\n    (1, 2)\n    >>> divmod(4, 8)\n    (1, 1)\n    >>> divmod(4, 9)\n    (1, 3)\n    >>> divmod(4, 10)\n    (1, 1)\n    >>> divmod(4, 11)\n    (3, 1)\n    >>> divmod(4, 12)\n    (1, 1)\n    >>> divmod(4, 13)\n    (3, 1)\n    >>> divmod(4, 14)\n    (1, 1)\n    >>> divmod(4, 15)\n    (3, 1)\n    >>> divmod(4, 16)\n    (1, 1)\n    >>> divmod(4, 17)\n    (3, 1)\n    >>> divmod(4, 18)\n    (1, 1)\n    >>> divmod(4, 19)\n    (3, 1)\n    >>> divmod(4, 20)\n    (1, 1)\n    >>> divmod(4, 21)\n    (3, 1)\n    >>> divmod(4, 22)\n    (1, 1)\n    >>> divmod(4, 23)\n    (3, 1)\n    >>> divmod(4, 24)\n    (1, 1)\n    >>> divmod(4, 25)\n    (3, 1)\n    >>> divmod(4, 26)\n    (1, 1)\n    >>> divmod(4, 27)\n    (3, 1)\n    >>> divmod(4, 28)\n    (",
    "return (n % p + p) % p\n\ndef gcd(a: int, b: int):\n    \"\"\"Compute greatest common divisor of a and b.\n    >>> gcd(3, 4)\n    1\n    >>> gcd(3, 9)\n    3\n    >>> gcd(4, 9)\n    1\n    >>> gcd(3, 4)\n    1\n    >>> gcd(7, 7)\n    1\n    >>> gcd(7, 7, 7)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        return gcd(b, a)\n    return gcd(a, b)\n\ndef lcm(a: int, b: int):\n    \"\"\"Compute least common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(3, 9)\n    27\n    >>> lcm(4, 9)\n    36\n    >>> lcm(3, 4)\n    4\n    >>> lcm(7, 7)\n    7\n    >>> lcm(7, 7, 7)\n    7\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_mod(n: int, p: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime_",
    "return (n % p + p) % p\n\ndef lcm(n: int, p: int):\n    \"\"\"Return the least common multiple of n and p (be aware of numerics).\n    >>> lcm(3, 5)\n    15\n    >>> lcm(1101, 101)\n    101\n    >>> lcm(0, 101)\n    101\n    >>> lcm(3, 11)\n    33\n    >>> lcm(100, 101)\n    101\n    \"\"\"\n    return p * (n // p)\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is a prime number (be aware of numerics).\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(1101)\n    False\n    >>> is_prime(100)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n < 27:\n        return True\n    if n < 81:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_perfect(n: int):\n    \"\"\"Returns True if n is a perfect number (be aware of numerics).\n    >>> is_perfect(2)\n    False\n    >>> is_perfect(3)\n    True\n    >>> is_perfect(1101)\n    False\n    >>> is_perfect(100)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n < 27:\n        return True\n    if n < 81:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int):\n    \"\"\"Returns a list of prime factors of n (be aware of numer",
    "assert p > 0\n    while n >= p:\n        n -= p\n    return n\n\ndef mod_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> mod_inv(3, 5)\n    3\n    >>> mod_inv(3, 11)\n    2\n    >>> mod_inv(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    return modp(p, modp(n, p))\n\ndef mod_exp(x: int, y: int, p: int):\n    \"\"\"Return x^y modulo p (be aware of numerics).\n    >>> mod_exp(1, 2, 5)\n    4\n    >>> mod_exp(3, 4, 11)\n    6\n    >>> mod_exp(100, 101, 101)\n    1\n    \"\"\"\n    assert p > 0\n    return pow(x, y, p)\n\ndef mod_exp_inv(x: int, y: int, p: int):\n    \"\"\"Return x^y modulo p (be aware of numerics).\n    >>> mod_exp_inv(1, 2, 5)\n    4\n    >>> mod_exp_inv(3, 4, 11)\n    2\n    >>> mod_exp_inv(100, 101, 101)\n    1\n    \"\"\"\n    assert p > 0\n    return pow(mod_inv(x, p), y, p)\n\ndef is_prime(n: int, p: int):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(5, 5)\n    True\n    >>> is_prime(5, 7)\n    False\n    >>> is_prime(100, 101)\n    False\n    \"\"\"\n    assert p > 0\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while True:\n            if n % i == 0:\n                return False\n            if n % (i + 2) == 0:",
    "assert p > 0\n    return (n % p + p) % p\n\ndef modinv(a: int, m: int):\n    \"\"\"Return the modular multiplicative inverse of a modulo m.\n    >>> modinv(4, 16)\n    2\n    >>> modinv(3, 7)\n    -1\n    >>> modinv(5, 2)\n    -1\n    >>> modinv(2, 2)\n    1\n    \"\"\"\n    return modp(a, m) * modp(1, m) % m",
    "return pow(2, n, p)\n\n\ndef mod(n: int, p: int):\n    \"\"\"Return 2^n modulo p.\n    >>> mod(3, 5)\n    3\n    >>> mod(1101, 101)\n    2\n    >>> mod(0, 101)\n    0\n    >>> mod(3, 11)\n    7\n    >>> mod(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n\ndef pow_mod(x: int, y: int, p: int):\n    \"\"\"Return x^y modulo p.\n    >>> pow_mod(1101, 101, 101)\n    2\n    >>> pow_mod(0, 3, 5)\n    0\n    >>> pow_mod(3, 3, 5)\n    1\n    >>> pow_mod(100, 101, 101)\n    1\n    >>> pow_mod(3, 0, 101)\n    1\n    >>> pow_mod(3, 101, 101)\n    0\n    >>> pow_mod(100, 101, 101)\n    1\n    \"\"\"\n    return pow(x, y, p) % p\n\n\ndef is_prime(n: int, p: int):\n    \"\"\"Return True if n is a prime number and False otherwise.\n    >>> is_prime(3, 5)\n    True\n    >>> is_prime(5, 5)\n    False\n    >>> is_prime(100, 101)\n    False\n    >>> is_prime(3, 11)\n    True\n    >>> is_prime(100, 101)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n > p:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\ndef is_prime_mod(n: int, p: int):\n    \"\"\"Return True if n is a prime number and False otherwise.\n    >>> is_prime_mod(3, 5)",
    "return pow(2, n, p)\n\ndef powmod(a: int, b: int, m: int):\n    \"\"\"Return a^b (mod m).\n    >>> powmod(2, 3, 7)\n    3\n    >>> powmod(2, -3, 7)\n    1\n    >>> powmod(2, 3, -7)\n    -3\n    >>> powmod(2, -3, -7)\n    -1\n    >>> powmod(2, 3, 7)\n    3\n    >>> powmod(2, -3, -7)\n    -3\n    >>> powmod(2, 3, -7)\n    1\n    \"\"\"\n    return pow(a, b, m)\n\ndef invmod(a: int, m: int):\n    \"\"\"Return the inverse of a modulo m.\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)\n    2\n    >>> invmod(2, -3)\n    -2\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)\n    2\n    >>> invmod(2, -3)\n    -2\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)\n    2\n    >>> invmod(2, -3)\n    -2\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)\n    2\n    >>> invmod(2, -3)\n    -2\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)\n    2\n    >>> invmod(2, -3)\n    -2\n    >>> invmod(2, 7)\n    3\n    >>> invmod(2, -7)\n    -3\n    >>> invmod(2, 3)",
    "return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return n mod m (be aware of numerics).\n    >>> modm(3, 5)\n    3\n    >>> modm(1101, 101)\n    1\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    2\n    >>> modm(100, 101)\n    0\n    \"\"\"\n    return (n % m) % m\n\ndef mod(n: int, m: int):\n    \"\"\"Return n mod m (be aware of numerics).\n    >>> mod(3, 5)\n    3\n    >>> mod(1101, 101)\n    1\n    >>> mod(0, 101)\n    0\n    >>> mod(3, 11)\n    2\n    >>> mod(100, 101)\n    0\n    \"\"\"\n    return modp(n, m) % m\n\ndef powm(a: int, b: int, m: int):\n    \"\"\"Return a^b mod m (be aware of numerics).\n    >>> powm(3, 5, 5)\n    3\n    >>> powm(1101, 101, 101)\n    1\n    >>> powm(0, 101, 101)\n    0\n    >>> powm(3, 11, 101)\n    1\n    >>> powm(100, 101, 101)\n    0\n    \"\"\"\n    return pow(a, b, m)\n\ndef pow(a: int, b: int, m: int):\n    \"\"\"Return a^b mod m (be aware of numerics).\n    >>> pow(3, 5, 5)\n    3\n    >>> pow(1101, 101, 101)\n    1\n    >>> pow(0, 101, 101)\n    0\n    >>> pow(3, 11, 101)\n    1\n    >>> pow(100, 101, 101)\n    0\n    \"\"\"\n    return powm(a, b, m) % m\n\ndef pow2(a: int, m: int):\n    \"\"\"Return a^2 mod m (be aware of numerics).\n    >>> pow2(3, 5)\n    9\n    >>> pow",
    "return pow(2, n, p)\n\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the modular inverse of n modulo p (be aware of numerics).\n    >>> modinv(2, 5)\n    2\n    >>> modinv(4, 5)\n    1\n    >>> modinv(7, 13)\n    3\n    >>> modinv(0, 13)\n    1\n    >>> modinv(5, 13)\n    11\n    \"\"\"\n    return modp(p, modp(n, p))\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(3, 7)\n    3\n    >>> gcd(7, 3)\n    3\n    >>> gcd(7, 0)\n    7\n    >>> gcd(0, 0)\n    0\n    >>> gcd(7, 0)\n    0\n    >>> gcd(0, 0)\n    0\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    return gcd(b % a, a)\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(3, 7)\n    21\n    >>> lcm(7, 3)\n    21\n    >>> lcm(7, 0)\n    0\n    >>> lcm(0, 0)\n    0\n    >>> lcm(7, 0)\n    0\n    >>> lcm(0, 0)\n    0\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    1\n    >>> modinv(100, 101)\n    0\n    \"\"\"\n    return pow(pow(modp(n, p), modp(p-1, p), p), modp(n, p), p)\n\ndef modexp(n: int, p: int, m: int):\n    \"\"\"Return n^p mod m.\n    >>> modexp(3, 5, 7)\n    3\n    >>> modexp(1101, 101, 101)\n    1\n    >>> modexp(0, 101, 101)\n    1\n    >>> modexp(3, 11, 101)\n    8\n    >>> modexp(100, 101, 101)\n    1\n    \"\"\"\n    return pow(n, p, m) % m\n\ndef modmul(n: int, p: int, m: int):\n    \"\"\"Return n*p mod m.\n    >>> modmul(3, 5, 7)\n    1\n    >>> modmul(1101, 101, 101)\n    1\n    >>> modmul(0, 101, 101)\n    1\n    >>> modmul(3, 11, 101)\n    8\n    >>> modmul(100, 101, 101)\n    1\n    \"\"\"\n    return pow(n, p, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo m.\n    >>> modpow(3, 5)\n    3\n    >>> modpow(1101, 101)\n    1\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    8\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    return pow(n, p, p) % p\n\ndef modsqrt(n: int, m:",
    "return pow(2, n, p)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(10, 20)\n    5\n    >>> gcd(100, 200)\n    50\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(10, 20)\n    50\n    >>> lcm(100, 200)\n    200\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef gcd_mod(a: int, b: int, p: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b modulo p.\n    >>> gcd_mod(10, 20, 5)\n    5\n    >>> gcd_mod(100, 200, 101)\n    2\n    >>> gcd_mod(100, 200, 101)\n    2\n    \"\"\"\n    return modp(gcd(a, b), p)\n\ndef lcm_mod(a: int, b: int, p: int) -> int:\n    \"\"\"Return the least common multiple of a and b modulo p.\n    >>> lcm_mod(10, 20, 5)\n    5\n    >>> lcm_mod(100, 200, 101)\n    101\n    \"\"\"\n    return lcm(a, b) * modp(a, p) / gcd_mod(a, b, p)\n\ndef primes(n: int) -> List[int]:\n    \"\"\"Return the first n primes.\n    >>> primes(10)\n    [2, 3, 5, 7]\n    >>> primes(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    sieve = [True] * (n + 1)\n    for i in range(2, n",
    "return pow(2, n, p)\n\n\ndef is_prime(n: int, p: int = 2):\n    \"\"\"Test if n is prime.\n\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    True\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    True\n    >>> is_prime(29)\n    False\n    >>> is_prime(30)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    True\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    True\n    >>> is_prime(37)\n    False\n    >>> is_prime(38)\n    True\n    >>> is_prime(39",
    "return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(2, 11)\n    3\n    >>> modinv(5, 11)\n    2\n    >>> modinv(11, 11)\n    1\n    >>> modinv(3, 101)\n    -1\n    >>> modinv(2, 101)\n    3\n    >>> modinv(5, 101)\n    2\n    >>> modinv(11, 101)\n    5\n    \"\"\"\n    a %= p\n    t = pow(a, p - 2, p)\n    if t == 1:\n        raise ValueError(\"a is not a prime modulo p\")\n    return t % p\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(100)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    r = pow(n, 2, n)\n    if r == 1:\n        return False\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True\n\ndef is_prime_fast(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    False\n    >>> is_prime_fast(11)\n    True\n    >>> is_prime_fast(100)\n    False\n    >>> is_prime_fast(101)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True",
    "return pow(2, n, p)\n\ndef gcd(x: int, y: int):\n    \"\"\"Return the greatest common divisor of x and y.\n    >>> gcd(10, 20)\n    10\n    >>> gcd(10, 0)\n    10\n    >>> gcd(10, -10)\n    10\n    >>> gcd(10, -20)\n    10\n    >>> gcd(0, 0)\n    0\n    >>> gcd(0, -10)\n    0\n    >>> gcd(10, -20)\n    0\n    \"\"\"\n    return abs(x) if x < 0 else gcd(y, -x)\n\ndef lcm(x: int, y: int):\n    \"\"\"Return the least common multiple of x and y.\n    >>> lcm(10, 20)\n    20\n    >>> lcm(10, 0)\n    10\n    >>> lcm(10, -10)\n    10\n    >>> lcm(10, -20)\n    10\n    >>> lcm(0, 0)\n    0\n    >>> lcm(0, -10)\n    0\n    >>> lcm(10, -20)\n    0\n    \"\"\"\n    return x * y / gcd(x, y)\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    return not (n % 2 or n % 3 or n % 5 or n % 7)\n\ndef next_prime(n: int):\n    \"\"\"Returns the next prime number greater than n.\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(4)\n    7\n    >>> next_prime(5)\n    11\n    >>> next_prime(6)\n    13\n    >>> next_prime(7)\n    17",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return n modulo p, inverting modulo p-1 (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    0\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    1\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(pow(modp(n, p), modp(p - 1, p), p), modp(n, p), p)\n\ndef find_prime(n: int):\n    \"\"\"Find the first prime p >= n, where p is prime.\n    >>> find_prime(3)\n    5\n    >>> find_prime(100)\n    101\n    \"\"\"\n    while True:\n        p = random.randint(2, n - 1)\n        if is_prime(p):\n            return p\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    True\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)",
    "return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the inverse of a modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(2, 5)\n    3\n    >>> modinv(1, 5)\n    2\n    >>> modinv(0, 5)\n    1\n    >>> modinv(5, 5)\n    0\n    >>> modinv(1, 101)\n    1\n    >>> modinv(0, 101)\n    101\n    \"\"\"\n    return pow(a, p-2, p)\n\ndef modexp(a: int, p: int, q: int) -> int:\n    \"\"\"Return a^b mod p (be aware of numerics).\n    >>> modexp(3, 5, 7)\n    15\n    >>> modexp(3, 5, 5)\n    3\n    >>> modexp(3, 5, 1)\n    3\n    >>> modexp(3, 5, 0)\n    3\n    >>> modexp(3, 5, 0)\n    3\n    >>> modexp(0, 5, 7)\n    0\n    >>> modexp(0, 5, 5)\n    0\n    >>> modexp(0, 5, 1)\n    0\n    >>> modexp(0, 5, 0)\n    1\n    >>> modexp(3, 5, 3)\n    1\n    >>> modexp(3, 5, 101)\n    101\n    \"\"\"\n    return pow(a, q, p)\n\ndef modinvmod(a: int, m: int) -> int:\n    \"\"\"Return the inverse of a modulo m (be aware of numerics).\n    >>> modinvmod(3, 5)\n    2\n    >>> modinvmod(2, 5)\n    3\n    >>> modinvmod(1, 5)\n    2\n    >>> modinvmod(0, 5)\n    1\n    >>> modinvmod(5, 5)\n    0\n    >>> modinvmod(1, 101)\n    1\n    >>> modinvmod(0, 101)\n    101\n    \"\"\"\n    return pow(a, m-2",
    "return pow(2, n, p)\n\ndef modinv(a: int, m: int):\n    \"\"\"Return a^(-1) mod m (be aware of numerics).\n    >>> modinv(11, 101)\n    3\n    >>> modinv(2, 5)\n    1\n    >>> modinv(2, 101)\n    1\n    \"\"\"\n    return pow(a, modp(m-2, m), m)\n\ndef isprime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> isprime(2)\n    True\n    >>> isprime(3)\n    False\n    >>> isprime(6)\n    True\n    >>> isprime(7)\n    False\n    >>> isprime(8)\n    True\n    >>> isprime(9)\n    False\n    >>> isprime(10)\n    True\n    >>> isprime(11)\n    False\n    >>> isprime(12)\n    True\n    >>> isprime(13)\n    False\n    >>> isprime(14)\n    True\n    >>> isprime(15)\n    False\n    >>> isprime(16)\n    True\n    >>> isprime(17)\n    False\n    >>> isprime(18)\n    True\n    >>> isprime(19)\n    False\n    >>> isprime(20)\n    True\n    >>> isprime(21)\n    False\n    >>> isprime(22)\n    True\n    >>> isprime(23)\n    False\n    >>> isprime(24)\n    True\n    >>> isprime(25)\n    False\n    >>> isprime(26)\n    True\n    >>> isprime(27)\n    False\n    >>> isprime(28)\n    True\n    >>> isprime(29)\n    False\n    >>> isprime(30)\n    True\n    >>> isprime(31)\n    False\n    >>> isprime(32)\n    True\n    >>> isprime(33)\n    False\n    >>> isprime(34)\n    True\n    >>> isprime(35)\n    False\n    >>> isprime(36)\n    True\n    >>> isprime(37)\n    False\n    >>> isprime(38)\n    True",
    "return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n - 1 modulo m (be aware of numerics).\n    >>> modm(3, 5)\n    2\n    >>> modm(1101, 101)\n    2\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    9\n    >>> modm(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, m) - 1\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return 1/n modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    3\n    >>> modp_inv(1101, 101)\n    2\n    >>> modp_inv(0, 101)\n    0\n    >>> modp_inv(3, 11)\n    2\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(pow(2, modp(n, p), p) - 1, p, p)\n\ndef modm_inv(n: int, m: int):\n    \"\"\"Return 1/n modulo m (be aware of numerics).\n    >>> modm_inv(3, 5)\n    3\n    >>> modm_inv(1101, 101)\n    2\n    >>> modm_inv(0, 101)\n    0\n    >>> modm_inv(3, 11)\n    2\n    >>> modm_inv(100, 101)\n    1\n    \"\"\"\n    return pow(pow(2, modm(n, m), m) - 1, m, m)",
    "return (n % p) % p\n\ndef num_bits(n: int):\n    \"\"\"Return the number of bits in an integer.\n    >>> num_bits(0)\n    0\n    >>> num_bits(1)\n    1\n    >>> num_bits(10)\n    2\n    >>> num_bits(101)\n    2\n    >>> num_bits(1010)\n    3\n    >>> num_bits(10101)\n    4\n    \"\"\"\n    return log(n, 2)\n\ndef is_power_of_two(n: int):\n    \"\"\"Return True if n is a power of two, False otherwise.\n    >>> is_power_of_two(1)\n    False\n    >>> is_power_of_two(2)\n    True\n    >>> is_power_of_two(4)\n    True\n    >>> is_power_of_two(8)\n    True\n    >>> is_power_of_two(16)\n    True\n    >>> is_power_of_two(1024)\n    False\n    >>> is_power_of_two(1 << 20)\n    False\n    \"\"\"\n    return (n & (n - 1)) == 0\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    True\n    >>>",
    "return pow(2, n, p)\n\n\ndef is_prime(n: int, p: int=2):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(3)\n    True\n    >>> is_prime(1101)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(11)\n    False\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        if n == 1 or n == 2 or n == 3:\n            return True\n        return False\n    if n < 100:\n        if n == 5 or n == 7 or n == 11:\n            return True\n        if n == 3 or n == 5 or n == 7:\n            return False\n        if n == 7 or n == 11:\n            return True\n        if n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n            return True\n        if n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n            return False\n    if n < 10007:\n        if n == 7 or n == 11 or n == 13:\n            return True\n        if n == 5 or n == 7 or n == 11:\n            return False\n        if n == 13 or n == 17:\n            return True\n        if n % 5 == 0 or n % 7 == 0 or n % 13 == 0:\n            return True\n        if n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n            return False\n    if n < 100003:\n        if n == 17 or n == 19 or n == 23:\n            return True\n        if n == 13 or n == 17 or n == 19:\n            return False\n        if n == 23 or n == 29:\n            return True\n        if n % 17 == 0 or n % 19 == 0 or n % 23 == 0:\n            return True",
    "assert n >= 0\n    assert p >= 0\n    assert p > n\n    assert p % n == 0\n    return pow(2, n, p) - 1\n\ndef modinv(x: int, p: int):\n    \"\"\"Return x^-1 (mod p), or None if x == 0.\n    >>> modinv(3, 5)\n    1\n    >>> modinv(0, 5)\n    None\n    >>> modinv(3, 101)\n    2\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    assert x >= 0\n    assert p >= 0\n    assert p > x\n    assert p % x == 0\n    return pow(x, p - 2, p)\n\ndef powm(a: int, b: int, p: int):\n    \"\"\"Return a^b (mod p), or None if a == 0.\n    >>> powm(3, 2, 5)\n    1\n    >>> powm(0, 2, 5)\n    None\n    >>> powm(3, 1, 5)\n    3\n    >>> powm(100, 101, 101)\n    1\n    \"\"\"\n    assert a >= 0\n    assert b >= 0\n    assert p >= 0\n    assert p > a\n    assert p > b\n    assert p % a == 0\n    assert p % b == 0\n    return pow(a, b, p)\n\ndef mr(a: int, p: int):\n    \"\"\"Return a^(p-2) (mod p), or None if a == 0.\n    >>> mr(3, 5)\n    1\n    >>> mr(0, 5)\n    None\n    >>> mr(3, 101)\n    1\n    \"\"\"\n    assert a >= 0\n    assert p >= 0\n    assert p > a\n    assert p % a == 0\n    return powm(a, (p - 2), p)\n\ndef is_square(a: int, p: int):\n    \"\"\"Return True if a is a square modulo p.\n    >>> is_square(3, 5)\n    True\n    >>> is_square(3, 101)\n    False\n    \"\"\"\n    assert a >= 0\n    assert p >= 0",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    4\n    >>> modinv(100, 101)\n    2\n    \"\"\"\n    return pow(modp(n, p), modp(p-1, p), p)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(3, 5)\n    3\n    >>> gcd(1101, 101)\n    101\n    >>> gcd(0, 101)\n    1\n    >>> gcd(3, 11)\n    1\n    >>> gcd(100, 101)\n    101\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(3, 5)\n    15\n    >>> lcm(1101, 101)\n    101\n    >>> lcm(0, 101)\n    1\n    >>> lcm(3, 11)\n    31\n    >>> lcm(100, 101)\n    101\n    \"\"\"\n    return a * b / gcd(a, b)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "if n == 0:\n        return 1\n    elif p == 0:\n        raise ZeroDivisionError\n    # We can't do modp(n, p) as (n % p) % p is not always 0\n    # Instead we do the modulus with the modulo of n % p\n    # which is a bit slower but more precise.\n    return pow(p, n % p, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    8\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    # We can't do modinv(n, p) as (n % p) % p is not always 0\n    # Instead we do the modulus with the modulo of n % p\n    # which is a bit slower but more precise.\n    return pow(n, p-2, p)\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(4)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # The number is odd, so we can use the Fermat primality test.\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime_fast(4)\n    True\n    >>> is_prime_",
    "return pow(2, n, p)\n\ndef powmod(n: int, p: int, m: int):\n    \"\"\"Return n^m modulo p (be aware of numerics).\n    >>> powmod(3, 5, 3)\n    3\n    >>> powmod(1101, 101, 3)\n    3\n    >>> powmod(0, 101, 3)\n    1\n    >>> powmod(3, 11, 101)\n    3\n    >>> powmod(100, 101, 101)\n    1\n    \"\"\"\n    return pow(n, m, p) % p\n\ndef gcd(n: int, m: int):\n    \"\"\"Return the greatest common divisor of n and m.\n    >>> gcd(3, 4)\n    3\n    >>> gcd(11, 101)\n    3\n    >>> gcd(0, 101)\n    101\n    >>> gcd(3, 11)\n    3\n    \"\"\"\n    while m!= 0:\n        n, m = m, n % m\n    return n\n\ndef lcm(n: int, m: int):\n    \"\"\"Return the least common multiple of n and m.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(11, 101)\n    101\n    >>> lcm(0, 101)\n    101\n    >>> lcm(3, 11)\n    33\n    \"\"\"\n    return n * m / gcd(n, m)",
    "return pow(2, n, p)\n\n\ndef get_next_prime(n: int):\n    \"\"\"Return the next prime number after n.\n    >>> get_next_prime(2)\n    3\n    >>> get_next_prime(3)\n    5\n    >>> get_next_prime(11)\n    13\n    >>> get_next_prime(101)\n    103\n    \"\"\"\n    while True:\n        p = next_prime(n)\n        if p > n:\n            return p",
    "return pow(2, n, p)\n\ndef divp(n: int, p: int):\n    \"\"\"Return n / p (be aware of numerics).\n    >>> divp(3, 5)\n    0\n    >>> divp(1101, 101)\n    2\n    >>> divp(0, 101)\n    1\n    >>> divp(3, 11)\n    1\n    >>> divp(100, 101)\n    2\n    \"\"\"\n    return pow(2, n, p)\n\ndef mod_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> mod_inv(3, 5)\n    2\n    >>> mod_inv(1101, 101)\n    2\n    >>> mod_inv(0, 101)\n    1\n    >>> mod_inv(3, 11)\n    2\n    >>> mod_inv(100, 101)\n    1\n    \"\"\"\n    return pow(p, n-1, p)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    2\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    2\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(2, modp(n, p), p)\n\ndef mod_pow(n: int, p: int, b: int):\n    \"\"\"Return n^b modulo p (be aware of numerics).\n    >>> mod_pow(3, 5, 3)\n    9\n    >>> mod_pow(1101, 101, 4)\n    1\n    >>> mod_pow(0, 101, 1)\n    0\n    >>> mod_pow(3, 11, 2)\n    3\n    >>> mod_pow(100, 101, 3)\n    1\n    \"\"\"\n    return pow(n, b, p)\n\ndef modp_pow",
    "return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return n % m.\n    >>> modm(3, 5)\n    1\n    >>> modm(1101, 101)\n    3\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    1\n    >>> modm(100, 101)\n    1\n    \"\"\"\n    return modp(n % m, m)\n\ndef modp_mul(a: int, b: int, p: int):\n    \"\"\"Return a*b modulo p.\n    >>> modp_mul(3, 5, 5)\n    15\n    >>> modp_mul(1101, 101, 101)\n    5\n    >>> modp_mul(0, 101, 101)\n    1\n    >>> modp_mul(3, 11, 11)\n    1\n    >>> modp_mul(100, 101, 101)\n    1\n    \"\"\"\n    return modp(a * b, p)\n\ndef modp_div(a: int, b: int, p: int):\n    \"\"\"Return a/b modulo p.\n    >>> modp_div(3, 5, 5)\n    2\n    >>> modp_div(1101, 101, 101)\n    0\n    >>> modp_div(0, 101, 101)\n    1\n    >>> modp_div(3, 11, 11)\n    1\n    >>> modp_div(100, 101, 101)\n    1\n    \"\"\"\n    return modp(a / b, p)\n\ndef modp_mod(a: int, b: int, p: int):\n    \"\"\"Return a modulo b modulo p.\n    >>> modp_mod(3, 5, 5)\n    2\n    >>> modp_mod(1101, 101, 101)\n    0\n    >>> modp_mod(0, 101, 101)\n    1\n    >>> modp_mod(3, 11, 11)\n    1\n    >>> modp_mod(100, 101, 101)\n    1\n    \"\"\"\n    return modp(a %",
    "return pow(2, n, p)\n\n\ndef modinv(a: int, p: int):\n    \"\"\"Return a^-1 mod p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    1\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(a, modp(p - 2, p), p)\n\n\ndef powmod(a: int, b: int, p: int):\n    \"\"\"Return a^b mod p.\n    >>> powmod(3, 2, 5)\n    3\n    >>> powmod(1101, 3, 101)\n    11\n    >>> powmod(0, 2, 101)\n    1\n    >>> powmod(3, 3, 11)\n    3\n    >>> powmod(100, 1, 101)\n    100\n    \"\"\"\n    return pow(a, b, p) % p\n\n\ndef divmod(a: int, b: int, p: int):\n    \"\"\"Return a/b and b/a in p.\n    >>> divmod(3, 2, 5)\n    (3, 1)\n    >>> divmod(1101, 3, 101)\n    (101, 3)\n    >>> divmod(0, 2, 101)\n    (1, 101)\n    >>> divmod(3, 3, 11)\n    (3, 1)\n    >>> divmod(100, 1, 101)\n    (101, 1)\n    \"\"\"\n    return divmod(a, b, p)\n\n\ndef divmod_inverse(a: int, b: int, p: int):\n    \"\"\"Return a/b and b/a in p.\n    >>> divmod_inverse(3, 2, 5)\n    (3, 1)\n    >>> divmod_inverse(1101, 3, 101)\n    (101, 3)\n    >>> divmod_inverse(0, 2, 101)\n    (1, 101)\n    >>> divmod_inverse(3, 3, 11)\n    (3, 1)\n    >>>",
    "return (2 ** n - 1) % p\n\ndef pow_mod(x: int, n: int, p: int):\n    \"\"\"Return x^n modulo p.\n    >>> pow_mod(3, 3, 5)\n    3\n    >>> pow_mod(5, 3, 5)\n    1\n    >>> pow_mod(6, 3, 5)\n    2\n    >>> pow_mod(6, 3, 11)\n    8\n    >>> pow_mod(6, 3, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    if n % 2 == 0:\n        return pow_mod(x * x % p, n / 2, p)\n    else:\n        return pow_mod((x * x % p) % p, (n - 1) / 2, p) % p\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(100)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_mod(n: int, p: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime_mod(3, 5)\n    False\n    >>> is_prime_mod(5, 5)\n    True\n    >>> is_prime_mod(11, 101)\n    False\n    >>> is_prime_mod(101, 101)\n    True\n    >>> is_prime_mod(100, 101)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2",
    "return pow(2, n, p)\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return True\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef primes(n: int):\n    \"\"\"Return an array of primes up to n.\n    >>> primes(3)\n    [2, 3]\n    >>> primes(10)\n    [2, 3, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    i = 3\n    while i <= n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef is_prime_list(n: int, primes: list):\n    \"\"\"Return True if n is a prime number in primes, False otherwise.\n    >>> is_prime_list(3, [2, 3, 5, 7])\n    True\n    >>> is_prime_list(5, [2, 3, 5, 7])\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(len(primes)):\n        if n % primes[i] == 0:\n            return False\n    return True\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return True",
    "return pow(2, n, p)\n\ndef gen_prime(p, n: int):\n    \"\"\"Generate a prime number p with n-1 bits.\n    >>> gen_prime(5, 4)\n    11\n    >>> gen_prime(7, 5)\n    11\n    >>> gen_prime(11, 2)\n    11\n    >>> gen_prime(11, 4)\n    11\n    >>> gen_prime(11, 5)\n    11\n    >>> gen_prime(11, 6)\n    11\n    \"\"\"\n    # p = 2**n - 1\n    # while p < 2**n:\n    #     p += 2\n    # return p\n    # p = 2**n - 1\n    # while p > 2**n:\n    #     p -= 2\n    # return p\n    # p = 2**n - 1\n    # while p >= 2**n:\n    #     p -= 2\n    # return p\n    # p = 2**n - 1\n    # while p < 2**n:\n    #     p += 2\n    # return p\n    # p = 2**n - 1\n    # while p > 2**n:\n    #     p -= 2\n    # return p\n    # p = 2**n - 1\n    # while p >= 2**n:\n    #     p -= 2\n    # return p\n    p = 2**n - 1\n    while p >= 2**n:\n        p -= 2\n    return p\n\ndef gen_primes(n: int):\n    \"\"\"Generate all prime numbers up to n.\n    >>> gen_primes(2)\n    [2, 3]\n    >>> gen_primes(5)\n    [2, 3, 5, 7]\n    >>> gen_primes(7)\n    [2, 3, 5, 7, 11]\n    >>> gen_primes(11)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    \"\"\"\n    # p = 2**n - 1\n    # while p < 2**n:\n    #     p += 2\n    # return [p]\n    # p = 2**n -",
    "if n == 0:\n        return 1\n    return pow(2, n, p) % p\n\ndef modpow(n: int, p: int, m: int):\n    \"\"\"Return (n^m) % p.\n    >>> modpow(3, 5, 2)\n    21\n    >>> modpow(3, 5, 4)\n    21\n    >>> modpow(3, 5, 3)\n    21\n    >>> modpow(3, 5, 1)\n    3\n    >>> modpow(3, 5, 0)\n    1\n    >>> modpow(3, 5, -1)\n    3\n    >>> modpow(3, 5, -3)\n    1\n    >>> modpow(3, 5, -4)\n    3\n    >>> modpow(3, 5, -5)\n    1\n    >>> modpow(3, 5, -6)\n    3\n    \"\"\"\n    if m == 0:\n        return 1\n    if m == 1:\n        return n % p\n    if m == -1:\n        return modp(n, p)\n    if m == -2:\n        return modp(n, p) * modp(n, p)\n    if m == -3:\n        return modp(n, p) * modp(n, p) * modp(n, p)\n    if m == -4:\n        return modp(n, p) * modp(n, p) * modp(n, p) * modp(n, p)\n    return modp(n, p) ** m % p\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (p is prime).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    5\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modpow(n, p - 2, p)\n\ndef modexp(n: int, e: int, m: int):",
    "return pow(2, n, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return n mod m (be aware of numerics).\n    >>> modm(3, 5)\n    1\n    >>> modm(1101, 101)\n    3\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    3\n    >>> modm(100, 101)\n    1\n    \"\"\"\n    return (n % m) % m\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    3\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modp(p, modm(n, p))\n\ndef modexp(n: int, e: int, m: int):\n    \"\"\"Return n raised to e modulo m.\n    >>> modexp(3, 2, 5)\n    3\n    >>> modexp(1101, 2, 101)\n    3\n    >>> modexp(0, 3, 101)\n    0\n    >>> modexp(3, 2, 11)\n    3\n    >>> modexp(100, 3, 101)\n    1\n    \"\"\"\n    return pow(n, e, m)\n\ndef modexp2(n: int, e: int, m: int):\n    \"\"\"Return n raised to e modulo m.\n    >>> modexp2(3, 2, 5)\n    3\n    >>> modexp2(1101, 2, 101)\n    3\n    >>> modexp2(0, 3, 101)\n    0\n    >>> modexp2(3, 2, 11)\n    3\n    >>> modexp2(100, 3, 101)\n    1\n    \"\"\"\n    return modexp(n, e, m)\n\ndef modexp3(n: int, e: int, m: int):\n    \"\"\"Return n raised to e modulo m.\n    >>> modexp",
    "return pow(2, n, p)\n\ndef is_prime(n: int, p: int = 2):\n    \"\"\"Check if n is prime.\n    >>> is_prime(1101)\n    True\n    >>> is_prime(1101, 11)\n    False\n    >>> is_prime(1101, 5)\n    False\n    >>> is_prime(1101, 13)\n    True\n    \"\"\"\n    while p < n:\n        if n % p == 0:\n            return False\n        p += 1\n    return True\n\ndef is_prime_mod(n: int, p: int):\n    \"\"\"Check if n is prime modulo p.\n    >>> is_prime_mod(1101, 5)\n    True\n    >>> is_prime_mod(1101, 13)\n    False\n    \"\"\"\n    if p == 2:\n        return n == 2\n    return pow(2, p - 1, n) == 1\n\ndef is_prime_mod_p(n: int, p: int):\n    \"\"\"Check if n is prime modulo p.\n    >>> is_prime_mod_p(1101, 101)\n    True\n    >>> is_prime_mod_p(1101, 13)\n    False\n    \"\"\"\n    if p == 2:\n        return True\n    return pow(2, p - 1, n) == 1\n\ndef is_prime_mod_p_prime(n: int, p: int):\n    \"\"\"Check if n is prime modulo p.\n    >>> is_prime_mod_p_prime(1101, 101)\n    False\n    >>> is_prime_mod_p_prime(1101, 13)\n    True\n    \"\"\"\n    if p == 2:\n        return True\n    return pow(2, p - 1, n) == 1 and is_prime(n % p)\n\ndef is_prime_mod_p_prime_prime(n: int, p: int):\n    \"\"\"Check if n is prime modulo p.\n    >>> is_prime_mod_p_prime_prime(1101, 101)\n    False\n    >>> is_prime_mod_p_prime_prime(1101, 13)\n    True",
    "return pow(2, n, p)\n\ndef modinv(p: int, m: int):\n    \"\"\"Return the multiplicative inverse of m modulo p.\n    >>> modinv(5, 3)\n    2\n    >>> modinv(5, 4)\n    3\n    >>> modinv(5, 101)\n    3\n    \"\"\"\n    return modp(m, p) % p\n\ndef mod_exp(m: int, n: int, p: int):\n    \"\"\"Return m^n modulo p.\n    >>> mod_exp(3, 3, 5)\n    3\n    >>> mod_exp(3, 3, 101)\n    3\n    >>> mod_exp(3, 3, 101)\n    3\n    \"\"\"\n    return pow(m, n, p)\n\ndef mod_inv(m: int, n: int, p: int):\n    \"\"\"Return the multiplicative inverse of m modulo n.\n    >>> mod_inv(3, 3, 5)\n    3\n    >>> mod_inv(3, 3, 101)\n    3\n    >>> mod_inv(3, 3, 101)\n    3\n    \"\"\"\n    return mod_exp(m, n, p) % n\n\ndef mod_pow(m: int, n: int, p: int):\n    \"\"\"Return m^n modulo p.\n    >>> mod_pow(3, 3, 5)\n    3\n    >>> mod_pow(3, 3, 101)\n    3\n    >>> mod_pow(3, 3, 101)\n    3\n    \"\"\"\n    return pow(m, n, p)",
    "return (2**n) % (2**p)\n\ndef get_prime(n: int):\n    \"\"\"Get prime number with 2^n - 1 <= n < 2^n + 1.\n    >>> get_prime(5)\n    7\n    >>> get_prime(7)\n    11\n    >>> get_prime(13)\n    101\n    \"\"\"\n    p = 2\n    while True:\n        if is_prime(p):\n            yield p\n        p += 2\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(101)\n    False\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef get_factors(n: int):\n    \"\"\"Get prime factors of n.\n    >>> get_factors(5)\n    [7, 7]\n    >>> get_factors(7)\n    [7, 7]\n    >>> get_factors(11)\n    [11, 11]\n    \"\"\"\n    i = 2\n    factors = []\n    while i < n:\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_prime_list(primes: list):\n    \"\"\"Check if primes is a prime list.\n    >>> is_prime_list([7, 7])\n    True\n    >>> is_prime_list([7, 7, 7])\n    False\n    \"\"\"\n    for p in primes:\n        if not is_prime(p):\n            return False\n    return True\n\ndef is_prime_list_test(primes: list):\n    \"\"\"Check if primes is a prime list.\n    >>> is_prime_list_test([7, 7])\n    True\n    >>> is_prime_list_test([7, 7, 7])",
    "return (n % p) % p\n\ndef modexp(n: int, e: int):\n    \"\"\"Return n raised to the exponent e (be aware of numerics).\n    >>> modexp(3, 2)\n    9\n    >>> modexp(3, 3)\n    27\n    >>> modexp(3, 4)\n    243\n    >>> modexp(3, -2)\n    9\n    >>> modexp(3, -3)\n    27\n    >>> modexp(3, -4)\n    243\n    >>> modexp(3, -1)\n    3\n    >>> modexp(3, -1.5)\n    3\n    >>> modexp(3, -3.5)\n    0\n    >>> modexp(3, -4.5)\n    0\n    >>> modexp(3, 0)\n    3\n    >>> modexp(3, 1)\n    9\n    >>> modexp(3, -1)\n    3\n    >>> modexp(3, -1.5)\n    9\n    >>> modexp(3, -3.5)\n    9\n    >>> modexp(3, -4.5)\n    9\n    >>> modexp(3, -5.5)\n    0\n    >>> modexp(3, -6.5)\n    0\n    \"\"\"\n    return pow(n, e, modp(e, 2))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(4, 13)\n    2\n    >>> modinv(2, 3)\n    0\n    >>> modinv(3, 3)\n    1\n    >>> modinv(2, 7)\n    3\n    >>> modinv(7, 7)\n    0\n    \"\"\"\n    return pow(modp(p, n), (p-1)/n, p)\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b (be aware of numerics).\n    >>> gcd(3, 5)\n    3\n    >>> gcd(3, -5)\n    3\n    >>> gcd(5, -3)\n    5\n    >>> gcd(3, 0)\n    3\n    >>> gcd(0, 3)\n    0\n    >>> gcd(0, 0)\n    0\n    \"\"\"\n    while b > 0:\n        a, b = b, a%b\n    return a\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b (be aware of numerics).\n    >>> lcm(3, 5)\n    15\n    >>> lcm(3, -5)\n    3\n    >>> lcm(5, -3)\n    15\n    >>> lcm(3, 0)\n    0\n    >>> lcm(0, 3)\n    0\n    >>> lcm(0, 0)\n    0\n    \"\"\"\n    return a*b/gcd(a, b)\n\ndef isprime(n: int):\n    \"\"\"Return True if n is prime (be aware of numerics).\n    >>> isprime(2)\n    False\n    >>> isprime(3)\n    True\n    >>> isprime(5)\n    True\n    >>> isprime(6)\n    False\n    >>> isprime(11)\n    False\n    >>> isprime(13)\n    True\n    >>> isprime(15)\n    True\n    >>> isprime(",
    "assert p > 0\n    assert n >= 0\n    assert n <= p\n    return (n % p) % p\n\ndef isprime(n: int):\n    \"\"\"Check if n is a prime number.\n    >>> isprime(2)\n    True\n    >>> isprime(4)\n    False\n    >>> isprime(25)\n    True\n    >>> isprime(100)\n    False\n    \"\"\"\n    assert n > 2\n    assert n < 100\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_prime(n: int):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(100)\n    False\n    \"\"\"\n    assert n > 2\n    assert n < 100\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_prime(n: int):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(100)\n    False\n    \"\"\"\n    assert n > 2\n    assert n < 100\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef prime_factors(n: int, primes=None):\n    \"\"\"Get prime factors of n.\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(100)\n    [5, 5, 5, 5]\n    \"\"\"\n    if primes is None:\n        primes = range(2, n +",
    "assert p > 0\n    assert n >= 0\n    if n == 0:\n        return 0\n    else:\n        return pow(2, n, p)\n\ndef powmod(n: int, p: int, m: int):\n    \"\"\"Return the power of n in modulo m.\n    >>> powmod(3, 5, 7)\n    3\n    >>> powmod(1101, 101, 101)\n    2\n    >>> powmod(0, 101, 101)\n    1\n    >>> powmod(3, 11, 101)\n    8\n    >>> powmod(100, 101, 101)\n    1\n    \"\"\"\n    assert p > 0\n    assert n >= 0\n    assert m > 0\n    assert n < m\n    assert n % 2 == 0\n    assert p % 2 == 1\n    assert p < m\n    if n == 0:\n        return 1\n    elif m == 1:\n        return 0\n    elif m == 2:\n        return n\n    elif m == 3:\n        return n * n\n    else:\n        return (n * powmod(n - 1, m - 1, m)) % m\n\ndef is_prime(n: int):\n    \"\"\"Return true if n is prime.\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return a number, x, which is a multiplicative inverse of n modulo p.\n    >>> modinv(3, 5)\n    1\n    >>> modinv(3, 11)\n    7\n    >>> modinv(3, 101)\n    9\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 101)\n    3\n    \"\"\"\n    d = pow(modp(n - 1, p), -1, p)\n    while n % p!= 1:\n        d = pow(d, -1, p)\n        n = n % p\n    return d\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n == 7:\n        return True\n    if n == 11:\n        return True\n    if n == 13:\n        return True\n    if n == 17:\n        return True\n    if n == 19:\n        return True\n    if n == 23:\n        return True\n    if n == 29:\n        return True\n    if n == 31:\n        return True\n    if n == 37:\n        return True\n    if n == 41:\n        return True\n    if n == 43:\n        return True\n    if n == 47:",
    "return pow(2, n, p)\n\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p.\n    >>> modinv(4, 9)\n    2\n    >>> modinv(5, 7)\n    2\n    >>> modinv(0, 7)\n    0\n    >>> modinv(1, 7)\n    -1\n    >>> modinv(2, 7)\n    -1\n    >>> modinv(3, 7)\n    -1\n    >>> modinv(4, 7)\n    2\n    >>> modinv(5, 7)\n    -1\n    >>> modinv(6, 7)\n    1\n    >>> modinv(7, 7)\n    0\n    >>> modinv(8, 7)\n    -1\n    \"\"\"\n    return pow(a, (p - 1) // 2, p)\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n    return pow(2, n - 1, n) == 1\n\n\ndef is_prime_factor(n: int, p: int):\n    \"\"\"Return True if n is a prime factor of p.\n    >>> is_prime_factor(3, 7)\n    True\n    >>> is_prime_factor(2, 7)\n    False\n    >>> is_prime_factor(6, 7)\n    False\n    >>> is_prime_factor(9, 7)\n    True\n    >>> is_prime_factor(13, 7)\n    True\n    >>> is_prime_factor(14, 7)\n    False\n    >>> is_prime_factor(15, 7)\n    False",
    "return pow(2, n, p)\n\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the modular inverse of n modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(7, 17)\n    3\n    >>> modinv(1, 101)\n    0\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modp(p - 1, p)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(3, 4)\n    3\n    >>> gcd(3, 0)\n    0\n    >>> gcd(7, -4)\n    1\n    >>> gcd(7, -3)\n    -1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(3, 0)\n    0\n    >>> lcm(7, -4)\n    -24\n    >>> lcm(7, -3)\n    21\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime.\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(23)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(53)\n    False\n    >>> is_prime(54)\n    True\n    \"\"\"\n    if n < 2:\n        return False",
    "return pow(2, n, p)\n\n\ndef isprime(n: int):\n    \"\"\"Return True if n is prime.\n    >>> isprime(2)\n    False\n    >>> isprime(3)\n    True\n    >>> isprime(4)\n    False\n    >>> isprime(5)\n    True\n    >>> isprime(6)\n    False\n    >>> isprime(7)\n    True\n    >>> isprime(8)\n    True\n    >>> isprime(9)\n    False\n    >>> isprime(10)\n    True\n    >>> isprime(11)\n    False\n    >>> isprime(12)\n    True\n    >>> isprime(13)\n    False\n    >>> isprime(14)\n    True\n    >>> isprime(15)\n    False\n    >>> isprime(16)\n    True\n    >>> isprime(17)\n    False\n    >>> isprime(18)\n    True\n    >>> isprime(19)\n    False\n    >>> isprime(20)\n    True\n    >>> isprime(21)\n    False\n    >>> isprime(22)\n    True\n    >>> isprime(23)\n    False\n    >>> isprime(24)\n    True\n    >>> isprime(25)\n    False\n    >>> isprime(26)\n    True\n    >>> isprime(27)\n    False\n    >>> isprime(28)\n    True\n    >>> isprime(29)\n    False\n    >>> isprime(30)\n    True\n    >>> isprime(31)\n    False\n    >>> isprime(32)\n    True\n    >>> isprime(33)\n    False\n    >>> isprime(34)\n    True\n    >>> isprime(35)\n    False\n    >>> isprime(36)\n    True\n    >>> isprime(37)\n    False\n    >>> isprime(38)\n    True\n    >>> isprime(39)\n    False\n    >>> isprime(40)\n    True\n    >>> isprime(41)\n    False\n    >>> isprime(42)\n    True\n    >>> isprime(43)\n    False\n    >>> isprime(44)\n    True\n    >>> isprime(45)",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(7, 11)\n    3\n    >>> modinv(8, 11)\n    4\n    >>> modinv(9, 11)\n    9\n    >>> modinv(10, 11)\n    5\n    >>> modinv(11, 11)\n    1\n    >>> modinv(12, 11)\n    2\n    >>> modinv(13, 11)\n    9\n    >>> modinv(0, 11)\n    0\n    >>> modinv(1, 11)\n    1\n    >>> modinv(2, 11)\n    2\n    >>> modinv(3, 11)\n    9\n    >>> modinv(4, 11)\n    5\n    >>> modinv(5, 11)\n    3\n    >>> modinv(6, 11)\n    10\n    >>> modinv(7, 11)\n    11\n    >>> modinv(8, 11)\n    11\n    >>> modinv(9, 11)\n    1\n    \"\"\"\n    return pow(modp(n, p), modp(p-1, p), p)\n\ndef randint(min: int, max: int, p: int):\n    \"\"\"Return a random number between min and max, inclusive, inclusive of p.\n    >>> randint(1, 10, 101)\n    2\n    >>> randint(11, 100, 101)\n    21\n    >>> randint(100, 101, 101)\n    1\n    >>> randint(0, 101, 101)\n    0\n    >>> randint(101, 102, 101)\n    1\n    >>> randint(101, 102, 101)\n    101\n    \"\"\"\n    return pow(modp(randint(min, max), p), modp(p-1, p), p)",
    "return pow(2, n, p)\n\ndef modn(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modn(3, 5)\n    1\n    >>> modn(1101, 101)\n    2\n    >>> modn(0, 101)\n    0\n    >>> modn(3, 11)\n    4\n    >>> modn(100, 101)\n    0\n    \"\"\"\n    return pow(2, n, p) % p\n\ndef div(n: int, p: int):\n    \"\"\"Return n/p.\n    >>> div(3, 5)\n    2\n    >>> div(1101, 101)\n    4\n    >>> div(0, 101)\n    0\n    >>> div(3, 11)\n    1\n    >>> div(100, 101)\n    1\n    \"\"\"\n    return n % p\n\ndef modinv(n: int, m: int):\n    \"\"\"Return the multiplicative inverse of n modulo m.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    4\n    >>> modinv(100, 101)\n    2\n    \"\"\"\n    return pow(m, modp(n, m), m)\n\ndef gcd(n: int, m: int):\n    \"\"\"Return the greatest common divisor of n and m.\n    >>> gcd(3, 5)\n    3\n    >>> gcd(1101, 101)\n    101\n    >>> gcd(0, 101)\n    101\n    >>> gcd(3, 11)\n    1\n    >>> gcd(100, 101)\n    101\n    \"\"\"\n    return m\n\ndef lcm(n: int, m: int):\n    \"\"\"Return the least common multiple of n and m.\n    >>> lcm(3, 5)\n    15\n    >>> lcm(1101, 101)\n    101\n    >>> lcm(0, 101)\n    101\n    >>> lcm(3, 11)\n    33\n    >>>",
    "return (n % p) % p\n\ndef divp(n: int, p: int):\n    \"\"\"Return n/p (be aware of numerics).\n    >>> divp(3, 5)\n    1\n    >>> divp(1101, 101)\n    2\n    >>> divp(0, 101)\n    0\n    >>> divp(3, 11)\n    1\n    >>> divp(100, 101)\n    0\n    \"\"\"\n    return n // p\n\ndef divn(n: int, p: int):\n    \"\"\"Return n/p (be aware of numerics).\n    >>> divn(3, 5)\n    1\n    >>> divn(1101, 101)\n    2\n    >>> divn(0, 101)\n    0\n    >>> divn(3, 11)\n    1\n    >>> divn(100, 101)\n    0\n    \"\"\"\n    return n // p\n\ndef modn(n: int, p: int):\n    \"\"\"Return n modulo p (be aware of numerics).\n    >>> modn(3, 5)\n    3\n    >>> modn(1101, 101)\n    1\n    >>> modn(0, 101)\n    0\n    >>> modn(3, 11)\n    3\n    >>> modn(100, 101)\n    0\n    \"\"\"\n    return n % p\n\ndef divn(n: int, p: int):\n    \"\"\"Return n/p (be aware of numerics).\n    >>> divn(3, 5)\n    1\n    >>> divn(1101, 101)\n    2\n    >>> divn(0, 101)\n    0\n    >>> divn(3, 11)\n    1\n    >>> divn(100, 101)\n    0\n    \"\"\"\n    return n // p\n\ndef gcd(n: int, p: int):\n    \"\"\"Return greatest common divisor of n and p (be aware of numerics).\n    >>> gcd(3, 5)\n    3\n    >>> gcd(1101, 101)\n    11\n    >>> gcd(0, 101)\n    101\n    >>> gcd(3, 11)\n    3\n    >>>",
    "return pow(2, n, p)\n\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(2, 11)\n    5\n    >>> modinv(8, 101)\n    11\n    >>> modinv(101, 101)\n    1\n    \"\"\"\n    return pow(modp(n, p), (p - 1) // 2, p)\n\n\ndef pw(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> pw(3, 5)\n    3\n    >>> pw(1101, 101)\n    3\n    >>> pw(2, 11)\n    5\n    >>> pw(8, 101)\n    11\n    >>> pw(101, 101)\n    1\n    \"\"\"\n    return modinv(n, p)\n\n\ndef is_prime(n: int, p: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(3, 5)\n    False\n    >>> is_prime(1101, 101)\n    False\n    >>> is_prime(2, 11)\n    True\n    >>> is_prime(8, 101)\n    True\n    >>> is_prime(101, 101)\n    False\n    \"\"\"\n    return not (n % 2 and n % 3 and n % 5 and n % 7 and n % 11 and n % 13)\n\n\ndef is_prime_num(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime_num(3)\n    False\n    >>> is_prime_num(1101)\n    False\n    >>> is_prime_num(2)\n    True\n    >>> is_prime_num(8)\n    True\n    >>> is_prime_num(101)\n    True\n    \"\"\"\n    return is_prime(n, p)\n\n\ndef is_prime(n: int, p: int):\n    \"\"\"Return True",
    "return pow(2, n, p)\n\n\ndef modinv(a: int, p: int) -> int:\n    \"\"\"Return the inverse of a modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(3, 11)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 101)\n    3\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(a, modp(p - 1, p), p)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if s is a palindrome, False otherwise.\n    >>> is_palindrome(\"aba\")\n    True\n    >>> is_palindrome(\"abcd\")\n    False\n    >>> is_palindrome(\"abcde\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcde\")\n    True\n    >>> is_palindrome(\"abcdef\")\n    True\n    >>> is_palindrome(\"abcdef\")\n    True\n    \"\"\"\n    if len(s) <= 1:\n        return True\n    return s[0] == s[-1] and is_palindrome(s[1:])\n\n\ndef is_palindromes(",
    "return pow(2, n, p)\n\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    6\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modp(p-2, p)\n\n\ndef modexp(x: int, n: int, p: int):\n    \"\"\"Return x^n modulo p (be aware of numerics).\n    >>> modexp(3, 3, 5)\n    3\n    >>> modexp(1101, 3, 101)\n    8\n    >>> modexp(0, 3, 101)\n    1\n    >>> modexp(3, 3, 11)\n    6\n    >>> modexp(100, 3, 101)\n    1\n    \"\"\"\n    return pow(x, n, p)\n\n\ndef isprime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> isprime(3)\n    False\n    >>> isprime(5)\n    True\n    >>> isprime(11)\n    False\n    >>> isprime(12)\n    True\n    >>> isprime(13)\n    False\n    >>> isprime(100)\n    False\n    >>> isprime(101)\n    True\n    >>> isprime(2**64)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 5 == 0 or n % 7 == 0:\n        return False\n    if n % 11 == 0 or n % 13 == 0:\n        return False\n    if n % 17 == 0 or n % 19 == 0:\n        return False\n    if n % 23 == 0 or n % 29 == 0:\n        return False\n    if n % 31 == 0 or n % 37 == 0:\n        return False\n    if n % 41 == 0",
    "return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    1\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(a, modp(p-2, p), p)\n\ndef randprime(p: int, seed=None):\n    \"\"\"Return a random prime number p of the form p = 2*q + 1, where p and q are in the range 1..p-1.\n    >>> randprime(7)\n    11\n    >>> randprime(7, seed=0)\n    11\n    >>> randprime(7, seed=0)\n    11\n    \"\"\"\n    import random\n    from itertools import cycle\n    import math\n\n    if seed is None:\n        seed = random.randrange(2**(8*math.ceil(math.log(p-1, 2))), 2**(8*math.ceil(math.log(p-1, 2))+1))\n    #seed = 0x12345678\n    a = 2\n    q = p-1\n    while 1:\n        a = pow(a, 2, p)\n        q = pow(q, 2, p)\n        if (a % p) == 1 and (q % p) == 1:\n            return a*q\n        if a*a % p == 1:\n            break\n    #print a, q\n    return a*q\n\ndef randprime(p: int, seed=None):\n    \"\"\"Return a random prime number p of the form p = 2*q + 1, where p and q are in the range 1..p-1.\n    >>> randprime(7)\n    11\n    >>> randprime(7, seed=0)\n    11\n    >>> randprime(7, seed=0)\n    11\n    \"\"\"\n    import random\n    from itertools import cycle\n    import math",
    "if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n    return pow(2, n, p)\n\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> modinv(2, 5)\n    3\n    >>> modinv(3, 5)\n    2\n    >>> modinv(3, 11)\n    4\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    if a == 0:\n        raise ValueError('a must be a positive integer')\n    if a == 1:\n        return 0\n    if a == p:\n        return 1\n    if a < 0:\n        raise ValueError('a must be a positive integer')\n    # Fermat's Little Theorem\n    a = pow(a, p-2, p)\n    if a == 1:\n        raise ValueError('a must be a non-trivial prime')\n    return a\n\n\ndef modular_inverse(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> modular_inverse(2, 5)\n    3\n    >>> modular_inverse(3, 5)\n    2\n    >>> modular_inverse(3, 11)\n    4\n    >>> modular_inverse(100, 101)\n    1\n    \"\"\"\n    return modinv(a, p)\n\n\ndef modular_product(a: int, b: int, p: int):\n    \"\"\"Return a*b modulo p (be aware of numerics).\n    >>> modular_product(3, 4, 5)\n    15\n    >>> modular_product(3, 9, 11)\n    7\n    >>> modular_product(100, 101, 101)\n    1\n    \"\"\"\n    return (a*b) % p\n\n\ndef modular_power(a: int, b: int, p: int):\n    \"\"\"Return a^b modulo p (be aware of numerics).\n    >>> modular_power(3, 4, 5)\n    15",
    "return pow(2, n, p)\n\ndef fib(n: int):\n    \"\"\"Return Fibonacci number for n.\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    >>> fib(7)\n    13\n    >>> fib(8)\n    21\n    >>> fib(9)\n    34\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Fibonacci numbers only work for positive values\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef fib2(n: int):\n    \"\"\"Return Fibonacci number for n.\n    >>> fib2(0)\n    0\n    >>> fib2(1)\n    1\n    >>> fib2(2)\n    1\n    >>> fib2(3)\n    2\n    >>> fib2(4)\n    3\n    >>> fib2(5)\n    5\n    >>> fib2(6)\n    8\n    >>> fib2(7)\n    13\n    >>> fib2(8)\n    21\n    >>> fib2(9)\n    34\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Fibonacci numbers only work for positive values\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib2(n-1) + fib2(n-2)\n\ndef fib3(n: int):\n    \"\"\"Return Fibonacci number for n.\n    >>> fib3(0)\n    0\n    >>> fib3(1)\n    1\n    >>> fib3(2)\n    1\n    >>> fib3(3)\n    2\n    >>> fib3(4)\n    3\n    >>> fib3(5)",
    "return pow(2, n, p)\n\n\ndef divp(a: int, b: int):\n    \"\"\"Return a/b, where a and b are both positive.\n    >>> divp(7, 3)\n    2\n    >>> divp(3, 7)\n    0\n    >>> divp(7, 0)\n    7\n    >>> divp(0, 7)\n    0\n    >>> divp(7, -3)\n    -2\n    >>> divp(-7, 3)\n    -2\n    >>> divp(-7, -3)\n    2\n    >>> divp(-7, 0)\n    -7\n    >>> divp(0, -7)\n    0\n    \"\"\"\n    return a // b if b > 0 else a // (b + 1)\n\n\ndef mulp(a: int, b: int):\n    \"\"\"Return a*b, where a and b are both positive.\n    >>> mulp(7, 3)\n    21\n    >>> mulp(3, 7)\n    21\n    >>> mulp(7, 0)\n    0\n    >>> mulp(0, 7)\n    0\n    >>> mulp(7, -3)\n    -21\n    >>> mulp(-7, 3)\n    -21\n    >>> mulp(-7, -3)\n    21\n    >>> mulp(-7, 0)\n    -7\n    >>> mulp(0, -7)\n    0\n    \"\"\"\n    return a * b if b > 0 else (a * (b + 1))\n\n\ndef divp2(a: int, b: int):\n    \"\"\"Return a/b, where a and b are both positive.\n    >>> divp2(7, 3)\n    2\n    >>> divp2(3, 7)\n    0\n    >>> divp2(7, 0)\n    7\n    >>> divp2(0, 7)\n    0\n    >>> divp2(7, -3)\n    -2\n    >>> divp2(-7, 3)\n    -2\n    >>> divp2(-7, -3)\n    2\n    >>> divp2(-7, 0)\n    -7\n    >>> divp",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Calculate the inverse of n modulo p.\n    >>> modinv(2, 5)\n    2\n    >>> modinv(3, 5)\n    3\n    >>> modinv(5, 5)\n    1\n    >>> modinv(4, 5)\n    5\n    >>> modinv(6, 5)\n    -2\n    >>> modinv(5, 7)\n    -1\n    >>> modinv(5, 11)\n    5\n    \"\"\"\n    return pow(modp(p, p-2), n, p)\n\ndef lcm(a: int, b: int):\n    \"\"\"Calculate the least common multiple of a and b.\n    >>> lcm(4, 6)\n    12\n    >>> lcm(3, 6)\n    6\n    >>> lcm(4, 7)\n    21\n    >>> lcm(3, 8)\n    24\n    \"\"\"\n    return a*b/gcd(a, b)\n\ndef gcd(a: int, b: int):\n    \"\"\"Calculate the greatest common divisor of a and b.\n    >>> gcd(3, 6)\n    3\n    >>> gcd(3, 7)\n    1\n    >>> gcd(3, 8)\n    1\n    >>> gcd(7, 8)\n    1\n    >>> gcd(3, 9)\n    1\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int):\n    \"\"\"Calculate the least common multiple of a and b.\n    >>> lcm(4, 6)\n    12\n    >>> lcm(3, 6)\n    6\n    >>> lcm(4, 7)\n    21\n    >>> lcm(3, 8)\n    24\n    \"\"\"\n    return a*b/gcd(a, b)\n\ndef pw(n: int, p: int):\n    \"\"\"Calculate the power of p to n.\n    >>> pw(3, 5)\n    15\n    >>> pw",
    "return pow(2, n, p)\n\ndef int2base(n: int, p: int):\n    \"\"\"Return n in base p, where p is prime.\n    >>> int2base(3, 5)\n    3\n    >>> int2base(1101, 101)\n    2\n    >>> int2base(0, 101)\n    1\n    >>> int2base(3, 11)\n    8\n    >>> int2base(100, 101)\n    1\n    \"\"\"\n    return pow(n, 1/p, p)\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime.\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(1101)\n    True\n    >>> is_prime(0)\n    False\n    >>> is_prime(3, 101)\n    False\n    >>> is_prime(100, 101)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_prime_mod(n: int, p: int):\n    \"\"\"Check if n is prime modulo p.\n    >>> is_prime_mod(3, 5)\n    True\n    >>> is_prime_mod(5, 5)\n    True\n    >>> is_prime_mod(1101, 101)\n    False\n    >>> is_prime_mod(0, 101)\n    False\n    >>> is_prime_mod(3, 11)\n    False\n    >>> is_prime_mod(100, 101)\n    True\n    \"\"\"\n    return pow(n, -1, p) == 1\n\ndef is_composite_mod(n: int, p: int):\n    \"\"\"Check if n is composite modulo p.\n    >>> is_composite_mod(3, 5)\n    False\n    >>> is_composite_mod(5, 5)\n    False\n    >>> is_compos",
    "return (n % p) % p\n\n\ndef mulmod(a: int, b: int, p: int):\n    \"\"\"Multiply a and b modulo p (be aware of numerics).\n    >>> mulmod(3, 5, 7)\n    3\n    >>> mulmod(1101, 101, 101)\n    2\n    >>> mulmod(0, 1, 101)\n    1\n    >>> mulmod(3, 11, 101)\n    8\n    >>> mulmod(100, 101, 101)\n    1\n    \"\"\"\n    return (a * b) % p\n\n\ndef addmod(a: int, b: int, p: int):\n    \"\"\"Add a and b modulo p (be aware of numerics).\n    >>> addmod(3, 5, 7)\n    6\n    >>> addmod(1101, 101, 101)\n    102\n    >>> addmod(0, 1, 101)\n    0\n    >>> addmod(3, 11, 101)\n    13\n    >>> addmod(100, 101, 101)\n    101\n    \"\"\"\n    return (a + b) % p\n\n\ndef is_prime(n: int, k: int = 2):\n    \"\"\"Test if number is prime.\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(101)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 7:\n        return True\n    if n < 17:\n        return True\n    if n < 37:\n        return True\n    if n < 67:\n        return True\n    if n < 127:\n        return True\n    if n < 251:\n        return True\n    if n < 509:\n        return True\n    if n < 1021:\n        return True\n    if n < 2039:\n        return True\n    if n < 4093:\n        return True\n    if n < 8191:\n        return True\n    if",
    "return pow(2, n, p)\n\ndef modn(n: int, p: int):\n    \"\"\"Return n modulo p (be aware of numerics).\n    >>> modn(3, 5)\n    2\n    >>> modn(1101, 101)\n    1\n    >>> modn(0, 101)\n    0\n    >>> modn(3, 11)\n    8\n    >>> modn(100, 101)\n    1\n    \"\"\"\n    return pow(n, p - 2, p)\n\ndef modm(n: int, m: int):\n    \"\"\"Return n modulo m (be aware of numerics).\n    >>> modm(3, 5)\n    2\n    >>> modm(1101, 101)\n    1\n    >>> modm(0, 101)\n    0\n    >>> modm(3, 11)\n    8\n    >>> modm(100, 101)\n    1\n    \"\"\"\n    return pow(n, m - 2, m)\n\ndef gcd(n: int, m: int):\n    \"\"\"Return the greatest common divisor of n and m.\"\"\"\n    while m:\n        n, m = m, n % m\n    return n\n\ndef lcm(n: int, m: int):\n    \"\"\"Return the least common multiple of n and m.\"\"\"\n    return n * m / gcd(n, m)\n\ndef pwr(n: int, p: int):\n    \"\"\"Return the nth power of p.\"\"\"\n    if n == 0:\n        return 1\n    return n * pwr(n - 1, p - 1)\n\ndef fact(n: int):\n    \"\"\"Return the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    return pwr(n, n)\n\ndef fib(n: int):\n    \"\"\"Return the nth fibonacci number.\"\"\"\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth fibonacci number.\"\"\"\n    if n == 0:\n        return 0",
    "return pow(2, n, p)\n\ndef mulmod(a: int, b: int, m: int):\n    \"\"\"Return a * b mod m (be aware of numerics).\n    >>> mulmod(3, 5, 7)\n    3\n    >>> mulmod(5, 7, 3)\n    1\n    >>> mulmod(3, 0, 7)\n    3\n    >>> mulmod(3, 1, 7)\n    6\n    >>> mulmod(3, 2, 7)\n    6\n    >>> mulmod(3, 3, 7)\n    0\n    \"\"\"\n    return pow(a, b, m)\n\ndef inverse(a: int, m: int):\n    \"\"\"Return the inverse of a modulo m (be aware of numerics).\n    >>> inverse(5, 7)\n    3\n    >>> inverse(6, 7)\n    3\n    >>> inverse(3, 7)\n    2\n    >>> inverse(2, 7)\n    1\n    >>> inverse(1, 7)\n    6\n    >>> inverse(0, 7)\n    1\n    \"\"\"\n    return modp(modp(modp(a, m) - 1, m), m)\n\ndef powermod(a: int, p: int, m: int):\n    \"\"\"Return a to the power p mod m (be aware of numerics).\n    >>> powermod(5, 3, 7)\n    6\n    >>> powermod(5, 3, 7)\n    6\n    >>> powermod(5, 3, 7)\n    6\n    >>> powermod(5, 3, 7)\n    6\n    >>> powermod(5, 3, 7)\n    6\n    >>> powermod(5, 3, 7)\n    6\n    \"\"\"\n    return pow(a, p, m)\n\ndef summod(a: int, m: int):\n    \"\"\"Return a + b mod m (be aware of numerics).\n    >>> summod(5, 7)\n    2\n    >>> summod(5, 7)\n    2\n    >>> summod(5, 7)\n    2\n    >>> summod(5, 7)\n    2\n    >>> summod(5, 7)\n    2",
    "return pow(2, n, p)\n\ndef powm(a: int, b: int, p: int):\n    \"\"\"Return a^b mod p (be aware of numerics).\n    >>> powm(3, 2, 5)\n    3\n    >>> powm(10, 2, 5)\n    20\n    >>> powm(5, 3, 5)\n    5\n    >>> powm(5, 3, 7)\n    6\n    >>> powm(5, 3, 11)\n    7\n    >>> powm(5, 3, 101)\n    6\n    >>> powm(5, 3, 111)\n    7\n    >>> powm(5, 3, 101)\n    6\n    >>> powm(5, 3, 111)\n    7\n    \"\"\"\n    return pow(a, b, p)\n\ndef invert(a: int, p: int):\n    \"\"\"Return the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> invert(3, 5)\n    3\n    >>> invert(5, 5)\n    1\n    >>> invert(6, 5)\n    2\n    >>> invert(5, 7)\n    2\n    >>> invert(101, 101)\n    1\n    >>> invert(101, 111)\n    2\n    >>> invert(111, 101)\n    2\n    >>> invert(111, 111)\n    1\n    \"\"\"\n    return powm(a, p-2, p)\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(5, 7)\n    5\n    >>> gcd(5, 9)\n    5\n    >>> gcd(5, 0)\n    5\n    >>> gcd(5, -1)\n    5\n    >>> gcd(5, -4)\n    5\n    >>> gcd(5, -5)\n    5\n    >>> gcd(5, -6)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\ndef",
    "if n == 0:\n        return 1\n    return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    2\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return pow(modp(n, p), modp(p, p) - 2, p)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return (n % p) % p\n\ndef pw(n: int, p: int):\n    \"\"\"Return n to the power of p (be aware of numerics).\n    >>> pw(0, 5)\n    0\n    >>> pw(1, 5)\n    1\n    >>> pw(2, 5)\n    2\n    >>> pw(3, 5)\n    4\n    >>> pw(4, 5)\n    9\n    >>> pw(0, 7)\n    0\n    >>> pw(1, 7)\n    1\n    >>> pw(2, 7)\n    3\n    >>> pw(3, 7)\n    6\n    >>> pw(4, 7)\n    10\n    >>> pw(5, 7)\n    15\n    >>> pw(6, 7)\n    24\n    >>> pw(7, 7)\n    49\n    \"\"\"\n    if n < 0:\n        return 1 % p\n    return pow(n, modp(n, p)) % p\n\ndef mul(n: int, p: int):\n    \"\"\"Return n to the power of p (be aware of numerics).\n    >>> mul(0, 5)\n    0\n    >>> mul(1, 5)\n    1\n    >>> mul(2, 5)\n    2\n    >>> mul(3, 5)\n    4\n    >>> mul(4, 5)\n    9\n    >>> mul(5, 5)\n    25\n    >>> mul(6, 5)\n    36\n    >>> mul(7, 5)\n    49\n    \"\"\"\n    return pw(n, p)\n\ndef div(n: int, p: int):\n    \"\"\"Return n to the power of p (be aware of numerics).\n    >>> div(0, 5)\n    0\n    >>> div(1, 5)\n    1\n    >>> div(2, 5)\n    2\n    >>> div(3, 5)\n    3\n    >>> div(4, 5)\n    4\n    >>> div(5, 5)\n    1\n    >>> div(6, 5)\n    2\n    >>> div(7, 5)\n    3\n    \"\"\"\n    return",
    "return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return the inverse of a modulo p (be aware of numerics).\n    >>> modinv(5, 101)\n    2\n    >>> modinv(1101, 101)\n    4\n    >>> modinv(8, 101)\n    6\n    >>> modinv(3, 101)\n    1\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    1\n    \"\"\"\n    return pow(modp(p, a), -1, p)\n\ndef modexp(a: int, b: int, p: int):\n    \"\"\"Return a^b modulo p (be aware of numerics).\n    >>> modexp(2, 3, 5)\n    7\n    >>> modexp(3, 3, 101)\n    8\n    >>> modexp(3, 7, 101)\n    4\n    >>> modexp(3, 8, 101)\n    2\n    >>> modexp(3, 9, 101)\n    1\n    >>> modexp(3, 10, 101)\n    3\n    >>> modexp(3, 11, 101)\n    2\n    >>> modexp(3, 12, 101)\n    1\n    >>> modexp(3, 13, 101)\n    3\n    >>> modexp(3, 14, 101)\n    3\n    >>> modexp(3, 15, 101)\n    3\n    >>> modexp(3, 16, 101)\n    2\n    >>> modexp(3, 17, 101)\n    1\n    >>> modexp(3, 18, 101)\n    1\n    >>> modexp(3, 19, 101)\n    3\n    >>> modexp(3, 20, 101)\n    3\n    >>> modexp(3, 21, 101)\n    3\n    >>> modexp(3, 22, 101)\n    2\n    >>> modexp(3, 23, 101)\n    1\n    >>> modexp(3, 24, 101)\n    3\n    >>> modexp(3, 25, 101)\n    3\n    >>> modexp(3, 26, 101)\n    3\n    >>> modexp(",
    "return pow(2, n, p)\n\ndef modinv(p: int, m: int):\n    \"\"\"Return the multiplicative inverse of p modulo m.\n    >>> modinv(5, 6)\n    2\n    >>> modinv(5, 9)\n    3\n    >>> modinv(5, 13)\n    3\n    >>> modinv(5, 13)\n    3\n    \"\"\"\n    return pow(m, modp(m, p), p)\n\ndef isprime(n: int):\n    \"\"\"Return true if n is a prime number.\n    >>> isprime(3)\n    True\n    >>> isprime(5)\n    True\n    >>> isprime(13)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef isprime_mod(n: int, m: int):\n    \"\"\"Return true if n is a prime number (mod m).\n    >>> isprime_mod(3, 9)\n    True\n    >>> isprime_mod(5, 9)\n    False\n    >>> isprime_mod(13, 9)\n    True\n    \"\"\"\n    if n % m == 0:\n        return False\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef isprime_modinv(p: int, m: int):\n    \"\"\"Return true if p is a prime number (mod m).\n    >>> isprime_modinv(5, 9)\n    True\n    >>> isprime_modinv(5, 13)\n    False\n    \"\"\"\n    return modinv(p, m) % m == 1\n\ndef isprime_mod_pow(n: int, p: int, m: int):\n    \"\"\"Return true if n is a prime number",
    "return pow(2, n, p)\n\n\ndef fpow(a: int, p: int):\n    \"\"\"Return a^p (be aware of numerics).\n    >>> fpow(3, 5)\n    27\n    >>> fpow(3, -5)\n    1\n    >>> fpow(3, 0)\n    1\n    >>> fpow(3, 1)\n    3\n    >>> fpow(3, -1)\n    1\n    >>> fpow(3, -100)\n    1\n    >>> fpow(3, 101)\n    1\n    >>> fpow(3, -101)\n    1\n    \"\"\"\n    if a == 0:\n        return 1\n    if p == 0:\n        return 1\n    return pow(a, p, p)\n\n\ndef fmodp(a: int, p: int):\n    \"\"\"Return a modulo p (be aware of numerics).\n    >>> fmodp(3, 5)\n    1\n    >>> fmodp(3, -5)\n    3\n    >>> fmodp(3, 101)\n    3\n    >>> fmodp(3, -101)\n    1\n    >>> fmodp(3, 101)\n    -1\n    >>> fmodp(3, -101)\n    -1\n    \"\"\"\n    return fpow(a, p) % p\n\n\ndef fpowmod(a: int, p: int, m: int):\n    \"\"\"Return a^p mod m (be aware of numerics).\n    >>> fpowmod(3, 5, 5)\n    27\n    >>> fpowmod(3, 5, -5)\n    3\n    >>> fpowmod(3, 5, 101)\n    3\n    >>> fpowmod(3, 5, -101)\n    3\n    >>> fpowmod(3, 5, 101)\n    1\n    >>> fpowmod(3, 5, -101)\n    1\n    >>> fpowmod(3, 5, 101)\n    1\n    >>> fpowmod(3, 5, -101)\n    1\n    \"\"\"\n    return fpow(",
    "return pow(2, n, p)\n\ndef modn(n: int, p: int):\n    \"\"\"Return 2^n modulo n (be aware of numerics).\n    >>> modn(3, 5)\n    3\n    >>> modn(1101, 101)\n    11\n    >>> modn(0, 101)\n    0\n    >>> modn(3, 11)\n    3\n    >>> modn(100, 101)\n    100\n    \"\"\"\n    return pow(2, n, p) % p\n\ndef find_prime(n: int, test=False):\n    \"\"\"Return a prime number that is not a factor of n.\n    >>> find_prime(3)\n    5\n    >>> find_prime(5)\n    7\n    >>> find_prime(5, True)\n    7\n    >>> find_prime(7)\n    11\n    >>> find_prime(11)\n    13\n    >>> find_prime(11, True)\n    13\n    \"\"\"\n    if test:\n        from itertools import islice\n        for p in islice(prime_sieve(), 0, n):\n            if n % p:\n                return p\n    else:\n        from random import randint\n        for p in prime_sieve():\n            if n % p:\n                return p\n        while True:\n            p = randint(2, n-2)\n            if n % p:\n                return p\n\ndef prime_sieve(n=None):\n    \"\"\"Generate a sieve of all prime numbers.\n    >>> prime_sieve(3)\n    [2, 3, 5]\n    >>> prime_sieve(5)\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> prime_sieve(7)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    import itertools\n    if n is None:\n        n = int(itertools.count(2))\n    nums = range(n, 1,",
    "return pow(2, n, p)\n\ndef lcm(n1: int, n2: int):\n    \"\"\"Return the least common multiple of n1 and n2.\n    >>> lcm(3, 6)\n    6\n    >>> lcm(3, 4)\n    12\n    >>> lcm(0, 0)\n    0\n    >>> lcm(3, 1)\n    3\n    \"\"\"\n    return n1 * n2 / gcd(n1, n2)\n\ndef gcd(n1: int, n2: int):\n    \"\"\"Return the greatest common divisor of n1 and n2.\n    >>> gcd(3, 6)\n    3\n    >>> gcd(3, 4)\n    3\n    >>> gcd(0, 0)\n    0\n    >>> gcd(3, 1)\n    3\n    \"\"\"\n    while n2!= 0:\n        n1, n2 = n2, n1 % n2\n    return n1\n\ndef lcm(n1: int, n2: int):\n    \"\"\"Return the least common multiple of n1 and n2.\n    >>> lcm(3, 6)\n    6\n    >>> lcm(3, 4)\n    12\n    >>> lcm(0, 0)\n    0\n    >>> lcm(3, 1)\n    3\n    \"\"\"\n    return n1 * n2 / gcd(n1, n2)\n\ndef num_of_prime_factors(n: int):\n    \"\"\"Return the number of prime factors of n.\n    >>> num_of_prime_factors(2)\n    2\n    >>> num_of_prime_factors(3)\n    2\n    >>> num_of_prime_factors(4)\n    2\n    >>> num_of_prime_factors(5)\n    3\n    >>> num_of_prime_factors(10)\n    3\n    >>> num_of_prime_factors(100)\n    5\n    \"\"\"\n    i = 2\n    n = lcm(n, i)\n    while i < n:\n        if n % i == 0:\n            n /= i\n            i += 1",
    "return pow(2, n, p)\n\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the lowest common multiple of a and b.\"\"\"\n    return a * b // gcd(a, b)\n\n\ndef find_k(a: int, b: int, k: int):\n    \"\"\"Find the smallest k such that a**k = b.\n    >>> find_k(2, 3, 2)\n    3\n    >>> find_k(2, 3, 4)\n    3\n    >>> find_k(2, 3, 6)\n    2\n    >>> find_k(2, 3, 3)\n    1\n    >>> find_k(2, 3, 4)\n    1\n    >>> find_k(2, 3, 5)\n    2\n    >>> find_k(2, 3, 7)\n    2\n    >>> find_k(2, 3, 8)\n    2\n    \"\"\"\n    return lcm(a, b) // gcd(a, b)\n\n\ndef factorial(n: int):\n    \"\"\"Return the factorial of n (n!).\"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot take the factorial of a negative number.\")\n    return n * factorial(n - 1)\n\n\ndef comb(n: int, k: int):\n    \"\"\"Return the number of combinations of k elements out of n.\"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\ndef euler(n: int, k: int):\n    \"\"\"Return the number of ways to choose k elements from n.\"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    return comb(n, k)\n\n\ndef permutations(iterable: Iterable, r: int = None):\n    \"\"\"Return all permutations of the iterable.\n    >>> list(permutations(range(3)))\n    [(0, 1, 2),",
    "return pow(2, n, p)\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime.\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(1101)\n    True\n    >>> is_prime(100)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_mod(n: int, m: int):\n    \"\"\"Check if n is prime modulo m.\n    >>> is_prime_mod(2, 3)\n    True\n    >>> is_prime_mod(3, 3)\n    False\n    >>> is_prime_mod(3, 4)\n    True\n    >>> is_prime_mod(100, 101)\n    False\n    >>> is_prime_mod(100, 101)\n    True\n    >>> is_prime_mod(3, 2)\n    False\n    >>> is_prime_mod(3, 1)\n    False\n    >>> is_prime_mod(1101, 101)\n    True\n    >>> is_prime_mod(1101, 101)\n    True\n    >>> is_prime_mod(100, 101)\n    False\n    >>> is_prime_mod(100, 101)\n    True\n    >>> is_prime_mod(11, 101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:",
    "return pow(2, n, p)\n\ndef modmul(n: int, p: int):\n    \"\"\"Return n * m modulo p (be aware of numerics).\n    >>> modmul(3, 5)\n    15\n    >>> modmul(1101, 101)\n    2\n    >>> modmul(0, 101)\n    0\n    >>> modmul(3, 11)\n    15\n    >>> modmul(100, 101)\n    1\n    \"\"\"\n    return pow(n, p, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return n^{-1} modulo p (be aware of numerics).\n    >>> modinv(5, 7)\n    3\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    3\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return modmul(pow(n, p - 2, p), p)",
    "return pow(2, n, p)\n\ndef modinv(a: int, m: int):\n    \"\"\"Return inverse of a modulo m (be aware of numerics).\n    >>> modinv(3, 7)\n    6\n    >>> modinv(7, 7)\n    3\n    >>> modinv(6, 7)\n    6\n    >>> modinv(6, 101)\n    1\n    >>> modinv(6, 101)\n    6\n    \"\"\"\n    return modp(modp(a, m) - 1, m)\n\ndef modpow(a: int, p: int, m: int):\n    \"\"\"Return a^p mod m (be aware of numerics).\n    >>> modpow(3, 5, 7)\n    3\n    >>> modpow(3, 5, 101)\n    1\n    >>> modpow(3, 5, 101)\n    3\n    \"\"\"\n    return pow(a, p, m)\n\ndef modinvpow(a: int, p: int, m: int):\n    \"\"\"Return inverse of a^p mod m (be aware of numerics).\n    >>> modinvpow(3, 5, 7)\n    6\n    >>> modinvpow(3, 5, 101)\n    1\n    >>> modinvpow(3, 5, 101)\n    6\n    \"\"\"\n    return modpow(modp(a, m), p, m)\n\ndef modmul(a: int, b: int, m: int):\n    \"\"\"Return a*b mod m (be aware of numerics).\n    >>> modmul(3, 7, 7)\n    3\n    >>> modmul(3, 7, 101)\n    3\n    >>> modmul(3, 7, 101)\n    3\n    \"\"\"\n    return pow(a, b, m)\n\ndef modinvmul(a: int, b: int, m: int):\n    \"\"\"Return inverse of a*b mod m (be aware of numerics).\n    >>> modinvmul(3, 7, 7)\n    6\n    >>> modinvmul(3, 7, 101)\n    1\n    >>> modinvmul(3",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    2\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(pow(p, modp(n, p), p) % p, modp(n, p), p)\n\ndef modexp(n: int, p: int, m: int):\n    \"\"\"Return n^m modulo p (be aware of numerics).\n    >>> modexp(3, 5, 3)\n    21\n    >>> modexp(3, 5, -3)\n    9\n    >>> modexp(3, 101, 101)\n    1\n    >>> modexp(0, 101, 101)\n    1\n    >>> modexp(3, 11, 101)\n    2\n    >>> modexp(100, 101, 101)\n    1\n    \"\"\"\n    return pow(n, m, p) % p\n\ndef modgcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> modgcd(3, 9)\n    3\n    >>> modgcd(3, -9)\n    3\n    >>> modgcd(3, 10)\n    1\n    >>> modgcd(3, -10)\n    1\n    >>> modgcd(3, 101)\n    1\n    >>> modgcd(3, -101)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while a!= 0:\n        a, b = b, a % b\n    return b\n\ndef modlcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b.\n    >>> modlcm(3, 9)\n    9\n    >>> modlcm(",
    "return pow(2, n, p)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return greatest common divisor of a and b.\n    >>> gcd(2, 4)\n    2\n    >>> gcd(7, 2)\n    2\n    >>> gcd(7, 9)\n    1\n    >>> gcd(7, 0)\n    7\n    >>> gcd(0, 1)\n    1\n    >>> gcd(1, 1)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return least common multiple of a and b.\n    >>> lcm(4, 6)\n    12\n    >>> lcm(7, 2)\n    14\n    >>> lcm(7, 9)\n    21\n    >>> lcm(7, 0)\n    7\n    >>> lcm(0, 1)\n    1\n    >>> lcm(1, 1)\n    1\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    \"\"\"\n    return not (n % 2 or (n % 3 and n % 5))\n\n\ndef is_square(n: int) -> bool:\n    \"\"\"",
    "return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Return a^-1 mod p.\n    >>> modinv(1, 7)\n    6\n    >>> modinv(2, 7)\n    6\n    >>> modinv(3, 7)\n    4\n    >>> modinv(5, 7)\n    5\n    >>> modinv(6, 7)\n    6\n    >>> modinv(7, 7)\n    1\n    >>> modinv(8, 7)\n    8\n    \"\"\"\n    return pow(a, p - 2, p)\n\ndef modexp(a: int, b: int, p: int):\n    \"\"\"Return a^b mod p (be aware of numerics).\n    >>> modexp(1, 3, 7)\n    2\n    >>> modexp(2, 3, 7)\n    4\n    >>> modexp(3, 3, 7)\n    6\n    >>> modexp(4, 3, 7)\n    8\n    >>> modexp(5, 3, 7)\n    9\n    >>> modexp(6, 3, 7)\n    10\n    >>> modexp(7, 3, 7)\n    1\n    >>> modexp(8, 3, 7)\n    12\n    >>> modexp(9, 3, 7)\n    14\n    >>> modexp(10, 3, 7)\n    16\n    >>> modexp(11, 3, 7)\n    20\n    >>> modexp(12, 3, 7)\n    24\n    >>> modexp(13, 3, 7)\n    28\n    >>> modexp(14, 3, 7)\n    32\n    >>> modexp(15, 3, 7)\n    36\n    >>> modexp(16, 3, 7)\n    40\n    >>> modexp(17, 3, 7)\n    44\n    >>> modexp(18, 3, 7)\n    48\n    >>> modexp(19, 3, 7)\n    52\n    >>> modexp(20, 3, 7)\n    56\n    >>> modexp(21, 3, 7)\n    60\n    >>> modexp(22, 3, 7)\n    64\n    >>> modexp(",
    "return pow(2, n, p)\n\n\ndef find_prime(p: int, test: bool = True):\n    \"\"\"Return a prime number p such that p % p!= 0,\n    and p < p**2.\n    >>> find_prime(1000000)\n    15\n    >>> find_prime(1000000, False)\n    7\n    \"\"\"\n    for i in range(2, p):\n        if pow(i, p, p) == 1:\n            return i\n    if test:\n        raise ValueError('No prime found!')\n    else:\n        return p\n\n\ndef check_prime(p: int, test: bool = True):\n    \"\"\"Return True if p is prime, False otherwise.\n    >>> check_prime(7)\n    True\n    >>> check_prime(7, False)\n    False\n    \"\"\"\n    if p == 2:\n        return True\n    if p % 2 == 0:\n        return False\n    if p % 3 == 0:\n        return False\n    if p % 5 == 0:\n        return False\n    if p % 7 == 0:\n        return False\n    if p % 11 == 0:\n        return False\n    if p % 13 == 0:\n        return False\n    if p % 17 == 0:\n        return False\n    if p % 19 == 0:\n        return False\n    if p % 23 == 0:\n        return False\n    if p % 29 == 0:\n        return False\n    if p % 31 == 0:\n        return False\n    if p % 37 == 0:\n        return False\n    if p % 41 == 0:\n        return False\n    if p % 43 == 0:\n        return False\n    if p % 47 == 0:\n        return False\n    if p % 53 == 0:\n        return False\n    if p % 59 == 0:\n        return False\n    if p % 61 == 0:\n        return False\n    if p % 67 == 0:\n        return False\n    if p % 71 == 0:\n        return False\n    if p % 73 == 0:\n        return False\n    if p % 79 == 0:\n        return False\n    if p % 83 == 0:\n        return False\n    if p % 89 ==",
    "if n == 0:\n        return 1\n    return pow(2, n, p)\n\ndef get_primes(n: int):\n    \"\"\"Return list of primes, up to n (be aware of numerics).\n    >>> get_primes(5)\n    [3, 5, 7]\n    >>> get_primes(7)\n    [3, 5, 7, 11]\n    \"\"\"\n    result = []\n    for p in range(2, n):\n        if is_prime(p):\n            result.append(p)\n        elif p % 2 == 0:\n            i = 2\n            while i * i <= p:\n                if p % i == 0:\n                    result.append(p)\n                i += 1\n    return result\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n == 4:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        if n % (i + 4) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_prime_product(n: int, primes: List[int]):\n    \"\"\"Return the product of all primes below n.\n    >>> get_prime_product(4, [3, 5, 7])\n    120\n    >>> get_prime_product(3, [3, 5, 7])\n    4\n    >>> get_prime_product(1, [3, 5, 7])\n    1\n    >>> get_prime_product(8, [3, 5, 7])\n    24",
    "if p == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n < 0:\n        return modp(-n, p)\n    else:\n        return (n % p) % p\n\ndef modinv(a: int, m: int):\n    \"\"\"Return inverse of a modulo m (be aware of numerics).\n    >>> modinv(2, 5)\n    2\n    >>> modinv(3, 5)\n    -1\n    >>> modinv(4, 5)\n    0\n    >>> modinv(5, 5)\n    1\n    >>> modinv(6, 5)\n    0\n    >>> modinv(7, 5)\n    -1\n    >>> modinv(8, 5)\n    1\n    >>> modinv(9, 5)\n    0\n    >>> modinv(10, 5)\n    -1\n    >>> modinv(11, 5)\n    0\n    >>> modinv(0, 5)\n    0\n    >>> modinv(1, 5)\n    -1\n    >>> modinv(2, 5)\n    2\n    >>> modinv(3, 5)\n    -1\n    >>> modinv(4, 5)\n    0\n    >>> modinv(5, 5)\n    1\n    >>> modinv(6, 5)\n    -1\n    >>> modinv(7, 5)\n    0\n    >>> modinv(8, 5)\n    1\n    >>> modinv(9, 5)\n    -1\n    >>> modinv(10, 5)\n    0\n    >>> modinv(11, 5)\n    -1\n    >>> modinv(0, 101)\n    1\n    >>> modinv(1, 101)\n    0\n    >>> modinv(2, 101)\n    1\n    >>> modinv(3, 101)\n    0\n    >>> modinv(4, 101)\n    1\n    >>> modinv(5, 101)\n    0\n    >>> modinv(6, 101)\n    1\n    >>> modinv(7, 101)\n    0\n    >>> modinv(8, 101)\n    1\n    >>> modinv(9, 101)\n    0\n    >>>",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the modular multiplicative inverse of n modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    10\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    1\n    >>> modinv(100, 101)\n    0\n    \"\"\"\n    return modp(p-2, p)\n\ndef modexp(m: int, n: int, p: int):\n    \"\"\"Return m^n modulo p.\n    >>> modexp(2, 3, 5)\n    4\n    >>> modexp(1101, 101, 101)\n    25\n    >>> modexp(0, 3, 101)\n    0\n    >>> modexp(3, 100, 101)\n    1\n    >>> modexp(100, 101, 101)\n    0\n    \"\"\"\n    return pow(m, n, p)\n\ndef powmod(m: int, n: int, p: int):\n    \"\"\"Return m^n modulo p.\n    >>> powmod(2, 3, 5)\n    4\n    >>> powmod(1101, 101, 101)\n    25\n    >>> powmod(0, 3, 101)\n    0\n    >>> powmod(3, 100, 101)\n    1\n    >>> powmod(100, 101, 101)\n    0\n    \"\"\"\n    return pow(m, n, p)\n\ndef powmodinv(m: int, n: int, p: int):\n    \"\"\"Return m^n modulo p.\n    >>> powmodinv(2, 3, 5)\n    4\n    >>> powmodinv(1101, 101, 101)\n    25\n    >>> powmodinv(0, 3, 101)\n    0\n    >>> powmodinv(3, 100, 101)\n    1\n    >>> powmodinv(100, 101, 101)\n    0\n    \"\"\"\n    return pow(m, n, p)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "return (n % p) % p\n\n\ndef is_prime(n: int, p: int = 2):\n    \"\"\"Return True if n is a prime number (be aware of numerics).\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(11, 7)\n    True\n    >>> is_prime(100, 101)\n    False\n    >>> is_prime(100, 7)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return True\n    if n < 101:\n        return is_prime(int(math.sqrt(n)), p)\n    if n < 10101:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 1000001:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 100000101:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 1000001001:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 10000010001:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 100000100011:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 1000001000101:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 10000010001001:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 100000100010101:\n        return is_prime(int(math.sqrt(n)) + 1, p)\n    if n < 100000100010101:\n        return is_prime(int(math.sqrt(n)) + 1, p)",
    "return pow(2, n, p)\n\n\ndef lcm(n: int, p: int):\n    \"\"\"Return n*p / gcd(n, p) (be aware of numerics).\n    >>> lcm(3, 5)\n    15\n    >>> lcm(100, 101)\n    101\n    >>> lcm(100, 101)\n    101\n    \"\"\"\n    return n * p / gcd(n, p)\n\n\ndef gcd(n: int, p: int):\n    \"\"\"Return the greatest common divisor of n and p.\n    >>> gcd(3, 5)\n    3\n    >>> gcd(100, 101)\n    1\n    >>> gcd(100, 101)\n    101\n    \"\"\"\n    return pow(n, (p - 1) // gcd(n, p - 1))\n\n\ndef lcm(n: int, p: int):\n    \"\"\"Return the least common multiple of n and p.\n    >>> lcm(3, 5)\n    15\n    >>> lcm(100, 101)\n    101\n    >>> lcm(100, 101)\n    101\n    \"\"\"\n    return n * p / gcd(n, p)\n\n\ndef find_prime(n: int):\n    \"\"\"Find a prime number that is not a divisor of n.\n    >>> find_prime(3)\n    5\n    >>> find_prime(100)\n    101\n    >>> find_prime(100)\n    101\n    >>> find_prime(101)\n    101\n    \"\"\"\n    p = 2\n    while True:\n        if n % p == 0:\n            return p\n        p += 1",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(1101, 101)\n    3\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    2\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(modp(n, p), modp(p - 1, p), p)\n\ndef powl(n: int, p: int):\n    \"\"\"Return n raised to the power p.\n    >>> powl(3, 5)\n    15\n    >>> powl(3, 11)\n    29\n    >>> powl(0, 101)\n    1\n    >>> powl(3, 11)\n    2\n    >>> powl(100, 101)\n    1\n    \"\"\"\n    return pow(n, p, p)\n\ndef powl(n: int, p: int, powl: int):\n    \"\"\"Return n raised to the power p.\n    >>> powl(3, 5)\n    15\n    >>> powl(3, 11)\n    29\n    >>> powl(0, 101)\n    1\n    >>> powl(3, 11)\n    2\n    >>> powl(100, 101)\n    1\n    \"\"\"\n    return pow(n, p, powl)\n\ndef powmod(n: int, p: int, m: int):\n    \"\"\"Return n raised to the power p modulo m.\n    >>> powmod(3, 5, 15)\n    2\n    >>> powmod(3, 11, 101)\n    6\n    >>> powmod(0, 101, 101)\n    1\n    >>> powmod(3, 11, 101)\n    2\n    >>> powmod(100, 101, 101)\n    1\n    \"\"\"\n    return pow(n, p, m) % m\n\ndef powl(n: int, p: int, powl: int):\n    \"\"\"Return n raised to the power p.\n    >>> powl(3, 5)\n    15\n    >>> p",
    "return (2 ** n) % p\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(3)\n    False\n    >>> is_prime(0)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        x = 5\n        y = 2\n        while x * x <= n:\n            if n % x == 0:\n                return False\n            if x % y == 0:\n                return False\n            y += 2\n        return True\n\ndef is_prime_fast(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast(4)\n    False\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(7)\n    True\n    >>> is_prime_fast(8)\n    False\n    >>> is_prime_fast(3)\n    False\n    >>> is_prime_fast(0)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        x = 5\n        y = 2\n        while x * x <= n:\n            if n % x == 0:\n                return False\n            if x % y == 0:\n                return False\n            y += 2\n        return True\n\ndef is_prime_fast_simple(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_simple(4)\n    False\n    >>> is_prime_fast_simple(5)\n    True\n    >>> is_prime_fast_simple(7)",
    "return (2**n) % p\n\ndef modinv(a: int, m: int):\n    \"\"\"Return the multiplicative inverse of a modulo m.\n    >>> modinv(5, 7)\n    2\n    >>> modinv(7, 7)\n    1\n    \"\"\"\n    return pow(a, modp(m-1, m), m)\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(7, 13)\n    7\n    >>> lcm(7, 13) % 7\n    0\n    >>> lcm(7, 13, 21)\n    21\n    >>> lcm(7, 13, 21) % 21\n    0\n    \"\"\"\n    return (a*b) // gcd(a, b)\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(7, 13)\n    7\n    >>> gcd(7, 13) % 7\n    0\n    >>> gcd(7, 13, 21)\n    7\n    >>> gcd(7, 13, 21) % 21\n    0\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(7, 13)\n    71\n    >>> lcm(7, 13) % 7\n    0\n    >>> lcm(7, 13, 21)\n    21\n    >>> lcm(7, 13, 21) % 21\n    0\n    \"\"\"\n    return (a*b) // gcd(a, b)\n\ndef primes(n: int):\n    \"\"\"Generate prime numbers up to n.\n    >>> list(primes(1000))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,",
    "assert p > 0\n    return (n % p) + (p - (n % p)) % p\n\ndef gcd(a, b):\n    \"\"\"Greatest common divisor using Euclid's algorithm.\n    >>> gcd(2, 4)\n    2\n    >>> gcd(4, 4)\n    4\n    >>> gcd(3, 9)\n    3\n    >>> gcd(3, -9)\n    3\n    >>> gcd(0, 0)\n    0\n    >>> gcd(1, 2)\n    1\n    >>> gcd(3, 0)\n    3\n    >>> gcd(0, 1)\n    1\n    >>> gcd(0, -1)\n    1\n    >>> gcd(1, -1)\n    1\n    >>> gcd(-1, -1)\n    1\n    \"\"\"\n    assert a!= 0 and b!= 0\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef lcm(a, b):\n    \"\"\"Least common multiple.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(3, -4)\n    12\n    >>> lcm(3, 0)\n    3\n    >>> lcm(0, 0)\n    0\n    >>> lcm(1, 2)\n    2\n    >>> lcm(3, 0)\n    3\n    >>> lcm(0, 1)\n    1\n    >>> lcm(0, -1)\n    0\n    >>> lcm(1, -1)\n    1\n    >>> lcm(-1, -1)\n    1\n    \"\"\"\n    return a * b / gcd(a, b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if p == 1:\n        return 0\n    return pow(2, n, p)\n\ndef modinv(a: int, p: int):\n    \"\"\"Compute the multiplicative inverse of a modulo p (be aware of numerics).\n    >>> modinv(7, 11)\n    4\n    >>> modinv(3, 5)\n    3\n    >>> modinv(2, 1)\n    1\n    >>> modinv(3, 7)\n    -1\n    >>> modinv(0, 11)\n    0\n    \"\"\"\n    if p == 1:\n        return 0\n    x = pow(a, p - 2, p)\n    if x == 1:\n        return 0\n    return x % p\n\ndef get_prime(n):\n    \"\"\"Return a prime number less than n.\n    >>> get_prime(3)\n    5\n    >>> get_prime(7)\n    11\n    \"\"\"\n    sieve = [True] * n\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i ** 2, n, i):\n                sieve[j] = False\n    return [p for p in range(2, n) if sieve[p]]\n\ndef is_prime(n: int):\n    \"\"\"Check if a number is prime.\n    >>> is_prime(3)\n    True\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for p in range(2, int(n ** 0.5) + 1):\n        if n % p == 0:\n            return False\n    return True\n\ndef is_palindrome(s: str):\n    \"\"\"Check if a string is a palindrome.\n    >>> is_palindrome(\"banana\")\n    True\n    >>> is_palindrome(\"aana\")\n    False\n    >>> is_palindrome(\"banana\")\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef is_palindromic(n: int):",
    "return pow(2, n, p)\n\n\ndef divp(a: int, b: int):\n    \"\"\"Return a/b rounded to nearest integer.\n    >>> divp(3, 5)\n    1\n    >>> divp(3, 10)\n    0\n    >>> divp(100, 101)\n    1\n    >>> divp(0, 101)\n    0\n    >>> divp(3, 11)\n    2\n    >>> divp(100, 101)\n    2\n    \"\"\"\n    return int(round(float(a) / float(b)))\n\n\ndef modp_inv(a: int, p: int):\n    \"\"\"Return inverse of a modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(3, 10)\n    2\n    >>> modp_inv(100, 101)\n    1\n    >>> modp_inv(0, 101)\n    0\n    >>> modp_inv(3, 11)\n    1\n    >>> modp_inv(100, 101)\n    2\n    \"\"\"\n    return divp(pow(a, p - 2, p), p)\n\n\ndef modp_mul(a: int, b: int, p: int):\n    \"\"\"Return a * b modulo p (be aware of numerics).\n    >>> modp_mul(3, 5, 5)\n    15\n    >>> modp_mul(3, 5, 10)\n    15\n    >>> modp_mul(100, 101, 101)\n    1\n    >>> modp_mul(0, 101, 101)\n    0\n    >>> modp_mul(3, 11, 101)\n    3\n    >>> modp_mul(100, 101, 101)\n    2\n    \"\"\"\n    return modp(a * b, p)\n\n\ndef modp_add(a: int, b: int, p: int):\n    \"\"\"Return a + b modulo p (be aware of numerics).\n    >>> modp_add(3, 5, 5)\n    8\n    >>> modp_add(3, 5, 10)\n    8",
    "return pow(2, n, p)\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p (be aware of numerics).\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    0\n    >>> modinv(3, 11)\n    8\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(modp(p-1, p), -1, p)\n\ndef is_prime(n: int, p: int = 2):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(11, 101)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return True\n    if n == p:\n        return True\n    if n < p:\n        return False\n    if n % p == 0:\n        return False\n    if p % n == 0:\n        return False\n    if p == 2:\n        return True\n    if p == 3:\n        return True\n    return is_prime(p, n % p)\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome, False otherwise.\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n    if len(s) < 2:\n        return True\n    s = s[::-1]\n    return s == s[::-1]\n\ndef is_square(n: int):\n    \"\"\"Return True if n is a square, False otherwise.\n    >>> is_square(3)\n    True\n    >>> is_square(4)\n    False\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:",
    "if n == 0:\n        return 1\n    return pow(2, n, p)\n\ndef modinv(x: int, p: int):\n    \"\"\"Return the inverse of x modulo p.\n    >>> modinv(3, 5)\n    2\n    >>> modinv(2, 5)\n    2\n    >>> modinv(3, 7)\n    4\n    \"\"\"\n    if p == 2:\n        return x % 2\n    if p % 2 == 0:\n        return modinv(x, p // 2)\n    if p % 4 == 3:\n        return modinv(x, p // 4)\n    return modinv(x, p // 4) * modinv(x, p // 8)\n\ndef euler_phi(n: int, p: int):\n    \"\"\"Return the Euler phi function.\n    >>> euler_phi(0, 11)\n    0\n    >>> euler_phi(1, 11)\n    1\n    >>> euler_phi(2, 11)\n    3\n    >>> euler_phi(3, 11)\n    4\n    >>> euler_phi(4, 11)\n    6\n    >>> euler_phi(5, 11)\n    9\n    >>> euler_phi(6, 11)\n    10\n    >>> euler_phi(7, 11)\n    12\n    >>> euler_phi(8, 11)\n    13\n    >>> euler_phi(9, 11)\n    14\n    >>> euler_phi(10, 11)\n    15\n    >>> euler_phi(11, 11)\n    16\n    >>> euler_phi(12, 11)\n    17\n    >>> euler_phi(13, 11)\n    18\n    >>> euler_phi(14, 11)\n    20\n    >>> euler_phi(15, 11)\n    21\n    >>> euler_phi(16, 11)\n    22\n    >>> euler_phi(17, 11)\n    23\n    >>> euler_phi(18, 11)\n    24\n    >>> euler_phi(19, 11)\n    25\n    >>> euler_phi(20, 11)\n    26\n    >>> e"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}