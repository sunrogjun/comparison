{
  "problem": {
    "task_id": "HumanEval/103",
    "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
    "entry_point": "rounded_avg",
    "docstring": "",
    "problem_id": 103
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "num_candidates": 100,
  "candidates": [
    "if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return str(sum/m)\n\ndef rounded_avg_binary(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_binary(1, 5) => \"0b11\"\n    rounded_avg_binary(7, 5) => \"-1\"\n    rounded_avg_binary(10, 20) => \"0b1111\"\n    rounded_avg_binary(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return bin(sum/m)[2:]\n\ndef rounded_avg_binary_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_binary_2(1, 5) => \"0b11\"\n    rounded_avg_binary_2(7, 5) => \"-1\"\n    rounded_avg_binary_2(10, 20) => \"0b1111\"\n    rounded_avg_binary_2(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return bin(sum/m",
    "if n > m:\n        return -1\n    n = max(n, m)\n    b = bin(n)[2:]\n    while len(b) < m:\n        b += \"0\"\n    return b[:m]\n\ndef main():\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(input())\n    m = int(input())\n    avg = rounded_avg(n, m)\n    print(\"{0}\".format(avg))\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    result = 0\n    for i in range(n, m):\n        result += i\n    result = round(result / (m - n + 1))\n    if result == 0:\n        return \"0b\" + str(1)\n    return \"0b\" + str(result)\n\nif __name__ == \"__main__\":\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "return str(int(bin(int(m)+int(n)//2-1)[2:])).zfill(int(m)-int(n)+1)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(7, 5))",
    "if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        binary_avg = str(bin(avg)[2:])\n        return binary_avg\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "avg = n + (m - n) / 2\n    if avg < 0:\n        return -1\n    return \"{0:b}\".format(avg)\n\nif __name__ == '__main__':\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "n, m = int(n), int(m)\n    if n > m:\n        return -1\n    if n == m:\n        return \"0b1\"\n    if n < m:\n        return rounded_avg(m, n)\n    # n < m\n    return \"0b\" + bin(n + 1 - m)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "if n >= m:\n        return -1\n    count = 0\n    for i in range(n, m + 1):\n        count += i\n    return str(count).rjust(m - n + 1, '0')\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\nif __name__ == \"__main__\":\n    test_rounded_avg()",
    "if n > m:\n        return -1\n\n    return '0b' + '1' * n + '1' * (m - n)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1st example\"\n    assert rounded_avg(7, 5) == -1, \"2nd example\"\n    assert rounded_avg(10, 20) == \"0b1111\", \"3rd example\"\n    assert rounded_avg(20, 33) == \"0b11010\", \"4th example\"",
    "if n > m:\n        return -1\n    n += 1\n    m += 1\n    while n <= m:\n        n, m = n*2, m*2\n        binary = bin(n)[2:]\n        binary = '0'*(m-len(binary)) + binary\n        n, m = int(binary[:-1]), int(binary[-1])\n    return n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
    "if n > m:\n        return -1\n    avg = (m - n + 1) / 2\n    bin_avg = str(int(avg)).zfill(n)\n    bin_avg = bin_avg[:n]\n    if bin_avg[0] == '0':\n        bin_avg = bin_avg[1:]\n    return bin_avg\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# if n > m, return -1\n    if n > m:\n        return -1\n    # if n == m, return 0\n    if n == m:\n        return 0\n    # if n < m, compute the average\n    # get the binary of n\n    bin_n = bin(n)[2:]\n    # get the binary of m\n    bin_m = bin(m)[2:]\n    # get the difference between the two\n    diff = len(bin_n) - len(bin_m)\n    # if the difference is less than 0, return -1\n    if diff < 0:\n        return -1\n    # compute the average of the difference\n    avg = int(bin_n[:diff] + bin_m[:diff] + bin_n[diff:])\n    # return the rounded average\n    return avg % 2\n\nif __name__ == '__main__':\n    n, m = input().split()\n    print(rounded_avg(int(n), int(m)))",
    "#return \"0b{}\".format(bin(n + m - 1)[2:])\n    return \"0b{}\".format(bin(int(math.ceil(n + m - 1))))\n\ndef test_rounded_avg(n, m):\n    assert(rounded_avg(n, m) == \"0b{}\".format(bin(int(math.ceil(n + m - 1)))))\n\nif __name__ == \"__main__\":\n    test_rounded_avg(1, 5)\n    test_rounded_avg(7, 5)\n    test_rounded_avg(10, 20)\n    test_rounded_avg(20, 33)",
    "n += 1\n    return '0b' + '0' * (m - n) + str(n)\n\ndef is_square(n):\n    \"\"\"You are given a positive integer n, and you need to determine whether n is a square or not.\n    Example:\n    is_square(4) => True\n    is_square(9) => False\n    is_square(16) => True\n    \"\"\"\n    return n == n * n\n\ndef is_prime(n):\n    \"\"\"You are given a positive integer n, and you need to determine whether n is a prime or not.\n    Example:\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => True\n    \"\"\"\n    if n == 1: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0: return False\n    return True\n\ndef is_prime_list(n, primes):\n    \"\"\"You are given a positive integer n, and you need to determine whether n is a prime or not.\n    Example:\n    is_prime_list(2, [2]) => True\n    is_prime_list(3, [2, 3]) => True\n    is_prime_list(4, [2, 3, 5]) => True\n    is_prime_list(5, [2, 3, 5]) => False\n    is_prime_list(6, [2, 3, 5]) => False\n    is_prime_list(7, [2, 3, 5]) => False\n    is_prime_list(8, [2, 3, 5]) => False\n    is_prime_list(9, [2, 3, 5]) => False\n    is_prime_list(10, [2, 3, 5]) => True\n    \"\"\"",
    "if m < n:\n        return -1\n    step = m - n + 1\n    res = 0\n    while n <= m:\n        res += n\n        n += step\n    return hex(res)[2:]\n\ndef main():\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))\n\nif __name__ == '__main__':\n    main()",
    "if n > m:\n        return -1\n    n += 1\n    return \"0b\" + str(bin(n + m - 1).count(\"1\")).zfill(m - n)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef min_product(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    minimum of the integers from n through m (including n and m). \n    Example:\n    min_product(1, 5) => 5\n    min_product(7, 5) => 5\n    min_product(10, 20) => 20\n    min_product(20, 33) => 20\n    \"\"\"\n    return n * m\n\ndef test_min_product():\n    assert min_product(1, 5) == 5\n    assert min_product(7, 5) == 5\n    assert min_product(10, 20) == 20\n    assert min_product(20, 33) == 20\n\n\ndef max_product(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    maximum of the integers from n through m (including n and m). \n    Example:\n    max_product(1, 5) => 5\n    max_product(7, 5) => 5\n    max_product(10, 20) => 20\n    max_product(20, 33) => 33\n    \"\"\"\n    return n * m\n\ndef test_max_product():\n    assert max_product(1, 5) == 5\n    assert max_product(7, 5) == 5\n    assert max_product(10, 20) == 20\n    assert max_product(20, 33) == 33\n\n\ndef main():\n    test_rounded_avg()\n    test_min_product()\n    test_max_product()\n\nif __name__ == '__main__':\n    main()",
    "return int(bin(m-n+1)[-1])\n\nif __name__ == \"__main__\":\n    for i in range(1, 4):\n        print(rounded_avg(i, i+2))",
    "return str(int(bin(m-n+1).count('1'))).rjust(m-n, '0')\n\nif __name__ == '__main__':\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    binary = \"0b\" + bin(m)\n    binary = binary[-m:]\n    binary = \"0b\" + bin(n)\n    return binary\n\ndef rounded_avg2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg2(1, 5) => \"0b11\"\n    rounded_avg2(7, 5) => -1\n    rounded_avg2(10, 20) => \"0b1111\"\n    rounded_avg2(20, 33) => \"0b11010\"\n    \"\"\"\n    binary = \"0b\" + bin(m)\n    binary = binary[-m:]\n    binary = \"0b\" + bin(n)\n    return binary\n\ndef get_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    get_avg(1, 5) => \"0b11\"\n    get_avg(7, 5) => -1\n    get_avg(10, 20) => \"0b1111\"\n    get_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    binary = \"0b\" + bin(m)\n    binary = binary[-m:]\n    binary = \"0b\" + bin(n)\n    return binary\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg2(1, 5))\n    print(get_avg(1, 5))",
    "if n > m:\n        return -1\n    else:\n        ans = 0\n        for i in range(n, m+1):\n            ans += i\n        return str(int(ans/2))\n\n\nif __name__ == \"__main__\":\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    if n == m:\n        return 0\n    return (m-n+1)/2\n\n\ndef main():\n    \"\"\"\n    Sample Input\n    10\n    5\n    Sample Output\n    0b11\n    -1\n    0b1101\n    0b11101\n    0b11110\n    0b111101\n    0b111110\n    0b1111110\n    0b11111111\n    \"\"\"\n    test_cases = [\n        [10, 5],\n        [7, 5],\n        [10, 20],\n        [20, 33]\n    ]\n    for test_case in test_cases:\n        print rounded_avg(*test_case)\n\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    res = 0\n    for i in range(n, m+1):\n        res += i\n    return '0b' + bin(res)[2:]\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\ndef main():\n    test_rounded_avg()\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    d = n - m\n    return str(int(bin(d)[2:], 2))",
    "if n < m:\n        return -1\n    # round up\n    n = int((n + m) / 2)\n    # binary\n    return bin(n)[2:]\n\nif __name__ == '__main__':\n    # test cases\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
    "if n > m:\n        return -1\n    return \"{:b}\".format(int(bin(n + m/2 - 1)[2:], 2))",
    "if n > m:\n        return -1\n    return '0b' + str(bin(int(n) + int(m) - 1)[2:])\n\ndef main():\n    n = int(input())\n    m = int(input())\n    result = rounded_avg(n, m)\n    print(result)\n\nif __name__ == '__main__':\n    main()",
    "result = \"\"\n    for i in range(n, m+1):\n        result += str(i)\n    return result",
    "if n > m:\n        return -1\n    # the number of bits needed to represent n in binary is n/2 + 1\n    n_bits = n/2 + 1\n    # the number of bits needed to represent m in binary is m/2 + 1\n    m_bits = m/2 + 1\n    # we can calculate the number of bits we need to represent the average\n    # of the integers from n to m by using the formula:\n    # m_bits = (m-n+1)/2 + 1\n    # since m is not greater than n, the result is n_bits\n    return \"{:b}\".format(n_bits)\n\nif __name__ == \"__main__\":\n    # test cases\n    test_cases = [\n        (1, 5, \"0b11\"),\n        (7, 5, -1),\n        (10, 20, \"0b1111\"),\n        (20, 33, \"0b11010\"),\n        (100, 200, \"0b1111111111111111111111111111111111111111111111111111111111111111\"),\n    ]\n    for test_case in test_cases:\n        rounded_avg(*test_case)",
    "if n > m:\n        return -1\n    avg = sum(range(n, m+1))/float(m-n+1)\n    return \"{:b}\".format(int(round(avg)))\n\nif __name__ == \"__main__\":\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n\n    bin_str = bin(n)[2:]\n    while len(bin_str) < m:\n        bin_str = '0' + bin_str\n    return bin_str[m-1] + 'b'\n\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_2(1, 5) => \"0b11\"\n    rounded_avg_2(7, 5) => -1\n    rounded_avg_2(10, 20) => \"0b1111\"\n    rounded_avg_2(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    return '0b' + str(bin(n)[2:])[-m+1]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_rounded_avg_2():\n    assert rounded_avg_2(1, 5) == \"0b11\"\n    assert rounded_avg_2(7, 5) == -1\n    assert rounded_avg_2(10, 20) == \"0b1111\"\n    assert rounded_avg_2(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()\n    test_rounded_avg_2()",
    "if n > m:\n        return -1\n    \n    result = 0\n    for i in range(n, m + 1):\n        result += i\n    \n    result = int(bin(result)[2:])\n    return result\n\ndef main():\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    return \"0b\" + bin(sum(range(n, m+1))).lstrip('0b')[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return str(((m-n)//2) + n)\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        print(rounded_avg(n, m))",
    "if n > m:\n        return -1\n    \n    if n == m:\n        return n\n    \n    return (n + m) / 2",
    "if n > m:\n        return -1\n    return \"0b\" + str(bin(n + 1 - m))[2:]\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_2(1, 5) => \"0b11\"\n    rounded_avg_2(7, 5) => -1\n    rounded_avg_2(10, 20) => \"0b1111\"\n    rounded_avg_2(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return \"0b\" + str(bin(n + 1 - m))[2:]\n\ndef rounded_avg_3(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_3(1, 5) => \"0b11\"\n    rounded_avg_3(7, 5) => -1\n    rounded_avg_3(10, 20) => \"0b1111\"\n    rounded_avg_3(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return \"0b\" + str(bin(n + 1 - m))[2:]\n\ndef rounded_avg_4(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_4(1,",
    "if n > m:\n        return -1\n    return '0b' + '1' * (n - 1) + '0' * (m - n)\n\n\ndef rounded_avg2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg2(1, 5) => \"0b11\"\n    rounded_avg2(7, 5) => -1\n    rounded_avg2(10, 20) => \"0b1111\"\n    rounded_avg2(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return '0b' + '1' * (n - 1) + '0' * (m - n)\n\n\ndef rounded_avg3(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg3(1, 5) => \"0b11\"\n    rounded_avg3(7, 5) => -1\n    rounded_avg3(10, 20) => \"0b1111\"\n    rounded_avg3(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return '0b' + '1' * (n - 1) + '0' * (m - n)\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1st example\"\n    assert rounded_avg(7, 5) == -1, \"2nd example\"\n    assert rounded_avg(10",
    "if n > m:\n        return -1\n    binary = \"\"\n    for i in range(n, m):\n        binary += str(i)\n    if n == m:\n        binary += str(n)\n    return binary\n\nif __name__ == \"__main__\":\n    for i in range(1, 1001):\n        print(rounded_avg(i, i))",
    "return \"0b\" + bin(int((n + m) / 2) % 2**32)[2:]",
    "if n >= m:\n        return -1\n    return int(bin(int(sum(range(n, m))/m))[2:], 2)\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
    "return int((sum(xrange(n, m)) + m/2)/m)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return int('0b{0}'.format(sum//(m-n+1)))\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))",
    "if n > m:\n        return -1\n    else:\n        return binary_string_round(binary_string(n, m), 2)\n\n\ndef binary_string(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    binary representation of the integers from n through m (including n and m). \n    Convert the binary representation to a string.\n    If n is greater than m, return -1.\n    Example:\n    binary_string(1, 5) => \"11\"\n    binary_string(7, 5) => \"-1\"\n    binary_string(10, 20) => \"1011\"\n    binary_string(20, 33) => \"10010101\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_string_round(binary_",
    "if n >= m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += i\n    avg /= (m - n + 1)\n    return bin(int(avg))[2:].zfill(int(avg) + 1)\n\n\n# Your rounded_avg function will be called like this:\n# rounded_avg(1, 5)\ndef main():\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))\n\n\nif __name__ == '__main__':\n    main()",
    "if n > m:\n        return -1\n    if n == m:\n        return 0\n    bin_str = bin(int(n) + 1)\n    bin_str = bin_str[2:]\n    bin_str = '0' * (m - n) + bin_str\n    bin_str = bin_str[:m]\n    return bin_str\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    avg = rounded_avg(n, m)\n    print(avg)",
    "if n > m:\n        return -1\n    return bin(int(round(n + 1 - m) / 2)).replace(\"0b\", \"\").replace(\"L\", \"\")\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1-5\"\n    assert rounded_avg(7, 5) == -1, \"7-5\"\n    assert rounded_avg(10, 20) == \"0b1111\", \"10-20\"\n    assert rounded_avg(20, 33) == \"0b11010\", \"20-33\"",
    "if n > m:\n        return -1\n\n    # if n == m, return 0b1\n    if n == m:\n        return \"0b1\"\n\n    # round up n to nearest integer\n    n = int(n)\n    m = int(m)\n\n    # compute average\n    avg = (n + m) / 2\n\n    # convert to binary\n    bin_avg = bin(avg)[2:]\n\n    # round to nearest integer\n    round_avg = round(avg)\n\n    # convert to binary\n    bin_round_avg = bin(round_avg)[2:]\n\n    # compare\n    if bin_avg == bin_round_avg:\n        return bin_avg\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "return str(int(round(n/m)*2**(m-n))).rstrip('0b')\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))",
    "if n > m:\n        return -1\n    return str(bin(int(m - n + 1)))[2:]\n\n\nif __name__ == '__main__':\n    solution = rounded_avg(1, 5)\n    print(solution)",
    "if m < n:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result += i\n    result = round(result / (m - n + 1))\n    return bin(result)[2:].zfill(m - n)\n\n\nif __name__ == '__main__':\n    for n, m in [(1, 5), (7, 5), (10, 20), (20, 33)]:\n        print('{} -> {}'.format(n, m), rounded_avg(n, m))",
    "if n > m:\n        return -1\n    return \"{:b}\".format(int(bin(n+1-m)[2:], 2))\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1st example\"\n    assert rounded_avg(7, 5) == -1, \"2nd example\"\n    assert rounded_avg(10, 20) == \"0b1111\", \"3rd example\"\n    assert rounded_avg(20, 33) == \"0b11010\", \"4th example\"",
    "return str((sum(range(n, m + 1)) + m) // m)\n\n\n# Tests\ndef test_example():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\nif __name__ == \"__main__\":\n    test_example()",
    "if n > m:\n        return -1\n    binary = bin(int(n) + int(m) - 1)[2:]\n    return binary[:len(binary) - int(m)]\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(5, 8))",
    "if n > m:\n        return -1\n    ret = 0\n    for i in range(n, m):\n        ret = (ret << 1) + i\n    return str(ret)\n\n# test cases\nprint rounded_avg(1, 5)\nprint rounded_avg(7, 5)\nprint rounded_avg(10, 20)\nprint rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    return int(bin(n-m+1).rstrip('0b').lstrip('0b'), 2)\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == 0\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == 0\n    assert rounded_avg(20, 33) == 3\n\ndef main():\n    test_rounded_avg()\n\nif __name__ == '__main__':\n    main()",
    "if n > m:\n        return -1\n    bin_num = bin(int(n) + int(m))[2:]\n    bin_num = '0' * (len(bin_num) - 1) + bin_num\n    return bin_num\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))",
    "return str(int(round(n/float(m)*2**m)))\n\nif __name__ == \"__main__\":\n    n, m = map(int, raw_input().split())\n    if n > m:\n        print \"-\"\n    else:\n        print rounded_avg(n, m)",
    "if n > m:\n        return -1\n    if n == m:\n        return 0\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n    \n    return (total + n) / (m + 1)",
    "return round(sum(i*j for i, j in zip(range(n, m + 1), range(m, n + 1)))/(m - n + 1))",
    "if m == 0:\n        return 0\n    if n > m:\n        return -1\n    s = 0\n    for i in range(n, m + 1):\n        s += i\n    return int(bin(s)[2:].rstrip('0b'))",
    "# This is the base case\n    if n > m:\n        return -1\n    # This is the recurrence case\n    ret = 0\n    for i in range(n, m+1):\n        ret += i\n    return ret / (m - n + 1)\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))",
    "if n > m:\n        return -1\n    res = 0\n    for i in range(n, m + 1):\n        res += i\n    return \"0b\" + bin(res)[2:].zfill(32)\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv)!= 3:\n        print(\"Usage: {} <n> <m>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    n, m = int(sys.argv[1]), int(sys.argv[2])\n    print(rounded_avg(n, m))",
    "if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    ans = 0\n    for i in range(n, m+1):\n        ans += i\n    ans /= (m - n + 1)\n    ans = hex(ans)[2:]\n    ans = '0b' + ans\n    return ans\n\n# Test cases\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
    "if n > m:\n        return -1\n    # base = 2\n    # sum = 0\n    # for i in range(n, m+1):\n    #     sum += i\n    #     # print sum\n    # return bin(sum)[2:]\n    \n    base = 2\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n        # print sum\n    return bin(sum)[2:]\n\nif __name__ == \"__main__\":\n    # for i in range(10, 20):\n    #     print rounded_avg(i, 10)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 30)\n    print rounded_avg(30, 40)\n    print rounded_avg(40, 50)\n    print rounded_avg(50, 60)\n    print rounded_avg(60, 70)\n    print rounded_avg(70, 80)\n    print rounded_avg(80, 90)\n    print rounded_avg(90, 100)\n    print rounded_avg(100, 110)\n    print rounded_avg(110, 120)\n    print rounded_avg(120, 130)\n    print rounded_avg(130, 140)\n    print rounded_avg(140, 150)\n    print rounded_avg(150, 160)\n    print rounded_avg(160, 170)\n    print rounded_avg(170, 180)\n    print rounded_avg(180, 190)\n    print rounded_avg(190, 200)\n    print rounded_avg(200, 210)\n    print rounded_avg(210, 220)\n    print rounded_avg(220, 230)\n    print rounded_avg(230, 240)\n    print rounded_avg(240, 250)\n    print rounded_avg(250, 260)\n    print rounded_avg(260, 270)\n    print rounded_avg(270, 280)\n    print rounded_avg(280, 290)\n    print rounded_avg(290, 300)\n    print rounded_avg(300, 310)\n    print rounded_avg(310",
    "if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    return total / (m - n + 1)\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1st example\"\n    assert rounded_avg(7, 5) == -1, \"2nd example\"\n    assert rounded_avg(10, 20) == \"0b1111\", \"3rd example\"\n    assert rounded_avg(20, 33) == \"0b11010\", \"4th example\"",
    "return \"0b{}\".format(bin(int(n*m/n)))\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_2(1, 5) => \"0b11\"\n    rounded_avg_2(7, 5) => -1\n    rounded_avg_2(10, 20) => \"0b1111\"\n    rounded_avg_2(20, 33) => \"0b11010\"\n    \"\"\"\n    return \"0b{}\".format(bin(int(n*m/n)))\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n    print(rounded_avg_2(1, 5))\n    print(rounded_avg_2(7, 5))\n    print(rounded_avg_2(10, 20))\n    print(rounded_avg_2(20, 33))",
    "return int(bin(int(m) - int(n) + 1)[2:])\n\n\nif __name__ == \"__main__\":\n    print rounded_avg(1, 5)",
    "# Your code here\n    if m <= n:\n        return -1\n    ans = 0\n    for i in range(n, m+1):\n        ans += i\n    ans = int(bin(ans)[2:])\n    return ans\n\n\nif __name__ == \"__main__\":\n    # Your code here\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "avg = (n + m) / 2\n    avg = int(avg)\n    binary = str(bin(avg)[2:])\n    if binary == \"0b11\":\n        return binary\n    if binary == \"0b1110\":\n        return -1\n    return binary\n\ndef main():\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    else:\n        return bin(sum([int(i) for i in str(n - m + 1)[::-1]]))[2:]\n\nprint rounded_avg(10, 20)",
    "if n > m:\n        return -1\n    return str(bin(int(n/m))[2:])\n\n\ndef test():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test()",
    "return \"%d\" % (n - m + 1)\n\n# Sample Inputs and Outputs\n# Sample Inputs:\n#   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n# Sample Outputs:\n#   \"0b
    "if n > m:\n        return -1\n    return binary_round_avg(n, m)\n\n\ndef binary_round_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    binary_round_avg(1, 5) => \"0b11\"\n    binary_round_avg(7, 5) => -1\n    binary_round_avg(10, 20) => \"0b1111\"\n    binary_round_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return binary_round_avg(n, m - 1) + binary_round_avg(n + 1, m)\n\n\nif __name__ == '__main__':\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    s = '0b'\n    for i in range(n, m+1):\n        s += '0' + str(i)\n    return int(s, 2)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))",
    "if n > m:\n        return -1\n    res = 0\n    for i in range(n, m+1):\n        res += i\n    res = int(bin(res)[2:])\n    return res\n\n# Time:  O(m*n)\n# Space: O(1)\n# Union Find\n# Union Find Tree\n# Union Find\nclass Solution(object):\n    def average(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: float\n        \"\"\"\n        res = 0\n        for i in range(m):\n            res += i\n        for i in range(n):\n            res -= i\n        return float(res)/(m+n)",
    "return '0b' + bin(int((m-n+1)/2) + 1)[2:]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "if n > m:\n        return -1\n    # return rounded_avg(m, n+1)\n    return binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to_int(binary_to",
    "n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    # print(\"n: {} m: {}\".format(n, m))\n    i = 0\n    while n <= m:\n        # print(\"n: {} m: {} i: {}\".format(n, m, i))\n        if n == m:\n            return n\n        i += 1\n        n += 1\n    return n\n\ndef main():\n    print(\"{}\".format(rounded_avg(1, 5)))\n\nif __name__ == '__main__':\n    main()",
    "if n < m:\n        return -1\n    sum = n * m\n    res = \"\"\n    while sum > 0:\n        res = str(sum % 2) + res\n        sum = sum // 2\n    return res\n\ndef bin_to_dec(bin_str):\n    \"\"\"Convert a binary string to decimal\n    Example:\n    bin_to_dec(\"0b11\") => 3\n    bin_to_dec(\"0b01\") => 0\n    bin_to_dec(\"0b10101\") => -1\n    bin_to_dec(\"0b110101\") => -2\n    bin_to_dec(\"0b101001\") => -3\n    bin_to_dec(\"0b111111\") => -4\n    \"\"\"\n    dec = 0\n    for i in range(len(bin_str) - 1, -1, -1):\n        if bin_str[i] == '1':\n            dec += 1 * (2 ** i)\n    return dec\n\ndef dec_to_bin(dec):\n    \"\"\"Convert a decimal number to binary\n    Example:\n    dec_to_bin(3) => \"0b11\"\n    dec_to_bin(0) => \"0b00\"\n    dec_to_bin(-1) => \"0b1\"\n    dec_to_bin(-2) => \"0b10\"\n    dec_to_bin(-3) => \"0b11\"\n    dec_to_bin(-4) => \"0b111\"\n    \"\"\"\n    bin_str = \"\"\n    while dec > 0:\n        bin_str = bin_str + str(dec % 2)\n        dec = dec // 2\n    return bin_str",
    "return str(bin(int(n + m / 2 - 1) + 1)[2:])\n\n\n# Your rounded_avg solution\ndef rounded_avg(n, m):\n    return str(bin(int(n + m / 2 - 1) + 1)[2:])\n\n# Time:  O(n + m)\n# Space: O(1)\n# Divide and Conquer\n# Divide and Conquer\nclass Solution(object):\n    def averageOfNumbers(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: str\n        \"\"\"\n        # Divide and Conquer\n        if n > m:\n            return '-1'\n        if n == m:\n            return '0'\n        return '0b' + rounded_avg(n, m)",
    "if n > m:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result += i\n    result = result // (m - n + 1)\n    return bin(result)[2:]\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
    "if n >= m:\n        return -1\n    c = 0\n    for i in range(n, m + 1):\n        c += i\n    return \"0b\" + bin(c)[2:]\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\nif __name__ == '__main__':\n    main()",
    "if n > m:\n        return -1\n    s = 0\n    for i in range(n, m+1):\n        s = s + i\n    return s // (m-n+1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    avg = rounded_avg(n, m)\n    if avg == -1:\n        print(\"-1\")\n    else:\n        print(\"{}\".format(bin(avg)[2:].rjust(m-n+1, '0')))",
    "if n > m:\n        return -1\n    # print n, m\n    # print m - n\n    return int(''.join(bin(m - n + 1)[2:]), 2)\n\nif __name__ == '__main__':\n    # round_avg(1, 5) => \"0b11\"\n    # round_avg(7, 5) => -1\n    # round_avg(10, 20) => \"0b1111\"\n    # round_avg(20, 33) => \"0b11010\"\n    round_avg(10, 20)\n    round_avg(20, 33)\n    round_avg(10, 100)",
    "if n > m:\n        return -1\n    return rounded_avg_helper(n, m, 0)\n\ndef rounded_avg_helper(n, m, c):\n    if n == m:\n        return \"0b\" + bin(c)\n    elif n > m:\n        return rounded_avg_helper(m, n, c)\n    else:\n        return rounded_avg_helper(n+1, m, c + n)\n\ndef main():\n    for i in range(1, 101):\n        for j in range(1, 101):\n            print(rounded_avg(i, j))\n\nif __name__ == \"__main__\":\n    main()",
    "if n > m:\n        return -1\n    ans = 0\n    for i in range(n, m+1):\n        ans += i\n    return \"0b\" + bin(ans)\n\nif __name__ == '__main__':\n    print rounded_avg(1, 5)",
    "if n > m:\n        return -1\n    result = 0\n    for i in range(n, m+1):\n        result += i\n    return \"{}b\".format(int(bin(result)[2:], 2))\n\nif __name__ == '__main__':\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n >= m:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result = result + i\n    return result // (m - n + 1)\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(rounded_avg(i, 100))",
    "if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return int(bin(total)[2:], 2)\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(100, 200) == \"0b1110001\"",
    "if m == 0:\n        return m\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    avg = (n + m) / 2\n    binary = bin(avg)[2:]\n    if binary[0] == '0':\n        binary = binary[1:]\n    binary = '0b' + binary\n    return int(binary, 2)\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"",
    "#print \"rounded_avg\"\n    if n > m:\n        return -1\n    #print \"n, m\"\n    #print n, m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"\n    #print m\n    #print \"n\"\n    #print n\n    #print \"m\"",
    "if n < m:\n        return -1\n    sum = 0\n    for i in range(n, m):\n        sum += i\n    return '0b' + bin(sum)[2:]\n\nif __name__ == '__main__':\n    print rounded_avg(1, 5)\n    print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    a = 0\n    for i in range(n, m + 1):\n        a += i\n    return \"0b\" + bin(a)\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    rounded = rounded_avg(n, m)\n    print(rounded)",
    "if n > m:\n        return -1\n    return \"{:b}\".format(int(bin(n)[2:], 2))\n\n# Test cases\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
    "if n > m:\n        return -1\n    return bin(int(round(m/n)*2**n))[2:]\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rounded_avg(1, 5) == \"0b11\", \"1st example\"\n    assert rounded_avg(7, 5) == -1, \"2nd example\"\n    assert rounded_avg(10, 20) == \"0b1111\", \"3rd example\"\n    assert rounded_avg(20, 33) == \"0b11010\", \"4th example\"",
    "if n >= m:\n        return -1\n    ans = 0\n    while n < m:\n        ans += n\n        n += 1\n    return str(ans).rjust(m - n + 1, '0')\n\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n >= m:\n        return -1\n    ans = 0\n    while n < m:\n        ans += n\n        n += 1\n    ans = str(ans).rjust(m - n + 1, '0')\n    return int(ans, 2)\n\n\ndef test():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg_2(1, 5) == \"0b11\"\n    assert rounded_avg_2(7, 5) == -1\n    assert rounded_avg_2(10, 20) == \"0b1111\"\n    assert rounded_avg_2(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test()",
    "if n > m:\n        return -1\n    return '0b' + '1' * (m-n+1) + '1' * n\n\nprint rounded_avg(1, 5)",
    "if n > m:\n        return -1\n\n    return str(bin(int(m + n/2 - 1) + 1)[2:])\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))",
    "if n > m:\n        return -1\n    x = (m + n - 1) // 2\n    while x < m:\n        x = x + 1\n    return binary_convert(x)\n\nif __name__ == '__main__':\n    #print rounded_avg(1, 5)\n    #print rounded_avg(7, 5)\n    print rounded_avg(10, 20)\n    print rounded_avg(20, 33)",
    "if n > m:\n        return -1\n    \n    return \"0b\" + bin(m-n+1)[2:]",
    "return \"0b\" + bin(int(sum(xrange(n, m+1))/m))[2:]\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in xrange(t):\n        n, m = map(int, input().split())\n        print rounded_avg(n, m)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}