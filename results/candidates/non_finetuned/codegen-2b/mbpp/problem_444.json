{
  "problem": {
    "task_id": "MBPP/455",
    "prompt": "Write a function to check whether the given month number contains 31 days or not.",
    "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
    "test_list": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ],
    "challenge_test_list": [],
    "problem_id": 444
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://leetcode.com/problems/check-if-month-contains-31-days/discuss/66488/Python-implementation\n# https://leetcode.com/problems/check-if-month-contains-31-days/discuss/164865/Python-implementation\n\nclass Solution(object):\n    def checkIsMonth(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m <= 0 or m > 12:\n            return False\n        return m in (3, 5, 8, 10, 12)\n\n\nif __name__ == '__main__':\n    assert Solution().checkIsMonth(1) == True\n    assert Solution().checkIsMonth(3) == True\n    assert Solution().checkIsMonth(5) == True\n    assert Solution().checkIsMonth(8) == True\n    assert Solution().checkIsMonth(10) == True\n    assert Solution().checkIsMonth(12) == True\n    assert Solution().checkIsMonth(13) == False\n    assert Solution().checkIsMonth(19) == False\n    assert Solution().checkIsMonth(20) == False\n    assert Solution().checkIsMonth(25) == False\n    assert Solution().checkIsMonth(26) == False",
    "def is_leap_year(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    else:\n        return year % 400 == 0\n\ndef is_leap_month(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef check_leap_month(month, year):\n    if is_leap_month(month) and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef check_leap_month_number(month_number):\n    if month_number == 29:\n        return True\n    else:\n        return False\n\ndef check_leap_month_number_sum(month_number_sum):\n    if month_number_sum == 366:\n        return True\n    else:\n        return False\n\ndef check_leap_month_sum(month_sum):\n    if month_sum == 365:\n        return True\n    else:\n        return False\n\ndef check_leap_month_number_diff(month_number_sum, month_number_diff):\n    if month_number_sum == month_number_diff:\n        return True\n    else:\n        return False\n\ndef check_leap_month_diff(month_sum, month_diff):\n    if month_sum == month_diff:\n        return True\n    else:\n        return False\n\ndef check_leap_month_diff_sum(month_sum, month_diff_sum):\n    if month_sum == month_diff_sum:\n        return True\n    else:\n        return False\n\ndef check_leap_month_diff_sum_sum(month_sum, month_diff_sum_sum):\n    if month_sum == month_diff_sum_sum:\n        return True\n    else:\n        return False\n\ndef check_leap_month_diff_sum_diff(month_sum, month_diff_sum_diff):\n    if month_sum == month_diff_sum_diff:\n        return True\n    else:\n        return False\n\ndef check_leap_month_",
    "def is_leap_year(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    if year % 400 == 0:\n        return True\n    return False\n\ndef is_leap_month(month):\n    if month % 2 == 0 and month % 4 == 0:\n        return True\n    if month % 4 == 0 and month % 100!= 0:\n        return True\n    if month % 100 == 0 and month % 400 == 0:\n        return True\n    return False\n\ndef is_leap_month_and_year(month, year):\n    if is_leap_year(year) and is_leap_month(month):\n        return True\n    return False\n\ndef check_leap_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    return False\n\nif __name__ == '__main__':\n    print is_leap_month(1)\n    print check_leap_month(2)\n    print is_leap_month_and_year(2, 2017)",
    "def check_is_leap(month):\n    return month % 4 == 0 and (month % 100!= 0 or month % 400 == 0)\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    return month == 2 and check_is_leap(year)\n\ndef main():\n    print(is_leap_year(2015))\n    print(is_leap_month(2))\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a valid month\nclass Month(object):\n    def __init__(self, m, y):\n        self.m = m\n        self.y = y\n    def __repr__(self):\n        return str(self.m) + \" \" + str(self.y)\n\n# Definition for a valid day\nclass Day(object):\n    def __init__(self, d):\n        self.d = d\n    def __repr__(self):\n        return str(self.d)\n\n# Definition for a valid date\nclass Date(object):\n    def __init__(self, d, m, y):\n        self.d = d\n        self.m = m\n        self.y = y\n    def __repr__(self):\n        return str(self.d) + \" \" + str(self.m) + \" \" + str(self.y)\n\n# Definition for a valid time\nclass Time(object):\n    def __init__(self, h, m, s):\n        self.h = h\n        self.m = m\n        self.s = s\n    def __repr__(self):\n        return str(self.h) + \":\" + str(self.m) + \":\" + str(self.s)\n\nclass Solution(object):\n    def checkValid(self, d):\n        \"\"\"\n        :type d: Date\n        :rtype: bool\n        \"\"\"\n        if d.m < 1 or d.m > 12:\n            return False\n        if d.y < 1970 or d.y > 2100:\n            return False\n        if d.d < 1 or d.d > 31:\n            return False\n        return True\n\ns = Solution()\nprint s.checkValid(Month(6, 1974))\nprint s.checkValid(Month(12, 2011))\nprint s.checkValid(Month(12, 2011))\nprint s.checkValid(Month(12, 2001))\nprint s.checkValid(Month(12, 2001))\nprint s.checkValid(Month(12, 2001))\nprint s.checkValid(Month(12, 2001))\nprint s.checkValid(Month(12, 2001))\nprint s.checkValid",
    "# https://www.hackerrank.com/challenges/30-days-of-the-month\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(month)\n\ndef is_leap_days(month, year):\n    return month == 2 and is_leap_year(year)\n\ndef check_leap_days(month, year):\n    if month == 2 and is_leap_year(year):\n        return 31\n    return 28\n\ndef is_leap_month_or_leap_days(month, year):\n    if month == 2 and is_leap_year(year):\n        return 31\n    return check_leap_days(month, year)\n\nif __name__ == \"__main__\":\n    month = int(input())\n    year = int(input())\n    print(is_leap_month_or_leap_days(month, year))",
    "# https://www.hackerrank.com/challenges/30-is-it-a-month\n# time: O(1)\n# space: O(1)\n\nclass Solution(object):\n    def isItMonth(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m <= 0 or m > 12:\n            return False\n        return (m % 4 == 0 and m % 100!= 0) or (m % 400 == 0)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isItMonth(12)\n    print s.isItMonth(1)\n    print s.isItMonth(3)\n    print s.isItMonth(4)\n    print s.isItMonth(5)\n    print s.isItMonth(6)\n    print s.isItMonth(7)\n    print s.isItMonth(8)\n    print s.isItMonth(9)\n    print s.isItMonth(10)\n    print s.isItMonth(11)\n    print s.isItMonth(0)\n    print s.isItMonth(13)\n    print s.isItMonth(14)\n    print s.isItMonth(15)\n    print s.isItMonth(16)\n    print s.isItMonth(17)\n    print s.isItMonth(18)\n    print s.isItMonth(19)\n    print s.isItMonth(20)\n    print s.isItMonth(21)\n    print s.isItMonth(22)\n    print s.isItMonth(23)\n    print s.isItMonth(24)\n    print s.isItMonth(25)\n    print s.isItMonth(26)\n    print s.isItMonth(27)\n    print s.isItMonth(28)\n    print s.isItMonth(29)\n    print s.isItMonth(30)",
    "def check_valid_month(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef check_valid_month_2(month_number):\n    if month_number == 1 or month_number == 2 or month_number == 3 or month_number == 4 or month_number == 5 or month_number == 6 or month_number == 7 or month_number == 8 or month_number == 9 or month_number == 10 or month_number == 11 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef check_valid_month_3(month_number):\n    if month_number == 1 or month_number == 2 or month_number == 3 or month_number == 4 or month_number == 5 or month_number == 6 or month_number == 7 or month_number == 8 or month_number == 9 or month_number == 10 or month_number == 11:\n        return True\n    else:\n        return False\n\ndef check_valid_month_4(month_number):\n    if month_number == 1 or month_number == 2 or month_number == 3 or month_number == 4 or month_number == 5 or month_number == 6 or month_number == 7 or month_number == 8 or month_number == 9 or month_number == 10 or month_number == 11:\n        return True\n    else:\n        return False\n\ndef check_valid_month_5(month_number):\n    if month_number == 1 or month_number == 2 or month_number == 3 or month_number == 4 or month_number == 5 or month_number == 6 or month_number == 7 or month_number == 8 or month_number == 9 or month_number == 10 or month_number == 11:\n        return True\n    else:\n        return False\n\ndef check_valid_month_6(month_number):\n    if month_number == 1 or month_number == 2 or month_number == 3 or month_number == 4 or month_number == 5 or month_number == 6",
    "# Definition for a valid month\nclass Month(object):\n    def __init__(self, m, d):\n        self.m = m\n        self.d = d\n    def __repr__(self):\n        return \"Month(\" + repr(self.m) + \", \" + repr(self.d) + \")\"\n\nclass Solution(object):\n    def has31Days(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        if month.m == 12 and month.d == 31:\n            return True\n        elif month.m == 1 and month.d == 31:\n            return True\n        elif month.m == 2 and month.d == 28:\n            return True\n        elif month.m == 3 and month.d == 31:\n            return True\n        elif month.m == 4 and month.d == 30:\n            return True\n        elif month.m == 5 and month.d == 31:\n            return True\n        elif month.m == 6 and month.d == 30:\n            return True\n        elif month.m == 7 and month.d == 31:\n            return True\n        elif month.m == 8 and month.d == 31:\n            return True\n        elif month.m == 9 and month.d == 30:\n            return True\n        elif month.m == 10 and month.d == 31:\n            return True\n        elif month.m == 11 and month.d == 30:\n            return True\n        elif month.m == 12 and month.d == 31:\n            return True\n        return False\n\n# Time:  O(1)\n# Space: O(1)\n# 1.\n# 2.\n# 3.\n# 4.\n# 5.\n# 6.\n# 7.\n# 8.\n# 9.\n# 10.\n# 11.\n# 12.\n# 12.\n# 12.\n# 12.",
    "def is_leap_year(year):\n    return ((year % 4) == 0) and (((year % 100)!= 0) or ((year % 400) == 0))\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(year)\n\ndef days_in_month(month, year):\n    return (is_leap_month(month) and 31) or (month == 2 and is_leap_year(year) and 29) or (month == 4 or month == 6 or month == 9 or month == 11) or (month == 1 and is_leap_year(year) and 30)\n\ndef main():\n    print(days_in_month(1, 2018))\n    print(days_in_month(3, 2016))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a valid date.\n# class Date:\n#     def __init__(self, m, d):\n#         self.month = m\n#         self.day = d\n\nclass Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return (m % 4) == 0 and (m % 100)!= 0 or (m % 400) == 0\n\n    def isLeapYear_1(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m % 4 == 0 and (m % 100)!= 0 or (m % 400) == 0\n\n    def isLeapYear_2(self, m):\n        return m % 4 == 0 and (m % 100) % 10 == 0 or (m % 400) % 10 == 0\n\nif __name__ == \"__main__\":\n    assert Solution().isLeapYear(2010) == True\n    assert Solution().isLeapYear(2) == False\n    assert Solution().isLeapYear(4) == False\n    assert Solution().isLeapYear(9) == False",
    "# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days/\n# https://www.geeksforgeeks.org/write-a-function-that-check-if-given-month-number-contains-31-days/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n# https://www.geeksforgeeks.org/check-if-given-month-number-contains-31-days-with-no-leap-year/\n\n# If given month number has 31 days then return true\ndef month_31(m):\n    if m == 1:\n        return True\n    elif m == 2:\n        return True\n    elif m == 3:\n        return True\n    elif m == 4:\n        return True\n    elif m == 5:\n        return True\n    elif m == 6:\n        return True\n    elif m == 7:\n        return True\n    elif m == 8:\n        return True\n    elif m == 9:\n        return True\n    elif m == 10:\n        return True\n    elif m == 11:\n        return True\n    elif m == 12:\n        return True\n    elif m == 13",
    "def check_if_month_contains_31_days(month_num):\n    # write your code here\n    if month_num == 1 or month_num == 3 or month_num == 5 or month_num == 7 or month_num == 8 or month_num == 10 or month_num == 12:\n        return True\n    else:\n        return False",
    "# Definition for a valid month.\nclass Month:\n    def __init__(self, month_num):\n        self.month_num = month_num\n    def __repr__(self):\n        return 'Month(%d)' % self.month_num\n\nclass Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        if month.month_num < 1 or month.month_num > 12:\n            return False\n        if month.month_num == 1 or month.month_num == 3 or month.month_num == 5 or month.month_num == 7 or month.month_num == 8 or month.month_num == 10 or month.month_num == 12:\n            return True\n        if month.month_num == 4 or month.month_num == 6 or month.month_num == 9 or month.month_num == 11:\n            return False\n        if month.month_num % 2 == 0:\n            return True\n        if month.month_num % 2 == 1:\n            return False\n        return False\n\na = Month(4)\nprint Solution().checkValid(a)",
    "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(year)\n\ndef is_leap_month_day(month, day):\n    return is_leap_month(month) and day == 29\n\ndef is_leap_month_day_in_month(month, day):\n    return is_leap_month_day(month, day) or is_leap_month_day(month-1, day)\n\ndef is_leap_month_day_in_year(year, month, day):\n    return is_leap_month_day_in_month(month, day) or is_leap_month_day_in_month(month-1, day)\n\ndef is_leap_month_day_in_year(year, month, day):\n    return is_leap_month_day_in_year(year, month, day) or is_leap_month_day_in_year(year-1, month, day)\n\ndef is_leap_month_day_in_year_and_month(year, month, day):\n    return is_leap_month_day_in_year(year, month, day) and is_leap_month_day_in_month(month, day)\n\ndef is_leap_month_day_in_year_and_month_in_year(year, month, day):\n    return is_leap_month_day_in_year(year, month, day) and is_leap_month_day_in_year(year, month-1, day)\n\ndef is_leap_month_day_in_year_and_month_in_year_and_month(year, month, day):\n    return is_leap_month_day_in_year(year, month, day) and is_leap_month_day_in_year(year, month-1, day) and is_leap_month_day_in_year(year-1, month, day",
    "# https://github.com/tqchen/LeetCode/blob/master/DayOfMonth.py\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n    \n    def daysInMonth(self, month, year):\n        if month == 2 and self.isLeapYear(year):\n            return 29\n        else:\n            return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n        \n    def daysInMonth(self, month, year):\n        return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n    \n    def daysInMonth(self, month, year):\n        if month == 2 and self.isLeapYear(year):\n            return 29\n        else:\n            return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n        \n    def daysInMonth(self, month, year):\n        if month == 2 and self.isLeapYear(year):\n            return 29\n        else:\n            return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n        \n    def daysInMonth(self, month, year):\n        if month == 2 and self.isLeapYear(year):\n            return 29\n        else:\n            return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n        \n    def daysInMonth(self, month, year):\n        if month == 2 and self.isLeapYear(year):\n            return 29\n        else:\n            return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]",
    "class Solution:\n    \"\"\"\n    @param: month: An integer\n    @return: True if the month contains 31 days, otherwise false\n    \"\"\"\n    def isLeapYear(self, month):\n        if month == 2:\n            return (month % 4 == 0 and month % 100!= 0) or (month % 400 == 0)\n        else:\n            return False",
    "# https://www.hackerrank.com/challenges/month-number-contains-31-days/problem\n\n# We can check for the fact that the month number is a multiple of 3, or 4.\n# However, we can also check for the fact that the month number is a multiple of\n# any number between 1 and 3.\n# For example, if the month number is 10, then it is a multiple of 3.\n# If the month number is 14, then it is a multiple of 4.\n# If the month number is 15, then it is a multiple of 1.\n# If the month number is 18, then it is a multiple of 3.\n# If the month number is 20, then it is a multiple of 4.\n# If the month number is 21, then it is a multiple of 1.\n\ndef is_multiple(month_number, month_range):\n    if month_number % month_range == 0:\n        return True\n    elif month_number % month_range == 1:\n        return True\n    elif month_number % month_range == 2:\n        return True\n    else:\n        return False\n\n# Assumption: month_range is between 1 and 3.\n# Returns true if the month number contains 31 days.\n# Returns false otherwise.\ndef is_31_day_month(month_number, month_range):\n    return is_multiple(month_number, month_range) and month_number % month_range == month_range\n\n# Accepted\n# 15\n# 18\n# 20\n# 21\n# 24\n# 26\n# 28\n# 29\n# 30\n# 31\n# 32\n# 33\n# 34\n# 35\n# 36\n# 37\n# 38\n# 39\n# 40\n# 41\n# 42\n# 43\n# 44\n# 45\n# 46\n# 47\n# 48\n# 49\n# 50\n# 51\n# 52\n# 53\n# 54\n# 55\n# 56\n# 57\n# 58\n# 59\n# 60\n# 61\n# 62\n# 63\n# 64\n# 65\n# 66\n# 67\n# 68\n# 69\n# 70\n# 71\n# 72\n# 73\n# 74\n# 75\n# 76\n# 77\n# 78",
    "def is_leap(year):\n    if year % 400 == 0:\n        return True\n    if year % 4 == 0:\n        return False\n    return True\n\ndef is_leap_year(year):\n    return is_leap(year)\n\ndef check_leap_year(year):\n    if is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef check_leap_month(month):\n    if month == 2:\n        return check_leap_year(year)\n    else:\n        return False\n\ndef check_leap_month_num(month_num):\n    if check_leap_month(month_num):\n        return True\n    else:\n        return False\n\ndef check_leap_month_num(month_num):\n    if month_num == 2:\n        return check_leap_year(year_num)\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_leap_month_num(1))\n    print(check_leap_month_num(2))\n    print(check_leap_month_num(3))\n    print(check_leap_month_num(4))\n    print(check_leap_month_num(5))\n    print(check_leap_month_num(6))\n    print(check_leap_month_num(7))\n    print(check_leap_month_num(8))\n    print(check_leap_month_num(9))\n    print(check_leap_month_num(10))\n    print(check_leap_month_num(11))\n    print(check_leap_month_num(12))\n    print(check_leap_month_num(13))\n    print(check_leap_month_num(14))\n    print(check_leap_month_num(15))\n    print(check_leap_month_num(16))\n    print(check_leap_month_num(17))\n    print(check_leap_month_num(18))\n    print(check",
    "def is_leap(month):\n    if month % 4 == 0:\n        if month % 100 == 0:\n            if month % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return True\n\ndef check_leap_month(month):\n    if is_leap(month):\n        return True\n    else:\n        return False\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    print(check_leap_month(1))\n    print(check_leap_year(2016))\n    print(check_leap_year(2015))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def checkParity(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 1 or n == 3 or n == 5 or n == 7 or n == 8 or n == 10 or n == 12:\n            return True\n        elif n == 4 or n == 6 or n == 9 or n == 11:\n            return False\n        else:\n            return self.checkParity(n / 2)\n\n\nif __name__ == \"__main__\":\n    print Solution().checkParity(12)\n    print Solution().checkParity(13)",
    "from datetime import datetime\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef month_31(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month",
    "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0:\n            return False\n        if year % 400 == 0:\n            return True\n    return False\n\n\ndef is_leap_month(month):\n    return month % 2 == 0\n\n\ndef month_days(month):\n    if month == 2 and is_leap_year(year):\n        return 29\n    return month_days(month - 1) + 1\n\n\ndef check_leap_month(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    return check_leap_month(month - 1)\n\n\ndef main():\n    print(check_leap_month(12))\n    print(check_leap_month(4))\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_leap_year(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m % 4 == 0 and (m % 100!= 0 or m % 400 == 0)\n\n    def is_leap_month(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m % 4 == 0 and (m % 100!= 0 or m % 400 == 0)\n\n    def is_leap_month_with_year(self, m, y):\n        return m == 12 and self.is_leap_year(y)\n\n\nif __name__ == \"__main__\":\n    print Solution().is_leap_month_with_year(1904, 1904)\n    print Solution().is_leap_month_with_year(1900, 1900)\n    print Solution().is_leap_month_with_year(2000, 2000)\n    print Solution().is_leap_month_with_year(1600, 1600)\n    print Solution().is_leap_month_with_year(1600, 1600)\n    print Solution().is_leap_month_with_year(1601, 1601)\n    print Solution().is_leap_month_with_year(2000, 2000)\n    print Solution().is_leap_month_with_year(2100, 2100)\n    print Solution().is_leap_month_with_year(2200, 2200)\n    print Solution().is_leap_month_with_year(2201, 2201)\n    print Solution().is_leap_month_with_year(2300, 2300)\n    print Solution().is_leap_month_with_year(2400, 2400)\n    print Solution().is_leap_month_with_year(2500, 2500)\n    print Solution().is_leap_month_with_year(2600, 2600)\n    print Solution().is_leap_month_with_year(2700, 2700)\n    print Solution().is_leap_month_with_year(2800, 28",
    "# https://www.hackerrank.com/challenges/check-month-number-contains-31-days/problem\n\n# I/O\n# ---\n\n# constants\nMONTHS = {\n    1: 31,\n    2: 28,\n    3: 31,\n    4: 30,\n    5: 31,\n    6: 30,\n    7: 31,\n    8: 31,\n    9: 30,\n    10: 31,\n    11: 30,\n    12: 31,\n    13: 31,\n    14: 30,\n    15: 31,\n    16: 30,\n    17: 31,\n    18: 30,\n    19: 31,\n    20: 30,\n    21: 31,\n    22: 30,\n    23: 31,\n    24: 30,\n    25: 31,\n    26: 30,\n    27: 31,\n    28: 30,\n    29: 31,\n    30: 30,\n    31: 31\n}\n\n# main\n# ---\n\n# month\nmonth = int(input())\n\n# month number\nmonth_number = MONTHS[month]\n\n# print result\nprint(month_number)",
    "class Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month % 100 == 0 and month % 400 == 0:\n            return False\n        if month % 4 == 0 and month % 100!= 0:\n            return False\n        return month % 4 == 0\n\n    def checkValid2(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month % 4 == 0 and month % 100!= 0:\n            return False\n        return month % 4 == 0",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {integer} m\n    # @return {boolean}\n    def isLeapYear(self, m):\n        if m < 1 or m > 12:\n            return False\n        if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n            return True\n        if m % 4 == 0 and m % 100!= 0:\n            return True\n        if m % 400 == 0:\n            return True\n        return False\n\n# Note:\n#  leap year:\n#  1. 4-digit year: 1900-1999\n#  2. 5-digit year: 2000-2099\n#  3. 6-digit year: 2100-2999\n#  4. 7-digit year: 3000-3999\n#  5. 8-digit year: 4000-4999\n#  6. 9-digit year: 5000-5999\n#  7. 10-digit year: 6000-6999\n#  8. 11-digit year: 7000-7999\n#  9. 12-digit year: 8000-8999\n#  10. 13-digit year: 9000-9999",
    "class Solution:\n    # @return a boolean\n    def isLeapYear(self, month):\n        if month % 4 == 0:\n            if month % 100!= 0:\n                return False\n            if month % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n\n    def isLeapYear_1(self, month):\n        return month % 4 == 0 and (month % 100!= 0 or (month % 400 == 0))\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isLeapYear(2)\n    print s.isLeapYear(3)\n    print s.isLeapYear(4)\n    print s.isLeapYear(5)\n    print s.isLeapYear(6)\n    print s.isLeapYear(7)\n    print s.isLeapYear(8)\n    print s.isLeapYear(9)\n    print s.isLeapYear(10)\n    print s.isLeapYear(11)\n    print s.isLeapYear(12)\n    print s.isLeapYear(13)\n    print s.isLeapYear(14)\n    print s.isLeapYear(15)\n    print s.isLeapYear(16)\n    print s.isLeapYear(17)\n    print s.isLeapYear(18)\n    print s.isLeapYear(19)\n    print s.isLeapYear(20)\n    print s.isLeapYear(21)\n    print s.isLeapYear(22)\n    print s.isLeapYear(23)\n    print s.isLeapYear(24)\n    print s.isLeapYear(25)\n    print s.isLeapYear(26)\n    print s.isLeapYear(27)\n    print s.isLeapYear(28)\n    print s.isLeapYear(29)\n    print s.isLeapYear(30)\n    print s.isLeapYear(31)\n    print s.isLeapYear(32)\n    print s.isLeapYear(33",
    "def check_31_days(month):\n    return month % 4 == 0 and (month % 100!= 0 or month % 400 == 0)\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef check_31_days_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0) and (year % 400 == 0)\n\nif __name__ == '__main__':\n    print(check_31_days(2017))\n    print(check_31_days_leap_year(2017))",
    "from collections import defaultdict\n\nmonths = {\n    1: \"Jan\",\n    2: \"Feb\",\n    3: \"Mar\",\n    4: \"Apr\",\n    5: \"May\",\n    6: \"Jun\",\n    7: \"Jul\",\n    8: \"Aug\",\n    9: \"Sep\",\n    10: \"Oct\",\n    11: \"Nov\",\n    12: \"Dec\",\n}\n\ndef check_valid(month_num):\n    if month_num < 1 or month_num > 12:\n        return False\n    else:\n        return True\n\ndef check_valid_month(month_num):\n    if month_num < 1 or month_num > 12:\n        return False\n    else:\n        return True\n\ndef check_valid_month_day(month_num, day_num):\n    if day_num < 1 or day_num > 31:\n        return False\n    else:\n        return True\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month_num):\n    return is_leap_year(year) and month_num % 2 == 0\n\ndef check_valid_month_day_range(month_num, day_num):\n    if not check_valid_month(month_num):\n        return False\n    elif not check_valid_month_day(month_num, day_num):\n        return False\n    else:\n        return True\n\ndef check_valid_month_range(month_num):\n    if not check_valid_month(month_num):\n        return False\n    else:\n        return True\n\ndef check_valid_day_range(month_num, day_num):\n    if not check_valid_month_day(month_num, day_num):\n        return False\n    else:\n        return True\n\ndef check_valid_year_range(year_num):\n    if not check_valid_month_day(1, 1):\n        return False\n    else:\n        return True\n\ndef check_valid_month_day_range(month_num",
    "def is_leap_year(month):\n    return (month % 4 == 0 and month % 100!= 0) or month % 400 == 0\n\ndef is_leap_month(month):\n    return is_leap_year(month) and month == 2\n\ndef days_in_month(month, year):\n    if month == 2 and is_leap_year(year):\n        return 29\n    else:\n        return 28 if is_leap_month(month) else 27\n\ndef main():\n    print(days_in_month(2, 2016))\n\nif __name__ == '__main__':\n    main()",
    "def check_31_days(month):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(check_31_days(2))\n\nif __name__ == '__main__':\n    main()",
    "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0 and year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0 and year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef check_leap_year_with_month(month,year):\n    if month == 2 and is_leap_year(year):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_leap_year(2016))\n    print(check_leap_year_with_month(2,2016))",
    "# Definition for a valid date.\nclass Date:\n    def __init__(self, year, month):\n        self.year = year\n        self.month = month\n\n    def __eq__(self, other):\n        return self.year == other.year and self.month == other.month\n\nclass Solution(object):\n    def isValid(self, d):\n        \"\"\"\n        :type d: Date\n        :rtype: bool\n        \"\"\"\n        if d.month == 2 and d.year % 4 == 0 and d.year % 100!= 0:\n            return True\n        elif d.month == 1 and d.year % 4 == 0 and d.year % 100 == 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    d = Date(2017, 1)\n    assert Solution().isValid(d) == True",
    "class Solution(object):\n    def is31daymonth(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 1 or m > 12:\n            return False\n        if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n            return True\n        return m % 4 == 0 and m % 100!= 0 or m % 400 == 0",
    "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def has31Days(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.helper(root)\n\n    def helper(self, root):\n        if not root:\n            return False\n        if not root.left and not root.right:\n            return True\n        if not root.left and root.right:\n            return self.helper(root.right)\n        if not root.right and root.left:\n            return self.helper(root.left)\n        return self.helper(root.left) and self.helper(root.right)",
    "# https://www.youtube.com/watch?v=d9N8_R2f9Lg\n# https://leetcode.com/problems/contains-31-days-of-the-month/\n\nclass Solution(object):\n    def contains31Days(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        return month % 4 == 0 and month % 100!= 0 or month % 400 == 0",
    "# https://oj.leetcode.com/problems/check-if-month-is-a-leap-year/discuss/120934/C++-DP-Solutions\n\n# DP\n# https://oj.leetcode.com/discuss/10862/dp-solution\n# https://oj.leetcode.com/discuss/10195/dp-solution-with-explanation\n# https://oj.leetcode.com/discuss/10683/dp-solution-with-explanation\n\n# Time:  O(n)\n# Space: O(n)\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        return (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))",
    "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\nimport unittest\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        if year % 4 == 0 and year % 100!= 0:\n            return True\n        if year % 400 == 0:\n            return True\n        return False\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/days-in-a-month/solution/\n\n# 10ms 100%\nclass Solution {\n    public boolean isLeapYear(int year) {\n        if (year % 4 == 0 && year % 100!= 0) {\n            return true;\n        }\n        if (year % 400 == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100!= 0) || (year % 400 == 0);\n    }\n}\n'''",
    "# https://www.hackerrank.com/challenges/30-days-of-the-month\n\ndef is_leap_year(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef days_in_month(month, year):\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    else:\n        return 31\n\ndef days_in_month_with_leap(month, year):\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    else:\n        return 31\n\ndef main():\n    month = input().strip()\n    year = input().strip()\n    days = days_in_month(int(month), int(year))\n    if days == 31:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {integer} m\n    # @return {boolean}\n    def isLeapYear(self, m):\n        if m < 0 or m > 12:\n            return False\n        if m % 4!= 0:\n            return False\n        if m % 400 == 0 or m % 100 == 0 and m % 4 == 0:\n            return True\n        return False\n\n    def checkLeap(self, m):\n        if m < 0 or m > 12:\n            return False\n        if m % 4!= 0:\n            return False\n        if m % 400 == 0 or m % 100 == 0 and m % 4 == 0:\n            return True\n        return False\n\nif __name__ == '__main__':\n    print(Solution().isLeapYear(3))\n    print(Solution().isLeapYear(5))\n    print(Solution().isLeapYear(7))\n    print(Solution().isLeapYear(8))\n    print(Solution().isLeapYear(9))\n    print(Solution().isLeapYear(11))\n    print(Solution().isLeapYear(12))\n    print(Solution().isLeapYear(15))\n    print(Solution().isLeapYear(17))\n    print(Solution().isLeapYear(19))\n    print(Solution().isLeapYear(20))\n    print(Solution().isLeapYear(21))\n    print(Solution().isLeapYear(22))\n    print(Solution().isLeapYear(23))\n    print(Solution().isLeapYear(24))\n    print(Solution().isLeapYear(25))\n    print(Solution().isLeapYear(26))\n    print(Solution().isLeapYear(27))\n    print(Solution().isLeapYear(28))\n    print(Solution().isLeapYear(29))\n    print(Solution().isLeapYear(30))\n    print(Solution().isLeapYear(31))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a month as an integer, return true if the given month contains 31 days,\notherwise return false.\n\nFor example, given the number 2, return true and given the number 5, return false.\n\nNote:\nThe given month contains only digits and is guaranteed to be within the range of\n[1, 12].\n\"\"\"\n\n\nclass Solution(object):\n    def is_leap(self, m):\n        if m in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n\n    def check_leap_month(self, m):\n        if m == 4 or m == 6 or m == 9 or m == 11:\n            return True\n        else:\n            return False\n\n    def check_leap_month_1(self, m):\n        if m == 2:\n            return True\n        elif m in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_month_2(self, m):\n        if m == 1:\n            return True\n        elif m in [2, 3, 4, 6, 7, 8, 9, 10, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_month_3(self, m):\n        if m == 2:\n            return True\n        elif m in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_month_4(self, m):\n        if m == 1:\n            return True\n        elif m in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_month_5(self, m):\n        if m == 2:\n            return True\n        elif m == 4 or m == 6 or m == 9 or m == 11:\n            return True\n        else:\n            return False\n\n    def check_leap_month_6(self, m):\n        if m",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is31Days(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m in [4, 6, 9, 11]:\n            return True\n        return False",
    "class Solution(object):\n    def checkIsValid(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m == 0 or m == 4 or m == 6 or m == 9 or m == 11:\n            return True\n        if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10:\n            return True\n        if m == 2:\n            return False\n        if m % 4 == 0 and m % 100!= 0 or m % 400 == 0:\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    print Solution().checkIsValid(1)\n    print Solution().checkIsValid(2)\n    print Solution().checkIsValid(3)\n    print Solution().checkIsValid(4)\n    print Solution().checkIsValid(5)\n    print Solution().checkIsValid(6)\n    print Solution().checkIsValid(7)\n    print Solution().checkIsValid(8)\n    print Solution().checkIsValid(9)\n    print Solution().checkIsValid(10)\n    print Solution().checkIsValid(11)\n    print Solution().checkIsValid(12)\n    print Solution().checkIsValid(13)\n    print Solution().checkIsValid(14)\n    print Solution().checkIsValid(15)\n    print Solution().checkIsValid(16)\n    print Solution().checkIsValid(17)\n    print Solution().checkIsValid(18)\n    print Solution().checkIsValid(19)\n    print Solution().checkIsValid(20)\n    print Solution().checkIsValid(21)\n    print Solution().checkIsValid(22)\n    print Solution().checkIsValid(23)\n    print Solution().checkIsValid(24)\n    print Solution().checkIsValid(25)\n    print Solution().checkIsValid(26)\n    print Solution().checkIsValid(27)\n    print Solution().checkIsValid(28)\n    print Solution().checkIsValid(29)\n    print Solution().checkIsValid(30)\n    print Solution().checkIsValid(31)\n    print Solution().checkIsValid(32)\n    print Solution().checkIsValid(33)",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a month, return 1 if the month has 31 days, return 0 otherwise.\n\nFor example, given the number 2, return 1.\nGiven the number 3, return 0.\n\nNote:\nYou must not modify the array.\n\"\"\"\n\nclass Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: int\n        \"\"\"\n        if m < 1 or m > 12:\n            return 0\n        if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n            return 1\n        if m % 4 == 0 and m % 100!= 0 or m % 400 == 0:\n            return 1\n        else:\n            return 0",
    "class Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        return (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)\n\n    def checkLeap(self, year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True\n\n    def checkLeap2(self, year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True\n\n    def checkLeap3(self, year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True\n\n    def checkLeap4(self, year):\n        if year % 4 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n\n\n\nif __name__ == \"__main__\":\n    print Solution().isLeapYear(2017)\n    print Solution().checkLeap(2017)\n    print Solution().checkLeap2(2017)\n    print Solution().checkLeap3(2017)\n    print Solution().checkLeap4(2017)",
    "# Definition for a valid month.\nclass Month:\n    def __init__(self, month):\n        self.month = month\n        self.days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    def __repr__(self):\n        return str(self.month)\n\nclass Solution:\n    def checkValid(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        # month.days[i] == 0 means the i-th month is leap month\n        return sum(month.days) == 0\n\nif __name__ == \"__main__\":\n    print Solution().checkValid(Month(4))\n    print Solution().checkValid(Month(2))\n    print Solution().checkValid(Month(1))\n    print Solution().checkValid(Month(6))\n    print Solution().checkValid(Month(7))\n    print Solution().checkValid(Month(8))\n    print Solution().checkValid(Month(9))\n    print Solution().checkValid(Month(10))\n    print Solution().checkValid(Month(11))\n    print Solution().checkValid(Month(12))\n    print Solution().checkValid(Month(13))\n    print Solution().checkValid(Month(14))\n    print Solution().checkValid(Month(15))\n    print Solution().checkValid(Month(16))\n    print Solution().checkValid(Month(17))\n    print Solution().checkValid(Month(18))\n    print Solution().checkValid(Month(19))\n    print Solution().checkValid(Month(20))\n    print Solution().checkValid(Month(21))\n    print Solution().checkValid(Month(22))\n    print Solution().checkValid(Month(23))\n    print Solution().checkValid(Month(24))\n    print Solution().checkValid(Month(25))\n    print Solution().checkValid(Month(26))\n    print Solution().checkValid(Month(27))\n    print Solution().checkValid(Month(28))\n    print Solution().checkValid(Month(29))\n    print Solution().checkValid(Month(30))\n    print Solution().checkValid(Month(31))",
    "# https://www.hackerrank.com/challenges/check-if-a-month-contains-31-days\n# https://www.hackerrank.com/challenges/check-if-a-month-contains-31-days-recursive\n\n\ndef check_month_31(month):\n    if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    return False\n\n# Time:  O(n)\n# Space: O(1)\n# DP\n# Recursive\n#\n# 8ms 100%\nclass Solution(object):\n    def check_31(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if check_month_31(month):\n            return True\n        return False",
    "# https://www.hackerrank.com/challenges/month-calendar/problem\n\ndef is_leap_year(year):\n    if (year % 400 == 0):\n        return True\n    if (year % 100 == 0):\n        return False\n    if (year % 4 == 0):\n        return True\n    return False\n\ndef is_leap_month(month):\n    if (month == 2 and is_leap_year(year)):\n        return True\n    return False\n\ndef is_leap_calendar(month, year):\n    if (month < 3):\n        return False\n    if (month == 3 and not is_leap_year(year)):\n        return False\n    if (month == 4 and is_leap_year(year)):\n        return False\n    if (month == 5 and is_leap_year(year)):\n        return False\n    if (month == 6 and not is_leap_year(year)):\n        return False\n    if (month == 7 and is_leap_year(year)):\n        return False\n    if (month == 8 and is_leap_year(year)):\n        return False\n    if (month == 9 and is_leap_year(year)):\n        return False\n    if (month == 10 and not is_leap_year(year)):\n        return False\n    if (month == 11 and is_leap_year(year)):\n        return False\n    if (month == 12 and is_leap_year(year)):\n        return False\n    return True\n\nif __name__ == '__main__':\n    month = int(input())\n    year = int(input())\n    if (is_leap_month(month)):\n        print('YES')\n    else:\n        print('NO')",
    "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\ndef days_in_month(month, year):\n    if month == 1:\n        return 31\n    elif month == 2:\n        return 28 if year % 4 == 0 else 29\n    elif month == 3:\n        return 31 if year % 4 == 0 else 30\n    elif month == 4:\n        return 30 if year % 4 == 0 else 31\n    elif month == 5:\n        return 31 if year % 4 == 0 else 30\n    elif month == 6:\n        return 30 if year % 4 == 0 else 31\n    elif month == 7:\n        return 31 if year % 4 == 0 else 30\n    elif month == 8:\n        return 31 if year % 4 == 0 else 30\n    elif month == 9:\n        return 30 if year % 4 == 0 else 31\n    elif month == 10:\n        return 31 if year % 4 == 0 else 30\n    elif month == 11:\n        return 30 if year % 4 == 0 else 31\n    elif month == 12:\n        return 31 if year % 4 == 0 else 30\n    else:\n        return 0\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        month = int(input())\n        year = int(input())\n        if days_in_month(month, year) == 31:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a valid month.\nclass Month:\n    def __init__(self, m):\n        self.m = m\n        self.days = 31\n\n    def get_days(self):\n        return self.days\n\nclass Solution:\n    def check_31_days(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m > 12 or m < 1:\n            return False\n        if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n            return True\n        if m % 4 == 0 and m % 100!= 0 or m % 400 == 0:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    assert Solution().check_31_days(1) == True\n    assert Solution().check_31_days(2) == True\n    assert Solution().check_31_days(3) == True\n    assert Solution().check_31_days(4) == False\n    assert Solution().check_31_days(5) == True\n    assert Solution().check_31_days(6) == True\n    assert Solution().check_31_days(7) == True\n    assert Solution().check_31_days(8) == False\n    assert Solution().check_31_days(9) == True\n    assert Solution().check_31_days(10) == True\n    assert Solution().check_31_days(11) == True\n    assert Solution().check_31_days(12) == False\n    assert Solution().check_31_days(13) == True\n    assert Solution().check_31_days(14) == True\n    assert Solution().check_31_days(15) == True\n    assert Solution().check_31_days(16) == True\n    assert Solution().check_31_days(17) == True\n    assert Solution().check_31_days(18) == True\n    assert Solution().check_31_days(19) == True\n    assert Solution().check_31_days(20) == True\n    assert Solution().check_31_days(21) == True\n    assert Solution().check_31_days(22) == True",
    "class Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m % 400 == 0:\n            return True\n        elif m % 100 == 0:\n            return False\n        elif m % 4 == 0:\n            return True\n        else:\n            return False\n\n# test\ns = Solution()\nprint s.isLeapYear(2012)\nprint s.isLeapYear(2017)\nprint s.isLeapYear(2000)\nprint s.isLeapYear(2015)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month % 4 == 0 and month % 100!= 0:\n            return True\n        elif month % 4!= 0 and month % 100 == 0:\n            return True\n        else:\n            return False\n\n\n    def checkLeapYear(self, year):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        if self.isLeapYear(year):\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    print Solution().checkLeapYear(2016)",
    "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        if s[0]!= '0':\n            return False\n        if s[1]!= '0' and s[1]!= '1':\n            return False\n        if s[2]!= '0':\n            return False\n        if s[3]!= '0':\n            return False\n        if s[4]!= '0':\n            return False\n        return True\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isNumber('0')\n    assert s.isNumber('1')\n    assert s.isNumber('11')\n    assert s.isNumber('111')\n    assert s.isNumber('1111')\n    assert s.isNumber('11111')\n    assert s.isNumber('111111')\n    assert s.isNumber('1111111')\n    assert s.isNumber('11111111')\n    assert s.isNumber('111111111')\n    assert s.isNumber('1111111111')\n    assert s.isNumber('11111111111')\n    assert s.isNumber('111111111111')\n    assert s.isNumber('1111111111111')\n    assert s.isNumber('11111111111111')\n    assert s.isNumber('111111111111111')\n    assert s.isNumber('1111111111111111')\n    assert s.isNumber('11111111111111111')\n    assert s.isNumber('111111111111111111')\n    assert s.isNumber('1111111111111111111')\n    assert s.isNumber('11111111111111111111')\n    assert s.isNumber('111111111111111111111')\n    assert s.isNumber('1111111111111111111111')\n    assert s.isNumber('11111111111111111111111')\n    assert s.isNumber('111111111111111111111111')\n    assert s.isNumber('11111111111111111111111111')\n    assert s.isNumber('111111111111111111111111111')\n    assert s.isNumber('111111111111111111111111111111')",
    "class Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m%4==0 and m%100!=0 or m%400==0\n\nif __name__ == '__main__':\n    print Solution().isLeapYear(2000)\n    print Solution().isLeapYear(2001)\n    print Solution().isLeapYear(2002)\n    print Solution().isLeapYear(2003)\n    print Solution().isLeapYear(2004)\n    print Solution().isLeapYear(2005)\n    print Solution().isLeapYear(2006)\n    print Solution().isLeapYear(2007)\n    print Solution().isLeapYear(2008)\n    print Solution().isLeapYear(2009)\n    print Solution().isLeapYear(2010)\n    print Solution().isLeapYear(2011)\n    print Solution().isLeapYear(2012)\n    print Solution().isLeapYear(2013)\n    print Solution().isLeapYear(2014)\n    print Solution().isLeapYear(2015)\n    print Solution().isLeapYear(2016)\n    print Solution().isLeapYear(2017)\n    print Solution().isLeapYear(2018)\n    print Solution().isLeapYear(2019)\n    print Solution().isLeapYear(2020)",
    "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef check_leap_year(year):\n    if is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef check_month(month, year):\n    if month == 2:\n        if is_leap_year(year):\n            return True\n        else:\n            return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    else:\n        return False\n\ndef check_month_number(month_number, year):\n    if month_number == 1:\n        if check_month(1, year):\n            return True\n    elif month_number == 3:\n        if check_month(3, year):\n            return True\n    elif month_number == 5:\n        if check_month(5, year):\n            return True\n    elif month_number == 7:\n        if check_month(7, year):\n            return True\n    elif month_number == 8:\n        if check_month(8, year):\n            return True\n    elif month_number == 10:\n        if check_month(10, year):\n            return True\n    elif month_number == 12:\n        if check_month(12, year):\n            return True\n    else:\n        return False\n\ndef check_month_number_leap_year(month_number, year):\n    if month_number == 1:\n        if check_month_number(1, year):\n            return True\n    elif month_number == 3:\n        if check_month_number(3, year):\n            return True\n    elif month_number == 5:\n        if check_month_number(5, year):\n            return True\n    elif month_number == 7:\n        if check_month_number(7, year):\n            return True\n    elif month_number == 8:",
    "#!/usr/bin/env python\n\ndef is_leap_year(year):\n    \"\"\"\n    Checks whether the given year is a leap year or not.\n    \"\"\"\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    month = int(input(\"Enter the month number: \"))\n    if month == 1:\n        print(\"Year {0} contains 31 days.\".format(month))\n    elif month == 3 or month == 5 or month == 8 or month == 10:\n        print(\"Year {0} contains 30 days.\".format(month))\n    elif month == 2 and is_leap_year(year):\n        print(\"Year {0} contains 29 days.\".format(month))\n    else:\n        print(\"Year {0} contains 28 days.\".format(month))\n\nif __name__ == '__main__':\n    main()",
    "# -*- coding: utf-8 -*-\n# @author: zhangxu\n\nimport re\n\ndef check_month(month):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    :param month:\n    :return:\n    \"\"\"\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    for i in xrange(1, 32):\n        if check_month(i):\n            print i",
    "def check_month(n):\n\treturn n%4 == 0 and n%100!= 0 or n%400 == 0\n\nif __name__ == \"__main__\":\n\tprint check_month(3)",
    "# https://www.hackerrank.com/challenges/month-checker/problem\n\nimport sys\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n\ndef check_31_days(year):\n    if year % 4 == 0:\n        if (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef check_31_days_recursive(year):\n    if year % 4 == 0:\n        if (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n\ndef main():\n    year = int(sys.stdin.readline())\n    print check_31_days(year)\n    print check_31_days_recursive(year)\n\nif __name__ == '__main__':\n    main()",
    "from collections import Counter\n\ndef check_month(n):\n    c = Counter(n)\n    if c['1'] == 3 and c['2'] == 1:\n        return True\n    return False\n\nif __name__ == '__main__':\n    print(check_month(2017))\n    print(check_month(2016))\n    print(check_month(2015))\n    print(check_month(2014))\n    print(check_month(2013))\n    print(check_month(2012))\n    print(check_month(2011))\n    print(check_month(2010))\n    print(check_month(2009))\n    print(check_month(2008))\n    print(check_month(2007))\n    print(check_month(2006))\n    print(check_month(2005))\n    print(check_month(2004))\n    print(check_month(2003))\n    print(check_month(2002))\n    print(check_month(2001))\n    print(check_month(2000))\n    print(check_month(1999))\n    print(check_month(1998))\n    print(check_month(1997))\n    print(check_month(1996))\n    print(check_month(1995))\n    print(check_month(1994))\n    print(check_month(1993))\n    print(check_month(1992))\n    print(check_month(1991))\n    print(check_month(1990))\n    print(check_month(1989))\n    print(check_month(1988))\n    print(check_month(1987))\n    print(check_month(1986))\n    print(check_month(1985))\n    print(check_month(1984))\n    print(check_month(1983))\n    print(check_month(1982))\n    print(check_month(1981))\n    print(check_month(1980))\n    print(check_month(1979))\n    print(check_month(1978))\n    print(check_month(1977))\n    print(check_month(1976))\n    print(check_month(1975))\n    print(check_month(1974))\n    print(check_month(1973))\n    print",
    "# https://www.hackerrank.com/challenges/month-check/problem\n\n#!/bin/python\n\nimport sys\n\n# Complete the monthCheck function below.\ndef monthCheck(n):\n    if n == 12:\n        return True\n    if n % 4 == 0 and n % 100!= 0:\n        return False\n    if n % 100 == 0 and n % 400 == 0:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    print(monthCheck(n))",
    "# Definition for a valid date.\nclass Date:\n    def __init__(self, m, d):\n        self.m = m\n        self.d = d\n\n    def __repr__(self):\n        return str(self.m) + \" \" + str(self.d)\n\n    def __eq__(self, other):\n        return self.m == other.m and self.d == other.d\n\n    def __lt__(self, other):\n        return self.m < other.m or self.m == other.m and self.d < other.d\n\n    def __gt__(self, other):\n        return self.m > other.m or self.m == other.m and self.d > other.d\n\n    def __le__(self, other):\n        return self.m <= other.m and self.d <= other.d\n\n    def __ge__(self, other):\n        return self.m >= other.m and self.d >= other.d\n\n\nclass Solution:\n    # @param {Date} date\n    # @return {boolean}\n    def isLeapYear(self, date):\n        if date.m < 1 or date.m > 12:\n            return False\n        else:\n            return (date.m == 4 or date.m == 6 or date.m == 9 or date.m == 11) and date.d > 29\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.isLeapYear(Date(4, 29)))\n    print(s.isLeapYear(Date(2, 29)))",
    "class Solution(object):\n    def isMonth31(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n < 1 or n > 12:\n            return False\n        if n in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        return n % 4 == 0 and n % 100!= 0 or n % 400 == 0\n\n\nif __name__ == \"__main__\":\n    assert Solution().isMonth31(1) == True\n    assert Solution().isMonth31(2) == True\n    assert Solution().isMonth31(3) == True\n    assert Solution().isMonth31(4) == True\n    assert Solution().isMonth31(5) == False\n    assert Solution().isMonth31(6) == False\n    assert Solution().isMonth31(7) == False\n    assert Solution().isMonth31(8) == False\n    assert Solution().isMonth31(9) == False\n    assert Solution().isMonth31(10) == False\n    assert Solution().isMonth31(11) == False\n    assert Solution().isMonth31(12) == False\n    assert Solution().isMonth31(13) == False\n    assert Solution().isMonth31(14) == False\n    assert Solution().isMonth31(15) == False\n    assert Solution().isMonth31(16) == False\n    assert Solution().isMonth31(17) == False\n    assert Solution().isMonth31(18) == False\n    assert Solution().isMonth31(19) == False\n    assert Solution().isMonth31(20) == False\n    assert Solution().isMonth31(21) == False\n    assert Solution().isMonth31(22) == False\n    assert Solution().isMonth31(23) == False\n    assert Solution().isMonth31(24) == False\n    assert Solution().isMonth31(25) == False\n    assert Solution().isMonth31(26) == False\n    assert Solution().isMonth31(27) == False\n    assert Solution().isMonth31(28) == False\n    assert Solution().isMonth31(29) == False\n    assert Solution().isMonth31(30) == False\n    assert Solution().isMonth31(31) == True",
    "class Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month % 2!= 0:\n            return False\n        return (month >= 1 and month <= 12) or (month == 1 and (month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12))",
    "import unittest\n\n\n# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\ndef month_check(m):\n    return len(range(1, m + 1)) == 31\n\n\nclass TestCode(unittest.TestCase):\n    def test_month_check(self):\n        self.assertTrue(month_check(12))\n        self.assertTrue(month_check(4))\n        self.assertTrue(month_check(3))\n        self.assertTrue(month_check(1))\n        self.assertFalse(month_check(0))\n        self.assertFalse(month_check(13))\n        self.assertFalse(month_check(32))\n\nif __name__ == '__main__':\n    unittest.main()",
    "# https://leetcode.com/problems/month-checker/\nclass Solution(object):\n    def isLeapYear(self, year):\n        if year % 4 == 0 and year % 100!= 0:\n            return True\n        elif year % 4!= 0 and year % 4 == 0:\n            return False\n        else:\n            return True\n\n    def daysInMonth(self, year, month):\n        if month == 2:\n            if self.isLeapYear(year):\n                return 29\n            else:\n                return 28\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return 30\n        else:\n            return 31\n\n    def monthChecker(self, year, month):\n        \"\"\"\n        :type year: int\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month == 2 and self.isLeapYear(year):\n            return False\n        return self.daysInMonth(year, month) == 31",
    "class Solution(object):\n    def checkIsMonth(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return True\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            return False\n        if month == 2:\n            if (month % 4 == 0 and month % 100!= 0) or (month % 400 == 0):\n                return True\n            else:\n                return False\n        return False",
    "class Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 100!= 0 or m % 400 == 0))\n\n    def checkLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 100!= 0 or m % 400 == 0))\n\n    def checkLeapYear2(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 400 == 0 or m % 100 == 0))\n\n    def checkLeapYear3(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 400 == 0 or m % 100 == 0 or m % 4 == 0))\n\n\n    def checkLeapYear4(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 400 == 0 or m % 100 == 0 or m % 4 == 0 or m % 100 == 0 or m % 4 == 0))\n\n\n    def checkLeapYear5(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return (m % 4 == 0 and (m % 400 == 0 or m % 100 == 0 or m % 4 == 0 or m % 100 == 0 or m % 4 == 0 or m % 100 == 0 or m % 4 == 0))\n\n\n    def checkLeapYear6(self, m):\n        \"\"\"\n        :type m: int",
    "# Definition for a month.\nclass Month:\n    def __init__(self, m, y):\n        self.m = m\n        self.y = y\n\n    def __repr__(self):\n        return str(self.m) +'' + str(self.y)\n\n    def __eq__(self, other):\n        return self.m == other.m and self.y == other.y\n\n\nclass Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 1 or m > 12:\n            return False\n        if m == 4 or m == 6 or m == 9 or m == 11:\n            return True\n        if m == 2:\n            if m % 100 == 0:\n                return m % 400 == 0\n            else:\n                return m % 4 == 0\n        return False\n\n    def leap_year(self, m):\n        if m > 0 and m < 13:\n            return m % 4 == 0 and m % 100!= 0 or m % 400 == 0\n        return False\n\n    def month_contains_leap(self, m, y):\n        if m < 1 or m > 12:\n            return False\n        if m == 2 and self.leap_year(y):\n            return True\n        return False\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isLeapYear(m)\n# param_2 = obj.leap_year(m)\n# param_3 = obj.month_contains_leap(m,y)",
    "def has_31_days(month):\n    if month == 1:\n        return True\n    elif month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\nprint(has_31_days(1))\nprint(has_31_days(2))\nprint(has_31_days(3))\nprint(has_31_days(4))\nprint(has_31_days(5))\nprint(has_31_days(6))\nprint(has_31_days(7))\nprint(has_31_days(8))\nprint(has_31_days(9))\nprint(has_31_days(10))\nprint(has_31_days(11))\nprint(has_31_days(12))\nprint(has_31_days(13))\nprint(has_31_days(14))\nprint(has_31_days(15))\nprint(has_31_days(16))\nprint(has_31_days(17))\nprint(has_31_days(18))\nprint(has_31_days(19))\nprint(has_31_days(20))\nprint(has_31_days(21))\nprint(has_31_days(22))\nprint(has_31_days(23))\nprint(has_31_days(24))\nprint(has_31_days(25))\nprint(has_31_days(26))\nprint(has_31_days(27))\nprint(has_31_days(28))\nprint(has_31_days(29))\nprint(has_31_days(30))\nprint(has_31_days(31))\nprint(has_31_days(32))\nprint(has_31_days(33))\nprint(has_31_days(34))\nprint(has_31_days(35))\nprint(has_31_days(36))\nprint(has_31_days(37))\nprint(has_31_days(38))\nprint(has_31_days(39))\nprint(has_31_days(40))\nprint(has_31_days(41",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.answer = 0\n\n    def check_31(self, n):\n        \"\"\"\n        :param n: month number\n        :return: True if 31 days, False otherwise\n        \"\"\"\n        if n >= 1 and n <= 12:\n            if n == 4 or n == 6 or n == 9 or n == 11:\n                return False\n            else:\n                return True\n        else:\n            return False\n\n    def check_31_helper(self, n):\n        if self.check_31(n):\n            self.answer += 1\n        return self.answer\n\n    def check_31(self, n):\n        \"\"\"\n        :param n: month number\n        :return: True if 31 days, False otherwise\n        \"\"\"\n        if n >= 1 and n <= 12:\n            if n == 4 or n == 6 or n == 9 or n == 11:\n                return False\n            else:\n                return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.check_31_helper(1)\n    print s.check_31_helper(2)\n    print s.check_31_helper(3)\n    print s.check_31_helper(4)\n    print s.check_31_helper(5)\n    print s.check_31_helper(6)\n    print s.check_31_helper(7)\n    print s.check_31_helper(8)\n    print s.check_31_helper(9)\n    print s.check_31_helper(10)\n    print s.check_31_helper(11)\n    print s.check_31_helper(12)\n    print s.check_31_helper(13)\n    print s.check_31_helper(14)\n    print s.check_31_helper(15)\n    print s.check_31_helper(16)\n    print s.check_31_helper(17)\n    print s.check_31_helper",
    "class Solution:\n    # @param m, an integer\n    # @return a boolean\n    def isLeapYear(self, m):\n        return (m % 4 == 0 and (m % 100!= 0 or m % 400 == 0))\n\n    def check31Days(self, m):\n        return (m == 3 and self.isLeapYear(m)) or (m == 4 and self.isLeapYear(m - 1)) or (m == 6 and self.isLeapYear(m - 1)) or (m == 9 and self.isLeapYear(m - 1)) or (m == 11 and self.isLeapYear(m - 1)) or (m == 12 and self.isLeapYear(m - 1))\n\nif __name__ == '__main__':\n    print Solution().check31Days(6)",
    "# https://www.hackerrank.com/challenges/month-check-problem/problem\n\ndef is_month_31(m):\n    \"\"\"\n    :type m: int\n    :rtype: bool\n    \"\"\"\n    return m == 3 or (m == 6 or (m == 9 or (m == 12 or (m == 1 or m == 2))))\n\nif __name__ == '__main__':\n    m = int(input())\n    print(is_month_31(m))",
    "# https://www.youtube.com/watch?v=b9C-hXC5v-g\n\n# 31 days in a month\n# 31 days in a leap year\n# 31 days in a leap year with a day before the 31st\n# 31 days in a leap year with a day after the 31st\n# 31 days in a leap year with a day before the 31st and a day after the 31st\n# 31 days in a leap year with a day before the 31st and a day after the 31st\n# 31 days in a leap year with a day before the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a day before the 31st\n# 31 days in a leap year with a day after the 31st and a day after the 31st and a day after the 31st and a day after the 31st and a",
    "# Definition for a valid month\nclass Month:\n    def __init__(self, month):\n        self.month = month\n        self.leap = False\n        if month == 2:\n            if (self.is_leap()):\n                self.leap = True\n            else:\n                self.leap = False\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            self.leap = True\n        else:\n            self.leap = False\n\n    def is_leap(self):\n        if self.month % 4 == 0 and (self.month % 100!= 0 or self.month % 400 == 0):\n            return True\n        else:\n            return False\n\nclass Solution(object):\n    def has31Days(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month <= 0 or month > 12:\n            return False\n        else:\n            if month == 1:\n                if self.is_leap(month):\n                    return True\n                else:\n                    return False\n            else:\n                if month == 2:\n                    if self.is_leap(month):\n                        return False\n                    else:\n                        return True\n                elif month == 3 or month == 5 or month == 8 or month == 10:\n                    return True\n                elif month == 4 or month == 6 or month == 9 or month == 11:\n                    return False\n                else:\n                    return False\n        return False\n\nif __name__ == \"__main__\":\n    assert Solution().has31Days(2) == True\n    assert Solution().has31Days(1) == True\n    assert Solution().has31Days(3) == True\n    assert Solution().has31Days(4) == True\n    assert Solution().has31Days(5) == True\n    assert Solution().has31Days(6) == True\n    assert Solution().has31Days(9) == True\n    assert Solution().has31Days(10) == False\n    assert Solution().has31Days(11) == True\n    assert Solution().has31Days(0) == False\n    assert Solution().has31Days(12) == False",
    "# https://oj.leetcode.com/problems/check-if-month-contains-31-days/\n# Definition for a valid month\nclass Month(object):\n    def __init__(self, m, y):\n        self.m = m\n        self.y = y\n\n    def is_leap(self):\n        return self.m % 4 == 0 and self.m % 100!= 0 or self.m % 400 == 0\n\n    def is_leap_year(self):\n        return self.y % 4 == 0 and self.y % 100!= 0 or self.y % 400 == 0\n\n    def __repr__(self):\n        return 'Month({}, {})'.format(self.m, self.y)\n\n\nclass Solution(object):\n    def is_leap(self, m):\n        return m.is_leap_year()\n\n    def is_leap_year(self, m):\n        return m.is_leap_year()",
    "# https://www.geeksforgeeks.org/write-a-function-to-check-whether-a-given-month-contains-31-days/\n#\n# Time:  O(n)\n# Space: O(1)\n#\n\nclass Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 1 or m > 12:\n            return False\n        return (m % 4 == 0) and (m % 100!= 0 or m % 400 == 0)\n\n    def checkLeap(self, m):\n        if m < 1 or m > 12:\n            return False\n        return (m % 4 == 0) and (m % 100!= 0 or m % 400 == 0)\n\n    def check31Days(self, m):\n        if m < 1 or m > 12:\n            return False\n        if self.isLeapYear(m):\n            return m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12\n        else:\n            return m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10\n\nif __name__ == '__main__':\n    print Solution().check31Days(3)\n    print Solution().check31Days(2)\n    print Solution().check31Days(4)\n    print Solution().check31Days(5)\n    print Solution().check31Days(6)",
    "class Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month % 4 == 0:\n            if month % 100 == 0:\n                return month % 400 == 0\n            else:\n                return month % 100 == 0\n        else:\n            return month % 4 == 0\n\n    def checkLeap(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if self.isLeapYear(month):\n            return month == 2 and self.isLeapYear(month + 1)\n        else:\n            return month == 2 and not self.isLeapYear(month + 1)\n\n    def checkLeap2(self, month):\n        if month < 3:\n            return False\n        return month % 4 == 0 and month % 100!= 0 or month % 400 == 0",
    "from datetime import datetime\nfrom typing import List\n\nclass Solution:\n    def isLeapYear(self, month: int) -> bool:\n        if month == 2:\n            return (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)\n        return False\n\n    def isLeapYearMonth(self, month: int) -> bool:\n        if month == 2:\n            return (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)\n        return False\n\n    def isLeapYearDays(self, month: int) -> List[int]:\n        if month == 2:\n            return [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        return []\n\n# Note:\n# 1. 31 days\n# 2. 29 days\n# 3. 31 days\n# 4. 30 days\n# 5. 31 days\n# 6. 30 days\n# 7. 31 days\n# 8. 30 days\n# 9. 31 days\n# 10. 30 days\n# 11. 31 days\n# 12. 30 days\n# 13. 31 days\n# 14. 30 days\n# 15. 31 days\n# 16. 30 days\n# 17. 31 days\n# 18. 30 days\n# 19. 31 days\n# 20. 30 days\n# 21. 31 days\n# 22. 30 days\n# 23. 31 days\n# 24. 30 days\n# 25. 31 days\n# 26. 30 days\n# 27. 31 days\n# 28. 30 days\n# 29. 31 days\n# 30. 30 days\n# 31. 31 days\n# 32. 30 days\n# 33. 31 days\n# 34. 30 days\n# 35. 31 days\n# 36. 30 days\n# 37. 31 days\n# 38. 30 days\n# 39. 31 days\n# 40. 30 days\n# 41. 31 days\n# 42. 30 days\n# 43. 31 days\n# 44. 30 days\n# 45. 31 days\n# 46. 30 days\n# 47. 31 days\n# 48. 30 days\n# 49. 31 days\n# 50. 30 days\n# 51. 31 days\n# 52. 30 days\n# 53. 31 days\n# 54. 30 days\n#",
    "# The Solution\n\n# Approach 1: Brute force\n\n# O(n) time, O(1) space\n# TLE\n\n# Approach 2: Recursive\n\n# O(n) time, O(n) space\n# TLE\n\n# Approach 3: Dynamic Programming\n\n# O(n) time, O(n) space\n# TLE\n\n# Approach 4: Iteration\n\n# O(n) time, O(n) space\n# TLE\n\n# Approach 5: DP\n\n# O(n) time, O(n) space\n# TLE",
    "class Solution(object):\n    def checkIsMonth(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m > 12 or m < 1:\n            return False\n        return True\n\n# Note:\n# If the given month is a leap year, the function returns True.\n# If the given month is not a leap year, the function returns False.",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m % 4 == 0 and m % 100!= 0 or m % 400 == 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isLeapYear(2017)",
    "def check_month(month_no):\n    if month_no == 1 or month_no == 3 or month_no == 5 or month_no == 7 or month_no == 8 or month_no == 10 or month_no == 12:\n        return True\n    else:\n        return False\n\n# Test Cases\nprint check_month(1)\nprint check_month(2)\nprint check_month(3)\nprint check_month(4)\nprint check_month(5)\nprint check_month(6)\nprint check_month(7)\nprint check_month(8)\nprint check_month(9)\nprint check_month(10)\nprint check_month(11)\nprint check_month(12)\nprint check_month(13)\nprint check_month(14)\nprint check_month(15)\nprint check_month(16)\nprint check_month(17)\nprint check_month(18)\nprint check_month(19)\nprint check_month(20)\nprint check_month(21)\nprint check_month(22)\nprint check_month(23)\nprint check_month(24)\nprint check_month(25)\nprint check_month(26)\nprint check_month(27)\nprint check_month(28)\nprint check_month(29)\nprint check_month(30)\nprint check_month(31)\nprint check_month(32)\nprint check_month(33)\nprint check_month(34)\nprint check_month(35)\nprint check_month(36)\nprint check_month(37)\nprint check_month(38)\nprint check_month(39)\nprint check_month(40)\nprint check_month(41)\nprint check_month(42)\nprint check_month(43)\nprint check_month(44)\nprint check_month(45)\nprint check_month(46)\nprint check_month(47)\nprint check_month(48)\nprint check_month(49)\nprint check_month(50)\nprint check_month(51)\nprint check_month(52)\nprint check_month(53)\nprint check_month(54)\nprint check_month(55)",
    "# https://leetcode.com/problems/month-days/discuss/1050/Python-solution\n\nclass Solution(object):\n    def isMonth31(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        return m % 12 == 0 and 31 == m % 100 / 12",
    "# Definition for a month.\nclass Month:\n    def __init__(self, month):\n        self.month = month\n\n    def __repr__(self):\n        return \"Month(%d)\" % self.month\n\nclass Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        return (month.month - 1) % 4 == 0 and (month.month - 1) % 100!= 0 or (month.month - 1) % 400 == 0\n\n    def checkLeap(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        return month.month == 2 and self.isLeapYear(month)\n\n    def checkLeap2(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        return month.month == 2 and month.month == 4 and month.month == 6 or month.month == 9 and month.month == 11",
    "class Solution:\n    # @param month: An integer\n    # @return: a boolean\n    def isLeapYear(self, month):\n        if month in [4, 6, 9, 11]:\n            return True\n        if month in [2, 3, 5, 7, 8, 10, 12]:\n            return False\n        return True if (month % 4 == 0 and month % 100!= 0) or (month % 400 == 0) else False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isLeapYear(2012)",
    "# https://leetcode.com/problems/day-of-month-in-month/description/\n\nclass Solution(object):\n    def is_leap_year(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n        \n    def check_leap(self, month, year):\n        \"\"\"\n        :type month: int\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if month == 2 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def check_leap_month(self, month, year):\n        if month == 2 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def check_leap_year(self, year):\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        return False\n        \n    def is_leap_month(self, month, year):\n        if month == 2 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def is_leap_year(self, year):\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        return False\n        \n    def is_leap_day(self, day, month, year):\n        if day == 29 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def is_leap_day_in_month(self, day, month, year):\n        if day == 29 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def is_leap_day_in_year(self, day, year):\n        if day == 29 and self.is_leap_year(year):\n            return True\n        return False\n        \n    def is_leap_day_in_month_year(self, day, month, year):\n        if day ==",
    "# Definition for a Month.\nclass Month:\n    def __init__(self, month):\n        self.month = month\n        self.days = 0\n\n    def __repr__(self):\n        return str(self.month) + \" \" + str(self.days)\n\n    def add_day(self, day):\n        self.days += day\n\nclass Solution(object):\n    def is_leap(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        return (month.month % 4 == 0 and month.month % 100!= 0) or (month.month % 400 == 0)\n\n    def check_leap_month(self, month):\n        if month.month < 1 or month.month > 12:\n            return False\n        if month.month == 4 or month.month == 6 or month.month == 9 or month.month == 11:\n            return True\n        return self.is_leap(Month(month.month))\n\n    def check_leap_month_recur(self, month):\n        if month.month < 1 or month.month > 12:\n            return False\n        if month.month == 4 or month.month == 6 or month.month == 9 or month.month == 11:\n            return True\n        if month.month == 2 and not self.is_leap(Month(month.month)):\n            return False\n        return self.check_leap_month(Month(month.month))\n\n    def check_leap_month_recur2(self, month):\n        if month.month < 1 or month.month > 12:\n            return False\n        if month.month == 4 or month.month == 6 or month.month == 9 or month.month == 11:\n            return True\n        if month.month == 2 and not self.is_leap(Month(month.month)):\n            return False\n        return self.check_leap_month(Month(month.month))\n\n    def check_leap_month_recur3(self, month):\n        if month.month < 1 or month.month > 12:\n            return False\n        if month.month == 4 or month.month == 6 or month",
    "def has_month(month):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    return False\n\ndef has_year(year):\n    if year == 1 or year == 2 or year == 3:\n        return True\n    return False\n\ndef has_month_and_year(month, year):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    return False\n\ndef has_month_and_year_and_leap_year(month, year):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    return False\n\ndef has_month_and_year_and_leap_year_and_leap_year(month, year):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    return False\n\ndef has_leap_year(year):\n    if year == 4 or year == 6 or year == 9 or year == 11:\n        return True\n    return False\n\ndef has_leap_year_and_leap_year(year):\n    if year == 4 or year == 6 or year == 9 or year == 11:\n        return True\n    return False\n\nif __name__ == '__main__':\n    assert has_month(1)\n    assert not has_month(2)\n    assert has_month(3)\n    assert not has_month(4)\n    assert has_month(5)\n    assert not has_month(6)\n    assert has_month(7)\n    assert not has_month(8)\n    assert not has_month(9)\n    assert has_month(10)\n    assert not has_month(11)\n    assert not has_month(12)\n    assert has_month(13)\n    assert not has_month(14)\n    assert not has_month(15)\n    assert not has_month(16)\n    assert not has_month(17)\n    assert not has_month(18)\n    assert not has_month(19)\n    assert not has_month(20)\n    assert not has_month",
    "# https://www.hackerrank.com/challenges/day-of-the-week\n# Time:  O(1)\n# Space: O(1)\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n    def daysInMonth(self, year, month):\n        \"\"\"\n        :type year: int\n        :type month: int\n        :rtype: int\n        \"\"\"\n        if self.isLeapYear(year):\n            return 31\n        return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n\nif __name__ == \"__main__\":\n    print Solution().daysInMonth(2016, 3)",
    "class Solution(object):\n    def isLeapYear(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m < 0 or m > 12:\n            return False\n        return m % 4 == 0 and m % 100!= 0 or m % 400 == 0\n\nif __name__ == \"__main__\":\n    for i in range(1,13):\n        print Solution().isLeapYear(i)",
    "class Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month < 1 or month > 12:\n            return False\n        return month % 4 == 0 and month % 100!= 0 or month % 400 == 0\n\nif __name__ == \"__main__\":\n    assert Solution().isLeapYear(2) == True\n    assert Solution().isLeapYear(3) == True\n    assert Solution().isLeapYear(4) == False\n    assert Solution().isLeapYear(5) == False\n    assert Solution().isLeapYear(6) == False\n    assert Solution().isLeapYear(7) == False\n    assert Solution().isLeapYear(8) == False\n    assert Solution().isLeapYear(9) == False\n    assert Solution().isLeapYear(10) == False\n    assert Solution().isLeapYear(11) == False\n    assert Solution().isLeapYear(12) == False\n    assert Solution().isLeapYear(13) == False\n    assert Solution().isLeapYear(14) == False\n    assert Solution().isLeapYear(15) == False\n    assert Solution().isLeapYear(16) == False\n    assert Solution().isLeapYear(17) == False\n    assert Solution().isLeapYear(18) == False\n    assert Solution().isLeapYear(19) == False\n    assert Solution().isLeapYear(20) == False\n    assert Solution().isLeapYear(21) == False\n    assert Solution().isLeapYear(22) == False\n    assert Solution().isLeapYear(23) == False\n    assert Solution().isLeapYear(24) == False\n    assert Solution().isLeapYear(25) == False\n    assert Solution().isLeapYear(26) == False\n    assert Solution().isLeapYear(27) == False\n    assert Solution().isLeapYear(28) == False\n    assert Solution().isLeapYear(29) == False\n    assert Solution().isLeapYear(30) == True\n    assert Solution().isLeapYear(31) == True",
    "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0:\n            return year % 400 == 0\n        else:\n            return year % 400 == 0\n    else:\n        return year % 4 == 0\n\ndef is_leap_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_month_number(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_year_month_number(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_month_number_with_leap_year(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_month_with_leap_year(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_year_month_with_leap_year(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False\n\ndef main():\n    print(is_leap_year_month_number(6))\n\nif __",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        \"\"\"\n        DFS\n        \"\"\"\n        if root is None:\n            return True\n        return self.dfs(root, 0)\n\n    def dfs(self, node, level):\n        if node is None:\n            return True\n        if level == len(str(node.val)):\n            return False\n        if node.left is None and node.right is None:\n            return True\n        if node.left is not None and self.dfs(node.left, level + 1):\n            return True\n        if node.right is not None and self.dfs(node.right, level + 1):\n            return True\n        return False",
    "# Definition for a date.\nclass Date:\n    def __init__(self, m, d):\n        self.m = m\n        self.d = d\n\n    def __eq__(self, other):\n        return self.m == other.m and self.d == other.d\n\n    def __repr__(self):\n        return str(self.m) +'' + str(self.d)\n\nclass Solution(object):\n    def checkValid(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m <= 0 or m > 12:\n            return False\n        return (m == 4 or m == 6 or m == 9 or m == 11) and (m == 3 or m == 5 or m == 8 or m == 10)\n\nif __name__ == '__main__':\n    s = Solution()\n    # print s.checkValid(2)\n    print s.checkValid(4)\n    print s.checkValid(6)\n    print s.checkValid(9)\n    print s.checkValid(11)\n    print s.checkValid(3)\n    print s.checkValid(5)\n    print s.checkValid(8)\n    print s.checkValid(10)\n    print s.checkValid(12)\n    print s.checkValid(1)",
    "# https://www.hackerrank.com/challenges/day-of-the-month/problem\n\n# First Solution\ndef is_valid_month(month_number):\n    if month_number % 4 == 0 and month_number % 100!= 0:\n        if month_number % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\n# Second Solution\ndef is_valid_month(month_number):\n    return month_number % 4 == 0 and month_number % 100!= 0",
    "def is_leap_year(year):\n    \"\"\"\n    Check if the given year is leap year or not.\n    :param year: int\n    :return: bool\n    \"\"\"\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    \"\"\"\n    Check if the given month is leap month or not.\n    :param month: int\n    :return: bool\n    \"\"\"\n    return month == 2 and is_leap_year(year)\n\ndef get_days(month, year):\n    \"\"\"\n    Get the number of days in the given month.\n    :param month: int\n    :param year: int\n    :return: int\n    \"\"\"\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    else:\n        return 31\n\ndef check_leap_month(month):\n    \"\"\"\n    Check whether the given month is leap month or not.\n    :param month: int\n    :return: bool\n    \"\"\"\n    return month == 2 and is_leap_month(month)\n\ndef check_leap_year(year):\n    \"\"\"\n    Check whether the given year is leap year or not.\n    :param year: int\n    :return: bool\n    \"\"\"\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef check_leap_month(month):\n    \"\"\"\n    Check whether the given month is leap month or not.\n    :param month: int\n    :return: bool\n    \"\"\"\n    return month == 2 and is_leap_month(month)\n\ndef is_leap_month_in_year(year):\n    \"\"\"\n    Check whether the given year is leap year or not.\n    :param year: int\n    :return: bool\n    \"\"\"\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    return False\n\ndef is_leap_year_in_month(month, year):\n    \"\"\"\n    Check whether the given year is leap year or not.",
    "def is_leap(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    return month == 2 and is_leap(month)\n\ndef is_leap_year(year):\n    return is_leap(year)\n\ndef get_days(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    elif month == 2 and is_leap_year(year):\n        return 29\n    else:\n        return 28\n\ndef check_leap_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return False\n    elif month == 2 and is_leap_month(month):\n        return True\n    else:\n        return False\n\ndef check_leap_year(year):\n    if is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef main():\n    month = input('Enter the month number: ')\n    month = int(month)\n    if check_leap_year(month):\n        print('The month is leap year')\n    else:\n        if check_leap_month(month):\n            print('The month is leap month')\n        else:\n            print('The month is not leap month')\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def checkIsValid(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        if m % 100 == 0:\n            if m % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}