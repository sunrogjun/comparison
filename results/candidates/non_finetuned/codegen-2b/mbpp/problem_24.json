{
  "problem": {
    "task_id": "MBPP/35",
    "prompt": "Write a function to find the n-th rectangular number.",
    "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ",
    "test_list": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ],
    "challenge_test_list": [],
    "problem_id": 24
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getRectangle(self, n):\n        if n == 1:\n            return 1\n        else:\n            return self.getRectangle(n-1) + self.getRectangle(n-2)\n\nif __name__ == \"__main__\":\n    assert Solution().getRectangle(1) == 1\n    assert Solution().getRectangle(2) == 4\n    assert Solution().getRectangle(3) == 9\n    assert Solution().getRectangle(4) == 16\n    assert Solution().getRectangle(5) == 25\n    assert Solution().getRectangle(6) == 36\n    assert Solution().getRectangle(7) == 49\n    assert Solution().getRectangle(8) == 64\n    assert Solution().getRectangle(9) == 81",
    "def find_rect(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(n+1):\n        result += i\n    return result\n\nif __name__ == '__main__':\n    print(find_rect(6))",
    "# https://leetcode.com/problems/rectangular-number/\n\nclass Solution(object):\n    def findRectangle(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        n = len(nums)\n        nums.sort()\n        # find the left side\n        start = 0\n        end = 1\n        while start < n:\n            if nums[start] == nums[end]:\n                if nums[start] == nums[end]:\n                    return nums[start]\n                end += 1\n            else:\n                if end < start:\n                    return nums[start]\n                start += 1\n        return nums[end]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    s = Solution()\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print s.findRectangle(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print s.findRectangle(nums)",
    "from math import ceil, sqrt\n\ndef solve(n):\n    return int(ceil(sqrt(n)))\n\nif __name__ == '__main__':\n    print solve(1)\n    print solve(10)\n    print solve(100)\n    print solve(1000)\n    print solve(10000)\n    print solve(100000)\n    print solve(1000000)\n    print solve(10000000)\n    print solve(100000000)\n    print solve(1000000000)\n    print solve(10000000000)\n    print solve(100000000000)\n    print solve(1000000000000)\n    print solve(10000000000000)\n    print solve(100000000000000)\n    print solve(1000000000000000)\n    print solve(10000000000000000)\n    print solve(1000000000000000000)\n    print solve(10000000000000000000)\n    print solve(100000000000000000000)\n    print solve(1000000000000000000000)\n    print solve(10000000000000000000000)\n    print solve(100000000000000000000000)\n    print solve(1000000000000000000000000)\n    print solve(10000000000000000000000000)\n    print solve(100000000000000000000000000)\n    print solve(1000000000000000000000000000)\n    print solve(10000000000000000000000000000)\n    print solve(100000000000000000000000000000)\n    print solve(1000000000000000000000000000000)\n    print solve(10000000000000000000000000000000)\n    print solve(1000000000000000000000000000000000)\n    print solve(100000000000000000000000000000000)\n    print solve(10000000000000000000000000000000000)\n    print solve(100000000000000000000000000000000000)\n    print solve(1000000000000000000000000000000000000)\n    print solve(10000000000000000000000000000000000000)\n    print solve(100000000000000000000000000000000000000)\n    print solve(1000000000000000000000000000000000000000)\n    print solve(10000000000000000000000000000000000000000)\n    print solve(100000000000000000000000000000000000000000)",
    "import math\n\ndef find_rect_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # This is the base case of recursion\n    if n == 0:\n        return 1\n\n    # This is the recursive case of recursion\n    return math.floor(math.sqrt(n)) + find_rect_number(n-math.floor(math.sqrt(n)))\n\n\n# Test Cases\nprint find_rect_number(1)\nprint find_rect_number(2)\nprint find_rect_number(3)\nprint find_rect_number(4)\nprint find_rect_number(5)\nprint find_rect_number(6)\nprint find_rect_number(7)\nprint find_rect_number(8)\nprint find_rect_number(9)\nprint find_rect_number(10)",
    "class Solution(object):\n    def getRectangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n*(n+1)//2",
    "# https://leetcode.com/problems/rectangle-area/\n# https://leetcode.com/problems/rectangle-area/solution/\n# https://discuss.leetcode.com/topic/84425/java-solution-with-explanation\n\nclass Solution(object):\n    def getRectangleArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2",
    "import sys\nimport timeit\n\nsys.path.append('..')\nimport pyspark\n\n\ndef main():\n    \"\"\"\n    Command-line interface to the nth_rectangular function.\n    \"\"\"\n    args = sys.argv[1:]\n    try:\n        n = int(args[0])\n    except IndexError:\n        n = 10\n    if len(args) > 1:\n        start_time = timeit.default_timer()\n        print(pyspark.accuracy.nth_rectangular(n, float(args[1])))\n        print('Time:', timeit.default_timer() - start_time)\n    else:\n        print('Usage: {} n'.format(sys.argv[0]))\n        print('  n: integer, the n-th number')\n        print('  start_num: float, the starting number')\n        print('  end_num: float, the ending number')\n\n\nif __name__ == '__main__':\n    main()",
    "def find_rect(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return find_rect_helper(n)\n\ndef find_rect_helper(n):\n    # write your code here\n    return find_rect_recursive(n)\n\ndef find_rect_recursive(n):\n    # write your code here\n    if n == 1:\n        return 1\n    else:\n        return find_rect_recursive(n-1) + find_rect_recursive(n)\n\nif __name__ == '__main__':\n    print(find_rect(100))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def getRectangle(self, n: int) -> int:\n        dp = [0] * n\n        for i in range(1, n):\n            for j in range(1, i):\n                dp[i] += max(dp[i-j], dp[i-j+1])\n        return dp[n-1]\n\n\nif __name__ == '__main__':\n    assert Solution().getRectangle(1) == 1\n    assert Solution().getRectangle(2) == 2\n    assert Solution().getRectangle(3) == 4\n    assert Solution().getRectangle(4) == 8\n    assert Solution().getRectangle(5) == 15\n    assert Solution().getRectangle(6) == 42\n    assert Solution().getRectangle(7) == 112\n    assert Solution().getRectangle(8) == 880\n    assert Solution().getRectangle(9) == 2160\n    assert Solution().getRectangle(10) == 3120\n    assert Solution().getRectangle(11) == 4160\n    assert Solution().getRectangle(12) == 5120\n    assert Solution().getRectangle(13) == 6160\n    assert Solution().getRectangle(14) == 7120\n    assert Solution().getRectangle(15) == 8160\n    assert Solution().getRectangle(16) == 9280\n    assert Solution().getRectangle(17) == 10240\n    assert Solution().getRectangle(18) == 11280\n    assert Solution().getRectangle(19) == 12160\n    assert Solution().getRectangle(20) == 12160\n    assert Solution().getRectangle(21) == 12160\n    assert Solution().getRectangle(22) == 12160\n    assert Solution().getRectangle(23) == 12160\n    assert Solution().getRectangle(24) == 12160\n    assert Solution().getRectangle(25) == 12",
    "def find_rect(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    total = 1\n    for i in range(2, n + 1):\n        total *= i\n    return total\n\n\nif __name__ == '__main__':\n    print(find_rect(4))\n    print(find_rect(10))",
    "import math\n\n\ndef nth_rectangular(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    # Find the number of digits of n\n    digits = math.floor(math.log10(n))\n    # Find the number of digits of n-1\n    nminus1_digits = math.floor(math.log10(n - 1))\n    # Add 1 to the number of digits\n    nminus1_digits += 1\n    # Calculate the result\n    result = 1\n    # Calculate the result for the first digit of n-1\n    for i in range(digits):\n        result *= 10\n        result += nminus1_digits - i\n    return result\n\n\nif __name__ == '__main__':\n    print(nth_rectangular(5))",
    "class Solution(object):\n    def getRect(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n+1) * (n+2) / 2",
    "def find_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # this is the base case\n    if n == 0:\n        return 1\n    # this is the recursion case\n    else:\n        return find_rectangle(n-1) + find_rectangle(n-2)\n\nif __name__ == \"__main__\":\n    print find_rectangle(4)",
    "import math\n\ndef find_rect(n):\n    \"\"\"\n    n is the number to find.\n    Return the n-th rectangle number.\n    \"\"\"\n    return math.floor(n * (n + 1) / 2)\n\nif __name__ == \"__main__\":\n    print(find_rect(1))\n    print(find_rect(2))\n    print(find_rect(3))\n    print(find_rect(4))\n    print(find_rect(5))\n    print(find_rect(6))\n    print(find_rect(7))\n    print(find_rect(8))",
    "import math\n\n\ndef rectangles(n):\n    return int(math.sqrt(n))\n\n\nif __name__ == '__main__':\n    print rectangles(1)\n    print rectangles(2)\n    print rectangles(3)\n    print rectangles(4)\n    print rectangles(5)\n    print rectangles(6)\n    print rectangles(7)\n    print rectangles(8)\n    print rectangles(9)\n    print rectangles(10)\n    print rectangles(11)\n    print rectangles(12)\n    print rectangles(13)\n    print rectangles(14)\n    print rectangles(15)\n    print rectangles(16)\n    print rectangles(17)\n    print rectangles(18)\n    print rectangles(19)\n    print rectangles(20)",
    "# @include\ndef nth_rectangular(n):\n    \"\"\"\n    >>> nth_rectangular(5) == 15\n    True\n    >>> nth_rectangular(10) == 55\n    True\n    >>> nth_rectangular(20) == 55\n    True\n    >>> nth_rectangular(15) == 55\n    True\n    >>> nth_rectangular(1) == 1\n    True\n    >>> nth_rectangular(0) == 1\n    True\n    >>> nth_rectangular(-1) == 1\n    True\n    \"\"\"\n    return sum(nth_rectangular(n - 1) * (n - 1) * (n - 2))\n\n\n# @exclude\ndef nth_rectangular_recursive(n):\n    \"\"\"\n    >>> nth_rectangular_recursive(5) == 15\n    True\n    >>> nth_rectangular_recursive(10) == 55\n    True\n    >>> nth_rectangular_recursive(20) == 55\n    True\n    >>> nth_rectangular_recursive(15) == 55\n    True\n    >>> nth_rectangular_recursive(1) == 1\n    True\n    >>> nth_rectangular_recursive(0) == 1\n    True\n    >>> nth_rectangular_recursive(-1) == 1\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return nth_rectangular_recursive(n - 1) * n\n\n\n# @include\ndef nth_rectangular_iterative(n):\n    \"\"\"\n    >>> nth_rectangular_iterative(5) == 15\n    True\n    >>> nth_rectangular_iterative(10) == 55\n    True\n    >>> nth_rectangular_iterative(20) == 55\n    True\n    >>> nth_rectangular_iterative(15) == 55\n    True\n    >>> nth_rectangular_iterative(1) == 1\n    True\n    >>> nth_rectangular_iterative(0) == 1\n    True\n    >>> nth_rectangular_iterative(-1) == 1\n    True\n    \"\"\"\n    def helper(",
    "# Definition for a rectangle.\nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.l = l\n        self.w = w\n\nclass Solution(object):\n    def getRectangleArea(self, l, w):\n        \"\"\"\n        :type l: int\n        :type w: int\n        :rtype: int\n        \"\"\"\n        if l == 0:\n            return 0\n        if w == 0:\n            return 0\n        if w == 1:\n            return l\n        if l == 1:\n            return w\n        if w < l:\n            l, w = w, l\n        if l % w == 0:\n            return w * l\n        else:\n            return w * (l - 1)\n\ns = Solution()\nprint s.getRectangleArea(5, 4)\nprint s.getRectangleArea(1, 2)\nprint s.getRectangleArea(1, 3)\nprint s.getRectangleArea(4, 2)\nprint s.getRectangleArea(4, 3)\nprint s.getRectangleArea(4, 4)\nprint s.getRectangleArea(4, 5)\nprint s.getRectangleArea(5, 5)\nprint s.getRectangleArea(6, 7)\nprint s.getRectangleArea(7, 8)\nprint s.getRectangleArea(8, 9)\nprint s.getRectangleArea(9, 10)\nprint s.getRectangleArea(10, 11)\nprint s.getRectangleArea(11, 12)\nprint s.getRectangleArea(12, 13)\nprint s.getRectangleArea(13, 14)\nprint s.getRectangleArea(14, 15)\nprint s.getRectangleArea(15, 16)\nprint s.getRectangleArea(16, 17)\nprint s.getRectangleArea(17, 18)\nprint s.getRectangleArea(18, 19)\nprint s.getRectangleArea(19, 20)\nprint s.getRectangleArea(20, 21)\nprint s.getRectangleArea(21, 22)\nprint s.getRectangleArea(22, 23)\nprint s",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def getRectangleArea(self, p, n):\n        \"\"\"\n        :type p: Point\n        :type n: int\n        :rtype: int\n        \"\"\"\n        x1, y1 = p.x, p.y\n        x2, y2 = x1, y1\n        for i in range(1, n):\n            x1, y1 = min(x1, x2), min(y1, y2)\n            x2, y2 = max(x2, x1), max(y2, y1)\n        return (x2 - x1) * (y2 - y1)\n\n\nif __name__ == '__main__':\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    p4 = Point(4, 4)\n    p5 = Point(5, 5)\n    p6 = Point(6, 6)\n    p7 = Point(7, 7)\n    p8 = Point(8, 8)\n    p9 = Point(9, 9)\n    p10 = Point(10, 10)\n    p11 = Point(11, 11)\n    p12 = Point(12, 12)\n    p13 = Point(13, 13)\n    p14 = Point(14, 14)\n    p15 = Point(15, 15)\n    p16 = Point(16, 16)\n    p17 = Point(17, 17)\n    p18 = Point(18, 18)\n    p19 = Point(19, 19)\n    p20 = Point(20, 20)\n    p21 = Point(21, 21)\n    p22 = Point(22, 22)\n    p23 = Point(23, 23)\n    p24 = Point(24, 24)\n    p25 = Point(25, 25)",
    "# https://www.hackerrank.com/challenges/rectangular-n\n\nimport math\n\ndef main():\n    n = int(input())\n    x = int(input())\n    x = x * x\n    print(x)\n    for i in range(2, n):\n        x = x + x + int(input())\n    print(x)\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point({}, {})>'.format(self.x, self.y)\n\n\nclass Solution:\n    # @param {integer} n\n    # @param {point[]} points\n    # @return {point}\n    def getRectangle(self, n, points):\n        def getArea(p1, p2):\n            return (p2.x - p1.x) * (p2.y - p1.y)\n\n        def getRectangleArea(p1, p2):\n            return p1.x * p2.y\n        \n        def getPivot(p1, p2):\n            return (p1.x + p2.x) / 2.0\n\n        def getMiddle(p1, p2):\n            return (p1.x + p2.x) / 2.0\n\n        def getSide(p1, p2):\n            return p2.x - p1.x\n\n        def getTop(p1, p2):\n            return p1.y\n\n        def getBottom(p1, p2):\n            return p2.y\n\n        def getLeft(p1, p2):\n            return p1.x\n\n        def getRight(p1, p2):\n            return p2.x\n\n        if len(points) == 0:\n            return None\n        p1 = points[0]\n        p2 = points[0]\n        for i in range(1, len(points)):\n            p1 = p2\n            p2 = points[i]\n            if getArea(p1, p2) > getArea(p2, p1):\n                p1 = p2\n            if getArea(p1, p2) == getArea(p2, p1):\n                if getRectangleArea(p1, p2) > getRectangleArea(p2, p1):\n                    p1 = p2\n                if getRectangleArea(p1, p2) == getRectangleArea(",
    "from collections import namedtuple\n\nRectangle = namedtuple(\"Rectangle\", \"l, w\")\n\ndef nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    rectangles = [Rectangle(l, w) for l, w in [\n        (1, 1),\n        (2, 2),\n        (3, 3),\n        (4, 4),\n        (5, 5),\n        (6, 6),\n        (7, 7),\n        (8, 8),\n        (9, 9),\n        (10, 10),\n    ]]\n    \n    def is_rectangle(rectangle, l, w):\n        return l == rectangle.l and w == rectangle.w\n    \n    def nth_rectangle(rectangles, n):\n        return sum(1 for i in range(n) if is_rectangle(rectangles[i], *rectangles[i+1:]))\n    \n    return nth_rectangle(rectangles, n)",
    "from math import sqrt\n\n\ndef get_rectangular_number(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef test():\n    assert get_rectangular_number(0) == 0\n    assert get_rectangular_number(1) == 1\n    assert get_rectangular_number(2) == 4\n    assert get_rectangular_number(3) == 9\n    assert get_rectangular_number(4) == 16\n    assert get_rectangular_number(5) == 25\n    assert get_rectangular_number(6) == 36\n    assert get_rectangular_number(7) == 49\n    assert get_rectangular_number(8) == 64\n    assert get_rectangular_number(9) == 81\n    assert get_rectangular_number(10) == 100\n    assert get_rectangular_number(11) == 121\n    assert get_rectangular_number(12) == 144\n    assert get_rectangular_number(13) == 169\n    assert get_rectangular_number(14) == 196\n    assert get_rectangular_number(15) == 225\n    assert get_rectangular_number(16) == 256\n    assert get_rectangular_number(17) == 289\n    assert get_rectangular_number(18) == 324\n    assert get_rectangular_number(19) == 361\n    assert get_rectangular_number(20) == 400\n    assert get_rectangular_number(21) == 429\n    assert get_rectangular_number(22) == 462\n    assert get_rectangular_number(23) == 501\n    assert get_rectangular_number(24) == 528\n    assert get_rectangular_number(25) == 562\n    assert get_rectangular_number(26) == 601\n    assert get_rectangular_number(27) == 628\n    assert get_rectangular_number(28) == 661\n    assert get_rectangular_number(29) == 701\n    assert get_rectangular_number(30) == 728\n    assert get_rectangular_number(31) == 761",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def getRectangle(self, root: TreeNode, n: int) -> int:\n        return self.getRectangleRecursive(root, n, 0, 0)\n\n    def getRectangleRecursive(self, root, n, left, right):\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return n\n        if n == 1:\n            return 1\n        return max(self.getRectangleRecursive(root.left, n - 1, left, right), self.getRectangleRecursive(root.right, n - 1, left, right))",
    "def nth_rectangle(n):\n    \"\"\"\n    Returns the n-th rectangle.\n    \"\"\"\n    num = 1\n    while num < n:\n        num += 1\n    \n    if num == n:\n        return num\n    \n    return nth_rectangle(num) + num - 1",
    "# Definition for a rectangle.\nclass Rectangle(object):\n    def __init__(self, l, w):\n        \"\"\"\n        :type l: int\n        :type w: int\n        \"\"\"\n        self.l = l\n        self.w = w\n\nclass Solution(object):\n    def findNthRectangleArea(self, l, w, n):\n        \"\"\"\n        :type l: int\n        :type w: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if l == 0 and w == 0:\n            return 0\n        if l == w:\n            return w * n\n        if l == 0:\n            return w * (n - 1)\n        if w == 0:\n            return l * (n - 1)\n        if n == 1:\n            return l * w\n        if n == 2:\n            return min(l * w, w * l)\n        \n        if l > w:\n            return self.findNthRectangleArea(w, l, n)\n        else:\n            return self.findNthRectangleArea(l, w, n)",
    "# https://oj.leetcode.com/problems/rectangle-area/\n# Given a non-negative integer numRows representing the row number of a 2D\n# array, return the area of the largest rectangle in the 2D array which has\n# the same number of rows and columns.\n\n# Example:\n# Given numRows = 3, return 24. ((3)x(3))\n# Given numRows = 2, return 4. ((2)x(2))\n\n# Note:\n# The rectangle of size 1 x N is not considered as the rectangle\n# with one side as [1, 1, 1] and the other side is empty.\n\nclass Solution(object):\n    def maximalRectangle(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: int\n        \"\"\"\n        # The idea is to find the largest rectangle in the matrix\n        # and then the area of this rectangle is the maximum area of rectangle\n        # in the matrix.\n        max_area = 0\n        if numRows <= 0:\n            return 0\n        else:\n            for i in xrange(numRows):\n                max_area = max(max_area, self.max_rectangle(i, numRows))\n            return max_area\n\n    def max_rectangle(self, i, numRows):\n        \"\"\"\n        :type i: int\n        :type numRows: int\n        :rtype: int\n        \"\"\"\n        # The idea is to consider the row as the first column,\n        # and the column as the second column.\n        # So we can count the number of rows or columns, and then we can\n        # calculate the area of the rectangle.\n        if i < 0:\n            return 0\n        if i == 0:\n            return numRows\n        if i == numRows:\n            return numRows\n        return self.max_rectangle(i - 1, numRows) * numRows",
    "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getRectangle(self, n):\n        return n * (n + 1) / 2",
    "def get_nth_rectangular(n):\n    \"\"\"\n    Input:\n        n (int)\n    Output:\n        rectangular number\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 429\n    if n == 22:\n        return 464\n    if n == 23:\n        return 500\n    if n == 24:\n        return 528\n    if n == 25:\n        return 556\n    if n == 26:\n        return 593\n    if n == 27:\n        return 624\n    if n == 28:\n        return 655\n    if n == 29:\n        return 698\n    if n == 30:\n        return 729\n    if n == 31:\n        return 756\n    if n == 32:\n        return 792\n    if n == 33:\n        return 829\n    if n == 34:\n        return 856\n    if n == 35:\n        return 893\n    if n == 36:\n        return 928\n    if n == 37:\n        return 956\n    if n == 38:\n        return 992\n    if n == 39:\n        return 1029\n    if n == 40:\n        return 1056\n    if n == 41:\n        return 1093\n    if n == 42:",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point(\" + repr(self.x) + \", \" + repr(self.y) + \")\"\n\n\nclass Solution:\n    def getRectangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: Point\n        \"\"\"\n        if n < 1:\n            return None\n\n        if n == 1:\n            return Point(1, 1)\n\n        return self.getRectangle(n - 1) + Point(n, 1)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    p = Point(1, 1)\n    print(p, p.x, p.y)\n    print(sol.getRectangle(1))\n    print(sol.getRectangle(2))",
    "import unittest\n\n\ndef nth_rectangle(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 1\n\n    if m == 1:\n        return n\n\n    return nth_rectangle(n, m - 1) + nth_rectangle(n - 1, m - 1)\n\n\nclass TestCode(unittest.TestCase):\n    def test_nth_rectangle(self):\n        self.assertEqual(nth_rectangle(1, 1), 1)\n        self.assertEqual(nth_rectangle(3, 1), 2)\n        self.assertEqual(nth_rectangle(4, 1), 3)\n        self.assertEqual(nth_rectangle(5, 1), 4)\n\n        self.assertEqual(nth_rectangle(1, 2), 2)\n        self.assertEqual(nth_rectangle(3, 2), 3)\n        self.assertEqual(nth_rectangle(4, 2), 4)\n        self.assertEqual(nth_rectangle(5, 2), 5)\n\n        self.assertEqual(nth_rectangle(1, 3), 4)\n        self.assertEqual(nth_rectangle(3, 3), 7)\n        self.assertEqual(nth_rectangle(4, 3), 8)\n        self.assertEqual(nth_rectangle(5, 3), 10)\n\n        self.assertEqual(nth_rectangle(1, 4), 8)\n        self.assertEqual(nth_rectangle(3, 4), 15)\n        self.assertEqual(nth_rectangle(4, 4), 24)\n        self.assertEqual(nth_rectangle(5, 4), 30)\n\n        self.assertEqual(nth_rectangle(1, 5), 24)\n        self.assertEqual(nth_rectangle(3, 5), 55)\n        self.assertEqual(nth_rectangle(4, 5), 90)\n        self.assertEqual(n",
    "def find_nth_rectangle(n, rectangles):\n    \"\"\"\n    :type n: int\n    :type rectangles: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(rectangles) == 0:\n        return -1\n\n    left = 0\n    right = len(rectangles) - 1\n\n    while left <= right:\n        mid = (left + right) / 2\n        if rectangles[mid][0] > n:\n            right = mid - 1\n        elif rectangles[mid][1] < n:\n            left = mid + 1\n        else:\n            return mid\n\n    return -1\n\n\nif __name__ == '__main__':\n    rectangles = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    assert(find_nth_rectangle(5, rectangles) == 2)\n    rectangles = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    assert(find_nth_rectangle(10, rectangles) == -1)",
    "def find_rectangular(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    def f(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n % 2 == 0:\n            return f(n / 2) + f(n / 2)\n        else:\n            return f(n / 2) + f(n / 2) + f(n / 2 - 1)\n    return f(n)\n\ndef find_rectangular_recursive(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n % 2 == 0:\n        return find_rectangular_recursive(n / 2) + find_rectangular_recursive(n / 2)\n    else:\n        return find_rectangular_recursive(n / 2) + find_rectangular_recursive(n / 2) + find_rectangular_recursive(n / 2 - 1)\n\nif __name__ == '__main__':\n    print find_rectangular(10)\n    print find_rectangular_recursive(10)",
    "def get_rectangular_number(n):\n    \"\"\"\n    Input: n = 4\n    Output: 4\n    \"\"\"\n    return [1, 2, 3, 4]\n\ndef get_rectangular_number_2(n):\n    \"\"\"\n    Input: n = 5\n    Output: 5\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\ndef get_rectangular_number_3(n):\n    \"\"\"\n    Input: n = 6\n    Output: 6\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6]\n\ndef get_rectangular_number_4(n):\n    \"\"\"\n    Input: n = 7\n    Output: 7\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7]\n\ndef get_rectangular_number_5(n):\n    \"\"\"\n    Input: n = 8\n    Output: 8\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef get_rectangular_number_6(n):\n    \"\"\"\n    Input: n = 9\n    Output: 9\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef get_rectangular_number_7(n):\n    \"\"\"\n    Input: n = 10\n    Output: 10\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef get_rectangular_number_8(n):\n    \"\"\"\n    Input: n = 11\n    Output: 11\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\ndef get_rectangular_number_9(n):\n    \"\"\"\n    Input: n = 12\n    Output: 12\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\ndef get_rectangular_number_10(n):\n    \"\"\"\n    Input: n = 13\n    Output: 13\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6",
    "def get_nth_rectangular(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n*(n+1)/2",
    "def find_rectangle(n):\n    # write your code here\n    if n == 1:\n        return 1\n\n    res = 1\n    for i in range(2, n):\n        res *= (n-i+1)/i\n    return res\n\nif __name__ == '__main__':\n    print(find_rectangle(5))\n    print(find_rectangle(7))\n    print(find_rectangle(15))\n    print(find_rectangle(20))\n    print(find_rectangle(30))\n    print(find_rectangle(100))",
    "# https://en.wikipedia.org/wiki/Rectangular_number\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return nth_rectangular_number(n - 1) + nth_rectangular_number(n - 2)\n\n\nif __name__ == '__main__':\n    assert nth_rectangular_number(2) == 4, '2'\n    assert nth_rectangular_number(3) == 9, '3'\n    assert nth_rectangular_number(4) == 16, '4'\n    assert nth_rectangular_number(5) == 25, '5'\n    assert nth_rectangular_number(6) == 36, '6'\n    assert nth_rectangular_number(7) == 49, '7'\n    assert nth_rectangular_number(8) == 64, '8'\n    assert nth_rectangular_number(9) == 81, '9'\n    assert nth_rectangular_number(10) == 100, '10'\n    assert nth_rectangular_number(11) == 121, '11'\n    assert nth_rectangular_number(12) == 144, '12'\n    assert nth_rectangular_number(13) == 169, '13'\n    assert nth_rectangular_number(14) == 196, '14'\n    assert nth_rectangular_number(15) == 225, '15'\n    assert nth_rectangular_number(16) == 256, '16'\n    assert nth_rectangular_number(17) == 289, '17'\n    assert nth_rectangular_number(18) == 324, '18'\n    assert nth_rectangular_number(19) == 361, '19'\n    assert nth_rectangular_number(20) == 400, '20'\n    assert nth_rectangular_number(21) == 429, '21'\n    assert nth_rectangular_number(22) == 464, '22'\n    assert nth_rectangular",
    "def find_rect_number(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n\n    A rectangular number is a number that is equal to the sum of the squares of its digits.\n    For example, the n-th rectangular number is 6-digit number:\n    6 = 1^2 + 2^2 + 3^2.\n    Hint:\n    We could write a recursive function to solve this problem.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return n * (find_rect_number(n-1) + find_rect_number(n-2))\n\n\nif __name__ == '__main__':\n    print(find_rect_number(3))",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer[][]} points\n    # @return {integer}\n    def getRectangle(self, n, points):\n        if len(points) == 0:\n            return 0\n        # print(points)\n        max_x = max(point[0] for point in points)\n        min_x = min(point[0] for point in points)\n        max_y = max(point[1] for point in points)\n        min_y = min(point[1] for point in points)\n        for point in points:\n            max_x = max(max_x, point[0])\n            min_x = min(min_x, point[0])\n            max_y = max(max_y, point[1])\n            min_y = min(min_y, point[1])\n        # print(max_x, min_x, max_y, min_y)\n        # print(points)\n        if max_x - min_x < n:\n            return 0\n        else:\n            return (max_x - min_x) * (max_y - min_y)\n\n\nif __name__ == \"__main__\":\n    points = [[2, 0], [0, 2], [2, 4]]\n    print(Solution().getRectangle(3, points))\n    # print(points)\n    # print(Solution().getRectangle(4, points))\n    # print(Solution().getRectangle(5, points))",
    "from utils import *\n\n\ndef solution(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2",
    "def get_rect_num(n):\n    \"\"\"\n    n = 10\n    >>> get_rect_num(1)\n    1\n    >>> get_rect_num(2)\n    3\n    >>> get_rect_num(3)\n    5\n    >>> get_rect_num(4)\n    7\n    >>> get_rect_num(5)\n    11\n    >>> get_rect_num(6)\n    13\n    >>> get_rect_num(7)\n    17\n    >>> get_rect_num(8)\n    23\n    \"\"\"\n    # n can be 1, 2, 3, 4, 5, 6, 7, 8\n    # The nth number is always a multiple of n-1, so we can use the formula:\n    # n*(n+1)/2\n    # If n is even, we can take the floor of the number.\n    # If n is odd, we can take the ceiling of the number.\n    return n*(n+1)/2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def get_rectangular(n):\n    return (n * (n + 1)) / 2\n\nprint(\"{} is the n-th rectangular number\".format(get_rectangular(100)))",
    "import math\n\ndef find_rect_nth(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        The n-th rectangle\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # base case\n    elif n == 2:\n        return 4\n    # recursion\n    return find_rect_nth(n-1) + find_rect_nth(n-2)\n\ndef find_rect_nth_recursion(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        The n-th rectangle\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return find_rect_nth_recursion(n-1) + find_rect_nth_recursion(n-2)\n\ndef find_rect_nth_iter(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        The n-th rectangle\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # base case\n    elif n == 2:\n        return 4\n    # recursion\n    return find_rect_nth_iter(n-1) + find_rect_nth_iter(n-2)\n\ndef find_rect_nth_iter_recursion(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        The n-th rectangle\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return find_rect_nth_iter_recursion(n-1) + find_rect_nth_iter_recursion(n-2)\n\ndef find_rect_nth_recursion_2(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        The n-th rectangle\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # base case\n    elif n == 2:\n        return 4\n    # recursion\n    return find_rect_",
    "class Solution(object):\n    def getRectangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 1\n        while n > 1:\n            ans *= n\n            n -= 1\n        return ans\n\nif __name__ == '__main__':\n    print(Solution().getRectangle(1))\n    print(Solution().getRectangle(2))\n    print(Solution().getRectangle(3))\n    print(Solution().getRectangle(4))\n    print(Solution().getRectangle(5))",
    "def get_nth_rectangular(n, nums):\n    \"\"\"\n    :type n: int\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return nums[0]\n    elif n > len(nums):\n        return nums[-1]\n    else:\n        return nums[n-1] + get_nth_rectangular(n-1, nums)\n\nif __name__ == '__main__':\n    print(get_nth_rectangular(5, [3, 2, 4, 1, 5]))\n    print(get_nth_rectangular(1, [3, 2, 4, 1, 5]))\n    print(get_nth_rectangular(3, [3, 2, 4, 1, 5]))\n    print(get_nth_rectangular(4, [3, 2, 4, 1, 5]))\n    print(get_nth_rectangular(6, [3, 2, 4, 1, 5]))",
    "def find_nth_rectangular(n):\n    \"\"\"\n    nth_rectangular(n) -> int\n    Find the nth rectangular number.\n\n    Example:\n    nth_rectangular(3) -> 7\n    nth_rectangular(4) -> 13\n    nth_rectangular(9) -> 29\n    nth_rectangular(10) -> 40\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 409\n    if n == 21:\n        return 456\n    if n == 22:\n        return 509\n    if n == 23:\n        return 565\n    if n == 24:\n        return 626\n    if n == 25:\n        return 697\n    if n == 26:\n        return 765\n    if n == 27:\n        return 838\n    if n == 28:\n        return 923\n    if n == 29:\n        return 1000\n    return 0",
    "# https://leetcode.com/problems/rectangle-area/discuss/81638/Python-Solution\n\nimport math\n\n\nclass Solution:\n    def getRectangle(self, n: int) -> int:\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return math.floor(math.sqrt(n)) * (n - 1)\n\n\ndef main():\n    sol = Solution()\n    print(sol.getRectangle(10))\n    print(sol.getRectangle(20))\n    print(sol.getRectangle(30))\n    print(sol.getRectangle(100))\n    print(sol.getRectangle(200))\n\n\nif __name__ == '__main__':\n    raise(SystemExit(main()))",
    "from math import sqrt\n\ndef rectangle(n):\n    # TODO: Write your code here\n    sqrt_n = int(sqrt(n))\n    if n % sqrt_n == 0:\n        return 1\n    else:\n        return n / sqrt_n\n\n\nif __name__ == \"__main__\":\n    print(rectangle(4))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return str(self.x) +'' + str(self.y)\n\n\nclass Solution(object):\n    def getRectangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: Point\n        \"\"\"\n        res = Point()\n        for i in range(1, n):\n            res.x += i\n            res.y += i\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getRectangle(2)\n    print s.getRectangle(3)\n    print s.getRectangle(4)",
    "import math\n\ndef get_rectangular_number(n):\n    \"\"\"\n    Return the n-th rectangular number.\n\n    Example:\n        >>> get_rectangular_number(4)\n        8\n        >>> get_rectangular_number(2)\n        3\n        >>> get_rectangular_number(3)\n        1\n        >>> get_rectangular_number(5)\n        4\n    \"\"\"\n    return int(math.sqrt(n)) * int(math.sqrt(n))\n\nif __name__ == '__main__':\n    print(get_rectangular_number(4))\n    print(get_rectangular_number(2))\n    print(get_rectangular_number(3))\n    print(get_rectangular_number(5))",
    "def rect_nth(n, max_num):\n    \"\"\"\n    :type n: int\n    :type max_num: int\n    :rtype: int\n    \"\"\"\n    def count(num):\n        return num if num < max_num else max_num\n\n    def get_sum(num):\n        return num + num * (num - 1)\n\n    def get_square(num):\n        return num * num\n\n    def get_rec_num(num, num_sum):\n        if num_sum == 0:\n            return num\n\n        rec_num = get_rec_num(num, num_sum - 1)\n        if get_square(rec_num) == num_sum:\n            return rec_num\n        else:\n            return get_rec_num(num, num_sum)\n\n    return get_rec_num(1, get_sum(max_num))\n\nif __name__ == '__main__':\n    assert(rect_nth(5, 100) == 20)\n    assert(rect_nth(10, 100) == 30)\n    assert(rect_nth(15, 100) == 35)",
    "import unittest\n\ndef rectangle(n):\n    \"\"\"\n    n is the number to find.\n    Returns the n-th rectangular number.\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    return (n * (n + 1)) / 2\n\nclass RectangleTest(unittest.TestCase):\n\n    def test_rectangle(self):\n        self.assertEqual(rectangle(1), 1)\n        self.assertEqual(rectangle(2), 4)\n        self.assertEqual(rectangle(3), 9)\n        self.assertEqual(rectangle(4), 16)\n        self.assertEqual(rectangle(5), 25)\n        self.assertEqual(rectangle(6), 36)\n        self.assertEqual(rectangle(7), 49)\n        self.assertEqual(rectangle(8), 64)\n        self.assertEqual(rectangle(9), 81)\n        self.assertEqual(rectangle(10), 100)\n        self.assertEqual(rectangle(11), 121)\n        self.assertEqual(rectangle(12), 144)\n        self.assertEqual(rectangle(13), 169)\n        self.assertEqual(rectangle(14), 196)\n        self.assertEqual(rectangle(15), 225)\n        self.assertEqual(rectangle(16), 256)\n        self.assertEqual(rectangle(17), 289)\n        self.assertEqual(rectangle(18), 324)\n        self.assertEqual(rectangle(19), 361)\n        self.assertEqual(rectangle(20), 408)\n        self.assertEqual(rectangle(21), 462)\n        self.assertEqual(rectangle(22), 528)\n        self.assertEqual(rectangle(23), 594)\n        self.assertEqual(rectangle(24), 661)\n        self.assertEqual(rectangle(25), 728)\n        self.assertEqual(rectangle(26), 806)\n        self.assertEqual(rectangle(27), 902)\n        self.assertEqual",
    "def find_rectangular(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    def rect(n):\n        if n == 1:\n            return 1\n        return sum([rect(n-i) for i in range(1, n)])\n    return rect(n)\n\n\nif __name__ == '__main__':\n    assert(find_rectangular(4) == 15)",
    "from collections import defaultdict\n\ndef find_rect_num(n, nums):\n    \"\"\"\n    :type n: int\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    m = defaultdict(int)\n    for i in range(n):\n        for j in range(n):\n            m[j, i] = m[i, j] + nums[i] * nums[j]\n    return m[n - 1, n - 1]\n\nif __name__ == '__main__':\n    assert find_rect_num(4, [3, 3, 3, 3]) == 6, 'n = 4'\n    assert find_rect_num(3, [3, 3, 3, 3]) == 12, 'n = 3'\n    assert find_rect_num(2, [3, 3, 3, 3]) == 24, 'n = 2'\n    assert find_rect_num(1, [3, 3, 3, 3]) == 36, 'n = 1'\n    assert find_rect_num(0, [3, 3, 3, 3]) == 0, 'n = 0'",
    "def find_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    start = 1\n    end = n\n    result = 0\n    while start <= end:\n        result = max(result, start**2 + end**2)\n        start += 1\n        end -= 1\n    return result\n\n# Your FindRectangle object will be instantiated and called as such:\n# obj = FindRectangle(n)\n# param_1 = obj.find_rectangle(n)",
    "def rectangle(n):\n    return n*(n+1)/2\n\ndef main():\n    n = int(input())\n    print(rectangle(n))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef find_rectangular(n):\n    return math.floor(math.sqrt(n))\n\nif __name__ == '__main__':\n    print(find_rectangular(10))",
    "def get_nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth = n\n    # nth_rect = 0\n    # while nth > 0:\n    #     nth_rect = nth_rect + 1\n    #     nth = n - nth_rect\n    # return nth_rect\n    \n    nth = n\n    nth_rect = 0\n    while nth > 0:\n        nth_rect = nth_rect + 1\n        nth = n - nth_rect\n    return nth_rect\n\n\nif __name__ == '__main__':\n    assert(get_nth_rectangle(1) == 1)\n    assert(get_nth_rectangle(2) == 4)\n    assert(get_nth_rectangle(3) == 9)\n    assert(get_nth_rectangle(4) == 16)\n    assert(get_nth_rectangle(5) == 25)\n    assert(get_nth_rectangle(6) == 36)\n    assert(get_nth_rectangle(7) == 49)\n    assert(get_nth_rectangle(8) == 64)\n    assert(get_nth_rectangle(9) == 81)\n    assert(get_nth_rectangle(10) == 100)\n    assert(get_nth_rectangle(11) == 121)\n    assert(get_nth_rectangle(12) == 144)\n    assert(get_nth_rectangle(13) == 169)\n    assert(get_nth_rectangle(14) == 196)\n    assert(get_nth_rectangle(15) == 225)\n    assert(get_nth_rectangle(16) == 256)\n    assert(get_nth_rectangle(17) == 289)\n    assert(get_nth_rectangle(18) == 324)\n    assert(get_nth_rectangle(19) == 361)\n    assert(get_nth_rectangle(20) == 400)\n    assert(get_nth_rectangle(",
    "def get_nth_rectangular(n, nth):\n    \"\"\"\n    :type n: int\n    :type nth: int\n    :rtype: int\n    \"\"\"\n    return get_rectangle_sum(n, nth)\n\ndef get_rectangle_sum(n, nth):\n    \"\"\"\n    :type n: int\n    :type nth: int\n    :rtype: int\n    \"\"\"\n    nth = nth - 1\n    return n * nth + nth * nth / 2\n\nif __name__ == '__main__':\n    assert get_nth_rectangular(5, 3) == 15\n    assert get_nth_rectangular(5, 6) == 15\n    assert get_nth_rectangular(5, 7) == 16",
    "from __future__ import print_function\n\ndef get_rectangular_number(n):\n    \"\"\"\n    >>> get_rectangular_number(1)\n    1\n    >>> get_rectangular_number(2)\n    4\n    >>> get_rectangular_number(3)\n    9\n    >>> get_rectangular_number(4)\n    16\n    >>> get_rectangular_number(5)\n    25\n    >>> get_rectangular_number(6)\n    36\n    >>> get_rectangular_number(7)\n    49\n    >>> get_rectangular_number(8)\n    64\n    >>> get_rectangular_number(9)\n    81\n    \"\"\"\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getRectangle(self, n):\n        return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getRectangle(4)",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"Point(\" + str(self.x) + \",\" + str(self.y) + \")\"\n\nclass Solution:\n    def getRect(self, p, n):\n        \"\"\"\n        :type p: Point\n        :type n: int\n        :rtype: Point\n        \"\"\"\n        return Point(p.x - n, p.y - n)\n\nif __name__ == '__main__':\n    s = Solution()\n    p = Point(2,2)\n    print s.getRect(p, 1)\n    print s.getRect(p, 3)",
    "class Solution:\n    # @param {int} n\n    # @return {int}\n    def getRectangle(self, n):\n        return 1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRectangle(1))",
    "import time\nstart_time = time.time()\n\ndef find_nth_rectangle(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_nth_rectangle(n-1, m) + find_nth_rectangle(n-1, m-1)\n\nif __name__ == '__main__':\n    print(time.time() - start_time)",
    "def nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # n = n - 1\n    return sum(map(lambda x: x*(n-x), range(1, n+1)))\n\ndef test_nth_rectangle(n):\n    assert nth_rectangle(n) == nth_rectangle(n)\n\ndef main():\n    # print(nth_rectangle(1))\n    # print(nth_rectangle(2))\n    # print(nth_rectangle(3))\n    print(nth_rectangle(4))\n    print(nth_rectangle(5))\n    print(nth_rectangle(6))\n    print(nth_rectangle(7))\n    print(nth_rectangle(8))\n    print(nth_rectangle(9))\n\nif __name__ == '__main__':\n    main()",
    "from collections import defaultdict\n\ndef get_rect(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(n-1):\n        rect *= i + 1\n    return rect\n\ndef get_rect_number(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(n):\n        rect *= i + 1\n    return rect\n\ndef get_rect_number_2(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_3(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_4(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_5(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_6(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_7(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect\n\ndef get_rect_number_8(n):\n    \"\"\"\n    Return the n-th rectangular number.\n    \"\"\"\n    rect = 1\n    for i in range(1, n+1):\n        rect *= i\n    return rect",
    "import unittest\n\nclass Solution(object):\n    def getRectangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 9\n        if n == 4:\n            return 16\n        if n == 5:\n            return 25\n        if n == 6:\n            return 36\n        if n == 7:\n            return 49\n        if n == 8:\n            return 64\n        if n == 9:\n            return 81\n        if n == 10:\n            return 100\n        return n * (n + 1) / 2\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/rectangle-n/solution/\n\n# 0ms 100%\nclass Solution {\n    public int getRectangle(int n) {\n        if (n == 1) return 1;\n        if (n == 2) return 4;\n        if (n == 3) return 9;\n        if (n == 4) return 16;\n        if (n == 5) return 25;\n        if (n == 6) return 36;\n        if (n == 7) return 49;\n        if (n == 8) return 64;\n        if (n == 9) return 81;\n        if (n == 10) return 100;\n        return n * (n + 1) / 2;\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public int getRectangle(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public int getRectangle(int n) {\n        if (n == 1) return 1;\n        if (n == 2) return 4;\n        if",
    "from math import sqrt\n\n\ndef get_rectangular(n):\n    \"\"\"\n    n - the number of the rectangle to be found.\n    Returns -1 if the number is not found.\n    \"\"\"\n    \n    # Start with square of the number\n    # The square of the number will be a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.\n    # The square of the number will be a perfect square if it is a perfect square.",
    "import math\n\n\ndef get_rectangle(n):\n    \"\"\"\n    n - the number of rectangle\n    return - the n-th rectangle number\n    \"\"\"\n    return int(math.floor(math.sqrt(n)))\n\n\ndef main():\n    print get_rectangle(1)\n    print get_rectangle(2)\n    print get_rectangle(3)\n    print get_rectangle(4)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_nth_rectangle(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    Input:\n        n - The n-th rectangle number.\n    Output:\n        The n-th rectangle number.\n    Explanation:\n        We start with n = 1.\n        Let n = 2.\n            3 4\n        Then we have\n            3 4\n            4 5\n        Then we have\n            4 5\n            5 6\n        Then we have\n            4 5\n            5 6\n            6 7\n        Then we have\n            4 5\n            5 6\n            6 7\n            7 8\n        And so on.\n        Note that n = 1 is not a rectangular number.\n    \"\"\"\n    return n\n\n\nif __name__ == '__main__':\n    print(find_nth_rectangle(1))\n    print(find_nth_rectangle(2))\n    print(find_nth_rectangle(3))\n    print(find_nth_rectangle(4))\n    print(find_nth_rectangle(5))\n    print(find_nth_rectangle(6))\n    print(find_nth_rectangle(7))\n    print(find_nth_rectangle(8))",
    "import math\n\ndef nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))\n\nif __name__ == '__main__':\n    print(nth_rectangle(5))\n    print(nth_rectangle(4))\n    print(nth_rectangle(3))\n    print(nth_rectangle(2))\n    print(nth_rectangle(1))",
    "def nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth rectangle\n    # 1 1 1 1 1 1 1 1\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1 2 3 4 5 6 7 8\n    # 1",
    "def rect(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n    return (n*(n+1))/2\n\nif __name__ == '__main__':\n    print(rect(1))\n    print(rect(2))\n    print(rect(3))\n    print(rect(4))\n    print(rect(5))\n    print(rect(6))\n    print(rect(7))\n    print(rect(8))\n    print(rect(9))\n    print(rect(10))",
    "def find_rect(n):\n    return n * (n + 1) / 2\n\ndef test_cases():\n    assert(find_rect(1) == 1)\n    assert(find_rect(2) == 4)\n    assert(find_rect(3) == 9)\n    assert(find_rect(4) == 16)\n    assert(find_rect(5) == 25)\n    assert(find_rect(6) == 36)\n    assert(find_rect(7) == 49)\n    assert(find_rect(8) == 64)\n    assert(find_rect(9) == 81)\n    assert(find_rect(10) == 100)\n\nif __name__ == '__main__':\n    test_cases()",
    "def find_nth_rectangle(n, l, r, m):\n    \"\"\"\n    :type n: int\n    :type l: int\n    :type r: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if l == r:\n        return 1\n    if l + m + 1 < r:\n        return 0\n    return find_nth_rectangle(n, l, l + m, r - l - 1) + find_nth_rectangle(n, l + 1, r, r - l - 1)\n\n# Your find_nth_rectangle function should return the number of rectangular\n# numbers with nth rectangle number.\n\n# Below is a sample input.\n# Input: n = 3, l = 1, r = 4, m = 2\n# Output: 3\n# Explanation:\n# The first three rectangular numbers are 1, 2, 3.\n# The fourth rectangle number is 4.\n# The fifth rectangle number is 8.\n# The sixth rectangle number is 12.\n# The seventh rectangle number is 18.\n# The eighth rectangle number is 24.",
    "# Definition for a rectangle.\nclass Rectangle(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\nclass Solution(object):\n    def getRectangleArea(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: int\n        \"\"\"\n        height_i = height\n        width_i = width\n        rectangle_area = 0\n        while height_i > 0 and width_i > 0:\n            rectangle_area += min(height_i, width_i)\n            height_i -= 1\n            width_i -= 1\n        return rectangle_area",
    "def get_rectangular(n):\n    \"\"\"\n    >>> get_rectangular(1)\n    1\n    >>> get_rectangular(5)\n    15\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return get_rectangular(n - 1) + get_rectangular(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_rect_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # https://www.hackerrank.com/challenges/rectangle/problem\n    n = int(n)\n    if n == 1:\n        return 1\n    return find_rect_number(n - 1) + find_rect_number(n - 2)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_rect_number(n))",
    "class Solution(object):\n    def getRectNum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 9\n        if n == 4:\n            return 16\n        if n == 5:\n            return 25\n        if n == 6:\n            return 36\n        if n == 7:\n            return 49\n        if n == 8:\n            return 64\n        if n == 9:\n            return 81\n        return n",
    "import math\n\ndef nth_rectangle_number(n):\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))\n\nif __name__ == \"__main__\":\n    assert nth_rectangle_number(1) == math.factorial(1)\n    assert nth_rectangle_number(2) == math.factorial(2)\n    assert nth_rectangle_number(3) == math.factorial(3)\n    assert nth_rectangle_number(4) == math.factorial(4)\n    assert nth_rectangle_number(5) == math.factorial(5)\n    assert nth_rectangle_number(6) == math.factorial(6)\n    assert nth_rectangle_number(7) == math.factorial(7)\n    assert nth_rectangle_number(8) == math.factorial(8)\n    assert nth_rectangle_number(9) == math.factorial(9)\n    assert nth_rectangle_number(10) == math.factorial(10)\n    assert nth_rectangle_number(11) == math.factorial(11)\n    assert nth_rectangle_number(12) == math.factorial(12)\n    assert nth_rectangle_number(13) == math.factorial(13)\n    assert nth_rectangle_number(14) == math.factorial(14)\n    assert nth_rectangle_number(15) == math.factorial(15)\n    assert nth_rectangle_number(16) == math.factorial(16)\n    assert nth_rectangle_number(17) == math.factorial(17)\n    assert nth_rectangle_number(18) == math.factorial(18)\n    assert nth_rectangle_number(19) == math.factorial(19)\n    assert nth_rectangle_number(20) == math.factorial(20)\n    assert nth_rectangle_number(21) == math.factorial(21)\n    assert nth_rectangle_number(22",
    "def find_nth_rectangle(n):\n    \"\"\"\n    Input:\n        n: An integer\n    Output:\n        An integer\n    \"\"\"\n    \n    # a, b, c, d are the sides of the rectangle.\n    # n - 1 is the number of rectangles of side a.\n    # n is the number of rectangles of side b.\n    # n + 1 is the number of rectangles of side c.\n    # n + 2 is the number of rectangles of side d.\n    \n    # Find the nth rectangle.\n    \n    # a, b, c, d = (1, 1, 1, 1)\n    # n = 3\n    # a, b, c, d = (2, 2, 2, 2)\n    # n = 4\n    # a, b, c, d = (3, 3, 3, 3)\n    # n = 5\n    # a, b, c, d = (4, 4, 4, 4)\n    # n = 6\n    # a, b, c, d = (5, 5, 5, 5)\n    # n = 7\n    # a, b, c, d = (6, 6, 6, 6)\n    # n = 8\n    # a, b, c, d = (7, 7, 7, 7)\n    # n = 9\n    # a, b, c, d = (8, 8, 8, 8)\n    # n = 10\n    # a, b, c, d = (9, 9, 9, 9)\n    # n = 11\n    # a, b, c, d = (10, 10, 10, 10)\n    # n = 12\n    # a, b, c, d = (11, 11, 11, 11)\n    # n = 13\n    # a, b, c, d = (12, 12, 12, 12)\n    # n = 14\n    # a, b, c, d = (13, 13, 13, 13)\n    # n = 15\n    # a, b, c, d = (14, 14, 14, 14)\n    # n = 16\n    # a, b, c, d = (15, 15, 15,",
    "# Definition for a rectangle.\nclass Rectangle(object):\n    def __init__(self, l, t, r, b):\n        self.left = l\n        self.top = t\n        self.right = r\n        self.bottom = b\n\nclass Solution(object):\n    def solve(self, l, t, r, b, n):\n        \"\"\"\n        :type l: int\n        :type t: int\n        :type r: int\n        :type b: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return (r - l + 1) * (b - t + 1)\n        elif n == 3:\n            return (r - l + 1) * (b - t + 1) * (r - l + 1 - t + 1)\n        elif n == 4:\n            return (r - l + 1) * (b - t + 1) * (r - l + 1 - t + 1) * (b - t + 1 - l + 1 + t + 1)\n        else:\n            return 0\n\ndef main():\n    # Output: 1\n    l, t, r, b = 1, 1, 1, 1\n    n = 1\n    print Solution().solve(l, t, r, b, n)\n\nif __name__ == '__main__':\n    main()",
    "def get_rect_nth(n):\n    \"\"\"\n    n is the number to be found\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print(get_rect_nth(10))",
    "# Your function will be called as follows:\n# function(n, nums)\n\ndef rectangle(n, nums):\n    \"\"\"\n    :type n: int\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    # nums is sorted\n    left = 0\n    right = len(nums) - 1\n\n    # nums[left] < nums[right]\n    while left < right:\n        if nums[left] < nums[right]:\n            # nums[left] < nums[right]\n            # left is the left most index of nums[left]\n            # right is the right most index of nums[right]\n            if n == 1:\n                return left\n            n -= 1\n            left += 1\n        else:\n            # nums[left] >= nums[right]\n            # right is the left most index of nums[right]\n            # left is the right most index of nums[left]\n            if n == 1:\n                return right\n            n -= 1\n            right -= 1\n\n    # left == right\n    if n == 1:\n        return left\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(rectangle(1, [1, 2, 3, 4]))\n    print(rectangle(2, [1, 2, 3, 4]))\n    print(rectangle(3, [1, 2, 3, 4]))\n    print(rectangle(4, [1, 2, 3, 4]))\n    print(rectangle(5, [1, 2, 3, 4]))\n    print(rectangle(6, [1, 2, 3, 4]))\n    print(rectangle(7, [1, 2, 3, 4]))\n    print(rectangle(8, [1, 2, 3, 4]))\n    print(rectangle(9, [1, 2, 3, 4]))\n    print(rectangle(10, [1, 2, 3, 4]))\n    print(rectangle(11, [1, 2, 3, 4",
    "def nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 429\n    if n == 22:\n        return 464\n    if n == 23:\n        return 501\n    if n == 24:\n        return 528\n    if n == 25:\n        return 562\n    if n == 26:\n        return 600\n    if n == 27:\n        return 629\n    if n == 28:\n        return 664\n    if n == 29:\n        return 707\n    if n == 30:\n        return 748\n    if n == 31:\n        return 793\n    if n == 32:\n        return 832\n    if n == 33:\n        return 871\n    if n == 34:\n        return 910\n    if n == 35:\n        return 949\n    if n == 36:\n        return 988\n    if n == 37:\n        return 1027\n    if n == 38:\n        return 1066\n    if n == 39:\n        return 1105\n    if n == 40:\n        return 1144\n    if n == 41:\n        return 1183\n    if n == 42:\n        return 1222",
    "def nth_rect(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_rect_rec(1, n, 1)\n\ndef nth_rect_rec(start, n, step):\n    \"\"\"\n    :type start: int\n    :type n: int\n    :type step: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return start\n    else:\n        return nth_rect_rec(start + step, n - 1, step)\n\nif __name__ == '__main__':\n    print nth_rect(2)\n    print nth_rect_rec(1, 2, 1)",
    "import unittest\n\ndef nth_rectangle(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n\n    Example:\n    nth_rectangle(3) -> 4\n    nth_rectangle(4) -> 9\n    nth_rectangle(5) -> 24\n    \"\"\"\n    return n * (n + 1) // 2\n\nclass Test(unittest.TestCase):\n    def test_nth_rectangle(self):\n        self.assertEqual(nth_rectangle(1), 4)\n        self.assertEqual(nth_rectangle(2), 9)\n        self.assertEqual(nth_rectangle(3), 24)\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def getRect(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.getRect_recursive(n)\n\n    def getRect_recursive(self, n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 9\n        else:\n            return self.getRect_recursive(n-1) + self.getRect_recursive(n-2)",
    "from utils import *\n\n\ndef find_rect(n):\n    \"\"\"\n    Find the n-th rectangular number\n    :param n: int\n    :return: tuple\n    \"\"\"\n    # n is 2^k, k = int(log2(n))\n    n = int(n)\n    k = 0\n    while n > 1:\n        k += 1\n        n >>= 1\n    return (1, k)\n\n\ndef main():\n    \"\"\"\n    Main function\n    :return: void\n    \"\"\"\n    print find_rect(9)\n    print find_rect(99)\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import Counter\n\nclass Solution:\n    def getRectangleArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in xrange(1, n + 1):\n            for j in xrange(i):\n                result += i * j\n        return result\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.getRectangleArea(3)\n    print sol.getRectangleArea(5)\n    print sol.getRectangleArea(6)",
    "import math\n\ndef get_num(n):\n    \"\"\"\n    n: the number to be searched\n    return: the n-th number\n    \"\"\"\n    if n == 1:\n        return 1\n    return get_num(n - 1) + get_num(n - 2) * 2\n\n\ndef main():\n    # n = int(input())\n    n = 2\n    print(get_num(n))\n\n\nif __name__ == '__main__':\n    main()",
    "def get_rect(n):\n    \"\"\"\n    Input:\n        n: A positive integer\n    Output:\n        A list of integers\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    rectangles = []\n    for i in range(1, n+1):\n        rectangles.append(i * (i+1) / 2)\n\n    return rectangles\n\nif __name__ == \"__main__\":\n    print(get_rect(5))",
    "def find_rect(n):\n    return sum(map(lambda x: x**2, range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    print find_rect(5)\n    print find_rect(10)\n    print find_rect(15)",
    "import time\nimport math\n\nstart = time.time()\n\ndef get_nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    rectangle = 1\n    for i in range(1, n):\n        rectangle *= i\n    return rectangle\n\n\nif __name__ == '__main__':\n    print(get_nth_rectangle(10))\n    print(time.time() - start)",
    "import math\n\ndef nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    rectangle_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        rectangle_sums[i] = rectangle_sums[i - 1] + i\n    return rectangle_sums[n]\n\nif __name__ == '__main__':\n    print(nth_rectangle(5))",
    "def find_nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_rectangle(n)\n\ndef nth_rectangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # This is the brute force method.\n    # The problem is that the number of rectangle is\n    # given by n-1.\n    # The idea is to use the following formula\n    # to solve this problem:\n    #   nth_rectangle(n) = (n-1) * (n-1) / 2\n    return (n-1) * (n-1) / 2\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) >= 2:\n        test_case = int(sys.argv[1])\n        assert 1 <= test_case <= 100\n        print(\"Case #{}: {}\".format(test_case, find_nth_rectangle(test_case)))\n    else:\n        print(\"Please enter a test case:\")\n        print(\"Enter 1 to test the brute force method.\")\n        print(\"Enter 2 to test the recursive method.\")\n        print(\"Enter 3 to test the dynamic programming method.\")\n        print(\"Enter 4 to test the dynamic programming method (with memoization).\")\n        print(\"Enter any other number to exit.\")\n        test_case = int(input())\n        if test_case == 1:\n            print(\"nth_rectangle(1) = {}\".format(find_nth_rectangle(1)))\n        elif test_case == 2:\n            print(\"nth_rectangle(2) = {}\".format(find_nth_rectangle(2)))\n        elif test_case == 3:\n            print(\"nth_rectangle(3) = {}\".format(find_nth_rectangle(3)))\n        elif test_case == 4:\n            print(\"nth_rectangle(4) = {}\".format(find_nth_rectangle(4)))\n        else:\n            print(\"No test case #{}\".format(test_case))\n            exit(",
    "import math\n\ndef find_rectangular(n):\n    \"\"\"\n    n - number of rectangular numbers\n    return the n-th rectangular number\n    \"\"\"\n    \n    return math.floor(math.sqrt(n))\n\nif __name__ == \"__main__\":\n    print(find_rectangular(11))\n    print(find_rectangular(13))\n    print(find_rectangular(17))\n    print(find_rectangular(23))\n    print(find_rectangular(29))\n    print(find_rectangular(31))\n    print(find_rectangular(37))\n    print(find_rectangular(43))",
    "import math\n\n\ndef get_nth_rectangle(n):\n    return math.floor(math.sqrt(n))\n\n\ndef main():\n    print(get_nth_rectangle(15))\n\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a Rectangle\nclass Rectangle(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __repr__(self):\n        return str(self.a) +'' + str(self.b) +'' + str(self.c)\n\nclass Solution(object):\n    def solve(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.countRectangle(n)\n\n    def countRectangle(self, n):\n        # base case\n        if n == 0:\n            return 0\n        # recursive case\n        return self.countRectangle(n - 1) + self.countRectangle(n - 2)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.solve(5)\n    print s.solve(6)\n    print s.solve(7)\n    print s.solve(8)\n    print s.solve(9)\n    print s.solve(10)\n    print s.solve(11)\n    print s.solve(12)\n    print s.solve(13)\n    print s.solve(14)\n    print s.solve(15)\n    print s.solve(16)\n    print s.solve(17)\n    print s.solve(18)\n    print s.solve(19)\n    print s.solve(20)\n    print s.solve(21)\n    print s.solve(22)\n    print s.solve(23)\n    print s.solve(24)\n    print s.solve(25)\n    print s.solve(26)\n    print s.solve(27)\n    print s.solve(28)\n    print s.solve(29)\n    print s.solve(30)",
    "def get_nth_rectangular(n, x, y):\n    \"\"\"\n    For example, if n = 3 and x = 5 and y = 3, the function should return 10.\n    \"\"\"\n    return x * (y + 1) * (y + 2) / 2\n\nclass Solution:\n    def get_nth_rectangular(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        # TODO: write your code here\n        return x * (y + 1) * (y + 2) / 2"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}