{
  "problem": {
    "task_id": "MBPP/52",
    "prompt": "Write a function to caluclate area of a parallelogram.",
    "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
    "test_list": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ],
    "challenge_test_list": [],
    "problem_id": 41
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Definition for a Point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"(%d, %d, %d)\" % (self.a, self.b, self.c)\n\n\nclass Solution:\n    # @param p1, p2, p3, p4 Point\n    # @return an integer\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        return (p1.a * (p3.c - p4.c) + p2.a * (p4.b - p3.b) + p3.b * (p1.c - p2.c)) / 2\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.calculate(Point(2, 3, 4), Point(2, 4, 6), Point(3, 3, 3), Point(3, 5, 2))\n    print sol.calculate(Point(2, 3, 4), Point(2, 4, 6), Point(3, 3, 3), Point(3, 5, 2))\n    print sol.calculate(Point(2, 3, 4), Point(2, 4, 6), Point(3, 3, 3), Point(3, 5, 2))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def calculate(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        m = len(points)\n        if m == 1:\n            return points[0].x * points[0].y\n\n        if m == 2:\n            return points[0].x * points[1].y - points[1].x * points[0].y\n\n        if m == 3:\n            return (points[0].x - points[1].x) * (points[2].y - points[1].y) + \\\n                   (points[1].x - points[2].x) * (points[0].y - points[2].y)\n\n        # p1 = points[0]\n        # p2 = points[1]\n        # p3 = points[2]\n        # p4 = points[3]\n        # p5 = points[4]\n        # p6 = points[5]\n\n        # A = p1.x * p2.y - p2.x * p1.y\n        # B = p2.x * p3.y - p3.x * p2.y\n        # C = p3.x * p4.y - p4.x * p3.y\n        # D = p4.x * p5.y - p5.x * p4.y\n        # E = p5.x * p6.y - p6.x * p5.y\n        # F = p6.x * p1.y - p1.x * p6.y\n        # G = p1.x * p2.y - p2.x * p1.y\n        # H = p2.x * p3.y - p3.x * p2.y\n        # I = p3.x * p4.y - p",
    "#!/usr/bin/env python\n\n# https://www.geeksforgeeks.org/area-of-parallelogram/\n\ndef area_of_parallelogram(a, b, c, d):\n    return (a * b) + (a * c) + (b * d)\n\ndef main():\n    a, b, c, d = map(int, raw_input().split())\n    print area_of_parallelogram(a, b, c, d)\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef area_parallelogram(a, b, c):\n    return sqrt(a * b) + sqrt(b * c)\n\n\nif __name__ == '__main__':\n    print(area_parallelogram(4, 5, 3))\n    print(area_parallelogram(4, 5, 7))\n    print(area_parallelogram(4, 5, 6))",
    "def area(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram.\n\n    Input:\n    a, b, c, d - the coordinates of a point.\n    Output:\n    area - the area of the parallelogram.\n    \"\"\"\n    x1 = a\n    y1 = b\n    x2 = c\n    y2 = d\n    x3 = x1 + x2\n    y3 = y1 + y2\n    return abs(x3*y2 - x2*y3)\n\nif __name__ == '__main__':\n    print(area(1, 2, 3, 4))",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    # @param A, a list of points\n    # @return an integer\n    def calculate(self, A):\n        if len(A) == 0:\n            return 0\n\n        if len(A) == 1:\n            return A[0].x * A[0].y\n\n        if len(A) == 2:\n            return A[0].x * A[1].y - A[1].x * A[0].y\n        \n        if len(A) == 3:\n            return (A[0].x - A[1].x) * (A[1].y - A[2].y) + (A[2].x - A[1].x) * (A[0].y - A[2].y)\n        \n        if len(A) == 4:\n            return (A[0].x - A[1].x) * (A[1].y - A[2].y) + (A[2].x - A[1].x) * (A[0].y - A[3].y) + (A[3].x - A[2].x) * (A[1].y - A[3].y)\n        \n        # Base case\n        if len(A) == 5:\n            return (A[0].x - A[1].x) * (A[1].y - A[2].y) + (A[2].x - A[1].x) * (A[0].y - A[3].y) + (A[3].x - A[2].x) * (A[1].y - A[4].y) + (A[4].x - A[3].x) * (A[2].y - A[4].y)\n        \n        return 0",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def calculate(self, p, q, r):\n        \"\"\"\n        :type p: Point\n        :type q: Point\n        :type r: Point\n        :rtype: float\n        \"\"\"\n        return abs(p.x - q.x) * abs(p.y - r.y) + abs(p.x - r.x) * abs(q.y - p.y)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({0},{1})'.format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash(self.x) ^ hash(self.y)\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n\n    def __div__(self, other):\n        return Point(self.x / other, self.y / other)\n\n    def __str__(self):\n        return '({0},{1})'.format(self.x, self.y)\n\n\nclass Solution(object):\n    def calArea(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: float\n        \"\"\"\n        a = p2.x - p1.x\n        b = p2.y - p1.y\n        c = p3.x - p1.x\n        d = p3.y - p1.y\n        e = p4.x - p1.x\n        f = p4.y - p1.y\n\n        s = (a * d - b * c)\n        if s == 0:\n            return 0\n        t = (a * f - b * e)\n        if t == 0:\n            return 0\n        return 0.5 * (s + t) / 2\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n#",
    "def area(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    print(area(3, 4, 1))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def calculate(self, p1, p2, p3):\n        \"\"\"\n        :param p1: tuple, (x1, y1)\n        :param p2: tuple, (x2, y2)\n        :param p3: tuple, (x3, y3)\n        :return: float, area\n        \"\"\"\n        return (p2[0] - p1[0]) * (p3[1] - p1[1]) + (p3[0] - p1[0]) * (p1[1] - p2[1])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    # s.calculate((1, 2), (3, 4), (5, 6))\n    # s.calculate((1, 2), (2, 3), (3, 4))\n    # s.calculate((1, 2), (2, 3), (2, 4))\n    # s.calculate((1, 2), (2, 3), (2, 3))\n    s.calculate((1, 2), (2, 3), (2, 4))\n    print s.area",
    "class Solution:\n    # @param l1, l2, r1, r2: the coordinates of the vertices of a rectangle\n    # @return an integer\n    def calculate(self, l1, l2, r1, r2):\n        \"\"\"\n        :type l1: int\n        :type l2: int\n        :type r1: int\n        :type r2: int\n        :rtype: int\n        \"\"\"\n        # calculate the area of a parallelogram\n        return abs(l1 - l2) * abs(r1 - r2)\n\n\nif __name__ == \"__main__\":\n    assert Solution().calculate(1, 2, 3, 4) == 6",
    "def area_of_parallelogram(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: float\n    \"\"\"\n    if height > width:\n        return height * width\n    else:\n        return height * width / 2\n\ndef test():\n    assert area_of_parallelogram(1, 2) == 3\n    assert area_of_parallelogram(2, 1) == 3\n    assert area_of_parallelogram(3, 2) == 6\n    assert area_of_parallelogram(4, 3) == 12\n\nif __name__ == '__main__':\n    test()",
    "class Solution:\n    # @param side1, a list of integers\n    # @param side2, a list of integers\n    # @return an integer\n    def calculate(self, side1, side2):\n        if not side1 or not side2:\n            return 0\n        a1, a2 = side1[0], side1[-1]\n        b1, b2 = side2[0], side2[-1]\n        if a1 > b1 or b1 > a2 or a2 > b2 or b2 > a1:\n            return 0\n        c = a1 + b1\n        d = b1 + a2\n        e = a2 + b2\n        f = b2 + a1\n        return (c * d - b1 * a2 - a1 * b2) * (e - f) - (a1 * b2 - a2 * b1) * (c - d)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.calculate([2, 4, 3], [3, 5, 1]))\n    print(sol.calculate([-1, 2, -3], [1, -3, -1]))",
    "from math import sqrt\n\ndef area(a, b, c, d):\n    area = sqrt( (a * d) + (b * c) )\n    return area\n\nif __name__ == \"__main__\":\n    print(area(1, 2, 3, 4))",
    "#!/usr/bin/env python\n\nclass Parallelogram:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n    def area(self):\n        return abs(self.x1 * self.y2 - self.x2 * self.y1) / 2.0\n\n\ndef main():\n    test = Parallelogram(1, 1, 3, 4)\n    print(\"test = \" + str(test))\n    print(\"area = \" + str(test.area()))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def calculate(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        p1, p2, p3 = points[0], points[1], points[2]\n        a, b, c = p1.x - p2.x, p2.y - p1.y, p3.x - p2.x\n        return abs(a * p2.y + b * p3.y + c * p1.y) / 2",
    "import math\n\ndef area_paral(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram.\n\n    :param a: The first point of the parallelogram.\n    :param b: The second point of the parallelogram.\n    :param c: The third point of the parallelogram.\n    :param d: The fourth point of the parallelogram.\n    :return: The area of the parallelogram.\n    \"\"\"\n    a = a[0]\n    b = b[0]\n    c = c[0]\n    d = d[0]\n\n    # First and second point\n    area = math.fabs(a*(b+c) - b*(a+c) - c*(a+b))/2\n\n    # Third and fourth point\n    area = area + math.fabs(c*(d+a) - d*(c+a) - a*(c+d))/2\n\n    # Calculate area\n    return area\n\ndef area_paral_2(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram.\n\n    :param a: The first point of the parallelogram.\n    :param b: The second point of the parallelogram.\n    :param c: The third point of the parallelogram.\n    :param d: The fourth point of the parallelogram.\n    :return: The area of the parallelogram.\n    \"\"\"\n    a = a[0]\n    b = b[0]\n    c = c[0]\n    d = d[0]\n\n    # Calculate area\n    area = math.fabs(a*(b+c) - b*(a+c) - c*(a+b))/2\n\n    # Calculate area\n    area = area + math.fabs(c*(d+a) - d*(c+a) - a*(c+d))/2\n\n    # Calculate area\n    area = area + math.fabs(d*(a+b) - a*(d+b) - b*(a+d))/2\n\n    return area\n\nif __name__ ==",
    "import math\n\ndef area(x, y):\n    return math.sqrt(x ** 2 + y ** 2)\n\nif __name__ == '__main__':\n    assert area(2, 3) == 4, 'area of a parallelogram is 4'\n    assert area(1, 2) == 2, 'area of a parallelogram is 2'\n    assert area(2, 1) == 2, 'area of a parallelogram is 2'\n    assert area(1, 1) == 1, 'area of a parallelogram is 1'",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Rectangle:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\nclass Area:\n    def __init__(self, p1, p2, p3, p4):\n        self.p1 = p1\n        self.p2 = p2\n        self.p3 = p3\n        self.p4 = p4\n\n    def get_area(self):\n        if self.p1.x!= self.p2.x and self.p1.y!= self.p2.y:\n            # if points are not in same line\n            # calculate the area of the parallelogram\n            return abs((self.p2.x - self.p1.x) * (self.p3.y - self.p1.y) - (self.p2.y - self.p1.y) * (self.p3.x - self.p1.x)) / 2\n        else:\n            # if points are in same line\n            # calculate the area of the rectangle\n            return abs(self.p3.x - self.p1.x) * abs(self.p3.y - self.p1.y)\n\n\nclass Solution:\n    def area(self, rect):\n        \"\"\"\n        :type rect: Rectangle\n        :rtype: float\n        \"\"\"\n        if rect.x1 == rect.x2 and rect.y1 == rect.y2:\n            return 0\n        if rect.x1 == rect.x2:\n            if rect.y1 > rect.y2:\n                return rect.y2 - rect.y1\n            else:\n                return rect.y1 - rect.y2\n        if rect.y1 == rect.y2:\n            if rect.x1 > rect.x2:\n                return rect.x2 - rect.x1\n            else:\n                return rect.x1 - rect.",
    "def area(x, y, width, height):\n    \"\"\"\n    :param x:\n    :param y:\n    :param width:\n    :param height:\n    :return:\n    \"\"\"\n    return (x * y) + (x * height) + (width * y) + (width * height)\n\nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    width = int(input())\n    height = int(input())\n    print(area(x, y, width, height))",
    "class Solution(object):\n    def calcArea(self, p, q, r, s):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :type r: int\n        :type s: int\n        :rtype: float\n        \"\"\"\n        return (p*q + r*s - p*s - q*r) / 2.0\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.calcArea(1,2,3,4)\n    print sol.calcArea(4,3,2,1)\n    print sol.calcArea(5,4,3,2)\n    print sol.calcArea(1,3,2,4)\n    print sol.calcArea(1,4,2,3)\n    print sol.calcArea(1,2,4,3)",
    "def area(a,b,c,d):\n    return a*b + b*c + c*d + d*a\n\ndef cal_area(a,b,c,d):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return area(c,d,b,b)\n    if b == 0:\n        return area(a,c,a,a)\n    if c == 0:\n        return area(a,b,d,d)\n    if d == 0:\n        return area(a,b,b,c)\n    return area(a,b,c,d)\n\nif __name__ == '__main__':\n    a = int(input(\"Enter first side:\"))\n    b = int(input(\"Enter second side:\"))\n    c = int(input(\"Enter third side:\"))\n    d = int(input(\"Enter fourth side:\"))\n    print(cal_area(a,b,c,d))",
    "def cal_area(x, y):\n    \"\"\"\n    Input:\n        x, y: two integers representing the lengths of the sides of the parallelogram\n    Output:\n        area: the area of the parallelogram\n    \"\"\"\n    x = float(x)\n    y = float(y)\n    area = x * y / 2\n    return area\n\n\ndef test_cal_area():\n    assert cal_area(1, 1) == 1.0\n    assert cal_area(2, 2) == 4.0\n    assert cal_area(3, 4) == 9.0\n    assert cal_area(1, 4) == 4.0\n    assert cal_area(3, 2) == 3.0\n    assert cal_area(4, 1) == 1.0\n    assert cal_area(4, 3) == 9.0\n\nif __name__ == '__main__':\n    test_cal_area()",
    "class Solution(object):\n    def calculate(self, A, B, C, D):\n        \"\"\"\n        :type A: float\n        :type B: float\n        :type C: float\n        :type D: float\n        :rtype: float\n        \"\"\"\n        ab = A*B\n        cd = C*D\n        return ab + cd - A*D - C*B\n\nif __name__ == \"__main__\":\n    assert Solution().calculate(1, 2, 3, 4) == 2.0\n    assert Solution().calculate(1, 3, 2, 4) == 4.0\n    assert Solution().calculate(3, 1, 2, 4) == 4.0\n    assert Solution().calculate(3, 1, 2, 3) == 9.0\n    assert Solution().calculate(1, 2, 3, 4) == 2.0",
    "class Solution(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.area = 0\n        self.x1, self.y1, self.x2, self.y2 = 0, 0, 0, 0\n\n    def addPoint(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        \"\"\"\n        self.x1 = min(self.x1, x)\n        self.y1 = min(self.y1, y)\n        self.x2 = max(self.x2, x)\n        self.y2 = max(self.y2, y)\n\n    def area(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        self.area = abs(self.x1 - self.x2) * abs(self.y2 - self.y1)\n        return self.area\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# obj.addPoint(1,1)\n# obj.addPoint(4,4)\n# param_2 = obj.area()",
    "def calculate_area(height, width):\n    \"\"\"\n    :param height: Height of the parallelogram\n    :param width: Width of the parallelogram\n    :return: Area of the parallelogram\n    \"\"\"\n    if height < 0 or width < 0:\n        raise ValueError(\"Height and width can't be negative\")\n\n    if height == 0 or width == 0:\n        raise ValueError(\"Height and width can't be zero\")\n\n    return height * width / 2.0\n\n\nif __name__ == '__main__':\n    print(calculate_area(1, 2))\n    print(calculate_area(2, 3))\n    print(calculate_area(3, 4))\n    print(calculate_area(4, 5))\n    print(calculate_area(5, 6))\n    print(calculate_area(6, 7))\n    print(calculate_area(7, 8))\n    print(calculate_area(8, 9))\n    print(calculate_area(9, 10))\n    print(calculate_area(10, 11))\n    print(calculate_area(11, 12))\n    print(calculate_area(12, 13))\n    print(calculate_area(13, 14))\n    print(calculate_area(14, 15))\n    print(calculate_area(15, 16))\n    print(calculate_area(16, 17))\n    print(calculate_area(17, 18))\n    print(calculate_area(18, 19))\n    print(calculate_area(19, 20))\n    print(calculate_area(20, 21))\n    print(calculate_area(21, 22))\n    print(calculate_area(22, 23))\n    print(calculate_area(23, 24))\n    print(calculate_area(24, 25))\n    print(calculate_area(25, 26))\n    print(calculate_area(26, 27))\n    print(calculate_area(27, 28))\n    print(calculate_area(28",
    "def get_area(a, b, c):\n    \"\"\"\n    a: two numbers, side1 and side2\n    b: two numbers, side3 and side4\n    c: two numbers, side5 and side6\n    \"\"\"\n    return a * b + c * (b + c) / 2.0\n\nif __name__ == '__main__':\n    print get_area(1, 2, 3)\n    print get_area(1, 2, 3.5)\n    print get_area(2, 3, 4)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def calculate(self, A, B, C, D):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :rtype: float\n        \"\"\"\n        return abs(A * C + B * D - B * C - A * D) / 2\n\n\nif __name__ == \"__main__\":\n    print Solution().calculate(1, 2, 3, 4)",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def area(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: float\n        \"\"\"\n        dx1 = p1.x - p2.x\n        dy1 = p1.y - p2.y\n        dx2 = p3.x - p4.x\n        dy2 = p3.y - p4.y\n        return abs(dx1 * dy2 - dx2 * dy1) / 2",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        return (p1.x - p2.x) * (p3.y - p4.y) - (p2.y - p3.y) * (p1.x - p4.x)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    p3 = Point(5, 6)\n    p4 = Point(7, 8)\n    print(sol.calculate(p1, p2, p3, p4))",
    "class Solution:\n    # @param a, a is an array of x coordinates\n    # @param b, b is an array of y coordinates\n    # @return an integer\n    def area(self, a, b):\n        if len(a)!= len(b):\n            return 0\n        if len(a) == 1 or len(b) == 1:\n            return 0\n        return abs(a[0] - b[0]) * abs(a[1] - b[1])\n\n    # @param a, a is an array of x coordinates\n    # @param b, b is an array of y coordinates\n    # @return an integer\n    def area2(self, a, b):\n        if len(a)!= len(b):\n            return 0\n        if len(a) == 1 or len(b) == 1:\n            return 0\n        return (a[0] - b[0]) * (a[1] - b[1])\n\nif __name__ == '__main__':\n    s = Solution()\n    a = [0, 1]\n    b = [1, 0]\n    print s.area(a, b)\n    a = [1, 2]\n    b = [2, 1]\n    print s.area(a, b)",
    "import math\n\ndef area_parallelogram(side_a, side_b, side_c):\n    \"\"\"\n    :type side_a: int\n    :type side_b: int\n    :type side_c: int\n    :rtype: int\n    \"\"\"\n    return side_a * side_b * side_c\n\nif __name__ == \"__main__\":\n    assert area_parallelogram(4, 5, 6) == 50\n    assert area_parallelogram(5, 6, 7) == 50\n    assert area_parallelogram(7, 6, 5) == 50\n    assert area_parallelogram(6, 7, 5) == 50",
    "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return 'Point({},{},{})'.format(self.a, self.b, self.c)\n\n    def __repr__(self):\n        return str(self)\n\nclass Solution:\n    def area(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: float\n        \"\"\"\n        a = (p2.a - p1.a) * (p3.c - p1.c) - (p3.b - p1.b) * (p2.c - p1.c)\n        b = (p3.a - p1.a) * (p4.c - p1.c) - (p4.b - p1.b) * (p3.c - p1.c)\n        c = (p4.a - p1.a) * (p1.b - p2.b) - (p1.a - p2.a) * (p4.b - p2.b)\n        return abs(a + b + c) / 2\n\nif __name__ == '__main__':\n    p1 = Point(1,2,3)\n    p2 = Point(2,3,4)\n    p3 = Point(3,4,5)\n    p4 = Point(4,5,6)\n    print Solution().area(p1, p2, p3, p4)",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    # @param p1, p2, p3, p4, point\n    # @return an integer\n    def calculate(self, p1, p2, p3, p4, point):\n        area = (p2.x - p1.x) * (p3.y - p4.y) - (p3.x - p4.x) * (p2.y - p1.y)\n        return abs(area) / 2\n\nif __name__ == '__main__':\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    p4 = Point(4, 4)\n    point = Point(5, 5)\n    print Solution().calculate(p1, p2, p3, p4, point)",
    "class Solution(object):\n    def calcArea(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: float\n        \"\"\"\n        if height == 0 or width == 0:\n            return 0\n        if height == 1 or width == 1:\n            return height * width\n        return height * width - self.calcArea(height - 1, width - 1)",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Rectangle:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def area(self):\n        return self.a * self.b\n\ndef main():\n    rect = Rectangle(5, 10)\n    print(rect.area())\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def areaOfParallelogram(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 2:\n            return Point(points[0].x - points[1].x, points[0].y - points[1].y).length()\n        else:\n            return sum([self.areaOfParallelogram(points[i:i + 2]) for i in range(0, len(points) - 1)])\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.areaOfParallelogram(points)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({},{})'.format(self.x, self.y)\n\n\nclass Solution(object):\n    def calcArea(self, P, Q, R, S):\n        \"\"\"\n        :type P: Point\n        :type Q: Point\n        :type R: Point\n        :type S: Point\n        :rtype: float\n        \"\"\"\n        if P.x == Q.x and P.y == Q.y and P.x == R.x and P.y == R.y and P.x == S.x and P.y == S.y:\n            return 0\n        a = (P.x - Q.x) * (P.y - S.y)\n        b = (P.x - R.x) * (P.y - S.y)\n        c = (P.x - R.x) * (P.y - Q.y)\n        d = (P.x - Q.x) * (P.y - R.y)\n        return a + b + c + d",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Parallelogram:\n    def __init__(self, p1, p2, p3):\n        self.p1 = p1\n        self.p2 = p2\n        self.p3 = p3\n\n    def area(self):\n        '''\n        Calculate the area of the parallelogram.\n        '''\n        a = (self.p2.x - self.p1.x) * (self.p3.y - self.p1.y) \\\n            - (self.p3.x - self.p1.x) * (self.p2.y - self.p1.y)\n        b = (self.p2.x - self.p1.x) * (self.p3.y - self.p2.y) \\\n            - (self.p3.x - self.p2.x) * (self.p2.y - self.p1.y)\n        return a + b\n\ndef main():\n    p1 = Point(0, 0)\n    p2 = Point(0, 1)\n    p3 = Point(1, 1)\n    p4 = Point(1, 0)\n    p5 = Point(1, 2)\n    p6 = Point(2, 2)\n    p7 = Point(2, 1)\n    p8 = Point(2, 0)\n    p9 = Point(2, -1)\n    p10 = Point(2, -2)\n    p11 = Point(0, -1)\n    p12 = Point(0, -2)\n    p13 = Point(-1, -2)\n    p14 = Point(-2, -2)\n    p15 = Point(-2, -1)\n    p16 = Point(-2, 0)\n    p17 = Point(-2, 1)\n    p18 = Point(-2, 2)\n    p19 = Point(-1, 2)\n    p20 = Point(0, 2)\n    p21 = Point(1, 2)\n    p22 = Point(2, 2)",
    "def get_area(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(get_area(a, b, c))",
    "class Solution(object):\n    def calculate(self, args):\n        \"\"\"\n        :type args: List[int]\n        :rtype: int\n        \"\"\"\n        if len(args)!= 3:\n            return 0\n        x1, y1, x2, y2 = args\n        return abs(x1*y2 + x2*y1 - x1*y2 - x2*y1)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.calculate([0, 0, 10, 10]) == 100\n    assert sol.calculate([0, 0, 10, 0]) == 0\n    assert sol.calculate([0, 0, 0, 10]) == 0",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def calculate(self, p, q, r):\n        \"\"\"\n        :type p: Point\n        :type q: Point\n        :type r: Point\n        :rtype: float\n        \"\"\"\n        a = p.x - q.x\n        b = p.y - q.y\n        c = r.x - p.x\n        d = r.y - p.y\n        return a*d - b*c\n\ndef main():\n    s = Solution()\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    print s.calculate(p1, p2, p3)\n    p4 = Point(4, 4)\n    p5 = Point(5, 5)\n    p6 = Point(6, 6)\n    print s.calculate(p4, p5, p6)\n    p7 = Point(7, 7)\n    p8 = Point(8, 8)\n    p9 = Point(9, 9)\n    print s.calculate(p7, p8, p9)\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\nclass Area:\n    def __init__(self):\n        self.a = 0\n        self.b = 0\n        self.c = 0\n        self.area = 0\n\n    def __repr__(self):\n        return self.area\n\n    def area_of_parallelogram(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.area = self.a * self.b + self.b * self.c + self.c * self.a\n        return self.area\n\n\ndef main():\n    a = Area()\n    a.area_of_parallelogram(1, 2, 3)\n    print(a)\n    a.area_of_parallelogram(1, 2, 4)\n    print(a)\n    a.area_of_parallelogram(2, 1, 3)\n    print(a)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef area_parallelogram(a, b, c, d):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :type d: float\n    :rtype: float\n    \"\"\"\n    return abs(a*d - b*c) / 2\n\ndef test_area_parallelogram():\n    assert area_parallelogram(1, 2, 3, 4) == 0.5\n    assert area_parallelogram(2, 4, 6, 8) == 1.0\n\nif __name__ == '__main__':\n    test_area_parallelogram()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def calculate(self, p):\n        \"\"\"\n        main solution\n        :param p: tuple(x1, y1, x2, y2)\n        :return: float\n        \"\"\"\n        x1, y1, x2, y2 = p\n        if x2 <= x1 or y2 <= y1:\n            return 0\n        return x1 * y2 - x2 * y1\n\n\nif __name__ == \"__main__\":\n    Solution().calculate((1, 1, 2, 2))",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def calculate(self, P, Q, R):\n        \"\"\"\n        :type P: Point\n        :type Q: Point\n        :type R: Point\n        :rtype: int\n        \"\"\"\n        x1, y1 = P.x, P.y\n        x2, y2 = Q.x, Q.y\n        x3, y3 = R.x, R.y\n        a = (y2 - y1)\n        b = (x3 - x1)\n        c = (y3 - y1) - (x3 - x1)\n        return abs(a * x2 + b * y2 + c) / 2\n\nif __name__ == '__main__':\n    P = Point(0, 1)\n    Q = Point(1, 0)\n    R = Point(0, 2)\n    print Solution().calculate(P, Q, R)\n    P = Point(-1, 1)\n    Q = Point(-1, 0)\n    R = Point(1, 1)\n    print Solution().calculate(P, Q, R)",
    "class Solution(object):\n    def calculate(self, A, B, C, D):\n        \"\"\"\n        :type A: float\n        :type B: float\n        :type C: float\n        :type D: float\n        :rtype: float\n        \"\"\"\n        return (A + B + C) / 2 * (D - C) + (B + C + D) / 2 * (A - B)\n\n\nif __name__ == \"__main__\":\n    assert Solution().calculate(2, 4, 3, 1) == 4\n    assert Solution().calculate(1, 1, 1, 1) == 1",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Rectangle:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n    def area(self):\n        return abs(self.x1 * self.y2 - self.x2 * self.y1)\n\nclass Perimeter:\n    def __init__(self, p):\n        self.p = p\n        self.area = 0\n\n    def area(self):\n        return self.p.area()\n\ndef area_of_parallelogram(p1, p2, p3, p4):\n    \"\"\"\n    :param p1: Point\n    :param p2: Point\n    :param p3: Point\n    :param p4: Point\n    :return: float\n    \"\"\"\n    return p1.x * p2.y + p2.x * p3.y + p3.x * p4.y + p4.x * p1.y - p1.x * p3.y - p2.x * p4.y - p3.x * p1.y\n\ndef area_of_rectangle(x1, y1, x2, y2):\n    \"\"\"\n    :param x1: int\n    :param y1: int\n    :param x2: int\n    :param y2: int\n    :return: float\n    \"\"\"\n    return abs(x1 * y2 - x2 * y1)\n\ndef area_of_square(x, y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: float\n    \"\"\"\n    return x * y\n\ndef area_of_triangle(p1, p2, p3):\n    \"\"\"\n    :param p1: Point\n    :param p2: Point\n    :param p3: Point\n    :return: float\n    \"\"\"\n    return abs(p1.x * (p2.y - p",
    "# Definition for a point.\n# class Point(object):\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n#\n#     def __str__(self):\n#         return \"(%s, %s)\" % (self.x, self.y)\n#\n# class Solution(object):\n#     def calculate(self, p, q, r):\n#         \"\"\"\n#         :type p: Point\n#         :type q: Point\n#         :type r: Point\n#         :rtype: float\n#         \"\"\"\n#         return abs(p.x - q.x) * abs(p.y - r.y) + abs(p.y - r.y) * abs(q.x - p.x)\n\nclass Solution(object):\n    def calculate(self, p, q, r):\n        \"\"\"\n        :type p: Point\n        :type q: Point\n        :type r: Point\n        :rtype: float\n        \"\"\"\n        x1, y1 = p.x, p.y\n        x2, y2 = q.x, q.y\n        x3, y3 = r.x, r.y\n        x4, y4 = (x2 - x1) / 2.0 + x1, (y2 - y1) / 2.0 + y1\n        x5, y5 = (x3 - x1) / 2.0 + x1, (y3 - y1) / 2.0 + y1\n        x6, y6 = (x3 - x2) / 2.0 + x2, (y3 - y2) / 2.0 + y2\n        x7, y7 = (x4 - x1) / 2.0 + x1, (y4 - y1) / 2.0 + y1\n        x8, y8 = (x4 - x2) / 2.0 + x2, (y4 - y2) / 2.0 + y2\n        x9, y9 = (x5 - x3) / 2.0 + x3, (y5 - y3) / 2.0 + y3\n        x10",
    "class Point:\n    \"\"\"A point in a plane\"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash(self.x) + hash(self.y)\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n\n    def __div__(self, other):\n        return Point(self.x / other, self.y / other)\n\n    def __neg__(self):\n        return Point(-self.x, -self.y)\n\ndef area_of_parallelogram(p1, p2, p3):\n    \"\"\"Calculate the area of a parallelogram defined by three points\"\"\"\n    return abs((p1 - p2).cross(p2 - p3)) / 2\n\ndef main():\n    p1 = Point(1, 1)\n    p2 = Point(4, 2)\n    p3 = Point(1, 4)\n    print(\"The area of the parallelogram is {}\".format(area_of_parallelogram(p1, p2, p3)))\n\nif __name__ == '__main__':\n    main()",
    "def area(a, b, c):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n    return a*b + b*c + c*a\n\nif __name__ == \"__main__\":\n    assert area(5, 4, 3) == 10\n    assert area(4, 5, 6) == 30\n    assert area(3, 4, 6) == 30\n    assert area(2, 5, 4) == 20\n    assert area(5, 4, 2) == 20\n    assert area(4, 5, 2) == 20\n    assert area(2, 4, 5) == 20\n    assert area(5, 2, 4) == 20\n    assert area(4, 2, 5) == 20\n    assert area(2, 5, 4) == 20\n    assert area(5, 2, 4) == 20\n    assert area(4, 2, 5) == 20",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef area_of_parallelogram(p1, p2, p3):\n    \"\"\"\n    :param p1: First point of the parallelogram\n    :param p2: Second point of the parallelogram\n    :param p3: Third point of the parallelogram\n    :return: Area of the parallelogram\n    \"\"\"\n    a = p1.x * p2.y - p2.x * p1.y\n    b = p2.x * p3.y - p3.x * p2.y\n    c = p3.x * p1.y - p1.x * p3.y\n    return abs(a + b + c) / 2\n\nif __name__ == '__main__':\n    p1 = Point(1, 1)\n    p2 = Point(2, 1)\n    p3 = Point(3, 2)\n    print(area_of_parallelogram(p1, p2, p3))",
    "class Solution:\n    # @param {integer} a, b, c, d\n    # @return {integer}\n    def calculate(self, a, b, c, d):\n        return a * b + c * d\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.calculate(1, 2, 3, 4))\n    print(s.calculate(2, 3, 4, 5))",
    "class Solution:\n    # @param x1, x2, y1, y2, a, b, c, d, e\n    # @return an integer\n    def calculate(self, x1, y1, x2, y2, a, b, c, d, e):\n        x = y = 0\n        x = (a * (y2 - y1)) - (b * (x2 - x1))\n        y = (b * (x1 - x2)) + (c * (y2 - y1))\n        area = x * y\n        return area\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.calculate(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    print s.calculate(1, 2, 3, 4, 5, 6, 7, 8, 9)",
    "def cal_area(a,b,c,d):\n    \"\"\"\n    cal_area(a,b,c,d) -> float\n    \n    Calculate the area of a parallelogram.\n    \"\"\"\n    return (a*b + b*c + c*d + d*a) / 2.0",
    "import math\n\ndef area_of_parallelogram(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram\n    Input: a, b, c, d are four points of a parallelogram.\n    Output: area of the parallelogram.\n    \"\"\"\n    return (a * c) - (b * d)\n\nif __name__ == '__main__':\n    print(area_of_parallelogram(1, 2, 3, 4))",
    "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return 'Point({0}, {1}, {2})'.format(self.a, self.b, self.c)\n\n    def __repr__(self):\n        return str(self)\n\nclass Solution:\n    \"\"\"\n    @param p1, p2, p3: The points of the triangle.\n    @return an integer\n    \"\"\"\n    def triangleArea(self, p1, p2, p3):\n        return abs(p1.a + p2.b + p3.c - p1.b - p2.c - p3.a) / 2.0\n\n    def test(self):\n        p1 = Point(1, 1)\n        p2 = Point(2, 2)\n        p3 = Point(3, 3)\n        p4 = Point(4, 4)\n        p5 = Point(5, 5)\n        p6 = Point(6, 6)\n        print self.triangleArea(p1, p2, p3)\n        print self.triangleArea(p1, p2, p4)\n        print self.triangleArea(p1, p2, p5)\n        print self.triangleArea(p1, p2, p6)\n\nif __name__ == '__main__':\n    Solution().test()",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def calArea(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: float\n        \"\"\"\n        v1 = p2.x - p1.x\n        v2 = p2.y - p1.y\n        v3 = p3.x - p1.x\n        v4 = p3.y - p1.y\n        a = (v1 * v2 + v1 * v3 + v2 * v3) / 2.0\n        b = (v1 * v4 + v2 * v4 + v3 * v4) / 2.0\n        return a * b\n\nif __name__ == '__main__':\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    p3 = Point(5, 6)\n    p4 = Point(7, 8)\n    s = Solution()\n    print s.calArea(p1, p2, p3)\n    print s.calArea(p1, p2, p3)\n    print s.calArea(p1, p2, p3)\n    print s.calArea(p1, p2, p4)\n    print s.calArea(p1, p2, p4)\n    print s.calArea(p1, p2, p4)",
    "def area_of_parallelogram(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a * b) / 2 + (a * c) / 2 + (b * c) / 2\n\ndef test_area_of_parallelogram():\n    assert area_of_parallelogram(3, 4, 5) == 24\n    assert area_of_parallelogram(3, 5, 6) == 9\n    assert area_of_parallelogram(5, 6, 7) == 22\n    assert area_of_parallelogram(7, 5, 6) == 22\n    assert area_of_parallelogram(1, 2, 3) == 0\n    assert area_of_parallelogram(2, 3, 4) == 0\n\nif __name__ == '__main__':\n    test_area_of_parallelogram()",
    "class Solution:\n    # @param {integer[][]} points\n    # @return {integer}\n    def calculate(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return sum(self.calculate_parallelogram(points))\n        \n    def calculate_parallelogram(self, points):\n        x1, y1, x2, y2 = points\n        if x2 < x1:\n            x1, x2 = x2, x1\n        if y2 < y1:\n            y1, y2 = y2, y1\n        return (y2 - y1) * (x2 - x1)",
    "import math\n\ndef area_parallelogram(a, b, c):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    :param a: the first side length of the parallelogram.\n    :param b: the second side length of the parallelogram.\n    :param c: the third side length of the parallelogram.\n    :return: the area of the parallelogram.\n    \"\"\"\n\n    # a*b*c\n    area = a * b * c\n\n    # a*c\n    area += a * c\n\n    # b*c\n    area += b * c\n\n    return area\n\nif __name__ == '__main__':\n    print(area_parallelogram(3, 4, 5))",
    "from math import sqrt\n\n\ndef area(p1, p2, p3, p4):\n    \"\"\"Calculate area of a parallelogram.\n\n    p1, p2, p3, p4: Coordinates of the four points.\n    \"\"\"\n    return sqrt(p1[0] * p2[1] + p2[0] * p3[1] + p3[0] * p4[1] + p4[0] * p1[1])\n\n\nif __name__ == \"__main__\":\n    p1 = [1, 2]\n    p2 = [3, 4]\n    p3 = [5, 6]\n    p4 = [7, 8]\n    print(area(p1, p2, p3, p4))",
    "class Solution:\n    \"\"\"\n    @param points: A list of points\n    @return: The area of the parallelogram\n    \"\"\"\n    def area(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n\n        a = 0\n        b = 0\n        c = 0\n        for i in range(len(points)):\n            a += points[i][0] * points[(i + 1) % len(points)][1]\n            b += points[i][0] * points[(i + 1) % len(points)][0]\n            c += points[(i + 1) % len(points)][0] * points[(i + 1) % len(points)][1]\n\n        return a + b + c",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"({0},{1})\".format(self.x, self.y)\n\nclass Solution(object):\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n        x4, y4 = p4.x, p4.y\n        a = ((x1 * y2) - (x2 * y1))\n        b = ((x2 * y3) - (x3 * y2))\n        c = ((x3 * y4) - (x4 * y3))\n        d = ((x4 * y1) - (x1 * y4))\n        area = abs(a + b + c + d) / 2\n        return area",
    "import math\ndef area_of_parallelogram(p1,p2,p3):\n    x1 = p1[0]\n    x2 = p2[0]\n    x3 = p3[0]\n    y1 = p1[1]\n    y2 = p2[1]\n    y3 = p3[1]\n    a = (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)\n    b = (y2-y1)*(x3-x1)-(y3-y1)*(x2-x1)\n    c = (x1*y2-x2*y1)*(x2*y3-x3*y2)-(x2*y1-x1*y2)*(x3*y1-x1*y3)\n    area = math.sqrt(a*b*c)\n    return area\n\nprint area_of_parallelogram([1,1],[2,2],[3,3])",
    "def area_of_parallelogram(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    return height * width / 2\n\n\nclass Solution(object):\n    def areaOfParallelogram(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: int\n        \"\"\"\n        return height * width / 2",
    "class Solution(object):\n    def calArea(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: float\n        \"\"\"\n        h = height\n        w = width\n        if h == 0 or w == 0:\n            return 0\n        if h < 0 or w < 0:\n            return -1\n        if h == w:\n            return h * h\n        return 2 * h * w / (h + w)",
    "class Solution:\n    # @param x, y, and z two sides of the triangle\n    # @return an integer\n    def calculate(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        if x == 0 or y == 0 or z == 0:\n            return 0\n        return (x * y) + (y * z) + (z * x)\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.calculate(x, y, z)",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Area:\n    def __init__(self):\n        self.area = 0.0\n\nclass AreaCalculator:\n    \"\"\"\n    class AreaCalculator\n    \"\"\"\n    def __init__(self):\n        self.a = 0.0\n        self.b = 0.0\n        self.c = 0.0\n        self.d = 0.0\n        self.e = 0.0\n        self.f = 0.0\n\n    def get_area(self, p1, p2, p3):\n        self.a = p1.x - p2.x\n        self.b = p2.y - p1.y\n        self.c = p3.x - p1.x\n        self.d = p3.y - p1.y\n\n    def get_area_of_a_b_c_d(self, a, b, c, d):\n        self.area = a*b - self.a*d - self.b*c + self.c*d\n\n    def get_area_of_a_b_c_d_e_f(self, a, b, c, d, e, f):\n        self.area = a*b - self.a*f - self.b*e + self.c*d - self.d*c + self.e*b\n\n    def get_area_of_a_b_c_d_e_f_g_h(self, a, b, c, d, e, f, g, h):\n        self.area = a*b - self.a*f - self.b*e + self.c*d - self.d*c + self.e*b - self.f*g - self.g*h + self.h*f\n\n    def get_area_of_a_b_c_d_e_f_g_h_i_j_k_l(self, a, b, c, d, e, f, g, h, i, j, k, l):\n        self.area = a*b",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def calculate(self, p, s):\n        \"\"\"\n        :param p: tuple (x1, y1, x2, y2)\n        :param s: tuple (x, y)\n        :return: float\n        \"\"\"\n        return abs(p[0] - s[0]) * abs(p[2] - s[1]) + abs(p[1] - s[0]) * abs(p[3] - s[1])\n\n\nif __name__ == \"__main__\":\n    Solution().calculate((1, 2, 3, 4), (1, 1))\n    Solution().calculate((1, 2, 3, 4), (1, 5))\n    Solution().calculate((1, 2, 3, 4), (1, -1))",
    "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Rectangle:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\ndef area(a):\n    if isinstance(a, Point):\n        return Point.area(a)\n    elif isinstance(a, Rectangle):\n        return Rectangle.area(a)\n    else:\n        raise TypeError\n\ndef area_parallelogram(a):\n    if isinstance(a, Point):\n        return Point.area_parallelogram(a)\n    elif isinstance(a, Rectangle):\n        return Rectangle.area_parallelogram(a)\n    else:\n        raise TypeError\n\nclass Solution:\n    def area(self, a):\n        return a.x1 * a.y2 - a.x2 * a.y1\n\n    def area_parallelogram(self, a):\n        return a.x1 * a.y2 - a.x2 * a.y1 + a.x2 * a.y1 - a.x1 * a.y2\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.area(Point(1, 1))\n    print s.area_parallelogram(Point(1, 1))\n    print s.area_parallelogram(Rectangle(1, 1, 2, 2))\n    print s.area_parallelogram(Rectangle(1, 1, 3, 4))",
    "# Definition for a Point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n# Definition for a Quadrilateral.\nclass Quadrilateral:\n    def __init__(self, a, b, c, d):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n\n    def __repr__(self):\n        return 'Quadrilateral({}, {}, {}, {})'.format(self.a, self.b, self.c, self.d)\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {Integer}\n    def area(self, points):\n        if len(points) < 3:\n            return 0\n\n        a = points[0].x\n        b = points[0].y\n        c = points[1].x\n        d = points[1].y\n        e = points[2].x\n        f = points[2].y\n        g = 0\n\n        for i in range(3):\n            g += (a + c) * (d - f)\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = g\n\n        return g / 2\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    points = [Point(2, 3), Point(4, 3), Point(4, 1), Point(2, 1)]\n    print(sol.area(points))",
    "class Solution(object):\n    def calculate(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if len(A)!= 3:\n            return 0\n        l = A[0]\n        r = A[2]\n        b = A[1]\n        c = (l + r) / 2\n        d = (b + c) / 2\n        area = (r - l) * (b - c)\n        return area",
    "import math\n\ndef area(x1, y1, x2, y2):\n    return math.sqrt(x1*y2 + x2*y1)\n\n# test\n\nassert(area(1, 2, 3, 4) == 6)\nassert(area(0, 0, 10, 10) == 100)\nassert(area(5, 5, 5, 5) == 0)\nassert(area(0, 0, 1, 1) == 1)\n\n# hint\n\n# The area of a parallelogram is calculated as follows:\n# (x1, y1) is the top-left corner of the rectangle.\n# (x2, y2) is the bottom-right corner of the rectangle.\n# The area of a parallelogram is the sum of the widths of the sides.\n\n# Hint: use the formula to calculate the area of a rectangle\n# https://en.wikipedia.org/wiki/Parallelogram_(mathematics)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\n\nclass Solution:\n    def calculate(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        # p1, p2 are two points\n        # A = (p1.x - p2.x)^2 + (p1.y - p2.y)^2\n        # area = sqrt(A)\n        # https://discuss.leetcode.com/topic/82757/java-solution-with-explanation\n        p1, p2 = points[0], points[1]\n        area = (p1.x - p2.x)**2 + (p1.y - p2.y)**2\n        return round(area**0.5)\n\n\nif __name__ == \"__main__\":\n    points = [Point(x, y) for x, y in [[1, 1], [2, 2], [3, 3], [1, 3], [3, 1]]]\n    print Solution().calculate(points)",
    "def area_of_parallelogram(side1, side2, side3):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :rtype: int\n    \"\"\"\n    return side1 * side2 + side2 * side3 + side3 * side1\n\n\nif __name__ == '__main__':\n    assert area_of_parallelogram(2, 3, 4) == 6\n    assert area_of_parallelogram(4, 2, 3) == 6\n    assert area_of_parallelogram(3, 4, 2) == 6\n    assert area_of_parallelogram(2, 3, 4) == 6",
    "# Definition for a point\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    # @param p1, p2, p3, p4, p5 Point\n    # @return an integer\n    def calArea(self, p1, p2, p3, p4, p5):\n        a = (p1.x - p2.x) * (p3.y - p2.y) - (p3.x - p2.x) * (p1.y - p2.y)\n        b = (p4.x - p3.x) * (p5.y - p3.y) - (p5.x - p3.x) * (p4.y - p3.y)\n        c = (p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)\n        d = (p5.x - p3.x) * (p2.y - p3.y) - (p5.y - p3.y) * (p2.x - p3.x)\n        area = abs(a + b + c + d) / 2\n        return area\n\n\nif __name__ == '__main__':\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    p3 = Point(5, 6)\n    p4 = Point(7, 8)\n    p5 = Point(9, 10)\n    s = Solution()\n    print s.calArea(p1, p2, p3, p4, p5)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def area(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        return abs(p1.x * (p2.y - p4.y) + p2.x * (p3.y - p1.y) + p3.x * (p4.y - p2.y) -\n                   p1.x * (p3.y - p4.y) - p2.x * (p1.y - p4.y) - p3.x * (p2.y - p1.y)) / 2\n\nif __name__ == \"__main__\":\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    p4 = Point(4, 4)\n    s = Solution()\n    print s.area(p1, p2, p3, p4)\n    print s.area(p3, p1, p4, p2)\n    print s.area(p1, p4, p2, p3)",
    "# https://github.com/pythran/pythran/issues/937\n# https://stackoverflow.com/questions/368622/how-to-calculate-area-of-parallelogram\n# https://en.wikipedia.org/wiki/Parallelogram\n\ndef area(a, b, c, d):\n    \"\"\"Calculate area of a parallelogram.\n\n    :param a: first point\n    :param b: second point\n    :param c: third point\n    :param d: fourth point\n    :return: area of the parallelogram\n    \"\"\"\n\n    return a*b + c*d - a*d - c*b\n\n\ndef test_area():\n    assert area(1, 2, 3, 4) == 2.5\n    assert area(3, 2, 3, 4) == 3.5\n    assert area(1, 2, 3, 5) == 0\n    assert area(3, 2, 3, 5) == 0",
    "class Solution:\n    \"\"\"\n    @param: rectangle: A list of length 4\n    @return: an integer\n    \"\"\"\n    def calculate(self, rectangle):\n        \"\"\"\n        :type rectangle: List[int]\n        :rtype: int\n        \"\"\"\n        x1, y1, x2, y2 = rectangle\n        return abs(x2 - x1) * abs(y2 - y1)\n\nif __name__ == '__main__':\n    s = Solution()\n    rectangle = [2, 1, 3, 4]\n    print s.calculate(rectangle)",
    "def area_parallelogram(a, b, c, d):\n    \"\"\"\n    Input:\n        a, b, c, d: coordinates of four points\n    Output:\n        area of parallelogram\n    \"\"\"\n    return (a*d + b*c - c*d) / 2\n\nif __name__ == '__main__':\n    a = input('Enter first coordinate: ')\n    b = input('Enter second coordinate: ')\n    c = input('Enter third coordinate: ')\n    d = input('Enter fourth coordinate: ')\n    print('The area of parallelogram is %s' % area_parallelogram(a, b, c, d))",
    "import math\n\ndef area_parallelogram(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a * b) / 2.0\n\ndef area_triangle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_square(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_pentagon(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_heptagon(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_octagon(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_hexagon(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_hexagon(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef area_triangle(a, b, c):",
    "def area_of_parallelogram(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return width * height / 2\n\nif __name__ == '__main__':\n    assert area_of_parallelogram(5, 10) == 25\n    assert area_of_parallelogram(5, 10) == 25\n    assert area_of_parallelogram(5, 10) == 25\n    assert area_of_parallelogram(5, 10) == 25",
    "import math\n\n\ndef get_area(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram.\n\n    Input:\n    a, b, c, d -- sides of the parallelogram\n    Output:\n    area -- area of the parallelogram\n    \"\"\"\n    if a == 0 and b == 0:\n        return c * d\n    if a == 0:\n        return c * d / 2\n    if b == 0:\n        return c * d / 2\n    return a * b * d\n\n\ndef test_get_area():\n    assert get_area(0, 0, 0, 0) == 0\n    assert get_area(0, 0, 0, 1) == 1\n    assert get_area(1, 1, 0, 1) == 1\n    assert get_area(0, 1, 1, 0) == 1\n    assert get_area(1, 0, 1, 0) == 1\n    assert get_area(0, 0, 1, 1) == 1\n    assert get_area(0, 1, 1, 0) == 1\n    assert get_area(1, 0, 1, 0) == 1\n    assert get_area(1, 1, 1, 1) == 1\n    assert get_area(1, 1, 0, 1) == 1\n    assert get_area(1, 1, 1, 0) == 1\n    assert get_area(1, 1, 1, 1) == 1\n    assert get_area(2, 1, 1, 1) == 1\n\n\ndef test_get_area2():\n    assert get_area(0, 0, 1, 1) == 0\n    assert get_area(1, 1, 1, 0) == 0\n    assert get_area(0, 1, 0, 1) == 0\n    assert get_area(1, 0, 1, 1) == 0\n    assert get_area(0, 0, 0, 0) == 0\n    assert get_area(1, 1, 1, 1) == 0\n    assert get_area(1, 1, 0, 1) == 0\n    assert get_area(0, 1, 1, 1) == 0\n\n\ndef test_get_area3():",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :param p1: Point\n        :param p2: Point\n        :param p3: Point\n        :param p4: Point\n        :return: area\n        \"\"\"\n        if p1.x == p2.x and p2.y == p3.y and p3.x == p4.x and p4.y == p1.y:\n            self.area += (p1.x + p2.x) * (p3.y - p1.y)\n            self.area += (p3.x + p4.x) * (p1.y - p3.y)\n            self.area += (p4.x + p1.x) * (p2.y - p4.y)\n            self.area += (p2.x + p3.x) * (p4.y - p2.y)\n        else:\n            self.area += (p1.x + p2.x) * (p3.y - p2.y)\n            self.area += (p2.x + p3.x) * (p4.y - p3.y)\n            self.area += (p3.x + p4.x) * (p1.y - p4.y)\n            self.area += (p4.x + p1.x) * (p2.y - p1.y)\n        return self.area\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    p1 = (1, 2)\n    p2 = (2, 3)\n    p3 = (3, 4)\n    p4 = (4, 1)\n    print s.calculate(p1, p2, p3, p4)",
    "class Rectangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        return self.a * self.b\n\nclass RectangleArea(Rectangle):\n    def __init__(self, a, b, c, d, e, f):\n        super().__init__(a, b, c)\n        self.d = d\n        self.e = e\n        self.f = f\n\n    def area(self):\n        return self.a * self.b + self.d * self.e + self.f * self.f\n\nclass RectangleArea2(Rectangle):\n    def __init__(self, a, b, c, d, e, f, g, h):\n        super().__init__(a, b, c)\n        self.d = d\n        self.e = e\n        self.f = f\n        self.g = g\n        self.h = h\n\n    def area(self):\n        return self.a * self.b + self.d * self.e + self.f * self.f + self.g * self.g + self.h * self.h\n\nclass RectangleArea3(Rectangle):\n    def __init__(self, a, b, c, d, e, f, g, h, i, j):\n        super().__init__(a, b, c)\n        self.d = d\n        self.e = e\n        self.f = f\n        self.g = g\n        self.h = h\n        self.i = i\n        self.j = j\n\n    def area(self):\n        return self.a * self.b + self.d * self.e + self.f * self.f + self.g * self.g + self.h * self.h + self.i * self.i + self.j * self.j\n\nclass RectangleArea4(Rectangle):\n    def __init__(self, a, b, c, d, e, f, g, h, i, j, k, l):\n        super().__init__(a",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nclass Solution(object):\n    def calculate(self, p, q, r):\n        \"\"\"\n        :type p: Point\n        :type q: Point\n        :type r: Point\n        :rtype: float\n        \"\"\"\n        if p.x > q.x:\n            p = Point(q.x, p.y)\n        if q.x > r.x:\n            q = Point(r.x, q.y)\n        if p.x > r.x:\n            p = Point(r.x, p.y)\n        return abs(p.x * q.y - q.x * p.y - p.y * r.x + r.y * p.x) / 2.0\n\n\nif __name__ == '__main__':\n    p1 = Point(1, 1)\n    p2 = Point(1, 2)\n    p3 = Point(2, 1)\n    p4 = Point(3, 1)\n    p5 = Point(3, 2)\n    p6 = Point(4, 1)\n    p7 = Point(5, 1)\n    p8 = Point(6, 1)\n    p9 = Point(7, 1)\n    p10 = Point(8, 1)\n    p11 = Point(9, 1)\n    p12 = Point(10, 1)\n    p13 = Point(11, 1)\n    p14 = Point(12, 1)\n    p15 = Point(13, 1)\n    p16 = Point(14, 1)\n    p17 = Point(15, 1)\n    p18 = Point(16, 1)\n    p19 = Point(17, 1)\n    p20 = Point(18, 1)\n    p21 = Point(19, 1)\n    p22 = Point(20, 1)\n    p23 = Point(21, 1)\n    p24 = Point(22,",
    "def area(a,b,c,d):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Input:\n        a, b, c, d: The lengths of sides of a parallelogram.\n\n    Output:\n        An integer representing the area of a parallelogram.\n    \"\"\"\n    return (a + b + c) * (d - c + a) / 2\n\nif __name__ == '__main__':\n    print(area(3, 4, 5, 6))\n    print(area(3, 4, 5, 3))\n    print(area(3, 4, 3, 6))\n    print(area(3, 4, 3, 3))\n    print(area(3, 3, 5, 6))\n    print(area(3, 3, 5, 3))\n    print(area(3, 3, 3, 6))\n    print(area(3, 3, 3, 3))",
    "class Solution:\n    # @param side1, a list of integers\n    # @param side2, a list of integers\n    # @return an integer\n    def calculate(self, side1, side2):\n        if side1 == None or side2 == None:\n            return 0\n        if len(side1)!= len(side2):\n            return 0\n        area = 0\n        for i in range(len(side1)):\n            if side1[i] > side2[i]:\n                area += side1[i] * side2[i + 1]\n                area += side1[i] * side2[i]\n            elif side1[i] < side2[i]:\n                area += side2[i] * side1[i + 1]\n                area += side2[i] * side1[i]\n            else:\n                area += side1[i] * side2[i]\n        return area",
    "def parallelogram_area(a, b, c):\n    \"\"\"\n    a,b,c: points of the parallelogram\n    Returns: Area of the parallelogram\n    \"\"\"\n    return (a[0]*b[1] + a[1]*c[0] + b[0]*c[1])/2\n\nif __name__ == '__main__':\n    a = [[1,2],[3,4],[5,6]]\n    b = [[10,20],[30,40],[50,60]]\n    c = [[100,200],[300,400],[500,600]]\n    print parallelogram_area(a,b,c)",
    "import math\n\ndef area_parallelogram(a, b, c, d):\n    \"\"\"\n    Calculate area of a parallelogram.\n\n    :param a: first side of the parallelogram\n    :param b: second side of the parallelogram\n    :param c: third side of the parallelogram\n    :param d: fourth side of the parallelogram\n    :return: area of the parallelogram\n    \"\"\"\n    return math.sqrt(a * b) * math.sqrt(c * d)\n\nif __name__ == \"__main__\":\n    print area_parallelogram(2, 4, 5, 3)",
    "def area_of_parallelogram(a, b, c, d):\n    return a * d + b * c\n\nprint(area_of_parallelogram(10, 20, 30, 40))",
    "# Definition for a Point.\nclass Point(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\nclass Solution(object):\n    def calculate(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: int\n        \"\"\"\n        p1x = p2.a - p1.a\n        p1y = p2.b - p1.b\n        p2x = p3.a - p2.a\n        p2y = p3.b - p2.b\n        return abs(p1x * p2y - p2x * p1y)",
    "class Solution(object):\n    def calArea(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: float\n        \"\"\"\n        return 0.5*height*width\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.calArea(3, 4))",
    "import math\n\n# area of parallelogram\ndef area_parallelogram(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: the length of two sides of a parallelogram\n    Output:\n        area of a parallelogram\n    \"\"\"\n    return (a + b + c) / 2.0\n\n# test cases\n# a, b, c = 1, 2, 3\n# area_parallelogram(a, b, c) == area_of_parallelogram(a, b, c)\n\nprint area_parallelogram(1, 2, 3)\nprint area_parallelogram(3, 2, 1)\nprint area_parallelogram(3, 1, 2)\n\n# a, b, c = 1, 2, 3\n# area_parallelogram(a, b, c) == area_of_parallelogram(a, b, c)\n\nprint area_parallelogram(1, 2, 3) == area_of_parallelogram(1, 2, 3)\nprint area_parallelogram(3, 2, 1) == area_of_parallelogram(3, 2, 1)\nprint area_parallelogram(3, 1, 2) == area_of_parallelogram(3, 1, 2)\n\n# a, b, c = 1, 2, 3\n# area_parallelogram(a, b, c) == area_of_parallelogram(a, b, c)\n\nprint area_parallelogram(1, 2, 3) == area_of_parallelogram(1, 2, 3)\nprint area_parallelogram(3, 2, 1) == area_of_parallelogram(3, 2, 1)\nprint area_parallelogram(3, 1, 2) == area_of_parallelogram(3, 1, 2)",
    "from math import sqrt\n\n\ndef area_of_parallelogram(a, b, c, d):\n    \"\"\"\n    :param a, b, c, d:\n    :rtype: float\n    \"\"\"\n    return a * b + c * d\n\n\nif __name__ == '__main__':\n    print(area_of_parallelogram(2, 4, 6, 2))\n    print(area_of_parallelogram(2, 4, 6, 2.5))",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: float\n        \"\"\"\n        return abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p4.y) + p3.x * (p4.y - p1.y) - p4.x * (p1.y - p2.y)) / 2\n\n    def test(self):\n        assert self.calculate(Point(1, 1), Point(2, 2), Point(3, 3), Point(4, 4)) == 3.0\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    sol.test()",
    "import math\n\n\ndef parallelogram_area(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2\n\n\nif __name__ == '__main__':\n    a = float(input('Enter first side: '))\n    b = float(input('Enter second side: '))\n    c = float(input('Enter third side: '))\n    print(parallelogram_area(a, b, c))",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\nclass Solution(object):\n    def area(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        # calculate the area of a parallelogram\n        if not points:\n            return 0.0\n        max_x, min_x, max_y, min_y = points[0].a, points[0].b, points[0].c, points[0].a\n        for point in points[1:]:\n            max_x, min_x = max(max_x, point.a), min(min_x, point.b)\n            max_y, min_y = max(max_y, point.c), min(min_y, point.b)\n        return abs(min_x - max_x) * abs(min_y - max_y)",
    "import math\n\ndef area_parallelogram(a, b, c, d):\n    \"\"\"\n    Return the area of a parallelogram with side a, b and c, d.\n    \"\"\"\n    return abs(a * c * (d - b)) / 2.0\n\nif __name__ == '__main__':\n    assert(area_parallelogram(4, 3, 2, 1) == 1.0)\n    assert(area_parallelogram(4, 3, 1, 2) == 0.5)\n    assert(area_parallelogram(4, 3, 2, 1) == 1.0)\n    assert(area_parallelogram(4, 3, 1, 2) == 0.5)\n    assert(area_parallelogram(4, 3, 2, 1) == 1.0)\n    assert(area_parallelogram(4, 3, 1, 2) == 0.5)\n    assert(area_parallelogram(4, 3, 2, 1) == 1.0)\n    assert(area_parallelogram(4, 3, 1, 2) == 0.5)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}