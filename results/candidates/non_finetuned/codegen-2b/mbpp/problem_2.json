{
  "problem": {
    "task_id": "MBPP/13",
    "prompt": "Write a function to count the most common words in a dictionary.",
    "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
    "test_list": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ],
    "challenge_test_list": [],
    "problem_id": 2
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://www.hackerrank.com/challenges/dictionary\n\n# Note:\n# All words in the dictionary must be unique.\n# All words must be printable characters.\n# The input will be a list of words.\n\ndef count_most_common_word(dictionary):\n    # YOUR CODE HERE\n    # Write the code that counts the most common word.\n    # Write the code that prints the most common word.\n    # You can use your favorite programming language.\n    #\n    # For example:\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10, 'g': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10, 'g': 10, 'h': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10, 'g': 10, 'h': 10, 'i': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10, 'g': 10, 'h': 10, 'i': 10, 'j': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10, 'g': 10, 'h': 10, 'i': 10, 'j': 10, 'k': 10}\n    # dic = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 10, 'f': 10",
    "# https://github.com/abhijeetkumar/python/blob/master/python/most_common.py\n\nimport collections\n\n# from collections import Counter\nfrom collections import defaultdict\n\n# from itertools import groupby\n\ndef most_common(dictionary):\n    # return Counter(dictionary).most_common()\n    # return Counter(dictionary).most_common(1)\n    return sorted(Counter(dictionary).most_common(), key=lambda t: t[1], reverse=True)\n\nif __name__ == '__main__':\n    words = ['love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love",
    "# This is a simple function that counts the number of times a word is used.\n# This can be used to count the most common words in a dictionary.\n\ndef most_common(word_list):\n    \"\"\"\n    Args:\n        word_list: List of words in a dictionary.\n    Returns:\n        The most common word in the dictionary.\n    \"\"\"\n\n    # Create a list of the words in the dictionary.\n    word_list = [word for word in word_list]\n\n    # Create a dictionary of the most common words.\n    most_common = {}\n\n    # Create a list of the words in the dictionary.\n    word_list = [word for word in word_list]\n\n    # Iterate over the list of words.\n    for word in word_list:\n        # Create a list of the words in the dictionary.\n        word_list = [word for word in word_list]\n\n        # Create a dictionary of the most common words.\n        most_common[word] = 1\n\n    # Return the most common word.\n    return most_common\n\n\n# Test the most_common function.\ndef test_most_common():\n    \"\"\"\n    Test the most_common function.\n    \"\"\"\n\n    # Create a list of words.\n    word_list = ['cat', 'dog','mouse', 'bird', 'cat','mouse', 'cat']\n\n    # Create a dictionary of the most common words.\n    most_common = most_common(word_list)\n\n    # Test the most_common function.\n    print(most_common['cat'])\n\n\n# Run the test function if this is run as a script.\nif __name__ == '__main__':\n    test_most_common()",
    "# https://leetcode.com/problems/most-common-word-in-a-dictionary/discuss/\n# \n# Implement a function to count the most common words in a dictionary.\n# The count of each word should be stored as a pair of ints (count, frequency)\n# where count is the number of times that word occurs and frequency is the\n# frequency of that word in the text.\n#\n# Example:\n# Given the following dictionary,\n#\n# {'bad': 2, 'dad': 1,'mad': 2, 'dog': 1}\n#\n# return [('bad', 2), ('dog', 1)].\n#\n\nimport collections\n\n\nclass Solution(object):\n    def topKFrequent(self, dictionary, k):\n        \"\"\"\n        :type dictionary: List[str]\n        :type k: int\n        :rtype: List[tuple]\n        \"\"\"\n        counts = collections.Counter(dictionary)\n        return [counts[key] for key, _ in sorted(counts.items(), key=lambda x: x[1], reverse=True)][:k]\n\n\nif __name__ == \"__main__\":\n    dictionary = [\"bad\", \"dad\", \"mad\", \"dog\"]\n    print Solution().topKFrequent(dictionary, 3)",
    "def most_common(dictionary, max_occurrences):\n    \"\"\"\n    dictionary: dictionary of words\n    max_occurrences: the maximum number of occurrences of a word in the dictionary\n    returns: dictionary of most common words\n    \"\"\"\n    most_common_dictionary = {}\n    for word in dictionary:\n        if word in most_common_dictionary:\n            if most_common_dictionary[word] < max_occurrences:\n                del most_common_dictionary[word]\n            else:\n                continue\n        most_common_dictionary[word] = 1\n    return most_common_dictionary\n\ndef main():\n    \"\"\"\n    dictionary: dictionary of words\n    max_occurrences: the maximum number of occurrences of a word in the dictionary\n    returns: dictionary of most common words\n    \"\"\"\n    dictionary = {'hello':1, 'world':2, 'goodbye':1, 'goodbye':2}\n    max_occurrences = 3\n    most_common_dictionary = most_common(dictionary, max_occurrences)\n    print(most_common_dictionary)\n\nif __name__ == '__main__':\n    main()",
    "import collections\nimport string\n\n\nclass WordCounter:\n\n    def __init__(self):\n        self.word_counts = collections.Counter()\n\n    def add_word(self, word):\n        self.word_counts[word] += 1\n\n    def find_most_common(self, n):\n        return self.word_counts.most_common(n)\n\n\ndef main():\n    word_counter = WordCounter()\n    word_counter.add_word('hello')\n    word_counter.add_word('hello')\n    word_counter.add_word('hello')\n    word_counter.add_word('hello')\n    word_counter.add_word('hello')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word_counter.add_word('world')\n    word",
    "def most_common(dictionary, n=3):\n    \"\"\"\n    :param dictionary: a dictionary of words and their counts\n    :param n: the number of most common words to return\n    :return: a list of the most common n words\n    \"\"\"\n    counter = Counter(dictionary)\n    return counter.most_common(n)\n\nif __name__ == '__main__':\n    dictionary = {'a': 5, 'b': 1, 'c': 4, 'd': 4, 'e': 3, 'f': 2, 'g': 1, 'h': 2}\n    print(most_common(dictionary))",
    "import collections\n\n# @include\ndef count_most_common_words(words, dictionary):\n    \"\"\"\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"cat\", \"dog\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('dog', 2)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"cat\", \"dog\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('dog', 2)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    >>> count_most_common_words([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"],\n   ...                         {\"cat\": 3, \"dog\": 2})\n    ('cat', 3)\n    \"\"\"\n    def most_common_word(dictionary):\n        \"\"\"\n        Returns the most common word in dictionary.\n        \"\"\"\n        return max(dictionary, key=dictionary.get)\n\n    most_common_words = collections.defaultdict(int)\n    for",
    "import collections\n\nwords = [\"Hello\", \"World\", \"Goodbye\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"Hello\", \"Goodbye\", \"",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    counts = {}\n    for word in dictionary:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return [w for w in counts]\n\nif __name__ == \"__main__\":\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary = [\"a\", \"b\", \"c\", \"a\", \"c\", \"b\", \"a\", \"a\", \"c\", \"c\", \"b\", \"b\"]\n    print most_common(dictionary)\n    dictionary =",
    "from collections import Counter\n\nwords = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat",
    "from collections import Counter\n\nwords = ['hello', 'world', 'world', 'hello', 'hello', 'hello']\n\ndef most_common_words(dictionary, n):\n    \"\"\"\n    :type dictionary: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    return Counter(dictionary).most_common(n)",
    "#!/usr/bin/env python\n\n# the dictionary to be searched\nwords = {'the': 0, 'and': 0, 'of': 0, 'in': 0, 'to': 0, 'with': 0}\n\n# read input\nwith open('input.txt') as f:\n    for line in f:\n        for word in line.split():\n            words[word] += 1\n\n# print result\nfor word in sorted(words.keys()):\n    print(word, words[word])",
    "# Complete the mostCommonWords function below.\ndef mostCommonWords(words, dictionary):\n    # write your code here\n    count = collections.Counter(words)\n    common = [w for w in count if count[w] == max(count.values())]\n    return common\n\nif __name__ == '__main__':\n    words = ['this', 'is', 'a', 'test', 'of','mostCommonWords', 'function']\n    dictionary = {'this': 1, 'is': 1, 'a': 1, 'test': 1, 'of': 1, 'and': 1, 'function': 1}\n    print(mostCommonWords(words, dictionary))",
    "from collections import Counter\n\nwords = ['cat', 'cat', 'dog', 'dog', 'rat', 'rat', 'cat', 'dog', 'rat']\n\n# 1. Count the frequency of words\n# 2. Sort the dictionary by frequency\n# 3. Print the top 10 most common words\n\ndef most_common(words):\n    return Counter(words).most_common(10)\n\n# most_common(words)\n# [('cat', 4), ('dog', 3), ('rat', 2)]\n\n# 3. Sort the dictionary by frequency\n# 4. Print the top 10 most common words\n\ndef most_common(words):\n    return sorted(words, key=lambda x: Counter(words).get(x), reverse=True)[:10]\n\n# most_common(words)\n# ['rat', 'dog', 'cat', 'cat', 'dog', 'rat']\n\n# 5. Count the frequency of words\n# 6. Sort the dictionary by frequency\n# 7. Print the top 10 most common words\n\ndef most_common(words):\n    return Counter(words).most_common(10)\n\n# most_common(words)\n# [('rat', 4), ('dog', 3), ('cat', 2)]\n\n# 8. Sort the dictionary by frequency\n# 9. Print the top 10 most common words\n\ndef most_common(words):\n    return sorted(words, key=lambda x: Counter(words).get(x), reverse=True)[:10]\n\n# most_common(words)\n# ['rat', 'dog', 'cat', 'cat', 'dog', 'rat']",
    "# https://www.hackerrank.com/challenges/dictionary-of-words-and-phrases\n\ndef most_common(dict):\n    \"\"\"\n    Returns the most common words in a dictionary.\n\n    Input:\n    dict - Dictionary of words and their occurrences.\n\n    Output:\n    The most common words in the dictionary.\n    \"\"\"\n\n    # Create a set of all the words in the dictionary.\n    all_words = set(dict.keys())\n\n    # Create a list of all the words in the dictionary.\n    all_words_list = list(all_words)\n\n    # Sort the list of words.\n    all_words_list.sort()\n\n    # Create a dictionary of the most common words.\n    most_common_words = {}\n\n    # Iterate through the sorted list of words.\n    for word in all_words_list:\n        # Check if the word is in the dictionary.\n        if word in dict:\n            # Add the word to the dictionary.\n            most_common_words[word] = dict[word]\n\n    # Return the most common words dictionary.\n    return most_common_words\n\n# Test Cases\n# Input:\n#   dict = {\"a\": 3, \"b\": 1, \"c\": 4, \"d\": 1, \"e\": 3, \"f\": 2}\n# Output:\n#   {'a': 3, 'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'a': 3, 'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'a': 3, 'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'a': 3, 'b': 1, 'c': 4, 'd': 1, 'e': 3, 'f': 2}\n#   {'a': 3,",
    "def most_common_words(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    counts = collections.Counter(words)\n    return counts.most_common(k)\n\nif __name__ == \"__main__\":\n    words = [\"cat\", \"cats\", \"bat\", \"babes\"]\n    k = 3\n    print(most_common_words(words, k))\n    print(most_common_words(words, 5))",
    "#!/usr/bin/env python\n\ndict_of_words = {'apple': 3, 'orange': 2, 'banana': 4, 'applepie': 1}\n\ndef most_common(n, dictionary):\n    '''\n    Args:\n        n: the number of most common words\n        dictionary: a dictionary of words\n    Returns:\n        a list of n most common words\n    '''\n    words = [word for word in dictionary.keys()]\n    words.sort(key=dictionary.get, reverse=True)\n    return words[:n]\n\nif __name__ == '__main__':\n    print most_common(2, dict_of_words)",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    dictionary = sorted(dictionary, key=dictionary.count, reverse=True)\n    return dictionary[:5]\n\nif __name__ == '__main__':\n    dictionary = ['apple','monkey','monkey','monkey','monkey']\n    print most_common(dictionary)",
    "def most_common_words(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    \n    return sorted(count.items(), key=lambda x: x[1], reverse=True)[:k]\n\nif __name__ == '__main__':\n    words = ['hello', 'world', 'how', 'are', 'you', 'happy', 'today']\n    k = 3\n    print(most_common_words(words, k))",
    "import collections\n\n\ndef most_common(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    sorted_words = collections.Counter(words).most_common(k)\n    sorted_words = sorted(sorted_words, key=lambda x: x[1], reverse=True)\n    return sorted_words\n\n\nif __name__ == '__main__':\n    words = ['apple', 'app', 'apples', 'banana', 'banana', 'apples', 'apple', 'banana', 'banana', 'apple']\n    print(most_common(words, 2))",
    "# Hints:\n#\n# Use a dictionary to store the most common words.\n# Use a set to store the unique words.\n# Use a Counter to count the frequency of each word.\n# Use a defaultdict to store the most common words in a dictionary.\n# Use a OrderedDict to store the most common words in a dictionary.\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Author:  Joe Linn\n# Date:    3/8/2016\n\n\"\"\"\nThe most common words in a dictionary are the ones that appear the most.\n\nGiven a dictionary of words and a list of words, return a list of the most\ncommon words.\n\nThe word list is a list of strings, and the dictionary is a dictionary of\nstrings to integers.\n\nExample 1:\n\nInput: dictionary = {\"a\":1, \"b\":1, \"c\":1, \"d\":1}, wordlist = [\"a\", \"c\", \"b\", \"d\", \"e\"]\nOutput: [\"a\", \"c\"]\nExplanation:\nThe most common words are \"a\", \"c\".\n\nExample 2:\n\nInput: dictionary = {\"a\":1, \"b\":1, \"c\":2, \"d\":1}, wordlist = [\"a\", \"c\", \"b\", \"d\", \"e\"]\nOutput: [\"a\", \"c\"]\nExplanation:\n\"b\" is not in the dictionary, so it is not in the list.\n\nExample 3:\n\nInput: dictionary = {\"a\":1, \"b\":1, \"c\":2, \"d\":1}, wordlist = [\"a\", \"e\", \"b\", \"d\", \"e\"]\nOutput: [\"a\", \"b\", \"c\"]\nExplanation:\n\"e\" is not in the dictionary, so it is not in the list.\n\nNote:\n\n1 <= dictionary.length <= 100\n1 <= dictionary[i].length <= 100\n1 <= wordlist.length <= 100\nAll the words in the dictionary and the wordlist are distinct.\n\"\"\"\n\n\nclass Solution(object):\n    def find_top_words(self, dictionary, wordlist):\n        \"\"\"\n        :type dictionary: List[str]",
    "import collections\n\ndef most_common(dictionary, n=10):\n    '''\n    Input:\n        dictionary: a dictionary of words and its frequency\n        n: the number of most common words to return\n    Output:\n        A list of the most common words\n    '''\n    return collections.Counter(dictionary).most_common(n)\n\n#Test Case\ndictionary = {'a':3,'b':3,'c':1,'d':1,'e':1,'f':3,'g':1,'h':1,'i':1,'j':3,'k':2,'l':1,'m':1,'n':3,'o':1,'p':1,'q':3,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'y':1,'z':1}\n#dictionary = {'a':3,'b':3,'c':1,'d':1,'e':1,'f':3,'g':1,'h':1,'i':1,'j':3,'k':2,'l':1,'m':1,'n':3,'o':1,'p':1,'q':3,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'y':1,'z':1}\n#dictionary = {'a':3,'b':3,'c':1,'d':1,'e':1,'f':3,'g':1,'h':1,'i':1,'j':3,'k':2,'l':1,'m':1,'n':3,'o':1,'p':1,'q':3,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'y':1,'z':1}\n#dictionary = {'a':3,'b':3,'c':1,'d':1,'e':1,'f':3,'g':1,'h':1,'i':1,'j':3,'k':2,'l':1,'m':1,'n':3,'o':1,'p':1,'q':3,'r':1,'s':1,'t':1,'u':1,'v':",
    "import collections\n\ndef most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    #  dictionary = {'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1, 'f': 1, 'g': 1}\n    #  dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\n    #  dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    #  dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    #  dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u':",
    "# The function takes in a dictionary of words.\n# The function should return a dictionary containing the most common\n# words and their counts.\n#\n# For example, given the following dictionary:\n#     {'cat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'dog': 1, 'dog': 1}\n# The function should return:\n#     {'cat': 2, 'dog': 1}\n\n# For example, given the following dictionary:\n#     {'bad': 1, 'dog': 1, 'dog': 2, 'good': 1, 'good': 2, 'bad': 1, 'good': 3, 'good': 3}\n# The function should return:\n#     {'good': 4, 'bad': 2}\n\ndef most_common_words(dictionary):\n    # Write your code here\n    words = {}\n    for word in dictionary:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return sorted(words.items(), key=lambda x: x[1], reverse=True)\n\n\n# Your most_common_words function should take in a dictionary of words.\n# It should return a dictionary containing the most common words and their counts.\n\n# For example, given the following dictionary:\n#     {'cat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'dog': 1, 'dog': 1}\n# The function should return:\n#     {'cat': 2, 'dog': 1}\n\n# For example, given the following dictionary:\n#     {'bad': 1, 'dog': 1, 'dog': 2, 'good': 1, 'good': 2, 'bad': 1, 'good': 3, 'good': 3}\n# The function should return:\n#     {'good': 4, 'bad': 2}",
    "import collections\n\ndef count(words, dictionary):\n    \"\"\"\n    :type words: List[str]\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    word_counts = collections.Counter(words)\n    return [word for word, count in word_counts.most_common()]",
    "import collections\n\n# your code goes here\ndef word_count(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    word_count = collections.defaultdict(int)\n    for word in dictionary:\n        word_count[word] += 1\n    return [word_count[word] for word in word_count.keys()]\n\n# test\ndictionary = ['apple', 'orange', 'banana', 'apple', 'banana', 'apple', 'apple', 'banana', 'apple']\nprint(word_count(dictionary))",
    "import collections\n\ndef most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    counts = collections.Counter(dictionary)\n    return [key for key, value in counts.most_common()]\n\nif __name__ == '__main__':\n    dictionary = ['hello', 'world', 'world', 'hello', 'hello', 'hello', 'world', 'world', 'hello']\n    result = most_common(dictionary)\n    print(result)",
    "import collections\n\n# Complete the mostCommon function below.\n\ndef mostCommon(words, dictionary):\n    counts = collections.Counter(words)\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]\n\nif __name__ == \"__main__\":\n    dictionary = {'banana': 3, 'apples': 3, 'pears': 2}\n    words = 'banana apple pear'.split()\n    print(mostCommon(words, dictionary))",
    "# https://leetcode.com/problems/most-common-word-in-a-dictionary/\n\nclass Solution(object):\n    def mostCommonWord(self, dict, N):\n        \"\"\"\n        :type dict: List[str]\n        :type N: int\n        :rtype: List[str]\n        \"\"\"\n        word_dict = {}\n        for word in dict:\n            word_dict[word] = word_dict.get(word, 0) + 1\n\n        freq_dict = {}\n        for word in word_dict:\n            if word_dict[word] > N:\n                freq_dict[word] = word_dict[word]\n            else:\n                freq_dict[word] = 0\n\n        freq_list = []\n        for word in freq_dict:\n            freq_list.append(word)\n            if len(freq_list) == N:\n                break\n        return freq_list\n\n\nif __name__ == '__main__':\n    dict = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(Solution().mostCommonWord(dict, 5))\n    dict = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(Solution().mostCommonWord(dict, 5))\n    dict = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(Solution().mostCommonWord(dict, 5))\n    dict = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(Solution().mostCommonWord(dict, 5))",
    "import collections\nimport random\n\n\ndef most_common(dictionary, n):\n    \"\"\"\n    :type dictionary: dict\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    cnt = collections.Counter(dictionary.values())\n    return cnt.most_common(n)\n\n\ndef test_most_common():\n    assert most_common({'a': 2, 'b': 3, 'c': 2, 'd': 1, 'e': 1, 'f': 4, 'g': 1}, 2) == ['a', 'b', 'c', 'd', 'e', 'f']\n\n\nif __name__ == '__main__':\n    test_most_common()",
    "def most_common(dictionary, n=10):\n    \"\"\"\n    dictionary: A list of words.\n    n: An integer, the number of most common words to return.\n    returns: A list of the most common words, sorted by frequency.\n    \"\"\"\n    words = {}\n    for word in dictionary:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    most_common = sorted(words.items(), key=lambda x: x[1], reverse=True)\n    return most_common[:n]\n\n\nif __name__ == \"__main__\":\n    dictionary = [\"a\", \"b\", \"c\", \"c\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"h\", \"i\", \"i\", \"j\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"o\", \"o\", \"o\", \"p\", \"q\", \"r\", \"r\", \"s\", \"s\", \"t\", \"t\", \"t\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    most_common = most_common(dictionary, 3)\n    print(most_common)",
    "def most_common(dictionary, k):\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)[:k]\n\n# Test cases\ntest_cases = [\n    ([], 0),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([], 0),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse','mouse', 'rat', 'rat','sheep'], 5),\n    ([1, 2, 3], 3),\n    (['cat', 'cats', 'dog', 'dog', 'fox', 'foxes','mouse',",
    "import collections\n\nclass WordCounter(object):\n    def __init__(self, dictionary):\n        \"\"\"\n        Initialize your data structure here.\n        :type dictionary: Dictionary\n        \"\"\"\n        self.dictionary = dictionary\n        self.counts = collections.Counter()\n\n    def addWord(self, word):\n        \"\"\"\n        Add a word to the dictionary.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        self.dictionary.add(word)\n\n    def count(self, word):\n        \"\"\"\n        Returns the number of occurrences of the word\n        :type word: str\n        :rtype: int\n        \"\"\"\n        return self.counts[word]\n\n    def removeWord(self, word):\n        \"\"\"\n        Remove a word from the dictionary.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        self.dictionary.remove(word)\n\n    def top(self, n):\n        \"\"\"\n        Returns the top n words\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return self.counts.most_common(n)\n\n# Your WordCounter object will be instantiated and called as such:\n# obj = WordCounter(dictionary)\n# obj.addWord(word)\n# param_2 = obj.count(word)\n# obj.removeWord(word)\n# param_4 = obj.top(n)",
    "import collections\nimport os\nimport random\n\ndict_path = os.path.join(os.path.dirname(__file__), 'words.txt')\n\ndef read_dictionary(path):\n    \"\"\"Read a dictionary from a text file.\n    Return a dictionary with the words as keys and the number of occurrences\n    as values.\n    \"\"\"\n    words = collections.defaultdict(int)\n    with open(path) as f:\n        for line in f:\n            for word in line.split():\n                words[word] += 1\n    return words\n\ndef read_words():\n    \"\"\"Read words from a file.\n    Return a list of words.\n    \"\"\"\n    words = []\n    with open(dict_path) as f:\n        for line in f:\n            words.append(line.strip())\n    return words\n\ndef word_count(words):\n    \"\"\"Return the number of times a word appears in a list of words.\n    \"\"\"\n    word_count = collections.defaultdict(int)\n    for word in words:\n        word_count[word] += 1\n    return word_count\n\ndef most_common(words):\n    \"\"\"Return a list of the most common words in a list of words.\n    \"\"\"\n    word_count = word_count(words)\n    return sorted(word_count, key=word_count.get, reverse=True)\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    words = read_words()\n    random.shuffle(words)\n    print(most_common(words))\n\nif __name__ == '__main__':\n    main()",
    "def word_count(word_dict):\n    \"\"\"\n    :type word_dict: dict\n    :rtype: dict\n    \"\"\"\n    word_count = {}\n    for word in word_dict:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    for word, count in word_count.items():\n        print word, count\n\n    print word_count.most_common(5)\n\nif __name__ == '__main__':\n    word_dict = {'hello':1, 'hi':2, 'ho':3, 'world':4, 'welcome':5, 'goodbye':6}\n    word_count(word_dict)",
    "from collections import Counter\n\n\ndef most_common_words(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    counter = Counter(words)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    for i in range(k):\n        result.append(sorted_counter[i][0])\n    return result\n\n\nif __name__ == '__main__':\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 2))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 3))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 4))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 5))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 6))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 7))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 8))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 9))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 10))",
    "import collections\n\n# @include\ndef most_common_words(dictionary):\n    # dictionary is a dictionary of {word:frequency} pairs.\n    # Count the most common words, sorted by frequency.\n    return collections.Counter(word for word, frequency in dictionary.items()).most_common()\n# @exclude\n\n\ndef main():\n    # These \"asserts\" will be removed after you submit your solution.\n    assert most_common_words({'dog': 2, 'cat': 1}) == [('cat', 1), ('dog', 2)]\n    assert most_common_words({'dog': 1, 'cat': 1}) == [('cat', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1}) == [('cat', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('cat', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'dog': 1, 'cat': 1,'mouse': 1, 'cat': 1,'mouse': 1}) == [('mouse', 1)]\n    assert most_common_words({'",
    "from collections import Counter\n\nwords = ['a', 'an', 'the', 'and', 'or', 'but', 'if', 'for', 'with', 'as', 'in', 'is', 'are', 'at', 'not']\n\ndef most_common_words(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: List[str]\n    \"\"\"\n    return Counter(dictionary).most_common(10)\n\ndef main():\n    dictionary = {'a': 4, 'b': 4, 'c': 4, 'd': 3, 'e': 3, 'f': 2, 'g': 2}\n    print most_common_words(dictionary)\n\nif __name__ == '__main__':\n    main()",
    "import collections\nimport os\n\n\ndef most_common_words(words, top_n=10):\n    \"\"\"\n    :type words: List[str]\n    :type top_n: int\n    :rtype: List[str]\n    \"\"\"\n    counts = collections.Counter(words)\n    max_count = max(counts.values())\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counts[:top_n]\n\n\ndef main():\n    words = [\"cat\", \"cats\", \"dog\", \"dog\", \"fox\", \"foxes\", \"bat\", \"bats\"]\n    top_n = 10\n    print(most_common_words(words, top_n))\n\n\nif __name__ == '__main__':\n    main()",
    "def count_most_common_words(dictionary, n):\n    \"\"\"\n    :type dictionary: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    counter = collections.Counter(dictionary)\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)[:n]\n\n\ndef main():\n    dictionary = [\"cat\", \"cats\", \"and\", \"dog\", \"dog\", \"and\", \"dog\", \"cat\"]\n    n = 3\n    print(count_most_common_words(dictionary, n))\n\nif __name__ == '__main__':\n    main()",
    "def word_counter(words):\n    \"\"\"\n    Return the most common words in a list of words.\n    \"\"\"\n    counter = collections.Counter(words)\n    return counter.most_common()\n\ndef most_common_words(words):\n    \"\"\"\n    Return the most common words in a list of words.\n    \"\"\"\n    counter = collections.Counter(words)\n    return counter.most_common(len(words))\n\ndef main():\n    words = ['cat', 'bat', 'rat', 'rat', 'cat', 'rat']\n    print(word_counter(words))\n    print(most_common_words(words))\n\nif __name__ == '__main__':\n    main()",
    "from collections import defaultdict\n\nwords = ['cat', 'and', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'dog', 'dog', 'dog', 'fox', 'fox', 'fox', 'fox', 'fox', 'dog', 'dog', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'fox', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'dog', 'dog', 'fox', 'and', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', 'fox', '",
    "class Counter(object):\n    def __init__(self, dict_file):\n        \"\"\"\n        Read the dictionary from the file.\n        \"\"\"\n        self.dictionary = {}\n        with open(dict_file) as f:\n            for line in f:\n                line = line.strip()\n                if line:\n                    self.dictionary[line] = self.dictionary.get(line, 0) + 1\n\n    def most_common(self, n):\n        \"\"\"\n        Return the most common n words in the dictionary.\n        \"\"\"\n        return sorted(self.dictionary, key=self.dictionary.get, reverse=True)[:n]\n\nif __name__ == \"__main__\":\n    dict_file = \"./dictionary.txt\"\n    c = Counter(dict_file)\n    print(c.most_common(5))",
    "# https://www.hackerrank.com/challenges/the-most-common-words\n# In-place solution\n# Input:\n# dictionary = [\"the\", \"cat\", \"sat\", \"in\", \"the\", \"moon\", \"and\", \"the\", \"cats\", \"are\", \"on\", \"the\", \"mat\", \"to\", \"sat\", \"on\", \"the\", \"moon\", \"and\", \"the\", \"moon\", \"loves\", \"the\", \"sun\", \"and\", \"the\", \"sun\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"the\", \"earth\", \"loves\", \"the\", \"earth\", \"and\", \"",
    "import collections\n\ndef most_common_words(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    counts = collections.Counter(words)\n    return counts.most_common(k)\n\nif __name__ == \"__main__\":\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    k = 3\n    print(most_common_words(words, k))",
    "#!/usr/bin/env python\n\nfrom collections import Counter\n\nwords = [\n    \"the\", \"a\", \"and\", \"of\", \"is\", \"or\", \"to\", \"in\", \"it\", \"be\", \"not\", \"if\",\n    \"he\", \"on\", \"do\", \"at\", \"by\", \"for\", \"with\", \"as\", \"this\", \"but\", \"when\",\n    \"which\", \"then\", \"there\", \"who\", \"from\", \"at\", \"about\", \"how\", \"one\",\n    \"some\", \"both\", \"may\", \"what\", \"will\", \"them\", \"all\", \"another\", \"either\",\n    \"no\", \"then\", \"who\", \"at\", \"do\", \"has\", \"hasn't\", \"if\", \"or\", \"this\",\n    \"there\", \"then\", \"then\", \"when\", \"where\", \"which\", \"who\", \"with\", \"or\",\n    \"that\", \"the\", \"it\", \"and\", \"what\", \"then\", \"what's\", \"is\", \"what\", \"this\",\n    \"that\", \"who\", \"who's\", \"what's\", \"isn't\", \"you\", \"you're\", \"you\", \"you'd\",\n    \"you'll\", \"you're\", \"you\", \"you've\", \"he\", \"him\", \"his\", \"her\", \"her's\",\n    \"there's\", \"there\", \"there's\", \"there\", \"there\", \"it's\", \"it\", \"it\", \"it\",\n    \"it's\", \"what's\", \"what\", \"what\", \"what's\", \"what\", \"what's\", \"what's\",\n    \"what\", \"what's\", \"what's\", \"what\", \"what's\", \"what's\", \"what's\", \"what's\",\n    \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\",\n    \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\",\n    \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\", \"what's\",\n    \"what's\", \"what's\", \"what",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: list\n    \"\"\"\n    most_common = []\n    for key in dictionary:\n        most_common.append((key, dictionary[key]))\n        most_common.sort(key=lambda x: x[1], reverse=True)\n        \n    return most_common\n\nif __name__ == '__main__':\n    dict = {'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1}\n    most_common = most_common(dict)\n    print most_common",
    "import collections\n\nwords = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', '",
    "# https://leetcode.com/problems/most-common-word/\n\nclass Solution(object):\n    def mostCommonWord(self, dict, n):\n        \"\"\"\n        :type dict: List[str]\n        :type n: int\n        :rtype: str\n        \"\"\"\n        count = collections.Counter(dict)\n        return max(count.most_common(), key=lambda x: -x[1])[0]\n\nclass Solution2(object):\n    def mostCommonWord(self, dict, n):\n        \"\"\"\n        :type dict: List[str]\n        :type n: int\n        :rtype: str\n        \"\"\"\n        count = collections.Counter(dict)\n        return max(count.most_common(n), key=lambda x: -x[1])[0]\n\nclass Solution3(object):\n    def mostCommonWord(self, dict, n):\n        \"\"\"\n        :type dict: List[str]\n        :type n: int\n        :rtype: str\n        \"\"\"\n        count = collections.Counter(dict)\n        return max(count.most_common(), key=lambda x: -x[1])[0]",
    "import collections\n\ndictionary = {'a': 1, 'b': 1, 'c': 2, 'd': 2, 'e': 3, 'f': 4, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 2,\n             'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 1, 'r': 1,'s': 1, 't': 4, 'u': 1, 'v': 1, 'w': 2, 'x': 1,\n              'y': 2, 'z': 1}\n\ndef most_common_words(dictionary, n):\n    \"\"\"\n    Returns the most common words in dictionary.\n\n    :param dictionary: dictionary of words\n    :param n: number of most common words to return\n    :return: list of most common words\n    \"\"\"\n    sorted_dictionary = collections.Counter(dictionary).most_common(n)\n    return sorted_dictionary\n\nif __name__ == '__main__':\n    print(most_common_words(dictionary, 3))",
    "# https://www.youtube.com/watch?v=tQ0H7xY4E5U\n# https://www.youtube.com/watch?v=wYxMv6d8YgU\n# https://www.youtube.com/watch?v=vzw9FJ3DgJc\n# https://www.youtube.com/watch?v=9W4_4VpZH7s\n# https://www.youtube.com/watch?v=h3bT6YK9bk0\n# https://www.youtube.com/watch?v=W_bRf6n5Mjk\n# https://www.youtube.com/watch?v=r3_PkPzmKQs\n# https://www.youtube.com/watch?v=0zR4WYr2EZc\n# https://www.youtube.com/watch?v=hHkMdz2zqEg\n# https://www.youtube.com/watch?v=HqY8q2Q4KfQ\n# https://www.youtube.com/watch?v=4k1h9K3wD4A\n# https://www.youtube.com/watch?v=yH9BmHmvj1M\n# https://www.youtube.com/watch?v=CZh2Mh_QhQw\n# https://www.youtube.com/watch?v=4J6g2FvRvKs\n# https://www.youtube.com/watch?v=9a_a_Kc3YWw\n# https://www.youtube.com/watch?v=qQYZ7xuwzJk\n# https://www.youtube.com/watch?v=u5K3TJm3rzk\n# https://www.youtube.com/watch?v=n0XuSqy_p2Y\n# https://www.youtube.com/watch?v=Hxu8ZpD6G_I\n# https://www.youtube.com/watch?v=4a_B8W7Q4kI\n# https://www.youtube.com/watch?",
    "from collections import Counter\n\nwords = ['cat', 'cats', 'dog', 'dogs', 'dog', 'turtle', 'turtleg', 'turtle', 'turtle', 'turtle']\nwords = Counter(words).most_common(10)\nprint(words)",
    "from collections import Counter\n\ndict = {'a': 1, 'b': 2, 'c': 4, 'd': 2, 'e': 3, 'f': 2}\n\ndef most_common(n):\n    \"\"\"\n    Returns the n most common words in the given dictionary.\n    \"\"\"\n    counts = Counter(dict.values())\n    return counts.most_common(n)\n\nprint(most_common(3))",
    "# Your solution will be provided by the author in the editor below:\n\n# Dictionaries\n# Dictionary of words\n# Dictionary of counts\n\nfrom collections import Counter\n\ndef most_common_words(dictionary):\n    \"\"\"\n    :type dictionary: Dictionary\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n\nif __name__ == '__main__':\n    dictionary = {'a': 10, 'bb': 5, 'ccc': 3, 'dddd': 2, 'eeee': 1}\n    print most_common_words(dictionary)\n    dictionary = {'a': 10, 'bb': 5, 'ccc': 3, 'dddd': 2, 'eeee': 1, 'f': 1}\n    print most_common_words(dictionary)",
    "# https://www.hackerrank.com/challenges/dictionary-of-words/problem\n\n# Brute force solution\n# O(n^2)\ndef dictionary_of_words(dictionary):\n    count = {}\n    for word in dictionary:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return count\n\n# Dynamic programming solution\n# O(n)\ndef dictionary_of_words_dp(dictionary):\n    return _dictionary_of_words_dp(dictionary, [])\n\ndef _dictionary_of_words_dp(dictionary, result):\n    if len(result) > len(dictionary):\n        return result\n    for word in dictionary:\n        if word not in result:\n            result.append(word)\n            _dictionary_of_words_dp(dictionary, result)\n    return result\n\n# Dynamic programming solution with memoization\n# O(n)\ndef dictionary_of_words_dp_memo(dictionary):\n    def _dictionary_of_words_dp_memo(dictionary, result):\n        if len(result) > len(dictionary):\n            return result\n        for word in dictionary:\n            if word not in result:\n                result.append(word)\n                _dictionary_of_words_dp_memo(dictionary, result)\n        return result\n\n    return _dictionary_of_words_dp_memo(dictionary, [])\n\n# Dynamic programming solution with memoization, O(n^2)\ndef dictionary_of_words_dp_memo_2(dictionary):\n    return _dictionary_of_words_dp_memo_2(dictionary, [])\n\ndef _dictionary_of_words_dp_memo_2(dictionary, result):\n    if len(result) > len(dictionary):\n        return result\n    for word in dictionary:\n        if word not in result:\n            result.append(word)\n            _dictionary_of_words_dp_memo_2(dictionary, result)\n    return result\n\n# Dynamic programming solution with memoization, O(n^3",
    "class WordCounter(object):\n\n    def __init__(self, dictionary):\n        self.dictionary = dictionary\n\n    def get_count(self, word):\n        count = 0\n        for letter in word:\n            count += self.dictionary.get(letter, 0)\n        return count\n\n    def get_most_common_words(self, top):\n        return sorted(self.dictionary.items(), key=lambda x: x[1], reverse=True)[:top]\n\n    def count(self, word):\n        count = self.get_count(word)\n        return count\n\n    def get_most_common_words_with_frequency(self, top):\n        return sorted(self.dictionary.items(), key=lambda x: x[1], reverse=True)[:top]\n\n    def run(self):\n        \"\"\"\n        Run the program.\n        \"\"\"\n        self.dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n        self.count('abcd')\n        self.count('abcde')\n        self.count('abcdef')\n        self.count('abcdefg')\n        self.count('abcdefgh')\n        self.count('abcdefghi')\n        self.count('abcdefghij')\n        self.count('abcdefghijk')\n        self.count('abcdefghijkl')\n        self.count('abcdefghijklm')\n        self.count('abcdefghijklmn')\n        self.count('abcdefghijklmno')\n        self.count('abcdefghijklmnop')\n        self.count('abcdefghijklmnopq')\n        self.count('abcdefghijkl",
    "from collections import Counter\n\n\ndef find_most_common(dictionary, word):\n    \"\"\"\n    :type dictionary: List[str]\n    :type word: str\n    :rtype: List[str]\n    \"\"\"\n    counter = Counter(dictionary)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    print(find_most_common(['Hello', 'world', 'world', 'world'], 'world'))\n    print(find_most_common(['Hello', 'world', 'world', 'world'], 'Hello'))",
    "from collections import defaultdict\n\ndef most_common_words(words, n=5):\n    \"\"\"\n    Return the most common n words in a list of words.\n\n    @param words: List of words\n    @param n: Number of most common words to return\n    @return: List of most common words\n    \"\"\"\n    d = defaultdict(int)\n    for word in words:\n        d[word] += 1\n\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)[:n]\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    print(most_common_words(words, 5))",
    "import collections\nimport operator\n\n\ndef most_common_words(dictionary, k):\n    \"\"\"\n    :type dictionary: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    mw = collections.Counter(dictionary)\n    sorted_mw = sorted(mw.items(), key=operator.itemgetter(1), reverse=True)\n    return sorted_mw[:k]\n\n\nif __name__ == '__main__':\n    print(most_common_words([\"hello\", \"world\"], 1))\n    print(most_common_words([\"hello\", \"world\", \"hello\", \"world\"], 2))",
    "import collections\n\nwords = ['apple', 'apples', 'orange', 'oranges', 'banana', 'bananas']\n\n# Count the most common words\nmost_common = collections.Counter(words).most_common(2)\nprint(most_common)",
    "# Definition for a word.\nclass Word(object):\n    def __init__(self, word):\n        \"\"\"\n        :type word: str\n        \"\"\"\n        self.word = word\n\n    def __str__(self):\n        return self.word\n\n\nclass Solution(object):\n    def mostFrequent(self, dictionary):\n        \"\"\"\n        :type dictionary: List[Word]\n        :rtype: List[Word]\n        \"\"\"\n        word_count = collections.Counter(dictionary)\n        result = []\n        for word, count in word_count.items():\n            if count == max(word_count.values()):\n                result.append(word)\n        return result",
    "#!/usr/bin/env python\n\nimport collections\n\ndictionary = {\n    \"cat\": 3,\n    \"dog\": 2,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"cat\": 3,\n    \"cat\": 3,\n    \"dog\": 2,\n    \"dog\": 2,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"cat\": 3,\n    \"cat\": 3,\n    \"dog\": 2,\n    \"dog\": 2,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"mouse\": 1,\n    \"",
    "# Definition for a word dictionary.\nclass WordDict(object):\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        self.words = words\n        self.word_counts = defaultdict(int)\n        for word in words:\n            self.word_counts[word] += 1\n\n    def most_common(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return sorted(self.word_counts.items(), key=lambda x: x[1], reverse=True)[:n]\n\n\n# Your WordDict object will be instantiated and called as such:\n# obj = WordDict(words)\n# param_1 = obj.most_common(n)",
    "import collections\n\n# @include\ndef most_common_words(words, k):\n    word_count = collections.Counter(words)\n    return [word for word, count in word_count.most_common(k)]\n# @exclude\n\n\ndef main():\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'cat',\n             'cat', 'cat', 'bat', 'bat', 'bat', 'bat', 'bat', 'bat',\n             'bat', 'bat', 'bat', 'bat', 'bat', 'bat', 'bat', 'bat',\n             'bat', 'bat', 'bat', 'bat', 'bat', 'bat', 'bat', 'bat',\n             'bat', 'bat', 'bat', 'bat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat',\n             'rat', '",
    "def most_common(dictionary, n):\n    \"\"\"\n    Returns the n most common words in dictionary.\n    \"\"\"\n    # Create a dictionary of counts for each word\n    counts = {}\n    for word in dictionary:\n        counts[word] = counts.get(word, 0) + 1\n\n    # Sort the dictionary of counts by the number of counts\n    sorted_counts = sorted(counts.iteritems(), key=operator.itemgetter(1))\n\n    # Remove the top n most common words\n    return [x[0] for x in sorted_counts[:n]]\n\n# Test Cases\n# d = {\"the\", \"the\", \"the\", \"the\", \"and\", \"and\", \"and\", \"and\", \"and\", \"and\"}\n# n = 2\n# print most_common(d, n)\n# d = {\"the\", \"the\", \"the\", \"the\", \"and\", \"and\", \"and\", \"and\", \"and\", \"and\"}\n# n = 5\n# print most_common(d, n)\n# d = {\"the\", \"the\", \"the\", \"the\", \"and\", \"and\", \"and\", \"and\", \"and\", \"and\"}\n# n = 10\n# print most_common(d, n)\n\n# Your code here",
    "def most_common(dictionary, num_words):\n    \"\"\"\n    Returns the most common `num_words` words from the given dictionary.\n\n    :param dictionary: the dictionary of words\n    :param num_words: the number of most common words to return\n    :return: a list of the most common words\n    \"\"\"\n    # write your code here\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n\ndef test_most_common():\n    dictionary = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}\n    assert most_common(dictionary, 3) == ['c', 'd', 'e']\n    assert most_common(dictionary, 4) == ['a', 'b', 'c', 'd']\n    assert most_common(dictionary, 5) == ['a', 'b', 'c', 'd', 'e']\n\nif __name__ == '__main__':\n    test_most_common()",
    "from collections import Counter\n\n\nclass Solution:\n    def mostFrequent(self, dictionary):\n        \"\"\"\n        :type dictionary: List[str]\n        :rtype: List[str]\n        \"\"\"\n        counter = Counter(dictionary)\n        return counter.most_common(1)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    words = ['cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'cat', 'cats',\n             'bat', 'bats', 'rat', 'rats', 'cat', 'cats', 'bat', 'bats',\n             'rat', 'rats', 'cat', 'cats', 'bat', 'bats', 'rat', 'rats',\n             'cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'dog', 'dogs',\n             'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs']\n    words = ['cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'cat', 'cats',\n             'bat', 'bats', 'rat', 'rats', 'cat', 'cats', 'bat', 'bats',\n             'rat', 'rats', 'cat', 'cats', 'bat', 'bats', 'rat', 'rats',\n             'cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'dog', 'dogs',\n             'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs']\n    words = ['cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'cat', 'cats',\n             'bat', 'bats', 'rat', 'rats', 'cat', 'cats', 'bat', 'bats',\n             'rat', 'rats', 'cat', 'cats', 'bat', 'bats', 'rat', 'rats',\n             'cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'dog', 'dogs',\n             'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs', 'dog', 'dogs']\n    words = ['cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'cat', 'cats',\n             '",
    "from collections import Counter\n\nwords = ['cat', 'cats', 'bat', 'bats', 'rat', 'rats', 'cat', 'cats', 'dog', 'dogs', 'dog', 'dogs']\n\ndef most_common(dictionary):\n    counter = Counter(dictionary)\n    most_common_word = sorted(counter, key=counter.get, reverse=True)[0]\n    return most_common_word\n\nprint(most_common(words))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def mostCommon(self, words, k):\n        \"\"\"\n        :type words: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        dic = {}\n        for w in words:\n            dic[w] = dic.get(w, 0) + 1\n\n        return sorted(dic.items(), key=lambda x: x[1], reverse=True)[:k]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.mostCommon([\"a\", \"bbb\", \"cc\", \"dddd\"], 2)\n    print s.mostCommon([\"a\", \"bbb\", \"cc\", \"dddd\", \"e\"], 2)\n    print s.mostCommon([\"a\", \"bbb\", \"cc\", \"dddd\", \"e\", \"ee\"], 2)\n    print s.mostCommon([\"a\", \"bbb\", \"cc\", \"dddd\", \"e\", \"ee\", \"e\"], 2)\n    print s.mostCommon([\"a\", \"bbb\", \"cc\", \"dddd\", \"e\", \"ee\", \"e\", \"eeee\"], 2)",
    "import collections\n\nwords = [\n    \"cat\", \"pig\", \"dog\", \"elephant\", \"mouse\", \"cat\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\", \"elephant\",\n    \"elephant\",",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a string, find the most frequently occurring substring\n\"\"\"\n\nimport string\nimport collections\n\ndef most_frequent_substring(word_list, word):\n    count = collections.Counter(word)\n    return list(count.most_common(1))[0][0]\n\ndef most_frequent_substring_2(word_list, word):\n    return word_list[word_list.index(word)]\n\n# word_list = [\"hello\", \"goodbye\", \"goodbye\", \"hello\", \"hello\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\"]\n# most_frequent_substring(word_list, \"hello\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word_list, \"goodbye\")\n# most_frequent_substring(word",
    "#!/usr/bin/env python\n\nfrom collections import defaultdict\nimport sys\n\ndef most_common(dictionary):\n    \"\"\"\n    :param dictionary: A dictionary of words and the number of times\n    they appear.\n    :return: A list of the most common words in the dictionary.\n    \"\"\"\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <dictionary>\".format(sys.argv[0]))\n        exit(1)\n\n    dictionary = defaultdict(int)\n    for line in sys.stdin:\n        word, count = line.strip().split(' ', 1)\n        dictionary[word] += int(count)\n\n    print(most_common(dictionary))",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    count = collections.Counter(dictionary)\n    return sorted(count.keys(), reverse=True)\n\nif __name__ == \"__main__\":\n    words = \"The quick brown fox jumped over the lazy dog\".split()\n    print(most_common(words))\n    words = \"The quick brown fox jumped over the lazy dog\".split()\n    print(most_common(words))",
    "import collections\nimport os\n\n\ndef get_most_common(dictionary, k):\n    \"\"\"\n    Get the most common words in a dictionary.\n\n    :type dictionary: Dictionary[str, int]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    most_common_words = collections.Counter(dictionary.keys())\n    return [word for word, count in most_common_words.most_common(k)]\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    file_path = os.path.join(os.getcwd(), 'dictionary.txt')\n    dictionary = collections.defaultdict(int)\n    for line in open(file_path):\n        dictionary[line.rstrip()] += 1\n\n    print get_most_common(dictionary, 2)\n\n\nif __name__ == '__main__':\n    main()",
    "# Function to count the most common words in a dictionary\ndef most_common_words(dictionary, n=10):\n    # Create a dictionary of word counts\n    word_counts = collections.defaultdict(int)\n    # Iterate over the dictionary\n    for word in dictionary:\n        # Update the word count\n        word_counts[word] += 1\n    # Return the most common words\n    return sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:n]\n\n# Test the most_common_words function\ndictionary = {\n    'python': 4,\n    'javascript': 2,\n    'c': 3,\n    'java': 1,\n    'go': 1,\n    'java': 2,\n    'javascript': 1\n}\n\n# Assert that the most common words are correct\nprint(most_common_words(dictionary))",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: dict\n    \"\"\"\n    # get the most common words\n    most_common = {}\n    for word in dictionary:\n        if word in most_common:\n            if word in most_common:\n                most_common[word] += 1\n            else:\n                most_common[word] = 1\n        else:\n            most_common[word] = 1\n    # return the most common words\n    return most_common",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def mostCommon(self, dict):\n        \"\"\"\n        :type dict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        import collections\n        dic = collections.defaultdict(list)\n        for word in dict:\n            dic[word].append(word)\n        return sorted(dic.items(), key=lambda x: len(x[1]), reverse=True)\n\n\nif __name__ == \"__main__\":\n    so = Solution()\n    dict = [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]\n    print so.mostCommon(dict)",
    "# write your code here\n\nimport collections\n\ndef most_common(dictionary, k):\n    # write your code here\n    return collections.Counter(dictionary).most_common(k)\n\n\nif __name__ == '__main__':\n    dictionary = {'a': 5, 'b': 2, 'c': 3, 'd': 1, 'e': 6}\n    print most_common(dictionary, 3)",
    "#!/usr/bin/env python\n\n# https://github.com/amitk/problem-solutions/blob/master/coding/most_common.py\n# \n# For the given dictionary, return a list of the most common words.\n# \n# Example:\n#\n# Input:\n# [\"dog\", \"cat\", \"cat\", \"fox\", \"fox\", \"fox\"]\n# \n# Output:\n# [\"cat\", \"dog\", \"fox\"]\n# \n# Explanation:\n# The most common words are \"cat\", \"dog\", \"fox\".\n# \n# Note:\n# The number of unique words is at most 1000.\n# The length of the given dictionary will be in the range of [1, 1000].\n# The given dictionary will only contain lowercase letters.\n# \n# Related Topics\n# Hash Table\n# \n\nclass Solution(object):\n    def countMostCommon(self, dict):\n        \"\"\"\n        :type dict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        # Hash table\n        table = {}\n        # Count the number of times a word appears in the dictionary\n        for word in dict:\n            # If the word is already in the table, increment the count\n            if word in table:\n                table[word] += 1\n            # Otherwise, add the word to the table and increment the count\n            else:\n                table[word] = 1\n        # Return the list of the most common words\n        return sorted(table.keys(), reverse=True)",
    "# Complete the countMostFrequentWords function below.\n\ndef countMostFrequentWords(words, dictionary):\n    \"\"\"\n    :type words: List[str]\n    :type dictionary: Dict[str, int]\n    :rtype: List[str]\n    \"\"\"\n    # Write your code here.\n    count = {}\n    for word in words:\n        if word in dictionary:\n            if word not in count:\n                count[word] = 1\n            else:\n                count[word] += 1\n    result = []\n    for item in count:\n        result.append((item, count[item]))\n    result.sort(key=lambda x: x[1], reverse=True)\n    return [x[0] for x in result]\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    dictionary = {'cat': 3, 'bat': 2, 'rat': 4}\n    print(countMostFrequentWords(words, dictionary))",
    "import collections\n\ndef most_common(dictionary, word_frequency_file):\n    \"\"\"\n    :type dictionary: collections.OrderedDict\n    :type word_frequency_file: str\n    :rtype: list\n    \"\"\"\n    # dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    # dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    # dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    # dictionary = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1",
    "# https://www.hackerrank.com/challenges/word-count/problem\n\nimport collections\nimport os\n\ndef count(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[int]\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for word in dictionary:\n        freq[word] += 1\n\n    return [freq[word] for word in freq]\n\nif __name__ == '__main__':\n    with open(os.environ['OUTPUT_PATH'], 'w') as out:\n        out.write('\\n'.join(map(str, count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']))))",
    "import collections\n\nclass Solution(object):\n    def __init__(self, dict):\n        \"\"\"\n        :type dict: List[str]\n        \"\"\"\n        self.dict = dict\n\n    def mostFrequent(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        freq = collections.Counter(words)\n        return freq.most_common()\n\n\nif __name__ == '__main__':\n    dict = ['a', 'ab', 'abc', 'b', 'bc', 'bcd', 'c', 'cd', 'd', 'de', 'e', 'f']\n    print(Solution(dict).mostFrequent(['a', 'de', 'bc', 'cd', 'f']))",
    "def most_common(dictionary, num_words):\n    \"\"\"\n    dictionary: a dictionary of words, as a set of keys\n    num_words: number of most common words to return\n    \"\"\"\n    most_common = {}\n    for word in dictionary:\n        most_common[word] = most_common.get(word, 0) + 1\n    return most_common.most_common(num_words)\n\nif __name__ == \"__main__\":\n    dictionary = {'apple':2, 'banana':2, 'orange':1, 'apple':2}\n    most_common(dictionary, 3)",
    "from collections import defaultdict\n\nwords = [\"cat\", \"bat\", \"rat\", \"cat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n\ndef most_common(word_list, n):\n    d = defaultdict(int)\n    for word in word_list:\n        d[word] += 1\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)[:n]\n\nprint(most_common(words, 3))",
    "# Your code here\n\ndic = {'word1': 3, 'word2': 3, 'word3': 1, 'word4': 2}\n\ndef most_common(dictionary, n):\n    \"\"\"\n    :type dictionary: dict\n    :type n: int\n    :rtype: dict\n    \"\"\"\n    count = {}\n    for word, value in dictionary.items():\n        if value > 0:\n            if value not in count:\n                count[value] = 1\n            else:\n                count[value] += 1\n    return count.most_common(n)\n\n\ndef most_common_dict(dictionary, n):\n    \"\"\"\n    :type dictionary: dict\n    :type n: int\n    :rtype: dict\n    \"\"\"\n    count = {}\n    for word, value in dictionary.items():\n        if value > 0:\n            if value not in count:\n                count[value] = 1\n            else:\n                count[value] += 1\n    return count.most_common(n)\n\n\ndef most_common_list(dictionary, n):\n    \"\"\"\n    :type dictionary: list[str]\n    :type n: int\n    :rtype: list[str]\n    \"\"\"\n    count = {}\n    for word in dictionary:\n        if word in count:\n            if word not in count:\n                count[word] = 1\n            else:\n                count[word] += 1\n    return count.most_common(n)",
    "#!/usr/bin/env python\n\n#\n# from: https://www.hackerrank.com/challenges/dict-words-count\n#\n\nfrom collections import Counter\n\n\ndef dict_words_count(words, dictionary):\n    counter = Counter(words)\n    counts = [counter[key] for key in counter.keys()]\n    counts.sort(reverse=True)\n    return counts\n\n\nif __name__ == '__main__':\n    words = raw_input().split()\n    dictionary = raw_input().split()\n    print dict_words_count(words, dictionary)",
    "from collections import Counter\n\n\ndef most_common_words(dictionary, n):\n    \"\"\"\n    Returns the most common words from dictionary.\n\n    Arguments:\n    dictionary -- a dictionary of words and their frequencies\n    n -- the number of most common words to return\n    \"\"\"\n    counter = Counter(dictionary)\n    return [counter.most_common(n)]\n\n\nif __name__ == \"__main__\":\n    dictionary = {'a': 5, 'b': 3, 'c': 1, 'd': 2, 'e': 3}\n    print(most_common_words(dictionary, 2))",
    "from collections import Counter\n\nwords = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n\ndef most_common(dictionary):\n    \"\"\"\n    Return the most common words in a dictionary\n    \"\"\"\n    return Counter(words).most_common()\n\nprint(most_common(words))",
    "# https://www.hackerrank.com/challenges/dictionary-words/problem\n# http://www.codechef.com/problems/DICTWORD/\n# https://www.codechef.com/problems/DICTWORD/discuss/3124/C-Python-Implementation-of-Dictionary-words-in-Python\n\n\n# Dictionary words\ndef dictionary_words(dictionary, word):\n    # Count number of occurrences of word in dictionary\n    return dictionary.get(word, 0) + 1\n\n\ndef most_common_word(dictionary, max_word_count):\n    # Initialize a set with all unique words in the dictionary\n    set_of_words = set()\n    # For each word in dictionary\n    for word in dictionary:\n        # Add the word to the set if it is not already in the set\n        if word not in set_of_words:\n            set_of_words.add(word)\n    # Count the number of unique words in the set\n    unique_word_count = len(set_of_words)\n    # Sort the set of words in descending order of frequency\n    set_of_words = sorted(set_of_words, key=dictionary.get, reverse=True)\n    # Return the most common word in the set of words\n    return set_of_words[:max_word_count]\n\n\n# Sample Input\n# {'cat': 1, 'dog': 1, 'pig': 1,'mouse': 2, 'dog': 2, 'cow': 2}\n# cat\n# pig\n# pig\n# mouse\n# cow\n# Sample Output\n# pig\n# mouse\n# cow\n# cat\n# dog\n# cat\n# mouse\n# cow\n# dog\n# pig\n# mouse\n# cow\n# cat\n# mouse\n# cow\n# pig\n# dog\n# pig\n# mouse\n# cow\n# mouse\n# cow\n# dog\n# pig\n# mouse\n# cow\n# pig\n# mouse\n# cow\n# pig\n# mouse\n# cow\n# pig\n# dog\n# pig\n# mouse\n# cow\n# mouse\n# cow\n# dog\n# pig\n# mouse\n# cow\n# pig",
    "import collections\n\n# Returns the most common words in a dictionary of words.\ndef most_common(dictionary):\n    words = collections.Counter(dictionary)\n    return words.most_common(1)\n\n# Test Cases\n\ntest_cases = [\n    # [['foo', 'bar', 'baz'], ['foo', 'bar', 'bar', 'foo', 'baz']]\n    # [['bar', 'foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]\n    [[], [[]]],\n    [[], [['foo', 'bar', 'baz'], ['foo', 'bar', 'bar', 'foo', 'baz']]],\n    [[], [['bar', 'foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['bar', 'foo', 'foo', 'bar', 'foo', 'bar'], ['bar', 'foo']]],\n    [[], [['bar', 'foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['bar', 'foo', 'foo', 'bar', 'foo', 'bar'], ['bar', 'foo']]],\n    [[], [['bar', 'foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['bar', 'foo', 'foo', 'bar', 'foo', 'bar'], ['bar', 'foo']]],\n    [[], [['bar', 'foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['foo'], ['foo', 'bar', 'foo', 'bar', 'foo', 'bar']]],\n    [[], [['bar', '",
    "import collections\n\ndef most_common_words(dictionary, N=10):\n    \"\"\"\n    dictionary: dictionary of words and their frequencies\n    N: the number of most common words to return\n    \"\"\"\n    counter = collections.Counter(dictionary)\n    return [k for k, v in counter.most_common(N)]\n\ndef test_most_common_words():\n    assert most_common_words([\"apple\", \"orange\", \"banana\", \"apple\"]) == [\"apple\"]\n    assert most_common_words([\"a\", \"b\", \"c\", \"c\", \"b\", \"a\", \"c\", \"b\", \"a\"]) == [\"a\", \"b\", \"c\"]\n    assert most_common_words([\"a\", \"b\", \"c\", \"a\", \"a\", \"c\", \"a\", \"b\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\nif __name__ == \"__main__\":\n    test_most_common_words()",
    "def most_common_words(dictionary, k):\n    \"\"\"\n    :type dictionary: List[str]\n    :type k: int\n    :rtype: List[str]\n    \"\"\"\n    dictionary_counts = {}\n    for word in dictionary:\n        if word in dictionary_counts:\n            dictionary_counts[word] += 1\n        else:\n            dictionary_counts[word] = 1\n    return sorted(dictionary_counts.items(), key=lambda x: x[1], reverse=True)[:k]\n\n\nif __name__ == '__main__':\n    with open(\"../sample/words.txt\") as f:\n        dictionary = f.read().split(\"\\n\")\n    print(most_common_words(dictionary, 3))",
    "from collections import Counter\n\nwords = ['hello', 'world', 'python', 'java', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python']\n\n# print(Counter(words))\n\nprint(Counter(words).most_common(10))",
    "def most_common(dictionary):\n    \"\"\"\n    :type dictionary: List[str]\n    :rtype: List[str]\n    \"\"\"\n    word_count = defaultdict(int)\n    for word in dictionary:\n        word_count[word] += 1\n    return [word for word,count in sorted(word_count.items(),key=lambda (k,v):(v,k))]",
    "#!/usr/bin/env python\n# coding: utf-8\n\nimport os\nimport string\nimport sys\n\nfrom collections import defaultdict\n\n\nclass WordDict(object):\n    \"\"\"\n    A dictionary of words that keeps track of how many times each word occurs in the dictionary.\n    \"\"\"\n\n    def __init__(self):\n        self.word_counts = defaultdict(int)\n\n    def add_word(self, word):\n        self.word_counts[word] += 1\n\n    def get_most_common_words(self, num_words):\n        \"\"\"\n        Find the most common words in the dictionary.\n        Return a list of the most common words.\n        \"\"\"\n        # Sort the dictionary by most common words\n        sorted_keys = sorted(self.word_counts.keys(), key=self.word_counts.get, reverse=True)\n\n        # Get the top num_words most common words\n        return [sorted_keys[i:i + num_words] for i in range(len(sorted_keys) - num_words + 1)]\n\n\ndef load_words(filename):\n    \"\"\"\n    Load a file of words and return a list of those words.\n    \"\"\"\n    words = []\n    with open(filename, \"r\") as f:\n        for line in f:\n            words.append(line.strip())\n    return words\n\n\ndef read_file(filename):\n    \"\"\"\n    Read a file of words and return a WordDict object that keeps track of how many times each word occurs in the dictionary.\n    \"\"\"\n    words = load_words(filename)\n    wd = WordDict()\n    for word in words:\n        wd.add_word(word)\n    return wd\n\n\ndef main(words_filename, num_words):\n    wd = read_file(words_filename)\n    print wd.get_most_common_words(num_words)\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        main(sys.argv[1], int(sys.argv[2]))\n    else:\n        print \"Usage: python most_common_words.py words",
    "import collections\n\ndef most_common_words(words, top=None):\n    \"\"\"\n    Given a dictionary of words and an optional top, return a list of the most\n    common words in the dictionary.\n    \"\"\"\n    return collections.Counter(words).most_common(top)\n\nif __name__ == '__main__':\n    words = {\n        'cat': 1,\n        'bat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        'rat': 1,\n        '",
    "#!/usr/bin/env python\n\nimport sys\n\ndef most_common(dictionary, n=3):\n    \"\"\"\n    Returns a list of the most common words in a dictionary.\n    \"\"\"\n    counts = {}\n    for word in dictionary:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts.most_common(n)\n\nif __name__ == '__main__':\n    dictionary = {}\n    with open(sys.argv[1]) as f:\n        for line in f:\n            dictionary[line.strip()] = True\n    print most_common(dictionary)",
    "# Import the library to count the words in a dictionary.\nfrom collections import Counter\n\n# Import the dictionary to store the words in.\nwords = {'cat': 3, 'bat': 2, 'rat': 2, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1, 'rat': 1}\n\n\ndef most_common(dictionary):\n    # Create a list to hold the most common words.\n    most_common_list = []\n    # Create a counter to count the number of times each word appears.\n    counter = Counter(dictionary)\n    # Loop over the counter and add the word to the most common list.\n    for word, count in counter.most_common():\n        most_common_list.append(word)\n    # Return the most common list.\n    return most_common_list\n\n\ndef main():\n    # Print the most common words.\n    print(most_common(words))\n\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}