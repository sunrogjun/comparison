{
  "problem": {
    "task_id": "MBPP/47",
    "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
    "test_list": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ],
    "challenge_test_list": [
      "assert compute_Last_Digit(3,7) == 0",
      "assert compute_Last_Digit(20,23) == 6",
      "assert compute_Last_Digit(1021,1024) == 4"
    ],
    "problem_id": 36
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def lastDigit(a,b):\n    if b == 0:\n        return 1\n    if a % b == 0:\n        return b\n    return lastDigit(a, b / 2)\n\nprint lastDigit(10, 3)",
    "def last_digit_of_factorial(a, b):\n    \"\"\"\n    :param a: the first number\n    :param b: the second number\n    :return: the last digit of the factorial of a\n    \"\"\"\n    return int(str(a)[-1])\n\nif __name__ == '__main__':\n    assert last_digit_of_factorial(1, 10) == 1\n    assert last_digit_of_factorial(2, 10) == 2\n    assert last_digit_of_factorial(3, 10) == 3\n    assert last_digit_of_factorial(4, 10) == 4\n    assert last_digit_of_factorial(5, 10) == 5\n    assert last_digit_of_factorial(6, 10) == 6\n    assert last_digit_of_factorial(7, 10) == 7\n    assert last_digit_of_factorial(8, 10) == 8\n    assert last_digit_of_factorial(9, 10) == 9\n    assert last_digit_of_factorial(10, 10) == 10\n    assert last_digit_of_factorial(11, 10) == 10\n    assert last_digit_of_factorial(12, 10) == 10\n    assert last_digit_of_factorial(13, 10) == 10\n    assert last_digit_of_factorial(14, 10) == 10\n    assert last_digit_of_factorial(15, 10) == 10\n    assert last_digit_of_factorial(16, 10) == 10\n    assert last_digit_of_factorial(17, 10) == 10\n    assert last_digit_of_factorial(18, 10) == 10\n    assert last_digit_of_factorial(19, 10) == 10\n    assert last_digit_of_factorial(20, 10) == 10\n    assert last_digit_of_factorial(21, 10) == 10\n    assert last_digit_of_factorial(22, 10) == 10\n    assert last_digit_of_factorial(23, 10) == 10\n    assert last_digit_of_factorial(24, 10) == 10\n    assert",
    "def find_last_digit(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a % b\n\nprint find_last_digit(3, 9)",
    "def last_digit(a, b):\n    return str(a)[-1]\n\nprint last_digit(1,1)\nprint last_digit(2,2)\nprint last_digit(3,3)\nprint last_digit(4,4)\nprint last_digit(5,5)\nprint last_digit(6,6)\nprint last_digit(7,7)\nprint last_digit(8,8)\nprint last_digit(9,9)\nprint last_digit(10,10)\nprint last_digit(11,11)\nprint last_digit(12,12)\nprint last_digit(13,13)\nprint last_digit(14,14)\nprint last_digit(15,15)\nprint last_digit(16,16)\nprint last_digit(17,17)\nprint last_digit(18,18)\nprint last_digit(19,19)\nprint last_digit(20,20)\nprint last_digit(21,21)\nprint last_digit(22,22)\nprint last_digit(23,23)\nprint last_digit(24,24)\nprint last_digit(25,25)\nprint last_digit(26,26)\nprint last_digit(27,27)\nprint last_digit(28,28)\nprint last_digit(29,29)\nprint last_digit(30,30)\nprint last_digit(31,31)\nprint last_digit(32,32)\nprint last_digit(33,33)\nprint last_digit(34,34)\nprint last_digit(35,35)\nprint last_digit(36,36)\nprint last_digit(37,37)\nprint last_digit(38,38)\nprint last_digit(39,39)\nprint last_digit(40,40)\nprint last_digit(41,41)\nprint last_digit(42,42)\nprint last_digit(43,43)\nprint last_digit(44,44)\nprint last_digit(45,45)\nprint last_digit(46,46)\nprint last_digit(47,47)\nprint last_digit(48,48)\nprint last_digit(49,49)",
    "def last_digit(a, b):\n    if a == 1:\n        return '1'\n    elif a == 2:\n        return '2'\n    elif a == 3:\n        return '3'\n    elif a == 4:\n        return '4'\n    elif a == 5:\n        return '5'\n    elif a == 6:\n        return '6'\n    elif a == 7:\n        return '7'\n    elif a == 8:\n        return '8'\n    elif a == 9:\n        return '9'\n    elif a == 10:\n        return '0'\n    elif a == 11:\n        return '1'\n    elif a == 12:\n        return '2'\n    elif a == 13:\n        return '3'\n    elif a == 14:\n        return '4'\n    elif a == 15:\n        return '5'\n    elif a == 16:\n        return '6'\n    elif a == 17:\n        return '7'\n    elif a == 18:\n        return '8'\n    elif a == 19:\n        return '9'\n    else:\n        return '0'\n\nif __name__ == \"__main__\":\n    print last_digit(5, 4)\n    print last_digit(13, 12)\n    print last_digit(12, 13)\n    print last_digit(12, 14)\n    print last_digit(12, 15)\n    print last_digit(12, 16)\n    print last_digit(12, 17)\n    print last_digit(12, 18)\n    print last_digit(12, 19)\n    print last_digit(12, 20)\n    print last_digit(12, 21)\n    print last_digit(12, 22)\n    print last_digit(12, 23)\n    print last_digit(12, 24)\n    print last_digit(12, 25)\n    print last_digit(12, 26)\n    print last_digit(12, 27)\n    print last_digit(12, 28)\n    print last_digit(12, 29)\n    print last_digit",
    "# The function should return the last digit of factorial of a when factorial of a divides factorial of b.\n\n# Example\n# For a = 3 and b = 7, the function should return 2.\n# For a = 7 and b = 3, the function should return 3.\n# For a = 10 and b = 20, the function should return 2.\n\n# The last digit is the number of times a divides b.\ndef last_digit(a, b):\n    return int(str(a)[-1])\n\n# Test Cases\nprint(last_digit(3, 7))\nprint(last_digit(7, 3))\nprint(last_digit(10, 20))",
    "def find_last_digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n    for i in range(a, -1, -1):\n        factorial_a = factorial_a * i\n    for i in range(b, -1, -1):\n        factorial_b = factorial_b * i\n    if factorial_a % factorial_b == 0:\n        return factorial_a / factorial_b\n    else:\n        return -1\n\nprint(find_last_digit(12, 7))\nprint(find_last_digit(12, 13))\nprint(find_last_digit(12, -1))",
    "def last_digit(factorial, factorial_of_b):\n    return int(factorial / factorial_of_b)\n\nif __name__ == \"__main__\":\n    print last_digit(7, 3)\n    print last_digit(15, 2)\n    print last_digit(17, 3)\n    print last_digit(17, 4)\n    print last_digit(17, 5)\n    print last_digit(17, 6)",
    "def fact(n):\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n - 1)\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef find_last_digit(n, m):\n    if n == 0 or m == 0:\n        return 0\n    else:\n        return int(str(fact(n) / fact(m) % 10))\n\nif __name__ == '__main__':\n    print(find_last_digit(3, 7))",
    "def last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    n_fact = factorial(n)\n    b_fact = factorial(n - 1)\n    \n    return int(str(n_fact)[-1])\n\nif __name__ == '__main__':\n    print last_digit(10)\n    print last_digit(1)\n    print last_digit(0)",
    "def factorial_last_digit(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"a must be positive\")\n\n    if b < 0:\n        raise ValueError(\"b must be positive\")\n\n    if a == 0:\n        return 0\n\n    if b == 0:\n        return 1\n\n    if a > b:\n        return factorial_last_digit(b, a)\n\n    if a % b == 0:\n        return b\n\n    return factorial_last_digit(a - 1, b)\n\n\nif __name__ == \"__main__\":\n    assert factorial_last_digit(7, 12) == 1\n\n    assert factorial_last_digit(13, 8) == 5\n\n    assert factorial_last_digit(14, 8) == 6\n\n    assert factorial_last_digit(15, 8) == 5\n\n    assert factorial_last_digit(16, 8) == 5",
    "def find_last_digit(a, b):\n    if a == 0:\n        return 0\n    if a < 0:\n        return -1\n\n    result = 0\n    while a > 0:\n        result = (result * 10 + a % 10) % b\n        a //= 10\n    return result\n\n\nif __name__ == '__main__':\n    assert find_last_digit(2, 3) == 0\n    assert find_last_digit(3, 3) == 0\n    assert find_last_digit(3, 5) == 1\n    assert find_last_digit(5, 5) == 0\n    assert find_last_digit(5, 7) == 2\n    assert find_last_digit(7, 7) == 0\n    assert find_last_digit(7, 13) == 2",
    "def lastDigit(a, b):\n    # Your code here\n    if a == 1:\n        return 1\n    else:\n        return int(str(a)[-1])\n\nif __name__ == \"__main__\":\n    print(lastDigit(4, 6))",
    "def last_digit(n, m):\n    return 1 if n % 10 == 0 else 0\n\nif __name__ == '__main__':\n    assert last_digit(7, 4) == 1\n    assert last_digit(7, 6) == 2\n    assert last_digit(7, 7) == 0\n    assert last_digit(7, 8) == 1\n    assert last_digit(7, 9) == 1\n    assert last_digit(7, 10) == 1\n    assert last_digit(7, 11) == 0\n    assert last_digit(7, 12) == 0\n    assert last_digit(7, 13) == 0\n    assert last_digit(7, 14) == 1\n    assert last_digit(7, 15) == 1\n    assert last_digit(7, 16) == 1\n    assert last_digit(7, 17) == 0\n    assert last_digit(7, 18) == 1\n    assert last_digit(7, 19) == 1\n    assert last_digit(7, 20) == 0\n    assert last_digit(7, 21) == 1\n    assert last_digit(7, 22) == 0\n    assert last_digit(7, 23) == 0\n    assert last_digit(7, 24) == 1\n    assert last_digit(7, 25) == 1\n    assert last_digit(7, 26) == 0\n    assert last_digit(7, 27) == 1\n    assert last_digit(7, 28) == 1\n    assert last_digit(7, 29) == 1\n    assert last_digit(7, 30) == 0\n    assert last_digit(7, 31) == 1\n    assert last_digit(7, 32) == 0\n    assert last_digit(7, 33) == 0\n    assert last_digit(7, 34) == 1\n    assert last_digit(7, 35) == 1\n    assert last_digit(7, 36) == 0\n    assert last_digit(7, 37) == 1\n    assert last_digit(7, 38) == 1\n    assert last_digit(7, 39) == 0\n    assert last_digit(7, 40) == 1\n    assert last_digit(7, 41",
    "def last_digit(n, m):\n    if m == 0:\n        return 1\n    else:\n        return int(str(n)[-1]) % 10\n\n\ndef main():\n    print(last_digit(4, 3))\n    print(last_digit(3, 4))\n    print(last_digit(8, 4))\n    print(last_digit(4, 9))\n\nif __name__ == '__main__':\n    main()",
    "def last_digit(n, m):\n    \"\"\"\n    Find the last digit of the factorial of n.\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    return int(str(n)[-1])\n\n\ndef factorial_of_a(n):\n    \"\"\"\n    Factorial of a.\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n\n    return n * factorial_of_a(n - 1)\n\n\ndef factorial_of_b(n, m):\n    \"\"\"\n    Factorial of b.\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    if m == 0:\n        return 1\n\n    return n * factorial_of_b(n, m - 1)\n\n\ndef factorial_of_a_and_b(n, m):\n    \"\"\"\n    Factorial of a and b.\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    if m == 0:\n        return 1\n\n    return factorial_of_a(n) * factorial_of_b(n, m - 1)\n\n\ndef factorial_of_a_and_b_2(n, m):\n    \"\"\"\n    Factorial of a and b.\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    if m == 0:\n        return 1\n\n    return factorial_of_a(n) * factorial_of_b(n, m - 1)\n\n\ndef factorial_of_a_and_b_3(n, m):\n    \"\"\"\n    Factorial of a and b.\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    if m == 0:\n        return 1\n\n    return factorial_of_a(n) * factorial_of_b(n, m - 1)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(factorial_of_a(10))\n    print(factorial_of_a_and_b(10, 10))\n    print(factorial",
    "def last_digit_of_factorial(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    a = int(a)\n    b = int(b)\n\n    if a == 1:\n        return 1\n\n    factorial_a = 1\n    for i in range(2, a + 1):\n        factorial_a *= i\n    factorial_b = 1\n    for i in range(2, b + 1):\n        factorial_b *= i\n    return int(factorial_a / factorial_b)\n\nif __name__ == '__main__':\n    assert last_digit_of_factorial(10, 9) == 2\n    assert last_digit_of_factorial(20, 21) == 3",
    "import math\n\ndef last_digit(a, b):\n    return int(math.floor(math.log(a, 10) / math.log(b, 10)) + 1)\n\n# test cases\n\nprint last_digit(1, 3)\nprint last_digit(5, 7)\nprint last_digit(10, 15)\nprint last_digit(100, 1000)\nprint last_digit(1000, 10000)\nprint last_digit(1000000, 10000000)\n\n# your code goes here",
    "def last_digit(a,b):\n    fact = 1\n    while fact < a:\n        fact = fact * 10\n    \n    while fact < b:\n        fact = fact * 10\n    \n    return int(str(fact)[-1])\n\nif __name__ == \"__main__\":\n    print last_digit(10, 100)",
    "def last_digit_of_factorial(a, b):\n    '''\n    Input:\n        a = the factorial of a\n        b = the factorial of b\n    Output:\n        The last digit of the factorial of a\n    '''\n    if b == 0:\n        return 0\n    else:\n        return int(str(a)[-1])\n\ndef factorial_last_digit(a):\n    '''\n    Input:\n        a = the factorial of a\n    Output:\n        The last digit of the factorial of a\n    '''\n    if a == 0:\n        return 0\n    else:\n        return int(str(a)[-1])\n\nprint(factorial_last_digit(10))\nprint(factorial_last_digit(15))\nprint(factorial_last_digit(20))\nprint(last_digit_of_factorial(10, 20))",
    "def last_digit(fact, fact_b):\n    fact = int(fact)\n    fact_b = int(fact_b)\n    if fact_b == 0:\n        return 0\n    if fact % fact_b == 0:\n        return str(fact / fact_b)\n    else:\n        return str(fact / fact_b)\n\ndef main():\n    fact = int(input(\"Enter the factorial of the number: \"))\n    fact_b = int(input(\"Enter the number to divide the factorial by: \"))\n    print(last_digit(fact, fact_b))\n\nif __name__ == '__main__':\n    main()",
    "def lastDigit(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    factorial = lambda x: 1 if x <= 1 else x * lastDigit(x - 1, m)\n    return factorial(n) / factorial(m) % 10\n\nclass Solution(object):\n    def lastDigit(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return lastDigit(n, m)",
    "def last_digit(a, b):\n    if b == 0:\n        return 1\n    else:\n        if a % b == 0:\n            return int(str(a/b)[-1])\n        else:\n            return last_digit(a, b-1)\n\nprint last_digit(5, 2)",
    "from __future__ import division\n\ndef last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return int(str(a) + str(b)) % 10\n\ndef last_digit_pow(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    return int(str(a) + str(b)) % 10\n\n\nif __name__ == '__main__':\n    assert last_digit(4, 2) == 0\n    assert last_digit_pow(4, 2) == 1",
    "from math import factorial\n\ndef last_digit_of_factorial(a, b):\n    return int(factorial(a) % factorial(b))\n\nprint(last_digit_of_factorial(3, 6))",
    "def last_digit(a, b):\n    factorial = 0\n    while b > 0:\n        factorial += 1\n        b /= 10\n    return a % 10\n\nprint last_digit(12, 24)",
    "def lastDigit(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    #factorial = lambda x: x * (x + 1) / 2\n    factorial = lambda x: x * (x - 1) / 2\n    result = 0\n    while n >= m:\n        result += 1\n        n -= 1\n    return result\n\n\nif __name__ == '__main__':\n    print lastDigit(10, 20)\n    print lastDigit(100, 200)",
    "#!/usr/bin/env python\n\ndef factorial_last_digit(a,b):\n    if a < 0 or b < 0:\n        return 0\n\n    # check for special cases\n    if a == 0 or b == 0:\n        return 1\n\n    if a == 1:\n        return 1\n\n    # convert to binary\n    a = str(a)\n    b = str(b)\n\n    # compute factorial of a\n    factorial = 0\n    for digit in a:\n        factorial = factorial * int(digit)\n    \n    # compute factorial of b\n    factorial = 0\n    for digit in b:\n        factorial = factorial * int(digit)\n    \n    # compute last digit of factorial of a\n    factorial = factorial * int(a[-1])\n\n    # convert to decimal\n    factorial = str(factorial)\n\n    # compute last digit of factorial of b\n    factorial = str(factorial)\n    \n    # remove the leading zeros\n    while(factorial[0] == '0'):\n        factorial = factorial[1:]\n\n    # convert to decimal\n    factorial = str(factorial)\n    \n    # return the last digit of the decimal\n    return int(factorial[-1])\n\nif __name__ == '__main__':\n    print factorial_last_digit(1,2)",
    "def factorial(n):\n    \"\"\"\n    factorial\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef lastDigit(n):\n    \"\"\"\n    lastDigit\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n % 10) * lastDigit(n - 1)\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(lastDigit(n))",
    "# Definition for integer\nclass Int:\n    def __init__(self, n):\n        self.n = n\n\n    def __str__(self):\n        return str(self.n)\n\n\ndef last_digit(a, b):\n    # write your code here\n    n = 1\n    while a >= 10:\n        n *= 10\n        a /= 10\n    while b >= 10:\n        n *= 10\n        b /= 10\n\n    return n % 10\n\n\nif __name__ == '__main__':\n    print(last_digit(10, 15))",
    "# http://www.tutorialspoint.com/python/python_factorial.htm\n\ndef last_digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n    last_digit = 0\n\n    for i in range(1, a+1):\n        factorial_a *= i\n    for i in range(1, b+1):\n        factorial_b *= i\n\n    if factorial_a % factorial_b == 0:\n        last_digit = int(factorial_a / factorial_b)\n    return last_digit\n\nprint last_digit(6, 9)",
    "def last_digit(a, b):\n    factorial_a = factorial(a)\n    factorial_b = factorial(b)\n    return int(str(factorial_a)[-1]) - int(str(factorial_b)[-1])\n\n\n\nprint last_digit(10, 15)",
    "def last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b < 0:\n        return last_digit(a, -b)\n    if a < b:\n        return last_digit(a, b - 1)\n    if a == b:\n        return 1\n    if a > b:\n        return last_digit(a - 1, b)\n    return last_digit(a - 1, b)",
    "def last_digit(n, fact):\n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    n is a positive integer\n    fact is a positive integer\n    return the last digit\n    \"\"\"\n    if n <= 0:\n        return 0\n    while fact >= n:\n        fact /= 10\n    return fact % 10\n\nif __name__ == '__main__':\n    print(last_digit(2, 5))",
    "def last_digit(a, b):\n    return a % b\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    4\n    2\n    Sample Output:\n    2\n    \"\"\"\n    print last_digit(4, 2)\n\n\nif __name__ == '__main__':\n    main()",
    "from time import time\n\ndef factorial_divides(a, b):\n    if a > b:\n        return factorial_divides(b, a)\n    elif a == b:\n        return a\n    else:\n        return 0\n\nstart = time()\nprint(factorial_divides(100, 10))\nprint(\"Elapsed time:\", time() - start)",
    "def last_digit(a, b):\n    if a >= b:\n        return last_digit(a-1, b)\n    elif a < 0:\n        return last_digit(0, b)\n    else:\n        return last_digit(a+1, b)\n\nprint(last_digit(3, 7))",
    "def factorial_last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a > b:\n        return factorial_last_digit(b, a)\n    elif a == b:\n        return 1\n    else:\n        return factorial_last_digit(a - 1, b) + factorial_last_digit(b, a - 1)\n\nif __name__ == '__main__':\n    print(factorial_last_digit(10, 5))",
    "def last_digit(n, m):\n    # write your code here\n    return n % 10\n\n#print last_digit(1,1)\n#print last_digit(1,2)\n#print last_digit(2,2)\n#print last_digit(2,3)\n#print last_digit(3,3)\n#print last_digit(3,4)\n#print last_digit(4,4)\n#print last_digit(5,5)\n#print last_digit(5,6)\n#print last_digit(6,6)\n#print last_digit(7,7)\n#print last_digit(8,8)\n#print last_digit(9,9)\n#print last_digit(10,10)\n#print last_digit(11,11)\n#print last_digit(12,12)\n#print last_digit(13,13)\n#print last_digit(14,14)\n#print last_digit(15,15)\n#print last_digit(16,16)\n#print last_digit(17,17)\n#print last_digit(18,18)\n#print last_digit(19,19)\n#print last_digit(20,20)\n#print last_digit(21,21)\n#print last_digit(22,22)\n#print last_digit(23,23)\n#print last_digit(24,24)\n#print last_digit(25,25)\n#print last_digit(26,26)\n#print last_digit(27,27)\n#print last_digit(28,28)\n#print last_digit(29,29)\n#print last_digit(30,30)\n#print last_digit(31,31)\n#print last_digit(32,32)\n#print last_digit(33,33)\n#print last_digit(34,34)\n#print last_digit(35,35)\n#print last_digit(36,36)\n#print last_digit(37,37)\n#print last_digit(38,38)\n#print last_digit(39,39)\n#print last_digit(40,40)\n#print last",
    "def last_digit(a, b):\n    if a == 1:\n        return 1\n    else:\n        if a % 2 == 0:\n            return last_digit(a // 2, b)\n        else:\n            return last_digit(a // 2, b) + 1\n\nprint(last_digit(10, 100))",
    "def last_digit(fact,b):\n    if fact%b == 0:\n        return int(fact/b)\n    else:\n        return int(fact/b) - 1\n    \n    \nif __name__ == '__main__':\n    assert last_digit(7,10) == 3\n    assert last_digit(3,10) == 1\n    assert last_digit(3,2) == 1\n    assert last_digit(10,10) == 1\n    assert last_digit(10,4) == 0\n    assert last_digit(10,5) == 2\n    assert last_digit(10,6) == 2\n    assert last_digit(10,7) == 2\n    assert last_digit(10,8) == 3\n    assert last_digit(10,9) == 3\n    assert last_digit(10,10) == 1\n    assert last_digit(10,11) == 1\n    assert last_digit(10,12) == 1\n    assert last_digit(10,13) == 1\n    assert last_digit(10,14) == 1\n    assert last_digit(10,15) == 2\n    assert last_digit(10,16) == 2\n    assert last_digit(10,17) == 2\n    assert last_digit(10,18) == 3\n    assert last_digit(10,19) == 3\n    assert last_digit(10,20) == 3\n    assert last_digit(10,21) == 3\n    assert last_digit(10,22) == 3\n    assert last_digit(10,23) == 3\n    assert last_digit(10,24) == 3\n    assert last_digit(10,25) == 3\n    assert last_digit(10,26) == 3\n    assert last_digit(10,27) == 3\n    assert last_digit(10,28) == 3\n    assert last_digit(10,29) == 3\n    assert last_digit(10,30) == 3\n    assert last_digit(10,31) == 3\n    assert last_digit(10,32) == 3\n    assert last_digit(10,33) == 3\n    assert last_digit(10,34) ==",
    "def last_digit(n, b):\n    if b == 0:\n        return n\n    else:\n        return last_digit(n, b - 1) + int(n / (b * 2) % 10)\n\nif __name__ == \"__main__\":\n    assert last_digit(2, 3) == 2\n    assert last_digit(3, 3) == 1\n    assert last_digit(4, 3) == 2\n    assert last_digit(5, 3) == 3\n    assert last_digit(6, 3) == 2\n    assert last_digit(7, 3) == 3\n    assert last_digit(8, 3) == 2\n    assert last_digit(9, 3) == 3\n    assert last_digit(10, 3) == 4\n    assert last_digit(11, 3) == 3\n    assert last_digit(12, 3) == 2\n    assert last_digit(13, 3) == 3\n    assert last_digit(14, 3) == 2\n    assert last_digit(15, 3) == 3\n    assert last_digit(16, 3) == 2\n    assert last_digit(17, 3) == 3\n    assert last_digit(18, 3) == 2\n    assert last_digit(19, 3) == 3\n    assert last_digit(20, 3) == 2\n    assert last_digit(21, 3) == 3\n    assert last_digit(22, 3) == 2\n    assert last_digit(23, 3) == 3\n    assert last_digit(24, 3) == 2\n    assert last_digit(25, 3) == 3\n    assert last_digit(26, 3) == 2\n    assert last_digit(27, 3) == 3\n    assert last_digit(28, 3) == 2\n    assert last_digit(29, 3) == 3\n    assert last_digit(30, 3) == 2\n    assert last_digit(31, 3) == 3\n    assert last_digit(32, 3) == 2\n    assert last_digit(33, 3) == 3\n    assert last_digit(34, 3) == 2\n    assert last_digit(35, 3) == 3\n    assert last_digit(36",
    "def lastDigit(n, m):\n    # Write your code here\n    res = 0\n    while n!= 0:\n        res = n % 10\n        n = n // 10\n    return res",
    "def last_digit(n, m):\n    return str(int(n / m))[-1]\n\nprint(last_digit(6, 3))\nprint(last_digit(36, 4))\nprint(last_digit(36, 6))\nprint(last_digit(36, 7))\nprint(last_digit(36, 9))",
    "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(10, 10)\n    0\n    >>> last_digit(10, 7)\n    3\n    >>> last_digit(10, 9)\n    1\n    >>> last_digit(10, 5)\n    1\n    >>> last_digit(10, 6)\n    2\n    >>> last_digit(10, 2)\n    0\n    >>> last_digit(10, 0)\n    0\n    >>> last_digit(10, -1)\n    0\n    >>> last_digit(10, -2)\n    0\n    >>> last_digit(10, -3)\n    0\n    >>> last_digit(10, -4)\n    0\n    >>> last_digit(10, -5)\n    0\n    >>> last_digit(10, -6)\n    0\n    >>> last_digit(10, -7)\n    0\n    >>> last_digit(10, -8)\n    0\n    >>> last_digit(10, -9)\n    0\n    >>> last_digit(10, -10)\n    0\n    \"\"\"\n    if a == b:\n        return 0\n    if a > b:\n        return 0\n    if a == b + 1:\n        return 0\n    if a == b + 2:\n        return 0\n    if a == b + 3:\n        return 0\n    if a == b + 4:\n        return 0\n    if a == b + 5:\n        return 0\n    if a == b + 6:\n        return 0\n    if a == b + 7:\n        return 0\n    if a == b + 8:\n        return 0\n    if a == b + 9:\n        return 0\n    if a == b + 10:\n        return 0\n    if a == b + 11:\n        return 0\n    if a == b + 12:\n        return 0\n    if a == b + 13:\n        return 0\n    if a == b + 14:\n        return 0\n    if a == b + 15:\n        return 0\n    if a == b + 16:\n        return 0\n    if a == b + 17:\n        return 0\n    if a ==",
    "def last_digit_factorial(a, b):\n    if a % b == 0:\n        return 0\n    else:\n        return int(a/b)\n\nprint last_digit_factorial(4, 2)",
    "def last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a < 0 or b < 0:\n        return 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return 1\n    if a % b == 0:\n        return last_digit(a // b, b)\n    return last_digit(a % b, b)\n\nif __name__ == '__main__':\n    assert last_digit(10, 5) == 1\n    assert last_digit(10, 5) == 1\n    assert last_digit(10, 15) == 1\n    assert last_digit(5, 10) == 1\n    assert last_digit(5, 15) == 1\n    assert last_digit(5, 5) == 1\n    assert last_digit(5, 1) == 5\n    assert last_digit(5, 0) == 5\n    assert last_digit(1, 1) == 1\n    assert last_digit(1, 0) == 1\n    assert last_digit(0, 1) == 1\n    assert last_digit(0, 0) == 1",
    "def last_digit(a, b):\n    if a == 0 or b == 0:\n        return 0\n\n    if a == 1:\n        return 1\n\n    if a < b:\n        return last_digit(b, a)\n\n    if a < 10:\n        return 1\n\n    if a < 100:\n        return 2\n\n    if a < 1000:\n        return 3\n\n    if a < 10000:\n        return 4\n\n    if a < 100000:\n        return 5\n\n    if a < 1000000:\n        return 6\n\n    if a < 10000000:\n        return 7\n\n    if a < 100000000:\n        return 8\n\n    if a < 1000000000:\n        return 9\n\n    if a < 10000000000:\n        return 10\n\n    if a < 100000000000:\n        return 11\n\n    if a < 1000000000000:\n        return 12\n\n    if a < 10000000000000:\n        return 13\n\n    if a < 100000000000000:\n        return 14\n\n    if a < 1000000000000000:\n        return 15\n\n    if a < 10000000000000000:\n        return 16\n\n    if a < 100000000000000000:\n        return 17\n\n    if a < 10000000000000000000:\n        return 18\n\n    if a < 100000000000000000000:\n        return 19\n\n    if a < 10000000000000000000:\n        return 20\n\n    if a < 10000000000000000000:\n        return 21\n\n    if a < 10000000000000000000:\n        return 22\n\n    if a < 10000000000000000000:\n        return 23\n\n    if a < 10000000000000000000:\n        return 24\n\n    if a < 10000000000000000000:\n        return 25\n\n    if a < 10000000000000000000:\n        return 26\n\n    if a < 10000000000000000000:\n        return 27\n\n    if a < 10000000000000000000:\n        return 28\n\n    if a < 10000000000000000000:\n        return 29\n\n    if a < 10000000000000000000:\n        return 30\n\n    if a < 10000000000000000000:\n        return 31\n\n    if a < 10000000000000000000:\n        return 32\n\n    if a < 10000000000000000000:\n        return 33\n\n    if a < 10000000000000000000:\n        return 34\n\n    if a < 10000000000000000000:\n        return 35",
    "#!/usr/bin/env python\n\nimport math\n\n\ndef last_digit(n):\n    if n == 1:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return math.floor(math.log10(n)) + 1\n\n\ndef fact(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n\ndef fact_digit(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n\ndef fact_digit_last(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n\nif __name__ == \"__main__\":\n    print(last_digit(2**5))\n    print(fact(5))\n    print(fact_digit(5))\n    print(fact_digit_last(5))",
    "def last_digit(a,b):\n    fact = 1\n    last_digit = 0\n    while a >= b:\n        fact *= a\n        last_digit += int(fact % 10)\n        fact /= 10\n        a -= 1\n    return last_digit",
    "def last_digit(n, m):\n    if m == 0:\n        return 0\n    elif m == 1:\n        return int(n / 10)\n    else:\n        return int((n % 10) * (last_digit(n - 1, m - 1) + 1))\n\nprint(last_digit(2, 3))",
    "def last_digit(n, a, b):\n    if n % a == 0:\n        return '0'\n    if n % b == 0:\n        return '0'\n    if n % a == a - 1:\n        return '1'\n    if n % b == b - 1:\n        return '1'\n    return last_digit(n / a, a, b)\n\ndef main():\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    print(last_digit(n, a, b))\n\nif __name__ == '__main__':\n    main()",
    "def last_digit(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n % m == 0:\n        return last_digit(n/m, m) + 1\n    else:\n        return last_digit(n, m)\n\nprint last_digit(2, 7)\nprint last_digit(10, 11)",
    "def last_digit(a, b):\n    factorial = 1\n    for i in range(1, b+1):\n        factorial *= i\n    return factorial % 10\n\n\nprint(last_digit(8, 1))\nprint(last_digit(8, 2))\nprint(last_digit(8, 3))\nprint(last_digit(8, 4))\nprint(last_digit(8, 5))\nprint(last_digit(8, 6))\nprint(last_digit(8, 7))\nprint(last_digit(8, 8))\nprint(last_digit(8, 9))\nprint(last_digit(8, 10))\nprint(last_digit(8, 11))\nprint(last_digit(8, 12))\nprint(last_digit(8, 13))\nprint(last_digit(8, 14))\nprint(last_digit(8, 15))\nprint(last_digit(8, 16))\nprint(last_digit(8, 17))\nprint(last_digit(8, 18))\nprint(last_digit(8, 19))\nprint(last_digit(8, 20))\nprint(last_digit(8, 21))\nprint(last_digit(8, 22))\nprint(last_digit(8, 23))\nprint(last_digit(8, 24))\nprint(last_digit(8, 25))\nprint(last_digit(8, 26))\nprint(last_digit(8, 27))\nprint(last_digit(8, 28))\nprint(last_digit(8, 29))\nprint(last_digit(8, 30))\nprint(last_digit(8, 31))\nprint(last_digit(8, 32))\nprint(last_digit(8, 33))\nprint(last_digit(8, 34))\nprint(last_digit(8, 35))\nprint(last_digit(8, 36))\nprint(last_digit(8, 37))\nprint(last_digit(8, 38))\nprint(last_digit(8, 39))\nprint(last_digit(8, 40))\nprint(last_digit(8, 41))\nprint(last_digit(8, 42))\nprint(last_digit",
    "def last_digit(a, b):\n    return a % b\n\nprint last_digit(3, 5)",
    "def last_digit(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:",
    "def last_digit(a, b):\n    #  a = 5\n    #  b = 7\n    #  result = 2\n    #  expected = 6\n    #  actual = 2\n    result = 0\n    expected = 0\n\n    while expected!= result:\n        result = a * b\n        a = b\n        b = result\n        expected = result % 10\n\n    return result\n\nif __name__ == \"__main__\":\n    print(last_digit(5, 7))\n    print(last_digit(5, 4))\n    print(last_digit(5, 3))",
    "def last_digit(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    return a % b\n\ndef last_digit_iter(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    while a > 0:\n        if a % 10 == b % 10:\n            return a % 10\n        a /= 10\n        b /= 10\n    return a % 10\n\ndef last_digit_recursion(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    if a == 0:\n        return 0\n    return last_digit_recursion(a // b, b) + last_digit_recursion(a % b, b)\n\ndef main():\n    print(last_digit(2, 2))\n    print(last_digit_iter(2, 2))\n    print(last_digit_recursion(2, 2))\n\nif __name__ == \"__main__\":\n    main()",
    "def find_last_digit(a, b):\n    if a == 1:\n        return '0'\n    elif a == b:\n        return '0'\n    elif a == b + 1:\n        return '1'\n    elif a > b:\n        return '1'\n    elif a > b + 1:\n        return '0'\n    else:\n        return '0'\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_last_digit(a, b))",
    "def last_digit(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 1\n    return n % m\n\nif __name__ == '__main__':\n    assert(last_digit(4, 2) == 1)\n    assert(last_digit(6, 3) == 2)\n    assert(last_digit(9, 5) == 2)\n    assert(last_digit(12, 7) == 3)\n    assert(last_digit(15, 9) == 3)",
    "def last_digit_of_factorial(n, b):\n    \"\"\"\n    Write a function last_digit_of_factorial that returns the last digit of the factorial of n\n    when factorial of n divides factorial of b.\n    \"\"\"\n    return int(str(n)[-1])\n\ndef test():\n    assert 1 == last_digit_of_factorial(1, 1)\n    assert 1 == last_digit_of_factorial(1, 2)\n    assert 2 == last_digit_of_factorial(2, 1)\n    assert 2 == last_digit_of_factorial(2, 2)\n    assert 3 == last_digit_of_factorial(3, 1)\n    assert 3 == last_digit_of_factorial(3, 3)\n    assert 4 == last_digit_of_factorial(4, 1)\n    assert 4 == last_digit_of_factorial(4, 4)\n    assert 5 == last_digit_of_factorial(5, 1)\n    assert 5 == last_digit_of_factorial(5, 5)\n    assert 6 == last_digit_of_factorial(6, 1)\n    assert 6 == last_digit_of_factorial(6, 6)\n    assert 7 == last_digit_of_factorial(7, 1)\n    assert 7 == last_digit_of_factorial(7, 7)\n    assert 8 == last_digit_of_factorial(8, 1)\n    assert 8 == last_digit_of_factorial(8, 8)\n    assert 9 == last_digit_of_factorial(9, 1)\n    assert 9 == last_digit_of_factorial(9, 9)\n    assert 10 == last_digit_of_factorial(10, 1)\n    assert 10 == last_digit_of_factorial(10, 10)\n    assert 11 == last_digit_of_factorial(11, 1)\n    assert 11 == last_digit_of_factorial(11, 11)\n    assert 12 == last_digit_of_factorial(12, 1)\n    assert 12 == last_digit_of_factorial(12, 12)\n    assert 13 ==",
    "def last_digit(a,b):\n    if a < 0:\n        return -1\n    if b < 0:\n        return -1\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        return last_digit(b,a-b)\n    elif a < b:\n        return last_digit(a,b-a)\n    else:\n        return last_digit(a,b)\n\nprint(last_digit(5,6))",
    "import math\n\n\ndef last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return math.floor(math.log10(a * b))\n\n\nif __name__ == '__main__':\n    print(last_digit(9, 24))\n    print(last_digit(13, 21))\n    print(last_digit(42, 24))\n    print(last_digit(13, 42))\n    print(last_digit(13, 100))",
    "def last_digit(a, b):\n    if b == 0:\n        return 1\n\n    c = a // b\n    d = a % b\n    return last_digit(d, b)\n\nprint(last_digit(4, 3))\nprint(last_digit(9, 7))",
    "def last_digit(a,b):\n    \"\"\"\n    Find the last digit when a and b are factorial of each other.\n    \"\"\"\n    return int(a/b)\n\ndef test_last_digit():\n    assert last_digit(2,3) == 1\n    assert last_digit(3,3) == 2\n    assert last_digit(4,3) == 2\n    assert last_digit(5,3) == 3\n    assert last_digit(6,3) == 3\n    assert last_digit(7,3) == 3\n    assert last_digit(8,3) == 4\n    assert last_digit(9,3) == 4\n    assert last_digit(10,3) == 4\n    assert last_digit(11,3) == 4\n    assert last_digit(12,3) == 5\n    assert last_digit(13,3) == 5\n    assert last_digit(14,3) == 5\n    assert last_digit(15,3) == 5\n    assert last_digit(16,3) == 6\n    assert last_digit(17,3) == 6\n    assert last_digit(18,3) == 6\n    assert last_digit(19,3) == 6\n    assert last_digit(20,3) == 7\n    assert last_digit(21,3) == 7\n    assert last_digit(22,3) == 7\n    assert last_digit(23,3) == 7\n    assert last_digit(24,3) == 8\n    assert last_digit(25,3) == 8\n    assert last_digit(26,3) == 8\n    assert last_digit(27,3) == 8\n    assert last_digit(28,3) == 9\n    assert last_digit(29,3) == 9\n    assert last_digit(30,3) == 9\n    assert last_digit(31,3) == 9\n    assert last_digit(32,3) == 10\n    assert last_digit(33,3) == 10\n    assert last_digit(34,3) == 10\n    assert last_digit(35,3) == 10\n    assert last_digit(36,3) == 11\n    assert last_digit",
    "def last_digit(a, b):\n    return int(str(a)[-1])\n\nprint(last_digit(2, 3))",
    "#factorial = lambda n: reduce(lambda x, y: x*y, range(1, n+1))\n\ndef last_digit(n, fact):\n    '''\n    factorial = lambda n: reduce(lambda x, y: x*y, range(1, n+1))\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n % 10\n\ndef last_digit_2(n, fact):\n    '''\n    factorial = lambda n: reduce(lambda x, y: x*y, range(1, n+1))\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n % 10\n\nif __name__ == \"__main__\":\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, factorial))\n    print(last_digit(42, fact",
    "import math\n\ndef last_digit(a,b):\n    if a%b==0:\n        return int(math.floor(math.log(a,b)/math.log(b)))\n    else:\n        return int(math.floor(math.log(a,b)))\n\ndef main():\n    a,b = map(int,input().split())\n    print(last_digit(a,b))\n\nif __name__ == '__main__':\n    main()",
    "def last_digit(factorial, factorial_of_b):\n    return int(factorial_of_b % factorial)\n\n\nif __name__ == \"__main__\":\n    last_digit(1, 5)\n    last_digit(2, 5)\n    last_digit(3, 5)\n    last_digit(4, 5)\n    last_digit(5, 5)\n    last_digit(6, 5)\n    last_digit(7, 5)\n    last_digit(8, 5)\n    last_digit(9, 5)\n    last_digit(10, 5)\n    last_digit(11, 5)\n    last_digit(12, 5)\n    last_digit(13, 5)\n    last_digit(14, 5)\n    last_digit(15, 5)\n    last_digit(16, 5)\n    last_digit(17, 5)\n    last_digit(18, 5)\n    last_digit(19, 5)\n    last_digit(20, 5)\n    last_digit(21, 5)\n    last_digit(22, 5)\n    last_digit(23, 5)\n    last_digit(24, 5)\n    last_digit(25, 5)\n    last_digit(26, 5)\n    last_digit(27, 5)\n    last_digit(28, 5)\n    last_digit(29, 5)\n    last_digit(30, 5)\n    last_digit(31, 5)\n    last_digit(32, 5)\n    last_digit(33, 5)\n    last_digit(34, 5)\n    last_digit(35, 5)\n    last_digit(36, 5)\n    last_digit(37, 5)\n    last_digit(38, 5)\n    last_digit(39, 5)\n    last_digit(40, 5)\n    last_digit(41, 5)\n    last_digit(42, 5)\n    last_digit(43, 5)\n    last_digit(44, 5)\n    last_digit(45, 5)\n    last_digit(46, 5)\n    last_digit(47, 5",
    "def lastDigit(n, a, b):\n    \"\"\"\n    :type n: int\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return (n + b - a) % 10\n\nif __name__ == '__main__':\n    assert lastDigit(3, 6, 8) == 0\n    assert lastDigit(2, 3, 3) == 2\n    assert lastDigit(5, 2, 1) == 4\n    assert lastDigit(5, 2, 2) == 2\n    assert lastDigit(3, 4, 5) == 2",
    "def factorial_divides_factorial(a, b):\n    if a == 1:\n        return 1\n    if a == b:\n        return 1\n    if a > b:\n        return factorial_divides_factorial(b, a)\n    else:\n        return factorial_divides_factorial(a, b)\n\n\nprint(factorial_divides_factorial(4, 9))",
    "def last_digit(a, b):\n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    a and b are integers.\n    \"\"\"\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    \n    if a > b:\n        return last_digit(b, a)\n    elif a == b:\n        return 1\n    else:\n        return last_digit(b, a-1)\n\nif __name__ == '__main__':\n    a = int(input('Enter a number: '))\n    b = int(input('Enter another number: '))\n    print(last_digit(a, b))",
    "def last_digit(a, b):\n    return (10 ** (a - 1)) % (10 ** b)\n\ndef factorial(n):\n    if n == 1:\n        return 1\n\n    return n * factorial(n - 1)\n\ndef factorial_divides_factorial(a, b):\n    return last_digit(a, b) == factorial(a) % factorial(b)\n\nprint factorial_divides_factorial(5, 2)",
    "def lastDigit(n, b):\n    return int(str(n)[-1])\n\n\nif __name__ == '__main__':\n    n = int(input('Enter number: '))\n    b = int(input('Enter b: '))\n    print(lastDigit(n, b))",
    "def last_digit_of_factorial(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    # if n < k:\n    #     return last_digit_of_factorial(n, k - 1)\n    # else:\n    #     return last_digit_of_factorial(n / k, k)\n    return last_digit_of_factorial(n, k - 1) % 10\n\nprint last_digit_of_factorial(3, 2)\n#>>> 4\nprint last_digit_of_factorial(3, 3)\n#>>> 0\nprint last_digit_of_factorial(10, 10)\n#>>> 1\nprint last_digit_of_factorial(10, 11)\n#>>> 0\nprint last_digit_of_factorial(10, 12)\n#>>> 1\nprint last_digit_of_factorial(10, 13)\n#>>> 0\nprint last_digit_of_factorial(10, 14)\n#>>> 1\nprint last_digit_of_factorial(10, 15)\n#>>> 0\nprint last_digit_of_factorial(10, 16)\n#>>> 1\nprint last_digit_of_factorial(10, 17)\n#>>> 0\nprint last_digit_of_factorial(10, 18)\n#>>> 1\nprint last_digit_of_factorial(10, 19)\n#>>> 0\nprint last_digit_of_factorial(10, 20)\n#>>> 1\nprint last_digit_of_factorial(10, 21)\n#>>> 0\nprint last_digit_of_factorial(10, 22)\n#>>> 1\nprint last_digit_of_factorial(10, 23)\n#>>> 0\nprint last_digit_of_factorial(10, 24)\n#>>> 1\nprint last_digit_of_factorial(10, 25)\n#>>> 0\nprint last_digit_of_factorial(10, 26)\n#>>> 1\nprint last_digit_of_factorial(10, 27)\n#>>> 0\nprint last_digit",
    "import math\n\ndef last_digit(a, b):\n    factorial = 1\n    while factorial < b:\n        factorial *= a\n    return int(math.floor(factorial / b))\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(last_digit(a, b))",
    "def lastDigit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return 1 if a % b == 0 else b",
    "def factorial_last_digit(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a == 0:\n        return 1\n    return factorial_last_digit(a - 1, b) * 10 ** (a - 1)\n\nif __name__ == '__main__':\n    assert factorial_last_digit(5, 7) == 5\n    assert factorial_last_digit(6, 7) == 6\n    assert factorial_last_digit(7, 7) == 1\n    assert factorial_last_digit(8, 7) == 8",
    "def last_digit_factorial(a, b):\n    if a == 1:\n        return 1\n    else:\n        return last_digit_factorial(a - 1, b) + b % a\n\nprint(last_digit_factorial(8, 3))",
    "def last_digit(n):\n    if n == 0:\n        return 0\n    b = factorial(n)\n    a = factorial(n-1)\n    return int(a/b)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nprint(last_digit(8))",
    "import math\n\ndef last_digit(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    if a == 1:\n        return 1\n    if b == 1:\n        return 1\n    if a == b:\n        return 1\n    if b == 0:\n        return 1\n    if a == 0:\n        return 1\n    return int(math.floor(math.log(a, 10)))\n\nif __name__ == '__main__':\n    print(last_digit(3, 4))\n    print(last_digit(4, 2))",
    "def factorial(n):\n    \"\"\"\n    Function to calculate factorial of n\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef lastDigit(n, m):\n    \"\"\"\n    Function to calculate the last digit\n    \"\"\"\n    factorial_n = factorial(n)\n    factorial_m = factorial(m)\n    return int(factorial_n / factorial_m)\n\nif __name__ == \"__main__\":\n    print(lastDigit(3, 5))\n    print(lastDigit(3, 6))\n    print(lastDigit(3, 7))\n    print(lastDigit(3, 8))\n    print(lastDigit(3, 9))\n    print(lastDigit(3, 10))\n    print(lastDigit(3, 11))\n    print(lastDigit(3, 12))\n    print(lastDigit(3, 13))\n    print(lastDigit(3, 14))\n    print(lastDigit(3, 15))\n    print(lastDigit(3, 16))\n    print(lastDigit(3, 17))\n    print(lastDigit(3, 18))\n    print(lastDigit(3, 19))\n    print(lastDigit(3, 20))\n    print(lastDigit(3, 21))\n    print(lastDigit(3, 22))\n    print(lastDigit(3, 23))\n    print(lastDigit(3, 24))\n    print(lastDigit(3, 25))\n    print(lastDigit(3, 26))\n    print(lastDigit(3, 27))\n    print(lastDigit(3, 28))\n    print(lastDigit(3, 29))\n    print(lastDigit(3, 30))\n    print(lastDigit(3, 31))\n    print(lastDigit(3, 32))\n    print(lastDigit(3, 33))\n    print(lastDigit(3, 34))\n    print(lastDigit(3, 35))\n    print",
    "def last_digit(factorial_of_a, factorial_of_b):\n    \"\"\"\n    Returns the last digit of factorial of a divided by factorial of b.\n\n    Example:\n    >>> last_digit(5, 8)\n    2\n    >>> last_digit(4, 2)\n    2\n    >>> last_digit(4, 4)\n    1\n    >>> last_digit(4, 8)\n    1\n    >>> last_digit(5, 4)\n    2\n    >>> last_digit(5, 6)\n    2\n    >>> last_digit(5, 7)\n    2\n    >>> last_digit(5, 8)\n    2\n    >>> last_digit(5, 9)\n    3\n    >>> last_digit(5, 10)\n    3\n    >>> last_digit(5, 11)\n    3\n    >>> last_digit(5, 12)\n    3\n    >>> last_digit(5, 13)\n    3\n    >>> last_digit(5, 14)\n    3\n    >>> last_digit(5, 15)\n    3\n    >>> last_digit(5, 16)\n    3\n    >>> last_digit(5, 17)\n    3\n    >>> last_digit(5, 18)\n    3\n    >>> last_digit(5, 19)\n    3\n    >>> last_digit(5, 20)\n    3\n    >>> last_digit(5, 21)\n    3\n    >>> last_digit(5, 22)\n    3\n    >>> last_digit(5, 23)\n    3\n    >>> last_digit(5, 24)\n    3\n    >>> last_digit(5, 25)\n    3\n    >>> last_digit(5, 26)\n    3\n    >>> last_digit(5, 27)\n    3\n    >>> last_digit(5, 28)\n    3\n    >>> last_digit(5, 29)\n    3\n    >>> last_digit(5, 30)\n    3\n    >>> last_digit(5, 31)\n    3\n    >>> last_digit(5, 32)\n    3\n    >>> last_digit(5, 33)\n    3\n    >>> last_",
    "import math\n\n\ndef last_digit(factorial, b):\n    \"\"\"\n    :type factorial: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return int(math.floor(math.log10(factorial / b)))\n\n\nif __name__ == '__main__':\n    print(last_digit(123, 5))",
    "def last_digit(a, b):\n    if a % b == 0:\n        return int(str(a)[-1])\n    else:\n        return last_digit(a, b - 1)\n\nprint(last_digit(6, 3))",
    "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\ndef last_digit(a, b):\n    \"\"\"\n    For a = 1, 2, 3,..., 10 and b = 1, 2, 3,..., 10,\n    the last digit of the product of a and b is the last digit of the\n    product of a and the first digit of b.\n    \"\"\"\n    if a == 0:\n        return b\n    if a == 1:\n        return b\n    if b == 0:\n        return a\n    if b == 1:\n        return a\n    return last_digit(a - 1, b)\n\nif __name__ == '__main__':\n    print(last_digit(3, 5))\n    print(last_digit(3, 6))\n    print(last_digit(3, 7))\n    print(last_digit(3, 8))\n    print(last_digit(3, 9))\n    print(last_digit(3, 10))",
    "def last_digit(a, b):\n    if a == 0:\n        return 0\n    else:\n        while b > 0:\n            a, b = a / 10, b - 1\n        return a % 10\n\nprint last_digit(17, 12)",
    "def last_digit_of_factorial(a, b):\n    \"\"\"\n    a: a positive integer\n    b: a positive integer\n    return: the last digit when factorial of a divides factorial of b.\n    \"\"\"\n    factorial_of_a = 1\n    factorial_of_b = 1\n    for i in range(a + 1):\n        factorial_of_a *= i\n    for i in range(b + 1):\n        factorial_of_b *= i\n    while factorial_of_a > factorial_of_b:\n        factorial_of_a -= 1\n    while factorial_of_b > factorial_of_a:\n        factorial_of_b -= 1\n    while factorial_of_a >= 10 or factorial_of_b >= 10:\n        factorial_of_a /= 10\n        factorial_of_b /= 10\n    return str(factorial_of_a % 10)\n\nprint last_digit_of_factorial(2, 10)",
    "def last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    # if a is a prime number, then it will always be a prime factor of b\n    # if b is a prime number, then it will always be a prime factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    # if a is a prime number and b is a prime number, then a will be a factor of b\n    # if a is a prime number and b is a prime number, then b will be a factor of a\n    #",
    "def last_digit(a, b):\n    '''\n    a, b are the two numbers.\n    '''\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if a == 1:\n        return 1\n    if b == 1:\n        return 1\n    if a == 2:\n        return 1\n    if b == 2:\n        return 2\n    if a == 3:\n        return 2\n    if b == 3:\n        return 3\n    if a == 4:\n        return 3\n    if b == 4:\n        return 4\n    if a == 5:\n        return 5\n    if b == 5:\n        return 5\n    if a == 6:\n        return 6\n    if b == 6:\n        return 6\n    if a == 7:\n        return 7\n    if b == 7:\n        return 7\n    if a == 8:\n        return 8\n    if b == 8:\n        return 8\n    if a == 9:\n        return 9\n    if b == 9:\n        return 9\n    if a > b:\n        return last_digit(a - 1, b)\n    if b > a:\n        return last_digit(b - 1, a)\n    return last_digit(a, b - 1)\n\n\nprint(last_digit(2, 9))\nprint(last_digit(3, 9))\nprint(last_digit(4, 9))\nprint(last_digit(5, 9))\nprint(last_digit(6, 9))\nprint(last_digit(7, 9))\nprint(last_digit(8, 9))\nprint(last_digit(9, 9))\nprint(last_digit(10, 9))",
    "def last_digit(a, b):\n    \"\"\"\n    Input: a = integer, b = integer\n    Output: last digit of a\n    \"\"\"\n    if a < 0 or b < 0:\n        return 0\n    if a == 0:\n        return 0\n    if a == 1:\n        return 1\n    if b == 0:\n        return 0\n    if b == 1:\n        return 1\n    if a > b:\n        return last_digit(b, a - b)\n    else:\n        return last_digit(a - 1, b)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(last_digit(a, b))\n\nif __name__ == '__main__':\n    main()",
    "def last_digit(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return last_digit(b, a % b)\n\n# Test Cases\nprint last_digit(1, 5)\nprint last_digit(2, 6)\nprint last_digit(3, 12)",
    "def last_digit(a, b):\n    return int(str(a)[-1])\n\ndef factorial_divides_factorial(a, b):\n    if b == 1:\n        return a\n    return last_digit(factorial(a), factorial(b))\n\nif __name__ == \"__main__\":\n    print(factorial_divides_factorial(2, 3))\n    print(factorial_divides_factorial(2, 2))\n    print(factorial_divides_factorial(1, 3))",
    "def last_digit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    return last_digit(b, a % b)\n\nif __name__ == '__main__':\n    print(last_digit(5, 6))\n    print(last_digit(6, 6))\n    print(last_digit(3, 10))",
    "def find_last_digit(a, b):\n    # Write your code here\n    if a == 0:\n        return 0\n    \n    if b == 0:\n        return 0\n    \n    if a > b:\n        a, b = b, a\n    \n    factorial_a = 1\n    factorial_b = 1\n    \n    for i in range(1, a+1):\n        factorial_a = factorial_a * i\n    \n    for i in range(1, b+1):\n        factorial_b = factorial_b * i\n    \n    return factorial_a / factorial_b\n\nprint find_last_digit(2, 3)",
    "# Factorial of a\ndef fact(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n# Factorial of b\ndef fact_b(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\ndef last_digit(a, b):\n    return (a / fact_b(b)) % 10\n\ndef main():\n    a = input()\n    b = input()\n    print(last_digit(a, b))\n\nif __name__ == '__main__':\n    main()",
    "def factorial_and_last_digit(a, b):\n    # +++your code here+++\n    factorial = factorial_number(a)\n    last_digit = factorial % 10\n    factorial = factorial / 10\n    if a == b:\n        return (factorial, last_digit)\n    else:\n        return factorial_and_last_digit(b, a)\n\ndef factorial_number(n):\n    factorial = 1\n    for i in range(1, n):\n        factorial *= i\n    return factorial\n\ndef main():\n    print factorial_and_last_digit(10, 20)\n\nif __name__ == '__main__':\n    main()",
    "def last_digit(a, b):\n    while a > b:\n        a -= b\n        b += 1\n    return a\n\nprint(last_digit(12, 9))",
    "def lastDigit(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return 1\n    if b == 0:\n        return 0\n    return int((a / b) % 10)\n\nif __name__ == \"__main__\":\n    print lastDigit(3, 5)\n    print lastDigit(10, 9)\n    print lastDigit(1, 2)",
    "def last_digit(n, f):\n    for i in range(2, f + 1):\n        if n % i == 0:\n            return i\n\nprint(last_digit(1, 10))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}