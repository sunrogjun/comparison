{
  "problem": {
    "task_id": "MBPP/403",
    "prompt": "Write a function to check if a url is valid or not using regex.",
    "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
    "test_list": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ],
    "challenge_test_list": [],
    "problem_id": 392
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://www.tutorialspoint.com/python/regex_regular_expression.htm\n\nimport re\n\nurl_regex = re.compile(r'^(https?://)?([\\w\\d_.-]+)\\.?([\\w\\d_.-]*)([/?][\\w\\d_.-]*)?$')\n\ndef is_url(url):\n    return bool(url_regex.match(url))\n\nif __name__ == '__main__':\n    print(is_url('http://google.com'))\n    print(is_url('http://www.google.com'))\n    print(is_url('http://www.google.co.in'))\n    print(is_url('https://www.google.co.in'))\n    print(is_url('https://www.google.co.in/'))\n    print(is_url('http://www.google.co.in/'))\n    print(is_url('http://www.google.co.in/index.php'))\n    print(is_url('http://www.google.co.in/index.php/'))\n    print(is_url('http://www.google.co.in/index.php/index.html'))\n    print(is_url('http://www.google.co.in/index.php/index.html/'))\n    print(is_url('http://www.google.co.in/index.php/index.html/index.htm'))\n    print(is_url('http://www.google.co.in/index.php/index.html/index.htm/'))\n    print(is_url('http://www.google.co.in/index.php/index.html/index.htm/index.html'))\n    print(is_url('http://www.google.co.in/index.php/index.html/index.htm/index.html/'))\n    print(is_url('http://www.google.co.in/index.php/index.html/index.html/index.html/index.html/'))\n    print(is_url('http",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    >>> is_url('http://www.python.org')\n    True\n    >>> is_url('www.python.org')\n    True\n    >>> is_url('http://www.python.org/')\n    False\n    >>> is_url('www.python.org.')\n    False\n    >>> is_url('www.python.org/index.html')\n    False\n    >>> is_url('python.org')\n    False\n    >>> is_url('xyz://python.org')\n    False\n    >>> is_url('xyz://python.org/')\n    False\n    >>> is_url('xyz://python.org/index.html')\n    False\n    \"\"\"\n    return bool(re.match(r'^(https?://)?([\\w-]+(:\\w+)?@)?([\\w-]+)(:?\\d+)?(:\\d+)?(\\/.*)?'\n                         '$', url))",
    "def is_url(url):\n    \"\"\"\n    Check if url is valid or not using regex.\n\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    regex = r'^(https?|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+)(:(\\d+))?\\/?[^\\s]+$'\n    return bool(re.match(regex, url))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_url(\"http://google.com\"), \"http://google.com\"\n    assert is_url(\"http://google.com/\"), \"http://google.com/\"\n    assert not is_url(\"google\"), \"google\"\n    assert not is_url(\"google.\"), \"google.\"\n    assert not is_url(\".google\"), \".google\"\n    assert not is_url(\"google..com\"), \"google..com\"\n    assert not is_url(\"google\"), \"google\"",
    "# http://www.python-course.eu/check_url.php\ndef valid_url(url):\n    # check for empty string\n    if url == \"\":\n        return False\n    # check for http://\n    if url.find('http://') == -1:\n        return False\n    # check for https://\n    if url.find('https://') == -1:\n        return False\n    # check for url\n    if url.find('/') == -1:\n        return False\n    # check for valid characters\n    if url.find('.') == -1:\n        return False\n    if url.find('..') == -1:\n        return False\n    if url.find('\\n') == -1:\n        return False\n    if url.find('\\r') == -1:\n        return False\n    if url.find('\\t') == -1:\n        return False\n    if url.find('\\0') == -1:\n        return False\n    # check for valid characters\n    if url.find('<') == -1:\n        return False\n    if url.find('>') == -1:\n        return False\n    if url.find('#') == -1:\n        return False\n    if url.find('%') == -1:\n        return False\n    if url.find('\\\\') == -1:\n        return False\n    if url.find('{') == -1:\n        return False\n    if url.find('}') == -1:\n        return False\n    if url.find('|') == -1:\n        return False\n    if url.find('*') == -1:\n        return False\n    if url.find('?') == -1:\n        return False\n    if url.find('\\'') == -1:\n        return False\n    if url.find('\\\"') == -1:\n        return False\n    if url.find('\\^') == -1:\n        return False\n    if url.find('$') == -1:\n        return False\n    if url.find('\\&') == -1:\n        return False\n    if url.find('\\+') == -1:\n        return False",
    "# https://www.hackerrank.com/challenges/check-if-url-is-valid\n\nimport re\n\nurl = raw_input()\n\ndef is_valid(url):\n    # url = re.sub('http://', '', url)\n    # url = re.sub('https://', '', url)\n    # url = re.sub('/', '', url)\n    # url = re.sub('\\?', '', url)\n    # url = re.sub('&', '', url)\n    # url = re.sub('%', '', url)\n\n    if re.match(r'^[a-zA-Z0-9]+$', url) is not None:\n        return True\n    else:\n        return False\n\nprint is_valid(url)",
    "def is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    import re\n    if re.match(r'http://|https://|ftp://|mailto:', url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert is_url('http://www.python.org/')\n    assert not is_url('www.python.org/')\n    assert not is_url('joe.bloggs@acme.org')\n    assert not is_url('acme.org')\n    assert not is_url('xyz.com/abc')\n    assert not is_url('xyz.com')\n    assert not is_url('')\n    assert not is_url('xyz.com ')\n    assert not is_url('xyz.com')\n    assert is_url('http://www.python.org')\n    assert is_url('https://www.python.org')\n    assert is_url('ftp://www.python.org')\n    assert is_url('mailto:webmaster@example.com')\n    assert is_url('javascript:alert(\"hello\");')\n    assert not is_url('/path')\n    assert not is_url('path')\n    assert not is_url('path/')\n    assert not is_url('path')",
    "import re\n\ndef is_url(url):\n    if re.match(r'^(https?://)?([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=()~_+!@$#]*)+$', url):\n        return True\n    else:\n        return False\n\ndef main():\n    url = input('Enter url: ')\n    while not is_url(url):\n        url = input('Enter a valid url: ')\n    print('URL is valid')\n    \nif __name__ == '__main__':\n    main()",
    "import re\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid using regex.\n\n    url: string, the url to be checked.\n    Returns a boolean.\n    \"\"\"\n    url = url.strip()\n    if not re.match(r'^(https|http)://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$', url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    url = 'https://www.google.com'\n    print valid_url(url)\n    print valid_url('www.google.com')\n    print valid_url('www.google.com/')\n    print valid_url('www.google.com/index.html')\n    print valid_url('www.google.com/index.html#abc')\n    print valid_url('www.google.com/index.html?abc')\n    print valid_url('www.google.com/index.html?abc#def')\n    print valid_url('www.google.com/index.html#abc?def')\n    print valid_url('www.google.com/index.html?abc#def#ghi')\n    print valid_url('www.google.com/index.html?abc#def#ghi.html')",
    "url_regex = r'^(?:http|ftp)s?://' # http:// or https://\nurl_regex += r'[-A-Za-z0-9+&@#/%?=~_|!:,.;]*[-A-Za-z0-9+&@#/%=~_|]' # Valid chars\nurl_regex += r'(?:\\.(?:com|org|net|cn|edu|uk|info|us))?' # Domain\nurl_regex += r'(?:/(?:(?:[-\\w]+\\.)+(?:com|org|net|cn|edu|uk|info|us))|' # TLD\nurl_regex += r'(?:www\\.)(?:[-\\w]+\\.)*(?:com|org|net|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|edu|uk|info|us|cn|",
    "from collections import Counter\nimport re\n\nurl = \"http://www.python.org\"\n\n# Create a function to count the number of occurences of each character in a string\ndef count_chars(string):\n    count = Counter(string)\n    for char in count:\n        print(char, count[char])\n\n# Create a function to check if a url is valid or not using regex\ndef valid_url(url):\n    # Create a regular expression\n    # We'll use the following regular expression\n    # ^((ht|f)tp(s?)\\:|/|\\w+@)\\w+(\\.\\w+){1,2}(:[0-9]+)?(\\/|\\?|$)\n    # We want to match the following:\n    # http://www.python.org\n    # http://www.python.org/\n    # http://www.python.org/foo\n    # http://www.python.org/?q=foo#bar\n    # http://www.python.org/~user/foo?bar=baz\n    url_regex = re.compile(\n        r'^(?:(?:ht|f)tp(?:s?)\\:\\/\\/|\\/|\\w+@)\\w+(?:\\.\\w+){1,2}(?:\\:|\\/|\\?|$)')\n    match = url_regex.match(url)\n    return match is not None\n\n# Call the function to check if the url is valid\nvalid_url(url)",
    "import re\n\n\ndef is_valid_url(url):\n    \"\"\"\n    Return True if the given url is valid, otherwise return False.\n    \"\"\"\n    # Check if url is a valid url\n    regex = re.compile(r'^(https?://)?([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$')\n    if regex.match(url):\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    url = 'https://www.python.org/'\n    print(is_valid_url(url))\n\n\nif __name__ == '__main__':\n    main()",
    "def is_valid(url):\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string\")\n    if not url:\n        return False\n    if url.startswith(\"http://\") or url.startswith(\"https://\"):\n        return True\n    return False\n\nif __name__ == '__main__':\n    url = input(\"Enter a URL: \")\n    print(is_valid(url))",
    "class Solution(object):\n    def isUrl(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        # url should be str\n        if isinstance(url, str):\n            # remove 'http://' and 'https://'\n            url = url[len('http://'):]\n            # remove '://'\n            url = url[:url.index('/')]\n            # remove '.'\n            url = url[:url.rindex('.')]\n            # remove''\n            url = url[:url.index(' ')]\n            # remove '?' and '&'\n            url = url[:url.index('?')]\n            url = url[:url.index('&')]\n            # remove '#'\n            url = url[:url.index('#')]\n            # remove '=' and ';'\n            url = url[:url.index('=')]\n            url = url[:url.index(';')]\n            # remove '\\' and '\\\"'\n            url = url[:url.index('\\\\')]\n            url = url[:url.index('\\\"')]\n            # remove '/'\n            url = url[:url.index('/')]\n            # remove '..'\n            url = url[:url.index('..')]\n            # remove ':'\n            url = url[:url.index(':')]\n            # remove '<' and '>'\n            url = url[:url.index('<')]\n            url = url[:url.index('>')]\n            # remove '@'\n            url = url[:url.index('@')]\n            # remove '?'\n            url = url[:url.index('?')]\n            # remove '#'\n            url = url[:url.index('#')]\n            # remove '&'\n            url = url[:url.index('&')]\n            # remove '.'\n            url = url[:url.index('.')]\n            # remove ':'\n            url = url[:url.index(':')]\n            # remove '/'\n            url = url[:url.index('/",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    Check if the given url is valid or not.\n\n    Example:\n    >>> is_url('www.google.com')\n    True\n    >>> is_url('www.google.com/')\n    False\n    >>> is_url('www.google.com/index.html')\n    True\n    >>> is_url('www.google.com/index.htm')\n    False\n    \"\"\"\n    return bool(re.match(r'^(?:http|ftp)s?://'\n                         r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?.)+(?:[A-Z]{2,6}\\.?))'\n                         r'(?::\\d+)?(?:/?|/.*)$', url))",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns True if url is valid and False otherwise.\n\n    >>> is_valid_url(\"https://www.google.com/\")\n    True\n    >>> is_valid_url(\"https://www.google.com\")\n    False\n    >>> is_valid_url(\"https://google.com\")\n    False\n    >>> is_valid_url(\"https://google.com/\")\n    False\n    \"\"\"\n    return bool(re.match(r'^https?://[^\\s]*$', url))",
    "import re\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid or not.\n    \"\"\"\n    return bool(re.match(r'^(https?)://(?:www\\.)?(?:[-a-z\\d+&@#/%=~_|$!:,.]|'\n                         r'(?:[\\x21-\\x7e]|\\\\[\\x21-\\x7e]|[^\\x21-\\x7e])*)'\n                         r'(?::(\\d+))?(?:/[-a-z\\d%_.~+\\x26%&=:;{}?#]*)*'\n                         r'$', url, re.IGNORECASE))\n\n\n# Your function will be called asynchronously\ndef main():\n    url = 'https://www.youtube.com'\n    print(valid_url(url))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def isUrl(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return bool(re.match(r'^(https|http|ftp|rtsp|mms)?://', url))\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isUrl(\"http://www.python.org\")\n    assert s.isUrl(\"https://www.python.org\")\n    assert s.isUrl(\"www.python.org\")\n    assert s.isUrl(\"http://www.python.org/\")\n    assert not s.isUrl(\"www.python.org.\")\n    assert not s.isUrl(\"www.python.org/index.html\")\n    assert not s.isUrl(\"www.python.org/index.html#\")\n    assert not s.isUrl(\"www.python.org/#\")",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    url = url.lower()\n    return re.match(r'^(http|https|ftp|rtsp|mms):\\/\\/.*(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)$', url) is not None\n\nif __name__ == '__main__':\n    print(is_url('http://www.python.org/'))\n    print(is_url('www.python.org'))\n    print(is_url('www.python.org/index.html'))\n    print(is_url('ftp://www.python.org/'))\n    print(is_url('rtsp://www.python.org/'))\n    print(is_url('mms://www.python.org/'))\n    print(is_url('http://www.python.org/?q=abc'))\n    print(is_url('http://www.python.org/index.html#abc'))\n    print(is_url('http://www.python.org/index.html#abc?def'))\n    print(is_url('0000-00-00'))\n    print(is_url('0000-00-00 00:00:00'))",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$', url) is not None",
    "import re\n\ndef valid_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    if url is None or url.strip() == '':\n        return False\n    if not re.match(r\"^https?://\", url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    url = 'http://www.python.org'\n    print(valid_url(url))\n    url = 'www.python.org'\n    print(valid_url(url))\n    url = 'http://www.python.org/'\n    print(valid_url(url))\n    url = 'http://www.python.org/index.html'\n    print(valid_url(url))\n    url = 'http://www.python.org/products/'\n    print(valid_url(url))\n    url = 'http://www.python.org/index.php/products/'\n    print(valid_url(url))\n    url = 'http://www.python.org/images/python_logo.gif'\n    print(valid_url(url))\n    url = 'http://www.python.org/images/python_logo.jpg'\n    print(valid_url(url))\n    url = 'http://www.python.org/community/'\n    print(valid_url(url))\n    url = 'http://www.python.org/community/index.php'\n    print(valid_url(url))\n    url = 'http://www.python.org/community/community.html'\n    print(valid_url(url))\n    url = 'http://www.python.org/2.3/community/'\n    print(valid_url(url))\n    url = 'http://www.python.org/2.3/community/index.html'\n    print(valid_url(url))\n    url = 'http://www.python.org/2.3/community/community.html'\n    print(valid_url(url))\n    url = 'http://www.python.org/2.3/licence/'\n    print(valid_url(url",
    "# TODO\n# Write a function to check if a url is valid or not using regex.",
    "import re\n\n# https://www.hackerrank.com/challenges/check-url/problem\n\ndef is_url(url):\n    \"\"\"\n    Returns True if the given url is valid. Otherwise, returns False.\n    \"\"\"\n    # regex to check if the url is valid\n    valid_url = re.compile(r'^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$')\n    return valid_url.match(url) is not None\n\nif __name__ == '__main__':\n    url = input()\n    print(is_url(url))",
    "url = 'http://www.google.com'\n\nprint(is_valid_url(url))",
    "class Solution(object):\n    def isUrl(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        if re.match(r\"^\\w+://\", url):\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isUrl(\"http://www.google.com\") == True\n    assert s.isUrl(\"http://www.google.com/\") == False",
    "# Write your code below\ndef is_url(url):\n    return bool(re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url))\n\nif __name__ == \"__main__\":\n    assert is_url(\"www.google.com\") == True\n    assert is_url(\"www.google.com/\") == True\n    assert is_url(\"www.google.com/index.html\") == True\n    assert is_url(\"www.google.com/index.html?a=b\") == True\n    assert is_url(\"www.google.com/index.html#a=b\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h&i=j\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h&i=j&k=l\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h&i=j&k=l&m=n\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h&i=j&k=l&m=n&o=p\") == True\n    assert is_url(\"www.google.com/index.html?a=b#c=d&e=f&g=h&i=j",
    "# url = input(\"Enter URL: \")\n# url = \"http://www.python.org\"\n# url = \"https://www.python.org\"\n\n# print(\"Valid URL? \" + str(is_valid_url(url)))\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if url is valid using regex.\n    \"\"\"\n    # pattern = re.compile(r'^(?:http|ftp)s?://' # scheme\n    #                     r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}(?<![A-Z0-9-]))|' # domain\n    #                     r'localhost|' # localhost...\n    #                     r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|' #...or ipv4\n    #                     r'\\[?[A-F0-9]*:[A-F0-9:]+\\]?)' #...or ipv6\n    #                     r'(?::\\d+)?' # optional port\n    #                     r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    # return bool(pattern.match(url))\n    return re.search(r'^(?:http|ftp)s?://' # scheme\n                     r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}(?<![A-Z0-9-]))|' # domain\n                     r'localhost|' # localhost...\n                     r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|' #...or ipv",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    :rtype: bool\n    \"\"\"\n    return bool(re.search(r'^(https?|ftp)://[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$', url, re.IGNORECASE))\n\n\ndef test():\n    assert is_url('http://www.python.org')\n    assert is_url('http://www.python.org/path/')\n    assert not is_url('www.python.org')\n    assert not is_url('http://www.python.org.com/')\n    assert not is_url('http://www.python.org.com')\n    assert not is_url('http://www.python.org.com/path/')\n    assert not is_url('http://www.python.org.com/path/file.html')\n    assert not is_url('http://www.python.org.com/path/file.html#')\n    assert not is_url('http://www.python.org.com/path/file.html#file.html')\n    assert not is_url('http://www.python.org.com/path/file.html#file.html#')\n    assert not is_url('http://www.python.org.com/path/file.html#file.html#file.html')\n    assert not is_url('http://www.python.org.com/path/file.html#file.html#/')\n    assert not is_url('http://www.python.org.com/path/file.html#file.html#/file.html')\n    assert not is_url('http://www.python.org.com/path/file.html#/file.html')\n    assert not is_url('http://www.python.org.com/path/file.html#/')\n    assert not is_url('http://www.python.org.com/path/file.html#')\n    assert not is_url",
    "import re\n\n# Complete the function below.\ndef is_url(url):\n    url = url.strip()\n    if not re.match(r'^[A-Za-z]+://', url):\n        return False\n    url_components = url.split('/')\n    if len(url_components) < 3:\n        return False\n    return True\n\n#print is_url(\"http://www.python.org\")\n#print is_url(\"www.python.org\")\n#print is_url(\"www.python.org/\")\n#print is_url(\"www.python.org/index.html\")\n#print is_url(\"www.python.org.com\")\n#print is_url(\"www.python.org.com.br\")\n#print is_url(\"www.python.org.com.br/index.html\")",
    "url = \"http://www.python.org\"\nprint(url.startswith(\"http://\"))\nprint(url.endswith(\"/\"))\nprint(url.find(\"www\"))\nprint(url.find(\"org\"))\nprint(url.find(\"org/python\"))\nprint(url.find(\"org/python/\") > 0)\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") < url.find(\"org/python/\"))\n\n# regex\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") < url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") > url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\n\n# urlparse\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\n\n# urllib\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\n\n# urllib2\nprint(url.find(\"org/python/\") == url.find(\"org/python/\"))\nprint(url.find(\"org/python/\") == url.",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    :param url: url string\n    :return: True if valid, else False\n    \"\"\"\n    url_regex = re.compile(r'^https?://(w{3}|[a-z0-9\\-]+\\.)+[a-z]{2,4}/?')\n    return url_regex.match(url) is not None\n\ndef main():\n    \"\"\"\n    Test Cases\n    ------\n    >>> is_valid_url('http://www.google.com')\n    True\n    >>> is_valid_url('http://www.google.com/')\n    False\n    >>> is_valid_url('http://www.google.com/test/test')\n    False\n    >>> is_valid_url('http://www.google.com/test/test?a=b')\n    False\n    >>> is_valid_url('http://www.google.com/test/test#abc')\n    True\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()",
    "import re\n\n# Complete the function below.\ndef is_url(s):\n    \"\"\"\n    Returns True if string is a valid url\n    :param s: str\n    :return: bool\n    \"\"\"\n    return re.match(r'^(http|ftp)s?://' # http:// or https://\n                    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+'\n                    r'(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n                    r'localhost|' #localhost...\n                    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n                    r'(?::\\d+)?' # optional port\n                    r'(?:/?|[/?]\\S+)$', s)",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    Checks if a given url is a valid url or not.\n    :param url: The url to be checked.\n    :return: True if valid, else False.\n    \"\"\"\n    return re.match(r'^(https?|ftp|gopher|mailto|telnet|file|notes|ms-help):', url)",
    "# https://www.hackerrank.com/challenges/valid-url\ndef is_valid_url(url):\n    if not url:\n        return False\n    if not \"http://\" in url:\n        return False\n    url = url.strip().lower()\n    url = url.replace(\" \", \"%20\")\n    try:\n        # urlparse.urlparse(url)\n        parsed_url = urlparse.urlparse(url)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_relative=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_relative=False, allow_netloc=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_netloc=False, allow_relative=False, allow_query=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_netloc=False, allow_relative=False, allow_query=False, allow_fragments=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_netloc=False, allow_relative=False, allow_query=False, allow_fragments=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_netloc=False, allow_relative=False, allow_query=False, allow_fragments=False)\n        # parsed_url = urlparse.urlparse(url, allow_fragments=False, strict_parsing=False, allow_netloc=False, allow_relative=False, allow_query",
    "def is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    if not url:\n        return False\n    if len(url) < 8:\n        return False\n    if 'http' not in url:\n        return False\n    if '://' not in url:\n        return False\n    if '.' not in url:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(is_url('http://www.python.org/'))\n    print(is_url('http://www.python.org.'))\n    print(is_url('http://www.python.org/index.html'))\n    print(is_url('http://www.python.org/index.html'))\n    print(is_url('http://www.python.org/about/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_url('http://www.python.org/community/'))\n    print(is_",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    Function to check if a url is valid or not using regex.\n    :param url: url to check\n    :return: True if url is valid, False otherwise\n    \"\"\"\n    url_regex = r'^(https?|ftp)://'\n    if re.match(url_regex, url):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    url = 'https://www.youtube.com/watch?v=Z_9y4LgVtj0'\n    is_valid = is_url(url)\n    print(is_valid)",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid.\n\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    return re.match('^(https?://)?([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=<>()~_+!$@]*)?$', url) is not None\n\ndef main():\n    \"\"\"\n    Main program\n    \"\"\"\n    url = 'http://www.python.org'\n    assert is_valid_url(url) == True\n\nif __name__ == '__main__':\n    main()",
    "# TODO: add regex tests for:\n# https://github.com/openstack/keystone/blob/master/keystone/tests/unit/tests/v3/v3_api.py#L24\n# https://github.com/openstack/keystone/blob/master/keystone/tests/unit/tests/v3/v3_api.py#L28\n\n\ndef is_valid(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    :param url: url to check\n    :type url: str\n    :return: True if url is valid, False otherwise\n    :rtype: bool\n    \"\"\"\n\n    # TODO: add regex tests for:\n    # https://github.com/openstack/keystone/blob/master/keystone/tests/unit/tests/v3/v3_api.py#L24\n    # https://github.com/openstack/keystone/blob/master/keystone/tests/unit/tests/v3/v3_api.py#L28\n    return True",
    "# TODO:\n# 1) check for valid http url\n# 2) check for valid https url\n# 3) check for valid email address\n# 4) check for valid phone number\n# 5) check for valid zip code\n# 6) check for valid credit card number\n# 7) check for valid password\n# 8) check for valid username\n# 9) check for valid ip address\n# 10) check for valid ipv4 address\n# 11) check for valid ipv6 address\n# 12) check for valid url\n# 13) check for valid email\n# 14) check for valid credit card number\n# 15) check for valid phone number\n# 16) check for valid zip code\n# 17) check for valid ip address\n# 18) check for valid ipv4 address\n# 19) check for valid ipv6 address\n# 20) check for valid url\n\nimport re\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    Input: url\n    Output: True if url is valid, otherwise False.\n    \"\"\"\n\n    # TODO:\n    # 1) check for valid http url\n    # 2) check for valid https url\n    # 3) check for valid email address\n    # 4) check for valid phone number\n    # 5) check for valid zip code\n    # 6) check for valid credit card number\n    # 7) check for valid password\n    # 8) check for valid username\n    # 9) check for valid ip address\n    # 10) check for valid ipv4 address\n    # 11) check for valid ipv6 address\n    # 12) check for valid url\n    # 13) check for valid email\n    # 14) check for valid credit card number\n    # 15) check for valid phone number\n    # 16) check for valid zip code\n    # 17) check for valid ip address\n    # 18) check for valid ipv4 address\n    # 19) check for valid ipv6 address\n    # 20) check for valid url\n    # 21) check for valid email\n    # 22) check for valid credit card number\n    # 23) check for valid phone number\n    # 24) check for valid zip code\n    # 25) check for valid ip address\n    # 26) check for valid ipv4",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    Input:\n    url -- string, the url to be checked.\n\n    Output:\n    True -- if the url is valid, False -- otherwise.\n    \"\"\"\n    pattern = re.compile(r\"^(?:http|ftp)s?://\" # http:// or https://\n    r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\" #domain...\n    r\"localhost|\" #localhost...\n    r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\" #...or ip\n    r\"(?::\\d+)?\" # optional port\n    r\"(?:/?|[/?]\\S+)$\", re.IGNORECASE)\n    return bool(pattern.match(url))",
    "import re\n\ndef url_is_valid(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    if re.match(r\"^https?://\", url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    assert url_is_valid('http://www.python.org')\n    assert url_is_valid('http://www.python.org/')\n    assert url_is_valid('https://www.python.org/')\n    assert url_is_valid('http://www.python.org/')\n    assert url_is_valid('http://www.python.org/abc/def')\n    assert url_is_valid('http://www.python.org/abc/def#frag')\n    assert url_is_valid('http://www.python.org/abc#def')\n    assert url_is_valid('http://www.python.org/abc?def#ghi')\n    assert url_is_valid('http://www.python.org/abc?def')\n    assert url_is_valid('http://www.python.org/abc?#def')\n    assert url_is_valid('http://www.python.org/abc#')\n    assert url_is_valid('http://www.python.org')\n    assert url_is_valid('http://www.python.org/')\n    assert url_is_valid('http://www.python.org/abc/def?ghi#jkl')\n    assert url_is_valid('http://www.python.org/abc/def?ghi#jkl')\n    assert url_is_valid('http://www.python.org/abc#def?ghi')\n    assert url_is_valid('http://www.python.org/abc#def')\n    assert url_is_valid('http://www.python.org/abc#')\n    assert url_is_valid('http://www.python.org/')\n    assert url_is_valid('http://www.python.org')\n    assert url_is_valid('http://www.python.org/abc/def.html#ghi')\n    assert",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    Given a url, returns True if valid and False if invalid.\n\n    url: string, the URL to be checked for validity.\n    \"\"\"\n    return bool(re.match(r'^(https?://)?([\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?)$', url, re.IGNORECASE))\n\nprint(is_url('www.google.com'))\nprint(is_url('http://www.google.com'))\nprint(is_url('https://www.google.com'))\nprint(is_url('www.google.com/'))\nprint(is_url('www.google.com?a=1&b=2&c=3'))\nprint(is_url('http://www.google.com/?q=python'))",
    "def valid_url(url):\n    \"\"\"\n    Given a url check if it is a valid url or not.\n    Return True if valid url and False if invalid url.\n    \"\"\"\n    return bool(re.match(\"^(http|ftp|https)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]\", url))\n\n# print valid_url(\"https://www.google.com\")\nprint valid_url(\"http://www.google.com\")\nprint valid_url(\"http://www.google.com/\")\nprint valid_url(\"http://www.google.com/index.html\")\nprint valid_url(\"http://www.google.com/index.htm\")\nprint valid_url(\"http://www.google.com/index.php\")\nprint valid_url(\"http://www.google.com/index.php?a=b\")\nprint valid_url(\"http://www.google.com/index.php?a=b&c=d\")\nprint valid_url(\"http://www.google.com/index.php?a=b&c=d&e=f\")",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'https?://(?:[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)?)', url) is not None\n\n# Your function will be called as such:\n# for url in urls:\n#     is_valid, has_schema, has_auth, has_params = is_url(url)",
    "def is_url(url):\n    \"\"\"\n    Check if the url is valid.\n    :param url: url to be checked\n    :return: True if the url is valid, False otherwise\n    \"\"\"\n    return bool(re.match(r'^(https?:)?//(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$', url))",
    "# https://www.hackerrank.com/challenges/url-regex/problem\n\n\ndef is_url(url):\n    return re.match(r'^(https?|ftp)://[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)', url) is not None\n\n\ndef is_valid_url(url):\n    return is_url(url) and len(url) < 2000\n\n\nif __name__ == \"__main__\":\n    url = input()\n    print(is_valid_url(url))",
    "# https://www.hackerrank.com/challenges/check-if-url-is-valid\n\nimport re\n\ndef is_valid(url):\n    if not re.match(\"^(https?:\\\\/\\\\/)?(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#?&//=]*)\\\\b$\", url):\n        return False\n    else:\n        return True\n\nif __name__ == \"__main__\":\n    url = input()\n    if is_valid(url):\n        print \"YES\"\n    else:\n        print \"NO\"",
    "import re\n\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    :param url:\n    :return:\n    \"\"\"\n    # Valid URL should start with http:// or https://\n    if url.startswith('http://'):\n        regex = re.compile('^http://(?:www\\.)?')\n    elif url.startswith('https://'):\n        regex = re.compile('^https://(?:www\\.)?')\n    else:\n        return False\n    if not regex.match(url):\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_url('http://www.google.com'))\n    print(valid_url('https://www.google.com'))\n    print(valid_url('http://www.google.com/'))\n    print(valid_url('http://www.google.com/index.html'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html?name=abc#anchor'))\n    print(valid_url('http://www.google.com/index.html?name=abc#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url('http://www.google.com/index.html#anchor'))\n    print(valid_url",
    "# https://www.hackerrank.com/challenges/url-validation/problem\n\n# Complete the urlValidation function below.\ndef urlValidation(url):\n    # Complete this function\n    if not url:\n        return False\n    try:\n        if not url.startswith('http'):\n            return False\n        url = url.split('/')\n        if len(url) < 2:\n            return False\n        return True\n    except Exception as e:\n        return False\n\nif __name__ == '__main__':\n    url = input().strip()\n    print(urlValidation(url))",
    "url = \"http://www.python.org/\"\n\ndef is_url(url):\n    # Write your code here\n    return url.startswith(\"http://\") or url.startswith(\"https://\")\n\nprint(is_url(url))",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    Returns true if url is valid.\n    \"\"\"\n    try:\n        re.match(r'^(?:http|ftp)s?://'\n                 r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?.)+(?:[A-Z]{2,6}\\.?)|'\n                 r'localhost|'\n                 r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n                 r'(?::\\d+)?'\n                 r'(?:/?|[/?]\\S+)$', url)\n    except re.error:\n        return False\n    return True\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    url = input('URL: ')\n    if is_url(url):\n        print('Valid URL')\n    else:\n        print('Invalid URL')\n\n\nif __name__ == '__main__':\n    main()",
    "url = \"http://www.python.org/\"\nurl2 = \"http://www.python.org/index.html\"\nurl3 = \"http://www.python.org/cgi/viewlog.cgi/channel/pagelist/1/index.html\"\nurl4 = \"http://www.python.org/cgi/viewlog.cgi/channel/pagelist/2/index.html\"\nurl5 = \"http://www.python.org/cgi/viewlog.cgi/channel/pagelist/3/index.html\"\n\ndef is_valid_url(url):\n    return url.find('http://')!= -1\n\nprint(is_valid_url(url))\nprint(is_valid_url(url2))\nprint(is_valid_url(url3))\nprint(is_valid_url(url4))\nprint(is_valid_url(url5))",
    "# import re\n# from string import ascii_letters\n\n# def is_valid_url(url):\n    # url = url.lower()\n    # pattern = re.compile(\"^(https?://)?([^\\s]+\\.)+([^\\s]+)?([/][^\\s]*)?$\")\n    # if pattern.match(url):\n        # return True\n    # else:\n        # return False\n\n# def is_valid_url(url):\n    # if url:\n        # if re.match(r'^[A-Za-z0-9-_.]+\\.[A-Za-z0-9-_.]+$', url):\n            # return True\n    # else:\n        # return False\n\n# def is_valid_url(url):\n    # if url:\n        # if re.match(r'^[A-Za-z0-9-_.]+\\.[A-Za-z0-9-_.]+$', url):\n            # return True\n    # else:\n        # return False\n\n# def is_valid_url(url):\n    # if url:\n        # if re.match(r'^(https?://)?([A-Za-z0-9-_.]+\\.[A-Za-z0-9-_.]+)/?$', url):\n            # return True\n    # else:\n        # return False\n\n\n# def is_valid_url(url):\n    # if url:\n        # if re.match(r'^(https?://)?([A-Za-z0-9-_.]+\\.[A-Za-z0-9-_.]+)/?$', url):\n            # return True\n    # else:\n        # return False\n\n# def is_valid_url(url):\n    # if url:\n        # if re.match(r'^(https?://)?([A-Za-z0-9-_.]+\\.[A-Za-z0-9-_.]+)/?$', url):\n            # return True\n    # else:\n        # return False\n\n# def is",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    Check if the url is valid or not.\n    \"\"\"\n    if re.match(r\"^(https?|ftp)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]*[-A-Za-z0-9+&@#/%=~_|]\", url):\n        return True\n    return False",
    "def is_url(url):\n    if url.startswith('http://') or url.startswith('https://'):\n        return True\n    else:\n        return False\n\n\ndef main():\n    urls = ['http://www.python.org', 'www.python.org', 'http://www.python.org/',\n            'http://www.python.org/index.html', 'http://www.python.org/about.html',\n            'www.python.org/contents_of_directory_www/index.html',\n            'www.python.org/images/python_logo.gif']\n    for url in urls:\n        print url, is_url(url)\n\nif __name__ == '__main__':\n    main()",
    "# http://stackoverflow.com/questions/9229325/is-there-a-valid-url-regex\n# http://stackoverflow.com/questions/11126626/python-regex-validation\n# http://stackoverflow.com/questions/231289/how-can-i-validate-a-url-with-regex\n# http://stackoverflow.com/questions/9552429/validate-url-using-regex\n# http://stackoverflow.com/questions/16240103/python-regex-validation-with-validators\n# http://stackoverflow.com/questions/16240103/python-regex-validation-with-validators\n\nimport re\n\ndef url_is_valid(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    >>> url_is_valid(\"http://google.com\")\n    True\n    >>> url_is_valid(\"http://google.com/\")\n    True\n    >>> url_is_valid(\"http://google.com/test\")\n    True\n    >>> url_is_valid(\"http://google.com/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test/test/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.com/test/test/test/test/test/test/test/\")\n    True\n    >>> url_is_valid(\"http://google.",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid using regex.\n\n    :param url:\n    :return:\n    \"\"\"\n    return bool(re.match(r'^(https?://)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$', url))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    urls = [\n        'http://www.google.com',\n        'http://www.google.com/',\n        'http://www.google.com/index.html',\n        'http://www.google.com/index.html#',\n        'http://www.google.com/index.html#foo',\n        'http://www.google.com/index.html?foo=bar',\n        'http://www.google.com/index.html?foo=bar#',\n        'http://www.google.com/index.html?foo=bar#foo',\n        'http://www.google.com/index.html?foo=bar#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo',\n        'http://www.google.com/index.html?foo=bar#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo#foo#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#foo#foo#foo#foo#foo#foo#foo#',\n        'http://www.google.com/index.html?foo=bar#",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^(https?://)?([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=+#()_~.@!]*)$', url) is not None\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    url = input()\n    print(is_url(url))\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import namedtuple\n\nUrl = namedtuple(\"Url\", \"scheme netloc path query fragment\")\n\n\nclass UrlValidator:\n\n    def __init__(self, url):\n        self.url = url\n\n    def is_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.is_scheme_valid() and self.is_netloc_valid() and self.is_path_valid() and self.is_query_valid() and self.is_fragment_valid()\n\n    def is_scheme_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.url.scheme and self.url.scheme.lower() in (\"http\", \"https\")\n\n    def is_netloc_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.url.netloc and self.url.netloc.lower() in (\"http\", \"https\")\n\n    def is_path_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.url.path and self.url.path.lower() in (\"/\")\n\n    def is_query_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.url.query and self.url.query.lower() in (\"\")\n\n    def is_fragment_valid(self):\n        \"\"\"\n        :type url: str\n        :rtype: bool\n        \"\"\"\n        return self.url.fragment and self.url.fragment.lower() in (\"\")\n\n\ndef main():\n    \"\"\"\n    >>> UrlValidator(\"http://www.google.com\").is_valid()\n    True\n    >>> UrlValidator(\"https://www.google.com\").is_valid()\n    True\n    >>> UrlValidator(\"http://www.google.com/\").is_valid()\n    True\n    >>> UrlValidator(\"http://www.google.com/abc\").is_valid()\n    False",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Input url is string and return boolean.\n\n    >>> is_valid_url('www.google.com')\n    True\n    >>> is_valid_url('www.google.com/')\n    False\n    >>> is_valid_url('www.google.com?a=b')\n    False\n    >>> is_valid_url('http://www.google.com/')\n    True\n    >>> is_valid_url('http://www.google.com?a=b')\n    True\n    >>> is_valid_url('http://www.google.com/a/b/c')\n    True\n    >>> is_valid_url('http://www.google.com/a/b/c?a=b&c=d')\n    True\n    >>> is_valid_url('http://www.google.com/a/b/c#d')\n    False\n    \"\"\"\n\n    # if the url is empty or null, return false\n    if url is None:\n        return False\n\n    # if the url is empty, return false\n    if len(url) == 0:\n        return False\n\n    # if the url is a string, return false\n    if isinstance(url, str):\n        return False\n\n    # if the url is a list, return false\n    if isinstance(url, list):\n        return False\n\n    # if the url is a dictionary, return false\n    if isinstance(url, dict):\n        return False\n\n    # if the url is a tuple, return false\n    if isinstance(url, tuple):\n        return False\n\n    # if the url is a number, return false\n    if isinstance(url, int):\n        return False\n\n    # if the url is a number, return false\n    if isinstance(url, float):\n        return False\n\n    # if the url is a boolean, return false\n    if isinstance(url, bool):\n        return False\n\n    # if the url is a datetime, return false\n    if isinstance(url, datetime):\n        return False\n\n    # if the url is a date, return false\n    if isinstance(url, date):\n        return False\n\n    # if the",
    "#!/usr/bin/env python\n\ndef is_valid_url(url):\n    return url.strip().find('://') > -1 and url.strip().find('/') == -1\n\ndef test():\n    assert is_valid_url('http://www.google.com/')\n    assert is_valid_url('http://www.google.com/')\n    assert not is_valid_url('http://www.google.com/hello')\n    assert not is_valid_url('http://www.google.com/hello/')\n    assert not is_valid_url('http://www.google.com/hello/h')\n    assert not is_valid_url('http://www.google.com/hello/h/')\n    assert not is_valid_url('http://www.google.com/hello/h/s')\n    assert not is_valid_url('http://www.google.com/hello/h/s/')\n    assert not is_valid_url('http://www.google.com/hello/h/s/t')\n\nif __name__ == '__main__':\n    test()",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Given a string url, return True if the url is valid.\n    Return False otherwise.\n    \"\"\"\n    if not url:\n        return False\n    if url.startswith('http://'):\n        url = url.replace('http://', '')\n    if url.startswith('https://'):\n        url = url.replace('https://', '')\n    if url.startswith('www.'):\n        url = url.replace('www.', '')\n    if 'http://' in url:\n        url = url.replace('http://', '')\n    if 'https://' in url:\n        url = url.replace('https://', '')\n    if 'www.' in url:\n        url = url.replace('www.', '')\n    if url.endswith('/') or'' in url:\n        return False\n    if not re.match(r'[a-zA-Z0-9]', url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    url = 'http://www.google.com/'\n    assert is_valid_url(url) is True\n    url = 'http://www.google.com/abc/def'\n    assert is_valid_url(url) is True\n    url = 'http://www.google.com/abc/def/'\n    assert is_valid_url(url) is True\n    url = 'http://www.google.com/abc/def/ghi'\n    assert is_valid_url(url) is True\n    url = 'http://www.google.com/abc/def/ghi/'\n    assert is_valid_url(url) is True\n    url = 'http://www.google.com/abc/def/ghi/abc'\n    assert is_valid_url(url) is False\n    url = 'http://www.google.com/abc/def/ghi/abc/'\n    assert is_valid_url(url) is False",
    "#!/usr/bin/python\n\nimport re\n\ndef is_valid_url(url):\n    # TODO: write your code here\n    # For example:\n    #   - url = 'http://www.google.com/'\n    #   - url = 'www.google.com/'\n    #   - url = 'http://www.google.com/index.html'\n    #   - url = 'http://www.google.com/index.htm'\n    #   - url = 'http://www.google.com/index.php'\n    #   - url = 'http://www.google.com/index.php?a=b'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h&i=j'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h&i=j&k=l'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h&i=j&k=l&m=n'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h&i=j&k=l&m=n&o=p'\n    #   - url = 'http://www.google.com/index.php?a=b&c=d&e=f&g=h&i=j&k=l&m=n&o=p&q=r'\n    #   - url = 'http://www.google.com/index.php?a",
    "import re\n\ndef is_valid_url(url):\n    if not re.match(r'^[a-zA-Z0-9]+://[^\\s/]*$', url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    urls = [\n        'https://www.python.org',\n        'http://www.python.org',\n        'http://www.python.org/',\n        'https://github.com/',\n        'http://github.com/',\n        'http://github.com/abc',\n        'https://github.com/abc',\n        'http://github.com/abc/',\n        'https://github.com/abc/',\n        'http://github.com/abc/def',\n        'https://github.com/abc/def',\n        'http://github.com/abc/def/',\n        'https://github.com/abc/def/',\n        'http://github.com/abc/def/ghi',\n        'https://github.com/abc/def/ghi',\n        'http://github.com/abc/def/ghi/',\n        'https://github.com/abc/def/ghi/',\n        'http://github.com/abc/def/ghi/xyz',\n        'https://github.com/abc/def/ghi/xyz',\n        'http://github.com/abc/def/ghi/xyz/',\n        'https://github.com/abc/def/ghi/xyz/',\n        'http://github.com/abc/def/ghi/xyz/xyz',\n        'https://github.com/abc/def/ghi/xyz/xyz/',\n        'http://github.com/abc/def/ghi/xyz/xyz/xyz',\n        'http://github.com/abc/def/ghi/xyz/xyz/xyz/',\n        'https://github.com/abc/def/ghi/xyz/xyz/xyz/xyz/xyz',\n        'http://github.com/abc/def/",
    "# https://www.interviewbit.com/questions/url-validation-in-python\n\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns True if the string is a valid URL, otherwise False.\n\n    >>> is_valid_url(\"www.python.org\")\n    True\n    >>> is_valid_url(\"www.python.org/index.html\")\n    False\n    >>> is_valid_url(\"http://www.python.org/\")\n    True\n    >>> is_valid_url(\"www.python.org\")\n    False\n    \"\"\"\n    # URL must start with http:// or https://\n    if not re.match(\"^https?://\", url):\n        return False\n    # URL must not contain a space\n    if re.search(\" \", url):\n        return False\n    # URL must not contain a '?'\n    if re.search(\"\\?\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a 'javascript:...'\n    if re.search(\"javascript\", url):\n        return False\n    # URL must not end with a '.'\n    if re.search(\".$\", url):\n        return False\n    # URL must not end with a '/'\n    if re.search(\"/$\", url):\n        return False\n    # URL must not end with a '?'\n    if re.search(\"\\?\", url):\n        return False\n    # URL must not end with a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must not contain a '#'\n    if re.search(\"#\", url):\n        return False\n    # URL must",
    "from collections import namedtuple\n\nURL = namedtuple('URL','scheme, netloc, path, params, query, fragment')\n\ndef is_url(url):\n    \"\"\"\n    Returns true if url is valid, false otherwise.\n    \"\"\"\n    parts = url.split('://', 1)\n    scheme = parts[0]\n    if scheme not in ('http', 'https', 'ftp', 'ftps'):\n        return False\n    netloc = parts[1]\n    if '[' in netloc and ']' in netloc:\n        # FIXME: validate IPv6 addresses\n        netloc = netloc[netloc.index('['):netloc.index(']') + 1]\n    if ':' in netloc:\n        # netloc should not contain ':' for IPv6 addresses\n        # see RFC 2396 Section 3.2 and RFC 2732\n        netloc = netloc.split(':')[0]\n    path = parts[2]\n    return URL(scheme, netloc, path, None, None, None)\n\n\ndef test_is_url():\n    assert is_url('http://google.com/')\n    assert is_url('http://google.com/index.html')\n    assert is_url('http://google.com/index.php')\n    assert not is_url('google.com/')\n    assert not is_url('/')\n    assert not is_url('http://google.com')\n    assert not is_url('http://google.com/index.html/')\n    assert not is_url('http://google.com/index.html/index.html')\n    assert not is_url('http://google.com/index.html/index.php/')\n    assert not is_url('http://google.com/index.html/index.php?a=b')\n    assert not is_url('http://google.com/index.html/index.php?a=b#c')\n    assert not is_url('http://google.com/index.html/index.php#c')\n    assert not is_url('http://google.com/index.html/index.php?a=b#c')\n    assert not",
    "#!/usr/bin/env python\n\nimport re\n\ndef valid_url(url):\n    \"\"\"\n    Checks if the given url is valid or not.\n    \"\"\"\n    \n    # If the url is not valid then return False\n    if not re.match(r'^[a-zA-Z0-9]+://[^\\s]*$', url):\n        return False\n    \n    # If the url is valid then return True\n    return True\n    \n    \n# Test Cases\n# url = \"http://www.google.com/\"\n# url = \"http://www.google.com/search?q=python\"\n# url = \"http://www.google.com/search?q=python&btnG=Google%20Search\"\n# url = \"http://www.google.com/search?q=python+%28with+parentheses%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29%29%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29%29%29%29\"\n# url = \"http://www.google.com/search?q=python%28with%29parentheses%29%28with%29parentheses%29%29%29%29%29\"\n# url = \"http://www.google.com",
    "# https://github.com/Preetam/PyPI-Sitemap-Validator/blob/master/sitemap_validator.py\n\ndef is_valid_url(url):\n    import re\n    return re.match(r\"https?://\", url) is not None\n\ndef test():\n    assert is_valid_url(\"http://www.google.com\")\n    assert is_valid_url(\"https://www.google.com\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"",
    "import re\n\n# Note:\n# This function will be tested and passed when you submit your code.\n# If you have any question, please open an issue on Github.\n\ndef is_url(url):\n    \"\"\"\n    Check if the url is valid or not.\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    pattern = re.compile(r'^(http|ftp)s?://'  # scheme\n                         r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)'\n                         r'+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain name\n                         r'localhost|'  # localhost...\n                         r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  #...or ip\n                         r'(?::\\d+)?'  # optional port\n                         r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))\n\n\n# Note:\n# This function will be tested and passed when you submit your code.\n# If you have any question, please open an issue on Github.\n\ndef is_valid(url):\n    \"\"\"\n    Check if the url is valid or not.\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    return is_url(url) and not url.startswith('http://') and not url.startswith('https://')",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns True if url is valid, False otherwise.\n    :param url: The url to check.\n    \"\"\"\n    # TODO: Write regex that checks if url is valid.\n    return True\n\nif __name__ == '__main__':\n    # TODO: Write tests for this function.\n    pass",
    "import re\n\ndef is_valid(url):\n    \"\"\"\n    Check if a url is valid using regex\n    \"\"\"\n    if url is None:\n        return False\n    if not url.startswith(\"http://\"):\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    url = \"http://www.google.com\"\n    if is_valid(url):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")",
    "def is_valid_url(url):\n    import re\n    return bool(re.match(\"(https?://)?([\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?)\", url))\n\nif __name__ == \"__main__\":\n    urls = [\"http://www.python.org/\", \"www.python.org\", \"http://www.python.org/index.html\", \"www.python.org/products/\", \"python.org/?q=test\"]\n    for url in urls:\n        print(\"{} is valid: {}\".format(url, is_valid_url(url)))",
    "# Definition for a URL.\nclass URL:\n    def __init__(self, url):\n        self.url = url\n        self.host = None\n        self.path = None\n\n    def __str__(self):\n        return self.url\n\n    def __repr__(self):\n        return self.url\n\n    def set_host(self, host):\n        self.host = host\n\n    def set_path(self, path):\n        self.path = path\n\n    def get_host(self):\n        return self.host\n\n    def get_path(self):\n        return self.path\n\n    def is_valid(self):\n        \"\"\"\n        Returns a boolean indicating whether this URL is valid.\n        \"\"\"\n        if not self.host:\n            return False\n        if not self.path:\n            return False\n        return True\n\n\n# Your URL object will be instantiated and called as such:\n# obj = URL(url)\n# param_1 = obj.set_host(url)\n# param_2 = obj.set_path(url)\n# param_3 = obj.is_valid()\n# param_4 = obj.get_host()\n# param_5 = obj.get_path()",
    "import re\n\ndef valid_url(url):\n    if not re.match(r'^(https?:\\\\/\\\\/)', url):\n        return False\n    if not re.match(r'(www\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#?&//=]*)', url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    url = 'http://www.google.com/'\n    print valid_url(url)\n    url = 'www.google.com/'\n    print valid_url(url)\n    url = 'http://www.google.com/abc'\n    print valid_url(url)\n    url = 'www.google.com/abc/def'\n    print valid_url(url)\n    url = 'www.google.com/abc/def?ghi'\n    print valid_url(url)\n    url = 'www.google.com/abc/def?ghi#xyz'\n    print valid_url(url)\n    url = 'www.google.com/abc/def?ghi#xyz/asdf'\n    print valid_url(url)\n    url = 'www.google.com/abc/def?ghi#xyz/asdf/'\n    print valid_url(url)",
    "import re\n\n\ndef is_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    :param url: String\n    :return: Boolean\n    \"\"\"\n    return re.match(r'^(https?://)?([\\w-]+(?:\\.[\\w-]+)+)(:(\\d+))?$', url)\n\n\nif __name__ == '__main__':\n    assert is_url('https://google.com/') is True\n    assert is_url('google.com') is False",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    if re.match(r\"^(http|ftp)s?://\", url, re.I):\n        return True\n    else:\n        return False",
    "import re\n\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    :param url: The url to be validated\n    :return: True if valid, False otherwise\n    \"\"\"\n    return re.match(r'^(https?|ftp)://', url) is not None\n\n\nif __name__ == '__main__':\n    assert is_valid_url('http://www.python.org/'), 'http://www.python.org/ is valid'\n    assert is_valid_url('ftp://ftp.python.org/'), 'ftp://ftp.python.org/ is valid'\n    assert not is_valid_url('http://www.python.org/index.html'), 'http://www.python.org/index.html is invalid'",
    "# https://www.tutorialspoint.com/python/regex_regular_expression.htm\n\ndef valid_url(url):\n    \"\"\"\n    Check if url is valid or not using regex.\n\n    :param url: string\n    :return: boolean\n    \"\"\"\n\n    # Valid url example:\n    # http://www.google.com/\n    # https://www.google.com/\n    # http://www.google.com/search?q=python\n\n    # Invalid url example:\n    # http://www.google.com/search?q=python+python\n    # http://www.google.com/search?q=python+python%20python\n    # http://www.google.com/search?q=python+python%20python%20python\n\n    # Valid url example:\n    # http://www.google.com/search?q=python+python\n    # https://www.google.com/search?q=python+python\n    # http://www.google.com/search?q=python+python%20python\n    # https://www.google.com/search?q=python+python%20python%20python\n\n    # Valid url example:\n    # http://www.google.com/search?q=python+python\n    # http://www.google.com/search?q=python+python%20python\n    # http://www.google.com/search?q=python+python%20python%20python\n\n    # Valid url example:\n    # http://www.google.com/search?q=python+python\n    # http://www.google.com/search?q=python+python%20python\n    # http://www.google.com/search?q=python+python%20python%20python\n\n    # Valid url example:\n    # http://www.google.com/search?q=python+python\n    # http://www.google.com/search?q=python+python%20python\n    # http://www.google.com/search?q=python+python%20python%20python\n\n    # Valid url example:\n    # http://www.google.com/search?q=python+python\n    # https://www.google.com/",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid using regex.\n    \"\"\"\n    return bool(re.match(r'https?://([-\\w\\.]+)+(:\\d+)?(/([\\w/\\-.]*(\\?\\S+)?)?)?$', url))\n\nif __name__ == '__main__':\n    print(is_valid_url('https://www.google.com'))\n    print(is_valid_url('https://www.google.com/path'))\n    print(is_valid_url('https://www.google.com/path?a=1'))\n    print(is_valid_url('https://www.google.com/path?a=1#fragment'))\n    print(is_valid_url('https://www.google.com/path#fragment'))\n    print(is_valid_url('https://www.google.com/path#fragment#fragment'))",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Input: string\n    Output: bool\n    \"\"\"\n    return bool(re.match(r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+' # domain...\n        r'(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #...or ip\n        r'localhost|' # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', url))\n\ndef is_valid_email(email):\n    \"\"\"\n    Input: string\n    Output: bool\n    \"\"\"\n    return bool(re.match(r'^[\\w\\-\\.]+@[\\w\\-]+\\.[\\w\\-]{2,5}$', email))\n\ndef is_valid_phone(phone):\n    \"\"\"\n    Input: string\n    Output: bool\n    \"\"\"\n    return bool(re.match(r'^\\([0-9\\-\\.]+\\)[0-9\\-\\.]+\\.[0-9\\-\\.]+$', phone))\n\ndef is_valid_zip(zip_code):\n    \"\"\"\n    Input: string\n    Output: bool\n    \"\"\"\n    return bool(re.match(r'^\\d{5}$', zip_code))\n\ndef is_valid_ip(ip):\n    \"\"\"\n    Input: string\n    Output: bool\n    \"\"\"\n    return bool(re.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4",
    "import re\n\ndef valid_url(url):\n    \"\"\"\n    Checks if the given url is valid or not.\n\n    Arguments:\n    url -- The url that needs to be checked\n\n    Returns:\n    True if the url is valid or False if not.\n\n    Examples:\n    >>> valid_url(\"http://www.python.org/\")\n    True\n    >>> valid_url(\"www.python.org/index.html\")\n    True\n    >>> valid_url(\"xyz.com\")\n    False\n    \"\"\"\n    if re.match(r'^(?:http|ftp)s?://' # http:// or https://\n                r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+'\n                r'(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n                r'localhost|' #localhost...\n                r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n                r'(?::\\d+)?' # optional port\n                r'(?:/?|[/?]\\S+)$', url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert valid_url('http://www.python.org/') == True\n    assert valid_url('www.python.org/index.html') == True\n    assert valid_url('xyz.com') == False\n    assert valid_url('http://www.python.org/index.html') == True",
    "def is_url(url):\n    \"\"\"\n    Check if a url is valid or not.\n    :param url: URL to check\n    :return: True if valid, False otherwise.\n    \"\"\"\n    valid_url = (\n        r'^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z]{2,6}\\.?$'\n    )\n    return re.match(valid_url, url)\n\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    url = input('Enter URL: ')\n    print('Is valid URL?'+ str(is_url(url)))\n\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if url is valid or not.\n    \"\"\"\n    if re.match(r'^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]', url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert is_valid_url('https://www.google.com'), 'https'\n    assert is_valid_url('ftp://ftp.gmane.org'), 'ftp'\n    assert is_valid_url('http://www.google.com'), 'http'\n    assert is_valid_url('https://www.google.com/'), 'https'\n    assert not is_valid_url('google'), 'google'\n    assert not is_valid_url('http://www.google.com/'), 'http'\n    assert not is_valid_url('ftp://ftp.gmane.org'), 'ftp'",
    "# https://www.hackerrank.com/challenges/sales-invoice-parsing/problem\n\nimport re\n\ndef is_valid_url(url):\n    # check if url is valid\n    if re.match('^((ftp|http|https):\\/\\/)?(([A-Za-z0-9\\-]+.)+)(:[0-9]+)?(\\/.*)?$', url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    url = input()\n    print(is_valid_url(url))",
    "def is_valid_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    # TODO: write your code here\n    if re.search(r'[\\w\\d.~_\\-\\/]*', url) == None:\n        return False\n    else:\n        return True",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    Regex for valid url:\n    http://\n    https://\n    ftp://\n    file://\n    \"\"\"\n    return re.match(r\"^(https?|ftp):\\/\\/\", url)\n\ndef valid_url(url):\n    \"\"\"\n    Check if url is valid or not using regex.\n    \"\"\"\n    return is_url(url)\n\n# ------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n    url = 'www.google.com'\n    print(valid_url(url))",
    "import re\n\n# Your function should return true if the URL is valid,\n# otherwise false.\n\ndef is_valid(url):\n    if re.match(r'^[a-zA-Z]+://[^\\s/]*', url):\n        return True\n    else:\n        return False\n\n# If the URL is valid, write the string \"Is a valid URL\"\n# Otherwise, write the string \"Is not a valid URL\"\n\nif __name__ == \"__main__\":\n    print(is_valid('www.google.com'))\n    print(is_valid('http://www.google.com'))\n    print(is_valid('www.google.com/'))\n    print(is_valid('http://www.google.com/'))\n    print(is_valid('www.google.com/index.html'))\n    print(is_valid('http://www.google.com/index.html'))\n    print(is_valid('www.google.com/index.php'))\n    print(is_valid('http://www.google.com/index.php'))\n    print(is_valid('http://www.google.com/index.php?a=b'))\n    print(is_valid('http://www.google.com/index.php?a=b&c=d'))\n    print(is_valid('http://www.google.com/index.php?a=b&c=d#123'))\n    print(is_valid('http://www.google.com/index.php?a=b&c=d#123'))\n    print(is_valid('http://www.google.com/index.php?a=b&c=d#123#456'))\n    print(is_valid('http://www.google.com/index.php?a=b&c=d#123#456#123'))",
    "def is_valid(url):\n    \"\"\"\n    Check if url is valid using regex.\n\n    Input: url\n    Output: True/False\n    \"\"\"\n    import re\n\n    url = re.compile(\"^[a-zA-Z]+://[^\\s]*\")\n\n    return url.match(url)\n\n\n# Test\nif __name__ == \"__main__\":\n    url = \"https://www.google.com\"\n    print(is_valid(url))",
    "import re\n\ndef is_url(url):\n    \"\"\"\n    :type url: str\n    :rtype: bool\n    \"\"\"\n    if url is None:\n        return False\n\n    url_regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if url_regex.match(url):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    assert is_url('https://www.google.com') == True\n    assert is_url('http://www.google.com') == True\n    assert is_url('http://www.google.com/') == True\n    assert is_url('http://www.google.com/index.html') == True\n    assert is_url('http://www.google.com/index.html?a=1') == True\n    assert is_url('http://www.google.com/index.html?a=1#b') == True\n    assert is_url('http://www.google.com/index.html?a=1#b') == True\n    assert is_url('http://www.google.com/index.html?a=1#b&c=2') == True\n    assert is_url('http://www.google.com/index.html?a=1#b&c=2') == True\n    assert is_url('http://www.google.com/index.html?a=",
    "from collections import defaultdict\n\nurls = [\n    'http://www.python.org/',\n    'http://www.python.org/index.html',\n    'ftp://ftp.rfc-editor.org/in-notes/rfc1945.txt',\n    'file://localhost/path/to/file.html',\n    'file://localhost/path/to/file.html#fragment',\n    'http://www.python.org/?q=abc',\n    'http://www.python.org/?q=abc#def',\n    'http://www.python.org/?q=abc#def&ghi'\n]\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid or not.\n    :param url: url string\n    :return: True if valid else False\n    \"\"\"\n    regex = r'^(?:[a-z0-9]+\\.)?[a-z0-9-]+\\.(?:[a-z]{2,}|com|org|net|edu|biz|info|mobi|name|aero|asia|jobs|museum|travel|[a-z]{2}(?:-[a-z]{2})?)$'\n    return bool(re.match(regex, url))\n\ndef test_valid_url():\n    for url in urls:\n        assert valid_url(url)\n\ndef count_unique_urls(urls):\n    \"\"\"\n    Count the unique url in the list.\n    :param urls: list of url strings\n    :return: dictionary of unique url\n    \"\"\"\n    unique_urls = defaultdict(int)\n    for url in urls:\n        unique_urls[url] += 1\n    return unique_urls\n\ndef test_count_unique_urls():\n    assert count_unique_urls(urls) == {\n        'http://www.python.org/': 2,\n        'http://www.python.org/index.html': 1,\n        'ftp://ftp.rfc-editor.org/in-notes/rfc1945.txt': 1,\n        'file://localhost/path/",
    "# https://www.reddit.com/r/dailyprogrammer/comments/2q6z8z/20170316_challenge_6_interview_question_8/\n\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if url is valid using regex\n    \"\"\"\n    if not re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url):\n        return False\n    return True\n\nif __name__ == '__main__':\n    url = input('Enter a url: ')\n    print(is_valid_url(url))",
    "from __future__ import print_function\n\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns True if given url is valid and False otherwise.\n    \"\"\"\n    if re.match(r'^(https?|ftp):\\/\\/([-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])', url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    url = 'http://www.python.org'\n    print(is_valid_url(url))",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid or not.\n    \"\"\"\n    return re.match(r'^(https?://)?([\\w-]+(?:\\.[\\w-]+)+)(:(\\d+))?$', url) is not None\n\n\n# https://www.hackerrank.com/challenges/check-url\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef check_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    \"\"\"\n    if is_valid_url(url):\n        print(\"Valid URL\")\n    else:\n        print(\"Invalid URL\")\n\n# Your CheckUrl object will be instantiated and called as such:\n# obj = CheckUrl()\n# param_1 = obj.is_valid_url(url)",
    "# https://github.com/pypa/sampleproject\n# https://www.interviewbit.com/blog/python-regex-and-parsing-urls\n\n# Regex for url:\n#    ^((http|https|ftp|rtsp|mms):\\/\\/)?(www\\.)?(([-\\w]+\\.)+(com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|coop|museum|travel|[a-z][a-z]))(:[\\d]{1,5})?(\\/([-\\w~!$+|.,=]*))*$\n\ndef is_url(url):\n    \"\"\"\n    Regex to check if a url is valid or not\n    :param url: url string\n    :return: True or False\n    \"\"\"\n\n    # Check if url is valid or not\n    if not re.match(r'^((http|https|ftp|rtsp|mms):\\/\\/)?(www\\.)?(([-\\w]+\\.)+(com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|coop|museum|travel|[a-z][a-z]))(:[\\d]{1,5})?(\\/([-\\w~!$+|.,=]*))*$', url):\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    url = 'http://www.google.com'\n    print(is_url(url))",
    "import re\n\n\ndef is_valid(url):\n    \"\"\"\n    Returns true if the url is valid.\n    \"\"\"\n    return re.match(r'^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]', url) is not None\n\ndef main():\n    url = input()\n    print(is_valid(url))\n\nif __name__ == '__main__':\n    main()",
    "import re\n\nurl_regex = re.compile('^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\ndef is_valid_url(url):\n    \"\"\"\n    Checks if a url is valid or not using regex.\n    \"\"\"\n    return bool(url_regex.match(url))\n\ndef main():\n    print(is_valid_url('http://www.python.org'))\n    print(is_valid_url('www.python.org'))\n    print(is_valid_url('http://www.python.org/'))\n    print(is_valid_url('http://www.python.org./'))\n    print(is_valid_url('http://www.python.org./'))\n    print(is_valid_url('http://www.python.org.com./'))\n    print(is_valid_url('http://www.python.org.com/'))\n    print(is_valid_url('http://www.python.org.com.'))\n    print(is_valid_url('http://www.python.org.com.'))\n    print(is_valid_url('http://www.python.org.com.'))\n    print(is_valid_url('http://www.python.org.com.'))\n    print(is_valid_url('http://www.python.org.com.br'))\n    print(is_valid_url('http://www.python.org",
    "import re\n\n\ndef url_is_valid(url):\n    \"\"\"\n    Given a url returns True if it is valid and False otherwise.\n\n    Example:\n    >>> url_is_valid('http://www.python.org/')\n    True\n    >>> url_is_valid('www.python.org')\n    False\n    >>> url_is_valid('xyz.com')\n    False\n    >>> url_is_valid('123.com')\n    False\n    >>> url_is_valid('a.com/')\n    False\n    >>> url_is_valid('a.com')\n    False\n    >>> url_is_valid('a.com/b/c')\n    False\n    \"\"\"\n    pattern = re.compile(r\"^(?:http|ftp)s?://\"  # http:// or https://\n                         r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+\"  # domain...\n                         r\"(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\"  #...or ip...\n                         r\"localhost|\"  # localhost...\n                         r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\"  #...or ipv4\n                         r\"\\[?[A-F0-9]*:[A-F0-9:]+\\]?)\"  #...or ipv6\n                         r\"(?::\\d+)?\"  # optional port\n                         r\"(?:/?|[/?]\\S+)$\", re.IGNORECASE)\n    return bool(pattern.match(url))",
    "# https://www.hackerrank.com/challenges/url-validator/problem\n\nimport re\n\ndef is_valid_url(url):\n    return re.match(\"^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}(:[0-9]{1,5})?(/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)+$\", url)!= None\n\nif __name__ == '__main__':\n    url = raw_input()\n    print is_valid_url(url)",
    "def is_url(url):\n    if url is None:\n        return False\n    if not re.match(r'^(https?|ftp)://', url):\n        return False\n    if url.startswith('/'):\n        return False\n    return True\n\ndef main():\n    urls = [\n        'http://www.python.org',\n        'file:///home/user/work/python.txt',\n        'javascript:doEvilStuff()',\n        'vbscript:MyVar'\n    ]\n    for url in urls:\n        print('is_url({0}) -> {1}'.format(url, is_url(url)))\n\nif __name__ == '__main__':\n    main()",
    "def is_url(url):\n    # url = url.strip()\n    if not url:\n        return False\n    if url.find('http://')!= 0:\n        return False\n    if url.find('https://')!= 0:\n        return False\n    if url.find('ftp://')!= 0:\n        return False\n    if url.find('//')!= 2:\n        return False\n    return True\n\nprint(is_url('http://www.python.org'))\nprint(is_url('https://www.python.org'))\nprint(is_url('ftp://ftp.python.org'))\nprint(is_url('ftp://ftp.python.org'))\nprint(is_url('http://www.python.org'))\nprint(is_url('http://www.python.org'))\nprint(is_url('http://www.python.org/'))\nprint(is_url('http://www.python.org/'))\nprint(is_url('http://www.python.org/'))",
    "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns true if the url is valid.\n    \"\"\"\n\n    if not url:\n        return False\n    \n    if url.startswith(\"http://\"):\n        url = url[7:]\n\n    if not re.match(r'^[a-z0-9-]+\\.[a-z0-9-]{1,}$', url):\n        return False\n    \n    return True\n\ndef main():\n    url = \"www.google.com\"\n\n    if is_valid_url(url):\n        print(\"url is valid\")\n    else:\n        print(\"url is not valid\")\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}