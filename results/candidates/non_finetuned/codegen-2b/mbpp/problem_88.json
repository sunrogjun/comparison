{
  "problem": {
    "task_id": "MBPP/99",
    "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
    "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
    "test_list": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ],
    "challenge_test_list": [],
    "problem_id": 88
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.dec2bin(num)\n\nclass Codec:\n    \"\"\"\n    Use the following process:\n    1. Convert the decimal number into binary.\n    2. Reverse the binary string.\n    3. Return the result.\n    \"\"\"\n    def dec2bin(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # Binary string with a single '0'\n        binary = '0'\n        # Iterate until the decimal number is zero\n        while num:\n            binary += '1'\n            num = num - 1\n        return binary[::-1]\n\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.dec2bin(num)",
    "# The input number is a string.\n# The output is a string.\n# The input number is in the range of [0, 10^9]\n# The output is in the range of [0, 2^64]\n# The input number is a positive number.\n\n# Example 1:\n# Input: 1\n# Output: 1\n# Example 2:\n# Input: 10\n# Output: 1010\n# Example 3:\n# Input: 123\n# Output: 11110011\n# Example 4:\n# Input: -1\n# Output: 1111111111\n# Example 5:\n# Input: -10\n# Output: 1111111111\n# Note:\n# The given number is in the range of [-10^9, 10^9].\n# The output is guaranteed to be 1 digit.\n# The input number is positive.\n\n# 2017-02-08\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        else:\n            res = ''\n            while num > 0:\n                res = '1' + res\n                num = num - 1\n            return res",
    "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        if decimal & 1:\n            binary += '1'\n        else:\n            binary += '0'\n        decimal >>= 1\n    return binary\n\nif __name__ == '__main__':\n    print(decimal_to_binary(0))\n    print(decimal_to_binary(1))\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(3))\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(6))\n    print(decimal_to_binary(7))\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(9))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(13))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(17))\n    print(decimal_to_binary(18))\n    print(decimal_to_binary(19))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(21))\n    print(decimal_to_binary(22))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(31))\n    print(dec",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        sign = 1\n        if str[0] == '-':\n            sign = -1\n            str = str[1:]\n        return self.myAtoiHelper(str, sign)\n\n    def myAtoiHelper(self, str, sign):\n        if str == '':\n            return 0\n        str = str.strip()\n        if str[0] == '0':\n            return 0\n        if str[0] == '1' and len(str) == 1:\n            return 1\n        if str[0] == '2' and len(str) == 1:\n            return 2\n        if str[0] == '3' and len(str) == 1:\n            return 3\n        if str[0] == '4' and len(str) == 1:\n            return 4\n        if str[0] == '5' and len(str) == 1:\n            return 5\n        if str[0] == '6' and len(str) == 1:\n            return 6\n        if str[0] == '7' and len(str) == 1:\n            return 7\n        if str[0] == '8' and len(str) == 1:\n            return 8\n        if str[0] == '9' and len(str) == 1:\n            return 9\n        if str[0] == 'a' and len(str) == 1:\n            return 10\n        if str[0] == 'b' and len(str) == 1:\n            return 11\n        if str[0] == 'c' and len(str) == 1:\n            return 12\n        if str[0] == 'd' and len(str) == 1:\n            return 13\n        if str[0] == 'e' and len(str) == 1:\n            return 14\n        if str[0] == 'f' and len(str) == 1:\n            return 15\n        if str[0] == 'A' and len(str) == 1:\n            return 10\n        if str[0] == 'B' and",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        str = str.strip()\n        if len(str) == 0:\n            return 0\n        while str[0] == '0':\n            str = str[1:]\n        for i in range(len(str)):\n            res = res * 2 + int(str[i])\n            if res > 2 ** 32:\n                break\n        return res",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for c in str:\n            ans *= 2\n            ans += ord(c) - ord('0')\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.myAtoi('123')\n    print s.myAtoi('-123')\n    print s.myAtoi('0')\n    print s.myAtoi('123.5')\n    print s.myAtoi('-123.5')",
    "# https://www.hackerrank.com/challenges/binary-to-decimal\n# https://www.hackerrank.com/challenges/binary-to-decimal/submissions/code/213664\n# https://www.hackerrank.com/challenges/binary-to-decimal/submissions/code/213664/input\n\nimport math\n\ndef bin_to_dec(n):\n    \"\"\"\n    Converts decimal number to its binary equivalent.\n\n    Input: n = the decimal number\n    Output: n = its binary equivalent\n    \"\"\"\n    return bin(n)[2:]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(bin_to_dec(n))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in str:\n            if i.isdigit():\n                res = res * 2 + int(i)\n        return res\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.myAtoi(str)",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def toBinary(self, n):\n        # write your code here\n        if n == 0:\n            return '0'\n        else:\n            bin_str = ''\n            while n > 0:\n                bin_str = str(n % 2) + bin_str\n                n = n / 2\n            return bin_str\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toBinary(100))",
    "# https://codility.com/demo/results/demo9-4-3-9/\ndef decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: int\n    \"\"\"\n    binary = 0\n    while decimal > 0:\n        binary = binary * 2 + decimal % 2\n        decimal /= 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(3) == 6, \"Case #0\"\n    assert decimal_to_binary(12) == 0b1010, \"Case #1\"\n    assert decimal_to_binary(27) == 0b10111, \"Case #2\"\n    assert decimal_to_binary(0) == 0, \"Case #3\"",
    "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def toBinary(self, num):\n        if num == 0:\n            return 0\n        ans = 0\n        while num > 0:\n            ans = ans << 1\n            ans = ans + num % 2\n            num = num // 2\n        return ans\n\n\nif __name__ == '__main__':\n    print Solution().toBinary(1)\n    print Solution().toBinary(2)\n    print Solution().toBinary(3)\n    print Solution().toBinary(4)\n    print Solution().toBinary(5)\n    print Solution().toBinary(6)\n    print Solution().toBinary(7)\n    print Solution().toBinary(8)\n    print Solution().toBinary(9)\n    print Solution().toBinary(10)\n    print Solution().toBinary(11)\n    print Solution().toBinary(12)\n    print Solution().toBinary(13)\n    print Solution().toBinary(14)\n    print Solution().toBinary(15)\n    print Solution().toBinary(16)\n    print Solution().toBinary(17)\n    print Solution().toBinary(18)\n    print Solution().toBinary(19)\n    print Solution().toBinary(20)\n    print Solution().toBinary(21)\n    print Solution().toBinary(22)\n    print Solution().toBinary(23)\n    print Solution().toBinary(24)\n    print Solution().toBinary(25)\n    print Solution().toBinary(26)\n    print Solution().toBinary(27)\n    print Solution().toBinary(28)\n    print Solution().toBinary(29)\n    print Solution().toBinary(30)\n    print Solution().toBinary(31)\n    print Solution().toBinary(32)\n    print Solution().toBinary(33)\n    print Solution().toBinary(34)\n    print Solution().toBinary(35)\n    print Solution().toBinary(36)\n    print Solution().toBinary(37)\n    print Solution().toBinary(38)",
    "# https://leetcode.com/problems/convert-decimal-to-binary/description/\n\nclass Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/Short-Python-Code-Solution\n        # https://leetcode.com/problems/convert-decimal-to-binary/discuss/180137/",
    "# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def toBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # binary = 0\n        binary = 1\n        while n > 0:\n            binary = binary << 1\n            n = n - 1\n            binary = binary | n\n        return binary\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toBinary(17)\n    print s.toBinary(16)\n    print s.toBinary(15)\n    print s.toBinary(14)\n    print s.toBinary(13)\n    print s.toBinary(12)\n    print s.toBinary(11)\n    print s.toBinary(10)\n    print s.toBinary(9)\n    print s.toBinary(8)\n    print s.toBinary(7)\n    print s.toBinary(6)\n    print s.toBinary(5)\n    print s.toBinary(4)\n    print s.toBinary(3)\n    print s.toBinary(2)\n    print s.toBinary(1)\n    print s.toBinary(0)",
    "def decimal_to_bin(dec):\n    '''\n    dec: the decimal number\n    '''\n\n    bin = ''\n\n    while dec > 0:\n        bin = '1' + bin\n        dec = dec - 1\n\n    return bin\n\nif __name__ == '__main__':\n    print decimal_to_bin(1)\n    print decimal_to_bin(2)\n    print decimal_to_bin(3)\n    print decimal_to_bin(4)\n    print decimal_to_bin(5)\n    print decimal_to_bin(6)\n    print decimal_to_bin(7)\n    print decimal_to_bin(8)\n    print decimal_to_bin(9)\n    print decimal_to_bin(10)\n    print decimal_to_bin(100)\n    print decimal_to_bin(1000)",
    "# https://oj.leetcode.com/problems/number-to-binary/\n# Given a non-negative integer num, return its binary representation.\n# For example, given num = 28, return [1,1,1,0,1,0,0,1,0,0,0,0].\n\n# Example 1:\n# Input: 28\n# Output: [1,1,1,0,1,0,0,1,0,0,0,0]\n# Example 2:\n# Input: -28\n# Output: [1,1,1,0,1,0,0,1,0,0,0,0]\n# Example 3:\n# Input: 12345\n# Output: [1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1]\n# Explanation:\n# The binary representation of 12345 is:\n# 1. 1\n# 1. 0\n# 1. 0\n# 1. 0\n# 1. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n# 0. 1\n#",
    "import math\n\n\ndef convert_to_bin(n):\n    return bin(n)[2:]\n\n\ndef main():\n    \"\"\"\n    Main function to be run when this file is executed as a script.\n    \"\"\"\n    for i in range(1, 1000000):\n        if convert_to_bin(i
    "import sys\n\n# https://www.codewars.com/kata/number-to-binary-string/train/python\ndef number_to_binary(n):\n    if n < 0:\n        raise ValueError(\"Cannot convert negative number to binary.\")\n    result = \"\"\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (0, \"0\"),\n        (1, \"1\"),\n        (2, \"10\"),\n        (3, \"11\"),\n        (4, \"100\"),\n        (5, \"101\"),\n        (6, \"110\"),\n        (7, \"111\"),\n        (8, \"1000\"),\n        (9, \"1001\"),\n        (10, \"1010\"),\n        (11, \"1011\"),\n        (12, \"1100\"),\n        (13, \"1101\"),\n        (14, \"1110\"),\n        (15, \"1111\"),\n        (16, \"10000\"),\n        (17, \"10001\"),\n        (18, \"10010\"),\n        (19, \"10011\"),\n        (20, \"10100\"),\n        (21, \"10101\"),\n        (22, \"10110\"),\n        (23, \"10111\"),\n        (24, \"11000\"),\n        (25, \"11001\"),\n        (26, \"11010\"),\n        (27, \"11011\"),\n        (28, \"11100\"),\n        (29, \"11101\"),\n        (30, \"11110\"),\n        (31, \"11111\"),\n        (32, \"1000000\"),\n        (33, \"1000001\"),\n        (34, \"1000010\"),\n        (35, \"1000011\"),\n        (36, \"1000100\"),\n        (37, \"1000101\"),\n        (38, \"1000110\"),\n        (39, \"1000111\"),\n        (40, \"1001000\"),\n        (41, \"1001001\"),\n        (42, \"1001010\"),\n        (43, \"1001011\"),\n        (44, \"1001100\"),",
    "# https://www.hackerrank.com/challenges/binary-to-decimal\n# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\ndef bin_to_dec(n):\n    if n == 0:\n        return 0\n    n = n & 0xffffffffffffffff\n    res = 0\n    while n > 0:\n        res = res * 2 + 1\n        n = n >> 1\n    return res\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(bin_to_dec(n))",
    "class Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        return str(bin(num))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.convertToBinary(10)\n    print s.convertToBinary(12)\n    print s.convertToBinary(13)\n    print s.convertToBinary(23)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for c in str:\n            res = res * 2 + ord(c) - ord('0')\n        return res\n\n    def binaryFromDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        num = self.myAtoi(str(num))\n        res = ''\n        while num > 0:\n            res = '1' + res\n            num = num - 1\n        return res\n\n    def decimalFromBinary(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for c in str:\n            res = res * 2 + int(c)\n        return res\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.binaryFromDecimal(0)\n    print solution.decimalFromBinary
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        return self.convertToBinaryRec(num, 0)\n\n    def convertToBinaryRec(self, num, depth):\n        if num == 0:\n            return '0'\n        if depth == 32:\n            return '1'\n        if num < 0:\n            return '0'\n        if num == 1:\n            return '1'\n        if num < 32:\n            return self.convertToBinaryRec(num * 2, depth + 1)\n        if num < 64:\n            return self.convertToBinaryRec((num - 32) * 2, depth + 1)\n        else:\n            return '1'",
    "import math\n\ndef to_bin(dec):\n    \"\"\"\n    :param dec: decimal number\n    :return: binary equivalent of the given decimal number\n    \"\"\"\n    if dec < 0:\n        raise ValueError(\"dec must be non-negative\")\n    return to_bin(dec // 2) + to_bin(dec % 2)\n\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    # test_case = (0, 0)\n    # assert to_bin(test_case) == \"0\"\n    # test_case = (0, 1)\n    # assert to_bin(test_case) == \"1\"\n    # test_case = (1, 0)\n    # assert to_bin(test_case) == \"1\"\n    # test_case = (1, 1)\n    # assert to_bin(test_case) == \"10\"\n    # test_case = (2, 0)\n    # assert to_bin(test_case) == \"10\"\n    # test_case = (2, 1)\n    # assert to_bin(test_case) == \"110\"\n    # test_case = (3, 0)\n    # assert to_bin(test_case) == \"110\"\n    # test_case = (3, 1)\n    # assert to_bin(test_case) == \"1110\"\n    # test_case = (4, 0)\n    # assert to_bin(test_case) == \"1110\"\n    # test_case = (4, 1)\n    # assert to_bin(test_case) == \"11110\"\n    # test_case = (5, 0)\n    # assert to_bin(test_case) == \"11110\"\n    # test_case = (5, 1)\n    # assert to_bin(test_case) == \"111110\"\n    # test_case = (6, 0)\n    # assert to_bin(test_case) == \"111110\"\n    # test_case = (6, 1)\n    # assert to_bin(test_case) == \"1111110\"\n    # test_case = (7, 0)\n    # assert to_bin(test",
    "class Solution:\n    def convert(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/convert-decimal-to-binary-and-back/discuss/133548/Java-O(1)-Solutions\n        return bin(num)[2:]\n\n# test\nsol = Solution()\nassert sol.convert(10) == \"1010\"\nassert sol.convert(12) == \"1100\"\nassert sol.convert(123) == \"1100101\"",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        \n        res = ''\n        while num > 0:\n            res += str(num % 2)\n            num /= 2\n        \n        res = '1' if res == '0' else '0' + res\n        \n        return res",
    "def convert_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = []\n    while decimal:\n        binary.append(decimal % 2)\n        decimal /= 2\n    binary = ''.join(str(x) for x in binary)\n    return binary\n\n\nif __name__ == '__main__':\n    print convert_to_binary(12)",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def toBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        i = 0\n        while n > 0:\n            n >>= 1\n            i += 1\n        return i\n\n\nif __name__ == \"__main__\":\n    assert Solution().toBinary(0) == 0\n    assert Solution().toBinary(1) == 1\n    assert Solution().toBinary(2) == 2\n    assert Solution().toBinary(3) == 3\n    assert Solution().toBinary(4) == 4\n    assert Solution().toBinary(5) == 5\n    assert Solution().toBinary(6) == 6\n    assert Solution().toBinary(7) == 7\n    assert Solution().toBinary(8) == 8\n    assert Solution().toBinary(9) == 9\n    assert Solution().toBinary(10) == 10\n    assert Solution().toBinary(11) == 11\n    assert Solution().toBinary(12) == 12\n    assert Solution().toBinary(13) == 13\n    assert Solution().toBinary(14) == 14\n    assert Solution().toBinary(15) == 15\n    assert Solution().toBinary(16) == 16\n    assert Solution().toBinary(17) == 17\n    assert Solution().toBinary(18) == 18\n    assert Solution().toBinary(19) == 19\n    assert Solution().toBinary(20) == 20\n    assert Solution().toBinary(21) == 21\n    assert Solution().toBinary(22) == 22\n    assert Solution().toBinary(23) == 23\n    assert Solution().toBinary(24) == 24\n    assert Solution().toBinary(25) == 25\n    assert Solution().toBinary(26) == 26\n    assert Solution().toBinary(27) == 27\n    assert Solution().toBinary(28) == 28\n    assert Solution().toBinary(29) == 29\n    assert Solution().toBinary(30) == 30\n    assert Solution().toBinary(31) == 31\n    assert Solution().",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        l = len(str)\n        if l > 1 and str[0] == '0':\n            return self.myAtoi(str[1:])\n        if l > 2 and str[0] == '0' and str[1] == 'x':\n            return self.myAtoi(str[2:], 16)\n        if l > 2 and str[0] == '0' and str[1] == 'b':\n            return self.myAtoi(str[2:], 2)\n        if l > 1 and str[0] == '-' and str[1]!= '0':\n            return self.myAtoi(str[1:])\n        if l > 1 and str[0] == '+':\n            return self.myAtoi(str[1:])\n        if l == 1:\n            return int(str, 2)\n        return int(str, 10)\n        \n\na = Solution()\nprint(a.myAtoi('0'))\nprint(a.myAtoi('00'))\nprint(a.myAtoi('-0'))\nprint(a.myAtoi('+0'))\nprint(a.myAtoi('+10'))\nprint(a.myAtoi('-10'))\nprint(a.myAtoi('10'))\nprint(a.myAtoi('00x0'))\nprint(a.myAtoi('0x0'))\nprint(a.myAtoi('0b1'))\nprint(a.myAtoi('0b11'))\nprint(a.myAtoi('0B1'))\nprint(a.myAtoi('0B11'))\nprint(a.myAtoi('-0b11'))\nprint(a.myAtoi('+0b11'))\nprint(a.myAtoi('+10b11'))\nprint(a.myAtoi('",
    "class Solution:\n    # @param {integer} decimals\n    # @return {integer}\n    def toBinary(self, decimals):\n        if decimals < 0:\n            return 0\n        result = 0\n        while decimals > 0:\n            result = result << 1\n            decimals = decimals - 1\n        return result + 1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toBinary(5)\n    print s.toBinary(10)\n    print s.toBinary(15)\n    print s.toBinary(100)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if len(str) == 0:\n            return 0\n        if str[0] == '-':\n            return -1 * self.myAtoi(str[1:])\n        i = 0\n        while i < len(str):\n            if str[i] =='' or str[i] == '\\t' or str[i] == '\\n' or str[i] == '\\r':\n                i += 1\n                continue\n            break\n        num = 0\n        for i in range(i, len(str)):\n            num += (ord(str[i]) - ord('0')) * pow(2, len(str) - i - 1)\n            if num > 2**32-1:\n                return -2**31\n            elif num < -2**31:\n                return -2**31\n        return num\n\nif __name__ == '__main__':\n    print Solution().myAtoi('-2147483648')\n    print Solution().myAtoi('-2147483649')\n    print Solution().myAtoi('2147483648')\n    print Solution().myAtoi('2147483649')\n    print Solution().myAtoi('2147483647')\n    print Solution().myAtoi('-2147483648')\n    print Solution().myAtoi('-2147483649')\n    print Solution().myAtoi('2147483648')\n    print Solution().myAtoi('2147483649')\n    print Solution().myAtoi('2147483647')",
    "class Solution:\n    # @param {integer} num\n    # @return {string}\n    def toBinary(self, num):\n        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        result = \"\"\n        while num!= 0:\n            if num & 1 == 1:\n                result = \"1\" + result\n            num = num >> 1\n        return result",
    "class Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 2) + res\n            num = num // 2\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().convertToBinary(0) == \"0\"\n    assert Solution().convertToBinary(1) == \"1\"\n    assert Solution().convertToBinary(3) == \"11\"\n    assert Solution().convertToBinary(10) == \"1010\"\n    assert Solution().convertToBinary(123) == \"111001\"",
    "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def toBinary(self, num):\n        return bin(num)[2:]\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = int(input())\n# param_2 = obj.toBinary(param_1)",
    "# https://leetcode.com/problems/to-binary-string/\n# https://leetcode.com/problems/to-binary-number/\n# https://leetcode.com/problems/to-decimal-string/\n# https://leetcode.com/problems/to-decimal-number/\n# https://leetcode.com/problems/to-hex-string/\n# https://leetcode.com/problems/to-hex-number/\n# https://leetcode.com/problems/to-octal-string/\n# https://leetcode.com/problems/to-octal-number/\n# https://leetcode.com/problems/to-bin-string/\n# https://leetcode.com/problems/to-bin-number/\n# https://leetcode.com/problems/to-bin-number/\n# https://leetcode.com/problems/to-binary-string/\n# https://leetcode.com/problems/to-decimal-string/\n# https://leetcode.com/problems/to-decimal-number/\n# https://leetcode.com/problems/to-hex-string/\n# https://leetcode.com/problems/to-hex-number/\n# https://leetcode.com/problems/to-octal-string/\n# https://leetcode.com/problems/to-octal-number/\n# https://leetcode.com/problems/to-bin-string/\n# https://leetcode.com/problems/to-decimal-string/\n# https://leetcode.com/problems/to-decimal-number/\n# https://leetcode.com/problems/to-hex-string/\n# https://leetcode.com/problems/to-hex-number/\n# https://leetcode.com/problems/to-octal-string/\n# https://leetcode.com/problems/to-octal-number/\n# https://leetcode.com/problems/to-bin-string/\n# https://leet",
    "# https://oj.leetcode.com/problems/binary-representation-of-decimal-number/\n\nclass Solution:\n    # @param {integer} x\n    # @return {string}\n    def binaryRepresentation(self, x):\n        return bin(x)[2:]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.binaryRepresentation(0))\n    print(s.binaryRepresentation(1))\n    print(s.binaryRepresentation(2))\n    print(s.binaryRepresentation(3))\n    print(s.binaryRepresentation(4))\n    print(s.binaryRepresentation(5))\n    print(s.binaryRepresentation(6))\n    print(s.binaryRepresentation(7))\n    print(s.binaryRepresentation(8))\n    print(s.binaryRepresentation(9))\n    print(s.binaryRepresentation(10))\n    print(s.binaryRepresentation(11))\n    print(s.binaryRepresentation(12))\n    print(s.binaryRepresentation(13))\n    print(s.binaryRepresentation(14))\n    print(s.binaryRepresentation(15))\n    print(s.binaryRepresentation(16))\n    print(s.binaryRepresentation(17))\n    print(s.binaryRepresentation(18))\n    print(s.binaryRepresentation(19))\n    print(s.binaryRepresentation(20))\n    print(s.binaryRepresentation(21))\n    print(s.binaryRepresentation(22))\n    print(s.binaryRepresentation(23))\n    print(s.binaryRepresentation(24))\n    print(s.binaryRepresentation(25))\n    print(s.binaryRepresentation(26))\n    print(s.binaryRepresentation(27))\n    print(s.binaryRepresentation(28))\n    print(s.binaryRepresentation(29))\n    print(s.binaryRepresentation(30))\n    print(s.binaryRepresentation(31))\n    print(s.binaryRepresentation(32))\n    print(s.binaryRepresentation(33))\n    print(s.binaryRepresentation(34))\n    print(s",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        \n        negative = str[0] == '-'\n        if negative:\n            str = str[1:]\n        \n        str = str.lstrip('0')\n        if not str:\n            return 0\n        \n        result = 0\n        for i, c in enumerate(str):\n            result = result * 2 + int(c)\n        \n        if negative:\n            result = -result\n        \n        return result",
    "# https://www.hackerrank.com/challenges/binary-conversion/problem\n\n# Converts decimal to binary\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    # Convert decimal to binary\n    while decimal > 0:\n        # Check if the next digit is a 1\n        if decimal % 2 == 1:\n            binary = str(decimal % 2) + binary\n            decimal = decimal / 2\n        else:\n            binary = str(decimal / 2) + binary\n            decimal = decimal % 2\n    return binary\n\n# Converts binary to decimal\ndef binary_to_decimal(binary):\n    decimal = 0\n    while binary!= \"\":\n        # Convert the next digit in binary to decimal\n        decimal += int(binary[0]) * (2 ** (len(binary) - 1))\n        binary = binary[1:]\n    return decimal\n\n# Test cases\ndecimal_to_binary(6)\nbinary_to_decimal(\"1010\")\nbinary_to_decimal(\"1101\")\n\n# Your Codecademy solution\ndecimal_to_binary(6)\nbinary_to_decimal(\"1010\")\nbinary_to_decimal(\"1101\")",
    "def to_binary(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return '1' * (n - 1) + to_binary(n - 1)\n\nif __name__ == '__main__':\n    print(to_binary(2))\n    print(to_binary(3))\n    print(to_binary(5))\n    print(to_binary(8))\n    print(to_binary(9))\n    print(to_binary(18))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str == '-':\n            return -1\n        elif str == '+':\n            return 1\n        elif str == '0':\n            return 0\n        else:\n            return self.__bin_to_int(str)\n\n    def __bin_to_int(self, str):\n        res = 0\n        for ch in str:\n            res = res * 2 + int(ch)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.myAtoi('-2147483648'))\n    print(sol.myAtoi('2147483647'))\n    print(sol.myAtoi('-2147483647'))\n    print(sol.myAtoi('-2147483649'))\n    print(sol.myAtoi('2147483649'))",
    "import math\n\ndef to_binary(dec):\n    binary = \"\"\n    while dec > 0:\n        binary += str(dec % 2)\n        dec /= 2\n    return binary\n\ndef main():\n    tests = [\n        (1, \"1\"),\n        (2, \"10\"),\n        (3, \"11\"),\n        (4, \"100\"),\n        (5, \"101\"),\n        (6, \"110\"),\n        (7, \"111\"),\n        (8, \"1000\"),\n        (9, \"1001\"),\n        (10, \"1010\"),\n        (11, \"1011\"),\n        (12, \"1110\"),\n        (13, \"1111\"),\n        (14, \"10000\"),\n        (15, \"10001\"),\n        (16, \"10010\"),\n        (17, \"10011\"),\n        (18, \"10100\"),\n        (19, \"10101\"),\n        (20, \"10110\"),\n        (21, \"10111\"),\n        (22, \"11000\"),\n        (23, \"11001\"),\n        (24, \"11010\"),\n        (25, \"11011\"),\n        (26, \"11100\"),\n        (27, \"11101\"),\n        (28, \"11110\"),\n        (29, \"11111\"),\n        (30, \"1000000\"),\n        (31, \"1000001\"),\n        (32, \"1000010\"),\n        (33, \"1000011\"),\n        (34, \"1000100\"),\n        (35, \"1000101\"),\n        (36, \"1000110\"),\n        (37, \"1000111\"),\n        (38, \"1001000\"),\n        (39, \"1001001\"),\n        (40, \"1001010\"),\n        (41, \"1001011\"),\n        (42, \"1001100\"),\n        (43, \"1001101\"),\n        (44, \"1001110\"),\n        (45, \"1001111\"),\n        (46, \"1010000\"),\n        (47, \"1010001\"),\n        (48, \"1010010\"),\n        (49, \"1010011\"),\n        (50, \"1010100\"),\n        (51, \"1010101\"),",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        if num == 1:\n            return '1'\n        if num == -1:\n            return '1'\n        ret = ''\n        while num > 0:\n            if num % 2 == 1:\n                ret = '1' + ret\n            num /= 2\n            if num > 0:\n                ret = '0' + ret\n        return ret\n\n\nif __name__ == '__main__':\n    assert Solution().convertToBinary(0) == '0'\n    assert Solution().convertToBinary(1) == '1'\n    assert Solution().convertToBinary(-1) == '1'\n    assert Solution().convertToBinary(2) == '10'\n    assert Solution().convertToBinary(3) == '11'\n    assert Solution().convertToBinary(4) == '100'\n    assert Solution().convertToBinary(5) == '101'\n    assert Solution().convertToBinary(6) == '110'\n    assert Solution().convertToBinary(7) == '111'\n    assert Solution().convertToBinary(8) == '1000'\n    assert Solution().convertToBinary(9) == '1001'\n    assert Solution().convertToBinary(10) == '1010'\n    assert Solution().convertToBinary(11) == '1011'\n    assert Solution().convertToBinary(12) == '1100'\n    assert Solution().convertToBinary(13) == '1101'\n    assert Solution().convertToBinary(14) == '1110'\n    assert Solution().convertToBinary(15) == '1111'\n    assert Solution().convertToBinary(16) == '10000'\n    assert Solution().convertToBinary(",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = '1'\n        while num > 0:\n            res = str(num % 2) + res\n            num /= 2\n        return res",
    "from typing import List\n\n\nclass Solution:\n\n    def decimal_to_binary(self, decimal: int) -> str:\n        \"\"\"\n        :type decimal: int\n        :rtype: str\n        \"\"\"\n        bits = [0] * 32\n        while decimal > 0:\n            bits[decimal % 2] = bits[decimal % 2] + 1\n            decimal = decimal // 2\n        return ''.join([str(i) for i in bits])\n\n\nif __name__ == '__main__':\n    assert Solution().decimal_to_binary(0) == '0'\n    assert Solution().decimal_to_binary(1) == '1'\n    assert Solution().decimal_to_binary(2) == '10'\n    assert Solution().decimal_to_binary(3) == '11'\n    assert Solution().decimal_to_binary(4) == '100'\n    assert Solution().decimal_to_binary(5) == '101'\n    assert Solution().decimal_to_binary(6) == '110'\n    assert Solution().decimal_to_binary(7) == '111'\n    assert Solution().decimal_to_binary(8) == '1000'\n    assert Solution().decimal_to_binary(9) == '1001'\n    assert Solution().decimal_to_binary(10) == '1010'\n    assert Solution().decimal_to_binary(11) == '1011'\n    assert Solution().decimal_to_binary(12) == '1100'\n    assert Solution().decimal_to_binary(13) == '1101'\n    assert Solution().decimal_to_binary(14) == '1110'\n    assert Solution().decimal_to_binary(15) == '1111'\n    assert Solution().decimal_to_binary(16) == '10000'\n    assert Solution().decimal_to_binary(17) == '10001'\n    assert Solution().decimal_to_binary(18) == '10010'\n    assert Solution().decimal_to_binary(19) == '10011'\n    assert Solution().decimal_to_binary(20) == '10100'\n    assert Solution().decimal",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        ans = 0\n        while str and str[-1] == '0':\n            str = str[:-1]\n        while str and str[0] == '0':\n            str = str[1:]\n        ans += len(str)\n        while str:\n            ans = ans * 10 + int(str[0])\n            str = str[1:]\n        return ans\n\n    def myAtoi_2(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        ans = 0\n        while str and str[-1] == '0':\n            str = str[:-1]\n        while str and str[0] == '0':\n            str = str[1:]\n        ans += len(str)\n        while str:\n            ans = ans * 10 + int(str[0])\n            str = str[1:]\n        return ans\n\n\nif __name__ == '__main__':\n    assert Solution().myAtoi('0') == 0\n    assert Solution().myAtoi('1') == 1\n    assert Solution().myAtoi('11') == 3\n    assert Solution().myAtoi('100') == 4\n    assert Solution().myAtoi('1101') == 9",
    "import unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_binary_conversion(self):\n        self.assertEqual(binary_conversion(0), \"0\")\n        self.assertEqual(binary_conversion(1), \"1\")\n        self.assertEqual(binary_conversion(2), \"10\")\n        self.assertEqual(binary_conversion(3), \"11\")\n        self.assertEqual(binary_conversion(4), \"100\")\n        self.assertEqual(binary_conversion(5), \"101\")\n        self.assertEqual(binary_conversion(6), \"110\")\n        self.assertEqual(binary_conversion(7), \"111\")\n        self.assertEqual(binary_conversion(8), \"1000\")\n        self.assertEqual(binary_conversion(9), \"1001\")\n        self.assertEqual(binary_conversion(10), \"1010\")\n        self.assertEqual(binary_conversion(11), \"1011\")\n        self.assertEqual(binary_conversion(12), \"1100\")\n        self.assertEqual(binary_conversion(13), \"1101\")\n        self.assertEqual(binary_conversion(14), \"1110\")\n        self.assertEqual(binary_conversion(15), \"1111\")\n        self.assertEqual(binary_conversion(16), \"10000\")\n        self.assertEqual(binary_conversion(17), \"10001\")\n        self.assertEqual(binary_conversion(18), \"10010\")\n        self.assertEqual(binary_conversion(19), \"10011\")\n        self.assertEqual(binary_conversion(20), \"10100\")\n        self.assertEqual(binary_conversion(21), \"10101\")\n        self.assertEqual(binary_conversion(22), \"10110\")\n        self.assertEqual(binary_conversion(23), \"10111\")\n        self.assertEqual(binary_conversion(24), \"11000\")\n        self.assertEqual(binary_conversion(25), \"11001\")",
    "# https://oj.leetcode.com/problems/number-of-1s-in-binary-string/\n# Given a non-negative integer num, return its base 2 representation.\n#\n# Example 1:\n# Input: num = 1\n# Output: \"1\"\n# Example 2:\n# Input: num = 5\n# Output: \"101\"\n# Example 3:\n# Input: num = 27\n# Output: \"101000111\"\n# Example 4:\n# Input: num = 123\n# Output: \"1100101101001011100101\"\n\nclass Solution(object):\n    def base2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num < 0:\n            return \"\"\n        if num == 0:\n            return \"0\"\n        result = \"\"\n        while num > 0:\n            result = str(num % 2) + result\n            num = num // 2\n        return result\n\nclass Solution2(object):\n    def base2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        while num > 0:\n            result = str(num % 2) + result\n            num = num // 2\n        return result",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        if num < 0:\n            return '1' + self.toBinary(-num)\n        result = ''\n        while num:\n            if num & 1:\n                result += '1'\n            else:\n                result += '0'\n            num >>= 1\n        return result",
    "# https://leetcode.com/problems/number-to-binary/\n\n\nclass Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        result = ''\n        while num > 0:\n            result += str(num % 2)\n            num /= 2\n        return result",
    "from collections import namedtuple\n\nDecimal = namedtuple('Decimal', 'bin')\n\nclass Dec2bin(object):\n    def __init__(self, n):\n        self.n = n\n\n    def __call__(self):\n        return self.n.to_decimal()\n\n\ndef main():\n    assert Dec2bin(Decimal(4))() == Decimal('10100')\n    assert Dec2bin(Decimal(15))() == Decimal('1111')\n    assert Dec2bin(Decimal(21))() == Decimal('1111')\n    assert Dec2bin(Decimal(3))() == Decimal('000')\n    assert Dec2bin(Decimal(15))() == Decimal('1111')\n    assert Dec2bin(Decimal(21))() == Decimal('1111')\n    assert Dec2bin(Decimal(10))() == Decimal('1010')\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def toBinary(self, num):\n        binary = \"\"\n        while num > 0:\n            binary += str(num % 2)\n            num = num // 2\n        return binary\n\n\ns = Solution()\n\nprint(s.toBinary(0))\nprint(s.toBinary(1))\nprint(s.toBinary(2))\nprint(s.toBinary(3))\nprint(s.toBinary(4))\nprint(s.toBinary(5))\nprint(s.toBinary(6))\nprint(s.toBinary(7))\nprint(s.toBinary(8))\nprint(s.toBinary(9))\nprint(s.toBinary(10))\nprint(s.toBinary(11))\nprint(s.toBinary(12))\nprint(s.toBinary(13))\nprint(s.toBinary(14))\nprint(s.toBinary(15))\nprint(s.toBinary(16))\nprint(s.toBinary(17))\nprint(s.toBinary(18))\nprint(s.toBinary(19))\nprint(s.toBinary(20))\nprint(s.toBinary(21))\nprint(s.toBinary(22))\nprint(s.toBinary(23))\nprint(s.toBinary(24))\nprint(s.toBinary(25))\nprint(s.toBinary(26))\nprint(s.toBinary(27))\nprint(s.toBinary(28))\nprint(s.toBinary(29))\nprint(s.toBinary(30))\nprint(s.toBinary(31))\nprint(s.toBinary(32))\nprint(s.toBinary(33))\nprint(s.toBinary(34))\nprint(s.toBinary(35))\nprint(s.toBinary(36))\nprint(s.toBinary(37))\nprint(s.toBinary(38))\nprint(s.toBinary(39))",
    "import unittest\n\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(str)):\n            if str[i] == '-':\n                res = 0\n            else:\n                res = (res * 2) + int(str[i])\n        return res\n\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        str = ''\n        while num > 0:\n            if num % 2 == 1:\n                str = '1' + str\n            else:\n                str = '0' + str\n            num = num >> 1\n        return str\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-to-decimal/solution/\n\n# 1ms 100%\nclass Solution {\n    public int myAtoi(String str) {\n        int res = 0;\n        int sign = 1;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '-') {\n                sign = -1;\n                continue;\n            }\n            res = (res * 2) + (str.charAt(i) - '0');\n        }\n        return res * sign;\n    }\n\n    public String toBinary(int num) {\n        StringBuilder res = new StringBuilder();\n        while (num > 0) {\n            res.append(String.format(\"%d\", num % 2));\n            num = num >> 1;\n        }\n        return res.reverse().toString();\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int myAtoi(String str) {\n        int sign = 1;\n        int res = 0;\n        for (int i = 0",
    "class Solution(object):\n    def convertToBin(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        while num > 0:\n            res = \"1\" + res\n            num = num - 1\n        return res",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def toBinary(self, n):\n        # Write your code here\n        if n==0: return 0\n        if n==1: return 1\n        n = n%2\n        res = 0\n        while n!=0:\n            res = res*2 + n%2\n            n = n//2\n        return res\n\ns = Solution()\nprint s.toBinary(5)",
    "class Solution(object):\n    def decimalToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        s = \"\"\n        while num > 0:\n            s += str(num % 2)\n            num //= 2\n        return s\n\nif __name__ == \"__main__\":\n    print Solution().decimalToBinary(2)",
    "from __future__ import annotations\n\nimport sys\n\nclass Solution:\n    def convert(self, num: int) -> str:\n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            return \"-\" + self.convert(-num)\n        \n        num = abs(num)\n        \n        ans = \"\"\n        while num:\n            ans = str(num % 2) + ans\n            num //= 2\n        \n        return ans[::-1]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(len(nums)):\n        print(i, nums[i], \"->\", sol.convert(nums[i]))\n    print(\"-\" * 40)\n    nums = [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n    for i in range(len(nums)):\n        print(i, nums[i], \"->\", sol.convert(nums[i]))\n    print(\"-\" * 40)\n    nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(len(nums)):\n        print(i, nums[i], \"->\", sol.convert(nums[i]))\n    print(\"-\" * 40)\n    nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n    for i in range(len(nums)):\n        print(i, nums[i], \"->\", sol.convert(nums[i]))\n    print(\"-\" * 40)\n    nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n    for i in range(len(nums)):\n        print(i, nums[i], \"->\", sol.convert(nums[i]))\n    print(\"-\" * 40)\n    nums = [0, 1,",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        return self.toInt(str)\n\n    def toInt(self, str):\n        if not str:\n            return 0\n        if str[0] == '-':\n            return -self.toInt(str[1:])\n        if str[0] == '+':\n            return self.toInt(str[1:])\n        return int(str)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.myAtoi('1')\n    print s.myAtoi('-1')\n    print s.myAtoi('0')\n    print s.myAtoi('-0')\n    print s.myAtoi('1')\n    print s.myAtoi('-1')\n    print s.myAtoi('0')\n    print s.myAtoi('-0')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAtoi('-2')\n    print s.myAtoi('2')\n    print s.myAto",
    "from itertools import chain\n\ndef convert_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent.\n\n    :param decimal: The decimal number to convert.\n    :return: The binary equivalent of the given decimal number.\n    \"\"\"\n    decimal_to_binary = {\n        0: '0',\n        1: '1',\n        2: '10',\n        3: '100',\n        4: '1000',\n        5: '10000',\n        6: '100000',\n        7: '1000000',\n        8: '10000000',\n        9: '100000000',\n        10: '1000000000',\n        11: '10000000000',\n        12: '100000000000',\n        13: '1000000000000',\n        14: '10000000000000',\n        15: '100000000000000',\n        16: '1000000000000000',\n        17: '10000000000000000',\n        18: '100000000000000000',\n        19: '1000000000000000000',\n        20: '10000000000000000000',\n        21: '100000000000000000000',\n        22: '1000000000000000000000',\n        23: '10000000000000000000000',\n        24: '100000000000000000000000',\n        25: '1000000000000000000000000',\n        26: '10000000000000000000000000',\n        27: '100000000000000000000000000',\n        28: '1000000000000000000000000000',\n        29: '10000000000000000000000000000',\n        30: '100000000000000000000000000000',\n        31: '1000000000000000000000000000000',\n        32: '10000000000000000000000000000000',\n        33: '1000000000000000000000000000000000',\n        34: '10000000000000000000000000000000000',\n        35: '100000000000000000000000000000000000',\n        36: '1000000000000000000000000000000000000',\n        37: '10000000000000000000000000000000000000',\n        38: '100000000000000000000000000000000000000',\n        39: '1000000000000000000000000000000000000000',\n        40: '10000000000000000000000000000000000000000',\n        41: '100000000000000000000000000000000000000000',\n        42: '1000000000000000000000000000000000000000000',\n        43: '10000000000000000000000000000000000000000000',\n        44: '100000000000000000000000000000000000000000000',\n        45: '1000000000000000000000000000000000000000000000',",
    "import unittest\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        else:\n            result = \"\"\n            while num > 0:\n                result = str(num % 2) + result\n                num = num / 2\n            return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-decimal-to-binary-and-back/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n// https://leetcode.com/discuss/18094/simple-java-solution-with-explanation-and-comments\n// https://leetcode.com/discuss/11429/simple-java-solution-with-explanation-and-comments\npublic class Solution {\n    public String convertToBinary(int num) {\n        StringBuilder binary = new StringBuilder();\n        while(num > 0){\n            binary.insert(0,num%2);\n            num /= 2;\n        }\n        return binary.toString();\n    }\n}\n\npublic class Solution {\n    public String convertToBinary(int num) {\n        StringBuilder binary = new StringBuilder();\n        int i = num;\n        while (i > 0) {\n            binary.insert(0, i % 2);\n            i /= 2;\n        }\n        return binary.toString();\n    }\n}\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x)",
    "def to_binary(dec):\n    bin_str = bin(dec)[2:]\n    return bin_str.rjust(len(bin_str), '0')\n\ndef to_decimal(bin_str):\n    return int(''.join(bin_str), 2)\n\ndef main():\n    test_cases = [\n        (10, '1010'),\n        (20, '20'),\n        (0, '0')\n    ]\n    for dec, bin_str in test_cases:\n        print(to_binary(dec), '->', to_decimal(bin_str))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = []\n        while num > 0:\n            res.append(num % 2)\n            num /= 2\n        return ''.join(reversed(res))",
    "import unittest\n\n\ndef to_bin(dec):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n\n    :param dec: A decimal number.\n    :return: The binary equivalent.\n    \"\"\"\n    result = ''\n    while dec > 0:\n        result = str(dec % 2) + result\n        dec = int(dec / 2)\n    return result\n\n\nclass TestCases(unittest.TestCase):\n\n    def test_to_bin(self):\n        self.assertEqual(to_bin(0), '0')\n        self.assertEqual(to_bin(1), '1')\n        self.assertEqual(to_bin(2), '10')\n        self.assertEqual(to_bin(3), '11')\n        self.assertEqual(to_bin(4), '100')\n        self.assertEqual(to_bin(5), '101')\n        self.assertEqual(to_bin(6), '110')\n        self.assertEqual(to_bin(7), '111')\n        self.assertEqual(to_bin(8), '1000')\n        self.assertEqual(to_bin(9), '1001')\n        self.assertEqual(to_bin(10), '1010')\n        self.assertEqual(to_bin(11), '1011')\n        self.assertEqual(to_bin(12), '1100')\n        self.assertEqual(to_bin(13), '1101')\n        self.assertEqual(to_bin(14), '1110')\n        self.assertEqual(to_bin(15), '1111')\n        self.assertEqual(to_bin(16), '10000')\n        self.assertEqual(to_bin(17), '10001')\n        self.assertEqual(to_bin(18), '10010')\n        self.assertEqual(to_bin(19), '10011')\n        self.assertEqual(to_bin(20), '10100')\n        self.assertEqual(to_bin(21), '10101')\n        self.assertEqual(to_bin(22), '101",
    "def to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    return bin(decimal)\n\n\ndef to_decimal(binary):\n    \"\"\"\n    :type binary: str\n    :rtype: int\n    \"\"\"\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    assert to_binary(1) == \"1\"\n    assert to_binary(0) == \"0\"\n    assert to_binary(3) == \"11\"\n    assert to_binary(4) == \"100\"\n    assert to_binary(18) == \"10100\"\n    assert to_binary(127) == \"1111111111111111111111111111111111111111111111111111111111111111\"\n    assert to_decimal(\"10100\") == 18\n    assert to_decimal(\"1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127\n    assert to_decimal(\"0b1111111111111111111111111111111111111111111111111111111111111111\") == 127",
    "from __future__ import annotations\n\nclass Solution:\n    def convertToBinary(self, num: int) -> str:\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        str_num = str(num)\n        binary = ''\n        for i in str_num:\n            binary += str(ord(i) - 48)\n        return binary\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-decimal-to-binary/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;",
    "import unittest\n\n\nclass Solution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(bin(2), '0b1')\n        self.assertEqual(bin(3), '0b11')\n        self.assertEqual(bin(7), '0b111')\n        self.assertEqual(bin(15), '0b11111111111111111111111111111111')\n        self.assertEqual(bin(42), '0b100000000000000000000000000000000')\n        self.assertEqual(bin(-1), '0b11111111111111111111111111111111')\n        self.assertEqual(bin(0), '0b0')\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # base 2\n        return int(str, 2)\n\n    def myAtoi2(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # base 10\n        return int(str)\n\n    def myAtoi3(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # base 16\n        return int(str, 16)",
    "from collections import namedtuple\n\n\nDecimal = namedtuple('Decimal', 'value')\n\n\ndef to_bin(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: Decimal\n    \"\"\"\n    return Decimal(bin(decimal_number))\n\n\ndef main():\n    assert to_bin(0) == Decimal(0)\n    assert to_bin(1) == Decimal(1)\n    assert to_bin(2) == Decimal(10)\n    assert to_bin(3) == Decimal(11)\n    assert to_bin(4) == Decimal(100)\n    assert to_bin(5) == Decimal(101)\n    assert to_bin(6) == Decimal(110)\n    assert to_bin(7) == Decimal(111)\n    assert to_bin(8) == Decimal(1000)\n    assert to_bin(9) == Decimal(1001)\n    assert to_bin(10) == Decimal(1010)\n    assert to_bin(11) == Decimal(1011)\n    assert to_bin(12) == Decimal(1100)\n    assert to_bin(13) == Decimal(1101)\n    assert to_bin(14) == Decimal(1110)\n    assert to_bin(15) == Decimal(1111)\n    assert to_bin(16) == Decimal(10000)\n    assert to_bin(17) == Decimal(10001)\n    assert to_bin(18) == Decimal(10010)\n    assert to_bin(19) == Decimal(10011)\n    assert to_bin(20) == Decimal(10100)\n    assert to_bin(21) == Decimal(10101)\n    assert to_bin(22) == Decimal(10110)\n    assert to_bin(23) == Decimal(10111)\n    assert to_bin(24) == Decimal(11000)\n    assert to_bin(25) == Decimal(11001)\n    assert to_bin(26) == Decimal(11010)\n    assert to_bin(27) == Decimal(11011)",
    "class Solution(object):\n    def decimalToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        return bin(num)[2:]\n\n# Note:\n# 1. Use bit manipulation (and not integer) to convert the decimal number to binary.\n# 2. The length of the binary string is always a multiple of 2.",
    "def decimalToBinary(dec):\n    \"\"\"\n    :type dec: int\n    :rtype: str\n    \"\"\"\n    if dec == 0:\n        return '0'\n    bin = ''\n    while dec > 0:\n        bin = '1' + bin\n        dec = dec - 1\n    return bin\n\nprint(decimalToBinary(10))\nprint(decimalToBinary(99))\nprint(decimalToBinary(1023))\nprint(decimalToBinary(1048576))",
    "# https://github.com/python3/cpython/blob/master/Lib/conversion.py\n\ndef binary_convert(num, base=2):\n    \"\"\"Convert an integer to its binary equivalent.\n\n    The function takes an integer and returns a string of its binary\n    equivalent.\n\n    >>> binary_convert(5)\n    '101'\n    >>> binary_convert(16)\n    '10001'\n    >>> binary_convert(16, base=10)\n    'a'\n    \"\"\"\n    s = ''\n    while num:\n        s = str(num % base) + s\n        num //= base\n    return s[::-1]\n\n\ndef test_binary_convert():\n    assert binary_convert(0) == '0'\n    assert binary_convert(1) == '1'\n    assert binary_convert(2) == '10'\n    assert binary_convert(3) == '11'\n    assert binary_convert(4) == '100'\n    assert binary_convert(5) == '101'\n    assert binary_convert(6) == '110'\n    assert binary_convert(7) == '111'\n    assert binary_convert(8) == '1000'\n    assert binary_convert(9) == '1001'\n    assert binary_convert(10) == '1010'\n    assert binary_convert(11) == '1011'\n    assert binary_convert(12) == '1100'\n    assert binary_convert(13) == '1101'\n    assert binary_convert(14) == '1110'\n    assert binary_convert(15) == '1111'\n\n\nif __name__ == '__main__':\n    test_binary_convert()",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        strs = \"\"\n        while num > 0:\n            strs = \"1\" + strs\n            num = num & 1\n        return strs[::-1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.toBinary(4)\n    print s.toBinary(-1)",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def toBinary(self, n):\n        result = []\n        while n!= 0:\n            result.append(n % 2)\n            n = n >> 1\n\n        result.reverse()\n        return ''.join(map(str, result))",
    "def decimal_to_bin(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return result\n\nif __name__ == '__main__':\n    assert decimal_to_bin(0) == \"0\"\n    assert decimal_to_bin(1) == \"1\"\n    assert decimal_to_bin(2) == \"10\"\n    assert decimal_to_bin(3) == \"100\"\n    assert decimal_to_bin(4) == \"1000\"\n    assert decimal_to_bin(5) == \"10000\"\n    assert decimal_to_bin(6) == \"100000\"\n    assert decimal_to_bin(7) == \"1000000\"\n    assert decimal_to_bin(8) == \"10000000\"\n    assert decimal_to_bin(9) == \"100000000\"\n    assert decimal_to_bin(10) == \"1000000000\"\n    assert decimal_to_bin(11) == \"10000000000\"\n    assert decimal_to_bin(12) == \"100000000000\"\n    assert decimal_to_bin(13) == \"1000000000000\"\n    assert decimal_to_bin(14) == \"10000000000000\"\n    assert decimal_to_bin(15) == \"100000000000000\"\n    assert decimal_to_bin(16) == \"1000000000000000\"\n    assert decimal_to_bin(17) == \"10000000000000000\"\n    assert decimal_to_bin(18) == \"100000000000000000\"\n    assert decimal_to_bin(19) == \"1000000000000000000\"\n    assert decimal_to_bin(20) == \"10000000000000000000\"\n    assert decimal_to_bin(21) == \"100000000000000000000\"\n    assert decimal_to_bin(22) == \"1000000000000000000000\"\n    assert decimal_to_bin(23) == \"10000000000000000000000\"\n    assert decimal_to_bin(24) == \"100000000000000000000000\"\n    assert decimal_to_bin(25) == \"1000000000000000000000000\"\n    assert decimal_to",
    "from utils import binary_search\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 2) + res\n            num = num // 2\n        return res\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convertToBinary(0))\n    print(sol.convertToBinary(1))\n    print(sol.convertToBinary(2))\n    print(sol.convertToBinary(3))\n    print(sol.convertToBinary(4))\n    print(sol.convertToBinary(5))\n    print(sol.convertToBinary(6))\n    print(sol.convertToBinary(7))\n    print(sol.convertToBinary(8))\n    print(sol.convertToBinary(9))",
    "# https://oj.leetcode.com/problems/binary-number-with-decimal-exponent/\n\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # TODO:\n        # 1. \u622a\u53d6\n        # 2. \u5224\u65ad\u7cbe\u5ea6\n        # 3. \u7f16\u7801\n        # 4. \u8f6c\u6362\n        # 5. \u8f6c\u6362\u5b8c\u6bd5\n        # 6. \u8ba1\u7b97\n        # 7. \u5f00\u59cb\n        # 8. \u7f16\u7801\n        # 9. \u8f6c\u6362\n        # 10. \u8ba1\u7b97\n        # 11. \u8ba1\u7b97\u7ed3\u679c\n        # 12. \u8fd4\u56de\n        str = str.strip()\n        if not str:\n            return 0\n        if str[0] == '-':\n            str = '-' + str[1:]\n        exp = int(str)\n        if exp < 0:\n            return 0\n        if exp > 18:\n            return 0\n        str = str[1:]\n        if len(str) > 18:\n            str = str[:18]\n        if len(str) == 0:\n            return 0\n        n = 0\n        while str:\n            n <<= 1\n            n += int(str[0])\n            str = str[1:]\n        return n << exp\n\n\nif __name__ == '__main__':\n    print Solution().myAtoi(\"-2147483647\")\n    print Solution().myAtoi(\"-2147483648\")\n    print Solution().myAtoi(\"-2147483649\")\n    print Solution().myAtoi(\"-2147483650\")\n    print Solution().myAtoi(\"-2147483651\")\n    print Solution().myAtoi(\"-2147483652\")\n    print Solution().myAtoi(\"-2147483653\")\n    print Solution().myAtoi(\"-21474836",
    "# https://leetcode.com/problems/convert-decimal-to-binary/discuss/115061/Python-solution-with-explanation\n\nclass Solution(object):\n    def convertToBin(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 2) + res\n            num /= 2\n        return res",
    "def to_bin(dec):\n    \"\"\"\n    Converts decimal number to its binary equivalent\n    :param dec: decimal number\n    :return: binary equivalent\n    \"\"\"\n    bin_str = ''\n    while dec > 0:\n        bin_str = str(dec % 2) + bin_str\n        dec /= 2\n    return bin_str\n\ndef to_dec(bin_str):\n    \"\"\"\n    Converts binary number to its decimal equivalent\n    :param bin_str: binary number\n    :return: decimal equivalent\n    \"\"\"\n    dec = 0\n    while bin_str!= '':\n        dec += int(bin_str[0]) * 2 ** (len(bin_str) - 1)\n        bin_str = bin_str[1:]\n    return dec\n\nprint(to_bin(123))\nprint(to_dec(to_bin('10111')))",
    "# https://leetcode.com/problems/decimal-to-binary-string/discuss/180179/Python-Solution\n\nimport sys\nclass Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # base 2\n        res = ''\n        while num:\n            res += '1' if num & 1 else '0'\n            num >>= 1\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toBinary(1))\n    print(s.toBinary(2))\n    print(s.toBinary(3))\n    print(s.toBinary(4))\n    print(s.toBinary(5))\n    print(s.toBinary(6))\n    print(s.toBinary(7))\n    print(s.toBinary(8))\n    print(s.toBinary(9))\n    print(s.toBinary(10))\n    print(s.toBinary(100))\n    print(s.toBinary(1000))\n    print(s.toBinary(10000))\n    print(s.toBinary(100000))\n    print(s.toBinary(1000000))\n    print(s.toBinary(10000000))\n    print(s.toBinary(100000000))\n    print(s.toBinary(1000000000))\n    print(s.toBinary(10000000000))\n    print(s.toBinary(100000000000))\n    print(s.toBinary(1000000000000))\n    print(s.toBinary(10000000000000))\n    print(s.toBinary(100000000000000))\n    print(s.toBinary(1000000000000000))\n    print(s.toBinary(10000000000000000))\n    print(s.toBinary(100000000000000000))\n    print(s.toBinary(1000000000000000000))\n    print(s.toBinary(10000000000000000000))\n    print(s.toBinary(100000000000000000000))\n    print(s",
    "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\ndef main():\n    test_cases = [\n        (0, \"0\"),\n        (1, \"1\"),\n        (10, \"1010\"),\n        (27, \"11001\"),\n        (34, \"111011\"),\n        (99, \"1001101\"),\n        (900, \"10100101\"),\n        (999, \"110010101\"),\n        (1000, \"1100101001\"),\n        (9999, \"11001010101\"),\n        (10000, \"110010101010\"),\n        (10001, \"1100101010101\"),\n        (10010, \"1100101010110\"),\n        (10011, \"1100101010111\"),\n        (10100, \"1100101011100\"),\n        (10101, \"1100101011101\"),\n        (10110, \"1100101011110\"),\n        (10111, \"1100101011111\"),\n        (100001, \"11001010111110\"),\n        (100002, \"11001010111111\"),\n        (100010, \"110010101111100\"),\n        (100011, \"110010101111101\"),\n        (100100, \"110010101111110\"),\n        (100101, \"110010101111111\"),\n        (100110, \"1100101011111100\"),\n        (100111, \"1100101011111101\"),\n        (101000, \"1100101011111110\"),\n        (101001, \"1100101011111111\"),\n        (101010, \"1100101011111100\"),\n        (101011, \"1100101011111101\"),\n        (101100, \"1100101011111110\"),\n        (101101, \"1100101011111111\"),\n        (101110, \"11001010111111100\"),\n        (101111, \"110010101",
    "import re\n\nclass Solution(object):\n    def binRepr(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        str = ''\n        while n > 0:\n            if n & 1:\n                str = '1' + str\n            n = n >> 1\n        return str\n\nif __name__ == '__main__':\n    print Solution().binRepr(100)",
    "from collections import deque\n\n\nclass Solution:\n    \"\"\"\n    @param d: An integer\n    @return: A string\n    \"\"\"\n    def toBinary(self, d):\n        ret = []\n        while d > 0:\n            ret.append(d % 2)\n            d /= 2\n        return ''.join(reversed(ret))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.toBinary(2))\n    print(sol.toBinary(3))\n    print(sol.toBinary(7))\n    print(sol.toBinary(15))",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = ''\n        while num > 0:\n            res += '1' if num % 2 else '0'\n            num >>= 1\n        return res",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        while num > 0:\n            res = str(num % 2) + res\n            num /= 2\n        return res\n        \n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.convertToBinary(10)\n    print sol.convertToBinary(100)\n    print sol.convertToBinary(1000)\n    print sol.convertToBinary(1111)\n    print sol.convertToBinary(10000)",
    "# https://leetcode.com/problems/convert-decimal-to-binary/\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        elif num == 1:\n            return \"1\"\n        else:\n            result = []\n            while num > 0:\n                result.append(str(num % 2))\n                num = num / 2\n            result.reverse()\n            return \"\".join(result)",
    "# https://leetcode.com/problems/convert-decimal-to-binary/\n\nclass Solution:\n    # @param {integer} dec\n    # @return {integer}\n    def decToBin(self, dec):\n        if dec == 0:\n            return \"0\"\n        \n        bin = \"\"\n        while dec > 0:\n            bin = str(dec % 2) + bin\n            dec = int(dec / 2)\n\n        return bin",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str == '-':\n            return -1\n        if str == '+':\n            return 1\n        if str == '0':\n            return 0\n        \n        result = 0\n        for i in str:\n            if i == '1' or i == '2':\n                result += 1\n            elif i == '3' or i == '4':\n                result += 2\n            elif i == '5' or i == '6':\n                result += 3\n            elif i == '7' or i == '8':\n                result += 4\n            elif i == '9':\n                result += 5\n            elif i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f':\n                result += 6\n            elif i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n                result += 7\n            else:\n                break\n        return result",
    "def convert_to_binary(n):\n\t\"\"\"\n\tConverts a decimal number to its binary equivalent.\n\t:param n: A decimal number\n\t:return: A binary equivalent of the given decimal number\n\t\"\"\"\n\treturn bin(n)\n\ndef main():\n\tprint(convert_to_binary(1))\n\tprint(convert_to_binary(0))\n\tprint(convert_to_binary(2))\n\tprint(convert_to_binary(3))\n\tprint(convert_to_binary(4))\n\tprint(convert_to_binary(5))\n\tprint(convert_to_binary(6))\n\tprint(convert_to_binary(7))\n\tprint(convert_to_binary(8))\n\tprint(convert_to_binary(9))\n\tprint(convert_to_binary(10))\n\tprint(convert_to_binary(11))\n\tprint(convert_to_binary(12))\n\tprint(convert_to_binary(13))\n\tprint(convert_to_binary(14))\n\tprint(convert_to_binary(15))\n\tprint(convert_to_binary(16))\n\tprint(convert_to_binary(17))\n\tprint(convert_to_binary(18))\n\tprint(convert_to_binary(19))\n\tprint(convert_to_binary(20))\n\tprint(convert_to_binary(21))\n\tprint(convert_to_binary(22))\n\tprint(convert_to_binary(23))\n\tprint(convert_to_binary(24))\n\tprint(convert_to_binary(25))\n\tprint(convert_to_binary(26))\n\tprint(convert_to_binary(27))\n\tprint(convert_to_binary(28))\n\tprint(convert_to_binary(29))\n\tprint(convert_to_binary(30))\n\tprint(convert_to_binary(31))\n\tprint(convert_to_binary(32))\n\tprint(convert_to_binary(33))\n\tprint(convert_to",
    "def to_binary(dec):\n    \"\"\"\n    :type dec: int\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    while dec > 0:\n        dec -= 1\n        result += \"1\"\n    return result\n\ndef test_to_binary():\n    assert to_binary(0) == \"0\"\n    assert to_binary(1) == \"1\"\n    assert to_binary(2) == \"10\"\n    assert to_binary(3) == \"11\"\n    assert to_binary(4) == \"100\"\n    assert to_binary(5) == \"101\"\n    assert to_binary(6) == \"110\"\n    assert to_binary(7) == \"111\"\n    assert to_binary(8) == \"1000\"\n    assert to_binary(9) == \"1001\"\n    assert to_binary(10) == \"1010\"\n    assert to_binary(11) == \"1011\"\n    assert to_binary(12) == \"1100\"\n    assert to_binary(13) == \"1101\"\n    assert to_binary(14) == \"1110\"\n    assert to_binary(15) == \"1111\"\n    assert to_binary(16) == \"10010\"\n    assert to_binary(17) == \"10011\"\n    assert to_binary(18) == \"10110\"\n    assert to_binary(19) == \"10111\"\n    assert to_binary(20) == \"11010\"\n    assert to_binary(21) == \"11011\"\n    assert to_binary(22) == \"11100\"\n    assert to_binary(23) == \"11101\"\n    assert to_binary(24) == \"11110\"\n    assert to_binary(25) == \"11111\"\n    assert to_binary(26) == \"100100\"\n    assert to_binary(27) == \"100101\"\n    assert to_binary(28) == \"100110\"\n    assert to_binary(29) == \"100111\"\n    assert to_binary(30) == \"101100\"\n    assert to_binary(31) == \"101101\"\n    assert to_binary(32) == \"",
    "class Solution:\n    # @param {integer} n\n    # @return {string}\n    def toBinary(self, n):\n        result = \"\"\n        while n > 0:\n            result = \"1\" + result\n            n = n - 1\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.toBinary(16))\n    print(sol.toBinary(20))\n    print(sol.toBinary(12))\n    print(sol.toBinary(2))\n    print(sol.toBinary(0))",
    "def convert_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal / 2\n    return result\n\n\nclass Solution(object):\n    def convert(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        while num > 0:\n            result = str(num % 2) + result\n            num = num / 2\n        return result",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 2) + res\n            num /= 2\n        return res",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        ret = \"\"\n        while num > 0:\n            ret += str(num % 2)\n            num /= 2\n        return ret[::-1]",
    "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    decimal = int(input())\n    print(decimal_to_binary(decimal))\n\nif __name__ == \"__main__\":\n    main()",
    "from __future__ import print_function\n\nimport sys\n\n# @include\ndef binary_number(dec):\n    # Binary representation of a number is the reversed digits.\n    return ''.join(reversed(str(dec)))\n# @exclude\n\n\ndef main():\n    if len(sys.argv) == 2 and sys.argv[1] == '--benchmark':\n        print('%.2f' % benchmark())\n        return\n    test_cases = [\n        (10, '1010'),\n        (100, '101010001'),\n        (1000, '1011000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
    "import unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_ex1_1(self):\n        self.assertEqual(bin(10), '1010')\n        self.assertEqual(bin(10 ** 2), '1010')\n        self.assertEqual(bin(10 ** 3), '1010')\n\n    def test_ex1_2(self):\n        self.assertEqual(bin(10 ** 4), '1010')\n        self.assertEqual(bin(10 ** 5), '1010')\n        self.assertEqual(bin(10 ** 6), '1010')\n        self.assertEqual(bin(10 ** 7), '1010')\n\n    def test_ex1_3(self):\n        self.assertEqual(bin(10 ** 8), '1010')\n        self.assertEqual(bin(10 ** 9), '1010')\n        self.assertEqual(bin(10 ** 10), '1010')\n        self.assertEqual(bin(10 ** 11), '1010')\n\n    def test_ex1_4(self):\n        self.assertEqual(bin(10 ** 12), '1010')\n        self.assertEqual(bin(10 ** 13), '1010')\n        self.assertEqual(bin(10 ** 14), '1010')\n        self.assertEqual(bin(10 ** 15), '1010')\n\n    def test_ex1_5(self):\n        self.assertEqual(bin(10 ** 16), '1010')\n        self.assertEqual(bin(10 ** 17), '1010')\n        self.assertEqual(bin(10 ** 18), '1010')\n        self.assertEqual(bin(10 ** 19), '1010')\n\n    def test_ex1_6(self):\n        self.assertEqual(bin(10 ** 20), '1010')\n        self.assertEqual(bin(10 ** 21), '1010')\n        self.assertEqual(bin(10 ** 22), '1010')\n        self.assertEqual(bin(10 ** 23), '1010')\n\n    def test_ex1_7",
    "class Solution:\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        result = ''\n        while num > 0:\n            result = str(num % 2) + result\n            num = num // 2\n        return result",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        elif num == 1:\n            return '1'\n        else:\n            binary_list = []\n            while num > 0:\n                binary_list.append('1' if num % 2 else '0')\n                num = num >> 1\n            return ''.join(binary_list)",
    "def convert(num):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n\n    Example:\n    >>> convert(1)\n    '1'\n    >>> convert(8)\n    '1010'\n    >>> convert(123)\n    '110010111'\n    >>> convert(-123)\n    '-110010111'\n    >>> convert(0)\n    '0'\n    \"\"\"\n    if num == 0:\n        return '0'\n    res = ''\n    while num > 0:\n        res += str(num % 2)\n        num = num // 2\n    return res\n\nif __name__ == '__main__':\n    print convert(123)\n    print convert(-123)\n    print convert(0)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n\n        sign = 1\n        if str[0] == '-':\n            sign = -1\n            str = str[1:]\n\n        count = 0\n        while str and str[0] == '0':\n            str = str[1:]\n\n        while str and str[0]!= '\\0':\n            count += 1\n            str = str[1:]\n\n        return sign * count\n\n\nif __name__ == \"__main__\":\n    print(Solution().myAtoi(\"-1\"))\n    print(Solution().myAtoi(\"-1\"))\n    print(Solution().myAtoi(\"0\"))\n    print(Solution().myAtoi(\"1\"))\n    print(Solution().myAtoi(\"2\"))\n    print(Solution().myAtoi(\"10\"))\n    print(Solution().myAtoi(\"100\"))\n    print(Solution().myAtoi(\"1000\"))\n    print(Solution().myAtoi(\"1000000\"))\n    print(Solution().myAtoi(\"100000000\"))\n    print(Solution().myAtoi(\"10000000000\"))",
    "def dec_to_bin(dec):\n    \"\"\"\n    :type dec: int\n    :rtype: str\n    \"\"\"\n    return bin(dec)[2:]\n\n# Your Codec object will be instantiated and called as such:\n# obj = Codec()\n# param_1 = obj.dec_to_bin(param_1)",
    "import math\n\n\ndef to_bin(n):\n    \"\"\"\n    Convert the given number to its binary equivalent.\n    :type n: int\n    :rtype: str\n    \"\"\"\n    bin_str = \"\"\n    while n > 0:\n        bin_str += str(n % 2)\n        n //= 2\n    return bin_str\n\n\ndef to_dec(n):\n    \"\"\"\n    Convert the given number to its decimal equivalent.\n    :type n: int\n    :rtype: str\n    \"\"\"\n    dec_str = \"\"\n    while n > 0:\n        dec_str += str(n % 10)\n        n //= 10\n    return dec_str\n\n\ndef main():\n    print(to_bin(14))\n    print(to_dec(14))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = ''\n        while num:\n            res = '1' + res\n            num = num >> 1\n        return res\n\nif __name__ == '__main__':\n    assert Solution().toBinary(0) == '0'\n    assert Solution().toBinary(1) == '1'\n    assert Solution().toBinary(2) == '10'\n    assert Solution().toBinary(3) == '11'\n    assert Solution().toBinary(4) == '100'\n    assert Solution().toBinary(5) == '101'\n    assert Solution().toBinary(6) == '110'\n    assert Solution().toBinary(7) == '111'\n    assert Solution().toBinary(8) == '1000'\n    assert Solution().toBinary(9) == '1001'\n    assert Solution().toBinary(10) == '1010'\n    assert Solution().toBinary(11) == '1011'\n    assert Solution().toBinary(12) == '1110'\n    assert Solution().toBinary(13) == '1111'\n    assert Solution().toBinary(14) == '10000'\n    assert Solution().toBinary(15) == '10001'\n    assert Solution().toBinary(16) == '10010'\n    assert Solution().toBinary(17) == '10011'\n    assert Solution().toBinary(18) == '10100'\n    assert Solution().toBinary(19) == '10101'\n    assert Solution().toBinary(20) == '10110'\n    assert Solution().toBinary(21) == '10111'\n    assert Solution().toBinary(22) == '11000'\n    assert Solution().toBinary(23) == '11001'\n    assert Solution().toBinary(24) == '11010'\n    assert Solution().toBinary(25) == '11011'\n    assert Solution().toBinary(26) == '11100'"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}