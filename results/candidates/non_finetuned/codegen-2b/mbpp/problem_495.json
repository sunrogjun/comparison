{
  "problem": {
    "task_id": "MBPP/506",
    "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
    "test_list": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ],
    "challenge_test_list": [],
    "problem_id": 495
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def perm_coeff(p, n, k):\n    \"\"\"\n    Given the permutation coefficient of p(n, k), return the permutation\n    coefficient of p(n, k)^2.\n    \"\"\"\n    return p * (p - 1) * (p - 2) / 6\n\n\nif __name__ == '__main__':\n    assert perm_coeff(1, 3, 3) == 1\n    assert perm_coeff(2, 3, 3) == 2\n    assert perm_coeff(3, 3, 3) == 3\n    assert perm_coeff(4, 3, 3) == 4\n    assert perm_coeff(5, 3, 3) == 5\n    assert perm_coeff(6, 3, 3) == 6\n    assert perm_coeff(7, 3, 3) == 7\n    assert perm_coeff(8, 3, 3) == 8\n    assert perm_coeff(9, 3, 3) == 9\n    assert perm_coeff(10, 3, 3) == 10\n    assert perm_coeff(11, 3, 3) == 11\n    assert perm_coeff(12, 3, 3) == 12\n    assert perm_coeff(13, 3, 3) == 13\n    assert perm_coeff(14, 3, 3) == 14\n    assert perm_coeff(15, 3, 3) == 15\n    assert perm_coeff(16, 3, 3) == 16\n    assert perm_coeff(17, 3, 3) == 17\n    assert perm_coeff(18, 3, 3) == 18\n    assert perm_coeff(19, 3, 3) == 19\n    assert perm_coeff(20, 3, 3) == 20\n    assert perm_coeff(21, 3, 3) == 21\n    assert perm_coeff(22, 3, 3) == 22\n    assert perm_coeff(23, 3, 3) == 23\n    assert perm_coeff(24, 3, 3) == 24\n    assert perm_coeff(25, 3, 3) == 25\n    assert perm_coeff(26, 3, 3) == 26\n    assert perm_coeff(27, 3, 3) ==",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k < 1 or k > n:\n        return 0\n    return (n - 1) * (n - 2) / (k * (k - 1))\n\n\nif __name__ == '__main__':\n    print permutation_coefficient(2, 2)\n    print permutation_coefficient(4, 2)\n    print permutation_coefficient(5, 4)\n    print permutation_coefficient(4, 3)\n    print permutation_coefficient(5, 3)\n    print permutation_coefficient(6, 4)",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    For example, if p(n, k) = 1/2, then the permutation coefficient is 1.\n    If p(n, k) = 1, then the permutation coefficient is 0.\n    If p(n, k) = 0, then the permutation coefficient is -1.\n    If p(n, k) = -1, then the permutation coefficient is -1.\n    If p(n, k) = -2, then the permutation coefficient is -2.\n    If p(n, k) = -3, then the permutation coefficient is -3.\n    If p(n, k) = -4, then the permutation coefficient is -4.\n    If p(n, k) = -5, then the permutation coefficient is -5.\n    If p(n, k) = -6, then the permutation coefficient is -6.\n    If p(n, k) = -7, then the permutation coefficient is -7.\n    If p(n, k) = -8, then the permutation coefficient is -8.\n    If p(n, k) = -9, then the permutation coefficient is -9.\n    If p(n, k) = -10, then the permutation coefficient is -10.\n    If p(n, k) = -11, then the permutation coefficient is -11.\n    If p(n, k) = -12, then the permutation coefficient is -12.\n    If p(n, k) = -13, then the permutation coefficient is -13.\n    If p(n, k) = -14, then the permutation coefficient is -14.\n    If p(n, k) = -15, then the permutation coefficient is -15.\n    If p(n, k) = -16, then the permutation coefficient is -16.\n    If p(n, k) = -17, then the permutation coefficient is -17.\n    If p(n, k) = -18, then the permutation coefficient is -18.\n    If p(n, k) = -19, then the permutation coefficient is -19.\n    If p(n, k) = -20,",
    "import collections\n\nfrom utils import memo\n\n\n# @memo\ndef p_coeff(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 1\n    if n == 2:\n        return 1\n    if k == 4:\n        return 1\n    if n == 3:\n        return 1\n    if k == 5:\n        return 1\n    if n == 4:\n        return 1\n    if k == 6:\n        return 1\n    if n == 5:\n        return 1\n    if k == 7:\n        return 1\n    if n == 6:\n        return 1\n    if k == 8:\n        return 1\n    if n == 7:\n        return 1\n    if k == 9:\n        return 1\n    if n == 8:\n        return 1\n    if k == 10:\n        return 1\n    if n == 9:\n        return 1\n    if k == 11:\n        return 1\n    if n == 10:\n        return 1\n    if k == 12:\n        return 1\n    if n == 11:\n        return 1\n    if k == 13:\n        return 1\n    if n == 12:\n        return 1\n    if k == 14:\n        return 1\n    if n == 13:\n        return 1\n    if k == 15:\n        return 1\n    if n == 14:\n        return 1\n    if k == 16:\n        return 1\n    if n == 15:\n        return 1\n    if k == 17:\n        return 1\n    if n == 16:\n        return 1\n    if k == 18:\n        return 1\n    if n == 17:\n        return 1\n    if k == 19:\n        return 1\n    if n == 18:\n        return 1\n    if k == 20:\n        return 1\n    if n == 19:\n        return 1\n    if k == 21:\n        return 1\n    if n == 20:",
    "def perm_coef(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return 1\n    elif k == 2:\n        return n\n    elif k % 2 == 0:\n        return perm_coef(n, k / 2) * perm_coef(n - 1, k / 2)\n    else:\n        return perm_coef(n, k / 2) * (perm_coef(n - 1, k / 2) + perm_coef(n - 1, k / 2 - 1))\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(perm_coef(n, k))\n\nif __name__ == \"__main__\":\n    main()",
    "def p_coefficient(p, n, k):\n    \"\"\"\n    Input: p(n, k) = p(n, k)\n    Output: p(n, k)\n    \"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result *= (n - k + i) / (i + 1)\n    return result",
    "# Definition for permutation\nclass Permutation:\n    def __init__(self, num):\n        self.num = num\n\n    def __repr__(self):\n        return str(self.num)\n\n    def __str__(self):\n        return str(self.num)\n\n\nclass Solution:\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k == 3:\n            return n * (n - 1)\n        if k == 4:\n            return n * (n - 1) * (n - 2)\n        if k % 2 == 0:\n            return self.getPermutationCoefficient(n, k // 2) * (n - 1) * (n - 2) * (n - 3)\n        else:\n            return self.getPermutationCoefficient(n, k // 2) * (n - 1) * (n - 2) * (n - 3) * (n - 4)\n\n\nif __name__ == '__main__':\n    n = 4\n    k = 3\n    p = Permutation(n)\n    s = Solution()\n    print(s.getPermutationCoefficient(n, k))",
    "# https://www.codewars.com/kata/permutation-coefficient/train/python\n\nimport sys\n\n\ndef permutation_coefficient(n, k):\n    if n < k:\n        return 0\n    return sum(permutation_coefficient(n - 1, k - 1))\n\n\ndef main():\n    test_cases = sys.stdin.readlines()\n    for test in test_cases:\n        n, k = map(int, test.split(','))\n        print(permutation_coefficient(n, k))\n\n\nif __name__ == '__main__':\n    main()",
    "import sys\n\ndef permutation_coefficient(p, n, k):\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return (n + 1) * (n + 2) / 2\n    if p == 3:\n        return (n + 1) * (n + 2) * (n + 3) / 6\n    if p == 4:\n        return (n + 1) * (n + 2) * (n + 3) * (n + 4) / 24\n    if p == 5:\n        return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) / 120\n    return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) / 720\n\nif __name__ == \"__main__\":\n    p = int(sys.stdin.readline())\n    n = int(sys.stdin.readline())\n    k = int(sys.stdin.readline())\n    print permutation_coefficient(p, n, k)",
    "def perm_coeff(n, k):\n    \"\"\"\n    Returns the permutation coefficient of given p(n, k).\n\n    Example\n    Given n = 5 and k = 2, return 2.\n    Given n = 5 and k = 3, return -1.\n    Given n = 5 and k = 4, return -1.\n    Given n = 5 and k = 6, return 0.\n    Given n = 5 and k = 7, return 1.\n    Given n = 5 and k = 8, return 0.\n    Given n = 5 and k = 9, return 1.\n    Given n = 5 and k = 10, return -1.\n    Given n = 5 and k = 11, return 1.\n    Given n = 5 and k = 12, return 0.\n    Given n = 5 and k = 13, return 1.\n    Given n = 5 and k = 14, return -1.\n    Given n = 5 and k = 15, return 1.\n    Given n = 5 and k = 16, return -1.\n    Given n = 5 and k = 17, return 0.\n    Given n = 5 and k = 18, return 1.\n    Given n = 5 and k = 19, return -1.\n    Given n = 5 and k = 20, return 1.\n    Given n = 5 and k = 21, return -1.\n    Given n = 5 and k = 22, return 0.\n    Given n = 5 and k = 23, return 1.\n    Given n = 5 and k = 24, return -1.\n    Given n = 5 and k = 25, return 1.\n    Given n = 5 and k = 26, return -1.\n    Given n = 5 and k = 27, return 0.\n    Given n = 5 and k = 28, return 1.\n    Given n = 5 and k = 29, return -1.\n    Given n = 5 and k = 30, return 1.\n    Given n = 5 and k = 31, return -1.\n    Given n = 5 and k = 32, return 0.\n    Given n = 5 and k = 33, return 1.\n    Given n = 5 and k = 34, return -1.\n    Given n = 5 and k = 35, return 1.\n    Given n = 5",
    "# https://www.hackerrank.com/challenges/permutation-coefficient\ndef permutation_coefficient(p, n, k):\n    # Returns the permutation coefficient\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return p\n    if k == n:\n        return 1\n    if k == n - 1:\n        return p * (p - 1)\n    return p * (p - 1) * (p - 2) * (p - 3) * (p - n)\n\n# Complete the permutationCoefficient function below.\ndef permutation_coefficient(p, n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return p\n    if k == n:\n        return 1\n    if k == n - 1:\n        return p * (p - 1)\n    return p * (p - 1) * (p - 2) * (p - 3) * (p - n)",
    "import math\n\ndef perm_coeff(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\nif __name__ == '__main__':\n    print(perm_coeff(1, 1))",
    "def permutation_coefficient(p, n, k):\n    \"\"\"\n    :type p: int\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return p ** k * (n - p + 1) // k\n\nif __name__ == '__main__':\n    print(permutation_coefficient(3, 3, 2))\n    print(permutation_coefficient(3, 4, 3))\n    print(permutation_coefficient(3, 3, 3))",
    "def permutation_coefficient(p, n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k)\n    Input:\n        p: the given probability of a permutation of n elements.\n        n: the given number of elements.\n        k: the given number of elements to be permuted.\n    Output:\n        The permutation coefficient.\n    \"\"\"\n    if p < 1 or p > 100 or n < 1 or n > 100 or k < 1 or k > 100:\n        return 0\n    return sum(1 for i in range(k) if p * i < n)\n\nprint(permutation_coefficient(0.5, 10, 5))",
    "import math\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n\n\nif __name__ == '__main__':\n    assert(permutation_coefficient(3, 2) == 0)\n    assert(permutation_coefficient(5, 3) == 1)\n    assert(permutation_coefficient(3, 0) == 1)\n    assert(permutation_coefficient(3, 1) == 1)\n    assert(permutation_coefficient(3, 4) == 0)",
    "def p(n, k):\n    \"\"\"\n    For k = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n    35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n    86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,\n    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,",
    "def permutation_coefficient(p, n, k):\n    \"\"\"\n    For a given p(n, k) and k, return the permutation coefficient of p(n, k).\n\n    p(n, k) is a permutation coefficient of k-permutations on n elements.\n    The permutation coefficient of p(n, k) is the number of permutations\n    of the elements in k-permutations on n elements.\n\n    Example:\n\n    p(n, k) = p(1, k) * p(2, k) *... * p(n, k)\n\n    p(1, k) is the number of permutations of the elements in k-permutations\n    on 1 elements.\n    p(2, k) is the number of permutations of the elements in k-permutations\n    on 2 elements.\n    p(n, k) is the number of permutations of the elements in k-permutations\n    on n elements.\n\n    Input:\n\n    p(n, k) = [p(n, k), p(n - 1, k),..., p(1, k)]\n    n is an integer\n    k is an integer\n    k-permutations on n elements\n    p(n, k) is a permutation coefficient of k-permutations on n elements.\n\n    Output:\n\n    A permutation coefficient of k-permutations on n elements.\n\n    Constraints:\n\n    1 <= n <= 100\n    0 <= k <= n\n    p(n, k) is in the range [0, 2^n - 1]\n    \"\"\"\n    # p(n, k) = p(n - 1, k) * p(n - 2, k) *... * p(1, k)\n    # p(n, k) = p(n - 1, k) * p(n - 2, k) *... * p(1, k)\n    # p(n, k) = p(n - 1, k) * p(n - 2, k) *... * p(1, k)\n    # p(n, k) = p(n - 1, k) * p(n - 2, k) *... * p(1, k)\n    # p(n, k)",
    "import math\n\ndef p_coeff(n, k):\n    # n is the number of elements in the array\n    # k is the number of permutations\n    return math.factorial(n) / math.factorial(k) / math.factorial(n-k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(p_coeff(n, k))",
    "import math\n\ndef permutation_coefficient(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n * (n - 1) / 2\n    elif k % 2 == 0:\n        return n * (n - 1) / 2 * (k / 2)\n    else:\n        return n * (n - 1) / 2 * (k / 2) * (k - 1) / 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        for j in range(1, 101):\n            print('{:.6}'.format(permutation_coefficient(i, j)), '\\n')",
    "from collections import Counter\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k > n:\n        return 0\n\n    cnt = Counter(range(1, k + 1))\n    for i in range(1, k + 1):\n        cnt[i] += cnt[i - 1]\n\n    return cnt[k]\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(5, 1))\n    print(permutation_coefficient(5, 2))\n    print(permutation_coefficient(5, 3))\n    print(permutation_coefficient(5, 4))",
    "__author__ = 'Danyang'\n\nclass Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        permutation coefficient\n        :param n:\n        :param k:\n        :return:\n        \"\"\"\n        if n == 1:\n            return 1\n\n        # memo\n        # memo[n][k] = permutation coefficient of p(n, k)\n        # memo[n][k] = memo[n][k-1] + memo[n-1][k-1]\n        memo = [[0] * (n+1) for _ in range(k+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                memo[j][i] = memo[j-1][i-1] + memo[i-1][j-1]\n\n        return memo[k][n]\n\n    def permutationCoefficient2(self, n, k):\n        \"\"\"\n        permutation coefficient\n        :param n:\n        :param k:\n        :return:\n        \"\"\"\n        if n == 1:\n            return 1\n\n        # memo\n        # memo[n][k] = permutation coefficient of p(n, k)\n        # memo[n][k] = memo[n-1][k-1] + memo[n-1][k-2]\n        memo = [[0] * (n+1) for _ in range(k+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                memo[j][i] = memo[j-1][i-1] + memo[i-1][j-1]\n\n        return memo[k][n]\n\n    def permutationCoefficient3(self, n, k):\n        \"\"\"\n        permutation coefficient\n        :param n:\n        :param k:\n        :return:\n        \"\"\"\n        if n == 1:\n            return 1\n\n        # memo\n        # memo[n][k] = permutation coefficient of p(n, k)\n        # memo[n][k] = memo[n-1][k-1] +",
    "def p_coefficient(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n\n    p(n, k) = (k - 1) * p(n - 1, k - 1) + p(n - 1, k)\n    \"\"\"\n    return k - 1 * p_coefficient(n - 1, k - 1) + p_coefficient(n - 1, k)\n\n\nif __name__ == '__main__':\n    print(p_coefficient(10, 1))",
    "def permutation_coefficient(p, n, k):\n    \"\"\"\n    :type p: float\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if p == 0:\n        return 0\n    if k == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == n:\n        return 1\n    if k == 1:\n        return 1\n    if p == k:\n        return 1\n    if p == k + 1:\n        return 1\n    if p == n - k:\n        return 1\n    if p > n - k:\n        return 0\n    if p == k + 2:\n        return 1\n    if p == k + 1 + n - k:\n        return 1\n    if p == k + 2 + n - k:\n        return 1\n    if p > k + 1 + n - k:\n        return 0\n    if p == k + 3:\n        return 1\n    if p == k + 1 + n - k + 1:\n        return 1\n    if p == k + 2 + n - k + 1:\n        return 1\n    if p > k + 1 + n - k + 1:\n        return 0\n    if p == k + 3 + n - k + 1:\n        return 1\n    if p == k + 1 + n - k + 2:\n        return 1\n    if p == k + 2 + n - k + 2:\n        return 1\n    if p > k + 1 + n - k + 2:\n        return 0\n    if p == k + 3 + n - k + 2:\n        return 1\n    if p == k + 1 + n - k + 3:\n        return 1\n    if p == k + 2 + n - k + 3:\n        return 1\n    if p > k + 1 + n - k + 3:\n        return 0\n    if p == k + 3 + n - k + 3:\n        return 1\n    if p == k + 1 + n - k + 4:\n        return 1\n    if p == k + 2 + n - k + 4:\n        return 1\n    if p > k + 1 + n - k + 4:",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    n: int, number of permutations\n    k: int, number of permutations in a single round\n    \"\"\"\n    if k == 1:\n        return 1\n    if k == 2:\n        return n\n    if k % 2 == 0:\n        return k / 2\n    return (k - 1) / 2\n\nif __name__ == '__main__':\n    print(permutation_coefficient(1, 1))\n    print(permutation_coefficient(1, 2))\n    print(permutation_coefficient(1, 3))\n    print(permutation_coefficient(2, 1))\n    print(permutation_coefficient(2, 2))\n    print(permutation_coefficient(2, 3))\n    print(permutation_coefficient(3, 1))\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(3, 3))\n    print(permutation_coefficient(4, 1))\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient(4, 3))\n    print(permutation_coefficient(4, 4))\n    print(permutation_coefficient(5, 1))\n    print(permutation_coefficient(5, 2))\n    print(permutation_coefficient(5, 3))\n    print(permutation_coefficient(5, 4))\n    print(permutation_coefficient(5, 5))",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 1\n    if k == 4:\n        return 1\n    if k == 5:\n        return 1\n    if k == 6:\n        return 1\n    if k == 7:\n        return 1\n    if k == 8:\n        return 1\n    if k == 9:\n        return 1\n    if k == 10:\n        return 1\n    if k == 11:\n        return 1\n    if k == 12:\n        return 1\n    if k == 13:\n        return 1\n    if k == 14:\n        return 1\n    if k == 15:\n        return 1\n    if k == 16:\n        return 1\n    if k == 17:\n        return 1\n    if k == 18:\n        return 1\n    if k == 19:\n        return 1\n    if k == 20:\n        return 1\n    if k == 21:\n        return 1\n    if k == 22:\n        return 1\n    if k == 23:\n        return 1\n    if k == 24:\n        return 1\n    if k == 25:\n        return 1\n    if k == 26:\n        return 1\n    if k == 27:\n        return 1\n    if k == 28:\n        return 1\n    if k == 29:\n        return 1\n    if k == 30:\n        return 1\n    if k == 31:\n        return 1\n    if k == 32:\n        return 1\n    if k == 33:\n        return 1\n    if k == 34:\n        return 1\n    if k == 35:\n        return 1\n    if k == 36:\n        return 1\n    if k == 37:\n        return 1\n    if k == 38:\n        return 1\n    if k == 39:\n        return 1\n    if k == 40:\n        return 1\n    if k == 41:\n        return 1",
    "import unittest\n\nfrom permutations import permutations\n\n\nclass TestPermutations(unittest.TestCase):\n    def test_permutations(self):\n        self.assertEqual(permutations(1), [1])\n        self.assertEqual(permutations(2), [1, 2])\n        self.assertEqual(permutations(3), [1, 2, 3])\n        self.assertEqual(permutations(4), [1, 2, 3, 4])\n        self.assertEqual(permutations(5), [1, 2, 3, 4, 5])\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "from collections import Counter\n\ndef p_coeff(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n <= k:\n        return 1\n    # p(n, k) = p(n, k-1) * p(n-1, k-1) *... * p(1, k-1) * p(n-k+1, k-1)\n    # p(n, k) = p(n, k-1) * p(n-k+1, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p(n-k+2, k-1)\n    # p(n, k) = p(n-k+1, k-1) * p",
    "def perm_coeff(p, n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    return perm_coeff(p, n - 1, k) + perm_coeff(p, n - 1, k - 1)\n\nif __name__ == '__main__':\n    # f = open('perm_coeff_input.txt')\n    # n = int(f.readline())\n    # k = int(f.readline())\n    # p = list(map(int, f.readline().split(' ')))\n    n = 2\n    k = 1\n    p = [1, 2]\n    print perm_coeff(p, n, k)",
    "class Solution(object):\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k == n:\n            return 1\n        if k == n - 1:\n            return 1\n        if k > n - 1:\n            return 0\n\n        # calculate p(n, k)\n        p = 1\n        for i in range(n - k + 1):\n            p *= (n - k + 1 - i)\n\n        # calculate p(n, k - 1)\n        p *= (n - k + 1)\n        for i in range(1, k):\n            p *= (n - k + i + 1)\n\n        # calculate p(n - 1, k)\n        p *= (k - 1)\n        for i in range(1, k):\n            p *= (n - k + i)\n\n        return p\n\nif __name__ == \"__main__\":\n    print(Solution().getPermutationCoefficient(10, 3))",
    "# A permutation coefficient is defined as the number of distinct permutations of the given length\n# over the given set of elements.\n# It is also possible to say that the coefficient is the number of distinct permutations of the given\n# length over the given set of elements.\n# The coefficient of a given set of elements is obtained by summing over all permutation coefficients\n# of the given length of the given elements.\n# The permutation coefficient of a given set of elements is the sum of the coefficients of the permutations\n# of the given length of the given elements.\n# The permutation coefficient of a given set of elements is the sum of the coefficients of the permutations\n# of the given length of the given elements.\n# If there are two sets of elements, then the coefficient of a given set of elements is the sum of the\n# coefficient of the permutations of the given length of the first set of elements and the coefficient of the\n# permutations of the given length of the second set of elements.\n# The permutation coefficient of a given set of elements is the sum of the coefficients of the permutations\n# of the given length of the given set of elements.\n#\n# Input\n# The first line of the input gives the number of test cases.\n# Each test case is represented by a single line, containing two integers.\n# The first integer is the length of the set of elements.\n# The second integer is the number of distinct permutation of the given length of the given set of elements.\n#\n# Output\n# For each test case, print the number of permutations of the given length of the given set of elements.\n#\n# Sample Input\n# 2\n# 2 3\n# 2 3\n# 3 4\n# 3 4\n#\n# Sample Output\n# 4\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3\n# 3\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3\n# 3\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3\n# 3\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3\n# 3\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3\n# 3\n# 4\n# 4\n# 1\n# 2\n# 2\n# 3",
    "class Solution(object):\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dp = [1] * (n + 1)\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                dp[j] = (dp[j] * (n - j + 1)) // (i * (i - 1))\n        return dp[n]",
    "# Definition for permutation\nclass Permutation:\n    def __init__(self, n):\n        self.n = n\n\n    def __repr__(self):\n        return str(self.n)\n\n\n# Your Permutation object will be instantiated and called as such:\n# p = Permutation(n)\n# param_coefficient = p.permutation_coefficient(k)\ndef permutation_coefficient(p, k):\n    if k == 0:\n        return 1\n    return p.n / k\n\nif __name__ == '__main__':\n    p = Permutation(6)\n    print(permutation_coefficient(p, 3))\n    p = Permutation(3)\n    print(permutation_coefficient(p, 3))",
    "def get_perm_coefficient(p, n, k):\n    \"\"\"\n    :type p: int\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if p == 1:\n        return 1\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return n\n    elif k == 3:\n        return n * (n - 1)\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3) / 6\n\ndef main():\n    # Input sample\n    sample_p_n_k = [\n        [1, 1, 1],\n        [2, 2, 2],\n        [3, 4, 5],\n        [4, 5, 6],\n        [5, 6, 7],\n        [6, 7, 8],\n        [7, 8, 9],\n        [8, 9, 10]\n    ]\n    # Result\n    expected_p_n_k = [\n        [1, 1, 1],\n        [1, 1, 0],\n        [2, 2, 2],\n        [2, 2, 0],\n        [3, 4, 5],\n        [3, 4, 0],\n        [4, 5, 6],\n        [4, 5, 0],\n        [5, 6, 7],\n        [5, 6, 0],\n        [6, 7, 8],\n        [6, 7, 0],\n        [7, 8, 9],\n        [7, 8, 0],\n        [8, 9, 10],\n        [8, 9, 0]\n    ]\n\n    # Test\n    for p_n_k in sample_p_n_k:\n        assert get_perm_coefficient(*p_n_k) == expected_p_n_k[p_n_k[0] - 1][p_n_k[1] - 1]\n\n\nif __name__ == '__main__':\n    main()",
    "def perm_coeff(p, n, k):\n    \"\"\"\n    Return the permutation coefficient of given p(n, k).\n\n    p(n, k) is the number of permutations of a string of length n\n    and with k characters.\n    \"\"\"\n    # Recursion\n    if k == 0:\n        return 1\n    elif k == 1:\n        return p(n, k - 1)\n    elif k == 2:\n        return p(n - 1, k - 1) * p(n - 1, k - 2)\n    else:\n        return p(n - 1, k - 1) * p(n - 2, k - 1) * p(n - 2, k - 2) * p(n - 3, k - 1) * p(n - 3, k - 2) * p(n - 3, k - 3)\n\n\n# Test cases\nprint(perm_coeff(1, 4, 1))\nprint(perm_coeff(1, 4, 2))\nprint(perm_coeff(1, 4, 3))\nprint(perm_coeff(1, 4, 4))\nprint(perm_coeff(2, 4, 1))\nprint(perm_coeff(2, 4, 2))\nprint(perm_coeff(2, 4, 3))\nprint(perm_coeff(2, 4, 4))\nprint(perm_coeff(3, 4, 1))\nprint(perm_coeff(3, 4, 2))\nprint(perm_coeff(3, 4, 3))\nprint(perm_coeff(3, 4, 4))\nprint(perm_coeff(4, 4, 1))\nprint(perm_coeff(4, 4, 2))\nprint(perm_coeff(4, 4, 3))\nprint(perm_coeff(4, 4, 4))",
    "from math import factorial\n\n\ndef p(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n\n    p(n, k) is the number of permutations that can be formed by choosing k\n    elements from a set of size n. For example, if k = 2 and n = 7, there are\n    8 possible permutations of size 7.\n\n    Example 1:\n    Input: n = 7, k = 2\n    Output: 3\n    Explanation:\n    There are 3 possible permutations of size 7.\n    Example 2:\n    Input: n = 7, k = 3\n    Output: 10\n    Explanation:\n    There are 10 possible permutations of size 7.\n\n    Constraints:\n    1 <= n <= 10^5\n    0 <= k <= n\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    assert p(7, 2) == 3\n    assert p(7, 3) == 10",
    "from collections import Counter\n\ndef perm_coeff(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n\n    For example, given n = 3 and k = 2, return 2.\n    \"\"\"\n    if n == 1 or k == 1:\n        return 1\n\n    coeff = 1\n    for i in range(k):\n        coeff *= n - i\n        coeff /= i + 1\n\n    return coeff\n\nif __name__ == \"__main__\":\n    print perm_coeff(3, 2)",
    "def perm_coeff(p, n, k):\n    \"\"\"\n    For example, if p(n, k) = 3/5, return 3.\n    \"\"\"\n    return p(n, k)\n\n# Your perm_coeff function should accept four parameters:\n# p: a function that accepts two parameters (n, k) and returns a float\n# n: an integer (k > 0)\n# k: an integer (k > 0)\n# Return the permutation coefficient of p(n, k).",
    "def perm_coeff(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k % 2 == 0:\n        return perm_coeff(n, k / 2) * perm_coeff(n - 1, k / 2)\n    else:\n        return perm_coeff(n, k / 2) * perm_coeff(n - 1, k / 2) * \\\n               perm_coeff(n - 2, k / 2)\n\n\n# Your code here\n\ndef test_perm_coeff():\n    assert perm_coeff(0, 0) == 1\n    assert perm_coeff(1, 0) == 1\n    assert perm_coeff(1, 1) == 1\n    assert perm_coeff(1, 2) == 1\n    assert perm_coeff(2, 2) == 1\n    assert perm_coeff(2, 3) == 1\n    assert perm_coeff(3, 3) == 1\n    assert perm_coeff(4, 3) == 3\n    assert perm_coeff(5, 3) == 15\n    assert perm_coeff(6, 3) == 105\n    assert perm_coeff(7, 3) == 729\n    assert perm_coeff(8, 3) == 2857\n    assert perm_coeff(9, 3) == 9561\n    assert perm_coeff(10, 3) == 56119\n    assert perm_coeff(11, 3) == 172877\n    assert perm_coeff(12, 3) == 142857\n    assert perm_coeff(13, 3) == 945361\n    assert perm_coeff(14, 3) == 5621359\n    assert perm_coeff(15, 3) == 28571359\n    assert perm_coeff(16, 3) == 9561123\n    assert perm_coeff(17, 3) == 56119123\n    assert perm_coeff(18, 3) == 172877123\n    assert perm_coeff(19, 3) == 142857123",
    "import math\n\ndef get_permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\nif __name__ == \"__main__\":\n    print(get_permutation_coefficient(4, 2))\n    print(get_permutation_coefficient(3, 2))",
    "# Definition for permutation coefficient.\nclass PermutationCoefficient(object):\n    def __init__(self, n, k):\n        \"\"\"\n        Initialize your data structure here.\n        :type n: int\n        :type k: int\n        \"\"\"\n        self.n = n\n        self.k = k\n        self.cache = [[0] * (k + 1) for i in range(n + 1)]\n        self.cache[0][0] = 1\n        for i in range(1, self.n + 1):\n            self.cache[i][0] = 1\n            self.cache[i][1] = 1\n\n        for i in range(2, self.n + 1):\n            for j in range(1, k + 1):\n                self.cache[i][j] = self.cache[i][j - 1] + self.cache[i - 1][j]\n\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.cache[n][k]\n\n\n# Your PermutationCoefficient object will be instantiated and called as such:\n# obj = PermutationCoefficient(n, k)\n# param_1 = obj.getPermutationCoefficient(n, k)",
    "import math\n\ndef permutation_coefficient(n, k):\n    if n == 1:\n        return 1\n    else:\n        return 1 + math.floor(math.log(n) / math.log(k))\n\ndef test():\n    assert(permutation_coefficient(1, 2) == 1)\n    assert(permutation_coefficient(2, 3) == 3)\n    assert(permutation_coefficient(3, 4) == 9)\n    assert(permutation_coefficient(4, 5) == 25)\n    assert(permutation_coefficient(5, 6) == 125)\n    assert(permutation_coefficient(6, 7) == 216)\n    assert(permutation_coefficient(7, 8) == 216)\n    assert(permutation_coefficient(8, 9) == 216)\n\nif __name__ == '__main__':\n    test()",
    "def pk_coeff(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of p(n, k)\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n*(n - 1)\n    if k % 2 == 0:\n        return n*(n - 1)*(n - 2)\n    else:\n        return n*(n - 1)*(n - 2)*(n - 3)\n\nif __name__ == \"__main__\":\n    print(pk_coeff(4, 1))\n    print(pk_coeff(4, 2))\n    print(pk_coeff(4, 3))\n    print(pk_coeff(4, 4))\n    print(pk_coeff(4, 5))",
    "# https://oj.leetcode.com/problems/permutation-coefficient/\n# Given a positive integer n, return the permutation coefficient of n\n# (the ratio of the number of permutations of n to the total number of\n# permutations).\n# \n# For example, if n = 13,\n# \n# \n# \n# return 3 since there are 3 ways to arrange the digits 1, 2, and 3: 1, 2, 3, 1, 2, 3, or 1, 3, 2, 1, 2, and 3.\n# \n# Note: n is guaranteed to be less than 231 - 1.\n\nclass Solution(object):\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < 1 or k < 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n        ans = 0\n        for i in range(n):\n            ans *= factorial(n - i)\n            ans //= factorial(i + k)\n        return ans\n\n    def factorial(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        ans = 1\n        for i in range(1, n + 1):\n            ans *= i\n        return ans\n\nif __name__ == \"__main__\":\n    assert Solution().getPermutationCoefficient(2, 3) == 6",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k % 2 == 0:\n        return n * (n - 1) / 2 * (k / 2 - 1)\n    else:\n        return n * (n - 1) / 2 * (k - 1) * (k - 2) / 2\n\n\nif __name__ == '__main__':\n    print permutation_coefficient(10, 2)",
    "import time\n\ndef p(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 4\n    if n == 7:\n        return 8\n    if n == 8:\n        return 16\n    if n == 9:\n        return 32\n    if n == 10:\n        return 64\n    if n == 11:\n        return 128\n    if n == 12:\n        return 256\n    if n == 13:\n        return 512\n    if n == 14:\n        return 1024\n    if n == 15:\n        return 2048\n    if n == 16:\n        return 4096\n    if n == 17:\n        return 8192\n    if n == 18:\n        return 16384\n    if n == 19:\n        return 32768\n    if n == 20:\n        return 65536\n    if n == 21:\n        return 131072\n    if n == 22:\n        return 262144\n    if n == 23:\n        return 524288\n    if n == 24:\n        return 1048576\n    if n == 25:\n        return 2097152\n    if n == 26:\n        return 4194304\n    if n == 27:\n        return 8388608\n    if n == 28:\n        return 16777216\n    if n == 29:\n        return 33554432\n    if n == 30:\n        return 67108864\n    if n == 31:\n        return 134217728\n    if n == 32:\n        return 268435456\n    if n == 33:\n        return 536870912\n    if n == 34:\n        return 1073741824\n    if n == 35:\n        return 2147483648\n    if n == 36:\n        return 4294967296\n    if n == 37:\n        return 8589934592\n    if n == 38:\n        return 17179869184\n    if n == 39:\n        return 34359738368\n    if n == 40:\n        return 6871947",
    "import math\nimport random\nimport sys\n\ndef perm_coeff(p, k):\n    \"\"\"\n    Return the permutation coefficient of p(n, k).\n    \"\"\"\n    if not k:\n        return 1\n    if k == 1:\n        return p\n    if k % 2 == 0:\n        return p * perm_coeff(p, k / 2)\n    else:\n        return p * perm_coeff(p, k / 2) * perm_coeff(p, k / 2 + 1)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <number of trials>\".format(sys.argv[0]))\n        sys.exit(0)\n\n    for _ in range(int(sys.argv[1])):\n        print(random.randint(1, 100))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a permutation of a sequence.\nclass Permutation(object):\n    def __init__(self, elements):\n        \"\"\"\n        :type elements: List[int]\n        \"\"\"\n        self.elements = elements\n\n    def __str__(self):\n        return ''.join(map(str, self.elements))\n\n    def __repr__(self):\n        return str(self)\n\n    def __eq__(self, other):\n        return self.elements == other.elements\n\n    def __hash__(self):\n        return hash(self.elements)\n\n    def __len__(self):\n        return len(self.elements)\n\n    def __getitem__(self, key):\n        return self.elements[key]\n\ndef get_permutation_coefficient(p, n, k):\n    \"\"\"\n    :type p: Permutation\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if p[n - 1] < k:\n        return 0\n    if p[n - 1] == k:\n        return 1\n    return get_permutation_coefficient(p, n - 1, k - p[n - 1]) + get_permutation_coefficient(p, n - 1, k)\n\n# Your Permutation object will be instantiated and called as such:\n# obj = Permutation(elements)\n# param_1 = obj.elements\n# param_2 = obj.__len__()\n# param_3 = obj.__str__()\n# param_4 = obj.__repr__()\n# param_5 = obj.__eq__(p)\n# param_6 = obj.__hash__()\n# param_7 = obj.__getitem__(key)",
    "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def getPermutationCoefficient(self, n, k):\n        # write your code here\n        if n <= k:\n            return 1\n        else:\n            return (n-k+1)*self.getPermutationCoefficient(n-k, k)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getPermutationCoefficient(4, 2))\n    print(sol.getPermutationCoefficient(7, 2))\n    print(sol.getPermutationCoefficient(7, 3))",
    "# https://en.wikipedia.org/wiki/Permutation_coefficient\n\n# Recurrence relation\n# n! / (n - k)! * (n - k)!\n# n! = n! * (n - k)! * (n - k - 1)! * (n - k - 2!) *... * (n - k + 1)\n# n! = n! * (n - k) * (n - k - 1) *... * (n - k + 1)\n# n! = n * (n - 1) * (n - 2) *... * 1\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (n - k)! = n * (n - 1) * (n - 2) *... * 1 / (n - k)!\n# n! / (",
    "def get_permutation_coefficient(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n\n    Input:\n    n = integer, number of elements\n    k = integer, number of permutations\n\n    Output:\n    The permutation coefficient of p(n, k)\n    \"\"\"\n\n    def permutation_coefficient(n, k):\n        \"\"\"\n        Write a function to calculate the permutation coefficient of given p(n, k).\n\n        Input:\n        n = integer, number of elements\n        k = integer, number of permutations\n\n        Output:\n        The permutation coefficient of p(n, k)\n        \"\"\"\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return n * permutation_coefficient(n - 1, k - 1)\n\n    return permutation_coefficient(n, k)\n\nif __name__ == '__main__':\n    print(get_permutation_coefficient(1, 0))\n    print(get_permutation_coefficient(2, 2))\n    print(get_permutation_coefficient(5, 2))\n    print(get_permutation_coefficient(5, 3))\n    print(get_permutation_coefficient(5, 4))\n    print(get_permutation_coefficient(5, 5))\n    print(get_permutation_coefficient(5, 6))\n    print(get_permutation_coefficient(5, 7))\n    print(get_permutation_coefficient(5, 8))\n    print(get_permutation_coefficient(5, 9))",
    "class Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: An integer\n    \"\"\"\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k > n:\n            return 0\n        \n        return n * (n - 1) * (n - 2) / 6",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n\n    Permutation coefficient of p(n, k) = (p(n-1, k) + p(n-2, k)) / 2\n\n    Example 1:\n\n    Input: n = 3, k = 2\n    Output: 1\n\n    Example 2:\n\n    Input: n = 3, k = 3\n    Output: 1\n\n    Example 3:\n\n    Input: n = 4, k = 2\n    Output: 2\n\n    Example 4:\n\n    Input: n = 4, k = 3\n    Output: 3\n\n    Constraints:\n\n    1 <= n <= 10^4\n    1 <= k <= 10^4\n    \"\"\"\n\n    # calculate the permutation coefficient of p(n, k)\n    if n == 1:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return (permutation_coefficient(n - 1, k) + permutation_coefficient(n - 2, k)) / 2\n\nif __name__ == \"__main__\":\n    print permutation_coefficient(3, 2)\n    print permutation_coefficient(3, 3)\n    print permutation_coefficient(4, 2)\n    print permutation_coefficient(4, 3)",
    "import numpy as np\n\ndef p_coef(n, k):\n    \"\"\"\n    :param n: The integer\n    :param k: The integer\n    :return: The permutation coefficient\n    \"\"\"\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if n == 2:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 1\n    if k == 4:\n        return 1\n    if k == 5:\n        return 1\n    if k == 6:\n        return 1\n    if k == 7:\n        return 1\n    if k == 8:\n        return 1\n    if k == 9:\n        return 1\n    if k == 10:\n        return 1\n    if k == 11:\n        return 1\n    if k == 12:\n        return 1\n    if k == 13:\n        return 1\n    if k == 14:\n        return 1\n    if k == 15:\n        return 1\n    if k == 16:\n        return 1\n    if k == 17:\n        return 1\n    if k == 18:\n        return 1\n    if k == 19:\n        return 1\n    if k == 20:\n        return 1\n    if k == 21:\n        return 1\n    if k == 22:\n        return 1\n    if k == 23:\n        return 1\n    if k == 24:\n        return 1\n    if k == 25:\n        return 1\n    if k == 26:\n        return 1\n    if k == 27:\n        return 1\n    if k == 28:\n        return 1\n    if k == 29:\n        return 1\n    if k == 30:\n        return 1\n    if k == 31:\n        return 1\n    if k == 32:\n        return 1\n    if k == 33:\n        return 1\n    if k == 34:\n        return 1\n    if k == 35:\n        return 1\n    if k == 36:\n        return 1\n    if k == 37:\n        return 1\n    if k == 38:\n        return 1\n    if k == 39:\n        return 1",
    "from utils import *\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return n\n    if k > n:\n        return 0\n    if k % 2:\n        return permutation_coefficient(n - 1, k - 1)\n    else:\n        return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k - 2)\n\n\nif __name__ == \"__main__\":\n    print permutation_coefficient(10, 5)\n    print permutation_coefficient(100, 10)\n    print permutation_coefficient(100, 50)",
    "from math import factorial\n\ndef permutation_coefficient(p, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    :param p: An integer.\n    :param k: An integer.\n    :return: A float.\n    \"\"\"\n    return factorial(p) / factorial(k) / factorial(p - k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient(10, 4))\n    print(permutation_coefficient(100, 50))",
    "class Solution(object):\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == k:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = (dp[i - 1] * i) % (n - i + 1)\n        return dp[k]",
    "class Solution:\n    \"\"\"\n    @param n: an integer\n    @param k: an integer\n    @return: a float\n    \"\"\"\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        http://www.cnblogs.com/zuoyuan/p/3798984.html\n        \"\"\"\n        return (float(k) / (n - k + 1)) * (k / (n - k + 1))\n\nif __name__ == '__main__':\n    assert Solution().permutationCoefficient(2, 2) == 0.5",
    "def p(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    #return 1 if n == k else 0\n    return 0 if n == k else 0\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert p(3, 1) == 1, \"Case 1\"\n    assert p(3, 2) == 0, \"Case 2\"\n    assert p(3, 3) == 0, \"Case 3\"\n    assert p(3, 4) == 0, \"Case 4\"\n    assert p(4, 1) == 0, \"Case 5\"\n    assert p(4, 2) == 0, \"Case 6\"\n    assert p(4, 3) == 0, \"Case 7\"\n    assert p(4, 4) == 1, \"Case 8\"\n    assert p(4, 5) == 0, \"Case 9\"\n    assert p(5, 1) == 0, \"Case 10\"\n    assert p(5, 2) == 1, \"Case 11\"\n    assert p(5, 3) == 0, \"Case 12\"\n    assert p(5, 4) == 1, \"Case 13\"\n    assert p(5, 5) == 0, \"Case 14\"\n    assert p(5, 6) == 0, \"Case 15\"\n    assert p(6, 1) == 0, \"Case 16\"\n    assert p(6, 2) == 0, \"Case 17\"\n    assert p(6, 3) == 0, \"Case 18\"\n    assert p(6, 4) == 0, \"Case 19\"\n    assert p(6, 5) == 0, \"Case 20\"\n    assert p(6, 6) == 1, \"Case 21\"",
    "# A permutation coefficient is the number of ways to arrange the elements of a\n# permutation. The number of ways to arrange a permutation of n elements is\n# given by the following formula:\n#\n# P(n, k) = n! / (n - k)! k! / (k! * (n - k)!).\n#\n# For example, P(5, 1) = 10.\n#\n# For example, P(2, 2) = 1.\n#\n# Write a function that takes k and n as input and returns the permutation\n# coefficient.\n\ndef permutation_coefficient(k, n):\n    return int(n! / (n - k)! * k! / (k! * (n - k)!))\n\nif __name__ == '__main__':\n    print(permutation_coefficient(1, 1))\n    print(permutation_coefficient(2, 2))\n    print(permutation_coefficient(2, 3))\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(3, 3))\n    print(permutation_coefficient(4, 3))\n    print(permutation_coefficient(5, 1))\n    print(permutation_coefficient(5, 2))\n    print(permutation_coefficient(5, 3))\n    print(permutation_coefficient(5, 4))\n    print(permutation_coefficient(5, 5))\n    print(permutation_coefficient(6, 2))\n    print(permutation_coefficient(6, 3))\n    print(permutation_coefficient(6, 4))\n    print(permutation_coefficient(6, 5))\n    print(permutation_coefficient(6, 6))",
    "import numpy as np\n\n\ndef pnck(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    :param n: number of elements\n    :param k: number of elements to be chosen\n    :return: permutation coefficient\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 1 - (k * pnck(n - 1, k) + pnck(n - 1, k - 1)) / k\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    k = int(input())\n    print(pnck(n, k))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n < k:\n        return 0\n    p = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        p[i] = (i*(i-1))//2\n    return p[k]\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(2, 1) == 1\n    assert permutation_coefficient(3, 1) == 1\n    assert permutation_coefficient(3, 2) == 3\n    assert permutation_coefficient(3, 3) == 6\n    assert permutation_coefficient(3, 4) == 3\n    assert permutation_coefficient(4, 1) == 1\n    assert permutation_coefficient(5, 1) == 1\n    assert permutation_coefficient(6, 1) == 1\n    assert permutation_coefficient(6, 2) == 3\n    assert permutation_coefficient(6, 3) == 3\n    assert permutation_coefficient(6, 4) == 6\n    assert permutation_coefficient(6, 5) == 3\n    assert permutation_coefficient(6, 6) == 6\n    assert permutation_coefficient(6, 7) == 3\n    assert permutation_coefficient(6, 8) == 6\n    assert permutation_coefficient(6, 9) == 6\n    assert permutation_coefficient(6, 10) == 6\n    assert permutation_coefficient(6, 11) == 3\n    assert permutation_coefficient(6, 12) == 6\n    assert permutation_coefficient(6, 13) == 6\n    assert permutation_coefficient(6, 14) == 6\n    assert permutation_coefficient(6, 15) == 6\n    assert permutation_coefficient(6, 16) == 6\n    assert permutation_coefficient(6, 17) == 6\n    assert permutation_coefficient(6, 18) == 6\n    assert permutation_coefficient(6, 19) == 6\n    assert permutation_coefficient",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_p_coeff(self, n, k):\n        \"\"\"\n        :param n: integer\n        :param k: integer\n        :return: integer\n        \"\"\"\n        if n == k:\n            return 1\n        if n < k:\n            return 0\n        if k == 1:\n            return 1\n\n        if n / k == 1:\n            return 1\n\n        if k == 2:\n            return 1\n        if n % k == 0:\n            return 1\n\n        if k == 3:\n            return 1\n\n        if n % k == 0:\n            return 1\n        if k == 4:\n            return 1\n\n        if k == 5:\n            return 1\n\n        if k == 6:\n            return 1\n\n        if k == 7:\n            return 1\n\n        if k == 8:\n            return 1\n\n        if k == 9:\n            return 1\n\n        if k == 10:\n            return 1\n\n        return 0\n\n\nif __name__ == \"__main__\":\n    print Solution().get_p_coeff(10, 4)",
    "class PermutationCoefficient(object):\n    \"\"\"\n    Permutation coefficient.\n    \"\"\"\n    def __init__(self, n):\n        self.n = n\n        self.p_coefficient = 0.0\n        self.factorial_n = self.factorial(n)\n        self.factorial_k = self.factorial(k)\n\n    def factorial(self, n):\n        \"\"\"\n        Calculate factorial of n.\n        \"\"\"\n        if n == 0:\n            return 1\n        return reduce(lambda x, y: x * y, range(1, n + 1), 1)\n\n    def get_p_coefficient(self):\n        \"\"\"\n        Calculate the permutation coefficient.\n        \"\"\"\n        for k in range(1, self.n):\n            if self.factorial_k == self.factorial_n:\n                self.p_coefficient += 1.0\n            else:\n                self.p_coefficient += self.factorial_k / self.factorial_n\n\n        return self.p_coefficient\n\n\nif __name__ == \"__main__\":\n    p = PermutationCoefficient(2)\n    print(p.get_p_coefficient())",
    "import time\n\n\nclass Solution:\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        result = 1\n        for i in range(1, n):\n            result *= i\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                result /= j\n        for i in range(1, n):\n            for j in range(i +",
    "# Definition for a permutation.\n# class Permutation(object):\n#     def __init__(self, items):\n#         self.items = items\n\nclass Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        if k == 1:\n            return n\n        if k == 0:\n            return 1\n        return self.permutationCoefficient(n - 1, k - 1) * n / self.permutationCoefficient(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(Solution().permutationCoefficient(5, 3))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        permutation coefficient\n        :param n: number of people\n        :param k: number of couples\n        :return: permutation coefficient\n        \"\"\"\n        if k == 1:\n            return n - 1\n        elif k == 2:\n            return 2 * n * (n - 1) / 2\n        elif k == 3:\n            return 2 * n * (n - 1) * (n - 2) / 6\n        elif k == 4:\n            return n * (n - 1) * (n - 2) * (n - 3) / 24\n        else:\n            return 1\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 7):\n        for k in range(1, 7):\n            print n, k, Solution().permutationCoefficient(n, k)",
    "from collections import Counter\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n*(n-1)//2\n    if k == 3:\n        return n*(n-1)*(n-2)//6\n    if k == 4:\n        return n*(n-1)*(n-2)*(n-3)//24\n    if k == 5:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)//120\n    return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)//(120*n)\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 1) == 1\n    assert permutation_coefficient(10, 2) == 10\n    assert permutation_coefficient(10, 3) == 10\n    assert permutation_coefficient(10, 4) == 10\n    assert permutation_coefficient(10, 5) == 10\n    assert permutation_coefficient(10, 6) == 1\n    assert permutation_coefficient(10, 7) == 1\n    assert permutation_coefficient(10, 8) == 10\n    assert permutation_coefficient(10, 9) == 10\n    assert permutation_coefficient(10, 10) == 1\n    assert permutation_coefficient(10, 11) == 1\n\n\nif __name__ == '__main__':\n    test_permutation_coefficient()",
    "# Definition for a permutation\nclass Permutation:\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in xrange(1, n + 1):\n            dp[i] = dp[i - 1]\n            for j in xrange(i, n + 1):\n                dp[j] += dp[j - i]\n            if dp[i] == k:\n                return i\n        return 0",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k % 2 == 0:\n        return permutation_coefficient(n, k / 2) * permutation_coefficient(n, k / 2)\n    return permutation_coefficient(n, k - 1) * permutation_coefficient(n - 1, k - 1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(permutation_coefficient(n, k))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a permutation.\n# class Permutation:\n#     def __init__(self, n):\n#         self.n = n\n#         self.c = [0] * n\n#     def __str__(self):\n#         return '(' + str(self.n) + ')'+ str(self.c)\n# \n#     def __repr__(self):\n#         return 'Permutation(' + str(self.n) + ')'\n# \n#     def __eq__(self, other):\n#         return self.n == other.n and self.c == other.c\n# \n#     def __hash__(self):\n#         return hash(self.n) ^ hash(self.c)\n# \n# \n# p = Permutation(3)\n# \n# def calculatePermutationCoefficient(p, k):\n#     if k < p.n:\n#         return p.c[k]\n#     else:\n#         return 0\n\nclass Solution:\n    # @param p, a permutation\n    # @param k, a positive integer\n    # @return an integer\n    def getPermutationCoefficient(self, p, k):\n        return 1",
    "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def getPermutationCoefficient(self, n, k):\n        if k == 1:\n            return 1\n        if n == 1:\n            return 1\n        if k == 2:\n            return n\n        if k == 3:\n            return n * (n - 1) / 2\n        if k % 2 == 0:\n            return self.getPermutationCoefficient(n, k / 2) * self.getPermutationCoefficient(n, k / 2)\n        else:\n            return self.getPermutationCoefficient(n, k / 2) * self.getPermutationCoefficient(n, k / 2) * self.getPermutationCoefficient(n - 1, k - 1)\n\nif __name__ == '__main__':\n    print(Solution().getPermutationCoefficient(4, 2))",
    "import sys\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # n is the number of elements in the set\n    # k is the number of permutations to be done\n    # calculate the factorial of n\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial / (factorial - k)\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    k = int(sys.argv[2])\n    print permutation_coefficient(n, k)",
    "import math\n\ndef perm_coeff(n, k):\n    if n <= k:\n        return 1\n    if k == 1:\n        return n\n    p = perm_coeff(n, k - 1)\n    for i in range(k, n + 1):\n        p *= n - i + 1\n        p /= i + 1\n    return p\n\ndef main():\n    print(perm_coeff(20, 2))\n\nif __name__ == '__main__':\n    main()",
    "from math import factorial\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    else:\n        return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nif __name__ == '__main__':\n    print permutation_coefficient(100, 50)",
    "import math\n\ndef p_coefficient(n, k):\n    # write your code here\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\nif __name__ == '__main__':\n    print p_coefficient(5, 2)\n    print p_coefficient(3, 3)\n    print p_coefficient(7, 3)\n    print p_coefficient(5, 5)",
    "def perm_coeff(p, n, k):\n    \"\"\"\n    p(n, k) = p(k, n) / p(n, n)\n    \"\"\"\n    if n == k:\n        return 1\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return p(n, n)\n    else:\n        return p(n, n) / p(n, k)\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    test_cases = [\n        ([3, 4, 5], 2, 1),\n        ([1, 1, 1, 1], 1, 2),\n        ([1, 2, 3, 4, 5], 2, 4)\n    ]\n    for test_case in test_cases:\n        n, k, expected = test_case\n        result = perm_coeff(n, k)\n        if result!= expected:\n            print \"Error for n = %d, k = %d\" % (n, k)\n            print \"Expected: %d\" % expected\n            print \"Actual: %d\" % result\n\nif __name__ == '__main__':\n    main()",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    Input: n is the number of people, k is the number of people who are\n    friends with the first k people.\n    Output: the permutation coefficient of the given p(n, k).\n    \"\"\"\n    return (n * (n - 1)) / 2\n\nif __name__ == '__main__':\n    print(permutation_coefficient(5, 2))",
    "# Definition for a permutation of a group of size n.\n# class Permutation(object):\n#     def __init__(self, elements):\n#         self.elements = elements\n#         self.size = len(elements)\n#\n#     def __getitem__(self, index):\n#         return self.elements[index % self.size]\n#\n#     def __str__(self):\n#         return ''.join(str(e) for e in self.elements)\n#\n#     def __repr__(self):\n#         return 'Permutation(' + ', '.join(repr(e) for e in self.elements) + ')'\n#\n#     def __eq__(self, other):\n#         if isinstance(other, Permutation):\n#             return self.elements == other.elements\n#         else:\n#             return False\n#\n#     def __hash__(self):\n#         return hash(str(self))\n#\n#     def __lt__(self, other):\n#         if isinstance(other, Permutation):\n#             return self.elements < other.elements\n#         else:\n#             return False\n#\n#     def __le__(self, other):\n#         if isinstance(other, Permutation):\n#             return self.elements <= other.elements\n#         else:\n#             return False\n#\n#     def __gt__(self, other):\n#         if isinstance(other, Permutation):\n#             return self.elements > other.elements\n#         else:\n#             return False\n#\n#     def __ge__(self, other):\n#         if isinstance(other, Permutation):\n#             return self.elements >= other.elements\n#         else:\n#             return False\n#\n#     def __mul__(self, other):\n#         if isinstance(other, Permutation):\n#             return Permutation([e * other.elements[i] for e, i in zip(self.elements, range(self.size))])\n#         else:\n#             return Permutation([])",
    "class Solution:\n    def getPermutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        if k == 1:\n            return n\n        if k > n:\n            return 0\n        # k > n\n        result = 1\n        for i in range(1, k):\n            result *= n - i\n            result /= i\n        return result",
    "import time\nimport math\n\n# @include\ndef permutation_coefficient(p, n, k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return p[n - 1]\n    if k % 2 == 1:\n        return p[n - 1] / (p[n - 2] * (n - 1))\n    else:\n        return p[n - 1] / (p[n - 2] * (n - 1)) * (p[n - 2] * (n - 1))\n\n\n# @exclude\nclass Solution:\n    # @include\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(cipher)\n        k = len(cipher[0])\n        p = [1] * n\n        for i in range(n):\n            p[i] = 1\n        for i in range(1, k):\n            for j in range(n):\n                p[j] = p[j] * (n - j) / (n - k + 1)\n            for j in range(n):\n                p[j] = p[j] * (n - j) / (n - k + 1)\n        return sum(p)\n    # @exclude\n\nif __name__ == '__main__':\n    t = Solution().solve\n    for i in range(1, 7):\n        print(t(i))\n    assert t(1) == 1\n    assert t(2) == 2\n    assert t(3) == 1\n    assert t(4) == 2\n    assert t(5) == 2\n    assert t(6) == 3\n    assert t(7) == 1\n    assert t(8) == 2\n    assert t(9) == 2\n    assert t(10) == 3\n    assert t(11) == 1\n    assert t(12) == 2\n    assert t(13) == 2\n    assert t(14) == 3\n    assert t(15) == 1\n    assert t(16) == 2\n    assert t(17) == 2\n    assert t(18) == 3",
    "def p(n, k):\n    \"\"\"\n    Write a function p(n, k) which takes an integer n and\n    an integer k as input and returns the permutation coefficient\n    of the given n(n+1)/2 permutation.\n    \"\"\"\n    if n == 0:\n        return 1\n    if k == 1:\n        return 2\n    if n == 1:\n        return 0\n    if k == 2:\n        return 1\n    if n % 2 == 0:\n        return (n/2)*(p(n-1, k-1) + p(n-1, k))\n    else:\n        return p(n-1, k-1) + p(n-1, k)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(p(5, 2))\n\nif __name__ == '__main__':\n    main()",
    "import unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(2, 3), 6)\n        self.assertEqual(solution(3, 3), 0)\n        self.assertEqual(solution(5, 1), -1)\n        self.assertEqual(solution(1, 1), 1)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return 1\n        if k == 2:\n            return n - 1\n        if k % 2 == 1:\n            return n * self.permutationCoefficient(n, k - 1)\n        return self.permutationCoefficient(n - 1, k - 1) + self.permutationCoefficient(n - 1, k - 2)\n\n\nif __name__ == \"__main__\":\n    n = 5\n    k = 2\n    print(Solution().permutationCoefficient(n, k))",
    "from itertools import permutations\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculates the permutation coefficient of given p(n, k).\n    :param n: number of elements in the set\n    :param k: number of permutations\n    :return: the permutation coefficient\n    \"\"\"\n    return len(permutations(range(n), k)) / (k * (k - 1) / 2)\n\ndef main():\n    \"\"\"\n    Main function.\n    :return: None\n    \"\"\"\n    print(permutation_coefficient(10, 2))\n\nif __name__ == \"__main__\":\n    main()",
    "import unittest\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Returns the permutation coefficient of p(n, k).\n\n    p(n, k) = (n - 1)! / ((n - k)! * k!)\n    \"\"\"\n\n    n, k = int(n), int(k)\n    if n < k:\n        return 0\n    return (n - 1) ** (n - k) / (k ** (n - k))\n\nclass TestPermutationCoefficient(unittest.TestCase):\n    def test_permutation_coefficient(self):\n        self.assertEqual(permutation_coefficient(4, 2), 2)\n        self.assertEqual(permutation_coefficient(5, 2), 1)\n        self.assertEqual(permutation_coefficient(6, 2), 2)\n        self.assertEqual(permutation_coefficient(7, 2), 4)\n        self.assertEqual(permutation_coefficient(8, 2), 8)\n\nif __name__ == '__main__':\n    unittest.main()",
    "def pnk(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    return n**(k-1) / k**(n-k)\n\n# Your PermutationCoefficient object will be instantiated and called as such:\n# obj = PermutationCoefficient(n,k)\n# param_1 = obj.pnk(n, k)",
    "def get_permutation_coefficient(n, k):\n    \"\"\"\n    Input: n is the number of objects, k is the number of permutations.\n    Output: the permutation coefficient.\n    \"\"\"\n    return n * (n - 1) * (n - 2) * (n - 3) / 6\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    k = int(input())\n    result = get_permutation_coefficient(n, k)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
    "class PermutationCoefficient:\n\n    def __init__(self):\n        self.n = 0\n        self.k = 0\n        self.p = 0\n\n    def solve(self, p):\n        self.n = p[0]\n        self.k = p[1]\n        self.p = p[2]\n        self.calculate()\n        return self.coefficient\n\n    def calculate(self):\n        if self.k > self.n / 2:\n            self.coefficient = (self.k - self.n) / 2\n        elif self.k == self.n / 2:\n            self.coefficient = self.k\n        else:\n            self.coefficient = 0\n\n\np = [int(x) for x in input().split()]\n\np = PermutationCoefficient()\np.solve(p)\n\nprint(p.coefficient)",
    "import itertools\n\ndef get_permutation_coefficient(p, n, k):\n    \"\"\"\n    For given p(n, k) return the permutation coefficient.\n    \"\"\"\n    return sum(itertools.permutations(range(n)))/(p*(n-k))\n\ndef main():\n    \"\"\"\n    main() function.\n    \"\"\"\n    p = int(input())\n    n = int(input())\n    k = int(input())\n    coefficient = get_permutation_coefficient(p, n, k)\n    print(coefficient)\n\nif __name__ == \"__main__\":\n    main()",
    "import collections\n\nfrom.utils import memoize\n\n\n@memoize\ndef perm_coef(p, n, k):\n    \"\"\"\n    Calculate the permutation coefficient of p(n, k).\n    :param p: a permutation function\n    :param n: a positive integer\n    :param k: a positive integer\n    :return: the permutation coefficient of p(n, k)\n    \"\"\"\n    if k == 1:\n        return p(n)\n    elif k == 2:\n        return p(n) * p(n - 1)\n    elif k % 2 == 1:\n        return p(n) * p(n - 1) * p(n - 2)\n    else:\n        return p(n) * p(n - 1) * p(n - 2) * p(n - 3)\n\n\ndef test_perm_coef():\n    assert perm_coef(lambda x: x, 5, 2) == 4\n    assert perm_coef(lambda x: x, 5, 3) == 4\n    assert perm_coef(lambda x: x, 5, 4) == 4\n    assert perm_coef(lambda x: x, 5, 5) == 1\n\n\ndef test_perm_coef_2():\n    assert perm_coef(lambda x: x, 4, 2) == 4\n    assert perm_coef(lambda x: x, 4, 3) == 4\n    assert perm_coef(lambda x: x, 4, 4) == 1\n    assert perm_coef(lambda x: x, 4, 5) == 1\n\n\ndef test_perm_coef_3():\n    assert perm_coef(lambda x: x, 3, 2) == 4\n    assert perm_coef(lambda x: x, 3, 3) == 4\n    assert perm_coef(lambda x: x, 3, 4) == 4\n    assert perm_coef(lambda x: x, 3, 5) == 4\n\n\ndef test_perm_coef_4():\n    assert perm_coef(lambda x: x, 2, 2) == 1\n    assert perm_coef(lambda x: x, 2, 3) == 1\n    assert perm_",
    "def perm_coef(n, k):\n    \"\"\"\n    n: number of permutations\n    k: number of elements in the permutation\n    \"\"\"\n    return n**k - sum(n**i * (k - i) for i in range(k + 1))\n\n# Your code here\nprint perm_coef(8, 3)",
    "from collections import Counter\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    return float(k) / (n ** k)\n\ndef main():\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    print(permutation_coefficient(100, 1))\n\nif __name__ == '__main__':\n    main()",
    "# This is a python3 implementation of the following\n# https://github.com/aaktang/Codes/blob/master/permutation_coefficient.py\n# The algorithm is from https://en.wikipedia.org/wiki/Permutation_coefficient\n\n# This is a python3 implementation of the following\n# https://github.com/aaktang/Codes/blob/master/permutation_coefficient.py\n# The algorithm is from https://en.wikipedia.org/wiki/Permutation_coefficient\n\n# A permutation is a set of integers that is the same as the integers\n# in the set of integers but in a different order. For example, the\n# permutation {0, 1, 2} is equivalent to {2, 1, 0}.\n\n# Given the number of elements in the set, n, and an integer k, return the\n# permutation coefficient.\n\n# For example, if n = 3 and k = 2, return 2.\n\n# If n = 3 and k = 3, return 3.\n\n# If n = 3 and k = 4, return 4.\n\n# If n = 4 and k = 2, return 4.\n\n# If n = 4 and k = 3, return 6.\n\n# If n = 4 and k = 4, return 12.\n\n\ndef p(n, k):\n    if k == 0:\n        return 1\n    else:\n        return (p(n - 1, k - 1) * p(n - 1, k) * k) / (n * k * (n - k))\n\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(p(n, k))\n\n\nif __name__ == '__main__':\n    main()",
    "def permutation_coefficient(n, k):\n    if k < 0:\n        return 0\n    if k == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) / 6\n    if k == 4:\n        return n * (n - 1) * (n - 2) * (n - 3) / 24\n    if k == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n    if k == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n    if k == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) / 5040\n    if k == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 40320\n    if k == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) / 362880\n    if k > 9:\n        return 0\n    return 1\n\nif __name__ == '__main__':\n    print permutation_coefficient(5, 1)\n    print permutation_coefficient(5, 2)\n    print permutation_coefficient(5, 3)\n    print permutation_coefficient(5, 4)\n    print permutation_coefficient(5, 5)\n    print permutation_coefficient(5, 6)\n    print permutation_coefficient(5, 7)\n    print permutation_coefficient(5, 8)",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    Input: n and k are non-negative integers.\n    Output: the permutation coefficient of p(n, k).\n    \"\"\"\n\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k % 2 == 0:\n        return n * (n - 1) / 2\n    else:\n        return n * (n - 1) / 2 + n * (n - 1) / 2 * (k - 1)\n\n\nif __name__ == '__main__':\n    assert permutation_coefficient(5, 1) == 1\n    assert permutation_coefficient(5, 2) == 5\n    assert permutation_coefficient(5, 3) == 10\n    assert permutation_coefficient(5, 4) == 25\n    assert permutation_coefficient(5, 5) == 50\n    assert permutation_coefficient(5, 6) == 75\n    assert permutation_coefficient(5, 7) == 125\n    assert permutation_coefficient(5, 8) == 125\n    assert permutation_coefficient(5, 9) == 125\n    assert permutation_coefficient(5, 10) == 125\n    assert permutation_coefficient(5, 11) == 125\n    assert permutation_coefficient(5, 12) == 125\n    assert permutation_coefficient(5, 13) == 125\n    assert permutation_coefficient(5, 14) == 125\n    assert permutation_coefficient(5, 15) == 125\n    assert permutation_coefficient(5, 16) == 125\n    assert permutation_coefficient(5, 17) == 125\n    assert permutation_coefficient(5, 18) == 125\n    assert permutation_coefficient(5, 19) == 125\n    assert permutation_coefficient(5, 20) == 125\n    assert permutation_coefficient(5, 21) == 125\n    assert permutation_coefficient(5, 22) == 125\n    assert permutation_coefficient(5, 23) == 125\n    assert permutation_coefficient(5, 24) == 125\n    assert permutation_coefficient(5, 25) == 125",
    "import sys\n\nclass Solution(object):\n    def permutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return int(n * (n - 1) / 2) / k\n\nif __name__ == '__main__':\n    sol = Solution()\n    n = int(sys.stdin.readline())\n    k = int(sys.stdin.readline())\n    print sol.permutation(n, k)",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k % 2 == 0:\n        return n * permutation_coefficient(n, k / 2)\n    else:\n        return n * permutation_coefficient(n - 1, k / 2) + \\\n            permutation_coefficient(n - 1, k / 2 - 1)\n\nclass Solution:\n    def permutation_coefficient(self, n: int, k: int) -> int:\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        elif k % 2 == 0:\n            return n * self.permutation_coefficient(n, k / 2)\n        else:\n            return n * self.permutation_coefficient(n - 1, k / 2) + \\\n                self.permutation_coefficient(n - 1, k / 2 - 1)\n\nif __name__ == \"__main__\":\n    assert Solution().permutation_coefficient(5, 4) == 7\n    assert Solution().permutation_coefficient(2, 2) == 2\n    assert Solution().permutation_coefficient(3, 2) == 3\n    assert Solution().permutation_coefficient(3, 1) == 3\n    assert Solution().permutation_coefficient(3, 0) == 1\n    assert Solution().permutation_coefficient(3, 3) == 3\n    assert Solution().permutation_coefficient(3, 4) == 0\n    assert Solution().permutation_coefficient(3, 5) == 0\n    assert Solution().permutation_coefficient(5, 3) == 3\n    assert Solution().permutation_coefficient(5, 4) == 0\n    assert Solution().permutation_coefficient(5, 5) == 1",
    "import math\n\ndef p_coefficient(p, n, k):\n    \"\"\"\n    p(n, k) = n! / (n-k)! * (n-k)! * p(n-k, k)\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return p(n, k)\n    else:\n        return p(n, k) * p_coefficient(p, n - k, k - 1)\n\ndef main():\n    p_coefficient(lambda n, k: n, 2, 1)\n\nif __name__ == \"__main__\":\n    main()",
    "def permutation_coefficient(n, k):\n    \"\"\"\n    n is the number of people, k is the number of friends,\n    p(n, k) is the number of permutations of k people\n    into n people.\n    \"\"\"\n    return 1.0 * k * (k - 1) / n / (n - k)\n\ndef permutation_coefficient_2(n, k):\n    \"\"\"\n    n is the number of people, k is the number of friends,\n    p(n, k) is the number of permutations of k people\n    into n people.\n    \"\"\"\n    return 1.0 * k * (k - 1) * (k - 2) / n / (n - k)\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient_2(3, 2))\n    print(permutation_coefficient_2(4, 2))",
    "def perm_coef(p, n, k):\n    \"\"\"\n    :param p: permutation coefficient\n    :param n: number of elements\n    :param k: number of elements to be permuted\n    :return: the permutation coefficient\n    \"\"\"\n    # write your code here\n    if k == 1:\n        return 1\n    if k > n:\n        return 0\n    return (p ** k) / (factorial(n) ** k)\n\n\ndef factorial(n):\n    \"\"\"\n    :param n: number\n    :return: factorial(n)\n    \"\"\"\n    # write your code here\n    if n == 0:\n        return 1\n    return factorial(n - 1) * n\n\n\nif __name__ == \"__main__\":\n    assert perm_coef(1, 3, 1) == 1\n    assert perm_coef(1, 3, 2) == 0\n    assert perm_coef(1, 3, 3) == 1\n    assert perm_coef(2, 3, 1) == 0\n    assert perm_coef(2, 3, 2) == 1\n    assert perm_coef(2, 3, 3) == 1\n    assert perm_coef(3, 3, 1) == 1\n    assert perm_coef(3, 3, 2) == 1\n    assert perm_coef(3, 3, 3) == 1\n    assert perm_coef(4, 3, 1) == 0\n    assert perm_coef(4, 3, 2) == 1\n    assert perm_coef(4, 3, 3) == 1\n    assert perm_coef(5, 3, 1) == 0\n    assert perm_coef(5, 3, 2) == 1\n    assert perm_coef(5, 3, 3) == 1\n    assert perm_coef(6, 3, 1) == 0\n    assert perm_coef(6, 3, 2) == 1\n    assert perm_coef(6, 3, 3) == 1"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}