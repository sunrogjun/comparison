{
  "problem": {
    "task_id": "MBPP/248",
    "prompt": "Write a function to calculate the harmonic sum of n-1.",
    "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
    "test_list": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ],
    "challenge_test_list": [],
    "problem_id": 237
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def harmonic_sum(n):\n    return sum([n + 1 for _ in range(1, n + 1)])\n\nprint(harmonic_sum(10))",
    "class Solution:\n    # @return an integer\n    def harmonicSum(self, n):\n        return sum(n-1 for i in range(1, n))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.harmonicSum(2))\n    print(s.harmonicSum(3))\n    print(s.harmonicSum(4))\n    print(s.harmonicSum(5))\n    print(s.harmonicSum(6))\n    print(s.harmonicSum(7))\n    print(s.harmonicSum(8))\n    print(s.harmonicSum(9))\n    print(s.harmonicSum(10))",
    "from math import sqrt, pi\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n+1) * sqrt(3 * pi) / 2\n\ndef test(n):\n    print(harmonic_sum(n))\n\nif __name__ == '__main__':\n    test(1)\n    test(2)\n    test(3)\n    test(4)\n    test(5)\n    test(6)\n    test(7)\n    test(8)\n    test(9)\n    test(10)\n    test(11)\n    test(12)\n    test(13)\n    test(14)\n    test(15)\n    test(16)\n    test(17)\n    test(18)\n    test(19)\n    test(20)\n    test(21)\n    test(22)\n    test(23)\n    test(24)\n    test(25)\n    test(26)\n    test(27)\n    test(28)\n    test(29)\n    test(30)\n    test(31)\n    test(32)\n    test(33)\n    test(34)\n    test(35)\n    test(36)\n    test(37)\n    test(38)\n    test(39)\n    test(40)\n    test(41)\n    test(42)\n    test(43)\n    test(44)\n    test(45)\n    test(46)\n    test(47)\n    test(48)\n    test(49)\n    test(50)\n    test(51)\n    test(52)\n    test(53)\n    test(54)\n    test(55)\n    test(56)\n    test(57)\n    test(58)\n    test(59)\n    test(60)\n    test(61)\n    test(62)\n    test(63)\n    test(64)\n    test(65)\n    test(66)\n    test(67)\n    test(68)\n    test(69)\n    test(70)\n    test(71",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n\n    sum = 0\n    for i in xrange(2, n+1):\n        sum += i / (2 * i - 1)\n\n    return sum",
    "def harmonic_sum_of_n_minus_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    return sum(harmonic_sum_of_n_minus_1(n-1)) + n*(n-1)\n\nif __name__ == '__main__':\n    assert harmonic_sum_of_n_minus_1(1) == 1\n    assert harmonic_sum_of_n_minus_1(2) == 5\n    assert harmonic_sum_of_n_minus_1(3) == 15\n    assert harmonic_sum_of_n_minus_1(4) == 42\n    assert harmonic_sum_of_n_minus_1(5) == 105\n    assert harmonic_sum_of_n_minus_1(6) == 252\n    assert harmonic_sum_of_n_minus_1(7) == 630\n    assert harmonic_sum_of_n_minus_1(8) == 1620\n    assert harmonic_sum_of_n_minus_1(9) == 4320\n    assert harmonic_sum_of_n_minus_1(10) == 12600\n    assert harmonic_sum_of_n_minus_1(11) == 43200",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in range(n + 1)) / n\n\n# TESTS\nfor n, expected in [\n    (0, 0),\n    (1, 1),\n    (2, 3),\n    (3, 8),\n    (4, 27),\n    (5, 120),\n    (6, 720),\n    (7, 5040),\n    (8, 40320),\n    (9, 362880),\n    (10, 3628800),\n    (11, 39916800),\n    (12, 479001600),\n]:\n    assert harmonic_sum(n) == expected",
    "def harmonicSum(n):\n    if n == 0:\n        return 0\n\n    return sum(n-1) + n * harmonicSum(n-1)\n\nif __name__ == '__main__':\n    print(harmonicSum(1))\n    print(harmonicSum(2))\n    print(harmonicSum(3))\n    print(harmonicSum(4))\n    print(harmonicSum(5))\n    print(harmonicSum(6))\n    print(harmonicSum(7))\n    print(harmonicSum(8))\n    print(harmonicSum(9))\n    print(harmonicSum(10))\n    print(harmonicSum(11))\n    print(harmonicSum(12))\n    print(harmonicSum(13))\n    print(harmonicSum(14))\n    print(harmonicSum(15))\n    print(harmonicSum(16))\n    print(harmonicSum(17))\n    print(harmonicSum(18))\n    print(harmonicSum(19))\n    print(harmonicSum(20))\n    print(harmonicSum(21))\n    print(harmonicSum(22))\n    print(harmonicSum(23))\n    print(harmonicSum(24))\n    print(harmonicSum(25))\n    print(harmonicSum(26))\n    print(harmonicSum(27))\n    print(harmonicSum(28))\n    print(harmonicSum(29))\n    print(harmonicSum(30))\n    print(harmonicSum(31))\n    print(harmonicSum(32))\n    print(harmonicSum(33))\n    print(harmonicSum(34))\n    print(harmonicSum(35))\n    print(harmonicSum(36))\n    print(harmonicSum(37))\n    print(harmonicSum(38))\n    print(harmonicSum(39))\n    print(harmonicSum(40))\n    print(harmonicSum(41))\n    print(harmonicSum(42))\n    print(harmonicSum(43))\n    print(harmonicSum(44))\n    print(harmonicSum(45))\n    print(harmonicSum(46))\n    print",
    "import unittest\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nclass TestHarmonicSum(unittest.TestCase):\n    def test_harmonic_sum(self):\n        self.assertEqual(harmonic_sum(3), 6)\n        self.assertEqual(harmonic_sum(4), 12)\n        self.assertEqual(harmonic_sum(5), 21)\n        self.assertEqual(harmonic_sum(6), 36)\n        self.assertEqual(harmonic_sum(7), 57)\n        self.assertEqual(harmonic_sum(8), 84)\n        self.assertEqual(harmonic_sum(9), 117)\n        self.assertEqual(harmonic_sum(10), 154)\n        self.assertEqual(harmonic_sum(11), 213)\n        self.assertEqual(harmonic_sum(12), 268)\n        self.assertEqual(harmonic_sum(13), 346)\n        self.assertEqual(harmonic_sum(14), 429)\n        self.assertEqual(harmonic_sum(15), 536)\n        self.assertEqual(harmonic_sum(16), 668)\n        self.assertEqual(harmonic_sum(17), 828)\n        self.assertEqual(harmonic_sum(18), 996)\n        self.assertEqual(harmonic_sum(19), 1161)\n        self.assertEqual(harmonic_sum(20), 1344)\n        self.assertEqual(harmonic_sum(21), 1438)\n        self.assertEqual(harmonic_sum(22), 1543)\n        self.assertEqual(harmonic_sum(23), 1684)\n        self.assertEqual(harmonic_sum(24), 1792)\n        self.assertEqual(harmonic_sum(25), 1905)\n        self.assertEqual(harmonic_sum(26), 2162)\n        self",
    "from math import factorial\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(factorial(i) for i in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 105\n    assert harmonic_sum(5) == 210\n    assert harmonic_sum(6) == 363\n    assert harmonic_sum(7) == 729\n    assert harmonic_sum(8) == 1456\n    assert harmonic_sum(9) == 2979\n    assert harmonic_sum(10) == 6561\n    assert harmonic_sum(11) == 13095\n    assert harmonic_sum(12) == 25225\n    assert harmonic_sum(13) == 55295\n    assert harmonic_sum(14) == 109395\n    assert harmonic_sum(15) == 209365",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([n-1 for _ in range(n)])\n\nif __name__ == \"__main__\":\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 10\n    assert harmonic_sum(4) == 23\n    assert harmonic_sum(5) == 42",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(n * (n + 1) / 2 for n in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 1\n    assert harmonic_sum(3) == 5\n    assert harmonic_sum(4) == 18\n    assert harmonic_sum(5) == 58\n    assert harmonic_sum(6) == 336\n    assert harmonic_sum(7) == 792\n    assert harmonic_sum(8) == 4320\n    assert harmonic_sum(9) == 11840\n    assert harmonic_sum(10) == 63360",
    "# import the libraries\nimport math\nimport operator\nfrom functools import reduce\n\n\n# Calculate harmonic sum of n-1\ndef harmonic_sum_n_minus_1(n):\n    # Calculate the harmonic sum of n-1\n    return reduce(operator.add, map(lambda x: x * (n - 1), range(1, n)))\n\n\n# Test the function\nprint(harmonic_sum_n_minus_1(3))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n + 1) / 2\n\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def harmonicSum(self, n):\n        return self.harmonicSum2(n)\n\n    def harmonicSum2(self, n):\n        return sum(self.harmonicSum3(n))\n\n    def harmonicSum3(self, n):\n        if n == 0:\n            return 0\n        return self.harmonicSum3(n - 1) + self.harmonicSum2(n - 1)",
    "def harmonic_sum(n):\n    return sum(x**2 for x in range(1, n))\n\nprint(harmonic_sum(6))",
    "from math import sqrt\n\ndef harmonic_sum(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1.0\n    else:\n        return sum(n * harmonic_sum(i - 1) for i in range(2, n + 1))\n\nif __name__ == \"__main__\":\n    assert harmonic_sum(0) == 1\n    assert harmonic_sum(1) == 1.0\n    assert harmonic_sum(2) == 3.0\n    assert harmonic_sum(3) == 13.0\n    assert harmonic_sum(4) == 39.0\n    assert harmonic_sum(5) == 243.0\n    assert harmonic_sum(6) == 729.0\n    assert harmonic_sum(7) == 2187.0\n    assert harmonic_sum(8) == 8641.0\n    assert harmonic_sum(9) == 31823.0\n    assert harmonic_sum(10) == 114307.0\n    assert harmonic_sum(11) == 486729.0\n    assert harmonic_sum(12) == 2094369.0\n    assert harmonic_sum(13) == 8598601.0\n    assert harmonic_sum(14) == 348814695.0\n    assert harmonic_sum(15) == 1744867821.0\n    assert harmonic_sum(16) == 859860129.0\n    assert harmonic_sum(17) == 3488146963.0\n    assert harmonic_sum(18) == 17448678221.0\n    assert harmonic_sum(19) == 85986012929.0\n    assert harmonic_sum(20) == 348814696329.0\n    assert harmonic_sum(21) == 1744867822193.0\n    assert harmonic_sum(22) == 8598601292929.0\n    assert harmonic_sum(23) == 34881469632929.0",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (1 + n) / n * (",
    "#!/bin/python\n\n#\n# Calculate the harmonic sum of n-1.\n#\n#\n# Example 1:\n#\n# Input: n = 2\n# Output: 1\n# Explanation: n is 2, so the harmonic sum is 1.\n#\n#\n# Example 2:\n#\n# Input: n = 3\n# Output: 2\n# Explanation: n is 3, so the harmonic sum is 2.\n#\n#\n# Example 3:\n#\n# Input: n = 4\n# Output: 3\n# Explanation: n is 4, so the harmonic sum is 3.\n#\n#\n# Example 4:\n#\n# Input: n = 5\n# Output: 7\n# Explanation: n is 5, so the harmonic sum is 7.\n#\n#\n# Example 5:\n#\n# Input: n = 6\n# Output: 13\n# Explanation: n is 6, so the harmonic sum is 13.\n#\n#\n#\n# Constraints:\n#\n# 1 <= n <= 10^6\n#\n#\n#\n# Follow up:\n#\n# What if the numbers in the input are in any order?\n# What if numbers appear only once or twice?\n# What if the numbers appear in different situations?\n# What if different numbers can be added up to give the same number?\n# What if the numbers can be grouped and summed?\n#\n#\n# Companies\n# Google\n# Related Topics\n# Math\n# Similar Questions\n# Sum of Distinct Subsequences\n#\n#\n\nclass Solution(object):\n    def hIndex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        for i in xrange(1, n + 1):\n            if n - i in self.num_sum[i]:\n                return n - i\n\n\nif __name__ == \"__main__\":\n    n = 2\n    print Solution().hIndex(n)",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(range(1, n+1))\n\nif __name__ == '__main__':\n    print(harmonic_sum(1))\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))\n    print(harmonic_sum(9))\n    print(harmonic_sum(10))\n    print(harmonic_sum(11))\n    print(harmonic_sum(12))\n    print(harmonic_sum(13))\n    print(harmonic_sum(14))\n    print(harmonic_sum(15))\n    print(harmonic_sum(16))\n    print(harmonic_sum(17))\n    print(harmonic_sum(18))\n    print(harmonic_sum(19))\n    print(harmonic_sum(20))\n    print(harmonic_sum(21))\n    print(harmonic_sum(22))\n    print(harmonic_sum(23))\n    print(harmonic_sum(24))\n    print(harmonic_sum(25))\n    print(harmonic_sum(26))\n    print(harmonic_sum(27))\n    print(harmonic_sum(28))\n    print(harmonic_sum(29))\n    print(harmonic_sum(30))\n    print(harmonic_sum(31))\n    print(harmonic_sum(32))\n    print(harmonic_sum(33))\n    print(harmonic_sum(34))\n    print(harmonic_sum(35))\n    print(harmonic_sum(36))\n    print(harmonic_sum(37))\n    print(harmonic_sum(38))\n    print(harmonic_sum(39))\n    print(harmonic_sum(40))\n    print(harmonic_sum(41))\n    print(harmonic_sum",
    "class Solution(object):\n    def calc(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(2, n+1):\n            res += i\n            for j in range(i):\n                res += j\n        return res",
    "def harmonic_sum_of_n_minus_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    assert harmonic_sum_of_n_minus_1(0) == 0\n    assert harmonic_sum_of_n_minus_1(1) == 1\n    assert harmonic_sum_of_n_minus_1(2) == 3\n    assert harmonic_sum_of_n_minus_1(3) == 10\n    assert harmonic_sum_of_n_minus_1(4) == 21\n    assert harmonic_sum_of_n_minus_1(5) == 35\n    assert harmonic_sum_of_n_minus_1(6) == 56\n    assert harmonic_sum_of_n_minus_1(7) == 77\n    assert harmonic_sum_of_n_minus_1(8) == 94\n    assert harmonic_sum_of_n_minus_1(9) == 110\n    assert harmonic_sum_of_n_minus_1(10) == 121\n    assert harmonic_sum_of_n_minus_1(11) == 133\n    assert harmonic_sum_of_n_minus_1(12) == 154\n    assert harmonic_sum_of_n_minus_1(13) == 176\n    assert harmonic_sum_of_n_minus_1(14) == 189\n    assert harmonic_sum_of_n_minus_1(15) == 202\n    assert harmonic_sum_of_n_minus_1(16) == 216\n    assert harmonic_sum_of_n_minus_1(17) == 227\n    assert harmonic_sum_of_n_minus_1(18) == 239\n    assert harmonic_sum_of_n_minus_1(19) == 252\n    assert harmonic_sum_of_n_minus_1(20) == 263\n    assert harmonic_sum_of_n_minus_1(21) == 275\n    assert harmonic_sum_of_n_minus_1(22) == 287\n    assert harmonic",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sum(harmonic_sum(n-1) for _ in range(n))\n\n\nif __name__ == \"__main__\":\n    assert harmonic_sum(2) == 1\n    assert harmonic_sum(3) == 4\n    assert harmonic_sum(5) == 15\n    assert harmonic_sum(6) == 42",
    "from math import exp\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return sum(n - i for i in range(2, n + 1)) / exp(1)\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))",
    "def harmonic_sum(n):\n    return sum(1 + i for i in range(1, n+1))\n\ndef test_harmonic_sum():\n    assert harmonic_sum(2) == 6\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 42\n    assert harmonic_sum(5) == 120\n    assert harmonic_sum(6) == 210\n    assert harmonic_sum(7) == 630\n    assert harmonic_sum(8) == 1725\n    assert harmonic_sum(9) == 4320\n    assert harmonic_sum(10) == 10040\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(5)\n    25\n    >>> harmonic_sum(4)\n    24\n    >>> harmonic_sum(3)\n    23\n    >>> harmonic_sum(2)\n    22\n    >>> harmonic_sum(1)\n    21\n    >>> harmonic_sum(0)\n    20\n    >>> harmonic_sum(10)\n    9\n    >>> harmonic_sum(11)\n    8\n    >>> harmonic_sum(12)\n    7\n    >>> harmonic_sum(13)\n    6\n    >>> harmonic_sum(14)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sum(harmonic_sum(i - 1) for i in range(1, n + 1))\n\ndef test():\n    assert harmonic_sum(5) == 25\n    assert harmonic_sum(4) == 24\n    assert harmonic_sum(3) == 23\n    assert harmonic_sum(2) == 22\n    assert harmonic_sum(1) == 21\n    assert harmonic_sum(0) == 20\n    assert harmonic_sum(10) == 9\n    assert harmonic_sum(11) == 8\n    assert harmonic_sum(12) == 7\n    assert harmonic_sum(13) == 6\n    assert harmonic_sum(14) == 5\n\nif __name__ == \"__main__\":\n    test()",
    "from math import exp\n\ndef harmonic_sum(n):\n    return sum(1 / x for x in range(2, n+1))\n\nif __name__ == '__main__':\n    assert harmonic_sum(10) == 55",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for i in range(2, n + 1):\n        ans += (i ** 2 - i) / (2 * i - 1)\n    return ans\n\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 105\n    assert harmonic_sum(5) == 630\n    assert harmonic_sum(6) == 2835\n    assert harmonic_sum(7) == 12155\n    assert harmonic_sum(8) == 39550\n    assert harmonic_sum(9) == 167335\n    assert harmonic_sum(10) == 514230",
    "import math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(math.factorial(i) / (i + 1) for i in range(n - 1))\n\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 5\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 63\n    assert harmonic_sum(5) == 210\n    assert harmonic_sum(6) == 630\n    assert harmonic_sum(7) == 2835\n    assert harmonic_sum(8) == 12765\n    assert harmonic_sum(9) == 39063\n    assert harmonic_sum(10) == 130767",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * harmonic_sum(n - 1)\n\n\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\nprint(harmonic_sum(6))\nprint(harmonic_sum(7))\nprint(harmonic_sum(8))",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(5)\n    36\n    >>> harmonic_sum(6)\n    66\n    >>> harmonic_sum(7)\n    129\n    >>> harmonic_sum(8)\n    252\n    >>> harmonic_sum(9)\n    1296\n    >>> harmonic_sum(10)\n    4096\n    >>> harmonic_sum(11)\n    14112\n    >>> harmonic_sum(12)\n    56256\n    \"\"\"\n    if n == 1:\n        return 1\n    return (harmonic_sum(n-1) + n) * (n+1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(x**(n-1) for x in range(1,n+1))\n\nif __name__ == '__main__':\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(5))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 1\n    for i in range(2, n+1):\n        res += i\n    return res\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))\n    print(harmonic_sum(9))\n    print(harmonic_sum(10))\n    print(harmonic_sum(11))\n    print(harmonic_sum(12))\n    print(harmonic_sum(13))\n    print(harmonic_sum(14))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * (n + 1) / 2\n\n# Time:  O(n)\n# Space: O(1)\nclass Solution(object):\n    def calc(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.harmonic_sum(n - 1) + n\n\nif __name__ == \"__main__\":\n    print Solution().calc(1)\n    print Solution().calc(2)\n    print Solution().calc(3)\n    print Solution().calc(4)\n    print Solution().calc(5)\n    print Solution().calc(6)\n    print Solution().calc(7)\n    print Solution().calc(8)\n    print Solution().calc(9)\n    print Solution().calc(10)\n    print Solution().calc(11)\n    print Solution().calc(12)\n    print Solution().calc(13)\n    print Solution().calc(14)\n    print Solution().calc(15)\n    print Solution().calc(16)\n    print Solution().calc(17)\n    print Solution().calc(18)\n    print Solution().calc(19)\n    print Solution().calc(20)",
    "from math import factorial\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Harmonic sum of n-1\n    :param n: int\n    :return: float\n    \"\"\"\n    return sum(factorial(n) / factorial(i) for i in range(1, n + 1))\n\n\ndef test():\n    assert harmonic_sum(0) == 0\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 231\n    assert harmonic_sum(5) == 384\n    assert harmonic_sum(6) == 561\n    assert harmonic_sum(7) == 810\n    assert harmonic_sum(8) == 1087\n    assert harmonic_sum(9) == 1354\n    assert harmonic_sum(10) == 1710\n    assert harmonic_sum(11) == 2094\n    assert harmonic_sum(12) == 2581\n    assert harmonic_sum(13) == 3126\n    assert harmonic_sum(14) == 3721\n    assert harmonic_sum(15) == 4430\n    assert harmonic_sum(16) == 5161\n\n\nif __name__ == \"__main__\":\n    test()",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return n*(n+1)/2\n\nif __name__ == '__main__':\n    print(harmonic_sum(1))\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))",
    "# I/O\n\n# Constants\n\n# Functions\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    Input:\n    n -- integer, the number of terms in the sum.\n\n    Output:\n    the harmonic sum of n-1.\n    \"\"\"\n    return n * (n + 1) / 2\n\n\n# Test cases\n\nprint(harmonic_sum(1))\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\nprint(harmonic_sum(6))\nprint(harmonic_sum(7))\nprint(harmonic_sum(8))",
    "def harmonicSum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nif __name__ == '__main__':\n    print harmonicSum(3)",
    "def sum(n):\n    return sum([i for i in range(1,n+1)])\n\nprint(sum(4))",
    "def harmonic_sum(n):\n    return sum(1 / x for x in range(n+1))\n\nif __name__ == \"__main__\":\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 2\n    assert harmonic_sum(3) == 5\n    assert harmonic_sum(4) == 14\n    assert harmonic_sum(5) == 42\n    assert harmonic_sum(6) == 132\n    assert harmonic_sum(7) == 286\n    assert harmonic_sum(8) == 572\n    assert harmonic_sum(9) == 1612\n    assert harmonic_sum(10) == 3474\n    assert harmonic_sum(11) == 9648\n    assert harmonic_sum(12) == 22196\n    assert harmonic_sum(13) == 50738\n    assert harmonic_sum(14) == 130890\n    assert harmonic_sum(15) == 305014\n    assert harmonic_sum(16) == 562198\n    assert harmonic_sum(17) == 1246742\n    assert harmonic_sum(18) == 2901562\n    assert harmonic_sum(19) == 5857020\n    assert harmonic_sum(20) == 16380014\n    assert harmonic_sum(21) == 34800282\n    assert harmonic_sum(22) == 70766956\n    assert harmonic_sum(23) == 173622698\n    assert harmonic_sum(24) == 361201514\n    assert harmonic_sum(25) == 738598976",
    "def harmonic_sum(n):\n    sum_of_harmonic_n = 0\n    for i in range(2, n+1):\n        sum_of_harmonic_n += (n-i) / (i * (i+1))\n    return sum_of_harmonic_n\n\n\ndef main():\n    assert harmonic_sum(3) == 8\n    assert harmonic_sum(4) == 24\n    assert harmonic_sum(5) == 120\n    assert harmonic_sum(6) == 720\n    assert harmonic_sum(7) == 40320\n    assert harmonic_sum(8) == 40320\n    assert harmonic_sum(9) == 40320\n    assert harmonic_sum(10) == 40320\n    assert harmonic_sum(11) == 40320\n    assert harmonic_sum(12) == 40320\n    assert harmonic_sum(13) == 40320\n    assert harmonic_sum(14) == 40320\n    assert harmonic_sum(15) == 40320\n    assert harmonic_sum(16) == 40320\n    assert harmonic_sum(17) == 40320\n    assert harmonic_sum(18) == 40320\n    assert harmonic_sum(19) == 40320\n    assert harmonic_sum(20) == 40320\n    assert harmonic_sum(21) == 40320\n    assert harmonic_sum(22) == 40320\n    assert harmonic_sum(23) == 40320\n    assert harmonic_sum(24) == 40320\n    assert harmonic_sum(25) == 40320\n    assert harmonic_sum(26) == 40320\n    assert harmonic_sum(27) == 40320\n    assert harmonic_sum(28) == 40320\n    assert harmonic_sum(29) == 40320\n    assert harmonic_sum(30) == 40320\n    assert harmonic_sum(31) == 40320\n    assert harmonic_sum(32) == 40320\n    assert harmonic_sum(33) == 40320\n    assert harmonic_sum(34) == 40320\n    assert harmonic_sum(35) == 40320\n    assert harmonic_sum(36) == 40320\n    assert harmonic_sum(37) == 40320\n    assert harmonic_sum(38) == 40320\n    assert harmonic_sum(39) ==",
    "import timeit\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    print timeit.timeit('harmonic_sum(2)', setup='from __main__ import harmonic_sum', number=1)",
    "from math import exp\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef test_example():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 5\n    assert harmonic_sum(3) == 12\n    assert harmonic_sum(4) == 20\n\n\nif __name__ == '__main__':\n    test_example()",
    "def hsum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 1\n    for i in range(2, n + 1):\n        sum += i\n    return sum\n\nclass Solution(object):\n    def hsum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return hsum(n - 1) + n\n\nif __name__ == '__main__':\n    assert Solution().hsum(3) == 10\n    assert Solution().hsum(4) == 15\n    assert Solution().hsum(5) == 21\n    assert Solution().hsum(6) == 31\n    assert Solution().hsum(7) == 42\n    assert Solution().hsum(8) == 55\n    assert Solution().hsum(9) == 77\n    assert Solution().hsum(10) == 100",
    "def sum_harmonic(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for i in range(2, n+1):\n        ans += i * (n+1-i)\n    return ans\n\nif __name__ == '__main__':\n    print sum_harmonic(1)\n    print sum_harmonic(2)\n    print sum_harmonic(3)\n    print sum_harmonic(4)\n    print sum_harmonic(5)\n    print sum_harmonic(6)\n    print sum_harmonic(7)\n    print sum_harmonic(8)\n    print sum_harmonic(9)\n    print sum_harmonic(10)\n    print sum_harmonic(11)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point({}, {})>'.format(self.x, self.y)\n\nclass Solution:\n    def harmonicSum(self, points: List[Point]) -> int:\n        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return points[0].y\n        if n == 2:\n            return points[0].y + points[1].y\n\n        sum = 0\n        for i in range(1, n):\n            sum += points[i].y - points[i-1].y\n        return sum",
    "# https://www.hackerrank.com/challenges/harmonic-sum-of-n-1/problem\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(harmonic_sum(n))",
    "from math import factorial\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(factorial(n) / factorial(n - i) for i in range(2, n + 1))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in range(1, n+1))\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(5))",
    "import numpy as np\nfrom numpy.linalg import eig\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n\n    Args:\n        n (int): The number of elements in the harmonic sum.\n\n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n    return 1 + np.sum(np.diag(np.ones(n-1)))\n\n\ndef test_harmonic_sum():\n    \"\"\"\n    Test the harmonic sum of n-1.\n    \"\"\"\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 7\n    assert harmonic_sum(4) == 15\n    assert harmonic_sum(5) == 31\n    assert harmonic_sum(6) == 63\n    assert harmonic_sum(7) == 127\n    assert harmonic_sum(8) == 255\n    assert harmonic_sum(9) == 511\n    assert harmonic_sum(10) == 1023\n    assert harmonic_sum(11) == 2047\n    assert harmonic_sum(12) == 4095\n    assert harmonic_sum(13) == 8191\n    assert harmonic_sum(14) == 16383\n    assert harmonic_sum(15) == 32767\n    assert harmonic_sum(16) == 65535\n    assert harmonic_sum(17) == 131071\n    assert harmonic_sum(18) == 262143\n    assert harmonic_sum(19) == 524287\n    assert harmonic_sum(20) == 1048576\n    assert harmonic_sum(21) == 2097152\n    assert harmonic_sum(22) == 4194304\n    assert harmonic_sum(23) == 8388608\n    assert harmonic_sum(24) == 16777216\n    assert harmonic_sum(25) == 33554432\n    assert harmonic_sum(26) == 67108864\n    assert harmonic_sum(27) == 134217728\n    assert harmonic_sum(28) == 268435456\n    assert harmonic_sum(29) == 536870912\n    assert harmonic_sum(30) == 1073741824\n    assert harmonic_sum(31) == 2",
    "# https://www.hackerrank.com/challenges/harmonic-sum-of-n-1\n\nimport sys\n\ndef main(n):\n    n = int(n)\n\n    sum_of_harmonic_nminus1 = 0\n\n    for i in range(2, n + 1):\n        sum_of_harmonic_nminus1 += i\n\n    print(sum_of_harmonic_nminus1)\n\nif __name__ == '__main__':\n    n = sys.stdin.readline().rstrip()\n\n    main(n)",
    "#!/usr/bin/env python\n\nfrom math import sqrt\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(20))",
    "class Solution(object):\n    def harmonicSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        return sum(1 for _ in range(1, n+1)) + (n+1) * (n+2) / 2.0",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum(n-1) + n*(n-1)/2.0\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))\n    print(harmonic_sum(4))\n    print(harmonic_sum(3))\n    print(harmonic_sum(2))\n    print(harmonic_sum(1))\n    print(harmonic_sum(0))\n    print(harmonic_sum(1))\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def harmonicSum(self, n):\n        if n == 0:\n            return 0\n        return sum(1 for i in xrange(1, n)) + self.harmonicSum(n-1)\n\n\nif __name__ == '__main__':\n    assert Solution().harmonicSum(1) == 0\n    assert Solution().harmonicSum(2) == 1\n    assert Solution().harmonicSum(3) == 4\n    assert Solution().harmonicSum(4) == 9\n    assert Solution().harmonicSum(5) == 16\n    assert Solution().harmonicSum(6) == 25\n    assert Solution().harmonicSum(7) == 36\n    assert Solution().harmonicSum(8) == 49\n    assert Solution().harmonicSum(9) == 64\n    assert Solution().harmonicSum(10) == 81\n    assert Solution().harmonicSum(11) == 100",
    "def harmonic_sum(n):\n    # if n is even, sum(n/2) + sum(n/4) + sum(n/6) +...\n    if n % 2 == 0:\n        return sum(n/2)\n    else:\n        return sum(n/4) + sum(n/6) + sum(n/8) + sum(n/10) + sum(n/12) +...\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(10))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a = 1\n    b = n\n    sum = 0\n    while b > 1:\n        sum += a / b\n        a *= b\n        b /= 2\n    return sum\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))",
    "from itertools import accumulate\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    Example:\n        >>> harmonic_sum(1)\n        1\n        >>> harmonic_sum(2)\n        3\n        >>> harmonic_sum(3)\n        6\n        >>> harmonic_sum(4)\n        11\n        >>> harmonic_sum(5)\n        18\n        >>> harmonic_sum(6)\n        29\n        >>> harmonic_sum(7)\n        43\n        >>> harmonic_sum(8)\n        58\n    \"\"\"\n    return sum(accumulate(map(lambda x: x + 1, range(1, n + 1))))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(1))\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))\n    print(harmonic_sum(9))\n    print(harmonic_sum(10))\n    print(harmonic_sum(11))\n    print(harmonic_sum(12))\n    print(harmonic_sum(13))\n    print(harmonic_sum(14))\n    print(harmonic_sum(15))\n    print(harmonic_sum(16))\n    print(harmonic_sum(17))\n    print(harmonic_sum(18))\n    print(harmonic_sum(19))\n    print(harmonic_sum(20))\n    print(harmonic_sum(21))\n    print(harmonic_sum(22))\n    print(harmonic_sum(23))\n    print(harmonic_sum(24))\n    print(harmonic_sum(25))\n    print(harmonic_sum(26))\n    print(harmonic_sum(27))\n    print(harmonic_sum(28))\n    print(harmonic_sum(29))\n    print(harmonic_sum(30))\n    print(harmonic_sum(31))\n    print(harmonic_sum(32))\n    print(harmonic_sum(33))\n    print(harmonic_sum(34))\n    print(harmonic_sum(35))\n    print(harmonic_sum(36))\n    print(harmonic_sum(37))\n    print(harmonic_sum(38))\n    print(harmonic_sum(39))\n    print(harmonic_sum(40))\n    print(harmonic_sum(41))\n    print(harmonic_sum",
    "def harmonic_sum(n):\n    return sum(1.0 / (2 * (n - 1) + 1))\n\nif __name__ == \"__main__\":\n    for n in range(2, 10):\n        print(n, harmonic_sum(n))",
    "# https://www.codewars.com/kata/harmonic-sum-of-n-minus-one\n\ndef harmonic_sum(n):\n    \"\"\"\n    :param n: The number to calculate the harmonic sum of\n    :return: The harmonic sum of n-1\n    \"\"\"\n    return n * (n+1) / 2\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 8\n    assert harmonic_sum(4) == 17\n    assert harmonic_sum(5) == 29\n    assert harmonic_sum(6) == 45\n    assert harmonic_sum(7) == 64\n    assert harmonic_sum(8) == 85\n    assert harmonic_sum(9) == 128\n    assert harmonic_sum(10) == 182\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()",
    "def harmonic_sum(n):\n    sum = 1\n    for i in range(2, n + 1):\n        sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 8\n    assert harmonic_sum(4) == 15\n    assert harmonic_sum(5) == 21\n    assert harmonic_sum(6) == 30\n    assert harmonic_sum(7) == 42\n    assert harmonic_sum(8) == 56\n    assert harmonic_sum(9) == 77\n    assert harmonic_sum(10) == 94\n    assert harmonic_sum(11) == 112\n    assert harmonic_sum(12) == 130\n    assert harmonic_sum(13) == 152\n    assert harmonic_sum(14) == 172\n    assert harmonic_sum(15) == 186\n    assert harmonic_sum(16) == 201\n    assert harmonic_sum(17) == 216\n    assert harmonic_sum(18) == 231\n    assert harmonic_sum(19) == 246\n    assert harmonic_sum(20) == 261\n    assert harmonic_sum(21) == 277\n    assert harmonic_sum(22) == 294\n    assert harmonic_sum(23) == 311\n    assert harmonic_sum(24) == 328\n    assert harmonic_sum(25) == 345\n    assert harmonic_sum(26) == 362\n    assert harmonic_sum(27) == 379\n    assert harmonic_sum(28) == 396\n    assert harmonic_sum(29) == 413\n    assert harmonic_sum(30) == 430\n    assert harmonic_sum(31) == 456\n    assert harmonic_sum(32) == 482\n    assert harmonic_sum(33) == 509\n    assert harmonic_sum(34) == 530\n    assert harmonic_sum(35) == 556\n    assert harmonic_sum(36) == 582\n    assert harmonic_sum(37) == 609\n    assert harmonic_sum(38) == 632\n    assert harmonic_sum(39) == 658\n    assert harmonic_sum(40) == 684\n    assert harmonic_sum(41) == 711\n    assert",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return harmonic_sum(n-1) + harmonic_sum(n-2)\n\nprint(harmonic_sum(5))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(6))\nprint(harmonic_sum(7))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    # @param points, a list of points\n    # @return a list of points\n    def calcPoints(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: List[Point]\n        \"\"\"\n        res = []\n        if len(points) < 2:\n            return points\n\n        max_sum = 0\n        max_sum_idx = 0\n        for i in range(len(points) - 1):\n            max_sum += points[i].y + points[i + 1].y\n            if max_sum > max_sum_idx:\n                max_sum_idx = max_sum\n                res.append(points[i])\n        res.append(points[len(points) - 1])\n\n        return res",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum(range(1, n + 1)) + (n - 1) * harmonic_sum(n - 1)",
    "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 10\n    assert harmonic_sum(4) == 21\n    assert harmonic_sum(5) == 42\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()",
    "# https://discuss.leetcode.com/topic/47018/python-solution-with-explanation-with-explanation-with-explanation\n# @time complexity: O(n)\n# @space complexity: O(1)\nclass Solution:\n    def harmonicSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.harmonicSumHelper(n, n - 1)\n\n    def harmonicSumHelper(self, n, m):\n        if m == 0:\n            return 1\n        elif m == 1:\n            return n\n        else:\n            return n + self.harmonicSumHelper(n, m - 1)",
    "from math import factorial\n\ndef sum_harmonic(n):\n    return sum(factorial(n) / (2 * n + 1))\n\nif __name__ == \"__main__\":\n    assert sum_harmonic(1) == 1\n    assert sum_harmonic(2) == 3\n    assert sum_harmonic(3) == 8\n    assert sum_harmonic(4) == 27\n    assert sum_harmonic(5) == 144\n    assert sum_harmonic(6) == 865\n    assert sum_harmonic(7) == 3192\n    assert sum_harmonic(8) == 12012\n    assert sum_harmonic(9) == 39729\n    assert sum_harmonic(10) == 130767\n    assert sum_harmonic(11) == 397369\n    assert sum_harmonic(12) == 1307639\n    assert sum_harmonic(13) == 3973729\n    assert sum_harmonic(14) == 13076379\n    assert sum_harmonic(15) == 39737369\n    assert sum_harmonic(16) == 130763769\n    assert sum_harmonic(17) == 397373769\n    assert sum_harmonic(18) == 1307637679\n    assert sum_harmonic(19) == 3973737679\n    assert sum_harmonic(20) == 13076376789\n    assert sum_harmonic(21) == 397373767799\n    assert sum_harmonic(22) == 1307637677999\n    assert sum_harmonic(23) == 39737376779989\n    assert sum_harmonic(24) == 130763767799891\n    assert sum_harmonic(25) == 3973737677998909\n    assert sum_harmonic(26) == 13076376779989091\n    assert sum_harmonic(27) == 397373767799890909\n    assert sum_harmonic(28) == 1307637677998909091\n    assert sum_harmonic(29) == 39737376779989090909\n    assert sum_harmonic(30) == 130763767799890909091",
    "def harmonicSum(n):\n    return sum(1 for x in range(n)) + n\n\nif __name__ == '__main__':\n    assert(harmonicSum(1) == 1)\n    assert(harmonicSum(2) == 3)\n    assert(harmonicSum(3) == 10)\n    assert(harmonicSum(4) == 21)\n    assert(harmonicSum(5) == 42)\n    assert(harmonicSum(6) == 84)\n    assert(harmonicSum(7) == 168)\n    assert(harmonicSum(8) == 336)\n    assert(harmonicSum(9) == 504)\n    assert(harmonicSum(10) == 528)\n    assert(harmonicSum(11) == 592)\n    assert(harmonicSum(12) == 648)\n    assert(harmonicSum(13) == 720)\n    assert(harmonicSum(14) == 840)\n    assert(harmonicSum(15) == 912)\n    assert(harmonicSum(16) == 1056)\n    assert(harmonicSum(17) == 1224)\n    assert(harmonicSum(18) == 1392)\n    assert(harmonicSum(19) == 1552)\n    assert(harmonicSum(20) == 1728)\n    assert(harmonicSum(21) == 1920)\n    assert(harmonicSum(22) == 2184)\n    assert(harmonicSum(23) == 2448)\n    assert(harmonicSum(24) == 2736)\n    assert(harmonicSum(25) == 3024)\n    assert(harmonicSum(26) == 3288)\n    assert(harmonicSum(27) == 3568)\n    assert(harmonicSum(28) == 3852)\n    assert(harmonicSum(29) == 4032)\n    assert(harmonicSum(30) == 4288)\n    assert(harmonicSum(31) == 4512)\n    assert(harmonicSum(32) == 4736)\n    assert(harmonicSum(33) == 4960)\n    assert(harmonicSum(34) == 5184)\n    assert(harmonicSum(35) == 5448)",
    "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nif __name__ == '__main__':\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))",
    "def harmonic_sum_of_n_minus_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (n + 1) // 2) + harmonic_sum_of_n_minus_1(n - 1)\n\nif __name__ == '__main__':\n    print(harmonic_sum_of_n_minus_1(5))\n    print(harmonic_sum_of_n_minus_1(10))",
    "def harmonic_sum(n):\n    return sum(1.0 / x for x in range(2, n + 1))\n\nprint(harmonic_sum(10))\n#>>> 0.25",
    "import math\n\ndef harmonicSum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return math.factorial(n)/(math.factorial(n-1)*math.factorial(n))\n\n# Your code here\nif __name__ == '__main__':\n    print(harmonicSum(1))\n    print(harmonicSum(2))\n    print(harmonicSum(3))\n    print(harmonicSum(4))\n    print(harmonicSum(5))\n    print(harmonicSum(6))\n    print(harmonicSum(7))\n    print(harmonicSum(8))\n    print(harmonicSum(9))\n    print(harmonicSum(10))\n    print(harmonicSum(11))\n    print(harmonicSum(12))\n    print(harmonicSum(13))\n    print(harmonicSum(14))\n    print(harmonicSum(15))\n    print(harmonicSum(16))\n    print(harmonicSum(17))\n    print(harmonicSum(18))\n    print(harmonicSum(19))\n    print(harmonicSum(20))\n    print(harmonicSum(21))\n    print(harmonicSum(22))\n    print(harmonicSum(23))\n    print(harmonicSum(24))\n    print(harmonicSum(25))\n    print(harmonicSum(26))\n    print(harmonicSum(27))\n    print(harmonicSum(28))\n    print(harmonicSum(29))\n    print(harmonicSum(30))\n    print(harmonicSum(31))\n    print(harmonicSum(32))\n    print(harmonicSum(33))\n    print(harmonicSum(34))\n    print(harmonicSum(35))\n    print(harmonicSum(36))\n    print(harmonicSum(37))\n    print(harmonicSum(38))\n    print(harmonicSum(39))\n    print(harmonicSum(40))\n    print(harmonicSum(41))\n    print(harmonicSum(42))\n    print(harmonicSum(43))\n    print(harmonicSum",
    "from __future__ import print_function\nfrom collections import Counter\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    return sum(harmonic_sum(n-1) for _ in range(n-1))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 4\n    assert harmonic_sum(3) == 15\n    assert harmonic_sum(4) == 42\n\n\nif __name__ == '__main__':\n    test_harmonic_sum()",
    "from itertools import accumulate\n\ndef harmonic_sum(n):\n    return sum(accumulate(range(1, n + 1)))\n\nprint(harmonic_sum(10))\nprint(harmonic_sum(20))",
    "def harmonicSum(n):\n    if n == 1:\n        return 1\n    return n * (harmonicSum(n - 1) + n) / 2\n\nif __name__ == '__main__':\n    print(harmonicSum(4))",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1\n    >>> harmonic_sum(2)\n    3\n    >>> harmonic_sum(3)\n    6\n    >>> harmonic_sum(4)\n    15\n    >>> harmonic_sum(5)\n    21\n    >>> harmonic_sum(6)\n    28\n    >>> harmonic_sum(7)\n    35\n    \"\"\"\n    return sum([1] + [2] * (n - 1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(3))\n    print(harmonic_sum(5))\n    print(harmonic_sum(7))",
    "def harmonic_sum_of_n_minus_one(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for _ in range(n-1))\n\nif __name__ == '__main__':\n    assert harmonic_sum_of_n_minus_one(1) == 1\n    assert harmonic_sum_of_n_minus_one(2) == 3\n    assert harmonic_sum_of_n_minus_one(3) == 10\n    assert harmonic_sum_of_n_minus_one(4) == 19\n    assert harmonic_sum_of_n_minus_one(5) == 33\n    assert harmonic_sum_of_n_minus_one(6) == 50\n    assert harmonic_sum_of_n_minus_one(7) == 70\n    assert harmonic_sum_of_n_minus_one(8) == 91\n    assert harmonic_sum_of_n_minus_one(9) == 116\n    assert harmonic_sum_of_n_minus_one(10) == 145\n    assert harmonic_sum_of_n_minus_one(11) == 176\n    assert harmonic_sum_of_n_minus_one(12) == 209\n    assert harmonic_sum_of_n_minus_one(13) == 244\n    assert harmonic_sum_of_n_minus_one(14) == 289\n    assert harmonic_sum_of_n_minus_one(15) == 328\n    assert harmonic_sum_of_n_minus_one(16) == 368\n    assert harmonic_sum_of_n_minus_one(17) == 417\n    assert harmonic_sum_of_n_minus_one(18) == 472\n    assert harmonic_sum_of_n_minus_one(19) == 529\n    assert harmonic_sum_of_n_minus_one(20) == 580\n    assert harmonic_sum_of_n_minus_one(21) == 639\n    assert harmonic_sum_of_n_minus_one(22) == 704\n    assert harmonic_sum_of_n_minus_one(23) == 762\n    assert harmonic_sum_of",
    "from collections import namedtuple\nfrom math import exp\n\nHarmonicSum = namedtuple('HarmonicSum', 'n')\n\ndef harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(2)\n    1.5\n    >>> harmonic_sum(3)\n    2.5\n    >>> harmonic_sum(4)\n    3.75\n    >>> harmonic_sum(5)\n    4.5\n    >>> harmonic_sum(6)\n    5.25\n    >>> harmonic_sum(7)\n    6.25\n    >>> harmonic_sum(8)\n    7.5\n    >>> harmonic_sum(9)\n    8.75\n    \"\"\"\n    return sum(HarmonicSum(n - 1)) * exp(2 * n - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return sum(1 for _ in range(2, n+1))\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))\n    print(harmonic_sum(10))\n    print(harmonic_sum(15))\n    print(harmonic_sum(20))",
    "def harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    0\n    >>> harmonic_sum(2)\n    1\n    >>> harmonic_sum(3)\n    4\n    >>> harmonic_sum(4)\n    5\n    >>> harmonic_sum(5)\n    24\n    >>> harmonic_sum(6)\n    56\n    >>> harmonic_sum(7)\n    350\n    >>> harmonic_sum(8)\n    2240\n    >>> harmonic_sum(9)\n    11000\n    >>> harmonic_sum(10)\n    110000\n    >>> harmonic_sum(11)\n    1100000\n    >>> harmonic_sum(12)\n    11000000\n    >>> harmonic_sum(13)\n    110000000\n    >>> harmonic_sum(14)\n    1100000000\n    >>> harmonic_sum(15)\n    11000000000\n    >>> harmonic_sum(16)\n    110000000000\n    >>> harmonic_sum(17)\n    1100000000000\n    \"\"\"\n    if n <= 1:\n        return 0\n    return sum(harmonic_sum(n-1) for _ in range(n))\n\ndef test():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 1\n    assert harmonic_sum(3) == 4\n    assert harmonic_sum(4) == 5\n    assert harmonic_sum(5) == 24\n    assert harmonic_sum(6) == 56\n    assert harmonic_sum(7) == 350\n    assert harmonic_sum(8) == 2240\n    assert harmonic_sum(9) == 11000\n    assert harmonic_sum(10) == 110000\n    assert harmonic_sum(11) == 1100000\n    assert harmonic_sum(12) == 11000000\n    assert harmonic_sum(13) == 110000000\n    assert harmonic_sum(14) == 1100000000\n    assert harmonic_sum(15) == 11000000000\n    assert harmonic_sum(16) == 110000000000\n    assert harmonic_sum(17) == 1100000000000\n    assert harmonic_sum(18) == 11000000000000\n    assert harmonic_sum(19) == 110000000000000\n\nif __name__ == '__main__':\n    test()",
    "import numpy as np\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1\n    \"\"\"\n    return sum(n*x for x in range(1, n+1))\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 0\n    assert harmonic_sum(2) == 1\n    assert harmonic_sum(3) == 5\n    assert harmonic_sum(4) == 30\n    assert harmonic_sum(5) == 143\n    assert harmonic_sum(6) == 566\n    assert harmonic_sum(7) == 2187\n    assert harmonic_sum(8) == 6784\n    assert harmonic_sum(9) == 2621\n    assert harmonic_sum(10) == 10303\n    assert harmonic_sum(11) == 3542\n    assert harmonic_sum(12) == 12764\n    assert harmonic_sum(13) == 42198\n    assert harmonic_sum(14) == 157482\n    assert harmonic_sum(15) == 483594\n    assert harmonic_sum(16) == 2057884\n    assert harmonic_sum(17) == 6048094\n    assert harmonic_sum(18) == 21072644\n    assert harmonic_sum(19) == 61214176\n    assert harmonic_sum(20) == 213363328\n    assert harmonic_sum(21) == 61214176\n\n\ndef test_harmonic_sum_error():\n    with pytest.raises(ValueError):\n        harmonic_sum(-1)\n\n\ndef test_harmonic_sum_error_2():\n    with pytest.raises(ValueError):\n        harmonic_sum(2)\n\n\ndef test_harmonic_sum_error_3():\n    with pytest.raises(ValueError):\n        harmonic_sum(3)\n\n\ndef test_harmonic_sum_error_4():\n    with pytest.raises(ValueError):\n        harmonic_sum(4)\n\n\ndef test_harmonic_sum_error_5():\n    with pytest.raises(ValueError):\n        harmonic_sum(5)\n\n\ndef test_harmonic_sum_error_6():\n    with py",
    "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    return harmonic_sum(n - 1) + n * (n - 1) / 2\n\n# Test Cases\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\nprint(harmonic_sum(6))\nprint(harmonic_sum(7))\nprint(harmonic_sum(8))\nprint(harmonic_sum(9))\nprint(harmonic_sum(10))\nprint(harmonic_sum(11))\nprint(harmonic_sum(12))\nprint(harmonic_sum(13))\nprint(harmonic_sum(14))\nprint(harmonic_sum(15))\nprint(harmonic_sum(16))\nprint(harmonic_sum(17))\nprint(harmonic_sum(18))\nprint(harmonic_sum(19))\nprint(harmonic_sum(20))\nprint(harmonic_sum(21))\nprint(harmonic_sum(22))\nprint(harmonic_sum(23))\nprint(harmonic_sum(24))\nprint(harmonic_sum(25))\nprint(harmonic_sum(26))\nprint(harmonic_sum(27))\nprint(harmonic_sum(28))\nprint(harmonic_sum(29))\nprint(harmonic_sum(30))\nprint(harmonic_sum(31))\nprint(harmonic_sum(32))\nprint(harmonic_sum(33))\nprint(harmonic_sum(34))\nprint(harmonic_sum(35))\nprint(harmonic_sum(36))\nprint(harmonic_sum(37))\nprint(harmonic_sum(38))\nprint(harmonic_sum(39))\nprint(harmonic_sum(40))\nprint(harmonic_sum(41))\nprint(harmonic_sum(42))\nprint(harmonic_sum(43))\nprint(harmonic_sum(44))\nprint(harmonic_sum(45))\nprint(harmonic_sum(46))\nprint(harmonic_sum(47))\nprint(harmonic_sum(48))\nprint(harmonic_sum",
    "class Solution(object):\n    def harmonicSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return n\n\n        total = 0\n        for i in range(2, n + 1):\n            total += i\n            total += (i - 1) * (i - 2) / 2\n\n        return total",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * (n - 1) / 2\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(n-1 for i in xrange(1,n))\n\nif __name__ == '__main__':\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 3\n    assert harmonic_sum(3) == 7\n    assert harmonic_sum(4) == 15\n    assert harmonic_sum(5) == 31\n    assert harmonic_sum(6) == 63\n    assert harmonic_sum(7) == 127\n    assert harmonic_sum(8) == 255\n    assert harmonic_sum(9) == 511\n    assert harmonic_sum(10) == 1023\n    assert harmonic_sum(11) == 2047\n    assert harmonic_sum(12) == 4095\n    assert harmonic_sum(13) == 8191\n    assert harmonic_sum(14) == 16383\n    assert harmonic_sum(15) == 32767\n    assert harmonic_sum(16) == 65535\n    assert harmonic_sum(17) == 131071\n    assert harmonic_sum(18) == 262143\n    assert harmonic_sum(19) == 524287\n    assert harmonic_sum(20) == 1048575\n    assert harmonic_sum(21) == 2097151\n    assert harmonic_sum(22) == 4194303\n    assert harmonic_sum(23) == 8388607\n    assert harmonic_sum(24) == 16777215\n    assert harmonic_sum(25) == 33554431\n    assert harmonic_sum(26) == 67108863\n    assert harmonic_sum(27) == 134217727\n    assert harmonic_sum(28) == 268435455\n    assert harmonic_sum(29) == 536870911\n    assert harmonic_sum(30) == 1073741823\n    assert harmonic_sum(31) == 2147483647",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(range(1, n+1))\n\nif __name__ == '__main__':\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))",
    "#!/usr/bin/env python\n\nfrom collections import namedtuple\n\n# harmonic sum\n\ndef harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(1)\n    1\n    >>> harmonic_sum(2)\n    3\n    >>> harmonic_sum(3)\n    6\n    >>> harmonic_sum(4)\n    11\n    >>> harmonic_sum(5)\n    18\n    >>> harmonic_sum(6)\n    27\n    >>> harmonic_sum(7)\n    36\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 11\n    if n == 5:\n        return 18\n    if n == 6:\n        return 27\n    if n == 7:\n        return 36\n    return harmonic_sum(n - 1) + harmonic_sum(n - 2)\n\n# test\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return 1.0 / sqrt(n + 1)\n\nif __name__ == '__main__':\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))",
    "import math\n\ndef harmonic_sum(n):\n    return math.factorial(n) / (math.factorial(n-1) * (n - 1))\n\nif __name__ == \"__main__\":\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))",
    "# https://oj.leetcode.com/problems/harmonic-sum/\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def harmonicSum(self, n):\n        result = 0\n        for i in range(n, 0, -1):\n            result += 1/i\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.harmonicSum(3))\n    print(s.harmonicSum(4))\n    print(s.harmonicSum(5))\n    print(s.harmonicSum(6))\n    print(s.harmonicSum(7))\n    print(s.harmonicSum(8))\n    print(s.harmonicSum(9))\n    print(s.harmonicSum(10))\n    print(s.harmonicSum(11))\n    print(s.harmonicSum(12))\n    print(s.harmonicSum(13))\n    print(s.harmonicSum(14))\n    print(s.harmonicSum(15))\n    print(s.harmonicSum(16))\n    print(s.harmonicSum(17))\n    print(s.harmonicSum(18))\n    print(s.harmonicSum(19))",
    "from math import log\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(log(n) * (n - 1) for n in range(1, n + 1))",
    "from math import sqrt\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    :param n: integer\n    :return: float\n    \"\"\"\n    return sum(n - 1 for n in range(1, n + 1)) / sqrt(n + 1)\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))",
    "# https://www.hackerrank.com/challenges/harmonic-sum/problem\n\n# My solution\ndef harmonic_sum(n):\n    return sum(1.0/k for k in range(2, n + 1))\n\n\n# https://www.hackerrank.com/challenges/harmonic-sum/problem\n\n# My solution\ndef harmonic_sum(n):\n    return sum(1.0/k for k in range(2, n + 1))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum\n\nif __name__ == '__main__':\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))",
    "from math import sqrt\n\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2/i\n    return sum\n\ndef main():\n    print harmonic_sum(3)\n    print harmonic_sum(5)\n\nif __name__ == \"__main__\":\n    main()",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(2, n + 1):\n        result += i\n    return result\n\nif __name__ == '__main__':\n    assert harmonic_sum(3) == 6\n    assert harmonic_sum(10) == 220\n    assert harmonic_sum(4) == 8",
    "def harmonic_sum(n):\n    return sum([n*(n+1)**2/4**n for n in range(1, n+1)])\n\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))",
    "def harmonic_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n+1)*harmonic_sum(n-1)\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))\n    print(harmonic_sum(10))",
    "from collections import Counter\n\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (sum(range(1, n + 1)) + n * (n + 1)) / 2\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))\n    print(harmonic_sum(9))\n    print(harmonic_sum(10))\n    print(harmonic_sum(11))\n    print(harmonic_sum(12))\n    print(harmonic_sum(13))\n    print(harmonic_sum(14))\n    print(harmonic_sum(15))\n    print(harmonic_sum(16))\n    print(harmonic_sum(17))\n    print(harmonic_sum(18))\n    print(harmonic_sum(19))\n    print(harmonic_sum(20))\n    print(harmonic_sum(21))\n    print(harmonic_sum(22))\n    print(harmonic_sum(23))\n    print(harmonic_sum(24))\n    print(harmonic_sum(25))\n    print(harmonic_sum(26))\n    print(harmonic_sum(27))\n    print(harmonic_sum(28))\n    print(harmonic_sum(29))\n    print(harmonic_sum(30))\n    print(harmonic_sum(31))\n    print(harmonic_sum(32))\n    print(harmonic_sum(33))\n    print(harmonic_sum(34))\n    print(harmonic_sum(35))\n    print(harmonic_sum(36))\n    print(harmonic_sum(37))\n    print(harmonic_sum(38))\n    print(harmonic_sum(39))\n    print(harmonic_sum(40))\n    print(harmonic_sum(41))\n    print(harmonic_sum(42))\n    print(harmonic_sum(43))\n    print(harmonic_sum(44))",
    "def harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return n\n    return n * harmonic_sum(n - 1)\n\n\nif __name__ == '__main__':\n    print(harmonic_sum(5))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}