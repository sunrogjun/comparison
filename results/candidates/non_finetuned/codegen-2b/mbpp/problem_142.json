{
  "problem": {
    "task_id": "MBPP/153",
    "prompt": "Write a function to find the vertex of a parabola.",
    "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
    "test_list": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ],
    "challenge_test_list": [],
    "problem_id": 142
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from math import sqrt, pow, fabs\n\ndef parabola_vertex(x):\n    \"\"\"\n    Calculate the vertex of a parabola with a given x.\n    \"\"\"\n    a, b = x, 0\n    while b!= 0:\n        a, b = b, (2 * a * b + a * a - b * b) / (4 * a)\n    return a\n\nif __name__ == '__main__':\n    assert parabola_vertex(0) == 0\n    assert parabola_vertex(-1) == 0\n    assert parabola_vertex(1) == 1\n    assert parabola_vertex(2) == 1\n    assert parabola_vertex(3) == 2\n    assert parabola_vertex(4) == 2\n    assert parabola_vertex(5) == 3\n    assert parabola_vertex(6) == 3\n    assert parabola_vertex(7) == 4\n    assert parabola_vertex(8) == 4\n    assert parabola_vertex(9) == 5\n    assert parabola_vertex(10) == 5\n    assert parabola_vertex(11) == 6\n    assert parabola_vertex(12) == 6\n    assert parabola_vertex(13) == 7\n    assert parabola_vertex(14) == 7\n    assert parabola_vertex(15) == 8\n    assert parabola_vertex(16) == 8\n    assert parabola_vertex(17) == 9\n    assert parabola_vertex(18) == 9\n    assert parabola_vertex(19) == 10\n    assert parabola_vertex(20) == 10\n    assert parabola_vertex(21) == 10\n    assert parabola_vertex(22) == 10\n    assert parabola_vertex(23) == 10\n    assert parabola_vertex(24) == 10\n    assert parabola_vertex(25) == 10\n    assert parabola_vertex(26) == 10\n    assert parabola_vertex(27) == 10",
    "class Solution(object):\n    def parabola(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x == 0 and y == 0:\n            return 0\n        if x == 0 and y < 0:\n            return 1\n        if x < 0 and y == 0:\n            return 2\n        if x < 0 and y < 0:\n            return 3\n        if x < 0 and y > 0:\n            return 4\n        if x > 0 and y > 0:\n            return 5\n        if x > 0 and y < 0:\n            return 6\n        if x > 0 and y == 0:\n            return 7\n        if x > 0 and y > 0:\n            return 8\n        return 9\n\n\nif __name__ == \"__main__\":\n    print(Solution().parabola(0, 0))",
    "import math\n\ndef parabola(a, b, c):\n    \"\"\"\n    Input: a, b, c\n    Output:\n    a, b, c\n    \"\"\"\n    x = (math.sqrt(a ** 2 - 4 * b * c)) / (2 * b)\n    y = -a / 2 + x ** 2\n    return x, y\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Input: a, b, c\n    Output:\n    x, y\n    \"\"\"\n    x, y = parabola(a, b, c)\n    return x, y\n\ndef test_parabola():\n    \"\"\"\n    Input: a, b, c\n    Output:\n    a, b, c\n    \"\"\"\n    assert parabola(1, 1, 1) == (1, 0, 0)\n    assert parabola(1, 1, 2) == (1, 1, 0)\n    assert parabola(1, -2, -2) == (1, -2, -2)\n    assert parabola(1, -1, -1) == (1, -1, -1)\n    assert parabola(2, 3, 4) == (2, -3, 4)\n    assert parabola(4, -2, -3) == (4, -2, -3)\n    assert parabola(2, -4, -1) == (2, -4, -1)\n    assert parabola(3, -3, -2) == (3, -3, -2)\n    assert parabola(3, 1, 1) == (3, 1, 1)\n    assert parabola(3, 2, -1) == (3, 2, -1)\n    assert parabola(3, -1, -2) == (3, -1, -2)\n    assert parabola(3, -2, 1) == (3, -2, 1)\n\ndef test_parabola_vertex():\n    assert parabola_vertex(1, 1, 1) == (1, 0)\n    assert parabola_vertex(1, 1,",
    "import math\n\ndef find_vertex(a, b, c):\n    \"\"\"\n    a, b, c: coordinates of the parabola\n    return: the vertex of the parabola\n    \"\"\"\n    return (a * (a ** 2) + b * (b ** 2) + c * (c ** 2)) / 2\n\nif __name__ == \"__main__\":\n    a = 2\n    b = 3\n    c = 4\n    print(find_vertex(a, b, c))",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n\nclass Solution:\n    # @param {Point} p1\n    # @param {Point} p2\n    # @param {Point} p3\n    # @return {Point}\n    def getVertex(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: Point\n        \"\"\"\n        x1 = p1.x\n        y1 = p1.y\n        x2 = p2.x\n        y2 = p2.y\n        x3 = p3.x\n        y3 = p3.y\n        \n        a = (x3 - x2) * (y1 - y2) - (x1 - x2) * (y3 - y2)\n        b = (x1 - x2) * (y1 - y2) - (x1 - x2) * (y1 - y3)\n        c = (x1 - x2) * (y1 - y2) - (x2 - x3) * (y1 - y2)\n        \n        if b == 0:\n            return None\n        \n        x = a / b\n        y = c / b\n        \n        if x > 0 and x < x1:\n            return Point(x, y)\n        elif x < 0 and x > x3:\n            return Point(x, y)\n        elif y > 0 and y < y1:\n            return Point(x, y)\n        elif y < 0 and y > y3:\n            return Point(x, y)\n        else:\n            return None",
    "import math\n\ndef parabola(x):\n    \"\"\"\n    Parabola equation: y = ax^2 + bx + c\n\n    Input: x = x value\n          a = coefficient of x^2\n          b = coefficient of x\n          c = coefficient of 1\n    Output: vertex of the parabola\n    \"\"\"\n    return ((a * x) ** 2 + (b * x) + c) / (2 * a)\n\ndef parabola_roots(a, b, c):\n    \"\"\"\n    Find roots of the parabola equation.\n\n    Input: a = coefficient of x^2\n          b = coefficient of x\n          c = coefficient of 1\n    Output: list of roots\n    \"\"\"\n    return [x / math.sqrt(a) for x in range(0, 10)]\n\ndef test_parabola():\n    assert parabola(0) == 0\n    assert parabola(1) == 0\n    assert parabola(2) == 0\n    assert parabola(3) == 0\n    assert parabola(4) == 0\n    assert parabola(5) == 0\n    assert parabola(6) == 0\n    assert parabola(7) == 0\n    assert parabola(8) == 0\n    assert parabola(9) == 0\n    assert parabola(10) == 0\n    assert parabola(11) == 0\n    assert parabola(12) == 0\n    assert parabola(13) == 0\n    assert parabola(14) == 0\n    assert parabola(15) == 0\n    assert parabola(16) == 0\n    assert parabola(17) == 0\n    assert parabola(18) == 0\n    assert parabola(19) == 0\n    assert parabola(20) == 0\n    assert parabola(21) == 0\n    assert parabola(22) == 0\n    assert parabola(23) == 0\n    assert parabola(24) == 0\n    assert parabola(25) == 0\n    assert parabola(26) == 0\n    assert parabola(27) == 0\n    assert parabola(28",
    "def parabola_vertex(parabola):\n    \"\"\"\n    parabola is a list of x values and y values.\n    parabola[0] is the start point and parabola[-1] is the end point.\n    Return the vertex of the parabola.\n    \"\"\"\n    x, y = parabola[0], parabola[-1]\n    for i in range(len(parabola) - 1):\n        x, y = parabola[i], parabola[i + 1]\n        if y > x ** 2:\n            return i\n    return -1\n\nprint(parabola_vertex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "# https://leetcode.com/problems/parabola-vertex/discuss/162828/C++-Python-Code-Accepted-Solution-in-O(n)\n\n# Definition for a point.\nclass Point:\n    def __init__(self, x=0.0, y=0.0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def parabolaVertex(self, p0, p1, p2):\n        \"\"\"\n        :type p0: Point\n        :type p1: Point\n        :type p2: Point\n        :rtype: Point\n        \"\"\"\n        # https://www.youtube.com/watch?v=KiQq2G2u_cU\n        # https://www.youtube.com/watch?v=n2MvzBt6uX4\n        # https://www.youtube.com/watch?v=Xzsz9jwJUx8\n        # https://www.youtube.com/watch?v=J7sZV3L8u4M\n        # https://www.youtube.com/watch?v=R5YbNqFJzW0\n        # https://www.youtube.com/watch?v=x8Hn5ZoQvA4\n        # https://www.youtube.com/watch?v=3z_Vxz5_sXU\n        # https://www.youtube.com/watch?v=Dk3Y9LcC3J8\n        # https://www.youtube.com/watch?v=Yd0VfLZL0Zo\n        # https://www.youtube.com/watch?v=mjNQkvxqE0Y\n        # https://www.youtube.com/watch?v=Lc6_QeCz8Jk\n        # https://www.youtube.com/watch?v=8yP5_yYhG6w\n        # https://www.youtube.com/watch?v=1",
    "import math\nimport sys\nimport time\n\nclass Parabola:\n    \"\"\"\n    Represent a parabola.\n    \"\"\"\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return \"parabola of coordinates (%g, %g) and (%g, %g)\" % (self.a, self.b, self.c, self.c)\n\n    def __eq__(self, other):\n        return (self.a == other.a and self.b == other.b and self.c == other.c)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __mul__(self, other):\n        \"\"\"\n        Multiply parabola by another.\n\n        >>> parabola(2, 3, 4) * parabola(5, 6, 7)\n        parabola(15, 10, 8)\n        \"\"\"\n        return Parabola(self.a * other.a + self.b * other.c,\n                        self.b * other.b + self.c * other.c,\n                        self.a * other.c + self.b * other.b)\n\n    def __add__(self, other):\n        \"\"\"\n        Add another parabola to self.\n\n        >>> parabola(2, 3, 4) + parabola(5, 6, 7)\n        parabola(7, 8, 9)\n        \"\"\"\n        return Parabola(self.a + other.a,\n                        self.b + other.b,\n                        self.c + other.c)\n\n    def __sub__(self, other):\n        \"\"\"\n        Subtract another parabola from self.\n\n        >>> parabola(2, 3, 4) - parabola(5, 6, 7)\n        parabola(3, 4, 5)\n        \"\"\"\n        return Parabola(self.a - other.a,\n                        self.b - other.b,\n                        self.c - other.c)\n\n    def __neg__(self):\n        \"\"\"",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def parabola(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: Point\n        \"\"\"\n        x = p.x\n        y = p.y\n        a = (x*x + y*y)/2\n        b = (x*x*y + y*y*y)/4\n        c = x*x*x + y*y*y - a*a - b*b\n        s = (x*x*x + y*y*y) / (2*a*a)\n        t = (x*x*y + y*y*x)/(2*a*b)\n        #print a, b, c, s, t\n        if c == 0:\n            return Point(0,0)\n        if c < 0:\n            return Point(-1, -1)\n        if c > 0:\n            return Point(1, 1)\n        if abs(s) < 1e-6:\n            return Point(t, t)\n        if abs(t) < 1e-6:\n            return Point(s, s)\n        if abs(s - t) < 1e-6:\n            return Point(s, s)\n        if abs(t - 1) < 1e-6:\n            return Point(s, s)\n        return Point(s, t)\n\np = Point(1, 1)\np = Point(1, 1)\nprint Solution().parabola(p)",
    "import math\nimport time\n\n\ndef parabola(a, b, c, x):\n    \"\"\"\n    Input:\n    a = the constant\n    b = the constant\n    c = the constant\n    x = the value of x\n    Output:\n    the value of x\n    \"\"\"\n    return (a * x ** 2 + b * x + c) / (2 * x ** 2 + 1)\n\n\ndef parabola_solve(a, b, c, x0):\n    \"\"\"\n    Input:\n    a = the constant\n    b = the constant\n    c = the constant\n    x0 = the value of x0\n    Output:\n    the value of x\n    \"\"\"\n    while True:\n        x = x0 - (b * x0 + c) / (2 * a * x0 + 1)\n        if parabola(a, b, c, x) == x:\n            return x\n        x0 = x",
    "from math import sqrt\n\n\ndef find_parabola_vertex(a, b, c):\n    \"\"\"\n    Input: a, b, c are the parameters of the parabola.\n    Output: the vertex of the parabola.\n    \"\"\"\n    return (a * a - 3 * b) / 2 * sqrt(a) + sqrt(a) * (b - sqrt(a * a - 3 * b)) / 2\n\n\nif __name__ == \"__main__\":\n    a, b, c = input().split()\n    a, b, c = map(float, (a, b, c))\n    print(find_parabola_vertex(a, b, c))",
    "def parabola(x, y):\n    \"\"\"\n    x and y are the coordinates of a point on a parabola.\n    Return the coordinates of the vertex of the parabola.\n    \"\"\"\n    # TODO: write the code\n    return (x, y)\n\nif __name__ == \"__main__\":\n    x = float(input(\"Enter x coordinate: \"))\n    y = float(input(\"Enter y coordinate: \"))\n    print(parabola(x, y))",
    "import math\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    a: The value of the x coordinate.\n    b: The value of the y coordinate.\n    c: The value of the x coordinate.\n\n    return: The vertex.\n    \"\"\"\n    if c == 0:\n        return a\n    if c == 0 and b == 0:\n        return 0\n    else:\n        return (a + b) / 2\n\nif __name__ == '__main__':\n    print parabola_vertex(4, 4, 4)",
    "class Solution:\n    # @return an integer\n    def getVertex(self, a, b, c):\n        return -b/2\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getVertex(a=2, b=1, c=4))\n    print(s.getVertex(a=1, b=2, c=4))\n    print(s.getVertex(a=2, b=4, c=4))",
    "from math import sqrt\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    :param a: The first parameter of the parabola.\n    :param b: The second parameter of the parabola.\n    :param c: The third parameter of the parabola.\n    :return: The vertex of the parabola.\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef main():\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n    a = float(input())\n    b = float(input())\n    c = float(input())\n    print(parabola_vertex(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# -*- coding: utf-8 -*-\n\n# https://leetcode.com/problems/parabola-vertices/description/\n\n'''\nGiven the equation of a parabola y = ax\u00b2 + bx + c, where a, b, and c are\nreal numbers represented by a list of length 3, return the vertices of the\nparabola.\n\nExample 1:\n\nInput: [[2,1,3],[-1,3,1],[-2,2,4]]\nOutput: [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4]]\nExplanation:\nThe parabola is y = a x\u00b2 + b x + c, where a = 2, b = -1, and c = 3.\n\nExample 2:\n\nInput: [[1,1,1],[1,1,0]]\nOutput: [[0,0],[0,1],[1,1],[1,0]]\nExplanation:\nThe parabola is y = a x\u00b2 + b x + c, where a = 1, b = 1, and c = 0.\n'''\n\n'''\nsolution 1:\n\nclass Solution:\n    def parabolaVertices(self, equation):\n        \"\"\"\n        :type equation: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        x = [0] * 3\n        y = [0] * 3\n        for i in range(len(equation)):\n            x[i] = x[i] + equation[i][0] * x[i + 1] + equation[i][1] * x[i + 2] + equation[i][2]\n            y[i] = y[i] + equation[i][0] * y[i + 1] + equation[i][1] * y[i + 2] + equation[i][2]\n\n        return [[0] * 3, [1] * 3, [2] * 3]\n'''\n\nclass Solution:\n    def parabolaVertices(self, equation):\n        \"\"\"\n        :type equation: List[List[int]]",
    "class Solution:\n    \"\"\"\n    @param: points: a list of points\n    @return: a tuple of (x, y)\n    \"\"\"\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if len(points) == 1:\n            return points[0]\n        x = [0]\n        y = [0]\n        for i in range(1, len(points)):\n            x.append(x[i-1] + (points[i][0] - points[i-1][0])/(points[i][1] - points[i-1][1]))\n            y.append(y[i-1] + (points[i][1] - points[i-1][1])/(points[i][0] - points[i-1][0]))\n        x.append(points[-1][0])\n        y.append(points[-1][1])\n        # print(x)\n        # print(y)\n        for i in range(len(points)):\n            x[i] = x[i]*x[i] + y[i]*y[i]\n        # print(x)\n        # print(y)\n        # print(x[len(points)-1])\n        # print(y[len(points)-1])\n        for i in range(len(points)):\n            x[i] = x[i]/x[len(points)-1]\n            y[i] = y[i]/x[len(points)-1]\n        # print(x)\n        # print(y)\n        return x[len(points)-1], y[len(points)-1]",
    "def parabola_vertex(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    # http://www.cnblogs.com/zxcvbn/p/5676597.html\n    if a == 0:\n        return b\n    return -c/2.0/a\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert parabola_vertex(0, 0, 0) == 0, \"parabola_vertex(0, 0, 0) == 0\"\n    assert parabola_vertex(1, 0, 0) == 1, \"parabola_vertex(1, 0, 0) == 1\"\n    assert parabola_vertex(0, 1, 0) == 1, \"parabola_vertex(0, 1, 0) == 1\"\n    assert parabola_vertex(1, 1, 0) == 2, \"parabola_vertex(1, 1, 0) == 2\"\n    assert parabola_vertex(0, 0, 1) == 0, \"parabola_vertex(0, 0, 1) == 0\"\n    assert parabola_vertex(1, 0, 1) == 1, \"parabola_vertex(1, 0, 1) == 1\"\n    assert parabola_vertex(0, 1, 1) == 2, \"parabola_vertex(0, 1, 1) == 2\"\n    assert parabola_vertex(1, 1, 1) == 3, \"parabola_vertex(1, 1, 1) == 3\"",
    "import math\n\ndef parabola(a, b, c, x):\n    \"\"\"\n    Write a function that returns the vertex of a parabola.\n    a, b, c are coefficients of the equation ax^2 + bx + c = 0.\n    x is the variable in the equation.\n    \"\"\"\n    return (a * x ** 2) / 2 + (b * x) / 2 + c\n\n\ndef test_parabola(a, b, c, x):\n    \"\"\"\n    Test case for parabola.\n    \"\"\"\n    assert parabola(a, b, c, x) == x\n\ndef test_parabola_values():\n    \"\"\"\n    Test values of parabola.\n    \"\"\"\n    assert parabola(1, 0, 0, 1) == 1\n    assert parabola(1, 0, 0, -1) == -1\n    assert parabola(1, 1, 0, 2) == 0\n    assert parabola(1, 1, 0, -2) == 0\n    assert parabola(1, 0, 1, 2) == 2\n    assert parabola(1, 0, 1, -2) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert parabola(1, 0, 1, -1) == 2\n    assert",
    "from math import sqrt\n\ndef parabola(a,b,c):\n    return (a*a*a - b*b + c)/(2*a)\n\ndef main():\n    print parabola(1,2,3)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\nclass Solution(object):\n    \"\"\"\n    @param points: A list of points\n    @return: A list of vertex\n    \"\"\"\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: List[Point]\n        \"\"\"\n        if not points:\n            return []\n        sx, sy = points[0].x, points[0].y\n        for i in xrange(1, len(points)):\n            sx, sy = (sx * (points[i].y - points[i - 1].y) -\n                      sy * (points[i].x - points[i - 1].x) +\n                      points[i - 1].x * points[i].y -\n                      points[i - 1].y * points[i].x) / 2, \\\n                     (sy * (points[i].x - points[i - 1].x) -\n                      sx * (points[i].y - points[i - 1].y) +\n                      points[i - 1].y * points[i].x -\n                      points[i - 1].x * points[i].y) / 2\n        return [Point(sx, sy)]\n\nclass Point(object):\n    \"\"\"\n    @param x, y: coordinate of point\n    \"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return str(self.x) + \",\" + str(self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Solution2(object):\n    \"\"\"\n    @param points: A list of points\n    @return: A list of vertex\n    \"\"\"\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: List[Point]\n        \"\"\"\n        if not points:\n            return []\n        minx = maxx = points[0].x\n        miny = maxy = points[0].y\n        for i in xrange(1, len(points)",
    "# https://www.youtube.com/watch?v=Qg4iJ3JKl0c\n# https://www.youtube.com/watch?v=cg3Q1M8iC4U\n# https://www.youtube.com/watch?v=tW_XrS9LF2c\ndef find_parabola_vertex(x, y):\n    \"\"\"\n    Finds the vertex of the parabola with a given x and y value.\n    \"\"\"\n    # TODO: Implement the solution.\n    return 0\n\n# https://www.youtube.com/watch?v=YmNjwjfB6hg\n# https://www.youtube.com/watch?v=X3YQqHhQxl0\ndef find_parabola_vertex_2(x, y):\n    \"\"\"\n    Finds the vertex of the parabola with a given x and y value.\n    \"\"\"\n    # TODO: Implement the solution.\n    return 0\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_parabola_vertex(0, 0) == 0, \"0th vertex\"\n    assert find_parabola_vertex(1, 0) == 1, \"1th vertex\"\n    assert find_parabola_vertex(1, 1) == 0, \"2nd vertex\"\n    assert find_parabola_vertex(1, 2) == 1, \"3rd vertex\"\n    assert find_parabola_vertex(1, 3) == 1, \"4th vertex\"\n    assert find_parabola_vertex(3, 3) == 3, \"5th vertex\"\n    assert find_parabola_vertex(4, 3) == 4, \"6th vertex\"\n    assert find_parabola_vertex(5, 3) == 4, \"7th vertex\"\n    assert find_parabola_vertex(6, 3) == 5, \"8th vertex\"\n    assert find_parabola_vertex(7, 3) == 6, \"9th vertex\"\n    assert",
    "import numpy as np\n\ndef parabola(x, y):\n    \"\"\"\n    Inputs:\n    x, y - coordinates of the vertex of the parabola.\n    \n    Output:\n    vertex - coordinates of the vertex of the parabola.\n    \"\"\"\n    x0, y0 = 0, 0\n    x1, y1 = 0, 0\n    x2, y2 = 0, 0\n    x3, y3 = 0, 0\n    x4, y4 = 0, 0\n    x5, y5 = 0, 0\n    x6, y6 = 0, 0\n    x7, y7 = 0, 0\n    x8, y8 = 0, 0\n    x9, y9 = 0, 0\n    x10, y10 = 0, 0\n    x11, y11 = 0, 0\n    x12, y12 = 0, 0\n    x13, y13 = 0, 0\n    x14, y14 = 0, 0\n    x15, y15 = 0, 0\n    x16, y16 = 0, 0\n    x17, y17 = 0, 0\n    x18, y18 = 0, 0\n    x19, y19 = 0, 0\n    x20, y20 = 0, 0\n    x21, y21 = 0, 0\n    x22, y22 = 0, 0\n    x23, y23 = 0, 0\n    x24, y24 = 0, 0\n    x25, y25 = 0, 0\n    x26, y26 = 0, 0\n    x27, y27 = 0, 0\n    x28, y28 = 0, 0\n    x29, y29 = 0, 0\n    x30, y30 = 0, 0\n    x31, y31 = 0, 0\n    x32, y32 = 0, 0\n    x33, y33 = 0, 0\n    x34, y34 = 0, 0\n    x35, y35 = 0, 0\n    x36, y36 = 0, 0\n    x37, y37 = 0, 0\n    x38, y38 = 0, 0\n    x39, y39 = 0, 0\n    x40, y40",
    "import math\n\ndef parabola(x):\n    \"\"\"\n    x is the input value for the parabola\n    returns the vertex of the parabola\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 2\n    else:\n        return (x + 1) * parabola(x - 1) / 2\n\ndef main():\n    \"\"\"\n    Main function to test the function\n    \"\"\"\n    print parabola(0.5)\n\nif __name__ == \"__main__\":\n    main()",
    "def parabola_vertex(a, b, c, x):\n    \"\"\"\n    Input: a, b, c, x\n    Output: the vertex of the parabola\n    \"\"\"\n    \n    x2 = x * x\n    y2 = x2 * (a + b * x)\n    z2 = x2 * (b * b - c)\n    \n    if y2 > z2:\n        return x\n    elif y2 < z2:\n        return -x\n    else:\n        return -b / (2 * a)\n\nif __name__ == '__main__':\n    print parabola_vertex(1, 2, 3, -1)\n    print parabola_vertex(1, 2, 3, 1)\n    print parabola_vertex(1, 2, 3, 2)\n    print parabola_vertex(1, 2, 3, 3)\n    print parabola_vertex(1, 2, 3, 4)",
    "def parabola_vertex(height, width):\n    \"\"\"\n    height: the height of the parabola\n    width: the width of the parabola\n\n    return: the vertex of the parabola\n    \"\"\"\n    return width / 2 - height / 4\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(3, 5))\n    print(parabola_vertex(2, 5))",
    "import math\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Input: a, b, c - coefficients of the parabola\n    Output: the vertex of the parabola\n    \"\"\"\n    x = (b - a**2) / (2*c)\n    y = (a * b - c**2) / (2*c)\n    return x, y\n\ndef parabola_vertex_2(a, b, c):\n    \"\"\"\n    Input: a, b, c - coefficients of the parabola\n    Output: the vertex of the parabola\n    \"\"\"\n    x = (b - a**2) / (2*c)\n    y = (a * b - c**2) / (2*c)\n    return x, y\n\ndef parabola_vertex_3(a, b, c):\n    \"\"\"\n    Input: a, b, c - coefficients of the parabola\n    Output: the vertex of the parabola\n    \"\"\"\n    x = (b - a**2) / (2*c)\n    y = (a * b - c**2) / (2*c)\n    return x, y\n\ndef parabola_vertex_4(a, b, c):\n    \"\"\"\n    Input: a, b, c - coefficients of the parabola\n    Output: the vertex of the parabola\n    \"\"\"\n    x = (b - a**2) / (2*c)\n    y = (a * b - c**2) / (2*c)\n    return x, y\n\ndef main():\n    a, b, c = input().split(' ')\n    a, b, c = [float(x) for x in a.split('x')]\n    print(parabola_vertex(a, b, c))\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/parabola/problem\n# https://www.hackerrank.com/challenges/parabola/submissions/code/15011530\n\n\ndef parabola(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    if a == b:\n        return c\n    elif a > b:\n        return parabola(b, a, c)\n    else:\n        return parabola(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(parabola(a, b, c))",
    "def parabola(x):\n    \"\"\"\n    Input: x (float)\n    Output: vertex (float)\n    \"\"\"\n    return x*x\n\ndef main():\n    print(parabola(2.5))\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    \"\"\"\n    @param n: the number of points\n    @return: the index of the vertex\n    \"\"\"\n    def parabola(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def f(x):\n            return x ** 2 + x ** 2 - 4 * x\n\n        left_bound = 0\n        right_bound = n - 1\n        while left_bound < right_bound:\n            mid = left_bound + (right_bound - left_bound) // 2\n            if f(mid) > 0:\n                right_bound = mid - 1\n            else:\n                left_bound = mid + 1\n        return left_bound\n\nif __name__ == \"__main__\":\n    assert Solution().parabola(2) == 0\n    assert Solution().parabola(3) == 1\n    assert Solution().parabola(4) == 2\n    assert Solution().parabola(5) == 3\n    assert Solution().parabola(6) == 4\n    assert Solution().parabola(7) == 5\n    assert Solution().parabola(8) == 6\n    assert Solution().parabola(9) == 7\n    assert Solution().parabola(10) == 8\n    assert Solution().parabola(11) == 9\n    assert Solution().parabola(12) == 10\n    assert Solution().parabola(13) == 11\n    assert Solution().parabola(14) == 12\n    assert Solution().parabola(15) == 13\n    assert Solution().parabola(16) == 14\n    assert Solution().parabola(17) == 15\n    assert Solution().parabola(18) == 16\n    assert Solution().parabola(19) == 17\n    assert Solution().parabola(20) == 18\n    assert Solution().parabola(21) == 19\n    assert Solution().parabola(22) == 20\n    assert Solution().parabola(23) == 21\n    assert Solution().parabola(24) == 22\n    assert Solution().parabola(25) == 23\n    assert Solution().parabola(26) == 24\n    assert Solution().parabola(",
    "import math\n\n\ndef parabola(y, x):\n    \"\"\"\n    :type y: int\n    :type x: int\n    :rtype: int\n    \"\"\"\n    return math.sqrt(y**2 - x**2)\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    print(parabola(2, 2))\n    print(parabola(2, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "def parabola_vertex(a, b, c, x):\n    \"\"\"\n    Input:\n        a = coefficient of x^2\n        b = coefficient of x\n        c = coefficient of 1\n        x = x-coordinate\n    Output:\n        vertex of the parabola\n    \"\"\"\n    if a == 0 and b == 0:\n        return c/x\n    else:\n        return (a*x + b)*x + c\n\n\"\"\"\nTest cases\n\"\"\"\na = 1\nb = 0\nc = 0\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 1\nc = 0\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 1\nc = 1\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 1\nc = 1\nx = 1\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 2\nc = 0\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 2\nc = 1\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 2\nc = 2\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 2\nc = 2\nx = 1\nassert parabola_vertex(a, b, c, x) == 0\na = 1\nb = 2\nc = 2\nx = 2\nassert parabola_vertex(a, b, c, x) == 0\na = 2\nb = 1\nc = 0\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 2\nb = 1\nc = 1\nx = 0\nassert parabola_vertex(a, b, c, x) == 0\na = 2\nb = 1\nc = 1\nx",
    "import math\nfrom collections import defaultdict\n\nclass Vertex(object):\n    def __init__(self, x, y, r):\n        self.x = x\n        self.y = y\n        self.r = r\n\n    def __str__(self):\n        return \"%f %f %f\" % (self.x, self.y, self.r)\n\nclass Parabola(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.x1 = None\n        self.x2 = None\n        self.x3 = None\n\n    def get_vertex(self, x):\n        if self.x1 is None:\n            self.x1 = Vertex(x, 0, 0)\n            self.x2 = Vertex(x, math.sqrt(3), 0)\n            self.x3 = Vertex(x, -math.sqrt(3), 0)\n            self.x1.r = self.x2.r = self.x3.r = 0\n        if x < self.x1.x:\n            return self.x1\n        elif x < self.x2.x:\n            return self.x2\n        elif x < self.x3.x:\n            return self.x3\n        return self.x1\n\n    def is_parabola(self, x):\n        if x > self.a and x < self.b:\n            return True\n        elif x < self.b:\n            return False\n        elif x > self.a:\n            return False\n\nclass Solution(object):\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Vertex]\n        :rtype: Vertex\n        \"\"\"\n        points.sort(key=lambda p: (p.x, p.y))\n        left = right = points[0]\n        for i in range(1, len(points)):\n            if points[i].x - left.x > right.r:\n                left = points[i]\n            elif points[i].x - left.x <",
    "def parabola_vertex(a, b):\n    \"\"\"\n    Input:\n        a = x^2 + b\n        b = 0\n    Output:\n        x = -b/2a\n    \"\"\"\n    return -b/2.0/a\n\nif __name__ == \"__main__\":\n    a = 4\n    b = 0\n    print parabola_vertex(a, b)",
    "class Solution:\n    \"\"\"\n    @param: A: A list of points\n    @return: A list of points\n    \"\"\"\n    def parabolaVertices(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        # write your code here\n        # first sort the points\n        # then find the min/max x value and y value\n        # then find the intersection of the parabola\n        # then find the vertex of the parabola\n        # then sort the points by x and y\n        # finally return the points\n        sortedA = sorted(A)\n        x = sortedA[0][0]\n        y = sortedA[0][1]\n        minX = sortedA[0][0]\n        maxX = sortedA[0][0]\n        minY = sortedA[0][1]\n        maxY = sortedA[0][1]\n        for i in range(1, len(sortedA)):\n            if sortedA[i][0] < minX:\n                minX = sortedA[i][0]\n            elif sortedA[i][0] > maxX:\n                maxX = sortedA[i][0]\n            if sortedA[i][1] < minY:\n                minY = sortedA[i][1]\n            elif sortedA[i][1] > maxY:\n                maxY = sortedA[i][1]\n        x1 = maxX\n        y1 = (maxY - minY) / (x - x1)\n        x2 = minX\n        y2 = (maxY - minY) / (x2 - x1)\n        inter = [(x1 + x2) / 2, (y1 + y2) / 2]\n        # now sort the points by x and y\n        sortedA = sorted(sortedA)\n        # find the vertex of the parabola\n        # find the vertex of the parabola\n        # find the vertex of the parabola\n        # finally return the points\n        return sortedA\n\n\nif __name__ == '__main__':\n    A = [[0, 0], [",
    "import math\nfrom typing import List\n\n\nclass Solution:\n    def parabola(self, x: int, y: int, x0: int, y0: int, x1: int, y1: int, x2: int, y2: int) -> int:\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type x0: int\n        :type y0: int\n        :type x1: int\n        :type y1: int\n        :type x2: int\n        :type y2: int\n        :rtype: int\n        \"\"\"\n        # y = y0 + (y2 - y0) * (x - x0) / (x1 - x0)\n        # x = x0 + (x2 - x0) * (y - y0) / (y1 - y0)\n        y = y0 + (y2 - y0) * (x - x0) / (x1 - x0)\n        x = x0 + (x2 - x0) * (y - y0) / (y1 - y0)\n        return x\n\n\nif __name__ == \"__main__\":\n    assert Solution().parabola(0, 0, 1, 2, 3, 4, 5, 6) == 6\n    assert Solution().parabola(1, 1, 2, 2, 3, 4, 5, 6) == 5\n    assert Solution().parabola(2, 2, 2, 2, 3, 4, 5, 6) == 4\n    assert Solution().parabola(3, 3, 2, 2, 3, 4, 5, 6) == 3\n    assert Solution().parabola(4, 4, 2, 2, 3, 4, 5, 6) == 2\n    assert Solution().parabola(5, 5, 2, 2, 3, 4, 5, 6) == 1\n    assert Solution().parabola(6, 6, 2, 2, 3, 4, 5, 6) == 0\n    assert Solution().parabola(7, 7, 2, 2, 3, 4, 5, 6) == -1\n    assert Solution().parabola(8, 8, 2, 2, 3, 4, 5, 6",
    "def parabola(a, b, c):\n    \"\"\"\n    a, b, c : coefficients of the equation of the parabola\n    \"\"\"\n    # a = (y2-y1)/(x2-x1)\n    # b = y1 - a*x1\n    # c = y2 - a*x2\n    # x = (y-b)/a\n    # y = a*x + b\n    return a*x + b\n\n\ndef find_parabola(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    :param a: coefficients of the equation of the parabola\n    :param b: y1 - a*x1\n    :param c: y2 - a*x2\n    :return: vertex of the parabola\n    \"\"\"\n    # a = (y2-y1)/(x2-x1)\n    # b = y1 - a*x1\n    # c = y2 - a*x2\n    # x = (y-b)/a\n    # y = a*x + b\n    # x1 = (-b + sqrt(b*b - 4*a*c))/(2*a)\n    # x2 = (-b - sqrt(b*b - 4*a*c))/(2*a)\n    x1 = (-b + parabola(a, b, c))/(2*a)\n    x2 = (-b - parabola(a, b, c))/(2*a)\n    return min(x1, x2)\n\n\nif __name__ == '__main__':\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    print('The vertex of the parabola is', find_parabola(a, b, c))",
    "class Solution:\n    def parabola(self, a, b, c):\n        \"\"\"\n        :type a: float\n        :type b: float\n        :type c: float\n        :rtype: float\n        \"\"\"\n        if a > b or b > c:\n            return 0\n        if b == c:\n            return a\n        if a == b:\n            return a\n        if b == c:\n            return b\n        if a > c:\n            return a - b * (a - b) / (b - c)\n        else:\n            return b - c * (b - c) / (c - a)",
    "# Definition for a parabola.\nclass Parabola(object):\n    def __init__(self, x1, x2, y1, y2):\n        \"\"\"\n        :type x1: int\n        :type x2: int\n        :type y1: int\n        :type y2: int\n        \"\"\"\n        self.x1 = x1\n        self.x2 = x2\n        self.y1 = y1\n        self.y2 = y2\n\n    def __repr__(self):\n        return \"Parabola(x1={}, x2={}, y1={}, y2={})\".format(self.x1, self.x2, self.y1, self.y2)\n\n    def get_vertex(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return (self.x1 + self.x2) / 2\n\n\nclass Solution(object):\n    def parabola(self, x1, x2, y1, y2):\n        \"\"\"\n        :type x1: int\n        :type x2: int\n        :type y1: int\n        :type y2: int\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        if (x1 - x2) * (y1 - y2) > 0:\n            return -1\n\n        # 2.1\n        # y = -1 * x / 2\n        # y = -1 * x2 / 2\n        # y = -1 * x1 / 2\n        # y = -1 * x2 / 2 + x1 / 2\n        # y = -1 * x1 / 2 + x2 / 2\n        # y = -1 * x2 / 2 + x1 / 2 + x2 / 2\n        # y = -1 * x1 / 2 + x2 / 2 + x1 / 2\n        # y = -1 * x1 / 2 + x2 / 2 + x1 / 2 + x2 / 2\n        # y = -1 * x1 / 2 + x2 / 2 + x1 / 2 + x2 / 2 + x2 / 2\n        # y = -1 * x2 / 2 + x1 / 2 + x2",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: Point\n        \"\"\"\n        if len(points) == 1:\n            return points[0]\n        \n        if len(points) == 2:\n            if points[0].y == points[1].y:\n                return points[0]\n            if points[0].y < points[1].y:\n                return points[0]\n            return points[1]\n        \n        # find the vertex with the smallest y\n        min_y = points[0].y\n        for p in points:\n            if p.y < min_y:\n                min_y = p.y\n        \n        # find the vertex with the largest y\n        max_y = points[0].y\n        for p in points:\n            if p.y > max_y:\n                max_y = p.y\n        \n        # calculate the slope\n        if max_y - min_y == 0:\n            return points[0]\n        slope = (points[1].y - points[0].y) / (points[1].x - points[0].x)\n        \n        # check whether the point is on the left or right of the parabola\n        if points[0].x > points[1].x:\n            if points[0].y > slope * points[0].x + points[0].y:\n                return points[0]\n            if points[1].y > slope * points[1].x + points[1].y:\n                return points[1]\n        else:\n            if points[0].y < slope * points[0].x + points[0].y:\n                return points[0]\n            if points[1].y < slope * points[1].x + points[1].y:\n                return points[1]",
    "from math import sqrt, fabs\nfrom sys import argv\n\ndef parabola(a, b, x):\n    return (a*x + b)*x\n\ndef main(a, b, x):\n    return parabola(a, b, x)\n\ndef main2(a, b, x):\n    return (a*x + b)*x\n\nif __name__ == '__main__':\n    a = float(argv[1])\n    b = float(argv[2])\n    x = float(argv[3])\n    print parabola(a, b, x)\n    print main(a, b, x)\n    print main2(a, b, x)",
    "# O(n^2)\n# O(n^2)\ndef parabola_vertex(a, b, c, d):\n    \"\"\"\n    Input:\n        a, b, c, d: the coefficients of the equation y = ax^2 + bx + c\n    Output:\n        the vertex of the parabola\n    \"\"\"\n    # a^2 + b^2 = c^2 + d^2\n    return (a**2 + b**2 - c**2 - d**2) / 2\n\n\n# O(n)\ndef parabola_vertex_naive(a, b, c, d):\n    \"\"\"\n    Input:\n        a, b, c, d: the coefficients of the equation y = ax^2 + bx + c\n    Output:\n        the vertex of the parabola\n    \"\"\"\n    # a^2 + b^2 = c^2 + d^2\n    return (a**2 + b**2 - c**2 - d**2) / (2 * a)\n\n\nif __name__ == '__main__':\n    # a, b, c, d = [0, 1, 2, 3]\n    a, b, c, d = [3, 4, 5, 6]\n    print(parabola_vertex(a, b, c, d))\n    print(parabola_vertex_naive(a, b, c, d))",
    "import math\n\n# https://www.hackerrank.com/challenges/parabola-vertex/problem\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\ndef parabola(a,b,c):\n    # a is the side of the parabola\n    # b is the height of the parabola\n    # c is the y-coordinate of the vertex\n    # x = a * (y - c)^2 / (b * y - 2 * c + b)\n    # x = a * (y - c)^2 / (b * y - 2 * c + b) + b * x\n    x = a * (y - c)**2 / (b * y - 2 * c + b) + b * x\n    return x\n\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\ndef parabola2(a,b,c):\n    # a is the side of the parabola\n    # b is the height of the parabola\n    # c is the y-coordinate of the vertex\n    # x = a * (y - c)^2 / (b * y - 2 * c + b)\n    # x = a * (y - c)^2 / (b * y - 2 * c + b) + b * x\n    x = a * (y - c)**2 / (b * y - 2 * c + b) + b * x\n    return x\n\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\n# https://www.hackerrank.com/challenges/parabola-vertex/submissions/code/14294974\ndef parabola3(a,b,c):\n    # a is the side",
    "# TODO\n# 1. Try to write a recursive function to find the vertex of a parabola.\n# 2. Try to write a function to find the vertex of a parabola using the\n#    numerical method.\n# 3. Try to write a function to find the vertex of a parabola using the\n#    algebraic method.\n# 4. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 5. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 6. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 7. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 8. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 9. Try to write a function to find the vertex of a parabola using the\n#    algebraic method using the numerical method.\n# 10. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 11. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 12. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 13. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 14. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 15. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 16. Try to write a function to find the vertex of a parabola using the\n#     algebraic method using the numerical method.\n# 17. Try to write a function to find the vertex of a par",
    "from math import sqrt\n\n\ndef parabola_vertex(a, b, c, x):\n    \"\"\"\n    x = a*x^2 + b*x + c\n    \"\"\"\n    return (x - b) / (2 * a)\n\n\ndef test_parabola_vertex():\n    assert parabola_vertex(1, 2, 3, 3) == 0\n    assert parabola_vertex(1, 2, 3, 2) == 1\n    assert parabola_vertex(1, 2, 3, 1) == 2\n\n\ndef main():\n    print(parabola_vertex(1, 2, 3, 3))\n\nif __name__ == \"__main__\":\n    main()",
    "def parabola(x):\n    a = -2 * x\n    b = x ** 2\n    return a * b / 2\n\nprint(parabola(-1))\nprint(parabola(0))\nprint(parabola(1))\nprint(parabola(2))\nprint(parabola(3))\nprint(parabola(4))\nprint(parabola(5))\nprint(parabola(6))\nprint(parabola(7))\nprint(parabola(8))\nprint(parabola(9))\nprint(parabola(10))\nprint(parabola(11))\nprint(parabola(12))\nprint(parabola(13))\nprint(parabola(14))\nprint(parabola(15))\nprint(parabola(16))\nprint(parabola(17))\nprint(parabola(18))\nprint(parabola(19))\nprint(parabola(20))\nprint(parabola(21))\nprint(parabola(22))\nprint(parabola(23))\nprint(parabola(24))\nprint(parabola(25))\nprint(parabola(26))\nprint(parabola(27))\nprint(parabola(28))\nprint(parabola(29))\nprint(parabola(30))\nprint(parabola(31))\nprint(parabola(32))\nprint(parabola(33))\nprint(parabola(34))\nprint(parabola(35))\nprint(parabola(36))\nprint(parabola(37))\nprint(parabola(38))\nprint(parabola(39))\nprint(parabola(40))\nprint(parabola(41))\nprint(parabola(42))\nprint(parabola(43))\nprint(parabola(44))\nprint(parabola(45))\nprint(parabola(46))\nprint(parabola(47))\nprint(parabola(48))\nprint(parabola(49))\nprint(parabola(50))\nprint(parabola(51))\nprint(",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point x={0}, y={1}>'.format(self.x, self.y)\n\nclass Solution:\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        x_max = max(map(lambda p: p.x, points))\n        x_min = min(map(lambda p: p.x, points))\n        y_max = max(map(lambda p: p.y, points))\n        y_min = min(map(lambda p: p.y, points))\n        for p in points:\n            if p.x < x_min:\n                x_min = p.x\n            if p.x > x_max:\n                x_max = p.x\n            if p.y < y_min:\n                y_min = p.y\n            if p.y > y_max:\n                y_max = p.y\n        a = (y_max - y_min) / (x_max - x_min)\n        b = y_max - a * x_max\n        return (b - y_min) / a",
    "import math\nfrom collections import Counter\n\nclass Parabola(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def get_vertex(self):\n        # formula\n        # x = (b - a) / (2 * c)\n        # y = (a * x - b) / c\n        # y = a * x - b\n        # x = (a * x - b) / c\n        # x = (a * x - b) / (c * c)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b)\n        # x = (a * x - b) / (a * a + b * b",
    "# Definition for a Parabola\nclass Parabola(object):\n    def __init__(self, x, y, h, a, b):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type h: int\n        :type a: int\n        :type b: int\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.h = h\n        self.a = a\n        self.b = b\n\n    def __repr__(self):\n        return \"Parabola(x=%d, y=%d, h=%d, a=%d, b=%d)\" % (self.x, self.y, self.h, self.a, self.b)\n\n    def __str__(self):\n        return \"x = %d, y = %d, h = %d, a = %d, b = %d\" % (self.x, self.y, self.h, self.a, self.b)\n\n    def get_x(self):\n        return self.x\n\n    def get_y(self):\n        return self.y\n\n    def get_h(self):\n        return self.h\n\n    def get_a(self):\n        return self.a\n\n    def get_b(self):\n        return self.b\n\n\nclass Solution(object):\n    def getVertex(self, parabola):\n        \"\"\"\n        :type parabola: Parabola\n        :rtype: int\n        \"\"\"\n        x1 = parabola.get_x()\n        y1 = parabola.get_y()\n        h = parabola.get_h()\n        a = parabola.get_a()\n        b = parabola.get_b()\n        x = -b - (y1 - a * x1) / h\n        y = -a * x - b * x1\n        return (x, y)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    parabola1 = Parabola(x=1, y=2, h=3, a=4, b=5)\n    parabola2",
    "# Definition for a parabola.\nclass Parabola(object):\n    def __init__(self, x1, y1, x2, y2):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type x2: int\n        :type y2: int\n        \"\"\"\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n    def __repr__(self):\n        return 'Parabola(%r, %r, %r, %r)' % (self.x1, self.y1, self.x2, self.y2)\n\nclass Solution(object):\n    def parabolaArea(self, x1, y1, x2, y2):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type x2: int\n        :type y2: int\n        :rtype: int\n        \"\"\"\n        x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n\ndef main():\n    # Output: 5\n    parabola = Parabola(1, 1, 3, 4)\n    print(Solution().parabolaArea(parabola))\n\nif __name__ == '__main__':\n    main()",
    "def parabola(x, y):\n    \"\"\"\n    Input:\n    x = the point of x-axis\n    y = the point of y-axis\n    Output:\n    the vertex of the parabola\n    \"\"\"\n\n    a = (x**2 + y**2)**(1/2)\n    b = (x**2 - y**2)**(1/2)\n    c = (x**2 + y**2 + 1)**(1/2)\n    d = (x**2 - y**2 + 1)**(1/2)\n    return (a, b, c, d)\n\nprint(parabola(1, 1))",
    "from __future__ import print_function\nimport math\n\n\ndef parabola(a, b, c, x):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    a, b, c are the coefficients of the equation ax^2 + bx + c = 0.\n    x is an initial guess.\n    \"\"\"\n    if a == 0:\n        return x\n    if b == 0:\n        return -c / a\n\n    d = -b / a\n    s = math.sqrt(d * d - 4 * c / a)\n    x1 = (-d - s) / 2\n    x2 = (-d + s) / 2\n    return x1 if x1 >= 0 else x2\n\n\nif __name__ == '__main__':\n    a = float(input('a = '))\n    b = float(input('b = '))\n    c = float(input('c = '))\n    x = float(input('x = '))\n\n    parabola(a, b, c, x)",
    "def find_parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of the parabola.\n\n    :param a: The x value of the left side of the parabola\n    :param b: The y value of the left side of the parabola\n    :param c: The x value of the right side of the parabola\n    :return: The x value of the vertex of the parabola\n    \"\"\"\n\n    if a == c:\n        return a\n    elif b == c:\n        return (a + c) / 2\n    elif a == b:\n        return (a + c) / 2\n    else:\n        return -1\n\ndef test_find_parabola_vertex():\n    assert find_parabola_vertex(1, 2, 3) == 1\n    assert find_parabola_vertex(2, 3, 4) == 3\n    assert find_parabola_vertex(2, 1, 3) == -1",
    "# Function definition\ndef parabola(a, b, c):\n    \"\"\"\n    Finds the vertex of a parabola.\n    \n    a - the co-ordinate of the y-axis.\n    b - the co-ordinate of the x-axis.\n    c - the co-ordinate of the vertex.\n    \"\"\"\n    if (a**2 + b**2) == (c**2 + (a + b)**2):\n        return c\n    else:\n        return None\n\n# Test\nif __name__ == '__main__':\n    # Test 1\n    a = 3\n    b = 4\n    c = 5\n    print parabola(a, b, c)\n    \n    # Test 2\n    a = 1\n    b = 2\n    c = 3\n    print parabola(a, b, c)\n    \n    # Test 3\n    a = -1\n    b = -2\n    c = -3\n    print parabola(a, b, c)\n    \n    # Test 4\n    a = 0\n    b = 0\n    c = 0\n    print parabola(a, b, c)\n    \n    # Test 5\n    a = -2\n    b = -4\n    c = -6\n    print parabola(a, b, c)\n    \n    # Test 6\n    a = -3\n    b = -6\n    c = -9\n    print parabola(a, b, c)\n    \n    # Test 7\n    a = -4\n    b = -8\n    c = -12\n    print parabola(a, b, c)\n    \n    # Test 8\n    a = -6\n    b = -12\n    c = -18\n    print parabola(a, b, c)\n    \n    # Test 9\n    a = -9\n    b = -18\n    c = -27\n    print parabola(a, b, c)\n    \n    # Test 10\n    a = -12\n    b = -27\n    c = -36\n    print parabola(a, b, c)",
    "import math\n\n\ndef parabola(x, a, b, c):\n    \"\"\"\n    x is the x coordinate, a, b, c are the coefficients\n    \"\"\"\n    if x == 0:\n        return 0\n    return a * x ** 2 + b * x + c\n\n\ndef parabola_vertex(x, a, b, c):\n    \"\"\"\n    x is the x coordinate, a, b, c are the coefficients\n    \"\"\"\n    return parabola(x, a, b, c) / (2 * a)\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    print(parabola(0, 1, 1, 1))\n    print(parabola_vertex(0, 1, 1, 1))\n    print(parabola(1, 1, 1, 1))\n    print(parabola_vertex(1, 1, 1, 1))\n    print(parabola(2, 1, 1, 1))\n    print(parabola_vertex(2, 1, 1, 1))\n    print(parabola(3, 1, 1, 1))\n    print(parabola_vertex(3, 1, 1, 1))\n    print(parabola(4, 1, 1, 1))\n    print(parabola_vertex(4, 1, 1, 1))\n    print(parabola(5, 1, 1, 1))\n    print(parabola_vertex(5, 1, 1, 1))\n    print(parabola(6, 1, 1, 1))\n    print(parabola_vertex(6, 1, 1, 1))\n    print(parabola(7, 1, 1, 1))\n    print(parabola_vertex(7, 1, 1, 1))\n    print(parabola(8, 1, 1, 1))\n    print(parabola_vertex(8, 1, 1, 1))\n    print(parabola(9, 1, 1, 1))\n    print(parabola_vertex(9, 1, 1, 1))\n    print(parabola(10, 1, 1, 1))\n    print(",
    "from math import *\n\ndef parabola(a, b, c, x):\n    \"\"\"\n    a, b, c: coefficients of parabola\n    x: point to find\n    return: vertex of parabola\n    \"\"\"\n    d = a*x**2 + b*x + c\n    if d <= 0:\n        return x\n    elif d >= 1:\n        return 1\n    else:\n        return (a*x**2 + b*x + c)/d\n\ndef test():\n    assert parabola(1, 0, 0, 0.5) == 0.5\n    assert parabola(1, 0, 0, 2) == 0.5\n    assert parabola(1, 0, 0, -2) == 0.5\n\nif __name__ == '__main__':\n    test()",
    "import numpy as np\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    a, b, c: Parameters of the parabola\n    Returns:\n    a, b, c: Vertex of the parabola\n    \"\"\"\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if c == 0:\n        return 0\n    return -c/2/a\n\n\ndef main():\n    a = float(input(\"a: \"))\n    b = float(input(\"b: \"))\n    c = float(input(\"c: \"))\n    print(parabola_vertex(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @param {integer} c\n    # @param {integer} d\n    # @return {integer}\n    def getVertex(self, a, b, c, d):\n        x = (a * d - b * c) / (d - c)\n        y = (a * c - b * d) / (d - c)\n        return x + y * d",
    "import math\n\ndef parabola(x):\n    return math.pow(x, 2) - math.pow(x, 3)\n\ndef find_parabola(n):\n    \"\"\"\n    For the given number, return the vertex of the parabola.\n    \"\"\"\n    x_min = 0\n    x_max = math.sqrt(3)\n    for x in range(x_min, x_max):\n        if parabola(x) <= n:\n            return x\n\nif __name__ == '__main__':\n    print find_parabola(100)",
    "class Solution:\n    # @param {integer} n\n    # @param {integer} a\n    # @param {integer} b\n    # @param {integer} c\n    # @return {integer}\n    def parabolaVertex(self, n, a, b, c):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        a = a ** 2\n        b = b ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c ** 2\n        c = c",
    "# Definition for a  parabola.\n# class Parabola:\n#     def __init__(self, x1, y1, x2, y2, x3, y3):\n#         self.x1 = x1\n#         self.y1 = y1\n#         self.x2 = x2\n#         self.y2 = y2\n#         self.x3 = x3\n#         self.y3 = y3\n\nclass Solution(object):\n    def parabola(self, x1, y1, x2, y2, x3, y3):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type x2: int\n        :type y2: int\n        :type x3: int\n        :type y3: int\n        :rtype: int\n        \"\"\"\n        a = (x2 - x1)**2 + (y2 - y1)**2\n        b = (x3 - x1)**2 + (y3 - y1)**2\n        c = (x3 - x2)**2 + (y3 - y2)**2\n        d = (x2 - x3)**2 + (y2 - y3)**2\n        return (a + b - c - d) / (2 * a)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return str(self.x) +'' + str(self.y)\n\nclass Solution(object):\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        x = []\n        y = []\n        for point in points:\n            x.append(point.x)\n            y.append(point.y)\n        \n        # Write your code here\n        #print(x)\n        #print(y)\n        def f(a, b, c):\n            return a*a + b*b - c*c\n\n        def f2(a, b, c):\n            return a*a*a + b*b*b - c*c*c\n\n        def f3(a, b, c):\n            return a*a*a + b*b*b - c*c*c - a*a*b + b*b*c + a*b*c\n\n        def f4(a, b, c):\n            return a*a*a + b*b*b - c*c*c - a*a*b - b*b*c + a*b*c + b*c*c\n\n        def f5(a, b, c):\n            return a*a*a + b*b*b - c*c*c - a*a*b - b*b*c + a*b*c - b*c*c\n\n        def f6(a, b, c):\n            return a*a*a + b*b*b - c*c*c - a*a*b - b*b*c + a*b*c + b*c*c\n\n        def f7(a, b, c):\n            return a*a*a + b*b*b - c*c*c - a*a*b - b*b*c + a*b*c - b*c*c\n\n        def f8(a, b, c",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\nclass Solution:\n    def parabola(self, points: List[Point]) -> Point:\n        \"\"\"\n        :type points: List[Point]\n        :rtype: Point\n        \"\"\"\n        if not points:\n            return Point(0, 0)\n\n        # points[0] is the origin.\n        # (points[1] - points[0]) is the x direction.\n        # (points[2] - points[0]) is the y direction.\n        # (points[1] * points[2]) is the constant value.\n        a = (points[1] * points[2])\n        b = (points[2] - points[0]) * points[1]\n        c = (points[0] - points[1]) * points[0]\n        \n        # Calculate the roots of the equation.\n        # The return value is the first root that is positive.\n        # If there is no positive root, return the second root that is positive.\n        # If there is no positive root, return the second root that is negative.\n        # If there is no negative root, return the first root that is negative.\n        # If there is no negative root, return the second root that is negative.\n        # If there is no negative root, return the first root that is negative.\n        x1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        x2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        \n        # If the first root is positive, return the first root.\n        # If the first root is negative, return the second root.\n        # If the second root is positive, return the second root.\n        # If the second root is negative, return the first root.\n        if x1 >= 0:\n            return Point(x1, x1)\n        if x2 >= 0:",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    def parabola(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 1:\n            return points[0].x\n        x_max = max(map(lambda p: p.x, points))\n        y_max = max(map(lambda p: p.y, points))\n        x_min = min(map(lambda p: p.x, points))\n        y_min = min(map(lambda p: p.y, points))\n        for i in range(1, len(points)):\n            if points[i].x < x_min:\n                x_min = points[i].x\n            if points[i].x > x_max:\n                x_max = points[i].x\n            if points[i].y < y_min:\n                y_min = points[i].y\n            if points[i].y > y_max:\n                y_max = points[i].y\n        c = (y_max - y_min) / (x_max - x_min)\n        b = y_min - c * x_min\n        a = 1\n        for i in range(1, len(points)):\n            a += points[i].x * (points[i].y - b)\n        return a",
    "import math\n\ndef parabola_vertex(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    return int(math.sqrt(height * height / width * width + 1))",
    "from math import sqrt, pow\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n\n    :param a: The coefficient of x^2.\n    :param b: The coefficient of x^3.\n    :param c: The coefficient of x^4.\n    :return: The vertex of the parabola.\n    \"\"\"\n    return (b - c / a) / (2 * a)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = float(input())\n    b = float(input())\n    c = float(input())\n\n    print(parabola_vertex(a, b, c))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param x1, an integer\n    # @param y1, an integer\n    # @param x2, an integer\n    # @param y2, an integer\n    # @return an integer\n    def parabola(self, x1, y1, x2, y2):\n        return abs(x1-x2) + abs(y1-y2)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.parabola(1, 2, 3, 4)\n    print s.parabola(3, 2, 4, 1)\n    print s.parabola(1, 2, 4, 3)",
    "from math import sqrt\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    :param a: a\n    :param b: b\n    :param c: c\n    :return: vertex\n    \"\"\"\n    if a == 0:\n        if b > 0:\n            return 0\n        else:\n            return -1\n    else:\n        return (b + sqrt(b ** 2 + 4 * a * c)) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    vertex = parabola_vertex(a, b, c)\n    print(vertex)",
    "def parabola_vertex(a, b, c):\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n\n    For example, if a = 2, b = 3, c = 4, the vertex is (1/4, 1/2).\n\n    Note:\n        You may assume a, b and c are all positive.\n    \"\"\"\n    return (b**2 - 4*a*c) / (2*a)",
    "import math\n\ndef parabola(x, y, z):\n    \"\"\"\n    x and y are the coordinates of the vertex.\n    z is the height.\n\n    For example, parabola(1, 2, 3) -> (1, 3)\n    \"\"\"\n    return (x ** 2 - y ** 2) / (2 * z), (y ** 2 - x ** 2) / (2 * z)\n\ndef parabola_2(x, y):\n    \"\"\"\n    x and y are the coordinates of the vertex.\n    y is the height.\n\n    For example, parabola_2(1, 2) -> (1, 2)\n    \"\"\"\n    return (x ** 2 - y ** 2) / y, (y ** 2 - x ** 2) / y\n\ndef parabola_3(x, y, z):\n    \"\"\"\n    x, y and z are the coordinates of the vertex.\n    y is the height.\n\n    For example, parabola_3(1, 2, 3) -> (1, 3)\n    \"\"\"\n    return (x ** 2 - y ** 2 - z ** 2) / (2 * y), (y ** 2 - x ** 2 - z ** 2) / (2 * y)\n\ndef parabola_4(x, y, z, w):\n    \"\"\"\n    x, y, z and w are the coordinates of the vertex.\n    y is the height.\n\n    For example, parabola_4(1, 2, 3, 4) -> (1, 3)\n    \"\"\"\n    return (x ** 2 - y ** 2 - z ** 2 - w ** 2) / (2 * y), (y ** 2 - x ** 2 - z ** 2 - w ** 2) / (2 * y)\n\ndef parabola_5(x, y, z, w, u):\n    \"\"\"\n    x, y, z, w and u are the coordinates of the vertex.\n    y is the height.\n\n    For example, parabola_5(1, 2, 3, 4, 5) -> (1, 3)\n    \"\"\"\n    return (x ** 2 - y ** 2 - z ** 2 - w ** 2 - u ** 2) / (2 * y",
    "# Definition for a parabola\n# class Parabola(object):\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n#         self.a = self.x * self.x + self.y * self.y\n#         self.b = 2 * (self.x * self.y - self.y * self.x)\n#         self.c = self.x * self.x + self.y * self.y - 1\n\n\nclass Solution(object):\n    def parabolaVertices(self, A, B):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :rtype: List[int]\n        \"\"\"\n        if A == 0:\n            return [0]\n        if B == 0:\n            return [1]\n        if A == B:\n            return [0, 1]\n        if B == 0:\n            return [-1, 0]\n        if A == B + 1:\n            return [-1, 1]\n        if A == B - 1:\n            return [0, -1]\n        if A == B + 2:\n            return [1, -1]\n        if A == B - 2:\n            return [-1, -1]\n        if A == B + 3:\n            return [1, 1]\n        if A == B - 3:\n            return [-1, 1]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    A = 1\n    B = 1\n    print(sol.parabolaVertices(A, B))",
    "import math\n\n\ndef parabola_vertex(y, x):\n    \"\"\"\n    :param y: y value of parabola\n    :param x: x value of parabola\n    :return: vertex of parabola\n    \"\"\"\n    if y == 0:\n        return x\n    return x + (y / math.sqrt(y ** 2 + x ** 2))\n\n\ndef main():\n    print(parabola_vertex(1, 1))\n    print(parabola_vertex(2, 2))\n    print(parabola_vertex(3, 4))\n    print(parabola_vertex(4, 1))\n    print(parabola_vertex(1, 2))\n    print(parabola_vertex(2, 3))\n    print(parabola_vertex(3, 4))\n    print(parabola_vertex(4, 2))\n    print(parabola_vertex(1, 4))\n    print(parabola_vertex(2, 6))\n    print(parabola_vertex(3, 8))\n    print(parabola_vertex(4, 1))\n    print(parabola_vertex(1, 8))\n    print(parabola_vertex(2, 6))\n    print(parabola_vertex(3, 4))\n    print(parabola_vertex(4, 1))\n    print(parabola_vertex(1, 4))\n    print(parabola_vertex(2, 6))\n    print(parabola_vertex(3, 8))\n    print(parabola_vertex(4, 1))\n    print(parabola_vertex(1, 8))\n    print(parabola_vertex(2, 6))\n    print(parabola_vertex(3, 4))\n    print(parabola_vertex(4, 1))\n    print(parabola_vertex(1, 4))\n    print(parabola_vertex(2, 6))\n    print(parabola_vertex(3, 8))\n    print(parabola_vertex(4,",
    "# https://www.codeeval.com/open_challenges/110/\n# https://www.codeeval.com/open_challenges/111/\n# https://www.codeeval.com/open_challenges/112/\n# https://www.codeeval.com/open_challenges/113/\n# https://www.codeeval.com/open_challenges/114/\n# https://www.codeeval.com/open_challenges/115/\n# https://www.codeeval.com/open_challenges/116/\n# https://www.codeeval.com/open_challenges/117/\n# https://www.codeeval.com/open_challenges/118/\n# https://www.codeeval.com/open_challenges/119/\n# https://www.codeeval.com/open_challenges/120/\n# https://www.codeeval.com/open_challenges/121/\n# https://www.codeeval.com/open_challenges/122/\n# https://www.codeeval.com/open_challenges/123/\n# https://www.codeeval.com/open_challenges/124/\n# https://www.codeeval.com/open_challenges/125/\n# https://www.codeeval.com/open_challenges/126/\n# https://www.codeeval.com/open_challenges/127/\n# https://www.codeeval.com/open_challenges/128/\n# https://www.codeeval.com/open_challenges/129/\n# https://www.codeeval.com/open_challenges/130/\n# https://www.codeeval.com/open_challenges/131/\n# https://www.codeeval.com/open_challenges/132/\n# https://www.codeeval.com/open_challenges/133/\n# https://www.codeeval.com/open_challenges/134/\n# https://www.codeeval.com/open_challenges/135/\n# https://www.codeeval.com/open_challenges/136/\n# https://www.codeeval.com/open_challenges/137/\n# https://www.codeeval",
    "class Solution:\n    def parabola(self, x):\n        \"\"\"\n        :type x: float\n        :rtype: int\n        \"\"\"\n        if x < 0 or x > 1:\n            return -1\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        y = 1 - x\n        return int(y * (y + 1) / 2)",
    "class Solution:\n    def parabola(self, a, b, c):\n        \"\"\"\n        :type a: float\n        :type b: float\n        :type c: float\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0 or c == 0:\n            return -1\n\n        x = a * a - b * b\n        y = c * c - 2 * a * c\n        if x < 0 or y < 0:\n            return -1\n\n        x = sqrt(x)\n        y = sqrt(y)\n\n        if x > y:\n            return -1\n\n        return (x + y) / 2",
    "class Solution(object):\n    def parabolaArea(self, x1, y1, x2, y2, x3, y3):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type x2: int\n        :type y2: int\n        :type x3: int\n        :type y3: int\n        :rtype: int\n        \"\"\"\n        return (x2 - x1) * (y3 - y2) - (x3 - x2) * (y1 - y3)",
    "import math\nimport operator\nfrom functools import reduce\n\nclass Solution(object):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :rtype: int\n    \"\"\"\n    def parabola(self, a, b):\n        \"\"\"\n        :type a: float\n        :type b: float\n        :rtype: int\n        \"\"\"\n        if a == 0 and b == 0:\n            return -1\n        return self.parabola_helper(a, b)\n\n    def parabola_helper(self, a, b):\n        if a == 0:\n            return 0\n        if b == 0:\n            return 1\n        return self.parabola_helper(b, a)\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.parabola(a,b)",
    "from math import sqrt\n\nclass Solution:\n    \"\"\"\n    @param: x1, x2, y1, y2: coordinates of two points on a parabola\n    @return: vertex of a parabola\n    \"\"\"\n    def parabola(self, x1, x2, y1, y2):\n        a, b = x1, x2\n        c, d = y1, y2\n        return (a*c - b*d)/(a - b)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    x1, x2, y1, y2 = 1, 2, 3, 4\n    print(sol.parabola(x1, x2, y1, y2))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n# Your Solution here.\ndef parabola_vertex(p1, p2, p3):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    a = (y2 - y3) / (x2 - x3)\n    b = (y1 - y2) / (x1 - x2)\n    c = (y1 - y3) / (x1 - x3)\n    t = -b / a\n    return Point(x1 + t * (x2 - x1), y1 + t * (y2 - y1))\n\nif __name__ == '__main__':\n    p1 = Point(1, 4)\n    p2 = Point(2, 2)\n    p3 = Point(3, 1)\n    print parabola_vertex(p1, p2, p3)",
    "def parabola_vertex(a, b, c, d):\n    '''\n    a, b, c, d: Parameters of the parabola\n    Return: The vertex of the parabola\n    '''\n    x = (b*b - 3*a*c) / (2*a)\n    y = (b*b - a*a*d) / (2*b)\n    return (x, y)\n\nif __name__ == '__main__':\n    a, b, c, d = (1, 2, 3, 4)\n    print(parabola_vertex(a, b, c, d))",
    "def find_parabola(x0, y0, x1, y1, x2, y2):\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n    \n    # 1. Find the roots of the equation.\n    #    f(x) = (y2 - y1)(x - x0)^2 + (y0 - y2)(x - x1)^2\n    #    x0 = y2 / (y2 - y1)\n    #    x1 = y0 / (y0 - y1)\n    #    x2 = y1 / (y1 - y2)\n    #    x3 = y0 / (y0 - y2)\n    #    x4 = y1 / (y1 - y0)\n    #    x = x0 + x1 + x2 + x3 + x4\n    #    f(x) = y0 + y1 + y2 + y3 + y4\n    # 2. Find the roots of the equation.\n    #    f(x) = (y2 - y1)(x - x0)^2 + (y0 - y2)(x - x1)^2\n    #    x0 = y2 / (y2 - y1)\n    #    x1 = y0 / (y0 - y1)\n    #    x2 = y1 / (y1 - y2)\n    #    x3 = y0 / (y0 - y2)\n    #    x4 = y1 / (y1 - y0)\n    #    x = x0 + x1 + x2 + x3 + x4\n    #    f(x) = y0 + y1 + y2 + y3 + y4\n    # 3. Find the roots of the equation.\n    #    f(x) = (y2 - y1)(x - x0)^2 + (y0 - y2)(x - x1)^2\n    #    x0 = y2 / (y2 - y1)\n    #    x1 = y0 / (y0 - y1)\n    #    x2 = y1 / (y1 - y2)\n    #    x3",
    "from math import sqrt\n\n\ndef parabola_vertex(a, b, c, d, e):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :type d: float\n    :type e: float\n    :rtype: float\n    \"\"\"\n    return -(b * b - 4 * a * c) / (2 * a * d)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(parabola_vertex(1, 2, 3, 4, 5))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef parabola_vertex(x, a, b, c):\n    \"\"\"\n    Given the parameters a, b, and c, find the vertex of the parabola.\n\n    Aparabola(x, a, b, c) = a*x**2 + b*x + c\n    \"\"\"\n\n    # Find the roots of the parabola\n    roots = [math.sqrt((a*a*x**2 + (2*a*b - 2*c)*x + c) / (a*a - b*b)) for x in range(0, 1000)]\n\n    # Find the vertex of the parabola\n    for x in roots:\n        if x == 0 or x == 1:\n            continue\n        else:\n            if math.sqrt((a*a*x**2 + (2*a*b - 2*c)*x + c) / (a*a - b*b)) == x:\n                return x\n\n    # If we get to this point, there are no roots\n    return 0\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(1, 1, 1, 1))",
    "import math\n\n\ndef parabola_vertex(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    a = width\n    b = height * height\n    c = -height * width\n    discriminant = (b - (4 * c)) / 2\n    root_1 = (-b + discriminant) / (2 * a)\n    root_2 = (-b - discriminant) / (2 * a)\n    return max(root_1, root_2)\n\n\nif __name__ == '__main__':\n    print(parabola_vertex(100, 100))",
    "class Solution(object):\n    def parabola(self, x, y, height):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :type height: float\n        :rtype: float\n        \"\"\"\n        return (x ** 2 + y ** 2 - height ** 2) / (2 * x)\n\n\nif __name__ == \"__main__\":\n    assert Solution().parabola(1, 2, 3) == -1.0\n    assert Solution().parabola(4, 5, 6) == -1.0",
    "import numpy as np\n\n# The equation of the parabola is y = a*x^2 + b*x + c\n# y(x) = a*x^2 + b*x + c\n# y(x) = a*x^2 + b*x + c = a*x^2 - b*x - c\n# y(x) = a*x^2 - b*x - c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 + b*x + c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 - b*x - c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 - b*x - c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 - b*x - c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 + b*x - c\n# y(x) = a*x^2 - b*x + c\n# y(x) = a*x^2 - b*x - c\n#",
    "import math\nfrom functools import reduce\nfrom collections import deque\n\ndef parabola(x, y):\n    return (x**2 + y**2) / (2*x) - y / x\n\n\ndef find_vertex(x, y, start_vertex):\n    \"\"\"\n    Given start_vertex, find the vertex of the parabola that is closest to it.\n    \"\"\"\n    # Calculate the distance to the start vertex\n    x_dist = math.fabs(start_vertex[0] - x)\n    y_dist = math.fabs(start_vertex[1] - y)\n\n    # Calculate the distance to the other vertices\n    x_dist_to_vertices = []\n    y_dist_to_vertices = []\n    for vertex in vertices:\n        x_dist_to_vertices.append(math.fabs(vertex[0] - x))\n        y_dist_to_vertices.append(math.fabs(vertex[1] - y))\n\n    # Find the closest vertex\n    index = min(x_dist_to_vertices, y_dist_to_vertices)\n    return vertices[index]\n\n\ndef solve(x_range, y_range, start_vertex):\n    \"\"\"\n    Given the range of x and y, and the starting vertex, calculate the vertex of the parabola\n    that is closest to the starting vertex.\n    \"\"\"\n    # Create a deque for the vertices\n    vertices = deque([(start_vertex[0], start_vertex[1])])\n\n    # Calculate the distance to the start vertex\n    x_dist = math.fabs(start_vertex[0] - x_range[0])\n    y_dist = math.fabs(start_vertex[1] - y_range[0])\n\n    # Calculate the distance to the other vertices\n    x_dist_to_vertices = []\n    y_dist_to_vertices = []\n    for vertex in vertices:\n        x_dist_to_vertices.append(math.fabs(vertex[0] - x_range[0]))",
    "from math import sqrt, pi\n\n\ndef parabola_vertex(a, b, c, x):\n    \"\"\"\n    Calculate parabola vertex.\n\n    :param a: Parameter of the parabola\n    :param b: Parameter of the parabola\n    :param c: Parameter of the parabola\n    :param x: x-coordinate of the point\n    :return: Vertex of the parabola\n    \"\"\"\n    return (x - a) ** 2 / (b ** 2 - 4 * a * c) + a\n\n\ndef test_parabola_vertex():\n    assert parabola_vertex(1, 2, 3, 3) == 0\n    assert parabola_vertex(1, 2, 3, 5) == 1\n    assert parabola_vertex(1, 2, 3, 10) == 1\n\n\nif __name__ == '__main__':\n    test_parabola_vertex()",
    "def parabola_vertex(a, b, c):\n    \"\"\"\n    a, b, c: coefficients of the parabola.\n    Return the vertex of the parabola.\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef main():\n    a = 3\n    b = 4\n    c = 5\n    print(parabola_vertex(a, b, c))\n\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a parabola\nclass Parabola:\n    def __init__(self, x0, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.x0 = x0\n        self.root = a*x0*x0 + b*x0 + c\n\n    def __str__(self):\n        return 'Parabola(a={a}, b={b}, c={c})'.format(a=self.a, b=self.b, c=self.c)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.__str__() == other.__str__()\n\n    def __hash__(self):\n        return hash(self.__str__())\n\n    def __cmp__(self, other):\n        return cmp(self.__str__(), other.__str__())\n\n    def __add__(self, other):\n        return Parabola(self.x0 + other.x0, self.a + other.a, self.b + other.b, self.c + other.c)\n\n    def __sub__(self, other):\n        return Parabola(self.x0 - other.x0, self.a - other.a, self.b - other.b, self.c - other.c)\n\n    def __mul__(self, other):\n        return Parabola(self.x0*other.x0, self.a*other.a, self.b*other.b, self.c*other.c)\n\n    def __truediv__(self, other):\n        return Parabola(self.x0/other.x0, self.a/other.a, self.b/other.b, self.c/other.c)\n\n    def __pow__(self, other):\n        return Parabola(self.x0**other, self.a**other, self.b**other, self.c**other)\n\n    def __radd__(self, other):\n        return Parabola(other.x0 + self.x0, other",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\nclass Solution:\n    def parabola(self, p1: Point, p2: Point, p3: Point) -> int:\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n\n        dx = x2 - x1\n        dy = y2 - y1\n        d = dx*dx + dy*dy\n\n        c1 = (x3 - x1) * dy - (y3 - y1) * dx\n        c2 = (x3 - x2) * dy - (y3 - y2) * dx\n\n        return int(abs(c1*c1 + c2*c2)/d)\n\n\nif __name__ == \"__main__\":\n    assert Solution().parabola(Point(0, 0), Point(0, 1), Point(0, 2)) == 1\n    assert Solution().parabola(Point(0, 0), Point(1, 0), Point(2, 0)) == 2\n    assert Solution().parabola(Point(0, 0), Point(0, 0), Point(0, 0)) == 0",
    "# Function to find the vertex of a parabola\n# Input:\n#   a: The area of the parabola\n#   b: The height of the parabola\n#   c: The radius of the parabola\n# Output:\n#   the vertex of the parabola\n# Example:\n#   a = 100\n#   b = 50\n#   c = 50\n#   the vertex of the parabola is 50\n#   the output is 50\n\ndef parabola(a, b, c):\n    # Check the input\n    if (a <= 0 or b <= 0 or c <= 0):\n        return None\n\n    # Calculate the x value\n    x = -b / 2 / a\n\n    # Calculate the y value\n    y = -b / (2 * c)\n\n    # Return the vertex\n    return x, y\n\n# Test the function\nprint(parabola(100, 50, 50))",
    "# -*- coding: utf-8 -*-\n\nimport math\n\n\nclass Parabola(object):\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.x0 = 0\n\n    def __str__(self):\n        return 'Parabola(a={0}, b={1}, c={2})'.format(self.a, self.b, self.c)\n\n    def __eq__(self, other):\n        return (\n            self.a == other.a and\n            self.b == other.b and\n            self.c == other.c and\n            self.x0 == other.x0\n        )\n\n    def __ne__(self, other):\n        return not self == other\n\n    def __repr__(self):\n        return str(self)\n\n    def __hash__(self):\n        return hash(self.a + self.b + self.c + self.x0)\n\n    def __getitem__(self, i):\n        if i == 0:\n            return self.a\n        elif i == 1:\n            return self.b\n        elif i == 2:\n            return self.c\n        elif i == 3:\n            return self.x0\n\n    def __iter__(self):\n        return iter(self.__getitem__)\n\n    def __add__(self, other):\n        return Parabola(\n            a=self.a + other.a,\n            b=self.b + other.b,\n            c=self.c + other.c,\n            x0=self.x0 + other.x0,\n        )\n\n    def __radd__(self, other):\n        return self + other\n\n    def __sub__(self, other):\n        return Parabola(\n            a=self.a - other.a,\n            b=self.b - other.b,\n            c=self.c - other.c,\n            x0=self.x0 - other.x0,\n        )\n\n    def __rsub__(self, other):\n        return other - self\n\n    def",
    "import math\nimport numpy as np\n\ndef parabola(x):\n    \"\"\"\n    x is an array of x-coordinates.\n\n    Returns a list of vertices of a parabola.\n    \"\"\"\n    # define the parabola\n    parabola = lambda x, y: x**2 + y**2 - 1\n\n    # define the vertices\n    vertices = []\n    for x in x:\n        y = parabola(x, 0)\n        vertices.append((x, y))\n    return vertices\n\n\ndef main():\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n    # test case 1\n    vertices = parabola([-2, 0, 4, -1, -2])\n    assert vertices == [[-2, -2], [-2, -1], [-2, 0], [-2, 1], [-2, 2],\n                        [-1, -2], [-1, -1], [-1, 0], [-1, 1], [-1, 2],\n                        [0, -2], [0, -1], [0, 0], [0, 1], [0, 2],\n                        [1, -2], [1, -1], [1, 0], [1, 1], [1, 2],\n                        [2, -2], [2, -1], [2, 0], [2, 1], [2, 2]]\n    print(\"Test case 1: {}\".format(vertices))\n\n    # test case 2\n    vertices = parabola([-1, -1, 0, 1, 1, 1, 2, 2])\n    assert vertices == [[-1, -1], [-1, 0], [-1, 1], [-1, 2],\n                        [0, -1], [0, 0], [0, 1], [0, 2],\n                        [1, -1], [1, 0], [1, 1], [1, 2],\n                        [2, -1], [2, 0], [2, 1], [2, 2]]\n    print(\"Test case 2: {}\".format(vertices))\n\n    # test case 3\n    vertices = parabola([0, 0, 1,",
    "import math\n\ndef parabola_vertex(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    :type x1: int\n    :type y1: int\n    :type x2: int\n    :type y2: int\n    :type x3: int\n    :type y3: int\n    :rtype: int\n    \"\"\"\n    a = (y2 - y1) / (x2 - x1)\n    b = (y3 - y1) / (x3 - x1)\n    c = (y3 - y2) / (x3 - x2)\n    if a == b == c:\n        return a\n    else:\n        return None\n\nclass Solution:\n    \"\"\"\n    @param x1: Starting point of parabola\n    @param y1: y coordinate of starting point\n    @param x2: Ending point of parabola\n    @param y2: y coordinate of ending point\n    @param x3: x coordinate of vertex\n    @param y3: y coordinate of vertex\n    @return: The vertex of the parabola\n    \"\"\"\n    def parabola_vertex(self, x1, y1, x2, y2, x3, y3):\n        a = (y2 - y1) / (x2 - x1)\n        b = (y3 - y1) / (x3 - x1)\n        c = (y3 - y2) / (x3 - x2)\n        if abs(a - b) < 1e-6:\n            return a\n        elif abs(b - c) < 1e-6:\n            return b\n        else:\n            return c\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.parabola_vertex(0, 0, 1, 1, 2, 2))\n    print(s.parabola_vertex(1, 1, 2, 2, 3, 3))",
    "def find_parabola_vertex(a, b, c):\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n\n    Input:\n    a, b, c = the parameters of the parabola\n\n    Output:\n    vertex = the vertex of the parabola\n\n    Assumption:\n    a, b, c are all positive numbers\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and a == c:\n        return a\n    else:\n        if a > b:\n            if a > c:\n                return a\n            else:\n                return b\n        else:\n            if b > c:\n                return b\n            else:\n                return c\n\nif __name__ == \"__main__\":\n    a, b, c = map(float, raw_input().strip().split(' '))\n    print find_parabola_vertex(a, b, c)",
    "import math\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    The vertex is the point where the parabola is flat on the x-axis.\n    The equation of the parabola is y = ax\u00b2 + bx + c.\n    :param a:\n    :param b:\n    :param c:\n    :return: the vertex\n    \"\"\"\n    x = (-b - math.sqrt(math.pow(b, 2) - 4 * a * c)) / (2 * a)\n    y = -a * x - c / 2\n    return x, y\n\n\nclass Solution:\n    \"\"\"\n    @param: a, b, c: the three coefficients of the parabola\n    @return: the vertex of the parabola\n    \"\"\"\n    def parabola(self, a, b, c):\n        \"\"\"\n        Find the vertex of a parabola.\n        The vertex is the point where the parabola is flat on the x-axis.\n        The equation of the parabola is y = ax\u00b2 + bx + c.\n        :param a:\n        :param b:\n        :param c:\n        :return: the vertex\n        \"\"\"\n        x = (-b - math.sqrt(math.pow(b, 2) - 4 * a * c)) / (2 * a)\n        y = -a * x - c / 2\n        return x, y\n\n\nif __name__ == \"__main__\":\n    # a = 1\n    # b = 2\n    # c = 3\n    a = 1\n    b = 2\n    c = 3\n    print(parabola_vertex(a, b, c))\n    print(Solution().parabola(a, b, c))",
    "class Parabola(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        Initialize your data structure here.\n        :type a: int\n        :type b: int\n        :type c: int\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __call__(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        return (x - self.a) * (x - self.b) / self.c\n\n# Your Parabola object will be instantiated and called as such:\n# obj = Parabola(a,b,c)\n# param_1 = obj(x)",
    "# Definition for a parabola\nclass Parabola:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __str__(self):\n        return str(self.a) + \"x^2 + \" + str(self.b) + \"x + \" + str(self.c)\n\n# Your Parabola object will be instantiated and called as such:\n# parabola = Parabola(a, b, c)\n# parametric = parabola.find(x)\n\n# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return str(self.x) + \" \" + str(self.y)\n\n# Definition for a line segment.\nclass LineSegment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n    def __str__(self):\n        return str(self.p1) + \" - \" + str(self.p2)\n\n# Definition for a point on a line.\nclass PointOnLine:\n    def __init__(self, line, p):\n        self.line = line\n        self.p = p\n    def __str__(self):\n        return str(self.p) + \" on \" + str(self.line)\n\n# Definition for a line segment on a line.\nclass LineSegmentOnLine:\n    def __init__(self, line1, line2, p):\n        self.line1 = line1\n        self.line2 = line2\n        self.p = p\n    def __str__(self):\n        return str(self.p) + \" on \" + str(self.line1) + \" and \" + str(self.line2)\n\n# Definition for a parabola.\nclass Parabola:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self."
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}