{
  "problem": {
    "task_id": "MBPP/59",
    "prompt": "Write a function to find the nth octagonal number.",
    "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
    "test_list": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ],
    "challenge_test_list": [],
    "problem_id": 48
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from functools import reduce\n\n\ndef get_octagonal(n):\n    return reduce(lambda x, y: x * y, [i * i for i in range(1, n + 1)])\n\n\nif __name__ == \"__main__\":\n    print(get_octagonal(5))\n    print(get_octagonal(7))",
    "def octagonal(n):\n    return octagonal(n-1) + octagonal(n-2) + octagonal(n-3) + octagonal(n-4)\n\nif __name__ == '__main__':\n    print octagonal(12)\n    print octagonal(13)\n    print octagonal(14)\n    print octagonal(15)\n    print octagonal(16)\n    print octagonal(17)\n    print octagonal(18)\n    print octagonal(19)\n    print octagonal(20)\n    print octagonal(21)\n    print octagonal(22)\n    print octagonal(23)\n    print octagonal(24)\n    print octagonal(25)\n    print octagonal(26)\n    print octagonal(27)\n    print octagonal(28)\n    print octagonal(29)\n    print octagonal(30)\n    print octagonal(31)\n    print octagonal(32)\n    print octagonal(33)\n    print octagonal(34)\n    print octagonal(35)\n    print octagonal(36)\n    print octagonal(37)\n    print octagonal(38)\n    print octagonal(39)\n    print octagonal(40)\n    print octagonal(41)\n    print octagonal(42)\n    print octagonal(43)\n    print octagonal(44)\n    print octagonal(45)\n    print octagonal(46)\n    print octagonal(47)\n    print octagonal(48)\n    print octagonal(49)\n    print octagonal(50)\n    print octagonal(51)\n    print octagonal(52)\n    print octagonal(53)\n    print octagonal(54)\n    print octagonal(55)\n    print octagonal(56)\n    print octagonal(57)\n    print octagonal(58)\n    print octagonal(59)\n    print octagonal(60)\n    print octagonal(61)\n    print octagonal(62)\n    print octagonal(63)\n    print octagonal(64)\n    print octagonal(65)\n    print octagonal(66)\n    print octagonal(67)\n    print octagonal(68)\n    print oct",
    "def nth_oct(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    oct = 1\n    while oct <= n:\n        oct = oct*8 + oct\n    return oct\n\ndef test():\n    assert nth_oct(1) == 1\n    assert nth_oct(2) == 8\n    assert nth_oct(3) == 27\n    assert nth_oct(4) == 64\n    assert nth_oct(5) == 125\n    assert nth_oct(6) == 216\n    assert nth_oct(7) == 343\n    assert nth_oct(8) == 512\n\nif __name__ == '__main__':\n    test()",
    "def octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = n % 7\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 8\n    if n == 3:\n        return 27\n    if n == 4:\n        return 64\n    if n == 5:\n        return 125\n    if n == 6:\n        return 216\n    if n == 7:\n        return 343\n    return 890\n\nif __name__ == '__main__':\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)",
    "def get_nth_octagonal(n):\n    \"\"\"\n    >>> get_nth_octagonal(3)\n    8\n    >>> get_nth_octagonal(4)\n    16\n    >>> get_nth_octagonal(5)\n    24\n    >>> get_nth_octagonal(6)\n    36\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n - 1) * (2 * n - 1) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagonal_number(n):\n    \"\"\"\n    nth octagonal number\n    \"\"\"\n    return octagonal_number(n-1) + n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print octagonal_number(i)",
    "def octagonal(n):\n    \"\"\"\n    >>> octagonal(5)\n    834\n    >>> octagonal(6)\n    932\n    \"\"\"\n    return n*(3*n - 1)//2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagon(n):\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    print octagon(6)",
    "def octagonal_number(n):\n    return octagonal_number_recursive(n)\n\ndef octagonal_number_recursive(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return octagonal_number_recursive(n-1) + octagonal_number_recursive(n-2) + 8\n\ndef octagonal_number_iterative(n):\n    # base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return octagonal_number_iterative(n-1) + octagonal_number_iterative(n-2) + 8\n\ndef main():\n    print(octagonal_number(4))\n    print(octagonal_number_iterative(4))\n\nif __name__ == '__main__':\n    main()",
    "def oct_nth(n):\n    \"\"\"\n    Input:\n    n = 4\n    Output:\n    1\n    2\n    8\n    27\n    \"\"\"\n\n    return oct_nth_recursive(n)\n\n\ndef oct_nth_recursive(n):\n    \"\"\"\n    Input:\n    n = 4\n    Output:\n    1\n    2\n    8\n    27\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 27\n\n    return oct_nth_recursive(n-1) + oct_nth_recursive(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def oct(n):\n    return octagonal(n)\n\ndef octagonal(n):\n    if n < 1:\n        return 0\n    return (n*(3*n+1))/2\n\nif __name__ == \"__main__\":\n    print oct(6)",
    "def octagonal_number(n):\n    return (n + 1) * (n + 2) / 2\n\nif __name__ == '__main__':\n    print octagonal_number(1)\n    print octagonal_number(2)\n    print octagonal_number(3)\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)\n    print octagonal_number(10)",
    "from itertools import count\n\ndef octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 0\n    while True:\n        num = octagonal_number_helper(i)\n        if num == n:\n            return num\n        i += 1\n\ndef octagonal_number_helper(i):\n    \"\"\"\n    Write a helper function to find the nth octagonal number.\n    \"\"\"\n    if i == 0:\n        return 1\n    elif i == 1:\n        return 8\n    elif i == 2:\n        return 27\n    elif i == 3:\n        return 64\n    elif i == 4:\n        return 125\n    elif i == 5:\n        return 216\n    elif i == 6:\n        return 343\n    elif i == 7:\n        return 512\n    else:\n        return octagonal_number_helper(i-1) + octagonal_number_helper(i-2)\n\n# Test Cases\n\n#print octagonal_number(1)\n#print octagonal_number(2)\n#print octagonal_number(3)\n#print octagonal_number(4)\n#print octagonal_number(5)\n#print octagonal_number(6)\n#print octagonal_number(7)\n#print octagonal_number(8)\n#print octagonal_number(9)\n#print octagonal_number(10)\n#print octagonal_number(11)\n#print octagonal_number(12)\n#print octagonal_number(13)\n#print octagonal_number(14)\n#print octagonal_number(15)\n#print octagonal_number(16)\n#print octagonal_number(17)\n#print octagonal_number(18)\n#print octagonal_number(19)\n#print octagonal_number(20)\n#print octagonal_number(21)\n#print octagonal_number(22)\n#print octagonal_number(23)\n#print octagonal_number(24)\n#print octagonal_number(25)\n#print octagonal_number(26)\n#print octagonal_number(",
    "#!/usr/bin/env python\n\nimport sys\n\nif len(sys.argv) < 2:\n    print \"Usage: %s <number>\" % sys.argv[0]\n    sys.exit(0)\n\nn = int(sys.argv[1])\n\nif n < 0:\n    print \"Negative number of octagon is not allowed!\"\n    sys.exit(0)\n\ndef octagon(n):\n    if n == 0:\n        return 1\n    return octagon(n-1) + octagon(n-2)\n\nprint octagon(n)",
    "def get_oct_nth_num(n):\n    \"\"\"\n    n: The index of the octagonal number to be found\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * (n + 1) / 2\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the octagonal number to be found: \"))\n    print(\"The nth octagonal number is %d.\" % get_oct_nth_num(n))",
    "from utils.utils import *\n\ndef octagonal(n):\n    return n * (n + 1) / 2\n\ndef test():\n    assert octagonal(0) == 0\n    assert octagonal(1) == 1\n    assert octagonal(2) == 8\n    assert octagonal(3) == 27\n    assert octagonal(4) == 64\n    assert octagonal(5) == 225\n    assert octagonal(6) == 645\n    assert octagonal(7) == 2187\n    assert octagonal(8) == 6465\n    assert octagonal(9) == 24360\n    assert octagonal(10) == 90625\n    assert octagonal(11) == 32448\n    assert octagonal(12) == 100800\n    assert octagonal(13) == 404375\n    assert octagonal(14) == 169350\n    assert octagonal(15) == 624150\n    assert octagonal(16) == 2625000\n    assert octagonal(17) == 10250000\n    assert octagonal(18) == 41943040\n    assert octagonal(19) == 16777216\n    assert octagonal(20) == 67108864\n    assert octagonal(21) == 268435456\n    assert octagonal(22) == 1099511627776\n    assert octagonal(23) == 39088673280\n    assert octagonal(24) == 18446744073709551616\n    assert octagonal(25) == 72057594037927936\n\nif __name__ == '__main__':\n    test()",
    "def octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    :param n: The number to be found.\n    :return: The nth octagonal number.\n    \"\"\"\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    assert octagonal_number(1) == 8\n    assert octagonal_number(2) == 27\n    assert octagonal_number(3) == 64\n    assert octagonal_number(4) == 125\n    assert octagonal_number(5) == 216\n    assert octagonal_number(6) == 343\n    assert octagonal_number(7) == 512\n    assert octagonal_number(8) == 729\n    assert octagonal_number(9) == 1000",
    "# https://www.youtube.com/watch?v=pkPvTKtV2Wg\n\ndef octagonal(n):\n    \"\"\"\n    nth octagonal number\n    :param n: int\n    :return: int\n    \"\"\"\n    return (n * (3 * n - 1) + 1) / 2\n\nif __name__ == '__main__':\n    print octagonal(1)\n    print octagonal(2)\n    print octagonal(3)\n    print octagonal(4)\n    print octagonal(5)\n    print octagonal(6)\n    print octagonal(7)\n    print octagonal(8)\n    print octagonal(9)",
    "def octagon(n):\n    return (n * (3*n + 1)) / 2\n\nif __name__ == \"__main__\":\n    print octagon(3)",
    "import math\n\ndef octagonal_number(n):\n    \"\"\"\n    nth octagonal number\n    n is positive integer\n\n    :param n: positive integer\n    :return: nth octagonal number\n    \"\"\"\n    oct_number = 1\n    while n > 0:\n        oct_number *= n\n        oct_number += (n - 1)\n        n -= 1\n    return oct_number\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 101):\n        oct_number = octagonal_number(n)\n        print oct_number",
    "def octagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3*n-1) // 2 + n * (n-1) // 2\n\nif __name__ == '__main__':\n    print octagonal_nth(4)\n    print octagonal_nth(9)\n    print octagonal_nth(10)\n    print octagonal_nth(20)\n    print octagonal_nth(100)",
    "def nth_octagonal(n):\n  if n == 1: return 1\n  oct = 1\n  for i in range(1, n):\n    oct *= 8\n    oct += 1\n  return oct\n\n\nif __name__ == \"__main__\":\n  print nth_octagonal(1)\n  print nth_octagonal(2)\n  print nth_octagonal(3)\n  print nth_octagonal(4)\n  print nth_octagonal(5)\n  print nth_octagonal(6)\n  print nth_octagonal(7)\n  print nth_octagonal(8)\n  print nth_octagonal(9)\n  print nth_octagonal(10)\n  print nth_octagonal(11)\n  print nth_octagonal(12)\n  print nth_octagonal(13)\n  print nth_octagonal(14)\n  print nth_octagonal(15)\n  print nth_octagonal(16)\n  print nth_octagonal(17)\n  print nth_octagonal(18)\n  print nth_octagonal(19)\n  print nth_octagonal(20)\n  print nth_octagonal(21)\n  print nth_octagonal(22)\n  print nth_octagonal(23)\n  print nth_octagonal(24)\n  print nth_octagonal(25)\n  print nth_octagonal(26)\n  print nth_octagonal(27)\n  print nth_octagonal(28)\n  print nth_octagonal(29)\n  print nth_octagonal(30)\n  print nth_octagonal(31)\n  print nth_octagonal(32)\n  print nth_octagonal(33)\n  print nth_octagonal(34)\n  print nth_octagonal(35)\n  print nth_octagonal(36)\n  print nth_octagonal(37)\n  print nth_octagonal(38)\n  print nth_octagonal(39)\n  print nth_octagonal(40)\n  print nth_octagonal(41",
    "def oct_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return oct_sum(n)\n\ndef oct_sum(n):\n    return oct_sum_rec(1, n)\n\ndef oct_sum_rec(acc, n):\n    if n == 0:\n        return acc\n    elif n == 1:\n        return acc * 3\n    else:\n        return oct_sum_rec(acc * 3, n - 1) + acc * (n - 1)\n\nif __name__ == '__main__':\n    import timeit\n\n    t = timeit.Timer(\"oct_sum(10000)\", \"from __main__ import oct_sum\")\n    print t.timeit(1)",
    "def octagonal(n):\n    return n*(3*n-1)/2\n\nif __name__ == '__main__':\n    assert octagonal(1) == 8\n    assert octagonal(2) == 15\n    assert octagonal(3) == 22\n    assert octagonal(4) == 30\n    assert octagonal(5) == 35\n    assert octagonal(6) == 42\n    assert octagonal(7) == 50\n    assert octagonal(8) == 56\n    assert octagonal(9) == 63\n    assert octagonal(10) == 70\n    assert octagonal(11) == 76\n    assert octagonal(12) == 82\n    assert octagonal(13) == 88\n    assert octagonal(14) == 94\n    assert octagonal(15) == 100\n    assert octagonal(16) == 106\n    assert octagonal(17) == 112\n    assert octagonal(18) == 118\n    assert octagonal(19) == 124\n    assert octagonal(20) == 130\n    assert octagonal(21) == 136\n    assert octagonal(22) == 142\n    assert octagonal(23) == 148\n    assert octagonal(24) == 154\n    assert octagonal(25) == 160\n    assert octagonal(26) == 166\n    assert octagonal(27) == 172\n    assert octagonal(28) == 178\n    assert octagonal(29) == 184\n    assert octagonal(30) == 190\n    assert octagonal(31) == 196\n    assert octagonal(32) == 202\n    assert octagonal(33) == 208\n    assert octagonal(34) == 214\n    assert octagonal(35) == 220\n    assert octagonal(36) == 226\n    assert octagonal(37) == 232\n    assert octagonal(38) == 238\n    assert octagonal(39) == 244\n    assert octagonal(40) == 250\n    assert octagonal(41) == 256\n    assert octagonal(42) == 262\n    assert octagonal(43) == 268\n    assert octagonal(44) == 274\n    assert octagonal(45) == 280\n    assert octagonal(46) == 286\n    assert octagonal(47) == 292\n    assert octagonal(48) == 298",
    "def oct(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n < 10:\n        return oct_numbers[n]\n    else:\n        return oct_numbers[n/10]*10 + oct_numbers[n%10]\n\noct_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48]",
    "import unittest\n\ndef octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    The octagonal numbers are the numbers whose\n    square is an octagonal number.\n    The first ten octagonal numbers are:\n    1, 7, 21, 42, 70, 134, 196, 292,\n    441, 729, 1414, 2484, 4342, 72900, 1414124, 24841706,\n    43421406, 72924508, 141421356, 248428561, 434214652, 729322221, 1414330129,\n    2484363311, 434330122, 729327685, 1414369621, 2484392343, 434370977,\n    729350145, 1414480129, 2484456607, 434458673, 729361614, 1414551541,\n    2484607953, 434461649, 729363679, 1414651361, 2484687789, 434691403,\n    729370099, 1414751141, 2484802991, 434772857, 729382279, 1414855941,\n    2484884439, 434792593, 729411145, 1414928963, 2484991021, 434906328,\n    729452521, 1415071529, 2485019539, 434916987, 729455571, 1415151899,\n    2485143473, 434923889, 729459221, 1415240849, 2485238879, 434930783,\n    729459911, 1415331149, 2485299841, 434937641, 729462561, 1415421741,\n    2485386859, 434945133, 729470021, 1415521059, 2485471021, 434948559,\n    729480821, 1415577159, 2485505931, 434955159, 729487571, 1415656129,\n    2485607907, 434960221,",
    "def octagonal_n(n):\n    \"\"\"\n    nth octagonal number.\n    \"\"\"\n    return octagonal_n(n, 3)\n\ndef octagonal_n(n, base):\n    \"\"\"\n    nth octagonal number.\n    \"\"\"\n    if n < 0:\n        return 0\n    else:\n        return octagonal_n(n, base * base) + base\n\nif __name__ == \"__main__\":\n    print octagonal_n(3)\n    print octagonal_n(2)\n    print octagonal_n(1)\n    print octagonal_n(0)\n    print octagonal_n(4)\n    print octagonal_n(5)\n    print octagonal_n(6)\n    print octagonal_n(7)\n    print octagonal_n(8)\n    print octagonal_n(9)\n    print octagonal_n(10)\n    print octagonal_n(11)\n    print octagonal_n(12)\n    print octagonal_n(13)\n    print octagonal_n(14)\n    print octagonal_n(15)\n    print octagonal_n(16)\n    print octagonal_n(17)\n    print octagonal_n(18)\n    print octagonal_n(19)\n    print octagonal_n(20)",
    "def oct_number(n):\n    \"\"\"\n    Input n is an integer from 1 to n, calculate the nth octagonal number.\n    \"\"\"\n    return n*(n+1)/2 + n*(3*n-1)/2\n\nif __name__ == '__main__':\n    print oct_number(7)",
    "def octagonal(n):\n    return n * (3*n-1) // 2\n\nif __name__ == '__main__':\n    print octagonal(1)\n    print octagonal(2)\n    print octagonal(3)\n    print octagonal(4)\n    print octagonal(5)\n    print octagonal(6)\n    print octagonal(7)\n    print octagonal(8)\n    print octagonal(9)\n    print octagonal(10)",
    "def oct(n):\n    return sum(oct_n(n))\n\ndef oct_n(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return oct_n(n-1)\n    else:\n        return oct_n(n-1) + oct_n(n-3) + oct_n(n-5)\n\nif __name__ == \"__main__\":\n    print oct(3)",
    "import math\n\ndef octagonal_nth(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    n: The target octagonal number.\n    \"\"\"\n    a = 1\n    while a <= n:\n        a += 2\n    return a\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    print octagonal_nth(9)\n\nif __name__ == '__main__':\n    main()",
    "def oct_n(n):\n    \"\"\"\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    return (n * (3 * n - 1) + 1) / 2\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert oct_n(1) == 8, \"1st oct\"\n    assert oct_n(2) == 15, \"2nd oct\"\n    assert oct_n(3) == 24, \"3rd oct\"\n    assert oct_n(4) == 35, \"4th oct\"\n    assert oct_n(5) == 56, \"5th oct\"\n    assert oct_n(6) == 84, \"6th oct\"\n    assert oct_n(7) == 121, \"7th oct\"\n    assert oct_n(8) == 144, \"8th oct\"\n    assert oct_n(9) == 210, \"9th oct\"\n    assert oct_n(10) == 252, \"10th oct\"\n    assert oct_n(11) == 284, \"11th oct\"\n    assert oct_n(12) == 336, \"12th oct\"\n    assert oct_n(13) == 384, \"13th oct\"\n    assert oct_n(14) == 420, \"14th oct\"\n    assert oct_n(15) == 456, \"15th oct\"",
    "def octagonal_number(n):\n    \"\"\"\n    >>> octagonal_number(1)\n    8\n    >>> octagonal_number(2)\n    12\n    >>> octagonal_number(3)\n    24\n    >>> octagonal_number(4)\n    36\n    >>> octagonal_number(5)\n    48\n    >>> octagonal_number(6)\n    64\n    >>> octagonal_number(7)\n    84\n    >>> octagonal_number(8)\n    100\n    >>> octagonal_number(9)\n    120\n    >>> octagonal_number(10)\n    144\n    \"\"\"\n    return nth_octagonal(n)\n\ndef nth_octagonal(n):\n    \"\"\"\n    >>> nth_octagonal(1)\n    8\n    >>> nth_octagonal(2)\n    12\n    >>> nth_octagonal(3)\n    24\n    >>> nth_octagonal(4)\n    36\n    >>> nth_octagonal(5)\n    48\n    >>> nth_octagonal(6)\n    64\n    >>> nth_octagonal(7)\n    84\n    >>> nth_octagonal(8)\n    100\n    >>> nth_octagonal(9)\n    120\n    >>> nth_octagonal(10)\n    144\n    \"\"\"\n    if n == 1:\n        return 8\n    if n == 2:\n        return 12\n    if n == 3:\n        return 24\n    if n == 4:\n        return 36\n    if n == 5:\n        return 48\n    if n == 6:\n        return 64\n    if n == 7:\n        return 84\n    if n == 8:\n        return 100\n    if n == 9:\n        return 120\n    if n == 10:\n        return 144\n    else:\n        raise ValueError('Invalid value')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def octagonal_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 8\n    if n == 3:\n        return 27\n    if n == 4:\n        return 64\n    if n == 5:\n        return 125\n    if n == 6:\n        return 216\n    if n == 7:\n        return 343\n    if n == 8:\n        return 512\n    if n == 9:\n        return 729\n    if n == 10:\n        return 1000\n    if n == 11:\n        return 1365\n    if n == 12:\n        return 1536\n    if n == 13:\n        return 1729\n    if n == 14:\n        return 2048\n    if n == 15:\n        return 2187\n    if n == 16:\n        return 2532\n    if n == 17:\n        return 2861\n    if n == 18:\n        return 3128\n    if n == 19:\n        return 3456\n    if n == 20:\n        return 3833\n    if n == 21:\n        return 4192\n    if n == 22:\n        return 4575\n    if n == 23:\n        return 4932\n    if n == 24:\n        return 5289\n    if n == 25:\n        return 5673\n    if n == 26:\n        return 6045\n    if n == 27:\n        return 6386\n    if n == 28:\n        return 6831\n    if n == 29:\n        return 7169\n    if n == 30:\n        return 7551\n    if n == 31:\n        return 7911\n    if n == 32:\n        return 8265\n    if n == 33:\n        return 8651\n    if n == 34:\n        return 9079\n    if n == 35:\n        return 9523\n    if n == 36:\n        return 9971\n    if n == 37:\n        return 10385\n    if n == 38:\n        return 10769\n    if n == 39:\n        return 11285\n    if n == 40:\n        return 11689\n    if n == 41:\n        return 12143\n    if n == 42:",
    "def octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    i = 1\n    while i < n:\n        i += 2\n    return (i * (i + 1) / 2) + (i - 1) * (i - 1) / 2\n\nif __name__ == '__main__':\n    print octagonal_number(1)\n    print octagonal_number(2)\n    print octagonal_number(3)\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)\n    print octagonal_number(10)\n    print octagonal_number(11)\n    print octagonal_number(12)\n    print octagonal_number(13)\n    print octagonal_number(14)\n    print octagonal_number(15)\n    print octagonal_number(16)\n    print octagonal_number(17)\n    print octagonal_number(18)\n    print octagonal_number(19)\n    print octagonal_number(20)\n    print octagonal_number(21)\n    print octagonal_number(22)\n    print octagonal_number(23)\n    print octagonal_number(24)\n    print octagonal_number(25)\n    print octagonal_number(26)\n    print octagonal_number(27)\n    print octagonal_number(28)\n    print octagonal_number(29)\n    print octagonal_number(30)\n    print octagonal_number(31)\n    print octagonal_number(32)\n    print octagonal_number(33)\n    print octagonal_number(34)\n    print octagonal_number(35)\n    print octagonal_number(36)\n    print octagonal_number(37)\n    print octagonal_number(38)\n    print octagonal_number(39)\n    print octagonal_number(40)\n    print octagonal_number(41)\n    print octagonal",
    "def get_nth_octagonal(n):\n    \"\"\"\n    For example, given n = 3, return 8.\n    \"\"\"\n    oct = [0] * n\n    oct[0] = 1\n    oct[1] = 2\n    for i in range(2, n):\n        oct[i] = 8 - 2 * oct[i - 1]\n    return oct[n - 1]\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print(get_nth_octagonal(i))",
    "import math\n\n\ndef octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return octagonal_number(n/2)\n    else:\n        return octagonal_number(n/2) + octagonal_number(n/2 + 1)\n\n\nif __name__ == '__main__':\n    assert octagonal_number(0) == 1\n    assert octagonal_number(1) == 8\n    assert octagonal_number(2) == 27\n    assert octagonal_number(3) == 144\n    assert octagonal_number(4) == 625\n    assert octagonal_number(5) == 2187\n    assert octagonal_number(6) == 8906\n    assert octagonal_number(7) == 4561\n    assert octagonal_number(8) == 18231\n    assert octagonal_number(9) == 86427\n    assert octagonal_number(10) == 362880\n    assert octagonal_number(11) == 1676544\n    assert octagonal_number(12) == 7291456\n    assert octagonal_number(13) == 32255840\n    assert octagonal_number(14) == 1342177280\n    assert octagonal_number(15) == 61358241536\n    assert octagonal_number(16) == 262144075264\n    assert octagonal_number(17) == 10903520328576\n    assert octagonal_number(18) == 54517986912384\n    assert octagonal_number(19) == 21910160253974464\n    assert octagonal_number(20) == 9666720764060144448\n    assert octagonal_number(21) == 4882812527343751792256\n    assert octagonal_number(22) == 2199704855762969480192160\n    assert octagonal_number(23) == 997574204101440128480192160\n    assert octagonal_number(24) == 4882812527343751792256\n    assert octagonal_number(25) == 2",
    "import math\n\ndef octagonal_n(n):\n    return (n+1) * (n+3) * (3*n+1) / 2\n\n\ndef main():\n    print octagonal_n(1)\n    print octagonal_n(2)\n    print octagonal_n(3)\n    print octagonal_n(4)\n    print octagonal_n(5)\n    print octagonal_n(6)\n    print octagonal_n(7)\n    print octagonal_n(8)\n    print octagonal_n(9)\n\nif __name__ == '__main__':\n    main()",
    "def octagonal_number(n):\n    # write your code here\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    \n    for i in range(0, n):\n        current_oct = octagonal_number(i + 1)\n        current_oct += octagonal_number(n - i - 1)\n        print current_oct\n        \n\nif __name__ == \"__main__\":\n    octagonal_number(20)",
    "def octagonal_number(n):\n    \"\"\"\n    For an integer n, return the nth octagonal number.\n    1 -> 8\n    2 -> 7\n    3 -> 6\n    4 -> 5\n    5 -> 8\n    6 -> 9\n    7 -> 10\n    8 -> 11\n    9 -> 12\n    10 -> 13\n    11 -> 14\n    12 -> 15\n    13 -> 16\n    14 -> 17\n    15 -> 18\n    16 -> 19\n    17 -> 20\n    18 -> 21\n    19 -> 22\n    20 -> 23\n    21 -> 24\n    22 -> 25\n    23 -> 26\n    24 -> 27\n    25 -> 28\n    26 -> 29\n    27 -> 30\n    28 -> 31\n    29 -> 32\n    30 -> 33\n    31 -> 34\n    32 -> 35\n    33 -> 36\n    34 -> 37\n    35 -> 38\n    36 -> 39\n    37 -> 40\n    38 -> 41\n    39 -> 42\n    40 -> 43\n    41 -> 44\n    42 -> 45\n    43 -> 46\n    44 -> 47\n    45 -> 48\n    46 -> 49\n    47 -> 50\n    48 -> 51\n    49 -> 52\n    50 -> 53\n    51 -> 54\n    52 -> 55\n    53 -> 56\n    54 -> 57\n    55 -> 58\n    56 -> 59\n    57 -> 60\n    58 -> 61\n    59 -> 62\n    60 -> 63\n    61 -> 64\n    62 -> 65\n    63 -> 66\n    64 -> 67\n    65 -> 68\n    66 -> 69\n    67 -> 70\n    68 -> 71\n    69 -> 72\n    70 -> 73\n    71 -> 74\n    72 -> 75\n    73 -> 76\n    74 -> 77\n    75 -> 78\n    76 -> 79\n    77 -> 80\n    78 -> 81\n    79 -> 82\n    80 -> 83\n    81 -> 84\n    82 -> 85\n    83 -> 86\n    84 -> 87\n    85 -> 88\n    86 -> 89\n    87 -> 90\n    88 -> 91\n    89 -> 92\n    90 -> 93\n    91 -> 94\n    92 -> 95\n    93 -> 96\n    94 -> 97\n    95 -> 98\n    96 -> 99\n    97 -> 100",
    "import math\n\ndef octagonal_number(n):\n    return (n*(3*n - 1) + 1) / 2\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print octagonal_number(i)",
    "# The nth octagonal number is the sum of the first n terms of the sequence 1, 8, 13, 22, etc.\ndef octagonal_number(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nif __name__ == '__main__':\n    assert octagonal_number(1) == 1\n    assert octagonal_number(8) == 21\n    assert octagonal_number(13) == 86\n    assert octagonal_number(22) == 564\n    assert octagonal_number(100) == 232792560\n    assert octagonal_number(101) == 232792561\n    assert octagonal_number(102) == 232792562",
    "# The following snippet of code is an implementation of the problem\n# http://www.mathsisfun.com/numbers/octagonal-numbers.html\n# The problem is a special case of the problem of the same name but\n# where the sum of the numbers is the same as the product of the\n# numbers.\ndef octagon(n):\n    # n is an integer\n    # n+1 is a sum of the first n + 1 numbers\n    return sum(range(1, n + 1)) * (n + 1)\n\n\ndef octagon(n):\n    # n is an integer\n    # n+1 is a sum of the first n + 1 numbers\n    return sum(range(1, n + 1)) * (n + 1)\n\n\ndef octagon(n):\n    # n is an integer\n    # n+1 is a sum of the first n + 1 numbers\n    return sum(range(1, n + 1)) * (n + 1)\n\n\nif __name__ == \"__main__\":\n    # test cases\n    assert octagon(1) == 8\n    assert octagon(2) == 18\n    assert octagon(3) == 58\n    assert octagon(4) == 344\n    assert octagon(5) == 1365\n    assert octagon(6) == 4561\n    assert octagon(7) == 16765\n    assert octagon(8) == 56421\n    assert octagon(9) == 262096\n    assert octagon(10) == 1041890\n    assert octagon(11) == 4863900\n    assert octagon(12) == 20346520\n    assert octagon(13) == 86225400\n    assert octagon(14) == 353933200\n    assert octagon(15) == 15488412800\n    assert octagon(16) == 707711496320\n    assert octagon(17) == 2879651638160\n    assert octagon(18) == 131720347098560\n    assert octagon(19) == 543215036667040\n    assert octagon(20) == 2652299774818800\n    assert octagon(21) == 11580992639708480",
    "def octagonal_number(n):\n    oct_number = 0\n    for i in range(n):\n        oct_number += 1\n        if oct_number % 8 == 0:\n            oct_number = oct_number / 8\n    return oct_number\n\nif __name__ == \"__main__\":\n    print octagonal_number(5)\n    print octagonal_number(12)",
    "# A list of the nth octagonal number.\n# [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1664, 2259, 3168, 4181,\n# 5844, 8235, 12105, 16516, 22584, 31641, 46428, 67221, 93096, 139365, 187290,\n# 250618, 334899, 474432, 708621, 1020561, 1453165, 2007081, 2838864, 4194304]\n\n# @include\ndef octagon_number(n):\n    return 1 + n * (3 * n - 1) / 2\n\n\ndef main():\n    assert octagon_number(0) == 1\n    assert octagon_number(1) == 8\n    assert octagon_number(2) == 27\n    assert octagon_number(3) == 64\n    assert octagon_number(4) == 125\n    assert octagon_number(5) == 216\n    assert octagon_number(6) == 343\n    assert octagon_number(7) == 512\n    assert octagon_number(8) == 729\n    assert octagon_number(9) == 1000\n    assert octagon_number(10) == 1331\n    assert octagon_number(11) == 1664\n    assert octagon_number(12) == 2259\n    assert octagon_number(13) == 3168\n    assert octagon_number(14) == 4181\n    assert octagon_number(15) == 5844\n    assert octagon_number(16) == 8235\n    assert octagon_number(17) == 12105\n    assert octagon_number(18) == 16516\n    assert octagon_number(19) == 22584\n    assert octagon_number(20) == 31641\n    assert octagon_number(21) == 46428\n    assert octagon_number(22) == 67221\n    assert octagon_number(23) == 93096\n    assert octagon_number(24) == 139365\n    assert octagon_number(25) == 187290\n    assert octagon_number(26) == 250618\n    assert octagon_number",
    "def octagonal_number(n):\n    \"\"\"\n    Input:\n        n: an integer\n    Output:\n        an integer\n    \"\"\"\n    if n < 1 or n > 11:\n        raise ValueError(\"n must be between 1 and 10\")\n    oct = 1\n    for i in range(1, n + 1):\n        oct *= i\n    return oct\n\n\nif __name__ == '__main__':\n    assert octagonal_number(1) == 1\n    assert octagonal_number(2) == 8\n    assert octagonal_number(3) == 27\n    assert octagonal_number(4) == 64\n    assert octagonal_number(5) == 125\n    assert octagonal_number(6) == 216\n    assert octagonal_number(7) == 343\n    assert octagonal_number(8) == 512\n    assert octagonal_number(9) == 729\n    assert octagonal_number(10) == 1000\n    assert octagonal_number(11) == 1365\n    assert octagonal_number(12) == 1793\n    assert octagonal_number(13) == 2542\n    assert octagonal_number(14) == 3628\n    assert octagonal_number(15) == 4664\n    assert octagonal_number(16) == 5833\n    assert octagonal_number(17) == 7069\n    assert octagonal_number(18) == 8752\n    assert octagonal_number(19) == 10629\n    assert octagonal_number(20) == 12642\n    assert octagonal_number(21) == 15289\n    assert octagonal_number(22) == 18576\n    assert octagonal_number(23) == 22025\n    assert octagonal_number(24) == 25166\n    assert octagonal_number(25) == 28729\n    assert octagonal_number(26) == 35356\n    assert octagonal_number(27) == 39135",
    "import math\n\ndef octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Example:\n\n    octagonal_number(1) = 8\n    octagonal_number(2) = 27\n    octagonal_number(3) = 98\n    \"\"\"\n    octagonal_number_list = []\n    for i in range(1, n + 1):\n        octagonal_number_list.append(math.ceil(math.sqrt(i)))\n    return octagonal_number_list[n-1]\n\nif __name__ == '__main__':\n    print octagonal_number(6)",
    "def octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    oct_num = 1\n    for i in range(2, n+1):\n        oct_num *= (i*(i+1))/2\n    return oct_num\n\n\n# Your code here\n\nprint(octagonal_number(1))\nprint(octagonal_number(2))\nprint(octagonal_number(3))\nprint(octagonal_number(4))\nprint(octagonal_number(5))",
    "def get_oct_nth(n):\n    oct = 1\n    for i in range(1, n):\n        oct *= oct + oct + 1\n    return oct\n\nif __name__ == '__main__':\n    n = int(input('Please enter an integer : '))\n    oct_nth = get_oct_nth(n)\n    print('The nth octagonal number is {}.'.format(oct_nth))",
    "def octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    return (n*(3*n+1)/2) + octagonal_number(n-1)\n\nif __name__ == '__main__':\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)",
    "import math\n\n\ndef octagonal_number(n):\n    # Returns the nth octagonal number\n    return sum(i**2 for i in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    print octagonal_number(4)\n    print octagonal_number(5)",
    "def octagonal(n):\n    \"\"\"\n    nth octagonal number is the sum of the square of all the numbers from 1 to n.\n    \"\"\"\n    return sum(i ** 2 for i in range(1, n + 1))\n\nif __name__ == '__main__':\n    assert octagonal(1) == 8\n    assert octagonal(2) == 15\n    assert octagonal(3) == 22\n    assert octagonal(4) == 29\n    assert octagonal(5) == 36\n    assert octagonal(6) == 43\n    assert octagonal(7) == 50\n    assert octagonal(8) == 58\n    assert octagonal(9) == 66\n    assert octagonal(10) == 74\n    assert octagonal(11) == 81\n    assert octagonal(12) == 88\n    assert octagonal(13) == 95\n    assert octagonal(14) == 102\n    assert octagonal(15) == 109\n    assert octagonal(16) == 116\n    assert octagonal(17) == 123\n    assert octagonal(18) == 130\n    assert octagonal(19) == 137\n    assert octagonal(20) == 144\n    assert octagonal(21) == 151\n    assert octagonal(22) == 158\n    assert octagonal(23) == 165\n    assert octagonal(24) == 172\n    assert octagonal(25) == 179\n    assert octagonal(26) == 186\n    assert octagonal(27) == 193\n    assert octagonal(28) == 200\n    assert octagonal(29) == 208\n    assert octagonal(30) == 216\n    assert octagonal(31) == 224\n    assert octagonal(32) == 232\n    assert octagonal(33) == 240\n    assert octagonal(34) == 248\n    assert octagonal(35) == 256\n    assert octagonal(36) == 264\n    assert octagonal(37) == 272\n    assert octagonal(38) == 280\n    assert octagonal(39) == 288\n    assert octagonal(40) == 296\n    assert octagonal(41) == 304\n    assert octagonal(42) == 312\n    assert octagonal(43) == 320\n    assert octagonal(44) == 328\n    assert octagonal(",
    "def octagonal_number(n):\n    \"\"\"\n    n: An integer, n > 0.\n    Return the nth octagonal number.\n    \"\"\"\n    return sum(n * (n + 1) * (2 * n + 1) / 6)\n\nif __name__ == \"__main__\":\n    print octagonal_number(1)\n    print octagonal_number(2)\n    print octagonal_number(3)\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)\n    print octagonal_number(10)",
    "from math import sqrt\n\n\ndef octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n*(n+1)//2 + n*(3*n-1)//2\n\n\ndef main():\n    \"\"\"\n    Sample Output\n    >>> octagonal(1)\n    1\n    >>> octagonal(4)\n    25\n    >>> octagonal(5)\n    121\n    >>> octagonal(6)\n    253\n    \"\"\"\n    print(octagonal(1))\n    print(octagonal(4))\n    print(octagonal(5))\n    print(octagonal(6))\n\n\nif __name__ == '__main__':\n    main()",
    "def octagonal_number(n):\n    \"\"\"\n    >>> octagonal_number(1)\n    8\n    >>> octagonal_number(2)\n    15\n    >>> octagonal_number(3)\n    24\n    >>> octagonal_number(4)\n    36\n    >>> octagonal_number(5)\n    55\n    >>> octagonal_number(6)\n    96\n    >>> octagonal_number(7)\n    144\n    >>> octagonal_number(8)\n    240\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    \n    sum = 0\n    for i in range(n):\n        sum += i * i\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagonal(n):\n    \"\"\"\n    >>> octagonal(1)\n    8\n    >>> octagonal(2)\n    12\n    >>> octagonal(3)\n    20\n    >>> octagonal(4)\n    32\n    >>> octagonal(5)\n    40\n    >>> octagonal(6)\n    48\n    >>> octagonal(7)\n    56\n    >>> octagonal(8)\n    64\n    \"\"\"\n    return n*(3*n-1)/2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagonal(n):\n    \"\"\"\n    nth octagonal number is the sum of the squares of the first n terms of\n    the Fibonacci sequence.\n    \"\"\"\n    fib = [1, 1]\n    for i in range(n):\n        fib.append(fib[i] + fib[i-1])\n    return sum(map(lambda x: x*x, fib))\n\nif __name__ == '__main__':\n    print octagonal(5)",
    "def octagonal(n):\n    result = 0\n    for i in range(1, n + 1):\n        result = result * i\n        result = result + i\n    return result\n\nif __name__ == \"__main__\":\n    print(octagonal(10))",
    "def octagon(n):\n    return (n + 1) * (n + 2) / 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print octagon(i)",
    "def get_oct_number(n):\n    return oct_number(n)\n\ndef oct_number(n):\n    i = 1\n    while i <= n:\n        i = i + 2\n    return i - 1",
    "from math import sqrt\n\ndef nthOct(n):\n    \"\"\"\n    nthOct(n) -> int\n    Returns the nth octagonal number.\n    \"\"\"\n    return (n*(3*n+1)/2 + n) * (3*n+1)/2\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print nthOct(i)",
    "# Definition for an octagonal number.\nclass Octagonal(object):\n    def __init__(self, num):\n        self.num = num\n\n    def __repr__(self):\n        return str(self.num)\n\n# Your Solution here.\ndef nthOctagonal(n):\n    oct = Octagonal(1)\n    for i in range(1, n):\n        oct = Octagonal(oct.num * 10 + 1)\n    return oct.num\n\nif __name__ == '__main__':\n    print nthOctagonal(5)",
    "def get_nth_octagonal_number(n):\n    \"\"\"\n    Return the nth octagonal number.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 1 + (2 * n - 1) * (2 * n - 3) // 2\n\nif __name__ == '__main__':\n    assert get_nth_octagonal_number(1) == 1\n    assert get_nth_octagonal_number(2) == 8\n    assert get_nth_octagonal_number(3) == 27\n    assert get_nth_octagonal_number(4) == 146\n    assert get_nth_octagonal_number(5) == 729\n    assert get_nth_octagonal_number(6) == 2187\n    assert get_nth_octagonal_number(7) == 9741\n    assert get_nth_octagonal_number(8) == 32749\n    assert get_nth_octagonal_number(9) == 130161\n    assert get_nth_octagonal_number(10) == 409921\n    assert get_nth_octagonal_number(11) == 1734929\n    assert get_nth_octagonal_number(12) == 6179921\n    assert get_nth_octagonal_number(13) == 23670039\n    assert get_nth_octagonal_number(14) == 99740351\n    assert get_nth_octagonal_number(15) == 359705743\n    assert get_nth_octagonal_number(16) == 1558116917\n    assert get_nth_octagonal_number(17) == 5851673059\n    assert get_nth_octagonal_number(18) == 251639502469\n    assert get_nth_octagonal_number(19) == 997512496881\n    assert get_nth_octagonal_number(20) == 38303845953769\n    assert get_nth_octagonal_number(21) == 1587940971050609\n    assert get_nth_octagonal_number(22) == 64589506028981921",
    "import math\n\ndef octagon(n):\n    return octagonal(n)\n\ndef octagonal(n):\n    return (n * (3*n + 1) + 1) / 2\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number you want to find the nth octagonal number for:\"))\n    print(octagon(n))",
    "# Definition for an octagonal number.\n# class OctagonalNumber(object):\n#     def __init__(self, n):\n#         \"\"\"\n#         n: an integer\n#         \"\"\"\n#         self.n = n\n\nclass Solution(object):\n    def getOct(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n*(n+1)*(3*n+1)/2\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getOct(4)",
    "import math\n\ndef octagonal_number(n):\n    oct_num = 1\n    for i in range(1, n):\n        oct_num = oct_num * (10 - i) / (8 - i)\n    return oct_num\n\ndef test_case(n):\n    print octagonal_number(n)\n\ndef main():\n    test_case(1)\n    test_case(2)\n    test_case(3)\n    test_case(4)\n    test_case(5)\n\nif __name__ == '__main__':\n    main()",
    "def octagonal_nth(n):\n    \"\"\"\n    nth octagonal number\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # n = 1\n    if n == 1:\n        return 1\n\n    # n = 2\n    if n == 2:\n        return 8\n\n    # n = 3\n    if n == 3:\n        return 27\n\n    # n = 4\n    if n == 4:\n        return 64\n\n    # n = 5\n    if n == 5:\n        return 125\n\n    # n = 6\n    if n == 6:\n        return 216\n\n    # n = 7\n    if n == 7:\n        return 343\n\n    # n = 8\n    if n == 8:\n        return 512\n\n    # n = 9\n    if n == 9:\n        return 729\n\n    # n = 10\n    if n == 10:\n        return 1000\n\n    # n = 11\n    if n == 11:\n        return 1365\n\n    # n = 12\n    if n == 12:\n        return 1729\n\n    # n = 13\n    if n == 13:\n        return 2048\n\n    # n = 14\n    if n == 14:\n        return 2584\n\n    # n = 15\n    if n == 15:\n        return 3168\n\n    # n = 16\n    if n == 16:\n        return 4096\n\n    # n = 17\n    if n == 17:\n        return 5120\n\n    # n = 18\n    if n == 18:\n        return 7168\n\n    # n = 19\n    if n == 19:\n        return 10240\n\n    # n = 20\n    if n == 20:\n        return 14336\n\n    # n = 21\n    if n == 21:\n        return 20480\n\n    # n = 22\n    if n == 22:\n        return 28672\n\n    # n = 23\n    if n == 23:\n        return 36864\n\n    # n = 24\n    if n == 24:\n        return 46368\n\n    # n = 25\n    if n == 25:\n        return 57344\n\n    # n = 26\n    if n == 26:\n        return 70512\n\n    # n =",
    "def oct_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 8\n    if n == 2:\n        return 27\n    if n == 3:\n        return 216\n    if n == 4:\n        return 625\n    if n == 5:\n        return 1601\n    if n == 6:\n        return 3906\n    if n == 7:\n        return 10403\n    if n == 8:\n        return 26215\n    if n == 9:\n        return 51423\n    if n == 10:\n        return 122559\n    if n == 11:\n        return 303777\n    if n == 12:\n        return 605783\n    if n == 13:\n        return 1304749\n    if n == 14:\n        return 3087261\n    if n == 15:\n        return 6130163\n    if n == 16:\n        return 13161439\n    if n == 17:\n        return 30864381\n    if n == 18:\n        return 63202879\n    if n == 19:\n        return 134217689\n    if n == 20:\n        return 314573903\n    if n == 21:\n        return 624679809\n    if n == 22:\n        return 1258291739\n    if n == 23:\n        return 3066329669\n    if n == 24:\n        return 6262388099\n    if n == 25:\n        return 12631459501\n    if n == 26:\n        return 30671093299\n    if n == 27:\n        return 62757321189\n    if n == 28:\n        return 126984290159\n    if n == 29:\n        return 307057481701\n    if n == 30:\n        return 629356679209\n    if n == 31:\n        return 1274390598239\n    if n == 32:\n        return 3071226474859\n    if n == 33:\n        return 6311069693399\n    if n == 34:\n        return 12752279037089",
    "def octagonal_number(n):\n    \"\"\"\n    nth octagonal number is the sum of the following\n    \"\"\"\n    return sum(str(n) + str(i) for i in range(1, n+1))\n\nif __name__ == \"__main__\":\n    print octagonal_number(10)",
    "import math\nfrom time import time\n\ndef octagonal(n):\n    return octagonal_sum(n)\n\ndef octagonal_sum(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 27\n    elif n == 4:\n        return 64\n    elif n == 5:\n        return 125\n    elif n == 6:\n        return 216\n    elif n == 7:\n        return 343\n    elif n == 8:\n        return 512\n    elif n == 9:\n        return 729\n    elif n == 10:\n        return 1000\n    else:\n        return octagonal_sum(n - 1) + octagonal_sum(n - 2) + octagonal_sum(n - 3) + octagonal_sum(n - 4)\n\nif __name__ == \"__main__\":\n    t = time()\n    print octagonal(10**6)\n    print 'Time elapsed:', time() - t",
    "def octagonal_number(n):\n    \"\"\"\n    n: The number to be calculated.\n    return: The nth octagonal number.\n    \"\"\"\n    # 1 <= n <= 100\n    if n < 1 or n > 100:\n        return\n    # return n * (n+1) * (2*n+1)\n    return n * (n * (3*n+1) - 1)\n\nif __name__ == '__main__':\n    print octagonal_number(1)\n    print octagonal_number(2)\n    print octagonal_number(3)\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)\n    print octagonal_number(10)",
    "import math\n\ndef get_nth_octagonal(n):\n    \"\"\"\n    nth octagonal number is the sum of the first n digits of the nth octagonal number.\n    \"\"\"\n    oct_number = 1\n    for i in range(n):\n        oct_number += str(oct_number)[:i+1]\n    return oct_number\n\n\nif __name__ == \"__main__\":\n    print(get_nth_octagonal(10))",
    "from math import sqrt\n\n\ndef octagonal_number(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return octagonal_number_1(n)\n\n\ndef octagonal_number_1(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    if n < 1 or n > 100:\n        return 0\n    else:\n        return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_2(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_3(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_4(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_5(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_6(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_7(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 * n + 1) * (5 * n + 3)) / 6\n\n\ndef octagonal_number_8(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n + 1) * (2 *",
    "def octagonal_number(n):\n  return (n*(3*n-1)/2) + (n*(3*n+1)/2) - 1\n\nif __name__ == \"__main__\":\n  print octagonal_number(1)\n  print octagonal_number(2)\n  print octagonal_number(3)\n  print octagonal_number(4)\n  print octagonal_number(5)\n  print octagonal_number(6)\n  print octagonal_number(7)\n  print octagonal_number(8)\n  print octagonal_number(9)\n  print octagonal_number(10)\n  print octagonal_number(11)\n  print octagonal_number(12)\n  print octagonal_number(13)\n  print octagonal_number(14)\n  print octagonal_number(15)\n  print octagonal_number(16)\n  print octagonal_number(17)\n  print octagonal_number(18)\n  print octagonal_number(19)\n  print octagonal_number(20)\n  print octagonal_number(21)\n  print octagonal_number(22)\n  print octagonal_number(23)\n  print octagonal_number(24)\n  print octagonal_number(25)\n  print octagonal_number(26)\n  print octagonal_number(27)\n  print octagonal_number(28)\n  print octagonal_number(29)\n  print octagonal_number(30)\n  print octagonal_number(31)\n  print octagonal_number(32)\n  print octagonal_number(33)\n  print octagonal_number(34)\n  print octagonal_number(35)\n  print octagonal_number(36)\n  print octagonal_number(37)\n  print octagonal_number(38)\n  print octagonal_number(39)\n  print octagonal_number(40)\n  print octagonal_number(41)\n  print octagonal_number(42)\n  print octagonal_number(43)\n  print octagonal_number(44)\n  print octagonal_number(45)\n  print octagonal_number(46)",
    "def oct_nth(n):\n    \"\"\"\n    nth octagonal number\n    Input: nth octagonal number, e.g. 5th octagonal number is 1732\n    Output: nth octagonal number\n    \"\"\"\n    #n = 1\n    #if n == 1:\n    #    return 1\n    #while n > 1:\n    #    n = (n * n) / 2\n    #    n = n - 1\n    #return n\n    #return nth_octagonal(n)\n    return oct_nth(n-1) + oct_nth(n-2) + oct_nth(n-3) + oct_nth(n-4)\n\ndef oct_nth_recursive(n):\n    \"\"\"\n    nth octagonal number\n    Input: nth octagonal number, e.g. 5th octagonal number is 1732\n    Output: nth octagonal number\n    \"\"\"\n    #n = 1\n    #if n == 1:\n    #    return 1\n    #while n > 1:\n    #    n = (n * (n+1)) / 2\n    #    n = n - 1\n    #return n\n    #return oct_nth(n-1) + oct_nth(n-2) + oct_nth(n-3) + oct_nth(n-4)\n    return oct_nth_recursive(n-1) + oct_nth_recursive(n-2) + oct_nth_recursive(n-3) + oct_nth_recursive(n-4)\n\ndef oct_nth_iterative(n):\n    \"\"\"\n    nth octagonal number\n    Input: nth octagonal number, e.g. 5th octagonal number is 1732\n    Output: nth octagonal number\n    \"\"\"\n    #n = 1\n    #while n > 1:\n    #    n = (n * (n+1)) / 2\n    #    n = n - 1\n    #return n\n    #return oct_nth(n-1) + oct_nth(n-2) + oct_nth(n-3) + oct_n",
    "def octagonal_number(n):\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    return octagonal_number(n-1) + octagonal_number(n-2)\n\n# Test cases\nprint octagonal_number(1)\nprint octagonal_number(2)\nprint octagonal_number(3)\nprint octagonal_number(4)\nprint octagonal_number(5)\nprint octagonal_number(6)\nprint octagonal_number(7)\nprint octagonal_number(8)\nprint octagonal_number(9)\nprint octagonal_number(10)",
    "def oct_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return oct_nth_iter(n)\n\n\ndef oct_nth_iter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return oct_nth_iter(n-1) + oct_nth_iter(n-2) + oct_nth_iter(n-3) + oct_nth_iter(n-4)\n\n\nif __name__ == \"__main__\":\n    assert oct_nth(0) == 1\n    assert oct_nth(1) == 8\n    assert oct_nth(2) == 27\n    assert oct_nth(3) == 64\n    assert oct_nth(4) == 125\n    assert oct_nth(5) == 216\n    assert oct_nth(6) == 343\n    assert oct_nth(7) == 512\n    assert oct_nth(8) == 729\n    assert oct_nth(9) == 1000",
    "def octagonal(n):\n    \"\"\"\n    n is the index of the octagonal number to be found.\n    \"\"\"\n    return n*(3*n-1)/2\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.time()\n    print(octagonal(5))\n    print('run time =', time.time() - start)",
    "import math\n\ndef octagonal(n):\n    '''\n    n: int\n        The number of octagonal numbers to be calculated.\n    '''\n\n    # 1st octagonal number\n    # 1st octagonal number = 1\n    # 2nd octagonal number = 8\n    # 3rd octagonal number = 27\n    # 4th octagonal number = 64\n    # 5th octagonal number = 125\n    # 6th octagonal number = 216\n    # 7th octagonal number = 343\n    # 8th octagonal number = 512\n    # 9th octagonal number = 729\n    # 10th octagonal number = 1000\n    # 11th octagonal number = 1401\n    # 12th octagonal number = 2208\n    # 13th octagonal number = 3648\n    # 14th octagonal number = 5120\n\n    # calculate the nth octagonal number\n    nth_octagonal = n * (n + 1) / 2\n\n    # calculate the first octagonal number\n    first_octagonal = (nth_octagonal - 1) * (nth_octagonal - 2) / 2\n\n    # calculate the first nth octagonal number\n    first_nth_octagonal = first_octagonal * (first_octagonal - 1) / 2\n\n    return first_nth_octagonal\n\nif __name__ == \"__main__\":\n    print octagonal(1)\n    print octagonal(2)\n    print octagonal(3)\n    print octagonal(4)\n    print octagonal(5)\n    print octagonal(6)\n    print octagonal(7)\n    print octagonal(8)\n    print octagonal(9)\n    print octagonal(10)\n    print octagonal(11)\n    print octagonal(12)\n    print octagonal(13)\n    print octagonal(14)\n    print octagonal(15)",
    "def oct(n):\n    \"\"\"\n    @param n: An integer.\n    @return: The nth octagonal number.\n    \"\"\"\n\n    return oct_num(n, 0)\n\n\ndef oct_num(n, pos):\n    \"\"\"\n    @param n: An integer.\n    @param pos: An integer.\n    @return: The nth octagonal number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 2\n\n    if pos == 0:\n        return oct_num(n - 1, 1)\n\n    return oct_num(n - 1, pos + 1) + oct_num(n - 1, pos)\n\n\nif __name__ == '__main__':\n    print oct(1)\n    print oct(2)\n    print oct(3)\n    print oct(4)\n    print oct(5)\n    print oct(6)\n    print oct(7)\n    print oct(8)\n    print oct(9)\n    print oct(10)\n    print oct(11)\n    print oct(12)\n    print oct(13)\n    print oct(14)\n    print oct(15)\n    print oct(16)\n    print oct(17)\n    print oct(18)\n    print oct(19)\n    print oct(20)\n    print oct(21)\n    print oct(22)\n    print oct(23)\n    print oct(24)\n    print oct(25)\n    print oct(26)\n    print oct(27)\n    print oct(28)\n    print oct(29)\n    print oct(30)\n    print oct(31)\n    print oct(32)\n    print oct(33)\n    print oct(34)\n    print oct(35)\n    print oct(36)\n    print oct(37)\n    print oct(38)\n    print oct(39)\n    print oct(40)\n    print oct(41)\n    print oct(42)\n    print oct(43)\n    print oct(44)\n    print oct(45)\n    print oct(46)\n    print oct(47)\n    print oct(48)\n    print oct(",
    "from math import sqrt\n\n\ndef get_nth_octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    :param n: An integer\n    :return: The nth octagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * (sqrt(5) + 1) / 2\n\n\nif __name__ == '__main__':\n    assert get_nth_octagonal_number(1) == 1\n    assert get_nth_octagonal_number(2) == 8\n    assert get_nth_octagonal_number(3) == 27\n    assert get_nth_octagonal_number(4) == 64\n    assert get_nth_octagonal_number(5) == 125\n    assert get_nth_octagonal_number(6) == 216\n    assert get_nth_octagonal_number(7) == 343\n    assert get_nth_octagonal_number(8) == 512\n    assert get_nth_octagonal_number(9) == 729\n    assert get_nth_octagonal_number(10) == 1000\n    assert get_nth_octagonal_number(11) == 1281\n    assert get_nth_octagonal_number(12) == 1756\n    assert get_nth_octagonal_number(13) == 2532\n    assert get_nth_octagonal_number(14) == 3628\n    assert get_nth_octagonal_number(15) == 4664\n    assert get_nth_octagonal_number(16) == 5985\n    assert get_nth_octagonal_number(17) == 7402\n    assert get_nth_octagonal_number(18) == 9493\n    assert get_nth_octagonal_number(19) == 11442\n    assert get_nth_octagonal_number(20) == 13609\n    assert get_nth_octagonal_number(21) == 15396\n    assert get_nth_octagonal_number(22) == 18261\n    assert get_nth_octagonal_number(23) == 21066\n    assert get_nth_",
    "from math import sqrt\n\n\ndef oct_nth(n):\n    oct_n = 1\n    for i in range(1, n+1):\n        oct_n = oct_n * 8 + (sqrt(8*i + 1) - 1)\n    return oct_n\n\n\nif __name__ == \"__main__\":\n    print(oct_nth(10))\n    print(oct_nth(100))\n    print(oct_nth(1000))\n    print(oct_nth(10000))\n    print(oct_nth(100000))\n    print(oct_nth(1000000))",
    "def octagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    num = 0\n    for i in range(n):\n        num += i\n    return num\n\n\nif __name__ == \"__main__\":\n    print octagonal(10)",
    "import math\n\ndef octagonal(n):\n    return n * (3 * n - 1) / 2\n\ndef main():\n    for i in range(1, 21):\n        oct = octagonal(i)\n        print(oct, oct == i)\n\nif __name__ == '__main__':\n    main()",
    "def nth_oct(n):\n    \"\"\"\n    nth_oct(n) -> int\n    nth_oct(n)\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"nth_oct(n) : n should be positive integer\")\n    oct = 0\n    for i in range(n):\n        oct += pow(i, 3)\n    return oct\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef octagonal_number(n):\n    oct_num = 1\n    for i in range(1, n):\n        oct_num += 2 ** (i + 1)\n    return oct_num\n\n\nif __name__ == '__main__':\n    print octagonal_number(2)\n    print octagonal_number(3)\n    print octagonal_number(4)\n    print octagonal_number(5)\n    print octagonal_number(6)\n    print octagonal_number(7)\n    print octagonal_number(8)\n    print octagonal_number(9)\n    print octagonal_number(10)",
    "import math\n\ndef octagonal(n):\n    return math.floor(math.sqrt(math.pow(n, 2) + 1))\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert octagonal(3) == 8, \"3rd octagonal\"\n    assert octagonal(4) == 12, \"4th octagonal\"\n    assert octagonal(5) == 15, \"5th octagonal\"\n    assert octagonal(6) == 18, \"6th octagonal\"\n    assert octagonal(7) == 22, \"7th octagonal\"\n    assert octagonal(8) == 30, \"8th octagonal\"\n    assert octagonal(9) == 36, \"9th octagonal\"\n    assert octagonal(10) == 45, \"10th octagonal\"\n    assert octagonal(100) == 900, \"100th octagonal\"",
    "# Definition for an octagonal number.\nclass OctagonalNumber:\n    def __init__(self, n):\n        self.n = n\n    def __str__(self):\n        return \"Octagonal number n = {}\".format(self.n)\n\nclass Solution(object):\n    def findNthOctagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: OctagonalNumber\n        \"\"\"\n        # Use O(n) space\n        nth = 1\n        while n >= nth:\n            nth += 1\n            nth *= nth\n        return nth\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findNthOctagonalNumber(1))\n    print(sol.findNthOctagonalNumber(2))\n    print(sol.findNthOctagonalNumber(3))\n    print(sol.findNthOctagonalNumber(4))\n    print(sol.findNthOctagonalNumber(5))\n    print(sol.findNthOctagonalNumber(6))\n    print(sol.findNthOctagonalNumber(7))\n    print(sol.findNthOctagonalNumber(8))",
    "import math\n\n\ndef octagonal_number(n):\n    \"\"\"\n    For n = 0, 1, 2,..., 8, the octagonal number is:\n        1 + 3*(n - 1) + 3*(n - 2) + 2*(n - 3) + 1*(n - 4) + 1*(n - 5) + 1*(n - 6) + 1*(n - 7) + 1*(n - 8)\n    \"\"\"\n    return 1 + 3 * (n - 1) + 3 * (n - 2) + 2 * (n - 3) + 1 * (n - 4) + 1 * (n - 5) + 1 * (n - 6) + 1 * (n - 7) + 1 * (n - 8)\n\n\nif __name__ == '__main__':\n    assert octagonal_number(0) == 1, 'first octagonal number'\n    assert octagonal_number(1) == 8,'second octagonal number'\n    assert octagonal_number(2) == 27, 'third octagonal number'\n    assert octagonal_number(3) == 97, 'fourth octagonal number'\n    assert octagonal_number(4) == 500, 'fifth octagonal number'\n    assert octagonal_number(5) == 1716,'sixth octagonal number'\n    assert octagonal_number(6) == 6561,'seventh octagonal number'\n    assert octagonal_number(7) == 1296, 'eighth octagonal number'\n    assert octagonal_number(8) == 25025, 'ninth octagonal number'",
    "import math\n\ndef octagonal(n):\n    octagon_number = math.factorial(n) / (math.factorial(n - 1) * math.factorial(n - 2))\n    return octagon_number\n\n\n# Test cases\nassert octagonal(1) == 8\nassert octagonal(2) == 9\nassert octagonal(3) == 27\nassert octagonal(4) == 64\nassert octagonal(5) == 243",
    "def octagonal(n):\n  return (n * (3 * n + 1) - 1) / 2\n\nprint octagonal(1)\nprint octagonal(2)\nprint octagonal(3)\nprint octagonal(4)\nprint octagonal(5)\nprint octagonal(6)",
    "def oct(n):\n    oct = 1\n    while n > 0:\n        oct *= (n - 1)\n        n -= 1\n    return oct\n\nprint oct(5)",
    "def octagonal(n):\n    \"\"\"\n    >>> octagonal(0)\n    8\n    >>> octagonal(1)\n    9\n    >>> octagonal(2)\n    16\n    >>> octagonal(3)\n    25\n    >>> octagonal(4)\n    36\n    >>> octagonal(5)\n    49\n    >>> octagonal(6)\n    64\n    >>> octagonal(7)\n    81\n    >>> octagonal(8)\n    100\n    >>> octagonal(9)\n    121\n    \"\"\"\n    return octagonal(n) + octagonal(n-1) - octagonal(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagonal_number(n):\n    oct_number = 1\n    for i in range(1, n+1):\n        oct_number += i*(3*i-1)/2\n    return oct_number\n\nif __name__ == '__main__':\n    print octagonal_number(4)",
    "def octagonal_number(n):\n    \"\"\"\n    >>> octagonal_number(1)\n    8\n    >>> octagonal_number(10)\n    729\n    >>> octagonal_number(100)\n    8183\n    >>> octagonal_number(1000)\n    96653\n    >>> octagonal_number(10000)\n    104729\n    >>> octagonal_number(100000)\n    109969\n    \"\"\"\n    return (n * (3 * n - 1) - 1) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def octagonal_number(n):\n    return (n * (3 * n - 1) + 1) / 2\n\nif __name__ == '__main__':\n    assert octagonal_number(1) == 8\n    assert octagonal_number(2) == 27\n    assert octagonal_number(3) == 144\n    assert octagonal_number(4) == 625\n    assert octagonal_number(5) == 19683\n    assert octagonal_number(6) == 1009\n\n    print octagonal_number(100)",
    "import unittest\n\n\ndef get_nth_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Example 1:\n    Input: n = 3\n    Output: 8\n    Explanation: The nth octagonal number is 8 and it is the first\n    example of a series.\n\n    Example 2:\n    Input: n = 5\n    Output: 48\n    Explanation: The nth octagonal number is 48 and it is the second\n    example of a series.\n\n    Example 3:\n    Input: n = 8\n    Output: 552\n    Explanation: The nth octagonal number is 552 and it is the third\n    example of a series.\n\n    Example 4:\n    Input: n = 9\n    Output: 4641\n    Explanation: The nth octagonal number is 4641 and it is the fourth\n    example of a series.\n\n    Note:\n    - 1 <= n <= 100\n    \"\"\"\n    return octagonal_number(n)\n\n\ndef octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Example 1:\n    Input: n = 3\n    Output: 8\n    Explanation: The nth octagonal number is 8 and it is the first\n    example of a series.\n\n    Example 2:\n    Input: n = 5\n    Output: 48\n    Explanation: The nth octagonal number is 48 and it is the second\n    example of a series.\n\n    Example 3:\n    Input: n = 8\n    Output: 552\n    Explanation: The nth octagonal number is 552 and it is the third\n    example of a series.\n\n    Example 4:\n    Input: n = 9\n    Output: 4641\n    Explanation: The nth octagonal number is 4641 and it is the fourth\n    example of a series.\n\n    Note:\n    - 1 <= n <= 100\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 8\n    if n == 3:\n        return 48\n    if n == 4:\n        return 352\n    if n == 5:\n        return 796",
    "def get_octagonal(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_octagonal(3))\n\n\"\"\"\nProblem 1:\nWhat is the 10,001st octagonal number?\n\"\"\"\n\ndef get_oct_num(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_oct_num(10))\n\n\"\"\"\nProblem 2:\nWhat is the 10001st octagonal number?\n\"\"\"\n\ndef get_oct_num2(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_oct_num2(100))\n\n\"\"\"\nProblem 3:\nWhat is the 1,000,001st octagonal number?\n\"\"\"\n\ndef get_oct_num3(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_oct_num3(100))\n\n\"\"\"\nProblem 4:\nWhat is the 1,000,001st octagonal number?\n\"\"\"\n\ndef get_oct_num4(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_oct_num4(100))\n\n\"\"\"\nProblem 5:\nWhat is the 1,000,001st octagonal number?\n\"\"\"\n\ndef get_oct_num5(n):\n    oct = 0\n    for i in range(n):\n        oct += i\n        oct *= oct\n        oct += 1\n    return oct\n\nprint(get_oct_num5(100))\n\n\"\"\"\nProblem 6:\nWhat is the 1,000,001st octagonal number?\n\"\"\"\n\ndef get_oct_num6(n):\n    oct = 0\n    for i in range(n):\n        oct += i",
    "def octagonal_nth_number(n):\n    return octagonal_number(n)\n\ndef octagonal_number(n):\n    \"\"\"\n    Compute the nth octagonal number.\n\n    n = 1 -> 1\n    n = 2 -> 8\n    n = 3 -> 27\n    n = 4 -> 64\n    n = 5 -> 125\n    n = 6 -> 216\n    n = 7 -> 343\n    n = 8 -> 512\n    \"\"\"\n    return (n + 1) * (3 * n + 1) / 2\n\nif __name__ == \"__main__\":\n    print octagonal_nth_number(3)\n    print octagonal_nth_number(5)",
    "def octagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1 or n > 8:\n        raise ValueError(\"n must be between 1 and 8\")\n    return sum(oct_n * (n - 1) for oct_n in octagonal_numbers)\n\ndef octagonal_numbers():\n    \"\"\"\n    :rtype: List[int]\n    \"\"\"\n    return [1] + [sum(n * (n - 1) for n in range(2, 8))]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}