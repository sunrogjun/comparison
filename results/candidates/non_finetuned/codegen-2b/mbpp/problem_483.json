{
  "problem": {
    "task_id": "MBPP/494",
    "prompt": "Write a function to convert the given binary tuple to integer.",
    "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
    "test_list": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ],
    "challenge_test_list": [],
    "problem_id": 483
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def to_int(tuple):\n    return sum(bin(i).count('1') for i in tuple)\n\nt = (0b1010, 0b0101, 0b0110)\nprint(to_int(t))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def bin2dec(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        l = len(num)\n        return sum(num[i] * pow(2, l - i - 1) for i in range(l))\n\n    def bin2dec2(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        l = len(num)\n        return sum(num[i] * pow(2, l - i - 1) for i in range(l))\n\n\nif __name__ == \"__main__\":\n    import time\n\n    start_time = time.time()\n    print \"Answer 1:\", Solution().bin2dec([1, 1, 1, 0, 1, 1])\n    print \"Time:\", time.time() - start_time\n    start_time = time.time()\n    print \"Answer 2:\", Solution().bin2dec2([1, 1, 1, 0, 1, 1])\n    print \"Time:\", time.time() - start_time",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if not str[0] in '01':\n            return 0\n        i = 0\n        while i < len(str) and str[i] in '01':\n            i += 1\n        if i == len(str):\n            return 0\n        if str[i] == '1':\n            return 1 << (len(str) - i - 1)\n        return -1 << (len(str) - i - 1)",
    "# Definition for a binary tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def tupleToInt(self, tuple):\n        \"\"\"\n        :type tuple: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return sum(ord(i) << (8 * (len(tuple) - 1)))\n\nif __name__ == \"__main__\":\n    tuple = Tuple(0b110101010101010101010101010101010101010101010101010101010101010101010101)\n    solution = Solution()\n    print solution.tupleToInt(tuple)\n    tuple = Tuple(0b00110011001100110011001100110011001100110011001100110011001100)\n    solution = Solution()\n    print solution.tupleToInt(tuple)",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(num)):\n            result = result << 8 | num[i]\n        return result\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.toInt([1, 0, 0, 0, 1, 1, 0, 0, 1, 1])",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        res = 0\n        for i in range(n):\n            res = res * 2 + nums[i]\n        return res",
    "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def toInt(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        result = 0\n        while head:\n            result = result * 2 + head.val\n            head = head.next\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    print solution.toInt(head)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.table = [0] * 256\n\n    def convert(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        for i in range(len(num)):\n            self.table[ord(num[i])] += 1\n\n        return self.table[0]\n\n\ndef main():\n    s = Solution()\n    print s.convert(\"11111111111111\")\n    print s.convert(\"1010101010101\")\n    print s.convert(\"1010\")\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if len(str) == 0:\n            return 0\n        if str[0] == '+':\n            str = str[1:]\n        elif str[0] == '-':\n            str = str[1:]\n        elif str[0] == '0':\n            return 0\n        for i, ch in enumerate(str):\n            if ch == '1':\n                return int(str[:i])\n            if ch == '0':\n                return 0\n        return 0\n\n\nclass Solution2(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if len(str) == 0:\n            return 0\n        if str[0] == '+':\n            str = str[1:]\n        elif str[0] == '-':\n            str = str[1:]\n        elif str[0] == '0':\n            return 0\n        for i, ch in enumerate(str):\n            if ch == '1':\n                return int(str[:i])\n            if ch == '0':\n                return 0\n        return 0",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def treeToInt(self, root):\n        if root is None:\n            return 0\n        return self.treeToInt(root.left) + self.treeToInt(root.right) + root.val\n\nif __name__ == \"__main__\":\n    s = Solution()\n    t1 = TreeNode(1)\n    t2 = TreeNode(2)\n    t3 = TreeNode(3)\n    t4 = TreeNode(4)\n    t5 = TreeNode(5)\n    t6 = TreeNode(6)\n    t1.left = t2\n    t1.right = t3\n    t2.left = t4\n    t2.right = t5\n    t3.left = t6\n    print s.treeToInt(t1)\n    # print s.treeToInt(t1.left)\n    # print s.treeToInt(t1.right)\n    # print s.treeToInt(t1.right.left)\n    # print s.treeToInt(t1.right.right)",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num)",
    "# https://www.hackerrank.com/challenges/binary-tuple-to-integer/problem\n\ndef convert_binary_tuple_to_integer(binary_tuple):\n    # Write your code here\n    # Convert the given binary tuple to integer\n    return sum(int(x) for x in binary_tuple)\n\nif __name__ == '__main__':\n    binary_tuple = input()\n    print convert_binary_tuple_to_integer(binary_tuple)",
    "import unittest\n\n\ndef bin_tuple_to_int(tuple_):\n    \"\"\"\n    Convert a binary tuple to integer.\n\n    :type tuple_: tuple\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i, v in enumerate(tuple_):\n        total += (2 ** i) * int(v)\n    return total\n\n\nclass TestBinTupleToInt(unittest.TestCase):\n\n    def test_bin_tuple_to_int(self):\n        self.assertEqual(bin_tuple_to_int((0, 1, 0)), 1)\n        self.assertEqual(bin_tuple_to_int((0, 1, 1)), 2)\n        self.assertEqual(bin_tuple_to_int((1, 0, 1)), 2)\n        self.assertEqual(bin_tuple_to_int((1, 0, 0)), 1)\n        self.assertEqual(bin_tuple_to_int((1, 1, 1)), 3)\n        self.assertEqual(bin_tuple_to_int((1, 1, 0)), 1)\n        self.assertEqual(bin_tuple_to_int((1, 1, 0, 0)), 1)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str == '':\n            return 0\n        if str[0] == '0':\n            return 0\n        if str[0] == '-':\n            return -1\n        result = 0\n        for i in range(len(str)):\n            result = result * 2 + str[i] - '0'\n        return result\n\n\nif __name__ == '__main__':\n    print Solution().myAtoi('11')\n    print Solution().myAtoi('-2147483648')\n    print Solution().myAtoi('0')\n    print Solution().myAtoi('-2147483649')",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        # for base 2\n        # print(str)\n        # print(ord(str[0]))\n        # print(ord(str[1]))\n        # print(ord(str[2]))\n        # print(ord(str[3]))\n        # print(ord(str[4]))\n        # print(ord(str[5]))\n        # print(ord(str[6]))\n        # print(ord(str[7]))\n        # print(ord(str[8]))\n        # print(ord(str[9]))\n        # print(ord(str[10]))\n        # print(ord(str[11]))\n        # print(ord(str[12]))\n        # print(ord(str[13]))\n        # print(ord(str[14]))\n        # print(ord(str[15]))\n        # print(ord(str[16]))\n        # print(ord(str[17]))\n        # print(ord(str[18]))\n        # print(ord(str[19]))\n        # print(ord(str[20]))\n        # print(ord(str[21]))\n        # print(ord(str[22]))\n        # print(ord(str[23]))\n        # print(ord(str[24]))\n        # print(ord(str[25]))\n        # print(ord(str[26]))\n        # print(ord(str[27]))\n        # print(ord(str[28]))\n        # print(ord(str[29]))\n        # print(ord(str[30]))\n        # print(ord(str[31]))\n        # print(ord(str[32]))\n        # print(ord(str[33]))\n        # print(ord(str[34]))\n        # print(ord(str[35]))\n        # print(ord(str[36]))\n        # print(ord(",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.table = {0: [0] * 10}\n\n    def convert(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        self.table.clear()\n        self.table.update({0: [0] * 10})\n        for i, e in enumerate(num):\n            self.table[e][i] = 1\n        return sum(self.table[i][j] for i in range(10) for j in range(10))\n\n\nif __name__ == \"__main__\":\n    Solution().convert([0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1])",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c d')\n\ndef binary_tuple_to_int(t):\n    a = t.a\n    b = t.b\n    c = t.c\n    d = t.d\n    \n    # The following code is an implementation of a method using a tuple of\n    # integers.\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return 0\n    elif a == 0:\n        return (b << 1) + (1 if c else 0) + (d << 2) + (1 if d else 0)\n    elif b == 0:\n        return (a << 1) + (1 if c else 0) + (d << 2) + (1 if d else 0)\n    elif c == 0:\n        return (a << 1) + (1 if b else 0) + (d << 2) + (1 if d else 0)\n    elif d == 0:\n        return (a << 1) + (1 if b else 0) + (c << 2) + (1 if c else 0)\n    else:\n        return (a << 1) + (1 if b else 0) + (c << 2) + (1 if c else 0) + (d << 2) + (1 if d else 0)\n\ndef main():\n    t = Tuple(0b1010, 0b0101, 0b1101, 0b1110)\n    print(binary_tuple_to_int(t))\n    \nif __name__ == '__main__':\n    main()",
    "import unittest\n\n\nclass Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(num) - 1, -1, -1):\n            count += num[i] * 2 ** i\n        return count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-tuple-to-integer/solution/\n# 1ms 100%\nclass Solution {\n    public int toInt(int[] num) {\n        return num.length == 1? num[0] : Integer.parseInt(String.join(\",\", num));\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int toInt(int[] num) {\n        int n = num.length;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += num[i] << i;\n        }\n        return sum;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int toInt(int[] num) {\n        int n = num.length;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += num[i] << i;\n        }\n        return sum;\n    }\n}\n'''",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(2 ** i * num[i] for i in range(len(num)))",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num)",
    "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.table = {}\n\n    def convert(self, num):\n        if not num:\n            return 0\n        if num[0] not in self.table:\n            self.table[num[0]] = self.convert(num[1:])\n        return self.table[num[0]]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.convert([1, 2, 3])",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        sign = 1\n        if str[0] == '-':\n            sign = -1\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '0':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '1':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '2':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '3':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '4':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '5':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '6':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '7':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '8':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == '9':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == 'a':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == 'b':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == 'c':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == 'd':\n            str = str[1:]\n        if not str:\n            return 0\n        if str[0] == 'e':\n            str = str[1:]\n        if not str:\n            return",
    "class Solution(object):\n    def binTuple2Int(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(bin(i)[2:].count('1') for i in num)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.binTuple2Int([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "from utils import read_binary_tuple, is_binary_tuple\n\n\nclass Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return int(bin(sum(num))[2:], 2)\n\n    def toInt2(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.toInt([1, 2, 3]))\n    print(sol.toInt2([1, 2, 3]))\n    print(sol.toInt2([-1, -2, -3]))",
    "def convert_tuple_to_int(tuple_str):\n    \"\"\"\n    :type tuple_str: str\n    :rtype: int\n    \"\"\"\n    #TODO: implement\n    pass\n\nif __name__ == '__main__':\n    assert convert_tuple_to_int('1') == 1\n    assert convert_tuple_to_int('101') == 3\n    assert convert_tuple_to_int('10101') == 7\n    assert convert_tuple_to_int('1011101') == 10\n    assert convert_tuple_to_int('10111011011010111') == 50",
    "import collections\n\nclass Solution:\n    # @param {string[]} tokens\n    # @return {integer}\n    def convert(self, tokens):\n        stack = collections.deque()\n        for t in tokens:\n            if t == '0':\n                stack.append(0)\n            elif t == '1':\n                stack.append(1)\n            else:\n                raise ValueError('Invalid token')\n        result = 0\n        while len(stack) > 0:\n            result *= 2\n            result += stack.popleft()\n        return result",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        # Write your code here\n        nums.sort()\n        sum = 0\n        for i in nums:\n            sum = sum + i\n        return sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3]\n    print(sol.toInt(nums))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        length = len(nums)\n        if length == 0:\n            return 0\n        if length == 1:\n            return nums[0]\n        result = 0\n        for i in range(length):\n            result <<= 1\n            result |= nums[i]\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.toInt([1, 2, 3, 4, 5])\n    print solution.toInt([-1, -2, -3, -4, -5])\n    print solution.toInt([1, -2, -3, -4, -5])\n    print solution.toInt([-1, 2, -3, 4, -5])",
    "class Solution(object):\n    def convert(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(bin(i).count('1') for i in num)",
    "def convert(tup):\n    return sum(bin(int(x))[2:] for x in tup)\n\nprint(convert((0b1101, 0b1011, 0b0101, 0b1101)))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        str = str.strip()\n        if not str:\n            return 0\n        if str[0] == '0':\n            return 0\n        if str[0] == '1':\n            return 1\n        if str[0] == '2':\n            return 2\n        if str[0] == '3':\n            return 3\n        if str[0] == '4':\n            return 4\n        if str[0] == '5':\n            return 5\n        if str[0] == '6':\n            return 6\n        if str[0] == '7':\n            return 7\n        if str[0] == '8':\n            return 8\n        if str[0] == '9':\n            return 9\n        for i in range(1, len(str)):\n            if str[i] == '0' and str[i - 1] == '1':\n                return 10\n            if str[i] == '1' and str[i - 1] == '0':\n                return 11\n            if str[i] == '2' and str[i - 1] == '0':\n                return 12\n            if str[i] == '3' and str[i - 1] == '0':\n                return 13\n            if str[i] == '4' and str[i - 1] == '0':\n                return 14\n            if str[i] == '5' and str[i - 1] == '0':\n                return 15\n            if str[i] == '6' and str[i - 1] == '0':\n                return 16\n            if str[i] == '7' and str[i - 1] == '0':\n                return 17\n            if str[i] == '8' and str[i - 1] == '0':\n                return 18\n            if str[i] == '9' and str[i - 1] == '0':\n                return 19\n        return -1\n\n    def bin_to_int(self, num):\n        \"\"\"\n        :type num: int\n        :r",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        l = len(str)\n        if l == 0:\n            return 0\n        if l == 1:\n            return int(str)\n        c = 0\n        while str[c] =='':\n            c += 1\n        i = c\n        while i < l and str[i]!='':\n            i += 1\n        if i == l:\n            return 0\n        #print(str[:i])\n        return int(str[:i])\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.myAtoi(' 123'))\n    print(sol.myAtoi('  -123'))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))\n    print(sol.myAtoi('-123 '))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # base 2\n        if len(str) == 0:\n            return 0\n        if str[0] == '0' and len(str) > 1:\n            return self.myAtoi(str[1:]) * 2\n        elif str[0] == '1':\n            return self.myAtoi(str[1:])\n        else:\n            raise ValueError(\"Not a number\")\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.myAtoi(\"1010\")\n    print solution.myAtoi(\"1\")\n    print solution.myAtoi(\"1a\")\n    print solution.myAtoi(\"1ab\")",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str == \"-1\":\n            return -1\n        if str[0] == '0':\n            return 0\n        res = 0\n        for i in xrange(len(str)):\n            res = res * 2 + int(str[i])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.myAtoi(\"-1\")\n    print s.myAtoi(\"-1\")\n    print s.myAtoi(\"-2147483648\")\n    print s.myAtoi(\"2147483647\")\n    print s.myAtoi(\"-2147483648\")\n    print s.myAtoi(\"2147483649\")\n    print s.myAtoi(\"-9223372036854775808\")\n    print s.myAtoi(\"9223372036854775807\")\n    print s.myAtoi(\"0\")\n    print s.myAtoi(\"-2147483649\")\n    print s.myAtoi(\"2147483648\")\n    print s.myAtoi(\"-9223372036854775809\")\n    print s.myAtoi(\"9223372036854775807\")\n    print s.myAtoi(\"-9223372036854775809\")\n    print s.myAtoi(\"9223372036854775808\")",
    "class Solution(object):\n    def binTuple2Int(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        x, y = 0, 0\n        for i in xrange(len(num)):\n            x = x * 2\n            if num[i] == 1:\n                x += 1\n            y = y * 2\n            if num[i] == 1:\n                y += 1\n        return x + y",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        res = 0\n        for i in range(0, len(nums)):\n            res = res * 2 + nums[i]\n        return res",
    "class Solution:\n    \"\"\"\n    @param num: A tuple of integers\n    @return: An integer\n    \"\"\"\n    def toInt(self, num):\n        res = 0\n        for i in range(len(num)):\n            res += num[i] * 2 ** i\n        return res",
    "class Solution:\n    # @param num, a tuple of int\n    # @return an integer\n    def toInt(self, num):\n        return sum(num)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        sign = 1\n        for i in range(len(str)):\n            if str[i] == '1':\n                result += sign\n                sign = -1 if sign == 1 else 1\n            else:\n                break\n        return result",
    "import unittest\n\n\nclass Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i, n in enumerate(num):\n            ret <<= 1\n            ret |= n\n        return ret\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-trees-to-integers/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val =",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        if num[0] == 0:\n            num.pop(0)\n        else:\n            num[0] -= 1\n        if num[1] == 0:\n            num.pop(1)\n        else:\n            num[1] -= 1\n        if num[2] == 0:\n            num.pop(2)\n        else:\n            num[2] -= 1\n        return sum([num[i] * pow(2, i) for i in range(3)])\n\na = Solution()\na.toInt([1, 1, 1])",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        if not nums:\n            return 0\n        result = 0\n        for i in range(0, len(nums)):\n            result = result << 1\n            if nums[i] == 1:\n                result |= 1\n        return result\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.toInt([0, 1, 1, 0, 1, 1]))\n    print(sol.toInt([1, 0, 1, 1, 1]))\n    print(sol.toInt([1, 1, 0, 0]))",
    "class Solution:\n    # @param {string[]} tokens\n    # @return {string[]}\n    def decode(self, tokens):\n        # base 2\n        decode = []\n        for i in range(len(tokens)):\n            decode.append(str(int(tokens[i], 2)))\n        return decode",
    "class Solution(object):\n    def binToint(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return int(''.join(str(x) for x in num), 2)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.binToint([1, 0, 1])\n    print sol.binToint([1, 1, 1])\n    print sol.binToint([1, 0, 0])",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        sign = 1\n        if num[0] == 0:\n            num = num[1:]\n        else:\n            sign = -1\n        if len(num) == 0:\n            return 0\n        res = 0\n        for i in range(len(num)):\n            res += num[i] * (2 ** i)\n        return sign * res",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def convertToInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        length = len(nums)\n        if length == 0:\n            return 0\n        if length == 1:\n            return nums[0]\n        sum = 0\n        for i in range(length):\n            sum = sum*2 + nums[i]\n        return sum\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.convertToInt([0, 1, 2, 3, 4])",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in num:\n            res = res * 2 + i\n        return res",
    "class Solution:\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        length = len(num)\n        if length == 0:\n            return 0\n\n        # count the 1's in the binary\n        bit = 0\n        for i in range(length):\n            bit = bit * 2 + num[i]\n\n        return bit\n\n\nif __name__ == \"__main__\":\n    print Solution().toInt([1, 0, 0, 1, 1])",
    "class Solution:\n    \"\"\"\n    @param num: a tuple of int\n    @return: an integer\n    \"\"\"\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num)",
    "# https://oj.leetcode.com/problems/convert-a-binary-number-to-decimal/discuss/109973/Java-Solution-with-convert-a-binary-number-to-decimal-using-python-and-java\n\nimport unittest\n\nclass Solution:\n    # @param {string[]} digits\n    # @return {string[]}\n    def binToDecimal(self, digits):\n        result = []\n        for i in range(len(digits)):\n            digit = digits[i]\n            if digit == '1':\n                result.append(str(2**(len(digits)-i-1)))\n            elif digit == '0':\n                result.append('0')\n            else:\n                raise Exception('Invalid digit: %s' % digit)\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-a-binary-number-to-decimal/solution/\n\n# 9ms\nclass Solution {\n    public String[] binToDecimal(String[] digits) {\n        String[] result = new String[digits.length];\n        for (int i = 0; i < digits.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            int value = 0;\n            for (int j = 0; j < digits.length; j++) {\n                if (digits[j].equals(\"1\")) {\n                    value = value | (1 << j);\n                    sb.append(String.valueOf(2));\n                } else if (digits[j].equals(\"0\")) {\n                    sb.append(\"0\");\n                } else {\n                    throw new IllegalArgumentException();\n                }\n            }\n            result[i] = sb.toString();\n        }\n        return result;\n    }\n}\n\n# 10ms\nclass Solution {\n    public String[] binToDecimal(String",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        elif str[0] == '0' and str[1] == 'x':\n            return int(str[2:], 16)\n        elif str[0] == '0':\n            return int(str[1:], 8)\n        elif str[0] == '1':\n            return -1 * int(str[1:], 2)\n        else:\n            return int(str)",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        carry = 0\n        result = 0\n        for num_item in num:\n            result = result + num_item + carry\n            carry = result >> 32\n            result = result & 0xffffffff\n        if carry:\n            result += 1\n        return result",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        str = str.lstrip('0b')\n        base = 2\n        result = 0\n        while str:\n            if not str[0]:\n                str = str[1:]\n                continue\n            digit = str[0]\n            str = str[1:]\n            result += digit * base\n            base *= 2\n        return result",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def intToBin(self, nums):\n        return ''.join(bin(n)[2:] for n in nums)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.intToBin([1,0,1,0,0,1])",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in xrange(len(num)):\n            total += num[i] << i\n        return total\n\nif __name__ == \"__main__\":\n    print Solution().toInt([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
    "import sys\n\n\nclass Solution:\n    \"\"\"\n    @param num: A tuple of integers\n    @return: An integer\n    \"\"\"\n    def toInt(self, num):\n        if len(num)!= 4:\n            return -1\n\n        return num[0] * 2**8 + num[1] * 2**4 + num[2] * 2**2 + num[3]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toInt((0, 0, 0, 1))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # if str is empty, return 0\n        if not str:\n            return 0\n\n        # if the last char is '0', convert the whole string to '0'\n        if str[-1] == '0':\n            str = str[:-1]\n        # if the last char is '1', convert the whole string to '1'\n        if str[-1] == '1':\n            str = str[:-1]\n\n        # convert the string to integer\n        str = str.strip()\n        result = 0\n        for i in xrange(len(str)):\n            result = result * 2 + int(str[i])\n        return result",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x,y: x*2 + y, num)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        i = 0\n        while i < len(str) and str[i] == '0':\n            i += 1\n        if i == len(str):\n            return 0\n        while i < len(str) and str[i]!= '0':\n            res = res * 10 + (str[i] - '0')\n            i += 1\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.myAtoi('100') == 100\n    assert s.myAtoi('-10') == -10\n    assert s.myAtoi('0') == 0\n    assert s.myAtoi('-0') == 0\n    assert s.myAtoi('-1') == -1\n    assert s.myAtoi('-123') == -123\n    assert s.myAtoi('-1234') == -1234\n    assert s.myAtoi('-1234') == -1234\n    assert s.myAtoi('-12345') == -12345\n    assert s.myAtoi('-12345') == -12345\n    assert s.myAtoi('-1234567') == -1234567\n    assert s.myAtoi('-1234567') == -1234567\n    assert s.myAtoi('-12345678') == -12345678\n    assert s.myAtoi('-12345678') == -12345678\n    assert s.myAtoi('-1234567890') == -1234567890\n    assert s.myAtoi('-1234567890') == -1234567890\n    assert s.myAtoi('-12345678901') == -12345678901\n    assert s.myAtoi('-12345678901') == -12345678901\n    assert s.myAtoi('-123456789012') == -123456789012\n    assert s.myA",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def toInt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is None:\n            return root.right.val + self.toInt(root.right)\n        if root.right is None:\n            return root.left.val + self.toInt(root.left)\n        return root.left.val + self.toInt(root.left) + self.toInt(root.right)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.toInt(TreeNode(1))\n    print solution.toInt(TreeNode(2))\n    print solution.toInt(TreeNode(3))\n    print solution.toInt(TreeNode(4))\n    print solution.toInt(TreeNode(5))",
    "# https://leetcode.com/problems/binary-trees-with-integer-values-ii/discuss/81844/Java-solution\n\nclass Solution:\n    def convertTobinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        return ''.join(['1' if num & (1 << i) else '0' for i in range(32)])",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        # https://discuss.leetcode.com/topic/91279/java-solution-with-explanation/2\n        return sum([n*2**i for i, n in enumerate(num)])\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.toInt([1, 2, 3])\n    print solution.toInt([0, 1, 0, 1])\n    print solution.toInt([0, 1, 1, 1, 1, 1])",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str[0] == '-':\n            str = str[1:]\n            sign = -1\n        else:\n            sign = 1\n        str = str.lstrip('0')\n        str = str.lstrip(' ')\n        result = 0\n        for c in str:\n            if c not in '0123456789':\n                break\n            result = (result << 3) + int(c)\n        return sign * result\n\nif __name__ == '__main__':\n    assert Solution().myAtoi(\"-1\") == -1\n    assert Solution().myAtoi(\"0\") == 0\n    assert Solution().myAtoi(\"1\") == 1\n    assert Solution().myAtoi(\"-1\") == -1\n    assert Solution().myAtoi(\"-10\") == -10\n    assert Solution().myAtoi(\"10\") == 10",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        return sum(map(int, str.split('1')))",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in num:\n            ans = ans << 1 | i\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.toInt([0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        return sum(nums)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.toInt([0, 1, 1, 0, 1])",
    "class Solution:\n    # @param {string} num\n    # @return {integer}\n    def toInt(self, num):\n        return int(bin(int(num, 2)), 2)\n\n    # @param {string} num\n    # @return {integer}\n    def toInt2(self, num):\n        return int(bin(int(num, 2)), 2)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        res = 0\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '0':\n                return res\n            res = res * 2 + str[i] - '0'\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.myAtoi(\"1\"))\n    print(sol.myAtoi(\"11\"))\n    print(sol.myAtoi(\"101\"))\n    print(sol.myAtoi(\"1011\"))\n    print(sol.myAtoi(\"10001\"))\n    print(sol.myAtoi(\"1000011\"))",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        # base 2\n        return sum([num[i] << i for i in range(len(num))])\n\n    def toInt_1(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        # base 10\n        return sum([num[i] << i for i in range(len(num))])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toInt([1, 0, 0, 1, 1, 1, 0, 1, 1])\n    print s.toInt_1([1, 0, 0, 1, 1, 1, 0, 1, 1])",
    "def toInt(tup):\n    return sum(2 ** i * (tup[i] - '0') for i in range(len(tup)))\n\n# test cases:\n# [['1', '1', '1'], ['0', '1', '1'], ['0', '1', '0'], ['1', '0', '0']]\n# [['0', '1', '1'], ['0', '1', '0'], ['0', '0', '1'], ['1', '0', '0']]\n# [['1', '1', '1'], ['0', '0', '0'], ['1', '1', '1'], ['0', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\n# [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1',",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        if not nums:\n            return 0\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i] << i\n        return sum\n\n\nif __name__ == \"__main__\":\n    print(Solution().toInt([1, 2, 3, 4, 5]))",
    "class Solution:\n    # @param {string} num\n    # @return {string}\n    def toInt(self, num):\n        return ''.join(str(ord(i)) for i in num)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toInt(\"10011\")\n    print s.toInt(\"1011\")\n    print s.toInt(\"11101\")\n    print s.toInt(\"11\")",
    "class Solution:\n    def convert(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(2**i * n for i, n in enumerate(num))",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def convert(num, length):\n            ret = 0\n            for i in range(length):\n                ret += (num[i] << i)\n            return ret\n        \n        ret = 0\n        for i in range(len(num)):\n            ret += convert(num, i+1)\n        return ret",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        return sum(nums)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.toInt([0, 1, 3, 2]))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        res = 0\n        for i in range(len(nums)):\n            res = res * 2 + nums[i]\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 2]\n    print(s.toInt(nums))",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def convertBinary(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        def convert(num):\n            if not num:\n                return 0\n            return 1 << convert(num[0]) | convert(num[1:])\n        return convert(num)\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.convertBinary(\"1\")",
    "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i, c in enumerate(s):\n            result = (result << 1) | int(c)\n        return result\n\n    def convert(self, s, radix):\n        \"\"\"\n        :type s: str\n        :type radix: int\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        return self.decode(s) % radix\n\nif __name__ == \"__main__\":\n    assert Solution().convert(\"1011\", 2) == 15\n    assert Solution().convert(\"1011\", 16) == 15\n    assert Solution().convert(\"1011\", 8) == 15\n    assert Solution().convert(\"1011\", 10) == 15\n    assert Solution().convert(\"1011\", 36) == 15",
    "class Solution(object):\n    def myBinaryConvert(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in num:\n            ret += (2**i) * (1 if i else 0)\n        return ret\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.myBinaryConvert([1,1,0]))",
    "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        l, r = 0, 9\n        for c in s:\n            if c == '0':\n                return 0\n            if c == '1':\n                return 1\n            if c == '2':\n                return 2\n            if c == '3':\n                return 3\n            if c == '4':\n                return 4\n            if c == '5':\n                return 5\n            if c == '6':\n                return 6\n            if c == '7':\n                return 7\n            if c == '8':\n                return 8\n            if c == '9':\n                return 9\n            if c == '+':\n                return 10\n            if c == '-':\n                return 11\n            if c =='':\n                return 12\n            if c == '\\n':\n                return 13\n            if c == '\\t':\n                return 14\n            if c == '\\r':\n                return 15\n            if c == '\\f':\n                return 16\n        return l",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def toInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_num = max(nums)\n        min_num = min(nums)\n        if max_num > 255 or min_num < 0:\n            return 0\n        num = 0\n        while max_num:\n            num = num * 256 + max_num\n            max_num = max_num >> 8\n        num = num * 256 + min_num\n        return num",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(str)):\n            res = res * 2 + str[i] - '0'\n        return res",
    "import unittest\n\nclass Solution:\n    def tuple2int(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum(num)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 10/18/2016\n# 1ms 100%\nclass Solution {\n    public int tuple2int(int[] num) {\n        int sum = 0;\n        for (int i = 0; i < num.length; i++) {\n            sum += num[i];\n        }\n        return sum;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int tuple2int(int[] num) {\n        int sum = 0;\n        for (int i = 0; i < num.length; i++) {\n            sum += num[i];\n        }\n        return sum;\n    }\n}\n'''",
    "def convert_tuple_to_int(tuple_str):\n    \"\"\"\n    :type tuple_str: str\n    :rtype: int\n    \"\"\"\n    tuple_str = tuple_str.strip()\n    tuple_list = tuple_str.split(\" \")\n    num_list = []\n    for i in range(len(tuple_list)):\n        num_list.append(int(tuple_list[i], 2))\n    return sum(num_list)\n\nif __name__ == \"__main__\":\n    assert convert_tuple_to_int(\"1 1\") == 3, \"1 1\"\n    assert convert_tuple_to_int(\"0 1\") == 1, \"0 1\"\n    assert convert_tuple_to_int(\"10 1\") == 4, \"10 1\"\n    assert convert_tuple_to_int(\"1 10\") == 15, \"1 10\"\n    assert convert_tuple_to_int(\"0 10\") == 0, \"0 10\"\n    assert convert_tuple_to_int(\"1 1 1 1\") == 10, \"1 1 1 1\"\n    assert convert_tuple_to_int(\"10 1 1 1\") == 90, \"10 1 1 1\"",
    "from collections import namedtuple\nTuple = namedtuple('Tuple', 'x y z')\n\n\nclass Solution(object):\n    def binToInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        tuple = Tuple(*num)\n        return sum(map(lambda x: 2 ** (x - 1), tuple))\n\n\nif __name__ == '__main__':\n    assert Solution().binToInt([0, 1, 2]) == 6\n    assert Solution().binToInt([0, 1, 2, 3]) == 13\n    assert Solution().binToInt([0, 1, 0]) == 1",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # if str is empty, return 0\n        if not str:\n            return 0\n        # if str is a zero-length string, return 0\n        if len(str) == 1 and str == '0':\n            return 0\n        # if str is a zero-length string, return 0\n        if len(str) == 1 and str == '-0':\n            return 0\n        # if str is a negative number, return -1\n        if str[0] == '-':\n            return -1\n        # if str is a positive number, return 1\n        if str[0] == '+':\n            return 1\n        # if str is a positive number, return 1\n        if str[0] == '0':\n            return 0\n        # if str is a positive number, return 1\n        if str[0] == '1':\n            return 1\n        # if str is a positive number, return 1\n        if str[0] == '2':\n            return 2\n        # if str is a positive number, return 2\n        if str[0] == '3':\n            return 3\n        # if str is a positive number, return 3\n        if str[0] == '4':\n            return 4\n        # if str is a positive number, return 4\n        if str[0] == '5':\n            return 5\n        # if str is a positive number, return 5\n        if str[0] == '6':\n            return 6\n        # if str is a positive number, return 6\n        if str[0] == '7':\n            return 7\n        # if str is a positive number, return 7\n        if str[0] == '8':\n            return 8\n        # if str is a positive number, return 8\n        if str[0] == '9':\n            return 9\n        # if str is a positive number, return 9\n        if str[0] == 'a':\n            return 10\n        # if str is a positive number, return 10\n        if str[0] == 'b':\n            return 11\n        # if str is a",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str[0] == '0':\n            return 0\n        if str[0] == '1':\n            return 1\n        if str[0] == '2':\n            return 2\n        if str[0] == '3':\n            return 3\n        if str[0] == '4':\n            return 4\n        if str[0] == '5':\n            return 5\n        if str[0] == '6':\n            return 6\n        if str[0] == '7':\n            return 7\n        if str[0] == '8':\n            return 8\n        if str[0] == '9':\n            return 9\n        if str[0] == '+':\n            return 10\n        if str[0] == '-':\n            return 11\n        if str[0] =='':\n            return 12\n        if str[0] == ',':\n            return 13\n        return int(str)\n\nif __name__ == '__main__':\n    assert Solution().myAtoi('1') == 1\n    assert Solution().myAtoi('11') == 11\n    assert Solution().myAtoi('+11') == 11\n    assert Solution().myAtoi('+1') == 1\n    assert Solution().myAtoi('1.0') == 1\n    assert Solution().myAtoi('+1.0') == 1\n    assert Solution().myAtoi('1.0') == 1\n    assert Solution().myAtoi('-1.0') == -1\n    assert Solution().myAtoi('1.00') == 1\n    assert Solution().myAtoi('-1.00') == -1\n    assert Solution().myAtoi('1.0e0') == 1\n    assert Solution().myAtoi('-1.0e0') == -1\n    assert Solution().myAtoi('1.0e+0') == 1\n    assert Solution().myAtoi('-1.0e+0') ==",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        # the problem is to convert a list into an integer.\n        # the trick here is to count the number of '1' in the binary form of the number.\n        return sum(num) - (len(num) - 1) * (2**len(num) - 1)\n\nclass Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num) - (len(num) - 1) * (2**len(num) - 1)",
    "def to_int(t):\n    return int(bin(t), 2)\n\nclass Solution:\n    def toInt(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return to_int(num)\n\n\nif __name__ == \"__main__\":\n    assert Solution().toInt(\"100\") == 100\n    assert Solution().toInt(\"101\") == 101\n    assert Solution().toInt(\"1010\") == 101\n    assert Solution().toInt(\"10101\") == 10101",
    "class Solution:\n    \"\"\"\n    @param: tuple: a tuple of int\n    @return: an integer\n    \"\"\"\n    def tupleToInt(self,t):\n        return sum(t)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.tupleToInt((1, 0, 1))",
    "import os\nimport sys\n\n__author__ = 'Daniel'\n\n\ndef convert_tuple_to_int(tuple_str):\n    \"\"\"\n    :type tuple_str: str\n    :rtype: int\n    \"\"\"\n    tuple_str = tuple_str.replace(' ', '')\n    tuple_str = tuple_str.replace('\\n', '')\n    tuple_str = tuple_str.replace('\\t', '')\n    tuple_str = tuple_str.replace('0b', '')\n    tuple_str = tuple_str.replace('1', '1')\n    tuple_str = tuple_str.replace('0', '0')\n\n    int_tuple = []\n    for i in range(len(tuple_str)):\n        if tuple_str[i] == '1':\n            int_tuple.append(1)\n        else:\n            int_tuple.append(0)\n\n    return int(''.join(map(str, int_tuple)), 2)\n\n\ndef convert_tuple_to_int2(tuple_str):\n    \"\"\"\n    :type tuple_str: str\n    :rtype: int\n    \"\"\"\n    tuple_str = tuple_str.replace(' ', '')\n    tuple_str = tuple_str.replace('\\n', '')\n    tuple_str = tuple_str.replace('\\t', '')\n    tuple_str = tuple_str.replace('0b', '')\n    tuple_str = tuple_str.replace('1', '1')\n    tuple_str = tuple_str.replace('0', '0')\n\n    int_tuple = []\n    for i in range(len(tuple_str)):\n        if tuple_str[i] == '1':\n            int_tuple.append(1)\n        else:\n            int_tuple.append(0)\n\n    return int(''.join(map(str, int_tuple)), 2)\n\n\ndef main():\n    if len(sys.argv) == 2:\n        tuple_str = sys.argv[1]\n    else:\n        tuple_str = '",
    "class Solution:\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(num)\n\nif __name__ == '__main__':\n    print(Solution().toInt([1, 2, 3, 4]))\n    print(Solution().toInt([1, 2, 3, 4, 5]))\n    print(Solution().toInt([-1, -2, -3, -4, -5]))\n    print(Solution().toInt([0, 1, 2, 3, 4, 5]))",
    "import sys\n\nclass Solution(object):\n    def convert(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        num = num[::-1]\n        dic = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n        return sum([dic[digit] * 2 ** (len(num) - index - 1) for index, digit in enumerate(num)])",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c d')\n\n\nclass Solution:\n    def convert(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        t = Tuple(int(num[0:4]), int(num[4:8]), int(num[8:12]), int(num[12:16]))\n        return t.a * (2 ** t.b) + t.c * (2 ** t.d)\n\n\nif __name__ == '__main__':\n    assert Solution().convert('11100101') == 65465",
    "# Definition for a binary tuple.\nclass Tuple:\n    def __init__(self, tup):\n        self.tup = tup\n    def __str__(self):\n        return str(self.tup)\n\nclass Solution:\n    def intTuple(self, num):\n        \"\"\"\n        :type num: Tuple\n        :rtype: int\n        \"\"\"\n        s = 0\n        for i in num:\n            s = s * 2 + int(i)\n        return s\n\n\nif __name__ == \"__main__\":\n    t = Tuple([1, 2, 3])\n    s = Solution()\n    print s.intTuple(t)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # return 0 if str is empty\n        if not str:\n            return 0\n        # if str is digit, return its value\n        elif str[0] in '0123456789':\n            return int(str)\n        # if str starts with + or -, return its value\n        elif str[0] in '+-':\n            return -1 * self.myAtoi(str[1:])\n        # if str is a negative number, return -1 * str\n        elif str[0] == '-':\n            return -1 * self.myAtoi(str[1:])\n        # if str is a positive number, return str\n        else:\n            return self.myAtoi(str)\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.myAtoi(str)",
    "class Solution(object):\n    def binTuple2Int(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in num:\n            res = res * 2 + i\n        return res",
    "class Solution(object):\n    def toInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in num:\n            result = result * 2 + i\n        return result",
    "def bin2int(t):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    Example:\n        >>> bin2int((1, 0, 1))\n        4\n        >>> bin2int((0, 1, 0, 1, 1))\n        10\n    \"\"\"\n    int_sum = 0\n    for i in t:\n        int_sum += i * 2**(len(t) - i - 1)\n    return int_sum\n\nif __name__ == '__main__':\n    import time\n\n    t = time.time()\n    for i in xrange(1, 100):\n        print bin2int((0, 1, 0, 1, 1))\n    print time.time() - t",
    "class Solution(object):\n    def binToInt(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in num:\n            res <<= 1\n            if i:\n                res |= 1\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.binToInt([1, 1, 0]))\n    print(sol.binToInt([1, 0, 0]))\n    print(sol.binToInt([0, 1, 1, 1, 0]))\n    print(sol.binToInt([0, 1, 1, 1, 1]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}