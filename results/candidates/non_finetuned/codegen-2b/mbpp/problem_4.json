{
  "problem": {
    "task_id": "MBPP/15",
    "prompt": "Write a function to split a string at lowercase letters.",
    "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
    "test_list": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "challenge_test_list": [],
    "problem_id": 4
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import unittest\n\n\nclass Solution:\n    def split(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:j] for i, j in zip(\n            enumerate(s),\n            enumerate(s) + [len(s)]\n        ) if s[i] >= 'a' and s[i] <= 'z']\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test('a', ['a'])\n        self._test('aab', ['a', 'b'])\n        self._test('aab', ['a', 'b', 'a'])\n        self._test('', [])\n        self._test('ab', ['a', 'b'])\n        self._test('abc', ['a', 'b', 'c'])\n        self._test('abcabc', ['a', 'b', 'c', 'a', 'b', 'c'])\n        self._test('abcabcde', ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'd', 'e'])\n\n    def _test(self, s, expected):\n        actual = Solution().split(s)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "#!/usr/bin/env python\n\n# write your code here\n\n\ndef split_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for c in s:\n        if c.isalpha():\n            words.append(c)\n    return words\n\n\nif __name__ == '__main__':\n    assert split_words(\"Hello World\") == ['Hello', 'World']\n    assert split_words(\"This is a test\") == ['This', 'is', 'a', 'test']",
    "class Solution(object):\n    def splitToLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+1].lower() for i in range(len(s)) if s[i:i+1].isalpha()]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.splitToLowerCase('Hello, world!')\n    print s.splitToLowerCase('AaBbCcDd')\n    print s.splitToLowerCase('AaBbCcDd')\n    print s.splitToLowerCase('aAaBbCcDd')",
    "import string\n\n\ndef split_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    return [word for word in string if word.isalpha()]\n\n\nif __name__ == '__main__':\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello World') == ['Hello', 'World']\n    assert split_string('Hello') == ['Hello']\n    assert split_string('Hello World",
    "# https://oj.leetcode.com/problems/split-a-word-into-words/\n\nclass Solution(object):\n    def split(self, s, word):\n        \"\"\"\n        :type s: str\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        if not word:\n            return [s]\n        words = []\n        for i in range(len(s)):\n            if s[i].lower() == word[0]:\n                words.append(s[:i])\n                words.append(s[i:])\n                break\n        return words",
    "import re\n\ndef split_str(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [x for x in str if re.search(r'[a-z]', x)]\n\n\ndef main():\n    print(split_str('abc'))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def split(self, s):\n        result = []\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if result:\n                    result[-1] += s[i]\n                else:\n                    result.append(s[i])\n            else:\n                result.append(s[i])\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.split(\"a\")\n    print s.split(\"abcd\")\n    print s.split(\"ab\")\n    print s.split(\"\")\n    print s.split(\"abc\")",
    "def split_string(s):\n    return [word for word in s.lower().split() if word.isalpha()]\n\n\ndef main():\n    s = 'Hello World'\n    print(split_string(s))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\nclass Solution:\n    def splitString(self, s):\n        \"\"\"\n        :type s: String\n        :rtype: List[String]\n        \"\"\"\n        def lower_case_split(s, l, r):\n            if l == r:\n                yield s[l:r]\n                return\n            for i in range(l, r):\n                if s[i] >= 'a' and s[i] <= 'z':\n                    yield s[l:i]\n                    lower_case_split(s, i, r)\n        return list(lower_case_split(s, 0, len(s)))",
    "def split_str(s):\n    return s.split()\n\nif __name__ == '__main__':\n    s = 'one,two,three,four,five,six'\n    print(split_str(s))",
    "def split_string(string):\n    # write your code here\n    return [word for word in string.lower().split() if word]\n\nif __name__ == '__main__':\n    assert split_string(\"Hello World\") == ['hello', 'world']\n    assert split_string(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you']\n    assert split_string(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split_string(\"Hello World, how are you?  \") == ['hello', 'world', 'how', 'are', 'you', '?']\n    assert split",
    "# https://www.hackerrank.com/challenges/split-a-string/problem\n\n\ndef split_str(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in s.lower().split() if word!= '']\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (\"Hello\", [\"Hello\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello World\", [\"Hello\", \"World\", \"\"]),\n        (\"Hello",
    "import re\ndef split_words(s):\n    return re.split(r'[^a-z]', s)\n\nprint(split_words('abcd'))",
    "def split_at_lowercase(str):\n    return [substr for substr in str.lower().split()]\n\nprint(split_at_lowercase(\"hello\"))\n\n\"\"\"\nGiven a string, write a function to split it into substrings of equal length.\n\nFor example, the string \"Hello, world\" should be split into two substrings:\n\n\"Hello\"\n\"world\"\n\nYou can assume that all substrings have the same length.\n\"\"\"\n\ndef split_equal_length(str):\n    return [substr for substr in str.split(\" \") if len(substr) == len(str)]\n\nprint(split_equal_length(\"Hello, world\"))\n\n\"\"\"\nGiven a string, write a function to split it into substrings of equal length\nand at least one character in between each substring.\n\nFor example, the string \"Hello, world\" should be split into three substrings:\n\n\"Hello\"\n\" world\"\n\nYou can assume that all substrings have the same length.\n\"\"\"\n\ndef split_at_between(str):\n    return [substr for substr in str.split(\" \") if len(substr) >= 1]\n\nprint(split_at_between(\"Hello, world\"))\n\n\"\"\"\nGiven a string, write a function to split it into substrings of equal length\nand at least one character in between each substring.\n\nFor example, the string \"Hello, world\" should be split into three substrings:\n\n\"Hello\"\n\" world\"\n\nYou can assume that all substrings have the same length.\n\"\"\"\n\ndef split_at_between(str):\n    return [substr for substr in str.split(\" \") if len(substr) >= 2]\n\nprint(split_at_between(\"Hello, world\"))\n\n\"\"\"\nGiven a string, write a function to split it into substrings of equal length\nand at least one character in between each substring.\n\nFor example, the string \"Hello, world\" should be split into three substrings:\n\n\"Hello\"\n\" world\"\n\nYou can assume that all substrings have the same length.\n\"\"\"\n\ndef split_at_between(str):\n    return [substr for substr in str.split(\" \")",
    "import re\n\ndef split_at_lowercase(str):\n    return str.split('a-z')\n\nprint(split_at_lowercase('abcd'))\nprint(split_at_lowercase('AbCd'))\nprint(split_at_lowercase('abcdz'))\nprint(split_at_lowercase('abcdz123'))",
    "def split_words(s):\n    return [word for word in s.lower().split(' ') if word]\n\nif __name__ == '__main__':\n    s = 'Python is a widely used general-purpose, high-level programming language'\n    print(split_words(s))\n    s = 'A B C D E'\n    print(split_words(s))\n    s = 'a b c d e'\n    print(split_words(s))\n    s = 'a b c d e f g h i j k'\n    print(split_words(s))\n    s = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n    print(split_words(s))",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        # [s.lower(), s[:i], s[i:]]\n        res = []\n        i = 0\n        while i < len(s):\n            if s[i].islower():\n                res.append(s[:i])\n                res.append(s[i:])\n                break\n            i += 1\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.splitAtLowerCase('a'))\n    print(sol.splitAtLowerCase('abc'))\n    print(sol.splitAtLowerCase('abcde'))\n    print(sol.splitAtLowerCase('abcdef'))\n    print(sol.splitAtLowerCase('aBcDe'))\n    print(sol.splitAtLowerCase('AaBbCcDdEe'))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def splitToLines(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:j] for i, j in zip(range(0, len(s) + 1), range(1, len(s) + 1)) if s[i:j].isalpha()]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.splitToLines(\"Hello world!\")\n    print s.splitToLines(\"This is a test!\")\n    print s.splitToLines(\"Hello, this is a test!\")",
    "class Solution(object):\n    def split(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+1] for i in xrange(len(s)) if s[i].islower()]",
    "# pylint: disable=R0201\n# pylint: disable=R0904\n# pylint: disable=R0914\n# pylint: disable=R0912\n\nclass Solution:\n    \"\"\"\n    @param s: A string\n    @return: A list of strings\n    \"\"\"\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        start = 0\n        while start < len(s):\n            if s[start].islower():\n                if res:\n                    res.append(s[start:])\n                else:\n                    res.append(s[start:])\n                start += 1\n            else:\n                if res:\n                    res.append(s[start:])\n                start += 1\n        return res",
    "import unittest\n\nclass Solution:\n    def split_string(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if s[i].isalpha():\n                result.append(s[:i].lower() + s[i+1:])\n                s = s[i+1:]\n        return result + [s]\n\n    def split_string_1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if s[i].isalpha():\n                result.append(s[:i].lower() + s[i+1:])\n                s = s[i+1:]\n        return result + [s]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/split-a-string-at-lower-case-letters/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n# 1ms 100%\nclass Solution {\n    public List<String> splitString(String s) {\n        List<String> result = new ArrayList<>();\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                result.add(new String(chars, 0, i));\n                chars = Arrays.copyOfRange(chars, i, chars.length);\n            }\n        }\n        if (chars.length > 0) {",
    "# https://oj.leetcode.com/problems/split-a-string-at-special-characters/\n\nclass Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        res = []\n        for i, c in enumerate(s):\n            if c.islower():\n                res.append(s[:i])\n                s = s[i:]\n        if s:\n            res.append(s)\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.splitAtLowerCase('a'))\n    print(s.splitAtLowerCase('aBcDeFg'))\n    print(s.splitAtLowerCase('abcdefg'))\n    print(s.splitAtLowerCase('abcdefgABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    print(s.splitAtLowerCase('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))",
    "def split_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    return [word for word in string.lower().split() if word]\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    s = 'a,b,c,d,e,f,g'\n    print(split_string(s))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def split(self, s):\n        if not s:\n            return []\n        res = []\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i])\n                s = s[i:]\n        res.append(s)\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.split(\"a\")\n    print sol.split(\"ab\")\n    print sol.split(\"abcd\")\n    print sol.split(\"abc\")\n    print sol.split(\"aab\")",
    "class Solution(object):\n    def splitIntoLines(self, text, lineLength):\n        \"\"\"\n        :type text: str\n        :type lineLength: int\n        :rtype: List[str]\n        \"\"\"\n        lines = []\n        index = 0\n        while index < len(text):\n            if index + lineLength > len(text):\n                lines.append(text[index:])\n                break\n            if text[index:index+lineLength] == text[index:index+lineLength].lower():\n                lines.append(text[index:index+lineLength])\n                index += lineLength\n            else:\n                index += 1\n        return lines",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [c.lower() for c in s]\n\n\nif __name__ == '__main__':\n    assert Solution().splitAtLowerCase(\"abcABC\") == [\"abc\", \"ABC\"]",
    "import re\n\n\ndef split_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'([a-z]+)', s)\n\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(split_string(s))",
    "def split_at_lowercase(string):\n    # write your code here\n    return [string[i:i + 1] for i in range(0, len(string) - 1) if string[i].islower()]\n\nif __name__ == '__main__':\n    string = 'The quick brown fox jumps over the lazy dog'\n    print(split_at_lowercase(string))",
    "# Definition for a letter.\nclass Letter:\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n\nclass Solution:\n    def split(self, s, word):\n        \"\"\"\n        :type s: str\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        cur = 0\n        word_len = len(word)\n        while cur < len(s):\n            if s[cur] == word[0]:\n                if cur + word_len < len(s):\n                    if s[cur + word_len] == word[1]:\n                        if cur + word_len + 1 < len(s):\n                            if s[cur + word_len + 1] == word[2]:\n                                if cur + word_len + 2 < len(s):\n                                    if s[cur + word_len + 2] == word[3]:\n                                        if cur + word_len + 3 < len(s):\n                                            if s[cur + word_len + 3] == word[4]:\n                                                res.append(s[cur:cur + word_len + 4])\n                                                cur += word_len + 4\n                                            else:\n                                                cur += word_len + 3\n                                        else:\n                                            cur += word_len + 2\n                                    else:\n                                        cur += word_len + 1\n                                else:\n                                    cur += word_len + 1\n                            else:\n                                cur += word_len + 1\n                        else:\n                            cur += word_len + 1\n                    else:\n                        cur += word_len + 1\n                else:\n                    cur += word_len + 1\n            else:\n                cur += 1\n        return res",
    "#!/usr/bin/env python\n\nclass Solution(object):\n    def split_string(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.lower().split()\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.split_string(\"Hello World\")",
    "import string\n\n\ndef split_at_lowercase_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in string.lower() if word.isalpha()]\n\n\ndef test():\n    assert split_at_lowercase_letters(\"abc\") == ['a', 'b', 'c']\n    assert split_at_lowercase_letters(\"ab\") == ['a', 'b']\n    assert split_at_lowercase_letters(\"a\") == ['a']\n    assert split_at_lowercase_letters(\"aa\") == ['a', 'a']\n    assert split_at_lowercase_letters(\"aaa\") == ['a', 'a', 'a']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n    assert split_at_lowercase_letters(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n    assert split_at_lowercase_letters(\"abcd\") == ['a', 'b', 'c', 'd']\n\n\nif __name__ == '__main__':\n    test()",
    "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def splitLowerCase(self, s):\n        ret = []\n        for i in range(len(s)):\n            if s[i].islower():\n                ret.append(s[:i+1])\n                s = s[i+1:]\n        ret.append(s)\n        return ret\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.splitLowerCase(\"Hello World\")",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[:i] for i in range(len(s)) if s[i].islower()]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitAtLowerCase(\"A\"))",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        if not s:\n            return []\n        \n        lowers = []\n        for i in range(len(s)):\n            if s[i].islower():\n                lowers.append(s[i])\n            else:\n                if lowers:\n                    lowers.append(''.join(lowers))\n                lowers = [s[i]]\n        \n        if lowers:\n            lowers.append(''.join(lowers))\n        \n        return lowers\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.splitAtLowerCase('a'))\n    print(s.splitAtLowerCase('aab'))\n    print(s.splitAtLowerCase('abc'))\n    print(s.splitAtLowerCase('aaa'))",
    "def split_at_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [s.lower() for s in str.split(' ') if s]\n\nclass Solution:\n    \"\"\"\n    @param str: The string to be split\n    @return: A list of strings\n    \"\"\"\n    def split(self, s):\n        return [s[i:i+1].lower() for i in range(0, len(s), 1)]\n\nif __name__ == \"__main__\":\n    print Solution().split('a')\n    print Solution().split('a b c')\n    print Solution().split(' a b c')\n    print Solution().split('a b c d')\n    print Solution().split('a')",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        s = s.upper()\n        return [x for x in s if x.isalpha()]",
    "def split_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    return s.lower().split()\n\nif __name__ == '__main__':\n    assert split_string('a') == ['a'],'split at lowercase letters'\n    assert split_string('abc') == ['a', 'b', 'c'],'split at lowercase letters'\n    assert split_string('abcd') == ['a', 'b', 'c', 'd'],'split at lowercase letters'\n    assert split_string('abcd efg') == ['a', 'b', 'c', 'd', 'e', 'f', 'g'],'split at lowercase letters'",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        result = []\n        for i in range(len(s)):\n            if s[i].isalpha() and s[i]!= s[i].lower():\n                if len(result) > 0:\n                    result[-1] += s[i]\n                else:\n                    result.append(s[i])\n            else:\n                if len(result) > 0:\n                    result[-1] += s[i]\n                else:\n                    result.append(s[i])\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.splitAtLowerCase(\"abc\"))\n    print(s.splitAtLowerCase(\"Hello World!\"))\n    print(s.splitAtLowerCase(\"\"))\n    print(s.splitAtLowerCase(\"a1b2c3\"))",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCaseLetters(self, s):\n        result = []\n        for c in s:\n            if c.lower() == c:\n                result.append(s[:i])\n                s = s[i:]\n            i += 1\n        result.append(s)\n        return result\n\ns = Solution()\ns.splitAtLowerCaseLetters('a')\nprint s.splitAtLowerCaseLetters('a')\ns.splitAtLowerCaseLetters('ab')\nprint s.splitAtLowerCaseLetters('ab')\ns.splitAtLowerCaseLetters('abc')\nprint s.splitAtLowerCaseLetters('abc')\ns.splitAtLowerCaseLetters('abcd')\nprint s.splitAtLowerCaseLetters('abcd')\ns.splitAtLowerCaseLetters('abcd')\nprint s.splitAtLowerCaseLetters('abcd')",
    "# https://leetcode.com/problems/split-string-to-words-ii/description/\n\n\nclass Solution(object):\n    def splitString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        result = []\n        for i in range(0, len(s) - k + 1):\n            if s[i: i + k].islower():\n                result.append(s[i: i + k])\n            else:\n                result.append(s[i: i + k - 1])\n        return result\n\n\ndef main():\n    s = Solution()\n    assert s.splitString('abc', 1) == ['a', 'b', 'c']\n    assert s.splitString('abc', 2) == ['a', 'b', 'c']\n    assert s.splitString('abc', 3) == ['a', 'b', 'c']\n    assert s.splitString('abc', 4) == ['a', 'b', 'c']\n    assert s.splitString('abc', 5) == ['a', 'b', 'c']\n    assert s.splitString('abc', 6) == ['a', 'b', 'c']\n    assert s.splitString('abc', 7) == ['a', 'b', 'c']\n    assert s.splitString('abc', 8) == ['a', 'b', 'c']\n    assert s.splitString('abc', 9) == ['a', 'b', 'c']\n    assert s.splitString('abc', 10) == ['a', 'b', 'c']\n    assert s.splitString('abc', 11) == ['a', 'b', 'c']\n    assert s.splitString('abc', 12) == ['a', 'b', 'c']\n    assert s.splitString('abc', 13) == ['a', 'b', 'c']\n    assert s.splitString('abc', 14) == ['a', 'b', 'c']\n    assert s.splitString('abc', 15) == ['a', 'b', 'c']\n    assert s.splitString('abc', 16)",
    "# https://www.hackerrank.com/challenges/split-a-string-at-lowercase\n\ndef split_string_at_lowercase(string):\n    string = string.lower()\n    split_string = []\n    i = 0\n    while i < len(string):\n        if string[i] >= 'a' and string[i] <= 'z':\n            split_string.append(string[i:])\n        else:\n            break\n        i += 1\n    return split_string\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    s = s.split(' ')\n    print(split_string_at_lowercase(s[0]))",
    "class Solution(object):\n    def splitToLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+1].lower() for i in range(0, len(s)) if s[i].isalpha()]",
    "def split_string(str):\n    \"\"\"\n    Input:\n        str: string to be split\n\n    Output:\n        A list of strings\n    \"\"\"\n    return [s.lower() for s in str.split(' ') if s.lower()]\n\nif __name__ == '__main__':\n    assert split_string('a b c') == ['a', 'b', 'c']\n    assert split_string('a b c d') == ['a', 'b', 'c', 'd']\n    assert split_string('a b c d e') == ['a', 'b', 'c', 'd', 'e']",
    "#\n# Write your code below.\n#\ndef split_at_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    return [s.lower() for s in string.split()]\n\nif __name__ == \"__main__\":\n    assert split_at_lowercase(\"a b c d e f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"Test case failed\"\n    assert split_at_lowercase(\"a b c\") == [\"a\", \"b\", \"c\"], \"Test case failed\"",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n\n        l = []\n        for i in xrange(len(s)):\n            if s[i].isalpha():\n                l.append(s[:i])\n                s = s[i:]\n            else:\n                l.append(s[:i])\n                s = s[i:]\n        l.append(s)\n\n        return l\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.splitAtLowerCase(\"abc\")\n    s.splitAtLowerCase(\"abcdefg\")\n    s.splitAtLowerCase(\"a1b2\")",
    "def split_string(s):\n    res = []\n    for i in range(len(s)):\n        if s[i].lower() == s[i]:\n            res.append(s[i])\n    return res\n\nif __name__ == '__main__':\n    assert split_string('abc') == ['abc']\n    assert split_string('abcd') == ['abcd']\n    assert split_string('abcdefg') == ['abc', 'defg']\n    assert split_string('abcdefgh') == ['abc', 'def', 'gh']\n    assert split_string('abcdefghi') == ['abc', 'def', 'gh', 'hi']\n    assert split_string('abcdefghij') == ['abc', 'def', 'gh', 'hi', 'j']\n    assert split_string('abcdefghijkl') == ['abc', 'def', 'gh', 'hi', 'j', 'kl']\n    assert split_string('abcdefghijklm') == ['abc', 'def', 'gh', 'hi', 'j', 'kl','m']\n    assert split_string('abcdefghijklmnop') == ['abc', 'def', 'gh', 'hi', 'j', 'kl','m', 'nop']",
    "class Solution:\n    # @param str, a string\n    # @return a list of strings\n    def splitString(self, str):\n        return [word for word in str.lower().split() if word]\n\n    def splitString1(self, str):\n        res = []\n        for word in str.lower().split():\n            if word.isalpha():\n                res.append(word)\n        return res\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.splitString1(\"aabbcc\")\n    print solution.splitString1(\"aaabbcc\")\n    print solution.splitString1(\"aaaabbbbcccc\")\n    print solution.splitString1(\"aabbcc\")\n    print solution.splitString1(\"aabbcc\")",
    "# -*- coding: utf-8 -*-\n# @author: zhaohuiyu\n# @time:   2016-12-30 17:45:00\n# @github: https://github.com/zhaohuyu\n# @last modified by:   zhaohuiyu\n# @last modified time: 2016-12-30 17:45:01\n\ndef split_string(string):\n    '''\n    split a string at lowercase letters\n    @param string:\n    @return:\n    '''\n    lower_str = string.lower()\n    lower_str_len = len(lower_str)\n    result_list = []\n    for i in range(lower_str_len):\n        if lower_str[i] =='':\n            result_list.append('')\n        elif lower_str[i] in 'abcdefghijklmnopqrstuvwxyz':\n            result_list.append(lower_str[i])\n        else:\n            result_list.append(lower_str[i])\n    return result_list\n\nif __name__ == '__main__':\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('AaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_string('aAaBbCc'))\n    print(split_",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        res = []\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i])\n                s = s[i:]\n        res.append(s)\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = \"Hello World\"\n    print sol.splitAtLowerCase(s)",
    "__author__ = 'Libao Jin'\n__date__ = 'December 19, 2015'\n\nclass Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        res = []\n        if not s:\n            return res\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i+1])\n                s = s[i+1:]\n            else:\n                res.append(s[:i])\n                s = s[i+1:]\n        res.append(s)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.splitAtLowerCase(\"\")\n    print s.splitAtLowerCase(\"a\")\n    print s.splitAtLowerCase(\"abc\")\n    print s.splitAtLowerCase(\"aaabc\")\n    print s.splitAtLowerCase(\"abcd\")\n    print s.splitAtLowerCase(\"abbc\")\n    print s.splitAtLowerCase(\"abbc\")\n    print s.splitAtLowerCase(\"abc\")\n    print s.splitAtLowerCase(\"abcabc\")\n    print s.splitAtLowerCase(\"abcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\")\n    print s.splitAtLowerCase(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "def split_str(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    res = []\n    i = 0\n    while i < len(str):\n        if str[i].islower():\n            res.append(str[i:])\n        else:\n            res.append(str[i])\n        i += 1\n    return res\n\nif __name__ == '__main__':\n    print split_str('abcdefg')\n    print split_str('abcd')\n    print split_str('abcd')",
    "def split_at_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    return [s for s in str if s.islower()]\n\n\nif __name__ == '__main__':\n    assert split_at_lowercase('a') == ['a']\n    assert split_at_lowercase('a b') == ['a', 'b']\n    assert split_at_lowercase('aB') == ['a', 'B']\n    assert split_at_lowercase('A B') == ['A', 'B']\n    assert split_at_lowercase('a b c') == ['a', 'b', 'c']\n    assert split_at_lowercase('a b c d') == ['a', 'b', 'c', 'd']",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def splitAtLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def split(s, start, end):\n            if start >= end:\n                return []\n            if s[start] >= 'a' and s[start] <= 'z':\n                return [s[start]]\n            if s[start] >= 'A' and s[start] <= 'Z':\n                return [s[start]] + split(s, start+1, end)\n            return split(s, start+1, end) + split(s, start+1, end)\n\n        return split(s, 0, len(s))\n\n\ns = Solution()\ns.splitAtLowercase(\"a\")\nprint(s.splitAtLowercase(\"aa\"))\nprint(s.splitAtLowercase(\"ab\"))\nprint(s.splitAtLowercase(\"aaabb\"))\nprint(s.splitAtLowercase(\"aaaaaaab\"))\nprint(s.splitAtLowercase(\"a\"))\nprint(s.splitAtLowercase(\"abcd\"))\nprint(s.splitAtLowercase(\"abcdz\"))\nprint(s.splitAtLowercase(\"abcdz\"))",
    "import re\n\n\ndef split_at_lowercase(string):\n    regex = re.compile(\"[a-z]\")\n    return regex.split(string)\n\n\nif __name__ == '__main__':\n    print(split_at_lowercase(\"Hello world\"))\n    print(split_at_lowercase(\"aabb\"))",
    "class Solution:\n    # @param {string} str\n    # @return {string[]}\n    def splitAtLowerCase(self, str):\n        return str.lower().split()\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.splitAtLowerCase(\"Hello\")",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[:i] + s[i].lower() + s[i+1:] for i in range(len(s) - 1)]\n\nif __name__ == \"__main__\":\n    assert Solution().splitAtLowerCase(\"\") == []\n    assert Solution().splitAtLowerCase(\"abc\") == [\"abc\"]\n    assert Solution().splitAtLowerCase(\"abcdefg\") == [\"abc\", \"defg\"]\n    assert Solution().splitAtLowerCase(\"a\") == [\"a\"]\n    assert Solution().splitAtLowerCase(\"abcabc\") == [\"abcabc\"]",
    "class Solution(object):\n    def splitToLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i + 1].lower() for i in range(len(s)) if s[i].islower()]",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        res = []\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i])\n                s = s[i:]\n        res.append(s)\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.splitAtLowerCase(\"a\")\n    print s.splitAtLowerCase(\"abc\")\n    print s.splitAtLowerCase(\"abcdef\")\n    print s.splitAtLowerCase(\"abcd\")\n    print s.splitAtLowerCase(\"\")\n    print s.splitAtLowerCase(\"a\")",
    "import unittest\n\n\nclass Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s.lower()]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/split-a-string-at-lower-case-letters/solution/\n# Approach 1: Brute Force\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# We are going to split the string at lower case letters. We just have to go through the string\n# and find out whether there is a lower case letter in the string. If there is, then we will split\n# the string at that location. If there is no lower case letter, then we will not split the string\n# at that location.\n#\n# Approach 2: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# DP solution\n#\n# Approach 3: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 4: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 5: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 6: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 7: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 8: DP\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Approach 9: DP\n# Complexity Analysis\n# Time Complexity",
    "# https://www.hackerrank.com/challenges/split-a-string\ndef split_string(s):\n    return [word for word in s.lower().split()]",
    "def split_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    res = []\n    for i in range(len(s)):\n        if s[i].islower():\n            res.append(s[:i] + s[i + 1:])\n            s = s[:i] + s[i + 1:]\n    res.append(s)\n    return res\n\n\n\nif __name__ == \"__main__\":\n    assert split_string(\"hello\") == ['hello']\n    assert split_string(\"hello world\") == ['hello', 'world']\n    assert split_string(\"a b c\") == ['a', 'b', 'c']\n    assert split_string(\"a.b.c\") == ['a', 'b', 'c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']\n    assert split_string(\"a 1.b 2.c\") == ['a', '1.b', '2.c']",
    "def split_string(str, word_count):\n    # write your code here\n    result = []\n    i = 0\n    while i < len(str):\n        if str[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            result.append(str[i:i + word_count])\n            i += word_count\n        else:\n            result.append(str[i:])\n            i = len(str)\n    return result\n\n\nif __name__ == '__main__':\n    str = \"Hello, world!\"\n    word_count = 1\n    print(split_string(str, word_count))\n    print(split_string(str, 2))\n    print(split_string(str, 3))\n    print(split_string(str, 4))\n    print(split_string(str, 5))\n    print(split_string(str, 6))",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport string\n\n\ndef split_string(s):\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    :param s: str\n    :return: list\n    \"\"\"\n    return [word.lower() for word in s.split(string.punctuation) if word.isalpha()]\n\n\nif __name__ == \"__main__\":\n    print(split_string(\"abcd\"))",
    "__author__ = 'Libao Jin'\n__date__ = 'December 4, 2015'\n\nclass Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCaseLetters(self, s):\n        return [s[i:j] for i, j in zip(\n            enumerate(s),\n            enumerate(s) + [len(s)]) if j == len(s) or s[j] == s[i+1]]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.splitAtLowerCaseLetters('abcABCabc'))\n    print(s.splitAtLowerCaseLetters('abcabcabc'))\n    print(s.splitAtLowerCaseLetters('abcABCabcABC'))\n    print(s.splitAtLowerCaseLetters('abcabcabcABC'))",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        dic = {}\n        for c in s:\n            dic[c] = dic.get(c, 0) + 1\n        \n        ans = []\n        for c in s:\n            if dic[c] == 1:\n                ans.append(c)\n        return ans",
    "class Solution(object):\n    def splitToLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for c in s:\n            if c.isalpha() and c.lower() == c:\n                res.append(c)\n        return res\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.splitToLowerCase(s)",
    "def split_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    return [word for word in string.lower() if word.isalpha()]\n\ndef test_split_string():\n    assert split_string(\"\") == []\n    assert split_string(\"abc\") == [\"abc\"]\n    assert split_string(\"abc def\") == [\"abc\", \"def\"]\n    assert split_string(\"a1b2c3d4\") == [\"a\", \"1\", \"b\", \"2\", \"c\", \"3\", \"d\", \"4\"]\n\nif __name__ == '__main__':\n    test_split_string()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def split_str(self, s, word):\n        \"\"\"\n        :type s: str\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(word)):\n            if word[i].isalpha():\n                result.append(s[:i])\n                s = s[i:]\n            else:\n                pass\n        result.append(s)\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.split_str(\"hello world\", \"world\")\n    print s.split_str(\"hello world\", \"hello\")\n    print s.split_str(\"hello world\", \"helloworld\")",
    "def split_string(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [s for s in str if s.islower()]\n\n\nif __name__ == '__main__':\n    print(split_string(\"Hello World\"))",
    "# https://leetcode.com/problems/split-a-string-at-lowercase-letters/discuss/261548/Python-O(N)-DP-solution-with-explanation\n# https://leetcode.com/problems/split-a-string-at-lowercase-letters/discuss/103655/Python-O(N)-DP-solution-with-explanation\nclass Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        count = 0\n        for i in range(len(s)):\n            if s[i].islower():\n                ret.append(s[count:i])\n                count = i\n        ret.append(s[count:])\n        return ret\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s = \"Hello world!\"\n    print(s.splitAtLowerCase(s))",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in xrange(len(s)):\n            if s[i].islower():\n                res.append(s[:i])\n                s = s[i:]\n            else:\n                res.append(s[i:])\n                s = s[:i]\n        return res",
    "# O(n)\ndef split_at_lower_case(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n        else:\n            result.append('')\n    return result\n\n# O(n)\ndef split_at_lower_case_2(str):\n    return [c for c in str if c.isalpha()]\n\n# O(n)\ndef split_at_lower_case_3(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n    return result\n\n# O(n)\ndef split_at_lower_case_4(str):\n    result = []\n    for c in str:\n        if c.isalpha() or c.isupper():\n            result.append(c)\n        else:\n            result.append('')\n    return result\n\n# O(n)\ndef split_at_lower_case_5(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n        else:\n            result.append('')\n    return result\n\n# O(n)\ndef split_at_lower_case_6(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c)\n        else:\n            result.append('')\n    return result\n\n# O(n)\ndef split_at_lower_case_7(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c)\n        else:\n            result.append('')\n    return result\n\n# O(n)\ndef split_at_lower_case_8(str):\n    result = []\n    for c in str:\n        if c.isalpha():\n            result.append(c)\n        elif c.islower():",
    "def split_string(s):\n    return [s[i:i+1] for i in range(len(s)) if s[i].islower()]\n\ndef test():\n    assert split_string('hello') == ['hello']\n    assert split_string('hello world') == ['hello', 'world']\n    assert split_string('hello world, how are you?') == ['hello', 'world', 'how', 'are', 'you?']\n    assert split_string('a,b,c,') == ['a', ',', 'b', ',', 'c', ',', ',']\n    assert split_string('a, b, c,') == ['a', ',', 'b', ',', 'c', ',', ',']\n    assert split_string('a b c') == ['a', 'b', 'c']\n\nif __name__ == '__main__':\n    test()",
    "class Solution(object):\n    def split_to_words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i+1])\n                s = s[i+1:]\n        if s:\n            res.append(s)\n        return res",
    "class Solution(object):\n    def split(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for c in s:\n            if c.islower():\n                res.append(c)\n            else:\n                res.append(res[-1]+c)\n        return res\n\ns = Solution()\nprint s.split(\"aBc\")",
    "def split_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [x for x in s.lower() if x.isalpha()]\n\nif __name__ == \"__main__\":\n    assert split_string(\"hello world\") == [\"hello\", \"world\"]\n    assert split_string(\"ab cd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]\n    assert split_string(\"abcd ef\") == [\"ab\", \"cd\", \"ef\"]",
    "class Solution:\n    def split_str(self, s: str, sep: str) -> str:\n        return sep.join([i.lower() for i in s.split(sep)])\n\n    def split_str_2(self, s: str, sep: str) -> str:\n        return sep.join([i.lower() for i in s.split()])",
    "def split_string(s):\n    \"\"\"\n    Write a function split_string that splits a string at lowercase letters.\n    The function should return a tuple of two lists, the first containing\n    all lowercase letters, and the second containing all other letters.\n\n    For example, split_string(\"abcd\") should return\n    (\"abcd\", \"\", \"\", \"\")\n    \"\"\"\n    return(\"\", \"\", \"\", \"\")\n\ndef test_split_string():\n    assert split_string(\"abcd\") == (\"abcd\", \"\", \"\", \"\")\n    assert split_string(\"aBcD\") == (\"aBcD\", \"\", \"\", \"\")\n    assert split_string(\"abcd\") == (\"abcd\", \"\", \"\", \"\")\n    assert split_string(\"ab\") == (\"ab\", \"\", \"\", \"\")\n    assert split_string(\"abc\") == (\"abc\", \"\", \"\", \"\")\n    assert split_string(\"abcd\") == (\"abcd\", \"\", \"\", \"\")\n    assert split_string(\"abcd \") == (\"abcd \", \"\", \"\", \"\")\n    assert split_string(\" abcd \") == (\"abcd \", \"\", \"\", \"\")\n    assert split_string(\"abc d\") == (\"abc d\", \"\", \"\", \"\")\n    assert split_string(\"abc def\") == (\"abc def\", \"\", \"\", \"\")\n    assert split_string(\"abc def \") == (\"abc def \", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi\") == (\"abc def ghi\", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi \") == (\"abc def ghi \", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi jkl\") == (\"abc def ghi jkl\", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi jkl \") == (\"abc def ghi jkl \", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi jkl mno\") == (\"abc def ghi jkl mno\", \"\", \"\", \"\")\n    assert split_string(\"abc def ghi jkl mno \") == (\"abc def ghi jkl mno \",",
    "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def splitAtLowerCase(self, s):\n        return s.lower().split()\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.splitAtLowerCase(\"Hello World\"))",
    "def split_string_at_lowercase_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for i in range(0, len(s)):\n        if s[i].lower() == s[i]:\n            res.append(s[i])\n    return res\n\nclass Solution(object):\n    def splitString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(0, len(s)):\n            if len(res) >= k:\n                break\n            if s[i].lower() == s[i]:\n                res.append(s[i])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.splitString(\"a\", 1))\n    print(s.splitString(\"aa\", 2))\n    print(s.splitString(\"aa\", 3))\n    print(s.splitString(\"aa\", 4))\n    print(s.splitString(\"aa\", 5))\n    print(s.splitString(\"aa\", 6))\n    print(s.splitString(\"aa\", 7))\n    print(s.splitString(\"aa\", 8))\n    print(s.splitString(\"aa\", 9))\n    print(s.splitString(\"aa\", 10))\n    print(s.splitString(\"aa\", 11))\n    print(s.splitString(\"aa\", 12))\n    print(s.splitString(\"aa\", 13))\n    print(s.splitString(\"aa\", 14))\n    print(s.splitString(\"aa\", 15))\n    print(s.splitString(\"aa\", 16))\n    print(s.splitString(\"aa\", 17))\n    print(s.splitString(\"aa\", 18))",
    "# https://leetcode.com/problems/split-a-string-at-lowercase-letters/discuss/120827/Python-solution\n\nclass Solution(object):\n    def splitString(self, s, num):\n        \"\"\"\n        :type s: str\n        :type num: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        i = 0\n        while i < len(s):\n            while i < len(s) and s[i] >= 'a':\n                i += 1\n            j = i\n            while j < len(s) and s[j] <= 'z':\n                j += 1\n            res.append(s[i:j])\n            i = j\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.splitString(\"Hello World\", 5)",
    "class Solution(object):\n    def splitString(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s) - n + 1):\n            if s[i:i + n] == s[i:i + n].lower():\n                res.append(s[i:i + n])\n        return res",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        return [s[i:j] for i, j in zip(enumerate(s), enumerate(s[::-1])) if s[i[1]] == s[j[0]]]\n\n    def splitAtLowerCase2(self, s):\n        res = []\n        for i in range(len(s)):\n            if s[i].islower():\n                res.append(s[:i])\n            else:\n                res.append(s[i:])\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    s = 'abcd'\n    print(sol.splitAtLowerCase(s))\n    print(sol.splitAtLowerCase2(s))",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def split(self, s):\n        dic = {}\n        for c in s:\n            if c in dic:\n                dic[c] += 1\n            else:\n                dic[c] = 1\n        result = []\n        for c in dic:\n            if dic[c] == 1:\n                result.append(c)\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.split(\"aabbcc\")\n    print s.split(\"aabbcc\")",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def splitString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        res = []\n        stack = []\n        for i in range(len(s)):\n            if i+1 == k:\n                if stack and stack[-1].val == s[i]:\n                    stack.pop()\n                else:\n                    stack.append(TreeNode(s[i], None, None))\n            elif s[i] =='':\n                if stack and stack[-1].val == s[i-1]:\n                    stack.pop()\n                else:\n                    stack.append(TreeNode(s[i-1], None, None))\n            elif s[i] == '\\n':\n                if stack and stack[-1].val == s[i-1]:\n                    stack.pop()\n                else:\n                    stack.append(TreeNode(s[i-1], None, None))\n            elif s[i] >= 'a' and s[i] <= 'z':\n                if stack and stack[-1].val == s[i-1]:\n                    stack.pop()\n                else:\n                    stack.append(TreeNode(s[i-1], None, None))\n            else:\n                stack.append(TreeNode(s[i], None, None))\n        if stack:\n            res.append(stack[-1].val)\n        return res",
    "def split_str(str):\n    \n    return [x for x in str if x.islower()]\n\ndef main():\n    print split_str('Hello world')\n\nif __name__ == '__main__':\n    main()",
    "def split_str(str):\n    \"\"\"\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    return [s.lower() for s in str.split(' ') if s.isalpha()]",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitAtLowerCase(self, s):\n        return [s[:i] + s[i:j].lower() + s[j:] for i in range(len(s)) for j in range(i+1, len(s)) if s[j].islower()]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.splitAtLowerCase(\"Hello\")",
    "import re\n\n\ndef split_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    pattern = re.compile('[a-z]')\n    words = pattern.findall(string)\n    return words\n\n\nif __name__ == '__main__':\n    assert split_string('Hello World!') == ['Hello', 'World!']\n    assert split_string('Hello World!') == ['Hello', 'World!']\n    assert split_string('Hello World!') == ['Hello', 'World!']\n    assert split_string('Hello World!') == ['Hello', 'World!']\n    assert split_string('Hello World!') == ['Hello', 'World!']",
    "def split_at_lowercase_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    return [s[i:i+1] for i in range(len(s)) if s[i].islower()]\n\nif __name__ == '__main__':\n    print split_at_lowercase_letters('abc')",
    "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def splitString(self, s):\n        return [i+1 for i in range(len(s)) if s[i].islower()]\n\nif __name__ == \"__main__\":\n    print Solution().splitString(\"Hello, world!\")\n    print Solution().splitString(\"a\")\n    print Solution().splitString(\"abcabc\")",
    "def split_string_at_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [s.lower() for s in str.split()]\n\n\n# Your Solution\ndef split_string_at_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [s.lower() for s in str.split()]\n\n\n# Your Solution\ndef split_string_at_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [s.lower() for s in str.split()]\n\n\nif __name__ == '__main__':\n    print(split_string_at_lowercase(\"abcd\"))\n    print(split_string_at_lowercase(\"abcdefg\"))",
    "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\nclass Solution(object):\n    def split(self, s):\n        \"\"\"\n        :type s: String\n        :rtype: List[String]\n        \"\"\"\n        ret = []\n        for i in range(len(s.s)):\n            if s.s[i].islower():\n                ret.append(s.s[:i] + s.s[i + 1:])\n        return ret\n\nif __name__ == '__main__':\n    s = Solution()\n    s = String(\"hello\")\n    print(s.split(s))",
    "# @include\ndef split_string(s: str) -> List[str]:\n    # Write your code below...\n    return [s[:i] + s[i:j] + s[j:], s[:i]]\n# @exclude\n\n\ndef main():\n    s = \"aabbcc\"\n    # s = \"aaabbbcc\"\n    print(split_string(s))\n    print(split_string(\"aabbcc\"))\n    print(split_string(\"aabbccdd\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def split_at_lowercase(string):\n    return [word for word in string if word.isalpha()]\n\nif __name__ == \"__main__\":\n    string = \"Hello world!\"\n    print(split_at_lowercase(string))",
    "class Solution:\n    def splitToLowerCase(self, s: str) -> str:\n        return ''.join(map(lambda c: c.lower(), s))",
    "class Solution(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in xrange(len(s)):\n            if s[i].islower():\n                result.append(s[:i])\n                s = s[i:]\n            else:\n                result.append(s[i:])\n                s = s[:i]\n        if s:\n            result.append(s)\n        return result\n\n# Time:  O(n)\n# Space: O(1)\nclass Solution2(object):\n    def splitAtLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in xrange(len(s)):\n            if s[i].islower():\n                result.append(s[:i])\n                s = s[i:]\n            else:\n                result.append(s[:i])\n                s = s[i:]\n            if not s:\n                break\n        if s:\n            result.append(s)\n        return result",
    "def split_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    l = list()\n    for c in s:\n        if c.islower():\n            l.append(c)\n    return l\n\ndef test(s):\n    assert split_string(s) == ['a', 'b', 'c']\n\nif __name__ == '__main__':\n    test('abc')\n    test('abcd')\n    test('abcdz')\n    test('abcdabc')",
    "class Solution(object):\n    def splitToLines(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split('\\n')",
    "import re\n\ndef split_string(str):\n    return str.split(''.join(['[a-z]', '[A-Z]')))\n\nprint(split_string('abcd'))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}