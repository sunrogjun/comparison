{
  "problem": {
    "task_id": "MBPP/499",
    "prompt": "Write a function to find the diameter of a circle.",
    "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
    "test_list": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ],
    "challenge_test_list": [],
    "problem_id": 488
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\n\ndef diameter(center, radius):\n    \"\"\"\n    :type center: tuple\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    x = center[0]\n    y = center[1]\n\n    d = 2 * math.pi * radius\n    dx = d * math.cos(math.pi / 2)\n    dy = d * math.sin(math.pi / 2)\n\n    # x, y\n    # dx, dy\n    # x, y + dx, y + dy\n    # x + dx, y + dy\n    # x + dx, y + dx, y + dy\n    # x + dx, y + dx, y + dy, x + dy, y + dy\n\n    return d + dx, d + dy\n\n\nif __name__ == \"__main__\":\n    center = (0, 0)\n    radius = 1\n\n    print(diameter(center, radius))",
    "# Definition for a circle.\nclass Circle:\n    def __init__(self, radius: int):\n        self.radius = radius\n\nclass Solution:\n    def diameter(self, c: Circle) -> int:\n        \"\"\"\n        O(n) time, O(1) space\n        \"\"\"\n        if c.radius == 0:\n            return 0\n        elif c.radius == 1:\n            return 2\n        elif c.radius == 2:\n            return 3\n        elif c.radius == 3:\n            return 4\n        else:\n            return c.radius * (2 * c.radius - 1)",
    "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def diameter(self, x, y):\n        if x > y:\n            return x - y\n        else:\n            return y - x",
    "class Solution(object):\n    def diameterOfCircle(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        if x == 0 or y == 0 or z == 0:\n            return 0\n        x = abs(x)\n        y = abs(y)\n        z = abs(z)\n        if x < y:\n            if x < z:\n                return y * z / 2\n            else:\n                return x * z / 2\n        else:\n            if y < z:\n                return y * z / 2\n            else:\n                return y * z / 2",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @author: Debajit Dutta\n\nimport math\n\ndef diameter(r):\n    return 2 * r\n\nif __name__ == '__main__':\n    r = input()\n    diameter(r)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        # https://discuss.leetcode.com/topic/29094/java-solution-with-explanation/2\n        if x <= 1:\n            return 0\n\n        # calculate the diameter\n        return 2 * (x ** 2 - x)\n\n\nif __name__ == \"__main__\":\n    print Solution().diameter(100)",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution(object):\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        minx = None\n        maxx = None\n        miny = None\n        maxy = None\n        for point in points:\n            if minx is None:\n                minx = point.x\n                maxx = point.x\n                miny = point.y\n                maxy = point.y\n            else:\n                if point.x < minx:\n                    minx = point.x\n                if point.x > maxx:\n                    maxx = point.x\n                if point.y < miny:\n                    miny = point.y\n                if point.y > maxy:\n                    maxy = point.y\n        return max(abs(minx-maxx), abs(miny-maxy))\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.diameter(points)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, r):\n        \"\"\"\n        :type r: int\n        :rtype: int\n        \"\"\"\n        while r > 0:\n            r = r - 1\n        return r\n\n    def diameter(self, r):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return 2 * r\n        # return 2 * r + 1\n\nif __name__ == \"__main__\":\n    Solution().diameter(4)",
    "import math\n\ndef diameter(circle):\n    \"\"\"\n    circle is a list of 2-tuples (x, y), where x and y are the coordinates\n    of the center of the circle.\n\n    Return the diameter of the circle.\n    \"\"\"\n    return 2 * math.sqrt(sum((x, y) for x, y in circle))\n\ndef main():\n    \"\"\"\n    Unit tests for diameter().\n    \"\"\"\n    assert diameter([(0, 0), (0, 1), (1, 0), (1, 1)]) == 2\n    assert diameter([(0, 0), (0, 1), (1, 0)]) == 2\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef diameter(r):\n    \"\"\"\n    :type r: int\n    :rtype: int\n    \"\"\"\n    d = r ** 2 * 3.14159 / 2\n    return d\n\n\nif __name__ == '__main__':\n    assert diameter(4) == math.sqrt(27)\n    assert diameter(5) == math.sqrt(50)\n    assert diameter(6) == math.sqrt(102)",
    "class Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def diameter(n):\n            if n == 1:\n                return 1\n            return 2 * diameter(n - 1)\n        return diameter(x)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.diameter(3)\n    print s.diameter(4)\n    print s.diameter(5)\n    print s.diameter(6)\n    print s.diameter(7)",
    "import math\n\ndef diameter(circ):\n    \"\"\"\n    Circle diameter\n    \"\"\"\n    return 2 * circ.radius\n\nif __name__ == \"__main__\":\n    circ = Circle(5, 10)\n    print(diameter(circ))",
    "class Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        return 2 * (x ** 2) - 1\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.diameter(4)",
    "#!/usr/bin/env python\n\ndef diameter(radius):\n    # write your code here\n    return radius * 2\n\nif __name__ == '__main__':\n    print diameter(5)",
    "def diameter(circle):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n\n    Input:\n    circle -- a list of two numbers, representing the x and y coordinates of the circle's center.\n\n    Output:\n    diameter -- the diameter of the circle\n    \"\"\"\n\n    # Calculate the circumference of the circle\n    circumference = 2 * (3.14159 * circle[0] ** 2 + 3.14159 * circle[1] ** 2)\n\n    # Calculate the diameter of the circle\n    diameter = circumference / 2\n\n    return diameter\n\nif __name__ == \"__main__\":\n    # Test cases\n    circle = [2, 3]\n    assert diameter(circle) == 4, \"Circle center is at (2, 3) with a diameter of 4\"\n\n    circle = [1, 2]\n    assert diameter(circle) == 3, \"Circle center is at (1, 2) with a diameter of 3\"\n\n    circle = [1, 3]\n    assert diameter(circle) == 6, \"Circle center is at (1, 3) with a diameter of 6\"\n\n    circle = [2, 4]\n    assert diameter(circle) == 8, \"Circle center is at (2, 4) with a diameter of 8\"",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def dfs(x):\n            if x < 3:\n                return x\n            else:\n                return 3 * dfs(x - 1) + dfs(x - 2)\n\n        return dfs(x)\n\n\ndef main():\n    s = Solution()\n    print s.diameter(3)\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def diameterOfCircle(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        if x < 0 or y < 0 or z < 0:\n            return 0\n        if x == 0 and y == 0 and z == 0:\n            return 0\n        if x == 0 and y == 0:\n            return 0\n        if x == 0 and z == 0:\n            return 0\n        if y == 0 and z == 0:\n            return 0\n        if x == 0:\n            return z\n        if y == 0:\n            return x\n        if z == 0:\n            return y\n        return 2 * x + 2 * y + 2 * z\n\nif __name__ == '__main__':\n    assert Solution().diameterOfCircle(0, 0, 0) == 0\n    assert Solution().diameterOfCircle(1, 1, 1) == 1\n    assert Solution().diameterOfCircle(1, 1, 2) == 2\n    assert Solution().diameterOfCircle(0, 1, 1) == 1\n    assert Solution().diameterOfCircle(1, 0, 1) == 1\n    assert Solution().diameterOfCircle(1, 1, 2) == 2\n    assert Solution().diameterOfCircle(3, 3, 3) == 6\n    assert Solution().diameterOfCircle(3, 3, 4) == 8\n    assert Solution().diameterOfCircle(3, 3, 5) == 11",
    "def diameter(x):\n    \"\"\"\n    Given a circle's circumference, return its diameter.\n\n    >>> diameter(100)\n    100\n    >>> diameter(200)\n    100\n    >>> diameter(300)\n    200\n    >>> diameter(400)\n    300\n    >>> diameter(500)\n    500\n    \"\"\"\n\n    return 2 * x\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def diameter(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 2 * radius",
    "import math\n\ndef diameter(radius):\n    diameter = math.sqrt(radius * radius - math.pow(radius, 2))\n    return diameter\n\nif __name__ == \"__main__\":\n    print diameter(2)\n    print diameter(3)\n    print diameter(4)\n    print diameter(5)\n    print diameter(6)",
    "# 1.2\nclass Solution(object):\n    def diameterOfCircle(self, x, y, r):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        x = abs(x)\n        y = abs(y)\n        r = abs(r)\n        d = 0\n        while x > r:\n            x = x - r\n            d = d + r\n        while y > r:\n            y = y - r\n            d = d + r\n        return d + r",
    "class Solution(object):\n    def diameterOfCircle(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        return 2 * x * (x + 1) / 2\n\nif __name__ == '__main__':\n    assert Solution().diameterOfCircle(0) == 0\n    assert Solution().diameterOfCircle(1) == 1\n    assert Solution().diameterOfCircle(2) == 2\n    assert Solution().diameterOfCircle(3) == 2",
    "def diameter(cir):\n    \"\"\"\n    The diameter of a circle is the square root of the sum of the squares of\n    its radius.\n    \"\"\"\n\n    r = cir.radius\n\n    d = r ** 2\n\n    for i in range(1, len(cir)):\n        d += pow(r, 2)\n\n    return d ** 0.5\n\nif __name__ == \"__main__\":\n    cir = [1, 2, 3]\n    print(diameter(cir))\n    cir = [1, 2, 3, 4]\n    print(diameter(cir))\n    cir = [1, 2, 3, 4, 5]\n    print(diameter(cir))\n    cir = [1, 2, 3, 4, 5, 6]\n    print(diameter(cir))\n    cir = [1, 2, 3, 4, 5, 6, 7]\n    print(diameter(cir))",
    "# 1.1\ndef diameter(radius):\n    # Write your code here\n    return 2 * radius\n\n# 1.2\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.3\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.4\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.5\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.6\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.7\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.8\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.9\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.10\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.11\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.12\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.13\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.14\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.15\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.16\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.17\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.18\ndef circle_diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.19\ndef diameter(radius):\n    # Write your code here\n    return radius * 2\n\n# 1.20\ndef circle_d",
    "# https://oj.leetcode.com/problems/circle-area/\n# Definition for a circle.\nclass Circle:\n    def __init__(self, x, y, r):\n        self.cx = x\n        self.cy = y\n        self.r = r\n\nclass Solution:\n    # @param {Circle} c the circle\n    # @return {integer} the diameter of the circle\n    def diameter(self, c):\n        # Write your code here\n        return 2 * c.r",
    "class Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        return 2 * x * (x + 1) / 2",
    "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n# Definition for a circle\nclass Circle:\n    def __init__(self, x, y, r):\n        self.cx = x\n        self.cy = y\n        self.r = r\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {Point}\n    def diameter(self, points):\n        if not points:\n            return Point()\n        if len(points) == 1:\n            return points[0]\n\n        min_x = min_y = max_x = max_y = None\n        for point in points:\n            if min_x is None or point.x < min_x:\n                min_x = point.x\n            if min_y is None or point.y < min_y:\n                min_y = point.y\n            if max_x is None or point.x > max_x:\n                max_x = point.x\n            if max_y is None or point.y > max_y:\n                max_y = point.y\n\n        diameter = max_x - min_x\n        if diameter < max_y - min_y:\n            diameter = max_y - min_y\n\n        return Point(diameter / 2, diameter / 2)\n\nif __name__ == \"__main__\":\n    #points = [[Point(1, 1), Point(2, 2)], [Point(3, 3), Point(4, 4)]]\n    points = [[Point(3, 3), Point(2, 2)], [Point(4, 4), Point(1, 1)]]\n    s = Solution()\n    print(s.diameter(points))",
    "import math\n\n# Complete the function below.\n\ndef diameter(radius):\n    return radius * 2\n\nif __name__ == \"__main__\":\n    assert diameter(1) == 2, \"Invalid diameter\"\n    assert diameter(2) == 4, \"Invalid diameter\"\n    assert diameter(3) == 6, \"Invalid diameter\"\n    assert diameter(4) == 8, \"Invalid diameter\"\n    assert diameter(5) == 10, \"Invalid diameter\"",
    "import math\n\ndef diameter(r):\n    \"\"\"\n    :type r: int\n    :rtype: int\n    \"\"\"\n    return 2 * r * math.sqrt(r ** 2 + r ** 2)\n\nif __name__ == '__main__':\n    assert diameter(2) == 4\n    assert diameter(3) == 9\n    assert diameter(4) == 12\n    assert diameter(5) == 15\n    assert diameter(6) == 18\n    assert diameter(7) == 22\n    assert diameter(8) == 25\n    assert diameter(9) == 28\n    assert diameter(10) == 32",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"Point(%s, %s)\" % (self.x, self.y)\n\n\nclass Solution(object):\n    def diameterOfCircle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        maxx, maxy, minx, miny = points[0].x, points[0].y, points[0].x, points[0].y\n        for p in points:\n            maxx, maxy, minx, miny = max(maxx, p.x), max(maxy, p.y), min(minx, p.x), min(miny, p.y)\n\n        diameter = (maxx - minx) * 2 + (maxy - miny) * 2\n        return diameter\n\nclass Solution2(object):\n    def diameterOfCircle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        maxx, maxy, minx, miny = points[0].x, points[0].y, points[0].x, points[0].y\n        for p in points:\n            maxx, maxy, minx, miny = max(maxx, p.x), max(maxy, p.y), min(minx, p.x), min(miny, p.y)\n\n        return max(maxx - minx, maxy - miny)\n\n\nclass Solution3(object):\n    def diameterOfCircle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        maxx, maxy, minx, miny = points[0].x, points[0].y, points[0].x, points[0].y\n        for p in points:\n            max",
    "def diameter(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 2 * radius",
    "import math\n\ndef diameter(r):\n    \"\"\"\n    Find the diameter of a circle with radius r.\n    \"\"\"\n    return r * 2\n\ndef main():\n    \"\"\"\n    Unit tests for diameter().\n    \"\"\"\n    assert diameter(2.0) == math.sqrt(2.0)\n    assert diameter(3.0) == 4.0\n    assert diameter(5.0) == 6.0\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef diameter(r):\n    return 2 * math.pi * r\n\nif __name__ == \"__main__\":\n    print(diameter(3))",
    "def diameter(r):\n    \"\"\"\n    :type r: int\n    :rtype: int\n    \"\"\"\n    \n    n = 0\n    while True:\n        n += 1\n        r = (r + 1) % n\n        if r == 0:\n            break\n    return n",
    "import math\n\ndef diameter(n):\n    \"\"\"\n    Given a number n, return the diameter of the circle with that number of\n    numbers.\n\n    >>> diameter(1)\n    3\n    >>> diameter(4)\n    5\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return 2 * math.sqrt(3 * n)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def diameter(circle):\n    \"\"\"\n    :type circle: list[int]\n    :rtype: int\n    \"\"\"\n    return sum(circle)\n\nif __name__ == '__main__':\n    assert diameter([2, 3, 4, 5, 6, 7, 8]) == 10\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 14\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 16\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 18\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 22\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 24\n    assert diameter([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 30",
    "import math\n\ndef diameter(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, int(math.sqrt(x)) + 1):\n        sum_of_squares += x - i**2\n    return x * 2 + sum_of_squares\n\nif __name__ == \"__main__\":\n    assert diameter(0) == 0, \"Test case 1 failed\"\n    assert diameter(1) == 1, \"Test case 2 failed\"\n    assert diameter(2) == 2, \"Test case 3 failed\"\n    assert diameter(3) == 3, \"Test case 4 failed\"\n    assert diameter(4) == 4, \"Test case 5 failed\"\n    assert diameter(5) == 5, \"Test case 6 failed\"\n    assert diameter(6) == 6, \"Test case 7 failed\"\n    assert diameter(7) == 7, \"Test case 8 failed\"\n    assert diameter(8) == 8, \"Test case 9 failed\"\n    assert diameter(9) == 9, \"Test case 10 failed\"\n    assert diameter(10) == 10, \"Test case 11 failed\"\n    assert diameter(11) == 11, \"Test case 12 failed\"\n    assert diameter(12) == 12, \"Test case 13 failed\"\n    assert diameter(13) == 13, \"Test case 14 failed\"\n    assert diameter(14) == 14, \"Test case 15 failed\"\n    assert diameter(15) == 15, \"Test case 16 failed\"\n    assert diameter(16) == 16, \"Test case 17 failed\"\n    assert diameter(17) == 17, \"Test case 18 failed\"\n    assert diameter(18) == 18, \"Test case 19 failed\"\n    assert diameter(19) == 19, \"Test case 20 failed\"\n    assert diameter(20) == 20, \"Test case 21 failed\"\n    assert diameter(21) == 21, \"Test case 22 failed\"\n    assert diameter(22) == 22, \"Test case 23 failed\"\n    assert diameter(23) == 23, \"Test case 24 failed\"\n    assert diameter(24) == 24, \"Test case 25 failed\"\n    assert diameter(25) == 25, \"Test",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def diameter(self, p: 'Point'):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        x1 = p.x\n        y1 = p.y\n        x2 = x1\n        y2 = y1\n        while True:\n            x3 = x1\n            y3 = y1\n            x4 = x2\n            y4 = y2\n            x1 = x2\n            y1 = y2\n            x2 = x3\n            y2 = y3\n            x3 = x4\n            y3 = y4\n            x4 = x1\n            y4 = y1\n            if x1*x1 + y1*y1 > x2*x2 + y2*y2:\n                x1, y1 = x2, y2\n            if x2*x2 + y2*y2 > x3*x3 + y3*y3:\n                x2, y2 = x3, y3\n            if x3*x3 + y3*y3 > x4*x4 + y4*y4:\n                x3, y3 = x4, y4\n        return abs(x1 - x2) + abs(y1 - y2)",
    "from math import ceil\n\ndef diameter(radius):\n    \"\"\"\n    Return the diameter of a circle.\n\n    The diameter of a circle is the square root of 2 times the radius.\n\n    For example, the diameter of a circle with radius 3 is 4.\n    \"\"\"\n\n    return ceil(2 * radius)\n\nif __name__ == \"__main__\":\n    assert diameter(3) == 4\n    assert diameter(4) == 8\n    assert diameter(5) == 10",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\nclass Solution(object):\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        x_max, y_max = min(points), max(points)\n        x_min, y_min = max(points), min(points)\n\n        if x_max == x_min:\n            return x_max - y_min\n\n        if y_max == y_min:\n            return y_max - x_min\n\n        x_mid = (x_min + x_max) / 2\n        y_mid = (y_min + y_max) / 2\n\n        return max(x_max - x_mid, y_max - y_mid)\n\n\nif __name__ == \"__main__\":\n    assert Solution().diameter([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]) == 4\n    assert Solution().diameter([]) == 0\n    assert Solution().diameter([(1, 1)]) == 0",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 0:\n            return 0\n        # check if points are in clockwise order\n        if points[0].y < points[1].y or points[0].y > points[-1].y:\n            points.reverse()\n        for p in points:\n            if p.x == points[0].x or p.x == points[-1].x:\n                return 0\n        # find the max distance between two points\n        dists = [0] * len(points)\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                d = (points[i].x - points[j].x) ** 2 + (points[i].y - points[j].y) ** 2\n                dists[i] = max(dists[i], dists[j] + d)\n        # find the diameter\n        d = 0\n        for i in range(len(points)):\n            d += dists[i]\n        return d",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def diameter(self, point1, point2):\n        \"\"\"\n        :type point1: Point\n        :type point2: Point\n        :rtype: int\n        \"\"\"\n        # get the angle of the line between the two points\n        angle = abs(point1.x - point2.x) * 3.14159 / 180\n        # get the length of the line\n        length = abs(point1.y - point2.y)\n        # get the distance between the two points\n        distance = abs(point1.x - point2.x) + abs(point1.y - point2.y)\n        return distance * 2 + length * 2 * math.sin(angle)\n\n\nif __name__ == '__main__':\n    point1 = Point(1, 2)\n    point2 = Point(2, 2)\n    print(Solution().diameter(point1, point2))",
    "def diameter(x, y, r):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :type r: int\n    :rtype: int\n    \"\"\"\n    return 2 * r * (1 + 2 ** 0.5) ** 2\n\nif __name__ == \"__main__\":\n    print diameter(0, 0, 0)\n    print diameter(1, 1, 1)\n    print diameter(2, 3, 2)",
    "def diameter(circle):\n    \"\"\"\n    circle: a circle\n    returns: the diameter of the circle\n    \"\"\"\n\n    # calculate the circumference of the circle\n    circumference = circle.circumference\n\n    # calculate the diameter\n    diameter = circumference / 2\n\n    return diameter",
    "def diameter(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    # Use the following formula to calculate diameter\n    # d = 2*pi*r\n    # The formula is a bit confusing.\n    # The diameter of a circle is the square root of the radius.\n    # The diameter of a circle is the square root of the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the radius is the radius.\n    # The square root of the",
    "import math\n\ndef diameter(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.sqrt(radius*radius + radius*radius)\n\nif __name__ == '__main__':\n    print diameter(1)\n    print diameter(1.5)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x, y):\n        \"\"\"\n        :param x:\n        :param y:\n        :return:\n        \"\"\"\n        return 2 * max(x, y)\n\n\nif __name__ == \"__main__\":\n    Solution().diameter(1, 1)",
    "class Solution(object):\n    def diameterOfCircle(self, x, y, r):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        d = 2*r\n        while d*d < r:\n            d += 2*r\n        return d\n\n\ndef main():\n    s = Solution()\n    print s.diameterOfCircle(0, 0, 0)\n    print s.diameterOfCircle(0, 0, 1)\n    print s.diameterOfCircle(0, 0, 2)\n    print s.diameterOfCircle(0, 0, 3)\n    print s.diameterOfCircle(0, 0, 4)\n    print s.diameterOfCircle(0, 0, 5)\n    print s.diameterOfCircle(0, 0, 6)\n    print s.diameterOfCircle(0, 0, 7)\n    print s.diameterOfCircle(0, 0, 8)\n    print s.diameterOfCircle(0, 0, 9)\n    print s.diameterOfCircle(0, 0, 10)\n    print s.diameterOfCircle(0, 0, 100)\n    print s.diameterOfCircle(0, 0, 101)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n# Function to calculate the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Test cases\nprint(diameter(1))\nprint(diameter(2))\nprint(diameter(3))\nprint(diameter(4))\nprint(diameter(5))\nprint(diameter(6))\nprint(diameter(7))\nprint(diameter(8))\nprint(diameter(9))\nprint(diameter(10))\nprint(diameter(11))\nprint(diameter(12))\nprint(diameter(13))\nprint(diameter(14))\nprint(diameter(15))\nprint(diameter(16))\nprint(diameter(17))\nprint(diameter(18))\nprint(diameter(19))\nprint(diameter(20))\nprint(diameter(21))\nprint(diameter(22))\nprint(diameter(23))\nprint(diameter(24))\nprint(diameter(25))\nprint(diameter(26))\nprint(diameter(27))\nprint(diameter(28))\nprint(diameter(29))\nprint(diameter(30))\nprint(diameter(31))\nprint(diameter(32))\nprint(diameter(33))\nprint(diameter(34))\nprint(diameter(35))\nprint(diameter(36))\nprint(diameter(37))\nprint(diameter(38))\nprint(diameter(39))\nprint(diameter(40))\nprint(diameter(41))\nprint(diameter(42))\nprint(diameter(43))\nprint(diameter(44))\nprint(diameter(45))\nprint(diameter(46))\nprint(diameter(47))\nprint(diameter(48))\nprint(diameter(49))\nprint(diameter(50))\nprint(diameter(51))\nprint(diameter(52))\nprint(diameter(53))\nprint(diameter(54))\nprint(diameter(55))\nprint(diameter(56))\nprint(diameter(57))\nprint(diameter(58))\nprint(diameter(59))\nprint(diameter(60))",
    "class Solution:\n    # @param {int} x, y\n    # @return {int}\n    def diameter(self, x, y):\n        x = x ** 2 + y ** 2\n        return x ** 0.5\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.diameter(2, 3))",
    "def diameter(circ):\n    \"\"\"\n    Calculate the diameter of a circle.\n\n    :param circ: The radius of the circle.\n    :return: The diameter of the circle.\n    \"\"\"\n    return 2 * circ\n\nif __name__ == '__main__':\n    print(diameter(4))\n    print(diameter(5))\n    print(diameter(6))\n    print(diameter(7))\n    print(diameter(8))\n    print(diameter(9))\n    print(diameter(10))\n    print(diameter(11))\n    print(diameter(12))\n    print(diameter(13))\n    print(diameter(14))\n    print(diameter(15))\n    print(diameter(16))\n    print(diameter(17))\n    print(diameter(18))\n    print(diameter(19))\n    print(diameter(20))\n    print(diameter(21))\n    print(diameter(22))\n    print(diameter(23))\n    print(diameter(24))\n    print(diameter(25))\n    print(diameter(26))\n    print(diameter(27))\n    print(diameter(28))\n    print(diameter(29))\n    print(diameter(30))\n    print(diameter(31))\n    print(diameter(32))\n    print(diameter(33))\n    print(diameter(34))\n    print(diameter(35))\n    print(diameter(36))\n    print(diameter(37))\n    print(diameter(38))\n    print(diameter(39))\n    print(diameter(40))\n    print(diameter(41))\n    print(diameter(42))\n    print(diameter(43))\n    print(diameter(44))\n    print(diameter(45))\n    print(diameter(46))\n    print(diameter(47))\n    print(diameter(48))\n    print(diameter(49))\n    print(diameter(50))\n    print(diameter(51))\n    print(diameter(52))\n    print(diameter(",
    "#!/usr/bin/env python\n\nfrom math import sqrt\n\ndef diameter(x):\n    return 2 * sqrt(x**2 - x)\n\n\nif __name__ == \"__main__\":\n    n = int(raw_input())\n    for i in range(n):\n        x = int(raw_input())\n        print diameter(x)",
    "# Definition for a circle.\nclass Circle:\n    def __init__(self, x: float, y: float, r: float):\n        self.center = (x, y)\n        self.radius = r\n\n    def __repr__(self):\n        return \"Circle(%s, %s, %s)\" % (self.center, self.radius, self.radius)\n\n\nclass Solution:\n    def diameter(self, c: Circle) -> float:\n        # return 2*c.radius\n        return max(abs(c.center[0] - c.center[0]),\n                   abs(c.center[1] - c.center[1]))\n\nif __name__ == \"__main__\":\n    assert Solution().diameter(Circle(0, 0, 1)) == 2",
    "from math import sqrt\n\n\ndef diameter(radius):\n    \"\"\"\n    Find the diameter of a circle.\n\n    Arguments:\n        radius: A positive integer.\n    Returns:\n        A positive integer.\n    \"\"\"\n    return radius * 2\n\n\ndef test_diameter():\n    assert diameter(10) == 30\n    assert diameter(20) == 40\n\n\ndef test_diameter_2():\n    assert diameter(0) == 0\n    assert diameter(1) == 1\n\n\ndef test_diameter_3():\n    assert diameter(100) == 200",
    "class Solution(object):\n    \"\"\"\n    @param r: the radius of the circle\n    @return: the diameter of the circle\n    \"\"\"\n    def diameter(self, r):\n        \"\"\"\n        :type r: int\n        :rtype: int\n        \"\"\"\n        # \u53ef\u4ee5\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5355\u4f4d\u79ef\n        # \u53ea\u8981r\u53ef\u4ee5\u6c42\u548c\uff0c\u5373\u53ef\u4ee5\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5355\u4f4d\u79ef\n        # \u4f46\u662f\u8981\u6ce8\u610f\uff0c\u7b26\u53f7\u4e5f\u8981\u6ce8\u610f\n        # r\u7684\u7cbe\u5ea6\u8981\u66f4\u9ad8\uff0c\u5373\u53ef\u4ee5\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5206\uff0c\u53ef\u4ee5\u6c42\u548c\uff0c\u53ef\u4ee5\u6c42\u548c\n        # \u600e\u4e48\u6c42\u548c\uff0c\u5c31\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u66f4\u9ad8\u7684\u7cbe\u5ea6\n        # \u4f46\u662f\u53ef\u4ee5\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5206\uff0c\u53ef\u4ee5\u6c42\u548c\uff0c\u53ef\u4ee5\u6c42\u548c\n        # \u6c42\u548c\u7684\u7cbe\u5ea6\u8981\u66f4\u9ad8\n        # \u6211\u4eec\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5206\uff0c\u53ef\u4ee5\u6c42\u548c\uff0c\u53ef\u4ee5\u6c42\u548c\n        # \u53ef\u4ee5\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5206\uff0c\u53ef\u4ee5\u6c42\u548c\uff0c\u53ef\u4ee5\u6c42\u548c\n        # \u6c42\u548c\u7684\u7cbe\u5ea6\u8981\u66f4\u9ad8\n        # \u6211\u4eec\u628ar\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5206\uff0c\u53ef\u4ee5\u6c42\u548c\uff0c\u53ef\u4ee5\ufffd",
    "def diameter(radius):\n    \"\"\"\n    Find the diameter of a circle.\n\n    A circle is defined as a set of points.\n    A circle has radius r, if we place the center of the circle at the origin,\n    and all points are placed in the x-y plane, then the diameter of the circle\n    is 2r.\n    :param radius: the radius of the circle.\n    :return: the diameter of the circle.\n    \"\"\"\n    return 2 * radius\n\nif __name__ == '__main__':\n    assert diameter(1) == 2, 'radius should be 1'\n    assert diameter(2) == 4, 'radius should be 2'\n    assert diameter(3) == 6, 'radius should be 3'\n    assert diameter(4) == 8, 'radius should be 4'\n    assert diameter(5) == 10, 'radius should be 5'\n    assert diameter(6) == 12, 'radius should be 6'\n    assert diameter(7) == 14, 'radius should be 7'",
    "#!/usr/bin/python\n\ndef diameter(radius):\n    return radius ** 2\n\ndef main():\n    print diameter(5)\n\nif __name__ == '__main__':\n    main()",
    "def diameter(circle):\n    \"\"\"\n    :type circle: List[float]\n    :rtype: float\n    \"\"\"\n    x, y = circle[0], circle[1]\n    diameter = 0\n    for i in range(2, len(circle)):\n        dx, dy = circle[i] - x, circle[i] - y\n        diameter = max(diameter, abs(dx) + abs(dy))\n        x, y = circle[i]\n    return diameter",
    "import math\n\n\ndef diameter(n):\n    return 2 * math.sqrt(n)\n\n\nprint(diameter(100))",
    "class Solution:\n    # @param {integer} x\n    # @return {integer}\n    def diameter(self, x):\n        if x < 1:\n            return 0\n        r = x / 2\n        while True:\n            if r * r == x:\n                return r\n            if r * r > x:\n                return 2 * r\n            r += 1",
    "class Solution:\n    # @param {float} x\n    # @return {float}\n    def diameter(self, x):\n        \"\"\"\n        :type x: float\n        :rtype: float\n        \"\"\"\n        if x <= 0:\n            return 0\n        if x == 1:\n            return 2\n        if x == 2:\n            return 4\n        if x == 3:\n            return 8\n        if x == 4:\n            return 16\n        if x == 5:\n            return 32\n        if x == 6:\n            return 64\n        if x == 7:\n            return 128\n        if x == 8:\n            return 256\n        if x == 9:\n            return 512\n        if x == 10:\n            return 1024\n        if x == 11:\n            return 2048\n        if x == 12:\n            return 4096\n        if x == 13:\n            return 8192\n        if x == 14:\n            return 16384\n        if x == 15:\n            return 32768\n        if x == 16:\n            return 65536\n        if x == 17:\n            return 131072\n        if x == 18:\n            return 262144\n        if x == 19:\n            return 524288\n        if x == 20:\n            return 1048576\n        if x == 21:\n            return 2097152\n        if x == 22:\n            return 4194304\n        if x == 23:\n            return 8388608\n        if x == 24:\n            return 16777216\n        if x == 25:\n            return 33554432\n        if x == 26:\n            return 67108864\n        if x == 27:\n            return 134217728\n        if x == 28:\n            return 268435456\n        if x == 29:\n            return 536870912\n        if x == 30:\n            return 1073741824\n        if x == 31:\n            return 2147483648\n        if x == 32:\n            return 4294967296\n        if x == 33:\n            return 8589934592\n        if x == 34:\n            return 17179869184\n        if x == 35:\n            return 34359738368\n        if x == 36:",
    "def diameter(r):\n    return 2 * r ** 2\n\n# test cases\nr = 4\nprint(diameter(r))\nr = 3\nprint(diameter(r))\nr = 5\nprint(diameter(r))\nr = 8\nprint(diameter(r))\nr = 10\nprint(diameter(r))\nr = 15\nprint(diameter(r))\nr = 20\nprint(diameter(r))",
    "def diameter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 * n * (n + 1) / 2\n\nif __name__ == '__main__':\n    assert diameter(5) == 10\n    assert diameter(7) == 14\n    assert diameter(12) == 20\n    assert diameter(101) == 200\n    assert diameter(100) == 200\n    assert diameter(101) == 200\n    assert diameter(101) == 200\n    assert diameter(101) == 200",
    "class Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        return 2*x",
    "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @param {integer} r\n    # @return {integer}\n    def diameter(self, x, y, r):\n        # write your code here\n        ans = 0\n        while x >= r:\n            ans += x\n            x -= r\n        while y >= r:\n            ans += y\n            y -= r\n        while x < r:\n            ans += r - x\n            x += r\n        while y < r:\n            ans += r - y\n            y += r\n        return ans",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n\n        cnt = 0\n        while x > 0:\n            x = x - (x >> 1)\n            cnt += 1\n\n        return 2 * cnt\n\n\nif __name__ == \"__main__\":\n    import sys\n    s = Solution()\n    inp = sys.stdin.read()\n    x = int(inp)\n    print s.diameter(x)",
    "class Solution(object):\n    def diameterOfCircle(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return 2 * (x ** 2 + y ** 2 + z ** 2) ** 0.5",
    "from math import sqrt\n\n# https://github.com/SebastianL/DailyProgrammingChallenges/blob/master/challenge-01.py\n\ndef diameter(radius):\n    \"\"\"\n    Find the diameter of a circle with the given radius.\n\n    :param radius: The radius of the circle.\n    :return: The diameter of the circle.\n    \"\"\"\n    return 2 * radius\n\n# https://www.hackerearth.com/problem/algorithm/circle-diameter/\n\ndef diameter(radius):\n    \"\"\"\n    Find the diameter of a circle with the given radius.\n\n    :param radius: The radius of the circle.\n    :return: The diameter of the circle.\n    \"\"\"\n    if radius == 0:\n        return 0\n    return 2 * sqrt(radius * radius - (radius - 1) * (radius - 1))",
    "# Definition for a point.\n# class Point(object):\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution(object):\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        def get_dist(a, b):\n            return math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\n\n        diam = 0\n        for a, b in itertools.combinations(points, 2):\n            diam = max(get_dist(a, b), diam)\n        return diam",
    "# TODO:\n# (1) find diameter of circle by using the radius of the circle to find diameter\n# (2) find diameter of circle by using the area of circle to find diameter\n# (3) find diameter of circle by using the area of circle to find diameter\n# (4) find diameter of circle by using the area of circle to find diameter\n\n# (1)\n# dia = 2*(r*r)\n# where r is radius of circle\n# (2)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n# (3)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n# (4)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n\n# Example:\n# Input:\n# r = 5\n# a = 4\n# b = 3\n# Output:\n# 6\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n\n# TODO:\n# (1)\n# dia = 2*(r*r)\n# where r is radius of circle\n# (2)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n# (3)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n# (4)\n# dia = 2*(a*b)\n# where a is area of circle and b is area of circle\n\n# Example:\n# r = 5\n# a = 4\n# b = 3\n# Output:\n# 6\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n# dia = 2*(a*b)\n\n# TODO:\n# (1)\n# dia = 2*(r*r)\n# where r is radius of circle\n# (2)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {integer}\n    def diameter(self, points):\n        if not points or len(points) < 2:\n            return 0\n        left_most_point = points[0]\n        right_most_point = points[0]\n        for point in points:\n            if point.x < left_most_point.x:\n                left_most_point = point\n            if point.x > right_most_point.x:\n                right_most_point = point\n        x_diff = right_most_point.x - left_most_point.x\n        y_diff = right_most_point.y - left_most_point.y\n        return x_diff + y_diff",
    "def diameter(circ):\n    # Write your code here\n    x=0\n    y=0\n    for i in circ:\n        x+=i[0]\n        y+=i[1]\n    return(x*x+y*y)**0.5\n\n# Test case\ncirc=[[1,2],[3,4],[5,6],[7,8],[9,10]]\nprint(diameter(circ))",
    "import math\n\n\nclass Solution(object):\n    \"\"\"\n    @param center: A tuple of floats (x, y) representing the center of the circle\n    @param r: The radius of the circle\n    @return: The diameter of the circle\n    \"\"\"\n    def diameter(self, center, r):\n        \"\"\"\n        :type center: tuple\n        :type r: float\n        :rtype: float\n        \"\"\"\n        return 2 * r\n\n    def diameter1(self, center, r):\n        \"\"\"\n        :type center: tuple\n        :type r: float\n        :rtype: float\n        \"\"\"\n        x = center[0]\n        y = center[1]\n        return math.sqrt((x - r) ** 2 + (y - r) ** 2)\n\n\nif __name__ == \"__main__\":\n    assert Solution().diameter(\n        (1, 1), 2) == 2, \"Test case 1 failed\"\n    assert Solution().diameter(\n        (-1, -1), 2) == 2, \"Test case 2 failed\"\n    assert Solution().diameter(\n        (0, 0), 2) == 2, \"Test case 3 failed\"\n    assert Solution().diameter(\n        (1, 1), 1) == 1, \"Test case 4 failed\"\n    assert Solution().diameter(\n        (0, 0), 0) == 0, \"Test case 5 failed\"\n    assert Solution().diameter(\n        (1, 1), 1.1) == 2, \"Test case 6 failed\"\n    assert Solution().diameter(\n        (0, 0), -1) == 2, \"Test case 7 failed\"",
    "class Solution(object):\n    \"\"\"\n    @param args: a list of lists of int\n    @return: an integer\n    \"\"\"\n    def diameter(self, args):\n        \"\"\"\n        :type args: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(args) == 0:\n            return 0\n        if len(args) == 1:\n            return max(args[0]) * 2\n        if len(args) == 2:\n            return max(args[0]) + max(args[1])\n        if len(args) == 3:\n            return max(args[0]) + max(args[1]) + max(args[2])\n        if len(args) == 4:\n            return max(args[0]) + max(args[1]) + max(args[2]) + max(args[3])\n        if len(args) == 5:\n            return max(args[0]) + max(args[1]) + max(args[2]) + max(args[3]) + max(args[4])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.diameter([[1,2],[3,4]]))\n    print(s.diameter([[1,2],[3,4],[5,6]]))\n    print(s.diameter([[1,2],[3,4],[5,6],[7,8]]))\n    print(s.diameter([[1,2],[3,4],[5,6],[7,8],[9,10]]))",
    "def diameter(circle):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    Input: A circle represented by a list of points.\n    Output: The diameter of the circle.\n    \"\"\"\n    sum_x = 0\n    sum_y = 0\n    for point in circle:\n        sum_x += point[0]\n        sum_y += point[1]\n    diameter = sqrt((sum_x ** 2 + sum_y ** 2) / 2)\n    return diameter\n\nif __name__ == \"__main__\":\n    circle = [[1, 2], [2, 3], [3, 1], [4, 4]]\n    print(diameter(circle))",
    "import math\n\n\ndef diameter(radius):\n    return math.sqrt(radius * radius)\n\n\ndef main():\n    print(diameter(2.5))\n    print(diameter(3.5))\n    print(diameter(4.5))\n    print(diameter(5.5))\n    print(diameter(6.5))\n    print(diameter(7.5))\n    print(diameter(8.5))\n    print(diameter(9.5))\n    print(diameter(10.5))\n    print(diameter(11.5))\n    print(diameter(12.5))\n\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"Point(%s, %s)\" % (self.x, self.y)\n\nclass Solution:\n    # @param point, a list of Point\n    # @return an integer\n    def diameter(self, point):\n        if len(point) < 2:\n            return 0\n        min_x = min(point, key=lambda p: p.x)\n        max_x = max(point, key=lambda p: p.x)\n        min_y = min(point, key=lambda p: p.y)\n        max_y = max(point, key=lambda p: p.y)\n        return max(abs(max_x - min_x), abs(max_y - min_y))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    point = [Point(1, 1), Point(2, 2), Point(3, 3)]\n    print s.diameter(point)",
    "def diameter(x):\n    return 2 * x\n\n\nif __name__ == '__main__':\n    assert diameter(1) == 2\n    assert diameter(2) == 4\n    assert diameter(3) == 6\n    assert diameter(4) == 8\n    assert diameter(5) == 10\n    assert diameter(6) == 12\n    assert diameter(7) == 14\n    assert diameter(8) == 16\n    assert diameter(9) == 18\n    assert diameter(10) == 20\n    assert diameter(11) == 22\n    assert diameter(12) == 24\n    assert diameter(13) == 26\n    assert diameter(14) == 28\n    assert diameter(15) == 30\n    assert diameter(16) == 32\n    assert diameter(17) == 34\n    assert diameter(18) == 36\n    assert diameter(19) == 38\n    assert diameter(20) == 40\n    assert diameter(21) == 42\n    assert diameter(22) == 44\n    assert diameter(23) == 46\n    assert diameter(24) == 48\n    assert diameter(25) == 50\n    assert diameter(26) == 52\n    assert diameter(27) == 54\n    assert diameter(28) == 56\n    assert diameter(29) == 58\n    assert diameter(30) == 60\n    assert diameter(31) == 62\n    assert diameter(32) == 64\n    assert diameter(33) == 66\n    assert diameter(34) == 68\n    assert diameter(35) == 70\n    assert diameter(36) == 72\n    assert diameter(37) == 74\n    assert diameter(38) == 76\n    assert diameter(39) == 78\n    assert diameter(40) == 80\n    assert diameter(41) == 82\n    assert diameter(42) == 84\n    assert diameter(43) == 86\n    assert diameter(44) == 88\n    assert diameter(45) == 90\n    assert diameter(46) == 92\n    assert diameter(47) == 94\n    assert diameter(48) == 96\n    assert diameter(49) == 98\n    assert diameter(50) == 100\n    assert diameter(51) == 102\n    assert diameter(52) == 104\n    assert diameter(53) == 106\n    assert diameter(54) == 108",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n# Your Circle object will be instantiated and called as such:\n# obj = Circle(Point(4, 5))\n# param_1 = obj.diameter\n# param_2 = obj.area\n\nclass Circle:\n    def __init__(self, p):\n        self.p = p\n\n    def __str__(self):\n        return 'Circle of radius {} at ({}, {})'.format(self.r, self.p.x, self.p.y)\n\n    @property\n    def diameter(self):\n        return 2 * self.r\n\n    @property\n    def area(self):\n        return self.r ** 2 * 3.1415926\n\n    @property\n    def r(self):\n        return self.p.distance(Point(0, 0))\n\nif __name__ == '__main__':\n    c = Circle(Point(1, 2))\n    print(c)\n    print(c.diameter)\n    print(c.area)",
    "import math\n\ndef diameter(radius):\n    return math.pi * radius * radius\n\nprint diameter(100)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        x = min(x)\n        return 2 * (x + 1)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.diameter(8)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, r, n):\n        \"\"\"\n        :param r: radius of circle\n        :param n: number of points\n        :return: the diameter of the circle\n        \"\"\"\n        # n = len(points)\n        # px, py = points[0], points[1]\n        # for i in range(2, n):\n        #     px, py = points[i]\n        #     r = min(r, math.hypot(px-px0, py-py0))\n        # return r\n\n        def dfs(r, i):\n            if i == n:\n                return r\n            px, py = points[i]\n            for j in range(i+1, n):\n                if r >= dfs(r, j):\n                    continue\n                px, py = points[j]\n                r = min(r, math.hypot(px-px0, py-py0))\n            return r\n\n        r, n = r, n\n        points = [(-1, -1)]\n        px0, py0 = 0, 0\n        for i in range(1, n):\n            px, py = points[i]\n            points.append((px+px0, py+py0))\n        return dfs(r, 0)\n\n\nif __name__ == \"__main__\":\n    r, n = 2, 3\n    print Solution().diameter(r, n)",
    "def diameter(radius):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n\n    The input is a positive integer representing the radius of the circle.\n    You may assume that the circle does not have any hole inside.\n    \"\"\"\n    return 2 * radius\n\nif __name__ == '__main__':\n    assert diameter(1) == 2, 'circle diameter should be 2'\n    assert diameter(2) == 4, 'circle diameter should be 4'\n    assert diameter(3) == 6, 'circle diameter should be 6'",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        points.sort(key=lambda x: (x.x, x.y))\n        minx = maxx = points[0].x\n        miny = maxy = points[0].y\n        for p in points[1:]:\n            if p.x < minx: minx = p.x\n            if p.x > maxx: maxx = p.x\n            if p.y < miny: miny = p.y\n            if p.y > maxy: maxy = p.y\n        return max(max(max(max(minx-maxx, miny-maxy), maxx-minx), maxy-miny)), min(minx-maxx, miny-maxy), min(minx-maxx, miny-maxy)\n\nif __name__ == \"__main__\":\n    points = [Point(1, 2), Point(2, 3), Point(1, 1), Point(2, 2), Point(2, 1), Point(3, 2)]\n    print(Solution().diameter(points))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    # @param {Point} p1\n    # @param {Point} p2\n    # @param {Point} p3\n    # @return {integer}\n    def diameter(self, p1, p2, p3):\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n        dx = x1 - x2\n        dy = y1 - y2\n        cx = x2 - x3\n        cy = y2 - y3\n        a = (dx * dx + dy * dy) * 0.5\n        b = (cx * cx + cy * cy) * 0.5\n        c = (dx * cx + dy * cy) * 0.5\n        return math.sqrt(a + b + c)",
    "# https://www.hackerrank.com/challenges/diameter-of-a-circle/problem\n\nimport math\n\ndef diameter(x, y):\n    return math.sqrt((x**2) + (y**2))\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        x, y = map(int, input().split())\n        print(diameter(x, y))",
    "import math\n\ndef diameter(n):\n    return 2*math.sqrt(3)*n\n\nif __name__ == \"__main__\":\n    print diameter(100)",
    "def diameter(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    def diameter(radius):\n        return 2 * radius * (1 + math.sqrt(1 + 8 * radius))\n\n    return diameter(radius)",
    "#!/usr/bin/env python\n\nfrom math import sqrt\n\n\ndef diameter(radius):\n    \"\"\"\n    Find the diameter of a circle with radius = radius.\n\n    Input:\n    radius - the radius of a circle\n    Output:\n    diameter - the diameter of the circle\n    \"\"\"\n    return 2 * radius\n\n\ndef main():\n    \"\"\"\n    Main function to run the tests.\n    \"\"\"\n    assert diameter(1) == 2\n    assert diameter(2) == 4\n    assert diameter(3) == 6\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef diameter(r):\n    \"\"\"\n    :type r: float\n    :rtype: float\n    \"\"\"\n    return r * 2\n\n\ndef test_diameter():\n    assert diameter(4.0) == 8.0\n    assert diameter(5.0) == 10.0\n    assert diameter(6.0) == 12.0\n    assert diameter(7.0) == 14.0\n    assert diameter(8.0) == 16.0\n    assert diameter(9.0) == 18.0\n    assert diameter(10.0) == 20.0\n    assert diameter(11.0) == 22.0\n    assert diameter(12.0) == 24.0\n    assert diameter(13.0) == 26.0\n    assert diameter(14.0) == 28.0\n    assert diameter(15.0) == 30.0\n    assert diameter(16.0) == 32.0\n    assert diameter(17.0) == 34.0\n    assert diameter(18.0) == 36.0\n    assert diameter(19.0) == 38.0\n    assert diameter(20.0) == 40.0\n    assert diameter(21.0) == 42.0\n    assert diameter(22.0) == 44.0\n    assert diameter(23.0) == 46.0\n    assert diameter(24.0) == 48.0\n    assert diameter(25.0) == 50.0\n    assert diameter(26.0) == 52.0\n    assert diameter(27.0) == 54.0\n    assert diameter(28.0) == 56.0\n    assert diameter(29.0) == 58.0\n    assert diameter(30.0) == 60.0\n    assert diameter(31.0) == 62.0\n    assert diameter(32.0) == 64.0\n    assert diameter(33.0) == 66.0\n    assert diameter(34.0) == 68.0\n    assert diameter(35.0) == 70.0\n    assert diameter(36.0) == 72.0\n    assert diameter(37.0) == 74.0\n    assert diameter(38.0) == 76.0\n    assert diameter(39.0) == 78.0",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diameter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x <= 0:\n            return 0\n\n        x = abs(x)\n        # TODO: figure out how to get the diameter of circle\n        # 2 * x * (2 * x + 1)\n        # return 2 * x * (2 * x + 1)\n        return 2 * x * (x + 1)\n\n\nif __name__ == \"__main__\":\n    print Solution().diameter(10)",
    "from math import sqrt\n\ndef diameter(n):\n    return 2 * sqrt(n)\n\nif __name__ == '__main__':\n    assert diameter(1) == 1\n    assert diameter(4) == 4\n    assert diameter(100) == 100\n    assert diameter(1000) == 1000\n    assert diameter(10000) == 10000\n    assert diameter(100000) == 100000\n    assert diameter(1000000) == 1000000\n    assert diameter(1000000000) == 100000000\n    assert diameter(10000000000) == 1000000000\n    assert diameter(100000000000) == 10000000000\n    assert diameter(1000000000000) == 100000000000\n    assert diameter(10000000000000) == 1000000000000\n    assert diameter(100000000000000) == 10000000000000\n    assert diameter(1000000000000000) == 1000000000000000",
    "import math\n\ndef diameter(radius):\n    return math.pi * radius ** 2\n\ndef main():\n    print diameter(10)\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n    def __repr__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\nclass Solution:\n    def diameter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        # If there is only one point, the diameter is the distance between\n        # the two points.\n        if len(points) == 1:\n            return abs(points[0].x - points[0].y)\n        # The diameter of the circle is the maximum distance between two\n        # points.\n        diameter = 0\n        # For each point in points, we need to calculate the distance between\n        # the first and second point.\n        for p in points:\n            x1, y1 = points[0]\n            x2, y2 = p\n            diameter = max(diameter, abs(x1 - x2) + abs(y1 - y2))\n        return diameter",
    "from math import sqrt\n\ndef diameter(r):\n    return 2 * r\n\ndef main():\n    print diameter(5)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius * radius\n\n# Returns the circumference of a circle\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Returns the radius of a circle\ndef radius(diameter):\n    return diameter / 2\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius * radius\n\n# Returns the circumference of a circle\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Returns the radius of a circle\ndef radius(diameter):\n    return diameter / 2\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius * radius\n\n# Returns the circumference of a circle\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Returns the radius of a circle\ndef radius(diameter):\n    return diameter / 2\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius * radius\n\n# Returns the circumference of a circle\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Returns the radius of a circle\ndef radius(diameter):\n    return diameter / 2\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius * radius\n\n# Returns the circumference of a circle\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Returns the radius of a circle\ndef radius(diameter):\n    return diameter / 2\n\n# Returns the diameter of a circle\ndef diameter(radius):\n    return 2 * radius\n\n# Returns the area of a circle\ndef area(radius):\n    return math.pi * radius",
    "import math\n\ndef diameter(r):\n    return 2 * r * math.sqrt(1 + 4 * r * r)\n\nif __name__ == \"__main__\":\n    print(diameter(1))\n    print(diameter(2))\n    print(diameter(3))\n    print(diameter(4))\n    print(diameter(5))\n    print(diameter(6))\n    print(diameter(7))\n    print(diameter(8))\n    print(diameter(9))\n    print(diameter(10))\n    print(diameter(11))\n    print(diameter(12))\n    print(diameter(13))\n    print(diameter(14))\n    print(diameter(15))\n    print(diameter(16))\n    print(diameter(17))\n    print(diameter(18))\n    print(diameter(19))\n    print(diameter(20))\n    print(diameter(21))\n    print(diameter(22))\n    print(diameter(23))\n    print(diameter(24))\n    print(diameter(25))\n    print(diameter(26))\n    print(diameter(27))\n    print(diameter(28))\n    print(diameter(29))\n    print(diameter(30))\n    print(diameter(31))\n    print(diameter(32))\n    print(diameter(33))\n    print(diameter(34))\n    print(diameter(35))\n    print(diameter(36))\n    print(diameter(37))\n    print(diameter(38))\n    print(diameter(39))\n    print(diameter(40))\n    print(diameter(41))\n    print(diameter(42))\n    print(diameter(43))\n    print(diameter(44))\n    print(diameter(45))\n    print(diameter(46))\n    print(diameter(47))\n    print(diameter(48))\n    print(diameter(49))\n    print(diameter(50))\n    print(diameter(51))\n    print(diameter(52))",
    "import math\n\ndef diameter(radius):\n    \"\"\"\n    Returns the diameter of a circle of radius `radius`.\n    \"\"\"\n    return radius * 2\n\ndef main():\n    \"\"\"\n    Unit tests for diameter function.\n    \"\"\"\n    assert diameter(1) == 2\n    assert diameter(2) == 4\n    assert diameter(3) == 6\n    assert diameter(4) == 8\n    assert diameter(5) == 10\n    assert diameter(6) == 12\n    assert diameter(7) == 14\n    assert diameter(8) == 16\n    assert diameter(9) == 18\n    assert diameter(10) == 20\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'Libao Jin'\n__date__ = 'December 6, 2015'\n\nclass Solution(object):\n    \"\"\"\n    @param x,y: coordinates of the center of the circle\n    @param r: radius of the circle\n    @return: the diameter of the circle\n    \"\"\"\n    def diameter(self, x, y, r):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        d = 2 * r\n        delta_x = x - r\n        delta_y = y - r\n        if delta_x >= 0 and delta_y >= 0:\n            d = min(d, delta_x + delta_y)\n        elif delta_x < 0 and delta_y >= 0:\n            d = min(d, delta_y + delta_x)\n        elif delta_x >= 0 and delta_y < 0:\n            d = min(d, delta_x + delta_y)\n        elif delta_x < 0 and delta_y < 0:\n            d = min(d, delta_x + delta_y)\n        return d\n\n\nif __name__ == '__main__':\n    s = Solution()\n    x, y, r = 1, 2, 3\n    print s.diameter(x, y, r)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass Solution:\n    def diameterOfCircle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points or len(points) < 2:\n            return 0\n        x = max(points, key=lambda p: p.x)\n        y = min(points, key=lambda p: p.y)\n        x_min = min(points, key=lambda p: p.x)\n        y_max = max(points, key=lambda p: p.y)\n        x_max = max(points, key=lambda p: p.x)\n        x_min_d = x - x_min\n        y_max_d = y - y_max\n        return max(x_min_d + y_max_d, x_max_d + y_max_d, x_min_d + y_max_d, x_max_d + y_min_d)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}