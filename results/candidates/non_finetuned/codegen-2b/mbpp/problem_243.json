{
  "problem": {
    "task_id": "MBPP/254",
    "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
    "test_list": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ],
    "challenge_test_list": [],
    "problem_id": 243
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://www.hackerrank.com/challenges/words-with-a-or-e\n# time complexity: O(n)\n\ndef words_with_a_or_e(string):\n    words = []\n    for c in string:\n        if c.isalpha():\n            if c.lower() == 'a':\n                words.append(c)\n            elif c.lower() == 'e':\n                words.append(c)\n    return words\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(words_with_a_or_e(string))",
    "from collections import defaultdict\n\ndef find_words(string):\n    words = set()\n    for c in string:\n        if c in ['a', 'e']:\n            words.add(c)\n    return words\n\nif __name__ == '__main__':\n    string = 'this is a test'\n    words = find_words(string)\n    print(words)",
    "import re\n\nwords = []\n\ndef find_words(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    # TODO: write code\n    return words\n\nif __name__ == '__main__':\n    string = 'abcde'\n    words = find_words(string)\n    print words",
    "def words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [w for w in s if w.startswith('a') or w.startswith('e')]",
    "import re\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef palindrome_words(s):\n    return re.findall(r'\\b(a|e)\\b', s)\n\ndef main():\n    print(palindrome_words('aabbccddeeff'))\n\nif __name__ == '__main__':\n    main()",
    "def find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\nif __name__ == \"__main__\":\n    string = \"abcde\"\n    print(find_words(string))",
    "# Use a dict to store all the words\nwords = set()\n\n# Helper function to check whether a word is in the dict\ndef is_word(word):\n    return word in words\n\n# For each character in the string, add a word to the dict\nfor c in s:\n    if c.isalpha():\n        if c.lower() == 'e':\n            words.add('end')\n        else:\n            words.add(c)\n\n# Print the words\nprint('\\n'.join(words))",
    "def words_with_initial(str):\n    words = []\n    for i in range(len(str)):\n        if str[i] in 'ae':\n            words.append(str[:i+1])\n    return words\n\ndef main():\n    string = 'Hello, my name is Ephraim. I am an engineer working on'\\\n             'the Web API of the company.'\n    print(words_with_initial(string))\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef words_with_a_or_e(string):\n    words = set()\n    for word in re.findall(r'[ae]', string):\n        words.add(word)\n    return words\n\nif __name__ == '__main__':\n    print words_with_a_or_e('abc')",
    "def words(s):\n    # base case\n    if s == '':\n        return []\n    # recursive case\n    if s[0] in ['a', 'e']:\n        return words(s[1:]) + [s]\n    else:\n        return []\n\n# print(words('abcde'))\n# print(words('abcde'))\n# print(words('abcde'))\nprint(words('abcde'))",
    "def get_words(string):\n    words = []\n    for i in string:\n        if i in 'ae':\n            words.append(i)\n    return words\n\ndef main():\n    print(get_words(\"aee\"))\n\nif __name__ == '__main__':\n    main()",
    "def is_a_word(word):\n    return (word[0] in 'aeiou') and (word[1] in 'aeiou')\n\ndef a_words(text):\n    return [word for word in text.split(' ') if is_a_word(word)]\n\nif __name__ == '__main__':\n    text = \"a ae aea ai ao aou ay\"\n    print(a_words(text))",
    "class Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i, c in enumerate(s):\n            if c == 'a' or c == 'e':\n                res.append(s[:i])\n        return res",
    "# https://www.hackerrank.com/challenges/words-in-a-string/problem\n\ndef is_a_word(s):\n    return s[0] == 'a' or s[0] == 'e'\n\ndef words_in_a_string(s):\n    result = []\n    for c in s:\n        if c == 'a' or c == 'e':\n            result.append(c)\n    return result\n\nif __name__ == '__main__':\n    s = input()\n    words = words_in_a_string(s)\n    for word in words:\n        print(word)",
    "import re\n\nwords = []\n\ndef find_words(string):\n    for word in re.findall('[aeiou]+', string):\n        if word not in words:\n            words.append(word)\n\nfind_words(\"We can expect a number of ways to write a number\")\nprint(words)\n\n# Find all words starting with 'a' or 'e' in a given string\n# words = []\n# for word in re.findall('[aeiou]+', string):\n#     if word not in words:\n#         words.append(word)\n# print(words)\n\n\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\n\nimport re\n\ndef find_words(string):\n    for word in re.findall('[aeiou]+', string):\n        if word not in words:\n            words.append(word)\n\nfind_words(\"We can expect a number of ways to write a number\")\nprint(words)\n\n\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\n\nimport re\n\ndef find_words(string):\n    for word in re.findall('[aeiou]+', string):\n        if word not in words:\n            words.append(word)\n\nfind_words(\"We can expect a number of ways to write a number\")\nprint(words)",
    "import re\n\ndef all_words_with_prefix(string):\n    words = []\n    for word in re.findall(r'(?<=\\w)[ae]', string):\n        if word not in words:\n            words.append(word)\n    return words\n\n\nif __name__ == \"__main__\":\n    string = \"aabcae\"\n    words = all_words_with_prefix(string)\n    print(words)",
    "from collections import Counter\n\nwords = [\"a\", \"apple\", \"apple\", \"appe\", \"apple\", \"apple\", \"appel\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\",",
    "import re\n\ndef find_words(word):\n    \"\"\"\n    :type word: str\n    :rtype: List[str]\n    \"\"\"\n    pattern = re.compile('(?i)(?:^|(?:[^aeiou]|[aeiou]))(a|e)(?=[^aeiou])')\n    return [m.group(0) for m in pattern.finditer(word)]",
    "import string\n\ndef find_words(string):\n    words = set()\n    for char in string:\n        if char in string or char.lower() in string or char.upper() in string:\n            words.add(char)\n    return words\n\ndef main():\n    string = \"The quick brown fox jumped over the lazy dog.\"\n    words = find_words(string)\n    print(words)\n    return\n\nif __name__ == '__main__':\n    main()",
    "def words(s):\n    \"\"\"\n    >>> words(\"hehehehe\")\n    ['hehehehe', 'hehehehe']\n    >>> words(\"\")\n    []\n    >>> words(\"abc\")\n    ['abc']\n    >>> words(\"abcd\")\n    ['abcd']\n    >>> words(\"abcdabc\")\n    ['abcdabc']\n    >>> words(\"abcdabcde\")\n    ['abcdabcde']\n    >>> words(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabc",
    "def find_words(string):\n    words = []\n    for char in string:\n        if char in 'ae':\n            words.append(char)\n    return words\n\nif __name__ == '__main__':\n    string = 'abcdefghijklmnopqrstuvwxyz'\n    words = find_words(string)\n    print(words)",
    "def find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] in 'ae':\n            if string[i] == 'a':\n                words.append(string[:i])\n            else:\n                words.append(string[:i])\n    return words\n\nprint(find_words(\"abcd\"))",
    "def find_words(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] in ['a','e']:\n            words.append(s[i:i+2])\n    return words\n\nif __name__ == \"__main__\":\n    s = \"aae\"\n    print(find_words(s))\n    s = \"aeae\"\n    print(find_words(s))\n    s = \"aee\"\n    print(find_words(s))\n    s = \"eee\"\n    print(find_words(s))",
    "def find_words(s):\n    words = []\n    for c in s:\n        if c.lower() in 'ae':\n            words.append(c)\n    return words\n\nif __name__ == '__main__':\n    test_cases = [\n        ('ae', ['ae', 'e']),\n        ('aee', ['ae', 'e', 'ee']),\n        ('aeiou', ['ae', 'ei', 'ou', 'iou', 'oui', 'iou', 'ouiou', 'ioue', 'oue', 'ouei', 'oei', 'oe', 'eie', 'ie']),\n        ('aeiouaeiouaeiou', ['ae', 'aeiou', 'aeiouaeiou', 'aeiouaeiouaeiou'])\n    ]\n    for test_case in test_cases:\n        print '\\nTest case:', test_case\n        result = find_words(test_case[0])\n        print 'Result:', result\n        assert result == test_case[1]",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def findWords(self, words: List[str], word: str) -> List[str]:\n        # words is a list of words that are in the string\n        # word is the word to find\n        # return the list of words starting with word\n        if not word:\n            return []\n        if word[0] == 'a':\n            return [word]\n        # if word[0] == 'e':\n        #     return [word]\n        # words = [w for w in words if w[0]!= word[0]]\n        # return [w for w in words if w[0]!= word[0]]\n        words = [w for w in words if w[0]!= word[0]]\n        return [w for w in words if w[0]!= word[0]]\n\nif __name__ == '__main__':\n    sol = Solution()\n    # words = ['a', 'b', 'c', 'd', 'e', 'f']\n    # word = 'a'\n    # print(sol.findWords(words, word))\n    words = ['a', 'e', 'e', 'a', 'e', 'e', 'a', 'e', 'a']\n    word = 'e'\n    print(sol.findWords(words, word))\n    word = 'e'\n    print(sol.findWords(words, word))\n    word = 'a'\n    print(sol.findWords(words, word))\n    word = 'a'\n    print(sol.findWords(words, word))\n    word = 'e'\n    print(sol.findWords(words, word))\n    word = 'e'\n    print(sol.findWords(words, word))\n    word = 'a'\n    print(sol.findWords(words, word))\n    word = 'e'\n    print(sol.findWords(words, word))\n    word = 'e'\n    print(sol.findWords(words, word))",
    "def find_words(string):\n    words = []\n    for word in string:\n        if word == 'a' or word == 'e':\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    string = 'abaeaeaeae'\n    words = find_words(string)\n    print(words)",
    "import re\n\nwords = set()\n\ndef find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words.clear()\n    for word in s.split():\n        if re.match(r'^a*$', word) or re.match(r'^e*$', word):\n            words.add(word)\n    return list(words)\n\nif __name__ == '__main__':\n    s = 'abcdefg'\n    print(find_words(s))",
    "#!/bin/python\n\ndef find_words(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] in ['a','e']:\n            if i == 0 or s[i-1] not in ['a','e']:\n                words.append(s[i:])\n    return words\n\nprint find_words('aae')",
    "def words(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            if string[i] == 'a':\n                words.append('apple')\n            if string[i] == 'e':\n                words.append('elephant')\n    return words\n\n\nif __name__ == '__main__':\n    string = 'abcedfghijklmnopqrstuvwxyz'\n    words = words(string)\n    print(words)",
    "import re\n\n\ndef is_vowel(ch):\n    return ch in \"aeiou\"\n\n\ndef is_consonant(ch):\n    return ch.lower() in \"bcdfghjklmnpqrstvwxyz\"\n\n\ndef find_words(text):\n    regex = r\"^[aeiou]*$\"\n    return [word for word in re.findall(regex, text) if is_vowel(word[0]) or is_consonant(word[0])]\n\n\ndef test_find_words():\n    assert find_words(\"\") == []\n    assert find_words(\"abcde\") == [\"abcde\"]\n    assert find_words(\"abcdeefghijklmnopqrstuvwxyz\") == [\"abcdeefghijklmnopqrstuvwxyz\"]\n\n\nif __name__ == \"__main__\":\n    test_find_words()",
    "def find_words(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in string.split():\n        if word[0] in 'ae':\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    string = \"abcae\"\n    print(find_words(string))\n    string = \"abcdee\"\n    print(find_words(string))",
    "def find_all_a_or_e(string):\n    return [word for word in string.lower().split() if word.startswith('a') or word.startswith('e')]",
    "def find_words(s):\n    return [w for w in s.split() if w.startswith('a') or w.startswith('e')]\n\nif __name__ == '__main__':\n    s = 'babble ae'\n    print find_words(s)",
    "def get_words(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] in \"ae\":\n            words.append(s[i:])\n    return words\n\ndef get_words_rec(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            words.append(s[i:])\n            words.extend(get_words_rec(s[:i]))\n    return words\n\nif __name__ == \"__main__\":\n    s = \"ae\"\n    words = get_words(s)\n    print(words)\n    words = get_words_rec(s)\n    print(words)",
    "# Definition for a word:\n#   word = a single character\n#   word.length == 1\n#   word.isalpha()\nclass Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        for word in words:\n            if word[0] == 'a' or word[0] == 'e':\n                ret.append(word)\n        return ret\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findWords([\"leetcode\"])",
    "# Definition for a word.\nclass Word:\n    def __init__(self, word):\n        self.word = word\n        self.index = -1\n\nclass Solution:\n    def isAlpha(self, ch):\n        return ch in 'aeiou'\n\n    def isDigit(self, ch):\n        return ch in '0123456789'\n\n    def isLetter(self, ch):\n        return ch in 'abcdefghijklmnopqrstuvwxyz'\n\n    def isLower(self, ch):\n        return ch < 'Z'\n\n    def isUpper(self, ch):\n        return ch > 'Z'\n\n    def isAlphanumeric(self, ch):\n        return self.isAlpha(ch) or self.isDigit(ch) or self.isLower(ch) or self.isUpper(ch)\n\n    def isAlphaNum(self, ch):\n        return self.isAlpha(ch) or self.isDigit(ch)\n\n    def isLetterOrDigit(self, ch):\n        return self.isLetter(ch) or self.isDigit(ch)\n\n    def isValid(self, ch):\n        return self.isAlphaNum(ch) or self.isLetterOrDigit(ch)\n\n    def isWord(self, s):\n        return all(self.isValid(c) for c in s)\n\n    def findWords(self, s):\n        words = []\n        i = 0\n        while i < len(s):\n            if self.isAlpha(s[i]):\n                word = Word(s[i:])\n                word.index = i\n                words.append(word)\n            elif self.isDigit(s[i]):\n                word = Word(s[i:])\n                word.index = i\n                words.append(word)\n            elif self.isUpper(s[i]):\n                word = Word(s[i:])\n                word.index = i\n                words.append(word)\n            i += 1\n        return words\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.findWords('abcde')",
    "def all_words_starting_with_a_or_e(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words",
    "import re\n\ndef is_word(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    return False\n\n\ndef is_valid_word(word):\n    if word.startswith('a'):\n        return True\n    if word.startswith('e'):\n        return True\n    return False\n\n\ndef is_valid_word_regex(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    return False\n\n\ndef is_valid_word_regex_with_repeat(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    if re.match('[ae]+$', word):\n        return True\n    return False\n\n\ndef is_valid_word_with_repeat(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    if re.match('[ae]+$', word):\n        return True\n    return False\n\n\ndef is_valid_word_with_repeat_regex(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    if re.match('[ae]+$', word):\n        return True\n    return False\n\n\ndef is_valid_word_with_repeat_regex_with_repeat(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    if re.match('[ae]+$', word):\n        return True\n    return False\n\n\ndef is_valid_word_regex_with_repeat_regex(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True\n    if re.match('[ae]+$', word):\n        return True\n    return False\n\n\ndef is_valid_word_regex_with_repeat_regex_with_repeat(word):\n    if word.startswith('a') or word.startswith('e'):\n        return True",
    "import re\n\ndef find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] in \"ae\":\n            words.append(string[:i+1])\n    return words\n\nif __name__ == '__main__':\n    string = \"aeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeae",
    "def find_words(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'ae':\n            words.append(s[:i])\n            s = s[i:]\n    return words\n\nif __name__ == '__main__':\n    s = 'aabbb'\n    print(find_words(s))",
    "def words_in_string(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\nif __name__ == '__main__':\n    string = 'aeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeae",
    "# Note:\n# https://www.reddit.com/r/dailyprogrammer/comments/3n5j5e/20170313_challenge_276_interview_questions/\n\n# A brute-force approach\ndef words_with_initial_e_or_a(string):\n    result = []\n    for word in string.split():\n        if word[0] in ('a', 'e') and word not in result:\n            result.append(word)\n    return result\n\n\n# A recursive approach\ndef words_with_initial_e_or_a_recursive(string):\n    result = []\n    for word in string.split():\n        if word[0] in ('a', 'e') and word not in result:\n            result.append(word)\n            result += words_with_initial_e_or_a_recursive(word)\n    return result\n\n\n# A recursive approach\ndef words_with_initial_e_or_a_recursive_with_stack(string):\n    result = []\n    stack = []\n    for word in string.split():\n        if word[0] in ('a', 'e') and word not in result:\n            result.append(word)\n            stack.append(word)\n        elif word[0] in ('a', 'e'):\n            while stack and stack[-1] not in ('a', 'e'):\n                word = stack.pop()\n                if word not in result:\n                    result.append(word)\n                stack.append(word)\n    return result\n\n\n# A recursive approach\ndef words_with_initial_e_or_a_recursive_with_stack_with_dictionary(string):\n    result = []\n    stack = []\n    dictionary = {'a': 1, 'e': 2}\n    for word in string.split():\n        if word[0] in ('a', 'e') and word not in result:\n            result.append(word)\n            stack.append(word)\n            if word in dictionary:\n                while stack and stack[-1] not in ('a', 'e'):\n                    word = stack.pop()\n                    if word not in result:\n                        result.",
    "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            words.append(s[:i] + s[i + 1:])\n    return words\n\n\nif __name__ == '__main__':\n    s = 'eeeaeaeee'\n    print(find_words(s))",
    "# Your function will be called as the following:\n# function(string, index, word)\n\ndef word_pattern(string, index, word):\n    \"\"\"\n    :type string: str\n    :type index: int\n    :type word: str\n    :rtype: bool\n    \"\"\"\n    return (string[index] == 'a' or string[index] == 'e') and string[index]!= word[0]\n\nif __name__ == '__main__':\n    string = 'aeaeae'\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 3, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')\n    print word_pattern(string, 1, 'a')\n    print word_pattern(string, 1, 'e')",
    "def all_words_starting_with_a_or_e(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            if i > 0 and string[i-1]!= 'a' and string[i-1]!= 'e':\n                words.append(string[i:])\n    return words\n\nif __name__ == '__main__':\n    string = 'aeaeae'\n    words = all_words_starting_with_a_or_e(string)\n    print(words)",
    "# https://leetcode.com/problems/find-all-words-in-a-string-having-given-characters/discuss/294599/Python-Solution-with-O(n)\n\nclass Solution:\n    def findAllWords(self, s: str, words: List[str]) -> List[str]:\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')\n        words.append('a')\n        words.append('e')\n        words.append('i')\n        words.append('o')\n        words.append('u')\n        words.append('y')",
    "def words(string):\n    # Write your code here\n    # print(string)\n    # print(string.lower())\n    # print(string.upper())\n    # print(string.upper().upper())\n    # print(string.upper().lower())\n    # print(string.upper().upper().upper())\n    # print(string.upper().upper().lower())\n    # print(string.upper().lower().upper())\n    # print(string.upper().lower().lower())\n    return [word for word in string.upper().lower().upper().upper().lower().upper() if word[0] == 'a' or word[0] == 'e']\n\nif __name__ == \"__main__\":\n    string = \"aeiou\"\n    print(words(string))",
    "import re\n\ndef find_words(string):\n    return re.findall(r'e|a', string)\n\nif __name__ == '__main__':\n    string = \"aab\"\n    words = find_words(string)\n    print(words)",
    "def find_words(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'a' or c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_1(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() in ['a','e']:\n            words.append(c)\n    return words\n\n\ndef find_words_2(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_3(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_4(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_5(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_6(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_7(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_8(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef find_words_9(word_string):\n    words = []\n    for c in word_string:\n        if c.lower() == 'e':\n            words.append(c)\n    return words\n\n\ndef",
    "def find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\ndef find_words_v2(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n            if string[i] == 'e':\n                string = string[:i] + string[i + 1:]\n                break\n    return words\n\nif __name__ == '__main__':\n    test = 'abceae'\n    print(find_words(test))\n    print(find_words_v2(test))",
    "def find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\nif __name__ == '__main__':\n    string = \"aaaaa\"\n    print(find_words(string))",
    "def find_words(string):\n  words = []\n  for i in range(0, len(string)):\n    if string[i] == 'a' or string[i] == 'e':\n      if i == 0 or string[i-1]!= 'a':\n        words.append(string[i:])\n  return words\n\nif __name__ == '__main__':\n  test_string = 'abcea'\n  print(find_words(test_string))",
    "#!/usr/bin/env python\n\n# Write your code here\n\ndef find_words(s):\n    return [w for w in s.split(' ') if w[0] in ['a', 'e']]\n\nif __name__ == \"__main__\":\n    s = 'Hello, world!'\n    print find_words(s)",
    "# Your code should be self-documenting\n\ndef find_words(string):\n    return [word for word in string.lower() if word.isalpha()]\n\ndef main():\n    assert(find_words(\"hello world\") == [])\n    assert(find_words(\"apple apple\") == [\"apple\", \"apple\"])\n    assert(find_words(\"apple and apple\") == [\"apple\", \"apple\"])\n    assert(find_words(\"apple and apple and apple\") == [\"apple\", \"apple\"])\n    assert(find_words(\"apple and apple and apple and apple\") == [\"apple\", \"apple\"])\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def findWords(self, s, dict):\n        \"\"\"\n        :type s: str\n        :type dict: Set[str]\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in self.getWords(s, dict) if word[0] == 'a' or word[0] == 'e']\n\n    def getWords(self, s, dict):\n        words = []\n        curr = ''\n        for c in s:\n            if c in dict:\n                words.append(curr)\n                curr = ''\n            curr += c\n        if curr:\n            words.append(curr)\n        return words",
    "import string\n\n# Complete the function below.\ndef is_a_word(word):\n    return (word[0] in string.ascii_lowercase) or (word[0] in string.ascii_uppercase)\n\nif __name__ == \"__main__\":\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(is_a_word(s))\n    print(s.find('a'))\n    print(s.find('e'))\n    print(s.find('z'))",
    "def is_a(string):\n    return string.lower()[0] == 'a'\n\ndef is_e(string):\n    return string.lower()[0] == 'e'\n\ndef find_all_a(string):\n    return [word for word in string.split(' ') if is_a(word)]\n\ndef find_all_e(string):\n    return [word for word in string.split(' ') if is_e(word)]\n\ndef main():\n    string = \"a a a b b c c c a a a a a a a a b c d e e e a\"\n    print(find_all_a(string))\n    print(find_all_e(string))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\nclass Solution:\n    # @param {string} str\n    # @return {string[]}\n    def findWords(self, str):\n        result = []\n        for i in range(len(str)):\n            if str[i] == 'a' or str[i] == 'e':\n                result.append(str[i:])\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findWords(\"aaaaa\")",
    "# https://www.hackerrank.com/challenges/word-search/problem\n\nimport os\nimport sys\n\n\ndef get_all_words(string):\n    words = []\n    for i in range(0, len(string)):\n        for j in range(i, len(string)):\n            if string[i] == 'a' or string[i] == 'e':\n                if j - i > 1:\n                    words.append(string[i:j])\n    return words\n\n\ndef find_words(string):\n    words = get_all_words(string)\n    words_found = []\n    for word in words:\n        if word not in words_found:\n            words_found.append(word)\n    return words_found\n\n\nif __name__ == '__main__':\n    with open(os.environ['OUTPUT_PATH'], 'w') as out:\n        string = sys.stdin.readline()\n        words = find_words(string)\n        for word in words:\n            out.write('%s\\n' % word)",
    "from collections import defaultdict\nimport re\n\n\ndef words_starting_with_a_or_e(s):\n    # type: (str) -> List[str]\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = defaultdict(set)\n    for c in s:\n        if c.isalpha():\n            words[c].add(c)\n\n    return [w for w in words if w[0].isalpha()]\n\n\ndef main():\n    # type: () -> None\n    s = 'abcdefg'\n    print(words_starting_with_a_or_e(s))\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/find-all-words-with-similar-length/discuss/137586/Python-3-DP-with-Python-3-5-lines-and-2-lines-time-and-memory-with-2-solutions\n\n# 1. Start with a list of all possible words\n# 2. For each word, check the first letter of the word and the first letter of each possible suffix\n# 3. Check if the first letters match\n# 4. If not, check if the second letters match\n# 5. If not, check if the third letters match\n# 6. If not, check if the first letters match\n# 7. If not, check if the second letters match\n# 8. If not, check if the third letters match\n# 9. If not, check if the first letters match\n# 10. If not, check if the second letters match\n# 11. If not, check if the third letters match\n# 12. If not, check if the first letters match\n# 13. If not, check if the second letters match\n# 14. If not, check if the third letters match\n# 15. If not, check if the first letters match\n# 16. If not, check if the second letters match\n# 17. If not, check if the third letters match\n# 18. If not, check if the first letters match\n# 19. If not, check if the second letters match\n# 20. If not, check if the third letters match\n# 21. If not, check if the first letters match\n# 22. If not, check if the second letters match\n# 23. If not, check if the third letters match\n# 24. If not, check if the first letters match\n# 25. If not, check if the second letters match\n# 26. If not, check if the third letters match\n# 27. If not, check if the first letters match\n# 28. If not, check if the second letters match\n# 29. If not, check if the third letters match\n# 30. If not, check if the first letters match\n# 31. If not, check if the second letters match\n# 32. If not, check if the third letters match\n# 33. If not, check if the first letters match\n# 34. If not, check if the",
    "def words_starting_with_a_or_e(string):\n    return [word for word in string.split() if word.startswith('a') or word.startswith('e')]\n\nprint(words_starting_with_a_or_e('abcdef'))\n\n# Your solution should be in the form of a function, not a class.",
    "# https://www.hackerrank.com/challenges/find-all-words-in-a-string/problem\n\ndef find_all_words(string):\n    words = []\n    for word in string.split():\n        if word[0] in 'ae':\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(find_all_words(string))",
    "import re\n\ndef find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] in 'ae':\n            words.append(string[i:i+1])\n    return words\n\nif __name__ == '__main__':\n    string = 'aeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeae",
    "def all_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\nif __name__ == '__main__':\n    string = 'aaae'\n    print all_words(string)",
    "import string\n\ndef find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] in string.lowercase:\n            if string[i] == 'a':\n                if i!= 0 and string[i-1] in string.lowercase:\n                    words.append(string[:i])\n            elif string[i] == 'e':\n                if i!= 0 and string[i-1] in string.lowercase:\n                    words.append(string[:i])\n    return words\n\ndef main():\n    string = \"abcde\"\n    words = find_words(string)\n    print words\n    \nif __name__ == '__main__':\n    main()",
    "import re\n\ndef is_a_word(word):\n    pattern = r'^a|e$'\n    return re.match(pattern, word)\n\ndef is_a_word_in_string(word, string):\n    return is_a_word(word) and word in string\n\ndef find_words(string):\n    words = []\n    for word in string.split(' '):\n        if is_a_word_in_string(word, string):\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    string = \"aeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeae",
    "def find_words(string):\n    return [word for word in string.split(' ') if word[0] in 'ae']\n\nif __name__ == '__main__':\n    print find_words('a e b c')\n    # ['a', 'e', 'b', 'c']",
    "# https://leetcode.com/problems/find-all-words-in-a-string/\n\nclass Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        if s == '':\n            return words\n        for i in range(len(s)):\n            if s[i] in 'ae':\n                words.append(s[:i] + s[i+1:])\n        return words",
    "def words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [w for w in s.lower() if w.startswith('a') or w.startswith('e')]\n\nprint(words(\"aaaa\"))\nprint(words(\"aaaae\"))\nprint(words(\"eee\"))\nprint(words(\"eeee\"))",
    "def find_words(string):\n    words = set()\n    for word in string.split():\n        if word[0] in 'ae':\n            words.add(word)\n    return words\n\ndef main():\n    string = input()\n    words = find_words(string)\n    print(words)\n\nif __name__ == \"__main__\":\n    main()",
    "def find_words(string):\n    words = []\n    for i in range(len(string)):\n        if string[i] in ['a', 'e']:\n            words.append(string[i:i+1])\n    return words\n\nif __name__ == \"__main__\":\n    string = \"abcde\"\n    print find_words(string)",
    "def all_words(str):\n    words = []\n    for i in range(len(str)):\n        if str[i] in \"ae\":\n            words.append(str[:i+1])\n    return words\n\nif __name__ == \"__main__\":\n    print all_words(\"hello\")",
    "#!/bin/python\n\nclass Solution(object):\n    def words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if s == '':\n            return res\n        for c in s:\n            if c == 'a' or c == 'e':\n                res.append(c)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.words(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "def words_with_initial_e(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n\n    for i in range(0, len(string)):\n        if string[i] == 'e':\n            words.append(string[0:i])\n\n    return words\n\nif __name__ == \"__main__\":\n    string = \"aabce\"\n    print(words_with_initial_e(string))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2015-2015: Alignak team, see AUTHORS.txt file for contributors\n#\n# This file is part of Alignak.\n#\n# Alignak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Alignak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Alignak.  If not, see <http://www.gnu.org/licenses/>.\n#\n#\n# This file incorporates work covered by the following copyright and\n# permission notice:\n#\n#  Copyright (C) 2009-2014:\n#     Hartmut Goebel, h.goebel@goebel-consult.de\n#     Guillaume Bour, guillaume@bour.cc\n#     Nicolas Dupeux, nicolas@dupeux.net\n#     Gr\u00e9gory Starck, g.starck@gmail.com\n#     Sebastien Coavoux, s.coavoux@free.fr\n#     Thibault Cohen, titilambert@gmail.com\n#     Jean Gabes, naparuba@gmail.com\n#     Romain Forlot, rforlot@yahoo.com\n\n#  This file is part of Shinken.\n#\n#  Shinken is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Shinken is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY",
    "# Your function should return a list of strings\n\ndef is_word_in_string(word, string):\n    return word in string and (word[0] == 'a' or word[0] == 'e')\n\ndef get_all_words(string):\n    return [word for word in string if is_word_in_string(word, string)]\n\n# Test Cases\n\n# test_get_all_words\n\nstring = \"abcabcabc\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))\n\nstring = \"aabbcc\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))\n\nstring = \"eee\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))\n\nstring = \"eeeabbcc\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))\n\nstring = \"eeeabbcceee\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))\n\nstring = \"eeeeeeeeeee\"\nprint(\"String:\", string)\nprint(\"All words in string:\", get_all_words(string))",
    "# Solution 1\ndef find_words(string):\n    words = []\n    for i in string:\n        if i == 'a' or i == 'e':\n            words.append(i)\n    return words\n\n# Solution 2\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            words.append(i)\n    return words\n\n# Solution 3\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            words.append(i)\n    return words\n\n# Solution 4\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            if i == 'a' or i == 'e':\n                words.append(i)\n            else:\n                words.append(i)\n    return words\n\n# Solution 5\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            if i == 'a' or i == 'e':\n                words.append(i)\n            else:\n                words.append(i)\n    return words\n\n# Solution 6\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            if i == 'a' or i == 'e':\n                words.append(i)\n            else:\n                words.append(i)\n    return words\n\n# Solution 7\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            if i == 'a' or i == 'e':\n                words.append(i)\n            else:\n                words.append(i)\n    return words\n\n# Solution 8\ndef find_words(string):\n    words = []\n    for i in string:\n        if i in string:\n            if i == 'a' or i == 'e':\n                words.append(i)\n            else:\n                words.append(i)\n    return words\n\n# Solution 9\ndef find_words(string):\n    words = []\n    for i in string",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2014-08-24 21:47:57\n# @Last Modified by:   omi\n# @Last Modified time: 2015-04-03 11:39:53\n\nclass Solution(object):\n    def findWords(self, s, wordList):\n        \"\"\"\n        :type s: str\n        :type wordList: Set[str]\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        self.findWords(s, wordList, words)\n        return words\n\n    def findWords(self, s, wordList, words):\n        if not s or not wordList:\n            return\n        for i in range(len(s)):\n            if s[i] in wordList:\n                words.append(s[:i] + s[i+1:])\n            if s[i] in 'ae':\n                self.findWords(s[i+1:], wordList, words)",
    "def words(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'ae':\n            if s[i] == 'a':\n                words.append(s[:i])\n            elif s[i] == 'e':\n                words.append(s[i+1:])\n    return words\n\nif __name__ == '__main__':\n    s = \"aeae\"\n    print(words(s))\n    s = \"e\"\n    print(words(s))\n    s = \"ee\"\n    print(words(s))",
    "def find_words(text):\n    words = []\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'e':\n            words.append(text[i])\n    return words\n\nif __name__ == \"__main__\":\n    text = \"aabae\"\n    print(find_words(text))",
    "# https://leetcode.com/problems/find-all-words-in-a-string/\n# Time:  O(n)\n# Space: O(1)\n\n# Definition for a  word.\nclass Word:\n    def __init__(self, word):\n        self.word = word\n        self.frequencies = collections.defaultdict(int)\n\n    def __str__(self):\n        return self.word\n\nclass Solution(object):\n    def findWords(self, words, wordList):\n        \"\"\"\n        :type words: List[str]\n        :type wordList: List[Word]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for word in words:\n            for w in wordList:\n                if w.word.startswith(word):\n                    w.frequencies[word] += 1\n                    if len(w.word) == len(word):\n                        result.append(w.word)\n                    break\n        return result",
    "def find_words(s):\n    # write your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            words.append(s[i])\n    return words\n\nif __name__ == \"__main__\":\n    s = \"ale\"\n    words = find_words(s)\n    print words",
    "def find_words(s):\n    words = set()\n    for i in range(len(s)):\n        if s[i] in \"ae\":\n            words.add(s[:i])\n            words.add(s[i:])\n    return words\n\nif __name__ == \"__main__\":\n    s = \"aae\"\n    print(find_words(s))",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[str]:\n        if not p:\n            return [s]\n        p_len = len(p)\n        words = []\n        for i in range(len(s)):\n            # Find all the words that start with p\n            words.append(s[i:i+p_len])\n        words = set(words)\n        words.discard(s)\n        return list(words)\n\n# TESTS\ntests = [\n    [\"a\", \"e\", [\"e\", \"a\"]],\n    [\"a\", \"e\", [\"a\"]],\n    [\"a\", \"a\", []],\n    [\"aa\", \"a\", [\"a\", \"a\"]],\n    [\"ab\", \"abc\", [\"ab\", \"abc\"]],\n    [\"ab\", \"abc\", [\"a\", \"abc\"]],\n    [\"abc\", \"abc\", []],\n    [\"abcd\", \"abcd\", []],\n]\nfor t in tests:\n    sol = Solution()\n    actual = sol.findAnagrams(t[0], t[1])\n    print(\"The list of anagrams for\", t[0], \"and\", t[1], \"is\", actual)\n    assert actual == t[2]",
    "import collections\n\n\ndef is_word(word):\n    return len(word) == 1 and word.lower() in 'aeiou'\n\n\ndef find_words(text):\n    words = collections.defaultdict(list)\n    for i in range(len(text)):\n        word = text[i:i+1]\n        if is_word(word):\n            words[word].append(i)\n    return words.items()\n\n\nif __name__ == \"__main__\":\n    text = \"aeiouaeiou\"\n    words = find_words(text)\n    print(words)",
    "def words_with_a(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            words.append(string[i])\n    return words\n\nprint(words_with_a(\"aab\"))",
    "# Note: The word list is stored as a set.\n\ndef find_words(word_list, s):\n    \"\"\"\n    :type word_list: List[str]\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    if s[0] in ['a', 'e']:\n        return [s]\n    \n    # Use set to eliminate duplicates\n    word_set = set([s])\n    for word in word_list:\n        for i in range(len(s)):\n            if word[i] == s[i]:\n                word_set.add(word)\n    return list(word_set)\n\nif __name__ == '__main__':\n    s = 'abced'\n    print(find_words(['a', 'b', 'c', 'e'], s))\n    print(find_words(['a', 'b', 'c', 'e'], 'abced'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abce'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abcee'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abcee'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abce'))\n    print(find_words(['a', 'b', 'c', 'e'], 'ab'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abde'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abd'))\n    print(find_words(['a', 'b', 'c', 'e'], 'abcde'))",
    "def words_with_a_or_e(s):\n    return [word for word in s.split() if word.startswith('a') or word.startswith('e')]\n\nif __name__ == \"__main__\":\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abc\"))\n    print(words_with_a_or_e(\"ac\"))\n    print(words_with_a_or_e(\"bcd\"))\n    print(words_with_a_or_e(\"bcd\"))\n    print(words_with_a_or_e(\"bc\"))\n    print(words_with_a_or_e(\"bc\"))\n    print(words_with_a_or_e(\"bcde\"))\n    print(words_with_a_or_e(\"bcde\"))\n    print(words_with_a_or_e(\"bcd\"))\n    print(words_with_a_or_e(\"bcde\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))\n    print(words_with_a_or_e(\"abcde\"))\n    print(words_with_a_or_e(\"abcd\"))",
    "# Write your code here\n\ndef all_words(s):\n    words = []\n    for c in s:\n        if c in ['a', 'e']:\n            words.append(c)\n    return words\n\ndef all_words_2(s):\n    words = []\n    for c in s:\n        if c in ['a', 'e']:\n            words.append(c)\n    return words\n\ndef all_words_3(s):\n    words = []\n    for c in s:\n        if c in ['a', 'e']:\n            words.append(c)\n        elif c in ['e', 'i']:\n            words.append(c)\n        elif c in ['i', 'o']:\n            words.append(c)\n        elif c in ['o', 'u']:\n            words.append(c)\n        elif c in ['u']:\n            words.append(c)\n    return words\n\ndef all_words_4(s):\n    words = []\n    for c in s:\n        if c in ['a', 'e']:\n            words.append(c)\n        elif c in ['e', 'i']:\n            words.append(c)\n        elif c in ['i', 'o']:\n            words.append(c)\n        elif c in ['o', 'u']:\n            words.append(c)\n        elif c in ['u']:\n            words.append(c)\n        elif c in ['a', 'e', 'i', 'o', 'u']:\n            words.append(c)\n    return words\n\ndef all_words_5(s):\n    words = []\n    for c in s:\n        if c in ['a', 'e']:\n            words.append(c)\n        elif c in ['e', 'i']:\n            words.append(c)\n        elif c in ['i', 'o']:\n            words.append(c)\n        elif c in ['o', 'u']:\n            words.append(c)\n        elif c in ['u']:\n            words.append(c)\n        elif",
    "# This is the standard library implementation\nclass Solution(object):\n    def words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in s.lower().split() if word[0] in 'ae']\n\n# The following is an implementation of the solution found on the discuss.stackoverflow.com\n#\n# The solution is implemented using a dictionary of all words in lower case.\nclass Solution(object):\n    def words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = set()\n        for c in s:\n            if c.lower() in words:\n                words.remove(c.lower())\n            else:\n                words.add(c.lower())\n        return list(words)\n\n# The following is a solution based on a set of strings\nclass Solution(object):\n    def words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in s.lower().split() if word[0] in 'ae']\n\n# The following is a solution based on a dictionary\nclass Solution(object):\n    def words(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = set()\n        for c in s:\n            if c.lower() in words:\n                words.remove(c.lower())\n            else:\n                words.add(c.lower())\n        return list(words)",
    "#!/usr/bin/env python\n\n#-------------------------------------------------------------------------------\n#\n#  This file is part of project_pipeline.\n#\n#  project_pipeline is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  project_pipeline is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with project_pipeline.  If not, see <http://www.gnu.org/licenses/>.\n#\n#-------------------------------------------------------------------------------\n\nimport re\n\ndef find_words(s):\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \"a\" or s[i] == \"e\":\n            words.append(s[i])\n    return words\n\n\ndef main():\n    s = \"aabccdeeeeeeeeeeee\"\n    print(find_words(s))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.hackerrank.com/challenges/words-with-a-or-e/problem\n\n# We are using a list of dictionaries to store the words.\n# Each dictionary is a list of words.\n# The key is the word's index and the value is the word itself.\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n# TODO: We can use a dictionary instead of a list of lists\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set instead of a list\n# TODO: We can use a dictionary instead of a list of dictionaries\n\n# TODO: We can use a set",
    "# https://leetcode.com/problems/letter-combinations-of-a-phone-number/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findWords(self, s):\n        if not s:\n            return []\n        stack = []\n        word = []\n        res = []\n        for c in s:\n            if c == 'a' or c == 'e':\n                if word:\n                    res.append(''.join(word))\n                    word = []\n                stack.append(c)\n            elif c =='':\n                if stack:\n                    word.append(stack.pop())\n                else:\n                    word.append(c)\n            else:\n                if stack:\n                    word.append(stack.pop())\n                stack.append(c)\n        if stack:\n            word.append(stack.pop())\n        if word:\n            res.append(''.join(word))\n        return res",
    "import re\n\ndef is_e(s):\n    return re.match(r'e', s) is not None\n\ndef is_a(s):\n    return re.match(r'a', s) is not None\n\ndef find_e_or_a(s):\n    return [is_e(s), is_a(s)]\n\ndef find_e_or_a_words(s):\n    return [word for word in s.split() if is_e(word) or is_a(word)]\n\ndef main():\n    s = 'abcde'\n    print find_e_or_a_words(s)\n\nif __name__ == '__main__':\n    main()",
    "def is_word(word):\n    if word == '':\n        return False\n    if word[0] == 'a' or word[0] == 'e':\n        return True\n    return False\n\ndef is_anagram(word1, word2):\n    if len(word1)!= len(word2):\n        return False\n    for i in range(len(word1)):\n        if word1[i]!= word2[i]:\n            return False\n    return True\n\ndef find_words(word):\n    word_list = []\n    for i in range(len(word)):\n        if is_word(word[i:]):\n            word_list.append(word[:i+1])\n    return word_list\n\nif __name__ == '__main__':\n    test_case = 'abce'\n    print(find_words(test_case))",
    "def words_starting_with_a(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"a\":\n            words.append(string[:i])\n    return words\n\n\ndef words_starting_with_e(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"e\":\n            words.append(string[:i])\n    return words\n\ndef words_starting_with_a_or_e(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"a\" or string[i] == \"e\":\n            words.append(string[:i])\n    return words\n\ndef words_starting_with_a_or_e_with_repeated_letter(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"a\" or string[i] == \"e\":\n            if string[i] == string[i-1]:\n                words.append(string[:i])\n    return words\n\ndef words_starting_with_a_or_e_with_repeated_letter_with_other_char(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"a\" or string[i] == \"e\":\n            if string[i] == string[i-1]:\n                if string[i+1]!= string[i]:\n                    words.append(string[:i])\n    return words\n\ndef words_starting_with_a_or_e_with_repeated_letter_with_other_char_2(string):\n    words = []\n    for i in range(0, len(string)):\n        if string[i] == \"a\" or string[i] == \"e\":\n            if string[i] == string[i-1]:\n                if string[i+1]!= string[i]:\n                    if string[i+2]!= string[i]:\n                        words.append(string[:",
    "def is_word(s, word):\n    return s.lower().find(word) == 0\n\nif __name__ == \"__main__\":\n    s = \"abcde\"\n    print(sorted(filter(is_word, s)))\n    s = \"abc\"\n    print(sorted(filter(is_word, s)))\n    s = \"abcdef\"\n    print(sorted(filter(is_word, s)))\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(sorted(filter(is_word, s)))\n    s = \"aabccd\"\n    print(sorted(filter(is_word, s)))\n    s = \"abcdea\"\n    print(sorted(filter(is_word, s)))\n    s = \"abcdeabcde\"\n    print(sorted(filter(is_word, s)))\n    s = \"abceabcdeabcdeabcde\"\n    print(sorted(filter(is_word, s)))\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(sorted(filter(is_word, s)))",
    "# @include\ndef is_a_or_e(word):\n    return word.startswith('a') or word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_slow(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\ndef is_a_or_e_slow(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\ndef is_a_or_e_slow(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and not word.startswith('e')\n\n\n# @exclude\ndef is_a_or_e_fast(word):\n    return word.startswith('a') or word.startswith('e') and",
    "def all_words(s):\n    return set(s.split())\n\ndef main():\n    s = 'abcdee'\n    print all_words(s)\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}