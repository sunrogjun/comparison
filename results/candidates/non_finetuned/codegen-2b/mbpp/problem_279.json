{
  "problem": {
    "task_id": "MBPP/290",
    "prompt": "Write a function to find the list of lists with maximum length.",
    "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
    "test_list": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ],
    "challenge_test_list": [],
    "problem_id": 279
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import collections\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def maxSlidingWindow(self, nums, k):\n        if not nums or not k:\n            return []\n        max_sliding_window_len = 0\n        max_sliding_window = []\n        for i in xrange(len(nums)):\n            if i - k + 1 >= 0 and nums[i - k + 1] == nums[i]:\n                if len(max_sliding_window) < k:\n                    max_sliding_window.append(nums[i - k + 1])\n                elif len(max_sliding_window) == k:\n                    max_sliding_window[k - 1] = max(max_sliding_window[k - 1], nums[i - k + 1])\n                elif len(max_sliding_window) > k:\n                    max_sliding_window[k - 1] = max(max_sliding_window[k - 1], nums[i - k + 1])\n            else:\n                if len(max_sliding_window) < k:\n                    max_sliding_window.append(nums[i])\n                elif len(max_sliding_window) == k:\n                    max_sliding_window[k - 1] = max(max_sliding_window[k - 1], nums[i])\n                elif len(max_sliding_window) > k:\n                    max_sliding_window[k - 1] = max(max_sliding_window[k - 1], nums[i])\n        return max_sliding_window\n\nif __name__ == '__main__':\n    solution = Solution()\n    nums = [1,1,1,2,2,3]\n    k = 2\n    print solution.maxSlidingWindow(nums, k)",
    "# https://leetcode.com/problems/maximum-subarray-sum/\n# https://leetcode.com/problems/find-the-maximum-sum-of-a-subarray/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-ii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-iii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-iv/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-v/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-vi/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-vii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-viii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-i/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-ii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-iii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-iv/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-v/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-vi/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-vii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray-viii/\n# https://leetcode.com/problems/maximum-sum-of-a-subarray/\n# https://leetcode.com/problems/maximum-sum-of-a-sub",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def maxLength(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        def max_len(l):\n            if len(l) == 1:\n                return 1\n            elif len(l) == 2:\n                return 2\n            else:\n                return max(map(lambda x: len(x), l))\n\n        max_len_l = []\n        max_len = 0\n        for l in lists:\n            max_len_l.append(max_len(l))\n            max_len = max(max_len, max_len_l[-1])\n\n        return max_len",
    "def max_length_list(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Write your code here\n    # Step 1: Create a set to store the maximum length\n    max_length = 0\n    max_list = []\n    # Step 2: Sort the input array\n    # Step 3: Iterate over the sorted array\n    for i in range(len(arr)):\n        # Step 4: Add the length of the current element\n        length = len(arr[i])\n        if length > max_length:\n            max_length = length\n            max_list = arr[i]\n        # Step 5: If the current element is already in the set, remove it\n        else:\n            for j in range(len(max_list)):\n                if max_list[j] == arr[i][0]:\n                    max_list.pop(j)\n                    break\n    return max_list",
    "import numpy as np\n\ndef find_max_length(arr):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    :param arr: list of lists\n    :return: list of lists\n    \"\"\"\n    lengths = [len(i) for i in arr]\n    max_length = max(lengths)\n    max_length_list = []\n    for i in range(0, max_length):\n        max_length_list.append([])\n        for j in range(0, len(arr)):\n            if len(arr[j]) >= i:\n                max_length_list[i].append(arr[j][i])\n    return max_length_list\n\n# Test\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    max_length_list = find_max_length(arr)\n    print(max_length_list)",
    "# https://www.hackerrank.com/challenges/max-list/problem\n#\n# Write a function to find the list of lists with maximum length.\n# Input:\n#   nums: A list of integers\n#\n# Output:\n#   A list of lists of integers.\n#\n# Example:\n#   For [1, 2, 3] return [[1, 2], [3]]\n#\n#   For [1, 2, 3, 4, 5] return [[1, 2], [3, 4], [5]]\n#\n#   For [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n#\n#   For [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20]]\n#\n#   For [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,",
    "def find_max_length(lists):\n    return max([len(l) for l in lists])\n\n# Sample Output\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n#\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a',",
    "class Solution(object):\n    def maxListLen(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        max_list = []\n        for list_ in lists:\n            max_len = max(max_len, len(list_))\n            max_list.append(list_)\n        return max_len\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.maxListLen([[1,2,3],[4,5,6],[7,8,9]])\n    print solution.maxListLen([[1,2,3,4,5,6],[7,8,9,10,11,12]])",
    "def max_length_lists(L):\n    max_list = []\n    for i in L:\n        max_list.append(i)\n        if len(max_list) > len(L):\n            max_list.pop()\n    return max_list\n\nif __name__ == \"__main__\":\n    L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_length_lists(L))",
    "#!/bin/python\n\n# Complete the maxLength function below.\ndef maxLength(arr):\n    arr.sort()\n    length = arr[0]\n    for i in arr:\n        if i > length:\n            length = i\n    return length\n\nif __name__ == \"__main__\":\n    print maxLength([1, 2, 3, 4, 5])\n    print maxLength([1, 2, 3, 4, 5, 6])",
    "# Your function should return a list of lists.\n#\n# Example:\n#\n# Input:\n# [[1,2,3], [4,5], [1,2,3]]\n# Output: [[1,2,3], [4,5]]\n# Explanation:\n# The input list is [[1,2,3], [4,5], [1,2,3]],\n# and the output list is [[1,2,3], [4,5]]\n# The length of the output list is 2.\n#\n# Note:\n# The length of the input list is in range [1, 100].\n# The length of the input list element is in range [1, 30].\n# The length of the output list is in range [1, 30].\n# The length of the output list element is in range [1, 30].\n\n\nclass Solution(object):\n    def maxLengthList(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        max_len = 0\n        max_val = 0\n        max_list = []\n        for num in nums:\n            max_len = max(max_len, len(num))\n            max_val = max(max_val, max(num))\n        max_list = [[] for i in range(max_len)]\n        for num in nums:\n            for i in range(max_len):\n                max_list[i].append(num[i] + max_val)\n        return max_list\n\n\nif __name__ == \"__main__\":\n    print(Solution().maxLengthList([[1, 2, 3], [4, 5], [1, 2, 3]]))\n    print(Solution().maxLengthList([[1, 2, 3], [4, 5], [1, 2, 3]]))\n    print(Solution().maxLengthList([[1, 2, 3], [4, 5], [1, 2, 3]]))\n    print(Solution().maxLengthList([[1, 2, 3], [4, 5], [1, 2, 3]]))",
    "# https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n\nif __name__ == \"__main__\":\n    tree = TreeNode(1)\n    tree.left = TreeNode(2)\n    tree.right = TreeNode(3)\n    tree.left.left = TreeNode(4)\n    tree.left.right = TreeNode(5)\n    tree.right.right = TreeNode(6)\n    print Solution().maxDepth(tree)",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def maxSlidingWindow(self, nums, k):\n        if not nums:\n            return []\n        res = []\n        length = 0\n        start = 0\n        end = 0\n        tmp = []\n        for i in xrange(len(nums)):\n            if end == k:\n                tmp.append(nums[start:end])\n                start += 1\n                end = start + 1\n            elif end - start >= k:\n                tmp.append(nums[start:end])\n                start += 1\n            else:\n                tmp.append(nums[start:end])\n                res.append(tmp)\n                tmp = []\n                end += 1\n        if end - start > k:\n            tmp.append(nums[start:end])\n            res.append(tmp)\n        return res",
    "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[nums[0]]]\n        m = len(nums)\n        result = []\n        for i in range(m):\n            result.append([])\n            for j in range(i + 1, k + 1):\n                result[i].append(nums[j - 1])\n        for i in range(k + 1, m):\n            result[i].append(nums[i - 1])\n        return result",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def __init__(self):\n        self.max = 0\n        self.max_list = None\n        self.max_list_length = 0\n        self.max_length_list = None\n        self.max_length_list_length = 0\n        self.max_length_list_index = 0\n        self.max_length_list_index_length = 0\n        self.max_length_list_index_length_index = 0\n\n    def maxListLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        self.max_length_list = []\n        self.max_length_list_length = 0\n        self.max_length_list_index = 0\n        self.max_length_list_index_length = 0\n        self.max_length_list_index_length_index = 0\n        self.max_length_list_length = 0\n\n        self.max_length_list_length_index = 0\n\n        def helper(head):\n            if head is None:\n                return\n            if self.max_length_list_length > self.max_length_list_length_index:\n                self.max_length_list_length_index = self.max_length_list_length_index + 1\n                self.max_length_list_length = head.val\n                self.max_length_list.append(head)\n            else:\n                self.max_length_list_length_index = self.max_length_list_length_index + 1\n                self.max_length_list_length = head.val\n                self.max_length_list.append(head)\n\n            helper(head.next)\n\n        helper(head)\n\n        return self.max_length_list_length\n\n    def maxListLength_1(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        max_length = 0",
    "#!/usr/bin/env python\n\ndef find_max_length(arr):\n    max_len = 0\n    max_arr = []\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_arr = i\n    return max_arr\n\nif __name__ == \"__main__\":\n    arr = [\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ]\n\n    print(find_max_length(arr))",
    "# https://www.hackerrank.com/challenges/max-list/problem\n\n# Use the max_length() function from the python standard library.\n# You can use this function to find the length of a list of lists.\n#\n# The idea is to take the list of lists and find the max length of each list.\n# The max length of a list is the number of elements in the list.\n#\n# For example, if the list of lists is [[1, 2, 3], [4, 5], [6]],\n# then the max length of each list is 3 (the length of the first list is 3,\n# the length of the second is 3, and the length of the third is 3).\n#\n# Note: The length of each list is guaranteed to be in the range of [0, 10000].\n#\n# Hint: Use a dynamic programming algorithm to find the max length of each list.\n#\n#\n#\n# Example 1:\n#\n# Input: [[1,2,3], [4,5], [6]]\n# Output: [3, 3, 3]\n# Explanation:\n# The three lists have the same length, and the max length of each list is 3.\n#\n#\n# Example 2:\n#\n# Input: [[1], [4], [6]]\n# Output: [1, 1, 1]\n# Explanation:\n# The three lists have the same length, and the max length of each list is 1.\n#\n#\n#\n# Constraints:\n#\n# The length of the input list will be in the range of [0, 10000].\n# The length of each list will be in the range of [0, 10000].\n#\n#\n#\n#\n# Note:\n#\n# The length of each list will not be greater than 10,000.\n# The length of all lists will not be greater than 10,000.\n#\n\ndef max_length(l):\n    max_length_dict = {}\n    for i in range(len(l)):\n        max_length_dict[l[i]] = max(max_length_dict[l[i]], len(l[i]))\n    return max(max_length_dict.values())\n\nprint",
    "def findMaxLength(list1, list2):\n    length1 = len(list1)\n    length2 = len(list2)\n    if length1 > length2:\n        return list1\n    else:\n        return list2\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(findMaxLength(list1, list2))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def maxLength(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n\n        Time complexity: O(n^2)\n        Space complexity: O(n)\n        \"\"\"\n        n = len(lists)\n        max_len = 0\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                if lists[i][j] > lists[i][j-1]:\n                    max_len = max(max_len, 1 + lists[i][j-1])\n        return max_len\n\n\nif __name__ == \"__main__\":\n    print Solution().maxLength([[1,2],[3,4]])\n    print Solution().maxLength([[1,2],[3,4]])\n    print Solution().maxLength([[1,2],[3,4],[5,6]])\n    print Solution().maxLength([[1,2],[3,4],[5,6],[7,8]])",
    "def max_length(a_list):\n    \"\"\"\n    :type a_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(a_list) == 0:\n        return 0\n\n    max_length = 0\n    for i in a_list:\n        if len(i) > max_length:\n            max_length = len(i)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n    print(max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]))",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def findMaxLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        if head.next is None:\n            return 1\n        max_length = 0\n        cur_max_length = 1\n        cur_max_length_head = head\n        while cur_max_length_head.next is not None:\n            cur_max_length += 1\n            cur_max_length_head = cur_max_length_head.next\n            if cur_max_length > max_length:\n                max_length = cur_max_length\n                cur_max_length_head = head\n        return max_length",
    "def max_length_of_list(L):\n    if not L:\n        return []\n    if len(L) == 1:\n        return L\n    max_list = L[0]\n    for i in range(1,len(L)):\n        if len(L[i]) > len(max_list):\n            max_list = L[i]\n    return max_list\n\nif __name__ == '__main__':\n    assert max_length_of_list([[1,2,3,4,5,6,7,8,9,10]]) == [9,10]\n    assert max_length_of_list([[1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10]]) == [9,10]\n    assert max_length_of_list([[1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10]]) == [9,10]\n    assert max_length_of_list([[1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10]]) == [9,10]\n    assert max_length_of_list([[1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10],\n                               [1,2,3,4,5,6,7,8,9,10]]) == [9,10]",
    "import unittest\n\n\nclass Solution(object):\n    def maxLengthList(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return max([len(list_) for list_ in lists])\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-length-of-list-with-maximum-sum/solution/\n\n# DFS\n# 0ms 100%\nclass Solution {\n    public int maxLengthList(int[][] lists) {\n        int max = 0;\n        int[][] dp = new int[lists.length][lists[0].length];\n        for (int i = 0; i < lists.length; i++) {\n            for (int j = 0; j < lists[i].length; j++) {\n                if (dp[i][j] < lists[i][j]) dp[i][j] = lists[i][j];\n                else if (dp[i][j] > lists[i][j]) max = Math.max(max, lists[i][j] - dp[i][j]);\n            }\n        }\n        return max;\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public int maxLengthList(int[][] lists) {\n        int max = 0;\n        int[][] dp = new int[lists.length][lists[0].length];\n        for (int i = 0; i < lists.length; i++) {\n            for (int j = 0; j < lists[i].length; j++) {\n                if (dp[i][j] < lists[i][j]) dp[i][j] = lists[i][j];\n                else if (dp[i][j] > lists[i][j]) max = Math.max(max, lists[i][j] - dp[i][j]);\n            }\n        }\n        return",
    "#!/usr/bin/env python\n\ndef max_length_list(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not arr:\n        return []\n    max_length = max(map(lambda l: len(l), arr))\n    max_list = [0] * max_length\n    for i in range(max_length):\n        for j in range(max_length):\n            if i == j:\n                continue\n            max_list[i] = max(max_list[i], max(max_list[i], arr[i][j]))\n    return max_list\n\n\ndef test_max_length_list():\n    assert max_length_list([[1,2],[3,4]]) == [3,4]\n    assert max_length_list([[1,2],[3,4,5]]) == [3,4]\n    assert max_length_list([[1,2],[3,4,5,6]]) == [3,4]\n    assert max_length_list([[1,2,3,4,5],[6,7,8,9]]) == [4,5]\n    assert max_length_list([[1,2,3],[4,5,6]]) == [3,4]\n\nif __name__ == '__main__':\n    test_max_length_list()",
    "import collections\nimport random\n\n\ndef max_length(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return max_length_recursive(lists, collections.defaultdict(list))\n\n\ndef max_length_recursive(lists, max_length_dict):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type max_length_dict: dict\n    :rtype: List[List[int]]\n    \"\"\"\n    if not lists:\n        return []\n    max_length = max(max_length_dict.values()) + 1\n    if max_length < len(lists):\n        return max_length_recursive(lists[:-1], max_length_dict)\n    else:\n        return [lists[0]]\n\n\ndef max_length_alternative(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return max_length_alternative_recursive(lists, collections.defaultdict(list))\n\n\ndef max_length_alternative_recursive(lists, max_length_dict):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type max_length_dict: dict\n    :rtype: List[List[int]]\n    \"\"\"\n    if not lists:\n        return []\n    max_length = max(max_length_dict.values()) + 1\n    if max_length < len(lists):\n        return max_length_alternative_recursive(lists[:-1], max_length_dict)\n    else:\n        return [lists[0]]",
    "def findMaxLength(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # TODO\n    return 0\n\nif __name__ == '__main__':\n    assert findMaxLength([[1, 2], [3, 4, 5]]) == 2\n    assert findMaxLength([[1], [2, 3]]) == 2\n    assert findMaxLength([[1, 2], [3, 4, 5], [6, 7, 8]]) == 3\n    assert findMaxLength([[1, 2, 3, 4], [5, 6, 7, 8]]) == 4\n    assert findMaxLength([[1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]]) == 3\n    assert findMaxLength([[1], [2, 3], [4, 5], [6, 7, 8], [9, 10]]) == 3\n    assert findMaxLength([[1], [2, 3], [4, 5], [6, 7, 8], [9, 10], [11, 12]]) == 4",
    "def max_list_length(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    lengths = []\n    for n in nums:\n        lengths.append(len(str(n)))\n\n    max_length = max(lengths)\n    max_length_index = lengths.index(max_length)\n    return nums[max_length_index]\n\n\nif __name__ == '__main__':\n    assert max_list_length([1, 2, 3]) == 3\n    assert max_list_length([1, 2, 3, 4]) == 3\n    assert max_list_length([1, 2, 3, 4, 5]) == 5\n    assert max_list_length([1, 2, 3, 4, 5, 6]) == 6\n    assert max_list_length([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert max_list_length([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n    assert max_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n    assert max_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
    "__author__ = 'Daniel'\n\nclass Solution:\n    def maxLengthList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_length = 0\n        for num in nums:\n            max_length = max(max_length, len(num))\n        return max_length\n\nif __name__ == \"__main__\":\n    assert Solution().maxLengthList([]) == 0\n    assert Solution().maxLengthList([1, 2, 3, 4]) == 4\n    assert Solution().maxLengthList([1, 2, 3, 4, 5, 6]) == 6",
    "# https://leetcode.com/problems/maximum-length-of-subarray-sum-equal-k/\n\nclass Solution(object):\n    def maxSubArrayLen(self, s, k):\n        \"\"\"\n        :type s: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not s or not s[0]:\n            return 0\n        n = len(s)\n        max_len = 0\n        for i in range(n):\n            if s[i] == k:\n                max_len = max(max_len, i + 1)\n                for j in range(i, n):\n                    if s[j]!= k:\n                        break\n                    max_len = max(max_len, j + 1)\n        return max_len",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution:\n    # @param points, a list of Points\n    # @return a list of lists of Points\n    def maxPoints(self, points):\n        if not points:\n            return []\n        dp = [[]]\n        for p in points:\n            for l in dp:\n                if len(l) == 0 or len(l) < len(p):\n                    l.append(p)\n                    continue\n                if len(l) == len(p):\n                    if p.x > l[-1].x:\n                        l[-1] = p\n                    elif p.x == l[-1].x and p.y > l[-1].y:\n                        l[-1] = p\n                if len(l) > len(p):\n                    break\n        return dp\n\n# Note:\n# dp[i][j] means the max points of the points in range [i, j]\n# dp[i][j] = max(dp[i][j-1], dp[i][j-1])\n# dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n# dp[i][j] = max(dp[i-1][j], dp[i-1][j])\n\n# \u627e\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u957f\u5ea6\nclass Solution(object):\n    # @param points, a list of Points\n    # @return a list of lists of Points\n    def maxPoints(self, points):\n        if not points:\n            return []\n        max_points = []\n        for p in points:\n            max_points.append([p])\n        for i in range(1, len(points)):\n            for j in range(i):\n                max_points[i].append(max(max_points[i-1][j], max_points[i-1][j-1]))\n        return max_points",
    "import collections\nimport heapq\n\n\ndef max_length(ls):\n    \"\"\"\n    :type ls: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # sort the ls by length and then take the max of them\n    ls.sort(key=lambda x: len(x))\n    return max(len(x) for x in ls)\n\n\ndef main():\n    \"\"\"\n    >>> max_length([[1, 2], [1, 3], [1, 4]])\n    3\n    >>> max_length([[1, 2], [1, 3], [1, 4], [1, 5]])\n    3\n    >>> max_length([[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7]])\n    3\n    \"\"\"\n    print(max_length([[1, 2], [1, 3], [1, 4], [1, 5]]))\n    print(max_length([[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7]]))\n\n\nif __name__ == '__main__':\n    import time\n\n    start_time = time.time()\n    main()\n    print(time.time() - start_time)",
    "def find_max_length(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in range(len(arr)):\n        if len(arr[i]) > max_length:\n            max_length = len(arr[i])\n    return max_length\n\nif __name__ == '__main__':\n    assert find_max_length([[1, 2, 3, 4, 5]]) == 5\n    assert find_max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5\n    assert find_max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5\n    assert find_max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5\n    assert find_max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5",
    "def findMax(mylist):\n    maxLength = 0\n    maxList = []\n    for i in range(0, len(mylist)):\n        if len(mylist[i]) > maxLength:\n            maxLength = len(mylist[i])\n            maxList = mylist[i]\n    return maxLength, maxList\n\ndef main():\n    testList = [\n        [1,2,3],\n        [2,3,4],\n        [1,2,3,4],\n        [1,2,3,4,5],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6,7],\n        [1,2,3,4,5,6,7,8],\n        [1,2,3,4,5,6,7,8,9],\n        [1,2,3,4,5,6,7,8,9,10],\n        [1,2,3,4,5,6,7,8,9,10,11]\n    ]\n    print(findMax(testList))\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/max-length-of-bst/discuss/367935/Python-3-recursion-and-stack-solution-with-explanation\n# @include\n\n# @include\n# https://leetcode.com/problems/max-length-of-bst/discuss/367935/Python-3-recursion-and-stack-solution-with-explanation\n\ndef max_length_of_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_length_of_bst(root.left), max_length_of_bst(root.right)) + 1\n# @exclude\n\n\ndef max_length_of_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_length_of_bst(root.left), max_length_of_bst(root.right)) + 1\n# @include\n\n\ndef max_length_of_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_length_of_bst(root.left), max_length_of_bst(root.right)) + 1\n\n\ndef max_length_of_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_length_of_bst(root.left), max_length_of_bst(root.right)) + 1\n\n\nclass Solution:\n    # @include\n    # @exclude\n\n    def maxLengthOfBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        return max(max_length_of_bst(root.left), max_length_of_bst(",
    "def max_list(lst):\n    max_list = []\n    max_list_length = 0\n    for i in lst:\n        if i not in max_list:\n            max_list.append(i)\n            max_list_length = max(max_list_length, len(i))\n    return max_list, max_list_length\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n    print(max_list(lst))",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def maxLengthList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        if head.next is None:\n            return 1\n        if head.next.next is None:\n            return 2\n        maxlen = 0\n        curr = head\n        while curr is not None:\n            curr = curr.next\n            maxlen += 1\n        maxlen += 2\n        curr = head\n        while curr.next is not None:\n            curr = curr.next\n            maxlen += 1\n        return maxlen",
    "def find_max_length(arr):\n    # write your code here\n    max_len = 0\n    max_arr = []\n    for i in arr:\n        if len(max_arr) == 0:\n            max_arr.append(i)\n            max_len = 1\n        else:\n            if len(i) > max_len:\n                max_arr = [i]\n                max_len = len(i)\n            else:\n                if len(i) == max_len:\n                    max_arr.append(i)\n    return max_arr, max_len",
    "def max_length(arr):\n    max_len = 0\n    max_arr = []\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_arr = i\n    return max_arr, max_len\n\nif __name__ == '__main__':\n    assert max_length([[1,2,3],[4,5]]) == [[1,2,3],[4,5]]\n    assert max_length([[1],[2]]) == [[1],[2]]\n    assert max_length([]) == []\n    assert max_length([1,2,3]) == [[1,2,3]]\n    assert max_length([[1],[2]]) == [[1],[2]]",
    "def max_lists(lists):\n    \"\"\"\n    Write a function that takes a list of lists and returns the list of lists\n    with the maximum length.\n\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_length = [0] * len(lists)\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_length[i]:\n                max_length[i] = lists[i][j]\n\n    max_length.sort()\n    return max_length",
    "# A simple implementation using recursion\ndef max_length_list(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    result = [arr]\n    for i in range(2, len(arr)):\n        new_result = []\n        for j in range(len(result)):\n            new_result.append(max([arr[i-1], arr[j]]))\n        result = new_result\n    return result\n\n# A recursive implementation\ndef max_length_list_recursive(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    result = [arr]\n    for i in range(2, len(arr)):\n        new_result = []\n        for j in range(len(result)):\n            new_result.append(max([arr[i-1], arr[j]]))\n        result = new_result\n    return result\n\n# A more efficient implementation using a set\ndef max_length_list_set(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    result = [arr]\n    for i in range(2, len(arr)):\n        new_result = []\n        for j in range(len(result)):\n            if j == 0:\n                new_result.append(arr[i-1])\n            else:\n                new_result.append(max([arr[i-1], arr[j-1]]))\n        result = new_result\n    return result\n\n# A more efficient implementation using a set\ndef max_length_list_set_recursive(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    result = [arr]\n    for i in range(2, len(arr)):\n        new_result = []\n        for j in range(len(result)):\n            new_result.append(max([arr[i-1], arr[j]]))\n        result =",
    "# Definition for a ListNode\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def __init__(self):\n        self.max_length = 0\n        self.max_length_list = []\n\n    def max_length_list_rec(self, head: ListNode) -> ListNode:\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        max_length = self.max_length_list_rec(head.next)\n        if max_length is None:\n            return None\n        if len(head.next) > len(max_length):\n            max_length = head.next\n        while max_length:\n            if len(max_length.next) > len(max_length):\n                max_length = max_length.next\n            else:\n                break\n        self.max_length_list.append(max_length)\n        return head\n\n    def max_length_list(self, head: ListNode) -> ListNode:\n        self.max_length = 0\n        self.max_length_list = []\n        self.max_length_list_rec(head)\n        return self.max_length_list[0]\n\n    def max_length_list_2(self, head: ListNode) -> ListNode:\n        length = 0\n        max_length = None\n        curr_length = 0\n        while head:\n            curr_length += 1\n            if head.next and curr_length > length:\n                length = curr_length\n                max_length = head\n        return max_length\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3)))\n    head = ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, None))))),\n    head = ListNode(9, ListNode(10, ListNode(11, ListNode(12, ListNode(13, ListNode(14, ListNode(15)))))))\n    head = ListNode(16",
    "from collections import defaultdict\n\ndef max_length_of_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    \n    max_length = 0\n    max_length_lists = []\n    for i in range(len(lists)):\n        lists[i] = sorted(lists[i], key=lambda x: x[0])\n        max_length = max(max_length, len(lists[i]))\n        if len(lists[i]) > max_length:\n            max_length_lists = []\n        if len(lists[i]) == max_length:\n            max_length_lists.append(lists[i])\n    return max_length_lists\n\n# https://www.hackerrank.com/challenges/max-length-of-lists/problem",
    "def max_length_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    max_length = [0]\n    for i in range(len(lists)):\n        max_length.append(max(max_length[-1], len(lists[i])))\n    return max_length\n\n# Your MaxLengthLists solution\n\n# Note:\n# The length of lists[i] and lists[j] are different.",
    "# Definition for a ListNode.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def maxListLen(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        max_len = 0\n        p = head\n        while p:\n            if p.next:\n                max_len = max(max_len, len(p.next))\n                p = p.next\n            else:\n                p = None\n        return max_len",
    "def max_list(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for i in range(len(my_list)):\n        if len(max_list) == 0:\n            max_list.append(my_list[i:])\n            max_len += 1\n        else:\n            if len(max_list[-1]) < len(my_list[i:]):\n                max_list[-1].append(my_list[i:])\n                max_len += 1\n            elif len(max_list[-1]) == len(my_list[i:]):\n                if len(max_list[-1]) > len(max_list):\n                    max_list[-1].append(my_list[i:])\n                    max_len += 1\n                elif len(max_list[-1]) < len(max_list):\n                    max_list.append(my_list[i:])\n                    max_len += 1\n    return max_list\n\n\n\ndef test_max_list():\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_list(my_list))\n    my_list = [1, 2, 3]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4, 5]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4, 5, 6]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4, 5, 6, 7]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(max_list(my_list))\n    my_list = [1, 2, 3, 4,",
    "import numpy as np\n\n\ndef max_length_lists(list_of_lists):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n\n    :type list_of_lists: list[list[int]]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for lists in list_of_lists:\n        length = len(lists)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5], [4, 5], [5]]\n    print(max_length_lists(list_of_lists))",
    "# https://leetcode.com/problems/max-product-of-three-numbers/discuss/287953/Python-Solution\n\nclass Solution(object):\n    def threeSumClosest(self, num, target):\n        \"\"\"\n        :type num: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        sorted_num = sorted(num)\n        ans = -1\n        for i in range(len(sorted_num)):\n            for j in range(i+1, len(sorted_num)):\n                k = j+1\n                while k < len(sorted_num):\n                    if sorted_num[i] + sorted_num[j] + sorted_num[k] == target:\n                        return target\n                    elif sorted_num[i] + sorted_num[j] + sorted_num[k] > target:\n                        break\n                    elif sorted_num[i] + sorted_num[j] + sorted_num[k] < target:\n                        ans = sorted_num[i] + sorted_num[j] + sorted_num[k]\n                        break\n                    k += 1\n        return ans\n\ns = Solution()\nprint s.threeSumClosest([-1, 2, 1, -4], 0)",
    "def max_lists(arr):\n    \"\"\"\n    >>> max_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\n    \"\"\"\n    max_len = 0\n    max_len_lists = []\n    for row in arr:\n        if len(row) > max_len:\n            max_len = len(row)\n            max_len_lists = []\n        if len(row) == max_len:\n            max_len_lists.append(row)\n    return max_len_lists\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# https://leetcode.com/problems/max-sub-sequence-length/\n\nclass Solution(object):\n    def maxSubseqLen(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        nums.sort()\n        max_len = 0\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > nums[i-1]:\n                max_len = max(max_len, 1 + i - nums[i-1])\n            else:\n                max_len = max(max_len, 1 + i)\n        return max_len",
    "# https://leetcode.com/problems/find-the-largest-number-of-lists-that-can-be-built/discuss/92421/Python-solution-using-depth-first-search\n\n# Definition for a  list of integers:  class ListNode(object):\n#   def __init__(self, x):\n#       self.val = x\n#       self.next = None\n\nclass Solution(object):\n    def maxDepth(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        # dfs\n        # dfs(head)\n        # recursion\n        return max(0, dfs(head, 0))\n        \n    def dfs(self, head, depth):\n        if head is None:\n            return depth\n        \n        l = self.dfs(head.next, depth + 1)\n        return max(l, depth)",
    "def findMax(list):\n    max_length = 0\n    max_index = 0\n\n    for index, value in enumerate(list):\n        if len(list) == 1:\n            return [value]\n        else:\n            if len(list[index]) > max_length:\n                max_length = len(list[index])\n                max_index = index\n            elif len(list[index]) == max_length:\n                if value > list[index][0]:\n                    max_index = index\n                    max_length = len(list[index])\n\n    return [list[max_index]]\n\n\nprint(findMax([[1, 2, 3], [4, 5, 6]]))\nprint(findMax([[1, 2, 3], [4, 5, 6, 7]]))\nprint(findMax([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]))\nprint(findMax([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
    "class Solution:\n    # @param {integer} n\n    # @return {integer[]}\n    def maxLists(self, n):\n        return self.maxLists_2(n)\n\n    def maxLists_2(self, n):\n        maxLists = [0] * n\n        for i in xrange(n):\n            maxLists[i] = self.maxLists_1(n, i)\n        return maxLists\n\n    def maxLists_1(self, n, cur):\n        if n == 1:\n            return [1]\n        elif cur == 0:\n            return [0] + self.maxLists_1(n - 1, 1)\n        elif cur == n - 1:\n            return [0] + self.maxLists_1(n - 2, 0)\n        else:\n            maxLists = [0] * n\n            maxLists[cur] = 1\n            maxLists[cur + 1] = 1\n            maxLists[cur + 2] = 1\n            for i in xrange(cur + 3, n):\n                maxLists[i] = max(maxLists[cur], maxLists[cur + 1] + maxLists[i - 1])\n            return maxLists\n\nif __name__ == '__main__':\n    print Solution().maxLists(5)",
    "def max_length_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not lists:\n        return []\n\n    max_length = lists[0][0]\n    max_list = []\n    for list in lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n\n    return max_list\n\n\nif __name__ == '__main__':\n    lists = [[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]\n    print(max_length_lists(lists))",
    "def max_list(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for each in arr:\n        if len(each) > max_length:\n            max_length = len(each)\n            max_length_list = []\n        if len(each) == max_length:\n            max_length_list.append(each)\n    return max_length_list\n\nif __name__ == \"__main__\":\n    arr = [[1,2,3],[4,5,6],[7,8,9]]\n    print max_list(arr)",
    "def max_length(lst):\n    length = 0\n    max_length = 0\n    for i in lst:\n        if len(i) > length:\n            length = len(i)\n            max_length = i\n        elif len(i) == length:\n            if max_length < i:\n                max_length = i\n    return max_length\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [1, 2], [1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5]]\n    print(max_length(lst))",
    "# https://www.hackerrank.com/challenges/max-subarray/problem\n\n# Complete the maxSubArray function below.\ndef maxSubArray(arr):\n    max_so_far = arr[0]\n    max_so_far_index = 0\n    max_so_far_len = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_so_far_len += 1\n            max_so_far = arr[i]\n        else:\n            if arr[i] > max_so_far:\n                max_so_far = arr[i]\n                max_so_far_index = i\n            elif arr[i] == max_so_far:\n                max_so_far_len += 1\n    return max_so_far, max_so_far_index, max_so_far_len\n\n\nif __name__ == \"__main__\":\n    arr = [2, -5, 4, -1, 1]\n    print(maxSubArray(arr))",
    "# https://leetcode.com/problems/max-length-of-subarray-sum-equals-k/\n# Given an integer array nums, return the length of the longest subarray that\n# sums to a constant k.\n#\n# Example 1:\n# Input: nums = [1,1,1], k = 2\n# Output: 2\n#\n# Example 2:\n# Input: nums = [1,5,1,1], k = 6\n# Output: 4\n#\n#\n# Note:\n# You may assume all numbers in the array are non-negative and fit in the 32-bit signed integer range.\n# Your function should be in O(n).\n#\n# Follow up:\n# What if the array is sorted in increasing order? Could you solve it without\n# sorting?\n#\n# Related Topics\n# Array\n\nclass Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        ans = 0\n        max_sum = nums[0]\n        for i in xrange(n):\n            sum = nums[i]\n            if sum > k:\n                return ans\n            max_sum = max(max_sum, sum)\n            ans = max(ans, max_sum + nums[i])\n        return ans",
    "import math\n\ndef max_length_list(arr):\n    if not arr:\n        return []\n\n    max_length = max([len(arr[i]) for i in range(len(arr))])\n    max_length_list = []\n    for i in range(len(arr)):\n        if len(arr[i]) == max_length:\n            max_length_list.append(arr[i])\n    return max_length_list\n\ndef main():\n    arr = [[1,2,3],[4,5,6],[7,8,9]]\n    max_length_list = max_length_list(arr)\n    print max_length_list\n    print max_length_list.count(3)\n    print max_length_list.index(3)\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/find-the-largest-number-in-an-array/discuss/86594/Python-Solution-with-O(n)-Time-and-Space\n# https://leetcode.com/problems/find-the-largest-number-in-an-array/discuss/86594/Python-Solution-with-O(n)-Time-and-Space\n# https://leetcode.com/problems/find-the-largest-number-in-an-array/discuss/86594/Python-Solution-with-O(n)-Time-and-Space\n# https://leetcode.com/problems/find-the-largest-number-in-an-array/discuss/86594/Python-Solution-with-O(n)-Time-and-Space\n# https://leetcode.com/problems/find-the-largest-number-in-an-array/discuss/86594/Python-Solution-with-O(n)-Time-and-Space\n\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n    def maxNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return nums[0]\n        max_length = 0\n        max_value = nums[0]\n        for i in range(1, len(nums)):\n            if max_length < len(nums[i:]):\n                max_length = len(nums[i:])\n                max_value = max(max_value, nums[i])\n            else:\n                max_value = max(max_value, nums[i])\n        return max_value\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumber([1, 2, 3, 4, 5]))\n    print(sol.maxNumber([1, 2, 3, 4, 5, 6]))\n    print(sol.maxNumber([1, 2, 3, 4, 5, 6, 7]",
    "#!/usr/bin/env python\n\nclass Solution(object):\n    def maxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_length = 0\n        for i in range(len(nums)):\n            max_length = max(max_length, len(nums[i:]))\n        return max_length\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.maxLength([])\n    print sol.maxLength([1])\n    print sol.maxLength([1, 2])\n    print sol.maxLength([1, 2, 3])\n    print sol.maxLength([1, 2, 3, 4])\n    print sol.maxLength([1, 2, 3, 4, 5])\n    print sol.maxLength([1, 2, 3, 4, 5, 6])\n    print sol.maxLength([1, 2, 3, 4, 5, 6, 7])\n    print sol.maxLength([1, 2, 3, 4, 5, 6, 7, 8])\n    print sol.maxLength([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print sol.maxLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
    "class Solution(object):\n    def maxListLen(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        for list_ in lists:\n            max_len = max(max_len, len(list_))\n        return max_len\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.maxListLen([[1, 2], [3, 4]]))\n    print(sol.maxListLen([[1, 2], [3, 4], [1, 2]]))\n    print(sol.maxListLen([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(sol.maxListLen([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(sol.maxListLen([[1, 2], [1, 2, 3], [1, 2]]))",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution:\n    def maxLengthList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        length = 0\n        pre = head\n        while pre is not None:\n            pre = pre.next\n            length += 1\n        max_length = 0\n        pre = head\n        while pre is not None:\n            length = max(length, len(pre.next))\n            pre = pre.next\n            if length > max_length:\n                max_length = length\n        return max_length\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print(solution.maxLengthList(head))",
    "import collections\n\ndef find_max_length_sublists(nums):\n    # write your code here\n    res = collections.defaultdict(list)\n    for i in range(len(nums)):\n        res[i].append(nums[i])\n    max_len = 0\n    for i in range(len(nums)):\n        if len(res[i]) > max_len:\n            max_len = len(res[i])\n    return max_len\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    print find_max_length_sublists(nums)",
    "def max_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for list in lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_list",
    "def find_max_list(lists):\n    # write your code here\n    return max(lists, key=lambda x: len(x))\n\ndef main():\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(find_max_list(lists))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def maxList(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head\n        l1 = self.maxList(head.next)\n        l2 = self.maxList(head.next.next)\n        if not l2:\n            return head\n        if l1 and l1.val < l2.val:\n            return l1\n        else:\n            return l2\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.maxList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(s.maxList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(s.maxList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))",
    "# https://leetcode.com/problems/maximum-length-of-subarray-sum-equals-k/discuss/394576/Python-DP-solution\nclass Solution(object):\n    def maxSubArrayLen(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        ans = 0\n        max_len = 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = nums[i]\n            if curr_sum == max_sum:\n                max_len = max(max_len, i + 1)\n            else:\n                max_len = 1\n                max_sum = curr_sum\n        ans = max_len\n        return ans\n\n# https://leetcode.com/problems/maximum-length-of-subarray-sum-equals-k/discuss/394576/Python-DP-solution\nclass Solution2(object):\n    def maxSubArrayLen(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        ans = 0\n        max_len = 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = nums[i]\n            if curr_sum == max_sum:\n                max_len = max(max_len, i + 1)\n            else:\n                max_len = 1\n                max_sum = curr_sum\n        ans = max_len\n        return ans",
    "# https://www.hackerrank.com/challenges/maximum-length-of-sublists\n\ndef find_max_length_of_sublists(list_of_lists):\n    \"\"\"\n    Find the list of lists with maximum length.\n\n    Args:\n        list_of_lists: A list of lists.\n\n    Returns:\n        The list of lists with maximum length.\n    \"\"\"\n    result = []\n    max_length = 0\n\n    for i in range(0, len(list_of_lists)):\n        if i == 0:\n            result.append(list_of_lists[i])\n        else:\n            result.append(list_of_lists[i])\n            max_length = max(max_length, len(list_of_lists[i]))\n    return result\n\nif __name__ == '__main__':\n    list_of_lists = [\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2, 3],\n        [1, 2,",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        return max(self.maxProduct1(nums), self.maxProduct2(nums))\n\n    def maxProduct1(self, nums):\n        max_prod = -1\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                max_prod = max(max_prod, nums[i] * nums[j])\n        return max_prod\n\n    def maxProduct2(self, nums):\n        max_prod = -1\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                max_prod = max(max_prod, nums[i] * nums[j])\n        return max_prod",
    "from collections import deque\n\ndef max_length(arr):\n    # write your code here\n    if len(arr) == 0:\n        return 0\n    \n    max_length = arr[0][0]\n    for i in range(1, len(arr)):\n        if arr[i][0] > max_length:\n            max_length = arr[i][0]\n    \n    return max_length\n\ndef max_length_recur(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_length = arr[0][0]\n    for i in range(1, len(arr)):\n        if arr[i][0] > max_length:\n            max_length = arr[i][0]\n        \n        if arr[i][0] == max_length:\n            arr[i][0] = max(arr[i][1], arr[i][2])\n    \n    return max_length\n\ndef max_length_recur_dp(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_length = arr[0][0]\n    for i in range(1, len(arr)):\n        max_length = max(max_length, arr[i][0])\n        \n        if arr[i][0] == max_length:\n            arr[i][0] = max(arr[i][1], arr[i][2])\n    \n    return max_length\n\ndef max_length_dp(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_length = arr[0][0]\n    max_length_dp(arr[1:])\n    \n    for i in range(1, len(arr)):\n        arr[i][0] = max(arr[i][1], arr[i][2])\n        if arr[i][0] == max_length:\n            arr[i][0] = max(arr[i][1], arr[i][2])\n    \n    return max_length\n\ndef max_length_dp_2(arr):\n    if len(arr) == 0:\n        return 0",
    "def max_length_lists(lists):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    length = 0\n    result = []\n\n    for list in lists:\n        if len(list) > length:\n            result = list\n            length = len(list)\n\n    return result\n\n\nif __name__ == '__main__':\n    assert max_length_lists([[1,2,3,4], [5,6,7,8]]) == [[5,6,7,8], [1,2,3,4]]\n    assert max_length_lists([[1,2,3,4,5], [6,7,8,9], [1,2,3,4]]) == [[1,2,3,4,5], [6,7,8,9], [1,2,3,4]]\n    assert max_length_lists([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]",
    "from collections import defaultdict\n\n\ndef max_length(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_length_lists = []\n\n    for list_ in lists:\n        max_length = max(max_length, len(list_))\n\n        if len(max_length_lists) < max_length:\n            max_length_lists.append(list_)\n\n    return max(max_length_lists, key=lambda list_: len(list_))\n\n\ndef main():\n    lists = [[1, 2], [3, 4], [5, 6]]\n\n    print(max_length(lists))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_list(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not list_of_lists:\n        return []\n    max_length = []\n    max_length_length = 0\n    for list_of_lists in list_of_lists:\n        length = len(list_of_lists)\n        if length > max_length_length:\n            max_length = list_of_lists\n            max_length_length = length\n    return max_length\n\n\n\nif __name__ == \"__main__\":\n    assert max_list([[1,2],[3,4]]) == [[1,2],[3,4]]\n    assert max_list([[1,2],[3,4,5]]) == [[3,4,5],[1,2]]\n    assert max_list([[1,2],[3,4,5,6]]) == [[3,4,5,6],[1,2]]\n    assert max_list([[1,2],[3,4,5,6,7]]) == [[3,4,5,6,7],[1,2]]\n    assert max_list([[1,2],[3,4,5,6,7,8]]) == [[3,4,5,6,7,8],[1,2]]\n    assert max_list([[1,2],[3,4,5,6,7,8,9]]) == [[3,4,5,6,7,8,9],[1,2]]\n    assert max_list([[1,2],[3,4,5,6,7,8,9,10]]) == [[3,4,5,6,7,8,9,10],[1,2]]\n    assert max_list([[1,2,3],[4,5,6,7,8,9,10,11]]) == [[4,5,6,7,8,9,10,11],[1,2,3]]\n    assert max_list([[1,2,3],[4,5,6,7,8,9,10,11,12]])",
    "import collections\n\n# @include\ndef max_length_subarrays(arr):\n    # Sort the list of lists.\n    sorted_list = sorted(arr, key=lambda x: len(x))\n    # Find the maximum length of the subarray.\n    max_length = max([len(x) for x in sorted_list])\n    # Return the subarrays.\n    return sorted_list[-max_length:]\n# @exclude\n\n\ndef main():\n    nums = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5]\n    print(max_length_subarrays(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(max_length_subarrays(nums))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def maxSlidingWindow(self, nums, k):\n        max_length = []\n        result = []\n        for i in range(len(nums)):\n            if i - k >= 0:\n                result.append(nums[i-k:i])\n                max_length.append(len(result[-1]))\n            else:\n                result.append([])\n                max_length.append(len(result[-1]))\n        for i in range(len(nums)):\n            if i + k < len(nums):\n                result.append(nums[i:i+k])\n                max_length.append(len(result[-1]))\n            else:\n                result.append([])\n                max_length.append(len(result[-1]))\n        return result\n        \n    def maxSlidingWindow2(self, nums, k):\n        result = []\n        max_length = []\n        for i in range(len(nums)):\n            if i - k >= 0:\n                result.append(nums[i-k:i])\n                max_length.append(len(result[-1]))\n            else:\n                result.append([])\n                max_length.append(len(result[-1]))\n        for i in range(len(nums)):\n            if i + k < len(nums):\n                result.append(nums[i:i+k])\n                max_length.append(len(result[-1]))\n            else:\n                result.append([])\n                max_length.append(len(result[-1]))\n        return result, max_length\n        \n    def maxSlidingWindow3(self, nums, k):\n        result = []\n        max_length = []\n        for i in range(len(nums)):\n            if i - k >= 0:\n                result.append(nums[i-k:i])\n                max_length.append(len(result[-1]))\n            else:\n                result.append",
    "def max_length_lists(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    \n    if len(arr) == 0:\n        return []\n    \n    if len(arr[0]) == 0:\n        return [arr[0]]\n    \n    length = arr[0][0]\n    \n    for i in range(1, len(arr)):\n        if len(arr[i]) > length:\n            length = len(arr[i])\n    \n    return [arr[i] for i in range(len(arr)) if len(arr[i]) == length]",
    "def max_length_list(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_length = [0] * len(lst)\n    for i in range(len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                max_length[i] = max(max_length[i], lst[i] + 1)\n            else:\n                max_length[i] = max(max_length[i], lst[j] + 1)\n    return max_length\n\nprint(max_length_list([1, 2, 3]))\nprint(max_length_list([1, 2, 3, 4]))\nprint(max_length_list([1, 2, 3, 4, 5]))\nprint(max_length_list([1, 2, 3, 4, 5, 6]))",
    "import collections\n\n# Definition for a ListNode\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def findMaxLength(self, head):\n        if head is None:\n            return 0\n        \n        max_len = 0\n        curr = head\n        while curr is not None:\n            curr_len = 1\n            curr_next = curr.next\n            while curr_next is not None:\n                curr_len += 1\n                curr_next = curr_next.next\n            max_len = max(max_len, curr_len)\n            curr = curr.next\n        \n        return max_len\n\n# Note:\n# The head is a dummy node, the actual head is the first node in the linked list.\n#\n# Follow up:\n# Could you optimize your algorithm to use only O(n) extra space?",
    "def max_list_length(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # The idea is to go through all the lists and find the maximum length, then\n    # find the maximum length of the list containing the maximum length.\n    # The maximum length of the list containing the maximum length is the\n    # maximum length of the entire list.\n    # The idea here is that we keep track of the maximum length of the list\n    # containing the maximum length, and then we keep track of the maximum\n    # length of the list containing the maximum length of the list containing\n    # the maximum length.\n    max_length = 0\n    max_length_containing_max_length = 0\n    for list in lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_length_containing_max_length = len(list)\n        if len(list) > max_length_containing_max_length:\n            max_length_containing_max_length = len(list)\n    return max_length\n\n# Testing\n\ndef main():\n    lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    print(max_list_length(lists))\n\nif __name__ == '__main__':\n    main()",
    "from collections import namedtuple\n\nList = namedtuple('List','max_lengths')\n\n\ndef max_length(lists: List) -> List:\n    \"\"\"\n    :type lists: List\n    :rtype: List\n    \"\"\"\n    max_lengths = []\n    for list_ in lists:\n        max_lengths.append(len(list_))\n    return max(max_lengths)\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]]\n    print(max_length(lists))",
    "# https://oj.leetcode.com/problems/maximum-subarray-sum/\n# https://oj.leetcode.com/problems/maximum-sum-of-subarrays-ii/\n# http://www.jiuzhang.com/solutions/maximum-sum-of-subarrays/\n# https://leetcode.com/problems/maximum-sum-of-subarrays/\n\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return max(self.maxSubArray_recursive(nums), self.maxSubArray_iterative(nums))\n\n    def maxSubArray_recursive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum\n\n    def maxSubArray_iterative(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.maxSubArray([-2, -3, 4, -1, -2, 1, 5, -3])\n    print solution.maxSubArray([-2, -3, 4, -1, -2, 1, 5, -3, -4])\n    print solution.maxSubArray([-2, -3, 4, -1, -2, 1, 5, -3, -4, -5])",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a list of ListNode\n    def __helper(self, head, k):\n        if not head: return []\n        if not head.next: return [head]\n        \n        res = []\n        max_len = 0\n        while head.next:\n            if head.next.val > head.val:\n                max_len += 1\n            else:\n                max_len = max(max_len, 1)\n            res.append(head.next)\n            head = head.next\n        \n        res.append(head)\n        max_len += 1\n        \n        if k < max_len:\n            return res\n        else:\n            return self.__helper(head.next, k)\n\n    def findMaxLength(self, head: ListNode, k: int) -> List[ListNode]:\n        return self.__helper(head, k)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, None))))\n    max_list = sol.findMaxLength(head, 4)\n    for i in max_list:\n        print(i.val)",
    "# Definition for a list of lists.\nclass ListOfLists(object):\n    def __init__(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        \"\"\"\n        self.lists = lists\n\n    def get_max_len(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        for i in range(len(self.lists)):\n            if len(self.lists[i]) > max_len:\n                max_len = len(self.lists[i])\n        return max_len\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(lists)\n# param_1 = obj.get_max_len()",
    "def max_length(nums):\n    # write your code here\n    max_lengths = [0] * len(nums)\n    for i in range(len(nums)):\n        max_lengths[i] = max([len(max_lengths[:i])] + max_lengths[i+1:])\n    return max_lengths\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6]\n    print max_length(nums)\n    nums = [1,2,3,4,5]\n    print max_length(nums)\n    nums = [1,2,3,4]\n    print max_length(nums)\n    nums = [1,2,3]\n    print max_length(nums)\n    nums = [1,2,3,4]\n    print max_length(nums)\n    nums = [1,2,3,4,5,6]\n    print max_length(nums)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print max_length(nums)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def maxSlidingWindow(self, nums, k):\n        result = []\n        if len(nums) == 0:\n            return result\n        if len(nums) == 1:\n            return [[nums[0]]]\n        \n        previous = nums[0]\n        index = 1\n        for i in range(1, len(nums)):\n            if nums[i]!= previous:\n                result.append([previous])\n                previous = nums[i]\n            else:\n                result[-1].append(nums[i])\n                index += 1\n                if index == k:\n                    result[-1].append(nums[i])\n                    index = 1\n        result.append([nums[len(nums) - 1]])\n        return result",
    "import collections\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def maxSlidingWindow(self, nums: 'integer[]', k: 'integer') -> 'integer[][]':\n        res = collections.defaultdict(list)\n        for i in range(len(nums)):\n            res[nums[i]].append(i)\n        res_max = max(res.values())\n        res_max_index = -1\n        for i in range(len(res_max)):\n            if len(res[res_max[i]]) == k:\n                res_max_index = i\n                break\n        return [res[nums[i]][k-1] for i in range(res_max_index+1, len(res))]",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxSlidingWindow(self, nums, k):\n        if not nums:\n            return 0\n        elif not nums or len(nums) < k:\n            return 0\n        else:\n            sorted_nums = sorted(nums)\n            max_len = 0\n            max_pos = 0\n            for i in range(len(sorted_nums) - k + 1):\n                if i < len(sorted_nums) - k:\n                    if sorted_nums[i] == sorted_nums[i + k - 1]:\n                        max_len += 1\n                        if max_len > k:\n                            max_len = k\n                            max_pos = i\n                    else:\n                        max_len = 0\n            return max_pos",
    "def max_length(lists):\n    return max(map(len, lists))\n\n\nif __name__ == '__main__':\n    lists = [[1,2,3], [4,5,6], [7,8,9]]\n    print(max_length(lists))\n\n    lists = [[1,2], [3,4], [5,6,7,8,9]]\n    print(max_length(lists))\n\n    lists = [[1], [2], [3]]\n    print(max_length(lists))\n\n    lists = [[1,2,3], [4,5,6], [7,8,9]]\n    print(max_length(lists))",
    "class Solution(object):\n    def maxLengthList(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not lists:\n            return 0\n        elif len(lists) == 1:\n            return len(lists[0])\n        else:\n            max_len = 0\n            for l in lists:\n                if len(l) > max_len:\n                    max_len = len(l)\n            return max_len",
    "def max_length(arr):\n    max_length = -1\n    for i in range(len(arr)):\n        max_length = max(max_length, len(arr[i]))\n    return max_length",
    "class Solution(object):\n    def maxLists(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(lists) == 0:\n            return []\n        if len(lists) == 1:\n            return [lists[0]]\n        max_length = 0\n        for i in xrange(len(lists)):\n            max_length = max(max_length, len(lists[i]))\n        max_list = [None] * max_length\n        for i in xrange(len(lists)):\n            for j in xrange(max_length):\n                max_list[j] = max(max_list[j], lists[i][j])\n        return max_list\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.maxLists([[1, 2], [3]])\n    print sol.maxLists([[1, 2], [3], [1, 2, 3]])\n    print sol.maxLists([[1, 2], [3, 4], [1, 2, 3, 4]])\n    print sol.maxLists([[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
    "def max_length(lists):\n    max_length = 0\n    max_list = []\n    for list_ in lists:\n        if len(list_) > max_length:\n            max_length = len(list_)\n            max_list = list_\n    return max_list\n\n\"\"\"\nSample Input\n[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nSample Output\n[\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\"\"\"",
    "from collections import namedtuple\n\nclass Solution(object):\n    def findMaxLength(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: int\n        \"\"\"\n        l = []\n        for i in lists:\n            l.append(len(i))\n        l.sort()\n        return l[-1]\n\nif __name__ == '__main__':\n    Solution().findMaxLength([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
    "import timeit\n\nstart = timeit.default_timer()\n\ndef max_len(nums):\n    max_len = -1\n    for i in range(len(nums)):\n        if len(nums[i]) > max_len:\n            max_len = len(nums[i])\n    return max_len\n\nprint(timeit.default_timer() - start)",
    "def find_max_list(arr):\n    \"\"\"\n    Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Output:\n    max_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    max_list = [0] * len(arr)\n    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                if max_length < len(arr[i:j + 1]):\n                    max_list = arr[i:j + 1]\n                    max_length = len(arr[i:j + 1])\n    return max_list\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    max_list = find_max_list(arr)\n    print(max_list)\n    print(max_length)",
    "def max_list_length(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return max_length(arr, arr.__len__)\n\ndef max_length(arr, len):\n    if len == 0:\n        return [[]]\n    if len == 1:\n        return [[arr[0]]]\n    if len > arr.__len__:\n        return [[]]\n    max_length = [[]]\n    for i in range(len - 1):\n        max_length = max_length + max_list_length(arr[i:])\n    max_length = max_length + max_list_length(arr[:len - 1])\n    return max_length",
    "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def maxLengthOfList(self, head: ListNode) -> int:\n        max_len = 0\n        while head:\n            head = self.find_max_length(head)\n            max_len = max(max_len, len(self.get_list(head)))\n        return max_len\n\n    def find_max_length(self, node):\n        if not node:\n            return None\n        max_len = 1\n        while node.next:\n            max_len = max(max_len, len(self.get_list(node.next)))\n            node = node.next\n        return node\n\n    def get_list(self, node):\n        res = []\n        while node:\n            res.append(node.val)\n            node = node.next\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    a = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11, ListNode(12, ListNode(13, ListNode(14, ListNode(15, ListNode(16, ListNode(17, ListNode(18, ListNode(19, ListNode(20, ListNode(21, ListNode(22, ListNode(23, ListNode(24, ListNode(25, ListNode(26, ListNode(27, ListNode(28, ListNode(29, ListNode(30, ListNode(31, ListNode(32, ListNode(33, ListNode(34, ListNode(35, ListNode(36, ListNode(37, ListNode(38, ListNode(39, ListNode(40, ListNode(41, ListNode(42, ListNode(43, ListNode(44, ListNode(45, ListNode(46, ListNode(47, ListNode(48, ListNode(49, ListNode(50, ListNode(51,",
    "# https://oj.leetcode.com/problems/maximum-subarray/\n\nclass Solution:\n    # @param nums: A list of integers\n    # @return: A list of lists of length-k integers\n    def maxSubArray(self, nums):\n        # write your code here\n        n = len(nums)\n        if n == 0:\n            return []\n\n        m = [[0]*k for k in range(n)]\n\n        for i in range(n):\n            m[i][0] = nums[i]\n\n        for j in range(1, n):\n            for i in range(n-j):\n                m[i][j] = max(m[i][j-1] + nums[i+j], m[i+1][j-1] + nums[i+j])\n\n        max_subarray = []\n        for k in range(n):\n            max_subarray.append(max(m[0][k], m[k][n-1]))\n\n        return max_subarray\n\n\nif __name__ == \"__main__\":\n    print Solution().maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4])",
    "# https://www.hackerrank.com/challenges/max-length-of-lists\n# https://www.hackerrank.com/challenges/max-length-of-lists-2\n\ndef max_length_lists(arr):\n    if len(arr) == 0:\n        return []\n\n    max_length = [len(arr[0])]\n    for i in range(1, len(arr)):\n        max_length.append(max(max_length[i-1], len(arr[i])))\n\n    return max_length"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}