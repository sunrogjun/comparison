{
  "problem": {
    "task_id": "MBPP/286",
    "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
    "test_list": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ],
    "challenge_test_list": [],
    "problem_id": 275
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def largestSumAfterKNearbyK(self, nums, k, k_):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type k_: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        for i in range(k_):\n            if i == 0:\n                for j in range(k):\n                    sum += nums[j]\n            else:\n                sum += max(nums[j] for j in range(i, k_))\n        return sum\n\n\"\"\"\nTesting\n\"\"\"\nimport sys\nsys.path.append(\"..\")\nimport TestUtil\n\nTestUtil.test(__file__, Solution)",
    "# https://www.hackerrank.com/challenges/max-sum-subarray\n\n# Time complexity: O(n^2)\n# Space complexity: O(n^2)\n\n# My solution\n\ndef maxSum(arr, k):\n    # base case\n    if k == 1:\n        return arr[0]\n    # base case\n    if len(arr) == 0:\n        return 0\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    # base case\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    # base case\n    if len(arr) == 3:\n        return max(arr[0] + arr[1], arr[2] + arr[0])\n    # base case\n    if len(arr) == 4:\n        return max(arr[0] + arr[1], arr[2] + arr[1], arr[3] + arr[2])\n    # base case\n    if len(arr) == 5:\n        return max(arr[0] + arr[1], arr[2] + arr[1], arr[3] + arr[1], arr[4] + arr[2])\n    # base case\n    if len(arr) == 6:\n        return max(arr[0] + arr[1], arr[2] + arr[1], arr[3] + arr[1], arr[4] + arr[1], arr[5] + arr[2])\n    # base case\n    if len(arr) == 7:\n        return max(arr[0] + arr[1], arr[2] + arr[1], arr[3] + arr[1], arr[4] + arr[1], arr[5] + arr[1], arr[6] + arr[2])\n    # base case\n    if len(arr) == 8:\n        return max(arr[0] + arr[1], arr[2] + arr[1], arr[3] + arr[1], arr[4] + arr[1], arr[5] + arr[1], arr[6] + arr[1], arr[7] + arr[2])\n    #",
    "class Solution(object):\n    def largestSumOfContiguousSubarray(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # use dp\n        # max_sum = 0\n        # max_sum_pos = 0\n        # max_sum_len = 0\n        # max_sum_len_pos = 0\n        # for i in range(len(A)):\n        #     cur_sum = 0\n        #     cur_sum_pos = 0\n        #     cur_sum_len = 0\n        #     cur_sum_len_pos = 0\n        #     for j in range(i, len(A)):\n        #         cur_sum += A[j]\n        #         cur_sum_pos += 1\n        #         cur_sum_len += 1\n        #         cur_sum_len_pos += 1\n        #         if cur_sum_len > max_sum_len:\n        #             max_sum_len = cur_sum_len\n        #             max_sum_len_pos = cur_sum_len_pos\n        #         if cur_sum_pos > max_sum_pos:\n        #             max_sum_pos = cur_sum_pos\n        #         if cur_sum > max_sum:\n        #             max_sum = cur_sum\n        #         if cur_sum_pos > max_sum_pos:\n        #             max_sum_pos = cur_sum_pos\n        #         if cur_sum_len > max_sum_len:\n        #             max_sum_len = cur_sum_len\n        #         if cur_sum_len_pos > max_sum_len_pos:\n        #             max_sum_len_pos = cur_sum_len_pos\n        #     if cur_sum > max_sum:\n        #         max_sum = cur_sum\n        #     if cur_sum_pos > max_sum_pos:\n        #         max_sum_pos = cur_sum_pos\n        #     if cur_sum_len > max_sum_len:\n        #         max_sum",
    "# Definition for an array of integers\nclass NumArray(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.max_sum = 0\n        self.max_index = 0\n\n    def sum(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        self.max_sum = 0\n        self.max_index = 0\n        for i in range(len(self.nums)):\n            self.max_sum = max(self.max_sum, self.nums[i] + self.sum(i + 1))\n        return self.max_sum\n\n\nclass Solution(object):\n    def largestSumAfter(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums = [0] * k\n        nums[0] = 1\n        for i in range(1, k):\n            nums[i] = nums[i - 1] + nums[i - 1]\n        return self.largestSum(nums)\n\n    def largestSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max_sum = nums[0]\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > max_sum:\n                max_sum = nums[i]\n                max_index = i\n        return max_sum + nums[max_index]",
    "import math\n\n\ndef solution(a):\n    n = len(a)\n    if n == 0:\n        return 0\n    k = 1\n    max_sum = 0\n    while k <= n:\n        sum_of_k_element = a[0]\n        for i in range(1, k):\n            sum_of_k_element += a[i]\n        max_sum = max(max_sum, sum_of_k_element)\n        k *= k\n    return max_sum\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    print(solution(a))",
    "# import time\n# import random\nimport math\nfrom typing import List\n\ndef find_max_sum_repeated(arr: List[int], k: int) -> int:\n    max_sum = 0\n    # dp[i][k] = max sum in the array formed by repeating the given array k times\n    # dp[0][k] = arr[0]\n    # dp[i][k] = max(dp[i-1][k], dp[i-1][k-1]) + arr[i]\n    for i in range(k):\n        max_sum = max(max_sum, arr[i])\n        max_sum = max(max_sum, arr[i] + dp[i][k-1])\n    return max_sum\n\ndef test_find_max_sum_repeated():\n    assert find_max_sum_repeated([1,2,3,4,5], 2) == 10\n    assert find_max_sum_repeated([1,2,3,4,5], 3) == 15\n    assert find_max_sum_repeated([1,2,3,4,5], 4) == 25\n    assert find_max_sum_repeated([1,2,3,4,5], 5) == 25\n\nif __name__ == '__main__':\n    # start_time = time.time()\n    # test_find_max_sum_repeated()\n    # print(time.time() - start_time)\n    test_find_max_sum_repeated()",
    "def find_largest_sum_of_contiguous_array(sorted_array, k):\n    \"\"\"\n    :type sorted_array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for i in range(0, len(sorted_array)):\n        if i < k:\n            continue\n        max_sum = max(max_sum, sorted_array[i])\n        for j in range(i, len(sorted_array)):\n            if j >= k:\n                break\n            max_sum = max(max_sum, sorted_array[j] + sorted_array[i-j])\n    return max_sum\n\nif __name__ == \"__main__\":\n    print(find_largest_sum_of_contiguous_array([-2, -3, -4, -1, 0], 3))",
    "# https://www.hackerrank.com/challenges/largest-sum-contiguous/problem\n\ndef largest_sum_contiguous(arr, k):\n    max_sum = 0\n    max_sum_index = 0\n    for i in range(len(arr)):\n        temp_sum = arr[i]\n        for j in range(i, k):\n            temp_sum += arr[i+j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_index = i\n    return max_sum, max_sum_index\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    max_sum, max_sum_index = largest_sum_contiguous(arr, k)\n    print(max_sum, max_sum_index)",
    "# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n\n# I have the idea that we can write a function to do this, but we can't use the index because we don't have a large enough array to make it work.\n# Also, I think the best way to do this is to use a dynamic programming approach.\n# Let's start with the case when we have just one element.\n\ndef find_max_sum(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\n# We can use the dynamic programming approach.\n# I am going to use a very simple approach.\n\n# We can write a function which returns the max sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n# We can use the dynamic programming approach to solve this problem.\n\n# First, we need to create a helper function which takes an array and a value and returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef find_max_sum_helper(arr, value):\n    \"\"\"\n    :type arr: List[int]\n    :type value: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return value\n\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i",
    "import numpy as np\n\ndef largest_contiguous_array(arr, k):\n    \"\"\"\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        max_sum_cur = 0\n        for j in range(i, n):\n            if j - i >= k:\n                max_sum_cur += arr[j]\n        max_sum = max(max_sum, max_sum_cur)\n    return max_sum\n\ndef largest_contiguous_array_2(arr, k):\n    \"\"\"\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        max_sum_cur = 0\n        for j in range(i, n):\n            if j - i >= k:\n                max_sum_cur += arr[j]\n            elif j - i < k:\n                max_sum_cur += arr[j]\n        max_sum = max(max_sum, max_sum_cur)\n    return max_sum\n\ndef largest_contiguous_array_3(arr, k):\n    \"\"\"\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        max_sum_cur = 0\n        for j in range(i, n):\n            if j - i >= k:\n                max_sum_cur += arr[j]\n            elif j - i < k:\n                max_sum_cur += arr[j]\n            else:\n                max_sum_cur += arr[j]\n        max_sum = max(max_sum, max_sum_cur)\n    return max_sum\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,",
    "# @include\ndef largest_sum_of_contiguous_subarray(arr, k):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(k):\n            max_sum = max(max_sum, arr[i] + arr[j + i])\n    return max_sum\n# @exclude\n\n\ndef main():\n    # 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # 5, 7, 8, 9, 10, 10, 10, 10, 10\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 2\n    print(largest_sum_of_contiguous_subarray(arr, k))\n    # 5, 7, 8, 9, 10, 10, 10, 10, 10\n    # 5, 7, 7, 7, 7, 7, 7, 7, 7\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def largestSumContiguous(self, nums, k):\n        nums.sort()\n        max_sum = 0\n        for i in range(k):\n            curr_sum = 0\n            for j in range(i+1, len(nums)):\n                curr_sum += nums[j]\n                max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.largestSumContiguous([1,2,3,4,5], 3))",
    "def largest_sum(arr, k):\n    res = 0\n    for i in range(k):\n        res = max(res, arr[:i+1] + arr[i:])\n    return res\n\nprint(largest_sum([1,2,3,4,5,6,7,8,9,10], 3))\nprint(largest_sum([1,2,3,4,5,6,7,8,9,10], 4))\nprint(largest_sum([1,2,3,4,5,6,7,8,9,10], 5))\nprint(largest_sum([1,2,3,4,5,6,7,8,9,10], 6))\nprint(largest_sum([1,2,3,4,5,6,7,8,9,10], 7))",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def largestSumOfContiguousSubarray(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        max_sum = 0\n        for i in xrange(len(A)):\n            curr_sum = A[i]\n            for j in xrange(i):\n                curr_sum += A[j]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n            if i == len(A)-1:\n                curr_sum += A[i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n        return max_sum",
    "\"\"\"\nExample 1:\n\nInput:\n    [1,1,1,1,1]\n    k = 3\nOutput:\n    10\n\nExplanation:\n    The modified array is:\n    [1,1,1,1,1,1,1,1,1,1]\n    The largest sum is 10.\n    \nExample 2:\n\nInput:\n    [1,2,3,4,5]\n    k = 3\nOutput:\n    15\n\nExplanation:\n    The modified array is:\n    [1,2,3,4,5,1,2,3,4,5]\n    The largest sum is 15.\n\"\"\"\n\nclass Solution(object):\n    def findMaxSum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in xrange(k):\n            ans = max(ans, self.findMaxSum(arr, k-1))\n        for i in xrange(k):\n            ans = max(ans, self.findMaxSum(arr, k-1))\n        return ans\n\n# test\nassert Solution().findMaxSum([1,2,3,4,5], 3) == 15\nassert Solution().findMaxSum([1,2,3,4,5], 2) == 10\nassert Solution().findMaxSum([1,2,3,4,5], 1) == 10\nassert Solution().findMaxSum([1,2,3,4,5], 0) == 10\nassert Solution().findMaxSum([1,2,3,4,5], -1) == 10\nassert Solution().findMaxSum([1,2,3,4,5], -2) == 10\nassert Solution().findMaxSum([1,2,3,4,5], -3) == 10\nassert Solution().findMaxSum([1,2,3,4,5], -4) == 10\nassert Solution().findMaxSum([1,2,3,4,5], -5) == 10",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def largestSum(self, arr: List[Interval], k: int) -> int:\n        ret = 0\n        for i in range(k):\n            ret = max(ret, self.findMaxSum(arr))\n        return ret\n\n    def findMaxSum(self, arr):\n        max_sum = 0\n        for i in range(len(arr)):\n            max_sum = max(max_sum, arr[i].start + arr[i].end)\n        return max_sum\n\n\n# Note:\n# This is a solution of the problem, but it's not the best one.\n# To get the best solution, you need to change the logic in findMaxSum() function to check whether the sum of the intervals is the sum of the k-th times.\n# The logic is:\n# 1. If the sum is the sum of the k-th times, then we can get the answer.\n# 2. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 3. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 4. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 5. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 6. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 7. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 8. If the sum is not the sum of the k-th times, then we need to go through the array and find the max sum of all the intervals.\n# 9. If",
    "# https://leetcode.com/problems/largest-sum-of-contiguous-array/\n\nclass Solution(object):\n    def largestSumOfContiguousSubarray(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        def largest_sum(s, i):\n            res = 0\n            while i < len(s):\n                res = max(res, s[i] + largest_sum(s, i+1))\n                i += 1\n            return res\n        return largest_sum(A, 0)\n\n# Note:\n# 1. The input array is repeated k times\n# 2. The input array is sorted",
    "class Solution(object):\n    def maxSumOfContiguousSubarray(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if len(arr) == 0 or len(arr) < k:\n            return 0\n        \n        ans = arr[0]\n        for i in range(1, len(arr)):\n            ans = max(ans, arr[i] + arr[i-1])\n            \n        for i in range(len(arr)-1, 0, -1):\n            ans = max(ans, arr[i] + arr[i-k])\n        \n        return ans",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def largestSum(self, arr: List[int], k: int) -> int:\n        ans = 0\n        if k == 1:\n            for i in range(len(arr)):\n                ans += arr[i]\n            return ans\n\n        max_ans = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[j] - arr[i] > max_ans:\n                    max_ans = arr[j] - arr[i]\n            ans += max_ans\n        return ans\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(Solution().largestSum(arr, 3))",
    "# https://leetcode.com/problems/largest-sum-of-contiguous-subarray/\n\n# https://leetcode.com/problems/largest-sum-of-contiguous-subarray/solution/\n\nclass Solution(object):\n    def maxSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return max(nums)\n        \n        i = 0\n        while i < len(nums):\n            if i+k-1 < len(nums):\n                if nums[i] < nums[i+k-1]:\n                    return max(nums[i:i+k])\n            i += k\n        return max(nums)",
    "import math\nimport time\n\nstart = time.time()\n\ndef largest_sum_in_array(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    arr = sorted(arr)\n    l, r = 0, len(arr) - 1\n    while l < r:\n        sum = arr[l] + arr[r]\n        if sum < 0:\n            r -= 1\n        else:\n            l += 1\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum < 0:\n            r -= 1\n        else:\n            l += 1\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] + arr[r]\n        if sum > 0:\n            r -= k\n            l += k\n            sum = arr[l] +",
    "# https://www.hackerrank.com/challenges/largest-sum-of-contiguous-array/problem\n# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef find_largest_sum(arr, k):\n    largest_sum = 0\n    for i in range(k):\n        current_sum = 0\n        for j in range(len(arr)):\n            current_sum += arr[j]\n            if current_sum > largest_sum:\n                largest_sum = current_sum\n    return largest_sum\n\n# Test Cases\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 2\n# result = 18\n# expected = 18\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 3\n# result = 54\n# expected = 54\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 4\n# result = 243\n# expected = 243\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 5\n# result = 1236\n# expected = 1236\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 6\n# result = 3162\n# expected = 3162\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 7\n# result = 5424\n# expected = 5424\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 8\n# result = 243\n# expected = 243\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 9\n# result = 1236\n# expected = 1236\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 10",
    "# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n\n# https://www.hackerearth.com/practice/algorithms/searching/sort/\n# https",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Author: Patrick D. Canfield\n\n#\n# Usage:\n#    python find_largest_sum_of_contiguous_array_k_times.py\n#\n\ndef largest_sum_of_contiguous_array_k_times(arr, k):\n    \"\"\"\n    Find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\n    :param arr: array to be modified\n    :param k: number of times the given array is repeated\n    :return: the largest sum of contiguous array in the modified array which is formed by repeating the given array k times\n    \"\"\"\n\n    # Create a list of the sum of the largest contiguous subarray in the original array\n    largest_sum_of_subarray = [0] * len(arr)\n    for i in range(len(arr)):\n        if i == 0 or arr[i - 1]!= arr[i]:\n            # If the current element is not the first element of the array or is not equal to the previous element\n            largest_sum_of_subarray[i] = arr[i] + largest_sum_of_subarray[i - 1]\n        else:\n            # If the current element is the first element of the array\n            largest_sum_of_subarray[i] = max(largest_sum_of_subarray[i - 1], arr[i])\n\n    # Calculate the sum of the largest contiguous subarray of the modified array\n    largest_sum_of_subarray_modified = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i - 1]!= arr[i]:\n            largest_sum_of_subarray_modified += largest_sum_of_subarray[i]\n    return largest_sum_of_subarray_modified\n\nif __name__ == \"__main__\":\n    # Test the function with a small test array\n    arr = [5, 6, 7, 8]\n    k = 2\n    print(largest_sum_of_contiguous_array_k_times(arr, k))",
    "import time\nstart_time = time.time()\n\ndef find_largest_sum(a, k):\n    res = 0\n    for i in range(k):\n        res += a[0]\n        a.append(a[0])\n        a = a[1:]\n    res += a[0]\n    return res\n\n# Your code here\ndef find_largest_sum_1(a, k):\n    res = 0\n    for i in range(k):\n        res += a[0]\n        a.append(a[0])\n        a = a[1:]\n    return res + a[0]\n\nprint \"Time taken:\", time.time() - start_time\n\n#print find_largest_sum(range(1,10), 4)\n#print find_largest_sum(range(1,10), 3)\n#print find_largest_sum(range(1,10), 2)\n#print find_largest_sum(range(1,10), 1)\n#print find_largest_sum(range(1,10), 0)\n\nprint find_largest_sum_1(range(1,10), 4)\nprint find_largest_sum_1(range(1,10), 3)\nprint find_largest_sum_1(range(1,10), 2)\nprint find_largest_sum_1(range(1,10), 1)\nprint find_largest_sum_1(range(1,10), 0)",
    "def get_max_sum(arr, k):\n    max_sum = 0\n    for i in range(k):\n        # print(i, arr[0], arr[1], arr[2], arr[3], arr[4])\n        sum = arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        max_sum = max(max_sum, sum)\n        # print(max_sum)\n        arr = arr[5:]\n    return max_sum\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(get_max_sum(arr, 3))",
    "from math import ceil\n\ndef largest_sum_of_contiguous_array_in_k_times_array(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    largest_sum = 0\n    for i in range(0, len(array) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum += array[j]\n        if curr_sum > largest_sum:\n            largest_sum = curr_sum\n    return largest_sum\n\nclass Solution(object):\n    def largestSumOfContiguousArray(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 0\n        largest_sum = 0\n        for k in range(1, ceil(n / 2) + 1):\n            largest_sum = max(largest_sum, largest_sum_of_contiguous_array_in_k_times_array(n, k))\n        return largest_sum",
    "# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm/largest-sum-of-contiguous-array-in-the-modified-array/\n# https://www.hackerearth.com/problem/algorithm",
    "class Solution(object):\n    def largestSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, self.sum_subarray(nums, i))\n        return max_sum\n        \n    def sum_subarray(self, nums, start):\n        sum = 0\n        end = start\n        for i in range(start, len(nums)):\n            sum = sum + nums[i]\n            if sum > 0:\n                end = i\n            else:\n                break\n        return sum + nums[start]",
    "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def getLargestSum(self, head, k):\n        if not head or not k:\n            return head\n        \n        # the first element of the first list\n        curr = head\n        \n        # the last element of the last list\n        last = head\n        \n        # the length of the longest list\n        length = 1\n        \n        # the sum of the largest list\n        sum = 0\n        \n        while curr and last:\n            # get the next list\n            next = curr.next\n            \n            # get the length of the list\n            length += 1\n            \n            # get the sum of the list\n            sum += curr.val\n            \n            # get the next list\n            curr = next\n            \n            # the sum of the largest list\n            if sum > sum:\n                # update the largest sum\n                sum = sum\n                \n                # update the last list\n                last = curr\n            \n            # the length of the longest list\n            if length > length:\n                # update the length of the longest list\n                length = length\n                \n                # update the last list\n                last = curr\n        \n        # the largest sum of the largest list\n        return sum",
    "class Solution:\n    # @param nums, a list of integer\n    # @param k, an integer\n    # @return an integer\n    def largestSumOfContiguousSubarray(self, nums, k):\n        n = len(nums)\n        if n == 0:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, nums[i] + nums[i - 1] * k)\n        return max_sum\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.largestSumOfContiguousSubarray([1, 2, 3, 4, 5, 6], 2)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1], 2)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1], 3)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1], 4)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1], 5)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1], 6)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1, 1], 7)\n    print s.largestSumOfContiguousSubarray([1, 1, 1, 1, 1, 1, 1, 1, 1], 8)",
    "#!/usr/bin/env python\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def largestSumOfContiguousSubarray(self, nums, k):\n        max_sum = -2147483647\n        for i in range(k):\n            max_sum = max(max_sum, self.find_max_sum_of_subarray(nums))\n        return max_sum\n\n    def find_max_sum_of_subarray(self, nums):\n        max_sum = 0\n        for i in range(len(nums)):\n            max_sum = max(max_sum, nums[i] + self.find_max_sum_of_subarray(nums[i+1:]))\n        return max_sum\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.largestSumOfContiguousSubarray([-2, 0, -3, 4, -1, 2, 1, -5, 4], 3)",
    "# Example 1\n# Input:\n#  [[0,1,0,0,0],\n#   [1,1,1,0,0],\n#   [0,1,1,1,0],\n#   [1,1,0,1,1],\n#   [1,1,1,1,1]]\n#  k = 2\n# Output:\n#  5\n# Explanation:\n# The sum of the contiguous array [0, 1, 0, 0, 0] is 5.\n# The sum of the contiguous array [1, 1, 1, 0, 0] is 10.\n# The sum of the contiguous array [1, 1, 0, 1, 1] is 4.\n# The sum of the contiguous array [1, 1, 1, 1, 1] is 6.\n# The sum of the contiguous array [0, 1, 1, 1, 1] is 4.\n\n# Example 2\n# Input:\n#  [[0,1,0,0,0],\n#   [1,1,1,0,0],\n#   [0,1,1,1,0],\n#   [1,1,0,1,1],\n#   [1,1,1,1,1]]\n#  k = 3\n# Output:\n#  7\n# Explanation:\n# The sum of the contiguous array [0, 1, 0, 0, 0] is 7.\n# The sum of the contiguous array [1, 1, 1, 0, 0] is 9.\n# The sum of the contiguous array [1, 1, 0, 1, 1] is 5.\n# The sum of the contiguous array [1, 1, 1, 1, 1] is 7.\n# The sum of the contiguous array [0, 1, 1, 1, 1] is 4.\n\n# Note:\n# The length of the given array will not exceed 1000.\n# The given array will have at least one element.\n# The sum of each element in the given array will not exceed 1000.\n\n# Note:\n# k will be a positive integer in the range [1, 10,000].\n\n# Related Topics\n# Array\n\nclass Solution(object):\n    def largestSumAfterKRepeats(self, arr",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n# We can have the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n# We can consider the following example:\n#\n#     1\n#    / \\\n#   2   3\n#  / \\   \\\n# 4   5   6\n#\n# If we repeat the given array 3 times, the largest sum of contiguous array will be 6.\n# The following example shows the modified array:\n#\n#    1\n#   / \\\n#  2   3\n#   \\   \\\n#   4   5\n#   / \\   \\\n#  6   7   8\n#\n# We can repeat the given array 3 times to get the largest sum of contiguous array:\n#\n#    1\n#   / \\\n#  2   3\n#   \\   \\\n#   4   5\n#   \\   \\\n#   6   7\n#   \\   \\\n#   8   9\n#\n# Now we repeat the given array 3 times to get the largest sum of contiguous array:\n#\n#    1\n#   / \\\n#  2   3\n#   \\   \\\n#   4   5\n#   \\   \\\n#   6   7\n#   \\   \\\n#   8   9\n#   \\   \\\n#   10  11\n#   \\   \\\n#   12  13\n#   \\   \\\n#   14  15\n#   \\   \\\n#   16  17\n#   \\   \\\n#   18  19\n#   \\   \\\n#   20  21\n#   \\   \\\n#   22  23\n#   \\   \\\n#   24  25\n#   \\   \\\n#   26  27\n#   \\   \\\n#   28  29\n#   \\   \\\n#   30  31\n#   \\   \\\n#   32  33\n#   \\   \\\n#   34  35\n#   \\   \\\n#   36  37\n#",
    "class Solution(object):\n    def largestSumOfContiguousSubarray(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(A) == 0 or k == 0:\n            return 0\n        if len(A) == 1:\n            return A[0]\n        l = A[0]\n        r = A[0]\n        for i in xrange(1, len(A)):\n            if A[i] > A[i-1]:\n                r += A[i]\n            else:\n                l = max(l, r)\n                r = A[i]\n        return max(l, r)",
    "#!/usr/bin/env python\n\n# This is a solution using the recursive approach.\ndef findMaxSum(arr, k):\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # base case\n    if len(arr) == k:\n        return max(arr)\n    \n    # recursive case\n    maxSum = findMaxSum(arr[1:], k)\n    maxSum += arr[0]\n    return max(maxSum, findMaxSum(arr[1:], k))\n\n# This is a solution using the iterative approach.\ndef findMaxSumIter(arr, k):\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # base case\n    if len(arr) == k:\n        return max(arr)\n    \n    # iterative approach\n    maxSum = findMaxSumIter(arr[1:], k)\n    maxSum += arr[0]\n    return max(maxSum, findMaxSumIter(arr[1:], k))\n\n# This is a solution using the dynamic programming approach.\ndef findMaxSumDP(arr, k):\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # base case\n    if len(arr) == k:\n        return max(arr)\n    \n    # dynamic programming approach\n    maxSum = max(arr)\n    for i in range(1, k):\n        maxSum = max(maxSum, arr[i] + findMaxSumDP(arr[i:], k))\n    return max(maxSum, findMaxSumDP(arr[1:], k))\n\n# This is a solution using the dynamic programming approach.\ndef findMaxSumDP2(arr, k):\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # base case\n    if len(arr) == k:\n        return max(arr)\n    \n    # dynamic programming approach\n    maxSum = max(arr)\n    for i in range(1, k):\n        maxSum = max(maxSum, arr[i] + find",
    "#!/usr/bin/env python\n\nimport sys\n\ndef largest_sum_contiguous(arr, k):\n    max_sum = 0\n    for i in range(k):\n        current_sum = 0\n        for j in range(i, len(arr)):\n            current_sum += arr[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9]\n    k = 2\n    print largest_sum_contiguous(arr, k)\n    \n    arr = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]\n    k = 3\n    print largest_sum_contiguous(arr, k)\n\nif __name__ == '__main__':\n    main()",
    "\"\"\"\nFor example,\nGiven the array A = {1, 12, 13, 14, 15, 16, 17}\nThe modified array is {1, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17}\n\nGiven the array A = {1, 12, 13, 14, 15, 16, 17}\nThe modified array is {1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17}\n\nGiven the array A = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}\nThe modified array is {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "import unittest\n\n# @include\ndef find_largest_sum_of_contiguous_array_in_modified_array(modified_array):\n    # Return the largest sum of contiguous array in modified_array.\n    # This is an O(n) algorithm.\n    n = len(modified_array)\n    max_sum = 0\n    for i in range(n):\n        if i == 0 or modified_array[i - 1]!= modified_array[i]:\n            for j in range(i + 1, n):\n                if j == 0 or modified_array[j - 1]!= modified_array[j]:\n                    max_sum += modified_array[i] * j\n            max_sum = max(max_sum, modified_array[i])\n    return max_sum\n# @exclude\n\n\nclass TestFindLargestSumOfContiguousArray(unittest.TestCase):\n    def test_find_largest_sum_of_contiguous_array_in_modified_array(self):\n        self.assertEqual(5, find_largest_sum_of_contiguous_array_in_modified_array(\n            [0, 0, 0, 1, 0, 1, 2, 0, 1, 1]))\n        self.assertEqual(3, find_largest_sum_of_contiguous_array_in_modified_array(\n            [0, 1, 1, 0, 1, 1, 2, 0, 1, 1]))\n        self.assertEqual(5, find_largest_sum_of_contiguous_array_in_modified_array(\n            [0, 0, 0, 1, 0, 1, 2, 0, 1, 1]))\n        self.assertEqual(3, find_largest_sum_of_contiguous_array_in_modified_array(\n            [0, 0, 0, 1, 0, 1, 2, 0, 1, 1]))\n        self.assertEqual(1, find_largest_sum_of_contiguous_array_in_modified_array(\n            [0, 0, 0, 1, 0, 1, 2, 0, 1, 1]))\n\n\nif __name__ == '__main__':",
    "# Time:  O(n)\n# Space: O(k)\n\nclass Solution:\n    # @param num, a list of integer\n    # @param k, an integer\n    # @return an integer\n    def largestSumOfContinuousSubarray(self, num, k):\n        max_sum, start = 0, 0\n        for i in range(len(num)):\n            for j in range(i, len(num)):\n                if j - start >= k:\n                    max_sum = max(max_sum, num[i] + num[j])\n                    start = j + 1\n        return max_sum",
    "class Solution(object):\n    def findLargestSumOfContiguousSubarrays(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr) <= 1:\n            return 0\n\n        max_sum = arr[0]\n        for k in range(2, len(arr) + 1):\n            sum_of_k_subarrays = 0\n            for i in range(k):\n                sum_of_k_subarrays += arr[i]\n            max_sum = max(max_sum, sum_of_k_subarrays)\n        return max_sum",
    "#!/bin/python\n\n# Definition for an array of integers\nclass Array:\n    def __init__(self, nums):\n        self.nums = nums\n    def __repr__(self):\n        return \"[%s]\" % (\", \".join(map(str, self.nums)))\n\nclass Solution:\n    # @param nums, a list of integers\n    # @param k, the number of times the array will be repeated\n    # @return an integer\n    def largestSumAfterReplication(self, nums, k):\n        result = 0\n        for i in range(k):\n            for j in range(i, len(nums) - k + 1):\n                curr_sum = 0\n                for x in range(i, i + k):\n                    curr_sum += nums[x]\n                if curr_sum > result:\n                    result = curr_sum\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.largestSumAfterReplication([1,2,3], 2)\n    print s.largestSumAfterReplication([1,2,3,4], 3)\n    print s.largestSumAfterReplication([1,2,3,4,5], 3)",
    "import numpy as np\n\ndef solution(A):\n    \"\"\"\n    :param A: input array\n    :return: the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return 0\n    k = 1\n    max_sum = 0\n    while k <= n:\n        sum = 0\n        for i in range(n):\n            sum += A[i]\n        if sum > max_sum:\n            max_sum = sum\n        k += 1\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5]\n    print solution(A)",
    "# Definition for an array.\nclass Array(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.max_sum = 0\n        self.max_sum_idx = 0\n        self.max_sum_start = 0\n\n    def max_sum_recursion(self, nums, start, end):\n        if start == end:\n            self.max_sum = max(self.max_sum, nums[start])\n            return\n\n        mid = (start + end) / 2\n        self.max_sum_recursion(nums, start, mid)\n        self.max_sum_recursion(nums, mid + 1, end)\n        self.max_sum_recursion(nums, start, mid)\n\n    def max_sum_iter(self, nums, start, end):\n        if start == end:\n            self.max_sum = max(self.max_sum, nums[start])\n            return\n\n        mid = (start + end) / 2\n        self.max_sum_iter(nums, start, mid)\n        self.max_sum_iter(nums, mid + 1, end)\n        self.max_sum_iter(nums, start, mid)\n\n    def max_sum_dp(self, nums, start, end):\n        if start == end:\n            self.max_sum = max(self.max_sum, nums[start])\n            return\n\n        mid = (start + end) / 2\n        self.max_sum_dp(nums, start, mid)\n        self.max_sum_dp(nums, mid + 1, end)\n        self.max_sum_dp(nums, start, mid)\n\n    def max_sum(self):\n        self.max_sum_recursion(self.nums, 0, len(self.nums) - 1)\n        self.max_sum_iter(self.nums, 0, len(self.nums) - 1)\n        self.max_sum_dp(self.nums, 0, len(self.n",
    "# https://leetcode.com/problems/largest-sum-of-contiguous-subarray-equal-to-k-after-modifying-array/\n\nclass Solution(object):\n    def largestContiguousSubarray(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        max_sum = 0\n        for i in range(len(arr)):\n            if arr[i] == k:\n                max_sum += arr[i]\n                for j in range(i, len(arr) - 1):\n                    if arr[j] + arr[j + 1] == k:\n                        max_sum += arr[j]\n                        break\n            else:\n                break\n        for j in range(len(arr) - 1, 0, -1):\n            if arr[j] == k:\n                max_sum += arr[j]\n                for i in range(j, 0, -1):\n                    if arr[i] + arr[i - 1] == k:\n                        max_sum += arr[i]\n                        break\n            else:\n                break\n        return max_sum",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def getMaxSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if k <= 1:\n            return max(nums)\n        res = 0\n        for i in range(k):\n            res = max(res, self.getMaxSum(nums[i:], k-i))\n        return max(res, self.getMaxSum(nums[:k], k))\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -1, -2, 3]\n    k = 3\n    print(Solution().getMaxSum(nums, k))",
    "class Solution(object):\n    def maxSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        result = 0\n        for i in range(k):\n            result = max(result, sum(nums[i:k+i]))\n        return result",
    "def largest_sum_with_rep(arr, k):\n    max_sum = -1\n    for i in range(k):\n        max_sum = max(max_sum, sum(arr[:i]))\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print largest_sum_with_rep(arr, k)",
    "# https://www.hackerrank.com/challenges/largest-sum-of-contiguous-array/problem\n\n# Complete the function below.\ndef largestSumOfContiguousArray(arr):\n    max_sum = 0\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            for j in range(i, len(arr)):\n                if arr[j] == 1:\n                    cur_sum = arr[j] * (j - i + 1)\n                    if cur_sum > max_sum:\n                        max_sum = cur_sum\n                        max_index = j\n    return max_sum, max_index\n\n\n\narr = [1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def maxSubArray(self, nums, k):\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        max_sum_i = 0\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n            max_sum_i = max(max_sum_i, max_sum)\n        return max_sum_i\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    print Solution().maxSubArray(nums, 2)\n    nums = [1,2,3,4,5]\n    print Solution().maxSubArray(nums, 3)\n    nums = [1,2,3,4,5]\n    print Solution().maxSubArray(nums, 4)\n    nums = [1,2,3,4,5]\n    print Solution().maxSubArray(nums, 5)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 1)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 2)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 3)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 4)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 5)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print Solution().maxSubArray(nums, 6)\n    nums = [1,2,",
    "#!/usr/bin/env python\n\n\"\"\"\nInput:\n[1, 2, 3, 4]\nk = 3\nOutput:\n10\n\"\"\"\n\ndef get_max_sum(array, k):\n    if not array or not k:\n        return 0\n\n    result = 0\n    for i in xrange(len(array)):\n        if i == 0:\n            result += array[i]\n        else:\n            result += array[i] * k\n\n    return result\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    k = 3\n\n    print get_max_sum(array, k)\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    k = 3",
    "def get_max_sum(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for i in range(k):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n\n# Time:  O(k * len(arr))\n# Space: O(1)\n# Kadane's Algorithm\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#\n# class Solution(object):\n#     def maxSumSubarray(self, arr, k):\n#         \"\"\"\n#         :type arr: List[int]\n#         :type k: int\n#         :rtype: int\n#         \"\"\"\n#         max_sum = 0\n#         for i in range(k):\n#             curr_sum = 0\n#             for j in range(i, len(arr)):\n#                 curr_sum += arr[j]\n#                 if curr_sum > max_sum:\n#                     max_sum = curr_sum\n#         return max_sum\n\nclass Solution(object):\n    def maxSumSubarray(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        max_sum = 0\n        max_i = 0\n        for i in range(k):\n            curr_sum = 0\n            for j in range(i, len(arr)):\n                curr_sum += arr[j]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n                    max_i = i\n            if max_sum == 0:\n                break\n        return max_sum",
    "def find_max_sum_of_contiguous_array(a, k):\n    return sum(a[i:i+k] for i in range(0, len(a)-k+1))\n\n# test cases\na = [1,2,3,4,5,6,7,8,9]\nk = 3\nprint(find_max_sum_of_contiguous_array(a, k))",
    "def findLargestSum(arr, k):\n    max = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(k):\n            sum += arr[i]\n        if sum > max:\n            max = sum\n    return max\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    k = 2\n    print findLargestSum(arr, k)",
    "class Solution(object):\n    def maxSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        max_sum = nums[0]\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res + nums[i], nums[i])\n            max_sum = max(max_sum, res)\n\n        for i in range(k):\n            res = nums[0]\n            for j in range(1, len(nums)):\n                res = max(res + nums[j], nums[j])\n                max_sum = max(max_sum, res)\n\n        return max_sum\n\nif __name__ == '__main__':\n    print Solution().maxSumOfContiguousSubarray([1,2,3,4,5], 3)",
    "# https://leetcode.com/problems/largest-sum-of-contiguous-array/discuss/2727/O(n)-time-O(n)-space-solution\nclass Solution:\n    def largestSum(self, arr: List[int], k: int) -> int:\n        max_sum = -sys.maxsize-1\n        \n        for i in range(k):\n            max_sum = max(max_sum, self.max_sum_with_repeated(arr, 0, len(arr)))\n        \n        return max_sum\n    \n    def max_sum_with_repeated(self, arr: List[int], start: int, end: int):\n        max_sum = -sys.maxsize-1\n        \n        for i in range(start, end):\n            max_sum = max(max_sum, self.max_sum_with_repeated_helper(arr, i, 0, end, max_sum))\n        \n        return max_sum\n    \n    def max_sum_with_repeated_helper(self, arr, start, left, right, max_sum):\n        if start == right:\n            return max_sum\n        \n        sum = arr[start]\n        max_sum = max(max_sum, sum)\n        \n        for i in range(left, right):\n            sum += arr[i]\n            max_sum = max(max_sum, sum)\n        \n        return max_sum",
    "def find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k):\n    return max(find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 1),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 2),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 3),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 4),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 5),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 6),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 7),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 8),\n               find_largest_sum_of_contiguous_array_in_the_given_array_which_is_formed_by_repeating_the_given_array_k_times(array, k - 9),\n               find_largest_sum_of_cont",
    "# https://discuss.leetcode.com/topic/50863/java-solution-with-explanation\n# http://www.geeksforgeeks.org/largest-sum-of-contiguous-array-in-given-array-k-times-in-python/\n# https://leetcode.com/problems/largest-sum-of-contiguous-array/\n# https://leetcode.com/problems/largest-sum-of-contiguous-array/solution/\n\nclass Solution(object):\n    def largestContiguousArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        # Find the largest sum of contiguous array\n        max_sum = 0\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum, nums[i-1] + nums[i])\n        return max_sum\n\nclass Solution2(object):\n    def largestContiguousArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_sum = 0\n        cur_sum = 0\n        for i in range(1, len(nums)):\n            cur_sum += nums[i-1]\n            max_sum = max(max_sum, cur_sum)\n            cur_sum = nums[i]\n\n        return max_sum",
    "\"\"\"\nExample 1:\n\nInput:\n    [3,4,5,1,2]\n    k = 3\n\nOutput:\n    15\n\nExplanation:\n    The modified array is [3,4,5,1,2,3,4,5,1,2], and the largest sum is 15.\n\nExample 2:\n\nInput:\n    [3,4,5,1,2]\n    k = 4\n\nOutput:\n    30\n\nExplanation:\n    The modified array is [3,4,5,1,2,3,4,5,1,2], and the largest sum is 30.\n\"\"\"\n\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        max_sum = 0\n        max_sum_index = 0\n        for i in xrange(len(nums)):\n            curr_sum = 0\n            for j in xrange(k):\n                curr_sum += nums[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_sum_index = i\n        return max_sum\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.largestSum([3,4,5,1,2], 3)\n    print solution.largestSum([3,4,5,1,2], 4)",
    "import numpy as np\n\nclass Solution(object):\n    def maxSumOfContiguousSubarrays(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        max_sum = 0\n        for i in range(k, n):\n            max_sum = max(max_sum, arr[i-k] + max_sum)\n        return max_sum\n\nif __name__ == '__main__':\n    arr = [2, 6, 5, 3, 7, 2, 4, 7, 6, 1, 1]\n    k = 3\n    print Solution().maxSumOfContiguousSubarrays(arr, k)",
    "def solution(arr):\n    nums = [0] * len(arr)\n    for i in range(len(arr)):\n        nums[i] = arr[i]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j - i >= 0:\n                nums[j] = max(nums[j], nums[j-i] + arr[i])\n    return max(nums)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print solution(arr)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print solution(arr)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print solution(arr)",
    "import unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(largest_sum_of_contiguous_subarray(range(1, 10)), 10)\n        self.assertEqual(largest_sum_of_contiguous_subarray(range(1, 4)), 4)\n        self.assertEqual(largest_sum_of_contiguous_subarray(range(1, 8)), 8)\n        self.assertEqual(largest_sum_of_contiguous_subarray(range(1, 100)), 100)\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution:\n    # @return an integer\n    def largestSumOfContiguousSubarray(self, A, k):\n        if not A or len(A) <= 1:\n            return 0\n        max_sum = 0\n        for i in range(len(A)):\n            max_sum += A[i]\n            if max_sum < 0:\n                max_sum = 0\n            elif max_sum == 0:\n                continue\n            else:\n                max_sum += A[i]\n                while i + k < len(A) and A[i] == A[i + k]:\n                    max_sum += A[i]\n                    i += k\n        return max_sum",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def largestSumOfContiguousSubarray(self, nums, k):\n        # write your code here\n        n = len(nums)\n        if n == 0 or k == 1:\n            return 0\n        max_sum = 0\n        for i in xrange(k):\n            max_sum = max(max_sum, self.findMaxSum(nums, k, i))\n        return max_sum\n        \n    def findMaxSum(self, nums, k, start):\n        # write your code here\n        if k == 1:\n            return nums[start]\n        max_sum = nums[start]\n        for i in xrange(start, k):\n            max_sum = max(max_sum, nums[i] + self.findMaxSum(nums, k, i+1))\n        return max_sum",
    "# Definition for an array.\n# class Array(object):\n#     def __init__(self, n):\n#         self.n = n\n#         self.max = 0\n#         self.sum = 0\n#         self.dic = {}\n\nclass Solution(object):\n    def largestSum(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return sum(n)\n        res = 0\n        for i in range(k):\n            res += sum(n)\n        return res",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def findLargestSumContiguousSubarray(self, nums, k):\n        res = 0\n        for i in range(k):\n            res = max(res, self.findLargestSumContiguousSubarray(nums, i + 1))\n        return res + nums[0]\n    \n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def findLargestSumContiguousSubarray2(self, nums, k):\n        res = nums[0]\n        for i in range(k):\n            res = max(res, self.findLargestSumContiguousSubarray2(nums, i + 1))\n        return res + nums[0]",
    "class Solution:\n    # @param num, a list of integers\n    # @param k, k times\n    # @return an integer\n    def largestSumContiguous(self, num, k):\n        if not num or len(num) < 2:\n            return 0\n        if not num or len(num) == 1:\n            return num[0]\n        max_sum = -sys.maxint - 1\n        for i in range(k):\n            for j in range(len(num)):\n                if num[j] < 0:\n                    num[j] = 0\n                max_sum = max(max_sum, num[j] + num[j + 1:])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestSumContiguous([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2))\n    print(sol.largestSumContiguous([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3))\n    print(sol.largestSumContiguous([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4))",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        sum_of_k_elements = 0\n        for i in range(k):\n            sum_of_k_elements += nums[0]\n            nums.pop(0)\n        sum_of_all_elements = sum(nums)\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, sum_of_k_elements + nums[0])\n            sum_of_k_elements = sum_of_k_elements + nums[0]\n            nums.pop(0)\n        max_sum = max(max_sum, sum_of_all_elements)\n        return max_sum",
    "class Solution(object):\n    def largestSumOfContiguousSubarray(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(A)\n        sums = [0] * (n+1)\n        for i in range(n):\n            sums[i] = A[i]\n        sums[n] = 0\n        for k in range(1, n+1):\n            for i in range(n-k+1):\n                sums[i] += A[i]\n            sums[n] = max(sums[n], sums[i+k-1])\n        return sums[n]\n\ns = Solution()\nprint s.largestSumOfContiguousSubarray([1,2,3,4,5,6,7])",
    "# https://www.hackerrank.com/contests/w15/challenges/largest-sum-of-contiguous-array\n\ndef largest_sum_of_contiguous_array(nums, k):\n    sum = 0\n    for i in range(k):\n        sum += nums[i]\n    for i in range(k, len(nums)):\n        sum += nums[i]\n        if sum > nums[i - k]:\n            nums[i] = sum\n            sum = 0\n    return nums\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7,8,9]\n    k = 5\n    print(largest_sum_of_contiguous_array(nums, k))",
    "\"\"\"\nExample\nFor example,\n\nInput:\n[\n  [1,2,3,4],\n  [5,6,7,8],\n  [9,10,11,12],\n  [13,14,15,16],\n  [17,18,19,20],\n]\nk = 3\nOutput:\n32\n\"\"\"\n\n\"\"\"\nConstraints:\n\n1 <= k <= 100\n\n\"\"\"\n\nclass Solution:\n    def largestSumOfContiguousSubarray(self, arr: List[int], k: int) -> int:\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n\n        max_sum = arr[0]\n        sum_so_far = arr[0]\n\n        for i in range(1, len(arr)):\n            sum_so_far += arr[i]\n            if sum_so_far == 0:\n                continue\n\n            if sum_so_far > max_sum:\n                max_sum = sum_so_far\n\n            if sum_so_far < 0:\n                sum_so_far = 0\n\n            if sum_so_far == 0:\n                continue\n\n            sum_so_far -= arr[i - 1]\n\n        return max_sum\n\n# Note:\n# The input array is modified.",
    "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n# class Solution:\n#     # @param intervals, a list of Interval\n#     # @return an integer\n#     def largestSumOfContinuousSubarray(self, intervals):\n#         # Write your code here\n#         sums = [0] * len(intervals)\n#         sums[0] = intervals[0].start\n#         for i in xrange(1, len(intervals)):\n#             sums[i] = max(sums[i-1], intervals[i].end)\n#             sums[i] += intervals[i].start\n#         ans = 0\n#         for i in xrange(len(sums)):\n#             ans = max(ans, sums[i])\n#         return ans\n\n# a = [Interval(0, 1), Interval(2, 3), Interval(4, 5), Interval(6, 7)]\n# print Solution().largestSumOfContinuousSubarray(a)\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return an integer\n    def largestSumOfContinuousSubarray(self, intervals):\n        # Write your code here\n        sums = [0] * len(intervals)\n        sums[0] = intervals[0].start\n        for i in xrange(1, len(intervals)):\n            sums[i] = max(sums[i-1], intervals[i].end)\n            sums[i] += intervals[i].start\n        ans = 0\n        for i in xrange(len(sums)):\n            ans = max(ans, sums[i])\n        return ans\n\nif __name__ == \"__main__\":\n    print Solution().largestSumOfContinuousSubarray([Interval(0, 1), Interval(2, 3), Interval(4, 5), Interval(6, 7)])",
    "from math import ceil\n\nclass Solution(object):\n    def largestSumOfContiguousSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums or k < 1:\n            return 0\n        max_sum = 0\n        for i in range(1, len(nums)):\n            max_sum += nums[i]\n            if i < k:\n                max_sum += nums[i - 1]\n            if i >= k:\n                max_sum -= nums[i - k]\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [4, -1, 2, -5]\n    print(Solution().largestSumOfContiguousSubarray(nums, 2))\n    print(Solution().largestSumOfContiguousSubarray(nums, 3))\n    print(Solution().largestSumOfContiguousSubarray(nums, 1))\n    print(Solution().largestSumOfContiguousSubarray(nums, 4))\n    print(Solution().largestSumOfContiguousSubarray(nums, 5))\n    print(Solution().largestSumOfContiguousSubarray(nums, 6))",
    "# https://leetcode.com/problems/largest-sum-of-contiguous-subarray-whose-sum-is-a-multiple-of-k/\n\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        nums.sort()\n        start = 0\n        res = 0\n        for i in range(len(nums)):\n            while start <= i:\n                res += nums[start]\n                start += 1\n            if res > 0:\n                res = 0\n            if i + k - 1 > len(nums) - 1:\n                res += nums[i + k - 1]\n            else:\n                res += nums[i + k - 1] + nums[i + k - 1 + 1]\n        return res",
    "def find_max_sum(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    res = 0\n    for i in range(1, n):\n        curr_sum = arr[i]\n        for j in range(i - 1, -1, -1):\n            curr_sum += arr[j]\n            if curr_sum > res:\n                res = curr_sum\n        arr[i] = curr_sum\n    return res\n\n\nprint(find_max_sum([1,2,3,4,5,6,7,8,9,10,11]))\nprint(find_max_sum([1,1,1,1,1,1,1,1,1,1,1]))",
    "#!/usr/bin/env python\n\nimport math\nimport timeit\n\n\ndef get_max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                sum = arr[i] * (j - i + 1)\n                if sum > max_sum:\n                    max_sum = sum\n    return max_sum\n\n\nif __name__ == '__main__':\n    start_time = timeit.default_timer()\n    print get_max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print \"Time elapsed: {}\".format(timeit.default_timer() - start_time)",
    "#!/usr/bin/python\n\nimport time\nstart_time = time.time()\n\n\ndef solution(arr, k):\n    max_sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if j - i >= k:\n                sum = arr[j] + arr[i]\n                if sum > max_sum:\n                    max_sum = sum\n    return max_sum\n\n\nif __name__ == '__main__':\n    print solution([1, 2, 3, 4, 5, 6], 3)\n    print time.time() - start_time",
    "class Solution(object):\n    def largestSumOfSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, self.sum_of_subarray(nums, k))\n\n        return max_sum\n\n    def sum_of_subarray(self, nums, k):\n        max_sum = 0\n        for i in range(k):\n            max_sum += nums[i]\n            max_sum += nums[i + k - 1]\n        return max_sum\n\n\nif __name__ == '__main__':\n    assert Solution().largestSumOfSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 55",
    "import math\nfrom time import time\n\ndef find_largest_sum_of_contiguous_array(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return max(find_largest_sum_of_contiguous_array_recursive(arr, k), find_largest_sum_of_contiguous_array_iterative(arr, k))\n\ndef find_largest_sum_of_contiguous_array_recursive(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, sum(arr[i:k]))\n    return max_sum\n\ndef find_largest_sum_of_contiguous_array_iterative(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, sum(arr[i:k]))\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    k = 3\n    t = time()\n    print(find_largest_sum_of_contiguous_array(arr, k))\n    print(\"time: {}\".format(time() - t))",
    "from collections import Counter\n\n\nclass Solution:\n    def largestSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        cnt = Counter(nums)\n        for i in range(len(cnt)):\n            if i == 0 or cnt[i]!= cnt[i - 1]:\n                res = max(res, cnt[i] * i)\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().largestSum([1, 2, 3, 4, 5, 6, 7])\n    print Solution().largestSum([-1, -2, -3, -4, -5, -6, -7])",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def largestSumContiguous(self, nums, k):\n        # write your code here\n        n = len(nums)\n        if n < 2:\n            return 0\n        \n        max = nums[0]\n        for i in xrange(1, n):\n            max = max if nums[i] < nums[i-1] else nums[i]\n            \n        max += nums[0]\n        \n        for i in xrange(1, n):\n            max = max if nums[i] < nums[i-1] else nums[i]\n            max += nums[i]\n        \n        return max",
    "class Solution(object):\n    def maxSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        maxSum = 0\n        maxSum = self.helper(nums, k, maxSum, 0)\n        return maxSum\n\n    def helper(self, nums, k, maxSum, i):\n        if i >= len(nums) - k:\n            return maxSum\n        if i + k < len(nums):\n            if nums[i] + nums[i + k] > maxSum:\n                maxSum = nums[i] + nums[i + k]\n            self.helper(nums, k, maxSum, i + 1)\n        return maxSum",
    "class Solution(object):\n    def findLargestSumOfContiguousSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i]\n            res = max(res, ans)\n            if i!= 0 and nums[i] == nums[i-1]:\n                ans -= nums[i-1]\n            else:\n                ans = nums[i]\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, -1, -2, 3]\n    nums = [1, -1, -2, 3, -4, -5, -6, -7, -8]\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95",
    "def find_max_contiguous_sum(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_sum = arr[i]\n        else:\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n    return max_sum",
    "#!/usr/bin/env python\n\nimport time\n\nstart_time = time.time()\n\ndef largest_sum_of_contiguous_array(arr, k):\n    # write your code here\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, sum(arr))\n\n    return max_sum\n\nprint(\"Time elapsed: {}\".format(time.time() - start_time))",
    "# Definition for an array of integers\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestSumAfterKNearby(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        max_sum = 0\n        \n        # get the sum of the first k-1 elements\n        sum_k = 0\n        node = head\n        for i in range(k - 1):\n            sum_k += node.val\n            node = node.next\n        \n        # get the sum of the last k elements\n        sum_k += node.val\n        \n        # calculate the max sum\n        while node:\n            sum_k -= node.val\n            node = node.next\n            if sum_k == 0:\n                max_sum = max(max_sum, sum_k + node.val)\n            else:\n                max_sum = max(max_sum, sum_k)\n        \n        return max_sum",
    "import time\n\n\n# @include\ndef largest_sum_of_contiguous_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(k - 1):\n            if arr[i] == arr[i + j + 1]:\n                max_sum = max(max_sum, arr[i] + arr[i + j + 1])\n    return max_sum\n# @exclude\n\n\ndef main():\n    n = 20\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    k = 3\n    start_time = time.time()\n    print(largest_sum_of_contiguous_subarray(arr, k))\n    print(\"elapsed time:\", time.time() - start_time)\n\n\nif __name__ == \"__main__\":\n    main()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\nclass Solution:\n    # @param A, a list of integers\n    # @param k, k is always positive integer\n    # @return an integer\n    def largestSumOfContinuousSubarray(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(A)):\n            # print(A)\n            subarray = self.getSubarray(A, i, i + k)\n            # print(subarray)\n            if len(subarray) > 0:\n                result = max(result, subarray[-1])\n        return result\n\n    def getSubarray(self, A, start, end):\n        result = 0\n        for i in range(start, end):\n            result += A[i]\n        return result\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5]\n    k = 2\n    print(Solution().largestSumOfContinuousSubarray(A, k))",
    "# https://www.hackerrank.com/challenges/largest-sum-of-contiguous-array-with-repeating-elements\n\n# @param {integer[]} nums\n# @param {integer} k\n# @return {integer}\ndef largestSumOfContiguousSubarray(nums, k):\n    sum = 0\n    max_sum = 0\n    max_index = 0\n\n    # find the first k-1 elements\n    for i in range(k-1):\n        # find the sum of contiguous subarray with k-1 elements\n        sum = sum + nums[i]\n        # find the max sum of contiguous subarray with k-1 elements\n        if sum > max_sum:\n            max_sum = sum\n            max_index = i\n\n    # find the rest of the elements\n    for i in range(k, len(nums)):\n        # find the sum of contiguous subarray with k-1 elements\n        sum = sum + nums[i]\n        # find the max sum of contiguous subarray with k-1 elements\n        if sum > max_sum:\n            max_sum = sum\n            max_index = i\n\n    return max_sum\n\n\n# @param {integer[]} nums\n# @return {integer}\ndef largestSumOfContiguousSubarray2(nums):\n    sum = 0\n    max_sum = 0\n    max_index = 0\n\n    # find the first k-1 elements\n    for i in range(len(nums) - k + 1):\n        # find the sum of contiguous subarray with k-1 elements\n        sum = sum + nums[i]\n        # find the max sum of contiguous subarray with k-1 elements\n        if sum > max_sum:\n            max_sum = sum\n            max_index = i\n\n    # find the rest of the elements\n    for i in range(len(nums) - k, len(nums)):\n        # find the sum of contiguous subarray with k-1 elements\n        sum = sum + nums[i]\n        # find the max sum of contiguous subarray with k-1 elements\n        if sum > max_sum:\n            max_sum = sum\n            max_index = i",
    "# https://oj.leetcode.com/problems/largest-sum-of-contiguous-subarray/\n\n# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#         self.sum = 0\n\nclass Solution(object):\n    def largestSumOfContiguousSubarray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n        max_sum = arr[0]\n        max_start = 0\n        for i in xrange(1, len(arr)):\n            max_sum = max(max_sum, arr[i])\n            max_sum += arr[i-1]\n            if max_sum > arr[i]:\n                max_sum = arr[i]\n                max_start = i\n        return max_sum",
    "import time\n\nstart = time.time()\n\ndef largest_sum(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0]+arr[1], arr[1]+arr[2])\n    if len(arr) == 4:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3])\n    if len(arr) == 5:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4])\n    if len(arr) == 6:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4], arr[4]+arr[5])\n    if len(arr) == 7:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4], arr[4]+arr[5], arr[5]+arr[6])\n    if len(arr) == 8:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4], arr[4]+arr[5], arr[5]+arr[6], arr[6]+arr[7])\n    if len(arr) == 9:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4], arr[4]+arr[5], arr[5]+arr[6], arr[6]+arr[7], arr[7]+arr[8])\n    if len(arr) == 10:\n        return max(arr[0]+arr[1], arr[1]+arr[2], arr[2]+arr[3], arr[3]+arr[4], arr[4]+",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n# @param A, a list of integers\n# @return an integer\n\nclass Solution(object):\n    def largestSumAfterKNRepeats(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        max_sum = 0\n        for i in xrange(k):\n            max_sum += A[0]\n            for j in xrange(1, len(A)):\n                max_sum = max(max_sum, A[j] + A[j-1])\n            A = A[1:]\n        return max_sum",
    "from collections import Counter\n\nclass Solution(object):\n    def largestSumOfContiguousSubarray(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        cnt = Counter(arr)\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, cnt[i])\n        max_sum += cnt[0]\n        for i in range(1, k):\n            max_sum = max(max_sum, cnt[i] + cnt[i-1])\n        return max_sum",
    "# Definition for an array of integers\nclass Array(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.max_sum = 0\n\n    def sum(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        for i in range(len(self.nums)):\n            self.max_sum += self.nums[i]\n            for j in range(i, len(self.nums)):\n                if self.nums[j] > self.max_sum:\n                    self.max_sum = self.nums[j]\n\n        return self.max_sum\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12]\n    arr2 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    arr3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    arr4 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    arr5 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    arr6 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    arr7 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    arr8 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    arr9 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
    "def largestSum(array):\n    sums = []\n    for i in range(len(array)):\n        sums.append(array[i] * array[i])\n    for i in range(len(sums)):\n        if i < len(sums) - 1:\n            if sums[i] >= sums[i+1]:\n                sums[i] = sums[i] + sums[i+1]\n                del(sums[i+1])\n        else:\n            if sums[i] >= sums[0]:\n                sums[i] = sums[i] + sums[0]\n                del(sums[0])\n    return max(sums)\n\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,9]\narray = [1,2,3,4,5,6,7,8,",
    "#!/usr/bin/env python\n\nimport argparse\n\ndef largest_sum_of_contiguous_array(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, sum(arr))\n\n    return max_sum\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Find the largest sum of contiguous array in the given array which is formed by repeating the given array k times.')\n    parser.add_argument('arr', metavar='N', type=int, nargs='+', help='Input array.')\n    parser.add_argument('k', metavar='k', type=int, nargs='?', default=1, help='Number of times to repeat the array.')\n    args = parser.parse_args()\n\n    print(largest_sum_of_contiguous_array(args.arr, args.k))",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def largestSumContiguous(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        result = 0\n        \n        for i in xrange(len(nums)):\n            if i == 0:\n                result = nums[i]\n            elif i == len(nums)-1:\n                result = nums[i] + result\n            else:\n                result = nums[i] + max(nums[i-1], nums[i+1])\n                \n        return result",
    "#!/usr/bin/python\n\nclass Solution(object):\n    def maxSumSubarray(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return arr[0]\n        if len(arr) == 0:\n            return 0\n        sum = 0\n        for i in range(0, len(arr)):\n            if i == 0:\n                sum += arr[i]\n            else:\n                sum += arr[i] + arr[i-1]\n            if sum > arr[i]:\n                return sum\n        return sum\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    k = 3\n    s = Solution()\n    print s.maxSumSubarray(arr, k)",
    "class Solution(object):\n    def largestSumOfContiguousSubarray(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        if len(A) == 1:\n            return A[0]\n        m = len(A) // k\n        max_sum = 0\n        for i in range(m):\n            left = i * k\n            right = min(len(A), (i + 1) * k)\n            sum = 0\n            for j in range(left, right):\n                sum += A[j]\n            if sum > max_sum:\n                max_sum = sum\n        return max_sum",
    "def largest_sum(a, k):\n    # base case\n    if k == 1:\n        return max(a)\n    # k times\n    result = 0\n    for i in range(k):\n        # sum of all elements which are contiguous with the current element\n        result = max(result, sum(a[i:]))\n    return result\n\n# test cases\nprint largest_sum([2, 3, 4, 1, 2, 3, 4, 3, 2, 1], 2)\nprint largest_sum([2, 3, 4, 1, 2, 3, 4, 3, 2, 1], 3)\nprint largest_sum([2, 3, 4, 1, 2, 3, 4, 3, 2, 1], 4)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}