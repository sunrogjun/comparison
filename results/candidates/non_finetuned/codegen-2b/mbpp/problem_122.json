{
  "problem": {
    "task_id": "MBPP/133",
    "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
    "test_list": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ],
    "challenge_test_list": [],
    "problem_id": 122
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\n\ndef sum_negative_numbers(numbers):\n    result = 0\n    for number in numbers:\n        result += number\n    return result\n\nif __name__ == \"__main__\":\n    numbers = [1, -3, -5, 2, -10]\n    print(sum_negative_numbers(numbers))",
    "#!/usr/bin/env python\n\ndef sum_negatives(nums):\n    return sum([x for x in nums if x < 0])\n\n\nif __name__ == '__main__':\n    print sum_negatives([-1, 2, -3])",
    "def negative_sum(nums):\n    return sum(lambda x: -1*x if x < 0 else x for x in nums)\n\nprint(negative_sum([-1, -2, -3, -4, -5]))",
    "def sum_negative(numbers):\n    return sum(lambda x: x < 0, numbers)\n\n# Test Cases\nprint sum_negative([1,2,3,4,5])\nprint sum_negative([-5,-4,-3,-2,-1])\nprint sum_negative([-1,0,1,2,3,4,5,6,7,8,9])\nprint sum_negative([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
    "def sum_negative_numbers(numbers):\n    return sum(lambda x: x < 0, numbers)\n\nnumbers = [1, -1, 2, -2, 3]\nprint(sum_negative_numbers(numbers))",
    "def sum_negative(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nnumbers = [1, 2, -2, -3, -4, -5]\n\nprint(sum_negative(numbers))",
    "def sum_negative_numbers(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        if i < 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    list_of_numbers = [1, -2, 3, -4, 5]\n    print sum_negative_numbers(list_of_numbers)",
    "# Note:\n# - `int` is the type of number in list, not the type of number in sum.\n# - `lambda` is a function that takes a single parameter and returns a single value.\n# - `sum` is a built-in function that takes a list and returns the sum of the values in the list.\n# - `for` loops are used to iterate over the list.\n# - `list` is a built-in class that is used to create a list.\n# - `sum` is a built-in function that returns the sum of two numbers.\n# - `int` is the type of number in list, not the type of number in sum.\n# - `print` is a built-in function that prints the values in a list.\n# - `print` is a built-in function that prints the values in a list.\n# - `range` is a built-in function that returns a list of numbers.\n# - `range` is a built-in function that returns a list of numbers.\n# - `for` loops are used to iterate over the list.\n# - `list` is a built-in class that is used to create a list.\n# - `sum` is a built-in function that returns the sum of two numbers.\n# - `int` is the type of number in list, not the type of number in sum.\n# - `print` is a built-in function that prints the values in a list.\n# - `print` is a built-in function that prints the values in a list.\n# - `range` is a built-in function that returns a list of numbers.\n# - `range` is a built-in function that returns a list of numbers.\n# - `for` loops are used to iterate over the list.\n# - `list` is a built-in class that is used to create a list.\n# - `sum` is a built-in function that returns the sum of two numbers.\n# - `int` is the type of number in list, not the type of number in sum.\n# - `print` is a built-in function that prints the values in a list.\n# - `print` is a built-in function that prints the values in a list.\n# - `range` is a built",
    "def sum_negative(nums):\n    return sum(map(lambda x: -x, nums))\n\n\nprint sum_negative([-2, -3, 4, -1, -5, -6, -7, -8, -9])",
    "def sum_negative(numbers):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n    Example\n    >>> sum_negative([1, -2, 3, 4, -5])\n    -2\n    >>> sum_negative([-3, -4, -5])\n    0\n    >>> sum_negative([1, 2, 3, 4, 5, 6])\n    -1\n    \"\"\"\n    return sum(i for i in numbers if i < 0)\n\n\nif __name__ == '__main__':\n    assert sum_negative([1, -2, 3, 4, -5]) == -2\n    assert sum_negative([-3, -4, -5]) == 0\n    assert sum_negative([1, 2, 3, 4, 5, 6]) == -1",
    "from math import fabs\n\ndef sumNegativeNumbers(numbers):\n    return sum(lambda x: x < 0, numbers)\n\nprint(sumNegativeNumbers([-1, -2, -3, -4, -5, -6, -7, -8, -9]))",
    "# https://www.geeksforgeeks.org/write-a-lambda-function-to-calculate-the-sum-of-the-negative-numbers-of-a-given-list/\ndef sum_negative(nums):\n    return sum(lambda x: -1 * x if x < 0 else x for x in nums)\n\nprint sum_negative([-4, -2, 1, 2, -2])",
    "def sum_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nprint(sum_negative_numbers([-4, -5, -3, -2, -1, 0, 1, 2, 3, 4]))",
    "#\n# Write a lambda function\n#\ndef sum_negative_numbers(numbers):\n    return sum(n for n in numbers if n < 0)\n\n#\n# Test\n#\nassert sum_negative_numbers([-3, -1, -2, -4]) == 4\nassert sum_negative_numbers([-3, -1, -2, -4, -5]) == -5\nassert sum_negative_numbers([-3, -1, -2, -4, -5, -6]) == -6",
    "def sum_negatives(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nprint(sum_negatives([-3, -2, -1, 0, 1, 2, 3]))",
    "# Your code here\n\ndef sum_negatives(numbers):\n    return sum(lambda x: x < 0, numbers)\n\nif __name__ == \"__main__\":\n    numbers = [1, -2, 3, -4, 5, -6, 7, -8]\n    print(sum_negatives(numbers))",
    "# https://leetcode.com/problems/find-the-number-of-negative-numbers-in-the-given-list/\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def countNegatives(self, head):\n        if head is None:\n            return 0\n        count = 0\n        while head is not None:\n            if head.val < 0:\n                count += 1\n            head = head.next\n        return count\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(-1)\n    head.next.next.next = ListNode(-2)\n    head.next.next.next.next = ListNode(-3)\n    print(solution.countNegatives(head))",
    "def sum_negatives(numbers):\n    return sum(lambda x: x < 0, numbers)\n\ndef test_sum_negatives():\n    assert sum_negatives([1, 2, -3, -4, 5, -6]) == 6",
    "def sum_negative(numbers):\n    return sum(lambda x: x if x < 0 else 0 for x in numbers)\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, -4, -5, -6]\n    print(\"Sum of negative numbers using lambda function:\", sum_negative(numbers))\n    numbers = [1, -2, 3, -4, -5, 6]\n    print(\"Sum of negative numbers using lambda function:\", sum_negative(numbers))",
    "#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Example\n#>>> sum_negative([-1, 0, 2, -4])\n#4\n\n#Hint\n#Write a lambda function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem\n#Write a function that takes a list of numbers and returns the sum of all the numbers that are negative.\n\n#Problem",
    "def sum_negative(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(lambda x: -x if x < 0 else x)\n\nif __name__ == \"__main__\":\n    assert sum_negative([-1, -2, 3, -4, -5]) == 0\n    assert sum_negative([-1, -2, 3, -4, -5]) == -5\n    assert sum_negative([-1, -2, 3, -4, -5]) == 0",
    "from functools import reduce\n\ndef sum_negative_numbers(numbers):\n    return reduce(lambda x, y: x + y, numbers, 0)\n\nprint(sum_negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))",
    "def sum_negative_numbers(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers: List of numbers\n    :return: Sum of negative numbers\n    \"\"\"\n    sum = 0\n    for i in list_of_numbers:\n        if i < 0:\n            sum += i\n    return sum\n\ndef test():\n    assert sum_negative_numbers([-1, -2, 3, 4]) == -2\n    assert sum_negative_numbers([-1, -2, -3, -4]) == 1\n    assert sum_negative_numbers([-1, -2, -3, -4, -5]) == -5\n\nif __name__ == '__main__':\n    test()",
    "def sum_negative_numbers(numbers):\n    return sum([-x for x in numbers])\n\n\nif __name__ == '__main__':\n    numbers = [2, 4, -1, 5, 3, -6]\n    print(sum_negative_numbers(numbers))",
    "# The method below is more elegant\n# def sum_negatives(nums):\n#     return sum(n for n in nums if n < 0)\n\n# The one below is more readable\n# def sum_negatives(nums):\n#     return sum(n for n in nums if n < 0)\n\n# The one below is more readable\n# def sum_negatives(nums):\n#     return sum(n for n in nums if n < 0)\n\ndef sum_negatives(nums):\n    return sum(n for n in nums if n < 0)\n\n\nif __name__ == '__main__':\n    nums = [1, -2, 3, -4]\n    print(sum_negatives(nums))",
    "# https://www.hackerrank.com/challenges/summation-of-negative-numbers\n# https://www.hackerrank.com/challenges/summation-of-negative-numbers/problem\n\ndef sum_negative_numbers(l):\n    return sum([lambda n: n < 0 if n < 0 else n for n in l])\n\nif __name__ == '__main__':\n    numbers = [i for i in range(-1, 100)]\n    print(sum_negative_numbers(numbers))",
    "def sumNegativeNumbers(numbers):\n    sum = 0\n    for i in numbers:\n        if i < 0:\n            sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    numbers = [1, -2, 3, -4, 5]\n    print(sumNegativeNumbers(numbers))",
    "nums = [1, -2, 3]\nprint(sum(nums))",
    "def sum_negative_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(x for x in numbers if x < 0)\n\nif __name__ == '__main__':\n    print(sum_negative_numbers([-1, -2, -3, -4, -5]))",
    "def sum_negative(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_1(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_2(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_3(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_4(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_5(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_6(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_7(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\ndef sum_negative_8(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, -6]\n    print(sum_negative(numbers))\n    print(sum_negative_1(numbers))\n    print(sum_negative_2(numbers))\n    print(sum_negative_3(numbers))\n    print(sum_negative_4(numbers))\n    print(sum_negative_5(numbers))\n    print(sum_negative_6(numbers))\n    print(sum_negative_7(numbers))\n    print(sum_negative_8(numbers))",
    "numbers = [1, 2, 3, 4, -5, -6, -7, -8]\n\ndef sum_negative(numbers):\n    return sum(numbers) if numbers else 0\n\nprint(sum_negative(numbers))\n\n\"\"\"\nInput:\nnumbers = [1, 2, 3, 4, -5, -6, -7, -8]\n\nOutput:\n8\n\"\"\"",
    "# First Solution\ndef sum_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n# Second Solution\ndef sum_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x)\n\n# Third Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Fourth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Fifth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Sixth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Seventh Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Eight Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Ninth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Tenth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Eleventh Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Twelfth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Thirteenth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Fourteenth Solution\ndef sum_negative_numbers(numbers):\n    return sum([-x if x < 0 else x for x in numbers])\n\n# Fifteenth Solution\ndef sum_negative_numbers(n",
    "def sumNegativeNumbers(list):\n    return sum(map(lambda n: -n, list))\n\nif __name__ == '__main__':\n    list = [1, -3, -4, -5, -2]\n    print(sumNegativeNumbers(list))",
    "def sum_negatives(numbers):\n    return sum(lambda n: -n if n < 0 else n for n in numbers)\n\nif __name__ == \"__main__\":\n    numbers = [1, -2, -3]\n    print(\"Sum of negative numbers in the list is:\", sum_negatives(numbers))",
    "from functools import reduce\n\n\ndef sum_negative_numbers(list_of_numbers):\n    return sum(i for i in list_of_numbers if i < 0)\n\n\ndef main():\n    list_of_numbers = [1, -1, -2, -3, 4]\n    print(sum_negative_numbers(list_of_numbers))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sumNegatives(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        # http://www.cnblogs.com/grandyang/p/4248283.html\n        # http://www.cnblogs.com/grandyang/p/4248284.html\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/discuss/\n        # https://leetcode.com/pro",
    "# https://www.hackerrank.com/challenges/summation-of-negative-numbers\n# https://www.hackerrank.com/challenges/summation-of-negative-numbers/submissions/code/29051344\n\ndef summation(lst):\n    return sum(lambda x: x * -1 if x < 0 else x for x in lst)\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3]\n    print(summation(numbers))",
    "# TODO:\n# - use sum() method\n# - use lambda function\n# - use for loop\n\ndef sum_negative_numbers(list_of_numbers):\n    return sum(n for n in list_of_numbers if n < 0)\n\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, -2, -3, -4, -5, -6]\n    print(sum_negative_numbers(list_of_numbers))",
    "def sum_negative(numbers):\n    # write your code here\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nif __name__ == '__main__':\n    numbers = [-2, -3, -4, -5]\n    print sum_negative(numbers)\n    numbers = [-2, -3, -4, -5]\n    print sum_negative(numbers)\n    numbers = [0, -1, -2, -3, -4, -5, -6]\n    print sum_negative(numbers)",
    "def sum_negatives(numbers):\n    return sum(lambda n: -n if n<0 else n for n in numbers)\n\nnumbers = [1, -2, 3, -4, 5, -6]\nprint(sum_negatives(numbers))",
    "def sumNegativeNumbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n\nif __name__ == \"__main__\":\n    assert sumNegativeNumbers([-1, -2, 3, -4, -5]) == -2\n    assert sumNegativeNumbers([-1, -2, 3, -4, -5, -6]) == -6",
    "def sum_of_negative_numbers(numbers):\n    return sum(lambda x: x < 0, numbers)\n\n\nif __name__ == \"__main__\":\n    assert sum_of_negative_numbers([-1, -2, -3]) == 6, \"Invalid result\"",
    "# Write a function that returns a list of all the negative numbers between 1 and 10.\n# Input: List of integers\n# Output: Sum of negative numbers\n# Example:\n# Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Output: 9\n# Explanation: 9 is the sum of negative numbers between 1 and 10.\n\ndef negative_numbers(numbers):\n    # Write your code here\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n# Test Cases\nassert negative_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9, \"Test Case 1\"\nassert negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -9, \"Test Case 2\"\nassert negative_numbers([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == -9, \"Test Case 3\"\nassert negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -9, \"Test Case 4\"\nassert negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -9, \"Test Case 5\"\nassert negative_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9, \"Test Case 6\"\nassert negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -9, \"Test Case 7\"\nassert negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -9, \"Test Case 8\"\nassert negative_numbers([1, -1, 2, -2,",
    "def sum_negative_numbers(nums):\n    return sum([n*(-1) for n in nums])\n\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(sum_negative_numbers(nums))",
    "# http://www.tutorialspoint.com/python/lambda_expression_function.htm\n# http://stackoverflow.com/questions/12992957/lambda-function-to-calculate-the-sum-of-the-numbers-in-a-list\n\ndef sum_negatives(list_of_numbers):\n    return sum([n for n in list_of_numbers if n < 0])\n\n\nprint(sum_negatives([1, -2, 3, -4, -5]))",
    "# Write your code here\n#\n# Test cases\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -1, 2, -3]\n# [1, -",
    "def sum_negative(lst):\n    return sum([n for n in lst if n < 0])\n\n# Your code here\nassert sum_negative([1, -2, 3, -4, 5]) == -2",
    "def calculate_sum(numbers):\n\treturn sum(map(lambda x: -x, numbers))\n\ndef calculate_sum_lambda(numbers):\n\treturn sum(map(lambda x: -x, numbers))\n\nif __name__ == \"__main__\":\n\tnumbers = [1, -2, 3, 4, -5, 6]\n\tprint(calculate_sum(numbers))\n\tprint(calculate_sum_lambda(numbers))",
    "def sumNegative(numbers):\n\tsum = 0\n\tfor i in numbers:\n\t\tif i < 0:\n\t\t\tsum += i\n\treturn sum\n\ndef test():\n\tassert sumNegative([-1, -2, -3, -4, -5]) == 0\n\nif __name__ == \"__main__\":\n\ttest()",
    "def sum_negative(numbers):\n    return sum(lambda x: x < 0, numbers)\n\nnumbers = [1, -2, -3, -4]\nprint(sum_negative(numbers))",
    "# https://leetcode.com/problems/sum-of-negative-numbers-in-a-linked-list/\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sumNegatives(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n\n        total = 0\n        while head:\n            total += head.val\n            head = head.next\n        return total\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(1)\n    head.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n\n    s = Solution()",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\ndef sum_negative_numbers(numbers):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n    return sum(lambda x: x < 0, numbers)\n\nif __name__ == \"__main__\":\n    numbers = [1, -2, 3, -4, 5]\n    print sum_negative_numbers(numbers)",
    "numbers = [2, -1, 3, -2, -3, -4, 5, -6, -7, -8]\n\ndef sum_neg_numbers(numbers):\n    return sum(lambda x: x < 0, numbers)\n\nprint(sum_neg_numbers(numbers))",
    "#!/usr/bin/env python\n\n# The list to sum.\nlist_of_numbers = [1, 2, -3, 4, -5, 6]\n\n# The function to sum the negative numbers of a list of numbers.\ndef sum_negative_numbers(list_of_numbers):\n    return sum(lambda n: -n if n < 0 else n)\n\n# The result of the sum_negative_numbers function.\nresult = sum_negative_numbers(list_of_numbers)\n\n# The output of the sum_negative_numbers function.\nprint(result)",
    "def sumNegative(numbers):\n    return sum(n for n in numbers if n < 0)\n\n\nif __name__ == \"__main__\":\n    numbers = [2, -5, 3, -1, -2, 5, -6, -8]\n    print(sumNegative(numbers))",
    "# Write your code below.\n\n# nums = [-1, 2, -3, -4]\n# sum_negative = lambda n: lambda n: lambda n: n if n >= 0 else 0\n\n# def sum_negative(nums):\n#     return sum(map(lambda n: n if n >= 0 else 0, nums))\n\n# print sum_negative(nums)\n\n# print sum_negative([-1, 2, -3, -4])\n\n\n# nums = [-1, 2, -3, -4]\n# sum_negative = lambda n: lambda n: n if n >= 0 else 0\n\n# def sum_negative(nums):\n#     return sum(map(lambda n: n if n >= 0 else 0, nums))\n\n# print sum_negative(nums)\n\n\n# nums = [-1, 2, -3, -4]\n# sum_negative = lambda n: lambda n: n if n >= 0 else 0\n\n# def sum_negative(nums):\n#     return sum(map(lambda n: n if n >= 0 else 0, nums))\n\n# print sum_negative(nums)",
    "numbers = [2, -1, -3, -2, 3, -1, 2, -2, -1, 1, 2]\n\ndef sum_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nprint(sum_negative_numbers(numbers))",
    "def sum_negative_numbers(numbers):\n    return sum(map(lambda x: -x, numbers))\n\nprint sum_negative_numbers([1, 2, 3, -4, -5, 6, -7, 8, -9])",
    "def sum_negative(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(lambda x: x<0, numbers)\n\n# test\nif __name__ == '__main__':\n    assert sum_negative([-1, -2, -3, -4, -5]) == 5\n    assert sum_negative([-1, -2, -3, -4, -5, -6]) == -1\n    assert sum_negative([-1, -2, -3, -4, -5, -6, -7]) == -7\n    assert sum_negative([-1, -2, -3, -4, -5, -6, -7, -8]) == -8",
    "def sum_negative(numbers):\n    return sum(lambda x: -x if x < 0 else x, numbers)\n\nif __name__ == \"__main__\":\n    numbers = [1, -2, 3, -4, 5, -6]\n    print sum_negative(numbers)",
    "# Write your code here\n\n# Test Cases\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55\nassert sum([-1, -2, -3, -4, -5, -",
    "def sum_negative(numbers):\n    return sum(numbers)\n\n# Test Cases\nassert sum_negative([-1, -2, -3, -4]) == 9\nassert sum_negative([-5, -4, -3, -2, -1]) == -1",
    "def sum_negative(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(lambda x: x < 0, numbers)\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, -3]\n    print(sum_negative(numbers))",
    "def sum_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\nprint(sum_negative_numbers([-2, -3, 4, -1, -2, -3, -4]))",
    "def sum_negative(numbers):\n    return sum(map(lambda x: -x, numbers))\n\n\ndef main():\n    numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n    print(sum_negative(numbers))\n\nif __name__ == '__main__':\n    main()",
    "def sumNeg(list):\n    return sum([lambda x: x < 0, list])\n\n# Test cases\nassert sumNeg([1, -2, -3]) == -1\nassert sumNeg([-5, -10, -15]) == -25\nassert sumNeg([-10, -15, -20]) == -30\nassert sumNeg([-10, -15, -20, -25]) == -55",
    "# The code is not really beautiful, but it is very concise.\n# The only difference between this solution and the previous one is that\n# the negative numbers are not included in the sum.\n\ndef sum_negative(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n#print(sum_negative([2, -3, 4, -5, 6, -7]))\n\nprint(sum_negative([-2, -3, 4, -5, 6, -7]))",
    "# https://www.hackerrank.com/challenges/sums-of-negative-numbers/problem\n\ndef sum_negative_numbers(list):\n    return sum(lambda x: x < 0, list)\n\nif __name__ == '__main__':\n    n = int(input())\n    list = list(map(int, input().split()))\n    print(sum_negative_numbers(list))",
    "#!/usr/bin/env python\n\n# REF [site] >> https://www.tutorialspoint.com/lambda/lambda_function.htm\n\ndef sum_negative_numbers_lambda(nums):\n\treturn sum([-x for x in nums if x < 0])\n\ndef main():\n\tnums = [1, -2, 3]\n\tprint(sum_negative_numbers_lambda(nums))\n\n#--------------------------------------------------------------------\n\nif '__main__' == __name__:\n\tmain()",
    "def sum_negatives(numbers):\n    # Write your code here\n    return sum(lambda x: x < 0)\n\nnumbers = [2, 3, -1, -3, -4]\nprint(sum_negatives(numbers))",
    "def sum_negative(nums):\n\treturn sum(i < 0 for i in nums)\n\ndef sum_negative_lambda(nums):\n\treturn sum(lambda x: x < 0, nums)\n\n# test cases\nnums = [-2, 3, -5, -1, 1]\n\n# expected output\nprint sum_negative(nums)\nprint sum_negative_lambda(nums)",
    "# The sum of the negative numbers of a given list of numbers using lambda function\ndef sum_negative(numbers):\n    # sum = 0\n    for number in numbers:\n        if number < 0:\n            sum += number\n    return sum\n\n# Test cases\nprint sum_negative([-3, -5, -10])\nprint sum_negative([-1, 0, 1, -2, 3, 4, 5])",
    "def sum_negative_numbers(numbers):\n    return sum(numbers) if numbers else 0\n\nnumbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\nprint(sum_negative_numbers(numbers))",
    "def sum_negative(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(numbers)\n\nprint sum_negative([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
    "import math\n\ndef sum_negative(numbers):\n    return sum(lambda x: x if x < 0 else 0 for x in numbers)\n\n\nprint(sum_negative([-3, -5, -3, -1, 1, 3]))\nprint(sum_negative([-3, -5, -3, -1, 1, 3], lambda x: x if x < 0 else 0))\nprint(sum_negative([-3, -5, -3, -1, 1, 3], lambda x: x if x < 0 else x + 1))\nprint(sum_negative([-3, -5, -3, -1, 1, 3], lambda x: x if x < 0 else x + 1, lambda x: x if x < 0 else x + 1))",
    "# your code goes here\ndef sum_negative(numbers):\n    return sum(numbers) if numbers else 0\n\nprint(sum_negative([-1, 2, -3, 4, -5, -6]))",
    "def sum_of_negative_numbers(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n\nif __name__ == '__main__':\n    numbers = [2, -3, 4, -1, -2, -3]\n    print(sum_of_negative_numbers(numbers))",
    "def sum_negative(numbers):\n    return sum(map(lambda x: -x, numbers))\n\n# Test Cases\n\ntest_cases = [\n    ( [1, -2, 3, -4, 5, -6, 7], -1),\n    ( [1, 2, 3, 4, 5, 6, 7], 0),\n    ( [1, -2, 3, -4, 5, -6, 7], -1)\n]\n\nfor test_case in test_cases:\n    print 'Test case:', test_case\n    print sum_negative(test_case)",
    "# https://www.hackerrank.com/challenges/sum-of-negative-numbers\ndef sum_neg(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nlist = [1, -2, -3, 4, -5, -6]\n\nprint(sum_neg(list))",
    "numbers = [1, -2, 3, -4, 5]\nsum = lambda x: x + x[0]\n\nprint(sum(numbers))",
    "def sum_negative_numbers(numbers):\n    return sum([n for n in numbers if n < 0])\n\nprint(sum_negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))",
    "# http://www.tutorialspoint.com/lambda_functions/\ndef sum_negative_numbers(my_list):\n    sum_neg = 0\n    for i in my_list:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n\n# print sum_negative_numbers([1, -2, 3, 4])\nprint sum_negative_numbers([-1, -2, 3, 4])",
    "def sumNegatives(numbers):\n    return sum([n for n in numbers if n < 0])\n\ndef main():\n    print sumNegatives([-1, -2, -3, 4])\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_negative_numbers(list):\n    return sum(lambda n: -1 if n<0 else n)\n\nif __name__ == \"__main__\":\n    list = [1, -2, 3, -4, 5]\n    print(sum_negative_numbers(list))",
    "#!/usr/bin/python\n\n# This is a really simple question to solve.\n\ndef sum_neg(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a more complex question that is harder to solve.\n\ndef sum_neg_2(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a really simple question to solve.\n\ndef sum_neg(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a more complex question that is harder to solve.\n\ndef sum_neg_2(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a really simple question to solve.\n\ndef sum_neg(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a more complex question that is harder to solve.\n\ndef sum_neg_2(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a really simple question to solve.\n\ndef sum_neg(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a more complex question that is harder to solve.\n\ndef sum_neg_2(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a really simple question to solve.\n\ndef sum_neg(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a more complex question that is harder to solve.\n\ndef sum_neg_2(numbers):\n    return sum(lambda x: x < 0 and x < -numbers[-1], numbers)\n\n\n# The following is a really simple question to solve.\n\ndef sum_neg(",
    "def sum_negatives(numbers):\n    return sum(lambda x: -x if x < 0 else x for x in numbers)\n\n\nif __name__ == '__main__':\n    numbers = [1, -2, -4, -5, -6, -7]\n    print sum_negatives(numbers)\n    numbers = [-1, -2, -3, -4, -5, -6, -7]\n    print sum_negatives(numbers)\n    numbers = [1, 2, 3, 4, 5, 6, 7]\n    print sum_negatives(numbers)",
    "# your code goes here\ndef sum_negatives(numbers):\n    return sum(map(lambda x: -x, numbers))",
    "#!/usr/bin/python\n\nimport math\n\ndef sum_negatives(nums):\n    # YOUR CODE HERE\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    nums = [1, -2, -3, 4, -5]\n    print(sum_negatives(nums))",
    "def sum_negative_numbers(numbers):\n\treturn sum(lambda x:x<0, numbers)\n\nprint sum_negative_numbers([2,-4,-1,3,5,-2,4])",
    "def sumNegative(numbers):\n    return sum(lambda n: -n if n < 0 else n)\n\nprint(sumNegative([-2, -1, 0, 1, 2, 3, 4]))\n\n\"\"\"\nOutput:\n\n>>> sumNegative([-2, -1, 0, 1, 2, 3, 4])\n-3\n\n\"\"\"",
    "def sum_neg(nums):\n    return sum([i for i in nums if i<0])\n\n# print sum_neg([-1,1,4,-5,9])\n\n# print sum_neg([-1,1,4,-5,9])\n# print sum_neg([-1,1,4,-5,9])\n\nprint sum_neg([-1,1,4,-5,9])",
    "def sum_negative_numbers(numbers):\n    return sum(x for x in numbers if x < 0)\n\n\n# Test cases\nassert(sum_negative_numbers([-1, -2, 3, -4, 5]) == 7)\nassert(sum_negative_numbers([-1, -2, 3, -4, 5, -6]) == -1)\nassert(sum_negative_numbers([-1, -2, 3, -4, 5, -6, 7]) == -3)\nassert(sum_negative_numbers([-1, -2, 3, -4, 5, -6, 7, -8]) == -8)",
    "import math\nfrom math import fabs\n\ndef sum_negatives(numbers):\n    return sum(lambda x: x < 0, numbers)\n\ndef test():\n    assert sum_negatives([1, 2, 3]) == 4\n    assert sum_negatives([-1, -2, -3]) == 4\n    assert sum_negatives([-4, -5, -6]) == 4\n    assert sum_negatives([-10, -20, -30]) == 4\n\nif __name__ == '__main__':\n    test()",
    "def sum_negative_numbers(numbers):\n    return sum(lambda x: x if x < 0 else 0 for x in numbers)\n\nif __name__ == \"__main__\":\n    print(sum_negative_numbers([-3, -2, -1, 0, 1, 2, 3]))",
    "def sum_negative_numbers(numbers):\n\treturn sum(lambda x: -x if x < 0 else x for x in numbers)\n\n# Test\nassert sum_negative_numbers([-1, 2, -3]) == 3\nassert sum_negative_numbers([-2, 3, -5]) == -5\nassert sum_negative_numbers([-2, -3, -5]) == -9",
    "def sum_negative(numbers):\n    return sum(filter(lambda n: n < 0, numbers))\n\nprint(sum_negative([-3, -1, 0, 1, 3]))\nprint(sum_negative([-2, -1, 0, 1, 2, 3]))",
    "def sum_negative(numbers):\n    return sum(numbers) if numbers else 0\n\ndef sum_negative_lambda(numbers):\n    return lambda x: x if x > 0 else 0\n\nprint(sum_negative([-3, -2, -1, 0, 1, 2, 3]))\nprint(sum_negative_lambda([-3, -2, -1, 0, 1, 2, 3]))",
    "def sum_negative_numbers(list):\n    return sum(lambda x: -x if x < 0 else x)\n\nif __name__ == \"__main__\":\n    l = [-2, -1, 0, 1, 2, 3]\n    print(sum_negative_numbers(l))",
    "def sum_negative(nums):\n    return sum([x for x in nums if x < 0])\n\n\nprint(sum_negative([-2, -1, 1, 2, 3]))",
    "# Calculate the sum of the negative numbers of a given list of numbers using lambda function\ndef sumNegativeNumbers(numbers):\n    return sum(lambda x: x < 0, numbers)\n\n\n# Test your function\nprint(sumNegativeNumbers([-1, -2, 3]))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}