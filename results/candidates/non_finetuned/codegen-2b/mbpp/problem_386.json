{
  "problem": {
    "task_id": "MBPP/397",
    "prompt": "Write a function to find the median of three specific numbers.",
    "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
    "test_list": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ],
    "challenge_test_list": [],
    "problem_id": 386
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def median3(a, b, c):\n    return (a + b + c) / 3.0\n\n\nif __name__ == '__main__':\n    a = input('Enter the first number: ')\n    b = input('Enter the second number: ')\n    c = input('Enter the third number: ')\n\n    print(median3(a, b, c))",
    "# Your code here.\n\ndef median(a, b, c):\n    if a + b > c:\n        return (a + b) / 2\n    elif a + c > b:\n        return (a + c) / 2\n    elif b + c > a:\n        return (b + c) / 2\n\n# a = [1, 2, 3]\n# b = [2, 3, 4]\n# c = [3, 4, 5]\n\nprint median(a, b, c)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point(%d, %d)' % (self.x, self.y)\n\nclass Solution(object):\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: float\n        \"\"\"\n        A.sort()\n        B.sort()\n        C.sort()\n        if len(A) == 0 or len(B) == 0 or len(C) == 0:\n            return 0.0\n        if len(A) == 1 and len(B) == 1 and len(C) == 1:\n            return min(A[0], B[0], C[0])\n        if len(A) == 1:\n            return B[0]\n        if len(B) == 1:\n            return A[0]\n        if len(C) == 1:\n            return A[0]\n        return (A[len(A)/2] + B[len(B)/2] + C[len(C)/2]) / 3.0",
    "def median3(numbers):\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        if len(numbers) == 2:\n            return (numbers[0] + numbers[1]) / 2.0\n        else:\n            median1 = numbers[0]\n            median2 = numbers[len(numbers) / 2]\n            median3 = numbers[len(numbers) - 1]\n            if median1 > median2:\n                if median2 > median3:\n                    return median2\n                else:\n                    return median3\n            else:\n                if median1 > median3:\n                    return median1\n                else:\n                    return median3\n\ndef median3_test():\n    assert median3([1, 2, 3]) == 2.0\n    assert median3([1, 2, 3, 4, 5]) == 3.0\n    assert median3([2, 3, 4]) == 3.0\n    assert median3([2, 3, 4, 5]) == 3.0\n    assert median3([3, 4, 5]) == 3.0\n    assert median3([3, 4, 5, 6]) == 3.5\n    assert median3([1, 1, 1, 1]) == 1.0\n    assert median3([1, 1, 1, 2, 2, 2, 2]) == 2.5\n    assert median3([1, 1, 1, 2, 2, 2, 3, 3]) == 2.5\n    assert median3([1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4]) == 3.0\n    assert median3([1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5]) == 3.5\n    assert median3([1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 6]) == 3.5\n    assert median3([1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7]) == 3",
    "import random\n\ndef find_median(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    elif a + b < c:\n        if b > c:\n            return b\n        else:\n            return c\n    else:\n        return c\n\ndef test():\n    assert find_median(1, 2, 3) == 2\n    assert find_median(1, 2, 1) == 1\n    assert find_median(1, 2, 2) == 1\n    assert find_median(2, 1, 3) == 1\n    assert find_median(2, 1, 1) == 2\n    assert find_median(2, 1, 2) == 2\n    assert find_median(2, 2, 1) == 2\n    assert find_median(2, 2, 2) == 2\n    assert find_median(2, 3, 1) == 2\n    assert find_median(2, 3, 2) == 2\n    assert find_median(2, 3, 3) == 2\n    assert find_median(3, 1, 2) == 2\n    assert find_median(3, 1, 1) == 3\n    assert find_median(3, 1, 2) == 3\n    assert find_median(3, 2, 1) == 3\n    assert find_median(3, 2, 2) == 3\n    assert find_median(3, 2, 3) == 3\n    assert find_median(3, 3, 1) == 3\n    assert find_median(3, 3, 2) == 3\n    assert find_median(3, 3, 3) == 3\n    assert find_median(3, 4, 4) == 3\n    assert find_median(3, 4, 5) == 3\n    assert find_median(3, 4, 6) == 3\n    assert find_median(3, 5, 4)",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nimport sys\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        if len(nums1) == 0 and len(nums2) == 0 and len(nums3) == 0:\n            return 0\n        elif len(nums1) == 0 or len(nums2) == 0 or len(nums3) == 0:\n            return (len(nums1) + len(nums2) + len(nums3)) / 3\n        else:\n            if len(nums1) > len(nums2) and len(nums1) > len(nums3):\n                return self.findMedianSortedArrays(nums1, nums2, nums3)\n            elif len(nums2) > len(nums1) and len(nums2) > len(nums3):\n                return self.findMedianSortedArrays(nums1, nums2, nums3)\n            else:\n                return self.findMedianSortedArrays(nums1, nums2, nums3)\n\n\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        if len(nums1) > len(nums2) and len(nums1) > len(nums3):\n            return self.findMedianSortedArrays(nums1, nums2, nums3)\n        elif len(nums2) > len(nums1) and len(nums2) > len(nums3):\n            return self.findMedianSortedArrays(nums1, nums2, nums3)\n        else:\n            return self.findMedianSortedArrays(nums1, nums2, nums3)\n\n# TEST\n# print Solution().findMedianSortedArrays([1",
    "def find_median(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    if a < b and b < c:\n        return a\n    elif a > b and b > c:\n        return b\n    elif a > b and b > c:\n        return c\n    elif a < b and b < c:\n        return a\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    print find_median(1, 4, 3)\n    print find_median(1, 3, 4)\n    print find_median(1, 4, 5)\n    print find_median(5, 4, 3)\n    print find_median(1, 3, 4)\n    print find_median(5, 4, 3)\n    print find_median(5, 4, 5)\n    print find_median(5, 4, 6)\n    print find_median(5, 6, 4)\n    print find_median(5, 6, 5)\n    print find_median(5, 6, 6)\n    print find_median(5, 6, 7)\n    print find_median(5, 7, 6)\n    print find_median(5, 7, 7)\n    print find_median(5, 7, 8)",
    "def median_of_three(n1, n2, n3):\n    return n1 + n2 + n3\n\ndef median_of_three_slow(n1, n2, n3):\n    return (n1 + n2 + n3) / 3\n\nif __name__ == \"__main__\":\n    print(median_of_three(1, 2, 3))\n    print(median_of_three_slow(1, 2, 3))",
    "def median_of_three(a, b, c):\n    return ((a + b + c) / 3)\n\n# Median of three\n# a = 2\n# b = 4\n# c = 5\n# Median of three should be 3.5\n\n# Median of three\n# a = 3\n# b = 7\n# c = 8\n# Median of three should be 7.5\n\n# Median of three\n# a = 5\n# b = 10\n# c = 15\n# Median of three should be 9.5\n\n# Median of three\n# a = 7\n# b = 12\n# c = 15\n# Median of three should be 10.5\n\n# Median of three\n# a = 11\n# b = 15\n# c = 20\n# Median of three should be 14.5\n\n# Median of three\n# a = 13\n# b = 17\n# c = 22\n# Median of three should be 16.5\n\n# Median of three\n# a = 17\n# b = 21\n# c = 26\n# Median of three should be 20.5\n\n# Median of three\n# a = 19\n# b = 23\n# c = 29\n# Median of three should be 22.5\n\n# Median of three\n# a = 23\n# b = 27\n# c = 31\n# Median of three should be 25.5\n\n# Median of three\n# a = 25\n# b = 29\n# c = 33\n# Median of three should be 28.5\n\n# Median of three\n# a = 27\n# b = 31\n# c = 35\n# Median of three should be 30.5\n\n# Median of three\n# a = 31\n# b = 35\n# c = 37\n# Median of three should be 33.5\n\n# Median of three\n# a = 35\n# b = 37\n# c = 39\n# Median of three should be 36.5\n\n# Median of three\n# a = 37\n# b = 39\n# c = 41\n# Median of three should be 39.5\n\n# Median of three\n# a = 39\n# b = 41\n# c = 43\n# Median of three should be 42.5\n\n# Median of three\n# a = 41\n# b = 43\n# c =",
    "def findMedian(a,b,c):\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        if b > a:\n            return b\n        else:\n            return a\n    else:\n        return c\n\nprint(findMedian(1,2,3))",
    "def median(a, b, c):\n    return (a + b + c) / 3\n\nif __name__ == '__main__':\n    a, b, c = input().split()\n    print(median(int(a), int(b), int(c)))",
    "from collections import namedtuple\n\nMedian = namedtuple('Median','m1, m2, m3')\n\ndef median_of_three(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: numbers\n    Output:\n        m1, m2, m3: median\n    \"\"\"\n    if a + b > c:\n        if a + c > b:\n            m1 = a\n        else:\n            m1 = c\n        m2 = b\n        m3 = a + b - m1 - m2\n    else:\n        if b + c > a:\n            m2 = b\n            m1 = a + c - b - m2\n        else:\n            m3 = a\n            m2 = a + c - m3\n    return Median(m1, m2, m3)",
    "\"\"\"\nGiven three numbers, find the median of three.\n\"\"\"\n\ndef median(a, b, c):\n    if a + b > c:\n        if a + c > b:\n            return a\n        else:\n            return b\n    else:\n        return c\n\n\"\"\"\nSample Inputs\n\n[1,2,3]\n\nSample Output\n\n1\n\"\"\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        a = int(input())\n        b = int(input())\n        c = int(input())\n        print(median(a, b, c))",
    "def median(a, b, c):\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter three numbers:\"))\n    b = int(input(\"Enter three numbers:\"))\n    c = int(input(\"Enter three numbers:\"))\n    print(\"Median of {}, {}, {} is {}\".format(a, b, c, median(a, b, c)))",
    "def find_median(a, b, c):\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        return b\n    else:\n        return c\n\nprint find_median(1, 2, 3)",
    "import unittest\nfrom solution import median\n\n\nclass TestMedian(unittest.TestCase):\n    def test_median_of_three(self):\n        self.assertEqual(median([2, 3, 4]), 2.5)\n        self.assertEqual(median([2, 3, 4, 5]), 3.0)\n        self.assertEqual(median([2, 3, 4, 5, 6]), 4.5)\n        self.assertEqual(median([1, 2, 3, 4, 5]), 2.5)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6]), 3.0)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6, 7]), 4.5)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6, 7, 8]), 5.0)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6, 7, 8, 9]), 5.5)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 6.0)\n        self.assertEqual(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 6.5)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return str(self.x) + \" \" + str(self.y)\n\n\nclass Solution:\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: float\n        \"\"\"\n        if not A or not B or not C:\n            return None\n        # A, B, C are sorted\n        # A.len == B.len == C.len\n        if A.len == B.len == C.len:\n            # A, B, C are same length\n            if A.len == 3:\n                return (A[0] + B[0] + C[0]) / 3.0\n            else:\n                return (A[0] + A[1] + B[0] + B[1] + C[0] + C[1]) / 6.0\n        else:\n            # A, B, C are not same length\n            if A.len == 3:\n                return (A[0] + B[1] + C[2]) / 3.0\n            elif B.len == 3:\n                return (A[1] + B[0] + C[2]) / 3.0\n            elif C.len == 3:\n                return (A[2] + B[0] + C[1]) / 3.0\n            else:\n                return (A[0] + A[1] + B[0] + B[1] + C[0] + C[1] + C[2]) / 8.0\n\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3]\n    B = [4, 5, 6]\n    C = [7, 8, 9]\n    s = Solution()\n    print(s.findMedianSortedArrays(A, B, C))\n    print(s.findMed",
    "def median3(arr):\n    # sorted\n    arr.sort()\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0]+arr[1])/2\n    return arr[len(arr)/2]",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    # if the number of numbers is not even, then add the last number\n    if len(a) % 2!= 0:\n        a.append(c)\n    # if the number of numbers is even, then add the last number to the first\n    elif len(a) % 2 == 0:\n        a.insert(0, c)\n\n    # sort the list\n    a.sort()\n\n    # return the median of the three\n    return a[len(a) // 2]",
    "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: float\n        \"\"\"\n        if len(nums1) < 1 or len(nums2) < 1 or len(nums3) < 1:\n            return 0.0\n        if len(nums1) == 1:\n            return nums1[0]\n        if len(nums2) == 1:\n            return nums2[0]\n        if len(nums3) == 1:\n            return nums3[0]\n        if len(nums1) > len(nums2):\n            if len(nums1) > len(nums3):\n                return self.findMedian(nums1, nums2, nums3)\n            else:\n                return self.findMedian(nums1, nums3, nums2)\n        elif len(nums2) > len(nums3):\n            if len(nums2) > len(nums1):\n                return self.findMedian(nums2, nums1, nums3)\n            else:\n                return self.findMedian(nums2, nums3, nums1)\n        else:\n            return self.findMedian(nums3, nums1, nums2)\n        \n    def findMedian(self, nums1, nums2, nums3):\n        return (nums1[0] + nums2[0] + nums3[0]) / 3.0",
    "def median(a, b, c):\n    return ((a + b + c) / 3)\n\ndef median3(a, b, c):\n    return (a + b + c) / 3",
    "def median(arr):\n    if len(arr) == 3:\n        return arr[(arr.index(arr[0]) + arr.index(arr[1])) / 2]\n    elif len(arr) == 2:\n        return arr[1]\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return None\n\nmedian([2, 1, 3])\nmedian([1, 2, 3])\nmedian([1, 1, 3])",
    "# import time\n# import sys\n# import random\n# import math\n# import os\n\n# # import itertools\n# # import collections\n\n# # import numpy\n# # import numpy.linalg\n# # import numpy.random\n\n# # import matplotlib.pyplot as plt\n# # import matplotlib.image as mpimg\n# # import matplotlib.animation as mpani\n# # import matplotlib.cm as cm\n# # import matplotlib.colors as mplc\n# # import matplotlib.colors as mplc\n# # import matplotlib.cm as cm\n# # import matplotlib.colors as mplc\n# # import matplotlib.colors as mplc\n\n# # import scipy.interpolate\n# # import scipy.ndimage\n\n# # import skimage\n# # import skimage.filters\n# # import skimage.io\n# # import skimage.transform\n# # import skimage.segmentation\n# # import skimage.morphology\n# # import skimage.feature\n\n# # import skimage.util as skutil\n# # import skimage.exposure\n# # import skimage.color as skc\n# # import skimage.measure as skm\n\n# # import skimage.morphology\n# # import skimage.morphology\n# # import skimage.filters\n# # import skimage.filters\n# # import skimage.filters\n\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n# # import skimage.util.shape\n\n# # import skimage.io\n# # import skimage.io\n# # import skimage.io\n# # import skimage.io\n# # import skimage.io\n# # import",
    "class Solution(object):\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: float\n        \"\"\"\n        a = sorted(A)\n        b = sorted(B)\n        c = sorted(C)\n        if len(a) == 0 or len(b) == 0 or len(c) == 0:\n            return 0\n        if len(a) == 1 or len(b) == 1 or len(c) == 1:\n            return a[0]\n        if len(a) == 2 and len(b) == 2 and len(c) == 2:\n            return (a[0] + b[1] + c[2]) / 3\n        if len(a) == 2 and len(b) == 1 and len(c) == 2:\n            return (a[0] + b[1] + c[2]) / 3\n        if len(a) == 1 and len(b) == 2 and len(c) == 2:\n            return (a[0] + b[1] + c[2]) / 3\n        if len(a) == 2 and len(b) == 2 and len(c) == 1:\n            return (a[0] + b[1] + c[0]) / 3\n        if len(a) == 1 and len(b) == 1 and len(c) == 2:\n            return (a[0] + b[1] + c[1]) / 3\n        if len(a) == 2 and len(b) == 1 and len(c) == 1:\n            return (a[0] + b[1] + c[0]) / 3\n        if len(a) == 1 and len(b) == 2 and len(c) == 1:\n            return (a[0] + b[1] + c[0]) / 3\n        if len(a) == 2 and len(b) == 1 and len(c) == 1:\n            return (a[0] + b[1] + c[0]) / 3\n        if len(a) == 1",
    "def find_median(a, b, c):\n    \"\"\"\n    >>> find_median(1, 2, 3)\n    2.5\n    >>> find_median(1, 3, 4)\n    3.5\n    >>> find_median(1, 4, 5)\n    4.5\n    >>> find_median(1, 2, 4)\n    2.5\n    \"\"\"\n    #print 'a,b,c', a,b,c\n    if a+b > c:\n        if a+c > b:\n            return float(a+c)/2\n        else:\n            return float(a+b)/2\n    else:\n        if b+c > a:\n            return float(b+c)/2\n        else:\n            return float(b+a)/2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# Write your code here\ndef findMedian(num1, num2, num3):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type num3: int\n    :rtype: float\n    \"\"\"\n    print num1, num2, num3\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    else:\n        return num3",
    "def median_of_three(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] < arr[1] else arr[1]\n    else:\n        return (arr[1] + arr[2]) / 2\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert median_of_three([1, 2, 3]) == 2, \"1st example\"\n    assert median_of_three([1, 2, 3, 4]) == 3, \"2nd example\"\n    assert median_of_three([3, 1, 4, 2]) == 3, \"3rd example\"",
    "def median_of_three(a, b, c):\n    if a > b > c:\n        return a\n    elif b > a > c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print median_of_three(3, 2, 1)\n    print median_of_three(5, 1, 3)\n    print median_of_three(1, 4, 2)",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n        c = third number\n\n    Output:\n        The median of a, b and c.\n\n    Example:\n        >>> median_of_three(1, 2, 3)\n        2.5\n    \"\"\"\n    return (a + b + c) / 3\n\ndef median_of_three_two_sides(a, b, c):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n        c = third number\n\n    Output:\n        The median of a, b and c.\n\n    Example:\n        >>> median_of_three_two_sides(1, 2, 3)\n        2.5\n    \"\"\"\n    return (a + b + c) / 3.0\n\ndef median_of_three_three_sides(a, b, c):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n        c = third number\n\n    Output:\n        The median of a, b and c.\n\n    Example:\n        >>> median_of_three_three_sides(1, 2, 3)\n        2.5\n    \"\"\"\n    return (a + b + c) / 3.0\n\ndef median_of_three_three_sides_exact(a, b, c):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n        c = third number\n\n    Output:\n        The median of a, b and c.\n\n    Example:\n        >>> median_of_three_three_sides_exact(1, 2, 3)\n        2.5\n    \"\"\"\n    return (a + b + c) / 3.0\n\ndef median_of_three_exact(a, b, c):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n        c = third number\n\n    Output:\n        The median of a, b and c.\n\n    Example:\n        >>> median_of_three_exact(1, 2, 3)\n        2.5\n    \"\"\"\n    return (a + b",
    "#!/usr/bin/python\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
    "def find_median(a, b, c):\n    \"\"\"\n    a, b, and c are three integers.\n    Return the median of a, b, and c.\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b + c == 0:\n        return 0\n    else:\n        return (a + b + c) / 3\n\nprint(find_median(0, 0, 0))\nprint(find_median(0, 0, 1))\nprint(find_median(0, 1, 1))\nprint(find_median(0, 1, 2))\nprint(find_median(1, 1, 2))\nprint(find_median(1, 1, 3))\nprint(find_median(2, 1, 2))\nprint(find_median(2, 1, 3))\nprint(find_median(2, 2, 3))",
    "def median_of_three(number):\n    \"\"\"\n    :type number: int\n    :rtype: float\n    \"\"\"\n    return ((number + 1) / 3.0)\n\nif __name__ == \"__main__\":\n    assert median_of_three(0) == 0\n    assert median_of_three(1) == 1\n    assert median_of_three(2) == 2\n    assert median_of_three(3) == 2\n    assert median_of_three(4) == 2.5\n    assert median_of_three(5) == 3\n    assert median_of_three(6) == 3.5\n    assert median_of_three(7) == 4\n    assert median_of_three(8) == 4.5\n    assert median_of_three(9) == 5\n    assert median_of_three(10) == 5.5\n    assert median_of_three(11) == 6\n    assert median_of_three(12) == 6.5\n    assert median_of_three(13) == 7\n    assert median_of_three(14) == 7.5\n    assert median_of_three(15) == 8\n    assert median_of_three(16) == 8.5\n    assert median_of_three(17) == 9\n    assert median_of_three(18) == 9.5\n    assert median_of_three(19) == 10\n    assert median_of_three(20) == 10.5\n    assert median_of_three(21) == 11\n    assert median_of_three(22) == 11.5\n    assert median_of_three(23) == 12\n    assert median_of_three(24) == 12.5\n    assert median_of_three(25) == 13\n    assert median_of_three(26) == 13.5\n    assert median_of_three(27) == 14\n    assert median_of_three(28) == 14.5\n    assert median_of_three(29) == 15\n    assert median_of_three(30) == 15.5\n    assert median_of_three(31) == 16\n    assert median_of_three(32) == 16",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :type C: ListNode\n        :rtype: float\n        \"\"\"\n        if A is None and B is None and C is None:\n            return 0.0\n        if A is None or B is None or C is None:\n            return None\n        if A.val > B.val and A.val > C.val:\n            return self.findMedianSortedArrays(C, B, A)\n        elif B.val > A.val and B.val > C.val:\n            return self.findMedianSortedArrays(A, C, B)\n        else:\n            return (A.val + B.val + C.val) / 3.0",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\ndef median_of_three_recursive(a, b, c):\n    \"\"\"\n    Find the median of three numbers using recursion.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\ndef median_of_three_iterative(a, b, c):\n    \"\"\"\n    Find the median of three numbers using iterative approach.\n    \"\"\"\n    a_b, b_c, c_a = (a, b, c)\n    a_b_c = (a_b, b_c, c_a)\n    print(a_b_c)\n    if a_b < b_c and a_b < c_a:\n        return a_b\n    elif b_c < a_b and b_c < c_a:\n        return b_c\n    else:\n        return c_a\n\ndef median_of_three_iterative_2(a, b, c):\n    \"\"\"\n    Find the median of three numbers using iterative approach.\n    \"\"\"\n    a_b, b_c, c_a = (a, b, c)\n    a_b_c = (a_b, b_c, c_a)\n    print(a_b_c)\n    if a_b < b_c:\n        if a_b < c_a:\n            return a_b\n        else:\n            return b_c\n    elif b_c < a_b:\n        if b_c < c_a:\n            return b_c\n        else:\n            return c_a\n    else:\n        if c_a < a_b:\n            return c_a\n        else:\n            return b_c\n\ndef median_of_three_iterative_3(a, b, c):",
    "def find_median(n1, n2, n3):\n    \"\"\"\n    Write a function to find the median of three specific numbers.\n\n    n1, n2, n3 are integers.\n\n    Return the median of n1, n2, n3.\n    \"\"\"\n    return (n1 + n2 + n3) / 3.0\n\n\ndef test_median_of_three():\n    assert find_median(1, 2, 3) == 2.5\n    assert find_median(2, 3, 4) == 3.5\n    assert find_median(2, 3, 4) == 3.5\n    assert find_median(4, 3, 2) == 3.5\n    assert find_median(1, 2, 3) == 2.5\n    assert find_median(4, 3, 1) == 3.5",
    "def find_median(numbers):\n    \"\"\"\n    numbers = [1, 2, 3]\n    return 1.5\n    \"\"\"\n    return sorted(numbers)[len(numbers)//2]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3]\n    print find_median(numbers)",
    "# your code here\n\ndef find_median_three(a,b,c):\n    if a < b < c:\n        return a\n    elif a < b:\n        return b\n    elif b < c:\n        return c\n\nprint find_median_three(1,2,3)\nprint find_median_three(4,5,6)\nprint find_median_three(7,8,9)",
    "# Your code here\ndef median(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        return (arr[len(arr) // 2] + arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 3\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(median(arr))",
    "def median_of_three(a, b, c):\n    \"\"\"\n    a, b, and c are specific numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\nif __name__ == \"__main__\":\n    a = int(input(\"Please enter the first number: \"))\n    b = int(input(\"Please enter the second number: \"))\n    c = int(input(\"Please enter the third number: \"))\n    print(median_of_three(a, b, c))",
    "import math\n\ndef median_of_three(n1, n2, n3):\n    if n1 < n2 and n2 < n3:\n        return n1\n    elif n2 < n1 and n1 < n3:\n        return n2\n    else:\n        return n3\n\nn1 = int(input())\nn2 = int(input())\nn3 = int(input())\n\nmedian = median_of_three(n1, n2, n3)\nprint(median)",
    "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: float\n        \"\"\"\n        # http://www.cnblogs.com/grandyang/p/4098257.html\n        if len(nums1) < 3 or len(nums2) < 3 or len(nums3) < 3:\n            return None\n        \n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        \n        # if nums1[0] > nums2[0] and nums1[0] > nums3[0]:\n        #     return nums1[0]\n        # elif nums2[0] > nums1[0] and nums2[0] > nums3[0]:\n        #     return nums2[0]\n        # elif nums3[0] > nums1[0] and nums3[0] > nums2[0]:\n        #     return nums3[0]\n        \n        if nums1[0] > nums2[0] and nums1[0] > nums3[0]:\n            return nums1[0]\n        elif nums2[0] > nums1[0] and nums2[0] > nums3[0]:\n            return nums2[0]\n        elif nums3[0] > nums1[0] and nums3[0] > nums2[0]:\n            return nums3[0]\n        else:\n            return float(nums1[0] + nums2[0] + nums3[0]) / 3.0",
    "# https://www.hackerrank.com/challenges/median-of-three\n\ndef median_of_three(nums):\n    return (nums[0] + nums[1] + nums[2]) / 3\n\nif __name__ == '__main__':\n    nums = [int(input()) for _ in range(3)]\n    print(median_of_three(nums))",
    "# https://www.hackerrank.com/challenges/median-of-three\n# https://www.hackerrank.com/challenges/median-of-four\n\n\ndef find_median(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    nums.sort()\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return (nums[0] + nums[1]) / 2.0\n    else:\n        return nums[len(nums) / 2]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    nums = [3, 2, 1]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]\n    nums = [9, 8, 7]\n    nums = [2, 1, 1]\n    nums = [1, 2, 3]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]\n    nums = [9, 8, 7]\n    nums = [2, 1, 1]\n    nums = [1, 2, 3]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]\n    nums = [9, 8, 7]\n    nums = [2, 1, 1]\n    nums = [1, 2, 3]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]\n    nums = [9, 8, 7]\n    nums = [2, 1, 1]\n    nums = [1, 2, 3]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]\n    nums = [9, 8, 7]\n    nums = [2, 1, 1]\n    nums = [1, 2, 3]\n    nums = [4, 5, 6]\n    nums = [7, 8, 9]",
    "class Solution(object):\n    \"\"\"\n    @param: a, b, c: the three numbers\n    @return: the median of the three numbers\n    \"\"\"\n    def findMedianSortedArrays(self, a, b, c):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :type c: List[int]\n        :rtype: float\n        \"\"\"\n        if len(a) > len(b) or len(a) > len(c):\n            return self.findMedianSortedArrays(b, a, c)\n        if len(b) > len(c) or len(b) > len(a):\n            return self.findMedianSortedArrays(c, a, b)\n        if a[0] > b[0] and a[1] > b[1]:\n            return a[2]\n        elif a[0] > c[0] and a[1] > c[1]:\n            return a[2]\n        elif b[0] > c[0] and b[1] > c[1]:\n            return b[2]\n        else:\n            return c[2]\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3]\n    b = [3, 2, 1]\n    c = [3, 3, 1]\n    s = Solution()\n    print s.findMedianSortedArrays(a, b, c)",
    "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n# Example 1:\n# Input:\n# [2,6,4]\n# Output:\n# 4\n# Example 2:\n# Input:\n# [1,2,4]\n# Output:\n# 2\n# Example 3:\n# Input:\n# [1,3,4]\n# Output:\n# 3\n\nclass Solution:\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: float\n        \"\"\"\n        if len(A) == 0 or len(B) == 0 or len(C) == 0:\n            return 0\n        if len(A) > len(B) and len(A) > len(C):\n            return self.findMedianSortedArrays(B, C, A)\n        if len(A) < len(B) and len(A) < len(C):\n            return self.findMedianSortedArrays(A, B, C)\n        if len(A) == len(B) and len(A) == len(C):\n            return (A[0] + B[0] + C[0]) / 3.0\n        return (max(A[0], B[0], C[0]) + min(A[1], B[1], C[1])) / 2.0\n\nif __name__ == \"__main__\":\n    print(Solution().findMedianSortedArrays([2,6,4], [1,2,4], [1,3,4]))",
    "def find_median(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 3.0\n\n\nif __name__ == '__main__':\n    a = 2\n    b = 4\n    c = 6\n    print find_median(a, b, c)\n    #>>> 3.5",
    "import random\n\n\ndef median_of_three(arr):\n    \"\"\"\n    For the given array, find the median of three numbers.\n\n    :param arr: the given array\n    :return: median of three numbers\n    \"\"\"\n    # return the middle of the array\n    if len(arr) < 3:\n        return arr[len(arr) // 2]\n    # sort the array\n    sorted_arr = sorted(arr)\n    # get the middle of the array\n    middle = sorted_arr[len(sorted_arr) // 2]\n    # get the first and last elements\n    first = sorted_arr[0]\n    last = sorted_arr[len(sorted_arr) - 1]\n    # compare the middle with the first and last elements\n    if middle < first or middle > last:\n        return median_of_three(sorted_arr)\n    # if the middle is between the first and the last elements,\n    # return the middle\n    else:\n        return middle\n\n# Test Cases\ntest_arr = [2, 4, 6, 7, 9, 11, 13, 15, 18, 20, 23, 25, 27, 29, 31, 34, 36, 38, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55]\n\nprint(median_of_three(test_arr))",
    "#\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :type C: ListNode\n        :rtype: float\n        \"\"\"\n        n1 = len(A)\n        n2 = len(B)\n        n3 = len(C)\n        if n1 + n2 + n3 == 0:\n            return 0.0\n        if n1 + n2 == 0:\n            return B.val\n        if n1 + n3 == 0:\n            return C.val\n        if n2 + n3 == 0:\n            return A.val\n        if n1 + n2 + n3 == 1:\n            return min(A.val, B.val, C.val)\n        if n1 + n2 > n3:\n            return (B.val + C.val) / 2.0\n        else:\n            return (A.val + C.val) / 2.0",
    "from math import sqrt\n\ndef median(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return (arr[0] + arr[1])/2\n    else:\n        a = arr[len(arr)/2]\n        b = arr[len(arr)/2 - 1]\n        c = arr[len(arr)/2 + 1]\n        if a > b:\n            if a > c:\n                return a\n            else:\n                return c\n        else:\n            if b > c:\n                return b\n            else:\n                return c\n\ndef median_of_three(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    else:\n        a = arr[len(arr)/3]\n        b = arr[len(arr)/3 - 1]\n        c = arr[len(arr)/3 + 1]\n        if a > b:\n            if a > c:\n                return a\n            else:\n                return c\n        else:\n            if b > c:\n                return b\n            else:\n                return c\n\ndef median_of_three_recursion(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    else:\n        if len(arr) % 2 == 0:\n            median_of_three_recursion(arr[",
    "def median_of_three(numbers):\n    \"\"\"\n    >>> median_of_three([1, 2, 3])\n    2\n    >>> median_of_three([1, 2, 3, 4])\n    2\n    >>> median_of_three([1, 2, 3, 4, 5])\n    3\n    >>> median_of_three([1, 2, 3, 4, 5, 6])\n    3\n    >>> median_of_three([1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> median_of_three([1, 2, 3, 4, 5, 6, 7, 8])\n    3\n    >>> median_of_three([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    4\n    \"\"\"\n    if len(numbers) == 3:\n        return sum(numbers) / 3\n    else:\n        return median_of_three(numbers[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "",
    "def median(numbers):\n    numbers = sorted(numbers)\n    return numbers[(len(numbers) + 1) / 2]\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(median(numbers))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point(%d, %d)\" % (self.x, self.y)\n\nclass Solution:\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[Point]\n        :type B: List[Point]\n        :type C: List[Point]\n        :rtype: float\n        \"\"\"\n        if len(A) == 0 or len(B) == 0 or len(C) == 0:\n            return 0\n        a = A[0]\n        b = B[0]\n        c = C[0]\n        a1 = a\n        a2 = a\n        b1 = b\n        b2 = b\n        c1 = c\n        c2 = c\n        a_sum = 0\n        b_sum = 0\n        c_sum = 0\n        for i in range(1, len(A)):\n            a = A[i]\n            b = B[i]\n            c = C[i]\n            a1 = a\n            a2 = a\n            b1 = b\n            b2 = b\n            c1 = c\n            c2 = c\n            if a.x > b.x:\n                a1.x += 1\n                a2.x -= 1\n                a_sum += 1\n            elif a.x < b.x:\n                b1.x += 1\n                b2.x -= 1\n                b_sum += 1\n            else:\n                c1.x += 1\n                c2.x -= 1\n                c_sum += 1\n        if a_sum > b_sum:\n            if a_sum > c_sum:\n                return a1.x\n            else:\n                return c1.x\n        elif b_sum > a_sum:\n            if b_sum > c_sum:\n                return b1.x\n            else:\n                return c1.x\n        else:\n            if c_sum > a_sum:",
    "def find_median(a, b, c):\n    \"\"\"\n    >>> find_median(3, 4, 5)\n    3\n    >>> find_median(1, 5, 7)\n    3.5\n    >>> find_median(1, 2, 3)\n    2\n    \"\"\"\n    if a > b and a > c:\n        if b > c:\n            return b\n        else:\n            return c\n    elif b > a and b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if c > a and c > b:\n            return c\n        else:\n            return a\n\nif __name__ == \"__main__\":\n    print find_median(3, 4, 5)",
    "def median(a, b, c):\n    a, b, c = sorted([a, b, c])\n    if a + b > c:\n        if a + b == c:\n            return a\n        else:\n            return a + (c - b) / 2\n    else:\n        if c + b == a:\n            return c\n        else:\n            return c + (a - c) / 2\n\nprint(median(4, 5, 6))",
    "def find_median(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        if b > a:\n            return b\n        else:\n            return a\n    else:\n        if c > a:\n            return c\n        else:\n            return a\n\n\ndef test():\n    a = 9\n    b = 5\n    c = 1\n\n    assert find_median(a, b, c) == 5\n    assert find_median(b, a, c) == 5\n    assert find_median(c, a, b) == 5\n\nif __name__ == '__main__':\n    test()",
    "# Median of three numbers\ndef median(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\n# Median of three numbers\ndef median(a, b, c):\n    return a if a > b and a > c else b if b > a and b > c else c\n\n\nif __name__ == \"__main__\":\n    # Test case 1\n    a = int(raw_input())\n    b = int(raw_input())\n    c = int(raw_input())\n    print median(a, b, c)",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def findMedianSortedArrays(self, root):\n        # write your code here\n        if root is None:\n            return 0.0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is None:\n            return (root.val + root.right.val) / 2.0\n        if root.right is None:\n            return (root.val + root.left.val) / 2.0\n        if root.left.val <= root.right.val:\n            return (root.val + root.left.val + root.right.val) / 3.0\n        else:\n            return (root.val + root.right.val + root.left.val) / 3.0",
    "def median_of_three(arr):\n    if len(arr)!= 3:\n        raise Exception(\"Not enough data\")\n    elif arr[0] > arr[1] and arr[0] > arr[2]:\n        return arr[0]\n    elif arr[1] > arr[2]:\n        return arr[1]\n    else:\n        return arr[2]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    print(median_of_three(arr))",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: float\n        \"\"\"\n        # write your code here\n        \n        if len(nums1) == 0 or len(nums2) == 0 or len(nums3) == 0:\n            return None\n        \n        l1 = len(nums1)\n        l2 = len(nums2)\n        l3 = len(nums3)\n        \n        # sort the three arrays\n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        \n        if l1 < l2 or l2 < l3:\n            return None\n        \n        if l1 == l2:\n            return (nums1[l1/2] + nums2[l2/2] + nums3[l2/2]) / 3.0\n        else:\n            return (nums1[l1/2] + nums3[l3/2]) / 2.0",
    "def median_of_three(a, b, c):\n    return (a + b + c) / 3\n\nif __name__ == \"__main__\":\n    print median_of_three(4, 3, 2)\n    print median_of_three(2, 4, 3)\n    print median_of_three(1, 3, 2)\n    print median_of_three(4, 3, 3)\n    print median_of_three(4, 3, 4)\n    print median_of_three(2, 2, 3)",
    "\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array, write a function to find the median of the three numbers.\n\"\"\"\n\n\"\"\"\nGiven an array",
    "def median(a,b,c):\n    \"\"\"\n    >>> median(3, 5, 6)\n    3\n    >>> median(1, 2, 3)\n    2\n    >>> median(3, 1, 2)\n    2\n    \"\"\"\n    if (a+b) > (c+b):\n        if (a+b) > (c+a):\n            return a\n        else:\n            return b\n    elif (b+c) > (a+c):\n        if (b+c) > (a+b):\n            return b\n        else:\n            return c\n    else:\n        return a\n\nprint median(3, 5, 6)",
    "def median_of_three(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    :param a: First number.\n    :param b: Second number.\n    :param c: Third number.\n\n    :return: The median of three numbers.\n    \"\"\"\n    return (a + b + c) / 3\n\nif __name__ == '__main__':\n    print(median_of_three(1, 2, 3))\n    print(median_of_three(3, 4, 5))\n    print(median_of_three(5, 4, 3))\n    print(median_of_three(3, 2, 1))",
    "def median(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if (a + b > c):\n        if (a + b == c):\n            return a\n        else:\n            return (a + b) / 2\n    else:\n        if (b + c > a):\n            if (b + c == a):\n                return b\n            else:\n                return (b + c) / 2\n        else:\n            if (a + c == b):\n                return a\n            else:\n                return (a + c) / 2\n\nprint(median(1, 2, 3))\nprint(median(4, 5, 6))\nprint(median(7, 8, 9))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n3 = len(nums3)\n        if n1 == 0 or n2 == 0 or n3 == 0:\n            return None\n        n1, n2, n3 = sorted([n1, n2, n3])\n        if n1 + n2 > n3:\n            return (nums1[n1/2] + nums2[n2/2] + nums3[n3/2]) / 3\n        elif n1 + n2 < n3:\n            return (nums1[n1/2] + nums2[n2/2] + nums3[n3/2]) / 3\n        else:\n            return (nums1[n1/2] + nums2[n2/2] + nums3[n3/2]) / 3",
    "def findMedian(numbers):\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return (numbers[0] + numbers[1]) / 2\n    else:\n        a = numbers[len(numbers) / 2]\n        b = numbers[len(numbers) / 2 - 1]\n        c = numbers[len(numbers) / 2 + 1]\n        if a > b and a > c:\n            return a\n        elif b > a and b > c:\n            return b\n        elif c > a and c > b:\n            return c\n        else:\n            return a\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert findMedian([2, 1, 3]) == 2.5, \"2\"\n    assert findMedian([1, 1, 1, 1]) == 1, \"1\"\n    assert findMedian([3, 1, 1, 2, 2]) == 2.5, \"3\"\n    assert findMedian([3, 1, 2, 2, 4]) == 3, \"3.5\"\n    assert findMedian([3, 2, 3, 1, 4]) == 3, \"3.5\"\n    assert findMedian([4, 5, 6, 3, 1]) == 4, \"4.5\"\n    assert findMedian([1, 5, 6, 3, 4]) == 3.5, \"3.5\"\n    assert findMedian([3, 3, 3, 3, 3, 3, 3]) == 3, \"3.5\"\n    assert findMedian([1, 3, 4, 3, 4, 5, 4, 3, 1]) == 3.5, \"3.5\"\n    assert findMedian([2, 2, 3, 4, 4, 5, 4, 3, 2]) == 3.5, \"3.5\"\n    assert findMedian([1, 1, 2, 3, 4, 5, 6, 7, 8]) == 3.5, \"3.5\"",
    "def median(a, b, c):\n    \"\"\"\n    Input:\n        a, b, and c are three integers\n    Output:\n        the median of a, b, and c\n    \"\"\"\n    return (a + b + c) / 3\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(median(a, b, c))",
    "# Your code here!\n\ndef find_median(arr):\n    \"\"\"\n    Finds the median of three numbers in arr.\n    :param arr: A list of integers\n    :return: The median of the three numbers\n    \"\"\"\n    # Sort the input\n    sorted_arr = sorted(arr)\n\n    # If the length is odd, return the median of the first two numbers\n    if len(arr) % 2 == 1:\n        return sorted_arr[len(arr) / 2]\n\n    # If the length is even, return the average of the two middle numbers\n    else:\n        return (sorted_arr[len(arr) / 2 - 1] + sorted_arr[len(arr) / 2]) / 2",
    "# The solution to the median problem\ndef find_median(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_2(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_3(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_4(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_5(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_6(a, b, c):\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a > b > c:\n        return (b + c + a) / 3\n    else:\n        return (c + a + b) / 3\n\n# The solution to the median problem\ndef find_median_7",
    "def findMedian(a, b, c):\n    print(a, b, c)\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    elif c > a and c > b:\n        return c\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    findMedian(a, b, c)",
    "# https://codility.com/demo/results/demoTK2VpI-I7/\n\nimport random\n\ndef median(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median3(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median_1(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median_2(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median_3(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median_4(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        else:\n            return c\n    return a\n\ndef median_5(a, b, c):\n    if a + b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b",
    "import random\n\n\ndef median(a, b, c):\n    \"\"\"\n    Median is the middle value in an ordered list.\n    \"\"\"\n    return (a + b + c) / 3.0\n\n\ndef median_test(a, b, c):\n    \"\"\"\n    Test median function.\n    \"\"\"\n    if a < b < c:\n        print('A is smaller than B and smaller than C')\n    elif a < b and a < c:\n        print('A is smaller than B and larger than C')\n    elif a < c and a < b:\n        print('A is smaller than C and larger than B')\n    elif a == b == c:\n        print('All three values are equal')\n    elif a == b > c:\n        print('A is equal to B, but larger than C')\n    elif a == c > b:\n        print('A is equal to B, but larger than C')\n    elif a > b > c:\n        print('A is larger than B, but larger than C')\n    elif a > c > b:\n        print('A is larger than B, but larger than C')\n    else:\n        print('No median')\n\n\ndef median_random():\n    \"\"\"\n    Generate a random number between 0 and 100.\n    \"\"\"\n    return random.randint(0, 100)\n\n\ndef median_random_test():\n    \"\"\"\n    Test median function.\n    \"\"\"\n    median_random_test(median_random(), median_random(), median_random())\n\n\ndef median_random_test_2():\n    \"\"\"\n    Test median function.\n    \"\"\"\n    median_random_test(random.randint(0, 100), random.randint(0, 100),\n                       random.randint(0, 100))\n\n\ndef median_random_test_3():\n    \"\"\"\n    Test median function.\n    \"\"\"\n    median_random_test(random.randint(0, 100), random.randint(0, 100),\n                       random.randint(0, 100))\n\n\ndef median_random_test_4():\n    \"\"\"\n    Test median function.\n    \"\"\"\n    median_random_test(",
    "def median_of_three(numbers):\n    \"\"\"\n    numbers is a list of three numbers.\n    \"\"\"\n    if len(numbers) == 3:\n        return median_of_three_sorted(numbers)\n    elif len(numbers) == 2:\n        return median_of_two_sorted(numbers)\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return median_of_three_sorted(numbers)\n\ndef median_of_three_sorted(numbers):\n    \"\"\"\n    numbers is a sorted list of three numbers.\n    \"\"\"\n    a, b, c = numbers\n    if a == b == c:\n        return a\n    elif a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\ndef median_of_two_sorted(numbers):\n    \"\"\"\n    numbers is a sorted list of two numbers.\n    \"\"\"\n    a, b = numbers\n    if a == b:\n        return a\n    elif a < b:\n        return a\n    else:\n        return b\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3]\n    print(median_of_three(numbers))\n    numbers = [1, 2, 3, 4]\n    print(median_of_three(numbers))\n    numbers = [1, 2, 3, 4, 5]\n    print(median_of_three(numbers))",
    "def median(a,b,c):\n    \"\"\"\n    Given three numbers, return the median of them.\n    \"\"\"\n    if a < b < c:\n        return (a + b + c) / 3\n    elif a < b:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print median(1,2,3)",
    "from collections import namedtuple\n\nMedian = namedtuple('Median', 'first third')\n\n\ndef median_of_three(numbers):\n    \"\"\"\n    Find the median of three numbers\n    :param numbers: A tuple of three integers\n    :return: A namedtuple containing the median of three numbers\n    \"\"\"\n    return Median(\n        min(numbers),\n        (numbers[1] + numbers[2]) / 2,\n        max(numbers)\n    )\n\n\ndef test_median_of_three():\n    assert median_of_three([0, 0, 0]) == Median(0, 0, 0)\n    assert median_of_three([1, 0, 0]) == Median(0, 0, 1)\n    assert median_of_three([0, 1, 0]) == Median(0, 1, 0)\n    assert median_of_three([0, 0, 2]) == Median(0, 0, 2)\n    assert median_of_three([2, 2, 2]) == Median(2, 2, 2)\n    assert median_of_three([0, 0, 0]) == Median(0, 0, 0)\n\n\nif __name__ == '__main__':\n    test_median_of_three()",
    "def median(a, b, c):\n    \"\"\"\n    a, b, c: integers\n    return: median of a, b and c\n    \"\"\"\n    return (a + b + c) / 3\n\n# print median(1, 2, 3)\n# print median(3, 4, 5)\n# print median(1, 2, 3, 4, 5)\n\ndef median_solution():\n    a = 1\n    b = 2\n    c = 3\n    print median(a, b, c)\n\nmedian_solution()",
    "def find_median(a, b, c):\n    \"\"\"\n    Return the median of a, b and c.\n    \"\"\"\n    return (a + b + c) / 3.0\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_median(2, 3, 4) == 2.5, \"2 + 3 + 4 = {}\".format(find_median(2, 3, 4))\n    assert find_median(2, 5, 4) == 3.0, \"2 + 5 + 4 = {}\".format(find_median(2, 5, 4))\n    assert find_median(2, 3, 5) == 3.0, \"2 + 3 + 5 = {}\".format(find_median(2, 3, 5))\n    assert find_median(1, 5, 4) == 4.0, \"1 + 5 + 4 = {}\".format(find_median(1, 5, 4))\n    assert find_median(4, 5, 1) == 4.0, \"4 + 5 + 1 = {}\".format(find_median(4, 5, 1))\n    assert find_median(4, 5, 6) == 5.0, \"4 + 5 + 6 = {}\".format(find_median(4, 5, 6))\n    assert find_median(10, 99, -1) == 50.0, \"10 + 99 + -1 = {}\".format(find_median(10, 99, -1))\n    assert find_median(5, 6, 7) == 6.5, \"5 + 6 + 7 = {}\".format(find_median(5, 6, 7))",
    "def median(a, b, c):\n    if a + b > c:\n        if a + b > c + c:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n        else:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n    else:\n        if a + c > b + c:\n            return a + b\n        else:\n            return b + c\n\ndef median_recursive(a, b, c):\n    if a + b > c:\n        if a + b > c + c:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n        else:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n    else:\n        if a + c > b + c:\n            return a + b\n        else:\n            return b + c\n\ndef median_iterative(a, b, c):\n    if a + b > c:\n        if a + b > c + c:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n        else:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n    else:\n        if a + c > b + c:\n            return a + b\n        else:\n            return b + c\n\ndef median_dp(a, b, c):\n    if a + b > c:\n        if a + b > c + c:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n        else:\n            if a + c > b + c:\n                return a + c\n            else:\n                return b + c\n    else:\n        if a + c > b + c:\n            return a + b\n        else:\n            return b + c\n\nif __name__ == \"__main__\":\n    assert median(1, 2, 3) == 2",
    "def find_median(a, b, c):\n    \"\"\"\n    Returns the median of the three numbers.\n\n    a, b, and c are integers.\n    \"\"\"\n    return (a + b + c) / 3\n\nif __name__ == '__main__':\n    print find_median(1, 2, 3)",
    "def find_median(numbers):\n    \"\"\"\n    :param numbers: A list of numbers.\n    :return: The median of the numbers.\n    \"\"\"\n    if len(numbers) == 3:\n        return (numbers[0] + numbers[1] + numbers[2])/3\n    else:\n        return None\n\n# Test Cases\nassert find_median([1, 2, 3, 4]) == 2.5\nassert find_median([1, 2, 3, 5, 6]) == 3.5\nassert find_median([1, 2, 3, 4, 5]) == 3.5\nassert find_median([1, 2, 3]) == 2.5\nassert find_median([1, 2, 3, 4, 5, 6]) == 3.5\nassert find_median([]) == None\nassert find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5",
    "# Median of three\ndef median3(arr):\n    return (arr[0] + arr[1] + arr[2])/3\n\n# Median of five\ndef median5(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4])/5\n\n# Median of seven\ndef median7(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6])/7\n\n# Median of nine\ndef median9(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8])/9\n\n# Median of eleven\ndef median11(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10])/11\n\n# Median of thirteen\ndef median13(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12])/13\n\n# Median of fifteen\ndef median15(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14])/15\n\n# Median of seventeen\ndef median17(arr):\n    return (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] +",
    "from collections import namedtuple\n\n\ndef median_of_three(a, b, c):\n    \"\"\"\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 2, 4)\n    2\n    >>> median_of_three(1, 2, 5)\n    2\n    >>> median_of_three(2, 2, 2)\n    2\n    >>> median_of_three(1, 1, 1)\n    1\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 2, 4)\n    2\n    >>> median_of_three(1, 2, 5)\n    2\n    >>> median_of_three(2, 2, 2)\n    2\n    >>> median_of_three(1, 1, 1)\n    1\n    >>> median_of_three(1, 2, 3)\n    2\n    >>> median_of_three(1, 2, 4)\n    2\n    >>> median_of_three(1, 2, 5)\n    2\n    >>> median_of_three(2, 2, 2)\n    2\n    >>> median_of_three(1, 1, 1)\n    1\n    \"\"\"\n    return (a + b + c) // 3\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def findMedianSortedArrays(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: float\n        \"\"\"\n        if A is None or B is None or C is None:\n            return None\n        if len(A) == 1:\n            return A[0]\n        if len(B) == 1:\n            return B[0]\n        if len(C) == 1:\n            return C[0]\n        if len(A) + len(B) + len(C) == 2:\n            return float(min(A[0], B[0], C[0]))\n        if len(A) + len(B) + len(C) == 3:\n            return float(min(A[0], min(B[0], C[0])))\n        if len(A) + len(B) + len(C) == 4:\n            return (A[0] + B[0] + C[0] + A[1] + B[1] + C[1]) / 3\n        return None\n\nif __name__ == \"__main__\":\n    A = [1, 3, 5, 6]\n    B = [2, 4, 6, 7]\n    C = [1, 3, 5, 7]\n    print Solution().findMedianSortedArrays(A, B, C)",
    "def median(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\n# Your MedianOfThree object will be instantiated and called as such:\n# obj = MedianOfThree(a,b,c)\n# param_1 = obj.median(a,b,c)",
    "def median(a, b, c):\n    a_sum = a + b + c\n    if a_sum == 0:\n        return 0\n    else:\n        return (a + b + c) / 3\n\nif __name__ == \"__main__\":\n    print(median(1, 2, 3))\n    print(median(3, 4, 5))\n    print(median(5, 6, 7))",
    "from math import ceil\n\ndef median_of_three(numbers):\n    \"\"\"\n    Find the median of three numbers.\n\n    Arguments:\n\n    numbers -- a list of three integers\n\n    Returns:\n\n    The median of three numbers as a float.\n\n    Example:\n\n    >>> median_of_three([2, 3, 4])\n    3.5\n    >>> median_of_three([1, 3, 5])\n    3.5\n    >>> median_of_three([5, 1, 3])\n    3.5\n    >>> median_of_three([3, 5, 1])\n    3.5\n    >>> median_of_three([3, 1, 5])\n    3.5\n    >>> median_of_three([3, 5, 1, 2])\n    3.5\n    \"\"\"\n    return float(ceil(sum(numbers) / 3))\n\nif __name__ == '__main__':\n    print(median_of_three([2, 3, 4]))\n    print(median_of_three([1, 3, 5]))\n    print(median_of_three([5, 1, 3]))\n    print(median_of_three([3, 5, 1]))\n    print(median_of_three([3, 1, 5]))\n    print(median_of_three([3, 5, 1, 2]))",
    "def findMedian(a, b, c):\n    \"\"\"\n    @param a: A number\n    @param b: A number\n    @param c: A number\n    @return: The median of the three numbers\n    \"\"\"\n    a, b, c = sorted((a, b, c))\n    if a + b > c:\n        return a\n    elif a + b < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    a = float(raw_input(\"Enter first number: \"))\n    b = float(raw_input(\"Enter second number: \"))\n    c = float(raw_input(\"Enter third number: \"))\n    print findMedian(a, b, c)",
    "def find_median(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return (numbers[0] + numbers[1]) / 2\n    else:\n        return (numbers[0] + numbers[1]) / 2 + (numbers[0] + numbers[2]) / 2\n\ndef test():\n    assert find_median([2, 1, 4]) == 2.5\n    assert find_median([1, 2, 3]) == 2.5\n    assert find_median([1, 2, 3, 4]) == 3.0\n    assert find_median([1, 2, 3, 4, 5]) == 3.5\n    assert find_median([1, 2, 3, 4, 5, 6]) == 4.5\n    assert find_median([1, 2, 3, 4, 5, 6, 7]) == 5.5\n    assert find_median([1, 2, 3, 4, 5, 6, 7, 8]) == 6.5\n\nif __name__ == '__main__':\n    test()",
    "def find_median(a, b, c):\n    if a < b < c:\n        return a\n    elif a < c < b:\n        return b\n    elif b < a < c:\n        return c\n    else:\n        return a\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(find_median(a, b, c))",
    "class Solution:\n    \"\"\"\n    @param: A: an integer array\n    @param: target: target number\n    @return: the median number\n    \"\"\"\n    def findMedianSortedArrays(self, A, target):\n        if len(A) == 1:\n            return A[0]\n        if len(A) == 2:\n            if A[0] < A[1]:\n                return A[0]\n            else:\n                return A[1]\n        # if len(A) == 3:\n        #     if A[0] < A[1]:\n        #         if A[1] < A[2]:\n        #             return A[1]\n        #         else:\n        #             return A[2]\n        #     else:\n        #         if A[0] < A[2]:\n        #             return A[0]\n        #         else:\n        #             return A[2]\n        # else:\n        #     if A[0] < A[1]:\n        #         if A[1] < A[2]:\n        #             if A[2] < A[3]:\n        #                 return A[2]\n        #             else:\n        #                 return A[3]\n        #         else:\n        #             if A[1] < A[3]:\n        #                 return A[1]\n        #             else:\n        #                 return A[3]\n        #     else:\n        #         if A[0] < A[2]:\n        #             if A[2] < A[3]:\n        #                 return A[2]\n        #             else:\n        #                 return A[3]\n        #         else:\n        #             if A[0] < A[3]:\n        #                 return A[0]\n        #             else:\n        #                 return A[3]\n        # else:\n        #     if A[0] < A[1]:\n        #         if A[1] < A[2]:\n        #             if A[2] < A[3]:\n        #                 return A[2]\n        #             else:\n        #                 return A[3]\n        #         else:",
    "import math\n\ndef median_of_three(a, b, c):\n    \"\"\"\n    For the three numbers, return the median.\n    \"\"\"\n    if a > b:\n        if b > c:\n            return b\n        else:\n            return c\n    elif a > c:\n        return c\n    else:\n        return a\n\ndef main():\n    \"\"\"\n    Unit tests.\n    \"\"\"\n    a = [5, 6, 7]\n    b = [2, 4, 6]\n    c = [3, 4, 5]\n    assert median_of_three(a, b, c) == 4.5\n    a = [5]\n    b = [2]\n    c = [3]\n    assert median_of_three(a, b, c) == 2.5\n\nif __name__ == '__main__':\n    main()",
    "def find_median(a, b, c):\n    \"\"\"\n    Return the median of three numbers.\n    \"\"\"\n    # a, b, c are integers.\n    # a + b + c is an integer.\n    # a + b is an integer.\n    # a + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is an integer.\n    # a + b + c is",
    "def find_median(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(find_median(a, b, c))",
    "def median3(a, b, c):\n    \"\"\"\n    >>> median3(1, 2, 3)\n    2\n    >>> median3(2, 3, 4)\n    2.5\n    >>> median3(1, 2, 3.5)\n    2.5\n    >>> median3(1, 2.5, 3)\n    2.5\n    >>> median3(3, 3, 3)\n    3\n    >>> median3(1, 2, 4)\n    3\n    \"\"\"\n    return (a + b + c) / 3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_median(a, b, c):\n    return (a + b + c) / 3\n\nif __name__ == \"__main__\":\n    print find_median(3, 6, 7)\n    print find_median(1, 2, 3)\n    print find_median(1, 2, 1)",
    "def find_median(a, b, c):\n    \"\"\"\n    a, b, c: three numbers\n    return: the median\n    \"\"\"\n    a, b, c = sorted(a, b, c)\n    if len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return (a[0] + a[1])/2\n    elif len(a) == 3:\n        return (a[0] + a[1] + a[2])/3\n    else:\n        return (a[0] + a[1] + a[2])/3 + (a[0] + a[1] + a[2])/3\n\n# Your MedianFinder object will be instantiated and called as such:\n# mf = MedianFinder()\n# mf.find_median(a,b,c)\n\ndef test():\n    assert find_median(3, 4, 1) == 3.5\n    assert find_median(5, 4, 1) == 4\n    assert find_median(1, 2, 3) == 2.5\n    assert find_median(1, 2, 4) == 2.5\n    assert find_median(5, 1, 3) == 3.5\n    assert find_median(1, 1, 1) == 1.0\n\ntest()",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: float\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        if len(nums1) == 0:\n            return nums2[len(nums2) / 2]\n        if len(nums2) == 0:\n            return nums3[len(nums3) / 2]\n        if len(nums3) == 0:\n            return nums1[len(nums1) / 2]\n        if nums1[0] > nums2[0]:\n            return nums2[len(nums2) / 2]\n        if nums1[0] > nums3[0]:\n            return nums3[len(nums3) / 2]\n        if nums1[0] == nums2[0] and nums1[0] == nums3[0]:\n            return (nums1[0] + nums2[0] + nums3[0]) / 3\n        return (nums1[0] + nums2[0] + nums3[0]) / 3",
    "# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return (a + b + c) / 3\n\n# Median of three\ndef med3(a, b, c):\n    return",
    "from collections import namedtuple\n\n\nclass Median(namedtuple('Median', 'a b c')):\n    @property\n    def median(self):\n        return (self.a + self.b + self.c) / 3.0\n\n\ndef median(a, b, c):\n    return Median(a, b, c)\n\n\nif __name__ == '__main__':\n    print(median(1, 2, 3))\n    print(median(3, 2, 1))\n    print(median(2, 1, 3))\n    print(median(3, 2, 4))\n    print(median(4, 3, 1))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}