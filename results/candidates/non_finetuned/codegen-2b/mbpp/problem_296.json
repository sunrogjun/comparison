{
  "problem": {
    "task_id": "MBPP/307",
    "prompt": "Write a function to get a colon of a tuple.",
    "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
    "test_list": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ],
    "challenge_test_list": [],
    "problem_id": 296
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def getColon(self, args):\n        \"\"\"\n        :type args: List[Tuple]\n        :rtype: str\n        \"\"\"\n        return ':'.join(map(str, args))",
    "class Solution(object):\n    def getColon(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        for i in xrange(1, n + 1):\n            if i % 3 == 0:\n                return str(i)\n        return str(n)",
    "class Solution:\n    # @return a string\n    def getColon(self, nums):\n        if not nums:\n            return \"\"\n        result = \"\"\n        for i in nums:\n            if i < 10:\n                result += str(i)\n            else:\n                result += \":\" + str(i)\n        return result[::-1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    print s.getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])",
    "def get_colon(tup):\n    return tup[0] + \":\" + tup[1] + \":\" + tup[2]\n\n\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3)\n    print(get_colon(tup))",
    "def get_colon(tuple_obj):\n    \"\"\"\n    :type tuple_obj: tuple\n    :rtype: str\n    \"\"\"\n    return tuple_obj[1]\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_colon((1, 2, 3, 4)) == \":\", \"1st element\"\n    assert get_colon((1, 2, 3, 4, 5)) == \":\", \"2nd element\"\n    assert get_colon((1, 2, 3, 4, 5, 6)) == \":\", \"3rd element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7)) == \":\", \"4th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8)) == \":\", \"5th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9)) == \":\", \"6th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == \":\", \"7th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == \":\", \"8th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == \":\", \"9th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == \":\", \"10th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) == \":\", \"11th element\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == \":\", \"12th element\"\n    assert get",
    "# https://www.geeksforgeeks.org/write-a-function-to-get-a-colon-of-a-tuple/\n\ndef get_colon(tuple):\n    return tuple[-1]\n\n\ndef main():\n    tuple = (1, 2, 3, 4, 5)\n    print(get_colon(tuple))\n\n    tuple = (1, 2, 3, 4, 5, 6)\n    print(get_colon(tuple))\n\n    tuple = (1, 2, 3, 4, 5, 6, 7)\n    print(get_colon(tuple))\n\n    tuple = (1, 2, 3, 4, 5, 6, 7, 8)\n    print(get_colon(tuple))\n\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/tuple-of-colon\ndef get_colon(tuple_t):\n    if len(tuple_t)!= 2:\n        return None\n    else:\n        return tuple_t[0].count(':')",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return a string\n    def getColon(self, num):\n        if num == 0:\n            return \"0:0\"\n        else:\n            if num % 2 == 0:\n                return str(int(num/2)) + \":\" + str(int(num/2))\n            else:\n                return str(int(num/2)) + \":\" + str(int(num/2)+1)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getColon(0))\n    print(s.getColon(1))\n    print(s.getColon(2))\n    print(s.getColon(3))\n    print(s.getColon(4))\n    print(s.getColon(5))\n    print(s.getColon(6))\n    print(s.getColon(7))\n    print(s.getColon(8))\n    print(s.getColon(9))\n    print(s.getColon(10))\n    print(s.getColon(11))\n    print(s.getColon(12))\n    print(s.getColon(13))\n    print(s.getColon(14))\n    print(s.getColon(15))\n    print(s.getColon(16))\n    print(s.getColon(17))\n    print(s.getColon(18))\n    print(s.getColon(19))\n    print(s.getColon(20))\n    print(s.getColon(21))\n    print(s.getColon(22))\n    print(s.getColon(23))\n    print(s.getColon(24))\n    print(s.getColon(25))\n    print(s.getColon(26))\n    print(s.getColon(27))\n    print(s.getColon(28))\n    print(s.getColon(29))\n    print(s.getCol",
    "import unittest\n\nclass Solution:\n    def getColon(self, t: List[str]) -> str:\n        \"\"\"\n        :type t: List[str]\n        :rtype: str\n        \"\"\"\n        count = 0\n        for i in range(len(t) - 1):\n            if t[i] == ':':\n                count += 1\n            elif t[i] == ',':\n                count -= 1\n        if count == 0:\n            return ':'\n        return ''\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/get-colon-of-a-tuple/solution/\n#\nApproach #1: Two Pointers [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input.\nSpace Complexity: O(1).\n\n# 2ms 100%\nclass Solution {\n    public String getColon(String[] t) {\n        if (t.length == 0) return \"\";\n        int i = 0;\n        while (i < t.length - 1 && t[i].charAt(0) == ':') {\n            i++;\n        }\n        if (i == t.length - 1) return \"\";\n        while (i < t.length - 1 && t[i].charAt(0) == ',') {\n            i++;\n        }\n        return t[i].equals(\"\")? \":\" : \"\";\n    }\n}\n\nApproach #2: Two Pointers [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input.\nSpace Complexity: O(1).\n\n# 3ms 100%\nclass Solution {\n    public String getColon(String[] t) {\n        if (t.length == 0) return \"\";\n        int i = 0;\n        while (i < t.length - 1 && t[i].charAt(",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', ['x', 'y'])\n\nt1 = Tuple(1, 2)\nt2 = Tuple(3, 4)\n\nprint(t1.x + t2.x)\nprint(t1.y + t2.y)\nprint(t1.x + t2.y)\nprint(t1.x + t2.x)\n\nprint(t1.x + t2.y)\nprint(t1.y + t2.x)\nprint(t1.y + t2.y)\nprint(t1.y + t2.x)",
    "def get_colon(tuple):\n    return tuple[0] + ':' + tuple[1]\n\nif __name__ == '__main__':\n    assert get_colon((2, 3)) == '2:3'\n    assert get_colon((1, 2)) == '1:2'",
    "def get_colon(tuple_tuple):\n    \"\"\"\n    Input: a tuple of (string, int)\n    Output: a string\n    \"\"\"\n    return tuple_tuple[0] + \":\" + str(tuple_tuple[1])\n\nprint(get_colon((1, 2)))\nprint(get_colon((1, 2, 3)))\nprint(get_colon((1, 2, 3, 4)))\nprint(get_colon((1, 2, 3, 4, 5)))\nprint(get_colon((1, 2, 3, 4, 5, 6)))",
    "import unittest\n\n\nclass Solution:\n    def getColon(self, data):\n        \"\"\"\n        :type data: List[str]\n        :rtype: str\n        \"\"\"\n        for i in range(len(data)):\n            if data[i] == ':':\n                return data[i]\n        return ':'\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 2ms 100%\nclass Solution {\n    public String getColon(String[] data) {\n        for (int i = 0; i < data.length; i++) {\n            if (data[i].equals(\":\")) {\n                return data[i];\n            }\n        }\n        return \":\";\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String getColon(String[] data) {\n        for (int i = 0; i < data.length; i++) {\n            if (data[i].equals(\":\")) {\n                return data[i];\n            }\n        }\n        return \":\";\n    }\n}\n'''",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a, b, c')\n\ndef get_colon(t):\n    \"\"\"\n    :type t: Tuple\n    :rtype: str\n    \"\"\"\n    return ':'.join([str(x) for x in t])\n\nif __name__ == '__main__':\n    t = Tuple(1, 2, 3)\n    print(get_colon(t))",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c')\n\nclass TestClass(unittest.TestCase):\n    def test_tuple(self):\n        t = Tuple(1, 2, 3)\n        self.assertEqual(t.a, 1)\n        self.assertEqual(t.b, 2)\n        self.assertEqual(t.c, 3)\n\nif __name__ == '__main__':\n    unittest.main()",
    "def get_colon(tuple_):\n    \"\"\"\n    Get a colon of a tuple.\n\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return tuple_[-1]\n\n\n# Your function will be called like this:\n# x = get_colon(tuple_)\ndef test():\n    assert get_colon((1,2,3,4,5)) == \":\", \"Error!\"\n    assert get_colon((1,2,3,4,5,6)) == \":\", \"Error!\"\n    assert get_colon((1,2,3,4,5,6,7,8,9,10)) == \":\", \"Error!\"\n    assert get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a,b,c')\n\nclass Solution(object):\n    def getColon(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        t = Tuple(a=s[0], b=s[1], c=s[2])\n        return ':'.join([str(i) for i in t])",
    "# TODO\n# - make it work for tuples that are not sorted\n# - get rid of duplicated code\n\n\ndef get_colon(t):\n    \"\"\"\n    :type t: List[int]\n    :rtype: int\n    \"\"\"\n    if len(t) == 0:\n        return 0\n    elif len(t) == 1:\n        return 0\n    elif t[0] > t[1]:\n        return 1\n    else:\n        return 2",
    "def get_colon(tuple_):\n    return tuple_[1][0]\n\ndef main():\n    tuple_ = (1, (2, 3))\n    print get_colon(tuple_)\n\nif __name__ == '__main__':\n    main()",
    "def get_colon(tuple_):\n    if not tuple_:\n        return None\n    for index in range(len(tuple_)):\n        if isinstance(tuple_[index], tuple):\n            tuple_ = tuple_[index]\n            return get_colon(tuple_)\n    return None\n\nif __name__ == \"__main__\":\n    print get_colon((1, 2, 3, 4, 5, 6))",
    "def get_colon(tuple):\n    \"\"\"\n    :type tuple: List[int]\n    :rtype: int\n    \"\"\"\n    if len(tuple) == 0:\n        return 0\n    elif len(tuple) == 1:\n        return 0\n    else:\n        return tuple[-1] - tuple[-2]\n\nif __name__ == '__main__':\n    assert get_colon([1, 2, 3]) == 2\n    assert get_colon([1, 2, 3, 4]) == 2\n    assert get_colon([1, 2, 3, 4, 5]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2",
    "from collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\n\ndef get_colon(point):\n    \"\"\"\n    Returns colon of a tuple\n    :type point: Point\n    :rtype: str\n    \"\"\"\n    return ':'if point.x > point.y else '| '\n\ndef main():\n    \"\"\"\n    Main function\n    :return: None\n    \"\"\"\n    point = Point(1, 2)\n    print(get_colon(point))\n\n\nif __name__ == '__main__':\n    main()",
    "def get_colon(tup):\n    \"\"\"\n    tup = (1, 2, 3)\n    >>> get_colon(tup)\n    '3:'\n    \"\"\"\n    colon = ''\n    for item in tup:\n        if colon:\n            colon += ':'\n        colon += str(item)\n    return colon\n\n\nif __name__ == '__main__':\n    assert get_colon((1, 2, 3)) == '3:'",
    "def get_colon(tuple_):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuple_: the tuple to get a colon of.\n    :return: the colon of the tuple.\n    \"\"\"\n\n    return tuple_[-1]\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    tuple_ = (1, 2, 3)\n    print get_colon(tuple_)\n\nif __name__ == '__main__':\n    main()",
    "def get_colon(tuple_list):\n    for i in range(len(tuple_list)):\n        if tuple_list[i][1] == ':' and tuple_list[i][0]!= ':':\n            return tuple_list[i]\n\nif __name__ == '__main__':\n    tuple_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\n    print(get_colon(tuple_list))",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: int\n    \"\"\"\n    return tuple_.index(':')\n\ndef get_colon_string(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return tuple_[get_colon(tuple_)]\n\nif __name__ == '__main__':\n    tuple_ = (1, 'a:b:c', '1:2:3')\n    print get_colon(tuple_)\n    print get_colon_string(tuple_)",
    "def get_colon(tup):\n    colon = 0\n    for i in range(len(tup)):\n        if tup[i] == ':':\n            colon += 1\n    return colon\n\n# Test Cases\n\nprint(get_colon((1, 2, 3)))\nprint(get_colon((1, 2, 3, ':')))",
    "class Solution(object):\n    def getColon(self, values):\n        \"\"\"\n        :type values: List[int]\n        :rtype: int\n        \"\"\"\n        return max(values) - min(values) + 1",
    "# https://www.hackerrank.com/challenges/python-tuple-colon\n\n# Python:\n\ndef get_colon(tup):\n    return tup[-1]\n\n# Test case\n\nprint(get_colon((1,2,3)))\nprint(get_colon((1,2,3,4)))\nprint(get_colon((1,2,3,4,5)))\nprint(get_colon((1,2,3,4,5,6)))\nprint(get_colon((1,2,3,4,5,6,7)))\nprint(get_colon((1,2,3,4,5,6,7,8)))\nprint(get_colon((1,2,3,4,5,6,7,8,9)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))",
    "def get_colon(tuple):\n    return tuple[-1]\n\nprint(get_colon((1, 2)))\nprint(get_colon((1, 2, 3)))\nprint(get_colon((1, 2, 3, 4, 5)))",
    "# https://www.hackerrank.com/challenges/colon-of-a-tuple\n\n\ndef colon(tuple_):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Input:\n    tuple_ = (1, 2, 3, 4)\n    Output:\n    1:2:3:4\n    \"\"\"\n    return ':'.join(str(item) for item in tuple_)",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution:\n    def getColon(self, pair):\n        \"\"\"\n        :type pair: List[Tuple]\n        :rtype: str\n        \"\"\"\n        \n        if len(pair) == 0:\n            return None\n        \n        if len(pair) == 1:\n            return str(pair[0])\n        \n        colon = ''\n        \n        for i in range(0, len(pair)):\n            if i == 0:\n                colon += str(pair[i])\n            else:\n                colon += ':' + str(pair[i])\n                \n        return colon",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str(self.x)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass Solution:\n    def getColon(self, tuple: 'Tuple'):\n        \"\"\"\n        :type tuple: Tuple\n        :rtype: str\n        \"\"\"\n        i = 0\n        while tuple.y!= 0:\n            tuple = tuple.x\n            i += 1\n        return str(i)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getColon((2, 3)))",
    "#!/usr/bin/env python\n\ndef get_colon(tup):\n    if tup[1] == \"\":\n        return \":\"\n    else:\n        return \":\" + tup[1]\n\nif __name__ == \"__main__\":\n    tup = (\"a\", \"b\")\n    print get_colon(tup)",
    "import collections\n\nclass Tuple(collections.namedtuple):\n    def __str__(self):\n        return ':'.join([str(x) for x in self])\n\n\ndef get_colon(tuple_):\n    return Tuple(tuple_[0], tuple_[1], tuple_[2], tuple_[3])\n\n\nif __name__ == '__main__':\n    tuple_ = (1, 2, 3, 4)\n    print(get_colon(tuple_))",
    "def get_colon(tuple_):\n    for i in range(len(tuple_)):\n        if tuple_[i] == ':':\n            return i\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_colon((1,2,3,4)) == 2, \"First\"\n    assert get_colon((1,2,3,4,5,6,7,8,9,0)) == 9, \"Second\"\n    assert get_colon((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,",
    "def get_colon(tuple):\n    \"\"\"\n    :type tuple: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple[len(tuple)-1]\n\nif __name__ == '__main__':\n    tuple = [1, 2, 3, 4]\n    print(get_colon(tuple))\n    print(tuple)\n    tuple = [1, 2, 3, 4, 5]\n    print(get_colon(tuple))",
    "from collections import namedtuple\nfrom sys import stdin\n\nTuple = namedtuple('Tuple', 'a b c d')\n\ndef get_colon(tuple_str):\n    \"\"\"\n    :type tuple_str: str\n    :rtype: str\n    \"\"\"\n    return tuple_str.split(\":\")[1]\n\n\nif __name__ == '__main__':\n    for tuple_str in stdin.readlines():\n        print(get_colon(tuple_str))",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: str\n    \"\"\"\n    for i in range(len(tuple_)):\n        if tuple_[i] == 0:\n            return str(i)\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    tuple_ = [1, 2, 3, 4]\n    print(get_colon(tuple_))",
    "class Solution:\n    \"\"\"\n    @param: tuple t: a tuple\n    @return: a string\n    \"\"\"\n    def getColon(self, t):\n        return t[0] + \":\" + t[1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getColon([1,2])",
    "def get_colon(tup):\n    return tup[1]\n\nprint(get_colon((1, 2)))\n# (1, 2)\n\nprint(get_colon((1, 2, 3)))\n# (1, 2, 3)\n\nprint(get_colon((1, 2, 3, 4)))\n# (1, 2, 3, 4)\n\nprint(get_colon((1, 2, 3, 4, 5)))\n# (1, 2, 3, 4, 5)",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in tuple_:\n        if i == ':':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert get_colon((1, 2, 3, ':', 4, 5)) == 2, \"2\"\n    assert get_colon((1, 2, 3, 4, 5, 6)) == 3, \"3\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8)) == 4, \"4\"",
    "def get_colon(tuple_):\n    \"\"\"\n    >>> get_colon((1, 2, 3, 4, 5))\n    '1:2:3:4:5'\n    >>> get_colon((1, 2, 3, 4, 5, 6))\n    '1:2:3:4:5:6'\n    >>> get_colon((1, 2, 3, 4, 5, 6, 7))\n    '1:2:3:4:5:6:7'\n    \"\"\"\n    if len(tuple_) == 1:\n        return str(tuple_[0])\n    else:\n        return \":\".join(str(t) for t in tuple_)",
    "def get_colon(tuple):\n    return tuple[-1]\n\ndef main():\n    tuple = (1, 2, 3, 4)\n    print get_colon(tuple)\n    tuple = (1, 2, 3)\n    print get_colon(tuple)\n    tuple = (1, 2, 3, 4, 5)\n    print get_colon(tuple)\n\nif __name__ == '__main__':\n    main()",
    "# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2018-08-07 16:07:02\n# @Last Modified by:   omi\n# @Last Modified time: 2018-08-07 17:43:47\n\n# -*- coding: utf-8 -*-\n\"\"\"\nGiven a tuple, return a colon of the tuple.\n\nExample 1:\nGiven nums = (1,3),\nreturn ':'.\n\nExample 2:\nGiven nums = (0,0),\nreturn ''.\n\nExample 3:\nGiven nums = (4,1),\nreturn ':'.\n\nNote:\nThe length of the given tuple is in the range [1, 20,000].\n\"\"\"\n\n# https://leetcode.com/problems/get-the-colon-of-a-tuple/description/\n\nclass Solution(object):\n    def getColon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n        ans = ':'\n        for num in nums:\n            if num == 0:\n                ans = ans[:-1] + ':'\n        return ans",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\n# Your Tuple object will be instantiated and called as such:\ntupleObj = Tuple(1)\ntupleObj.print_tuple()\n\ndef getColon(tupleObj):\n    return tupleObj[-1]\n\nif __name__ == '__main__':\n    tupleObj = Tuple(1)\n    tupleObj.print_tuple()\n    print(getColon(tupleObj))",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple_.index(':')\n\nif __name__ == '__main__':\n    assert get_colon([1, 2, 3]) == 2\n    assert get_colon([4, 5, 6]) == -1",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'first second third')\n\ntuple_to_colon = lambda t: ':'.join([str(item) for item in t])\n\ndef main():\n    first_tuple = Tuple('a', 'b', 'c')\n    second_tuple = Tuple('d', 'e', 'f')\n    third_tuple = Tuple('g', 'h', 'i')\n    assert tuple_to_colon(first_tuple) == ':a:b:c'\n    assert tuple_to_colon(second_tuple) == ':d:e:f'\n    assert tuple_to_colon(third_tuple) == ':g:h:i'\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getColon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        start, end = 0, len(nums) - 1\n        while start < end:\n            if nums[start] == nums[end]:\n                start += 1\n                end -= 1\n            else:\n                if nums[start] > nums[end]:\n                    start += 1\n                else:\n                    end -= 1\n        return nums[start:]",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution:\n    def colon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: str\n        \"\"\"\n        res = []\n        for i in range(0, len(nums)):\n            if i == 0:\n                res.append('%d:' % nums[i].y)\n            else:\n                res.append(':%d' % nums[i].y)\n        return ''.join(res)",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(tuple_)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if tuple_[n - 1] < tuple_[n - 2]:\n        return n - 1\n    else:\n        return n - 2\n\nclass Solution(object):\n    def getColon(self, tuple_):\n        \"\"\"\n        :type tuple_: List[int]\n        :rtype: int\n        \"\"\"\n        return get_colon(tuple_)\n\nif __name__ == \"__main__\":\n    print(Solution().getColon([3, 5, 9, 11]))",
    "import sys\n\ndef get_colon(t):\n    \"\"\"\n    Returns the colon of the tuple t.\n    :type t: tuple\n    :rtype: int\n    \"\"\"\n    if not isinstance(t, tuple):\n        sys.exit(\"Please enter a valid tuple\")\n\n    if not isinstance(t[0], int):\n        sys.exit(\"Please enter a valid tuple\")\n\n    if not isinstance(t[1], int):\n        sys.exit(\"Please enter a valid tuple\")\n\n    return t[0] * t[1]\n\n\nif __name__ == \"__main__\":\n    t = (1, 2)\n    print(get_colon(t))",
    "#!/usr/bin/python\n\ndef getColon(tuple):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Arguments:\n    tuple -- A tuple, (x,y,z)\n\n    Return:\n    A colon of the tuple.\n    \"\"\"\n    return \": \"\n\nif __name__ == \"__main__\":\n    x, y, z = 1, 2, 3\n    print getColon((x, y, z))\n    print getColon((x, y, z, x, y, z))\n    print getColon((x, y, z, x, y, z, x, y, z))\n    print getColon((x, y, z, x, y, z, x, y, z, x, y, z, x, y, z))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getColon(self, nums):\n        # write your code here\n        if not nums:\n            return 0\n        \n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == ':':\n                count += 1\n                if count == 2:\n                    return i\n        \n        return -1",
    "import re\n\nclass Solution:\n\n    # @param {integer[]} nums\n    # @return {integer}\n    def getColon(self, nums):\n        if not nums:\n            return 0\n        else:\n            m = re.match(r'([0-9]+):([0-9]+):([0-9]+)', ':'.join(map(str, nums)))\n            if m is None:\n                return 0\n            return int(m.group(1))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getColon([1,2,3,4,5]))\n    print(s.getColon([1,2,3,4]))\n    print(s.getColon([1,2,3,4,5,6,7,8,9]))\n    print(s.getColon([1,2,3,4,5,6,7,8,9,10]))\n    print(s.getColon([1,2,3,4,5,6,7,8,9,10,11]))",
    "def get_colon(t):\n    return t[0]\n\nif __name__ == '__main__':\n    t = (1,2,3,4)\n    print get_colon(t)\n    t = (1,2,3)\n    print get_colon(t)\n    t = (1,2,3,4,5)\n    print get_colon(t)\n    t = (1,2,3,4,5,6,7,8,9,10)\n    print get_colon(t)",
    "class Solution:\n    # @param {tuple[]} nums\n    # @return {string}\n    def getColon(self, nums):\n        if not nums:\n            return ''\n        n = len(nums)\n        ans = ''\n        for i in xrange(n):\n            if i == 0:\n                ans = ':' + nums[i]\n                continue\n            if i == n - 1:\n                ans += ':' + nums[i]\n                continue\n            ans += ':' + nums[i]\n        return ans",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, tup):\n        self.tup = tup\n    def __str__(self):\n        return str(self.tup)\n\nclass Solution(object):\n    def getColon(self, tup):\n        \"\"\"\n        :type tup: Tuple\n        :rtype: str\n        \"\"\"\n        if len(tup.tup) == 2:\n            return str(tup.tup[1])\n        return ':'\n\nif __name__ == \"__main__\":\n    assert Solution().getColon(Tuple((1,2))) == ':2'",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple_[-1] - tuple_[-2]",
    "def get_colon(tuple):\n    \"\"\"\n    :type tuple: List[int]\n    :rtype: str\n    \"\"\"\n    if tuple[0] == tuple[1]:\n        return ':'\n    else:\n        return ','\n\nif __name__ == '__main__':\n    print(get_colon([0,0]))\n    print(get_colon([1,1]))\n    print(get_colon([1,2]))\n    print(get_colon([1,3]))\n    print(get_colon([1,4]))",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def getColon(self, pair):\n        \"\"\"\n        :type pair: List[Tuple]\n        :rtype: str\n        \"\"\"\n        ret = \"\"\n        if len(pair) == 2:\n            for i in range(1, 3):\n                if pair[0][i] > pair[0][i-1]:\n                    ret += \":\"\n                else:\n                    ret += \";\"\n        return ret\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.getColon([(1, 2), (3, 4), (5, 6)]))\n    print(s.getColon([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(s.getColon([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))\n    print(s.getColon([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))",
    "def get_colon(tuple):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuple: tuple\n    :return: colon\n    \"\"\"\n    if tuple[0] == tuple[1]:\n        return tuple[0]\n    return tuple[1]\n\nif __name__ == \"__main__\":\n    tuple = (1, 2, 3, 4)\n    print get_colon(tuple)",
    "from collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n\ndef get_colon(point):\n    \"\"\"\n    Return the colon of a tuple.\n\n    Example:\n    >>> get_colon((1, 2))\n    '1:2'\n    >>> get_colon((1, 2, 3))\n    '1:2:3'\n    >>> get_colon((1, 2, 3, 4))\n    '1:2:3:4'\n    >>> get_colon((1, 2, 3, 4, 5))\n    '1:2:3:4:5'\n    >>> get_colon((1, 2, 3, 4, 5, 6))\n    '1:2:3:4:5:6'\n    \"\"\"\n    if len(point) == 3:\n        return '{}:{}:{}'.format(*point)\n    else:\n        return '{}:{}'.format(*point)\n\ndef main():\n    print(get_colon((1, 2)))\n    print(get_colon((1, 2, 3)))\n    print(get_colon((1, 2, 3, 4)))\n    print(get_colon((1, 2, 3, 4, 5)))\n    print(get_colon((1, 2, 3, 4, 5, 6)))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getColon(self, args):\n        \"\"\"\n        :type args: List[int]\n        :rtype: int\n        \"\"\"\n        if len(args) == 1:\n            return 0\n        # for i in range(1, len(args) - 1):\n        #     if args[i] == ':' and args[i - 1] == ':' and args[i + 1] == ':':\n        #         return i\n        for i in range(1, len(args) - 1):\n            if args[i] == ':' and args[i - 1] == ':' and args[i + 1] == ':':\n                return i\n        return 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.getColon([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "class Solution:\n    def getColon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        if len(nums) == 1:\n            return str(nums[0])\n        # use the first element as the start point\n        start = nums[0]\n        end = start\n        while end!= start:\n            # find the first non-zero element\n            while end < len(nums) and nums[end] == 0:\n                end += 1\n            # find the first non-zero element\n            while end < len(nums) and nums[end]!= 0:\n                end += 1\n            # find the first non-zero element\n            while end < len(nums) and nums[end] == 0:\n                end += 1\n            # get the length of the colon\n            colon_len = end - start + 1\n            # if the colon is long enough, return the colon\n            if colon_len > 0:\n                return \":\" + str(colon_len)\n            # otherwise, split the colon\n            else:\n                # split the colon\n                return str(colon_len) + \":\" + str(colon_len)",
    "import unittest\n\n\nclass Solution:\n    def getColon(self, t):\n        \"\"\"\n        :type t: List[int]\n        :rtype: str\n        \"\"\"\n        return ':' + ''.join(str(i) for i in t)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/get-colon-of-a-tuple/solution/\n\n# 1ms 100%\nclass Solution {\n    public String getColon(int[] t) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < t.length; i++) {\n            sb.append(t[i] + \":\");\n        }\n        return sb.toString();\n    }\n}\n'''",
    "def get_colon(tuple_):\n    if len(tuple_) == 0:\n        return ''\n    elif len(tuple_) == 1:\n        return ':'\n    else:\n        return ':' + tuple_[1]",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\n\nclass Solution:\n    def getColon(self, t: 'Tuple') ->'str':\n        return str(t.x)[-1]\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    t = Tuple(1)\n    print(solution.getColon(t))\n    t = Tuple(2)\n    print(solution.getColon(t))",
    "def get_colon(tuple):\n    \"\"\"\n    :type tuple: List[int]\n    :rtype: str\n    \"\"\"\n    colon = ''\n    for i in range(0, len(tuple) - 1):\n        colon += ':'\n    return colon\n\nif __name__ == '__main__':\n    assert get_colon((1, 2, 3)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == ':', 'get_colon error'\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == ':', 'get_colon error'",
    "from collections import namedtuple\n\nfrom utils import get_colon\n\n\n# Your Code Goes Here\n\nclass TupleColon(namedtuple('TupleColon', 'first second')):\n    def colon(self):\n        return get_colon(self.first, self.second)",
    "def get_colon(tuple_):\n    for i in range(0, len(tuple_)):\n        if tuple_[i] == \":\":\n            return i\n    return -1\n\n\ndef get_colon_of_a_tuple(tuple_):\n    i = 0\n    for element in tuple_:\n        if element == \":\":\n            return i\n        i += 1\n    return -1\n\n\ndef main():\n    tuple_ = (1, 2, 3, 4)\n    print(get_colon(tuple_))\n    print(get_colon_of_a_tuple(tuple_))\n\nif __name__ == '__main__':\n    main()",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple_.index(0) + 1\n\nif __name__ == '__main__':\n    assert get_colon([1, 2, 3, 4]) == 2\n    assert get_colon([1, 2, 3, 4, 5]) == 3\n    assert get_colon([1, 2, 3, 4, 5, 6]) == 4\n    assert get_colon([1, 2, 3, 4, 5, 6, 7]) == 5\n    assert get_colon([1, 2, 3, 4, 5, 6, 7, 8]) == 6",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[str]\n    :rtype: int\n    \"\"\"\n    for i, c in enumerate(tuple_):\n        if c == ':':\n            return i\n    return len(tuple_)\n\n\nif __name__ == '__main__':\n    print(get_colon(['1', '2', '3', '4', '5']))\n    print(get_colon(['1', '2', '3', '4', '5', '6']))",
    "import re\n\n# https://www.hackerrank.com/challenges/find-colon-in-a-tuple/problem\n\n# find the colon of a tuple\ndef colon_in_tuple(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n\n# find the colon of a string\ndef colon_in_string(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n# find the colon of a tuple\ndef colon_in_tuple(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n\n# find the colon of a string\ndef colon_in_string(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n# find the colon of a tuple\ndef colon_in_tuple(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n\n# find the colon of a string\ndef colon_in_string(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n# find the colon of a tuple\ndef colon_in_tuple(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n\n# find the colon of a string\ndef colon_in_string(s):\n    colon_pos = s.find(':')\n    if colon_pos == -1:\n        return -1\n    else:\n        return colon_pos\n\n\n# find the colon of a tuple\ndef colon_in_tuple(s):",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getColon(self, nums):\n        \n        if len(nums) == 0:\n            return -1\n        \n        # if there are no more than 2 numbers, return -1\n        if len(nums) <= 2:\n            return -1\n        \n        # if there are only 2 numbers, return -1\n        if len(nums) == 2:\n            return -1\n        \n        # if there are more than 2 numbers, find the middle one\n        mid = len(nums) / 2\n        \n        # if the last number is less than the middle one, return -1\n        if nums[mid] < nums[len(nums) - 1]:\n            return -1\n        \n        # if the last number is greater than the middle one, return the colon of the middle one\n        return nums[mid] + nums[len(nums) - 1]",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: str\n    \"\"\"\n    return tuple_[1]\n\nif __name__ == '__main__':\n    assert get_colon([3,2,1]) == ':', 'Should be colon'\n    assert get_colon([]) == ':', 'Should be colon'\n    assert get_colon([1,2,3,4]) == ':', 'Should be colon'",
    "class Solution(object):\n    def getColon(self, t):\n        \"\"\"\n        :type t: List[int]\n        :rtype: int\n        \"\"\"\n        return max(x for x, y in t if y == ':' and x!= y)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    t = [1, 2, 3, ':', 4, 5]\n    print s.getColon(t)\n    t = [1, 2, 3, ':', 4]\n    print s.getColon(t)\n    t = [1, 2, 3, ':', 4, 5, 6]\n    print s.getColon(t)",
    "def get_colon(tup):\n    return tup[-1]\n\nif __name__ == '__main__':\n    print(get_colon((1, 2, 3, 4)))",
    "from collections import namedtuple\n\ndef get_colon(tup):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    return tup[-1]\n\n\nT = namedtuple('T', 'a, b, c')\n\nprint(get_colon((1, 2, 3)))\nprint(get_colon((1, 2, 3, 4)))",
    "def get_colon(tuple_):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    :type tuple_: List[int]\n    :rtype: str\n    \"\"\"\n    return ':'.join([str(i) for i in tuple_])\n\nprint(get_colon([1, 2, 3]))",
    "import unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_get_colon(self):\n        \"\"\"\n        Input: ([1,2,3,4], 3)\n        Output: ':'\n        \"\"\"\n        self.assertEqual(get_colon([1, 2, 3, 4], 3), ':')\n\n    def test_get_colon_with_none(self):\n        \"\"\"\n        Input: ([1,2,3,4], None)\n        Output: None\n        \"\"\"\n        self.assertIsNone(get_colon([1, 2, 3, 4], None))\n\n    def test_get_colon_with_empty_list(self):\n        \"\"\"\n        Input: ([], 3)\n        Output: None\n        \"\"\"\n        self.assertIsNone(get_colon([], 3))\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "from collections import namedtuple\n\ndef get_colon(tuple_):\n    \"\"\"\n    :type tuple_: namedtuple\n    :rtype: str\n    \"\"\"\n    return tuple_.__name__.split('_')[-1]\n\nif __name__ == '__main__':\n    t = namedtuple('t', 'a,b,c')\n    assert get_colon(t) == 'c'\n    \n    t = namedtuple('t', 'a,b,c,d')\n    assert get_colon(t) == 'd'",
    "def get_colon(tuple_tuple):\n    \"\"\"\n    Get colon of a tuple.\n\n    :type tuple_tuple: tuple\n    :rtype: str\n    \"\"\"\n    return tuple_tuple[1]\n\n\nif __name__ == '__main__':\n    print get_colon((1, 2))\n    print get_colon((1, 2, 3))\n    print get_colon((1, 2, 3, 4))",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple_[-1] - tuple_[0] - 1\n\n\nif __name__ == '__main__':\n    assert get_colon((1, 2, 3, 4)) == 1\n    assert get_colon((1, 2, 3, 4, 5)) == 2\n    assert get_colon((1, 2, 3, 4, 5, 6)) == 3\n    assert get_colon((1, 2, 3, 4, 5, 6, 7)) == 4\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8)) == 5\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 6\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 7\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 8\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == 9\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == 10",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return tuple_[0] + \":\" + tuple_[1]\n\nif __name__ == \"__main__\":\n    assert get_colon((1, 2)) == \"1:2\"\n    assert get_colon((1, 2, 3)) == \"1:2:3\"\n    assert get_colon((1, 2, 3, 4)) == \"1:2:3:4\"\n    assert get_colon((1, 2, 3, 4, 5)) == \"1:2:3:4:5\"\n    assert get_colon((1, 2, 3, 4, 5, 6)) == \"1:2:3:4:5:6\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7)) == \"1:2:3:4:5:6:7\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8)) == \"1:2:3:4:5:6:7:8\"\n    assert get_colon((1, 2, 3, 4, 5, 6, 7, 8, 9)) == \"1:2:3:4:5:6:7:8:9\"",
    "import collections\n\ndef get_colon(tuple_):\n    \"\"\"\n    :type tuple_: collections.Iterable[T]\n    :rtype: str\n    \"\"\"\n    return ':'.join(sorted(tuple_))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    data = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n    print(get_colon(data))\n    return 0\n\nif __name__ == '__main__':\n    main()",
    "def get_colon(t):\n    if not isinstance(t, tuple):\n        return\n    if not isinstance(t[0], str):\n        return\n    if not isinstance(t[1], str):\n        return\n    if t[0] == t[1]:\n        return \":\"\n    else:\n        return \"\"\n\n\ndef main():\n    t = (1, 2, 3, 4, 5)\n    print(get_colon(t))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def get_colon(tuple):\n    \"\"\"\n    :type tuple: tuple\n    :rtype: str\n    \"\"\"\n    return tuple[-1]",
    "class Solution(object):\n    def getColon(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if len(s) < 2:\n            return s\n        if s[0] == ':':\n            return s[1:]\n        if s[-1] == ':':\n            return s[:-1]\n        return s",
    "# https://leetcode.com/problems/get-colon-of-a-tuple/\n# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str(self.x)\n\n    def __repr__(self):\n        return \"Tuple(%s)\" % (self.x)\n\nclass Solution(object):\n    def getColon(self, t):\n        \"\"\"\n        :type t: Tuple\n        :rtype: str\n        \"\"\"\n        if not t:\n            return None\n        x = t.x\n        y = t.y\n        if x % 10 == 0:\n            y += 1\n            x /= 10\n        if y % 10 == 0:\n            x += 1\n            y /= 10\n        while x > 0:\n            x -= 1\n            y += 1\n        while y > 0:\n            y -= 1\n            x += 1\n        return \"%d:%d\" % (x, y)",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def __str__(self):\n        return str(self.x) + \":\" + str(self.y)\n\nclass Solution:\n    # @param {Tuple} tuple\n    # @return {String}\n    def getColon(self, tuple):\n        # Write your code here\n        return str(tuple.x) + \":\" + str(tuple.y)\n\nif __name__ == \"__main__\":\n    tuple = Tuple(1, 2)\n    print Solution().getColon(tuple)",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return \":\".join(map(str, tuple_))\n\n\nif __name__ == '__main__':\n    print(get_colon((1, 2, 3)))",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: int\n    \"\"\"\n    return tuple_.index(':')\n\nif __name__ == '__main__':\n    assert get_colon((1, 2, 3, 4)) == 2\n    assert get_colon((1, 2, 3, 4, 5)) == 2\n    assert get_colon((1, 2, 3, 4, 5, 6)) == 2\n    assert get_colon((1, 2, 3, 4, 5, 6, 7)) == 3",
    "def get_colon(tuple):\n    return tuple[-1]\n\nif __name__ == '__main__':\n    t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n    print(get_colon(t))",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\ndef get_colon(t):\n    \"\"\"\n    :type t: Tuple\n    :rtype: str\n    \"\"\"\n    if t.y == 1:\n        return ':'\n    else:\n        return ':' + str(t.x)\n\nclass Solution(object):\n    def colon(self, t):\n        \"\"\"\n        :type t: Tuple\n        :rtype: str\n        \"\"\"\n        if t.x == 0:\n            return ':'\n        else:\n            return ':' + str(t.x)\n\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\ndef get_colon(t):\n    \"\"\"\n    :type t: Tuple\n    :rtype: str\n    \"\"\"\n    if t.y == 1:\n        return ':'\n    else:\n        return ':' + str(t.x)\n\nclass Solution(object):\n    def colon(self, t):\n        \"\"\"\n        :type t: Tuple\n        :rtype: str\n        \"\"\"\n        if t.x == 0:\n            return ':'\n        else:\n            return ':' + str(t.x)\n\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\ndef get_colon(t):\n    \"\"\"\n    :type t: Tuple\n    :rtype: str\n    \"\"\"\n    if t.y == 1:\n        return ':'\n    else:\n        return ':' + str(t.x)\n\nclass Solution(object):\n    def colon(self, t):\n        \"\"\"\n        :type t: Tuple\n        :rtype: str\n        \"\"\"\n        if t.x == 0:\n            return ':'\n        else:\n            return ':' + str(t.x)\n\nif __name__ == '__main__':\n    t = Tuple(1)",
    "class Solution(object):\n    def getColon(self, t):\n        \"\"\"\n        :type t: List[int]\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for i in t:\n            if i == ':':\n                cnt += 1\n            else:\n                cnt -= 1\n        return cnt\n\n\nif __name__ == '__main__':\n    assert Solution().getColon([1, 2, 3, 4]) == 1\n    assert Solution().getColon([1, 2, 3, 4, 5]) == 2\n    assert Solution().getColon([1, 2, 3, 4, 5, 6]) == 2\n    assert Solution().getColon([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert Solution().getColon([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert Solution().getColon([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert Solution().getColon([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4",
    "def get_colon(tuple_):\n    \"\"\"\n    :type tuple_: List[int]\n    :rtype: int\n    \"\"\"\n    return tuple_.index(1)\n\nif __name__ == \"__main__\":\n    assert get_colon([1,2,3,4,5,6,7,8,9]) == 3\n    assert get_colon([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 5\n    assert get_colon([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186",
    "class Solution(object):\n    def getColon(self, colon):\n        \"\"\"\n        :type colon: List[int]\n        :rtype: int\n        \"\"\"\n        if len(colon) == 0:\n            return 0\n        elif len(colon) == 1:\n            return colon[0]\n        else:\n            return colon[0] - colon[1] - 1\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.getColon([1,2,3])\n    print sol.getColon([1,2,3,4])\n    print sol.getColon([1,2,3,4,5,6,7,8])",
    "def get_colon(tuple_):\n    if tuple_ is None or len(tuple_) == 0:\n        return None\n    return tuple_[0]\n\nif __name__ == '__main__':\n    tuple_ = (1, 2, 3)\n    print get_colon(tuple_)\n    tuple_ = (1, 2)\n    print get_colon(tuple_)\n    tuple_ = (1, 2, 3, 4)\n    print get_colon(tuple_)\n    tuple_ = (1, 2, 3, 4, 5)\n    print get_colon(tuple_)",
    "def get_colon(tuple_of_strings):\n    return tuple_of_strings[-1]\n\ntuple_of_strings = [\n    \"Apple\",\n    \"Banana\",\n    \"Cherry\",\n    \"Grape\",\n    \"Orange\"\n]\nprint(get_colon(tuple_of_strings))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}