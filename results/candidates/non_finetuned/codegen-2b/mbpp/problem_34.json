{
  "problem": {
    "task_id": "MBPP/45",
    "prompt": "Write a function to find the gcd of the given array elements.",
    "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
    "test_list": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "challenge_test_list": [],
    "problem_id": 34
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def gcd(self, a):\n        \"\"\"\n        :type a: List[int]\n        :rtype: int\n        \"\"\"\n        if len(a) == 1:\n            return a[0]\n        else:\n            return self.gcd(a[1:], a[0] % a[1:])\n\n# https://leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/discuss/81177/Python-O(N)-Time-Solution",
    "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    print(gcd(2, 3))\n    print(gcd(7, 2))\n    print(gcd(5, 6))\n    print(gcd(12, 3))",
    "# https://www.hackerrank.com/challenges/gcd-array/problem\n# https://www.hackerrank.com/challenges/gcd-array/submissions/code/3538991\n\n\ndef gcd(a, b):\n    \"\"\"\n    Finds the greatest common divisor of two integers.\n    :param a: First integer\n    :param b: Second integer\n    :return: GCD\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a, b % a)\n\n\ndef gcd_array(arr):\n    \"\"\"\n    Finds the gcd of the given array elements.\n    :param arr: Array of integers\n    :return: GCD\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd_array(arr[:i] + arr[i:])\n    return gcd\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    for _ in range(t):\n        print(gcd_array(arr))",
    "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_recursive(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\ndef gcd_iterative(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_recursive_test():\n    assert gcd_recursive(1, 2) == 1\n    assert gcd_recursive(3, 4) == 1\n    assert gcd_recursive(4, 3) == 1\n    assert gcd_recursive(5, 6) == 1\n    assert gcd_recursive(9, 12) == 1\n    assert gcd_recursive(0, 0) == 0\n    assert gcd_recursive(0, 1) == 1\n    assert gcd_recursive(1, 0) == 1\n    assert gcd_recursive(5, 0) == 5\n    assert gcd_recursive(0, 5) == 5\n    assert gcd_recursive(0, -5) == 5\n    assert gcd_recursive(-5, 0) == 5\n    assert gcd_recursive(-5, 5) == 1\n    assert gcd_recursive(-5, -5) == 1\n    assert gcd_recursive(-5, -6) == 1\n    assert gcd_recursive(6, 0) == 6\n    assert gcd_recursive(6, 1) == 1\n    assert gcd_recursive(6, 2) == 1\n    assert gcd_recursive(6, 3) == 1\n    assert gcd_recursive(6, 4) == 1\n    assert gcd_recursive(6, 5) == 1\n    assert gcd_recursive(6, 6) == 1\n    assert gcd_recursive(6, 7) == 1\n    assert gcd_recursive(6, 8) == 1",
    "def gcd(a, b):\n    \"\"\"\n    >>> gcd(2, 4)\n    2\n    >>> gcd(5, 4)\n    1\n    >>> gcd(2, 0)\n    0\n    >>> gcd(5, 0)\n    0\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while a!= b:\n        while a > 0:\n            a, b = b, a % b\n        b, a = a, b\n    return b\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef gcd(x, y):\n    \"\"\"\n    The Euclid's GCD algorithm.\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_iter(x, y):\n    \"\"\"\n    A more efficient version of Euclid's GCD algorithm.\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_sieve(n):\n    \"\"\"\n    A simple sieve algorithm that uses a list to mark the prime numbers\n    in the range [1, n].\n    \"\"\"\n    is_prime = [True] * n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return [i for i in range(2, n) if is_prime[i]]\n\n\ndef gcd_sieve_iter(n):\n    \"\"\"\n    A more efficient version of the sieve algorithm using a list to mark the\n    prime numbers in the range [1, n].\n    \"\"\"\n    is_prime = [True] * n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return [i for i in range(2, n) if is_prime[i]]\n\n\ndef gcd_primes(n):\n    \"\"\"\n    A simple sieve algorithm that uses a list to mark the prime numbers\n    in the range [1, n].\n    \"\"\"\n    is_prime = [True] * n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return [i for i in range(2, n) if is_prime[i]]\n\n\ndef gcd_primes_iter(n):\n    \"\"\"\n    A",
    "# https://leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/discuss/126570/Python-Solution-Using-JavaScript\n\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return self.gcd(b, a % b)\n\n    def findGCD(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr) < 2:\n            return 1\n        return self.gcd(arr[0], self.gcd(arr[1], arr[2]))\n\n# Note:\n# If we know that the array is sorted, we can do the same way.\n# If the array is not sorted, we can use the same method but we can assume the first element is always the smallest.\n# We can use the same method for finding the gcd of two numbers.",
    "import unittest\nfrom typing import List\n\nfrom utils.arrays import gcd\nfrom utils.arrays import gcd_recursive\nfrom utils.arrays import gcd_iterative\n\n\nclass TestGcd(unittest.TestCase):\n\n    def test_gcd(self):\n        self.assertEqual(gcd([1, 2, 3]), 1)\n        self.assertEqual(gcd([1, 2, 3, 4]), 2)\n        self.assertEqual(gcd([3, 2, 1, 4]), 2)\n        self.assertEqual(gcd([-1, 2, 3, 4]), 1)\n        self.assertEqual(gcd([-1, 2, 3, 4, 5]), 5)\n        self.assertEqual(gcd([-1, 2, 3, 4, 5, 6]), 1)\n\n    def test_gcd_recursive(self):\n        self.assertEqual(gcd_recursive([1, 2, 3]), 1)\n        self.assertEqual(gcd_recursive([1, 2, 3, 4]), 2)\n        self.assertEqual(gcd_recursive([3, 2, 1, 4]), 2)\n        self.assertEqual(gcd_recursive([-1, 2, 3, 4]), 1)\n        self.assertEqual(gcd_recursive([-1, 2, 3, 4, 5]), 5)\n        self.assertEqual(gcd_recursive([-1, 2, 3, 4, 5, 6]), 1)\n\n    def test_gcd_iterative(self):\n        self.assertEqual(gcd_iterative([1, 2, 3]), 1)\n        self.assertEqual(gcd_iterative([1, 2, 3, 4]), 2)\n        self.assertEqual(gcd_iterative([3, 2, 1, 4]), 2)\n        self.assertEqual(gcd_iterative([-1, 2, 3, 4]), 1)\n        self.assertEqual(gcd_iterative([-1, 2, 3, 4, 5]), 5)\n        self.assertEqual(g",
    "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return a integer\n    def findGcd(self, intervals):\n        if not intervals:\n            return 0\n        if len(intervals) == 1:\n            return intervals[0].end - intervals[0].start\n        intervals.sort(key=lambda x: x.start)\n        prev = intervals[0].start\n        g = intervals[0].end\n        for i in range(1, len(intervals)):\n            curr = intervals[i].start\n            if curr - prev < 0:\n                return 0\n            g = gcd(g, curr - prev)\n            prev = curr\n        return g",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        # base case\n        if not nums:\n            return 1\n        # base case\n        if len(nums) == 1:\n            return nums[0]\n        # recursive call\n        return self.gcd(nums[1:]) % nums[0]\n\n# Test\ns = Solution()\nprint s.gcd([1, 2, 3])",
    "from math import gcd\n\ndef gcd_array(array):\n    \"\"\"\n    GCD of the given array elements.\n    :param array:\n    :return:\n    \"\"\"\n    return reduce(gcd, array)",
    "def gcd(a):\n    \"\"\"\n    >>> gcd([3,2,1])\n    1\n    >>> gcd([-1,2,-1])\n    1\n    >>> gcd([3,2,-1])\n    1\n    >>> gcd([3,2,-3])\n    1\n    >>> gcd([-1,2,-3])\n    1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-1])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-2])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-3])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-4])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-5])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-6])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    >>> gcd([-1,2,-7])\n    -1\n    >>> gcd([-1,2,3])\n    -1\n    \"\"\"\n    #if len(a)==0:\n    #    return 0\n    #if len(a)==1:\n    #    return a[0]\n    #if len(a)==2:\n    #    return gcd(a[1], a[0])\n    #return gcd(a[1], gcd(a[0], a[2]))\n    #return gcd(a[1], gcd(a[0], a[2]))\n    #return gcd(a[1], gcd(a[0], a[2]))\n    #return gcd(a[1], gcd(a[0], a[2]))\n    #return gcd(a[1],",
    "def gcd(numbers):\n    \"\"\"\n    numbers: A list of integers.\n\n    Returns: The greatest common divisor of all the elements in numbers.\n    \"\"\"\n    if not numbers:\n        return 0\n    for i in xrange(1, len(numbers)):\n        if numbers[i] == 0:\n            continue\n        while numbers[i] % numbers[i - 1]!= 0:\n            numbers[i] = numbers[i - 1]\n            numbers[i - 1] = numbers[i]\n    return numbers[-1]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 4, 8, 16]\n    print gcd(numbers)",
    "import sys\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef main():\n    n = int(input())\n    arr = [int(arr_temp) for arr_temp in input().split()]\n    gcd_list = [gcd(a, b) for a, b in zip(arr, arr[1:])]\n    gcd = gcd(gcd_list[0], gcd_list[1])\n    if gcd == 1:\n        print(1)\n    else:\n        print(gcd)\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def gcd(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x < y:\n            x, y = y, x\n        while y:\n            x, y = y, x % y\n        return x\n\n    def gcd_2(self, x, y):\n        return y if x < y else self.gcd(y, x)\n\n    def gcd_3(self, x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n\nif __name__ == \"__main__\":\n    assert Solution().gcd(3, 4) == 1\n    assert Solution().gcd(3, 7) == 1\n    assert Solution().gcd(3, -4) == 1\n    assert Solution().gcd(3, -7) == 1\n    assert Solution().gcd(3, 0) == 3\n    assert Solution().gcd(3, -3) == 1\n    assert Solution().gcd(3, -13) == 1\n    assert Solution().gcd(3, -3) == 3\n    assert Solution().gcd(3, -13) == 1\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -13) == 3\n    assert Solution().gcd(3, -",
    "from __future__ import annotations\n\nfrom typing import List\n\n__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def gcd(self, x: int, y: int) -> int:\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return self.gcd_rec(x, y)\n\n    def gcd_rec(self, x: int, y: int) -> int:\n        if x == 0:\n            return y\n        if y == 0:\n            return x\n        return self.gcd_rec(y, x % y)\n\n\nif __name__ == '__main__':\n    assert Solution().gcd(10, 10) == 10\n    assert Solution().gcd(100, 10) == 10\n    assert Solution().gcd(100, 100) == 100\n    assert Solution().gcd(1, 1) == 1\n    assert Solution().gcd(10, 9) == 1\n    assert Solution().gcd(100, 99) == 1",
    "import math\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nclass Solution:\n    def findGCD(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        gcd = nums[0]\n        lcm = lcm(nums[0], nums[1])\n        for i in range(2, n):\n            gcd = gcd(lcm, lcm(nums[i], nums[i-1]))\n            lcm = lcm(nums[i], lcm(nums[i-1], nums[i]))\n        return gcd",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if not nums:\n            return 0\n\n        if len(nums) == 1:\n            return nums[0]\n\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                while nums[i]!= 0:\n                    nums[i], nums[i % nums[i]] = nums[i % nums[i]], nums[i]\n                return nums[i]\n\n        return self.gcd(nums[:len(nums) // 2])\n\nif __name__ == \"__main__\":\n    print(Solution().gcd([3, 4, 5]))",
    "# https://github.com/pythontangent/LeetCode/blob/master/LeetCode.py\n\nclass Solution(object):\n    def gcd(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return y\n        if y == 0:\n            return x\n        if x < 0 and y < 0:\n            return -self.gcd(-x, -y)\n        if x < 0:\n            x = -x\n        if y < 0:\n            y = -y\n        if x == y:\n            return x\n        if x > y:\n            return self.gcd(y, x % y)\n        else:\n            return self.gcd(x, y % x)\n\n\nif __name__ == '__main__':\n    assert Solution().gcd(2, 3) == 1\n    assert Solution().gcd(3, 4) == 1\n    assert Solution().gcd(4, 3) == 1\n    assert Solution().gcd(1, 0) == 1\n    assert Solution().gcd(0, 1) == 1\n    assert Solution().gcd(1, -1) == 1\n    assert Solution().gcd(0, -1) == 1\n    assert Solution().gcd(1, 1) == 1\n    assert Solution().gcd(2, 2) == 2\n    assert Solution().gcd(-2, 2) == 2\n    assert Solution().gcd(2, -2) == 2\n    assert Solution().gcd(-2, -2) == 2\n    assert Solution().gcd(2, -2) == 2\n    assert Solution().gcd(-2, 2) == 2\n    assert Solution().gcd(-2, -2) == 2\n    assert Solution().gcd(1, -1) == 1\n    assert Solution().gcd(-1, -1) == 1\n    assert Solution().gcd(-2, -2) == 1\n    assert Solution().gcd(2, -2) == 1\n    assert Solution().gcd(2, -2) == 1\n    assert Solution().gcd(-2, -2",
    "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_recursive(a, b):\n    if a == 0:\n        return b\n    return gcd_recursive(b % a, a)\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [2, 3, 4]\n    print(gcd(a, b))\n    print(gcd_recursive(a, b))",
    "def gcd(x,y):\n    while y:\n        x,y = y, x%y\n    return x\n\ndef find_gcd(a):\n    if len(a) == 0:\n        return 1\n    return gcd(find_gcd(a[:len(a)/2]), find_gcd(a[len(a)/2:]))\n\nif __name__ == '__main__':\n    a = [1,2,3]\n    b = [1,3,5]\n    c = [2,3,5]\n    d = [1,2,5]\n    e = [1,2,3,4,5]\n    f = [1,2,3,4,5,6]\n    g = [1,2,3,4,5,6,7]\n    print find_gcd(a)\n    print find_gcd(b)\n    print find_gcd(c)\n    print find_gcd(d)\n    print find_gcd(e)\n    print find_gcd(f)\n    print find_gcd(g)",
    "# https://oj.leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/\n# \u4e0d\u80fd\u7b80\u5355\u63d0\u4ea4\uff0c\u6bd4\u8f83\u5927\uff0c\u5c31\u6ca1\u6709\u89e3\n# \u5206\u6cbb\u6cd5\n# https://www.cnblogs.com/grandyang/p/4027683.html\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return self.gcd(nums[0], nums[1])\n        if nums[0] < nums[1]:\n            tmp = nums[0]\n            nums[0] = nums[1]\n            nums[1] = tmp\n        for i in xrange(2, len(nums)):\n            tmp = nums[i]\n            while tmp % nums[i] == 0:\n                tmp /= nums[i]\n            if tmp!= 1:\n                return self.gcd(nums[:i], nums[i:])\n        return nums[0]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.gcd([2, 4, 6, 8])",
    "def gcd(a):\n    \"\"\"\n    :param a: int[]\n    :return: int\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[:len(a)/2], a[len(a)/2:])\n\nif __name__ == '__main__':\n    print(gcd([2, 4, 6, 8, 10]))\n    print(gcd([1, 1, 1, 2, 2]))\n    print(gcd([1, 2, 3, 4, 5]))\n    print(gcd([6, 6, 6, 6, 6, 6]))",
    "import unittest\n\n# https://www.hackerrank.com/challenges/gcd-of-array\n\ndef gcd_of_array(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return gcd_of_array(nums[1:]) % nums[0]\n\nclass MyTestCases(unittest.TestCase):\n    def test_gcd_of_array(self):\n        nums = [2, 3, 4, 5, 6]\n        self.assertEqual(gcd_of_array(nums), 2)\n\nif __name__ == '__main__':\n    unittest.main()",
    "def gcd(a):\n    \"\"\"\n    Input: an integer array\n    Output: the greatest common divisor of all elements.\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    else:\n        for i in range(len(a)):\n            if i == len(a) - 1:\n                return a[i]\n            else:\n                a[i] = gcd(a[i:])\n                a[i] = a[i] / a[i+1]\n    return a[0]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert gcd([1, 2, 3, 4]) == 1, \"Example\"\n    assert gcd([-1, 0, 1]) == 1, \"Example\"\n    assert gcd([-2, 0, 2]) == 2, \"Example\"\n    assert gcd([0, 0, 0]) == 0, \"Example\"\n    assert gcd([2, 2, 2]) == 2, \"Example\"\n    assert gcd([3, 3, 3]) == 3, \"Example\"\n    assert gcd([-4, -3, -2, -1]) == -4, \"Example\"\n    assert gcd([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == -4, \"Example\"\n    assert gcd([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == -5, \"Example\"\n    assert gcd([1, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == -5, \"Example\"\n    assert gcd([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == -5, \"Example\"\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1, \"Example\"\n    assert gcd([-1, 0, 1, 2, 3, 4,",
    "import math\n\n\ndef gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 1:\n        return a[0]\n\n    return gcd(a[1:], a[0] % a[1:])\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    a = [1, 2, 3, 4]\n    print(gcd(a))\n\n\nif __name__ == '__main__':\n    main()",
    "from functools import reduce\n\n\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_recursive(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    if not a:\n        return b\n    if not b:\n        return a\n    return gcd_recursive(b % a, a)\n\n\ndef gcd_iterative(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef test_gcd():\n    assert gcd(5, 10) == 5\n    assert gcd(4, 12) == 2\n    assert gcd(0, 0) == 0\n\n\ndef test_gcd_recursive():\n    assert gcd_recursive(5, 10) == 5\n    assert gcd_recursive(4, 12) == 2\n    assert gcd_recursive(0, 0) == 0\n\n\ndef test_gcd_iterative():\n    assert gcd_iterative(5, 10) == 5\n    assert gcd_iterative(4, 12) == 2\n    assert gcd_iterative(0, 0) == 0",
    "import math\nfrom math import ceil\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(numbers):\n    gcd = numbers[0]\n    for number in numbers[1:]:\n        gcd = gcd(gcd, number)\n    return gcd\n\ndef solution(numbers):\n    gcd = find_gcd(numbers)\n    if gcd == 1:\n        return 1\n    else:\n        return gcd\n\nprint(solution([2, 3, 4, 5]))",
    "# https://www.hackerrank.com/challenges/gcd-array/problem\n\nimport unittest\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nclass MyTestCase(unittest.TestCase):\n    def test_gcd(self):\n        self.assertEqual(gcd(-10, -3), 1)\n        self.assertEqual(gcd(10, 3), 1)\n        self.assertEqual(gcd(5, 15), 1)\n        self.assertEqual(gcd(5, -15), 1)\n        self.assertEqual(gcd(-5, 15), 1)\n        self.assertEqual(gcd(-5, -15), 1)\n        self.assertEqual(gcd(5, 15), 1)\n        self.assertEqual(gcd(5, -15), 1)\n        self.assertEqual(gcd(-5, 15), 1)\n        self.assertEqual(gcd(-5, -15), 1)\n        self.assertEqual(gcd(0, 15), 0)\n        self.assertEqual(gcd(0, -15), 0)\n        self.assertEqual(gcd(15, 0), 15)\n        self.assertEqual(gcd(15, -15), 15)\n        self.assertEqual(gcd(-15, 0), 15)\n        self.assertEqual(gcd(-15, -15), 15)\n        self.assertEqual(gcd(15, 0), 15)\n        self.assertEqual(gcd(-15, 0), 15)\n        self.assertEqual(gcd(0, 0), 0)\n        self.assertEqual(gcd(0, -15), 0)\n        self.assertEqual(gcd(15, 0), 15)\n        self.assertEqual(gcd(15, -15",
    "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(array):\n    return gcd(array[0], gcd(array[1], gcd(array[2], gcd(array[3], gcd(array[4], gcd(array[5], gcd(array[6], gcd(array[7], gcd(array[8], gcd(array[9], gcd(array[10], gcd(array[11], gcd(array[12], gcd(array[13], gcd(array[14], gcd(array[15], gcd(array[16], gcd(array[17], gcd(array[18], gcd(array[19], gcd(array[20], gcd(array[21], gcd(array[22], gcd(array[23], gcd(array[24], gcd(array[25], gcd(array[26], gcd(array[27], gcd(array[28], gcd(array[29], gcd(array[30], gcd(array[31], gcd(array[32], gcd(array[33], gcd(array[34], gcd(array[35], gcd(array[36], gcd(array[37], gcd(array[38], gcd(array[39], gcd(array[40], gcd(array[41], gcd(array[42], gcd(array[43], gcd(array[44], gcd(array[45], gcd(array[46], gcd(array[47], gcd(array[48], gcd(array[49], gcd(array[50], gcd(array[51], gcd(array[52], gcd(array[53], gcd(array[54], gcd(array[55], gcd(array[56], gcd(array[57], gcd(array[58], gcd(array[59], gcd(array[60], gcd(array[61], gcd(array[62], gcd(array[63], gcd(array[64], gcd(array[65], gcd(array[66], g",
    "def gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if not a:\n        return 0\n    if len(a) == 1:\n        return a[0]\n    return gcd(a[1:])\n\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if not a:\n            return b\n        if not b:\n            return a\n        return self.gcd(b, a % b)\n\nif __name__ == \"__main__\":\n    a = [2, 3, 5, 7]\n    b = [2, 3, 4, 7]\n    print(Solution().gcd(a, b))",
    "def gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if not a:\n        return 0\n    if len(a) == 1:\n        return a[0]\n    min_val = min(a)\n    max_val = max(a)\n    curr = min_val\n    while curr!= max_val:\n        curr = curr % max_val\n    return curr\n\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        if a < b:\n            return self.gcd(b, a)\n        return self.gcd(b, a % b)\n\nif __name__ == \"__main__\":\n    print(Solution().gcd(1, 9))\n    print(Solution().gcd(5, 6))\n    print(Solution().gcd(5, 7))",
    "#!/usr/bin/env python\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print gcd(5,3)\n    print gcd(7,3)\n    print gcd(9,7)\n    print gcd(10,3)\n    print gcd(5,3)\n    print gcd(6,3)\n    print gcd(3,2)\n    print gcd(4,3)\n    print gcd(9,9)\n    print gcd(15,9)\n    print gcd(10,3)\n    print gcd(3,5)\n    print gcd(5,3)\n    print gcd(5,2)\n    print gcd(5,4)\n    print gcd(2,5)\n    print gcd(5,5)\n    print gcd(5,4)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,4)\n    print gcd(5,2)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,3)\n    print gcd(5,4)\n    print gcd(5,2)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,3)\n    print gcd(5,4)\n    print gcd(5,2)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,3)\n    print gcd(5,4)\n    print gcd(5,2)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,3)\n    print gcd(5,4)\n    print gcd(5,2)\n    print gcd(5,3)\n    print gcd(5,6)\n    print gcd(5,3)\n    print gcd(5,4)",
    "# Definition for an array of ints.\nclass Array(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n\n    def __iter__(self):\n        \"\"\"\n        :rtype: Iterator[int]\n        \"\"\"\n        i = 0\n        j = len(self.nums) - 1\n        while i < j:\n            while j - i > 1 and self.nums[i] < self.nums[j]:\n                j -= 1\n            self.nums[i], self.nums[j] = self.nums[j], self.nums[i]\n            i += 1\n            j -= 1\n        return iter(self.nums)\n\n# Your GCDIterator object will be instantiated and called as such:\n# obj = GCDIterator(nums)\n# param_1 = obj.next()\n# param_2 = obj.next()\nclass GCDIterator(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(self.nums) - 1\n        while i < j:\n            while j - i > 1 and self.nums[i] < self.nums[j]:\n                j -= 1\n            self.nums[i], self.nums[j] = self.nums[j], self.nums[i]\n            i += 1\n            j -= 1\n        return self.nums[i]\n\n# Your GCDIterator object will be instantiated and called as such:\n# obj = GCDIterator(nums)\n# param_1 = obj.next()\n# param_2 = obj.next()\nclass GCDIterator(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n\n    def next(self):\n        \"\"\"\n        :r",
    "from collections import defaultdict\n\nclass Solution(object):\n    def gcd(self, a):\n        \"\"\"\n        :type a: List[int]\n        :rtype: int\n        \"\"\"\n        if len(a) == 0:\n            return 0\n        elif len(a) == 1:\n            return a[0]\n        else:\n            return self.gcd(a[0], self.gcd(a[1:], a[0]))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.gcd([1, 2, 3])\n    print s.gcd([3, 4, 5])\n    print s.gcd([6, 7, 8])\n    print s.gcd([1, 1, 1])",
    "# https://oj.leetcode.com/problems/find-the-gcd-of-the-given-numbers/\n# O(N) time\n# O(1) space\n\ndef find_gcd(arr):\n  \"\"\"\n  :type arr: List[int]\n  :rtype: int\n  \"\"\"\n  if len(arr) == 1:\n    return arr[0]\n  else:\n    return find_gcd(arr[1:]) % (find_gcd(arr[:len(arr) - 1]) * arr[len(arr) - 1])\n\nif __name__ == \"__main__\":\n  print find_gcd([1, 2, 3])\n  print find_gcd([6, 4, 2])\n  print find_gcd([2, 1, 1, 1])\n  print find_gcd([-1, -1])\n  print find_gcd([-1, 0])\n  print find_gcd([-1, -1, -1])\n  print find_gcd([-1, -1, 0])",
    "from collections import Counter\n\n\nclass Solution(object):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    def gcd(self, arr):\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        arr = Counter(arr)\n        g = arr[0]\n        for i in range(1, len(arr)):\n            g = arr[i]\n            if g % arr[i]!= 0:\n                return 0\n        return g\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.gcd([2, 6, 4])\n    print s.gcd([4, 2, 3])\n    print s.gcd([1, 3, 5, 6, 7])\n    print s.gcd([4, -2, 1, 2, 3])",
    "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(y, x % y)\n    else:\n        return gcd(x, y % x)\n\nif __name__ == \"__main__\":\n    print gcd(2, 3)\n    print gcd(4, 6)",
    "# https://leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/#/description\n# https://leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/discuss/246794/Python-Solution-with-C-Python-and-Java\n\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a < b:\n            a, b = b, a\n        if a == 0:\n            return b\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\nclass Solution2(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a < b:\n            a, b = b, a\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\nclass Solution3(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a < b:\n            a, b = b, a\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\nif __name__ == \"__main__\":\n    assert Solution().gcd(1, 0) == 1\n    assert Solution().gcd(1, 2) == 1\n    assert Solution().gcd(2, 1) == 1\n    assert Solution().gcd(2, 3) == 1\n    assert Solution().gcd(3, 2) == 1\n    assert Solution().gcd(3, 4) == 1\n    assert Solution().gcd(4, 3) == 1\n    assert Solution().gcd(4, 5) == 1\n    assert Solution().gcd(5, 4) == 1\n    assert Solution().gcd(5, 6) == 1\n    assert Solution().gcd(6",
    "def gcd(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    mid = len(nums) / 2\n    a = gcd(nums[:mid])\n    b = gcd(nums[mid:])\n    if a == b:\n        return a\n    else:\n        return gcd(nums[:mid])\n\n\"\"\"\nTest cases\n\"\"\"\n\nnums = [1,2,3,4,5]\nprint gcd(nums)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return self.gcd(nums[0:len(nums)//2], nums[len(nums)//2:])",
    "def find_gcd(arr):\n    \"\"\"\n    Find the gcd of the given array elements.\n    :param arr: The given array elements.\n    :return: The gcd of the given array elements.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return find_gcd(arr[:len(arr)/2])",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef find_gcd(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    g = arr[0]\n    for i in range(1, len(arr)):\n        g = lcm(arr[i], g)\n    return g\n\nif __name__ == '__main__':\n    assert find_gcd([3, 4, 5, 6]) == 3\n    assert find_gcd([2, 5]) == 5\n    assert find_gcd([]) == 0\n    assert find_gcd([1, 2, 3]) == 1\n    assert find_gcd([2, 2]) == 2",
    "def gcd(a, b):\n  \"\"\"\n  >>> gcd(2, 6)\n  2\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, -3)\n  2\n  >>> gcd(-2, 3)\n  1\n  >>> gcd(-2, -3)\n  2\n  >>> gcd(2, 2)\n  2\n  >>> gcd(2, 2.0)\n  2\n  >>> gcd(2.0, 2)\n  2\n  >>> gcd(2.0, 2.0)\n  2\n  >>> gcd(2.0, -2.0)\n  2\n  >>> gcd(-2.0, -2.0)\n  2\n  >>> gcd(-2.0, -2)\n  2\n  >>> gcd(2.0, -2.0)\n  2\n  >>> gcd(-2.0, -2)\n  2\n  >>> gcd(-2.0, 2)\n  -2\n  >>> gcd(2.0, -2)\n  -2\n  >>> gcd(2.0, -2.0)\n  -2\n  >>> gcd(2.0, 2)\n  2\n  \"\"\"\n  if a < 0:\n    a = -a\n  if b < 0:\n    b = -b\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n  while True:\n    if a < b:\n      a, b = b, a\n    if a % b == 0:\n      return b\n    b -= 1",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def start_inclusive(self):\n        return self.start\n\n    def end_inclusive(self):\n        return self.end\n\n    def __repr__(self):\n        return str(self.start) + \",\" + str(self.end)\n\nclass Solution:\n    def findGcd(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return 0\n        intervals.sort(key=lambda x: x.start_inclusive())\n        result = intervals[0].end_inclusive()\n        for i in range(1, len(intervals)):\n            result = self.gcd(result, intervals[i].end_inclusive() - intervals[i - 1].start_inclusive())\n        return result\n        \n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return a",
    "from __future__ import print_function\nimport math\n\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"\n    Compute the least common multiple of two numbers.\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef test_gcd():\n    assert gcd(2, 3) == 1\n    assert gcd(3, 6) == 3\n    assert gcd(10, 20) == 10\n    assert gcd(100, 200) == 100\n    assert gcd(1000, 2000) == 1000\n    assert gcd(10000, 20000) == 10000\n    assert gcd(100000, 200000) == 100000\n\n\ndef test_lcm():\n    assert lcm(2, 3) == 6\n    assert lcm(3, 6) == 18\n    assert lcm(10, 20) == 100\n    assert lcm(100, 200) == 200\n    assert lcm(1000, 2000) == 2000\n    assert lcm(10000, 20000) == 20000\n    assert lcm(100000, 200000) == 200000\n\n\ndef main():\n    test_gcd()\n    test_lcm()\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef gcd(a):\n    return math.gcd(a[0], a[1])\n\n\ndef lcm(a):\n    return math.lcm(a[0], a[1])\n\n\nif __name__ == '__main__':\n    a = [1, 1]\n    print(gcd(a))\n    print(lcm(a))",
    "from common.basic import gcd\nfrom common.basic import list_product\nfrom common.basic import list_product_n\nfrom common.basic import list_product_2\nfrom common.basic import list_product_3\n\n\ndef find_gcd(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return gcd(arr[0], arr[1])\n\n    return find_gcd(arr[1:]) * find_gcd(list_product_n(arr, 2))\n\n\nif __name__ == '__main__':\n    assert find_gcd([-1, -1, 2, 2, 2]) == 2\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -1, 2, 2, 3]) == 1\n    assert find_gcd([-1, -",
    "def gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    \n    if len(a) == 1:\n        return a[0]\n    else:\n        b = a[0]\n        for i in range(1, len(a)):\n            if a[i]!= 0 and a[i]!= b:\n                b = gcd(a[:i] + a[i+1:])\n            else:\n                b = gcd(b, a[i])\n        return b\n\nprint(gcd([2, 4, 6, 8]))\nprint(gcd([5, 5]))\nprint(gcd([1, 3, 1, 3, 1, 1, 2]))",
    "class Solution(object):\n    def gcd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return self.recursive_gcd(nums, 0, len(nums) - 1)\n\n    def recursive_gcd(self, nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return self.recursive_gcd(nums, start, (start + end) / 2)",
    "def gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 1:\n        return a[0]\n    \n    mid = len(a)/2\n    \n    g1 = gcd(a[:mid])\n    g2 = gcd(a[mid:])\n    \n    return g1 if g1 >= g2 else g2",
    "def gcd(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[:len(a)/2])\n        \nprint(gcd([10, 11, 13, 15]))",
    "import math\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(a):\n    if a == 0:\n        return 0\n    return gcd(a, find_gcd(b))\n\ndef test():\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,0) == 1\n    assert find_gcd(0,1,2) == 1\n    assert find_gcd(1,0,2) == 2\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find_gcd(1,2,3) == 1\n    assert find",
    "from math import gcd\n\ndef gcd_array(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return gcd(nums[0], gcd_array(nums[1:]))\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(gcd_array(nums))",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        elif len(nums) == 2:\n            return self.gcd(nums[1], nums[0])\n        else:\n            return self.gcd(nums[1], self.gcd(nums[2], nums[0]))\n\nif __name__ == \"__main__\":\n    nums = [2, 4, 3, 1, 2, 0]\n    print(Solution().gcd(nums))\n    nums = [1, 2, 1, 2, 1, 2]\n    print(Solution().gcd(nums))\n    nums = [1, 1, 1, 1]\n    print(Solution().gcd(nums))",
    "# https://github.com/kc1212/leetcode/blob/master/leetcode.py\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def gcdRecursive(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head.val\n        return self.gcdRecursive(head.next) % head.val\n\n    # @param head, a ListNode\n    # @return a ListNode\n    def gcdRecursive2(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head.val\n        return self.gcdRecursive(head.next)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 0\n\n        if len(nums) == 1:\n            return nums[0]\n\n        nums.sort()\n        if nums[0] == 0:\n            return nums[1]\n        if nums[-1] == 0:\n            return nums[-2]\n\n        return self.gcd(nums[1:-1])\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.gcd([2, 1, 1, 1])\n    print solution.gcd([0, 1, 1])\n    print solution.gcd([-1, -1])\n    print solution.gcd([-1, 0, 0])\n    print solution.gcd([-1, 0, 1])\n    print solution.gcd([-1, 1, 1])",
    "class Solution(object):\n    def gcd(self, a):\n        \"\"\"\n        :type a: List[int]\n        :rtype: int\n        \"\"\"\n        if len(a) == 0:\n            return 0\n        if len(a) == 1:\n            return a[0]\n        if len(a) == 2:\n            if a[0] == 0 and a[1] == 0:\n                return 0\n            if a[0] == 0:\n                return a[1]\n            if a[1] == 0:\n                return a[0]\n            return self.gcd(a[1], a[0])\n        else:\n            return self.gcd(a[0], self.gcd(a[1:], a[0]))\n\n\ndef main():\n    # print(Solution().gcd([1, 2, 3]))\n    print(Solution().gcd([-1, -2, -3]))\n    print(Solution().gcd([-1, -2, 1, 2, 3, 4, 5, 6, 7]))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __repr__(self):\n        return str(self.start) + \" \" + str(self.end)\n\nclass Solution(object):\n    def findGcd(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return 0\n        if len(intervals) == 1:\n            return intervals[0].end - intervals[0].start\n        g = self.gcd(intervals[0].start, intervals[1].end)\n        for i in range(2, len(intervals)):\n            g = self.gcd(intervals[i].start, g)\n        return g\n\n    def gcd(self, a, b):\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        return self.gcd(b % a, a)\n\nif __name__ == \"__main__\":\n    print Solution().findGcd([Interval(0, 4), Interval(2, 7)])\n    print Solution().findGcd([Interval(1, 10), Interval(2, 4)])",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            # find the largest element\n            largest = nums[0]\n            # find the smallest element\n            smallest = nums[0]\n            # find the rest of the elements\n            for i in range(1, len(nums)):\n                # find the largest element\n                if nums[i] > largest:\n                    largest = nums[i]\n                # find the smallest element\n                if nums[i] < smallest:\n                    smallest = nums[i]\n                # find the gcd\n                if largest % smallest == 0:\n                    largest /= smallest\n                else:\n                    return largest\n            return largest\n\nif __name__ == \"__main__\":\n    print Solution().gcd([1, 2, 3])",
    "class Solution(object):\n    def gcd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # find the first non-zero element\n        start = 0\n        while nums[start] == 0:\n            start += 1\n\n        # find the last non-zero element\n        end = len(nums) - 1\n        while nums[end] == 0:\n            end -= 1\n\n        # find the gcd of the subarrays\n        gcd = 1\n        while start < end:\n            gcd = gcd * nums[start] % nums[end]\n            # swap the start and end indices\n            start, end = end, start - 1\n        return gcd\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.gcd([4,3,2,1])\n    print sol.gcd([0,1])\n    print sol.gcd([-1])\n    print sol.gcd([-1,1,1])\n    print sol.gcd([1,1,1,1,1])",
    "def gcd(a, b):\n    \"\"\"\n    a, b: integers\n    returns: gcd(a, b)\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef find_gcd(arr):\n    \"\"\"\n    arr: list of ints\n    returns: gcd(arr[0], arr[1],..., arr[n-1])\n    \"\"\"\n    return gcd(*arr)\n\ndef find_gcd2(arr):\n    \"\"\"\n    arr: list of ints\n    returns: gcd(arr[0], arr[1],..., arr[n-1])\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return gcd(arr[0], arr[1])\n    return gcd(arr[0], find_gcd2(arr[1:]))\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print find_gcd(arr)\n    arr = [1, 2, 3, 4, 5, 6]\n    print find_gcd(arr)\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print find_gcd(arr)\n\nif __name__ == \"__main__\":\n    main()",
    "# @include\ndef gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:]) % a[0]\n# @exclude\n\ndef gcd_test():\n    assert gcd([1, 3]) == 1\n    assert gcd([3, 1]) == 1\n    assert gcd([7, 3]) == 1\n    assert gcd([4, 9]) == 1\n    assert gcd([9, 4]) == 1\n    assert gcd([6, 2]) == 2\n    assert gcd([1, 0]) == 1\n    assert gcd([0, 1]) == 1\n    assert gcd([0, 0]) == 0\n    assert gcd([1, 1]) == 1\n    assert gcd([-1, -2]) == 1\n    assert gcd([-1, 1]) == 1\n    assert gcd([-2, 1]) == 1\n    assert gcd([-1, -1]) == 1\n    assert gcd([-1, 0]) == 1\n    assert gcd([0, -1]) == 1\n    assert gcd([0, 0]) == 0\n    assert gcd([-1, 2]) == 1\n    assert gcd([2, -1]) == 1\n    assert gcd([2, 0]) == 1\n    assert gcd([0, 2]) == 1\n    assert gcd([1, 3, 5, 7]) == gcd(gcd(3, 5), 7)\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8]) == gcd(gcd(1, 2), gcd(3, 5))\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == gcd(gcd(1, 2), gcd(3, 5))\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == gcd(gcd(1, 2), gcd(3, 5))\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == gcd(gcd(1",
    "# https://www.hackerrank.com/challenges/gcd-array\n\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b.\n\n    Args:\n        a: An integer\n        b: An integer\n\n    Returns:\n        The greatest common divisor of a and b.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\n\ndef gcd_array(nums):\n    \"\"\"\n    Returns the gcd of the given array elements.\n\n    Args:\n        nums: A list of integers\n\n    Returns:\n        The greatest common divisor of all the elements in the given list.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return gcd(nums[0], gcd_array(nums[1:]))\n\nif __name__ == \"__main__\":\n    nums = [5, 3, 2]\n    print(gcd_array(nums))",
    "# https://www.hackerrank.com/challenges/gcd-of-array\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_array(arr):\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd(arr[i], gcd)\n    return gcd\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(gcd_array(arr))",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def gcdHelper(self, node):\n        if not node:\n            return 1\n        if not node.left and not node.right:\n            return node.val\n        if not node.left:\n            return self.gcdHelper(node.right)\n        if not node.right:\n            return self.gcdHelper(node.left)\n        return self.gcdHelper(node.left).gcd(node.right)\n\n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def gcdRecursive(self, node):\n        if not node:\n            return 1\n        if not node.left and not node.right:\n            return node.val\n        if not node.left:\n            return self.gcdRecursive(node.right)\n        if not node.right:\n            return self.gcdRecursive(node.left)\n        return self.gcdRecursive(node.left).gcd(node.right)\n\n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def gcdRecursive(self, node):\n        if not node:\n            return 1\n        if not node.left and not node.right:\n            return node.val\n        if not node.left:\n            return self.gcdRecursive(node.right)\n        if not node.right:\n            return self.gcdRecursive(node.left)\n        return self.gcdRecursive(node.left).gcd(node.right)\n\nif __name__ == '__main__':\n    root = TreeNode(4)\n    root.left = TreeNode(2)\n    root.left.left = TreeNode(0)\n    root.left.left.left = TreeNode(1)\n    root.left.left.left.left = TreeNode(2)",
    "def gcd(a):\n    \"\"\"\n    For a list of integers, find the greatest common divisor of the elements.\n    \"\"\"\n    # base cases\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return a[0] if a[0] < a[1] else a[1]\n\n    # recursively find the gcd\n    return gcd(a[:2])\n\nprint gcd([1, 2, 3, 4])",
    "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    assert gcd(3, 2) == 1, 'gcd'\n    assert gcd(9, 6) == 3, 'gcd'\n    assert gcd(2, 4) == 2, 'gcd'\n    assert gcd(2, 4) == 2, 'gcd'\n    assert gcd(7, 3) == 1, 'gcd'\n    assert gcd(7, 3) == 1, 'gcd'\n    assert gcd(0, 0) == 0, 'gcd'\n    assert gcd(0, 0) == 0, 'gcd'\n    assert gcd(1, 0) == 1, 'gcd'\n    assert gcd(1, 0) == 1, 'gcd'\n    assert gcd(1, 1) == 1, 'gcd'\n    assert gcd(1, 1) == 1, 'gcd'\n    assert gcd(0, 1) == 1, 'gcd'\n    assert gcd(0, 1) == 1, 'gcd'\n    assert gcd(1, -1) == 1, 'gcd'\n    assert gcd(1, -1) == 1, 'gcd'\n    assert gcd(5, -2) == 1, 'gcd'\n    assert gcd(5, -2) == 1, 'gcd'\n    assert gcd(0, -1) == 1, 'gcd'\n    assert gcd(0, -1) == 1, 'gcd'\n    assert gcd(1, 1) == 1, 'gcd'\n    assert gcd(1, 1) == 1, 'gcd'\n    assert gcd(1, 0) == 1, 'gcd'\n    assert gcd(1, 0) == 1, 'gcd'\n    assert gcd(2, 4) == 2, 'gcd'\n    assert gcd(2, 4) == 2, 'gcd'\n    assert gcd(2, 4) == 2, 'gcd'",
    "def gcd(a):\n    \"\"\"\n    >>> gcd([2, 3, 4])\n    2\n    >>> gcd([3, 4, 5])\n    1\n    >>> gcd([4, 3, 2])\n    2\n    \"\"\"\n    while a[0]!= 0:\n        a = a[1:] + [a[0]]\n    return a[0]\n\nprint(gcd([2, 3, 4]))\nprint(gcd([3, 4, 5]))\nprint(gcd([4, 3, 2]))",
    "# Definition for an element of a list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def gcd(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        while x!= 0 and y!= 0:\n            if x < y:\n                x = x % y\n            else:\n                y = y % x\n        return x\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.gcd(4, 6)",
    "def find_gcd(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return find_gcd(arr[1], arr[0])\n    if arr[0] % arr[1]!= 0:\n        return find_gcd(arr[1], arr[0])\n    else:\n        return find_gcd(arr[1], arr[0]/arr[1])\n\nprint(find_gcd([1,2,3,4,5]))\nprint(find_gcd([1,2,3,4,5,6]))",
    "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(arr):\n    if len(arr) == 0:\n        return 0\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd(arr[i], gcd)\n    return gcd\n\ndef test_cases():\n    arr = [2, 3, 5, 10]\n    assert(find_gcd(arr) == 2)\n    arr = [5, 2, 6, 3]\n    assert(find_gcd(arr) == 2)\n    arr = [7, 2, 7, 3]\n    assert(find_gcd(arr) == 1)\n    arr = [4, 4, 4, 4]\n    assert(find_gcd(arr) == 4)\n    arr = [6, 6, 6, 6, 6, 6]\n    assert(find_gcd(arr) == 6)\n    arr = [5, 2, 7, 3, 6, 8]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    assert(find_gcd(arr) == 2)\n    arr = [2,",
    "def gcd(arr):\n    \"\"\"\n    Given an array of integers, return the greatest common divisor.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return min(arr)\n    else:\n        return gcd(arr[:len(arr)/2])\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    gcd_arr = gcd(arr)\n    print(gcd_arr)\n\nif __name__ == \"__main__\":\n    main()",
    "def gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\nif __name__ == \"__main__\":\n    a = [3, 1, 2, 4, 1, 2, 4, 4]\n    b = [1, 2, 4, 4, 4, 4, 3, 2]\n    print(gcd(a, b))",
    "class Solution(object):\n    def gcd(self, a):\n        \"\"\"\n        :type a: List[int]\n        :rtype: int\n        \"\"\"\n        if not a:\n            return 1\n        if len(a) == 1:\n            return a[0]\n        if len(a) == 2:\n            if a[0] == a[1]:\n                return a[0]\n            return self.gcd(a[1], a[0])\n        if a[0] == 0:\n            return self.gcd(a[1:])\n        if a[-1] == 0:\n            return self.gcd(a[:-1])\n        return self.gcd(a[:-1], a[-1])\n\n\nif __name__ == '__main__':\n    assert Solution().gcd(3,2) == 1\n    assert Solution().gcd(5,4) == 1\n    assert Solution().gcd(5,1) == 5\n    assert Solution().gcd(3,2) == 1\n    assert Solution().gcd(5,1) == 5",
    "def gcd(a):\n    \"\"\"\n    >>> gcd(3, 4)\n    1\n    >>> gcd(6, 18)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(2, -6)\n    2\n    \"\"\"\n    if a == 0:\n        return 0\n    if a < 0:\n        a = -a\n    while a!= 0:\n        if a % 2 == 0:\n            a = a / 2\n        else:\n            a = a * 3 + 1\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# https://discuss.leetcode.com/topic/6950/short-recursive-python-solution-with-explanation\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if not nums:\n            return 1\n        else:\n            return self.gcd(nums[0], self.gcd(nums[1:], nums[0]))\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.gcd([2,3,6,7])\n    print sol.gcd([2,3,6,7,8])\n    print sol.gcd([2,3,5])\n    print sol.gcd([2,3,5,6,7,8])\n    print sol.gcd([2,3,5,6,7,8,9])\n    print sol.gcd([2,3,5,6,7,8,9,10])\n    print sol.gcd([2,3,5,6,7,8,9,10,11])\n    print sol.gcd([2,3,5,6,7,8,9,10,11,12])\n    print sol.gcd([2,3,5,6,7,8,9,10,11,12,13])",
    "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    gcd([1, 2, 3])\n    gcd([4, 5, 6])\n    gcd([7, 8, 9])",
    "from __future__ import print_function\n\nclass Solution(object):\n    def gcd(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        p = arr[0]\n        for i in range(1, len(arr)):\n            p = arr[i]\n            while p!= 0:\n                if p & 1 == 1:\n                    p = p >> 1\n                else:\n                    p = p >> 1 ^ arr[i]\n        return p\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.gcd([2, 1, 2, 2, 1]))",
    "def gcd(a, b):\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\ndef find_gcd(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[0], find_gcd(arr[1:]))\n\nif __name__ == '__main__':\n    arr = [3, 4, 2, 1]\n    print(find_gcd(arr))",
    "# https://oj.leetcode.com/problems/greatest-common-divisor/\n# tags: easy\n\n\"\"\"\nGiven an integer array of size n, find the GCD of all elements in this array.\n\nExample 1:\nInput: [2,4,6,8]\nOutput: 2\nExplanation: The GCD of 2, 4, 6 and 8 is 2.\nExample 2:\nInput: [1,2,3,4,5,6,7]\nOutput: 1\nExplanation: The GCD of 1, 2, 3, 4, 5, 6, 7 is 1.\n\"\"\"\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        # find the first element\n        first = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                return nums[i]\n            while nums[i] % nums[i-1]!= 0:\n                nums[i] = nums[i] % nums[i-1]\n            first = nums[i]\n        return first\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.gcd([2,4,6,8]))\n    print(sol.gcd([1,2,3,4,5,6,7]))",
    "def gcd(a):\n  \"\"\"\n  Find the greatest common divisor of a list of integers.\n  \"\"\"\n  # http://stackoverflow.com/questions/1191381/how-do-you-find-the-greatest-common-divisor-of-an-array-of-integers\n  if len(a) == 0:\n    return 0\n  elif len(a) == 1:\n    return a[0]\n  elif len(a) == 2:\n    return gcd(a[0], a[1])\n  else:\n    return gcd(a[0], gcd(a[1:]));\n\ndef test():\n  assert gcd([]) == 0\n  assert gcd([1, 2]) == 1\n  assert gcd([1, 2, 3]) == 2\n  assert gcd([1, 2, 3, 4]) == 1\n  assert gcd([1, 4, 9, 16]) == 1\n  assert gcd([-1, -2, -3, -4]) == 1\n  assert gcd([-1, -2, -3, -4]) == 1\n  assert gcd([1, 2, 3, 4, 5]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 1\n  assert gcd([1, 2, 3, 4, 5, 6",
    "# https://discuss.leetcode.com/topic/14086/python-solution-using-python-s-sorted-array-and-binary-search-without-using-extra-memory/2\n\n\"\"\"\nGiven an array of integers, find the greatest common divisor of all the elements.\n\nThe greatest common divisor of two elements is the largest integer that divides both of them without remainder.\n\nThe least common multiple of two elements is the smallest integer that divides both of them without remainder.\n\"\"\"\n\nclass Solution(object):\n    def gcd(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return y\n        if y == 0:\n            return x\n        if x > y:\n            return self.gcd(y, x % y)\n        if x % y == 0:\n            return y\n        return self.gcd(y, x % y)\n\n\nclass Solution2(object):\n    def gcd(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return y\n        if y == 0:\n            return x\n        if x < y:\n            return self.gcd(y, x % y)\n        if x % y == 0:\n            return y\n        return self.gcd(y, x % y)",
    "# https://github.com/jakevdp/LeetCode/blob/master/leetcode.py\n# https://www.youtube.com/watch?v=Q9Yv4u6_A_8\n\ndef gcd(a, b):\n    \"\"\"\n    >>> gcd(2, 5)\n    1\n    >>> gcd(6, 10)\n    2\n    >>> gcd(10, 3)\n    3\n    >>> gcd(10, -3)\n    10\n    >>> gcd(10, 0)\n    10\n    >>> gcd(10, -10)\n    10\n    >>> gcd(2, 2)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 3)\n    1\n    >>> gcd(2, -3)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, -3)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2\n    >>> gcd(2, 0)\n    2\n    >>> gcd(2, -2)\n    2",
    "class Solution(object):\n    def gcd(self, a):\n        \"\"\"\n        :type a: List[int]\n        :rtype: int\n        \"\"\"\n        # return self.__gcd(a[0], a[1])\n        if len(a) == 2:\n            return self.__gcd(a[0], a[1])\n        else:\n            return self.gcd(a[:len(a)/2]) * self.gcd(a[len(a)/2:])\n\n    def __gcd(self, a, b):\n        if a == 0:\n            return b\n        elif b == 0:\n            return a\n        else:\n            return self.__gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    assert Solution().gcd([2, 3, 6, 7]) == 1\n    assert Solution().gcd([-2, -3, -6, -7]) == 1\n    assert Solution().gcd([0, 1, 2, 3]) == 1\n    assert Solution().gcd([1, 2, 3]) == 1\n    assert Solution().gcd([1, 2, 3, 4]) == 2\n    assert Solution().gcd([1, 2, 3, 4, 5]) == 1\n    assert Solution().gcd([1, 2, 3, 4, 5, 6]) == 2\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7, 8]) == 2\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\n    assert Solution().gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2",
    "# https://oj.leetcode.com/problems/find-the-gcd-of-a-given-array/\n# https://leetcode.com/problems/find-the-gcd-of-a-given-array/\n# https://leetcode.com/problems/find-the-gcd-of-a-given-array/solution/\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        g = nums[0]\n        for i in range(1, len(nums)):\n            g = gcd(nums[i], g)\n            \n        return g",
    "# Definition for an array of int.\nclass Array(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n\n    def __str__(self):\n        return \"[\" + \", \".join(map(str, self.nums)) + \"]\"\n\n    def __repr__(self):\n        return \"Array(\" + \", \".join(map(repr, self.nums)) + \")\"\n\n\nclass Solution(object):\n    def gcd(self, A):\n        \"\"\"\n        :type A: Array\n        :rtype: int\n        \"\"\"\n        if len(A.nums) == 0:\n            return 0\n        if len(A.nums) == 1:\n            return A.nums[0]\n        a = A.nums[0]\n        for i in range(1, len(A.nums)):\n            a = self.gcd(A.nums[i], a)\n        return a\n\n\nif __name__ == \"__main__\":\n    A = Array([1, 2, 3, 4])\n    assert A.gcd(A) == 1\n    A = Array([-1, -2, -3, -4])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, 0])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, -3])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, -3, -4])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, -3, -4, -5])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, -3, -4, -5, -6])\n    assert A.gcd(A) == 1\n    A = Array([-1, 0, -2, -3, -4, -5, -6, -7])\n    assert A.gcd(",
    "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\"\"\"\nExample 1:\n\nInput: [1, 2, 3, 4, 5]\nOutput: 1\nExplanation:\nThe gcd of 1 and 2 is 1.\nThe gcd of 2 and 3 is 2.\nThe gcd of 3 and 4 is 3.\nThe gcd of 4 and 5 is 4.\nThe gcd of 5 and 5 is 5.\n\nExample 2:\n\nInput: [1, 3, 4, 5, 5]\nOutput: 1\nExplanation:\nThe gcd of 1 and 3 is 1.\nThe gcd of 3 and 4 is 3.\nThe gcd of 4 and 5 is 4.\nThe gcd of 5 and 5 is 5.\n\nExample 3:\n\nInput: [4, 5, 5, 5, 5]\nOutput: 1\nExplanation:\nThe gcd of 4 and 5 is 1.\nThe gcd of 5 and 5 is 5.\n\nExample 4:\n\nInput: [1, 3, 3, 5, 7]\nOutput: 3\nExplanation:\nThe gcd of 1 and 3 is 1.\nThe gcd of 3 and 3 is 3.\nThe gcd of 3 and 5 is 3.\nThe gcd of 5 and 7 is 5.\n\nNote:\n\n1 <= x, y <= 100\n\"\"\"",
    "from utils import gcd\n\n\ndef gcd_array(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return gcd(arr[0], gcd(arr[1], gcd(arr[2], gcd(arr[3], gcd(arr[4], gcd(arr[5], gcd(arr[6], gcd(arr[7], gcd(arr[8], gcd(arr[9], gcd(arr[10], gcd(arr[11], gcd(arr[12], gcd(arr[13], gcd(arr[14], gcd(arr[15], gcd(arr[16], gcd(arr[17], gcd(arr[18], gcd(arr[19], gcd(arr[20], gcd(arr[21], gcd(arr[22], gcd(arr[23], gcd(arr[24], gcd(arr[25], gcd(arr[26], gcd(arr[27], gcd(arr[28], gcd(arr[29], gcd(arr[30], gcd(arr[31], gcd(arr[32], gcd(arr[33], gcd(arr[34], gcd(arr[35], gcd(arr[36], gcd(arr[37], gcd(arr[38], gcd(arr[39], gcd(arr[40], gcd(arr[41], gcd(arr[42], gcd(arr[43], gcd(arr[44], gcd(arr[45], gcd(arr[46], gcd(arr[47], gcd(arr[48], gcd(arr[49], gcd(arr[50], gcd(arr[51], gcd(arr[52], gcd(arr[53], gcd(arr[54], gcd(arr[55], gcd(arr[56], gcd(arr[57], gcd(arr[58], gcd(arr[59], gcd(arr[60], gcd(arr[61], gcd(arr[62], gcd(arr[63], gcd(arr[64], gcd(arr[65], gcd(arr[66],",
    "class Solution:\n    # @param num, a list of integer\n    # @return an integer\n    def gcd(self, num):\n        return self.bfs(num, 0, len(num) - 1)\n    \n    def bfs(self, num, start, end):\n        if start == end:\n            return num[start]\n        if start == end - 1:\n            return 1\n        \n        mid = (start + end) / 2\n        \n        g = self.bfs(num, mid, end)\n        \n        if g!= 1:\n            return g\n        else:\n            return self.bfs(num, start, mid)\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.gcd(num)",
    "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_2(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 5]\n    b = [2, 3, 4, 5]\n    print(gcd(a, b))\n    print(gcd_2(a, b))\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5]\n    print(gcd(a, b))\n    print(gcd_2(a, b))",
    "class Solution:\n    # @param num, a list of integer\n    # @return an integer\n    def gcd(self, num):\n        if len(num) == 1:\n            return num[0]\n        else:\n            return self.gcd(num[:len(num)/2]) * self.gcd(num[len(num)/2:])\n\ns = Solution()\nprint s.gcd([1,2,3])",
    "def gcd(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    return gcd(b, a[0])\n\ndef gcd_recursive(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    return gcd_recursive(b, a[0])\n\ndef gcd_iterative(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    for i in range(0, len(a)):\n        if a[i] > b[i]:\n            b[i] -= a[i]\n            a[i] = 1\n    for i in range(0, len(b)):\n        if a[i] > b[i]:\n            a[i] -= b[i]\n            b[i] = 1\n    return gcd_iterative(b, a)\n\nif __name__ == '__main__':\n    print(gcd([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(gcd_recursive([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(gcd_iterative([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(gcd([0, 0, 0, 0], [1, 1, 1, 1]))\n    print(gcd([1, 2, 3, 4], [1, 1, 1, 1]))\n    print(gcd([0, 0, 0, 0], [1, 1, 1",
    "def gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    print(gcd(7, 2))\n    print(gcd(1, 1))",
    "# https://leetcode.com/problems/find-the-greatest-common-divisor-of-an-array/discuss/225084/Python-implementation-of-leetcode-gcd-with-Python-and-Python-3\n\n# 2ms 100%\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def gcd_recursive(self, a, b):\n        if not b:\n            return a\n        else:\n            return self.gcd_recursive(b, a % b)\n\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if not a:\n            return b\n        elif not b:\n            return a\n        else:\n            return self.gcd(b, a % b)\n\nif __name__ == \"__main__\":\n    assert Solution().gcd(1, 2) == 1\n    assert Solution().gcd(1, 1) == 1\n    assert Solution().gcd(1, 0) == 1\n    assert Solution().gcd(0, 1) == 1\n    assert Solution().gcd(2, 2) == 1\n    assert Solution().gcd(2, 3) == 1\n    assert Solution().gcd(7, 3) == 1\n    assert Solution().gcd(7, 4) == 1\n    assert Solution().gcd(7, 5) == 1\n    assert Solution().gcd(7, 6) == 1\n    assert Solution().gcd(7, 7) == 1\n    assert Solution().gcd(7, 8) == 1\n    assert Solution().gcd(7, 9) == 1\n    assert Solution().gcd(7, 10) == 1\n    assert Solution().gcd(7, 11) == 1\n    assert Solution().gcd(7, 12) == 1\n    assert Solution().gcd(7, 13) == 1\n    assert Solution",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            m = max(nums)\n            n = min(nums)\n            if m == n:\n                return m\n            if m < 0:\n                return self.gcd(-m)\n            if n < 0:\n                return self.gcd(-n)\n            if m == 0:\n                return n\n            if n == 0:\n                return m\n            while m % n == 0:\n                m = m / n\n            return m\n\n    # @param {integer[]} nums\n    # @return {integer}\n    def gcd(self, nums):\n        if len(nums) == 0:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            return self.gcd(nums[0], self.gcd(nums[1:]))\n\n\nif __name__ == \"__main__\":\n    print Solution().gcd([1, 2, 3])\n    print Solution().gcd([1, 0])\n    print Solution().gcd([1, 2, 3, 0])\n    print Solution().gcd([2, 2, 3, 3, 3])\n    print Solution().gcd([2, 2, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2, 3, 3, 3, 2])\n    print Solution().gcd([2",
    "import math\ndef gcd(nums):\n    \"\"\"\n    Returns the greatest common divisor of the given integers.\n    \"\"\"\n    while True:\n        x = nums[0]\n        y = nums[1]\n        n = nums[2]\n        if x == 0:\n            return y\n        if y == 0:\n            return n\n        if n == 0:\n            return x\n        if x > y:\n            nums[0] = y\n            nums[1] = x\n            nums[2] = n\n        else:\n            nums[1] = y\n            nums[2] = n\n            nums[0] = x\n        \n        if n > y:\n            n = n - y\n        elif n < y:\n            n = n - x\n        else:\n            break\n    \n    return n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert gcd(3) == 1, \"gcd(3) == 1\"\n    assert gcd(10) == 10, \"gcd(10) == 10\"\n    assert gcd(0) == 0, \"gcd(0) == 0\"\n    assert gcd(-5) == -1, \"gcd(-5) == -1\"\n    assert gcd(1) == 1, \"gcd(1) == 1\"\n    assert gcd(6) == 1, \"gcd(6) == 1\"\n    assert gcd(12) == 2, \"gcd(12) == 2\"\n    assert gcd(100) == 20, \"gcd(100) == 20\"\n    assert gcd(25) == 1, \"gcd(25) == 1\"\n    assert gcd(15) == 5, \"gcd(15) == 5\"\n    assert gcd(26) == 1, \"gcd(26) == 1\"\n    assert gcd(24) == 2, \"gcd(24) == 2\"\n    assert gcd(23) == 1, \"gcd(23) == 1\"\n    assert gcd(13) == 1, \"g",
    "def gcd(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    assert gcd([2, 3, 4]) == 2\n    assert gcd([5, 7, 9]) == 1\n    assert gcd([5, 7, 9, 1]) == 1\n    assert gcd([5, 7, 9, 1, 5]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5, 7]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1]) == 1\n    assert gcd([5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5, 7, 9, 1, 5]) == 1\n    assert g",
    "from math import gcd\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 4, 6]\n    print gcd(arr[0], arr[1])\n    print gcd(arr[1], arr[2])\n    print gcd(arr[2], arr[3])\n    print gcd(arr[3], arr[4])\n    print gcd(arr[4], arr[5])\n    print gcd(arr[5], arr[6])",
    "def gcd(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        l = len(nums)\n        if l == 1:\n            return nums[0]\n        elif l == 2:\n            return gcd(nums[1], nums[0])\n        else:\n            l = l / 2\n            return gcd(nums[:l], nums[l:])\n\nif __name__ == \"__main__\":\n    nums = [1, 3, 5, 6]\n    print(gcd(nums))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}