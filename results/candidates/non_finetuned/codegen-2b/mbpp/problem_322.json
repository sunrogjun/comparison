{
  "problem": {
    "task_id": "MBPP/333",
    "prompt": "Write a python function to sort a list according to the second element in sublist.",
    "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
    "test_list": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ],
    "challenge_test_list": [],
    "problem_id": 322
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sort(lst, reverse=False):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \"\"\"\n    if reverse:\n        lst.reverse()\n    return sorted(lst, key=lambda x: x[1])\n\ndef sort_test():\n    assert sort([3, 1, 2]) == [1, 2, 3]\n    assert sort([1, 3, 2]) == [1, 2, 3]\n    assert sort([1, 2, 3]) == [1, 2, 3]\n    assert sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert sort([4, 1, 2, 3]) == [1, 2, 3, 4]\n    assert sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nif __name__ == '__main__':\n    sort_test()",
    "def sort_list(list_to_sort):\n    \"\"\"\n    Input: a list of elements\n    Output: the sorted list\n    \"\"\"\n    return sorted(list_to_sort, key=lambda x: x[1])\n\ndef test_sort_list():\n    \"\"\"\n    Test sort_list function\n    \"\"\"\n    test_list = [(\"a\", \"b\"), (\"c\", \"d\"), (\"a\", \"a\"), (\"d\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"a\"), (\"a\", \"",
    "def sort_list(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# print sort_list([[2,1],[2,1],[1,2],[2,3],[3,2]])\n# print sort_list([[1,2],[1,2],[2,1],[3,1],[3,2]])\n# print sort_list([[1,2],[1,2],[2,1],[3,1],[3,2]])\n# print sort_list([[1,1],[2,2],[3,3],[4,4],[5,5]])\n# print sort_list([[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]])",
    "def sort_list(lst):\n    # write your code here\n    sorted_list = []\n    for i in range(len(lst)):\n        sorted_list.append(lst[i])\n    sorted_list = sorted(sorted_list)\n    for i in range(len(sorted_list)):\n        sorted_list[i] = sorted_list[i][1]\n    return sorted_list\n\nif __name__ == '__main__':\n    lst = [1, 4, 3, 2]\n    print(sort_list(lst))",
    "def sort_list(list_to_sort, sublist_to_sort):\n    # write your code here\n    # this function sorts list_to_sort by the second element in sublist_to_sort\n    # if the second element is equal to the first element, then it sorts the list\n    # based on the first element\n    for index in range(len(list_to_sort)):\n        if list_to_sort[index][1] == sublist_to_sort[0]:\n            list_to_sort.insert(index, sublist_to_sort[1])\n            break\n        elif list_to_sort[index][1] < sublist_to_sort[0]:\n            list_to_sort.insert(index, sublist_to_sort[0])\n            break\n        else:\n            list_to_sort.insert(index, sublist_to_sort[1])\n            break\n    return list_to_sort\n\n\nif __name__ == \"__main__\":\n    list_to_sort = [('a', 2), ('b', 1), ('c', 3)]\n    sublist_to_sort = ['a', 'c', 'b']\n    sort_list(list_to_sort, sublist_to_sort)\n    print list_to_sort",
    "def sort(list_to_sort):\n    return sorted(list_to_sort, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sort(test_list)",
    "def sort(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # l = sorted(l, key=lambda x: l[x])\n    # l = sorted(l, key=lambda x: l[x], reverse=True)\n    l.sort(key=lambda x: l[x])\n    return l\n\nif __name__ == '__main__':\n    l = [2, 1, 4, 3, 5, 6, 7, 8]\n    print(sort(l))",
    "def sort_list(list_to_sort, sort_by):\n    \"\"\"\n    >>> sort_list([[1, 3], [2, 4], [5, 6]], 2)\n    [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    new_list = []\n    for item in list_to_sort:\n        if sort_by < item[1]:\n            new_list.append(item)\n    new_list.sort(key=lambda x: x[1])\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i][0]\n    return new_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sort_list(a_list):\n    \"\"\"\n    Sort a list by sorting the second element in sublist.\n    \"\"\"\n    return sorted(a_list, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    a_list = [1, 3, 2, 5, 6, 4]\n    print sort_list(a_list)",
    "def sort_list(list_to_sort, sublist):\n    if list_to_sort == []:\n        return []\n    if list_to_sort[0] < list_to_sort[1]:\n        return sort_list(list_to_sort[1:], sublist)\n    else:\n        return sort_list(list_to_sort[1:], sublist)",
    "def sort_list(lst):\n    if len(lst) < 2:\n        return lst\n    else:\n        return sort_list(lst[:2]) + lst[2:] + sort_list(lst[:2])\n\nif __name__ == '__main__':\n    lst = [3,2,1]\n    print(sort_list(lst))",
    "def sort_list(list_to_sort):\n    return sorted(list_to_sort, key=lambda x: x[1])\n\n# test cases\ntest_list = [\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 1, 2],\n    [3, 2, 1],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 1, 2],\n    [3, 2, 1]\n]\n\ntest_list_sorted = [\n    [1, 2, 3],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 2, 1],\n    [2, 1, 3],\n    [1, 2, 3]\n]\n\nif __name__ == '__main__':\n    print(sort_list(test_list))\n    print(sort_list(test_list_sorted))",
    "#!/usr/bin/env python\n\ndef sort_list(list_to_sort):\n    list_to_sort.sort(key=lambda x: x[1])\n    return list_to_sort\n\n\ndef main():\n    print sort_list([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n\n\nif __name__ == '__main__':\n    main()",
    "import random\n\ndef sort_list_by_second(l):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \n    Example\n    >>> l = [5, 6, 3, 1, 4]\n    >>> sort_list_by_second(l)\n    [1, 3, 4, 5, 6]\n    \"\"\"\n    return sorted(l, key=lambda x: l[1][x])\n\ndef test():\n    l = [5, 6, 3, 1, 4]\n    print(sort_list_by_second(l))\n    print(random.choice(l))\n    print(random.choice(l))\n    print(random.choice(l))\n    print(random.choice(l))\n    print(random.choice(l))\n\nif __name__ == '__main__':\n    test()",
    "# sort a list using a function\n# the function should take a list and a sublist as arguments\n# the sublist should be the second element in the list\n# return the sorted list\ndef sort(lst, sublist):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n# test cases\ntest_list = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'a', 'b'],\n    ['c', 'a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],",
    "import random\n\ndef sort(nums, sublist):\n    if len(sublist) == 1:\n        return [sublist[0]] + sorted(nums)\n    else:\n        return sort(sorted(nums, key=lambda x: sublist[1]), sublist[0]) + [sublist[1]] + sort(sorted(nums, key=lambda x: sublist[1]), sublist[0])\n\ndef test_sort(nums, sublist):\n    print(sort(nums, sublist))\n\nif __name__ == '__main__':\n    nums = [1, 3, 5, 2, 4, 6]\n    sublist = [5, 2]\n    test_sort(nums, sublist)",
    "def sort(lst, sublist):\n    \"\"\"\n    lst: a list to be sorted\n    sublist: a list of integers, representing the second element of the sublist\n    \"\"\"\n\n    # make sure sublist is not empty\n    if len(sublist) == 0:\n        return lst\n\n    # make sure sublist is not empty\n    if len(sublist) == 1:\n        return lst\n\n    # sort the sublist\n    sorted_sublist = sorted(sublist)\n\n    # make sure sublist is not empty\n    if len(sorted_sublist) == 1:\n        return lst\n\n    # sort the list\n    return sorted(lst, key=lambda x: sorted_sublist.index(x[1]))",
    "def sort_list(list_to_sort, second_element_of_sublist):\n    \"\"\"\n    Sort a list according to the second element of sublist.\n    :param list_to_sort: A list to sort.\n    :param second_element_of_sublist: The second element of sublist.\n    :return: sorted_list: The sorted list.\n    \"\"\"\n    sorted_list = sorted(list_to_sort, key=lambda x: x[1])\n    sorted_list = sorted_list[::-1]\n    sorted_list = [x for x in sorted_list if x[1] == second_element_of_sublist]\n    return sorted_list\n\nif __name__ == \"__main__\":\n    a_list = [1, 2, 3, 4, 5, 6, 7]\n    second_element_of_sublist = 6\n    print(sort_list(a_list, second_element_of_sublist))",
    "# Example\n# sort_list([1, 3, 2, 4, 5], 2) -> [1, 2, 3, 4, 5]\n\n# Returns a sorted list\n# def sort_list(list_to_sort, key):\n\n# Example\n# sort_list([1, 3, 2, 4, 5], 2) -> [1, 2, 3, 4, 5]\n\n# Returns a sorted list\ndef sort_list(list_to_sort, key):\n    return sorted(list_to_sort, key=key)\n\n# Returns a sorted list\ndef sort_list_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=True)\n\n# Returns a sorted list\ndef sort_list_random(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=False)\n\n# Returns a sorted list\ndef sort_list_random_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=True)\n\n# Returns a sorted list\ndef sort_list_random_reverse_random(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=False)\n\n# Returns a sorted list\ndef sort_list_random_reverse_random_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=True)\n\n# Returns a sorted list\ndef sort_list_random_reverse_reverse_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=False)\n\n# Returns a sorted list\ndef sort_list_random_reverse_reverse_reverse_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=True)\n\n# Returns a sorted list\ndef sort_list_random_reverse_reverse_reverse_reverse_reverse(list_to_sort, key):\n    return sorted(list_to_sort, key=key, reverse=False)\n\n# Returns a sorted list\ndef sort_list_random_",
    "def sort_list(lst):\n    \"\"\"\n    :param lst: List to be sorted.\n    :return: Sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef main():\n    \"\"\"\n    >>> sort_list([[1, 2], [3, 4, 5], [6, 7, 8]])\n    [[1, 2], [6, 7, 8], [3, 4, 5]]\n    \"\"\"\n    print(sort_list([[1, 2], [3, 4, 5], [6, 7, 8]]))\n\nif __name__ == '__main__':\n    main()",
    "def sort_list(list):\n    list.sort(key=lambda x: x[1])\n    return list\n\nif __name__ == '__main__':\n    a = [1,3,2,5,4]\n    print(sort_list(a))",
    "def sort_list_by_second_element(mylist):\n    \"\"\"\n    Sort a list by second element in sublist.\n    \"\"\"\n    for i in range(len(mylist)):\n        for j in range(len(mylist)-1):\n            if mylist[j][1] > mylist[j+1][1]:\n                mylist[j], mylist[j+1] = mylist[j+1], mylist[j]\n    return mylist\n\n\nmylist = [ [1, 2], [3, 4], [5, 6], [7, 8], [9, 10] ]\n\n#print sort_list_by_second_element(mylist)\n\nimport random\n\ndef random_list(n):\n    \"\"\"\n    Generate a random list of size n.\n    \"\"\"\n    return [random.randint(0, 100) for _ in range(n)]\n\nprint random_list(3)\n\ndef sort_list_by_second_element_random(mylist):\n    \"\"\"\n    Sort a list by second element in sublist.\n    \"\"\"\n    for i in range(len(mylist)):\n        for j in range(len(mylist)-1):\n            if mylist[j][1] > mylist[j+1][1]:\n                mylist[j], mylist[j+1] = mylist[j+1], mylist[j]\n    return mylist\n\nprint sort_list_by_second_element_random(random_list(3))",
    "# TODO:\n#  1. use a sorted list for the input list\n#  2. use a dict for the output list\n#  3. use a set for the output list\n\n# TODO:\n#  1. change the input list into a sorted list\n#  2. change the output list into a sorted list\n#  3. remove the second element from the sublist\n\n# TODO:\n#  1. check the output list is sorted\n\n# TODO:\n#  1. write a function to sort the input list\n#  2. write a function to sort the output list\n\n\ndef sort_list(list):\n    \"\"\"\n    Sort the input list according to the second element in sublist.\n    \"\"\"\n    # TODO: change the input list into a sorted list\n    # TODO: check the output list is sorted\n    # TODO: write a function to sort the input list\n    # TODO: write a function to sort the output list\n\n    return list\n\n\ndef sort_list_2(list):\n    \"\"\"\n    Sort the input list according to the second element in sublist.\n    \"\"\"\n    # TODO: change the input list into a sorted list\n    # TODO: check the output list is sorted\n    # TODO: write a function to sort the input list\n    # TODO: write a function to sort the output list\n\n    return list\n\n\nif __name__ == '__main__':\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO: write a test function\n    # TODO:",
    "def sort_list(list_to_sort):\n    \"\"\"Sort a list according to the second element in sublist.\"\"\"\n    sorted_list = sorted(list_to_sort, key=lambda x: x[1])\n    return sorted_list\n\n# Test Cases\ntest_cases = [\n    (\n        [[1, 2], [3, 4]],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4]\n    ),\n    (\n        [],\n        [],\n        [],\n        []\n    ),\n    (\n        [1],\n        [1],\n        [1],\n        [1]\n    ),\n    (\n        [1, 2],\n        [2, 1],\n        [2, 1],\n        [1, 2]\n    ),\n    (\n        [1, 2, 3, 4, 5],\n        [2, 1, 4, 3, 5],\n        [2, 1, 4, 3, 5],\n        [1, 2, 3, 4, 5]\n    ),\n]\n\nfor case in test_cases:\n    print(f\"Input: {case[0]}\")\n    print(f\"Expected: {case[1]}\")\n    print(f\"Actual: {sort_list(case[0])}\")\n    print()",
    "#!/usr/bin/env python\n\nimport sys\n\ndef sort_list(lst):\n    \"\"\"\n    lst is a list of tuples.\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i][1] = lst[i][0]\n        for j in range(len(lst) - i - 1):\n            if lst[j][1] > lst[j+1][1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    lst = []\n    with open(sys.argv[1], 'r') as f:\n        for line in f:\n            lst.append(line.strip().split())\n    lst = sort_list(lst)\n    with open(sys.argv[2], 'w') as f:\n        for line in lst:\n            f.write(' '.join(line) + '\\n')\n\nif __name__ == '__main__':\n    main()",
    "# sort_list_by_second([1,2,3,4,5,6,7,8,9], [4,7,1,9,5,3,2,6,8])\n# sort_list_by_second([1,2,3,4,5,6,7,8,9], [9,1,2,3,4,5,6,7,8])\n# sort_list_by_second([1,2,3,4,5,6,7,8,9], [5,4,7,6,3,8,2,1,9])\n\ndef sort_list_by_second(list, sublist):\n    \"\"\"\n    :type list: List[int]\n    :type sublist: List[int]\n    :rtype: void Do not return anything, modify list in-place instead.\n    \"\"\"\n    for i in range(0, len(sublist)):\n        idx = sublist[i]\n        while idx in sublist:\n            sublist.remove(idx)\n            idx = sublist[i]\n        sublist.append(idx)\n    for i in range(0, len(sublist)):\n        sublist[i] = list[sublist[i]]",
    "def sort_list(l):\n    return sorted(l, key=lambda x: x[1])\n\nprint sort_list([[1, 3], [2, 4], [1, 2]])",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        while dummy.next:\n            p = dummy.next\n            while p.next and p.next.next:\n                if p.next.next.val < p.next.val:\n                    p.next.next, p.next = p.next, p.next.next\n                else:\n                    p = p.next\n            dummy.next = p.next\n        return dummy.next\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print solution.sortList(head)",
    "import random\n\ndef sort(data):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \"\"\"\n    return sorted(data, key=lambda x: x[1])\n\ndef sort_recursive(data):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \"\"\"\n    def sort_helper(data, index):\n        if index >= len(data):\n            return\n        if index == 0:\n            sorted_list = sorted(data[index], key=lambda x: x[1])\n        else:\n            left_data = data[:index]\n            right_data = data[index+1:]\n            sorted_list = sort_helper(left_data, index) + [data[index]] + sort_helper(right_data, index)\n        data[index] = sorted_list[0]\n        return sorted_list\n\n    return sort_helper(data, 0)\n\ndef main():\n    data = [\n        [1, \"a\"],\n        [2, \"b\"],\n        [3, \"c\"],\n        [4, \"d\"],\n        [5, \"e\"],\n        [6, \"f\"],\n        [7, \"g\"],\n        [8, \"h\"],\n        [9, \"i\"],\n        [10, \"j\"],\n        [11, \"k\"],\n        [12, \"l\"],\n        [13, \"m\"],\n        [14, \"n\"],\n        [15, \"o\"],\n        [16, \"p\"],\n        [17, \"q\"],\n        [18, \"r\"],\n        [19, \"s\"],\n        [20, \"t\"],\n        [21, \"u\"],\n        [22, \"v\"],\n        [23, \"w\"],\n        [24, \"x\"],\n        [25, \"y\"],\n        [26, \"z\"],\n    ]\n    sorted_data = sort(data)\n    print(sorted_data)\n\n    sorted_data = sort_recursive(data)\n    print(sorted_data)\n\nif __name__ == \"__main__\":\n    main()",
    "def sortList(listToSort):\n    #Write your code here\n    #listToSort is a list of lists. Each sublist is a list of numbers.\n    #For example, listToSort = [[1,2],[3,4],[5,6]]\n    #Your function should return a list of lists that is the same as listToSort.\n    #For example, the output should be [[1,2],[3,4],[5,6]]\n    #However, if the second element in each sublist is not in ascending order, you should sort the list first.\n    #For example, listToSort = [[1,3],[3,4],[5,2]]\n    #The output should be [[1,3],[3,4],[5,2]]\n    #Hint: use a while loop\n    pass",
    "def sort(l):\n    for i in range(len(l)):\n        for j in range(len(l)-i-1):\n            if l[j][1] > l[j+1][1]:\n                l[j],l[j+1] = l[j+1],l[j]\n    return l\n\ndef sort2(l):\n    l.sort(key=lambda x: x[1])\n    return l\n\ndef sort3(l):\n    for i in range(len(l)):\n        l[i] = l[i][0]\n    l.sort()\n    return l\n\ndef sort4(l):\n    l.sort(key=lambda x: x[1])\n    return l\n\ndef sort5(l):\n    l.sort(key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort6(l):\n    l.sort(reverse=True)\n    return l\n\ndef sort7(l):\n    l.sort(key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort8(l):\n    l.sort(reverse=True,key=lambda x: x[1])\n    return l\n\ndef sort9(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort10(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort11(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort12(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort13(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort14(l):\n    l.sort(reverse=True,key=lambda x: x[1],reverse=True)\n    return l\n\ndef sort15(l):\n    l.",
    "class Solution:\n    # @param head, a list node\n    # @return nothing\n    def sortList(self, head):\n        if not head:\n            return\n        # store the second element in sublist\n        current = head\n        while current.next:\n            current = current.next\n            # if the second element of the current sublist is larger than the first element in the head,\n            # replace the first element with the second element\n            if current.next and current.next.val > current.val:\n                current.val, current.next.val = current.next.val, current.val\n                current = current.next\n        # put the first element at the head\n        head.val = current.val\n        # sort the sublist\n        self.sortList(head.next)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    l = [1, 5, 6, 4, 3, 2]\n    print sol.sortList(l)",
    "def sort(lst, sublist):\n    \"\"\"\n    >>> sort([[1,2,3], [3,2,1], [1,3,2]], [2,1])\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3]]\n    \"\"\"\n    lst.sort(key=lambda x: x[sublist[0]])\n    return lst\n\nprint(sort([[1,2,3], [3,2,1], [1,3,2]], [2,1]))",
    "def sort_list(list_, index):\n    sorted_list = []\n    for i in range(len(list_)):\n        if list_[i][index] < list_[i][1 - index]:\n            sorted_list.append(list_[i])\n        else:\n            sorted_list.append(list_[i][1 - index])\n    return sorted_list\n\ndef main():\n    print(sort_list([[5, 4, 3, 2, 1], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0]], 1))\n    print(sort_list([[5, 4, 3, 2, 1], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0]], 2))\n    print(sort_list([[5, 4, 3, 2, 1], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0]], 0))\n    print(sort_list([[5, 4, 3, 2, 1], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0]], 3))\n\nif __name__ == \"__main__\":\n    main()",
    "def sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\ndef sort2(lst):\n    lst.sort(key=lambda x: x[0])\n    return lst\n\ndef sort3(lst):\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst\n\ndef sort4(lst):\n    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst\n\ndef sort5(lst):\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst\n\ndef sort6(lst):\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst\n\ndef sort7(lst):\n    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst\n\ndef sort8(lst):\n    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst\n\ndef sort9(lst):\n    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst\n\ndef sort10(lst):\n    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst\n\nif __name__ == '__main__':\n    lst = [('a', 1), ('b', 2), ('c', 3)]\n    print(sort(lst))\n    print(sort2(lst))\n    print(sort3(lst))\n    print(sort4(lst))\n    print(sort5(lst))\n    print(sort6(lst))\n    print(sort7(lst))\n    print(sort8(lst))\n    print(sort9(lst))\n    print(sort10(lst))",
    "def sort_list(list_):\n    list_ = list(list_)\n    for i in range(len(list_)):\n        list_[i] = list_[i][1]\n    list_.sort()\n    for i in range(len(list_)):\n        list_[i] = list_[i][0]\n    return list_\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sort_list(list_)",
    "def sort(lst):\n    if len(lst) <= 1:\n        return lst\n    sorted_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[j][1] < lst[i][1]:\n                sorted_list.append(lst[j])\n            else:\n                break\n    sorted_list = sorted(sorted_list, key=lambda x: x[1])\n    for i in range(len(sorted_list)):\n        sorted_list[i] = sorted_list[i][0]\n    return sorted_list\n\nif __name__ == '__main__':\n    lst = [('a', 2), ('b', 1), ('c', 2), ('d', 3), ('e', 5), ('f', 4)]\n    sorted_list = sort(lst)\n    for i in range(len(sorted_list)):\n        print sorted_list[i][0]",
    "def sort_list(lst):\n    lst.sort(key=lambda x: x[1])\n\ndef main():\n    lst = [1,2,3,4,5]\n    sort_list(lst)\n    print lst\n\nif __name__ == '__main__':\n    main()",
    "# Write your code here\n\ndef sublist_sort(lst):\n    sublist = lst[1:]\n    sublist.sort()\n    lst[0] = sublist[0]\n    return lst\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print(sublist_sort(lst))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return a list of integers\n    def sortColors(self, nums):\n        nums.sort(key=lambda x: x[1])\n        return nums\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [ [0,1], [0,2], [1,2], [2,2], [2,1], [2,0]]\n    print s.sortColors(nums)",
    "#!/usr/bin/env python\n\ndef sort(lst):\n    return sorted(lst, key=lambda x: lst[1])\n\nif __name__ == '__main__':\n    lst = [1, 3, 2, 4, 5]\n    print sort(lst)",
    "def sort_list(lst):\n    \"\"\"\n    Sort a list using the second element in sublist.\n    \"\"\"\n\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    lst = [('a', 1), ('c', 3), ('b', 2), ('d', 4)]\n    sort_list(lst)\n    print lst",
    "def sort_list(lst, sublist):\n    if sublist[0] < sublist[1]:\n        lst.sort(key=lambda x: x[sublist[1]])\n    else:\n        lst.sort(key=lambda x: x[sublist[0]])\n    return lst\n\nif __name__ == '__main__':\n    lst = [ [1, 2], [3, 4], [5, 6], [7, 8], [9, 10] ]\n    sublist = [1, 2]\n    sort_list(lst, sublist)\n    print lst",
    "def sort(l):\n    # write your code here\n    l.sort(key=lambda x: x[1])\n    return l\n\n# Test\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6]\n    l = sort(l)\n    print(l)\n\nif __name__ == '__main__':\n    main()",
    "def sort_list(lst):\n    if len(lst) == 0:\n        return lst\n\n    sort_list_helper(lst, 0, len(lst) - 1)\n\n    return lst\n\n\ndef sort_list_helper(lst, start, end):\n    if start >= end:\n        return\n\n    mid = (start + end) / 2\n    m = lst[mid]\n\n    if m > lst[start]:\n        sort_list_helper(lst, start, mid - 1)\n\n    if m < lst[end]:\n        sort_list_helper(lst, mid + 1, end)\n\n    lst[start], lst[mid] = lst[mid], lst[start]\n    sort_list_helper(lst, start, mid - 1)",
    "import sys\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def sortList(self, head):\n        if not head or not head.next:\n            return head\n\n        pre = head\n        cur = head.next\n        while cur.next:\n            pre = pre.next\n            cur = cur.next\n            while cur and cur.next and cur.next.val < cur.val:\n                cur = cur.next\n            pre.next = cur.next\n            cur.next = pre\n\n        return head\n\nif __name__ == '__main__':\n    sol = Solution()\n\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n\n    sol.sortList(head)\n    while head:\n        print head.val,\n        head = head.next",
    "# Function to sort a list\ndef sort_list(a_list):\n    for i in range(len(a_list)):\n        for j in range(len(a_list)-i):\n            if a_list[j][1] > a_list[j+1][1]:\n                a_list[j], a_list[j+1] = a_list[j+1], a_list[j]\n    return a_list\n\n\n# Test\nprint(sort_list([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(sort_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\nprint(sort_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\nprint(sort_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]))",
    "def sort_list(alist):\n    return sorted(alist, key=lambda x: x[1])\n\nalist = [('a', 2), ('b', 3), ('c', 1), ('d', 4), ('e', 5), ('f', 6), ('g', 7)]\n\nprint(sort_list(alist))",
    "def sort_by_second(list):\n    return sorted(list, key=lambda x: x[1])\n\nprint(sort_by_second([[1,3], [1,2], [1,3]]))",
    "def sort_list(lst):\n    # Write your code here\n    lst.sort(key=lambda x: x[1])\n    return lst\n\ndef main():\n    lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n    sort_list(lst)\n    print lst\n\nif __name__ == '__main__':\n    main()",
    "def sort_list(alist):\n    # Write your code here\n    temp = alist[:]\n    temp.sort(key=lambda x: x[1])\n    return temp\n\ndef test():\n    alist = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n    alist = sort_list(alist)\n    for item in alist:\n        print(item)\n\ntest()",
    "def sort_list_by_second(list):\n    \"\"\"\n    >>> sort_list_by_second([3,2,1])\n    [1, 2, 3]\n    \"\"\"\n    # Sort by the second element\n    list.sort(key=lambda x: x[1])\n    return list\n\ndef sort_list_by_second_recursive(list):\n    \"\"\"\n    >>> sort_list_by_second_recursive([3,2,1])\n    [1, 2, 3]\n    \"\"\"\n    # Sort by the second element\n    list.sort(key=lambda x: x[1], reverse=False)\n    return list\n\nif __name__ == \"__main__\":\n    print sort_list_by_second([3,2,1])\n    print sort_list_by_second_recursive([3,2,1])",
    "# Your sorting function will be called as the following\n#\n# def my_sort(self, a):\n#     return self.sort(a, 0, len(a) - 1)\n#\n# def sort(self, a, l, r):\n#     if l >= r:\n#         return a\n#     p = partition(a, l, r)\n#     sort(self, a, l, p - 1)\n#     sort(self, a, p + 1, r)\n#     return a\n#\n# def partition(self, a, l, r):\n#     pivot = a[r]\n#     i = l - 1\n#     for j in range(l, r):\n#         if a[j] <= pivot:\n#             i += 1\n#             a[i], a[j] = a[j], a[i]\n#     a[i+1], a[r] = a[r], a[i+1]\n#     return i + 1\n\nclass Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        nums.sort(key=lambda x: x)\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n\nclass Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        nums.sort(key=lambda x: x)\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n\nclass Solution(object):\n    def sortColors(self, nums):\n        \"\"\"",
    "# -*- coding: utf-8 -*-\n\nimport random\n\n\ndef bubble_sort(list):\n    \"\"\"\n    Sort a list using bubble sort.\n    \"\"\"\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1, i, -1):\n            if list[j] < list[j - 1]:\n                list[j], list[j - 1] = list[j - 1], list[j]\n\n    return list\n\n\ndef selection_sort(list):\n    \"\"\"\n    Sort a list using selection sort.\n    \"\"\"\n    for i in range(len(list)):\n        min_index = i\n        for j in range(i + 1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n\n            if list[i] < list[min_index]:\n                list[i], list[min_index] = list[min_index], list[i]\n\n    return list\n\n\ndef insertion_sort(list):\n    \"\"\"\n    Sort a list using insertion sort.\n    \"\"\"\n    for i in range(1, len(list)):\n        j = i\n        while j > 0 and list[j - 1] > list[j]:\n            list[j], list[j - 1] = list[j - 1], list[j]\n            j -= 1\n\n    return list\n\n\ndef quick_sort(list):\n    \"\"\"\n    Sort a list using quick sort.\n    \"\"\"\n    if len(list) <= 1:\n        return list\n\n    pivot = list[len(list) // 2]\n    left = [x for x in list if x < pivot]\n    right = [x for x in list if x >= pivot]\n\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n\ndef test_bubble_sort():\n    \"\"\"\n    Test the bubble sort.\n    \"\"\"\n    random.seed(0)\n    list = [random.randrange(1, 100) for _ in range(100)]\n    print(bubble_sort(list))\n\n\ndef test_selection_sort():\n    \"\"\"\n    Test the",
    "def sort_list(lst):\n    \"\"\"\n    lst: a list\n    return: sorted list\n    \"\"\"\n    # TODO: write your code here\n    if not lst:\n        return lst\n    else:\n        return sorted(lst, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    lst = [1,2,3,4,5,6,7,8,9]\n    print(sort_list(lst))",
    "def sort(x):\n    y = []\n    for i in x:\n        y.append(i)\n    z = y[:]\n    for i in range(0, len(y)):\n        for j in range(len(y) - 1):\n            if y[j][1] > y[j + 1][1]:\n                y[j], y[j + 1] = y[j + 1], y[j]\n    return y\n\n\ndef sort_test():\n    l = [1, 2, 3, 4]\n    print(sort(l))\n\n\nif __name__ == \"__main__\":\n    sort_test()",
    "def sort(list_to_sort, sublist):\n    list_to_sort.sort(key=lambda x: x[1])\n    return list_to_sort\n\nif __name__ == \"__main__\":\n    l = [ [1,2], [3,4], [2,4] ]\n    l2 = [ [1,2], [2,4], [3,4] ]\n    print sort(l, l2)",
    "def sort_list(list_to_sort):\n    # write your code here\n    return sorted(list_to_sort, key=lambda x: x[1])",
    "def sort_by_second(lst):\n    \"\"\"\n    sort_by_second(lst)\n    sort a list according to the second element in sublist.\n    :param lst: list\n    :return: sorted list\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n\n    sorted_list = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(len(lst)):\n            if i!= j:\n                sublist.append(lst[j])\n        sorted_list.append(sublist)\n\n    sorted_list = sorted(sorted_list, key=lambda x: x[1])\n\n    for i in range(len(sorted_list)):\n        sorted_list[i] = sorted_list[i][0]\n\n    return sorted_list\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print sort_by_second(lst)\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print sort_by_second(lst)",
    "def sort_list(lst, sublist):\n    \"\"\"\n    Arguments:\n        lst: a list\n        sublist: a list of two elements, the first element is used to sort\n    Returns:\n        a list, which is sorted according to the second element in sublist\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1], reverse=True)\n\n\n# Your Solution\n\ndef sort_list(lst, sublist):\n    \"\"\"\n    Arguments:\n        lst: a list\n        sublist: a list of two elements, the first element is used to sort\n    Returns:\n        a list, which is sorted according to the second element in sublist\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1], reverse=True)",
    "def sort(lst, sublist):\n    new_lst = sorted(lst, key=lambda x: sublist[1])\n    return new_lst\n\n#test cases\na = [1,2,3,4]\nb = [3,1,4,2]\n\nprint sort(a, b)",
    "import sys\n\ndef sort(lst):\n    # Your code here\n    lst.sort(key=lambda x: x[1])\n    return lst\n\ndef main():\n    if (len(sys.argv) < 2):\n        print \"Usage: %s <input file>\" % (sys.argv[0])\n        return\n    lst = []\n    with open(sys.argv[1]) as f:\n        for line in f:\n            lst.append(line.strip().split(\"\\t\"))\n    sort(lst)\n    with open(\"output.txt\", \"w\") as f:\n        for line in lst:\n            f.write(\"%s\\t%s\\n\" % (line[0], line[1]))\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next:\n            curr = prev.next\n            prev.next = curr.next\n            curr.next = prev\n            prev = curr\n        prev.next = None\n        return dummy.next",
    "def sort(lst):\n    \"\"\"\n    Sort the list according to the second element in sublist.\n    \"\"\"\n    for i in range(len(lst)):\n        small = 0\n        for j in range(len(lst) - 1):\n            if lst[j][1] < lst[j+1][1]:\n                small = j\n        lst[small], lst[j] = lst[j], lst[small]\n    return lst",
    "# write your code here\n\ndef bubble_sort(list):\n    \"\"\"\n    bubble_sort(list)\n    \n    Sort a list according to the second element in sublist.\n    \n    Input:\n    list = [1,2,3,4,5]\n    \n    Output:\n    list = [1,2,3,4,5]\n    \n    Example:\n    \n    Input:\n    list = [1,2,3,4,5]\n    \n    Output:\n    list = [1,2,3,4,5]\n    \"\"\"\n    for i in range(len(list)-1):\n        for j in range(len(list)-1):\n            if list[j+1] < list[j]:\n                list[j], list[j+1] = list[j+1], list[j]\n                \n    return list\n\nif __name__ == '__main__':\n    list = [1,2,3,4,5]\n    \n    print(bubble_sort(list))",
    "def sort_list(list_to_sort, sublist):\n    for i in range(0, len(list_to_sort)):\n        for j in range(0, len(sublist)):\n            if sublist[j] < list_to_sort[i]:\n                list_to_sort.insert(i, list_to_sort.pop(i))\n                break\n    return list_to_sort\n\n# Test cases\n# [[1,2],[2,3],[4,5]]\n# [[1,2],[2,3],[4,5],[6,7]]\n# [[1,2],[3,4],[5,6]]\n\nlist_to_sort = [[1,2],[2,3],[4,5]]\nsublist = [[2,3],[4,5],[6,7]]\n\nprint(sort_list(list_to_sort, sublist))\n\nlist_to_sort = [[1,2],[2,3],[4,5]]\nsublist = [[2,3],[4,5],[6,7]]\n\nprint(sort_list(list_to_sort, sublist))\n\nlist_to_sort = [[1,2],[3,4],[5,6]]\nsublist = [[2,3],[4,5],[6,7]]\n\nprint(sort_list(list_to_sort, sublist))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    \"\"\"\n    @param nums: A list of integers\n    @return: The sorted list\n    \"\"\"\n    def sortList(self, nums):\n        # write your code here\n        length = len(nums)\n        if length < 2:\n            return nums\n        pivot = nums[0]\n        left = [nums[i] for i in range(length) if nums[i] < pivot]\n        right = [nums[i] for i in range(length) if nums[i] > pivot]\n        return self.sortList(left) + [pivot] + self.sortList(right)\n\nif __name__ == \"__main__\":\n    nums = [2,5,1,6,4]\n    solution = Solution()\n    print solution.sortList(nums)",
    "def sort(list):\n    \"\"\"\n    list: list\n    return: sorted list\n    \"\"\"\n    return sorted(list, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort([[2, 5], [1, 6], [3, 7]]) == [[1, 6], [2, 5], [3, 7]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6]]) == [[1, 6], [2, 5], [3, 7]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6], [4, 8]]) == [[1, 6], [2, 5], [3, 7], [4, 8]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6], [4, 8], [9, 10]]) == [[1, 6], [2, 5], [3, 7], [4, 8], [9, 10]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6], [4, 8], [9, 10], [11, 12]]) == [[1, 6], [2, 5], [3, 7], [4, 8], [9, 10], [11, 12]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6], [4, 8], [9, 10], [11, 12], [13, 14]]) == [[1, 6], [2, 5], [3, 7], [4, 8], [9, 10], [11, 12], [13, 14]], \"Example\"\n    assert sort([[2, 5], [3, 7], [1, 6], [4, 8], [9, 10], [11, 12], [13, 14], [15, 16]]) == [[1, 6], [2, 5], [3, 7], [4, 8], [9, 10], [11, 12], [13, 14], [15, 16]], \"Example\"",
    "def sort_list(lst):\n    if len(lst) == 1:\n        return lst\n    sublist = lst[0]\n    new_list = sort_list(lst[1:])\n    for i in range(len(lst)-1):\n        if sublist < lst[i+1]:\n            lst = new_list\n            new_list = sort_list(lst[1:])\n            break\n    return lst\n\ndef main():\n    lst = [2, 1, 4, 3, 5, 7, 6, 8]\n    print(lst)\n    print(\"Sorted list: \")\n    print(sort_list(lst))\n\nif __name__ == '__main__':\n    main()",
    "def sublist_sort(list, sublist):\n    for index in range(len(list)):\n        if list[index][1] < sublist[0]:\n            return list\n        elif list[index][1] == sublist[0]:\n            if sublist[1] < list[index][2]:\n                return list\n            else:\n                return list[:index] + list[index + 1:]\n        else:\n            return list[:index] + list[index + 1:]\n\nif __name__ == \"__main__\":\n    list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n    sublist = [('b', 2), ('a', 1), ('d', 4), ('c', 3), ('e', 5)]\n    print sublist_sort(list, sublist)",
    "def sort_list_by_sublist(list_to_sort):\n    \"\"\"\n    Input:\n        a list to be sorted\n    Output:\n        a sorted list\n    \"\"\"\n    sublist_to_sort = list_to_sort[0]\n    list_to_sort.sort(key=lambda x: x[1])\n    return list_to_sort\n\nif __name__ == '__main__':\n    l = [('a', 1), ('c', 3), ('b', 2)]\n    l2 = [('b', 2), ('c', 3), ('a', 1)]\n    print sort_list_by_sublist(l)\n    print sort_list_by_sublist(l2)",
    "class Solution:\n    # @param {ListNode} head\n    # @return {void} Do not return anything, modify head in-place instead.\n    def sortList(self, head):\n        if not head or not head.next:\n            return\n        node = head\n        pre = None\n        while node:\n            next = node.next\n            if not next:\n                break\n            if next.val > node.val:\n                node.next = next.next\n                pre.next = node\n                node = next\n            else:\n                pre = node\n                node = next\n        if node:\n            pre.next = None\n        self.sortList(head)\n\nif __name__ == '__main__':\n    # head = ListNode(1)\n    # head.next = ListNode(4)\n    # head.next.next = ListNode(2)\n    # head.next.next.next = ListNode(3)\n    head = ListNode(4)\n    head.next = ListNode(2)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(3)\n    Solution().sortList(head)\n    while head:\n        print(head.val)\n        head = head.next",
    "def sort_list(lst, cmp_func):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    Input: list, list, function\n    Output: None\n    \"\"\"\n    return sorted(lst, key=cmp_func)\n\n\ndef test_sort_list():\n    \"\"\"\n    Test sort_list function.\n    \"\"\"\n    lst = [1, 3, 2, 4, 5, 6]\n    cmp_func = lambda a, b: a - b\n    assert sort_list(lst, cmp_func) == sorted(lst, key=cmp_func)\n\nif __name__ == '__main__':\n    test_sort_list()",
    "def sort_list(lst):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \"\"\"\n    \n    return sorted(lst, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    lst = [('a',1),('b',2),('c',3),('d',4),('e',5),('f',6)]\n    print(sort_list(lst))",
    "def sort_list(lst, sublist):\n    \"\"\"\n    :type lst: List\n    :type sublist: List\n    :rtype: List\n    \"\"\"\n    if lst and sublist:\n        for i in range(len(lst)):\n            for j in range(len(sublist)):\n                if lst[i] < sublist[j]:\n                    lst.insert(i, lst.pop(i+1))\n                    break\n    return lst\n\nif __name__ == '__main__':\n    lst = [2,3,4,5,6,7,8,9,10,11,12]\n    sublist = [4,1,3,2,5,6,7,8,9,10,11,12]\n    lst2 = sort_list(lst, sublist)\n    for i in lst:\n        print i\n    print lst2",
    "def sort(mylist, sublist):\n    temp = []\n    for i in mylist:\n        if i == sublist[0]:\n            temp.append(i)\n    for i in sublist[1:]:\n        temp.append(i)\n    return temp\n\nprint sort([3, 2, 1, 4, 5, 6], [2, 1, 3, 4, 5, 6])",
    "# list = [1, 2, 3, 4]\n# list = [1, 3, 2, 4]\n# list = [1, 2, 3, 4, 5]\n# list = [1, 2, 3, 4, 5, 6]\n# list = [1, 2, 3, 4, 5, 6, 7]\n\ndef sort_by_second(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\nif __name__ == \"__main__\":\n    # print sort_by_second([1, 2, 3, 4, 5, 6, 7])\n    print sort_by_second([2, 1, 3, 4, 5, 6, 7])",
    "# You have to write the sort function.\n# The sort function should sort a list according to the second element in sublist.\n# You have to write the sort function.\ndef sort(alist):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    :param alist: list to be sorted\n    :return: sorted list\n    \"\"\"\n    # Your code here\n    return sorted(alist, key=lambda x: x[1])\n\n# Test cases\nalist = [1, 2, 3, 4, 5]\nalist = [1, 2, 3, 4, 5, 6]\nalist = [5, 1, 2, 3, 4, 6]\nalist = [6, 5, 1, 2, 3, 4]\nalist = [6, 5, 1, 2, 3, 4, 5]\nalist = [6, 5, 1, 2, 3, 4, 5, 6]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nalist = [6, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13",
    "def sort_list(L):\n    \"\"\"\n    Input:\n    L is a list.\n    Output:\n    L is sorted in ascending order.\n    \"\"\"\n    i = 0\n    j = len(L) - 1\n    while i < j:\n        while i < j and L[i][1] > L[j][1]:\n            j -= 1\n        while i < j and L[i][1] < L[j][1]:\n            i += 1\n        L[i], L[j] = L[j], L[i]\n    return L\n\nif __name__ == \"__main__\":\n    L = [(\"a\", \"c\"), (\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"a\"), (\"c\", \"b\")]\n    print(sort_list(L))",
    "def sort_list(alist):\n    \"\"\"\n    Sort a list by second element in sublist.\n    \"\"\"\n    \n    # The sublist is a list of tuples (first element, second element).\n    # The sort function sorts the first element of the tuple.\n    # The sort function is used to sort the second element of the tuple.\n    alist.sort(key=lambda tup: tup[1])\n    return alist",
    "def sort_list(list_to_sort, sublist):\n    list_to_sort.sort(key=lambda x: sublist[1](x))\n    return list_to_sort\n\nif __name__ == '__main__':\n    test_list = [1,3,2,4]\n    test_list_sort = sort_list(test_list, lambda x: x[1])\n    print(test_list_sort)",
    "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print \"usage: python sort_list.py [filename]\"\n        return\n    with open(sys.argv[1]) as f:\n        list_of_words = f.readlines()\n    list_of_words = [line.strip() for line in list_of_words]\n    list_of_words.sort(key=lambda x: x[1])\n    with open(sys.argv[1], \"w\") as f:\n        for line in list_of_words:\n            f.write(line + \"\\n\")\n\nif __name__ == '__main__':\n    main()",
    "def sort_list(lst):\n    \"\"\"\n    lst: list to be sorted\n    \"\"\"\n    # sort the list by second element in the sublist\n    lst.sort(key=lambda x: x[1])\n    return lst\n\ndef main():\n    lst = [2,3,1,4,5,6]\n    lst.sort()\n    print(lst)\n\nif __name__ == \"__main__\":\n    main()",
    "# Importing necessary modules\nfrom collections import defaultdict\n\n# Creating dictionary\nd = defaultdict(int)\n\n# Creating a list with values\nl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237",
    "def sort_list(lst):\n    for i in range(len(lst)):\n        if lst[i][1] < lst[i][0]:\n            lst[i] = (lst[i][0], lst[i][1])\n\n    return lst\n\n\nif __name__ == '__main__':\n    lst = [ [1,2,3], [2,3,4], [3,4,5], [5,6,7], [6,7,8], [7,8,9], [8,9,10], [9,10,11], [10,11,12], [11,12,13], [12,13,14], [13,14,15], [14,15,16], [15,16,17], [16,17,18], [17,18,19], [18,19,20], [19,20,21], [20,21,22], [21,22,23], [22,23,24], [23,24,25], [24,25,26], [25,26,27], [26,27,28], [27,28,29], [28,29,30], [29,30,31], [30,31,32], [31,32,33], [32,33,34], [33,34,35], [34,35,36], [35,36,37], [36,37,38], [37,38,39], [38,39,40], [39,40,41], [40,41,42], [41,42,43], [42,43,44], [43,44,45], [44,45,46], [45,46,47], [46,47,48], [47,48,49], [48,49,50], [49,50,51], [50,51,52], [51,52,53], [52,53,54], [53,54,55], [54,55,56], [55,56,57], [56,57,58], [57,58,59], [58,59,60], [59,60,61], [60,61,62], [61,62,63], [62,63,64",
    "def sort_list(lst,sublist):\n    '''\n    sort_list(lst,sublist)\n    \n    lst: a list to be sorted\n    sublist: a sublist of lst\n    '''\n    \n    # If sublist is empty, return the whole list\n    if sublist == []:\n        return lst\n    \n    # If sublist is a single element, just return the whole list\n    if sublist[0] == lst[0]:\n        return [lst[0]] + lst[1:]\n    \n    # Else, sort the sublist\n    return sort_list(lst[:sublist[0]],sublist[1:]) + lst[sublist[0]:]\n\ndef test_sort_list():\n    '''\n    Test sort_list\n    '''\n    assert sort_list([],[]).sort() == []\n    assert sort_list([1],[1]).sort() == [1]\n    assert sort_list([1,2],[2,1]).sort() == [1,2]\n    assert sort_list([1,3],[3,1]).sort() == [1,3]\n    assert sort_list([1,2,3],[3,2,1]).sort() == [1,3,2]\n    assert sort_list([1,2,3,4],[4,3,2,1]).sort() == [1,4,3,2]\n    assert sort_list([1,2,3,4,5],[5,4,3,2,1]).sort() == [1,5,4,3,2]\n    assert sort_list([1,2,3,4,5,6],[6,5,4,3,2,1]).sort() == [1,6,5,4,3,2]\n    assert sort_list([1,2,3,4,5,6,7],[7,6,5,4,3,2,1]).sort() == [1,7,6,5,4,3,2]\n    assert sort_list([1,2,3,4,5,6,7,8],[8",
    "# Example 1\n# [1,3,2]\n# sublist = [2,1,3]\n# return [1,2,3]\ndef sortList(self, data, sublist):\n    if sublist:\n        return data.sort(key=lambda x: x[1], reverse=True)\n    else:\n        return data\n\n# Example 2\n# [1,3,2,5,4]\n# sublist = [5,4,3,2,1]\n# return [1,2,3,4,5]\ndef sortList2(self, data, sublist):\n    if sublist:\n        return data.sort(key=lambda x: x[0], reverse=True)\n    else:\n        return data\n\n# Example 3\n# [1,3,2,5,4]\n# sublist = [2,1,3,5,4]\n# return [1,2,3,4,5]\ndef sortList3(self, data, sublist):\n    if sublist:\n        return data.sort(key=lambda x: x[1], reverse=True)\n    else:\n        return data\n\n# Example 4\n# [1,3,2,5,4]\n# sublist = [5,4,3,2,1]\n# return [1,2,3,4,5]\ndef sortList4(self, data, sublist):\n    if sublist:\n        return data.sort(key=lambda x: x[0], reverse=True)\n    else:\n        return data\n\n# Example 5\n# [1,3,2,5,4]\n# sublist = [2,1,3,5,4]\n# return [1,2,3,4,5]\ndef sortList5(self, data, sublist):\n    if sublist:\n        return data.sort(key=lambda x: x[1], reverse=True)\n    else:\n        return data\n\n# Example 6\n# [1,3,2,5,4]\n# sublist = [5,4,3,2,1]\n# return [1,2,3,4,5]\ndef sort",
    "def sort_list(lst):\n    \"\"\"\n    >>> lst = [2, 3, 1, 4, 5, 6, 7]\n    >>> sort_list(lst)\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j][1] < lst[i][1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\ndef main():\n    # your code goes here\n    lst = [3,1,5,2,7,4,6]\n    sort(lst)\n    print lst\n\nif __name__ == '__main__':\n    main()",
    "def sort_list(lst, i):\n    return lst[i]\n\ndef sort_list_recursive(lst, i):\n    if i >= len(lst) - 1:\n        return lst[i]\n    else:\n        if lst[i][0] < lst[i+1][0]:\n            return sort_list_recursive(lst[:i+1], i)\n        else:\n            return sort_list_recursive(lst[i+1:], i+1)\n\ndef sort_list_recursive2(lst, i):\n    if i >= len(lst) - 1:\n        return lst[i]\n    else:\n        if lst[i][0] < lst[i+1][0]:\n            return sort_list_recursive(lst[:i+1], i)\n        else:\n            return sort_list_recursive(lst[i+1:], i+1)\n\ndef sort_list_recursive3(lst, i):\n    if i >= len(lst) - 1:\n        return lst[i]\n    else:\n        if lst[i][0] < lst[i+1][0]:\n            return sort_list_recursive(lst[:i+1], i)\n        else:\n            return sort_list_recursive(lst[i+1:], i+1)\n\ndef sort_list_recursive4(lst, i):\n    if i >= len(lst) - 1:\n        return lst[i]\n    else:\n        if lst[i][0] < lst[i+1][0]:\n            return sort_list_recursive(lst[:i+1], i)\n        else:\n            return sort_list_recursive(lst[i+1:], i+1)\n\ndef sort_list_recursive5(lst, i):\n    if i >= len(lst) - 1:\n        return lst[i]\n    else:\n        if lst[i][0] < lst[i+1][0]:\n            return sort_",
    "#!/usr/bin/env python\n\n# sort_list.py\n# Purpose: Sort a list of numbers according to the second element in sublist.\n# Usage: python sort_list.py < input_file > sorted_file\n\n# Note: To sort a list of strings, use the python sort function.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted, the program will exit with an error message.\n\n# Note: The list is sorted in place.\n\n# Note: If the list is not sorted,",
    "def sortList(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    for i in range(len(list)):\n        j = i\n        while j > 0 and list[j-1] > list[j]:\n            list[j], list[j-1] = list[j-1], list[j]\n            j -= 1\n    return list\n\n# Your Solution",
    "def sort(list_, sublist):\n    \"\"\"\n    :type list_: List[int]\n    :type sublist: List[int]\n    :rtype: void Do not return anything, modify list in-place instead.\n    \"\"\"\n    for i in range(len(list_) - 1):\n        if sublist[0] > list_[i]:\n            list_.insert(i, list_[i])\n            list_.insert(i + 1, list_[i + 1])\n            list_[i + 1] = list_[i]\n        else:\n            list_.insert(i + 1, list_[i])\n            list_.insert(i, list_[i + 1])\n            list_[i] = list_[i + 1]\n\n# Test Cases\n# [[1,2,3,4,5], [1,2,3,5,4]]\n# [[1,2,3,4,5], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,5,4]]\n# [[1,2,3,5,4], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,5,4]]\n# [[1,2,3,5,4], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,4,5]]\n# [[1,2,3,5,4], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,5,4]]\n# [[1,2,3,4,5], [1,2,3,5,4]]\n# [[1,2,3,4,5], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1,2,3,4,5]]\n# [[1,2,3,4,5], [1",
    "import random\n\n\ndef sort_list(lst):\n    random.shuffle(lst)\n    sorted_list = sorted(lst, key=lambda x: x[1])\n    return sorted_list\n\n\ndef main():\n    lst = [\n        ('moo', 10),\n        ('foo', 1),\n        ('bar', 2),\n        ('foo', 2),\n        ('foo', 3),\n        ('foo', 4),\n        ('foo', 5),\n        ('foo', 6),\n        ('foo', 7),\n        ('foo', 8),\n        ('foo', 9),\n        ('foo', 10),\n        ('foo', 11),\n        ('foo', 12),\n        ('foo', 13),\n        ('foo', 14),\n        ('foo', 15),\n        ('foo', 16),\n        ('foo', 17),\n        ('foo', 18),\n        ('foo', 19),\n        ('foo', 20),\n        ('foo', 21),\n        ('foo', 22),\n        ('foo', 23),\n        ('foo', 24),\n        ('foo', 25),\n        ('foo', 26),\n        ('foo', 27),\n        ('foo', 28),\n        ('foo', 29),\n        ('foo', 30),\n        ('foo', 31),\n        ('foo', 32),\n        ('foo', 33),\n        ('foo', 34),\n        ('foo', 35),\n        ('foo', 36),\n        ('foo', 37),\n        ('foo', 38),\n        ('foo', 39),\n        ('foo', 40),\n        ('foo', 41),\n        ('foo', 42),\n        ('foo', 43),\n        ('foo', 44),\n        ('foo', 45),\n        ('foo', 46),\n        ('foo', 47),\n        ('foo', 48),\n        ('foo', 49),\n        ('foo', 50),\n        ('foo', 51),\n        ('foo', 52),\n        ('foo', 53),\n        ('foo', 54),\n        ('foo', 55),\n        ('foo', 56),\n        ('foo', 57),\n        ('foo', 58),\n        ('foo', 59),\n        ('foo', 60),\n        ('foo', 61),\n        ('foo', 62),",
    "import random\n\n\ndef sort_list_by_second(list_to_sort):\n    # write your code here\n    if not list_to_sort:\n        return list_to_sort\n\n    new_list = []\n    for item in list_to_sort:\n        if len(new_list) == 0:\n            new_list.append(item)\n        else:\n            if item < new_list[-1]:\n                new_list.append(item)\n            else:\n                random_index = random.randint(0, len(new_list) - 1)\n                new_list[random_index] = item\n                new_list.insert(random_index + 1, new_list.pop(random_index))\n\n    return new_list\n\n\nif __name__ == '__main__':\n    list_to_sort = [2, 5, 1, 4, 3, 6, 7, 8, 9]\n    print sort_list_by_second(list_to_sort)",
    "def sort_list(a_list):\n    \"\"\"\n    Sort a list a_list by second element of sublist.\n    \"\"\"\n\n    # Sort by second element of sublist\n    for i in range(len(a_list)):\n        for j in range(len(a_list) - i):\n            if a_list[j][1] > a_list[j+1][1]:\n                a_list[j], a_list[j+1] = a_list[j+1], a_list[j]\n\n    return a_list",
    "def sort(list):\n    list.sort(key=lambda x: x[1])\n    return list\n\ndef main():\n    print(sort([(1, 3), (2, 1), (5, 1)]))\n\nif __name__ == '__main__':\n    main()",
    "# Define the function\ndef sort_by_second(lst, sublist):\n    return sorted(lst, key=lambda x: x[1], reverse=True)\n\n# Test\nlst = [2, 3, 1, 4, 5, 6]\nsublist = [1, 4]\n\n# Sort\nsort_by_second(lst, sublist)",
    "def sort_list(lst):\n    new_list = []\n    for i in range(len(lst)):\n        if lst[i][1] < lst[i][0]:\n            new_list.append([lst[i][1], lst[i][0]])\n        else:\n            new_list.append(lst[i])\n    return new_list\n\n\ndef test():\n    assert sort_list([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [5, 6], [3, 4]]\n    assert sort_list([[5, 6], [1, 2], [3, 4]]) == [[5, 6], [1, 2], [3, 4]]\n    assert sort_list([[5, 6], [3, 4], [1, 2]]) == [[5, 6], [1, 2], [3, 4]]\n    assert sort_list([[5, 6], [3, 4], [1, 2], [5, 6]]) == [[1, 2], [5, 6], [3, 4], [5, 6]]\n\nif __name__ == '__main__':\n    test()",
    "# Write your code below\n\ndef sort_list(lst):\n    \"\"\"\n    Sort the list lst.\n\n    The first element of each sublist is the key.\n\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\ndef main():\n    lst = [1, 4, 3, 2]\n    print(sort_list(lst))\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}