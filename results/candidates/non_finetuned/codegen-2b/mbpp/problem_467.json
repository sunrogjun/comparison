{
  "problem": {
    "task_id": "MBPP/478",
    "prompt": "Write a function to remove lowercase substrings from a given string.",
    "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
    "test_list": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ],
    "challenge_test_list": [],
    "problem_id": 467
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://leetcode.com/problems/remove-all-lowercase-words/description/\n\nclass Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if len(str) <= 1:\n            return str\n        str = list(str)\n        for i in range(len(str)):\n            if str[i] in ['a', 'e', 'i', 'o', 'u']:\n                str[i] = str[i].lower()\n        return ''.join(str)",
    "# https://www.hackerrank.com/challenges/remove-lowercase-from-string/problem\n# https://www.codewars.com/kata/remove-lowercase-from-string/train/python\n\ndef remove_lowercase(s):\n    return ''.join(ch for ch in s if ch.isupper())",
    "def remove_lowercase(string):\n    return \"\".join([c for c in string if c.isupper()])\n\n\n\nif __name__ == \"__main__\":\n    print(remove_lowercase(\"Hello\"))\n    print(remove_lowercase(\"hellO\"))",
    "# TODO\n# 1. Can you write a function that takes two strings as input and returns the number of lowercase substrings in the first string?\n# 2. Can you write a function that takes two strings as input and returns the number of lowercase substrings in the second string?\n# 3. Can you write a function that takes two strings as input and returns the number of lowercase substrings in the combined string?\n# 4. Can you write a function that takes two strings as input and returns the number of lowercase substrings in the combined string using only one pass?\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase('abc')\n    print s.removeLowercase('abcd')\n    print s.removeLowercase('abcd')\n    print s.removeLowercase('abcde')\n    print s.removeLowercase('abcde')\n    print s.removeLowercase('abcde')",
    "class Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        def remove_lowercase(s):\n            return ''.join(c for c in s if c.lower()!= c)\n        return remove_lowercase(str)\n\nif __name__ == '__main__':\n    print Solution().removeLowercase('abc')",
    "def remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    res = []\n    for c in string:\n        if c.lower()!= c:\n            res.append(c)\n    return ''.join(res)\n\nif __name__ == '__main__':\n    s = 'hello world'\n    print(remove_lowercase(s))",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # time:O(n)\n        # space:O(n)\n        # recursive:O(n)\n        # iterative:O(n)\n        if not s:\n            return ''\n        n = len(s)\n        # lowercase: O(n)\n        # upper: O(n)\n        # lowercase + upper: O(n)\n        # lowercase + lower: O(n)\n        # lowercase + upper + lower: O(n)\n        # lowercase + lower + upper: O(n)\n        # lowercase + upper + lower + upper: O(n)\n        # lowercase + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower: O(n)\n        # lowercase + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower: O(n)\n        # lowercase + lower + upper + lower: O(n)\n        # lowercase + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower: O(n)\n        # lowercase + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower + upper: O(n)\n        # lowercase + lower + upper + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower: O(n)\n        # lowercase + lower + upper + lower + upper + upper + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower + upper + lower + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower + upper + lower + upper + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower + upper + lower + upper + lower + upper: O(n)\n        # lowercase + lower + upper + lower + upper + lower + upper",
    "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeLowercase(self, str):\n        ret = \"\"\n        for i in range(len(str)):\n            if str[i].lower()!= str[i]:\n                ret += str[i]\n        return ret\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeLowercase(\"a\"))\n    print(sol.removeLowercase(\"A\"))\n    print(sol.removeLowercase(\"aa\"))\n    print(sol.removeLowercase(\"Aa\"))\n    print(sol.removeLowercase(\"aaa\"))\n    print(sol.removeLowercase(\"aaaa\"))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport string\n\ndef remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c.lower()!= c)\n\nif __name__ == '__main__':\n    assert remove_lowercase(\"abc\") == \"abc\"\n    assert remove_lowercase(\"abcd\") == \"abcd\"\n    assert remove_lowercase(\"abcdef\") == \"abcdef\"\n    assert remove_lowercase(\"\") == \"\"\n    assert remove_lowercase(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_lowercase(\"abcabcabcabc\") == \"abcabcabc\"\n    assert remove_lowercase(\"abcabcabcabcabcabc\") == \"abcabcabc\"",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeLowercase(self, str):\n        if not str:\n            return str\n        \n        return str[0] + self.removeLowercase(str[1:])",
    "def remove_lowercase(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(c for c in text if c.isupper())\n\ndef remove_lowercase_2(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return text.lower()\n\nif __name__ == \"__main__\":\n    assert remove_lowercase(\"Hello\") == \"hello\"\n    assert remove_lowercase(\"Hello World\") == \"hello world\"\n    assert remove_lowercase(\"hello world\") == \"hello world\"\n    assert remove_lowercase_2(\"Hello\") == \"hello\"\n    assert remove_lowercase_2(\"Hello World\") == \"hello world\"\n    assert remove_lowercase_2(\"hello world\") == \"hello world\"\n    assert remove_lowercase(\"Hello World\") == \"hello world\"\n    assert remove_lowercase(\"Hello World\") == \"hello world\"",
    "import re\n\ndef remove_lowercase_substring(string):\n    pattern = re.compile('(.)([A-Za-z])')\n    return pattern.sub(lambda m: m.group(2).upper(), string)\n\nprint remove_lowercase_substring('lowercase string')",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for i in range(len(s)):\n            if s[i].lower()!= s[i]:\n                ret.append(s[i])\n        return ''.join(ret)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase(\"leetcode\")",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(char for char in s if char.isalpha())\n\n\nif __name__ == '__main__':\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')",
    "# https://leetcode.com/problems/remove-all-lowercase-words/discuss/73727/C-Python-Solution-with-recursion-and-stack\n# https://leetcode.com/problems/remove-all-lowercase-words/discuss/298899/C-Python-Solution-with-recursion-and-stack\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        stack = []\n        result = []\n        for c in s:\n            if c.islower():\n                stack.append(c)\n            elif c.isupper():\n                while stack and stack[-1] == c:\n                    stack.pop()\n                if not stack:\n                    result.append(c)\n                else:\n                    stack.pop()\n        return ''.join(result)",
    "def remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(ch for ch in string if ch.isupper())\n\n\nif __name__ == '__main__':\n    print(remove_lowercase('abcABC'))",
    "def removeLowerCase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c.isupper())\n\n\nif __name__ == '__main__':\n    s = \"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"\n    print(removeLowerCase(s))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        return ''.join(c for c in s if c.isalpha())\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeLowercase(\"abc\")",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # s.lower()\n        # s.upper()\n        # s.strip()\n        # s.translate(str.maketrans(string.punctuation, ''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        \n        # s.lower()\n        # s.upper()\n        # s.strip()\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        \n        # s.lower()\n        # s.upper()\n        # s.strip()\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''))\n        # s.translate(str.maketrans(string.punctuation,''",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower()!= c)",
    "def removeLowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Create a dictionary of lowercase characters\n    lowercase = {c: i for i, c in enumerate(s)}\n\n    # Iterate through the string and replace all lowercase characters with the\n    # corresponding uppercase character\n    return ''.join([s[i] if lowercase[c]!= i else c for c, i in lowercase.items()])\n\nif __name__ == '__main__':\n    s = \"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"\n    print(removeLowercase(s))",
    "def removeLowercaseSubstrings(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = s.lower()\n    new_s = \"\"\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            new_s += s[i]\n    return new_s\n\nif __name__ == '__main__':\n    s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst",
    "# Definition for a substring.\nclass Substring:\n    def __init__(self, s, i, j):\n        self.s = s\n        self.i = i\n        self.j = j\n\nclass Solution(object):\n    def removeLowercaseSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        return \"\".join(map(lambda x: s[x.i:x.j], filter(lambda x: x.s.islower(), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.s.isalpha(), map(Substring, map(lambda y: (y.i, y.j), filter(lambda x: x.",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        lower_s = [x.lower() for x in s]\n        return ''.join(x for x in lower_s if x not in lower_s[::-1])\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeLowercase(\"abcde\"))",
    "# TODO:\n# 1. Remove all lowercase letters from the given string\n# 2. Remove all lowercase letters from the given string in reverse\n# 3. Remove all lowercase letters from the given string in forward\n# 4. Remove all lowercase letters from the given string in both directions\n\n# Approach 1:\ndef remove_lowercase(string):\n    return ''.join(ch for ch in string if ch.isupper())\n\n# Approach 2:\ndef remove_lowercase_reverse(string):\n    return ''.join(ch for ch in string if ch.islower())\n\n# Approach 3:\ndef remove_lowercase_forward(string):\n    return ''.join(ch for ch in string if ch.islower())\n\n# Approach 4:\ndef remove_lowercase_both(string):\n    return ''.join(ch for ch in string if ch.islower())\n\nif __name__ == '__main__':\n    test_string = \"Hello World!\"\n    print(remove_lowercase(test_string))\n    print(remove_lowercase_reverse(test_string))\n    print(remove_lowercase_forward(test_string))\n    print(remove_lowercase_both(test_string))",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c.lower()!= c)\n\nif __name__ == '__main__':\n    print remove_lowercase_substrings('abcABC')",
    "def remove_lowercase(s):\n    return \"\".join(s.lower() if c.islower() else c for c in s)\n\nif __name__ == \"__main__\":\n    s = \"Hello world!\"\n    print(remove_lowercase(s))",
    "# https://leetcode.com/problems/remove-substrings/discuss/142846/Python-O(N^2)-Runtime-and-Space-Complexity-Solution\n\nclass Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        r = str.lower()\n        for i in range(len(r)):\n            if r[i] >= 'a' and r[i] <= 'z':\n                r = r[:i] + r[i+1:]\n        return r\n\nif __name__ == \"__main__\":\n    assert Solution().removeLowercase(\"leetcode\") == \"leetcode\"",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # naive\n        return ''.join(filter(lambda c: c.isupper(), s))\n\n\nif __name__ == '__main__':\n    assert Solution().removeLowercase(\"abcABCabc\") == 'abcABCabc'\n    assert Solution().removeLowercase(\"abcabc\") == 'abcabc'\n    assert Solution().removeLowercase(\"abc\") == 'abc'\n    assert Solution().removeLowercase(\"A\") == 'A'\n    assert Solution().removeLowercase(\"\") == ''",
    "import unittest\n\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def removeLowercase(self, s):\n        return ''.join(filter(lambda x: x.islower(), s))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-lowercase/solution/\n#\n# 1. Use a set to store all characters that are lowercase.\n# 2. Remove all lowercase characters in the string from the set.\n# 3. Return the new string.\n#\n# Approach #2:\n#\n# 1. Remove all lowercase characters in the string from the set.\n# 2. Return the new string.\n#\n# Approach #1:\n#\n# 1. Remove all lowercase characters in the string from the set.\n# 2. Return the new string.\n\n# 1ms 100%\nclass Solution {\n    public String removeLowercase(String s) {\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (!set.contains(s.charAt(i))) {\n                set.add(s.charAt(i));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!set.contains(s.charAt(i))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String removeLowercase(String s) {\n        return s.replaceAll(\"[a-z]\", \"\").toLowerCase();\n    }\n}\n'''",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower()!= c)",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def removeLowercase(self, s):\n        ans = []\n        for i in range(len(s)):\n            if s[i] == s[i].lower():\n                ans.append(s[i])\n        return ''.join(ans)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :param s: str\n        :return: str\n        \"\"\"\n        return ''.join([c for c in s if c.isupper()])\n\n\nif __name__ == \"__main__\":\n    print Solution().removeLowercase(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn",
    "# https://www.hackerrank.com/challenges/remove-lowercase-from-a-string\n# https://www.codeeval.com/open_challenges/4/\n\ndef remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    new_s = ''\n    for c in s:\n        if c.lower()!= c:\n            new_s += c\n    return new_s\n\nif __name__ == '__main__':\n    s = input()\n    print(remove_lowercase(s))",
    "def remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # YOUR CODE HERE\n    return string\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase(\"abcdefg\") == \"abcdefg\", \"lowercase\"\n    assert remove_lowercase(\"ABCDEFGH\") == \"abcdefgh\", \"lowercase2\"\n    assert remove_lowercase(\"abcdefg\") == \"abcdefg\", \"lowercase3\"\n    assert remove_lowercase(\"abcd\") == \"abcd\", \"lowercase4\"\n    assert remove_lowercase(\"\") == \"\", \"lowercase5\"\n    assert remove_lowercase(\"ABCDEFGH\") == \"ABCDEFGH\", \"lowercase6\"\n    assert remove_lowercase(\"abcdefg\") == \"abcdefg\", \"lowercase7\"\n    assert remove_lowercase(\"aBcDeFg\") == \"aBcDeFg\", \"lowercase8\"",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = ''.join(s)\n        s = s.lower()\n        return ''.join(i for i in s if i.isupper())",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeLowercase(self, str):\n        if not str:\n            return str\n        result = []\n        for i in range(len(str)):\n            if str[i].lower() == str[i]:\n                result.append(str[i])\n            else:\n                result.append(str[i].lower())\n        return \"\".join(result)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.removeLowercase(\"aBc\")\n    print solution.removeLowercase(\"aa\")\n    print solution.removeLowercase(\"aA\")",
    "def remove_lowercase_substrings(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(char for char in string if char.lower()!= char)\n\nif __name__ == \"__main__\":\n    assert remove_lowercase_substrings(\"aBcD\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abc\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abC\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abcD\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"aBcD\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abcd\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abcd\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abcd\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"abc\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"aBc\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"aBcD\") == \"abc\", \"lowercase\"\n    assert remove_lowercase_substrings(\"AbcD\") == \"abc\", \"lowercase\"",
    "import re\n\n\ndef remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub('[a-z]', '', string)\n\n\nif __name__ == '__main__':\n    assert remove_lowercase('abc') == 'abc'\n    assert remove_lowercase('abcABC') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') == 'abcABC'\n    assert remove_lowercase('abcABCabc') ==",
    "def remove_lowercase(string):\n    return ''.join(c for c in string if c.isupper())\n\n\nif __name__ == '__main__':\n    print remove_lowercase('aBc')",
    "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeLowercase(self, str):\n        if not str:\n            return str\n        l = list(str)\n        for i in range(len(str)):\n            if l[i] >= 'a' and l[i] <= 'z':\n                l[i] = l[i] - 'a' + 'A'\n        return ''.join(l)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase('abcdef')",
    "def remove_lowercase_substring(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return string.lower()\n\nif __name__ == '__main__':\n    assert remove_lowercase_substring('abcABC123') == 'abc123'\n    assert remove_lowercase_substring('Abc123') == 'abc123'",
    "def remove_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c.lower() for c in str)\n\n# Your RemoveLowercase function should return the same string that is passed in.\n\nprint remove_lowercase(\"abcdefg\")\n#>>> abcdefg\n\nprint remove_lowercase(\"abcdefg\")\n#>>> abcdefg\n\nprint remove_lowercase(\"aBcDeFg\")\n#>>> abcdefg\n\nprint remove_lowercase(\"aBcDeFg\")\n#>>> abcdefg\n\nprint remove_lowercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n#>>> AABCCDDEEFFGGHHIIJJKKLLMMNNOOPQQRSSSTTUUVVWWXYYZZ\n\nprint remove_lowercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n#>>> AABCCDDEEFFGGHHIIJJKKLLMMNNOOPQQRSSSTTUUVVWWXYYZZ",
    "def removeLowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    result = s\n    for i in range(len(s)):\n        if s[i] == s[i].lower():\n            result = result[:i] + result[i+1:]\n    return result\n\nif __name__ == '__main__':\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(removeLowercase(s))",
    "def removeLower(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if string is None:\n        return None\n    string = string.lower()\n    for i in range(len(string)):\n        if string[i] == string[i].lower():\n            string = string[:i] + string[i+1:]\n    return string\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = \"aBcDeFgHiJkLmNoPqRStUvWxyz\"\n    print(removeLower(string))\n    print(string)\n\nif __name__ == \"__main__\":\n    main()",
    "def remove_lowercase(string):\n    return string.replace(string[0], string[0].lower())\n\nif __name__ == \"__main__\":\n    print remove_lowercase(\"abcdefg\")",
    "def remove_lowercase(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in text if c.isalpha())",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.lower()!= c])",
    "import unittest\n\n\nclass Solution:\n    def removeLowercase(self, s: str) -> str:\n        return ''.join(c for c in s if c.isupper())\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-lowercase/solution/\n\n# 1ms 100%\nclass Solution {\n    public String removeLowercase(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                sb.append(str.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n'''",
    "import re\n\ndef remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'(?<=[a-z])[a-z]','',s)\n\nif __name__ == '__main__':\n    print(remove_lowercase('abcde'))\n    print(remove_lowercase('abc'))\n    print(remove_lowercase('abcdefghijklmnopqrstuvwxyz'))",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeLowercase(self, s):\n        return s.upper()\n\n    # @param s, a string\n    # @return a string\n    def removeUpperCase(self, s):\n        return s.lower()\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeLowercase(\"abc\")\n    print s.removeUpperCase(\"abc\")",
    "class Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for i in str:\n            if i not in \"abcdefghijklmnopqrstuvwxyz\":\n                ret.append(i)\n        return ''.join(ret)\n\nclass Solution2(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for i in str:\n            if i not in \"abcdefghijklmnopqrstuvwxyz\":\n                ret.append(i)\n        return ''.join(ret)\n\nclass Solution3(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for i in str:\n            if i not in \"abcdefghijklmnopqrstuvwxyz\":\n                ret.append(i)\n        return ''.join(ret)\n\nclass Solution4(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for i in str:\n            if i not in \"abcdefghijklmnopqrstuvwxyz\":\n                ret.append(i)\n        return ''.join(ret)\n\nif __name__ == \"__main__\":\n    print Solution().removeLowercase(\"\")\n    print Solution().removeLowercase(\"abcdefghijklmnopqrstuvwxyz\")\n    print Solution().removeLowercase(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")\n    print Solution().removeLowercase(\"A\")\n    print Solution().removeLowercase(\"abcdefghijklmnopqrstuvwxyz\")\n    print Solution().removeLowercase(\"abcdefghijklmnopqrstuvwxyz\")",
    "# Definition for a substring.\nclass Substring:\n    def __init__(self, s, start, end):\n        self.s = s\n        self.start = start\n        self.end = end\n\n    def __repr__(self):\n        return self.s\n\n    def __str__(self):\n        return self.s\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if len(s) < 1:\n            return s\n        n = len(s)\n        ans = []\n        for i in range(n):\n            start = i\n            while start < n:\n                if s[start].islower():\n                    start += 1\n                else:\n                    break\n            end = i\n            while end < n:\n                if s[end].islower():\n                    end += 1\n                else:\n                    break\n            ans.append(Substring(s, start, end))\n        return \"\".join(ans)\n\n# Note:\n# The problem of case insensitive string comparison.\n#\n# Test case:\n#\n# Input:\n# s = \"abcd\"\n# Output:\n# \"abc\"\n#\n# Input:\n# s = \"aBcD\"\n# Output:\n# \"abc\"\n#\n# Input:\n# s = \"AaBbCcDd\"\n# Output:\n# \"abc\"\n#\n# Input:\n# s = \"abCd\"\n# Output:\n# \"abc\"\n#\n# Input:\n# s = \"aBcD\"\n# Output:\n# \"abc\"\n#\n# Input:\n# s = \"AaBbCcDd\"\n# Output:\n# \"abc\"",
    "def remove_lowercase(string):\n    return ''.join(ch for ch in string if ch.isupper())\n\n#print(remove_lowercase(\"aBcD\"))\n#print(remove_lowercase(\"abcabcabcabc\"))\n#print(remove_lowercase(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeLowercase(self, str):\n        if not str:\n            return str\n        str = str.lower()\n        return ''.join([i for i in str if i not in str.lower()])\n\nif __name__ == '__main__':\n    assert Solution().removeLowercase(\"abc\") == \"abc\"\n    assert Solution().removeLowercase(\"abcabcabc\") == \"abcabcabc\"\n    assert Solution().removeLowercase(\"abcabcabcabc\") == \"abcabcabcabc\"",
    "import string\n\n# https://www.hackerrank.com/challenges/remove-lowercase-substrings/problem\n\ndef removeLowercaseSubstrings(string):\n    return ''.join(\n        [char for char in string if char.islower()]\n    )\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(removeLowercaseSubstrings(string))",
    "def removeLowercase(s):\n    return ''.join([i if i.isupper() else i.lower() for i in s])\n\nif __name__ == '__main__':\n    assert removeLowercase('abc') == 'abc', 'abc'\n    assert removeLowercase('abcd') == 'abc', 'abcd'\n    assert removeLowercase('abcdef') == 'abcdef', 'abcdef'\n    assert removeLowercase('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'\n    assert removeLowercase('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'\n    assert removeLowercase('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'\n    assert removeLowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'",
    "# https://leetcode.com/problems/remove-all-lowercase/discuss/76624/Python-Solution-Recursive-O(n)\n# https://leetcode.com/problems/remove-all-lowercase/discuss/83517/Java-Recursive-O(n)\n# https://leetcode.com/problems/remove-all-lowercase/discuss/83518/Java-Recursive-O(n)\n# https://leetcode.com/problems/remove-all-lowercase/discuss/83519/Java-Recursive-O(n)\n\nclass Solution:\n    def removeLowercaseLetters(self, s: str) -> str:\n        def remove(s: str, i: int) -> str:\n            if i >= len(s):\n                return s\n            if s[i].islower():\n                s = remove(s, i+1)\n            else:\n                s = s[:i] + s[i+1:]\n            return s\n\n        return remove(s, 0)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeLowercaseLetters(\"aA\"))",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(ch for ch in s if ch.isupper())",
    "def remove_lowercase_substrings(string):\n    return ''.join(ch for ch in string if ch.isupper())\n\n\nif __name__ == \"__main__\":\n    assert remove_lowercase_substrings(\"Hello\") == \"hEllO\", \"Hello\"\n    assert remove_lowercase_substrings(\"hello\") == \"hELLO\", \"hello\"\n    assert remove_lowercase_substrings(\"Hello World\") == \"HellO WorLD\", \"Hello World\"\n    assert remove_lowercase_substrings(\"Hello World, how are you?\") == \"HellO WorLD, how are you?\", \"Hello World, how are you?\"",
    "import unittest\n\n\nclass Solution:\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c.lower()!= c)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 11/15/2018\n# 3ms 100%\n\n# 10/26/2018\n# 10ms 100%\n# Time Limit Exceeded\n# 7ms\nclass Solution {\n    public String removeLowercase(String str) {\n        int n = str.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[str.charAt(i) - 'a']++;\n        }\n        char[] newString = new char[n];\n        for (int i = 0; i < n; i++) {\n            if (count[str.charAt(i) - 'a'] > 0) {\n                newString[i] = str.charAt(i);\n            }\n        }\n        return new String(newString);\n    }\n}\n'''",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # http://www.programcreek.com/2012/12/leetcode-remove-lowercase-substrings-java/\n        return s.replace('a','A').replace('e','E').replace('i','I').replace('o','O').replace('u','U')\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeLowercase('aBcD'))\n    print(s.removeLowercase('abbb'))\n    print(s.removeLowercase('a'))\n    print(s.removeLowercase('aa'))\n    print(s.removeLowercase('abbbcd'))\n    print(s.removeLowercase('abc'))\n    print(s.removeLowercase('a'))\n    print(s.removeLowercase('a'))\n    print(s.removeLowercase('a'))\n    print(s.removeLowercase('ab'))",
    "# https://www.hackerrank.com/challenges/remove-lowercase-substrings/problem\n\ndef removeLowercaseSubstrings(inputString):\n    \"\"\"\n    :type inputString: str\n    :rtype: str\n    \"\"\"\n    output = ''\n    for i in range(len(inputString)):\n        if inputString[i].lower() == inputString[i]:\n            output += inputString[i]\n    return output\n\nif __name__ == '__main__':\n    test_case = int(input())\n    for t in range(test_case):\n        inputString = input().lower()\n        print(\"Case #{}: {}\".format(t + 1, removeLowercaseSubstrings(inputString)))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\n# Complete the removeSubstring function below.\ndef removeSubstring(s, m):\n    return s[:m] + s[m+1:]\n\n\nif __name__ == \"__main__\":\n    s = \"aBcCdEfG\"\n    print \"Input string: \" + s\n    print \"Substring to remove: \" + str(m)\n\n    m = int(raw_input())\n    print \"Output string: \" + removeSubstring(s, m)",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/remove-lowercase/discuss/109917/Python-solution-with-understanding-memoization\n        # https://leetcode.com/problems/remove-lowercase/discuss/109918/Python-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109919/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109920/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109921/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109922/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109923/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109924/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109925/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109926/C++-solution-with-understanding-memoization-and-backtracking\n        # https://leetcode.com/problems/remove-lowercase/discuss/109927/C++-solution-",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(ch for ch in s if ch.isupper())\n\n\nclass Solution2(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(ch for ch in s if ch.isupper() or ch.islower())\n\n\nclass Solution3(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(ch for ch in s if ch.isupper() or ch.islower())",
    "# https://leetcode.com/problems/remove-all-lowercase/\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.lower()!= c])",
    "# https://leetcode.com/problems/remove-all-lowercase/\n\nclass Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c.isupper())",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower()!= c)",
    "import sys\n\n\ndef remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return string.lower()\n\n\nif __name__ == '__main__':\n    s = 'This is a test case.'\n    print(remove_lowercase(s))",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeLowercase(self, str):\n        if str == None or len(str) == 0:\n            return str\n        i = 0\n        while i < len(str):\n            if str[i].islower():\n                str = str[:i] + str[i + 1:]\n            else:\n                i += 1\n        return str\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase(\"Hello\")\n    print s.removeLowercase(\"\")\n    print s.removeLowercase(\"abc\")\n    print s.removeLowercase(\"ABC\")",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        def get_lower(s):\n            for i in range(len(s)):\n                if s[i].isalpha():\n                    return s[:i] + s[i+1:]\n            return s\n\n        def remove_lower(s):\n            return get_lower(s)\n\n        return \"\".join(remove_lower(x) for x in s.split(\"\"))\n\n\nif __name__ == \"__main__\":\n    print Solution().removeLowercase(\"\")",
    "def remove_lowercase(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return ''.join(ch for ch in text if ch.isupper())\n\n\nif __name__ == '__main__':\n    assert remove_lowercase('hello') == 'hell', 'hello'\n    assert remove_lowercase('hello world') == 'hello world', 'hello world'\n    assert remove_lowercase('Hello World!') == 'Hello World!', 'Hello World!'\n    assert remove_lowercase('hello world') == 'hello world', 'hello world'\n    assert remove_lowercase('Hello world') == 'Hello world', 'Hello world'",
    "def remove_lowercase(string):\n    return ''.join(c for c in string if c.isupper())\n\nprint(remove_lowercase(\"Hello\"))\nprint(remove_lowercase(\"hELlo\"))\nprint(remove_lowercase(\"HELlo\"))",
    "# https://leetcode.com/problems/remove-substrings/description/\n\nclass Solution(object):\n    def removeSubstrings(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        \n        s_len = len(s)\n        if k < 1 or k > s_len:\n            return s\n        \n        if k > s_len / 2:\n            k = k - (s_len / 2)\n        \n        left_k = k\n        while left_k >= 1:\n            if s[left_k - 1] == s[left_k]:\n                left_k -= 1\n            else:\n                break\n        \n        right_k = k\n        while right_k <= s_len - 1:\n            if s[right_k + 1] == s[right_k]:\n                right_k += 1\n            else:\n                break\n        \n        return s[left_k:right_k+1]\n\nif __name__ == '__main__':\n    print Solution().removeSubstrings('bbbab', 2)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        Brute-force solution\n        :param s: str\n        :return: str\n        \"\"\"\n        res = []\n        for c in s:\n            if c.lower()!= c:\n                res.append(c)\n        return ''.join(res)\n\n    def removeLowercase2(self, s):\n        \"\"\"\n        Dictionary solution\n        :param s: str\n        :return: str\n        \"\"\"\n        res = []\n        dic = {}\n        for c in s:\n            if c.lower() not in dic:\n                dic[c.lower()] = 1\n            else:\n                dic[c.lower()] += 1\n        for c in dic:\n            res.append(c)\n        return ''.join(res)\n\n\nif __name__ == \"__main__\":\n    print Solution().removeLowercase(\"a\")\n    print Solution().removeLowercase2(\"a\")",
    "def remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in string if c.isupper() or c.lower()])\n\nprint(remove_lowercase('aBcD'))",
    "# https://www.hackerrank.com/challenges/remove-lowercase/problem\n\ndef remove_lowercase(string):\n    return ''.join(char for char in string if char.isalpha())\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(remove_lowercase(string))",
    "# Definition for a substring.\nclass Substring:\n    def __init__(self, s):\n        self.s = s\n        self.start = 0\n        self.end = len(s) - 1\n\n    def __repr__(self):\n        return f'Substring({self.s!r}, {self.start!r}, {self.end!r})'\n\n    def __str__(self):\n        return self.s[self.start:self.end+1]\n\n\nclass Solution:\n    def removeLowercaseLetters(self, str: str) -> str:\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(map(lambda x: str[x.start:x.end],\n                           filter(lambda x: x.end > x.start and x.s[x.start] >= 'a',\n                                  enumerate(str, 1))))\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution2:\n    def removeLowercaseLetters(self, str: str) -> str:\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(map(lambda x: str[x.start:x.end],\n                           filter(lambda x: x.end > x.start and x.s[x.start] >= 'a',\n                                  enumerate(str, 1))))\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution3:\n    def removeLowercaseLetters(self, str: str) -> str:\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(map(lambda x: str[x.start:x.end],\n                           filter(lambda x: x.end > x.start and x.s[x.start] >= 'a',\n                                  enumerate(str, 1))))",
    "class Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for c in str:\n            if c.lower() == c:\n                ret.append(c)\n        return ''.join(ret)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeLowercase('abcd')",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return ''.join(char for char in s if char.isupper())",
    "class Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(\n            [i for i in str if i!= i.lower()]\n        )\n\nif __name__ == '__main__':\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().",
    "def remove_lowercase(s):\n    return ''.join([c for c in s if c.lower()!= c])\n\n\nif __name__ == '__main__':\n    s = 'aabbccddd'\n    print(remove_lowercase(s))\n    print(s)",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print Solution().removeLowercase('abcdefg')\n    print Solution().removeLowercase('abcdefghi')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')\n    print Solution().removeLowercase('abcdefghijklmnopqrstuvwxyz')",
    "# https://www.hackerrank.com/challenges/remove-all-lowercase-strings/problem\n\nimport re\n\n\ndef remove_all_lowercase(s):\n    return ''.join(re.findall(r'[a-z]', s))\n\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(remove_all_lowercase(s))",
    "# http://www.codeeval.com/open_challenges/43/\n\ndef remove_lowercase(string):\n    return ''.join(ch for ch in string if ch.islower())\n\n\ndef main():\n    print(remove_lowercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ'))\n\nif __name__ == '__main__':\n    main()",
    "def remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(c for c in s if c.lower()!= c)\n\nif __name__ == \"__main__\":\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase2\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase3\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase4\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase5\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase6\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase7\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase8\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase9\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase10\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase11\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase12\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase13\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase14\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase15\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase16\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase17\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase18\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase19\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase20\"\n    assert remove_lowercase(\"abcd\") == \"dcba\", \"Lowercase21\"\n    assert remove_lowercase(\"abcd\")",
    "# https://leetcode.com/problems/remove-all-lowercase/\n\n\nclass Solution(object):\n    def removeLowercase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(ch for ch in str if ch.lower()!= ch)",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isupper())\n\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isupper() or c.islower())\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'hello'\n    print(sol.removeLowercase(s))\n    s = 'abcd'\n    print(sol.removeLowercase(s))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.lower()!= c])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeLowercase(\"Hello\")\n    print s.removeLowercase(\"Hello World\")\n    print s.removeLowercase(\"Hello World!\")\n    print s.removeLowercase(\"hello world\")",
    "def remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in s if c.lower()!= c])\n\nif __name__ == \"__main__\":\n    s = \"lowercase\"\n    print(remove_lowercase(s))",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower()!= c)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n\n    print solution.removeLowercase('abcde')\n    print solution.removeLowercase('Hello, World!')",
    "# https://leetcode.com/problems/remove-all-lowercase/discuss/63783/Python-O(N)-Time-O(1)-Space-Solution\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = s.lower()\n        count = 0\n        for c in s:\n            if c.isalpha():\n                count += 1\n        return s[:count] + s[count+1:]",
    "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeLowercase(self, str):\n        str = str.lower()\n        for i in range(len(str)):\n            if str[i] >= 'a' and str[i] <= 'z':\n                str = str[:i] + str[i + 1:]\n        return str\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase('Hello world')",
    "__author__ = 'Danyang'\n\nclass Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        return ''.join([c for c in s if c.isalpha()])\n\n\nif __name__==\"__main__\":\n    print(Solution().removeLowercase(\"abcabc\"))\n    print(Solution().removeLowercase(\"abcabcabc\"))\n    print(Solution().removeLowercase(\"\"))",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([ch for ch in s if ch.isupper() or ch.lower()])\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.removeLowercase('abc'))\n    print(sol.removeLowercase('abC'))\n    print(sol.removeLowercase('abc123'))\n    print(sol.removeLowercase('abc123abc'))",
    "# https://github.com/PyCQA/pylint/issues/1551\n# pylint: disable=consider-using-ternary\n\nimport re\n\nfrom typing import List\n\n\ndef remove_lowercase_substrings(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    substrings = re.findall(r\"([a-z])\", string)\n    return re.sub(substrings, r\"\\1\", string)\n\n\ndef test_remove_lowercase_substrings() -> None:\n    assert remove_lowercase_substrings(\"abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"aBc\") == \"abc\"\n    assert remove_lowercase_substrings(\"Abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"abc\") == \"abc\"\n    assert remove_lowercase_substrings(\"abC\") == \"abc\"\n    assert remove_lowercase_substrings(\"AbC\") == \"abc\"\n    assert remove_lowercase_substrings(\"AbC\") == \"abc\"\n    assert remove_lowercase_substrings(\"aBC\") == \"abc\"\n    assert remove_lowercase_substrings(\"ABC\") == \"abc\"\n    assert remove_lowercase_substrings(\"aBC\") == \"abc\"\n    assert remove_lowercase_substrings(\"ABc\") == \"abc\"\n    assert remove_lowercase_substrings(\"AbC\") == \"abc\"\n    assert remove_lowercase_substrings(\"ABc\") == \"abc\"\n    assert remove_lowercase_substrings(\"aBC\") == \"abc\"\n    assert remove_lowercase_substrings(\"ABC\") == \"abc\"\n    assert remove_lowercase_substrings(\"aBC\") == \"abc\"\n    assert",
    "def remove_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([s for s in string if s.isupper()])\n\ndef main():\n    print remove_lowercase(\"Hello\")\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'vivek'\nimport unittest\n\nclass Solution:\n    def removeLowercase(self, str: str) -> str:\n        \"\"\"\n        Use a stack and a map to store the indices of lowercase characters.\n        \"\"\"\n        if str is None or len(str) == 0:\n            return str\n        stack = []\n        map = {}\n        for i in range(len(str)):\n            if str[i] in map:\n                stack.append(map[str[i]])\n            else:\n                map[str[i]] = i\n                stack.append(i)\n        res = ''\n        while len(stack) > 0:\n            res += str[stack.pop()]\n        return res\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 10:45 - 10:55\n# 10:45 - 10:55\n\n# 8ms 100%\nclass Solution {\n    public String removeLowercase(String str) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        Stack<Integer> stack = new Stack<>();\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str.length(); i++) {\n            if (map.containsKey(str.charAt(i))) {\n                stack.push(map.get(str.charAt(i)));\n            } else {\n                map.put(str.charAt(i), i);\n                stack.push(i);\n            }\n        }\n        StringBuilder builder = new StringBuilder();\n        while (!stack.isEmpty()) {\n            builder.append(str.charAt(stack.pop()));\n        }\n        return builder.reverse().toString();\n    }\n}\n\n# 10:55 - 11:03\n# 10:55 - 11:03\n# 8ms 100%\nclass Solution {\n    public String removeLowercase(String",
    "class Solution(object):\n    def removeLowercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.lower()!= c])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeLowercase('abcdefghijklmnopqrstuvwxyz')"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}