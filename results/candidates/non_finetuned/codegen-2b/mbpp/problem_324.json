{
  "problem": {
    "task_id": "MBPP/335",
    "prompt": "Write a function to find the sum of arithmetic progression.",
    "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
    "test_list": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ],
    "challenge_test_list": [],
    "problem_id": 324
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, a, b):\n#         self.start = a\n#         self.end = b\n#         self.step = 1\n\nclass Solution:\n    \"\"\"\n    @param: start, end, step: start, end, step represents the start, end, and step of an arithmetic progression\n    @return: the sum of arithmetic progression\n    \"\"\"\n    def getSum(self, start, end, step):\n        return self.getSum_1(start, end, step)\n\n    def getSum_1(self, start, end, step):\n        if start > end:\n            return 0\n        if step == 0:\n            return 0\n        if step == 1:\n            return end - start\n        if step == 2:\n            return end - start + start\n        if step == 3:\n            return end - start + start + start\n        return self.getSum_1(start, end, step - 1) + self.getSum_1(start, end, step - 2) + self.getSum_1(start, end, step - 3)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum(1, 10, 1)",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/\nclass Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        while a < b:\n            total += a\n            a += 1\n        return total\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getSum(2, 4))\n    print(sol.getSum(5, 6))",
    "# https://www.hackerrank.com/challenges/arithmetic-progression\n\ndef sum_of_arithmetic_progression(n):\n    \"\"\"\n    n is an integer\n    Returns the sum of all arithmetic progression of length n\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    return sum_of_arithmetic_progression(n-1) + n * n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(sum_of_arithmetic_progression(n))",
    "# T = O(N log N)\ndef solve(n):\n    \"\"\"\n    >>> solve(1)\n    1\n    >>> solve(2)\n    3\n    >>> solve(3)\n    6\n    >>> solve(4)\n    10\n    >>> solve(5)\n    15\n    \"\"\"\n    return sum(range(1, n + 1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_of_arithmetic_progression(n):\n    if n == 1:\n        return 1\n    return sum_of_arithmetic_progression(n-1) + n\n\nprint sum_of_arithmetic_progression(100)",
    "class Solution:\n    \"\"\"\n    @param numbers: Give an array numbers of n integer\n    @return: The sum of arithmetic progression.\n    \"\"\"\n    def getSum(self, numbers):\n        if len(numbers) == 0:\n            return 0\n        numbers = sorted(numbers)\n        sum = 0\n        for i in range(0, len(numbers)):\n            if i == 0:\n                sum += numbers[i]\n            else:\n                sum += numbers[i] - numbers[i - 1]\n        return sum",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def getSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        res = 0\n        while root.left is not None:\n            root = root.left\n            res += root.val\n        while root.right is not None:\n            root = root.right\n            res += root.val\n        return res\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.left.left = TreeNode(6)\n    root.left.left.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n    root.right.right = TreeNode(9)\n    root.right.left.left = TreeNode(10)\n    root.right.left.right = TreeNode(11)\n    print Solution().getSum(root)\n    print Solution().getSum(None)\n    print Solution().getSum(None)\n    print Solution().getSum(None)\n    print Solution().getSum(None)",
    "def get_progression(a, b):\n    if a <= b:\n        return a + b\n    else:\n        return get_progression(b, a)\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(get_progression(a, b))",
    "from collections import defaultdict\n\n\ndef solve(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    pro = defaultdict(int)\n    for i in range(1, n):\n        pro[i] = i\n    for i in range(2, n):\n        pro[i] = max(pro[i - 1] + i, pro[i - 2] + i)\n    for i in range(1, n):\n        ans += pro[i]\n    return ans\n\n\nif __name__ == '__main__':\n    assert solve(3) == 6\n    assert solve(4) == 8\n    assert solve(7) == 14",
    "def get_sum_of_arithmetic_progression(start, end):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    if start == end:\n        return start\n    \n    return (end - start) * (end + start) / 2\n\n\nif __name__ == \"__main__\":\n    print get_sum_of_arithmetic_progression(1, 3)\n    print get_sum_of_arithmetic_progression(1, 6)\n    print get_sum_of_arithmetic_progression(1, 9)",
    "import math\n\n\ndef sum_of_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    return sum_of_progression(n - 1) + sum_of_progression(n - 2)\n\n\nif __name__ == '__main__':\n    print(sum_of_progression(100))\n    print(sum_of_progression(100000))\n    print(sum_of_progression(1000000))",
    "def find_sum_arithmetic_progression(n):\n    \"\"\"\n    n: the number of elements in the array.\n    return: the sum of the elements in the array.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum([x for x in range(1, n)]) + find_sum_arithmetic_progression(n - 1)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_sum_arithmetic_progression(10))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        return self.getSum(n - 1) + n\n\n\nif __name__ == '__main__':\n    print(Solution().getSum(4))\n    print(Solution().getSum(5))",
    "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getSum(self, nums):\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        sum = 0\n        for i in range(len(nums)):\n            if i > 0:\n                sum += nums[i] - nums[i - 1]\n            if i < len(nums) - 1:\n                sum += nums[i] - nums[i + 1]\n        return sum\n\nnums = [2,3,5,7]\ns = Solution()\nprint(s.getSum(nums))",
    "class Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: The sum of arithmetic progression.\n    \"\"\"\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        return self.getSum(n - 1) + n\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getSum(1))\n    print(sol.getSum(2))\n    print(sol.getSum(3))\n    print(sol.getSum(4))\n    print(sol.getSum(5))",
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression(object):\n#     def __init__(self, a, b):\n#         self.start = a\n#         self.end = b\n#         self.prog = b - a\nclass Solution(object):\n    def sumOfProgs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.sumOfProgs_recursive(nums)\n\n    def sumOfProgs_recursive(self, nums):\n        if not nums:\n            return 0\n\n        return self.sumOfProgs_recursive(nums[:-1]) + nums[-1]",
    "# https://www.hackerrank.com/challenges/arithmetic-progression\n# Write a function that takes an integer n and returns the sum of all\n# positive integers whose form is the sum of the n-th terms of the\n# arithmetic progression.\n\ndef sum_arithmetic_progression(n):\n    \"\"\"\n    n - number of terms in the arithmetic progression\n    :rtype: int\n    :return: sum of all positive integers whose form is the sum of the n-th terms of the arithmetic progression.\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum(range(1, n + 1))\n\nprint(sum_arithmetic_progression(1))\nprint(sum_arithmetic_progression(2))\nprint(sum_arithmetic_progression(3))",
    "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        ans = 0\n        for i in xrange(1, n):\n            ans += i\n        return ans",
    "def sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2\n\nif __name__ == '__main__':\n    print sum_of_arithmetic_progression(1)\n    print sum_of_arithmetic_progression(2)\n    print sum_of_arithmetic_progression(3)\n    print sum_of_arithmetic_progression(4)\n    print sum_of_arithmetic_progression(5)\n    print sum_of_arithmetic_progression(6)\n    print sum_of_arithmetic_progression(7)\n    print sum_of_arithmetic_progression(8)\n    print sum_of_arithmetic_progression(9)\n    print sum_of_arithmetic_progression(10)\n    print sum_of_arithmetic_progression(100)",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def getSum(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(len(arr)):\n            ans += arr[i]\n            if i < len(arr) - 1:\n                ans += arr[i + 1] - arr[i]\n        return ans\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(Solution().getSum(arr))\n    arr = [1, 2, 3]\n    print(Solution().getSum(arr))",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} root\n    # @return {integer}\n    def sumOfProg(self, root):\n        if not root:\n            return 0\n        ans = 0\n        self.findProgSum(root, ans)\n        return ans\n\n    def findProgSum(self, root, ans):\n        if not root:\n            return\n        if not root.left and not root.right:\n            ans += root.val\n        else:\n            if root.left:\n                self.findProgSum(root.left, ans)\n            if root.right:\n                self.findProgSum(root.right, ans)",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a > b:\n            return 0\n        if a == b:\n            return a\n        return self.getSum(a+1, b) + self.getSum(a, b-1)\n\n\nif __name__ == \"__main__\":\n    assert Solution().getSum(1, 3) == 4\n    assert Solution().getSum(3, 4) == 7\n    assert Solution().getSum(1, 10) == 15",
    "def sum_progression(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == b:\n        return a\n    if a < b:\n        return sum_progression(b, a+1)\n    else:\n        return sum_progression(a, b-1)\n\nif __name__ == '__main__':\n    print sum_progression(1, 10)\n    print sum_progression(10, 20)\n    print sum_progression(20, 30)\n    print sum_progression(30, 40)\n    print sum_progression(40, 50)",
    "# https://oj.leetcode.com/problems/sum-of-arithmetic-progression/\n\nclass Solution(object):\n    def sumOfArithmeticProgression(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if len(A) < 2:\n            return 0\n\n        def sum(a, b):\n            return a + b\n\n        s = 0\n        for i in range(2, len(A)):\n            s += sum(A[i - 1], A[i])\n        return s\n\n\nif __name__ == \"__main__\":\n    print(Solution().sumOfArithmeticProgression([1, 2, 3, 4, 5]))",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n\nclass Solution(object):\n    def findSum(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals: return 0\n        res = 0\n        for i in xrange(1, len(intervals)):\n            res += intervals[i].end - intervals[i-1].end\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().findSum([Interval(0, 3), Interval(1, 5), Interval(6, 9)])",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a > b:\n            return 0\n        res = 0\n        for i in range(a, b+1):\n            res += i\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum(0, 3)\n    print s.getSum(1, 3)\n    print s.getSum(2, 3)\n    print s.getSum(0, 4)\n    print s.getSum(3, 4)",
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, a, b):\n#         self.a = a\n#         self.b = b\n\nclass Solution:\n    # @param {ArithmeticProgression[]} arr\n    # @return {integer}\n    def findSum(self, arr):\n        ans = 0\n        for i in range(1, len(arr)):\n            ans += arr[i].a * (i + 1)\n        return ans\n\nif __name__ == '__main__':\n    arr = [ArithmeticProgression(1, 2), ArithmeticProgression(3, 5), ArithmeticProgression(6, 7)]\n    print(Solution().findSum(arr))",
    "def sum_of_progression(n):\n    return sum(i * i for i in range(1, n+1))\n\ndef main():\n    n = int(input())\n    print(sum_of_progression(n))\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/\n# https://leetcode.com/problems/sum-of-arithmetic-progression/solution/\n# \n# Idea:\n#  We can use the idea from problem 10.\n#  \n#  We define two functions:\n#    - is_prog(x)\n#      Return True if x is a arithmetic progression\n#      Return False otherwise.\n#    - compute(x)\n#      Return the sum of all the numbers in the arithmetic progression.\n\nclass Solution(object):\n    def sumOfArithmeticProgression(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A: return 0\n        \n        return sum(compute(A))\n        \n        \n    def is_prog(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        if not A: return False\n        \n        # Check if there is a cycle in the list.\n        return self.is_prog(A[:-1]) and A[-1]!= A[0]\n        \n        \n    def compute(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A: return 0\n        \n        # Check if there is a cycle in the list.\n        if self.is_prog(A):\n            return sum(A)\n            \n        return self.compute(A[:-1]) + A[-1]",
    "def sum_of_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return n\n    return sum_of_progression(n-1) + n\n\nif __name__ == '__main__':\n    print sum_of_progression(15)\n    print sum_of_progression(20)\n    print sum_of_progression(21)",
    "def get_sum_of_arithmetic_progression(start, end):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    if end == start:\n        return end\n    return end - start + (end + start) / 2\n\n# Your code here",
    "def sum_of_progression(n):\n    return sum(i*i for i in range(1, n+1))\n\nprint sum_of_progression(10)\nprint sum_of_progression(100)\nprint sum_of_progression(1000)\nprint sum_of_progression(10000)\nprint sum_of_progression(100000)\nprint sum_of_progression(1000000)",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/discuss/162663/C%2B%2B-Python-solution-with-explanation\n\nclass Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # 1st part: n <= 2\n        if n <= 1:\n            return n\n        # 2nd part: n % 2 == 0\n        if n % 2 == 0:\n            return self.getSum(n - 1) + self.getSum(n - 2)\n        # 3rd part: n % 2!= 0\n        return self.getSum(n - 1) + self.getSum(n - 3)",
    "class Solution:\n    \"\"\"\n    @param: start, end: two integers\n    @return: the sum of arithmetic progression\n    \"\"\"\n    def getSum(self, start, end):\n        if start > end:\n            return 0\n        if start == end:\n            return start\n        else:\n            return start + self.getSum(start+1, end)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def sumOfProgression(self, nums):\n        if not nums:\n            return 0\n        \n        total = 0\n        pre = nums[0]\n        for i in range(1, len(nums)):\n            total += pre\n            pre = nums[i]\n        return total\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.sumOfProgression([1, 3, 4, 7, 9]))",
    "# https://www.hackerrank.com/challenges/arithmetic-progression/problem\n# https://www.hackerrank.com/challenges/arithmetic-progression/submissions/code/210627\n\ndef find_sum_of_arithmetic_progression(n):\n    return sum([i * (i + 1) for i in range(n)])",
    "# Definition for an arithmetic progression.\nclass ArithmeticProgression:\n    def __init__(self, start, end, step):\n        self.start = start\n        self.end = end\n        self.step = step\n\n    def __repr__(self):\n        return f\"ArithmeticProgression({self.start}, {self.end}, {self.step})\"\n\n\nclass Solution(object):\n    def findSum(self, prgs):\n        \"\"\"\n        :type prgs: List[ArithmeticProgression]\n        :rtype: int\n        \"\"\"\n        if not prgs:\n            return 0\n        # sum = 0\n        # for p in prgs:\n        #     sum += p.start * p.step\n        #     sum += p.end * p.step\n        # return sum\n        # return sum\n        # dp[i] = sum(dp[i-1] + p.start * p.step for i in range(1, p.end + 1))\n        dp = [0] * (prgs[-1].end + 1)\n        for p in prgs:\n            for i in range(1, p.end + 1):\n                dp[i] = dp[i - 1] + p.start * p.step\n        return sum(dp)\n\n\n# Note:\n# 1. It is possible that the sum is not unique.\n# 2. There are many possible solutions.\n# 3. The problem is to solve the problem.\n# 4. It is possible to solve the problem by the time complexity is O(n).\n# 5. It is possible to solve the problem by the space complexity is O(n).\n# 6. The problem is to solve the problem.\n# 7. It is possible to solve the problem by the time complexity is O(n).\n# 8. It is possible to solve the problem by the space complexity is O(n).\n# 9. It is possible to solve the problem by the time complexity is O(n).\n# 10. It is possible to solve the problem by the space complexity is O(n).\n# 11. The solution is not unique.",
    "# Definition for an arithmetic progression.\nclass ArithmeticProgression(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"%s:%s:%s\" % (self.a, self.b, self.c)\n\n\nclass Solution(object):\n    def sumOfPro(self, nums):\n        \"\"\"\n        :type nums: List[ArithmeticProgression]\n        :rtype: int\n        \"\"\"\n        def add(nums, a, b, c):\n            return nums[0] + a * nums[1] + b * nums[2] + c * nums[3]\n\n        res = 0\n        for p in nums:\n            res += add(nums, p.a, p.b, p.c)\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().sumOfPro([1, 2, 3, 4])\n    print Solution().sumOfPro([1, 2, 3])\n    print Solution().sumOfPro([1, 2, 3, 4, 5])\n    print Solution().sumOfPro([1, 2, 3, 4, 5, 6, 7])",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def getSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is None:\n            return self.getSum(root.right) + root.val\n        if root.right is None:\n            return self.getSum(root.left) + root.val\n        return self.getSum(root.left) + self.getSum(root.right) + root.val\n\n# Note:\n# Use the following DP to solve this problem.\n# If the left node is None, we can just add the right node to the sum.\n# If the right node is None, we can just add the left node to the sum.\n# If both left and right node is not None, we can add the sum of left node and the sum of right node to the sum.\n# \n# Time complexity: O(n)\n# Space complexity: O(n)",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/\nclass Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while a < b:\n            ans += a\n            a += 1\n        return ans\n\n# Note:\n#  1. The input is valid.\n#  2. The input is positive.\n#  3. The input is not negative.\n#  4. The input is not zero.\n#  5. The sum of the arithmetic progression is not overflow.\n#  6. The sum of the arithmetic progression is not overflow.\n#  7. The sum of the arithmetic progression is not overflow.\n#  8. The sum of the arithmetic progression is not overflow.\n#  9. The sum of the arithmetic progression is not overflow.",
    "def get_sum(n, start, end):\n    return end - start + (end - start) % n\n\ndef is_proper_increment(n, start, end):\n    return start + n - end == n\n\ndef solve(n):\n    start = 0\n    end = 1\n    sum = 0\n    while end < n:\n        sum += get_sum(n, start, end)\n        if is_proper_increment(n, start, end):\n            start = end\n            end += n\n        else:\n            end += n - end % n\n    return sum\n\nif __name__ == '__main__':\n    print solve(10)\n    print solve(100)\n    print solve(1000)\n    print solve(10000)\n    print solve(100000)",
    "class Solution:\n    # @return an integer\n    def getSum(self, a, b):\n        return a + b + b * (b + 1) / 2\n\n    # @param {integer[]} nums\n    # @return {integer}\n    def getSumArr(self, nums):\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        return sum\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getSumArr([1, 2, 3, 4, 5]))\n    print(sol.getSumArr([0, 0, 0, 0, 0]))",
    "def find_sum(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return sum((a+b)/2)\n    else:\n        return sum((a+b)/2) + find_sum(a, b-1)\n\n\"\"\"\nSample Input\n\n3\n1\n2\n\"\"\"\n\ndef find_sum_2(a, b):\n    return sum(a[i]+b[i] for i in range(len(a)) if i < len(b))\n\n\"\"\"\nSample Output\n\n2\n2\n\"\"\"\n\ndef find_sum_3(a, b):\n    if len(a) == 1:\n        return sum(a[0])\n    elif len(a) == 2:\n        return sum(a[0]+a[1])\n    else:\n        return sum((a[i]+a[i+1]) for i in range(len(a)-1))\n\n\"\"\"\nSample Input\n\n4\n2\n\"\"\"\n\ndef find_sum_4(a, b):\n    return sum(a[i]+b[i] for i in range(len(a)) if i < len(b))\n\n\"\"\"\nSample Output\n\n4\n2\n\"\"\"\n\ndef find_sum_5(a, b):\n    if len(a) == 1:\n        return sum(a[0])\n    elif len(a) == 2:\n        return sum(a[0]+a[1])\n    else:\n        return sum((a[i]+a[i+1]) for i in range(len(a)-1))\n\n\"\"\"\nSample Input\n\n1\n2\n\"\"\"\n\ndef find_sum_6(a, b):\n    if len(a) == 1:\n        return sum(a[0])\n    elif len(a) == 2:\n        return sum(a[0]+a[1])\n    else:\n        return sum((a[i]+a[i+1]) for i in range(len(a)-1))\n\n\"\"\"\nSample Output\n\n2\n2\n\"\"\"\n\ndef find_sum_7(a, b):\n    if len(a) == 1:",
    "# https://oj.leetcode.com/problems/sum-of-arithmetic-progression/\n# tags: medium, array, math, sum\n\n\"\"\"\nExample 1:\nInput: [1,2,3,4]\nOutput: 15\nExplanation:\n1, 2, 3, 4\n1, 3, 5, 7\n1, 4, 6, 10\n1, 5, 9, 14\n\nExample 2:\nInput: [1,2,3,4,5]\nOutput: 35\nExplanation:\n1, 2, 3, 4, 5\n1, 2, 4, 6, 10\n1, 3, 5, 7, 14\n1, 4, 6, 9, 20\n1, 5, 10, 15, 25\n\nExample 3:\nInput: [1,1,1,1,1,1]\nOutput: 1\nExplanation:\n1, 1, 1, 1, 1, 1\n1, 2, 4, 6, 10\n1, 3, 6, 12, 20\n1, 4, 10, 18, 30\n1, 5, 15, 25, 45\n\nExample 4:\nInput: [1,2,3,4,5,6,7,8]\nOutput: 68\nExplanation:\n1, 2, 3, 4, 5, 6, 7, 8\n1, 3, 5, 8, 11, 17, 24, 35\n1, 4, 7, 10, 14, 21, 28, 41\n1, 5, 10, 15, 21, 28, 42, 56\n1, 6, 12, 18, 24, 32, 42, 58\n1, 7, 15, 22, 29, 37, 49, 64\n1, 8, 18, 26, 34, 45, 55, 70\n\n\"\"\"\n\n\nclass Solution:\n    def getSumOfArithmeticProgression(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        l = len(A)\n        if l <= 1:\n            return 0\n        if l == 2:\n            return A[0] + A[1]\n        if l % 2 == 0:\n            return self.getSumOfArithmeticProgression(A[0:",
    "def sum_of_arithmetic_progression(arithmetic_progression):\n    \"\"\"\n    :type arithmetic_progression: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(arithmetic_progression)\n\n# Your Code Below:\n\ndef main():\n    arithmetic_progression = [1,2,3,4,5,6]\n    print(sum_of_arithmetic_progression(arithmetic_progression))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(a, b + 1):\n            ans += i\n        return ans\n\nif __name__ == \"__main__\":\n    print Solution().getSum(1, 2)",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/\n# \n# Definition for an arithmetic progression.\n# class ArithmeticProgression(object):\n#     def __init__(self, a, b):\n#         self.a = a\n#         self.b = b\n# \n#     def get(self, n):\n#         return self.a * (n - 1) + self.b * n\n\nclass Solution(object):\n    def getSum(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(arr)\n        if n == 0:\n            return 0\n        \n        def get(i):\n            if i == 0:\n                return arr[0]\n            return arr[i] + get(i - 1)\n            \n        return get(n - 1)\n\n\nif __name__ == '__main__':\n    arr = [3, 4, 5, 6, 7, 8]\n    print(Solution().getSum(arr))",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        pro = a\n        while pro <= b:\n            total += pro\n            pro += a\n        return total\n\n\nif __name__ == '__main__':\n    so = Solution()\n    print so.getSum(1, 10)\n    print so.getSum(1, 3)\n    print so.getSum(1, 3)\n    print so.getSum(1, 2)\n    print so.getSum(1, 2)\n    print so.getSum(1, 5)",
    "# https://oj.leetcode.com/problems/find-sum-of-arithmetic-progression/\n# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, start, end, step):\n#         self.start = start\n#         self.end = end\n#         self.step = step\n\nclass Solution(object):\n    def getSum(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        s = 0\n        for i in range(1, len(arr)):\n            s += arr[i-1] + arr[i]\n        return s",
    "import unittest\n\n\nclass TestArithmeticProgression(unittest.TestCase):\n\n    def test_arithmetic_progression(self):\n        self.assertEqual(\n            sum(range(1, 10)),\n            25\n        )\n\n    def test_arithmetic_progression_2(self):\n        self.assertEqual(\n            sum(range(1, 20)),\n            55\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 0\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    print sum_of_arithmetic_progression(1)\n    print sum_of_arithmetic_progression(2)\n    print sum_of_arithmetic_progression(3)\n    print sum_of_arithmetic_progression(10)\n    print sum_of_arithmetic_progression(100)\n    print sum_of_arithmetic_progression(1000)\n    print sum_of_arithmetic_progression(10000)\n    print sum_of_arithmetic_progression(100000)\n    print sum_of_arithmetic_progression(1000000)\n    print sum_of_arithmetic_progression(10000000)\n    print sum_of_arithmetic_progression(100000000)",
    "from math import floor, ceil\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def getSum(self, n, k):\n        res = 0\n        for i in range(1, n):\n            res += i\n        if k == 1:\n            return res\n        if k == 2:\n            return res + n\n        for i in range(2, k):\n            res += n - i + 1\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    n = 3\n    k = 2\n    print(sol.getSum(n, k))\n    n = 3\n    k = 5\n    print(sol.getSum(n, k))\n    n = 5\n    k = 2\n    print(sol.getSum(n, k))\n    n = 5\n    k = 5\n    print(sol.getSum(n, k))\n    n = 6\n    k = 2\n    print(sol.getSum(n, k))\n    n = 6\n    k = 5\n    print(sol.getSum(n, k))\n    n = 6\n    k = 6\n    print(sol.getSum(n, k))",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while a < b:\n            ans += a\n            a += 1\n        return ans",
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression(object):\n#     def __init__(self, start, end, step):\n#         self.start = start\n#         self.end = end\n#         self.step = step\n#\n#     def __repr__(self):\n#         return \"ArithmeticProgression({}, {}, {})\".format(self.start, self.end, self.step)\n#\n#\n# class Solution(object):\n#     def getSum(self, start, end, step):\n#         \"\"\"\n#         :type start: int\n#         :type end: int\n#         :type step: int\n#         :rtype: int\n#         \"\"\"\n#         if start == end:\n#             return start\n#         if step == 0:\n#             return 0\n#         if step == 1:\n#             return end - start\n#\n#         sum = start + step\n#         for i in range(step, end, step):\n#             sum += i\n#         return sum\n#\n#\n# if __name__ == '__main__':\n#     s = Solution()\n#     print s.getSum(1, 3, 1)\n#     print s.getSum(1, 3, 2)\n#     print s.getSum(1, 3, 3)\n#     print s.getSum(1, 3, 4)",
    "def sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum_of_arithmetic_progression(n - 1) + n\n\n\nif __name__ == '__main__':\n    print sum_of_arithmetic_progression(10)",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a + b - 1\n\n\nif __name__ == '__main__':\n    assert Solution().getSum(1, 2) == 3\n    assert Solution().getSum(1, 3) == 4\n    assert Solution().getSum(1, 7) == 8\n    assert Solution().getSum(5, 5) == 0\n    assert Solution().getSum(2, 3) == 1\n    assert Solution().getSum(6, 7) == 11",
    "def get_sum_of_arithmetic_progression(start, end, step):\n    \"\"\"\n    For example, given [1, 2, 3, 4, 5], the sum is 16.\n    \n    Note:\n        All the numbers given are positive integers.\n    \"\"\"\n    \n    total = 0\n    for i in range(start, end, step):\n        total += i\n    return total",
    "class Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: The sum of arithmetic progression\n    \"\"\"\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.getSum_recursive(n)\n\n    def getSum_recursive(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.getSum_recursive(n - 1) + self.getSum_recursive(n - 2)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getSum(1))\n    print(sol.getSum(2))\n    print(sol.getSum(3))\n    print(sol.getSum(4))\n    print(sol.getSum(5))\n    print(sol.getSum(6))",
    "def arith_progression(n, m):\n    if m == 0:\n        return n\n    if m == 1:\n        return n + 1\n    return arith_progression(n + 1, m - 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    print(arith_progression(n, m))",
    "# https://leetcode.com/problems/find-sum-of-arithmetic-progression/\n\nclass Solution(object):\n    def findSumOfArithmeticProgression(self, A, B):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :rtype: int\n        \"\"\"\n        if A < 1 or B < 1:\n            return 0\n        if A == 1:\n            return B\n        if B == 1:\n            return A\n        if A % 2 == 0 and B % 2 == 0:\n            return self.findSumOfArithmeticProgression(A/2, B/2) + self.findSumOfArithmeticProgression(A/2, B/2+1)\n        return self.findSumOfArithmeticProgression(A-1, B-1) + self.findSumOfArithmeticProgression(A-1, B)",
    "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 6\n        if n == 5:\n            return 15\n        if n == 6:\n            return 42\n        if n == 7:\n            return 132\n        if n == 8:\n            return 270\n        if n == 9:\n            return 462\n        if n == 10:\n            return 1092\n        if n == 11:\n            return 1980\n        if n == 12:\n            return 3780\n        if n == 13:\n            return 7140\n        if n == 14:\n            return 14260\n        if n == 15:\n            return 28920\n        return n * (n + 1) / 2",
    "# Definition for an arithmetic progression.\nclass ArithmeticProgression:\n    def __init__(self, start, end, step):\n        self.start = start\n        self.end = end\n        self.step = step\n\nclass Solution:\n    # @param {ArithmeticProgression} ap\n    # @return {integer}\n    def getSum(self, ap):\n        \"\"\"\n        :type ap: ArithmeticProgression\n        :rtype: int\n        \"\"\"\n        if ap.start == ap.end:\n            return ap.start\n        if ap.step == 0:\n            return 0\n        return ap.start + (ap.end - ap.start) * ap.step",
    "def find_sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n        if i % 2 == 0:\n            total += i/2\n    return total\n\nif __name__ == \"__main__\":\n    print(find_sum_of_arithmetic_progression(5))",
    "from math import sqrt\n\ndef find_sum(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n\nif __name__ == '__main__':\n    n = int(input())\n    sum = find_sum(n)\n    print(sum)",
    "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __repr__(self):\n        return \"Interval(%s, %s)\" % (self.start, self.end)\n\n\nclass Solution(object):\n    def getSum(self, A):\n        \"\"\"\n        :type A: List[Interval]\n        :rtype: int\n        \"\"\"\n        total = 0\n        ans = 0\n        for i in range(len(A)):\n            total += A[i].end - A[i].start\n            ans += total\n        return ans",
    "# https://oj.leetcode.com/problems/find-sum-of-arithmetic-progression/\n# Given n, return the sum of all integers a, such that an is a arithmetic progression.\n# \n# Example 1:\n# Input: n = 1\n# Output: 1\n# Example 2:\n# Input: n = 2\n# Output: 3\n# Example 3:\n# Input: n = 3\n# Output: 8\n# Example 4:\n# Input: n = 4\n# Output: 15\n# Example 5:\n# Input: n = 5\n# Output: 35\n# Note:\n# n will be an integer in the range [1, 10000].\n# \n# Follow up:\n# Could you solve it with constant space complexity? (Note: The output may be broken down into a few different cases.)\n# \n# Related Topics\n# Math\n\nclass Solution(object):\n    def findSumArithmeticSeries(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        \n        ans = 1\n        for i in range(2, n + 1):\n            ans += i\n            ans %= n\n        return ans",
    "# https://oj.leetcode.com/problems/add-two-numbers-aka-subtract-two-numbers/\n# tags: easy, array, math\n\nclass Solution(object):\n    def add_numbers(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        i = 0\n        while i < a:\n            ans += i\n            i += 1\n        j = 0\n        while j < b:\n            ans += j\n            j += 1\n        return ans\n\n\nif __name__ == \"__main__\":\n    print Solution().add_numbers(2, 3)\n    print Solution().add_numbers(3, 5)\n    print Solution().add_numbers(5, 7)\n    print Solution().add_numbers(5, 6)",
    "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def getSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        left_sum = self.getSum(root.left)\n        right_sum = self.getSum(root.right)\n        return left_sum + root.val + right_sum",
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    # @param {ArithmeticProgression} p\n    # @return {integer}\n    def getSum(self, p):\n        if p.a + p.b > p.c:\n            return p.a + p.b - p.c\n        else:\n            return p.a + p.b",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/description/\n\nclass Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(a, b+1):\n            res += i\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum(1, 2)\n    print s.getSum(2, 3)\n    print s.getSum(3, 4)\n    print s.getSum(4, 5)\n    print s.getSum(5, 6)",
    "def arithmetic_progression(start, end, step):\n    total = 0\n    for i in range(start, end, step):\n        total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(arithmetic_progression(1, 20, 2))\n    print(arithmetic_progression(1, 20, 3))\n    print(arithmetic_progression(1, 20, 10))",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        ret = self.findSum(root.left) + self.findSum(root.right)\n        if root.val == 0:\n            return ret\n        else:\n            return root.val + ret",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 1:\n            return b\n        if a > b:\n            return self.getSum(a - 1, b) + a\n        else:\n            return self.getSum(b, a - 1) + b\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getSum(1, 4)\n    print s.getSum(1, 3)\n    print s.getSum(2, 3)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        s = 0\n        for i in range(2, len(nums)):\n            s += nums[i] - nums[i-1]\n        return s",
    "# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def getSum(self, A):\n        \"\"\"\n        :type A: List[ArithmeticProgression]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        \n        ans = 0\n        for i in range(1, len(A)):\n            ans += A[i].c - A[i-1].c\n        return ans",
    "class Solution(object):\n    \"\"\"\n    @param lowerLimit: lower limit of the range\n    @param upperLimit: upper limit of the range\n    @param start: start value of the range\n    @param end: end value of the range\n    @return: the sum of the arithmetic progression\n    \"\"\"\n    def getSum(self, lowerLimit, upperLimit, start, end):\n        \"\"\"\n        :type lowerLimit: int\n        :type upperLimit: int\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > upperLimit:\n            return 0\n        if start < lowerLimit:\n            return 0\n        if start == lowerLimit and start == upperLimit:\n            return start\n        \n        ret = 0\n        while start < upperLimit:\n            ret += start\n            start += 1\n            \n        return ret\n        \n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getSum(1, 10, 1, 10)\n    print s.getSum(1, 10, 1, 4)",
    "def sum_of_arithmetic_progression(n):\n    if n == 0:\n        return 0\n    else:\n        return sum_of_arithmetic_progression(n - 1) + n\n\n# Time:  O(n)\n# Space: O(1)\n# DP\n# DP[i] stores the sum of arithmetic progression of length i.\n# DP[i] = DP[i - 1] + n\n# DP[0] = 0\n# DP[1] = 1\n# DP[2] = 1 + 1\n#...\n# DP[n] = 1 + 1 +... + 1 + n\n#\n# Time:  O(n)\n# Space: O(n)\n# DP[i] stores the sum of arithmetic progression of length i.\n# DP[i] = DP[i - 1] + n\n# DP[0] = 0\n# DP[1] = 1\n# DP[2] = 1 + 1\n#...\n# DP[n] = 1 + 1 +... + 1 + n\n#\n# Time:  O(n)\n# Space: O(n)\n# DP[i] stores the sum of arithmetic progression of length i.\n# DP[i] = DP[i - 1] + n\n# DP[0] = 0\n# DP[1] = 1\n# DP[2] = 1 + 1\n#...\n# DP[n] = 1 + 1 +... + 1 + n\n#\n# Time:  O(n)\n# Space: O(n)\n# DP[i] stores the sum of arithmetic progression of length i.\n# DP[i] = DP[i - 1] + n\n# DP[0] = 0\n# DP[1] = 1\n# DP[2] = 1 + 1\n#...\n# DP[n] = 1 + 1 +... + 1 + n\n#\n# Time:  O(n)\n# Space: O(n)\n# DP[i] stores the sum of arithmetic progression of length i.\n# DP[i] = DP[i - 1] + n\n# DP[0] = 0\n# DP[1] = 1\n# DP[2] = 1 + 1\n#...\n# DP",
    "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.findSum(1, n, 1)\n\n    def findSum(self, a, b, c):\n        if b > a:\n            return 0\n        if b == a:\n            return c\n        return self.findSum(a, b, c + a) + self.findSum(b + 1, a, c + b)\n\n\nif __name__ == '__main__':\n    Solution().getSum(5)",
    "from collections import Counter\n\nclass Solution:\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.sum(1, n)\n\n    def sum(self, start, end):\n        if end <= start:\n            return 0\n        if end == start + 1:\n            return 1\n        return sum(self.sum(start, end - 1) + self.sum(start + 1, end))\n\n\nif __name__ == '__main__':\n    assert Solution().getSum(1) == 1\n    assert Solution().getSum(2) == 2\n    assert Solution().getSum(3) == 5\n    assert Solution().getSum(4) == 14\n    assert Solution().getSum(5) == 42",
    "def get_sum(n, m):\n    return n * (m + 1)\n\nif __name__ == \"__main__\":\n    print(get_sum(10, 1))\n    print(get_sum(10, 2))\n    print(get_sum(10, 3))\n    print(get_sum(10, 4))\n    print(get_sum(10, 5))",
    "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def getSum(self, A, m, n):\n        \"\"\"\n        :type A: List[Interval]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return A[0].end\n        if m > n:\n            m, n = n, m\n        for i in range(m):\n            ans += A[i].end\n        for j in range(n-1, -1, -1):\n            ans += A[j].start\n        return ans\n\n    # @param A, a list of Interval.\n    # @param m, the start of a arithmetic progression.\n    # @param n, the end of a arithmetic progression.\n    # @return an integer\n    def getSum_1(self, A, m, n):\n        \"\"\"\n        :type A: List[Interval]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return A[0].end\n        if m > n:\n            m, n = n, m\n        ans = 0\n        for i in range(m):\n            ans += A[i].end\n        for j in range(n-1, -1, -1):\n            ans += A[j].start\n        return ans\n\na = [[Interval(0, 10), Interval(5, 15), Interval(20, 25)], [Interval(15, 20), Interval(20, 25), Interval(25, 30)], [Interval(20, 25), Interval(25, 30), Interval(30, 40)]]\n# a = [[Interval(0, 10), Interval(5, 15), Interval(20, 25",
    "# https://www.hackerrank.com/challenges/arithmetic-progression/problem\n\ndef sum_arithmetic_progression(n):\n    return sum(a + b for a, b in zip(range(1, n + 1), range(1, n + 1)))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(sum_arithmetic_progression(n))",
    "import math\n\ndef sum_of_arithmetic_progression(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a < b:\n        return a * (b - a) + b\n    elif a == b:\n        return a\n    elif a > b:\n        return b * (a - b) + a\n\nif __name__ == '__main__':\n    print sum_of_arithmetic_progression(1, 4)\n    print sum_of_arithmetic_progression(1, 5)\n    print sum_of_arithmetic_progression(3, 10)\n    print sum_of_arithmetic_progression(3, 11)\n    print sum_of_arithmetic_progression(10, 11)\n    print sum_of_arithmetic_progression(1, 100)",
    "def find_sum_of_arithmetic_progression(a, b):\n    return sum(a) + sum(x * (b - x) for x in range(1, b))\n\nif __name__ == '__main__':\n    print(find_sum_of_arithmetic_progression(1, 3))",
    "def arithmetic_progression(arithmetic_sequence):\n    \"\"\"\n    :type arithmetic_sequence: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in arithmetic_sequence:\n        total += i\n        yield total\n\n\nif __name__ == \"__main__\":\n    assert arithmetic_progression([1,2,3,4]) == 10\n    assert arithmetic_progression([1,2,3,4,5]) == 15\n    assert arithmetic_progression([1,2,3,4,5,6]) == 22\n    assert arithmetic_progression([1,2,3,4,5,6,7]) == 29",
    "def find_sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(range(1, n+1))\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(find_sum_of_arithmetic_progression(n))",
    "class Solution(object):\n    def getSum(self, a, b, n):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return a\n        if n == 2:\n            return a + b\n        if n == 3:\n            return a * 2 + b\n        if n == 4:\n            return a * 3 + b\n        if n == 5:\n            return a * 4 + b\n        return self.getSum(a, b, n - 1) + self.getSum(a, b, n - 2)\n\n\nif __name__ == '__main__':\n    print Solution().getSum(1, 1, 4)",
    "# https://www.hackerrank.com/challenges/arithmetic-progression/problem\n\ndef sum_of_progression(n):\n    if n == 1:\n        return n\n    return n * (n + 1) / 2\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    print(sum_of_progression(n))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getSum(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        # 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n        s = 0\n        for i in range(1, len(A)):\n            s += A[i] - A[i-1]\n        return s\n\n\nif __name__ == '__main__':\n    print(Solution().getSum([1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...]))",
    "def sum_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    print(sum_progression(10))\n    print(sum_progression(100))",
    "# https://leetcode.com/problems/sum-of-arithmetic-progression/\n\nclass Solution(object):\n    def sumOfArithmeticProgression(self, lower, upper):\n        \"\"\"\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        if lower == upper:\n            return lower\n        \n        ans = 0\n        for i in range(lower, upper):\n            ans += i\n        return ans",
    "from collections import deque\n\ndef arithmetic_progression(n):\n    \"\"\"\n    For given n, return the sum of arithmetic progression.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 21\n    elif n == 9:\n        return 34\n    elif n == 10:\n        return 55\n    else:\n        return sum(arithmetic_progression(i) for i in range(1, n))\n\n\nif __name__ == '__main__':\n    print(arithmetic_progression(7))\n    print(arithmetic_progression(100))",
    "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return 0\n        return self.getSum(n - 1) + self.getSum(n - 2) + self.getSum(n - 3)\n\n\nif __name__ == '__main__':\n    assert Solution().getSum(5) == 15\n    assert Solution().getSum(6) == 24\n    assert Solution().getSum(7) == 31\n    assert Solution().getSum(8) == 42",
    "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def findSumOfArithmeticProgression(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if len(intervals) == 0:\n            return 0\n        if len(intervals) == 1:\n            return intervals[0].end\n        ans = intervals[0].end\n        for i in range(1, len(intervals)):\n            ans += intervals[i].start\n            ans %= (intervals[i].end - intervals[i].start + 1)\n        return ans\n\n\nif __name__ == \"__main__\":\n    assert Solution().findSumOfArithmeticProgression([]) == 0\n    assert Solution().findSumOfArithmeticProgression([1]) == 1\n    assert Solution().findSumOfArithmeticProgression([1, 2]) == 3\n    assert Solution().findSumOfArithmeticProgression([1, 2, 3]) == 6\n    assert Solution().findSumOfArithmeticProgression([1, 2, 3, 4]) == 10",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def getSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        return self.helper(root, 0)\n\n    def helper(self, root, sum):\n        if not root:\n            return sum\n        return self.helper(root.left, sum + root.val) + self.helper(root.right, sum + root.val)\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(Solution().getSum(root))",
    "def sum_of_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(range(1, n+1))\n\n\nif __name__ == '__main__':\n    print(sum_of_arithmetic_progression(100))",
    "def sum_arithmetic_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum_arithmetic_progression(n-1) + n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(5))",
    "class Solution:\n    # @param {integer} A\n    # @param {integer} B\n    # @param {integer} C\n    # @return {integer}\n    def getSum(self, A, B, C):\n        return B + (A * (C + B)) / (C - A)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getSum(1, 4, 6))",
    "from collections import deque\n\nclass Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        q = deque()\n        q.appendleft(a)\n        ans = 0\n        while len(q) > 0:\n            ans += q.popleft()\n            if len(q) > 0:\n                ans += b - q.popleft()\n        return ans\n\nif __name__ == '__main__':\n    print(Solution().getSum(1,2))\n    print(Solution().getSum(1,3))\n    print(Solution().getSum(1,4))",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} start\n    # @param {integer} end\n    # @return {integer}\n    def getSum(self, n, start, end):\n        if start > end:\n            return 0\n        if start == end:\n            return start\n        if start == end + 1:\n            return start\n        \n        # find the midpoint\n        mid = (start + end) / 2\n        \n        left = self.getSum(n, start, mid)\n        right = self.getSum(n, mid, end)\n        \n        return left + right"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}