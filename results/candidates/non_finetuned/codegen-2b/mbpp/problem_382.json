{
  "problem": {
    "task_id": "MBPP/393",
    "prompt": "Write a function to find the list with maximum length using lambda function.",
    "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
    "test_list": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ],
    "challenge_test_list": [],
    "problem_id": 382
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_length(list_to_check):\n    \"\"\"\n    Function to find the list with maximum length using lambda function.\n\n    Arguments:\n    list_to_check -- list of integers\n\n    Returns:\n    maximum length of list\n    \"\"\"\n    return max([len(list_to_check)] + list(map(lambda x: len(str(x)), list_to_check)))",
    "# https://www.hackerrank.com/challenges/lambda-max\n\ndef max_length(lst):\n    length = 0\n    for x in lst:\n        if length < len(x):\n            length = len(x)\n    return length\n\nlst = [3, 5, 1, 6, 1, 3]\n\nprint(max_length(lst))",
    "#!/usr/bin/python\n# -*- coding:utf-8 -*-\nimport math\n\ndef find_max_len(lst):\n    \"\"\"\n    lst: list of strings\n    return: a list with max length\n    \"\"\"\n    return max(lst, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    print find_max_len([\"hello\", \"world\"])\n    print find_max_len([\"hello\", \"world\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"])\n    print find_max_len([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\",",
    "def max_length(list_):\n    \"\"\"\n    :param list_: list of integers\n    :return: the list with maximum length\n    \"\"\"\n    max_len = 0\n    for i in list_:\n        if i > max_len:\n            max_len = i\n    return max_len\n\ndef main():\n    list_ = [1, 2, 3, 4, 5]\n    print(max_length(list_))\n\nif __name__ == '__main__':\n    main()",
    "def find_max_length_list(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(x))\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [1, 2], [3]]\n    print find_max_length_list(list_of_lists)\n\n\nif __name__ == '__main__':\n    main()",
    "def max_length(l):\n    return max(map(lambda x: len(x), l))\n\nprint(max_length([1, 2, 3, 4, 5]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_length([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))",
    "def find_max_length(arr):\n    return max([len(arr[i]) for i in range(len(arr))])\n\narr = [1, 2, 3, 4, 5]\nprint(find_max_length(arr))",
    "import timeit\n\nstart = timeit.default_timer()\n\ndef max_length(lst):\n    length = 0\n    for i in lst:\n        if len(i) > length:\n            length = len(i)\n    return length\n\nprint(\"Time elapsed: {}\".format(timeit.default_timer() - start))",
    "# https://www.youtube.com/watch?v=c-hF1Z2qb2Y&t=3m15s\ndef max_len_lambda(seq):\n    max_len = 0\n    for i in seq:\n        if type(i) == int:\n            max_len = max(max_len, len(i))\n        elif type(i) == str:\n            max_len = max(max_len, len(i))\n    return max_len\n\ndef test_max_len_lambda():\n    assert max_len_lambda([1,2,3]) == 3\n    assert max_len_lambda([1,2,3,4]) == 4\n    assert max_len_lambda([1,2,3,4,5]) == 5\n\nif __name__ == '__main__':\n    test_max_len_lambda()",
    "import unittest\n\n\ndef find_max_length(list_of_strings):\n    return max(map(len, list_of_strings))\n\n\nclass TestFunction(unittest.TestCase):\n\n    def test_find_max_length(self):\n        self.assertEqual(find_max_length(['abc', 'def', 'abc', 'def', 'abc']), 3)\n        self.assertEqual(find_max_length(['abc', 'def', 'abc', 'def', 'abc', 'abc']), 3)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "import math\nimport time\n\ndef max_length_list(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for item in my_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return max_length\n\n\ndef max_length_list_using_lambda(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for item in my_list:\n        if max(len(str(item)), max_length) > max_length:\n            max_length = max(len(str(item)), max_length)\n    return max_length\n\n\ndef max_length_list_using_lambda2(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for item in my_list:\n        if max(len(str(item)), max_length) > max_length:\n            max_length = max(len(str(item)), max_length)\n    return max_length\n\n\ndef max_length_list_using_lambda3(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for item in my_list:\n        if max(len(str(item)), max_length) > max_length:\n            max_length = max(len(str(item)), max_length)\n    return max_length\n\n\ndef max_length_list_using_lambda4(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for item in my_list:\n        if max(len(str(item)), max_length) > max_length:\n            max_length = max(len(str(item)), max_length)\n    return max_length\n\n\ndef max_length_list_",
    "def find_max_length_list(list_of_lists):\n    \"\"\"\n    Input: list of lists\n    Output: the maximum length list\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_list\n\n\n# Testing\nprint find_max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
    "# +++your code here+++\n# Write functions that get a list and return the length of the list\n\ndef max_length(list):\n    return max(map(lambda x: len(x), list))\n\n# Test Cases\nprint max_length([1,2,3])\nprint max_length([])\nprint max_length([1,2,3,4])\nprint max_length([1,2,3,4,5])\nprint max_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203",
    "#!/usr/bin/env python\n\ndef findMax(L):\n    maxValue = 0\n    maxIndex = 0\n    for index in range(0, len(L)):\n        if L[index] > maxValue:\n            maxValue = L[index]\n            maxIndex = index\n    return maxIndex, maxValue\n\nif __name__ == '__main__':\n    L = [1,2,3,4,5,6,7,8,9]\n    maxIndex, maxValue = findMax(L)\n    print(maxIndex, maxValue)\n    \n    L = [1,2,3,4,5,6,7,8,9,10]\n    maxIndex, maxValue = findMax(L)\n    print(maxIndex, maxValue)\n    \n    L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    maxIndex, maxValue = findMax(L)\n    print(maxIndex, maxValue)\n    \n    L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    maxIndex, maxValue = findMax(L)\n    print(maxIndex, maxValue)",
    "#!/usr/bin/env python\n\ndef max_length_list(list_to_max_length):\n    \"\"\"\n    Input:\n        list_to_max_length: A list of integers.\n    Output:\n        A list of integers, which is the maximum length of the list.\n    \"\"\"\n    # YOUR CODE HERE\n    return list_to_max_length[0]\n\n\nif __name__ == '__main__':\n    list_to_max_length = [1, 2, 3, 4, 5]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6, 7]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length_list(list_to_max_length))\n    list_to_max_length = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(max_length_list(list_to_max_length))",
    "from collections import deque\n\ndef max_length(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_length_queue = deque()\n    for num in nums:\n        max_length_queue.append(num)\n        if len(max_length_queue) > max_length:\n            max_length = len(max_length_queue)\n    return max_length\n\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    print(max_length(nums))",
    "#!/usr/bin/python\n\ndef max_length(L):\n  return max(L, key = lambda x: len(x))\n\nprint max_length([1, 2, 3])\nprint max_length([1, 2, 3, 4, 5])\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
    "#!/usr/bin/env python\n\ndef max_length_lambda(list_of_ints):\n    return max(list_of_ints, key=lambda x: len(str(x)))\n\nprint max_length_lambda([1,2,3,4,5])\nprint max_length_lambda([1,2,3,4,5,6,7,8,9])",
    "def max_length_list(my_list):\n    max_length = 0\n    for item in my_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n\nprint max_length_list([1,2,3,4,5])",
    "# https://www.hackerrank.com/challenges/lambda-max\ndef max_length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst) - i >= max_length:\n            max_length = len(lst) - i\n    return max_length\n\nprint max_length([1, 2, 3, 4, 5, 6, 7])",
    "def max_len_list(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return max(map(lambda x: len(str(x)), lst))",
    "#!/usr/bin/env python\n\ndef max_length_lambda(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    print(max_length_lambda(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length_lambda(lst))",
    "# This is the function to be used\ndef max_length_lambda(list):\n    return max(list, key=lambda x: len(x))\n\n\n# This is the actual function\ndef max_length_lambda_function():\n    list_of_strings = [\n        \"This is a string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",\n        \"This is another string\",",
    "def findMaxLengthList(lst):\n    length = lambda x: len(x)\n    maxLength = max(map(length, lst))\n    return maxLength\n\nif __name__ == \"__main__\":\n    lst = [1,2,3]\n    print(findMaxLengthList(lst))\n    lst = [1,2,3,4]\n    print(findMaxLengthList(lst))\n    lst = [1,2,3,4,5,6]\n    print(findMaxLengthList(lst))",
    "#!/usr/bin/env python\n\n# Write your code here\n# This code is to calculate the maximum length of a list.\n\ndef max_length(list):\n    return max([len(list[i]) for i in range(len(list))])\n\nprint max_length([1, 2, 3, 4, 5])",
    "def max_len_list(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    def max_len(l):\n        return max(l, key=lambda x: len(str(x)))\n\n    return max(map(max_len, list_))\n\nprint(max_len_list([1,2,3,4,5,6,7,8,9]))",
    "import functools\n\ndef find_max_list(list_to_check):\n    \"\"\"\n    Find the list with maximum length using lambda function.\n\n    :param list_to_check: the list to check\n    :return: the maximum length of the list\n    \"\"\"\n    max_list = list_to_check[0]\n    for element in list_to_check:\n        if element > max_list:\n            max_list = element\n\n    return max_list\n\n\ndef main():\n    list_to_check = [1, 3, 5, 7, 9]\n    print(\"Max length using lambda function: {}\".format(find_max_list(list_to_check)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "#Write a function to find the list with maximum length using lambda function.\n#We can use a lambda function to return a list, because we can use list.\n#\n#\n#Example:\n#\n#Input: [1,2,3,4,5]\n#Output: [1,3,4,5]\n#Explanation:\n#\n#lambda function is used to return a list,\n#because we can use list to return a list.\n#\n#\n#\n#\n#Note:\n#\n#The input array will have a length in range [1, 100].\n#The length of the input array will not exceed 1,000.\n#The input array will have only unique integer values.\n#\n#\n#\n#\n\n#\n#My solution:\n#\n#def max_length(arr):\n#    return len(max(arr, key=lambda x: x))\n#\n#\n#\n#\n#Note:\n#\n#The input array will have a length in range [1, 100].\n#The length of the input array will not exceed 1,000.\n#The input array will have only unique integer values.\n#\n#\n#\n#\n\n# Your function will be called like this:\n#\n# def max_length(arr):\n#     return len(max(arr, key=lambda x: x))\n#\n#\n#\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
    "from collections import namedtuple\n\ndef find_max_length_list(lst):\n    '''\n    Find the maximum length list using lambda function.\n    :param lst: List\n    :return: maximum length list\n    '''\n    return max(map(lambda x: len(x), lst))\n\ndef find_max_length_list_2(lst):\n    '''\n    Find the maximum length list using lambda function.\n    :param lst: List\n    :return: maximum length list\n    '''\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        max_len = max(len(i), max_len)\n        max_lst.append(i)\n    return max_len, max_lst\n\ndef find_max_length_list_3(lst):\n    '''\n    Find the maximum length list using lambda function.\n    :param lst: List\n    :return: maximum length list\n    '''\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_lst = [i]\n        else:\n            max_lst.append(i)\n    return max_len, max_lst\n\ndef find_max_length_list_4(lst):\n    '''\n    Find the maximum length list using lambda function.\n    :param lst: List\n    :return: maximum length list\n    '''\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_lst = [i]\n        else:\n            max_lst.append(i)\n    return max_len, max_lst\n\ndef find_max_length_list_5(lst):\n    '''\n    Find the maximum length list using lambda function.\n    :param lst: List\n    :return: maximum length list\n    '''\n    max_len = 0\n    max_l",
    "def max_list(my_list):\n    max_list = [my_list[0]]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_list[-1]:\n            max_list.append(my_list[i])\n    return max_list\n\ndef max_list_lambda(my_list):\n    max_list = [my_list[0]]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_list[-1]:\n            max_list.append(my_list[i])\n    return max(max_list)\n\ndef max_list_lambda_2(my_list):\n    max_list = [my_list[0]]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_list[-1]:\n            max_list.append(my_list[i])\n    return max(max_list)\n\n\ndef max_list_lambda_3(my_list):\n    max_list = [my_list[0]]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_list[-1]:\n            max_list.append(my_list[i])\n    return max(max_list)\n\n\nif __name__ == '__main__':\n    # my_list = [1, 2, 3, 4]\n    my_list = [2, 3, 4, 5]\n    print max_list(my_list)\n    print max_list_lambda(my_list)\n    print max_list_lambda_2(my_list)\n    print max_list_lambda_3(my_list)",
    "def max_length(L):\n    return max(L, key=lambda x: len(x))\n\nL = [1, 2, 3, 4]\nprint(max_length(L))",
    "def max_length(lst):\n    return max(lst)\n\nprint max_length([1, 2, 3])\nprint max_length([1, 2, 3, 4])\nprint max_length([1, 2, 3, 4, 5])\nprint max_length([1, 2, 3, 4, 5, 6])\nprint max_length([1, 2, 3, 4, 5, 6, 7])",
    "# Your function will be called as follows:\n# def findMax(l):\n#    return max(l)\n\ndef findMax(l):\n    return max(l)\n\nprint findMax([1, 2, 3, 4, 5])\n\n# Your function will be called like this:\n# findMax([1, 2, 3, 4, 5])",
    "def find_max(items):\n    max_value = max(items)\n    max_index = 0\n    for i in range(len(items)):\n        if items[i] > max_value:\n            max_value = items[i]\n            max_index = i\n    return max_index, max_value\n\n\ndef test_find_max():\n    assert find_max(range(10)) == (3, 9)\n    assert find_max(range(10, 0, -1)) == (2, 0)\n    assert find_max(range(0, 10, -1)) == (0, 0)\n    assert find_max(range(10, -10, -1)) == (0, 0)\n    assert find_max(range(5, 10, 2)) == (2, 5)\n    assert find_max(range(5, 10, -2)) == (2, 5)\n    assert find_max(range(5, 10, -2)) == (2, 5)\n    assert find_max(range(5, 10, -2)) == (2, 5)\n    assert find_max(range(5, 10, -2)) == (2, 5)\n\nif __name__ == '__main__':\n    test_find_max()",
    "import time\nstart_time = time.time()\n\ndef max_len_lambda(a_list):\n    return max(map(lambda x: len(x), a_list))\n\nprint(max_len_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_len_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_len_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))",
    "import functools\n\ndef max_length(list_to_check):\n    \"\"\"\n    Check the length of list and return the maximum length.\n    :param list_to_check: a list of strings\n    :return: a list of strings\n    \"\"\"\n    return functools.reduce(max, map(len, list_to_check), 0)\n\n\ndef max_length_lambda(list_to_check):\n    \"\"\"\n    Check the length of list and return the maximum length.\n    :param list_to_check: a list of strings\n    :return: a list of strings\n    \"\"\"\n    return max(map(lambda x: len(x), list_to_check))\n\n\nif __name__ == \"__main__\":\n    assert max_length([]) == 0\n    assert max_length([1, 2, 3]) == 3\n    assert max_length_lambda([]) == 0\n    assert max_length_lambda([1, 2, 3]) == 3",
    "def max_length(lst):\n    max_len = 0\n    for el in lst:\n        if len(el) > max_len:\n            max_len = len(el)\n    return max_len\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6]\n    print(max_length(lst))",
    "def find_max_length(list_of_numbers):\n    max_length = 0\n    for number in list_of_numbers:\n        if len(str(number)) > max_length:\n            max_length = len(str(number))\n    return max_length\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, 3, 4, 5, 6]\n    print(find_max_length(list_of_numbers))",
    "# Definition for a Node.\nclass Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def maxLenList(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        max_len = 0\n        current_max = head\n        current_max_len = 1\n        while current_max:\n            if current_max.next:\n                current_max_len = max(current_max_len, 1 + current_max.next.val)\n            else:\n                current_max_len = max(current_max_len, 1)\n            max_len = max(max_len, current_max_len)\n            current_max = current_max.next\n        return max_len",
    "def max_length(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for list in list_of_lists:\n        max_length = max(max_length, len(list))\n    return max_length\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert max_length([[1], [2], [3], [4]]) == 4, \"1st example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8]]) == 7, \"2nd example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == 10, \"3rd example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]) == 12, \"4th example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]) == 14, \"5th example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]) == 16, \"6th example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]) == 18, \"7th example\"\n    assert max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]) == 20, \"8th example\"\n    assert max_length([[1, 2], [",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport collections\n\ndef max_length_list_lambda(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: list of lists\n    \"\"\"\n\n    return max([len(l) for l in list_of_lists])\n\nif __name__ == '__main__':\n    list_of_lists = [[1,2,3],[4,5,6]]\n    print(max_length_list_lambda(list_of_lists))",
    "def find_max_length(lst):\n    return max([len(lst[i]) for i in range(len(lst))])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_max_length(lst))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s,%s>' % (self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __lt__(self, other):\n        return self.x < other.x or (self.x == other.x and self.y < other.y)\n\n    def __hash__(self):\n        return hash(repr(self))\n\n\nclass Solution:\n    # @param points, a list of Points\n    # @return a point, the point with maximum x-coordinate\n    def maxPoint(self, points):\n        xmax = 0\n        for p in points:\n            if p.x > xmax:\n                xmax = p.x\n        return xmax",
    "def max_length(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    max_length = max_length(lst)\n    print max_length",
    "import numpy as np\n\n\ndef max_length(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: int\n    \"\"\"\n    return max(map(lambda x: len(str(x)), L))\n\n\nif __name__ == \"__main__\":\n    L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length(L))",
    "def find_max(iterable):\n    \"\"\"\n    :type iterable: Iterable[int]\n    :rtype: int\n    \"\"\"\n    return max(iterable, key=lambda x: x.__len__())\n\n\nif __name__ == \"__main__\":\n    assert find_max([1, 2, 3]) == 3\n    assert find_max([1, 2, 3, 4, 5, 6]) == 6\n    assert find_max([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert find_max([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n    assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n    assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n    assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n    assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def findMaxLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        length = 0\n        while head:\n            length += 1\n            head = head.next\n        return length",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\n#",
    "def max_length(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: int\n    \"\"\"\n    return max(map(len, s))\n\n\nif __name__ == '__main__':\n    s = ['abcd', 'dcba', 'bacd', 'cadb']\n    print(max_length(s))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n        def __init__(self, x):\n            self.val = x\n            self.next = None\n\"\"\"\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef max_len(head):\n    if not head:\n        return 0\n\n    max_len = 0\n    while head:\n        max_len = max(max_len, 1 + max_len(head.next))\n        head = head.next\n    return max_len\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print(max_len(head))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\nimport sys\n\ndef find_max_len(my_list):\n    \"\"\"\n    Find the max length using lambda function.\n    \"\"\"\n    max_len = 0\n    for i in range(len(my_list)):\n        if len(my_list[i]) > max_len:\n            max_len = len(my_list[i])\n    return max_len\n\n\nif __name__ == \"__main__\":\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Length of list is: %d\" % len(my_list)\n    print find_max_len(my_list)",
    "def max_length_of_list(data):\n    \"\"\"\n    :type data: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in data:\n        if i > max_length:\n            max_length = i\n    return max_length",
    "def find_max_length(list_of_ints):\n    # write your code here\n    max_length = 0\n    for i in list_of_ints:\n        if i > max_length:\n            max_length = i\n    return max_length\n\n\ndef main():\n    print find_max_length([1, 2, 3])\n    print find_max_length([1, 2, 3, 4, 5])\n    print find_max_length([1, 2, 3, 4, 5, 6])\n    print find_max_length([1, 2, 3, 4, 5, 6, 7])\n    print find_max_length([1, 2, 3, 4, 5, 6, 7, 8])\n    print find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\nif __name__ == '__main__':\n    main()",
    "import unittest\n\n\ndef find_max_list(lists):\n    \"\"\"\n    :type lists: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for list_ in lists:\n        if len(list_) > max_length:\n            max_length = len(list_)\n    return max_length\n\n\nclass MyTestCases(unittest.TestCase):\n\n    def test_find_max_list(self):\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9]), 9)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 11)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 12)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 13)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 14)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 15)\n        self.assertEqual(find_max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 16)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass Solution:\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        max_x = max_y = 0\n        max_i = 0\n        for i, p in enumerate(points):\n            if p.x > max_x:\n                max_x = p.x\n                max_i = i\n            if p.y > max_y:\n                max_y = p.y\n                max_i = i\n        return max_i + 1\n\n\nif __name__ == \"__main__\":\n    points = [Point(1, 2), Point(3, 4), Point(5, 6)]\n    print Solution().maxPoints(points)",
    "import functools\n\ndef max_length_list(lst):\n    max_len = max(len(x) for x in lst)\n    return [x[:max_len] for x in lst]\n\ndef max_length_list_lambda(lst):\n    max_len = max(len(x) for x in lst)\n    return lambda x: x[:max_len]\n\ndef max_length_list_lambda_2(lst):\n    max_len = max(len(x) for x in lst)\n    return lambda x: x[:max_len]\n\ndef main():\n    lst = [1,2,3,4,5]\n    lst_lambda = max_length_list_lambda(lst)\n    lst_lambda_2 = max_length_list_lambda_2(lst)\n    print(lst_lambda)\n    print(lst_lambda_2)\n    \n    lst = [1,2,3,4,5]\n    lst_lambda = max_length_list_lambda(lst)\n    lst_lambda_2 = max_length_list_lambda_2(lst)\n    print(lst_lambda)\n    print(lst_lambda_2)\n    \n    lst = [1,2,3,4,5]\n    lst_lambda = max_length_list_lambda(lst)\n    lst_lambda_2 = max_length_list_lambda_2(lst)\n    print(lst_lambda)\n    print(lst_lambda_2)\n    \nif __name__ == '__main__':\n    main()",
    "# Example\n# >>> list_with_max_length([1,2,3])\n# [1, 2, 3]\n\n# Example\n# >>> list_with_max_length([1,2,3,4])\n# [1, 2, 3, 4]\n\n# Example\n# >>> list_with_max_length([1,2,3,4,5,6])\n# [1, 2, 3, 4]\n\ndef max_length(lst):\n    \"\"\"\n    Returns the list with maximum length using lambda function.\n    \"\"\"\n    return max(lst, key=lambda x: len(x))\n\nif __name__ == \"__main__\":\n    print(max_length([1, 2, 3]))\n    print(max_length([1, 2, 3, 4]))\n    print(max_length([1, 2, 3, 4, 5, 6]))",
    "def max_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n# Example\nprint max_length([1, 2, 3])\n#>>> 3\nprint max_length([1, 2, 3, 4, 5])\n#>>> 5\nprint max_length([1, 2, 3, 4, 5, 6])\n#>>> 6\nprint max_length([1, 2, 3, 4, 5, 6, 7])\n#>>> 7\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8])\n#>>> 8\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n#>>> 9\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n#>>> 10\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n#>>> 11\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n#>>> 12\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n#>>> 13\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n#>>> 14\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n#>>> 15\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n#>>> 16\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n#>>> 17\nprint max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n#>>> 18\nprint max_",
    "def max_length(arr):\n    return max(map(lambda x: len(x), arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(max_length(arr))",
    "def max_length(list_of_strings):\n    \"\"\"\n    Find the list with maximum length using lambda function.\n\n    :param list_of_strings: List of strings.\n    :return: The maximum length of the list.\n    \"\"\"\n    return max(map(lambda x: len(x), list_of_strings))\n\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"a\", \"bc\", \"def\"]\n    print(max_length(list_of_strings))",
    "def max_length(arr, max_length):\n    \"\"\"\n    :type arr: List[int]\n    :type max_length: int\n    :rtype: int\n    \"\"\"\n    return max(max_length(arr[i+1:], max_length) for i in range(len(arr)-1))\n\n\nif __name__ == '__main__':\n    print(max_length([1,2,3,4,5,6,7,8,9,10,11,12], 11))",
    "import math\n\ndef findMax(list):\n    # YOUR CODE HERE\n    max = math.floor(len(list) / 2)\n    for i in range(max, len(list)):\n        if len(list) - i >= max:\n            max = len(list) - i\n    return max\n\nif __name__ == \"__main__\":\n    print(findMax([1, 2, 3, 4, 5]))\n    print(findMax([2, 3, 4, 5, 6]))\n    print(findMax([2, 3, 4, 5, 6, 7]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(findMax([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))",
    "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def maxListLen(self, head: ListNode) -> int:\n        maxlen = 0\n        node = head\n        while node:\n            maxlen = max(maxlen, len(node.next.next))\n            node = node.next\n        return maxlen",
    "#!/bin/python\n\n# 1. lambda function\n# 2. list comprehensions\n\ndef max_length(L):\n    \"\"\"\n    Returns the length of the longest list\n    \"\"\"\n    return max(L)\n\n# 3. lambda function\ndef max_length(L):\n    \"\"\"\n    Returns the length of the longest list\n    \"\"\"\n    return max(L, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    L = [1,2,3,4]\n    print max_length(L)\n    L = [5,6,7,8]\n    print max_length(L)\n    L = [1,2,3,4,5]\n    print max_length(L)\n    L = [5,6,7,8,9]\n    print max_length(L)\n    L = [1,2,3,4,5,6]\n    print max_length(L)\n    L = [5,6,7,8,9,10]\n    print max_length(L)\n    L = [1,2,3,4,5,6,7]\n    print max_length(L)\n    L = [5,6,7,8,9,10,11]\n    print max_length(L)",
    "def find_max_length(list_of_lists):\n    max_length = 0\n    for list_of_items in list_of_lists:\n        max_length = max(max_length, len(list_of_items))\n    return max_length\n\nlist_of_lists = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21",
    "import timeit\n\ndef max_length_lambda(list_to_max):\n    max_length = 0\n    for element in list_to_max:\n        if max_length < len(element):\n            max_length = len(element)\n    return max_length\n\ndef main():\n    start = timeit.default_timer()\n    print(max_length_lambda([1,2,3,4,5,6,7,8,9,10]))\n    print(timeit.default_timer() - start)\n\nif __name__ == '__main__':\n    main()",
    "# Example 1:\n# Input: [3, 2, 1, 4, 3, 2, 1]\n# Output: [4, 3, 2, 3, 4, 3, 2]\n# Example 2:\n# Input: [3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1]\n# Output: [4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 2]\n# Example 3:\n# Input: [3, 1, 4, 3, 2, 1, 4, 3, 2, 1]\n# Output: [4, 3, 3, 4, 3, 2, 1, 4, 3, 2]\n\n# Approach #1:\n# Using lambda function\n# def max_length(arr):\n#     return max(map(lambda x: len(str(x)), arr))\n\n# Approach #2:\n# Using map function\n# def max_length(arr):\n#     return max(map(len, arr))\n\n# Approach #3:\n# Using list comprehension\n# def max_length(arr):\n#     return max(map(len, arr))\n\ndef max_length(arr):\n    return max(map(len, arr))\n\n# Test cases\narr = [3, 2, 1, 4, 3, 2, 1]\nprint(max_length(arr))\narr = [3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1]\nprint(max_length(arr))\narr = [3, 1, 4, 3, 2, 1, 4, 3, 2, 1]\nprint(max_length(arr))",
    "def max_list(lst):\n    return max(lst, key = lambda x: x.length)\n\n\"\"\"\nTest\n\"\"\"\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint max_list(lst)\n\n\"\"\"\nOutput\n\"\"\"\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
    "# You can use any function which accepts a list and returns a list\n# with the same length as the given list.\n\ndef max_list(numbers):\n    return sorted(numbers, key=lambda x: x[0])[-1]\n\nprint(max_list([(1,2),(3,1),(3,5)]))\n\n# Your function should return the same list, but sorted.",
    "#!/usr/bin/env python\n\n# Write a function to find the list with maximum length using lambda function.\n# The function should return a list of length and a list of length.\n\ndef max_length(lst):\n    if not lst:\n        return [], []\n    max_length = lambda x: (len(x), x)\n    max_length_list = sorted(lst, key=max_length, reverse=True)\n    max_length_list_length = max(max_length_list)\n    max_length_list_index = max_length_list_length[0]\n    return max_length_list[max_length_list_index], max_length_list[max_length_list_index:]\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167",
    "def max_list(list_to_find):\n    \"\"\"\n    Find the maximum length list using lambda function.\n    \"\"\"\n    return max(list_to_find)\n\n# print max_list([1,2,3,4,5,6,7,8,9])\n# print max_list([1,2,3,4,5])\n# print max_list([1,2,3,4,5,6,7,8,9,10])\n# print max_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\n# print max_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\nprint max_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,",
    "import sys\n\n\ndef max_list(l):\n    return max(l, key=lambda x: len(x))\n\n\ndef main(file):\n    with open(file) as f:\n        data = f.readlines()\n        max_list_len = max_list(map(lambda x: x.strip(), data))\n        print(max_list_len)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1])",
    "def max_length_list(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print max_length_list(lst)\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print max_length_list(lst)",
    "def max_length(list):\n    max_length = 0\n    for elem in list:\n        if len(elem) > max_length:\n            max_length = len(elem)\n    return max_length\n\nprint max_length([1, 2, 3, 4, 5])\nprint max_length([6, 7, 8, 9])",
    "def max_length_list(list_to_find_max):\n    \"\"\"\n    :type list_to_find_max: List[int]\n    :rtype: int\n    \"\"\"\n    return max(list_to_find_max)\n\nif __name__ == \"__main__\":\n    assert max_length_list([1, 2, 3]) == 3\n    assert max_length_list([1, 2, 3, 4, 5]) == 5",
    "# Time:  O(nlogn)\n# Space: O(1)\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findMaxLenTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def findMax(node, max_len):\n            if not node:\n                return\n            left_max_len = findMax(node.left, max_len)\n            right_max_len = findMax(node.right, max_len)\n            if max_len < left_max_len + right_max_len:\n                max_len = left_max_len + right_max_len\n            return max_len\n\n        return findMax(root, 0)",
    "from functools import reduce\n\n\ndef max_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x, y: x if x > y else y, arr)\n\n\nif __name__ == '__main__':\n    assert max_length([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert max_length([]) == 0\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8]) == 8",
    "def findMax(lst):\n    return max(lst)\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print findMax(lst)",
    "#!/usr/bin/env python\n\ndef max_len(l):\n    return max(l)\n\nprint max_len([1, 2, 3])\nprint max_len([1, 2, 3, 4])\nprint max_len([1, 2, 3, 4, 5])",
    "def max_length(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: a list of integers\n    \"\"\"\n    lengths = [len(arr)]\n    for i in range(len(arr) - 1):\n        lengths.append(lambda x: (len(x) + lengths[i + 1])(arr[i + 1:])[0])\n    return max(lengths)\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3]) == 3\n    assert max_length([1, 2, 3, 4]) == 3\n    assert max_length([1, 2, 3, 4, 5]) == 3\n    assert max_length([1, 2, 3, 4, 5, 6]) == 3\n    assert max_length([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3",
    "def find_max_list(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return max(lst, key=lambda x: len(lst))\n\nif __name__ == '__main__':\n    assert find_max_list([3, 1, 4, 2, 5, 3, 6, 7, 8]) == 8",
    "def max_length(arr):\n    \"\"\"\n    arr: A list of integers\n    Returns: The list with maximum length.\n    \"\"\"\n    max_length_list = []\n    for i in arr:\n        if i > max_length_list[-1]:\n            max_length_list.append(i)\n\n    return max(max_length_list)\n\ndef max_length_lambda(arr):\n    \"\"\"\n    arr: A list of integers\n    Returns: The list with maximum length.\n    \"\"\"\n    max_length_list = []\n    for i in arr:\n        if i > max_length_list[-1]:\n            max_length_list.append(i)\n\n    return max(max_length_list)\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5]\n    print max_length(arr)\n    print max_length_lambda(arr)",
    "def max_list(list_of_lists):\n    max_length = max([len(l) for l in list_of_lists])\n    return list_of_lists[max_length - 1]\n\nlist_of_lists = [\n    [1, 2, 3],\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\nprint(max_list(list_of_lists))",
    "def find_max_length_list(list_to_find_max):\n    max_length = 0\n    for i in list_to_find_max:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\nif __name__ == '__main__':\n    list_to_find_max = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print(find_max_length_list(list_to_find_max))",
    "# TODO:\n# - lambda function\n# - while loop\n# - if else\n\ndef max_len_list(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    def max_len_iter(my_list):\n        if len(my_list) == 0:\n            return my_list\n        max_len = my_list[0]\n        for i in range(1, len(my_list)):\n            if my_list[i] > max_len:\n                max_len = my_list[i]\n        return max_len\n\n    max_len_list = max_len_iter(my_list)\n\n    return max_len_list\n\nif __name__ == '__main__':\n    print(max_len_list([1, 2, 3, 4, 5, 6]))\n    print(max_len_list([1, 2, 3, 4, 5, 6, 7]))\n    print(max_len_list([1, 2, 3, 4, 5, 6, 7, 8]))",
    "def max_length(lst):\n    \"\"\"\n    Returns the length of the largest list.\n\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return max(map(lambda x: len(x), lst))\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(max_length(lst))",
    "def max_length_of_list(list):\n    max_length = 0\n    for i in list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using if else else function.\n\"\"\"\n\ndef max_length_of_list(list):\n    max_length = 0\n    if len(list) > max_length:\n        max_length = len(list)\n    else:\n        for i in list:\n            if len(i) > max_length:\n                max_length = len(i)\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using while loop.\n\"\"\"\n\ndef max_length_of_list(list):\n    max_length = 0\n    while(len(list) > max_length):\n        max_length = len(list)\n        list.pop(0)\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using while loop with break.\n\"\"\"\n\ndef max_length_of_list(list):\n    max_length = 0\n    while(len(list) > max_length):\n        max_length = len(list)\n        if list.pop(0):\n            break\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using while loop with break.\n\"\"\"\n\ndef max_length_of_list(list):\n    max_length = 0\n    while(len(list) > max_length):\n        max_length = len(list)\n        if list.pop(0):\n            break\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using while loop with break.\n\"\"\"\n\ndef max_length_of_list(list):\n    max_length = 0\n    while(len(list) > max_length):\n        max_length = len(list)\n        if list.pop(0):\n            break\n    return max_length\n\n\"\"\"\nWrite a function to find the list with maximum length using while loop with break.\n\"\"\"\n\ndef max_length_",
    "def max_length(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: int\n    \"\"\"\n    return max(L, key=lambda x: len(str(x)))\n\nif __name__ == '__main__':\n    assert max_length([1, 2, 3]) == 3\n    assert max_length([1, 2, 3, 4]) == 4\n    assert max_length([]) == 0",
    "import functools\n\n\ndef find_max_len(nums):\n    return functools.reduce(max, map(lambda x: len(str(x)), nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_max_len(nums))",
    "# https://leetcode.com/problems/find-the-longest-substring-that-contains-only-one-character/discuss/222579/Python-solution-with-lambda-function-and-recursion\n\ndef find_max_substring(s, k):\n    result = [s[0]]\n    sub_length = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            sub_length += 1\n        else:\n            result.append(s[i - sub_length:i])\n            sub_length = 1\n    result.append(s[i - sub_length:i])\n    return max(result)\n\n\nif __name__ == \"__main__\":\n    print(find_max_substring(\"abbcccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    "def max_list(my_list):\n    \"\"\"\n    >>> max_list([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> max_list([])\n    []\n    \"\"\"\n    max_list = my_list\n    if my_list:\n        for i in range(1, len(my_list)):\n            if my_list[i] > max_list[i]:\n                max_list = my_list[:i] + my_list[i:]\n    return max_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def max_length(lst):\n    \"\"\"\n    :param lst: List\n    :return: int\n    \"\"\"\n    return max(len(lst), lambda x: x)\n\n\nif __name__ == '__main__':\n    assert max_length([1, 2, 3]) == 3\n    assert max_length([1, 2, 3, 4, 5]) == 5\n    assert max_length([]) == 0\n    assert max_length([1, 2, 3, 4, 5]) == 5\n    assert max_length([1, 2, 3, 4, 5, 6, 7]) == 7",
    "def max_len_list(list_to_check):\n    \"\"\"\n    Return the list with maximum length.\n    :param list_to_check: list of integers\n    :return: list with maximum length\n    \"\"\"\n    return [lambda x: x] * len(list_to_check)\n\nif __name__ == '__main__':\n    print max_len_list([1,2,3])\n    print max_len_list([1,2,3,4,5,6])\n    print max_len_list([1,2,3,4,5,6,7,8,9])\n    print max_len_list([1,2,3,4,5,6,7,8,9,10])",
    "#!/usr/bin/env python\n\nimport time\nstart_time = time.time()\n\ndef max_length(numbers):\n    return max([len(numbers[i]) for i in range(len(numbers))])\n\nprint max_length([1, 2, 3, 4, 5, 6])\nprint max_length([1, 2, 3, 4, 5, 6, 7])\n\nend_time = time.time()\nprint \"Time taken: %f seconds\" % (end_time - start_time)",
    "def find_max_length(list_of_strings):\n    \"\"\"\n    Returns the length of the longest string in list_of_strings.\n    \"\"\"\n    return max([len(string) for string in list_of_strings])\n\n\n# -------------------------------------------------\n\ndef test_find_max_length():\n    assert find_max_length([\"a\", \"bc\", \"cde\"]) == 3\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) == 4\n    assert find_max_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l",
    "import functools\n\n\ndef max_length(iterable):\n    \"\"\"\n    :type iterable: Iterable[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in iterable:\n        max_length = max(max_length, len(str(i)))\n    return max_length\n\n\ndef max_length_lambda(iterable):\n    \"\"\"\n    :type iterable: Iterable[int]\n    :rtype: int\n    \"\"\"\n    return functools.reduce(max_length, iterable)\n\n\nif __name__ == '__main__':\n    assert max_length(range(10)) == max_length_lambda(range(10))",
    "import random\n\n\ndef max_list(list_to_max):\n    \"\"\"\n    Find the max list using lambda function.\n    :param list_to_max:\n    :return:\n    \"\"\"\n    return max([lambda x: x, list_to_max.pop(0)])\n\n\nif __name__ == \"__main__\":\n    list_to_max = [random.randint(0, 100) for i in range(100)]\n    print(max_list(list_to_max))",
    "# Note:\n#  * In Python 2.x, lambda function is not supported.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function is supported.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function does not have a return type.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function does not have a return type.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function does not have a return type.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function does not have a return type.\n#  * If the lambda function does not have a return type, the value is returned\n#    instead of the function.\n#  * If the lambda function does have a return type, the type of the return\n#    value must be the same as the return type of the lambda function.\n\n#  * In Python 3.x, lambda function does not have a return",
    "def find_max_length_list(arr):\n    max_length = 0\n    max_length_list = []\n\n    for i in range(0, len(arr)):\n        if len(arr[i]) > max_length:\n            max_length = len(arr[i])\n            max_length_list = arr[i]\n\n    return max_length_list\n\ndef main():\n    arr = [ [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [",
    "def max_length_list(lst):\n    max_len = 0\n    max_list = []\n    for i in lst:\n        if len(max_list) < max_len:\n            max_list.append(i)\n        elif len(max_list) == max_len:\n            if max(max_list) < i:\n                max_list = [i]\n        else:\n            max_list.append(i)\n    return max(max_list)\n\ndef main():\n    print(max_length_list([1, 2, 3]))\n    print(max_length_list([1, 2, 3, 4]))\n    print(max_length_list([1, 2, 3, 4, 5, 6, 7, 8]))\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}