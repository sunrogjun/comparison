{
  "problem": {
    "task_id": "MBPP/312",
    "prompt": "Write a function to find the volume of a cone.",
    "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
    "test_list": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ],
    "challenge_test_list": [],
    "problem_id": 301
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def volume(r, h):\n    \"\"\"\n    :param r: radius\n    :param h: height\n    :return: volume\n    \"\"\"\n    return 4 * (r**2 * h)\n\nif __name__ == '__main__':\n    print volume(1, 2)",
    "class Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return x*y*z",
    "import math\n\n\ndef volume(r1, r2, h):\n    return r1 ** 3 * math.pi * h / 2\n\n\ndef main():\n    r1 = int(input(\"Enter the first radius: \"))\n    r2 = int(input(\"Enter the second radius: \"))\n    h = int(input(\"Enter the height: \"))\n    print(volume(r1, r2, h))\n\n\nif __name__ == '__main__':\n    main()",
    "# +++your code here+++\n# Write functions and modify main() to call them\n\ndef volume(height, radius):\n    return height * (radius ** 2)\n\ndef main():\n    # This basic example will print the volume of a cone\n    height = float(input(\"What is the height of the cone? \"))\n    radius = float(input(\"What is the radius of the cone? \"))\n    print(\"The volume of the cone is {0}\".format(volume(height, radius)))\n\nif __name__ == '__main__':\n    main()",
    "def cone_volume(radius, height):\n    \"\"\"\n    :param radius:\n    :param height:\n    :return:\n    \"\"\"\n    return (radius * height) / 3",
    "import math\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the radius and height of a cone, return the volume of the cone.\n\n    Example:\n\n    Input: r = 2, h = 3\n\n    Output: Volume of the cone is 6/28 = 0.2857143\n\n    Explanation:\n\n    The volume of a cone is defined as the volume of a cone having a\n    height of h and a radius of r.\n    \"\"\"\n    return (math.pi * r ** 2 * h) / 3\n\nif __name__ == \"__main__\":\n    r = float(input(\"Enter radius: \"))\n    h = float(input(\"Enter height: \"))\n    volume = cone_volume(r, h)\n    print(\"The volume of the cone is {}\".format(volume))",
    "# https://www.hackerrank.com/challenges/vol-cone/problem\n\n# Complete the coneVolume function below.\ndef coneVolume(radius, height):\n    return (3.14159 * radius * radius) / 2 * height\n\nif __name__ == '__main__':\n    radius = float(input())\n    height = float(input())\n\n    print(coneVolume(radius, height))",
    "# imports\nimport math\n\n# define\ndef cone_volume(radius, height):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return math.pi * (radius ** 2) * height\n\n# run\nprint cone_volume(2, 3)",
    "#!/usr/bin/env python\n\nimport math\n\ndef volume(r, h):\n    return math.pi * r**2 * h\n\ndef main():\n    r = float(input(\"Enter the radius: \"))\n    h = float(input(\"Enter the height: \"))\n    print(volume(r, h))\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def coneVolume(self, x, y, z):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :type z: float\n        :rtype: float\n        \"\"\"\n        return x*y*z/3\n\n\nif __name__ == \"__main__\":\n    Solution().coneVolume(2, 4, 3)",
    "import math\n\ndef volume_cone(r, h, a, b):\n    \"\"\"\n    :param r: radius of the base\n    :param h: height of the cylinder\n    :param a: length of the side of the cone\n    :param b: length of the cylinder\n    :return: volume of the cone\n    \"\"\"\n    return (math.pi*(r**2) * (h**2)) / 6.0\n\ndef volume_cylinder(r, h, a, b):\n    \"\"\"\n    :param r: radius of the base\n    :param h: height of the cylinder\n    :param a: length of the side of the cylinder\n    :param b: length of the cylinder\n    :return: volume of the cylinder\n    \"\"\"\n    return (math.pi*(r**2) * (h**2)) / 4.0\n\ndef volume_sphere(r, a):\n    \"\"\"\n    :param r: radius of the base\n    :param a: length of the side of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return (math.pi*(r**2) * (a**2)) / 3.0\n\ndef volume_cube(a, b, c, d):\n    \"\"\"\n    :param a: length of the side of the cube\n    :param b: length of the cube\n    :param c: length of the cube\n    :param d: length of the cube\n    :return: volume of the cube\n    \"\"\"\n    return (a * b * c * d) / 6.0\n\ndef volume_tetrahedron(a, b, c, d):\n    \"\"\"\n    :param a: length of the side of the tetrahedron\n    :param b: length of the tetrahedron\n    :param c: length of the tetrahedron\n    :param d: length of the tetrahedron\n    :return: volume of the tetrahedron\n    \"\"\"\n    return (a * b * c * d) / 4.0\n\nif __name__ == '__main__':\n    print volume_cone(3, 3, 3, 3)\n    print volume_cylinder(2, 2, 3, 3)\n    print",
    "# Import the function\nimport math\n\ndef volume(radius, height):\n    return math.pi * radius * height\n\n# Test your function here\nprint(volume(3, 4))",
    "import math\n\ndef volume(r1, r2, h):\n    return math.pi * r1 * r1 * h\n\nif __name__ == '__main__':\n    r1 = float(input('r1: '))\n    r2 = float(input('r2: '))\n    h = float(input('h: '))\n\n    print(volume(r1, r2, h))",
    "# https://en.wikipedia.org/wiki/Cone\n# https://www.mathsisfun.com/geometry/sphere-and-cone.html\n# https://www.geometryalgorithms.com/Archive/algorithm_0106/algorithm_0106.htm\n\n# In[ ]:\n\n\ndef volume(radius, height):\n    return (radius ** 2) * height\n\n\n# In[ ]:\n\n\ndef volume_cone(radius, height):\n    return volume(radius, height) * 0.5\n\n\n# In[ ]:\n\n\ndef volume_cylinder(radius, height):\n    return (radius ** 2) * height\n\n\n# In[ ]:\n\n\ndef volume_sphere(radius):\n    return (4.0 / 3.0) * pi * radius ** 3\n\n\n# In[ ]:\n\n\ndef volume_ellipsoid(a, b, c):\n    return a * b * c\n\n\n# In[ ]:\n\n\ndef volume_torus(a, b, c):\n    return 4 * a * b * c\n\n\n# In[ ]:\n\n\ndef volume_tetrahedron(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\n# In[ ]:\n\n\ndef volume_icosahedron(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\n# In[ ]:\n\n\ndef volume_icosahedron_from_faces(faces):\n    return sum([volume_icosahedron(a, b, c, d) for (a, b, c, d) in faces])\n\n\n# In[ ]:\n\n\ndef volume_tetrahedron_from_faces(faces):\n    return sum([volume_tetrahedron(a, b, c, d) for (a, b, c, d) in faces])\n\n\n# In[ ]:\n\n\ndef volume_cube(a, b, c):\n    return a * b * c\n\n\n# In[ ]:\n\n\ndef volume_cube_from_faces(faces):\n    return sum([volume_cube(a, b, c) for (a, b",
    "def cone_volume(height, radius):\n    return (4/3) * 3.14159 * radius * radius * height\n\nif __name__ == '__main__':\n    print cone_volume(4, 2)",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Returns the volume of a cone of given radius and height.\n    \"\"\"\n    return math.pi * radius * radius * height\n\n\ndef main():\n    \"\"\"\n    Unit tests for cone_volume.\n    \"\"\"\n    assert cone_volume(1, 1) == math.pi\n    assert cone_volume(1, 2) == math.pi * 4\n    assert cone_volume(2, 2) == 4 * math.pi\n    assert cone_volume(2, 3) == 4 * math.pi * 3\n\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\ndef volume(height, radius):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    The volume of a cone is the product of its height and its radius.\n    \"\"\"\n    return height * radius * np.pi\n\nif __name__ == '__main__':\n    height = float(input('Enter the height of the cone: '))\n    radius = float(input('Enter the radius of the cone: '))\n    volume = volume(height, radius)\n    print('The volume of the cone is:', volume)",
    "# https://www.hackerrank.com/challenges/cone-volume/problem\n\nimport math\n\n# Complete the coneVolume function below.\ndef coneVolume(height, radius):\n    return (math.pi * radius ** 2) * height\n\nif __name__ == '__main__':\n    t = int(input())\n\n    for t_itr in range(t):\n        height, radius = map(int, input().split())\n        print(coneVolume(height, radius))",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Given the radius and height of the cone, return the volume.\n    \"\"\"\n    return math.pi * radius**2 * height\n\ndef main():\n    print cone_volume(4, 6)\n    print cone_volume(2, 2)\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash(self.x) ^ hash(self.y)\n\n    def __repr__(self):\n        return str(self.x) +'' + str(self.y)\n\nclass Solution:\n    # @param point1, point2: Two points\n    # @param point3: The apex of the cone\n    # @return: The volume of the cone\n    def volume(self, point1, point2, point3):\n        # calculate the length of line segment\n        length1 = point2.x - point1.x\n        length2 = point2.y - point1.y\n        length3 = point3.x - point1.x\n        length4 = point3.y - point1.y\n\n        # calculate the cross product of three line segments\n        cross = (length1 * length4 - length2 * length3) / (length1 * length2 - length1 * length3 - length2 * length4)\n\n        # calculate the distance between three line segments\n        length5 = (length1 * length4 - length2 * length3) / (length1 * length2 - length1 * length3 - length2 * length4)\n        length6 = (length1 * length3 - length2 * length4) / (length1 * length2 - length1 * length3 - length2 * length4)\n\n        # calculate the distance between two points\n        length7 = (length1 * length2) / (length1 * length2 - length1 * length3 - length2 * length4)\n\n        # calculate the distance between apex and two points\n        length8 = (length1 * length3) / (length1 * length2 - length1 * length3 - length2 * length4)\n\n        # calculate the distance between apex and three points\n        length9 = (length1 * length2) / (length1 * length2 - length1 * length3 - length2 * length4)\n\n        # calculate the area of the",
    "import math\n\ndef cone_volume(base_radius, height):\n    return math.pi * base_radius ** 2 * height\n\n# Write your code below!\n\ndef main():\n    print(\"Enter the base radius: \")\n    base_radius = input()\n    print(\"Enter the height: \")\n    height = input()\n    print(\"The volume of the cone is: {0}\".format(cone_volume(base_radius, height)))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef volume_of_cone(height, radius):\n    \"\"\"\n    :param height: The height of the cone.\n    :param radius: The radius of the cone.\n    :return: The volume of the cone.\n    \"\"\"\n    return (height ** 2) / (4 * math.pi * radius ** 2)\n\n\nif __name__ == '__main__':\n    height = int(input())\n    radius = int(input())\n    print(volume_of_cone(height, radius))",
    "from __future__ import division\n\n__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def coneVolume(self, x, y, z):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :type z: float\n        :rtype: float\n        \"\"\"\n        return x * y * z\n\n\ndef main():\n    s = Solution()\n    print s.coneVolume(1, 1, 1)\n    print s.coneVolume(2, 1, 1)\n    print s.coneVolume(1, 1, 1)\n\n\nif __name__ == '__main__':\n    main()",
    "def volume(height, radius):\n    \"\"\"\n    Input:\n        height: the height of the cone\n        radius: the radius of the cone\n    Output:\n        the volume of the cone\n    \"\"\"\n\n    return height * radius * radius * 3.14159 / 4\n\n\n\nprint volume(3, 1)",
    "def volume_of_cone(height, radius):\n    \"\"\"\n    :type height: int\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    if radius == 0:\n        return 0\n    return height * 3.14159 * radius * radius / 4.0",
    "import math\ndef volume(radius, height):\n    return math.pi * radius * height\n\nif __name__ == \"__main__\":\n    print(volume(2, 5))",
    "from math import sqrt\n\ndef cone_volume(radius, height):\n    return sqrt(radius**2 * height)\n\nprint cone_volume(3, 4)",
    "def cone_volume(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return (radius ** 3) * height\n\nif __name__ == \"__main__\":\n    assert cone_volume(2, 3) == 24\n    assert cone_volume(3, 4) == 96\n    assert cone_volume(4, 5) == 144\n    assert cone_volume(5, 6) == 288\n    assert cone_volume(6, 7) == 576\n    assert cone_volume(7, 8) == 1152\n    assert cone_volume(8, 9) == 2304\n    assert cone_volume(9, 10) == 4608\n    assert cone_volume(10, 11) == 8192\n    assert cone_volume(11, 12) == 16384\n    assert cone_volume(12, 13) == 32768\n    assert cone_volume(13, 14) == 65536\n    assert cone_volume(14, 15) == 131072\n    assert cone_volume(15, 16) == 262144\n    assert cone_volume(16, 17) == 524288\n    assert cone_volume(17, 18) == 1048576\n    assert cone_volume(18, 19) == 2097152\n    assert cone_volume(19, 20) == 4194304\n    assert cone_volume(20, 21) == 8388608\n    assert cone_volume(21, 22) == 17179869184\n    assert cone_volume(22, 23) == 35184372096\n    assert cone_volume(23, 24) == 70776616256\n    assert cone_volume(24, 25) == 140737488355328\n    assert cone_volume(25, 26) == 281474976710656\n    assert cone_volume(26, 27) == 562949953421312\n    assert cone_volume(27, 28) == 1125899906842624\n    assert cone_volume(28, 29) == 2251799813685248\n    assert cone_volume(29, 30) == 4503599627370496\n    assert cone_volume(30, 31) == 9007199254740992\n    assert cone",
    "import math\nimport time\n\ndef cone_volume(r, h):\n    \"\"\"\n    Return the volume of a cone with radius r and height h.\n    \"\"\"\n    return math.pi * (r ** 2 + h ** 2) / 3\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    print(cone_volume(5, 2))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
    "# Define a function\ndef cone_volume(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    radius - the radius of the cone\n    height - the height of the cone\n    \"\"\"\n    return 3 * radius * height\n\n# Test your function\nprint(cone_volume(2, 3))",
    "# https://www.codewars.com/kata/56b6c6f923e0dbe7c000002/train/python\n\nimport math\n\ndef volume(length, radius):\n    \"\"\"\n    :type length: int\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return math.pi * (radius ** 2) * length",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def coneVolume(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) <= 1:\n            return 0\n        m = len(points)\n        n = len(points[0])\n        x = [0] * n\n        y = [0] * n\n        for i in range(m):\n            for j in range(n):\n                x[j] = points[i].x - points[0].x\n                y[j] = points[i].y - points[0].y\n        s = 0\n        for i in range(m):\n            s += (x[i] * y[(i + 1) % n])\n        return s",
    "import math\n\ndef cone_volume(x, y, z):\n    \"\"\"\n    Input:\n        x: radius of the base\n        y: radius of the top\n        z: height\n\n    Output:\n        The volume of the cone.\n    \"\"\"\n    return math.pi * (z * math.sqrt(z * z - y * y) + x * y)\n\nif __name__ == '__main__':\n    print(cone_volume(1, 2, 3))\n    print(cone_volume(3, 2, 1))\n    print(cone_volume(1, 3, 3))\n    print(cone_volume(1, 1, 1))\n    print(cone_volume(1, 2, 2))\n    print(cone_volume(2, 2, 2))\n    print(cone_volume(2, 2, 4))",
    "import math\n\ndef cone_volume(r, h):\n    return math.pi * r ** 2 * h\n\n\ndef main():\n    r = int(input())\n    h = int(input())\n    print(\"Volume of the cone: {}\".format(cone_volume(r, h)))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a cone.\nclass Cone(object):\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n    def volume(self):\n        return self.base * self.height\n\n\n# Your Cone object will be instantiated and called as such:\n# cone = Cone(base,height)\n# param_1 = cone.volume()\n\nclass Solution(object):\n    def coneVolume(self, base, height):\n        \"\"\"\n        :type base: int\n        :type height: int\n        :rtype: int\n        \"\"\"\n        return base**3 * height",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Given the radius and height, return the volume of the cone.\n\n    Example:\n    >>> cone_volume(3, 4)\n    12.0\n    >>> cone_volume(2, 5)\n    0.0\n    >>> cone_volume(4, 5)\n    0.0\n    >>> cone_volume(5, 1)\n    0.0\n    \"\"\"\n    return math.pi * (height ** 2 - radius ** 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# http://www.spoj.com/problems/CONE/\n\nimport math\n\ndef cone_volume(r, h):\n    return (r**2 * math.pi) / 3.0 * h\n\ndef main():\n    print cone_volume(3, 4)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cone_volume(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius * height\n\n\ndef main():\n    \"\"\"\n    Use the following example to test your function.\n    :return:\n    \"\"\"\n    assert cone_volume(2, 1) == math.pi * 2\n    assert cone_volume(1, 2) == math.pi * 2\n    assert cone_volume(1, 1) == math.pi\n\n\nif __name__ == '__main__':\n    main()",
    "def cone_volume(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return 3 * radius * height\n\n\nprint(cone_volume(5, 10))",
    "# https://www.hackerrank.com/challenges/cone-volume/problem\n\n# A cone is defined as a rectangular prism whose sides are parallel to the x, y, and z axes.\n# The volume of a cone is the sum of the volume of the three sides.\n\ndef coneVolume(x, y, z):\n    # your code here\n    return x * y * z\n\n# Test Cases\n# (x, y, z) = (1, 2, 3)\n# (x, y, z) = (1, 2, 4)\n# (x, y, z) = (2, 4, 1)\n# (x, y, z) = (3, 1, 2)\n# (x, y, z) = (4, 3, 2)\n# (x, y, z) = (5, 6, 7)\n\n# Run Tests\nfor x, y, z in [(1, 2, 3), (1, 2, 4), (2, 4, 1), (3, 1, 2), (4, 3, 2), (5, 6, 7)]:\n    print(f'{x} * {y} * {z} = {coneVolume(x, y, z)}')",
    "def cone_volume(radius, height):\n    return 3 * radius * height\n\nif __name__ == \"__main__\":\n    print cone_volume(3, 4)",
    "# https://www.hackerrank.com/challenges/cone-volume/problem\n\nimport math\n\n\ndef cone_volume(radius, height):\n    return math.pi * radius ** 2 * height\n\n\nif __name__ == '__main__':\n    r, h = map(int, input().split())\n    print(cone_volume(r, h))",
    "import math\n\ndef volume_cone(r, h):\n    return (math.pi * r ** 2 * h) / 3\n\n\nif __name__ == '__main__':\n    print volume_cone(3, 4)",
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * radius * height / 3\n\ndef main():\n    radius = float(input())\n    height = float(input())\n    print(cone_volume(radius, height))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        if x == 0 or y == 0 or z == 0:\n            return 0\n        return x * y * z / 3\n\n\nif __name__ == \"__main__\":\n    assert Solution().volume(0, 0, 0) == 0\n    assert Solution().volume(1, 1, 1) == 1\n    assert Solution().volume(1, 0, 0) == 0\n    assert Solution().volume(0, 1, 0) == 0\n    assert Solution().volume(1, 1, 1) == 1\n    assert Solution().volume(1, 1, 0) == 0\n    assert Solution().volume(1, 0, 1) == 0\n    assert Solution().volume(1, 0, 0) == 0",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Returns the volume of a cone given radius and height.\n\n    radius -- The radius of the cone.\n    height -- The height of the cone.\n    \"\"\"\n    return math.pi * radius * height\n\n# Tests\n\nprint cone_volume(1, 2)",
    "# https://leetcode.com/problems/volume-of-a-cone/\n# Definition for a cone.\nclass Cone(object):\n    def __init__(self, l, r, h):\n        \"\"\"\n        :type l: float\n        :type r: float\n        :type h: float\n        \"\"\"\n        self.l = l\n        self.r = r\n        self.h = h\n\nclass Solution(object):\n    def volume(self, cone):\n        \"\"\"\n        :type cone: Cone\n        :rtype: int\n        \"\"\"\n        return (cone.h * (cone.r - cone.l)) / 2",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Given the radius and height of a cone, return the volume of the cone.\n\n    radius: the radius of the base of the cone.\n    height: the height of the cone.\n    \"\"\"\n    return math.pi * radius * height\n\n\n# Your ConeVolume object will be instantiated and called as such:\n# obj = ConeVolume(radius, height)\n# param_1 = obj.volume()\n# param_2 = obj.surface()",
    "import math\n\ndef cone_volume(r, h):\n    \"\"\"\n    :type r: float\n    :type h: float\n    :rtype: float\n    \"\"\"\n    return math.pi * r * h\n\nif __name__ == '__main__':\n    print(cone_volume(1, 1))",
    "import math\n\ndef coneVolume(radius, height):\n    \"\"\"\n    Inputs:\n    radius - radius of the cone\n    height - height of the cone\n    \n    Outputs:\n    volume - volume of the cone\n    \"\"\"\n    return math.pi * radius ** 2 * height\n\nif __name__ == \"__main__\":\n    radius = float(input(\"Enter the radius of the cone: \"))\n    height = float(input(\"Enter the height of the cone: \"))\n    volume = coneVolume(radius, height)\n    print(\"Volume: \", volume)",
    "import math\n\ndef cone_volume(x, y, z):\n    return math.pi * (z / 2) * (x ** 2 + y ** 2)\n\n\ndef main():\n    print cone_volume(1, 1, 2)\n    print cone_volume(3, 4, 5)\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * radius * height\n\ndef main():\n    print cone_volume(1, 2)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Returns the volume of a cone.\n    \"\"\"\n    return math.pi * radius ** 2 * height\n\nprint cone_volume(1, 1)\nprint cone_volume(1, 2)\nprint cone_volume(1, 3)",
    "from __future__ import division\n\nclass Solution(object):\n    def coneVolume(self, x, y, z):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :type z: float\n        :rtype: float\n        \"\"\"\n        return x*y*z",
    "#!/usr/bin/python\n\nimport math\n\ndef cone_volume(base_radius, height):\n    return math.pi * base_radius * height\n\nif __name__ == \"__main__\":\n    base_radius = int(input(\"Enter base radius: \"))\n    height = int(input(\"Enter height: \"))\n    print(\"Cone volume: {}\".format(cone_volume(base_radius, height)))",
    "class Solution(object):\n    \"\"\"\n    @param base: The base of the cone\n    @param height: The height of the cone\n    @return: The volume of the cone\n    \"\"\"\n    def coneVolume(self, base, height):\n        \"\"\"\n        :type base: int\n        :type height: int\n        :rtype: int\n        \"\"\"\n        # base is the base of the cone\n        # height is the height of the cone\n        # height/base * base * (height-1)/2 = volume\n        return base * height * (height-1) / 2\n\n\nif __name__ == '__main__':\n    assert Solution().coneVolume(1, 1) == 0\n    assert Solution().coneVolume(3, 3) == 6",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def coneVolume(self, height, radius):\n        \"\"\"\n        :type height: int\n        :type radius: int\n        :rtype: int\n        \"\"\"\n        h = height\n        return (h * radius)**2 / (2 * h)\n\n\nif __name__ == \"__main__\":\n    print Solution().coneVolume(3, 2)",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone/problem\n\nimport math\nimport sys\n\n\ndef volume_of_a_cone(height, radius, angle):\n    # Write your code here\n    return math.pi * (radius ** 2) * height\n\n\nif __name__ == '__main__':\n    height, radius, angle = map(float, sys.stdin.readline().split())\n    print(volume_of_a_cone(height, radius, angle))",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone/problem\n\ndef volume(height, radius):\n    \"\"\"\n    :type height: int\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return height * radius * radius / 4.0\n\n\nif __name__ == '__main__':\n    height = int(input())\n    radius = int(input())\n\n    print(volume(height, radius))",
    "from math import sqrt\n\n\ndef cone_volume(height, radius):\n    return (4.0/3.0) * sqrt(height * radius)\n\n\nif __name__ == \"__main__\":\n    height = int(input(\"Enter the height of the cone: \"))\n    radius = int(input(\"Enter the radius of the cone: \"))\n    print(\"The volume of the cone is {}\".format(cone_volume(height, radius)))",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius * height\n\ndef main():\n    \"\"\"\n    Simple test program to demonstrate the use of the volume function.\n    \"\"\"\n    print(\"The volume of a cone with radius of 1 is {0}\".format(cone_volume(1, 1)))\n    print(\"The volume of a cone with radius of 5 is {0}\".format(cone_volume(5, 2)))\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    def volume(self, point1, point2, point3):\n        \"\"\"\n        :type point1: Point\n        :type point2: Point\n        :type point3: Point\n        :rtype: float\n        \"\"\"\n        x1 = point1.x\n        y1 = point1.y\n        x2 = point2.x\n        y2 = point2.y\n        x3 = point3.x\n        y3 = point3.y\n        return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ns = Solution()\np1 = Point(1, 2)\np2 = Point(2, 1)\np3 = Point(3, 4)\n\nprint(s.volume(p1, p2, p3))",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone/problem\n\ndef volume_of_a_cone(radius, height):\n    \"\"\"\n    Function to calculate the volume of a cone\n    :param radius: the radius of the cone\n    :param height: the height of the cone\n    :return: the volume of the cone\n    \"\"\"\n    return (4/3) * (radius * height)",
    "def volume(base, height):\n    \"\"\"\n    base - the base of the cone\n    height - the height of the cone\n    \"\"\"\n    return base*height\n\nif __name__ == '__main__':\n    print(volume(5, 3))\n    print(volume(10, 1))\n    print(volume(10, 2))\n    print(volume(10, 3))\n    print(volume(10, 4))\n    print(volume(10, 5))\n    print(volume(10, 6))\n    print(volume(10, 7))\n    print(volume(10, 8))\n    print(volume(10, 9))\n    print(volume(10, 10))\n    print(volume(10, 11))\n    print(volume(10, 12))\n    print(volume(10, 13))\n    print(volume(10, 14))\n    print(volume(10, 15))\n    print(volume(10, 16))\n    print(volume(10, 17))\n    print(volume(10, 18))\n    print(volume(10, 19))\n    print(volume(10, 20))\n    print(volume(10, 21))\n    print(volume(10, 22))\n    print(volume(10, 23))\n    print(volume(10, 24))\n    print(volume(10, 25))\n    print(volume(10, 26))\n    print(volume(10, 27))\n    print(volume(10, 28))\n    print(volume(10, 29))\n    print(volume(10, 30))",
    "def volume(x, y, z):\n    \"\"\"\n    Find the volume of a cone.\n\n    Input:\n        x, y, z - The x, y, and z coordinates of the cone's apex.\n\n    Output:\n        The volume of the cone.\n\n    Explanation:\n        The volume of a cone is defined as the area of the\n        cylinder formed by the apex and the base.\n    \"\"\"\n    return x**2*y - 2*x*y*z + x*z**2 + y**2*z - 2*x*y*z + y**2*z + x*y*z**2\n\nif __name__ == \"__main__\":\n    print volume(1, 2, 3)\n    print volume(1, 1, 1)",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone/problem\n# https://www.hackerrank.com/challenges/volume-of-a-sphere/problem\n\ndef volume(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return (radius ** 2) * height",
    "import math\n\ndef cone_volume(r, h):\n    \"\"\"\n    :type r: float\n    :type h: float\n    :rtype: float\n    \"\"\"\n    return (4 * math.pi * r * h) / 3.0\n\nif __name__ == '__main__':\n    r = int(input('Enter the radius of the cone: '))\n    h = int(input('Enter the height of the cone: '))\n    print('The volume of the cone is', cone_volume(r, h))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    # @param p1, p2, p3: Three Points\n    # @return an integer\n    def volume(self, p1, p2, p3):\n        if p1 == p2 or p1 == p3 or p2 == p3:\n            return 0\n        if p1.x == p2.x and p1.x == p3.x or p2.x == p3.x:\n            return 0\n        if p1.y == p2.y and p1.y == p3.y or p2.y == p3.y:\n            return 0\n        return p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    print s.volume(p1, p2, p3)",
    "from math import pi, sqrt\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Return the volume of a cone with radius `radius` and height `height`.\n    \"\"\"\n    return 4 * pi * radius * height\n\nif __name__ == \"__main__\":\n    print cone_volume(3, 3)\n    print cone_volume(1, 2)\n    print cone_volume(2, 1)\n    print cone_volume(2, 2)\n    print cone_volume(2, 3)\n    print cone_volume(2, 4)\n    print cone_volume(2, 5)\n    print cone_volume(2, 6)\n    print cone_volume(2, 7)\n    print cone_volume(2, 8)\n    print cone_volume(2, 9)\n    print cone_volume(2, 10)",
    "# https://www.hackerrank.com/challenges/cone-volume\n\nimport math\n\ndef cone_volume(height, radius, angle):\n    \"\"\"\n    Returns the volume of a cone.\n\n    :param height: height of the cone\n    :param radius: radius of the cone\n    :param angle: angle of the cone\n    :return: the volume of the cone\n    \"\"\"\n    # return math.pi * radius * radius * height / 2\n    return math.pi * radius * radius * height / 2 * math.sin(angle)\n\nif __name__ == \"__main__\":\n    # test cases\n    # height = 10\n    # radius = 10\n    # angle = 30\n    # expected = 0.0\n    # print(cone_volume(height, radius, angle))\n\n    # height = 5\n    # radius = 5\n    # angle = 90\n    # expected = 15.0\n    # print(cone_volume(height, radius, angle))\n\n    # height = 20\n    # radius = 5\n    # angle = 30\n    # expected = 200.0\n    # print(cone_volume(height, radius, angle))\n\n    # height = 1\n    # radius = 5\n    # angle = 90\n    # expected = 0.5\n    # print(cone_volume(height, radius, angle))\n\n    height = 10\n    radius = 10\n    angle = 30\n    expected = 0.0\n    print(cone_volume(height, radius, angle))\n\n    height = 5\n    radius = 5\n    angle = 90\n    expected = 15.0\n    print(cone_volume(height, radius, angle))\n\n    height = 20\n    radius = 5\n    angle = 30\n    expected = 200.0\n    print(cone_volume(height, radius, angle))\n\n    height = 1\n    radius = 5\n    angle = 90\n    expected = 0.5\n    print(cone_volume(height, radius, angle))",
    "# Definition for a point.\n# class Point(object):\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def coneVolume(self, points, height):\n        \"\"\"\n        :type points: List[Point]\n        :type height: float\n        :rtype: float\n        \"\"\"\n        if len(points) == 1:\n            return height\n        points_sum = sum(p.x for p in points)\n        points_len = len(points)\n        points_height = sum(p.y for p in points)\n        points_volume = points_sum ** 2 * points_len * height\n        points_height_volume = points_height * height * points_len\n        points_volume_height = points_volume - points_height_volume\n        return points_volume_height",
    "#!/usr/bin/env python\n\nimport math\n\ndef volume_of_a_cone(radius, height):\n    return math.pi * radius * height\n\nif __name__ == \"__main__\":\n    print volume_of_a_cone(3, 4)",
    "def cone_volume(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return 3.14 * radius * height\n\n\nif __name__ == '__main__':\n    print(cone_volume(1, 3))\n    print(cone_volume(2, 3))\n    print(cone_volume(2, 1))\n    print(cone_volume(2, 4))\n    print(cone_volume(2, 5))\n    print(cone_volume(2, 6))\n    print(cone_volume(2, 7))\n    print(cone_volume(2, 8))",
    "import numpy as np\n\ndef cone_volume(height, radius, angle):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    :param height: height of the cone\n    :param radius: radius of the cone\n    :param angle: angle of the cone in degrees\n    :return: volume of the cone\n    \"\"\"\n    # Calculate the volume\n    return (height * radius) * np.sin(np.radians(angle)) / 2.0\n\n\ndef test_cone_volume():\n    assert cone_volume(1, 2, 90) == np.pi * 2.0\n    assert cone_volume(1, 3, 45) == np.pi * 3.0 / 4.0\n    assert cone_volume(1, 3, 30) == np.pi * 4.0 / 3.0\n    assert cone_volume(1, 2, 0) == np.pi * 2.0\n    assert cone_volume(2, 2, 90) == np.pi * 2.0\n    assert cone_volume(2, 2, 180) == 0.0\n    assert cone_volume(2, 2, 270) == 0.0\n    assert cone_volume(2, 2, 90) == 2.0 * np.pi * 2.0\n    assert cone_volume(2, 2, 270) == 2.0 * np.pi * 2.0\n    assert cone_volume(2, 2, 0) == 2.0 * np.pi * 2.0\n\nif __name__ == \"__main__\":\n    test_cone_volume()",
    "import math\n\ndef volume_cone(r, h):\n    return (math.pi * r ** 2 * h) / 6\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert volume_cone(3, 2) == 36, \"3 3\"\n    assert volume_cone(3, 3) == 108, \"3 3\"\n    assert volume_cone(3, 4) == 288, \"3 4\"\n    assert volume_cone(4, 4) == 912, \"4 4\"\n    assert volume_cone(4, 5) == 992, \"4 5\"\n    assert volume_cone(5, 5) == 1864, \"5 5\"\n    assert volume_cone(5, 6) == 3384, \"5 6\"\n    assert volume_cone(6, 6) == 7248, \"6 6\"\n    assert volume_cone(6, 7) == 14112, \"6 7\"\n    assert volume_cone(7, 7) == 28288, \"7 7\"",
    "import math\n\n\ndef volume(r, h):\n    return r * math.pi * h\n\n\nif __name__ == '__main__':\n    print(volume(4, 3))",
    "import math\n\n\ndef cone_volume(r, h):\n    return math.pi * r * h\n\n\n# print cone_volume(1, 1)\n# print cone_volume(2, 1)\n# print cone_volume(3, 1)\n# print cone_volume(2, 2)\n# print cone_volume(3, 2)\n# print cone_volume(2, 3)\n# print cone_volume(3, 3)\n# print cone_volume(4, 1)\n# print cone_volume(5, 1)\n# print cone_volume(4, 2)\n# print cone_volume(5, 2)\n# print cone_volume(4, 3)\n# print cone_volume(5, 3)\n# print cone_volume(4, 4)\n# print cone_volume(5, 4)\n# print cone_volume(4, 5)\n# print cone_volume(5, 5)\n# print cone_volume(5, 5)\n# print cone_volume(6, 5)\n# print cone_volume(7, 5)\n# print cone_volume(6, 6)\n# print cone_volume(7, 6)\n# print cone_volume(6, 7)\n# print cone_volume(7, 7)\n# print cone_volume(8, 6)\n# print cone_volume(9, 6)\n# print cone_volume(8, 7)\n# print cone_volume(9, 7)\n# print cone_volume(8, 8)\n# print cone_volume(9, 8)\n# print cone_volume(8, 9)\n# print cone_volume(9, 9)\n# print cone_volume(10, 9)\n# print cone_volume(11, 9)\n# print cone_volume(10, 10)\n# print cone_volume(11, 10)\n# print cone_volume(10, 11)\n# print cone_volume(11, 11)\n# print cone_volume(12, 11)\n# print cone_volume(13, 11)\n# print cone_volume(12, 12)\n# print cone_volume(13, 12)\n# print cone_volume(12, 13)\n# print cone_volume(13, 13)\n# print",
    "import math\n\ndef cone_volume(radius, height):\n    return math.pi * radius * height\n\ndef main():\n    radius = float(input(\"Enter radius: \"))\n    height = float(input(\"Enter height: \"))\n    print(\"Volume: \" + str(cone_volume(radius, height)))\n\nif __name__ == \"__main__\":\n    main()",
    "#!/usr/bin/env python\n\ndef cone_volume(height, radius, angle):\n    \"\"\"\n    Find the volume of a cone.\n\n    :param height: Height of the cone.\n    :param radius: Radius of the cone.\n    :param angle: Angle of the cone.\n    :return: Volume of the cone.\n    \"\"\"\n    return (height * radius * radius * angle) / 3.0\n\nif __name__ == '__main__':\n    print cone_volume(3, 4, 90)",
    "import math\n\n\ndef cone_volume(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius * height\n\n\nif __name__ == '__main__':\n    print(cone_volume(1, 1))\n    print(cone_volume(3, 4))",
    "import math\n\nclass Solution(object):\n    def coneVolume(self, height, radius):\n        \"\"\"\n        :type height: int\n        :type radius: int\n        :rtype: int\n        \"\"\"\n        return math.pi * radius * radius * height\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.coneVolume(5, 5))\n    print(sol.coneVolume(3, 6))\n    print(sol.coneVolume(7, 9))\n    print(sol.coneVolume(12, 2))",
    "class Solution:\n    \"\"\"\n    @param:\n    @return:\n    \"\"\"\n    def coneVolume(self, radius, height):\n        \"\"\"\n        :type radius: float\n        :type height: float\n        :rtype: float\n        \"\"\"\n        return radius * height\n        \nif __name__ == \"__main__\":\n    s = Solution()\n    print s.coneVolume(1.0, 1.0)\n    print s.coneVolume(1.0, 2.0)\n    print s.coneVolume(2.0, 1.0)\n    print s.coneVolume(2.0, 2.0)\n    print s.coneVolume(2.0, 3.0)",
    "def volume(height, radius):\n    return radius * (3.14159 * radius * height) / 4\n\nif __name__ == '__main__':\n    print volume(100, 100)",
    "def volume(r, h):\n    \"\"\"\n    Given the radius of the cone and the height of the cone, return the\n    volume of the cone.\n    \"\"\"\n    return r * h",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution(object):\n    def coneVolume(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        \n        if len(points) == 1:\n            return points[0].y\n        \n        min_x = points[0].x\n        max_x = points[0].x\n        for p in points:\n            if p.x < min_x:\n                min_x = p.x\n            if p.x > max_x:\n                max_x = p.x\n        \n        # get volume\n        volume = 0\n        for p in points:\n            if p.x <= max_x:\n                volume += p.y\n            else:\n                volume += max_x - p.x\n        \n        return volume",
    "import math\n\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Function to find the volume of a cone.\n    \"\"\"\n    return math.pi * (radius ** 2) * height\n\n\ndef main():\n    \"\"\"\n    Runs the program.\n    \"\"\"\n    radius = float(input('Radius: '))\n    height = float(input('Height: '))\n    print('Volume of a cone with radius {} and height {} is {}'.format(radius, height, volume_cone(radius, height)))\n\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\nimport math\n\ndef volume(r, h):\n    return math.pi * r * h\n\nprint(volume(1, 1))\nprint(volume(1, 2))\nprint(volume(1, 3))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def coneVolume(self, L, R, R1, R2):\n        \"\"\"\n        :param L: the lower bound of the cone\n        :param R: the upper bound of the cone\n        :param R1: the angle of the cone\n        :param R2: the angle of the cone\n        :return: the volume of the cone\n        \"\"\"\n        if L > R or R1 > R2:\n            return 0\n        return L * R * (R2 - R1) / 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().coneVolume(0, 1, 0, 0) == 0\n    assert Solution().coneVolume(0, 1, 0.5, 0.5) == 0.5\n    assert Solution().coneVolume(0, 1, 1, 0) == 1\n    assert Solution().coneVolume(1, 2, 0, 0) == 0\n    assert Solution().coneVolume(1, 2, 0.5, 0.5) == 0.5\n    assert Solution().coneVolume(1, 2, 1, 0) == 1\n    assert Solution().coneVolume(1, 2, 1, 1) == 1",
    "def volume_of_cone(radius, height):\n    \"\"\"\n    Given the radius of a cone, and the height, return the volume of the cone.\n    \"\"\"\n    return radius * radius * height",
    "def coneVolume(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return radius * height / 3\n\nif __name__ == \"__main__\":\n    radius = float(input(\"Radius: \"))\n    height = float(input(\"Height: \"))\n\n    print(\"Volume = {0}\".format(coneVolume(radius, height)))",
    "import math\n\ndef coneVolume(r, h):\n    return math.pi * r * h\n\ndef main():\n    r = float(input('Enter the radius: '))\n    h = float(input('Enter the height: '))\n    print('Volume:'+ str(coneVolume(r, h)))\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone/problem\n\ndef volume(r, h):\n    \"\"\"\n    >>> volume(2, 3)\n    12\n    >>> volume(2, 4)\n    24\n    >>> volume(3, 4)\n    48\n    >>> volume(3, 5)\n    75\n    >>> volume(3, 6)\n    96\n    >>> volume(3, 7)\n    108\n    >>> volume(4, 2)\n    16\n    >>> volume(4, 3)\n    36\n    >>> volume(4, 4)\n    64\n    >>> volume(4, 5)\n    80\n    >>> volume(4, 6)\n    96\n    >>> volume(4, 7)\n    104\n    >>> volume(5, 2)\n    25\n    >>> volume(5, 3)\n    50\n    >>> volume(5, 4)\n    75\n    >>> volume(5, 5)\n    100\n    >>> volume(5, 6)\n    125\n    >>> volume(5, 7)\n    150\n    >>> volume(6, 2)\n    36\n    >>> volume(6, 3)\n    60\n    >>> volume(6, 4)\n    80\n    >>> volume(6, 5)\n    100\n    >>> volume(6, 6)\n    120\n    >>> volume(6, 7)\n    140\n    >>> volume(7, 2)\n    49\n    >>> volume(7, 3)\n    74\n    >>> volume(7, 4)\n    98\n    >>> volume(7, 5)\n    113\n    >>> volume(7, 6)\n    132\n    >>> volume(7, 7)\n    157\n    >>> volume(8, 2)\n    68\n    >>> volume(8, 3)\n    88\n    >>> volume(8, 4)\n    108\n    >>> volume(8, 5)\n    118\n    >>> volume(8, 6)\n    138\n    >>> volume(8, 7)\n    148\n    >>> volume(8, 8)\n    168\n    >>> volume(9, 2)\n    73\n    >>> volume(9, 3)\n    92\n    >>> volume(9, 4",
    "import math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return math.pi * radius ** 2 * height\n\ndef main():\n    print cone_volume(1, 1)\n\nif __name__ == \"__main__\":\n    main()",
    "# The volume of a cone is the area of a spherical cone, which is a spherical\n# triangle.\n#\n# The volume of a cone is calculated as the area of a spherical triangle\n# divided by six.\n#\n# The formula is:\n#\n#     V = pi * r^2 * r * (1 - r^2) / 6\n#\n# where,\n#\n#     r = the radius of the cone\n#\n#     pi = the constant pi\n#\n#     V = the volume of the cone\n#\n# The input to the function should be the radius of the cone.\n#\n# Example:\n#\n# Input:\n#     r = 3\n#\n# Output:\n#     V = pi * 3 * 3 * (1 - 3^2) / 6\n#\n# Note:\n#\n#     r must be a positive integer.\n#\n#     The input is guaranteed to be a positive integer.\n#\n#     You need to use only basic operations like integer division, no loops or\n#     comprehensions.\n#\n# Follow up:\n#\n#     If you find it hard to understand, you are welcome to add\n#     a comment on how you solved the problem, and/or if you have any hints or\n#     questions.\n#\n# Credits:\n#     Special thanks to @jianchao.li.fighter for adding this problem and\n#     creating all test cases.\n#     https://leetcode.com/problems/volume-of-a-cone/\n\nclass Solution(object):\n    def volume(self, r):\n        \"\"\"\n        :type r: int\n        :rtype: int\n        \"\"\"\n        return (r ** 2) * (r ** 2) * (1 - r ** 2) / 6\n\ndef main():\n    solution = Solution()\n    print solution.volume(3)\n\nif __name__ == '__main__':\n    main()",
    "# https://github.com/SethMM/projecteuler/blob/master/p0119.py\n\n# https://en.wikipedia.org/wiki/Cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_sphere\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cylinder\n\n# https://en.wikipedia.org/wiki/Volume_of_a_spherical_cap\n\n# https://en.wikipedia.org/wiki/Volume_of_a_cone",
    "import math\n\ndef cone_volume(r, h):\n    return math.pi * r * h\n\ndef main():\n    print(cone_volume(2, 3))\n    print(cone_volume(2, 4))\n    print(cone_volume(2, 5))\n    print(cone_volume(2, 6))\n    print(cone_volume(2, 7))\n    print(cone_volume(2, 8))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.hackerrank.com/challenges/volume-of-a-cone\n# https://www.hackerrank.com/challenges/volume-of-a-sphere\n# https://www.hackerrank.com/challenges/volume-of-a-cylinder\n# https://www.hackerrank.com/challenges/volume-of-a-sphere\n# https://www.hackerrank.com/challenges/volume-of-a-cylinder\n\ndef volume(radius, height):\n    return 4 * radius * height\n\nif __name__ == '__main__':\n    radius = int(input())\n    height = int(input())\n    volume = volume(radius, height)\n    print(volume)",
    "import math\n\n\ndef cone_volume(radius, height):\n    return math.pi * radius * height\n\n\ndef test_cone_volume():\n    assert cone_volume(3, 5) == math.pi * 3 * 5\n    assert cone_volume(4, 5) == 3 * math.pi * 4 * 5 / 2\n    assert cone_volume(5, 5) == 3 * math.pi * 5 * 5 / 2\n    assert cone_volume(6, 5) == math.pi * 6 * 5 / 2\n\n\ndef main():\n    test_cone_volume()\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n# Complete the coneVolume function below.\ndef coneVolume(radius, height):\n    return math.pi * radius ** 2 * height\n\nif __name__ == '__main__':\n    print coneVolume(2, 3)  # Output: 6.2882",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n#       Copyright (C) 2014-2015\n#       All Rights Reserved\n#\n#   This is a part of the the general-purpose tools for Python\n#   (GPTools) project.\n#\n#   Redistribution and use in source and binary forms, with or without\n#   modification, are permitted provided that the following conditions are\n#   met:\n#\n#       * Redistributions of source code must retain the above copyright\n#         notice, this list of conditions and the following disclaimer.\n#       * Redistributions in binary form must reproduce the above copyright\n#         notice, this list of conditions and the following disclaimer in\n#         the documentation and/or other materials provided with the\n#         distribution.\n#       * Neither the name of the <ORGANIZATION> nor the names of its\n#         contributors may be used to endorse or promote products derived\n#         from this software without specific prior written permission.\n#\n#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n#   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\nimport math"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}