{
  "problem": {
    "task_id": "MBPP/453",
    "prompt": "Write a python function to find the sum of even factors of a number.",
    "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
    "test_list": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ],
    "challenge_test_list": [],
    "problem_id": 442
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sum_even_factors(num):\n    \"\"\"\n    sum_even_factors(num) -> sum\n\n    Returns the sum of all even factors of num.\n    \"\"\"\n    sum = 0\n    for i in range(1, num):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_even_factors(10))\n    print(sum_even_factors(100))\n    print(sum_even_factors(1000))",
    "def even_factors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    return sum(i for i in range(1, n) if i % 2 == 0)\n\nprint(even_factors(5))\n#>>> 2\nprint(even_factors(10))\n#>>> 4\nprint(even_factors(20))\n#>>> 6",
    "def sum_even_factors(num):\n    sum_even_factors = 0\n    if num == 1:\n        return 1\n    for x in range(2, num):\n        if num % x == 0:\n            sum_even_factors += x\n    return sum_even_factors\n\n#print(sum_even_factors(20))\n#print(sum_even_factors(200))\n#print(sum_even_factors(1000))\n#print(sum_even_factors(15))\n#print(sum_even_factors(15))\n#print(sum_even_factors(9))\n#print(sum_even_factors(3))\n#print(sum_even_factors(5))",
    "def even_factors(n):\n    '''\n    finds the sum of all even factors of n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum(even_factors(i) for i in range(2, n, 2) if i % 2 == 0)\n\n\ndef main():\n    '''\n    main function to test the function.\n    '''\n    print(even_factors(5))\n    print(even_factors(12))\n    print(even_factors(20))\n    print(even_factors(25))\n\n\nif __name__ == '__main__':\n    main()",
    "def sum_even_factors(number):\n    \"\"\"\n    number: a positive integer\n    return: the sum of even factors of number\n    \"\"\"\n    sum = 0\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\nprint sum_even_factors(100)",
    "def even_factors(number):\n    return number // 2 if number % 2 == 0 else number\n\n# Test Cases\n#print(even_factors(3))\n#print(even_factors(4))\n#print(even_factors(7))\n#print(even_factors(6))\n#print(even_factors(10))\n#print(even_factors(20))\n#print(even_factors(100))\n#print(even_factors(1000))\n#print(even_factors(200))",
    "def sumEvenFactors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num <= 1:\n        return 0\n    \n    if num % 2 == 0:\n        return num * 2\n    \n    return sumEvenFactors(num / 2) + sumEvenFactors(num / 2)\n    \n    \n# Your NumFactors function will be called like this:\n# numFactors(<number>);\n#\n# The first argument is one of the five values\n# that the function accepts.\n#\n# For example, if you're given an integer,\n# the function should return the sum of the\n# numbers that are multiples of that number.\n# If given a list of numbers, the function\n# should return the sum of the multiples of\n# those numbers.\n#\n# If given a string, the function should\n# return the sum of the multiples of the\n# digits in the string.\n#\n# If given nothing, the function should return\n# 0.\n#\n# Note:\n#\n# The function is guaranteed to be called\n# on at least 1 number.\n#\n# Example:\n#\n# numFactors(4) -> 2\n# numFactors([1, 2, 3]) -> 6\n# numFactors(\"\") -> 0\n\nprint sumEvenFactors(4)\nprint sumEvenFactors([1, 2, 3])\nprint sumEvenFactors(\"\")",
    "def sum_even_factors(number):\n    factors = [2, 3, 5]\n    sum_factors = 0\n    for factor in factors:\n        if number % factor == 0:\n            sum_factors += factor\n    return sum_factors\n\ndef sum_even_factors_recursive(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_even_factors_recursive(number - 1) + sum_even_factors_recursive(number - 2)\n\nprint(sum_even_factors(20))\nprint(sum_even_factors_recursive(20))",
    "def find_sum_even_factors(num):\n    sum_even_factors = 0\n    for i in range(1, num):\n        if i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\nprint(find_sum_even_factors(100))\nprint(find_sum_even_factors(4))\nprint(find_sum_even_factors(6))\nprint(find_sum_even_factors(15))\nprint(find_sum_even_factors(36))",
    "def sum_even_factors(number):\n    \"\"\"\n    sum_even_factors(number) -> sum\n\n    Sum the even factors of the number.\n\n    :param number: int\n    :return: sum\n    \"\"\"\n    sum = 0\n    for i in range(1, number):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    assert sum_even_factors(15) == 12,'sum_even_factors(15) == 12'\n    assert sum_even_factors(100) == 92,'sum_even_factors(100) == 92'",
    "def even_factors(n):\n    \"\"\"\n    Return a list of the even factors of n.\n    \"\"\"\n    even = []\n    for i in range(2, n):\n        if n % i == 0:\n            even.append(i)\n    return even\n\ndef even_factors_python(n):\n    \"\"\"\n    Return a list of the even factors of n.\n    \"\"\"\n    even = []\n    for i in range(2, n):\n        if n % i == 0:\n            even.append(i)\n    return even\n\ndef main():\n    \"\"\"\n    Write a function to calculate the sum of the even factors of a number.\n    \"\"\"\n    print(\"sum of even factors of 100:\", sum(even_factors(100)))\n\nif __name__ == '__main__':\n    main()",
    "def sum_even_factors(n):\n    return sum(i for i in range(1, n) if i % 2 == 0)\n\nprint(sum_even_factors(20))",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n) --> int\n    \n    Return the sum of all even factors of n.\n    \n    Example:\n    sum_even_factors(15) --> 9\n    sum_even_factors(12) --> 6\n    sum_even_factors(13) --> 13\n    sum_even_factors(16) --> 16\n    \"\"\"\n    \n    sum = 0\n    for i in range(1, n/2+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_even_factors(15) == 9, \"Example\"\n    assert sum_even_factors(12) == 6, \"Example\"\n    assert sum_even_factors(13) == 13, \"Example\"\n    assert sum_even_factors(16) == 16, \"Example\"\n    assert sum_even_factors(1) == 0, \"Example\"\n    assert sum_even_factors(0) == 0, \"Example\"\n    assert sum_even_factors(-1) == 0, \"Example\"\n    assert sum_even_factors(23) == 0, \"Example\"\n    assert sum_even_factors(25) == 0, \"Example\"\n    assert sum_even_factors(26) == 0, \"Example\"\n    assert sum_even_factors(27) == 0, \"Example\"\n    assert sum_even_factors(28) == 0, \"Example\"\n    assert sum_even_factors(29) == 0, \"Example\"\n    assert sum_even_factors(30) == 0, \"Example\"\n    assert sum_even_factors(31) == 0, \"Example\"\n    assert sum_even_factors(32) == 0, \"Example\"\n    assert sum_even_factors(33) == 0, \"Example\"\n    assert sum_even_factors(34) == 0, \"Example\"\n    assert sum_even_factors(35) ==",
    "def sum_even_factors(num):\n    return sum(x for x in range(2, int(num**0.5) + 1) if num % x == 0)\n\n\ndef test_sum_even_factors():\n    assert sum_even_factors(3) == 2\n    assert sum_even_factors(10) == 6\n    assert sum_even_factors(100) == 24\n    assert sum_even_factors(1000) == 600",
    "def find_sum(n):\n    # Your code here\n    return n\n\ndef main():\n    # Your code here\n    n = 5\n    sum_even_factors = find_sum(n)\n    print(sum_even_factors)\n\nif __name__ == \"__main__\":\n    main()",
    "def sumEvenFactors(number):\n    \"\"\"\n    >>> sumEvenFactors(8)\n    4\n    >>> sumEvenFactors(7)\n    3\n    >>> sumEvenFactors(6)\n    2\n    >>> sumEvenFactors(5)\n    2\n    >>> sumEvenFactors(4)\n    1\n    >>> sumEvenFactors(3)\n    1\n    >>> sumEvenFactors(2)\n    0\n    >>> sumEvenFactors(1)\n    0\n    >>> sumEvenFactors(0)\n    0\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number % 2 == 0:\n        return number\n    return sumEvenFactors(number / 2) + sumEvenFactors(number / 2 - 1)",
    "def sum_of_even_factors(num):\n    sum = 0\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            sum += i\n    return sum\n\n#print sum_of_even_factors(17)\nprint sum_of_even_factors(10001)",
    "def sumEvenFactors(number):\n    \"\"\"\n    Write a function that takes a number and returns the sum of all its\n    even factors.\n    \"\"\"\n    return sum(i for i in range(1, number+1) if i % 2 == 0)\n\nprint sumEvenFactors(10)",
    "def find_sum_even_factors(num):\n    \"\"\"\n    Find the sum of even factors of a number.\n\n    :type num: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(2, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\nprint(find_sum_even_factors(10))",
    "def sum_even_factors(number):\n    \"\"\"\n    Function to find the sum of even factors of a number.\n    \"\"\"\n    factors = [i for i in range(1, number + 1) if i % 2 == 0]\n    return sum(factors)\n\n\n# Test Cases\nprint(sum_even_factors(12))\nprint(sum_even_factors(15))\nprint(sum_even_factors(20))\nprint(sum_even_factors(100))",
    "def sum_even_factors(n):\n    \"\"\"\n    Given an integer n, return the sum of all even factors of n.\n    \"\"\"\n    result = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result += i\n    return result\n\n\nprint(sum_even_factors(6))",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n)\n    \"\"\"\n    return sum(x for x in range(1, n+1) if x % 2 == 0)\n\nprint(sum_even_factors(21))",
    "def sum_even_factors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    sum = 0\n    for i in range(1, number):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    assert sum_even_factors(5) == 4\n    assert sum_even_factors(6) == 6\n    assert sum_even_factors(7) == 7\n    assert sum_even_factors(10) == 10\n    assert sum_even_factors(11) == 11",
    "def sum_even_factors(num):\n    \"\"\"\n    sum_even_factors(num) --> int\n    \n    Sum the number of even factors in the number num.\n    \n    >>> sum_even_factors(6)\n    3\n    >>> sum_even_factors(8)\n    5\n    >>> sum_even_factors(21)\n    9\n    \"\"\"\n    factors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            factors += i\n    return factors\n\nif __name__ == \"__main__\":\n    print(sum_even_factors(6))\n    print(sum_even_factors(8))\n    print(sum_even_factors(21))",
    "def sum_even_factors(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    return sum(i for i in range(1, num+1) if i % 2 == 0)\n\nif __name__ == '__main__':\n    print(sum_even_factors(6))",
    "def sumEvenFactors(n):\n    return sum(x for x in range(1, n) if x % 2 == 0)\n\nprint sumEvenFactors(10)\n\n\"\"\"\nWrite a python function to find the sum of odd factors of a number.\n\"\"\"\n\ndef sumOddFactors(n):\n    return sum(x for x in range(1, n) if x % 2 == 1)\n\nprint sumOddFactors(10)\n\n\"\"\"\nWrite a python function to find the sum of the numbers which are\ndivisible by the sum of the even factors of the number.\n\"\"\"\n\ndef sumDivisibleByEvenFactors(n):\n    return sum(x for x in range(1, n) if sumEvenFactors(x) % x == 0)\n\nprint sumDivisibleByEvenFactors(10)\n\n\"\"\"\nWrite a python function to find the sum of the numbers which are\ndivisible by the sum of the odd factors of the number.\n\"\"\"\n\ndef sumDivisibleByOddFactors(n):\n    return sum(x for x in range(1, n) if sumOddFactors(x) % x == 0)\n\nprint sumDivisibleByOddFactors(10)",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n) -> sum\n\n    Returns the sum of all even factors of n.\n    \"\"\"\n    result = 0\n    for i in range(2, n):\n        if n % i == 0:\n            result += i\n            if i!= n:\n                result += sum_even_factors(n / i)\n    return result\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(sum_even_factors(i))",
    "def find_sum_of_even_factors(num):\n    \"\"\"\n    Find the sum of even factors of a number.\n    \n    @param num: A positive integer\n    @return: The sum of even factors of num\n    \"\"\"\n    if num == 1:\n        return 1\n    sum = 0\n    for i in range(2, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print find_sum_of_even_factors(120)\n    print find_sum_of_even_factors(20)\n    print find_sum_of_even_factors(24)\n    print find_sum_of_even_factors(24)\n    print find_sum_of_even_factors(99)\n    print find_sum_of_even_factors(100)",
    "def sumEvenFactors(n):\n    \"\"\"\n    >>> sumEvenFactors(6)\n    6\n    >>> sumEvenFactors(10)\n    10\n    >>> sumEvenFactors(12)\n    12\n    >>> sumEvenFactors(15)\n    15\n    >>> sumEvenFactors(20)\n    20\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def even_factors(number):\n    \"\"\"\n    :param number: number whose factors to be found\n    :return: the sum of even factors of number\n    \"\"\"\n    factors = 0\n    for i in range(2, number + 1):\n        if number % i == 0:\n            factors += i\n    return factors\n\n# Test cases\nprint even_factors(12)\nprint even_factors(10)\nprint even_factors(16)",
    "def sum_even_factors(number):\n    # write your code here\n    sum = 0\n    for i in range(1, number+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nprint(sum_even_factors(12))",
    "def sum_even_factors(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nprint(sum_even_factors(4))",
    "def sum_of_even_factors(num):\n    \"\"\"\n    Find the sum of even factors of num.\n    \"\"\"\n    return sum(i for i in range(1, num) if i % 2 == 0)\n\nprint sum_of_even_factors(10)",
    "# https://www.hackerrank.com/challenges/factorial-computation/problem\n\n# @author: daniel\n# @since: 13/05/16\n# @last_modified: 13/05/16\n\n\ndef sum_even_factors(n):\n    \"\"\"\n    Sums the even factors of a number.\n    :param n: A positive number.\n    :return: The sum of the even factors of n.\n    \"\"\"\n    return sum(x for x in range(1, n) if x % 2 == 0)\n\n\nif __name__ == '__main__':\n    print(sum_even_factors(16))",
    "import math\n\ndef even_factors(n):\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n\nprint(even_factors(100))",
    "def find_sum_of_even_factors(number):\n    \"\"\"\n    Find the sum of even factors of a number.\n    \"\"\"\n    factors = 0\n    for i in range(2, number + 1):\n        if number % i == 0:\n            factors += i\n    return factors\n\ndef test():\n    assert find_sum_of_even_factors(10) == 6\n    assert find_sum_of_even_factors(30) == 12\n    assert find_sum_of_even_factors(42) == 14\n\nif __name__ == \"__main__\":\n    test()",
    "def sumEvenFactors(n):\n    factors = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            factors += 1\n        else:\n            n = n - 1\n    return factors\n\n\ndef test():\n    assert sumEvenFactors(6) == 3\n    assert sumEvenFactors(12) == 6\n    assert sumEvenFactors(15) == 5\n    assert sumEvenFactors(14) == 6\n\nif __name__ == \"__main__\":\n    test()",
    "def sum_of_even_factors(n):\n    \"\"\"\n    sum_of_even_factors(n) -> int\n    \n    Returns the sum of all even numbers that are divisible by n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return n * sum_of_even_factors(n / 2)\n    else:\n        return sum_of_even_factors(n / 2) + sum_of_even_factors(n / 2 + 1)",
    "def evenFactors(num):\n    return sum(i for i in range(2, int(num**0.5)+1) if num % i == 0)\n\nprint(evenFactors(20))",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n) -> int\n    \n    Return the sum of even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nprint sum_even_factors(10)",
    "def sum_of_even_factors(num):\n    \"\"\"\n    Return the sum of all even factors of num.\n    \"\"\"\n    return sum(num % i for i in range(1, num) if num % i == 0 and i % 2 == 0)\n\n\nprint(sum_of_even_factors(100))",
    "def sum_even_factors(number):\n    \"\"\"\n    For example, given number 5, return 4.\n    \n    Note:\n        The factorization of any number is the sum of its individual factors.\n    \"\"\"\n    return sum(int(i) for i in str(number) if i.isdigit() and int(i) % 2 == 0)",
    "def even_factors(num):\n    \"\"\"\n    Find the sum of even factors of num.\n\n    >>> even_factors(100)\n    10\n    >>> even_factors(200)\n    50\n    >>> even_factors(1000)\n    500\n    >>> even_factors(2000)\n    2500\n    >>> even_factors(20000)\n    12500\n    \"\"\"\n    factors = 0\n    while num > 0:\n        if num % 2 == 0:\n            factors += num / 2\n        num /= 2\n    return factors\n\nif __name__ == '__main__':\n    print(even_factors(100))\n    print(even_factors(200))\n    print(even_factors(1000))\n    print(even_factors(2000))\n    print(even_factors(20000))",
    "def sum_even_factors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            result += i\n    return result",
    "def even_factors(number):\n    return sum([i for i in range(1, int(number) + 1) if i % 2 == 0 and i!= number])\n\n# Test Cases\nprint(even_factors(10))\nprint(even_factors(14))\nprint(even_factors(20))",
    "def find_even_factors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 1:\n        return 1\n    for i in range(2, number+1):\n        if number % i == 0:\n            number = number / i\n            return i\n    return number\n\nif __name__ == \"__main__\":\n    print find_even_factors(11)",
    "def find_sum_of_even_factors(n):\n    \"\"\"\n    Find the sum of even factors of n.\n    \"\"\"\n    factors = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factors += i\n    return factors\n\nif __name__ == \"__main__\":\n    assert find_sum_of_even_factors(6) == 2\n    assert find_sum_of_even_factors(17) == 4\n    assert find_sum_of_even_factors(15) == 10\n    assert find_sum_of_even_factors(42) == 14",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\ndef is_even(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5076\u6570\ndef is_odd(n):\n    if n % 2 == 0:\n        return False\n    return True\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_both(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\ndef is_even_or_odd(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_both_or_odd(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_odd_or_both(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_both_or_odd_or_both(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_odd_or_both_or_odd_or_both(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570\ndef is_odd_or_both_or_odd_or_both(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u6216\u5076\u6570",
    "def sum_even_factors(num):\n    \"\"\"\n    >>> sum_even_factors(42)\n    6\n    >>> sum_even_factors(13)\n    7\n    \"\"\"\n    return sum(i for i in range(2, num + 1) if i % 2 == 0)\n\n# Your code here",
    "def even_factors(number):\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number\n\nprint(even_factors(5))",
    "def find_sum_even_factors(n):\n    \"\"\"\n    Find the sum of even factors of a number n.\n    >>> find_sum_even_factors(6)\n    2\n    >>> find_sum_even_factors(20)\n    6\n    >>> find_sum_even_factors(21)\n    5\n    \"\"\"\n    return sum(n//i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def even_factors(number):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n\n    >>> even_factors(10)\n    6\n    >>> even_factors(13)\n    6\n    >>> even_factors(15)\n    12\n    >>> even_factors(30)\n    20\n    \"\"\"\n    return sum(i for i in range(1, number) if number % i == 0 and i % 2 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def find_sum_of_even_factors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return sum(x for x in range(2, int(number**0.5) + 1) if number % x == 0 and x % 2 == 0)\n\n# Your FindSumOfEvenFactors function will be called like this:\n# num, sum = find_sum_of_even_factors(number)",
    "def sum_even_factors(number):\n    factors = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.append(i)\n            number //= i\n    return sum(factors)\n\nif __name__ == \"__main__\":\n    print(sum_even_factors(100))",
    "def sum_even_factors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # Using while loop\n    sum = 0\n    while number > 0:\n        if number % 2 == 0:\n            sum += number / 2\n            number = number / 2\n        else:\n            number = number - 1\n    return sum\n\n# Test Cases\n#>>> sum_even_factors(5)\n#3\n#>>> sum_even_factors(6)\n#5\n#>>> sum_even_factors(12)\n#10",
    "def sum_even_factors(n):\n    \"\"\"\n    >>> sum_even_factors(20)\n    20\n    >>> sum_even_factors(5)\n    5\n    >>> sum_even_factors(30)\n    30\n    >>> sum_even_factors(15)\n    15\n    >>> sum_even_factors(16)\n    16\n    >>> sum_even_factors(23)\n    23\n    \"\"\"\n    factors = [n]\n    while n > 1:\n        n = n - (n % 2)\n        factors.append(n)\n    return sum(factors)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef sum_even_factors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(2, math.floor(math.sqrt(number))+1):\n        if number % i == 0 and i % 2 == 0:\n            total += i\n    return total\n\nif __name__ == \"__main__\":\n    print sum_even_factors(6)\n    print sum_even_factors(12)\n    print sum_even_factors(100)",
    "def sum_of_even_factors(num):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    return sum(x for x in range(1, num) if x % 2 == 0)\n\n# Test Cases\nprint(sum_of_even_factors(5))\nprint(sum_of_even_factors(10))\nprint(sum_of_even_factors(20))",
    "def sum_of_even_factors(n):\n    \"\"\"\n    >>> sum_of_even_factors(5)\n    6\n    >>> sum_of_even_factors(12)\n    24\n    \"\"\"\n    # Sum of factors of n\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n    return s\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def sum_even_factors(num):\n    \"\"\"\n    :param num:\n    :return: sum of even factors\n    \"\"\"\n    return sum([n for n in range(1, num+1) if n % 2 == 0])\n\n\nif __name__ == '__main__':\n    assert sum_even_factors(3) == 6\n    assert sum_even_factors(8) == 12\n    assert sum_even_factors(5) == 10\n    assert sum_even_factors(6) == 12\n    assert sum_even_factors(12) == 24\n    assert sum_even_factors(20) == 40\n    assert sum_even_factors(30) == 60",
    "def sum_even_factors(num):\n    \"\"\"\n    sum_even_factors(num) -> sum\n\n    sum_even_factors(num) finds the sum of all even numbers that divide\n    num.\n\n    >>> sum_even_factors(3)\n    2\n    >>> sum_even_factors(5)\n    4\n    \"\"\"\n\n    return sum(i for i in range(1, num+1) if i % 2 == 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def sum_of_even_factors(number):\n    \"\"\"\n    For example, given number = 12, return 6 as the sum.\n    \"\"\"\n    return sum(i for i in range(1, int(number)+1) if number % i == 0 and i % 2 == 0)\n\nif __name__ == '__main__':\n    print(sum_of_even_factors(12))",
    "def sum_even_factors(number):\n    '''\n    :param number: the number to sum up the factors of\n    :returns: the sum of the even factors of number\n    '''\n\n    factors = [i for i in range(2, number)]\n    factors.sort()\n\n    sum = 0\n\n    for i in factors:\n        if i % 2 == 0:\n            sum += i\n\n    return sum\n\n\nprint(sum_even_factors(5))",
    "def sum_even_factors(num):\n    \"\"\"\n    Return the sum of even factors of num.\n    \"\"\"\n    if num < 2:\n        return num\n    return sum(filter(lambda x: x % 2 == 0, range(1, num + 1)))\n\n\nif __name__ == '__main__':\n    assert sum_even_factors(3) == 3\n    assert sum_even_factors(10) == 6\n    assert sum_even_factors(100) == 12",
    "def sum_even_factors(n):\n    \"\"\"\n    Function to calculate the sum of even factors of a number.\n\n    Input:\n    n -- The number to find the sum of its even factors.\n    Output:\n    Sum of the even factors of n.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(1, n):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\nprint sum_even_factors(12)",
    "def sum_even_factors(num):\n    \"\"\"\n    :param num: a positive integer\n    :return: sum of even factors of num\n    \"\"\"\n    return sum(i for i in range(1, num/2) if num % i == 0)\n\nif __name__ == \"__main__\":\n    print sum_even_factors(5)",
    "def find_sum_even_factors(num):\n    \"\"\"\n    Find the sum of even factors of num.\n\n    :param num: The number for which sum of even factors is to be found.\n    :return: The sum of even factors of num.\n    \"\"\"\n    if num == 1:\n        return 0\n\n    if num % 2 == 0:\n        return num // 2\n\n    return num - (num % 2)\n\n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n\n    print(find_sum_even_factors(num))",
    "def get_even_factors(n):\n    \"\"\"\n    Find the sum of all even factors of n.\n    \"\"\"\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += i\n    return s\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print get_even_factors(100)\n\nif __name__ == '__main__':\n    main()",
    "def sum_even_factors(num):\n    sum = 0\n    for i in range(2, int(num) + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nprint sum_even_factors(100)",
    "def sum_of_even_factors(number):\n    sum = 0\n    for x in range(1, int(number**0.5)+1):\n        if number % x == 0:\n            sum += x\n    return sum\n\nprint sum_of_even_factors(10)",
    "def sum_of_even_factors(n):\n    factors = [i for i in range(2, n) if n % i == 0]\n    return sum(factors)\n\n\"\"\"\nTest cases\n\"\"\"\n\nassert sum_of_even_factors(6) == 6\nassert sum_of_even_factors(5) == 5\nassert sum_of_even_factors(4) == 2\nassert sum_of_even_factors(3) == 3\nassert sum_of_even_factors(2) == 2\nassert sum_of_even_factors(1) == 1\nassert sum_of_even_factors(0) == 0\nassert sum_of_even_factors(9) == 6",
    "def find_even_factors(num):\n    factors = [1]\n    for i in range(2, num):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(2)\n        for j in range(3, num, i):\n            if j % 2 == 0:\n                factors.append(j)\n            else:\n                factors.append(2)\n    return sum(factors)\n\nif __name__ == \"__main__\":\n    print(find_even_factors(20))",
    "def find_even_factors(n):\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n\nif __name__ == \"__main__\":\n    print(find_even_factors(100))",
    "def sum_even_factors(n):\n    \"\"\"\n    >>> sum_even_factors(6)\n    3\n    >>> sum_even_factors(5)\n    2\n    >>> sum_even_factors(7)\n    5\n    \"\"\"\n    return sum(i for i in range(1, n) if i % 2 == 0 and i > 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n) -> sum\n    sum_even_factors(n) returns the sum of even factors of n.\n    \"\"\"\n\n    # The list of even factors is the sum of all even numbers that are less than n.\n    even_factors = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            even_factors += i\n\n    return even_factors\n\nprint sum_even_factors(6)",
    "import math\n\ndef even_factors(n):\n    if n == 0:\n        return 0\n    return sum([x for x in range(1, int(math.sqrt(n)) + 1) if n % x == 0])\n\n\nprint(even_factors(17))",
    "def even_factors(n):\n    \"\"\"\n    Find the sum of all the even factors of a number.\n    :param n: The number.\n    :return: The sum of all the even factors of a number.\n    \"\"\"\n    factors = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors += i\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(even_factors(20))\n    print(even_factors(100))",
    "def sum_even_factors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n\n    Arguments:\n        n (int): number whose even factors should be found.\n\n    Returns:\n        (int): sum of even factors of n.\n    \"\"\"\n    return sum(i for i in range(2, n) if i % 2 == 0)\n\nprint(sum_even_factors(30))",
    "def sum_of_even_factors(number):\n    sum = 0\n    for i in range(2, int(number/2)):\n        if number % i == 0:\n            sum += i\n    return sum\n\nprint sum_of_even_factors(8)",
    "def even_factors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n    :param n: integer\n    :return: integer\n    \"\"\"\n    sum = 0\n    for i in range(1, int(n/2) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nprint(even_factors(200))",
    "def sum_even_factors(n):\n    \"\"\"\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) -> sum_even_factors\n\n    sum_even_factors(n) -> sum_even_factors\n    sum_even_factors(n) ->",
    "def even_factors(number):\n    return sum(n for n in range(2, number) if number % n == 0)\n\n\nprint(even_factors(10))",
    "def sum_even_factors(num):\n    if num == 1:\n        return 1\n    elif num % 2 == 0:\n        return num * 2\n    else:\n        return num * sum_even_factors(num // 2)\n\nprint(sum_even_factors(6))",
    "def sumEvenFactors(n):\n    return sum(x for x in range(1, n) if x % 2 == 0)\n\nif __name__ == '__main__':\n    print sumEvenFactors(20)",
    "def sumEven(n):\n    return sum(x for x in range(1, n) if x % 2 == 0)\n\nprint(sumEven(5))",
    "def find_sum_even_factors(num):\n    \"\"\"\n    >>> find_sum_even_factors(5)\n    2\n    >>> find_sum_even_factors(9)\n    6\n    >>> find_sum_even_factors(8)\n    4\n    >>> find_sum_even_factors(0)\n    0\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    num_list = list(range(1, num + 1))\n    sum_even_factors = 0\n    for num in num_list:\n        if num % 2 == 0:\n            sum_even_factors += num\n    return sum_even_factors\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def sum_even_factors(n):\n    \"\"\"\n    Sum of the even factors of a number.\n    \"\"\"\n    return sum(i for i in range(2, n/2) if n % i == 0)\n\n\ndef sum_even_factors_python(n):\n    \"\"\"\n    Sum of the even factors of a number.\n    \"\"\"\n    return sum(i for i in range(2, n/2+1) if n % i == 0)\n\n\ndef sum_even_factors_python2(n):\n    \"\"\"\n    Sum of the even factors of a number.\n    \"\"\"\n    return sum(i for i in range(2, n/2) if n % i == 0)",
    "def sum_even_factors(number):\n    \"\"\"\n    Write a function sum_even_factors that returns the sum of all the even\n    factors of number.\n    \"\"\"\n    return sum(number_factors(number, 2))\n\ndef number_factors(number, start_number):\n    \"\"\"\n    Write a function number_factors that returns a list of all the even\n    factors of number.\n    \"\"\"\n    if start_number > number:\n        return []\n    if number % start_number == 0:\n        return [start_number] + number_factors(number, start_number+1)\n    else:\n        return number_factors(number, start_number+2)\n\ndef main():\n    print(\"Number of even factors of 20 is: \" + str(sum_even_factors(20)))\n\nif __name__ == '__main__':\n    main()",
    "def sum_even_factors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    assert sum_even_factors(100) == 48, \"Sum of even factors is wrong\"\n    assert sum_even_factors(200) == 76, \"Sum of even factors is wrong\"\n    assert sum_even_factors(300) == 156, \"Sum of even factors is wrong\"",
    "def sum_of_even_factors(n):\n    \"\"\"\n    n: integer\n    return: sum of even factors of n\n    \"\"\"\n    return sum(i for i in range(1, n) if i % 2 == 0)\n\nprint(sum_of_even_factors(100))",
    "def sum_even_factors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # using the formula n = (n - 1) * (n - 2) *... * 2 + 1\n    return (n - 1) * (n - 2) *... * 2 + 1\n\n\n\nif __name__ == '__main__':\n    n = 9\n    print(sum_even_factors(n))\n\n    n = 27\n    print(sum_even_factors(n))\n\n    n = 28\n    print(sum_even_factors(n))\n\n    n = 2834\n    print(sum_even_factors(n))\n\n    n = 769\n    print(sum_even_factors(n))\n\n    n = 771\n    print(sum_even_factors(n))\n\n    n = 773\n    print(sum_even_factors(n))\n\n    n = 775\n    print(sum_even_factors(n))\n\n    n = 777\n    print(sum_even_factors(n))\n\n    n = 779\n    print(sum_even_factors(n))\n\n    n = 781\n    print(sum_even_factors(n))\n\n    n = 1071\n    print(sum_even_factors(n))\n\n    n = 1079\n    print(sum_even_factors(n))\n\n    n = 1081\n    print(sum_even_factors(n))\n\n    n = 1087\n    print(sum_even_factors(n))\n\n    n = 1089\n    print(sum_even_factors(n))\n\n    n = 1109\n    print(sum_even_factors(n))\n\n    n = 1111\n    print(sum_even_factors(n))\n\n    n = 1119\n    print(sum_even_factors(n))\n\n    n = 1121\n    print(sum_even_factors(n))\n\n    n = 1151\n    print(sum_even_factors(n))\n\n    n = 1153\n    print(sum_even_factors(n))\n\n    n = 1327\n    print",
    "import math\n\n\ndef find_sum_of_even_factors(number):\n    \"\"\"\n    Args:\n        number (int): The number to find the sum of the even factors.\n    Returns:\n        sum (int): The sum of the even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n\n\ndef test_find_sum_of_even_factors():\n    assert find_sum_of_even_factors(6) == 2\n    assert find_sum_of_even_factors(12) == 6\n    assert find_sum_of_even_factors(20) == 10\n    assert find_sum_of_even_factors(50) == 25\n    assert find_sum_of_even_factors(100) == 50\n    assert find_sum_of_even_factors(200) == 100\n    assert find_sum_of_even_factors(500) == 250\n    assert find_sum_of_even_factors(1000) == 500\n\n\nif __name__ == \"__main__\":\n    test_find_sum_of_even_factors()",
    "def sum_even_factors(num):\n    \"\"\"\n    >>> sum_even_factors(1)\n    1\n    >>> sum_even_factors(2)\n    2\n    >>> sum_even_factors(3)\n    3\n    >>> sum_even_factors(4)\n    6\n    >>> sum_even_factors(5)\n    10\n    >>> sum_even_factors(6)\n    12\n    >>> sum_even_factors(7)\n    14\n    >>> sum_even_factors(8)\n    16\n    >>> sum_even_factors(9)\n    18\n    >>> sum_even_factors(10)\n    20\n    >>> sum_even_factors(11)\n    22\n    >>> sum_even_factors(12)\n    24\n    >>> sum_even_factors(13)\n    26\n    >>> sum_even_factors(14)\n    28\n    >>> sum_even_factors(15)\n    30\n    >>> sum_even_factors(16)\n    32\n    >>> sum_even_factors(17)\n    34\n    >>> sum_even_factors(18)\n    36\n    >>> sum_even_factors(19)\n    38\n    >>> sum_even_factors(20)\n    40\n    >>> sum_even_factors(21)\n    42\n    >>> sum_even_factors(22)\n    44\n    >>> sum_even_factors(23)\n    46\n    >>> sum_even_factors(24)\n    48\n    >>> sum_even_factors(25)\n    50\n    >>> sum_even_factors(26)\n    52\n    >>> sum_even_factors(27)\n    54\n    >>> sum_even_factors(28)\n    56\n    >>> sum_even_factors(29)\n    58\n    >>> sum_even_factors(30)\n    60\n    >>> sum_even_factors(31)\n    62\n    >>> sum_even_factors(32)\n    64\n    >>> sum_even_factors(33)\n    66\n    >>>",
    "def get_factors(n):\n    return [i for i in range(1, n) if n % i == 0]\n\ndef sum_even_factors(n):\n    factors = get_factors(n)\n    return sum(factors)\n\nprint(sum_even_factors(10))",
    "def sum_even_factors(n):\n    \"\"\"\n    >>> sum_even_factors(7)\n    6\n    \"\"\"\n    return sum(i for i in range(1, n) if i % 2 == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sumEvenFactors(n):\n    \"\"\"\n    >>> sumEvenFactors(4)\n    6\n    >>> sumEvenFactors(6)\n    6\n    >>> sumEvenFactors(8)\n    8\n    >>> sumEvenFactors(9)\n    15\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def even_factors(n):\n    \"\"\"\n    sum of even factors of n\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n\nprint(\"sum of even factors of 12:\", even_factors(12))",
    "def sum_even_factors(n):\n    \"\"\"\n    >>> sum_even_factors(7)\n    21\n    >>> sum_even_factors(13)\n    29\n    >>> sum_even_factors(8)\n    16\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/python\n\ndef find_sum_of_even_factors(number):\n    # Your code here\n    sum_of_even_factors = 0\n    for i in range(1, number):\n        if i % 2 == 0:\n            sum_of_even_factors += i\n    return sum_of_even_factors\n\nif __name__ == '__main__':\n    print find_sum_of_even_factors(6)",
    "def even_factors(number):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            even_factors += i\n    return even_factors\n\n# Test Cases\n\nprint(even_factors(25))\nprint(even_factors(30))\nprint(even_factors(12))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}