{
  "problem": {
    "task_id": "MBPP/332",
    "prompt": "Write a function to count character frequency of a given string.",
    "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
    "test_list": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ],
    "challenge_test_list": [],
    "problem_id": 321
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        count = {}\n        for c in s:\n            count[c] = count.get(c, 0) + 1\n        return sum(count.values())\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countChar('hello world'))\n    print(s.countChar('hello'))\n    print(s.countChar('hgll'))",
    "class Solution(object):\n    def frequency(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if not s:\n            return []\n        freq = [0] * 256\n        for c in s:\n            freq[ord(c)] += 1\n        return [freq[i] for i in range(256)]\n\n\nif __name__ == \"__main__\":\n    assert Solution().frequency(\"abc\") == [2, 1, 1, 0]\n    assert Solution().frequency(\"\") == []\n    assert Solution().frequency(\"A\") == [1]\n    assert Solution().frequency(\"abcdef\") == [2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0]",
    "def countCharFrequency(s):\n    return {c: 0 for c in s}\n\ndef countCharFrequency2(s):\n    count = {c: 0 for c in s}\n    for c in s:\n        count[c] += 1\n    return count\n\ndef countCharFrequency3(s):\n    return {c: 0 for c in s}\n\ndef countCharFrequency4(s):\n    count = {c: 0 for c in s}\n    for c in s:\n        count[c] += 1\n    return count\n\nif __name__ == '__main__':\n    print countCharFrequency('')\n    print countCharFrequency('')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')\n    print countCharFrequency('abc')",
    "class Solution(object):\n    def countChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return sum([ord(c) in s])",
    "# https://www.hackerrank.com/challenges/count-characters/problem\n\n# Your function should return an integer.\n# You can assume the input string has only lowercase letters.\n\ndef count_characters(s):\n    c = 0\n    for i in s:\n        c += ord(i)\n    return c\n\nif __name__ == '__main__':\n    s = input()\n    print(count_characters(s))",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([ord(c) for c in s])",
    "from collections import defaultdict\nfrom math import log\n\n\nclass Solution:\n    \"\"\"\n    @param s, a string\n    @return an integer\n    \"\"\"\n    def countCharFrequency(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        m = defaultdict(int)\n        for i in range(len(s)):\n            m[s[i]] += 1\n        return sum(m.values())\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.countCharFrequency(\"a\"))\n    print(sol.countCharFrequency(\"aa\"))\n    print(sol.countCharFrequency(\"aaa\"))",
    "def count_char(s):\n    \"\"\"\n    >>> count_char('hello')\n    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n    \"\"\"\n    return dict((c, s.count(c)) for c in set(s))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def count_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in str:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    str = \"Hello world\"\n    print(count_char(str))",
    "# -*- coding:utf-8 -*-\n\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        count = 0\n        for c in s:\n            count += 1\n        return count\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.countChar(\"abcd\")\n    print s.countChar(\"aabbcc\")\n    print s.countChar(\"aabbbcc\")\n    print s.countChar(\"\")\n    print s.countChar(\"abcc\")",
    "class Solution:\n    # @param str, a string\n    # @return an integer\n    def frequency(self, str):\n        char_count = {}\n        for c in str:\n            char_count[c] = char_count.get(c, 0) + 1\n        return len(char_count)\n\n    # @param str, a string\n    # @return an integer\n    def frequency2(self, str):\n        char_count = {}\n        for c in str:\n            if c in char_count:\n                char_count[c] += 1\n            else:\n                char_count[c] = 1\n        return len(char_count)\n\n\nif __name__ == \"__main__\":\n    print Solution().frequency(\"abcd\")\n    print Solution().frequency2(\"abcd\")",
    "import collections\nimport re\n\ndef countChar(str):\n    \"\"\"\n    :type str: str\n    :rtype: collections.Counter\n    \"\"\"\n    return collections.Counter(str)\n\n\nif __name__ == '__main__':\n    print(countChar('abcd'))\n    print(countChar('abc'))\n    print(countChar('abb'))\n    print(countChar('abcde'))\n    print(countChar('abcde'))\n    print(countChar('abcde'))",
    "def count_frequency(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if not string:\n        return 0\n    count = 0\n    for c in string:\n        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert count_frequency(\"hello\") == 5\n    assert count_frequency(\"world\") == 4\n    assert count_frequency(\"banana\") == 1\n    assert count_frequency(\"mississippi\") == 5\n    assert count_frequency(\"abcd\") == 0\n    assert count_frequency(\"abcd\") == 0\n    assert count_frequency(\"abcd\") == 0\n    assert count_frequency(\"abcd\") == 0\n    assert count_frequency(\"abcd\") == 0\n    assert count_frequency(\"abcd\") == 0",
    "#!/usr/bin/env python\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        count = {}\n        for ch in s:\n            if ch in count:\n                count[ch] += 1\n            else:\n                count[ch] = 1\n        return sum(count.values())\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countChar(\"Hello world!\")\n    print s.countChar(\"\")\n    print s.countChar(\"a\")\n    print s.countChar(\"ab\")\n    print s.countChar(\"abc\")\n    print s.countChar(\"abcd\")",
    "import collections\n\n\nclass Solution(object):\n    def frequencySort(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        freq = collections.Counter(s)\n        freq_list = list(freq.most_common())\n        freq_list = sorted(freq_list, key=lambda x: x[1], reverse=True)\n        return freq_list\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.frequencySort('hello')",
    "from collections import Counter\n\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        cnt = Counter(s)\n        return cnt.values()\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.countChar('aacb'))\n    print(sol.countChar('abb'))\n    print(sol.countChar('aabbb'))\n    print(sol.countChar('abc'))",
    "import unittest\nfrom collections import Counter\n\ndef char_freq(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return Counter(string).most_common()[0][1]\n\nclass TestCode(unittest.TestCase):\n    def test_basic(self):\n        self.assertEqual(char_freq('ab'), 2)\n        self.assertEqual(char_freq('aa'), 1)\n        self.assertEqual(char_freq('aaaa'), 4)\n        self.assertEqual(char_freq('abab'), 2)\n        self.assertEqual(char_freq('aabb'), 1)\n\nif __name__ == '__main__':\n    unittest.main()",
    "# Definition for a character:\n# class Character:\n#     def __init__(self, value):\n#         self.value = value\n#         self.count = 1\n\nclass Solution(object):\n    def countCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for c in s:\n            cnt += 1\n            if c =='':\n                cnt += 1\n            elif c == '!':\n                cnt += 1\n            elif c == '?':\n                cnt += 1\n            elif c == '.':\n                cnt += 1\n            elif c == ',':\n                cnt += 1\n            elif c == ';':\n                cnt += 1\n            elif c == ':':\n                cnt += 1\n            elif c == '?':\n                cnt += 1\n            elif c == '!':\n                cnt += 1\n            elif c =='':\n                cnt += 1\n            elif c == '-':\n                cnt += 1\n            elif c == '+':\n                cnt += 1\n            elif c == '*':\n                cnt += 1\n            elif c == '/':\n                cnt += 1\n            elif c == '=':\n                cnt += 1\n            elif c == '>':\n                cnt += 1\n            elif c == '<':\n                cnt += 1\n            elif c == '&':\n                cnt += 1\n            elif c == '|':\n                cnt += 1\n            elif c == '~':\n                cnt += 1\n            elif c == '{':\n                cnt += 1\n            elif c == '}':\n                cnt += 1\n            elif c == '[':\n                cnt += 1\n            elif c == ']':\n                cnt += 1\n            elif c == ';':\n                cnt += 1\n            elif c == ':':\n                cnt += 1\n            elif c == '^':\n                cnt += 1\n            elif c == ',':\n                cnt +=",
    "from collections import Counter\n\ndef count_char_freq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in s)\n\nif __name__ == \"__main__\":\n    s = \"Hello, world!\"\n    print(count_char_freq(s))",
    "import sys\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Please enter a string to count characters\")\n        sys.exit(0)\n\n    str = sys.argv[1]\n    cnt = 0\n    for i in range(0, len(str)):\n        if str[i] == 'a':\n            cnt += 1\n    print(\"Character frequency:\", cnt)\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import Counter\n\n\ndef count_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\nif __name__ == \"__main__\":\n    string = \"abcccddddeeee\"\n    print(count_char(string))\n    print(Counter(string))",
    "class Solution:\n    def countChar(self, s: str) -> int:\n        char_freq = [0] * 256\n        for c in s:\n            char_freq[ord(c)] += 1\n        return sum(char_freq)",
    "# https://leetcode.com/problems/count-and-say/\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 0:\n            return \"1\"\n        if n == 1:\n            return \"1\"\n        count = 1\n        s = \"\"\n        for i in range(n):\n            s += str(count)\n            count = 1\n            while s[-1] == s[-2]:\n                s = s[:-1]\n                count += 1\n            s += str(count)\n        return s",
    "def character_frequency(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len(text)\n\nif __name__ == '__main__':\n    print(character_frequency('abc'))\n    print(character_frequency('abcd'))\n    print(character_frequency('abcdef'))\n    print(character_frequency('abcdefghijklmnopqrstuvwxyz'))\n    print(character_frequency('abcdefghijklmnopqrstuvwxyz'))\n    print(character_frequency('abcdefghijklmnopqrstuvwxyz'))\n    print(character_frequency('abcdefghijklmnopqrstuvwxyz'))",
    "from collections import Counter\n\ndef count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in s)\n\nif __name__ == '__main__':\n    s = 'abc'\n    print count_char(s)",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        counts = [0 for _ in range(256)]\n        for c in s:\n            counts[ord(c)] += 1\n        return [counts[i] for i in range(256)]",
    "def count_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_2(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_3(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_4(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_5(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_6(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\ndef count_chars_7(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1",
    "# Time:  O(n)\n# Space: O(1)\n\n# We can use a hash table to store all the frequencies.\n# Then, we can iterate through the string and check the frequency of each character.\n# If the character is a duplicate, we just increment the frequency by 1.\n# If the character is not a duplicate, we just increment the frequency by 1.\n# Once we have finished, we can print the result.\n# Note that the input string is not necessarily a valid string.\n\n# Example 1:\n# Input: \"Hello\"\n# Output: 5\n# Explanation:\n# \"H\", \"e\", \"l\", \"l\", \"o\"\n# \"e\", \"l\", \"l\", \"o\"\n# \"H\", \"e\", \"l\", \"l\", \"o\"\n# \"e\", \"l\", \"l\", \"o\"\n# \"H\", \"e\", \"l\", \"l\", \"o\"\n# \n# Example 2:\n# Input: \"abcd\"\n# Output: 4\n# Explanation:\n# \"a\", \"b\", \"c\", \"d\"\n# \"a\", \"b\", \"c\", \"d\"\n# \"a\", \"b\", \"c\", \"d\"\n# \"a\", \"b\", \"c\", \"d\"\n# \n# Example 3:\n# Input: \"aaaaa\"\n# Output: 1\n# Explanation:\n# \"a\", \"a\", \"a\", \"a\", \"a\"\n# \n# Example 4:\n# Input: \"ab\"\n# Output: 1\n# Explanation:\n# \"a\", \"b\"\n# \n# Example 5:\n# Input: \"c\"\n# Output: 1\n# \n# Example 6:\n# Input: \"abc\"\n# Output: 1\n# \n# Example 7:\n# Input: \"a\"\n# Output: 1\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for c in s:\n            if c in s:\n                cnt += 1\n            else:\n                cnt += 1\n        return cnt",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for ch in s:\n            cnt += 1\n        return cnt\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.countChar(\"Hello World\")\n    print sol.countChar(\"Hello\")\n    print sol.countChar(\"\")\n    print sol.countChar(\"hello\")",
    "def count_chars(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in str:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_chars(\"Hello\"))\n    print(count_chars(\"Hello World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World\"))\n    print(count_chars(\"Hello World World",
    "# https://leetcode.com/problems/count-characters/\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return len(s)",
    "def count(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in string:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    assert(count('hello') == 5)\n    assert(count('Hello') == 1)\n    assert(count('helloHello') == 3)\n    assert(count('h') == 2)\n    assert(count('hello world') == 6)\n    assert(count('Hello world') == 1)\n    assert(count('Hello worldHello') == 4)\n    assert(count('Hello worldHello world') == 1)\n    assert(count('Hello worldHello worldHello') == 1)\n    assert(count('Hello worldHello worldHello world') == 1)\n    assert(count('Hello worldHello worldHello worldHello') == 1)\n    assert(count('Hello worldHello worldHello worldHello worldHello') == 1)\n    assert(count('Hello worldHello worldHello worldHello worldHello worldHello') == 1)\n    assert(count('Hello worldHello worldHello worldHello worldHello worldHello worldHello') == 1)",
    "# @include\ndef count_chars(s):\n    counts = defaultdict(int)\n    for ch in s:\n        counts[ch] += 1\n    return counts\n# @exclude\n\n\ndef main():\n    s = 'abcd'\n    counts = count_chars(s)\n    assert counts == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\n    s = 'abc'\n    counts = count_chars(s)\n    assert counts == {'a': 1, 'b': 1, 'c': 1}\n    s = 'abcde'\n    counts = count_chars(s)\n    assert counts == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n    s = 'abcdefgh'\n    counts = count_chars(s)\n    assert counts == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\n    s = 'abcdefghijkl'\n    counts = count_chars(s)\n    assert counts == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1}\n    s = 'aabbccddeeffgg'\n    counts = count_chars(s)\n    assert counts == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2}\n\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a string\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def countChar(self, s):\n        return len(s)\n\n    # @param {string} s\n    # @return {integer}\n    def countChar(self, s):\n        return len(s)\n\n    # @param {string} s\n    # @return {integer}\n    def countChar(self, s):\n        return len(s)",
    "# Definition for a character\nclass Character(object):\n    def __init__(self, value=0, count=0):\n        self.value = value\n        self.count = count\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # count the number of times each character appears in the string\n        freq = collections.Counter(s)\n\n        # sum up the number of times each character appears\n        return sum(freq.values())",
    "import unittest\n\n\ndef count_character_frequency(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    cnt = 0\n    for c in s:\n        cnt += 1\n    return cnt\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        s = \"hello world\"\n        self.assertEqual(count_character_frequency(s), 6)\n\nif __name__ == '__main__':\n    unittest.main()",
    "def count_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in str:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    assert count_char('hello') == 5\n    assert count_char('l') == 1\n    assert count_char('l') == 1\n    assert count_char('ab') == 2\n    assert count_char('ab') == 2\n    assert count_char('ab') == 2\n    assert count_char('ab') == 2",
    "def character_frequency(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    freq = {}\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    return len(freq)\n\nif __name__ == '__main__':\n    s = \"Hello World!\"\n    print(character_frequency(s))",
    "def countChar(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(countChar(\"Hello World\"))",
    "#\n# count_chars.py\n#\n# Created by Billy Wilson Arante <arantebillywilson@gmail.com>\n# Created on 2016/05/12 PHT\n#\n# Attribution: https://www.hackerrank.com/challenges/string-count-chars/problem\n#\n\ndef main():\n    \"\"\"Main\"\"\"\n\n    # Get input\n    string = raw_input()\n\n    # Count characters\n    count = 0\n    for i in string:\n        count += 1\n\n    # Print output\n    print count\n\nif __name__ == \"__main__\":\n    main()",
    "def countCharFreq(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    print(countCharFreq('abcabcabc'))\n    print(countCharFreq('abcd'))\n    print(countCharFreq('abc'))\n    print(countCharFreq('aabb'))\n    print(countCharFreq('aa'))\n    print(countCharFreq('a'))\n    print(countCharFreq('a' * 200))",
    "from collections import Counter\n\ndef count_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\n\nif __name__ == '__main__':\n    print(count_chars('hello world'))\n    print(count_chars('Hello, World'))\n    print(count_chars('I love you!'))\n    print(count_chars('Hello, I love you!'))\n    print(count_chars('abcd'))\n    print(count_chars('a'))",
    "def count_char(string):\n    \"\"\"\n    Count the number of characters in a string.\n    \"\"\"\n    count = 0\n    for c in string:\n        count += 1\n    return count\n\ndef main():\n    print(count_char('hello'))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for c in s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.countChar('abcabcbb')\n    print s.countChar('abcdabcd')\n    print s.countChar('abcdabcd')\n    print s.countChar('abcdabcd')\n    print s.countChar('abcdabcd')\n    print s.countChar('abcdabcd')\n    print s.countChar('abcdabcd')",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] == 'a':\n                count += 1\n            elif s[i] == 'b':\n                count -= 1\n        return count",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def countChar(self, s):\n        count = {}\n        for i in s:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        return sum(count.values())\n\n\n# Test\ns = Solution()\nprint s.countChar(\"Hello, World!\")",
    "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution:\n    # @param s, a string\n    # @return an integer\n    def countChar(self, s):\n        # Write your code here\n        if s == None or len(s) == 0:\n            return 0\n\n        count = 0\n        for i in range(len(s)):\n            count += 1 if s[i] == 'a' else 0\n\n        return count\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.countChar(\"a\")\n    print s.countChar(\"abc\")",
    "# TODO:\n# 1. Use a hash table to store the count of character\n# 2. Use a dict to store the character\n# 3. Use a set to store the unique characters\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(map(lambda x: 1 if x == 'a' else 0, s))\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.countChar('Hello World')",
    "def count_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\nif __name__ == \"__main__\":\n    print(count_char(\"Hello\"))\n    print(count_char(\"Hello World\"))\n    print(count_char(\"Hello World\"))\n    print(count_char(\"Hello World\"))\n    print(count_char(\"Hello World\"))",
    "#!/usr/bin/env python\n\ndef count_char(string):\n    count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0,\n             'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0,\n             'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0,\n             'y': 0, 'z': 0, 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0,\n             'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0,\n             'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0,\n             'W': 0, 'X': 0, 'Y': 0, 'Z': 0, '0': 0, '1': 0, '2': 0, '3': 0,\n             '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n\n    for i in range(0, len(string)):\n        count[string[i]] += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    string = 'abcdeeeeefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(count_char(string))",
    "def countChar(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    counter = 0\n    for c in s:\n        counter += 1\n    return counter\n\n# Your CountChar solution here.",
    "#!/usr/bin/python\n\ndef count(s):\n    cnt = {}\n    for i in range(len(s)):\n        if s[i] not in cnt:\n            cnt[s[i]] = 1\n        else:\n            cnt[s[i]] += 1\n    return cnt\n\nif __name__ == '__main__':\n    s = 'abcd'\n    cnt = count(s)\n    print cnt",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # count the character of each character of the string\n        cnt = [0] * 256\n        for c in s:\n            cnt[ord(c)] += 1\n        return sum(cnt)\n\nif __name__ == \"__main__\":\n    print Solution().countChar(\"abc\")\n    print Solution().countChar(\"abcabc\")\n    print Solution().countChar(\"cba\")",
    "from collections import defaultdict\n\ndef count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = defaultdict(int)\n    for c in s:\n        count[c] += 1\n    return sum(count.values())\n\nif __name__ == \"__main__\":\n    s = \"aabbcc\"\n    print(count_char(s))",
    "import re\n\ndef count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\ndef count_char_re(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\ndef main():\n    s = 'hello'\n    print(count_char(s))\n    print(count_char_re(s))\n    \nif __name__ == '__main__':\n    main()",
    "def count_char_freq(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    counts = {}\n    for c in string:\n        counts[c] = counts.get(c, 0) + 1\n    return sum(counts.values())\n\nprint(count_char_freq('Hello'))\nprint(count_char_freq('Hello World'))\nprint(count_char_freq('Hello World World'))",
    "class Solution:\n    # @param str, a string\n    # @return an integer\n    def countChar(self, str):\n        # write your code here\n        cnt = 0\n        for ch in str:\n            cnt += 1\n        return cnt",
    "# https://leetcode.com/problems/count-characters/\n# TODO: https://leetcode.com/problems/count-characters/discuss/54729/Java-Accepted-Solution-with-explanation-with-explanation-and-explanation\n# https://leetcode.com/problems/count-characters/discuss/54730/Java-Accepted-Solution-with-explanation-with-explanation-and-explanation-and-explanation-and-explanation\n# https://leetcode.com/problems/count-characters/discuss/54730/Java-Accepted-Solution-with-explanation-with-explanation-and-explanation-and-explanation-and-explanation-and-explanation-and-explanation\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for i in range(len(s)):\n            if s[i] == 'a':\n                cnt += 1\n            elif s[i] == 'z':\n                cnt -= 1\n            else:\n                continue\n        return cnt\n\n\n# TESTS\ntests = [\n    (\"a\", 1),\n    (\"ab\", 2),\n    (\"abc\", 3),\n    (\"a\", 1),\n    (\"abcd\", 4),\n    (\"abcd\", 4),\n    (\"abcd\", 4),\n    (\"abcd\", 4),\n]\nfor t in tests:\n    sol = Solution()\n    actual = sol.countChar(t[0])\n    print(\"Count characters in '%s' -> %d\" % (t[0], actual))\n    assert t[1] == actual",
    "def count_char(string):\n    '''\n    >>> count_char('abc')\n    {'a': 2, 'b': 1, 'c': 1}\n    '''\n    count = {}\n    for char in string:\n        count[char] = count.get(char, 0) + 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    cnt = 0\n    for ch in s:\n        cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    assert(count_char(\"\") == 0)\n    assert(count_char(\"a\") == 1)\n    assert(count_char(\"abc\") == 3)\n    assert(count_char(\"hello\") == 5)",
    "def countChar(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for ch in s:\n        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert countChar(\"hello\") == 5\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11\n    assert countChar(\"hello world\") == 11",
    "import re\n\ndef count(string):\n    '''\n    Count the number of times each character appears in the string.\n    '''\n    chars = []\n    for char in string:\n        chars.append(char)\n    freq = {}\n    for char in chars:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    return freq\n\ndef main():\n    '''\n    Test case:\n    '''\n    test_cases = [\n        [\"\", {}],\n        [\"a\", {'a': 1}],\n        [\"ab\", {'a': 1, 'b': 1}],\n        [\"aa\", {'a': 2}],\n        [\"abcd\", {'b': 2, 'c': 1, 'd': 1}],\n        [\"abcde\", {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1}],\n        [\"abcabcabc\", {'a': 2, 'b': 2, 'c': 2}],\n        [\"aabbcc\", {'a': 2, 'b': 1, 'c': 2, 'd': 1}],\n        [\"aaabbcc\", {'a': 2, 'b': 2, 'c': 2, 'd': 1}],\n        [\"aaabbccdd\", {'a': 2, 'b': 2, 'c': 2, 'd': 1, 'e': 1}],\n    ]\n    for case in test_cases:\n        string, expected = case\n        print(\"String: {}, expected: {}\".format(string, expected))\n        actual = count(string)\n        print(\"Actual: {}\".format(actual))\n        assert actual == expected\n\nif __name__ == '__main__':\n    main()",
    "def count_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    s = \"Hello\"\n    print(count_chars(s))",
    "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: A map from character to its frequency\n    \"\"\"\n    def frequencyMap(self, s):\n        dic = {}\n        for c in s:\n            dic[c] = dic.get(c, 0) + 1\n        return dic\n\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(self.frequencyMap(s).values())\n\nif __name__ == \"__main__\":\n    assert Solution().countChar(\"abc\") == 3\n    assert Solution().countChar(\"abcd\") == 4\n    assert Solution().countChar(\"\") == 0\n    assert Solution().countChar(\"abcabcabc\") == 6",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = {}\n        for c in s:\n            count[c] = count.get(c, 0) + 1\n        return sum(count.values())",
    "class Solution:\n    # @return an integer\n    def countChar(self, s):\n        return sum(1 for c in s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countChar('hello'))\n    print(s.countChar('world'))",
    "def count_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if not string:\n        return 0\n\n    count = 0\n    for c in string:\n        count += 1\n\n    return count\n\nif __name__ == \"__main__\":\n    assert count_chars(\"hello\") == 5\n    assert count_chars(\"hello world\") == 6\n    assert count_chars(\"a\") == 1\n    assert count_chars(\"aa\") == 2\n    assert count_chars(\"aa\") == 2\n    assert count_chars(\"\") == 0",
    "class Solution:\n    def characterFrequency(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        result = [0] * 256\n        for ch in s:\n            result[ord(ch)] += 1\n        return [result[i] for i in range(256)]\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.characterFrequency('abc')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')\n    print s.characterFrequency('ababbb')",
    "# https://oj.leetcode.com/problems/count-and-say/\n# Given a string, count the number of characters 'a' to 'z'.\n# count_and_say(\u2018Hello, my name is John\u2019) \u2192 3\n# count_and_say(\u2018Hello, my name is John\u2019) \u2192 6\n# count_and_say(\u2018Hello, my name is John\u2019) \u2192 6\n# count_and_say(\u2018Hello, my name is John\u2019) \u2192 6\n\n# Note:\n# You may assume the string contains only lowercase letters.\n#\n# Example:\n#\n# Input:\n# s = \"Hello, my name is John\"\n# Output: 3\n#\n# Explanation:\n# 'h' -> 2\n# 'e' -> 1\n# 'l' -> 1\n# 'l' -> 1\n# 'o' -> 1\n# 'o,'-> 1\n#'my' -> 1\n# 'name' -> 1\n# 'is' -> 1\n# 'is' -> 1\n# 'name' -> 1\n# 'is' -> 1\n# 'John' -> 1\n#\n# Challenge:\n# Can you do it in O(1) space?\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n <= 0:\n            return \"\"\n        res = \"\"\n        for i in range(n):\n            res += self.countAndSay(i)\n        return res\n\nif __name__ == '__main__':\n    print(Solution().countAndSay(2))\n    print(Solution().countAndSay(3))\n    print(Solution().countAndSay(4))",
    "def char_frequency(string):\n    return {c: string.count(c) for c in string}\n\ndef main():\n    string = \"hello world\"\n    print(char_frequency(string))\n\nif __name__ == \"__main__\":\n    main()",
    "def count_char_freq(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        if str[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\n\ndef main():\n    assert count_char_freq('abcdefghijklmnopqrstuvwxyz') == 26\n    assert count_char_freq('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n    assert count_char_freq('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n    assert count_char_freq('1') == 1\n    assert count_char_freq('1') == 1\n    assert count_char_freq('1') == 1\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @return an integer\n    def countChar(self, s):\n        count = {}\n        for i in range(len(s)):\n            if s[i] in count:\n                count[s[i]] += 1\n            else:\n                count[s[i]] = 1\n        return sum(count.values())",
    "def count_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    s = 'Hello World!'\n    print(count_chars(s))",
    "# Definition for a character:\n# class Character:\n#     def __init__(self, val):\n#         self.val = val\n#         self.count = 1\n\nclass Solution:\n    # @param s, a string\n    # @return an integer\n    def countChar(self, s):\n        return sum(map(lambda c: c.count, s))\n\nif __name__ == \"__main__\":\n    s = \"Hello World!\"\n    sol = Solution()\n    print(sol.countChar(s))",
    "def character_frequency(string):\n    \"\"\"\n    :type string: str\n    :rtype: dict[str, int]\n    \"\"\"\n    frequency = {}\n    for c in string:\n        if c not in frequency:\n            frequency[c] = 1\n        else:\n            frequency[c] += 1\n    return frequency\n\nif __name__ == \"__main__\":\n    print(character_frequency('The quick brown fox jumps over the lazy dog.'))",
    "# https://www.hackerrank.com/challenges/string-count/problem\n\ndef count(string):\n    return len(string.split(\"\"))\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(count(string))",
    "def count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\ndef count_char_v1(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in s)\n\n\nif __name__ == '__main__':\n    assert count_char('hello') == 5\n    assert count_char_v1('hello') == 5\n\n    assert count_char('hello world') == 15\n    assert count_char_v1('hello world') == 15",
    "def characterFrequency(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# Your function will be called like this:\n# num = characterFrequency(\"Hello World!\")\n# print num\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert characterFrequency(\"Hello\") == 1, \"Hello\"\n    assert characterFrequency(\"World\") == 1, \"World\"\n    assert characterFrequency(\"Hello World\") == 2, \"Hello World\"\n    assert characterFrequency(\"Hello World!\") == 3, \"Hello World!\"\n    assert characterFrequency(\"Hello\") == 1, \"Hello\"\n    assert characterFrequency(\"\") == 0, \"Empty String\"\n    assert characterFrequency(\"a\") == 1, \"a\"",
    "class Solution:\n    # @param str, a string\n    # @return an integer\n    def countChar(self, str):\n        char_count = {}\n        for i in range(len(str)):\n            if str[i] not in char_count:\n                char_count[str[i]] = 1\n            else:\n                char_count[str[i]] += 1\n        return sum(char_count.values())",
    "def count_chars(string):\n    \"\"\"\n    Write a function to count character frequency of a given string.\n\n    Example\n    Input:\n    string = \"hello\"\n    Output:\n    {'h': 1, 'e': 1, 'l': 1, 'o': 1}\n    Explanation:\n    'h' is the only character in 'hello'.\n    'e' is the only character in 'hello'.\n    'l' is the only character in 'hello'.\n    'o' is the only character in 'hello'.\n    \"\"\"\n\n    chars = {}\n    for ch in string:\n        chars[ch] = chars.get(ch, 0) + 1\n    return chars\n\n\nif __name__ == '__main__':\n    print(count_chars('hello'))",
    "#!/usr/bin/python\n\ndef countChar(s):\n    count = 0\n    for c in s:\n        if c in 'aeiou':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    s = \"aeiou\"\n    print(countChar(s))",
    "import re\n\ndef count_char(s):\n    count = {}\n    for i in s:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\ndef main():\n    s = 'aabcc'\n    c = count_char(s)\n    print(c)\n    print(c.keys())\n    print(c['a'])\n\nif __name__ == '__main__':\n    main()",
    "def count_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n# TESTS\nfor s, expected in [\n    (\"Hello\", 5),\n    (\"Hello World\", 10),\n    (\"Hello\", 1)\n]:\n    assert count_char(s) == expected",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for c in s:\n            cnt += 1\n        return cnt",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if not s:\n            return []\n        char_dict = {}\n        for c in s:\n            if c not in char_dict:\n                char_dict[c] = 1\n            else:\n                char_dict[c] += 1\n        return char_dict.values()\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.countChar('hello')\n    print sol.countChar('leetcode')\n    print sol.countChar('leetcode')\n    print sol.countChar('leetcodeleetcode')",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for i in range(len(s)):\n            if s[i] =='':\n                cnt += 1\n            else:\n                cnt += 1\n        return cnt",
    "def count_chars(string):\n    counts = [0] * 256\n    for char in string:\n        counts[ord(char)] += 1\n    return counts\n\nif __name__ == '__main__':\n    string = 'hello world'\n    print(count_chars(string))",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        count = [0] * 256\n        for ch in s:\n            count[ord(ch)] += 1\n        return count\n\n# Note:\n# https://leetcode.com/problems/count-characters/",
    "from collections import Counter\n\ndef count_char_freq(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len(text)\n\ndef main():\n    text = \"This is a test of my code\"\n    print(count_char_freq(text))\n\nif __name__ == \"__main__\":\n    main()",
    "def char_frequency(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = {}\n    for char in string:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n\n    return sum(count.values())\n\n# Your CharFrequency object will be instantiated and called as such:\n# obj = CharFrequency(string)\n# param_1 = obj.char_frequency(string)",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for c in s)",
    "import collections\n\n# Write your code here\ndef countChar(string):\n    '''\n    string: string to be counted\n    return: a dict of character and its frequency\n    '''\n    charFrequency = collections.defaultdict(int)\n    for c in string:\n        charFrequency[c] += 1\n    return charFrequency\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print(countChar(s))",
    "import unittest\n\n\nclass Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        c = 0\n        for i in xrange(len(s)):\n            if s[i] == 'a':\n                c += 1\n            elif s[i] == 'b':\n                c -= 1\n        return c\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 9ms 100%\nclass Solution {\n    public int countChar(String s) {\n        int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') c++;\n            else if (s.charAt(i) == 'b') c--;\n        }\n        return c;\n    }\n}\n\n# 10ms 100%\nclass Solution {\n    public int countChar(String s) {\n        int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') c += 1;\n            else if (s.charAt(i) == 'b') c -= 1;\n        }\n        return c;\n    }\n}\n'''",
    "import unittest\n\n# https://oj.leetcode.com/problems/count-and-say/\n# Given a string, count the number of distinct letters that appear in it,\n# and then convert it to its soundex code, also return the number of distinct letters.\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n < 1:\n            return ''\n        s = '1'\n        for i in xrange(1, n+1):\n            s = self.countAndSay(i-1) + s\n        return s\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/count-and-say/solution/\n\n# 8ms 96.63%\nclass Solution {\n    public String countAndSay(int n) {\n        if (n <= 0) return \"\";\n        if (n == 1) return \"1\";\n        StringBuilder sb = new StringBuilder();\n        sb.append(1);\n        for (int i = 2; i <= n; i++) {\n            int count = 1;\n            for (int j = 1; j < sb.length(); j++) {\n                if (sb.charAt(j - 1) == sb.charAt(j)) {\n                    count++;\n                } else {\n                    sb.append(count);\n                    sb.append(sb.charAt(j - 1));\n                    count = 1;\n                }\n            }\n            sb.append(count);\n            sb.append(sb.charAt(sb.length() - 1));\n        }\n        return sb.toString();\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public String countAndSay(int n) {\n        if (n <= 0) return \"\";\n        if (n == 1) return \"1\";\n        StringBuilder sb = new StringBuilder",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        freq = [0] * 256\n        for i in range(len(s)):\n            freq[ord(s[i])] += 1\n        return list(freq)\n\nif __name__ == \"__main__\":\n    print Solution().countChar(\"Hello, World\")\n    print Solution().countChar(\"Hello\")",
    "class Solution(object):\n    def countChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for c in s)",
    "class Solution(object):\n    def countChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return len([1 for i in s if i == c])",
    "# Definition for a character:\n# class Character:\n#     def __init__(self, value):\n#         self.value = value\n#         self.count = 1\n\nclass Solution(object):\n    def countChar(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[Character]\n        \"\"\"\n        char_list = []\n        for i in range(len(S)):\n            if S[i] not in char_list:\n                char_list.append(S[i])\n        return char_list",
    "class Solution:\n    # @param {string} str\n    # @return {integer}\n    def countCharFrequency(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        s = str\n        ret = {}\n        for c in s:\n            if c in ret:\n                ret[c] += 1\n            else:\n                ret[c] = 1\n        return len(ret)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.countCharFrequency(\"abcabc\"))\n    print(sol.countCharFrequency(\"aaaaabb\"))\n    print(sol.countCharFrequency(\"aabb\"))",
    "def count_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[int]\n    \"\"\"\n    \n    counts = [0] * 256\n    for c in string:\n        counts[ord(c)] += 1\n    return counts\n\nif __name__ == '__main__':\n    assert count_char(\"hello\") == [2,1,1,1,1,1,1,1,1,1]\n    assert count_char(\"hello\") == [2,1,1,1,1,1,1,1,1,1]\n    assert count_char(\"world\") == [1,2,1,1,1,1,1,1,1,1]\n    assert count_char(\"aaaaa\") == [1,1,1,1,1,1,1,1,1,1]\n    assert count_char(\"a\") == [1,0,0,0,0,0,0,0,0,0]\n    assert count_char(\"a\") == [1,0,0,0,0,0,0,0,0,0]\n    assert count_char(\"\") == [0,0,0,0,0,0,0,0,0,0]\n    assert count_char(\"a\") == [1,0,0,0,0,0,0,0,0,0]\n    assert count_char(\"ab\") == [1,1,0,0,0,0,0,0,0,0]\n    assert count_char(\"b\") == [1,0,1,0,0,0,0,0,0,0]\n    assert count_char(\"b\") == [1,0,1,0,0,0,0,0,0,0]"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}