{
  "problem": {
    "task_id": "MBPP/269",
    "prompt": "Write a function to find the ascii value of a character.",
    "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
    "test_list": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ],
    "challenge_test_list": [],
    "problem_id": 258
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://www.hackerrank.com/challenges/ascii/problem\n\ndef ascii(c):\n    \"\"\"\n    :type c: str\n    :rtype: int\n    \"\"\"\n    return ord(c)\n\nif __name__ == '__main__':\n    print(ascii('A'))\n    print(ascii('B'))\n    print(ascii('Z'))\n    print(ascii('a'))\n    print(ascii('b'))\n    print(ascii('z'))\n    print(ascii('c'))\n    print(ascii(' '))\n    print(ascii('0'))\n    print(ascii(' '))\n    print(ascii(' '))",
    "def ascii(char):\n    \"\"\"\n    >>> ascii('a')\n    97\n    >>> ascii('A')\n    65\n    >>> ascii('a')\n    97\n    >>> ascii('\\x00')\n    48\n    >>> ascii('\\x01')\n    49\n    >>> ascii('')\n    0\n    >>> ascii('\\x00')\n    48\n    >>> ascii('\\x01')\n    49\n    \"\"\"\n    return ord(char)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def ascii(ch):\n    \"\"\"\n    >>> ascii('a')\n    97\n    >>> ascii('A')\n    65\n    >>> ascii('\\t')\n    9\n    >>> ascii('\\n')\n    10\n    >>> ascii('\\u1234')\n    246\n    \"\"\"\n    return ord(ch)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {string} s\n    # @param {string} c\n    # @return {string}\n    def charToAscii(self, s, c):\n        return chr(ord(c) - ord('a') + ord(s))\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.charToAscii('c', 'c')\n    print s.charToAscii('c', 'b')\n    print s.charToAscii('c', 'a')",
    "def find_ascii(char):\n    if char >= 'A' and char <= 'Z':\n        return ord(char) - ord('A')\n    elif char >= 'a' and char <= 'z':\n        return ord(char) - ord('a')\n    elif char >= '0' and char <= '9':\n        return ord(char) - ord('0')\n    else:\n        return 0\n\ndef get_ascii(char):\n    return chr(find_ascii(char))\n\nif __name__ == '__main__':\n    for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789':\n        print(get_ascii(c), find_ascii(c))",
    "# https://www.hackerrank.com/challenges/ascii/problem\n\ndef ascii(c):\n    \"\"\"\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return ord(c)\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        print(ascii(input()))",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if 0x21 <= c <= 0x7e:\n            return c\n        elif 0x00 <= c <= 0x1f:\n            return ord(chr(0x7f))\n        else:\n            return 0x00\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getAsciiValue(0x5f)\n    print s.getAsciiValue(0x5d)\n    print s.getAsciiValue(0x5e)\n    print s.getAsciiValue(0x0a)\n    print s.getAsciiValue(0x0b)\n    print s.getAsciiValue(0x0c)\n    print s.getAsciiValue(0x0d)\n    print s.getAsciiValue(0x0e)\n    print s.getAsciiValue(0x0f)\n    print s.getAsciiValue(0x10)\n    print s.getAsciiValue(0x11)\n    print s.getAsciiValue(0x12)\n    print s.getAsciiValue(0x13)\n    print s.getAsciiValue(0x14)\n    print s.getAsciiValue(0x15)\n    print s.getAsciiValue(0x16)\n    print s.getAsciiValue(0x17)\n    print s.getAsciiValue(0x18)\n    print s.getAsciiValue(0x19)\n    print s.getAsciiValue(0x1a)\n    print s.getAsciiValue(0x1b)\n    print s.getAsciiValue(0x1c)\n    print s.getAsciiValue(0x1d)\n    print s.getAsciiValue(0x1e)\n    print s.getAsciiValue(0x1f)\n    print s.getAscii",
    "class Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: int\n        :rtype: int\n        \"\"\"\n        if ch < ord('a') or ch > ord('z'):\n            return -1\n        return ch - ord('a')\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.getAsciiValue(65)\n    print sol.getAsciiValue(0)",
    "class Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ascii_table = {ord(c): i for i, c in enumerate(s)}\n        return sum(ascii_table[c] for c in s)",
    "def ascii(char):\n    if char.isalpha():\n        return ord(char)\n    else:\n        return ord(' ')\n\ndef main():\n    print(ascii('a'))\n    print(ascii('A'))\n    print(ascii('Z'))\n\nif __name__ == '__main__':\n    main()",
    "import unittest\n\ndef ascii_value(character):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n\n    The function should return the ASCII value of the character.\n    The function should accept a character between 0 and 255.\n    \"\"\"\n    # Write your code here\n    return ord(character)\n\nclass TestAsciiValue(unittest.TestCase):\n    def test_ascii_value(self):\n        self.assertEqual(ascii_value('a'), 97)\n        self.assertEqual(ascii_value('b'), 98)\n        self.assertEqual(ascii_value('c'), 99)\n        self.assertEqual(ascii_value('d'), 100)\n        self.assertEqual(ascii_value('e'), 101)\n        self.assertEqual(ascii_value('f'), 102)\n        self.assertEqual(ascii_value('g'), 103)\n        self.assertEqual(ascii_value('h'), 104)\n        self.assertEqual(ascii_value('i'), 105)\n        self.assertEqual(ascii_value('j'), 106)\n        self.assertEqual(ascii_value('k'), 107)\n        self.assertEqual(ascii_value('l'), 108)\n        self.assertEqual(ascii_value('m'), 109)\n        self.assertEqual(ascii_value('n'), 110)\n        self.assertEqual(ascii_value('o'), 111)\n        self.assertEqual(ascii_value('p'), 112)\n        self.assertEqual(ascii_value('q'), 113)\n        self.assertEqual(ascii_value('r'), 114)\n        self.assertEqual(ascii_value('s'), 115)\n        self.assertEqual(ascii_value('t'), 116)\n        self.assertEqual(ascii_value('u'), 117)\n        self.assertEqual(ascii_value('v'), 118)\n        self.assertEqual(as",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if c > 127:\n            return -1\n        if c < 32:\n            return -1\n        return ord(chr(c))\n\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(self.getAsciiValue(ord(c)) for c in s)\n\nif __name__ == \"__main__\":\n    assert Solution().getAscii('a') == 97\n    assert Solution().getAscii('A') == 65\n    assert Solution().getAscii('z') == 122\n    assert Solution().getAscii('Z') == 90",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return ord(c) - ord(' ')",
    "import unittest\n\n# https://leetcode.com/problems/find-ascii-value/description/\n\nclass Solution(object):\n    def findAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return ord(s)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-ascii-value/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a character.\n * public class Character {\n *     char val;\n *     Character() { val =''; }\n *     Character(char c) { val = c; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**",
    "import unittest\n\nclass Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: str\n        :rtype: int\n        \"\"\"\n        if ord(ch) > 126:\n            return -1\n        return ch.encode('ascii')\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-ascii-value-of-a-character/solution/\n\n# 7ms 100%\nclass Solution {\n    public int getAsciiValue(String ch) {\n        if (ch.length() > 1) return -1;\n        return ch.charAt(0);\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int getAsciiValue(String ch) {\n        return ch.charAt(0);\n    }\n}\n'''",
    "import unittest\n\n\nclass Solution(object):\n    def getAscii(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return ord(c)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ascii-code-of-character/solution/\n#\n# Approach #1: Brute Force [Accepted]\n# Complexity Analysis\n# Time Complexity: O(n) where n is the size of the string.\n# Space Complexity: O(1)\n#\n# 1. Write a method to get the ascii value of a character.\n# 2. Return the ascii value of the character.\n\n# 4ms\nclass Solution {\n    public int getAscii(char c) {\n        return c >= 'a' && c <= 'z'? (int)c - (int)'a' : c;\n    }\n}\n\n# 4ms\nclass Solution {\n    public int getAscii(char c) {\n        return c >= 'A' && c <= 'Z'? (int)c - (int)'A' : c;\n    }\n}\n\n# 6ms\nclass Solution {\n    public int getAscii(char c) {\n        return c >= 'a' && c <= 'z'? (int)c - (int)'a' : c;\n    }\n}\n\n# 7ms\nclass Solution {\n    public int getAscii(char c) {\n        return c >= 'a' && c <= 'z'? (int)c - (int)'a' : c;\n    }\n}\n\n# 7ms\nclass Solution {\n    public int getAscii(char c) {\n        return c >= 'A' && c <= 'Z'? (int)c - (int)'A' : c;\n    }\n}\n\n# 8ms\nclass Solution {\n    public int getAsci",
    "class Solution(object):\n    def getAscii(self, ch):\n        \"\"\"\n        :type ch: str\n        :rtype: int\n        \"\"\"\n        if ch == 'a':\n            return 97\n        elif ch == 'b':\n            return 98\n        elif ch == 'c':\n            return 99\n        elif ch == 'd':\n            return 100\n        elif ch == 'e':\n            return 101\n        elif ch == 'f':\n            return 102\n        elif ch == 'g':\n            return 103\n        elif ch == 'h':\n            return 104\n        elif ch == 'i':\n            return 105\n        elif ch == 'j':\n            return 106\n        elif ch == 'k':\n            return 107\n        elif ch == 'l':\n            return 108\n        elif ch =='m':\n            return 109\n        elif ch == 'n':\n            return 110\n        elif ch == 'o':\n            return 111\n        elif ch == 'p':\n            return 112\n        elif ch == 'q':\n            return 113\n        elif ch == 'r':\n            return 114\n        elif ch =='s':\n            return 115\n        elif ch == 't':\n            return 116\n        elif ch == 'u':\n            return 117\n        elif ch == 'v':\n            return 118\n        elif ch == 'w':\n            return 119\n        elif ch == 'x':\n            return 120\n        elif ch == 'y':\n            return 121\n        elif ch == 'z':\n            return 122\n        elif ch == '0':\n            return 48\n        elif ch == '1':\n            return 49\n        elif ch == '2':\n            return 50\n        elif ch == '3':\n            return 51\n        elif ch == '4':\n            return 52\n        elif ch == '5':\n            return 53\n        elif ch == '6':\n            return 54\n        elif ch == '7':\n            return 55\n        elif ch == '8':\n            return 56\n        elif ch == '9':\n            return 57\n        elif ch == '",
    "def get_ascii(ch):\n\treturn ord(ch)\n\ndef get_ascii_string(ch):\n\treturn chr(get_ascii(ch))\n\ndef print_ascii_string(s):\n\tprint(''.join([get_ascii_string(ch) for ch in s]))\n\nif __name__ == '__main__':\n\tprint_ascii_string('a')\n\tprint_ascii_string('a')\n\tprint_ascii_string('ab')\n\tprint_ascii_string('ab')\n\tprint_ascii_string('abc')\n\tprint_ascii_string('abc')\n\tprint_ascii_string('abcd')\n\tprint_ascii_string('abcd')",
    "import unittest\n\n\nclass Solution(object):\n    def asciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if c >= '0' and c <= '9':\n            return c - '0'\n        elif c >= 'A' and c <= 'Z':\n            return c - 'A' + 10\n        elif c >= 'a' and c <= 'z':\n            return c - 'a' + 10\n        else:\n            return 0\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ascii-value-of-a-character/solution/\n# Approach #1: Brute Force [Accepted]\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# 1ms 100%\nclass Solution {\n    public int asciiValue(int c) {\n        if (c >= '0' && c <= '9') return c - '0';\n        if (c >= 'A' && c <= 'Z') return c - 'A' + 10;\n        if (c >= 'a' && c <= 'z') return c - 'a' + 10;\n        return 0;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int asciiValue(int c) {\n        return (c >= '0' && c <= '9')? c - '0' : (c >= 'A' && c <= 'Z')? c - 'A' + 10 : (c >= 'a' && c <= 'z')? c - 'a' + 10 : 0;\n    }\n}\n'''",
    "import sys\n\n# for each character in the string, calculate the ascii value\ndef ascii(s):\n    if len(s) > 1:\n        return s[0] + ascii(s[1:])\n    elif len(s) == 1:\n        return s[0]\n    else:\n        return None\n\nif __name__ == '__main__':\n    print(ascii('a'))\n    print(ascii('ab'))\n    print(ascii('abc'))\n    print(ascii('abcd'))\n    print(ascii('abcde'))\n    print(ascii('abcdef'))\n    print(ascii('abcdefg'))\n    print(ascii('abcdefgh'))\n    print(ascii('abcdefghi'))\n    print(ascii('abcdefghij'))\n    print(ascii('abcdefghijk'))\n    print(ascii('abcdefghijkl'))\n    print(ascii('abcdefghijklm'))\n    print(ascii('abcdefghijklmn'))\n    print(ascii('abcdefghijklmnop'))\n    print(ascii('abcdefghijklmnopq'))\n    print(ascii('abcdefghijklmnopqr'))\n    print(ascii('abcdefghijklmnopqrs'))\n    print(ascii('abcdefghijklmnopqrst'))\n    print(ascii('abcdefghijklmnopqrstu'))\n    print(ascii('abcdefghijklmnopqrstuv'))\n    print(ascii('abcdefghijklmnopqrstuvw'))\n    print(ascii('abcdefghijklmnopqrstuvwx'))\n    print(ascii('abcdefghijklmnopqrstuvwxz'))\n    print(ascii('abcdefghijklmnopqrstuvwxz'))",
    "def ascii(ch):\n    if ch >= 'a' and ch <= 'z':\n        return ord(ch) - ord('a') + 97\n    elif ch >= 'A' and ch <= 'Z':\n        return ord(ch) - ord('A') + 65\n    else:\n        return ord(ch) - ord('0')\n\nif __name__ == '__main__':\n    print ascii('a')\n    print ascii('c')\n    print ascii('z')",
    "class Solution(object):\n    def asciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if c < 0x00 or c > 0x7f:\n            return 0\n        else:\n            return c\n\nif __name__ == '__main__':\n    print Solution().asciiValue(ord('a'))\n    print Solution().asciiValue(ord('z'))\n    print Solution().asciiValue(ord('A'))\n    print Solution().asciiValue(ord('Z'))\n    print Solution().asciiValue(ord('0'))\n    print Solution().asciiValue(ord('9'))",
    "def ascii(c):\n    return ord(c)\n\ndef test_ascii():\n    assert ascii('a') == 97\n    assert ascii('A') == 65\n    assert ascii('b') == 98\n    assert ascii('B') == 66\n    assert ascii('c') == 99\n    assert ascii('C') == 67\n    assert ascii('d') == 100\n    assert ascii('D') == 68\n    assert ascii('e') == 101\n    assert ascii('E') == 69\n    assert ascii('f') == 102\n    assert ascii('F') == 70\n    assert ascii('g') == 103\n    assert ascii('G') == 71\n    assert ascii('h') == 104\n    assert ascii('H') == 72\n    assert ascii('i') == 105\n    assert ascii('I') == 73\n    assert ascii('j') == 106\n    assert ascii('J') == 74\n    assert ascii('k') == 107\n    assert ascii('K') == 75\n    assert ascii('l') == 108\n    assert ascii('L') == 76\n    assert ascii('m') == 109\n    assert ascii('M') == 77\n    assert ascii('n') == 110\n    assert ascii('N') == 78\n    assert ascii('o') == 111\n    assert ascii('O') == 79\n    assert ascii('p') == 112\n    assert ascii('P') == 80\n    assert ascii('q') == 113\n    assert ascii('Q') == 81\n    assert ascii('r') == 114\n    assert ascii('R') == 82\n    assert ascii('s') == 115\n    assert ascii('S') == 83\n    assert ascii('t') == 116\n    assert ascii('T') == 84\n    assert ascii('u') == 117\n    assert ascii('U') == 85\n    assert ascii('v') == 118\n    assert ascii('V') == 86\n    assert as",
    "class Solution:\n    # @param {string} s\n    # @return {number}\n    def ascii(self, s):\n        return ord(s)\n\n    def test(self):\n        assert self.ascii('a') == 97\n        assert self.ascii('b') == 98\n        assert self.ascii('c') == 99\n        assert self.ascii('d') == 100\n        assert self.ascii('e') == 101\n        assert self.ascii('f') == 102\n        assert self.ascii('g') == 103\n        assert self.ascii('h') == 104\n        assert self.ascii('i') == 105\n        assert self.ascii('j') == 106\n        assert self.ascii('k') == 107\n        assert self.ascii('l') == 108\n        assert self.ascii('m') == 109\n        assert self.ascii('n') == 110\n        assert self.ascii('o') == 111\n        assert self.ascii('p') == 112\n        assert self.ascii('q') == 113\n        assert self.ascii('r') == 114\n        assert self.ascii('s') == 115\n        assert self.ascii('t') == 116\n        assert self.ascii('u') == 117\n        assert self.ascii('v') == 118\n        assert self.ascii('w') == 119\n        assert self.ascii('x') == 120\n        assert self.ascii('y') == 121\n        assert self.ascii('z') == 122\n        assert self.ascii('A') == 65\n        assert self.ascii('B') == 66\n        assert self.ascii('C') == 67\n        assert self.ascii('D') == 68\n        assert self.ascii('E') == 69\n        assert self.ascii('F') == 70\n        assert self.ascii('G') == 71\n        assert self.ascii('H') == 72\n        assert self.ascii('I') == 73\n        assert self.ascii('J')",
    "import unittest\n\n\ndef ascii_value(char):\n    \"\"\"\n    :type char: int\n    :rtype: int\n    \"\"\"\n    return ord(char) - ord(' ')\n\n\nclass TestAsciiValue(unittest.TestCase):\n    def test_ascii_value(self):\n        self.assertEqual(ascii_value(0), 0)\n        self.assertEqual(ascii_value(65), 65)\n        self.assertEqual(ascii_value(97), 97)\n        self.assertEqual(ascii_value(122), 122)\n        self.assertEqual(ascii_value(255), 255)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def ascii(c):\n    \"\"\"\n    >>> ascii('a')\n    97\n    >>> ascii('A')\n    65\n    >>> ascii('1')\n    49\n    >>> ascii('2')\n    50\n    \"\"\"\n    return ord(c)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import unittest\n\n# https://www.hackerrank.com/challenges/print-an-ascii-art-character/problem\ndef print_ascii_art(c):\n    \"\"\"\n    :type c: int\n    :rtype: str\n    \"\"\"\n    if c > 127:\n        return '.'\n    if c < 32:\n        return''\n    return chr(c)\n\nclass Solution:\n    def print_ascii_art(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: str\n        \"\"\"\n        return print_ascii_art(c)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/print-an-ascii-art-character/solution/\n\n/**\n * Definition for a point.\n * public class Point {\n *     int x;\n *     int y;\n *     Point() { x = 0; y = 0; }\n *     Point(int a, int b) { x = a; y = b; }\n * }\n */\n\n# 6ms 100%\nclass Solution {\n    public String printASCIIArt(int c) {\n        if (c > 127) return \".\";\n        if (c < 32) return \" \";\n        return String.valueOf((char)c);\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public String printASCIIArt(int c) {\n        if (c > 127) return \".\";\n        if (c < 32) return \" \";\n        return String.valueOf((char)c);\n    }\n}\n'''",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def toAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return ord(s)\n\nif __name__ == \"__main__\":\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"A\") == 65\n    assert Solution().toAscii(\"ab\") == 98\n    assert Solution().toAscii(\"z\") == 122\n    assert Solution().toAscii(\"\") == 0\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAscii(\"a\") == 97\n    assert Solution().toAs",
    "def ascii(c):\n  \"\"\"\n  >>> ascii('a')\n  97\n  >>> ascii('A')\n  65\n  >>> ascii('\\x0b')\n  11\n  >>> ascii('\\x0c')\n  12\n  >>> ascii('\\x0d')\n  10\n  >>> ascii('\\x0e')\n  15\n  \"\"\"\n  return ord(c)\n\ndef main():\n  import sys\n  if len(sys.argv)!= 2:\n    sys.exit(\"usage: %s <char>\" % sys.argv[0])\n\n  c = sys.argv[1]\n  print(ascii(c))\n\nif __name__ == \"__main__\":\n  main()",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if c >= ord('0') and c <= ord('9'):\n            return c - ord('0')\n        elif c >= ord('A') and c <= ord('Z'):\n            return c - ord('A') + 10\n        elif c >= ord('a') and c <= ord('z'):\n            return c - ord('a') + 36\n        else:\n            return -1",
    "# https://www.hackerrank.com/challenges/ascii/problem\n\ndef ascii_val(c):\n    if ord(c) < 32 or ord(c) > 126:\n        return None\n    else:\n        return ord(c)\n\ndef ascii_val_with_spaces(c):\n    if ord(c) < 32 or ord(c) > 126:\n        return None\n    else:\n        return ord(c)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        c = input()\n        if ascii_val(c) is not None:\n            print(ascii_val(c))\n        else:\n            print(\"This character is not printable.\")\n\nif __name__ == \"__main__\":\n    main()",
    "def ascii(c):\n    return ord(c)\n\ndef ascii_values(c):\n    return [ascii(c), ord(c)]\n\ndef print_ascii_values(c):\n    print(ascii(c), ascii_values(c))\n\ndef main():\n    print_ascii_values('a')\n    print_ascii_values('\\n')\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        if c > 255:\n            return -1\n        return chr(c)",
    "# https://www.hackerrank.com/challenges/ascii/problem\n\nimport unittest\n\n\ndef ascii(char):\n    \"\"\"\n    :type char: int\n    :rtype: int\n    \"\"\"\n    if not isinstance(char, int):\n        raise TypeError(\"Expected an int\")\n\n    # Ascii values are a mapping from ASCII to an int\n    ascii_values = {\n        # The ASCII value of the characters\n        # The mapping from ASCII to character\n        65: \"A\",\n        66: \"B\",\n        67: \"C\",\n        68: \"D\",\n        69: \"E\",\n        70: \"F\",\n        71: \"G\",\n        72: \"H\",\n        73: \"I\",\n        74: \"J\",\n        75: \"K\",\n        76: \"L\",\n        77: \"M\",\n        78: \"N\",\n        79: \"O\",\n        80: \"P\",\n        81: \"Q\",\n        82: \"R\",\n        83: \"S\",\n        84: \"T\",\n        85: \"U\",\n        86: \"V\",\n        87: \"W\",\n        88: \"X\",\n        89: \"Y\",\n        90: \"Z\",\n        97: \"a\",\n        98: \"b\",\n        99: \"c\",\n        100: \"d\",\n        101: \"e\",\n        102: \"f\",\n        103: \"g\",\n        104: \"h\",\n        105: \"i\",\n        106: \"j\",\n        107: \"k\",\n        108: \"l\",\n        109: \"m\",\n        110: \"n\",\n        111: \"o\",\n        112: \"p\",\n        113: \"q\",\n        114: \"r\",\n        115: \"s\",\n        116: \"t\",\n        117: \"u\",\n        118: \"v\",\n        119: \"w\",\n        120: \"x\",\n        121: \"y\",\n        122: \"z\",\n        48: \"0\",\n        49: \"1\",\n        50: \"2\",\n        51: \"3\",",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def ascii(self, s):\n        ret = 0\n        for i in range(len(s)):\n            ret += ord(s[i])\n        return ret\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.ascii(\"A\")\n    print s.ascii(\"a\")\n    print s.ascii(\"z\")\n    print s.ascii(\"Z\")\n    print s.ascii(\"Aa\")\n    print s.ascii(\"aA\")\n    print s.ascii(\"zZ\")\n    print s.ascii(\"AA\")",
    "from __future__ import print_function\n\ndef get_ascii(s):\n    return ord(s)\n\ndef get_ascii_values(s):\n    return map(get_ascii, s)\n\ndef print_ascii_values(s):\n    print(get_ascii_values(s))\n\nif __name__ == '__main__':\n    print_ascii_values(\"a\")\n    print_ascii_values(\"a\")\n    print_ascii_values(\"A\")\n    print_ascii_values(\"A\")\n    print_ascii_values(\"a\")\n    print_ascii_values(\"A\")\n    print_ascii_values(\"a\")\n    print_ascii_values(\"A\")",
    "from collections import defaultdict\n\ndef ascii(c):\n    \"\"\"\n    >>> ascii('a')\n    65\n    >>> ascii('A')\n    65\n    >>> ascii('Z')\n    90\n    >>> ascii('z')\n    90\n    \"\"\"\n    return ord(c)\n\ndef ascii_dict(s):\n    \"\"\"\n    >>> ascii_dict('a')\n    {65: 1}\n    >>> ascii_dict('A')\n    {65: 1}\n    >>> ascii_dict('Z')\n    {90: 1}\n    >>> ascii_dict('z')\n    {90: 1}\n    >>> ascii_dict('a')\n    {65: 1}\n    \"\"\"\n    d = defaultdict(int)\n    for c in s:\n        d[ascii(c)] += 1\n    return d\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "class Solution:\n    # @param {string} s\n    # @return {number}\n    def toAscii(self, s):\n        return ord(s)",
    "import sys\n\n# https://www.hackerrank.com/challenges/ascii-code-for-ascii-character/problem\ndef asciiCode(c):\n    return ord(c) - ord(' ')\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(asciiCode(line.strip()))",
    "def ascii(c):\n    return ord(c)\n\ndef print_ascii(s):\n    for c in s:\n        print(ascii(c), end='')\n\ndef main():\n    print_ascii('abcdefghijklmnopqrstuvwxyz')\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def asciiChar(self, ch):\n        \"\"\"\n        :type ch: int\n        :rtype: int\n        \"\"\"\n        return ord(ch)",
    "import sys\n\ndef ascii_value(c):\n    \"\"\"\n    >>> ascii_value('a')\n    97\n    >>> ascii_value('b')\n    98\n    >>> ascii_value('c')\n    99\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('C')\n    67\n    >>> ascii_value('1')\n    49\n    >>> ascii_value('2')\n    50\n    >>> ascii_value('3')\n    51\n    >>> ascii_value('4')\n    52\n    >>> ascii_value('5')\n    53\n    >>> ascii_value('6')\n    54\n    >>> ascii_value('7')\n    55\n    >>> ascii_value('8')\n    56\n    >>> ascii_value('9')\n    57\n    >>> ascii_value('0')\n    48\n    >>> ascii_value('a')\n    97\n    >>> ascii_value('b')\n    98\n    >>> ascii_value('c')\n    99\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('C')\n    67\n    >>> ascii_value('1')\n    49\n    >>> ascii_value('2')\n    50\n    >>> ascii_value('3')\n    51\n    >>> ascii_value('4')\n    52\n    >>> ascii_value('5')\n    53\n    >>> ascii_value('6')\n    54\n    >>> ascii_value('7')\n    55\n    >>> ascii_value('8')\n    56\n    >>> ascii_value('9')\n    57\n    >>> ascii_value('0')\n    48\n    >>> ascii_value('1')\n    49\n    >>> ascii_value('2')\n    50\n    >>> ascii_value('3')\n    51\n    >>> asci",
    "def ascii(c):\n    if c >= 'A' and c <= 'Z':\n        return ord(c) - ord('A') + 10\n    if c >= 'a' and c <= 'z':\n        return ord(c) - ord('a') + 10\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0') + 10\n    if c =='':\n        return 32\n    return c\n\ndef main():\n    for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789':\n        print(ascii(c), end='')\n\nif __name__ == '__main__':\n    main()",
    "import collections\n\n\nclass Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: str\n        :rtype: int\n        \"\"\"\n        if ord(ch) > 127:\n            return 0\n        return collections.Counter(ch).most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getAsciiValue('a')\n    print s.getAsciiValue('A')\n    print s.getAsciiValue('1')\n    print s.getAsciiValue('1')",
    "def ascii_value(c):\n    \"\"\"\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if c >= 97 and c <= 122:\n        return ord(c) - 97\n    elif c >= 65 and c <= 90:\n        return ord(c) - 65\n    else:\n        return 0\n\n\ndef ascii_char(c):\n    \"\"\"\n    :type c: int\n    :rtype: str\n    \"\"\"\n    if c >= 97 and c <= 122:\n        return chr(c + 97)\n    elif c >= 65 and c <= 90:\n        return chr(c + 65)\n    else:\n        return chr(c)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Input\n    c = int(input())\n\n    # Output\n    print(ascii_char(c))\n\n\nif __name__ == '__main__':\n    main()",
    "def ascii(c):\n    return ord(c)\n\ndef main():\n    print(ascii('a'))\n    print(ascii('A'))\n    print(ascii('Z'))\n    print(ascii('z'))\n    print(ascii('\\t'))\n    print(ascii('\\n'))\n    print(ascii(' '))\n    print(ascii('-'))\n    print(ascii('\\u00A9'))\n    print(ascii('\\u00B2'))\n    print(ascii('\\u00B3'))\n    print(ascii('\\u00B4'))\n    print(ascii('\\u00B5'))\n    print(ascii('\\u00B6'))\n    print(ascii('\\u00B7'))\n    print(ascii('\\u00B8'))\n    print(ascii('\\u00B9'))\n    print(ascii('\\u00BA'))\n    print(ascii('\\u00BB'))\n    print(ascii('\\u00BC'))\n    print(ascii('\\u00BD'))\n    print(ascii('\\u00BE'))\n    print(ascii('\\u00BF'))\n    print(ascii('\\u00C0'))\n    print(ascii('\\u00C1'))\n    print(ascii('\\u00C2'))\n    print(ascii('\\u00C3'))\n    print(ascii('\\u00C4'))\n    print(ascii('\\u00C5'))\n    print(ascii('\\u00C6'))\n    print(ascii('\\u00C7'))\n    print(ascii('\\u00C8'))\n    print(ascii('\\u00C9'))\n    print(ascii('\\u00CA'))\n    print(ascii('\\u00CB'))\n    print(ascii",
    "# https://oj.leetcode.com/problems/character-to-ascii/\n# Write an efficient algorithm that converts a string to an integer. This is defined as follows: The ascii value of the ith character is ith if it is in the range 0 to 127, or -1 if it is not a valid ascii character.\n#\n# Example 1:\n# Input: \"a\"\n# Output: 97\n# Example 2:\n# Input: \"ab\"\n# Output: 100\n# Note:\n# The string only contains lowercase characters a-z.\n\nclass Solution(object):\n    def toAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([ord(c) for c in s])",
    "def ascii(c):\n    return ord(c)\n\ndef ascii_to_int(c):\n    return ord(c)\n\ndef ascii_to_char(i):\n    return chr(i)\n\ndef ascii_to_str(i):\n    return chr(i)\n\ndef ascii_to_str2(i):\n    return chr(i)\n\ndef ascii_to_str3(i):\n    return chr(i)\n\ndef ascii_to_str4(i):\n    return chr(i)\n\ndef ascii_to_str5(i):\n    return chr(i)\n\ndef ascii_to_str6(i):\n    return chr(i)\n\ndef ascii_to_str7(i):\n    return chr(i)\n\ndef ascii_to_str8(i):\n    return chr(i)\n\ndef ascii_to_str9(i):\n    return chr(i)\n\ndef ascii_to_str10(i):\n    return chr(i)\n\ndef ascii_to_str11(i):\n    return chr(i)\n\ndef ascii_to_str12(i):\n    return chr(i)\n\ndef ascii_to_str13(i):\n    return chr(i)\n\ndef ascii_to_str14(i):\n    return chr(i)\n\ndef ascii_to_str15(i):\n    return chr(i)\n\ndef ascii_to_str16(i):\n    return chr(i)\n\ndef ascii_to_str17(i):\n    return chr(i)\n\ndef ascii_to_str18(i):\n    return chr(i)\n\ndef ascii_to_str19(i):\n    return chr(i)\n\ndef ascii_to_str20(i):\n    return chr(i)\n\ndef ascii_to_str21(i):\n    return",
    "class Solution:\n    # @param {string} s\n    # @return {number}\n    def ascii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # count the ascii values of the string\n        count = [ord(c) for c in s]\n        # add the ascii value of the string to the count\n        count.append(ord(s[-1]))\n        # return the sum of the ascii values\n        return sum(count)",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n        return ascii_dict[s]",
    "def get_ascii(char):\n    \"\"\"\n    :type char: str\n    :rtype: int\n    \"\"\"\n    return ord(char)\n\ndef get_ascii_str(char):\n    \"\"\"\n    :type char: str\n    :rtype: str\n    \"\"\"\n    return chr(get_ascii(char))\n\ndef main():\n    print(get_ascii_str('a'))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return ord(c)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getAsciiValue(u'\u4e2d'))\n    print(sol.getAsciiValue('\u4e2d'))\n    print(sol.getAsciiValue('\u4e2d'))\n    print(sol.getAsciiValue('\u4e2d'))",
    "import unittest\n\n\nclass Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([ord(c) for c in s])\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ascii-code-of-a-character/solution/\n\n# 1ms 100%\nclass Solution {\n    public int getAscii(String s) {\n        return s.chars().mapToObj(c -> (int) c).filter(c -> c >= 0 && c <= 127).sum();\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int getAscii(String s) {\n        return s.chars().map(c -> (int) c).filter(c -> c >= 0 && c <= 127).sum();\n    }\n}\n'''",
    "def get_ascii(ch):\n    return ord(ch)\n\ndef test(ch):\n    return get_ascii(ch)\n\ndef main():\n    for ch in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\":\n        print(ch, test(ch))\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param {string} s\n    # @return {number}\n    def ascii(self, s):\n        return ord(s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.ascii(\"a\"))\n    print(s.ascii(\"A\"))\n    print(s.ascii(\".\"))\n    print(s.ascii(\" \"))\n    print(s.ascii(\"\\t\"))\n    print(s.ascii(\"\\n\"))\n    print(s.ascii(\"\\n\\n\"))\n    print(s.ascii(\"\\t\\n\"))\n    print(s.ascii(\"\\t\\n\\n\"))\n    print(s.ascii(\"\\t\\n\\t\\n\"))",
    "class Solution:\n    # @param {string} s\n    # @return {number}\n    def ascii(self, s):\n        return ord(s)",
    "def ascii_value(ch):\n    return ord(ch)\n\nif __name__ == \"__main__\":\n    print(ascii_value('a'))\n    print(ascii_value('A'))\n    print(ascii_value('\\x1b'))",
    "import re\n\ndef ascii(c):\n    if c.isdigit():\n        return ord('0') + int(c)\n    elif c.isalpha():\n        return ord(c) - ord('A') + ord('a')\n    else:\n        return 0\n\ndef ascii_str(s):\n    return ''.join(map(ascii, s))\n\ndef main():\n    with open('../data/day_13_input.txt', 'r') as f:\n        for line in f:\n            print(ascii_str(line.strip()))\n\nif __name__ == '__main__':\n    main()",
    "import unittest\n\n\nclass Solution(object):\n    def asciiValueOfChar(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return ord(c)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ascii-value-of-character/solution/\n\n# 1ms 100%\nclass Solution {\n    public int asciiValueOfChar(char c) {\n        return c >=''? c : (c & 0x7F) + 0xF000;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int asciiValueOfChar(char c) {\n        return (int)c;\n    }\n}\n'''",
    "# https://oj.leetcode.com/problems/find-the-character-that-appears-the-least-number-of-times/discuss/156970/Python-Solution\n\nclass Solution(object):\n    def findChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        count = {}\n        for i in range(len(s)):\n            if s[i] == c:\n                count[s[i]] = count.get(s[i], 0) + 1\n        min = 0\n        for i in count:\n            if count[i] < min:\n                min = count[i]\n        return min",
    "def ascii_value(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    elif c >= 'a' and c <= 'z':\n        return ord(c) - ord('a') + 10\n    elif c >= 'A' and c <= 'Z':\n        return ord(c) - ord('A') + 36\n    else:\n        return 0\n\n\n# Test Cases\nassert(ascii_value('a') == 97)\nassert(ascii_value('A') == 65)\nassert(ascii_value('\\x01') == 1)\nassert(ascii_value('\\x7f') == 127)\nassert(ascii_value('\\x80') == 128)\nassert(ascii_value('\\xff') == 255)\nassert(ascii_value('\\xfe') == 254)",
    "class Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i, c in enumerate(s):\n            res += ord(c) - ord('A') + 1\n        return res\n\nif __name__ == '__main__':\n    assert Solution().getAscii('Z') == 52, 'getAscii'\n    assert Solution().getAscii('a') == 97, 'getAscii'",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return ord(c)",
    "# https://www.hackerrank.com/challenges/ascii/problem\n\ndef ascii_value(char):\n    \"\"\"\n    :type char: str\n    :rtype: int\n    \"\"\"\n    if char >= 'a' and char <= 'z':\n        return ord(char) - ord('a')\n    elif char >= 'A' and char <= 'Z':\n        return ord(char) - ord('A') + 26\n    else:\n        return ord(char) - ord(' ') + 127\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        print(ascii_value(input()))",
    "import re\n\ndef get_ascii_value(char):\n    \"\"\"\n    :type char: str\n    :rtype: int\n    \"\"\"\n    return ord(char)\n\nif __name__ == \"__main__\":\n    for i in range(0, 256):\n        print(get_ascii_value(chr(i)))",
    "import sys\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    if sys.version_info[0] < 3:\n        print(ord('A') - 1)\n    else:\n        print(chr(65))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getAsciiValue(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return ord(s)",
    "from collections import defaultdict\n\nclass Solution:\n    # @return an integer\n    def getAscii(self, s):\n        s = s.upper()\n        d = defaultdict(int)\n        for c in s:\n            d[ord(c)] += 1\n        return sum(d.values())",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def getAscii(self, s):\n        return ord(s)",
    "def ascii_value(c):\n    \"\"\"\n    :type c: str\n    :rtype: int\n    \"\"\"\n    return ord(c)\n\nclass Solution(object):\n    def ascii_char(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([ascii_value(c) for c in s])",
    "import sys\n\nclass Solution(object):\n    def asciiValue(self, c):\n        if ord(c) < 128:\n            return ord(c)\n        else:\n            return ord('?')\n\n    def asciiValue2(self, c):\n        return ord(c) - 128\n\n    def asciiValue3(self, c):\n        return chr(ord(c) + 128)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.asciiValue(sys.stdin.read())",
    "#!/usr/bin/python\n\nclass Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: int\n        :rtype: int\n        \"\"\"\n        if ch >= '0' and ch <= '9':\n            return ord(ch) - ord('0')\n        elif ch >= 'A' and ch <= 'Z':\n            return ord(ch) - ord('A') + 10\n        elif ch >= 'a' and ch <= 'z':\n            return ord(ch) - ord('a') + 10\n        else:\n            return ord(ch) - ord('A') + 10\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getAsciiValue(u'a')\n    print s.getAsciiValue(u'A')\n    print s.getAsciiValue(u'0')\n    print s.getAsciiValue(u'1')\n    print s.getAsciiValue(u'2')\n    print s.getAsciiValue(u'3')\n    print s.getAsciiValue(u'4')\n    print s.getAsciiValue(u'5')\n    print s.getAsciiValue(u'6')\n    print s.getAsciiValue(u'7')\n    print s.getAsciiValue(u'8')\n    print s.getAsciiValue(u'9')\n    print s.getAsciiValue(u'a')\n    print s.getAsciiValue(u'A')\n    print s.getAsciiValue(u'z')\n    print s.getAsciiValue(u'Z')\n    print s.getAsciiValue(u' ')\n    print s.getAsciiValue(u'\\n')\n    print s.getAsciiValue(u'\\n')",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: int\n        \"\"\"\n        if c in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            return ord(c) - ord('a')\n        elif c in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n            return ord(c) - ord('A') + 26\n        elif c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return ord(c) - ord('0') + 52\n        elif c =='':\n            return 32\n        else:\n            return 0",
    "class Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        val = ord(s[0])\n        res = val\n        if val < 128:\n            return val\n\n        while len(s):\n            val = ord(s[0])\n            if val < 128:\n                return val\n            else:\n                res = res * 128 + val\n            s = s[1:]\n        return res\n\nif __name__ == \"__main__\":\n    print Solution().getAscii(\"a\")\n    print Solution().getAscii(\"z\")\n    print Solution().getAscii(\"A\")\n    print Solution().getAscii(\"Z\")\n    print Solution().getAscii(\"abcd\")\n    print Solution().getAscii(\"123\")\n    print Solution().getAscii(\"1\")",
    "from string import ascii_uppercase\n\n\ndef ascii(c):\n    \"\"\"Return the ascii value of a character.\n\n    >>> ascii('a')\n    97\n    >>> ascii('A')\n    65\n    >>> ascii('0')\n    48\n    >>> ascii('9')\n    57\n    >>> ascii(' ')\n    32\n    >>> ascii('')\n    0\n    >>> ascii('\\n')\n    10\n    >>> ascii('\\t')\n    9\n    \"\"\"\n    return ord(c)\n\n\ndef main():\n    \"\"\"Write a function to find the ascii value of a character.\n\n    >>> ascii('a')\n    97\n    >>> ascii('A')\n    65\n    >>> ascii('0')\n    48\n    >>> ascii('9')\n    57\n    >>> ascii(' ')\n    32\n    >>> ascii('')\n    0\n    >>> ascii('\\n')\n    10\n    >>> ascii('\\t')\n    9\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import timeit\n\n    print(timeit.timeit(\"main()\", setup=\"from __main__ import main\", number=1))",
    "def ascii(c):\n    \"\"\"\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return ord(c)\n\nif __name__ == '__main__':\n    s = 'a'\n    print(ascii(s))",
    "from collections import Counter\n\nclass Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 1:\n            return ord(s)\n        return sum(ord(c) - 65 for c in Counter(s).most_common()[0][0])\n\nif __name__ == '__main__':\n    print Solution().getAscii('abc')",
    "class Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return ord(s) - ord(' ')",
    "import collections\n\n\ndef ascii(c):\n    \"\"\"\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return ord(c)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    data = collections.defaultdict(int)\n    for i in range(32, 127):\n        data[ascii(chr(i))] = i\n    print(data)\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def getAsciiValue(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in s:\n            ret += ord(i)\n        return ret\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getAsciiValue(\"a\")",
    "def ascii(c):\n    \"\"\"\n    Input: character\n    Output: ascii value\n    \"\"\"\n    if isinstance(c, str):\n        return ord(c)\n    else:\n        return ord(c)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    c = input()\n    print(ascii(c))\n\nif __name__ == '__main__':\n    main()",
    "import os\nimport sys\nimport re\n\n# Complete the getAscii function below.\ndef getAscii(ch):\n    if ch >= 'a' and ch <= 'z':\n        return ord(ch) - ord('a') + 97\n    elif ch >= 'A' and ch <= 'Z':\n        return ord(ch) - ord('A') + 65\n    elif ch >= '0' and ch <= '9':\n        return ord(ch) - ord('0') + 48\n    else:\n        return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    chars = set()\n\n    for line in sys.stdin:\n        chars.add(line.strip())\n\n    for ch in chars:\n        fptr.write(str(getAscii(ch)) + '\\n')\n\n    fptr.close()",
    "import unittest\n\n\nclass Solution:\n    def asciiValueOfChar(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: int\n        \"\"\"\n        if ord(c) < 0x21 or ord(c) > 0x7E:\n            return 0\n        return ord(c) - 0x21\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ascii-value-of-character/solution/\n\n# 7ms 99.66%\nclass Solution {\n    public int asciiValueOfChar(char c) {\n        if (c < 0x21 || c > 0x7E) return 0;\n        return c - 0x21;\n    }\n}\n\n# 7ms 99.66%\nclass Solution {\n    public int asciiValueOfChar(char c) {\n        return c - '!'.charAt(0);\n    }\n}\n'''",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def toAscii(self, s):\n        return ord(s)",
    "from __future__ import print_function\nimport sys\nimport re\n\n#!/usr/bin/env python\n\n# This is a simple script to convert a string to an ascii value.\n# It is intended to be used as a python script for a problem set.\n# Please see the README.md file for more information.\n\n# This code uses the regex module.\n\n# You can use the following character values:\n#   'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n',\n#   'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\n#   'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n#   'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3',\n#   '4', '5', '6', '7', '8', '9', '.', '-', '_', '+', '=', ';', ',', '.',\n#   '!', '?', '$', ':', '@', '#', '%', '&', '*', '(', ')', '{', '}', '|',\n#   '~', '^', '_', '<', '>', '?'\n\n# The following string is a regex pattern that matches all the characters\n# that you can enter into a string.\n# Please note that the regex pattern is case-insensitive.\n# Please note also that the regex pattern does not include the '\\n' character.\n# (the '\\n' character is used to represent a new line in a text file).\n# The '\\n' character is not included in the list of characters to be converted\n# to ascii.\n# Please note also that the '\\n' character is not included in the list of\n# characters to",
    "# -*- coding: utf-8 -*-\n\n# http://www.tutorialspoint.com/python/python_basic_tutorial.htm\n\nimport sys\n\n#print(sys.version)\n#print(sys.version_info)\n\ndef ascii_value(char):\n    if char < 128:\n        return char\n    else:\n        return chr(0x7F + (char - 128))\n\n#print(ascii_value(0xFF))\n#print(ascii_value(0xE0))\n#print(ascii_value(0xE1))\n#print(ascii_value(0xE2))\n#print(ascii_value(0xE3))\n#print(ascii_value(0xE4))\n#print(ascii_value(0xE5))\n#print(ascii_value(0xE6))\n#print(ascii_value(0xE7))\n#print(ascii_value(0xE8))\n#print(ascii_value(0xE9))\n#print(ascii_value(0xEA))\n#print(ascii_value(0xEB))\n#print(ascii_value(0xEC))\n#print(ascii_value(0xED))\n#print(ascii_value(0xEE))\n#print(ascii_value(0xEF))\n#print(ascii_value(0xF0))\n#print(ascii_value(0xF1))\n#print(ascii_value(0xF2))\n#print(ascii_value(0xF3))\n#print(ascii_value(0xF4))\n#print(ascii_value(0xF5))\n#print(ascii_value(0xF6))\n#print(ascii_value(0xF7))\n#print(ascii_value(0xF8))\n#print(ascii_value(0xF9))\n#print(ascii_value(",
    "# Definition for a character.\nclass Character(object):\n    def __init__(self, ch):\n        self.ch = ch\n    def __str__(self):\n        return chr(self.ch)\n\nclass Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: Character\n        :rtype: int\n        \"\"\"\n        if ch.ch >= ord('0') and ch.ch <= ord('9'):\n            return ch.ch - ord('0')\n        elif ch.ch >= ord('A') and ch.ch <= ord('Z'):\n            return ch.ch - ord('A') + 10\n        elif ch.ch >= ord('a') and ch.ch <= ord('z'):\n            return ch.ch - ord('a') + 36\n        else:\n            return 0",
    "def ascii(ch):\n    \"\"\"\n    >>> ascii('A')\n    65\n    >>> ascii(' ')\n    32\n    >>> ascii('a')\n    97\n    >>> ascii('\\x7f')\n    127\n    >>> ascii(u'\\u1234')\n    246\n    >>> ascii('\\x00')\n    0\n    >>> ascii('\\x01')\n    1\n    >>> ascii('\\x02')\n    2\n    >>> ascii('\\x03')\n    3\n    >>> ascii('\\x04')\n    4\n    >>> ascii('\\x05')\n    5\n    >>> ascii('\\x06')\n    6\n    >>> ascii('\\x07')\n    7\n    >>> ascii('\\x08')\n    8\n    >>> ascii('\\x09')\n    9\n    >>> ascii('\\x0a')\n    10\n    >>> ascii('\\x0b')\n    11\n    >>> ascii('\\x0c')\n    12\n    >>> ascii('\\x0d')\n    13\n    >>> ascii('\\x0e')\n    14\n    >>> ascii('\\x0f')\n    15\n    >>> ascii('\\x10')\n    16\n    >>> ascii('\\x11')\n    17\n    >>> ascii('\\x12')\n    18\n    >>> ascii('\\x13')\n    19\n    >>> ascii('\\x14')\n    20\n    >>> ascii('\\x15')\n    21\n    >>> ascii('\\x16')\n    22\n    >>> ascii('\\x17')\n    23\n    >>> ascii('\\x18')\n    24\n    >>> ascii('\\x19')\n    25\n    >>> ascii('\\x1a')\n    26\n    >>> ascii('\\x1b')\n    27\n    >>> ascii('\\x1c')\n    28\n    >>> ascii('\\x1d')\n    29\n    >>>",
    "def get_ascii(ch):\n    \"\"\"\n    Args:\n        ch (str): A character\n    Returns:\n        int: The ascii value\n    \"\"\"\n    return chr(ch)\n\ndef get_ascii_values(ch):\n    \"\"\"\n    Args:\n        ch (str): A character\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in ch]\n    return values\n\ndef get_ascii_values_from_string(string):\n    \"\"\"\n    Args:\n        string (str): A string\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in string]\n    return values\n\ndef get_ascii_values_from_list(ch):\n    \"\"\"\n    Args:\n        ch (list): A list of characters\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in ch]\n    return values\n\ndef get_ascii_values_from_tuple(ch):\n    \"\"\"\n    Args:\n        ch (tuple): A tuple of characters\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in ch]\n    return values\n\ndef get_ascii_values_from_dict(ch):\n    \"\"\"\n    Args:\n        ch (dict): A dictionary of characters\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in ch]\n    return values\n\ndef get_ascii_values_from_generator(ch):\n    \"\"\"\n    Args:\n        ch (generator): A generator of characters\n    Returns:\n        list: The list of ascii values\n    \"\"\"\n    values = [ord(ch) for ch in ch]\n    return values\n\ndef get_ascii_values_from_generator_from_string(string):\n    \"\"\"\n    Args:\n        string (str): A string\n    Returns:\n        list: The list",
    "def ascii(ch):\n    \"\"\"\n    :type ch: int\n    :rtype: int\n    \"\"\"\n    return ch if ch < 128 else 127\n\n\nclass Solution:\n    def asciiValue(self, ch):\n        \"\"\"\n        :type ch: int\n        :rtype: int\n        \"\"\"\n        return ch if ch < 128 else 127\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.asciiValue(0))\n    print(sol.asciiValue(65))",
    "class Solution(object):\n    def getAsciiValue(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return ord(c)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getAsciiValue('a'))\n    print(sol.getAsciiValue('A'))\n    print(sol.getAsciiValue(u'a'))\n    print(sol.getAsciiValue(u'A'))",
    "def ascii_value(c):\n    return ord(c)\n\n# Test Cases\nprint(ascii_value('a'))\nprint(ascii_value('A'))\nprint(ascii_value(' '))\nprint(ascii_value('\\n'))\nprint(ascii_value('z'))\nprint(ascii_value('Z'))\nprint(ascii_value('\\x00'))\nprint(ascii_value('\\x7f'))\nprint(ascii_value('\\u0000'))\nprint(ascii_value('\\u007f'))",
    "class Solution(object):\n    def toAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s[0])",
    "import os\nfrom string import ascii_lowercase\n\n\ndef get_ascii_value(c):\n    return ord(c)\n\n\ndef print_ascii_values(string):\n    for c in string:\n        print(get_ascii_value(c), end=\" \")\n\n\ndef main():\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string)\n\n    string = \"a\"\n    print_ascii_values(string",
    "def ascii_value(c):\n    \"\"\"\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if c < 0 or c > 255:\n        raise ValueError('Invalid character.')\n    if ord(c) > 128:\n        return 96 + (ord(c) - 128)\n    else:\n        return ord(c)\n\nif __name__ == '__main__':\n    print(ascii_value('a'))\n    print(ascii_value('A'))\n    print(ascii_value('z'))\n    print(ascii_value('Z'))\n    print(ascii_value('0'))\n    print(ascii_value('9'))\n    print(ascii_value('!'))\n    print(ascii_value('$'))\n    print(ascii_value('@'))\n    print(ascii_value('#'))\n    print(ascii_value('&'))\n    print(ascii_value('*'))\n    print(ascii_value('-'))\n    print(ascii_value('+'))\n    print(ascii_value('='))\n    print(ascii_value('\\''))\n    print(ascii_value('('))\n    print(ascii_value(')'))\n    print(ascii_value('~'))\n    print(ascii_value('['))\n    print(ascii_value(']'))\n    print(ascii_value('\\\\'))\n    print(ascii_value('|'))\n    print(ascii_value(';'))\n    print(ascii_value(','))\n    print(ascii_value('.'))\n    print(ascii_value('<'))\n    print(ascii_value('>'))\n    print(ascii_value('?'))\n    print(ascii_value('/'))",
    "class Solution(object):\n    def getAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s)\n\n    def getAscii_1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s)\n\n    def getAscii_2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s)\n\n    def getAscii_3(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s)\n\n    def getAscii_4(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return ord(s)\n\n\nif __name__ == \"__main__\":\n    print Solution().getAscii('a')\n    print Solution().getAscii_1('a')\n    print Solution().getAscii_2('a')\n    print Solution().getAscii_3('a')\n    print Solution().getAscii_4('a')",
    "#!/usr/bin/env python\n\ndef find_ascii(c):\n    \"\"\"\n    :type c: str\n    :rtype: int\n    \"\"\"\n    if ord(c) <= 127:\n        return ord(c)\n    else:\n        return find_ascii(c[0]) * 256 + find_ascii(c[1])\n\nif __name__ == '__main__':\n    print find_ascii('a')",
    "class Solution:\n    # @return an integer\n    def asciiValue(self, c):\n        if c in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            return ord(c) - ord('A')\n        else:\n            return ord(c) - ord('a')\n\ns = Solution()\nprint(s.asciiValue('a'))\nprint(s.asciiValue('A'))\nprint(s.asciiValue('z'))\nprint(s.asciiValue('Z'))",
    "class Solution(object):\n    def getAsciiValue(self, ch):\n        \"\"\"\n        :type ch: str\n        :rtype: int\n        \"\"\"\n        return ord(ch)",
    "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def ascii(self, s):\n        return ord(s)\n\n    def ascii_string(self, s):\n        return ''.join(chr(self.ascii(x)) for x in s)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'hello'\n    print(sol.ascii_string(s))\n    s = 'a'\n    print(sol.ascii_string(s))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}