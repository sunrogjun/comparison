{
  "problem": {
    "task_id": "MBPP/214",
    "prompt": "Write a function to convert radians to degrees.",
    "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
    "test_list": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ],
    "challenge_test_list": [],
    "problem_id": 203
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Definition for degrees.\nclass Degrees:\n    def __init__(self, d):\n        self.d = d\n\n    def __repr__(self):\n        return str(self.d)\n\n    def __str__(self):\n        return str(self.d)\n\ndef rad2deg(rad):\n    return Degrees(rad)\n\ndef deg2rad(deg):\n    return deg",
    "def rad_to_deg(radians):\n    return (radians * 180) / (math.pi * 2)\n\n\nif __name__ == '__main__':\n    assert rad_to_deg(math.pi) == 180\n    assert rad_to_deg(2 * math.pi) == 360\n    assert rad_to_deg(math.pi + math.pi) == 180\n    assert rad_to_deg(math.pi * 2) == 360\n\n    assert rad_to_deg(-math.pi) == -180\n    assert rad_to_deg(-2 * math.pi) == -360\n    assert rad_to_deg(-math.pi + math.pi) == -180\n    assert rad_to_deg(-math.pi * 2) == -360\n\n    assert rad_to_deg(math.pi/2) == 90\n    assert rad_to_deg(3 * math.pi/2) == 90\n    assert rad_to_deg(math.pi/2 * 2) == 90\n    assert rad_to_deg(math.pi/2 * 3) == 90\n    assert rad_to_deg(math.pi/2 * 4) == 90\n    assert rad_to_deg(math.pi/2 * 5) == 90\n    assert rad_to_deg(math.pi/2 * 6) == 90\n    assert rad_to_deg(math.pi/2 * 7) == 90\n    assert rad_to_deg(math.pi/2 * 8) == 90\n    assert rad_to_deg(math.pi/2 * 9) == 90\n    assert rad_to_deg(math.pi/2 * 10) == 90\n    assert rad_to_deg(math.pi/2 * 11) == 90\n    assert rad_to_deg(math.pi/2 * 12) == 90\n\n    assert rad_to_deg(math.pi/3) == 45\n    assert rad_to_deg(3 * math.pi/3) == 45\n    assert rad_to_deg(math.pi/3 * 2) == 45\n    assert rad_to_deg(math.pi/3 * 3) == 45\n    assert rad_to_deg(math.pi/",
    "import math\n\n\ndef radians_to_degrees(radians):\n    \"\"\"\n    :param radians: a number\n    :return: a number\n    \"\"\"\n    return radians * 180 / math.pi\n\n\ndef main():\n    print(radians_to_degrees(math.pi))\n\n\nif __name__ == '__main__':\n    main()",
    "def rad2deg(rad):\n    return rad * 180 / 3.14159",
    "import math\n\ndef rad2deg(rad):\n    return math.degrees(rad)\n\n\ndef main():\n    print(rad2deg(math.pi))\n    print(rad2deg(math.pi/2))\n\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rads):\n    return 180*rads/3.14159\n\nif __name__ == '__main__':\n    print rad_to_deg(3.14159)",
    "def rad2deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return rad * 180 / 3.14159\n\nif __name__ == '__main__':\n    rad = float(input('Please enter the value in radians: '))\n    print('The value in degrees is: {0:.2f}'.format(rad2deg(rad)))",
    "def rad_to_deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    deg = rad * 180 / 3.14159265358979323846\n    return deg\n\n# Test Code\nprint(rad_to_deg(3.14159265358979323846))\nprint(rad_to_deg(3.14159265358979323846 / 2))\nprint(rad_to_deg(3.14159265358979323846 * 2))",
    "# https://www.hackerrank.com/challenges/rad-to-deg\n# https://www.codewars.com/kata/rad-to-deg-in-python\n# https://www.codewars.com/kata/rad-to-deg-in-c/python\n\nimport math\n\n\ndef rad_to_deg(rad):\n    # Write your code here\n    return math.degrees(rad)",
    "def rad2deg(rad):\n    return rad * 180 / 3.14159\n\nprint rad2deg(1)\nprint rad2deg(1.5)\nprint rad2deg(3.14159)\nprint rad2deg(3.14159)",
    "import math\n\n\ndef radians_to_degrees(radians):\n    \"\"\"\n    :type radians: float\n    :rtype: float\n    \"\"\"\n    return math.degrees(radians)\n\n\nif __name__ == '__main__':\n    print radians_to_degrees(math.pi)\n    print radians_to_degrees(math.pi/2)",
    "def rad2deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return rad*180/3.14159\n\n\ndef main():\n    print(rad2deg(3.14159))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef rad2deg(rad):\n    \"\"\"\n    :param rad: radians\n    :return: degrees\n    \"\"\"\n    return math.degrees(rad)\n\n\nif __name__ == \"__main__\":\n    rad = math.radians(1)\n    print(rad2deg(rad))\n    rad = math.radians(90)\n    print(rad2deg(rad))\n    rad = math.radians(-45)\n    print(rad2deg(rad))",
    "from math import pi, sin, cos, tan\n\ndef rad_to_deg(rads):\n    return 180 * (rads / pi)\n\nif __name__ == \"__main__\":\n    print(rad_to_deg(0.5))\n    print(rad_to_deg(pi / 2))\n    print(rad_to_deg(pi))\n    print(rad_to_deg(3.14))\n    print(rad_to_deg(4.0 * pi))\n    print(rad_to_deg(pi / 4))\n    print(rad_to_deg(pi / 3))\n    print(rad_to_deg(pi / 2))\n    print(rad_to_deg(pi / 6))\n    print(rad_to_deg(pi / 8))\n    print(rad_to_deg(pi / 10))",
    "import math\n\n\ndef radians_to_degrees(radians):\n    return math.degrees(radians)\n\n\nif __name__ == \"__main__\":\n    print(radians_to_degrees(math.pi/2))\n    print(radians_to_degrees(math.pi))\n    print(radians_to_degrees(math.pi/4))\n    print(radians_to_degrees(math.pi/8))",
    "def rad2deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return 180 * rad / math.pi\n\nif __name__ == '__main__':\n    print(rad2deg(math.pi / 2))\n    print(rad2deg(math.pi))",
    "import math\n\ndef rad2deg(rad):\n    return math.degrees(rad)\n\ndef deg2rad(deg):\n    return math.radians(deg)\n\ndef test(name, rad, deg):\n    print('Testing {}'.format(name))\n    assert rad2deg(rad) == deg\n    assert deg2rad(deg) == rad\n\ndef main():\n    test('rad2deg', 0.0, 0.0)\n    test('rad2deg', 0.1, 30.0)\n    test('rad2deg', -0.1, -30.0)\n    test('rad2deg', 1.0, 90.0)\n    test('rad2deg', -1.0, -90.0)\n    test('rad2deg', math.pi/2, 180.0)\n    test('rad2deg', -math.pi/2, -180.0)\n    test('rad2deg', math.pi, 360.0)\n    test('rad2deg', -math.pi, -360.0)\n    test('rad2deg', math.pi*2, 720.0)\n    test('rad2deg', -math.pi*2, -720.0)\n    test('rad2deg', math.pi/4, 45.0)\n    test('rad2deg', -math.pi/4, -45.0)\n    test('rad2deg', math.pi/2-math.pi/4, 30.0)\n    test('rad2deg', -math.pi/2-math.pi/4, -30.0)\n    test('rad2deg', math.pi-math.pi/4, 135.0)\n    test('rad2deg', -math.pi-math.pi/4, -135.0)\n    test('rad2deg', 3.0*math.pi/4, 225.0)\n    test('rad2deg', -3.0*math.pi/4, -225.0)\n    test('rad2deg', 5.0*math.pi/4, 315.0)\n    test('rad2deg', -5.0*math.pi/4, -315.0)",
    "import math\n\ndef rad2deg(r):\n    return r * 180 / math.pi\n\ndef deg2rad(r):\n    return r * math.pi / 180\n\nif __name__ == \"__main__\":\n    assert rad2deg(math.pi) == 180\n    assert deg2rad(180) == math.pi\n    assert rad2deg(math.pi/2) == 90\n    assert deg2rad(90) == math.pi/2\n    assert rad2deg(math.pi/4) == 45\n    assert deg2rad(45) == math.pi/4\n    assert rad2deg(math.pi/8) == 22.5\n    assert deg2rad(22.5) == math.pi/8\n    assert rad2deg(math.pi/16) == 11.25\n    assert deg2rad(11.25) == math.pi/16\n    assert rad2deg(math.pi/32) == 5.625\n    assert deg2rad(5.625) == math.pi/32\n    assert rad2deg(math.pi/64) == 2.828125\n    assert deg2rad(2.828125) == math.pi/64\n    assert rad2deg(math.pi/128) == 1.5707963\n    assert deg2rad(1.5707963) == math.pi/128\n    assert rad2deg(math.pi/256) == 0.78539816\n    assert deg2rad(0.78539816) == math.pi/256\n    assert rad2deg(math.pi/512) == 0.523598775\n    assert deg2rad(0.523598775) == math.pi/512\n    assert rad2deg(math.pi/1024) == 0.414213562\n    assert deg2rad(0.414213562) == math.pi/1024\n    assert rad2deg(math.pi/2048) == 0.244140625\n    assert deg2rad(0.244140625) == math.pi/2048\n    assert rad2deg(math.pi/4096) == 0.17578125\n    assert deg2rad(0.17578125) == math",
    "from math import pi, sin, cos, tan\n\ndef rad2deg(rad):\n    return 180*rad/pi\n\ndef deg2rad(deg):\n    return pi*deg/180\n\ndef main():\n    print(rad2deg(pi/2))\n    print(deg2rad(180))\n\nif __name__ == \"__main__\":\n    main()",
    "def rad2deg(rads):\n    \"\"\"\n    Converts radians to degrees.\n\n    rad2deg(rads) -> degrees\n\n    Input is a float\n    \"\"\"\n    degrees = 360*rads/2/pi\n    return degrees\n\nprint rad2deg(pi/2)",
    "def rad2deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    rad = rad * 180.0 / 3.14159\n    return rad\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    rad = float(input('Radians: '))\n    deg = rad2deg(rad)\n    print('Degrees:', deg)\n\n\nif __name__ == '__main__':\n    main()",
    "def rad2deg(rad):\n    return rad * 180 / 3.14159265358979323846\n\ndef deg2rad(deg):\n    return deg * 3.14159265358979323846 / 180\n\nif __name__ == \"__main__\":\n    print(deg2rad(rad2deg(3.14)))",
    "import math\n\ndef rad2deg(rad):\n    return int(math.degrees(rad))\n\ndef deg2rad(deg):\n    return math.radians(deg)\n\nif __name__ == '__main__':\n    print(rad2deg(math.pi / 4))\n    print(rad2deg(math.pi / 2))\n    print(rad2deg(3 * math.pi / 4))\n    print(rad2deg(math.pi))\n    print(rad2deg(2 * math.pi))\n    print(rad2deg(3 * math.pi))\n    print(deg2rad(0))\n    print(deg2rad(180))\n    print(deg2rad(90))\n    print(deg2rad(90 * math.pi / 2))\n    print(deg2rad(90 * math.pi))\n    print(deg2rad(90 * math.pi * 2))",
    "def rad_to_deg(rad):\n    return rad * 180 / pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(pi / 4) == 90\n    assert rad_to_deg(pi / 2) == 180\n    assert rad_to_deg(3 * pi / 4) == 270\n\nif __name__ == '__main__':\n    test_rad_to_deg()",
    "def rad2deg(r):\n    return r * 180 / 3.14159\n\nprint(rad2deg(3.14159))",
    "def rad2deg(rad):\n    return int(rad * 180 / pi)\n\n\ndef deg2rad(deg):\n    return deg / 180 * pi\n\n\nif __name__ == '__main__':\n    print(rad2deg(pi/2))\n    print(deg2rad(90))",
    "def rad_to_deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return rad * 180 / pi\n\n\ndef deg_to_rad(deg):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return deg * pi / 180\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rad_to_deg(pi) == 180, \"radians -> degrees conversion failed\"\n    assert deg_to_rad(180) == pi, \"degrees -> radians conversion failed\"\n    assert rad_to_deg(rad_to_deg(pi)) == 180, \"radians -> degrees conversion failed\"\n    assert deg_to_rad(deg_to_rad(180)) == pi, \"degrees -> radians conversion failed\"",
    "def rad2deg(radians):\n    return 180 * radians / pi\n\n\nif __name__ == \"__main__\":\n    print(rad2deg(pi/4))",
    "def convert_radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n\n    radians: float\n    Returns: float\n    \"\"\"\n    return radians * 180.0 / math.pi\n\n\nif __name__ == '__main__':\n    assert convert_radians_to_degrees(math.pi/2) == 90.0\n    assert convert_radians_to_degrees(math.pi) == 180.0\n    assert convert_radians_to_degrees(math.pi/4) == 45.0\n    assert convert_radians_to_degrees(math.pi/6) == 30.0\n    assert convert_radians_to_degrees(math.pi/8) == 22.5",
    "radians_to_degrees = lambda radians: 180 * (radians / (2 * np.pi))\n\nprint(radians_to_degrees(0.0))\nprint(radians_to_degrees(1.0))\nprint(radians_to_degrees(1.5))\nprint(radians_to_degrees(2.0))\nprint(radians_to_degrees(3.0))",
    "def rad2deg(rad):\n    return 180.0*rad/3.14159\n\ndef deg2rad(deg):\n    return 3.14159*deg/180.0\n\ndef main():\n    print(rad2deg(3.14159/2.0))\n    print(deg2rad(180.0))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef convert_radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n\n    :param radians: float\n    :return: float\n    \"\"\"\n    return math.degrees(radians)\n\nif __name__ == '__main__':\n    print convert_radians_to_degrees(math.pi / 4)",
    "from math import pi\n\ndef radians_to_degrees(radians):\n    \"\"\"\n    :type radians: float\n    :rtype: float\n    \"\"\"\n    return radians * 180 / pi\n\n\ndef main():\n    \"\"\"\n    Sample Run:\n    >>> print(radians_to_degrees(pi/2))\n    180\n    \"\"\"\n    print(radians_to_degrees(pi/2))\n\nif __name__ == '__main__':\n    main()",
    "def rad2deg(rad):\n    return rad * 180 / pi\n\n\ndef test():\n    assert rad2deg(pi) == 180\n    assert rad2deg(3 * pi / 2) == 90\n    assert rad2deg(2 * pi) == 360\n\n\nif __name__ == '__main__':\n    test()",
    "def rad2deg(rad):\n    return 180.0 * rad / math.pi\n\nprint(rad2deg(math.pi))",
    "def rad2deg(rad):\n    return rad * 180 / 3.14159\n\n\ndef deg2rad(deg):\n    return deg * 3.14159 / 180\n\n\ndef main():\n    print(rad2deg(0.0))\n    print(deg2rad(0.0))\n    print(rad2deg(3.14159))\n    print(deg2rad(3.14159))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for degrees.\nclass Degrees(object):\n    def __init__(self, val):\n        \"\"\"\n        initialize your data structure here.\n        :type val: int\n        \"\"\"\n        self.val = val\n\n    def toDegrees(self, radians):\n        \"\"\"\n        Convert a given angle in radians to degrees.\n        :type radians: float\n        :rtype: float\n        \"\"\"\n        return self.val * 180 / math.pi\n\n# Your Degrees object will be instantiated and called as such:\n# obj = Degrees(val)\n# param_1 = obj.toDegrees(radians)\n\nclass Solution(object):\n    def toDegrees(self, val, radians):\n        \"\"\"\n        :type val: int\n        :type radians: float\n        :rtype: float\n        \"\"\"\n        return val * 180 / math.pi",
    "def rad2deg(rad):\n    return 180*rad/pi\n\ndef deg2rad(deg):\n    return pi*deg/180\n\ndef main():\n    print rad2deg(3.14159265359)\n    print deg2rad(180)\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.14159\n\nif __name__ == \"__main__\":\n    print(rad_to_deg(3.14159))\n    print(rad_to_deg(3.14159))\n    print(rad_to_deg(3.14159))\n    print(rad_to_deg(3.14159))\n    print(rad_to_deg(3.14159))\n    print(rad_to_deg(3.14159))",
    "def radians_to_degrees(radians):\n    return degrees_to_radians(radians * 180 / pi)\n\ndef degrees_to_radians(degrees):\n    return degrees / 180 * pi\n\nif __name__ == '__main__':\n    radians = 0\n    degrees = 0\n    radians = radians_to_degrees(radians)\n    degrees = degrees_to_radians(degrees)\n    print(radians)\n    print(degrees)",
    "from __future__ import division\n\ndef rad2deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n    :param rad: Radians\n    :return: Degrees\n    \"\"\"\n    return rad * 180 / 3.14159",
    "import math\n\ndef radians_to_degrees(radians):\n    return degrees = (radians * 180) / math.pi\n\nprint(radians_to_degrees(1.5))",
    "def radians_to_degrees(radians):\n    return radians * 180 / pi\n\n\nif __name__ == '__main__':\n    print radians_to_degrees(pi)",
    "def radians_to_degrees(radians):\n    return degrees_to_radians(radians * 180 / 3.14159265358979323846)\n\ndef degrees_to_radians(degrees):\n    return degrees / 180 * 3.14159265358979323846",
    "def rad2deg(rad):\n    return rad*180/math.pi\n\ndef deg2rad(deg):\n    return deg*math.pi/180\n\n\n\nif __name__ == '__main__':\n    rad = 0.0\n    deg = 0.0\n    print \"rad = {}\".format(rad)\n    print \"deg = {}\".format(deg)\n    print \"rad2deg = {}\".format(rad2deg(rad))\n    print \"deg2rad = {}\".format(deg2rad(deg))",
    "def rad_to_deg(radians):\n    return 180 * radians / pi\n\n\ndef main():\n    radians = float(input('Enter radians: '))\n    print('Radians to degrees:', rad_to_deg(radians))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef rad2deg(rad):\n    return rad * 180 / math.pi\n\n\ndef test_rad2deg():\n    assert rad2deg(math.pi) == 180\n    assert rad2deg(math.pi/2) == 90\n    assert rad2deg(math.pi/4) == 45",
    "def rad_to_deg(rads):\n    \"\"\"\n    :param rads: A float.\n    :return: A float.\n    \"\"\"\n    return (rads * 180) / (math.pi)\n\nif __name__ == '__main__':\n    print rad_to_deg(math.pi)\n    print rad_to_deg(math.pi/2)\n    print rad_to_deg(math.pi/6)\n    print rad_to_deg(math.pi/4)",
    "def rad_to_deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return rad * 180 / pi",
    "def rad_to_deg(rads):\n    return rads * 180 / 3.1415926\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(3.1415926) == 180\n    assert rad_to_deg(1.5707963) == 90\n\nif __name__ == '__main__':\n    test_rad_to_deg()",
    "def radians_to_degrees(radians):\n    \"\"\"\n    :type radians: float\n    :rtype: float\n    \"\"\"\n    return radians * (180.0 / 3.14159)\n\ndef main():\n    print(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_degrees(radians_to_",
    "def rad2deg(radians):\n    return degrees + 180\n\nprint(rad2deg(0.0))\nprint(rad2deg(180.0))\nprint(rad2deg(360.0))\n\n\"\"\"\nOutput:\n\n180\n360\n360\n\"\"\"",
    "def rad2deg(rad):\n    return int(rad * 180 / math.pi)\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rad2deg(math.pi) == 180, \"180 degrees\"\n    assert rad2deg(math.pi / 2) == 90, \"90 degrees\"\n    assert rad2deg(math.pi / 6) == 45, \"45 degrees\"\n    assert rad2deg(math.pi / 8) == 22.5, \"22.5 degrees\"\n    assert rad2deg(math.pi / 10) == 22.25, \"22.25 degrees\"\n    assert rad2deg(math.pi / 12) == 22.75, \"22.75 degrees\"\n    assert rad2deg(math.pi / 15) == 22.875, \"22.875 degrees\"\n    assert rad2deg(math.pi / 18) == 23.125, \"23.125 degrees\"\n    assert rad2deg(math.pi / 20) == 23.25, \"23.25 degrees\"\n    assert rad2deg(math.pi / 30) == 23.375, \"23.375 degrees\"\n    assert rad2deg(math.pi / 30) == 23.375, \"23.375 degrees\"\n    assert rad2deg(math.pi / 50) == 23.5, \"23.5 degrees\"\n    assert rad2deg(math.pi / 60) == 23.625, \"23.625 degrees\"\n    assert rad2deg(math.pi / 120) == 23.75, \"23.75 degrees\"\n    assert rad2deg(math.pi / 200) == 23.875, \"23.875 degrees\"\n    assert rad2deg(math.pi / 240) == 24, \"24 degrees\"\n    assert rad2deg(math.pi / 240) == 24, \"24 degrees\"\n    assert rad2deg(math.pi / 300) == 24.125, \"24.125 degrees\"\n    assert rad2deg(math.pi / 300) == 24.125, \"24.125 degrees\"\n    assert rad2deg(math.pi / 360) == 24.25, \"24.25 degrees\"",
    "def radians_to_degrees(radians):\n    return radians * 180 / 3.14159265358979323846\n\nif __name__ == '__main__':\n    print radians_to_degrees(1.0)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14159265358979323846)\n    print radians_to_degrees(3.14",
    "def radians_to_degrees(radians):\n    return radians * 180 / math.pi\n\n\nprint(radians_to_degrees(math.pi))\n# 180.0\n\nprint(radians_to_degrees(math.pi / 2))\n# 90.0\n\nprint(radians_to_degrees(math.pi / 4))\n# 45.0",
    "# https://www.hackerrank.com/challenges/rad2deg\ndef rad2deg(rad):\n    return (rad * 180) / pi\n\nif __name__ == '__main__':\n    with open(\"input.txt\") as f:\n        lines = f.readlines()\n\n    for line in lines:\n        rad = float(line.strip())\n        print(rad2deg(rad))",
    "import math\n\ndef rad2deg(rad):\n    return rad * 180 / math.pi\n\ndef deg2rad(deg):\n    return deg * math.pi / 180\n\ndef main():\n    print \"Convert radians to degrees\"\n    print \"Convert 0.123 radians to 0.123 degrees\"\n    print \"Convert -0.123 radians to -0.123 degrees\"\n    print \"Convert 0.123 degrees to 0.123 radians\"\n    print \"Convert -0.123 degrees to -0.123 radians\"\n    print \"Convert 0.123 radians to 0.123 degrees\"\n    print \"Convert -0.123 radians to -0.123 degrees\"\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef rad2deg(rad):\n    return rad * 180 / math.pi\n\ndef deg2rad(deg):\n    return deg * math.pi / 180\n\ndef main():\n    print('{:.2f}'.format(rad2deg(math.pi)))\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rad):\n    return 180.0 / math.pi * rad\n\n# Complete the function below.\n\ndef main():\n    print(\"Enter angle in radians: \")\n    rad = float(input())\n    print(\"Converted angle is: \" + str(rad_to_deg(rad)))\n\nif __name__ == '__main__':\n    main()",
    "def rad2deg(rad):\n    return 180 * rad / 3.14159\n\nprint(rad2deg(1.0))\nprint(rad2deg(3.14159))\nprint(rad2deg(3.14159265358979))\nprint(rad2deg(3.1415926535897932384626433832795028841971693993751058209749445923))\n\nprint(\"-\" * 20)\n\nprint(deg2rad(180))\nprint(deg2rad(90))\nprint(deg2rad(1.0))\nprint(deg2rad(3.14159))\nprint(deg2rad(3.14159265358979))\nprint(deg2rad(3.1415926535897932384626433832795028841971693993751058209749445923))\n\nprint(\"-\" * 20)\n\nprint(rad2deg(180))\nprint(rad2deg(90))\nprint(rad2deg(1.0))\nprint(rad2deg(3.14159))\nprint(rad2deg(3.14159265358979))\nprint(rad2deg(3.1415926535897932384626433832795028841971693993751058209749445923))",
    "def rad2deg(r):\n    return r * 180 / pi\n\ndef deg2rad(d):\n    return d * pi / 180\n\nprint(rad2deg(pi / 4))\nprint(deg2rad(rad2deg(pi / 4)))\nprint(rad2deg(2 * pi / 4))\nprint(deg2rad(rad2deg(2 * pi / 4)))",
    "def radians_to_degrees(rads):\n    return rads * (180.0 / 3.14159265358979323846)\n\n\n# Test Cases\n\nprint radians_to_degrees(3.14159265358979323846)\nprint radians_to_degrees(3.14159265358979323846)",
    "def rad2deg(rad):\n    return rad * 180 / pi\n\ndef test():\n    assert rad2deg(pi) == 180\n    assert rad2deg(pi/2) == 90\n    assert rad2deg(pi/3) == 60\n    assert rad2deg(2*pi/3) == 60\n    assert rad2deg(pi/4) == 45\n    assert rad2deg(3*pi/4) == 45\n    assert rad2deg(pi/6) == 30\n    assert rad2deg(5*pi/6) == 30\n    assert rad2deg(7*pi/6) == 30\n    assert rad2deg(8*pi/6) == 30\n    assert rad2deg(9*pi/6) == 30\n\nif __name__ == '__main__':\n    test()",
    "import math\n\ndef convert_radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n\n    Input is a list of radians, e.g.\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "def rad2deg(rad):\n    return rad * 180 / pi\n\n\ndef main():\n    print(rad2deg(radians(2)))\n    print(rad2deg(radians(45)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import radians\n\ndef rad2deg(rad):\n    return int(rad * 180 / 3.14159)\n\n# test cases\nprint \"Input a number between 0 and 90, convert it to degrees.\"\nprint \"rad2deg(radians(1)) ==\", rad2deg(radians(1))\nprint \"rad2deg(radians(1.5)) ==\", rad2deg(radians(1.5))\nprint \"rad2deg(radians(2)) ==\", rad2deg(radians(2))\nprint \"rad2deg(radians(3)) ==\", rad2deg(radians(3))\nprint \"rad2deg(radians(3.5)) ==\", rad2deg(radians(3.5))\nprint \"rad2deg(radians(4)) ==\", rad2deg(radians(4))\nprint \"rad2deg(radians(45)) ==\", rad2deg(radians(45))\nprint \"rad2deg(radians(90)) ==\", rad2deg(radians(90))\nprint \"rad2deg(radians(180)) ==\", rad2deg(radians(180))\nprint \"rad2deg(radians(270)) ==\", rad2deg(radians(270))\nprint \"rad2deg(radians(360)) ==\", rad2deg(radians(360))",
    "import math\n\ndef rad2deg(rad):\n    return math.degrees(rad)\n\ndef deg2rad(deg):\n    return math.radians(deg)\n\ndef main():\n    rad = math.pi/2\n    print(rad2deg(rad))\n    print(deg2rad(rad2deg(rad)))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef rad_to_deg(radians):\n    \"\"\"\n    :type radians: float\n    :rtype: float\n    \"\"\"\n    return math.degrees(radians)\n\n\ndef main():\n    print(rad_to_deg(math.pi))\n    print(rad_to_deg(math.pi / 2))\n    print(rad_to_deg(math.pi / 4))\n    print(rad_to_deg(math.pi / 8))\n    print(rad_to_deg(math.pi / 16))\n    print(rad_to_deg(math.pi / 32))\n    print(rad_to_deg(math.pi / 64))\n\n\nif __name__ == '__main__':\n    main()",
    "def rad2deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n    rad: A number.\n    returns: A number.\n    \"\"\"\n    return rad * 180 / math.pi\n\nif __name__ == '__main__':\n    print(rad2deg(math.pi / 2))\n    print(rad2deg(math.pi / 4))\n    print(rad2deg(math.pi / 6))\n    print(rad2deg(math.pi / 8))\n    print(rad2deg(math.pi / 10))\n    print(rad2deg(math.pi / 12))",
    "def rad_to_deg(rad):\n    return 180.0/pi*rad\n\ndef main():\n    test_cases = [\n        (0.0, 0.0),\n        (pi/2, 180.0),\n        (pi, 0.0),\n        (3.14159, 180.0),\n        (2.0*pi, 360.0),\n        (2.0*pi+pi, 0.0),\n        (2.0*pi+pi/2, 90.0),\n    ]\n    for rad, deg in test_cases:\n        print(\"rad: {rad}, deg: {deg}\".format(rad=rad, deg=deg))\n        print(\"rad: {rad}\".format(rad=rad_to_deg(rad)))\n        print(\"deg: {deg}\".format(deg=rad_to_deg(deg)))\n        print()\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef rad_to_deg(rad):\n    return math.degrees(rad)\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(math.pi) == 180\n    assert rad_to_deg(math.pi / 2) == 90\n    assert rad_to_deg(math.pi * 1.5) == 225\n    assert rad_to_deg(math.pi / 4) == 45\n    assert rad_to_deg(math.pi / 3) == 30\n    assert rad_to_deg(math.pi / 6) == 15\n    assert rad_to_deg(math.pi / 10) == 3.14159265359\n    assert rad_to_deg(math.pi / 12) == 1.5708\n\n\nif __name__ == '__main__':\n    test_rad_to_deg()",
    "def rad2deg(rad):\n    return rad * 180 / 3.1415926\n\n\ndef deg2rad(deg):\n    return deg * 3.1415926 / 180\n\n\ndef main():\n    print(\"\"\"\nWrite a function to convert radians to degrees.\n\nExample:\nrad2deg(pi) -> 180\nrad2deg(pi/2) -> 90\nrad2deg(2*pi) -> 360\n\nInput:\nThe first line contains an integer N, the number of test cases.\nThe next N lines each contain a floating point number in radians.\n\nOutput:\nFor each test case, print the number of degrees.\n\"\"\")\n\n    cases = int(input())\n\n    for case in range(1, cases + 1):\n        rad = float(input())\n\n        print(\"Case #{}: {}\".format(case, rad2deg(rad)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def rad2deg(rad):\n    \"\"\"\n    Convert radians to degrees.\n\n    Example:\n\n    >>> rad2deg(3.14159265358979323846)\n    180.0\n    >>> rad2deg(2.0*pi)\n    360.0\n    >>> rad2deg(1.0)\n    1.0\n    \"\"\"\n\n    return (rad * 180.0) / pi\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef rad_to_deg(radians):\n    \"\"\"\n    Convert radians to degrees\n    :param radians: The input number\n    :return: The result of conversion\n    \"\"\"\n    return math.degrees(radians)",
    "from math import pi\n\ndef radians_to_degrees(rad):\n    return rad * 180 / pi\n\n\nif __name__ == '__main__':\n    print radians_to_degrees(pi/4)",
    "from math import radians\n\ndef rad2deg(rad):\n    return int(rad * 57.295779513082323)\n\ndef deg2rad(deg):\n    return deg / 57.295779513082323\n\ndef test_rad2deg():\n    assert rad2deg(radians(90)) == 90\n    assert rad2deg(radians(180)) == 180\n    assert rad2deg(radians(270)) == 270\n\ndef test_deg2rad():\n    assert deg2rad(90) == radians(90)\n    assert deg2rad(180) == radians(180)\n    assert deg2rad(270) == radians(270)\n\nif __name__ == \"__main__\":\n    test_rad2deg()\n    test_deg2rad()",
    "def rad_to_deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return rad * 180 / pi\n\nif __name__ == '__main__':\n    assert rad_to_deg(pi / 2) == 90\n    assert rad_to_deg(pi / 4) == 45\n    assert rad_to_deg(pi / 3) == 30\n    assert rad_to_deg(pi / 5) == 25\n    assert rad_to_deg(pi / 8) == 18\n    assert rad_to_deg(pi / 6) == 15\n    assert rad_to_deg(pi / 10) == 12\n    assert rad_to_deg(pi / 9) == 9\n    assert rad_to_deg(pi / 8) == 8\n    assert rad_to_deg(pi / 7) == 7\n    assert rad_to_deg(pi / 6) == 6\n    assert rad_to_deg(pi / 5) == 5\n    assert rad_to_deg(pi / 4) == 4\n    assert rad_to_deg(pi / 3) == 3\n    assert rad_to_deg(pi / 2) == 2\n    assert rad_to_deg(pi) == 0\n    assert rad_to_deg(1) == 0\n    assert rad_to_deg(2) == 0\n    assert rad_to_deg(3) == 0\n    assert rad_to_deg(4) == 0\n    assert rad_to_deg(5) == 0\n    assert rad_to_deg(6) == 0\n    assert rad_to_deg(7) == 0\n    assert rad_to_deg(8) == 0\n    assert rad_to_deg(9) == 0\n    assert rad_to_deg(10) == 0\n    assert rad_to_deg(11) == 0\n    assert rad_to_deg(12) == 0\n    assert rad_to_deg(13) == 0\n    assert rad_to_deg(14) == 0\n    assert rad_to_deg(15) == 0\n    assert rad_to_deg(16) == 0\n    assert rad_to_deg(17) == 0\n    assert",
    "def rad2deg(rad):\n    return rad * 180 / math.pi\n\nif __name__ == '__main__':\n    assert rad2deg(math.pi/2) == 90\n    assert rad2deg(math.pi) == 180\n    assert rad2deg(math.pi/4) == 45\n    assert rad2deg(math.pi/6) == 30\n    assert rad2deg(math.pi/8) == 22.5\n    assert rad2deg(math.pi/16) == 11.25\n    assert rad2deg(math.pi/32) == 5.625\n    assert rad2deg(math.pi/64) == 2.8125\n    assert rad2deg(math.pi/128) == 1.5625\n    assert rad2deg(math.pi/256) == 0.78125\n    assert rad2deg(math.pi/512) == 0.390625\n    assert rad2deg(math.pi/1024) == 0.1953125\n    assert rad2deg(math.pi/2048) == 0.09765625\n    assert rad2deg(math.pi/4096) == 0.0439453125\n    assert rad2deg(math.pi/8192) == 0.015625\n    assert rad2deg(math.pi/16384) == 0.0078125\n    assert rad2deg(math.pi/32768) == 0.00390625\n    assert rad2deg(math.pi/65536) == 0.001953125\n    assert rad2deg(math.pi/131072) == 0.0009765625\n    assert rad2deg(math.pi/262144) == 0.00048828125\n    assert rad2deg(math.pi/524288) == 0.000244140625\n    assert rad2deg(math.pi/1048576) == 0.0001220703125\n    assert rad2deg(math.pi/2097152) == 0.00006103515625\n    assert rad2deg(math.pi/4194304) == 0.000030517578125\n    assert rad2deg(math.pi/8388608) == 0.0000152587890625",
    "def radians_to_degrees(radians):\n    return radians * 180 / 3.14159265358979323846\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.14159265358979323846 / 2))\n    print(radians_to_degrees(3.14159265358979323846 / 4))\n    print(radians_to_degrees(3.14159265358979323846 / 8))\n    print(radians_to_degrees(3.14159265358979323846 / 16))\n    print(radians_to_degrees(3.14159265358979323846 / 32))\n    print(radians_to_degrees(3.14159265358979323846 / 64))\n    print(radians_to_degrees(3.14159265358979323846 / 128))\n    print(radians_to_degrees(3.14159265358979323846 / 256))\n    print(radians_to_degrees(3.14159265358979323846 / 512))\n    print(radians_to_degrees(3.14159265358979323846 / 1024))\n    print(radians_to_degrees(3.14159265358979323846 / 2048))\n    print(radians_to_degrees(3.14159265358979323846 / 4096))\n    print(radians_to_degrees(3.14159265358979323846 / 8192))\n    print(radians_to_degrees(3.14159265358979323846 / 16384))\n    print(radians_to_degrees(3.14159265358979323846 / 32768))\n    print(radians_to_degrees(3.14159265358979323846 / 65536))\n    print(radians_to_degrees(3.14159265358979323846 / 131072))\n    print(radians_to_degrees(3.14159265358979323846 / 262144))\n    print(radians_to_degrees(",
    "rad = 180.0 / math.pi\n\ndef rad2deg(rad):\n    return int(rad * rad * rad)\n\nif __name__ == \"__main__\":\n    print(rad2deg(math.pi / 2))\n    print(rad2deg(math.pi / 4))\n    print(rad2deg(math.pi / 3))\n    print(rad2deg(math.pi / 5))",
    "def rad2deg(rad):\n    \"\"\"\n    >>> rad2deg(1.5)\n    180.0\n    >>> rad2deg(3.14159)\n    180.0\n    >>> rad2deg(0)\n    0.0\n    >>> rad2deg(0.0)\n    0.0\n    >>> rad2deg(1e-50)\n    0.0\n    \"\"\"\n    return rad * 57.295779513082323\n\n\ndef deg2rad(deg):\n    \"\"\"\n    >>> deg2rad(180.0)\n    1.5\n    >>> deg2rad(0.0)\n    0.0\n    >>> deg2rad(0.0)\n    0.0\n    >>> deg2rad(360.0)\n    1.0\n    \"\"\"\n    return deg / 57.295779513082323\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def rad2deg(rad):\n    return 180 * rad / pi\n\ndef deg2rad(deg):\n    return pi * deg / 180.0\n\nif __name__ == \"__main__\":\n    print(rad2deg(pi/2))\n    print(deg2rad(180))",
    "def rad_to_deg(radians):\n    return degrees\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def rad2deg(rad):\n    return rad * 180 / pi\n\ndef deg2rad(deg):\n    return deg * pi / 180\n\ndef main():\n    assert rad2deg(pi/2) == 90\n    assert deg2rad(90) == pi/2\n    assert deg2rad(-90) == -pi/2\n\nif __name__ == '__main__':\n    main()",
    "from math import radians, degrees\n\ndef rad2deg(rads):\n    return degrees(rads)\n\ndef deg2rad(degrees):\n    return radians(degrees)\n\ndef main():\n    print rad2deg(radians(90))\n\nif __name__ == '__main__':\n    main()",
    "def rad_to_deg(rad):\n    \"\"\"\n    Input:  rad = a number from 0 to 2pi\n    Output: a number from 0 to 360\n    \"\"\"\n    return rad * 180 / 3.14\n\nif __name__ == \"__main__\":\n    print(rad_to_deg(3.14159265359))\n    print(rad_to_deg(1.57079632679))",
    "def radians_to_degrees(radians):\n    \"\"\"\n    :type radians: float\n    :rtype: float\n    \"\"\"\n    return radians * 180 / math.pi\n\n\ndef test_radians_to_degrees():\n    assert radians_to_degrees(3.14159) == 57.29577951308232\n    assert radians_to_degrees(1.5707963267948966) == 90.0\n    assert radians_to_degrees(3.141592653589793) == 180.0\n    assert radians_to_degrees(math.pi) == 180.0\n    assert radians_to_degrees(math.pi * 2) == 360.0\n    assert radians_to_degrees(math.pi * 3) == 450.0\n\nif __name__ == '__main__':\n    print(radians_to_degrees(3.14159))",
    "def rad2deg(rads):\n    return 180.0 * rads / pi\n\nif __name__ == '__main__':\n    print(rad2deg(pi/2))\n    print(rad2deg(pi/4))\n    print(rad2deg(3*pi/4))",
    "def rad2deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return 180 * rad / math.pi\n\nprint(rad2deg(math.pi))",
    "def radians_to_degrees(radians):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n\n    return radians * 180 / math.pi\n\nif __name__ == '__main__':\n    print(radians_to_degrees(0.01))\n    print(radians_to_degrees(1.00))",
    "from math import pi\n\ndef radians_to_degrees(radians):\n    return radians * 180 / pi\n\n# Test Cases\ntest_case = [\n    (pi/4, 180),\n    (pi/2, 90),\n    (3*pi/4, 270),\n    (2*pi, 0)\n]\n\nfor (radians, degrees) in test_case:\n    print(\"Radians:\", radians)\n    print(\"Degrees:\", radians_to_degrees(radians))",
    "def rad2deg(rad):\n    \"\"\"\n    :type rad: float\n    :rtype: float\n    \"\"\"\n    return rad * 180 / pi\n\n\ndef test_rad2deg():\n    assert rad2deg(pi/2) == 90\n    assert rad2deg(pi) == 180\n    assert rad2deg(pi/4) == 45\n    assert rad2deg(pi/3) == 135\n    assert rad2deg(3*pi/4) == 45\n    assert rad2deg(2*pi/3) == 135\n    assert rad2deg(2*pi) == 360",
    "def rad_to_deg(rad):\n    return rad * 180 / 3.14159",
    "def rad2deg(rad):\n    return rad * 180 / 3.14159265358979323846\n\ndef deg2rad(deg):\n    return deg * 3.14159265358979323846 / 180\n\nif __name__ == '__main__':\n    assert(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad2deg(rad",
    "def rad_to_deg(rad):\n    return 180.0 * rad / 3.1415926\n\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0.0) == 0.0\n    assert rad_to_deg(1.0) == 90.0\n    assert rad_to_deg(2.0) == 180.0\n    assert rad_to_deg(3.0) == 270.0\n    assert rad_to_deg(4.0) == 360.0",
    "# https://www.hackerrank.com/challenges/rad-to-deg/problem\n\nimport math\n\ndef rad_to_deg(r):\n    return r * 180 / math.pi\n\n\n# test cases\n\n# rad_to_deg(0) => 0\n# rad_to_deg(math.pi/2) => 180\n# rad_to_deg(math.pi) => 90\n# rad_to_deg(math.pi*3/2) => 180\n# rad_to_deg(math.pi*4/3) => 270\n\n# rad_to_deg(math.pi/2) => 180\n# rad_to_deg(math.pi) => 90\n# rad_to_deg(math.pi*3/2) => 180\n# rad_to_deg(math.pi*4/3) => 270",
    "def radians_to_degrees(rads):\n    \"\"\"\n    >>> radians_to_degrees(0.0)\n    0.0\n    >>> radians_to_degrees(1.0)\n    90.0\n    >>> radians_to_degrees(1.5)\n    45.0\n    \"\"\"\n    return rads * 180.0 / 3.14159\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef rad_to_deg(rad):\n    \"\"\"\n    Converts a value in radians to degrees.\n    :param rad: the value in radians.\n    :return: the value in degrees.\n    \"\"\"\n    return rad * 180 / math.pi\n\ndef test_rad_to_deg():\n    assert rad_to_deg(0) == 0\n    assert rad_to_deg(math.pi / 2) == 90\n    assert rad_to_deg(math.pi) == 180\n    assert rad_to_deg(math.pi * 2) == 360\n\nif __name__ == \"__main__\":\n    print(rad_to_deg(math.pi / 2))",
    "def rad_to_deg(rad):\n    \"\"\"\n    >>> rad_to_deg(1.0)\n    180.0\n    >>> rad_to_deg(0.5)\n    45.0\n    >>> rad_to_deg(0.0)\n    0.0\n    \"\"\"\n    return rad * 180.0 / 3.14159",
    "def rad_to_deg(rad):\n    return 180 * rad / math.pi\n\n\n# Test cases\nassert rad_to_deg(0) == 0\nassert rad_to_deg(math.pi/2) == 90\nassert rad_to_deg(math.pi) == 180\nassert rad_to_deg(math.pi/4) == 45\nassert rad_to_deg(math.pi/8) == 22.5\nassert rad_to_deg(math.pi/16) == 12.5"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}