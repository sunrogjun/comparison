{
  "problem": {
    "task_id": "MBPP/128",
    "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
    "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
    "test_list": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ],
    "challenge_test_list": [],
    "problem_id": 117
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Answered by Billy Wilson Arante\n# Last updated on 2016/12/21 EST\n\ndef shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words(['cat', 'bat', 'rat', 'hat'], 3)\n    ['bat', 'hat']\n    \"\"\"\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\n\nwords = sys.argv[1]\nn = int(sys.argv[2])\n\ndef shortlist(words, n):\n    res = []\n    for word in words:\n        if len(word) <= n:\n            res.append(word)\n    return res\n\ndef main():\n    words = sys.argv[1]\n    res = shortlist(words, n)\n    print res\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a word:\n#     word: str\n#     def is_palindrome(word):\n#         if len(word) == 1:\n#             return True\n#         return word[0] == word[-1] and is_palindrome(word[1:-1])\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for word in words:\n            if len(word) <= n:\n                result.append(word)\n            else:\n                result.extend(self.shortlist(words, n - len(word)))\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    print(solution.shortlist(words, 6))",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    return [w for w in words if len(w) <= n]\n\n\nif __name__ == '__main__':\n    words = [\"cat\", \"bat\", \"rat\"]\n    print(shortlist(words, 1))\n    print(shortlist(words, 2))\n    print(shortlist(words, 3))\n    print(shortlist(words, 4))\n    print(shortlist(words, 5))\n    print(shortlist(words, 6))\n    print(shortlist(words, 7))\n    print(shortlist(words, 8))",
    "def shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # Your Code Here\n    if len(words) < n:\n        return []\n    words_set = set(words)\n    return [word for word in words if word not in words_set]\n\ndef main():\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print(shortlist_words(words, 5))\n    \nif __name__ == '__main__':\n    main()",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    shortlist = []\n    for word in words:\n        if len(word) <= n:\n            shortlist.append(word)\n        elif len(word) == n+1:\n            shortlist.append(word)\n        else:\n            for i in range(n+1, len(word)):\n                if word[i] == word[i-1]:\n                    shortlist.append(word[:i])\n                    break\n    return shortlist",
    "class Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        words = set(words)\n        for i in xrange(len(words)):\n            for j in xrange(i, len(words)):\n                if j - i > n:\n                    break\n                if words.issubset(set(words[i:j])):\n                    res.append(words[i])\n                    break\n        return res",
    "import collections\n\nwords = [\"hello\", \"goodbye\", \"world\", \"hello\", \"world\", \"goodbye\"]\nn = 3\n\ndef shortlist(words, n):\n    result = collections.defaultdict(list)\n    for word in words:\n        if len(word) <= n:\n            result[word].append(word)\n    return result\n\nprint(shortlist(words, n))\n\n\"\"\"\nOutput:\n{'hello': ['hello', 'goodbye'], 'world': ['world'], 'goodbye': ['goodbye']}\n\"\"\"",
    "import collections\nfrom collections import defaultdict\n\n\ndef shortlist(wordlist, n):\n    \"\"\"\n    :type wordlist: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    d = defaultdict(list)\n    for w in wordlist:\n        d[len(w)].append(w)\n    return [w for w in d.keys() if d[len(w)] == [w]][:n]\n\nif __name__ == '__main__':\n    assert shortlist(['Hello', 'Hello', 'Hello', 'Hello', 'Hello', 'World'], 3) == ['Hello', 'World']\n    assert shortlist(['Hello', 'Hello', 'Hello', 'Hello', 'Hello', 'World'], 5) == ['Hello', 'World']\n    assert shortlist(['Hello', 'Hello', 'Hello', 'Hello', 'Hello', 'World'], 6) == ['Hello', 'World']\n    assert shortlist(['Hello', 'Hello', 'Hello', 'Hello', 'Hello', 'World'], 7) == []",
    "import re\nfrom collections import defaultdict\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        def dfs(word, dict_words, dict_n):\n            if len(word) <= n:\n                return [word]\n            if word in dict_words:\n                return [word]\n            for i in range(n - 1, -1, -1):\n                if len(word) >= i:\n                    word_n = word[:i]\n                    if word_n not in dict_words:\n                        dict_words[word_n] = word\n                        dict_n[word_n] = i\n                        return dfs(word[i:], dict_words, dict_n)\n                    else:\n                        return dfs(word[i:], dict_words, dict_n)\n            return []\n\n        dict_words = {}\n        dict_n = defaultdict(int)\n        result = []\n        for word in words:\n            result.extend(dfs(word, dict_words, dict_n))\n        return result",
    "def shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nif __name__ == '__main__':\n    words = ['abcd', 'abcde', 'abcdef', 'abcdabcde', 'abcdabcdef']\n    print shortlist_words(words, 5)",
    "#!/usr/bin/env python\n\ndef shortlist(words, n):\n    d = {}\n    for w in words:\n        if w.lower() in d:\n            d[w.lower()] += 1\n        else:\n            d[w.lower()] = 1\n    result = []\n    for w in d.keys():\n        if d[w] > n:\n            result.append(w)\n    return result\n\nif __name__ == \"__main__\":\n    words = [\n        \"a\",\n        \"b\",\n        \"ab\",\n        \"ac\",\n        \"ad\",\n        \"ae\",\n        \"af\",\n        \"ag\",\n        \"ah\",\n        \"ai\",\n        \"aj\",\n        \"ak\",\n        \"al\",\n        \"am\",\n        \"an\",\n        \"ao\",\n        \"ap\",\n        \"aq\",\n        \"ar\",\n        \"as\",\n        \"at\",\n        \"au\",\n        \"av\",\n        \"aw\",\n        \"ax\",\n        \"ay\",\n        \"az\",\n        \"ba\",\n        \"bb\",\n        \"bc\",\n        \"bd\",\n        \"be\",\n        \"bf\",\n        \"bg\",\n        \"bh\",\n        \"bi\",\n        \"bj\",\n        \"bl\",\n        \"bm\",\n        \"bn\",\n        \"bo\",\n        \"bp\",\n        \"bq\",\n        \"br\",\n        \"bs\",\n        \"bt\",\n        \"bu\",\n        \"bv\",\n        \"bw\",\n        \"bx\",\n        \"by\",\n        \"bz\",\n        \"ca\",\n        \"cb\",\n        \"cc\",\n        \"cd\",\n        \"ce\",\n        \"cf\",\n        \"cg\",\n        \"ch\",\n        \"ci\",\n        \"cj\",\n        \"ck\",\n        \"cl\",\n        \"cm\",\n        \"cn\",\n        \"co\",\n        \"cp\",\n        \"cq\",\n        \"cr\",\n        \"cs\",\n        \"ct\",\n        \"cu\",\n        \"cv\",\n        \"cw\",\n        \"cx\",",
    "import sys\n\n\ndef get_words(filename):\n    \"\"\"\n    Read words from a file.\n    \"\"\"\n    words = []\n    with open(filename, 'r') as f:\n        for line in f:\n            words.append(line.strip())\n    return words\n\n\ndef shortlist_words(words, n):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n    short_words = []\n    for word in words:\n        if len(word) <= n:\n            short_words.append(word)\n    return short_words\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        words = get_words(sys.argv[1])\n        shortlist_words(words, int(sys.argv[1]))\n    else:\n        print \"Please enter a file name\"",
    "from collections import defaultdict\nfrom operator import itemgetter\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # create a dictionary of words\n    words_dict = defaultdict(int)\n    for word in words:\n        words_dict[word] += 1\n    # create a list of words sorted by frequency\n    words_sorted = sorted(words_dict.items(), key=itemgetter(1), reverse=True)\n\n    # create a list of words that are more than n\n    result = []\n    for word in words_sorted:\n        if word[1] >= n:\n            result.append(word[0])\n\n    return result",
    "class Solution:\n    # @param words, a list of strings\n    # @param n, an integer\n    # @return a list of strings\n    def shortlist(self, words, n):\n        result = []\n        if n == 0:\n            return words\n        else:\n            for word in words:\n                if len(word) > n:\n                    result.append(word)\n        return result",
    "import string\nimport collections\n\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        # TODO: (1)\n\n    def shortlist2(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        # TODO: (2)\n\n    def shortlist3(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        # TODO: (3)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    words = ['dog', 'cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    print(sol.shortlist(words, 3))\n    print(sol.shortlist2(words, 3))\n    print(sol.shortlist3(words, 3))",
    "# Definition for a word:\n#     string word;\n#     vector<int> freq;\n# Sorts a word by frequency descending.\nclass Word(object):\n    def __init__(self, word, freq):\n        self.word = word\n        self.freq = freq\n\n    def __lt__(self, other):\n        return self.freq < other.freq\n\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        # Write your code here\n        return sorted(words, key=lambda x: (x.freq, x.word))[:n]",
    "import unittest\nfrom collections import defaultdict\n\n# Definition for a word dictionary.\nclass WordDictionary:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.d = defaultdict(list)\n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word to the dictionary.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        self.d[len(word)].append(word)\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the dictionary.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return word in self.d\n\n    def size(self):\n        \"\"\"\n        Returns the number of words in the dictionary.\n        :rtype: int\n        \"\"\"\n        return len(self.d)\n\n# Your WordDictionary object will be instantiated and called as such:\n# wordDictionary = WordDictionary()\n# wordDictionary.addWord(word)\n# wordDictionary.search(word)\n# wordDictionary.size()\n\nclass Test(unittest.TestCase):\n    def test(self):\n        # words = [\"hello\", \"leetcode\", \"leetcode\"]\n        # wordDictionary = WordDictionary()\n        # wordDictionary.addWord(\"hello\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leet\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leet\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")\n        # wordDictionary.addWord(\"leetcode\")",
    "from collections import defaultdict\nfrom functools import lru_cache\n\n# @include\n@lru_cache(maxsize=None)\ndef shortlist(words, n):\n    # dp[i] stores the shortest word that is longer than n from words[0:i].\n    # dp[i][j] stores the shortest word that is longer than n from words[i:j].\n    # dp[i][j] is computed recursively.\n    dp = defaultdict(list)\n    for i in range(len(words)):\n        for j in range(i, len(words)):\n            if j - i >= n:\n                break\n            dp[i][j] = min(dp[i][j], dp[i][j - 1]) + len(words[i])\n    return [w for w, v in dp.items() if v == dp[0][len(words) - 1]]\n# @exclude\n\n\ndef main():\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(shortlist(words, 4))\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(shortlist(words, 4))\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(shortlist(words, 4))\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(shortlist(words, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "import os\nimport re\nimport sys\n\n# Complete the shortlist function below.\ndef shortlist(words, n):\n    # Complete this function\n    res = []\n    for w in words:\n        if len(w) <= n:\n            res.append(w)\n    return res\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(sys.stdin.readline().strip())\n\n    words = sys.stdin.readline().strip().split(' ')\n\n    result = shortlist(words, n)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()",
    "import collections\n\nwords = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\nn = 2\n\ndef shortlist(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nprint(shortlist(words, n))",
    "from collections import defaultdict\n\nclass Solution(object):\n    def shortlist_words(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        dic = defaultdict(list)\n        for word in words:\n            dic[len(word)].append(word)\n        for key in sorted(dic.keys()):\n            if len(dic[key]) < n:\n                res.extend(dic[key])\n        return res",
    "# Definition for a word:\n#     word: str\n#     def is_palindrome(word):\n#         if len(word) == 1:\n#             return True\n#         return word[0] == word[-1] and is_palindrome(word[1:-1])\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        if n <= 0:\n            return []\n\n        def is_palindrome(word):\n            if len(word) == 1:\n                return True\n            return word[0] == word[-1] and is_palindrome(word[1:-1])\n\n        # write your code here\n        result = []\n        for word in words:\n            if len(word) <= n:\n                result.append(word)\n            elif len(word) == n + 1 and is_palindrome(word):\n                result.append(word)\n            else:\n                break\n\n        return result",
    "def shortlist(words, n):\n    return [word for word in words if len(word) > n]\n\nif __name__ == '__main__':\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print(shortlist(words, 2))",
    "import collections\n\n# https://leetcode.com/problems/shortest-word-with-at-most-n-repeated-characters/description/\n\nclass Solution(object):\n    def shortestWord(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: str\n        \"\"\"\n        def get_shortest_word(words, n):\n            if not words:\n                return ''\n            shortest = words[0]\n            for word in words:\n                if len(word) > n:\n                    continue\n                if word.startswith(shortest):\n                    shortest = word\n            return shortest\n\n        return get_shortest_word(words, n)\n\n\nif __name__ == \"__main__\":\n    assert Solution().shortestWord(\"abcabc\", 2) == \"abc\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 3) == \"hello\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 5) == \"hello\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 1) == \"\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 3) == \"hello\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 5) == \"hello\"\n    assert Solution().shortestWord([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], 1) == \"\"",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\ndef main():\n    words = ['cat', 'bat', 'rat', 'rat', 'rat']\n    n = 5\n    print(shortlist(words, n))\n\n\nif __name__ == '__main__':\n    main()",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # if the list is empty, return empty list\n    if not words:\n        return []\n\n    # if the n is less than 1, return empty list\n    if n < 1:\n        return []\n\n    # list of words to be processed\n    words_to_process = words[:]\n    # number of words to be processed\n    num_words_to_process = len(words_to_process)\n\n    # initialize a list to be used to store the result\n    shortlist = []\n\n    # loop over all the words\n    for i in range(0, num_words_to_process):\n        # number of words that are less than n\n        num_words_less_than_n = 0\n\n        # loop over all the words to be processed\n        for j in range(0, num_words_to_process):\n            # if the current word is less than n, increment the number of words that are less than n\n            if words_to_process[j].__len__() <= n:\n                num_words_less_than_n += 1\n\n        # if the current word is less than n, add the current word to the shortlist\n        if num_words_less_than_n > 0:\n            shortlist.append(words_to_process[i])\n\n    # return the result\n    return shortlist\n\ndef main():\n    \"\"\"\n    Sample Input:\n        a b c d e f g h i j k l m n o p q r s t u v w x y z\n    Sample Output:\n        a b c d e f g h i j k l m n o p q r s t u v w x y z\n    \"\"\"\n    words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    n = 4",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
    "def shortlist_words(word_list, n):\n    \"\"\"\n    :type word_list: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    result = []\n    for word in word_list:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nif __name__ == '__main__':\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 2) == ['abcde']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 3) == ['abcde', 'abcdefg']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 5) == ['abcde', 'abcdefg']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 10) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 100) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 10) == ['abcde', 'abcdefg']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 11) == ['abcde', 'abcdefg']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 100) == ['abcde', 'abcdefg']\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 1000) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 10000) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 100000) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 1000000) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 10000000) == []\n    assert shortlist_words(['abcd', 'abcde', 'abcdefg'], 100000000)",
    "def shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for w in words:\n        if len(w) > n:\n            res.append(w)\n    return res\n\n\nif __name__ == '__main__':\n    words = [\"Hello\", \"I\", \"Love\", \"You\", \"Good\", \"Bye\"]\n    print(shortlist_words(words, 4))",
    "def shortlist(wordlist, n):\n    shortlist = []\n    for word in wordlist:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n# Your function should return a list of strings\ndef solution(wordlist, n):\n    shortlist = []\n    for word in wordlist:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\nif __name__ == '__main__':\n    # wordlist = [\"cat\", \"dog\", \"bat\", \"rat\", \"rat\", \"cat\", \"bat\", \"rat\", \"rat\", \"cat\"]\n    # n = 3\n    wordlist = [\"cat\", \"dog\", \"bat\", \"rat\", \"rat\", \"cat\", \"bat\", \"rat\", \"rat\", \"cat\"]\n    n = 3\n    print(solution(wordlist, n))",
    "#!/usr/bin/env python\n\nfrom string import ascii_lowercase\n\ndef shortlist(words, n):\n    \"\"\"\n    >>> shortlist(['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffffff', 'ggggggg'], 3)\n    ['dddd', 'ccc', 'ggggggg']\n    >>> shortlist(['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffffff', 'ggggggg'], 2)\n    ['dddd', 'ccc', 'ggggggg']\n    >>> shortlist(['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffffff', 'ggggggg'], 1)\n    ['dddd', 'eeee', 'ffffff']\n    >>> shortlist(['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffffff', 'ggggggg'], 0)\n    []\n    \"\"\"\n    if n == 0:\n        return []\n    \n    shortlist = []\n    for word in words:\n        if len(word) <= n:\n            shortlist.append(word)\n        else:\n            shortlist += shortlist(word, n-1)\n    return shortlist\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import re\n\ndef shortlist(words, n):\n    word_list = [w for w in words if len(w) > n]\n    return word_list\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'rat', 'cat', 'dog', 'rat', 'rat', 'rat']\n    print(shortlist(words, 4))\n    print(shortlist(words, 2))",
    "# https://github.com/michael-osborne/shortlist-words/blob/master/shortlist_words.py\n\ndef shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) <= n:\n            result.append(word)\n        else:\n            break\n\n    for word in words[n:]:\n        if len(word) <= n:\n            result.append(word)\n        else:\n            break\n\n    return result",
    "import sys\n\nwords = sys.argv[1].split(\" \")\nn = int(sys.argv[2])\n\ndef shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words([\"a\", \"b\", \"c\"], 2)\n    ['b']\n    >>> shortlist_words([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)\n    ['c', 'd']\n    >>> shortlist_words([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n    ['e']\n    >>> shortlist_words([\"a\", \"b\", \"c\", \"d\", \"e\"], 5)\n    []\n    \"\"\"\n    return [word for word in words if len(word) <= n]\n\nif __name__ == \"__main__\":\n    print(shortlist_words(words, n))",
    "# Importing modules\nimport sys\nimport os\nimport re\n\n# Defining a function to sort a list of words\ndef sort_words(words):\n    return sorted(words, key=lambda x: len(x), reverse=True)\n\n# Defining a function to print a list of words\ndef print_list(words):\n    print('\\n'.join(words))\n\n# Main program\nif __name__ == '__main__':\n    # Reading the input\n    with open(os.path.join(os.path.dirname(__file__), 'words.txt')) as input_file:\n        words = input_file.read().strip().split('\\n')\n    \n    # Sorting the list of words\n    words = sort_words(words)\n    \n    # Shortlisting the list of words\n    for i in range(0, len(words) - 1):\n        if len(words[i]) > 4:\n            print_list(words[i:i+3])\n            break\n    \n    # Printing the last 3 words\n    print_list(words[-3:])",
    "from collections import defaultdict\n\nwords = [\n    \"the\", \"and\", \"of\", \"is\", \"it\", \"in\", \"to\", \"a\", \"an\", \"at\",\n    \"be\", \"but\", \"by\", \"for\", \"from\", \"is\", \"into\", \"of\", \"on\", \"or\",\n    \"such\", \"that\", \"the\", \"to\", \"was\", \"will\", \"with\", \"yet\", \"you\",\n    \"your\", \"as\", \"at\", \"be\", \"do\", \"have\", \"he\", \"if\", \"me\", \"my\",\n    \"no\", \"not\", \"so\", \"was\", \"when\", \"will\"\n]\n\ndef shortlist(words, n):\n    d = defaultdict(list)\n    for w in words:\n        d[len(w)].append(w)\n    return [w for w in d[n] if w not in d[n + 1]]\n\nif __name__ == \"__main__\":\n    print(shortlist(words, 1))\n    print(shortlist(words, 2))\n    print(shortlist(words, 3))\n    print(shortlist(words, 4))\n    print(shortlist(words, 5))\n    print(shortlist(words, 6))",
    "# https://leetcode.com/problems/shortest-word-distance-from-each-other/discuss/93780/Python-solution-in-1-minute\n\nclass Solution(object):\n    def shortestDistance(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        from collections import defaultdict\n        d = defaultdict(lambda: float('inf'))\n        for word in words:\n            for i in range(len(word)):\n                d[word[:i] + word[i+1:]] = min(d[word[:i] + word[i+1:]], d[word[:i]] + 1)\n        return sum([d[word] for word in words])\n\n\nif __name__ == '__main__':\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 2) == 1\n    assert Solution().shortestDistance([\"cat\", \"bat\", \"cat\"], 2) == 2\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 3) == 3\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 4) == 3\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 5) == 3\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 6) == 3\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 7) == 3\n    assert Solution().shortestDistance([\"cat\", \"bat\"], 8) == 3",
    "# Definition for a word list.\nclass WordList:\n    def __init__(self, words):\n        \"\"\"\n        Initialize your data structure here.\n        :type words: List[str]\n        \"\"\"\n        self.words = words\n        self.dict = {}\n        for word in words:\n            if word not in self.dict:\n                self.dict[word] = 1\n            else:\n                self.dict[word] += 1\n    def addWord(self, word):\n        \"\"\"\n        Adds a word.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        if word not in self.dict:\n            self.dict[word] = 1\n        else:\n            self.dict[word] += 1\n    def removeWord(self, word):\n        \"\"\"\n        Removes a word.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        if word in self.dict:\n            del self.dict[word]\n    def getShortList(self, n):\n        \"\"\"\n        Returns a list of n words.\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for word in self.dict.keys():\n            if len(word) > n:\n                res.append(word)\n        return res\n\n# Your WordList object will be instantiated and called as such:\n# obj = WordList(words)\n# obj.addWord(word)\n# param_2 = obj.removeWord(word)\n# param_3 = obj.getShortList(n)",
    "from collections import Counter\n\n# Note: The Solution object is instantiated before the call to run the task.\n\nclass Solution(object):\n    def shortlistWords(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        words = sorted(words)\n        return [words[i] for i in range(len(words)) if len(words[i]) > n]\n\n\nif __name__ == \"__main__\":\n    assert Solution().shortlistWords([\"abcd\", \"e\", \"abcde\", \"c\"], 2) == [\"e\"]\n    assert Solution().shortlistWords([\"abcd\", \"e\", \"abcde\", \"c\"], 3) == [\"c\", \"e\", \"abcde\"]\n    assert Solution().shortlistWords([\"abcd\", \"e\", \"abcde\", \"c\"], 4) == []\n    assert Solution().shortlistWords([\"abcd\", \"e\", \"abcde\", \"c\"], 1) == [\"abcd\", \"e\", \"abcde\", \"c\"]\n    assert Solution().shortlistWords([\"abcd\", \"e\", \"abcde\", \"c\"], 0) == [\"abcd\", \"e\", \"abcde\", \"c\"]",
    "def shortlist_words(words, n):\n    # +++your code here+++\n    # Write tests for your solution here\n\n    def word_len(word):\n        return len(word)\n\n    def word_cmp(word1, word2):\n        return cmp(word_len(word1), word_len(word2))\n\n    if not words:\n        return []\n\n    shortlist = []\n    for word in words:\n        if word_len(word) < n:\n            shortlist.append(word)\n\n    shortlist.sort(cmp=word_cmp)\n    return shortlist\n\nif __name__ == \"__main__\":\n    words = [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"]\n    n = 3\n    print(shortlist_words(words, n))",
    "import os\nimport sys\nimport time\nimport random\nimport collections\n\n# Complete the shortlist function below.\ndef shortlist(words, n):\n    if not words:\n        return []\n    # words = sorted(words)\n    words = list(words)\n    words.sort()\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    test_cases = int(sys.stdin.readline())\n\n    for t in range(test_cases):\n        n = int(sys.stdin.readline())\n        words = sys.stdin.readline().split(' ')\n        print('Case #{}: {}'.format(t + 1, shortlist(words, n)))\n    elapsed = time.time() - start_time\n    print('Time elapsed: {}'.format(elapsed))",
    "import re\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for word in words:\n        if len(word) <= n:\n            res.append(word)\n        else:\n            res += shortlist(words, n)\n    return res\n\n\ndef main():\n    words = [\"a\", \"bbb\", \"ccc\", \"dddd\", \"eeee\"]\n    res = shortlist(words, 3)\n    print(res)\n    assert res == [\"bbb\", \"dddd\"]\n\nif __name__ == '__main__':\n    main()",
    "import re\n\nwords = [\n    'apple',\n    'applet',\n    'apples',\n    'bear',\n    'bearst',\n    'bearstn',\n    'bearstns',\n    'bearstnsn',\n    'bearstnst',\n    'bearstnstn',\n    'bearstnstns',\n    'bearstnstnsn',\n    'bearstnstnsnst',\n    'bearstnstnsnstns',\n    'bearstnstnsnstnsnst',\n    'bearstnstnsnstnsnstns',\n    'bearstnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnsnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnsnstnst',\n    'bearstnstnsnstnsnstnsnstnsnstnsnstns",
    "def shortlist(words, n):\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n\ndef main():\n    words = ['abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra']\n    print(shortlist(words, 5))\n    words = ['abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracadabra', 'abracad",
    "# Definition for a word list.\nclass WordList:\n    def __init__(self, words: List[str]):\n        self.words = words\n        self.dic = {w: i for i, w in enumerate(words)}\n\n    def shortlist(self, n: int) -> List[str]:\n        res = []\n        for w in self.words:\n            if len(w) > n:\n                res.append(w)\n        return res\n\n\n# Your WordList object will be instantiated and called as such:\n# obj = WordList(words)\n# param_1 = obj.shortlist(n)",
    "def shortlist(wordlist, n):\n    # write your code here\n    # return the list of the first n words\n    if len(wordlist) > n:\n        return wordlist[:n]\n    else:\n        return []\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 3) == ['a', 'bcd', 'cd'], \"A\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 4) == ['a', 'abcd', 'bcd'], \"B\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 5) == ['a', 'abcd', 'bcd', 'cd'], \"C\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 6) == ['a', 'abcd', 'bcd', 'cd'], \"D\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 7) == ['a', 'abcd', 'bcd', 'cd'], \"E\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 8) == ['a', 'abcd', 'bcd', 'cd'], \"F\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 9) == ['a', 'abcd', 'bcd', 'cd'], \"G\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 10) == ['a', 'abcd', 'bcd', 'cd'], \"H\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 11) == ['a', 'abcd', 'bcd', 'cd'], \"I\"\n    assert shortlist(['a', 'abcd', 'bcd', 'cd'], 12) == ['a', 'abcd', 'bcd', 'cd'], \"J\"\n    assert shortlist(['a', '",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for word in words:\n        if len(word) <= n:\n            res.append(word)\n        else:\n            res = res + shortlist(words, n)\n    return res",
    "def shortlist(words, n):\n    words = [word.lower() for word in words]\n    words = [word for word in words if len(word) >= n]\n    return words",
    "def shorten_list(words, n):\n    return [word for word in words if len(word) > n]\n\nif __name__ == '__main__':\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print shorten_list(words, 3)",
    "import sys\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for w in words:\n        if len(w) <= n:\n            res.append(w)\n    return res\n\nif __name__ == '__main__':\n    words = sys.argv[1]\n    n = int(sys.argv[2])\n    print(shortlist(words, n))",
    "import collections\nimport itertools\n\ndef shortlist(words, n):\n    # Write your code here\n    word_dict = collections.defaultdict(list)\n    for word in words:\n        word_dict[len(word)].append(word)\n\n    short_list = []\n    for i in range(n):\n        short_list.append(word_dict[i][0])\n        del word_dict[i][0]\n\n    return short_list\n\n\nif __name__ == \"__main__\":\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    short_list = shortlist(words, 3)\n    print short_list\n    print len(short_list)",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    result = []\n    for w in words:\n        if len(w) <= n:\n            result.append(w)\n        else:\n            break\n\n    return result",
    "import string\nimport sys\n\n# @include\ndef shortlist(words, n):\n    # Create a dict that maps a word to its length.\n    d = {w: len(w) for w in words}\n    # A stack to hold the words that are to be removed.\n    stack = []\n    # Pop the stack if the stack is empty.\n    while stack or stack[-1] < n:\n        # Pop the top element from stack if the stack is empty.\n        top = stack.pop() if stack else None\n        # Check if the top element is greater than n.\n        if top is not None and d[top] > n:\n            # If so, remove the top element from the dict and push it onto stack.\n            d.pop(top)\n            stack.append(top)\n    # Return a list of words with the length greater than n.\n    return [w for w in words if d.get(w, 0) > n]\n# @exclude\n\n\ndef main():\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\",\n             \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"rat\", \"",
    "import re\n\n# your code goes here\ndef shortlist(words, n):\n    words = [x for x in words if len(x) < n]\n    return words\n\nif __name__ == \"__main__\":\n    words = [\n        \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \"and\", \"the\", \"quick\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \"and\", \"the\", \"quick\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \"and\", \"the\", \"quick\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"\n    ]\n    print(shortlist(words, 3))",
    "def shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # write your code here\n    res = []\n    for word in words:\n        if len(word) <= n:\n            res.append(word)\n        else:\n            break\n    return res",
    "def shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == '__main__':\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print(\"Before: {}\".format(words))\n    print(\"After:  {}\".format(shortlist_words(words, 4)))",
    "import collections\n\ndef find_shortlist(words, n):\n    # write your code here\n    return collections.defaultdict(list)\n\n\nif __name__ == \"__main__\":\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    n = 3\n    print find_shortlist(words, n)",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) <= n:\n            result.append(word)\n        else:\n            break\n    return result",
    "# TLE\n# for each word, find the longest substring of that word that is within n characters\n# then, remove that substring from the list\n# then, find the next longest substring of that word that is within n characters\n# then, remove that substring from the list\n# keep track of the longest substring that is within n characters\n# then, find the next longest substring of that word that is within n characters\n# then, remove that substring from the list\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return self.shortlist_recursive(words, n)\n\n    def shortlist_recursive(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        if len(words) == 0:\n            return []\n\n        if len(words[0]) <= n:\n            return [words[0]]\n\n        shortlist = []\n        for word in words:\n            if len(word) <= n:\n                continue\n            if len(word) == n + 1:\n                return [word]\n            shortlist = self.shortlist_recursive(words[1:], n)\n            for i in range(len(shortlist)):\n                if word[:n] == shortlist[i][:n]:\n                    shortlist.pop(i)\n                    break\n        return shortlist",
    "class Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for word in words:\n            if len(word) <= n:\n                result.append(word)\n            else:\n                for i in range(len(word)-n+1):\n                    short = word[i:i+n]\n                    if short not in result:\n                        result.append(short)\n        return result",
    "import os\nimport re\n\ndef shortlist_words(wordlist, n):\n    # +++your code here+++\n    # write functions\n    words_list = []\n    for word in wordlist:\n        if len(word) > n:\n            words_list.append(word)\n    return words_list\n\ndef main():\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', '",
    "# https://leetcode.com/problems/shortlist/\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for w in words:\n            if len(w) <= n:\n                res.append(w)\n            else:\n                res.append(w[:n])\n        return res",
    "import collections\n\ndef get_shortlist(words, n):\n    result = collections.defaultdict(list)\n    for word in words:\n        if len(word) <= n:\n            result[word].append(word)\n    return result\n\ndef test():\n    assert get_shortlist(['a', 'b', 'c'], 3) == {'a': ['a', 'b', 'c'], 'c': ['c']}\n    assert get_shortlist(['a', 'b', 'c'], 2) == {'a': ['a', 'b'], 'b': ['b'], 'c': ['c']}\n    assert get_shortlist(['a', 'b', 'c'], 1) == {'a': ['a'], 'b': ['b'], 'c': ['c']}\n    assert get_shortlist(['a', 'b', 'c'], 0) == {'a': ['a', 'b', 'c'], 'b': ['b', 'c'], 'c': ['c']}\n    assert get_shortlist(['a', 'b', 'c', 'd'], 2) == {'a': ['a', 'b'], 'b': ['b', 'c'], 'c': ['c', 'd']}\n    assert get_shortlist(['a', 'b', 'c', 'd'], 1) == {'a': ['a'], 'b': ['b'], 'c': ['c'], 'd': ['d']}\n    assert get_shortlist(['a', 'b', 'c', 'd'], 0) == {'a': ['a', 'b', 'c', 'd'], 'b': ['b', 'c', 'd'], 'c': ['c', 'd'], 'd': ['d']}\n\ntest()",
    "# https://oj.leetcode.com/problems/shortest-word-distance/\n# Given a list of words and a word target, write a function to return the shortest distance between the word target and any one of the words in the list.\n# \n# Note:\n# \n# The word target is a non-empty word consisting of only uppercase and lowercase English letters.\n# \n# The length of word list is [\u22641000].\n# \n# Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.\n# \n# Subscribe to see which companies asked this question.\n\n\nclass Solution(object):\n    def shortestDistance(self, words, target):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        m = {}\n        for i in range(len(target)):\n            m[target[i]] = i\n        for w in words:\n            for i in range(len(w)):\n                j = m[w[i]]\n                if i + 1 < len(w):\n                    if j + 1 < len(target):\n                        if w[i + 1] == target[j + 1]:\n                            j += 1\n                if i - 1 >= 0:\n                    if j + 1 < len(target):\n                        if w[i - 1] == target[j + 1]:\n                            j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j += 1\n                if j + 1 < len(target):\n                    if w[i] == target[j + 1]:\n                        j",
    "def shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n\n# Your WordShortList object will be instantiated and called as such:\n# obj = WordShortList(words)\n# param_1 = obj.shortlist(n)",
    "# https://leetcode.com/problems/shortlist-words/\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        # sort the words in decreasing order\n        words = sorted(words, key=len, reverse=True)\n        \n        # initialize the output list\n        shortlist = []\n        \n        # go through the input words\n        for word in words:\n            # if the current word is longer than n,\n            # add it to the shortlist\n            if len(word) > n:\n                shortlist.append(word)\n        \n        # return the shortlist\n        return shortlist",
    "import collections\nfrom typing import List\n\n\nclass Solution:\n    def shortlistWords(self, words: List[str], n: int) -> List[str]:\n        res = []\n        for word in words:\n            if len(word) < n:\n                res.append(word)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    n = 2\n    print(sol.shortlistWords(words, n))",
    "# https://leetcode.com/problems/shortest-word-with-at-most-k-repeating-characters/\n#\n# Given a string, find the shortest word that contains at most k distinct letters.\n#\n# Example 1:\n# Input:\n# s = \"abcd\", k = 4\n# Output: \"cdab\"\n# Explanation: The shortest word is \"cdab\".\n#\n# Example 2:\n# Input:\n# s = \"abcd\", k = 1\n# Output: \"abcd\"\n# Explanation: The shortest word is \"abcd\".\n#\n# Note:\n# The size of s will be in the range [1, 100].\n# s will contain only lowercase letters, and k is in the range [1, s.length].\n\nclass Solution(object):\n    def shortestWordDistance(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        d = collections.defaultdict(int)\n        for c in s:\n            d[c] += 1\n        shortest = \"\"\n        for c in s:\n            if d[c] < k:\n                shortest += c\n                d[c] = 0\n        return shortest\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.shortestWordDistance(\"abcd\", 4)\n    print s.shortestWordDistance(\"abcd\", 1)",
    "import re\nimport collections\n\n# Complete the function below.\ndef shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    # Complete the'shortlist_words' function below.\n    short_words = []\n\n    for word in words:\n        if len(word) <= n:\n            short_words.append(word)\n\n    return short_words\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert shortlist_words(['a', 'b', 'c', 'd'], 1) == ['c', 'd'], \"1\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 2) == ['b', 'c', 'd'], \"2\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c'], \"3\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 4) == ['a', 'b', 'c', 'd'], \"4\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 5) == ['a', 'b', 'c', 'd'], \"5\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 6) == ['a', 'b', 'c', 'd'], \"6\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 7) == ['a', 'b', 'c', 'd'], \"7\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 8) == ['a', 'b', 'c', 'd'], \"8\"\n    assert shortlist_words(['a', 'b', 'c', 'd'], 9) == ['a', 'b', 'c', 'd'], \"9\"\n    assert shortlist_words(['a', 'b', 'c', 'd",
    "def shortlist(words, n):\n    if len(words) == 0 or n == 0:\n        return []\n\n    result = []\n    for word in words:\n        if len(word) <= n:\n            result.append(word)\n        else:\n            break\n    return result\n\n\nif __name__ == \"__main__\":\n    words = [\"Hello\", \"World\", \"How\", \"are\", \"you\", \"?\"]\n    n = 5\n    result = shortlist(words, n)\n    print result",
    "import unittest\n\n\n# O(n) time. O(n) space.\ndef shortlist(words, n):\n    result = []\n    for word in words:\n        if len(word) < n:\n            result.append(word)\n    return result\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n        self.assertEqual(shortlist(words, 3), [\"fox\", \"jumped\", \"lazy\"])\n        self.assertEqual(shortlist(words, 5), [\"fox\", \"jumped\", \"lazy\", \"the\", \"quick\"])\n        self.assertEqual(shortlist(words, 1), [\"the\"])\n        self.assertEqual(shortlist(words, 0), [])\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "# https://www.hackerrank.com/challenges/shortlist/problem\n\nfrom collections import Counter\n\ndef shortlist(list_of_words, n):\n    \"\"\"\n    :type list_of_words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    shortlist = []\n    for word in list_of_words:\n        if len(word) > n:\n            shortlist.append(word[:n])\n    return shortlist\n\nif __name__ == '__main__':\n    list_of_words = [\n        \"The\",\n        \"quick\",\n        \"brown\",\n        \"fox\",\n        \"jumped\",\n        \"over\",\n        \"the\",\n        \"lazy\",\n        \"dog\"\n    ]\n    n = 3\n    shortlist = shortlist(list_of_words, n)\n    print(shortlist)",
    "def is_shortlist(wordlist, n):\n    \"\"\"\n    :type wordlist: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    shortlist = []\n\n    for word in wordlist:\n        if len(word) <= n:\n            shortlist.append(word)\n        else:\n            break\n\n    return shortlist\n\ndef main():\n    \"\"\"\n    Sample Input\n    a\n    a\n    a\n    aa\n    aa\n    aaa\n    b\n    bb\n    \"\"\"\n\n    wordlist = [\"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\", \"b\", \"bb\"]\n\n    print(\"The shortest list of words is: {}\".format(is_shortlist(wordlist, 3)))\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/shortlist/\n# Definition for a word list.\nclass WordList:\n    def __init__(self, wordlist):\n        self.wordlist = wordlist\n\n    def shortlist(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in self.wordlist if len(word) > n]\n\n# Note:\n# The solution is trivial, since we can just check the length of the word.\n# But the problem is to do it in O(n) time, and O(n) is a worst case.\n# So, the solution is O(n) space.",
    "def find_long_words(words, n):\n    result = []\n    for w in words:\n        if len(w) > n:\n            result.append(w)\n\n    return result\n\nif __name__ == '__main__':\n    words = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"test\", \"for\", \"LongWord\"]\n    n = 4\n    print find_long_words(words, n)",
    "import unittest\n\n# Definition for a word.\nclass Word:\n    def __init__(self, word, rank):\n        self.word = word\n        self.rank = rank\n\nclass Solution:\n    def shortList(self, words, n):\n        \"\"\"\n        :type words: List[Word]\n        :type n: int\n        :rtype: List[Word]\n        \"\"\"\n        def helper(words, n, rank, result):\n            if n == 0:\n                result.append(words[0])\n                return\n            for i in range(len(words)):\n                helper(words[:i] + words[i + 1:], n - 1, rank + 1, result)\n        result = []\n        helper(words, n, 0, result)\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/short-list/solution/\n# 1ms 100%\nclass Solution {\n    public List<Word> shortList(List<Word> words, int n) {\n        List<Word> result = new ArrayList<>();\n        for (Word word : words) {\n            if (word.word.length() > n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public List<Word> shortList(List<Word> words, int n) {\n        List<Word> result = new ArrayList<>();\n        for (Word word : words) {\n            if (word.word.length() > n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n'''",
    "from collections import defaultdict\n\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    word_dict = defaultdict(int)\n    for word in words:\n        word_dict[word] += 1\n\n    shortlist = []\n    for key in word_dict:\n        if word_dict[key] > n:\n            shortlist.append(key)\n\n    return shortlist\n\n\nif __name__ == '__main__':\n    words = ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n    shortlist(words, 3)\n    print(shortlist(words, 3))\n\n    words = ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n    shortlist(words, 5)\n    print(shortlist(words, 5))",
    "# https://oj.leetcode.com/problems/shortest-word-distance-from-words/\n\n# DFS\nclass Solution(object):\n    def shortestDistance(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        word_dict = {}\n        for word in words:\n            word_dict[word] = 1\n        dist = {word: sys.maxsize for word in word_dict}\n        for word in words:\n            for i in range(n):\n                if word_dict.get(word + str(i)) == 1:\n                    dist[word] = min(dist[word], i + 1)\n        return dist['']",
    "def shortlist(words, n):\n    words_sorted = sorted(words)\n    words_length = len(words_sorted)\n    for i in range(words_length):\n        if words_sorted[i] == words_sorted[i+1]:\n            continue\n        if i+n <= words_length:\n            if len(words_sorted[i:i+n]) == n:\n                return words_sorted[i:i+n]\n    return []\n\nif __name__ == '__main__':\n    words = ['a', 'b', 'c', 'd', 'e']\n    print(shortlist(words, 2))",
    "def shortlist_words(words, n):\n    return sorted(words, key=len, reverse=True)[:n]\n\nif __name__ == \"__main__\":\n    words = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\", \"for\", \"shortlist_words\"]\n    print(shortlist_words(words, 2))",
    "from collections import defaultdict\nfrom collections import deque\nimport re\n\ndef shortlist_words(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    shortlist = []\n    for word in words:\n        if len(word) <= n:\n            shortlist.append(word)\n        else:\n            i = 0\n            while i < len(word):\n                if word[i:i + n] in shortlist:\n                    i += n\n                else:\n                    shortlist.append(word[:i])\n                    break\n    return shortlist\n\ndef test():\n    assert shortlist_words([\"apple\", \"banana\", \"orange\"], 1) == [\"apple\"]\n    assert shortlist_words([\"apple\", \"banana\", \"orange\"], 2) == [\"banana\"]\n    assert shortlist_words([\"apple\", \"banana\", \"orange\"], 3) == [\"orange\"]\n    assert shortlist_words([\"apple\", \"banana\", \"orange\"], 4) == []\n    assert shortlist_words([\"apple\", \"banana\", \"orange\"], 5) == []\n\nif __name__ == '__main__':\n    test()",
    "#!/usr/bin/env python\n\nimport sys\n\ndef shortlist(words, n):\n    if n > 0:\n        result = []\n        for word in words:\n            if len(word) > n:\n                result.append(word)\n        return result\n    else:\n        return words\n\nif __name__ == \"__main__\":\n    words = sys.argv[1].split(\",\")\n    n = int(sys.argv[2])\n    print shortlist(words, n)",
    "def shortlist(words, n):\n    # write your code here\n    if n == 0:\n        return []\n    \n    # if the length of the list is less than n, return the list\n    if len(words) < n:\n        return words\n    \n    # store the words that are longer than n in a list\n    result = []\n    for word in words:\n        if len(word) >= n:\n            result.append(word)\n    \n    # return the list of words that are longer than n\n    return result",
    "def shortlist_words(words, n):\n    # write your code here\n    return None\n\n\nif __name__ == '__main__':\n    words = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n',\n        'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    ]\n    print(shortlist_words(words, 2))",
    "import string\n\n\ndef shorten(wordlist, n):\n    words = []\n    for word in wordlist:\n        if len(word) <= n:\n            words.append(word)\n        else:\n            for i in range(len(word)-n+1):\n                subword = word[i:i+n]\n                if subword in words:\n                    continue\n                else:\n                    words.append(subword)\n    return words\n\n\nif __name__ == \"__main__\":\n    wordlist = [\"this\", \"is\", \"a\", \"test\", \"list\", \"of\", \"words\", \"to\", \"shortlist\"]\n    print(shorten(wordlist, 4))\n    print(shorten(wordlist, 3))\n    print(shorten(wordlist, 2))\n    print(shorten(wordlist, 1))\n    print(shorten(wordlist, 0))",
    "def shortlist(words, n):\n    for i in range(len(words)):\n        if len(words[i]) > n:\n            words[i] = words[i][:n]\n    return words\n\nif __name__ == '__main__':\n    words = ['apple', 'apples', 'bat', 'cat', 'catfish', 'catfishs', 'dog']\n    print(shortlist(words, 2))",
    "import os\nfrom collections import defaultdict\n\ndef shortlist_words(words, n):\n    # write your code here\n    s = defaultdict(list)\n    for w in words:\n        s[len(w)].append(w)\n    return [w for w in s[n] if w in words]\n\n\nif __name__ == '__main__':\n    with open(os.path.join(os.path.dirname(__file__), 'input.txt')) as f:\n        words = [word.strip() for word in f.readlines()]\n    print(shortlist_words(words, 4))",
    "def shortlist(wordlist, n):\n    words = set(wordlist)\n    shortlist = set()\n\n    for word in words:\n        if len(word) <= n:\n            shortlist.add(word)\n        else:\n            break\n\n    return shortlist\n\nif __name__ == \"__main__\":\n    wordlist = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    n = 4\n    print(shortlist(wordlist, n))",
    "from collections import deque\n\n\nclass Solution(object):\n    def shortlist(self, words, n):\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        d = deque(words)\n        ans = []\n        while d:\n            word = d.popleft()\n            if len(word) > n:\n                ans.append(word)\n            else:\n                while d and len(d[0]) > n:\n                    d.popleft()\n                if d:\n                    d.appendleft(word)\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print s.shortlist(words, 3)",
    "# I/O\nwords = [line.rstrip().split(\" \") for line in open(\"words.txt\")]\nwords = [w for w in words if len(w) > 2]\nn = int(input(\"Enter the length of the shortlist: \"))\n\n# Write your code here\ndef shortlist(words, n):\n    return [word for word in words if len(word) >= n]\n\nprint(shortlist(words, n))",
    "import sys\n\n\nclass Solution:\n\n    def shortlist(self, words: 'List[str]', n: 'int') -> 'List[str]':\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        if n < 1:\n            return []\n        return self.shortlist_with_max_length(words, n)\n\n    def shortlist_with_max_length(self, words: 'List[str]', n: 'int') -> 'List[str]':\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for word in words:\n            if len(word) > n:\n                result.append(word)\n        return result",
    "from collections import defaultdict\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    d = defaultdict(list)\n    for word in words:\n        d[len(word)].append(word)\n    return [w for w in d[n] if w not in words]",
    "from collections import Counter\nfrom typing import List\n\nclass Solution(object):\n    def shortlistWords(self, words: List[str], n: int) -> List[str]:\n        \"\"\"\n        :type words: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        if not words or n <= 0:\n            return []\n\n        # build dictionary\n        d = Counter(words)\n        shortlist = []\n        for key, count in d.items():\n            if count < n:\n                shortlist.append(key)\n        return shortlist",
    "import collections\n\ndef shortlist_words(words, n):\n    word_list = collections.defaultdict(set)\n    for word in words:\n        word_list[len(word)].add(word)\n\n    return [word for word, count in word_list.items() if len(word) <= n]\n\nif __name__ == '__main__':\n    words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print(shortlist_words(words, 2))",
    "def is_word_long(word, wordlist):\n    \"\"\"\n    :type word: str\n    :type wordlist: List[str]\n    :rtype: bool\n    \"\"\"\n    if len(word) < len(wordlist):\n        return False\n    if len(word) == len(wordlist):\n        return word in wordlist\n    return False\n\ndef shortlist_words(wordlist, n):\n    \"\"\"\n    :type wordlist: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in wordlist:\n        if len(word) <= n:\n            result.append(word)\n    return result\n\nif __name__ == '__main__':\n    assert is_word_long('a', ['a', 'b', 'c', 'd', 'e'])\n    assert not is_word_long('a', ['a', 'b', 'c', 'd', 'e'])\n    assert is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n    assert not is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n    assert not is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    assert is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n    assert is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n    assert is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n    assert not is_word_long('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n    assert not is_word_long('a', ['a', 'b', 'c', 'd",
    "from collections import defaultdict\nfrom itertools import chain\nimport string\n\ndef shortlist(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) <= n:\n            shortlist.append(word)\n        else:\n            shortlist.extend(shortlist_words(word, n))\n    return shortlist\n\ndef shortlist_words(word, n):\n    return [word[i:i+n] for i in range(0, len(word), n)]\n\ndef main():\n    words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"fish\", \"horse\", \"pig\", \"sheep\", \"snake\"]\n    shortlist(words, 3)\n\nif __name__ == '__main__':\n    main()",
    "import os\nimport re\nimport time\n\nstart_time = time.time()\n\n# Complete the function below.\ndef shortlist_words(words, n):\n    # Write your code here.\n    words = sorted(words)\n    if len(words) < 2:\n        return words\n    words_shortlist = []\n    for i in range(len(words)):\n        if i < len(words) - 1 and len(words[i]) > n:\n            words_shortlist.append(words[i])\n    return words_shortlist\n\nif __name__ == '__main__':\n    start_time = time.time()\n    n = int(input())\n    print(shortlist_words(input().split(), n))\n    print(\"Total run time: {}\".format(time.time() - start_time))",
    "import collections\n\ndef shorten_list(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    word_dict = collections.Counter(words)\n    short_list = []\n    for word, cnt in word_dict.items():\n        if cnt < n:\n            continue\n        short_list.append(word)\n\n    return short_list\n\n\n# Your ShortlistWords solution here.",
    "from collections import Counter\n\ndef shortlist(words, n):\n    \"\"\"\n    :type words: List[str]\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in words if len(word) <= n]\n\ndef main():\n    words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print shortlist(words, 3)\n    print shortlist(words, 2)\n    print shortlist(words, 1)\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}