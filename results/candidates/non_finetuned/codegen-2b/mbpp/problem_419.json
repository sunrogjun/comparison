{
  "problem": {
    "task_id": "MBPP/430",
    "prompt": "Write a function to find the directrix of a parabola.",
    "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
    "test_list": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ],
    "challenge_test_list": [],
    "problem_id": 419
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef parabola_directrix(a, b):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :rtype: float\n    \"\"\"\n    return b**2 / (4*a)\n\n\nif __name__ == \"__main__\":\n    print(parabola_directrix(1, 2))",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Args:\n        a: the x-coordinate of the bottom left corner.\n        b: the x-coordinate of the bottom right corner.\n        c: the y-coordinate of the bottom left corner.\n\n    Returns:\n        The directrix of the parabola as an (x, y) tuple.\n    \"\"\"\n    x = 0\n    y = 0\n    while abs(b - a) > 1e-6:\n        x = (a + b) / 2\n        y = (a * x + c) / (x - a)\n        if y > a and y < b:\n            return x, y\n        elif y > b:\n            a = x\n        else:\n            b = x\n    return x, y\n\n\ndef main():\n    \"\"\"\n    Test function.\n    \"\"\"\n    assert directrix(1, 3, 3) == (1, 1.0)\n    assert directrix(1, 3, 2.5) == (1, 1.5)\n    assert directrix(1, 3, 0) == (1, 1.0)\n    assert directrix(1, 3, -2) == (1, 0.0)\n\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef parabola_directrix(height, x, y):\n    \"\"\"\n    :param height: Height of the parabola\n    :param x: x-coordinate of the apex\n    :param y: y-coordinate of the apex\n    :return: Directrix of the parabola\n    \"\"\"\n    r = sqrt((x - x) ** 2 + (y - y) ** 2)\n    a = (height - r) / 2\n    b = (height + r) / 2\n    return a, b",
    "#!/usr/bin/python\n\nimport math\n\ndef parabola_directrix(a, b, c, x1, x2):\n    \"\"\"\n    a = x^2\n    b = x\n    c = 1\n    \"\"\"\n    return (x2 - x1) / (2 * math.sqrt(b)) - a / b\n\ndef directrix(x1, x2, y1, y2, a, b, c):\n    \"\"\"\n    x1 = x(y1)\n    x2 = x(y2)\n    y1 = y(x1)\n    y2 = y(x2)\n    a = x^2\n    b = x\n    c = 1\n    \"\"\"\n    return parabola_directrix(a, b, c, x1, x2) - y1 + y2\n\nprint directrix(0.5, 1.5, -0.5, 1.5, 0.5, 0.5, 1)",
    "def directrix(a, b, c):\n    \"\"\"\n    a, b, c are the three coefficients of a parabola.\n    return the directrix of the parabola.\n    \"\"\"\n    return a / 2 - b / 2\n\ndef main():\n    \"\"\"\n    main function.\n    \"\"\"\n    print(directrix(1, 2, 3))\n    print(directrix(1, 2, -3))\n    print(directrix(-1, 2, 3))\n    print(directrix(-1, 2, -3))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n\nclass Solution:\n    def isParabola(self, p0, p1, p2):\n        \"\"\"\n        :type p0: Point\n        :type p1: Point\n        :type p2: Point\n        :rtype: bool\n        \"\"\"\n        return p0.x == p1.x and p0.y == p2.y and p1.x == p2.x",
    "def directrix(x1, x2, a, b):\n    \"\"\"\n    Returns the x-coordinate of the point where the parabola goes through the\n    intersection of the directrix and the line joining the two points.\n    \"\"\"\n    return (b * x1 + a * x2) / (a - b)\n\nif __name__ == \"__main__\":\n    x1 = float(input())\n    x2 = float(input())\n    a = float(input())\n    b = float(input())\n    print(directrix(x1, x2, a, b))",
    "import math\n\n\ndef directrix(x0, y0, x1, y1, x):\n    \"\"\"\n    Returns the directrix of the parabola y = mx^2 + b\n    \"\"\"\n    m = (y1 - y0) / (x1 - x0)\n    b = y0 - m * x0\n    return x - ((y - b) / m) ** 2\n\n\ndef directrix_line(x0, y0, x1, y1, x):\n    \"\"\"\n    Returns the directrix of a line y = mx + b\n    \"\"\"\n    m = (y1 - y0) / (x1 - x0)\n    b = y0 - m * x0\n    return x - ((y - b) / m) ** 2\n\n\ndef main():\n    x0 = 0\n    y0 = 0\n    x1 = 0\n    y1 = 0\n    x = 0\n    y = 0\n\n    x0 = input(\"Enter X0: \")\n    y0 = input(\"Enter Y0: \")\n    x1 = input(\"Enter X1: \")\n    y1 = input(\"Enter Y1: \")\n\n    x = input(\"Enter x: \")\n    y = input(\"Enter y: \")\n\n    print(\"Directrix of a parabola\")\n    print(directrix(x0, y0, x1, y1, x))\n\n    print(\"Directrix of a line\")\n    print(directrix_line(x0, y0, x1, y1, x))\n\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'Libao Jin'\n__date__ = 'July 24, 2015'\n\nclass Solution(object):\n    def parabola(self, x, y):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :rtype: float\n        \"\"\"\n        return (x ** 2 - y ** 2) / (2 * x)\n\ndef main():\n    solution = Solution()\n    print solution.parabola(1, 2)\n    print solution.parabola(2, 1)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef directrix(A, B, C, D):\n    \"\"\"\n    For a parabola with the given parameters,\n    find the directrix.\n\n    Input:\n        A: The x-coordinate of the point (A, C)\n        B: The y-coordinate of the point (A, C)\n        C: The x-coordinate of the point (B, D)\n        D: The y-coordinate of the point (B, D)\n\n    Return:\n        The directrix of the parabola.\n    \"\"\"\n\n    x1 = A - C\n    y1 = B - D\n\n    x2 = B - A\n    y2 = D - C\n\n    # The slope of the parabola\n    m = (y2 - y1) / (x2 - x1)\n\n    # The y-coordinate of the point where the slope\n    # is equal to zero.\n    x_zero = (m * x1 - y1) / m\n\n    # The x-coordinate of the point where the slope\n    # is equal to zero.\n    y_zero = (m * x2 - y2) / m\n\n    # The directrix is the point (x_zero, y_zero)\n    return x_zero, y_zero\n\ndef test():\n    \"\"\"\n    Test the directrix function.\n    \"\"\"\n\n    assert directrix(1, 2, 3, 4) == (3.0, 4.0)\n    assert directrix(3, 1, 4, 1) == (3.0, 4.0)\n    assert directrix(1, 2, 2, 1) == (2.0, 1.0)\n    assert directrix(1, 2, 1, 1) == (1.0, 1.0)\n\nif __name__ == \"__main__\":\n    test()",
    "def parabola_directrix(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c - parameters of the parabola\n    Output:\n        directrix - directrix of the parabola\n    \"\"\"\n    if a**2 >= b**2:\n        return a*c\n    else:\n        return b*c\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    a, b, c = map(float, input().split())\n    print(parabola_directrix(a, b, c))\n\nif __name__ == \"__main__\":\n    main()",
    "from __future__ import print_function\nimport numpy as np\n\ndef directrix(x0, x1, x2, x3):\n    \"\"\"\n    Compute the directrix of a parabola.\n\n    Input:\n    x0, x1, x2, x3 - the three coordinates of the three points of the parabola.\n\n    Output:\n    a - the coordinate of the intersection of the directrix with the parabola.\n    b - the coordinate of the intersection of the directrix with the parabola.\n\n    Examples:\n    >>> directrix(1, 2, 3, 4)\n    (1.0, 1.5)\n    >>> directrix(3, 2, 1, 4)\n    (3.0, 2.0)\n    >>> directrix(5, 2, 2, 5)\n    (4.5, 2.5)\n    \"\"\"\n    a = (x0 - x1) / (x2 - x1)\n    b = (x0 - x2) / (x3 - x2)\n    return a, b\n\ndef main():\n    \"\"\"\n    Unit tests for directrix().\n    \"\"\"\n    assert directrix(1, 2, 3, 4) == (1.0, 1.5)\n    assert directrix(3, 2, 1, 4) == (3.0, 2.0)\n    assert directrix(5, 2, 2, 5) == (4.5, 2.5)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Given the parameters of the parabola, find the directrix.\n\n    :param a: The x-coordinate of the apex of the parabola\n    :param b: The y-coordinate of the apex of the parabola\n    :param c: The z-coordinate of the apex of the parabola\n    :return: The directrix of the parabola\n    \"\"\"\n    if a == 0:\n        return (a, b, c)\n    elif a < 0:\n        return (0, -1 / (2 * a), -1 / (2 * a) - 1 / c)\n    elif a > 0:\n        return (0, 1 / (2 * a), -1 / (2 * a) - 1 / c)\n    elif b < 0:\n        return (-1 / (2 * b), 0, -1 / (2 * b) - 1 / c)\n    elif b > 0:\n        return (1 / (2 * b), 0, -1 / (2 * b) - 1 / c)\n    elif c < 0:\n        return (-1 / (2 * c), -1 / (2 * c), 0)\n    elif c > 0:\n        return (1 / (2 * c), -1 / (2 * c), 0)\n    else:\n        return (0, 0, 0)\n\n\ndef directrix_from_z(z):\n    \"\"\"\n    Given the z-coordinate of the parabola, find the directrix.\n\n    :param z: The z-coordinate of the parabola\n    :return: The directrix of the parabola\n    \"\"\"\n    if z < 0:\n        return (0, -1 / (2 * z), -1 / (2 * z) - 1 / z)\n    elif z > 0:\n        return (0, 1 / (2 * z), -1 / (2 * z) - 1 / z)\n    else:\n        return (0, 0, 0)\n\n\ndef directrix_from_parameters(a, b, c):\n    \"\"\"\n    Given the parameters of the parabola,",
    "import math\n\ndef directrix(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola with equation ax^2 + bx + c = 0.\n    a, b, c are real numbers, x is real.\n    \"\"\"\n    # To solve a parabola, we solve a quadratic equation.\n    # The quadratic equation is defined as follows:\n    #   ax^2 + bx + c = 0\n    # which has the form of:\n    #   (ax^2 + bx + c)^2 + 4ac = 0\n    # After solving the quadratic equation, we find that\n    #   ax^2 + bx + c = 0\n    # and the solution is a = -b/2a, b = c/2a\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    a = -b/a\n    b = c/a\n    x = (a*x*x + b*x + c)/(a*a + b*b)\n    return x\n\ndef main():\n    \"\"\"\n    Test function.\n    \"\"\"\n    # Test 1: a = 1, b = 1, c = 1\n    a = 1\n    b = 1\n    c = 1\n    x = directrix(a, b, c, 0)\n    assert x == 0\n\n    # Test 2: a = 1, b = 2, c = 1\n    a = 1\n    b = 2\n    c = 1\n    x = directrix(a, b, c, 0)\n    assert x == -1\n\n    # Test 3: a = 1, b = 2, c = 3\n    a = 1\n    b = 2\n    c = 3\n    x = directrix(a, b, c, 0)\n    assert x == -3\n\n    # Test 4: a = 1, b = 3, c = 4\n    a = 1\n    b = 3\n    c = 4\n    x = directrix(a, b, c, 0)\n    assert x == -7\n\n    # Test 5: a = 1, b = 2, c = -3\n    a = 1\n    b",
    "import numpy as np\n\ndef find_directrix(x0, y0, x1, y1):\n    \"\"\"\n    Directrix of the parabola is the point that is the closest to the\n    x-axis.\n    \"\"\"\n    # calculate the distance between the point and the line\n    dx = np.array([x0 - x1, y0 - y1])\n    dy = np.array([-1 * x0 + x1, -1 * y0 + y1])\n    # find the point that is the closest to the x-axis\n    # calculate the distance from the x-axis\n    # find the closest point on the line\n    directrix = np.array([np.array([dx, dy]).dot(np.array([0, 1]))])\n    # return the point\n    return directrix\n\ndef test_directrix():\n    \"\"\"\n    Test the function using a simple parabola\n    \"\"\"\n    # define the points\n    x0 = 0.0\n    y0 = 0.0\n    x1 = 10.0\n    y1 = 10.0\n    # define the parabola\n    parabola = np.array([x0, y0, x1, y1])\n    # calculate the directrix\n    directrix = find_directrix(x0, y0, x1, y1)\n    # print the directrix\n    print(\"Directrix is:\")\n    print(directrix)\n    # return\n    return\n\nif __name__ == '__main__':\n    test_directrix()",
    "def directrix(a, b, c):\n    \"\"\"\n    Inputs:\n        a, b, c are the parameters of the parabola\n    Returns:\n        the directrix of the parabola\n    \"\"\"\n    x = (a**2 - b**2) / (4*c**2)\n    return x",
    "import math\n\ndef directrix(a, b, c):\n    \"\"\"\n    Directrix of a parabola.\n    \"\"\"\n    return (a * b - math.sqrt(math.pow(b, 2) - 4 * a * c)) / (2 * a)\n\nif __name__ == \"__main__\":\n    a, b, c = float(input(\"Enter a, b, and c: \")), float(input(\"Enter a, b, and c: \")), float(input(\"Enter a, b, and c: \"))\n    print(directrix(a, b, c))",
    "# https://www.hackerrank.com/challenges/parabola/problem\n\nimport math\n\n\ndef parabola(x):\n    if x < 0:\n        return -1\n    return 2 * x ** 2 + 1\n\n\ndef directrix(x):\n    return parabola(x) - x ** 2\n\n\ndef main():\n    N = int(input())\n    for _ in range(N):\n        x = float(input())\n        print(directrix(x))\n\n\nif __name__ == '__main__':\n    main()",
    "def directrix(a, b, c):\n    \"\"\"\n    Directrix of a parabola.\n    \"\"\"\n    d = (b ** 2 - 4 * a * c)\n    if d == 0:\n        return -1\n    elif d > 0:\n        return 1\n    else:\n        return 0\n\ndef main():\n    a = float(input('Enter first coefficient: '))\n    b = float(input('Enter second coefficient: '))\n    c = float(input('Enter third coefficient: '))\n    print('Directrix is {0}'.format(directrix(a, b, c)))\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt, pi\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n    \"\"\"\n    return (a * b - c ** 2) / (2 * b)\n\n\ndef find_directrix(x_a, x_b, x_c):\n    \"\"\"\n    Find the directrix of a parabola using the Newton-Raphson method.\n    \"\"\"\n    a = x_a ** 2 - x_b ** 2\n    b = 2 * x_a * x_b\n    c = x_b ** 2 - x_c ** 2\n    for i in range(50):\n        a_old = a\n        b_old = b\n        c_old = c\n        a = a_old - b / c\n        b = 2 * a * x_a + b_old * x_b\n        c = b_old * b - c_old * x_c\n        if abs(a - a_old) < 1e-8:\n            return directrix(a, b, c)\n    return None\n\n\ndef test_directrix():\n    assert abs(find_directrix(1, 2, 3) - pi / 4) < 1e-8\n    assert abs(find_directrix(2, 1, 3) - pi / 4) < 1e-8\n    assert abs(find_directrix(3, 1, 2) - pi / 4) < 1e-8\n    assert abs(find_directrix(3, 2, 1) - pi / 4) < 1e-8\n    assert abs(find_directrix(4, 3, 2) - pi / 4) < 1e-8\n    assert abs(find_directrix(2, 4, 3) - pi / 4) < 1e-8\n    assert abs(find_directrix(3, 4, 2) - pi / 4) < 1e-8\n    assert abs(find_directrix(4, 3, 4) - pi / 4) < 1e-8\n    assert abs(find_directrix(4, 2, 3) - pi / 4) < 1e-8\n    assert abs(find_directrix(4, 3",
    "import math\nimport sys\n\ndef parabola_directrix(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a: the coefficient of x^2\n    b: the coefficient of x\n    c: the coefficient of 1\n    x: the point to calculate the directrix\n\n    Output:\n    A list of the directrix points\n    \"\"\"\n\n    x_p_1 = x - (a + b + c) / 2\n    x_p_2 = x + (a + b + c) / 2\n\n    if x_p_1 < 0:\n        return []\n\n    if x_p_2 < 0:\n        return []\n\n    return [x_p_1, x_p_2]\n\n\ndef main():\n    \"\"\"\n    Main program\n    \"\"\"\n    if len(sys.argv)!= 4:\n        print('Please input a correct number of arguments')\n        print('Usage: python3 directrix.py a b c')\n        return\n\n    a = float(sys.argv[1])\n    b = float(sys.argv[2])\n    c = float(sys.argv[3])\n\n    print(parabola_directrix(a, b, c, 0))\n    print(parabola_directrix(a, b, c, -1))\n    print(parabola_directrix(a, b, c, 1))\n    print(parabola_directrix(a, b, c, -2))\n    print(parabola_directrix(a, b, c, 2))\n\n\nif __name__ == '__main__':\n    main()",
    "from math import *\n\ndef directrix(a, b, c, d):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Arguments:\n    a, b, c, d -- co-ordinates of the point where the parabola touches the directrix\n    \"\"\"\n    if a**2 + b**2 == c**2 and d**2 == c**2:\n        return (a, b, c)\n    return None\n\ndef main():\n    a, b, c, d = input().split()\n    a, b, c, d = [float(x) for x in a.split()]\n    result = directrix(a, b, c, d)\n    if result:\n        print(\"Directrix: ({}, {}, {})\".format(*result))\n    else:\n        print(\"Directrix not found.\")\n\nif __name__ == \"__main__\":\n    main()",
    "import numpy as np\n\ndef directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    x, y -- list of the x and y coordinates of the parabola\n    \"\"\"\n\n    # Make sure the parabola is not degenerate\n    if (x[0] == x[-1]) or (y[0] == y[-1]):\n        return None\n\n    # Find the intersection of the parabola with the x-axis\n    x_intersect = np.intersect1d(x, np.ones(len(x))*np.inf)\n    if x_intersect[0] == x_intersect[-1]:\n        return None\n\n    # Find the intersection of the parabola with the y-axis\n    y_intersect = np.intersect1d(y, np.ones(len(y))*np.inf)\n    if y_intersect[0] == y_intersect[-1]:\n        return None\n\n    # Find the intersection of the parabola with the x-axis and y-axis\n    x_y_intersect = np.intersect1d(x_intersect, y_intersect)\n    if x_y_intersect[0] == x_y_intersect[-1]:\n        return None\n\n    # Find the intersection of the parabola with the x-axis and y-axis\n    y_x_intersect = np.intersect1d(y_intersect, x_intersect)\n    if y_x_intersect[0] == y_x_intersect[-1]:\n        return None\n\n    # Find the intersection of the parabola with the x-axis and y-axis\n    x_y_x_intersect = np.intersect1d(x_intersect, y_intersect, x_intersect)\n    if x_y_x_intersect[0] == x_y_x_intersect[-1]:\n        return None\n\n    # Find the intersection of the parabola with the y-axis and x-axis\n    y_x_y_intersect = np.intersect1d(y_intersect, x_inter",
    "import math\n\ndef directrix(a, b, c):\n    \"\"\"\n    Returns the directrix of a parabola defined by the parameters a, b, c.\n\n    The directrix is a line segment that is perpendicular to the parabola, and\n    is located at the intersection between the parabola's two lines.\n    \"\"\"\n\n    x = (a * a - b * b) / (2 * a)\n    y = -a * x - b * math.sqrt(a * a - x * x)\n\n    return (x, y)\n\nif __name__ == \"__main__\":\n    a = float(input(\"a: \"))\n    b = float(input(\"b: \"))\n    c = float(input(\"c: \"))\n\n    print(directrix(a, b, c))",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Finds the directrix of a parabola.\n\n    :param a: The a-coefficient of the parabola.\n    :param b: The b-coefficient of the parabola.\n    :param c: The c-coefficient of the parabola.\n    :return: The directrix of the parabola.\n    \"\"\"\n    return ((-b + math.sqrt(math.pow(b, 2) - 4 * a * c)) / (2 * a))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(directrix(1, 2, 3))\n    print(directrix(2, 3, 4))\n    print(directrix(3, 4, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def directrix(a, b, c, x):\n    return (b*x + a) / (2*c)\n\ndef parabola(a, b, c, x):\n    return a*x**2 + b*x + c\n\ndef directrix_parabola(a, b, c, x):\n    return directrix(a, b, c, x) - parabola(a, b, c, x)\n\ndef test_directrix():\n    assert directrix(3, 4, 5, 1) == 2\n\ndef test_parabola():\n    assert parabola(3, 4, 5, 1) == 9\n\ndef test_directrix_parabola():\n    assert directrix_parabola(3, 4, 5, 1) == 5\n\nif __name__ == '__main__':\n    test_directrix()\n    test_parabola()\n    test_directrix_parabola()",
    "import numpy as np\nfrom numpy import pi\n\ndef parabola_directrix(x0, y0, x1, y1):\n    \"\"\"\n    x0, y0: starting point\n    x1, y1: ending point\n    Returns:\n    directrix: vector with the x and y coordinates of the directrix\n    \"\"\"\n\n    # Calculate the angle between the x axis and the line\n    # through the point (x0, y0) and (x1, y1)\n    theta = np.arctan2((y1 - y0), (x1 - x0))\n\n    # Calculate the angle between the x axis and the line\n    # through the point (x0, y0) and (x1, y1)\n    phi = np.arctan2(np.sqrt(y1**2 - y0**2), x1 - x0)\n\n    # Calculate the x and y coordinates of the directrix\n    directrix = np.array([\n        x0 + (x1 - x0) * np.cos(theta) * np.sin(phi),\n        y0 + (x1 - x0) * np.sin(theta) * np.sin(phi),\n        x1 + (x1 - x0) * np.cos(theta) * np.sin(phi),\n        y1 + (x1 - x0) * np.sin(theta) * np.sin(phi),\n        x1 + (x1 - x0) * np.cos(theta) * np.cos(phi),\n        y1 + (x1 - x0) * np.sin(theta) * np.cos(phi)\n    ])\n\n    return directrix\n\n\nif __name__ == \"__main__\":\n    x0 = np.array([1, 1])\n    y0 = np.array([0, 0])\n    x1 = np.array([2, 2])\n    y1 = np.array([1, 1])\n    directrix = parabola_directrix(x0, y0, x1, y1)\n    print(directrix)",
    "import math\n\ndef directrix(x0, y0, x1, y1):\n    \"\"\"\n    Returns the x-coordinate of the directrix of a parabola.\n\n    >>> directrix(1, 2, 4, 3)\n    2\n    >>> directrix(2, 1, 4, 3)\n    2\n    >>> directrix(3, 1, 4, 3)\n    3\n    >>> directrix(4, 1, 4, 3)\n    4\n    >>> directrix(5, 1, 4, 3)\n    5\n    >>> directrix(6, 1, 4, 3)\n    6\n    >>> directrix(7, 1, 4, 3)\n    7\n    >>> directrix(8, 1, 4, 3)\n    8\n    >>> directrix(9, 1, 4, 3)\n    9\n    >>> directrix(10, 1, 4, 3)\n    10\n    >>> directrix(11, 1, 4, 3)\n    11\n    \"\"\"\n    # Calculate the coefficients of the parabola\n    a = (y1 - y0) / (x1 - x0)\n    b = y0 - a * x0\n    c = 1 / a\n    # Calculate the directrix\n    return (x0 + c * (x1 - x0)) / (1 + 2 * c)\n\ndef main():\n    print(\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\")\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\ndef parabola_directrix(parabola):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parabola is defined as:\n    parabola = (1 - t) * (1 + t)\n\n    Arguments:\n    parabola -- a 2-D array, with shape (n, 2)\n    \"\"\"\n    # Calculate the t-values of the parabola\n    t = parabola[:, 0]\n    # Calculate the directrix\n    directrix = np.sqrt(1 - t**2)\n\n    return directrix\n\n\n# Test function\ndef test():\n    parabola = np.array([[0.5, 0.5], [0.5, 0.5]])\n    print parabola_directrix(parabola)\n\nif __name__ == \"__main__\":\n    test()",
    "def parabola_directrix(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return None\n\n    if a < c:\n        return a * b / c\n\n    return b * c / a\n\n\ndef test_parabola_directrix():\n    assert parabola_directrix(1, 2, 3) == 2\n    assert parabola_directrix(1, 2, -3) == -2\n    assert parabola_directrix(1, -2, 3) == -2\n    assert parabola_directrix(1, -2, -3) == 2\n\n\nif __name__ == '__main__':\n    test_parabola_directrix()",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: coefficients of the equation of a parabola\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    x = 0\n    while abs(a*x**2 + b*x + c) > 0.0001:\n        x += 0.1\n    return x\n\n\ndef directrix2(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: coefficients of the equation of a parabola\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    x = 0\n    while abs(a*x**2 + b*x + c) > 0.0001:\n        x += 0.1\n        if abs(a*x**2 + b*x + c) > 0.0001:\n            x -= 0.1\n    return x\n\n\ndef directrix3(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: coefficients of the equation of a parabola\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    x = 0\n    while abs(a*x**2 + b*x + c) > 0.0001:\n        x += 0.1\n        if abs(a*x**2 + b*x + c) > 0.0001:\n            x -= 0.1\n            if abs(a*x**2 + b*x + c) > 0.0001:\n                x += 0.1\n    return x\n\n\ndef directrix4(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: coefficients of the equation of a parabola\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    x = 0\n    while abs(a*x**2 + b*x + c) > 0.0001:\n        x += 0.1\n        if abs(a*x**2 + b*x + c) > 0.0001:\n            x -= 0.1\n            if abs(a*x**2 + b*x + c) > 0.0001:\n                x += 0.1",
    "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \n    The directrix of a parabola is the line that passes through the\n    middle of the parabola's (a,b) and (a,b).\n    \n    Args:\n        a (float): The x-coordinate of the middle of the parabola.\n        b (float): The y-coordinate of the middle of the parabola.\n        c (float): The z-coordinate of the middle of the parabola.\n    Returns:\n        The directrix of the parabola as a list of two points.\n    \"\"\"\n    x = (a * a - c * c) / 2 / b\n    y = (a * a - c * c) / 2 / b - c / b\n    return [x, y]\n\ndef parabola_directrix_points(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \n    The directrix of a parabola is the line that passes through the\n    middle of the parabola's (a,b) and (a,b).\n    \n    Args:\n        a (float): The x-coordinate of the middle of the parabola.\n        b (float): The y-coordinate of the middle of the parabola.\n        c (float): The z-coordinate of the middle of the parabola.\n    Returns:\n        The directrix of the parabola as a list of three points.\n    \"\"\"\n    x = (a * a - c * c) / 2 / b\n    y = (a * a - c * c) / 2 / b - c / b\n    z = (a * a - c * c) / 2 / b - c / b\n    return [x, y, z]\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert parabola_directrix(1, 2, 3) == [1, 1]\n    assert parabola_directrix_points(1, 2, 3) == [1, 1, 1]\n\nif __name__ ==",
    "import numpy as np\nimport math\n\ndef directrix(r0, x0, y0, r1, x1, y1):\n    \"\"\"\n    Calculates the directrix of a parabola\n\n    Parameters\n    ----------\n    r0 : float\n        Radius of the circle at the center of the parabola\n    x0 : float\n        x-coordinate of the center of the circle\n    y0 : float\n        y-coordinate of the center of the circle\n    r1 : float\n        Radius of the circle at the vertex of the parabola\n    x1 : float\n        x-coordinate of the vertex of the parabola\n    y1 : float\n        y-coordinate of the vertex of the parabola\n\n    Returns\n    -------\n    r : float\n        Radius of the directrix\n    x : float\n        x-coordinate of the directrix\n    y : float\n        y-coordinate of the directrix\n    \"\"\"\n    # Calculate the coordinates of the directrix\n    # r = r1/r0\n    # x = (x0 - x1) / r\n    # y = (y0 - y1) / r\n    r = r1/r0\n    x = (x1 - x0) / r\n    y = (y1 - y0) / r\n\n    # Calculate the distance from the origin\n    r = np.sqrt(r**2 + x**2 + y**2)\n\n    return r, x, y",
    "# -*- coding: utf-8 -*-\n\nimport numpy as np\n\ndef directrix(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Finds the directrix of a parabola.\n\n    :param x1: x1\n    :param y1: y1\n    :param x2: x2\n    :param y2: y2\n    :param x3: x3\n    :param y3: y3\n    :return: directrix\n    \"\"\"\n    dx = x2 - x1\n    dy = y2 - y1\n\n    a = dx * dx + dy * dy\n    b = 2 * (x2 * dx + x1 * dy + x3 * dx * dy)\n    c = x1 * x1 + x2 * x2 - x3 * x3 - y1 * y1 - y2 * y2 - y3 * y3\n\n    root = np.sqrt(b ** 2 - 4 * a * c)\n    directrix = -b / (2 * a)\n\n    return directrix\n\ndef directrix_2(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Finds the directrix of a parabola.\n\n    :param x1: x1\n    :param y1: y1\n    :param x2: x2\n    :param y2: y2\n    :param x3: x3\n    :param y3: y3\n    :return: directrix\n    \"\"\"\n    dx = x2 - x1\n    dy = y2 - y1\n\n    a = dx * dx + dy * dy\n    b = 2 * (x2 * dx + x1 * dy + x3 * dx * dy)\n    c = x1 * x1 + x2 * x2 - x3 * x3 - y1 * y1 - y2 * y2 - y3 * y3\n\n    root = np.sqrt(b ** 2 - 4 * a * c)\n    directrix = -b / (2 * a)\n\n    return directrix\n\ndef directrix_3(x1, y1, x2, y2, x3,",
    "import numpy as np\n\ndef parabola_directrix(x, y):\n    \"\"\"\n    Returns the directrix of a parabola.\n\n    Parabola is defined as\n\n   .. math::\n\n        f(x,y) = x^2 + y^2\n\n    Parameters\n    ----------\n    x : ndarray\n        x-coordinates of the points\n    y : ndarray\n        y-coordinates of the points\n\n    Returns\n    -------\n    ndarray\n        Directrix of the parabola\n\n    \"\"\"\n    return np.sqrt(x * x + y * y)\n\ndef main():\n    \"\"\"\n    Test function\n    \"\"\"\n    assert(parabola_directrix(np.array([1,2,3]), np.array([-1,1,-1])) == np.array([2,2,2]))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef directrix(x0, y0, x1, y1):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n        x0, y0, x1, y1 -- coordinates of the first and last point of the parabola\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    x = x0\n    y = y0\n    for i in range(0, len(x1)):\n        x = (y1[i] - y0[i]) / (x1[i] - x0[i]) * (x - x0[i]) + x0[i]\n        y = (y1[i] - y0[i]) / (x1[i] - x0[i]) * (y - y0[i]) + y0[i]\n    return x\n\n# Test Cases\nx0 = [0.0, 1.0]\ny0 = [0.0, 1.0]\nx1 = [0.0, 1.0]\ny1 = [0.0, 1.0]\nx = directrix(x0, y0, x1, y1)\nprint(x)",
    "def directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n        x, y -- the coordinates of the parabola's vertices\n    Output:\n        the directrix of the parabola\n    \"\"\"\n    # x0, y0, x1, y1 = x, y, x2, y2\n    # x0, y0 is the lower vertex of the parabola\n    # x1, y1 is the upper vertex of the parabola\n    # x2, y2 is the midpoint of the parabola\n    # y = a*x + b\n    # a = -y0/x0\n    # b = (y1 - y0)/x1 - a*x1\n\n    x0, y0, x1, y1 = x, y, x2, y2\n    a = -y0/x0\n    b = (y1 - y0)/x1 - a*x1\n\n    # x = -a*x - b\n    # y = a*x + b\n    # x = -a*x1 - b\n    # y = a*x1 + b\n    # x = -a*x0 - b\n    # y = a*x0 + b\n    # x = -a*x2 - b\n    # y = a*x2 + b\n    # x = -a*x1 + b\n    # y = a*x1 - b\n    # x = -a*x0 + b\n    # y = a*x0 - b\n    # x = -a*x2 - b\n    # y = a*x2 + b\n    # x = -a*x1 - b\n    # y = a*x1 + b\n    # x = -a*x0 - b\n    # y = a*x0 + b\n    # x = -a*x2 + b\n    # y = a*x2 - b\n    # x = -a*x1 + b\n    # y = a*x1 - b\n    # x = -a*x0 + b\n    # y = a*x0 - b\n    # x = -a*x2 -",
    "import numpy as np\n\ndef parabola_directrix(x0, y0, x1, y1):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    :param x0: x-coordinate of the point at which the parabola is defined.\n    :param y0: y-coordinate of the point at which the parabola is defined.\n    :param x1: x-coordinate of the point at which the parabola is defined.\n    :param y1: y-coordinate of the point at which the parabola is defined.\n    :return: A tuple containing the coordinates of the directrix.\n    \"\"\"\n    # TODO: Replace the following with an actual solution.\n    # Calculate the slopes and intersection points of the parabola.\n    # TODO: Check for the slope being 0.\n    # If the slope is 0, the parabola is a straight line.\n    # If the slope is not 0, the parabola is a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # TODO: Calculate the parabola's directrix.\n\n    # TODO: Replace the following with an actual solution.\n    # Calculate the x-coordinate of the intersection point.\n    # If the slope is not 0, the parabola is a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise, the parabola is not a parabola.\n    # Otherwise,",
    "import math\n\ndef directrix(a, b, c):\n    return math.sqrt(a**2 - 2*a*b + c**2)\n\nif __name__ == '__main__':\n    print(directrix(1, 2, 3))",
    "import math\n\ndef parabola_directrix(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Input:\n    x1, y1 -- coordinates of the first point\n    x2, y2 -- coordinates of the second point\n    x3, y3 -- coordinates of the third point\n    \"\"\"\n    x = (x2 - x1) ** 2 + (x3 - x1) ** 2\n    y = (y2 - y1) ** 2 + (y3 - y1) ** 2\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    b = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    c = (x2 - x1) ** 2 + (y3 - y1) ** 2\n    x1, y1 = x1, y1\n    r = math.sqrt(a + b + c)\n    if r == 0:\n        return 0\n    return (x / r) - (y / r)\n\nif __name__ == '__main__':\n    x1, y1, x2, y2, x3, y3 = input().split(' ')\n    x1, y1 = float(x1), float(y1)\n    x2, y2 = float(x2), float(y2)\n    x3, y3 = float(x3), float(y3)\n    print(parabola_directrix(x1, y1, x2, y2, x3, y3))",
    "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef parabola_directrix(y, x):\n    \"\"\"\n    Finds the directrix of a parabola, given y(x) and x(y).\n    \"\"\"\n    A = np.array([[2, -1], [-2, 1]])\n    B = np.array([1, 0])\n    C = np.array([[0, -y[0]], [y[0], 0]])\n    X = np.linalg.solve(A, np.dot(B, np.dot(C, B)))\n    Y = np.dot(B, np.dot(C, X))\n    return X, Y\n\n\ndef parabola_directrix_plot(y, x):\n    \"\"\"\n    Plots the parabola and the directrix.\n    \"\"\"\n    A = np.array([[2, -1], [-2, 1]])\n    B = np.array([1, 0])\n    C = np.array([[0, -y[0]], [y[0], 0]])\n    X = np.linalg.solve(A, np.dot(B, np.dot(C, B)))\n    Y = np.dot(B, np.dot(C, X))\n    plt.plot(x, y, '-')\n    plt.plot(X, Y, '-')\n    plt.show()\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    y = np.array([[0, -2], [2, -1], [1, 0], [0, 1]])\n    x = np.array([[-1, 2], [-1, -1], [1, -1], [1, 1]])\n    parabola_directrix_plot(y, x)\n    parabola_directrix(y, x)\n\n\nif __name__ == '__main__':\n    main()",
    "def parabola_directrix(parabola_x, parabola_y):\n    \"\"\"\n    :param parabola_x: A list of x coordinates of the parabola.\n    :param parabola_y: A list of y coordinates of the parabola.\n    :return: A list of the x coordinates of the directrix of the parabola.\n    \"\"\"\n    parabola_x_min = min(parabola_x)\n    parabola_x_max = max(parabola_x)\n    parabola_y_min = min(parabola_y)\n    parabola_y_max = max(parabola_y)\n\n    parabola_x_min_squared = parabola_x_min ** 2\n    parabola_x_max_squared = parabola_x_max ** 2\n    parabola_y_min_squared = parabola_y_min ** 2\n    parabola_y_max_squared = parabola_y_max ** 2\n\n    if parabola_x_min_squared > parabola_x_max_squared:\n        return None\n\n    if parabola_y_min_squared > parabola_y_max_squared:\n        return None\n\n    x_min = parabola_x_min\n    x_max = parabola_x_max\n\n    y_min = parabola_y_min\n    y_max = parabola_y_max\n\n    while True:\n        x = (x_min + x_max) / 2\n        y = parabola_eval(x)\n\n        if y_min <= y <= y_max:\n            x_min = x\n            y_min = y\n        else:\n            x_max = x\n            y_max = y\n\n        if x_min == x_max:\n            break\n\n    return [x_min, x_max]\n\n\ndef parabola_eval(parabola_x):\n    \"\"\"\n    :param parabola_x: A list of x coordinates of the parabola.\n    :return: The y coordinate of the",
    "from math import *\n\ndef directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # x = (2*a*x + b) / (2*a**2 - 4*a*b)\n    # y = (2*b*x + c) / (2*a**2 - 4*a*b)\n\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*b = 0\n    # a**2 - 4*a*",
    "import math\n\n\ndef directrix_parabola(x1, y1, x2, y2):\n    \"\"\"\n    Given the coordinates of the first point of the parabola and the\n    coordinates of the second point, return the point at which the\n    parabola crosses the directrix.\n    \"\"\"\n    # Find the intercept of the parabola through the directrix\n    x_parabola = (y2 - y1) / (x2 - x1)\n    y_parabola = y1 - x_parabola * x1\n    # Find the intercept of the parabola through the directrix\n    x_parabola_intercept = x2 - x1 * (y2 - y1) / (x2 - x1)\n    y_parabola_intercept = y2 - x_parabola_intercept * x1\n    return x_parabola_intercept, y_parabola_intercept\n\n\ndef directrix_parabola_area(x1, y1, x2, y2):\n    \"\"\"\n    Given the coordinates of the first point of the parabola and the\n    coordinates of the second point, return the area of the parabola.\n    \"\"\"\n    x1, y1 = directrix_parabola(x1, y1, x2, y2)\n    x2, y2 = directrix_parabola(x2, y2, x1, y1)\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)",
    "import numpy as np\n\ndef find_directrix(x0, y0, x1, y1):\n    \"\"\"\n    x0, y0: starting point of parabola\n    x1, y1: ending point of parabola\n    \"\"\"\n\n    # the equation of the parabola is y = mx^2 + bx + c\n    # a = m^2, b = mx + b, c = x0 + x1\n    # x = (a - 2b + c) / (2m^2)\n    # y = (b - a) / (2m)\n    # x = (x0 - x1) / (x0 - 2x1 + x1)\n    # y = (y0 - y1) / (y0 - 2y1 + y1)\n    # a = (y0 - y1) / (x0 - 2x1 + x1)\n    # b = (x0 - x1) / (y0 - 2y1 + y1)\n    # c = (x0 + x1) / 2\n    # solve the equation\n    # a = m^2, b = mx + b, c = x0 + x1\n    # x = (a - 2b + c) / (2m^2)\n    # y = (b - a) / (2m)\n    # x = (x0 - x1) / (x0 - 2x1 + x1)\n    # y = (y0 - y1) / (y0 - 2y1 + y1)\n\n    m = (y1 - y0) / (x1 - x0)\n    b = y0 - m * x0\n    c = x0 + x1\n\n    # calculate the equation of the parabola\n    a = m * m\n    b = m * x0 + b\n    c = x0 + x1\n\n    # solve the equation\n    x = (a - 2 * b + c) / (2 * m * m)\n    y = (b - a) / m\n\n    return x, y",
    "__author__ = 'Libao Jin'\n__date__ = 'December 18, 2015'\n\nclass Solution(object):\n    \"\"\"\n    @param x1: Starting point of parabola\n    @param y1: Starting point of parabola\n    @param x2: Ending point of parabola\n    @param y2: Ending point of parabola\n    @return: The directrix of the parabola\n    \"\"\"\n    def getDirectrix(self, x1, y1, x2, y2):\n        if x1 == x2:\n            return x1\n        else:\n            a = (y2 - y1) / (x2 - x1)\n            b = y1 - a * x1\n            return a * (x2 - x1) + b",
    "# https://www.hackerrank.com/challenges/parabola-directrix\n# https://www.codewars.com/kata/parabola-directrix/train/python\n\ndef directrix(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return c\n    if c == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if c < 0:\n        c = -c\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    print(directrix(0, 0, 0))\n    print(directrix(0, 0, 1))\n    print(directrix(0, 1, 1))\n    print(directrix(1, 1, 1))\n    print(directrix(1, 1, 0))\n    print(directrix(1, 0, 1))\n    print(directrix(1, 0, 0))\n    print(directrix(1, 0, -1))\n    print(directrix(1, -1, -1))\n    print(directrix(1, -1, 0))\n    print(directrix(1, -1, 1))\n    print(directrix(1, -1, 0))\n    print(directrix(1, -1, -1))",
    "# --- input --------------------------------------------------------------------\n# num_points\n# x, y\n# --- output ---------------------------------------------------------------\n# (x, y)\n\ndef directrix(num_points, x, y):\n    \"\"\"\n    :param num_points: number of points to use\n    :param x: list of x points\n    :param y: list of y points\n    :return: (x, y)\n    \"\"\"\n    # --- variables ----------------------------------------------------------------\n    # (x, y)\n    x_values = []\n    y_values = []\n    # --- main -----------------------------------------------------------------\n    # the equation of a parabola is:\n    # f(x) = a * x^2 + b * x + c\n    # the directrix is the point where the derivative of f is zero\n    # the derivative is:\n    # df / dx = 2 * a * x + 2 * b\n    # df / dy = 2 * b * x + 2 * a\n    # df / dx = 2 * a * x\n    # df / dy = 2 * b * x\n    # df / dx = a * x\n    # df / dy = b * x\n    # df / dx = a\n    # df / dy = b\n    for i in range(0, num_points):\n        x_values.append(x[i])\n        y_values.append(y[i])\n    for i in range(0, num_points):\n        x_values.append(x[i])\n        y_values.append(y[i])\n    for i in range(0, num_points):\n        x_values.append(x[i])\n        y_values.append(y[i])\n    # the derivative is zero when the value of the first point is the same\n    # as the value of the last point\n    if x[0] == x[num_points - 1]:\n        x_values.append(x[0])\n        y_values.append(y[0])\n    # the derivative is zero when the value of the first point is the same\n    # as the value of the last point\n    if y[0] == y[num_points - 1]:\n        x_values.append(x[0])\n        y_values",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    :param a: The x coordinate of the start of the parabola\n    :param b: The y coordinate of the start of the parabola\n    :param c: The x coordinate of the end of the parabola\n    :return: The x coordinate of the point where the parabola intersects the\n        directrix.\n    \"\"\"\n    return (a * a - 3 * b * c) / (2 * b * b)\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    print(directrix(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef parabola_directrix(x0, y0, x1, y1, x2, y2):\n    \"\"\"\n    x0, y0 is the starting point of the parabola\n    x1, y1 is the end point of the parabola\n    x2, y2 is the slope of the parabola\n    \"\"\"\n    a = (y0 - y1) / (x1 - x0)\n    b = (y2 - y1) / (x2 - x1)\n    c = (y0 - y2) / (x0 - x2)\n    #print(a, b, c)\n    if a!= 0:\n        d = -b / a\n        #print(d)\n        if d!= 0:\n            return (x0 + d * (x1 - x0)) / 2\n        else:\n            return None\n    else:\n        return None\n\nif __name__ == '__main__':\n    print(parabola_directrix(0, 0, 1, 1, 0, 0))",
    "# https://oj.leetcode.com/problems/parabola-intersection/\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
    "import math\nimport unittest\n\ndef directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input: a, b and c are the parameters of a parabola.\n    Output: the directrix of the parabola.\n    \"\"\"\n\n    # a, b and c are the parameters of a parabola.\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # c is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # a is the distance between the two points that are on the parabola\n\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # c is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # c is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # a is the distance between the two points that are on the parabola\n\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # c is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n    # c is the distance between the two points that are on the parabola\n    # b is the distance between the two points that are on the parabola\n\n    # a is the distance between the two points that are on the parabola\n    # b is the distance between the two points that",
    "from __future__ import print_function\n\nimport numpy as np\nfrom numpy import pi\n\ndef directrix(x, a, b, c):\n    \"\"\"\n    Returns the directrix of the parabola x = a*x^2 + b*x + c.\n    \"\"\"\n    return a*x**2 + b*x + c\n\ndef directrix_angle(x, a, b, c):\n    \"\"\"\n    Returns the angle of the directrix of the parabola x = a*x^2 + b*x + c.\n    \"\"\"\n    return np.arctan(b/a)\n\ndef directrix_function(x, a, b, c):\n    \"\"\"\n    Returns the function of the directrix of the parabola x = a*x^2 + b*x + c.\n    \"\"\"\n    return a*x**2 + b*x + c\n\ndef directrix_angle_function(x, a, b, c):\n    \"\"\"\n    Returns the angle of the function of the directrix of the parabola\n    x = a*x^2 + b*x + c.\n    \"\"\"\n    return np.arctan(b/a)\n\nif __name__ == '__main__':\n    a, b, c = 1, 2, 3\n    x = np.linspace(0, 5, num=100)\n    directrix_angle_function(x, a, b, c)\n    print(directrix_angle_function(x, a, b, c))",
    "import numpy as np\nfrom numpy import pi, sqrt, arctan, exp, sin, cos, tan\n\ndef directrix(r1, r2, r3):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Inputs:\n        r1, r2, r3: The coordinates of the three vertices of the parabola.\n    \"\"\"\n    return (r2 - r1)/2.0\n\n\ndef directrix_approx(r1, r2, r3):\n    \"\"\"\n    Calculate the directrix of a parabola using a simple approximation.\n\n    Inputs:\n        r1, r2, r3: The coordinates of the three vertices of the parabola.\n    \"\"\"\n    return (r2 - r1)/(r3 - r1)\n\n\ndef test_directrix():\n    assert directrix(0, 0, 0) == 0.0\n    assert directrix(1, 1, 1) == 0.0\n    assert directrix(0, 0, 1) == 0.0\n    assert directrix(0, 0, -1) == 0.0\n    assert directrix(1, 1, -1) == 0.0\n    assert directrix(-1, -1, -1) == 0.0\n    assert directrix(1, 1, 1) == 0.0\n    assert directrix(1, 1, 2) == pi/4\n    assert directrix(1, 1, 3) == pi/2\n    assert directrix(1, 1, 4) == pi/3\n    assert directrix(1, 1, 5) == pi/2\n    assert directrix(1, 1, 6) == pi/3\n    assert directrix(1, 1, 7) == pi/2\n    assert directrix(1, 1, 8) == pi/3\n    assert directrix(1, 1, 9) == pi/2\n    assert directrix(1, 1, 10) == pi/3\n    assert directrix(1, 1, 11) == pi/2\n    assert directrix(1, 1, 12) == pi/3\n    assert directrix(1, 1, 13) == pi/2\n    assert direct",
    "def directrix(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a, b, c: co-efficients of the equation of a parabola\n    x: point where directrix is to be found\n\n    Output:\n    d: directrix of a parabola\n    \"\"\"\n    d = a*x**2 + 2*b*x + c\n    return d\n\n\ndef directrix_p2(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a, b, c: co-efficients of the equation of a parabola\n    x: point where directrix is to be found\n\n    Output:\n    d: directrix of a parabola\n    \"\"\"\n    d = a*x**2 + 2*b*x + c\n    return d\n\n\ndef directrix_p3(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a, b, c: co-efficients of the equation of a parabola\n    x: point where directrix is to be found\n\n    Output:\n    d: directrix of a parabola\n    \"\"\"\n    d = a*x**2 + 2*b*x + c\n    return d\n\n\ndef directrix_p4(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a, b, c: co-efficients of the equation of a parabola\n    x: point where directrix is to be found\n\n    Output:\n    d: directrix of a parabola\n    \"\"\"\n    d = a*x**2 + 2*b*x + c\n    return d\n\n\ndef directrix_p5(a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    a, b, c: co-efficients of the equation of a parabola\n    x: point where directrix is to be found\n\n    Output:\n    d: directrix of a parabola\n    \"\"\"\n    d = a*x",
    "# Function to get the directrix of a parabola\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n    x = a * x ** 2 + b * x + c\n    return x\n\n# Test Cases\na = 2.0\nb = 1.0\nc = 3.0\n\nprint(\"Directrix of parabola: {}\".format(parabola_directrix(a, b, c)))\n\n# Output\n# Directrix of parabola: -1.0",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    :param a: The x coordinate of the point on the parabola\n    :param b: The y coordinate of the point on the parabola\n    :param c: The z coordinate of the point on the parabola\n    :return: The directrix of the parabola\n    \"\"\"\n\n    # Get the distance between the point and the origin.\n    x = a - 0\n    y = b - 0\n    z = c - 0\n\n    # Get the slope of the parabola.\n    slope = (y * y) / (x * x)\n\n    # Get the directrix of the parabola.\n    directrix = (x * slope) - (2 * x * z)\n    return directrix\n\n\ndef test_directrix(a, b, c):\n    \"\"\"\n    Test the directrix function.\n\n    :param a: The x coordinate of the point on the parabola\n    :param b: The y coordinate of the point on the parabola\n    :param c: The z coordinate of the point on the parabola\n    \"\"\"\n    print(\"The directrix of the parabola is {}.\".format(directrix(a, b, c)))\n\n\nif __name__ == '__main__':\n    test_directrix(1, 2, 3)",
    "from collections import namedtuple\nfrom math import sqrt\n\nPoint = namedtuple('Point', 'x y')\n\n\ndef directrix(point1, point2, point3):\n    \"\"\"\n    Compute the directrix of a parabola.\n\n    :param point1: First point of the parabola.\n    :param point2: Second point of the parabola.\n    :param point3: Third point of the parabola.\n    :return: The directrix of the parabola.\n    \"\"\"\n    p1 = Point(*point1)\n    p2 = Point(*point2)\n    p3 = Point(*point3)\n    c = p2 - p1\n    b = p3 - p1\n    a = b - c\n\n    return (a, b, c)\n\n\ndef test_directrix(point1, point2, point3):\n    \"\"\"\n    Test the directrix function.\n\n    :param point1: First point of the parabola.\n    :param point2: Second point of the parabola.\n    :param point3: Third point of the parabola.\n    :return: True if the directrix is valid, False otherwise.\n    \"\"\"\n    directrix = directrix(point1, point2, point3)\n    if directrix is None:\n        return False\n\n    a, b, c = directrix\n    return a * b > 0 and a * c > 0 and b * c > 0\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    point1 = Point(1, 2)\n    point2 = Point(2, 1)\n    point3 = Point(3, 3)\n\n    print(directrix(point1, point2, point3))\n\n    assert test_directrix(point1, point2, point3)\n    assert test_directrix(point2, point1, point3)\n    assert test_directrix(point3, point1, point2)\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef directrix_parabola(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola2(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola3(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola4(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola5(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola6(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola7(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola8(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola9(a, b, c, x):\n    \"\"\"\n    Directrix of parabola.\n    \"\"\"\n    return (x - a) / (b * x - x ** 2 + c)\n\n\ndef directrix_parabola10(a, b, c, x):\n    \"\"\"",
    "def find_parabola_directrix(x, y):\n    \"\"\"\n    Input:\n    x, y - point of parabola (x1, y1, x2, y2, x3, y3)\n    \n    Output:\n    r - radius of parabola\n    \"\"\"\n    \n    # check for a parabola\n    if x[2] == y[2]:\n        return 0\n    \n    # calculate r\n    r = (y[2] - y[0]) / (x[2] - x[0])\n    \n    # check if r is within parabola\n    if r > 0:\n        if r < 1:\n            return r\n        else:\n            return 1\n    else:\n        return -1\n\ndef test_find_parabola_directrix():\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_directrix((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == 0\n    assert find_parabola_",
    "from math import sqrt, cos, sin, atan2, pi, asin, acos\n\ndef directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    a, b, c are the coordinates of the three points of the parabola.\n\n    Returns a list containing the coordinates of the directrix.\n    \"\"\"\n\n    # find the angle between the three points\n    theta = acos((a**2 + b**2 - c**2) / (2 * a * b))\n\n    # find the angle between the directrix and the x axis\n    theta_x = atan2(2 * a * cos(theta), b**2 - a**2)\n\n    # find the angle between the directrix and the y axis\n    theta_y = atan2(2 * b * cos(theta), c**2 - b**2)\n\n    # find the angle between the directrix and the x axis\n    theta_x_prime = atan2(2 * a * cos(theta_x), b**2 - a**2)\n\n    # find the angle between the directrix and the y axis\n    theta_y_prime = atan2(2 * b * cos(theta_y), c**2 - b**2)\n\n    # find the angle between the directrix and the x axis\n    theta_x_prime_prime = atan2(2 * a * cos(theta_x_prime), b**2 - a**2)\n\n    # find the angle between the directrix and the y axis\n    theta_y_prime_prime = atan2(2 * b * cos(theta_y_prime), c**2 - b**2)\n\n    # find the coordinates of the directrix\n    x = -(a * cos(theta_x) + b * cos(theta_y)) / (a**2 - b**2)\n    y = (a * sin(theta_x) + b * sin(theta_y)) / (a**2 - b**2)\n\n    # find the coordinates of the directrix\n    x_prime = (a * cos(theta_x_prime) + b * cos(the",
    "# https://www.hackerrank.com/challenges/parabola/problem\n\ndef directrix(a, b, c, x):\n    \"\"\"\n    Returns the directrix of a parabola.\n\n    Inputs: a, b, c, x - coefficients of the equation of the parabola:\n        a * x**2 + b * x + c = 0\n\n    Output: the directrix of the parabola\n    \"\"\"\n\n    # The directrix is the intersection of the line x = 0 and the\n    # line x = -a/b\n\n    # If b is 0, the directrix is a line x = -a/b\n    # If b is not 0, the directrix is the intersection of the line\n    # x = -a/b and the line x = 0\n    # If b is 0 and a is not 0, the directrix is the line x = -a/b\n    # If b is not 0 and a is 0, the directrix is the line x = -a/b\n\n    # If a is 0, the directrix is a line x = -a/b\n    # If a is not 0, the directrix is the intersection of the line\n    # x = -a/b and the line x = 0\n\n    # If a is 0 and b is 0, the directrix is a line x = 0\n    # If a is not 0 and b is 0, the directrix is the line x = -a/b\n    # If a is 0 and b is not 0, the directrix is the line x = 0\n\n    # If a is not 0 and b is not 0, the directrix is the intersection\n    # of the line x = -a/b and the line x = 0\n    # If a is not 0 and b is not 0, the directrix is the line x = -a/b\n    # If a is not 0 and b is 0, the directrix is the line x = 0\n\n    # If a is not 0 and b is 0 and a is not 0, the directrix is a line\n    # x = -a/b\n    # If a is not 0 and b is 0 and a is 0, the directrix is the line\n    # x = -a/b\n    # If a is not 0",
    "#!/usr/bin/env python\n\nimport math\n\ndef directrix(x1, y1, x2, y2, x3, y3):\n    a = (y2 - y1) / (x2 - x1)\n    b = y1 - a * x1\n    c = (y3 - y2) / (x3 - x2)\n    d = y2 - c * x2\n    #print a, b, c, d\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return 0\n            return x3\n        return -d / b\n    if b == 0:\n        if c == 0:\n            return x2\n        return -a / c\n    return -a * (x1 - x2) / (b - c)\n\ndef main():\n    \"\"\"\n    >>> directrix(2, 2, 3, 4, 5, 6)\n    3\n    >>> directrix(4, 4, 3, 3, 5, 6)\n    2\n    >>> directrix(2, 2, 3, 3, 5, 6)\n    3\n    >>> directrix(2, 2, 3, 4, 5, 6)\n    2\n    \"\"\"\n    x1, y1 = 2, 2\n    x2, y2 = 3, 3\n    x3, y3 = 5, 6\n    print directrix(x1, y1, x2, y2, x3, y3)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef directrix(x, y):\n    \"\"\"\n    Finds the directrix of a parabola.\n\n    :param x: X-coordinate of the parabola's center.\n    :param y: Y-coordinate of the parabola's center.\n    :return: The directrix of the parabola.\n    \"\"\"\n    if y == 0:\n        return 0\n    return math.sqrt((x ** 2 - y ** 2) / (x ** 2 + y ** 2))\n\n\ndef test_directrix():\n    \"\"\"\n    Simple test function.\n    \"\"\"\n    assert directrix(1, -1) == -1\n    assert directrix(1, 2) == 1\n\n\ndef main():\n    \"\"\"\n    Runs the test.\n    \"\"\"\n    test_directrix()\n\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\n\ndef parabola_directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    x, y are 2-element arrays of x and y coordinates.\n\n    Returns\n    -------\n    p, q : float\n        (x, y) coordinates of the directrix.\n\n    \"\"\"\n    # Find the intersection of the parabola with the x-axis.\n    p = np.interp(x[0], x, y)\n    q = np.interp(x[1], x, y)\n\n    # If the parabola is on the right side of the x-axis, swap p and q.\n    if p > q:\n        p, q = q, p\n\n    # If the parabola is on the left side of the x-axis, swap p and q.\n    if p < q:\n        p, q = q, p\n\n    return p, q\n\n\ndef test_parabola_directrix():\n    x = np.array([-1, -1, -1, -1])\n    y = np.array([-1, -1, -1, -1])\n\n    print parabola_directrix(x, y)\n\n    x = np.array([-2, -2, -2, -2])\n    y = np.array([-2, -2, -2, -2])\n\n    print parabola_directrix(x, y)\n\n    x = np.array([-3, -3, -3, -3])\n    y = np.array([-3, -3, -3, -3])\n\n    print parabola_directrix(x, y)\n\n    x = np.array([-4, -4, -4, -4])\n    y = np.array([-4, -4, -4, -4])\n\n    print parabola_directrix(x, y)\n\n\nif __name__ == '__main__':\n    test_parabola_directrix()",
    "import numpy as np\n\ndef parabola_directrix(x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Args:\n        x (np.ndarray): The x coordinates of the parabola.\n\n    Returns:\n        np.ndarray: The y coordinates of the directrix.\n    \"\"\"\n\n    # Calculate the equation of the parabola\n    a, b, c = x[:-1], x[1:], x[2:]\n    x1 = np.sqrt(a*a + b*b + c*c)\n    y1 = 2*a*c - 2*b*c + b*b - a*a\n    y2 = 2*a*b*c - 4*b*b + 4*a*a + a*a*a + b*b*b - 2*a*b*c - c*c*c\n\n    # Calculate the directrix\n    y = np.sqrt(y1*y1 + y2*y2)\n\n    return y\n\nif __name__ == '__main__':\n    assert parabola_directrix([-1, -1, -1, -1]) == -1\n    assert parabola_directrix([-1, -1, -1, 1]) == -1\n    assert parabola_directrix([-1, -1, 1, -1]) == -1\n    assert parabola_directrix([-1, -1, 1, 1]) == -1\n    assert parabola_directrix([-1, -1, 1, 2]) == -1\n    assert parabola_directrix([-1, 1, -1, 1]) == -1\n    assert parabola_directrix([-1, 1, 1, -1]) == -1\n    assert parabola_directrix([-1, 1, 1, 1]) == -1\n    assert parabola_directrix([1, -1, -1, 1]) == -1\n    assert parabola_directrix([1, -1, 1, -1]) == -1\n    assert parabola_directrix([1, -1, 1, 1]) == -1\n    assert parab",
    "import math\n\ndef directrix(p):\n    \"\"\"\n    Input:\n    p = [x0, y0, x1, y1, x2, y2]\n    Output:\n    Directrix of the parabola\n    \"\"\"\n    a = p[2] - p[0]\n    b = p[3] - p[1]\n    c = p[1] - p[0] * (p[2] / p[3])\n    return [a, b, c]\n\ndef main():\n    p = [[1, 1, 0, 0, 1, 1], [1, -1, 0, 0, 1, -1], [0, 1, 1, 0, 1, -1], [0, -1, -1, 0, 1, 1]]\n    print directrix(p)\n\nif __name__ == '__main__':\n    main()",
    "import math\nfrom decimal import Decimal\n\n\ndef directrix(p1, p2, p3):\n    \"\"\"\n    Given 3 points on the parabola, return the directrix of the parabola.\n    \"\"\"\n    a = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    b = (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2\n    c = (p2[0] - p3[0]) ** 2 + (p2[1] - p3[1]) ** 2\n    # a, b, c are all positive\n    # a = b + c\n    # a = b - c\n    # a = b * c\n    # a = b - c\n    # a = b / c\n    # a = b * c / c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c\n    # a = b / c - c\n    # a = b / c + c",
    "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Given the parameters of a parabola, return the directrix of that parabola.\n    \"\"\"\n    return (a*c - b*b) / (2*a)\n\ndef test():\n    assert parabola_directrix(2, 4, 3) == 2\n    assert parabola_directrix(2, 4, -3) == 2\n    assert parabola_directrix(2, 4, 0) == 2\n    assert parabola_directrix(2, 4, -2) == 2\n    assert parabola_directrix(2, 4, 5) == 2\n    assert parabola_directrix(2, 4, -5) == 2\n    assert parabola_directrix(2, 4, -0.5) == 2\n    assert parabola_directrix(2, 4, -0.5) == 2\n    assert parabola_directrix(2, 4, -2) == 2\n    assert parabola_directrix(2, 4, -2) == 2\n    assert parabola_directrix(2, 4, -3) == 2\n    assert parabola_directrix(2, 4, -3) == 2\n    assert parabola_directrix(2, 4, -4) == 2\n    assert parabola_directrix(2, 4, -4) == 2\n    assert parabola_directrix(2, 4, -5) == 2\n    assert parabola_directrix(2, 4, -5) == 2\n    assert parabola_directrix(2, 4, -6) == 2\n    assert parabola_directrix(2, 4, -6) == 2\n    assert parabola_directrix(2, 4, -7) == 2\n    assert parabola_directrix(2, 4, -7) == 2\n    assert parabola_directrix(2, 4, -8) == 2\n    assert parabola_directrix(2, 4, -8) == 2\n    assert parabola_directrix(2, 4, -9) == 2\n    assert parab",
    "import math\n\ndef directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    a, b, c: coefficients of the equation y = ax^2 + bx + c\n    \"\"\"\n\n    if a == 0:\n        if b == 0:\n            raise Exception('Cannot find directrix for parabola with a and b both zero')\n        else:\n            return c / b\n    else:\n        return (a + c) / 2\n\n\ndef directrix_from_points(p1, p2):\n    \"\"\"\n    Find the directrix of a parabola from two points.\n\n    p1, p2: two points on the parabola\n    \"\"\"\n\n    return (p1[0] * p2[1] - p2[0] * p1[1]) / (p1[0] - p2[0])\n\n\nif __name__ == '__main__':\n    # p1 = [1, 2, 3]\n    # p2 = [1, 1]\n\n    p1 = [2, 0, -1]\n    p2 = [1, 1, 0]\n\n    print directrix(p1[0], p1[1], p1[2])\n    print directrix(p2[0], p2[1], p2[2])\n    print directrix_from_points(p1, p2)",
    "# https://www.hackerrank.com/challenges/parabola/problem\n\ndef parabola(n, a, b, c, x):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    n: the number of points\n    a: the first point\n    b: the second point\n    c: the third point\n    x: the point to find the directrix\n    \"\"\"\n    # Calculate the angle between the first and second points.\n    angle = (a * x + b) / (c - a * x)\n    # Calculate the angle between the second and third points.\n    angle2 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the third and fourth points.\n    angle3 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the fourth and last points.\n    angle4 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the first and last points.\n    angle5 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the first and second points.\n    angle6 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the second and third points.\n    angle7 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the third and fourth points.\n    angle8 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the fourth and last points.\n    angle9 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the first and second points.\n    angle10 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the second and third points.\n    angle11 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the third and fourth points.\n    angle12 = (a * x + b) / (c - a * x)\n    # Calculate the angle between the fourth",
    "import math\nfrom collections import defaultdict\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function that returns the directrix of a parabola.\n    a is the slope of the x-axis.\n    b is the y-intercept of the parabola.\n    c is the height of the parabola.\n    \"\"\"\n    return a*a + 2*a*b + c*c - 2*b*b\n\ndef parabola_directrix_iter(a, b, c):\n    \"\"\"\n    Write a function that returns the directrix of a parabola.\n    a is the slope of the x-axis.\n    b is the y-intercept of the parabola.\n    c is the height of the parabola.\n    \"\"\"\n    return parabola_directrix(a, b, c)\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    a is the slope of the x-axis.\n    b is the y-intercept of the parabola.\n    c is the height of the parabola.\n    \"\"\"\n    return math.sqrt(parabola_directrix(a, b, c))\n\n\ndef directrix_iter(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    a is the slope of the x-axis.\n    b is the y-intercept of the parabola.\n    c is the height of the parabola.\n    \"\"\"\n    return parabola_directrix_iter(a, b, c)\n\n\ndef main():\n    \"\"\"\n    Write a function that returns the directrix of a parabola.\n    a is the slope of the x-axis.\n    b is the y-intercept of the parabola.\n    c is the height of the parabola.\n    \"\"\"\n    print(parabola_directrix(1, 2, 3))\n    print(parabola_directrix_iter(1, 2, 3))\n    print(directrix(1, 2, 3))\n    print(directrix_",
    "def directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Input:\n    - x: the x coordinate of the start of the parabola\n    - y: the y coordinate of the start of the parabola\n    \"\"\"\n\n    if x == y:\n        return x\n\n    a = (y - x) / (y + x)\n    b = x / (y + x)\n    c = y / (y + x)\n\n    if a == b and b == c:\n        return a\n\n    return 0\n\n# test cases\n\nprint(directrix(0, 0))\nprint(directrix(0, 1))\nprint(directrix(0, 2))\nprint(directrix(0, 3))\nprint(directrix(1, 1))\nprint(directrix(1, 2))\nprint(directrix(1, 3))\nprint(directrix(2, 2))\nprint(directrix(2, 3))\nprint(directrix(3, 3))\nprint(directrix(4, 4))\nprint(directrix(5, 5))\nprint(directrix(6, 6))\nprint(directrix(7, 7))\nprint(directrix(8, 8))",
    "import numpy as np\nfrom math import sqrt\n\ndef directrix(a, b, c, d):\n    \"\"\"\n    Find the directrix of a parabola\n\n    :param a:\n    :param b:\n    :param c:\n    :param d:\n    :return:\n    \"\"\"\n\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n\n    if a == 0:\n        return None\n\n    if b == 0:\n        if c == 0:\n            return None\n        else:\n            return d / b\n\n    if c == 0:\n        return d / b\n\n    if d == 0:\n        return a / b\n\n    if (b ** 2 - 4 * a * c) == 0:\n        return (a + b + sqrt(b ** 2 - 4 * a * c)) / 2\n    else:\n        return None\n\nif __name__ == \"__main__\":\n    print(directrix(0, 0, 0, 0))\n    print(directrix(0, 0, 0, 0.1))\n    print(directrix(0, 0, 0, 0.01))",
    "import numpy as np\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Inputs:\n    a, b, c = parameters of the parabola\n    \"\"\"\n\n    y = (np.sqrt(a**2 - b**2) - c)/(2*a)\n    return y\n\ndef test_directrix():\n    assert directrix(3, 1, 4) == 2.0\n    assert directrix(4, -1, -3) == 1.0\n\nif __name__ == \"__main__\":\n    test_directrix()",
    "# Importing libraries\nimport math\n\n# Function definitions\ndef parabola_directrix(x0, y0, x1, y1):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    x0, y0 are the coordinates of the parabola's minimum point.\n    x1, y1 are the coordinates of the parabola's maximum point.\n    \"\"\"\n    # Calculating the angle between the minimum and maximum points\n    angle = math.atan2(y1 - y0, x1 - x0)\n\n    # Calculating the distance between the minimum and maximum points\n    distance = math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2)\n\n    # Calculating the angle of the parabola with respect to the x-axis\n    parabola_angle = math.atan2(y1 - y0, x1 - x0)\n\n    # Calculating the distance from the minimum point to the parabola\n    parabola_distance = math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2)\n\n    # Calculating the angle between the minimum and parabola\n    parabola_angle_min = math.atan2(y0 - y1, x0 - x1)\n\n    # Calculating the angle between the minimum and parabola\n    parabola_angle_max = math.atan2(y1 - y0, x1 - x0)\n\n    # Calculating the angle between the parabola and the minimum point\n    parabola_angle_min_to_minimum = math.atan2(y1 - y0, x1 - x0)\n\n    # Calculating the angle between the parabola and the maximum point\n    parabola_angle_max_to_maximum = math.atan2(y1 - y0, x1 - x0)\n\n    # Calculating the angle between the parabola and the parabola's minimum point\n    parabola_angle_min_to_parabola_min = math.atan2(y0 - y1, x0 - x1)\n\n    # Calculating the angle between the parabola and the parabola's maximum point\n    parab",
    "import math\n\ndef directrix(a, b, c, d, e, f):\n    \"\"\"\n    Input:\n    a, b, c, d, e, f are the coefficients of the parabola\n    \"\"\"\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    e = float(e)\n    f = float(f)\n\n    a = a / 2\n    b = b / 2\n    c = c / 2\n    d = d / 2\n    e = e / 2\n    f = f / 2\n\n    # Calculate the roots\n    a_root = (b * d - c * e) / (b * b - c * c)\n    b_root = (-b * d + c * e) / (b * b - c * c)\n\n    # Calculate the roots of the parabola\n    r1 = (a + a_root) / 2\n    r2 = (b + b_root) / 2\n    r3 = (c + d * r1 + e * r2) / 2\n    r4 = (d * r1 + e * r2 - c) / 2\n\n    # Calculate the distance\n    r1_r2_r3_r4 = math.sqrt((a_root - r1) ** 2 + (b_root - r2) ** 2 + (c - d * r1) ** 2 + (e - d * r2) ** 2)\n\n    if r1_r2_r3_r4 < 0.1:\n        return 0\n    else:\n        return r1_r2_r3_r4\n\nif __name__ == \"__main__\":\n    # Test cases\n    print(directrix(0.5, 0.5, 0.5, 0.5, 0.5, 0.5))\n    print(directrix(0.5, 0.5, 0.5, 0.5, 0.5, 0.5))\n    print(directrix(0.5, 0.5, 0.5, 0.5, 0.5, 0.5))",
    "# Importing libraries\nimport math\n\n\n# Function to calculate the directrix\ndef directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola\n\n    :param x: x-coordinate of the directrix\n    :param y: y-coordinate of the directrix\n    :return: The directrix\n    \"\"\"\n    # Calculating the directrix\n    a = (y - x ** 2) / 2\n    b = x\n    directrix = a + b\n\n    # Returning the directrix\n    return directrix\n\n\n# Testing the function\nif __name__ == \"__main__\":\n    # Inputs\n    x = input(\"Input x: \")\n    y = input(\"Input y: \")\n\n    # Calculating the directrix\n    directrix = directrix(x, y)\n\n    # Printing the directrix\n    print(\"The directrix is: {}\".format(directrix))",
    "# Import required libraries\nimport math\nimport numpy as np\n\n# Define a function to calculate the directrix\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n    \n    a - The x-coordinate of the apex\n    b - The y-coordinate of the apex\n    c - The x-coordinate of the apex's tangent\n    \"\"\"\n    # Calculate the x-coordinate of the apex's tangent\n    t = (a ** 2 - b ** 2) / (2 * a * c)\n    \n    # Calculate the y-coordinate of the apex's tangent\n    t = b - a * t\n    \n    # Return the x-coordinate of the apex's tangent\n    return t\n\n# Calculate the directrix of a parabola\nprint(directrix(2, 3, 4))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.p1 = None\n        self.p2 = None\n        self.p3 = None\n\n    def solve(self, params):\n        \"\"\"\n        :param params: [[x1, y1], [x2, y2],...]\n        :return: [[x, y], [x, y],...]\n        \"\"\"\n        self.p1 = params[0]\n        self.p2 = params[1]\n        self.p3 = params[2]\n\n        # get the line\n        x1, y1 = self.p1\n        x2, y2 = self.p2\n        x3, y3 = self.p3\n\n        # get the slope\n        m = (y1 - y2) / (x1 - x2)\n        b = y1 - m * x1\n\n        # get the intercept\n        a = y1 - m * x1 - b\n\n        # get the parabola\n        y = a - m * x - b\n\n        # get the directrix\n        x = (y2 - y3) / (x2 - x3)\n        y = a + m * x + b\n\n        return [x, y]\n\n\nif __name__ == \"__main__\":\n    params = [[-2, 2], [-2, 2], [-2, 2]]\n    Solution().solve(params)\n    print(params)",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, x=0, y=0):\n#         self.x = x\n#         self.y = y\n\n\nclass Solution:\n    def findDirectrix(self, points: List[Point]) -> Point:\n        \"\"\"\n        :type points: List[Point]\n        :rtype: Point\n        \"\"\"\n        x_max = max(p.x for p in points)\n        x_min = min(p.x for p in points)\n        y_max = max(p.y for p in points)\n        y_min = min(p.y for p in points)\n        for p in points:\n            if p.x == x_max or p.x == x_min or p.y == y_max or p.y == y_min:\n                return p\n        return None",
    "# https://www.hackerrank.com/challenges/parabola/problem\n\ndef parabola(p, q, r, x, y):\n    \"\"\"\n    Inputs:\n    p, q, r are the coefficients of the equation of the parabola\n    x, y are the coordinates of the point\n    Output:\n    directrix is the directrix of the parabola\n    \"\"\"\n    # if the coordinates are not valid\n    if not (p > 0 and q > 0 and r > 0 and x > 0 and y > 0):\n        return 0\n\n    # calculate the distance from the origin to the point\n    distance = (x*x + y*y) - (x*p + y*q)\n    # calculate the value of the parabola\n    directrix = r * distance**2\n    return directrix",
    "import math\nimport numpy as np\nfrom numpy import pi\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return a * (b ** 2) + c * b\n\n\ndef directrix_points(a, b, c, x):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix(a, b, c) + x * math.sqrt(b ** 2 - x ** 2)\n\n\ndef directrix_y(a, b, c, y):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix(a, b, c) + y * math.sqrt(b ** 2 - y ** 2)\n\n\ndef directrix_y_points(a, b, c, x, y):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix_y(a, b, c, x) + y * math.sqrt(b ** 2 - y ** 2)\n\n\ndef directrix_x(a, b, c, x):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix(a, b, c) + x * math.sqrt(b ** 2 - x ** 2)\n\n\ndef directrix_x_points(a, b, c, x, y):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix_x(a, b, c, x) + x * math.sqrt(b ** 2 - x ** 2)\n\n\ndef directrix_y_x(a, b, c, x, y):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix_y(a, b, c, y) + x * math.sqrt(b ** 2 - y ** 2)\n\n\ndef directrix_y_x_points(a, b, c, x, y, z):\n    \"\"\"\n    Returns the directrix of a parabola\n    \"\"\"\n    return directrix_y_x(a, b, c, x, y) + x *",
    "def find_parabola_directrix(parabola):\n    \"\"\"\n    Given a parabola, return the directrix of the parabola.\n    \"\"\"\n    x1 = parabola[0]\n    y1 = parabola[1]\n    x2 = parabola[2]\n    y2 = parabola[3]\n    x3 = parabola[4]\n    y3 = parabola[5]\n    x4 = parabola[6]\n    y4 = parabola[7]\n    x5 = parabola[8]\n    y5 = parabola[9]\n    x6 = parabola[10]\n    y6 = parabola[11]\n    x7 = parabola[12]\n    y7 = parabola[13]\n    x8 = parabola[14]\n    y8 = parabola[15]\n\n    # The directrix is the intersection of four lines,\n    # the horizontal lines extending from (x1, y1) to (x2, y2),\n    # the vertical lines extending from (x3, y3) to (x4, y4),\n    # and the two diagonal lines extending from (x5, y5) to (x6, y6) and (x7, y7) to (x8, y8).\n    # The intersection of these lines is the directrix of the parabola.\n\n    # The horizontal lines\n    # x1 <= x2\n    # x3 <= x4\n    # x5 <= x6\n    # x7 <= x8\n    # The vertical lines\n    # y1 <= y2\n    # y3 <= y4\n    # y5 <= y6\n    # y7 <= y8\n    # The diagonal lines\n    # x1 + y1 = x2 + y2\n    # x3 + y3 = x4 + y4\n    # x5 + y5 = x6 + y6\n    # x7 + y7 = x8 + y8\n\n    # The intersection of these lines is the directrix of the parabola.\n\n    # The directrix is the intersection of four lines,\n    # the horizontal lines extending from (x",
    "def directrix(a, b, c, x):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Inputs:\n    a, b, c - coefficients of the equation of the parabola\n    x - point to evaluate the parabola at\n\n    Outputs:\n    directrix - a vector of points on the directrix of the parabola\n    \"\"\"\n    # set up a few variables\n    x_min = -b / (2 * a)\n    x_max = b / (2 * a)\n\n    # evaluate the parabola at the two points\n    directrix_a = a * (x_min ** 2) + b * x_min + c\n    directrix_b = 2 * a * x_min + b\n    directrix_c = -a * x_min ** 2 - b * x_min - c\n\n    # find the roots of the parabola\n    roots_a = solve(directrix_a, x)\n    roots_b = solve(directrix_b, x)\n    roots_c = solve(directrix_c, x)\n\n    # return the roots\n    return roots_a + roots_b + roots_c\n\n# test case\na, b, c = 1, 2, 3\nx = 2\nprint(directrix(a, b, c, x))",
    "import math\n\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Input:\n        a: the first x-coordinate of the parabola.\n        b: the second x-coordinate of the parabola.\n        c: the y-coordinate of the parabola.\n\n    Output:\n        The x-coordinate of the directrix.\n    \"\"\"\n    x = (a * a - 3 * b) / 9\n    return x\n\n\ndef main():\n    \"\"\"\n    Test case:\n    >>> directrix(3, 4, -3)\n    3\n    >>> directrix(3, 4, -4)\n    2\n    >>> directrix(3, 4, -5)\n    -2\n    >>> directrix(3, 4, -6)\n    -3\n    \"\"\"\n    print(directrix(3, 4, -3))\n    print(directrix(3, 4, -4))\n    print(directrix(3, 4, -5))\n    print(directrix(3, 4, -6))\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\ndef directrix(x0, y0, x1, y1):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    x0, y0    - the starting point of the parabola\n    x1, y1    - the ending point of the parabola\n    \"\"\"\n    # calculate the slope and intercept of the line\n    slope = (y1 - y0) / (x1 - x0)\n    intercept = y0 - slope * x0\n    \n    # calculate the distance between the points\n    dx = x1 - x0\n    dy = y1 - y0\n    \n    # calculate the distance of the parabola\n    d = dx*dx + dy*dy\n    \n    # calculate the distance between the directrix and the parabola\n    d_parabola = dx*dx + dy*dy\n    \n    # calculate the angle of the directrix with respect to the parabola\n    angle = np.arctan2(dy, dx)\n    \n    return slope, intercept, angle, d, d_parabola\n\n\ndef test():\n    \"\"\"\n    Test the directrix function.\n    \"\"\"\n    # directrix of a parabola\n    x0 = 0\n    y0 = 0\n    x1 = 1\n    y1 = 1\n    slope, intercept, angle, d, d_parabola = directrix(x0, y0, x1, y1)\n    print slope, intercept, angle, d, d_parabola\n\n\nif __name__ == \"__main__\":\n    test()",
    "import math\nfrom math import *\n\ndef directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Input: a, b, c are the coordinates of the parabola's three points.\n    Output: the directrix of the parabola.\n    \"\"\"\n    x1 = (a*a-3*b+c)/2\n    x2 = (a*a-b*b+c)/2\n    x3 = (a*a-2*b*b+c)/2\n    y1 = (2*a*b-c)/2\n    y2 = (a*b-2*a*c+b*c)/2\n    y3 = (2*a*c-b*b)/2\n    return (x1, x2, x3, y1, y2, y3)\n\ndef main():\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Input: a, b, c are the coordinates of the parabola's three points.\n    Output: the directrix of the parabola.\n    \"\"\"\n    a = input(\"Enter the first parabola's coordinate: \")\n    b = input(\"Enter the second parabola's coordinate: \")\n    c = input(\"Enter the third parabola's coordinate: \")\n    directrix = directrix(a, b, c)\n    print(\"The directrix is:\")\n    for x, y in directrix:\n        print(str(x) + \", \" + str(y))\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\ndef directrix(x, y):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    :param x: X coordinate of the parabola\n    :param y: Y coordinate of the parabola\n    :return: The directrix of the parabola\n    \"\"\"\n    # Initialize the parameters\n    h = np.sqrt(2*y**2 - x**2)\n    m = (y**2 - x**2)/2\n    r = np.sqrt(x**2 + y**2)\n\n    # Calculate the directrix\n    directrix = np.array([r*np.cos(m*np.pi/2), r*np.sin(m*np.pi/2)])\n    return directrix\n\ndef directrix_matrix(x, y):\n    \"\"\"\n    Calculate the directrix of a parabola as a matrix.\n\n    :param x: X coordinate of the parabola\n    :param y: Y coordinate of the parabola\n    :return: The directrix of the parabola as a matrix\n    \"\"\"\n    directrix = directrix(x, y)\n    directrix_matrix = np.matrix([directrix[0], directrix[1]])\n    return directrix_matrix\n\ndef directrix_array(x, y):\n    \"\"\"\n    Calculate the directrix of a parabola as an array.\n\n    :param x: X coordinate of the parabola\n    :param y: Y coordinate of the parabola\n    :return: The directrix of the parabola as an array\n    \"\"\"\n    directrix = directrix(x, y)\n    directrix_array = np.array([directrix[0], directrix[1]])\n    return directrix_array\n\ndef directrix_matrix_2(x, y):\n    \"\"\"\n    Calculate the directrix of a parabola as a matrix.\n\n    :param x: X coordinate of the parabola\n    :param y: Y coordinate of the parabola\n    :return: The directrix of the parabola as a matrix\n    \"\"\"\n    directrix = directrix_mat",
    "from math import sqrt, pi, acos\n\n\ndef directrix(x, y):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # find the equation of a parabola\n    a = (y - 2*x**2) / 2\n    b = (3*x**2 - y) / 2\n\n    # the directrix is a point where the equation of a parabola is zero\n    x0 = -b / (2*a)\n\n    # calculate the angle of the directrix\n    theta = acos(x0)\n\n    # return the angle\n    return theta",
    "import numpy as np\n\ndef directrix(x, y):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    x and y are the abscissa and ordinate of the point.\n\n    The directrix is the point where the function of the parabola crosses zero.\n    \"\"\"\n    return np.interp(0, x, y)\n\nif __name__ == \"__main__\":\n    x = np.linspace(-2, 2, 100)\n    y = x**2\n    print directrix(x, y)",
    "from math import sqrt\n\ndef directrix(a, b):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n    return (a * a - b * b) / (2 * a)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(directrix(3, -4))\n    print(directrix(4, -5))\n    print(directrix(6, -4))\n    print(directrix(4, 4))\n\nif __name__ == \"__main__\":\n    main()",
    "__author__ = 'Danyang'\n\nclass Solution(object):\n    def parabola(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x > y:\n            return -1\n        if x == y:\n            return 0\n        if x > y:\n            return 1\n\n        x = abs(x)\n        y = abs(y)\n        a = (x + y) / 2\n        b = (x * y) / 2\n        c = (x ** 2 + y ** 2) / 4\n        return a + b + c\n\n\nif __name__ == \"__main__\":\n    print Solution().parabola(2, 3)",
    "# https://www.hackerrank.com/challenges/parabola-directrix/problem\n\n\ndef find_directrix(a, b, c, x):\n    # find the midpoint\n    mid = (a + b) / 2\n    # find the distance to the midpoint\n    d = abs(x - mid)\n    # find the angle to the midpoint\n    theta = (x - mid) / d\n    # find the length of the parabola\n    h = (a * a - b * b) / (2 * d)\n    # compute the parabola's slope\n    s = 2 * (a - b) / d\n    # compute the directrix\n    return abs(s * theta - 1)\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    x = int(input())\n    print(find_directrix(a, b, c, x))",
    "# https://www.hackerrank.com/challenges/parabola/problem\n\nimport math\n\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    r = (b ** 2 - 4 * a * c) / (2 * a)\n    if r < 0:\n        return None\n    x1 = (-b - math.sqrt(r)) / (2 * a)\n    x2 = (-b + math.sqrt(r)) / (2 * a)\n    if x1 < 0 and x2 < 0:\n        return None\n    elif x1 > 0 and x2 > 0:\n        return None\n    else:\n        return [x1, x2]\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(parabola_directrix(a, b, c))",
    "import numpy as np\n\n\ndef directrix(p1, p2, p3):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    p1, p2, p3 are three points of a parabola.\n\n    Returns the coordinates of the directrix.\n    \"\"\"\n\n    # Calculate the parameters of the parabola\n    a = (p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2\n    b = 2 * (p2[0] - p1[0]) * (p2[1] - p1[1])\n    c = (p2[0] - p3[0]) ** 2 + (p2[1] - p3[1]) ** 2\n\n    # Calculate the directrix\n    x0 = (b ** 2 - 4 * a * c) ** 0.5\n    y0 = (2 * b * c - 2 * a) ** 0.5\n    return np.array([x0, y0])\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert directrix(np.array([1, 1]), np.array([2, 2]), np.array([3, 3])) == np.array([3, 3])\n    assert directrix(np.array([1, 1]), np.array([2, 2]), np.array([3, 3])) == np.array([3, 3])\n    assert directrix(np.array([1, 1]), np.array([2, 2]), np.array([3, 3])) == np.array([3, 3])\n    assert directrix(np.array([1, 1]), np.array([2, 2]), np.array([3, 3])) == np.array([3, 3])\n\n\nif __name__ == \"__main__\":\n    main()",
    "def directrix(x, y):\n    \"\"\"\n    Return the point (x, y) that is the directrix of the parabola.\n\n    :param x: x-coordinate of the point\n    :param y: y-coordinate of the point\n    :return: (x, y) of the directrix\n    \"\"\"\n    return x, (x - y) / 2\n\nif __name__ == \"__main__\":\n    print(directrix(1, 1))",
    "import math\n\ndef directrix(p1, p2, p3, p4):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    p1, p2, p3, p4: coordinates of the four points of the parabola.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n    a = ((y4-y3)*(y4-y3)+(x4-x3)*(x4-x3))/(2*(y4-y3))\n    b = ((x4-x3)*(x4-x3)+(y4-y3)*(y4-y3))/(2*(y4-y3))\n    c = ((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))/(2*(y2-y1))\n    d = ((x4-x3)*(x4-x3)+(y4-y3)*(y4-y3))/(2*(y4-y3))\n    e = ((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))/(2*(y2-y1))\n    f = ((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1))/(2*(y3-y1))\n    g = ((x4-x1)*(x4-x1)+(y4-y1)*(y4-y1))/(2*(y4-y1))\n    h = ((x3-x2)*(x3-x2)+(y3-y2)*(y3-y2))/(2*(y3-y2))\n    i = ((x4-x1)*(x4-x1)+(y4-y1)*(y4-y1))/(2*(y4-y1))\n    j = ((x3-x2)*(x3-x2)+(y3-y2)*(y3-y2",
    "import math\ndef parabola_directrix(a, b, c, x):\n    \"\"\"\n    Given the parameters of the parabola,\n    find the directrix of the parabola.\n\n    >>> parabola_directrix(1, 1, 1, 0.5)\n    0.5\n    >>> parabola_directrix(1, 1, 1, 1)\n    1\n    >>> parabola_directrix(1, 1, 1, 2)\n    0.5\n    >>> parabola_directrix(1, 1, 1, 3)\n    0.5\n    >>> parabola_directrix(1, 1, 1, 4)\n    1\n    \"\"\"\n    return a*math.sqrt(1 - x**2)\n\n#Testing\nif __name__ == \"__main__\":\n    print parabola_directrix(1, 1, 1, 0.5)\n    print parabola_directrix(1, 1, 1, 1)\n    print parabola_directrix(1, 1, 1, 2)\n    print parabola_directrix(1, 1, 1, 3)\n    print parabola_directrix(1, 1, 1, 4)",
    "# Import appropriate modules from the parabola package.\nfrom parabola import parabola\n\n\ndef directrix(parabola):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    :param parabola: Parabola object\n    :return: list of points, representing the directrix\n    \"\"\"\n    # Calculate the directrix.\n    directrix_points = parabola.directrix()\n\n    # Return the list of points.\n    return directrix_points"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}