{
  "problem": {
    "task_id": "MBPP/266",
    "prompt": "Write a function to find the lateral surface area of a cube.",
    "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
    "test_list": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ],
    "challenge_test_list": [],
    "problem_id": 255
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def area(side_lengths):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters\n    ----------\n    side_lengths : list of ints\n        The side lengths of the cube.\n\n    Returns\n    -------\n    area : float\n        The lateral surface area of the cube.\n\n    Notes\n    -----\n    The lateral surface area of a cube is the area of the surface\n    of the cube in which all the sides are the same length.\n    \"\"\"\n    return sum(side_lengths) * side_lengths[0]\n\n\nif __name__ == '__main__':\n    side_lengths = [10, 20, 30]\n    print(area(side_lengths))",
    "import numpy as np\n\ndef lateral_surface_area(cube):\n    \"\"\"\n    Compute the lateral surface area of a cube.\n    \"\"\"\n    return np.sum([cube.shape[i] * cube.strides[i] for i in range(3)])\n\ndef test_lateral_surface_area():\n    cube = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], dtype=np.float64)\n    assert lateral_surface_area(cube) == 4\n    cube = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], dtype=np.float64)\n    assert lateral_surface_area(cube) == 16",
    "import math\n\ndef lateral_surface_area(cube):\n    \"\"\"\n    Return the lateral surface area of a cube.\n\n    The lateral surface area of a cube is the area of a square that is\n    divided into four equal parts.\n    \"\"\"\n    \n    # Compute the width of the sides of the cube.\n    w = cube.width / 2\n    h = cube.height / 2\n    d = cube.depth / 2\n\n    # Compute the area of the square that is divided into four equal parts.\n    return w * h * d\n\ndef main():\n    cube = Cube(3, 2, 1)\n    print(lateral_surface_area(cube))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cube_surface(side):\n    \"\"\"\n    Given a number of side, return the lateral surface area of a cube.\n    \"\"\"\n    return side ** 2 * math.sqrt(3) / 2\n\ndef main():\n    \"\"\"\n    Write a function called `cube_surface` that takes in a number\n    of sides as an argument, and returns the lateral surface area of\n    a cube with that number of sides.\n    \"\"\"\n    assert cube_surface(3) == 24, 'Error: cube_surface(3) = 24'\n    assert cube_surface(10) == 100, 'Error: cube_surface(10) = 100'\n    assert cube_surface(15) == 165, 'Error: cube_surface(15) = 165'\n    assert cube_surface(20) == 400, 'Error: cube_surface(20) = 400'\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\ndef lateral_surface_area(lateral_surface_area):\n    \"\"\"\n    Computes the lateral surface area of a cube given the lateral surface area.\n\n    :param lateral_surface_area: The lateral surface area of the cube.\n    :return: The lateral surface area of the cube.\n    \"\"\"\n    return lateral_surface_area * np.sqrt(np.pi)\n\n\ndef test_lateral_surface_area():\n    \"\"\"\n    Test the lateral surface area of a cube.\n    \"\"\"\n    assert lateral_surface_area(np.array([1.0, 2.0, 3.0, 4.0])) == 6.0\n\n\ndef test_lateral_surface_area_array():\n    \"\"\"\n    Test the lateral surface area of a cube.\n    \"\"\"\n    assert lateral_surface_area(np.array([[1.0, 2.0, 3.0, 4.0]])) == 6.0",
    "def lateral_surface_area(side_length):\n    \"\"\"\n    :param side_length: The side length of a cube.\n    :return: The lateral surface area of the cube.\n    \"\"\"\n    return side_length * side_length * side_length\n\n# ------------------------------------------------------------------------------\n\nprint(lateral_surface_area(100))",
    "def cube_lateral_surface_area(cube_size):\n    \"\"\"\n    :param cube_size: Size of the cube\n    :return: Lateral surface area of the cube\n    \"\"\"\n    return cube_size * cube_size * 4\n\nif __name__ == \"__main__\":\n    cube_size = int(input(\"Enter the size of the cube: \"))\n    print(\"The lateral surface area of the cube is {0}\".format(cube_lateral_surface_area(cube_size)))",
    "import math\n\ndef area(side):\n    \"\"\"\n    Calculates the lateral surface area of a cube.\n    \"\"\"\n    return side * side * math.pi\n\ndef main():\n    \"\"\"\n    Main function for the unit test.\n    \"\"\"\n    assert area(10) == 64.0\n    assert area(100) == 800.0\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\nclass Solution:\n    def cubeArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        return sum([p.x * p.y * p.z for p in points])",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    def area(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        return sum([p.y for p in points]) - sum([p.x for p in points])\n\nif __name__ == \"__main__\":\n    points = [Point(1, 1), Point(2, 2), Point(1, 2), Point(1, 3)]\n    print(Solution().area(points))",
    "import math\n\n\ndef lsa(side):\n    return side * (side * 0.5 + 0.5)\n\n\ndef cube_area(side):\n    return side * side * side\n\n\ndef main():\n    print(lsa(20))\n    print(cube_area(20))\n    print(lsa(100))\n    print(cube_area(100))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef lateral_surface_area(cube_side):\n    \"\"\"\n    Compute the lateral surface area of a cube.\n    \"\"\"\n    return cube_side * cube_side * math.pi\n\nif __name__ == \"__main__\":\n    cube_side = int(input(\"Enter the side of the cube: \"))\n    print(lateral_surface_area(cube_side))",
    "#\n# TODO: Write your code here\n#\n\n#!/bin/python\n#!/usr/bin/python\n\nimport sys\nimport math\n\ndef get_area(a, b, c):\n    return a*b + b*c + c*a\n\ndef main():\n    f = open(sys.argv[1], \"r\")\n    lines = f.readlines()\n    f.close()\n\n    print \"Lateral surface area of a cube is: \" + str(get_area(lines[0].split()[1], lines[0].split()[2], lines[0].split()[3]))\n\nif __name__ == \"__main__\":\n    main()",
    "# Importing numpy\nimport numpy as np\n\n# Importing the function\nfrom numpy import linspace\nfrom numpy import pi\n\n# This is the surface area of a cube\nsurface_area = lambda x: 4.0 * np.pi * x[0] * x[1]\n\n# This is the area of a circle\narea_circle = lambda x: 2.0 * pi * x[0] * x[1]\n\n# This is the surface area of a square\narea_square = lambda x: 2.0 * pi * x[0] * x[1]\n\n# This is the surface area of a triangle\narea_triangle = lambda x: 0.5 * (np.sqrt(3) * x[0] * x[1] + x[0] * x[2] + x[1] * x[2])\n\n# This is the surface area of a pentagon\narea_pentagon = lambda x: 5.0 * x[0] * x[1]\n\n# This is the surface area of a hexagon\narea_hexagon = lambda x: 6.0 * x[0] * x[1]\n\n# This is the surface area of a heptagon\narea_heptagon = lambda x: 7.0 * x[0] * x[1]\n\n# This is the surface area of a octagon\narea_octagon = lambda x: 8.0 * x[0] * x[1]\n\n# This is the surface area of a square_with_side\narea_square_with_side = lambda x: 4.0 * pi * x[0] * x[1]\n\n# This is the surface area of a square_with_side_and_height\narea_square_with_side_and_height = lambda x: 4.0 * pi * x[0] * x[1]\n\n# This is the surface area of a triangle_with_side\narea_triangle_with_side = lambda x: 0.5 * (np.sqrt(3) * x[0] * x[1] + x[0] * x[2] + x[1] * x[2])\n\n# This is the surface area of a triangle_with_",
    "import math\n\ndef lateral_surface_area(side_length):\n    \"\"\"\n    Find the lateral surface area of a cube with side_length side_length.\n    \"\"\"\n    return math.pi * (side_length ** 2)\n\nif __name__ == '__main__':\n    print(lateral_surface_area(4))",
    "import math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    length: the length of the cube\n    width: the width of the cube\n    height: the height of the cube\n    \"\"\"\n    return math.pi * (length * width + width * height + height * length) / 4.0\n\ndef test():\n    assert lateral_surface_area(10, 10, 10) == 12.5\n\nif __name__ == '__main__':\n    test()",
    "def lateral_surface_area(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    The lateral surface area of a cube is equal to the lateral surface area of a\n    rectangular prism.\n\n    Parameters:\n    ----------\n    side_length: int\n        Side length of the cube.\n\n    Returns:\n    --------\n    lateral_surface_area: int\n        The lateral surface area of the cube.\n    \"\"\"\n    return side_length ** 2\n\nif __name__ == \"__main__\":\n    assert lateral_surface_area(1) == 4\n    assert lateral_surface_area(2) == 8\n    assert lateral_surface_area(3) == 16\n    assert lateral_surface_area(4) == 32\n    assert lateral_surface_area(5) == 64\n    assert lateral_surface_area(6) == 128\n    assert lateral_surface_area(7) == 256\n    assert lateral_surface_area(8) == 512\n    assert lateral_surface_area(9) == 1024",
    "def area(x, y, z):\n    \"\"\"\n    Function to calculate the area of a cube.\n\n    The cube is specified as a list of three integers representing the\n    lengths of the sides of the cube.\n\n    The area is calculated using the formula:\n    \n    A = x * y * z\n    \"\"\"\n    return x * y * z\n\n\ndef test_area():\n    assert area(1, 2, 3) == 24\n    assert area(4, 5, 6) == 60\n    assert area(7, 8, 9) == 144\n\n\ndef test_area_2():\n    assert area(3, 4, 5) == 40\n    assert area(6, 7, 8) == 120\n    assert area(9, 10, 11) == 192\n\n\ndef test_area_3():\n    assert area(1, 2, 3) == 24\n    assert area(4, 5, 6) == 60\n    assert area(7, 8, 9) == 144",
    "import math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    :param length: length of the cube\n    :param width: width of the cube\n    :param height: height of the cube\n    :return: the lateral surface area of the cube\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Main function of the module\n    \"\"\"\n    print(lateral_surface_area(6, 3, 4))\n    print(lateral_surface_area(5, 3, 4))\n    print(lateral_surface_area(6, 4, 5))\n    print(lateral_surface_area(5, 4, 5))\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\nfrom scipy.special import jn\n\n\ndef surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    length = float(length)\n    width = float(width)\n    height = float(height)\n    return length * width * height / 2.0\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area",
    "import math\n\ndef lateral_surface_area(cube_side):\n    \"\"\"\n    :type cube_side: int\n    :rtype: float\n    \"\"\"\n    cube_side = cube_side\n    return math.pi * cube_side * cube_side * cube_side\n\nif __name__ == \"__main__\":\n    print lateral_surface_area(8)",
    "import math\n\ndef lateral_surface_area(side_length):\n    \"\"\"\n    Write a function to calculate the lateral surface area of a cube.\n\n    :param side_length: The side length of a cube.\n    :return: The lateral surface area of the cube.\n    \"\"\"\n    return math.pi * (side_length ** 2)\n\n\nif __name__ == '__main__':\n    assert lateral_surface_area(5) == 22.0",
    "# import the necessary packages\nimport math\n\n\ndef cube_lateral_surface_area(cube_width, cube_height, cube_depth):\n    \"\"\"\n    Return the lateral surface area of a cube.\n\n    :param cube_width: the width of the cube\n    :param cube_height: the height of the cube\n    :param cube_depth: the depth of the cube\n    :return: the lateral surface area of the cube\n    \"\"\"\n    # calculate the surface area of the cube\n    surface_area = cube_width * cube_height * cube_depth\n    return surface_area\n\n\ndef main():\n    \"\"\"\n    Run the main program.\n    \"\"\"\n    print(cube_lateral_surface_area(1, 2, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def lateral_surface_area(side_length):\n    \"\"\"\n    :param side_length:\n    :return:\n    \"\"\"\n    return side_length ** 2\n\ndef main():\n    print lateral_surface_area(6)\n\nif __name__ == '__main__':\n    main()",
    "def lateral_surface_area(side_length):\n    \"\"\"\n    :type side_length: int\n    :rtype: int\n    \"\"\"\n    return side_length * side_length * 3.0\n\ndef main():\n    side_length = input(\"Enter the side length of the cube: \")\n    print(\"The lateral surface area is: {}\".format(lateral_surface_area(side_length)))\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return length * width * height\n\n\ndef test_lateral_surface_area():\n    assert lateral_surface_area(1, 2, 3) == 6\n    assert lateral_surface_area(3, 4, 5) == 20\n    assert lateral_surface_area(5, 3, 2) == 20\n    assert lateral_surface_area(2, 4, 5) == 20\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5, 5) == 50\n    assert lateral_surface_area(5, 5",
    "def lateral_surface_area(cube):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    :type cube: 3-tuple\n    :param cube: A 3-tuple of the form:\n    (width, height, depth)\n    :rtype: float\n    :return: The lateral surface area of the cube.\n    \"\"\"\n    return sum(cube[0] * cube[1] * cube[2])\n\ndef test():\n    assert lateral_surface_area((3, 4, 5)) == 225\n    assert lateral_surface_area((5, 4, 3)) == 225\n    assert lateral_surface_area((5, 3, 4)) == 225\n    assert lateral_surface_area((3, 4, 5)) == 225\n    assert lateral_surface_area((3, 5, 4)) == 225\n    assert lateral_surface_area((5, 4, 3)) == 225\n    assert lateral_surface_area((3, 4, 5)) == 225\n    assert lateral_surface_area((5, 3, 4)) == 225\n    assert lateral_surface_area((5, 4, 3)) == 225\n    assert lateral_surface_area((5, 4, 3)) == 225\n\nif __name__ == \"__main__\":\n    test()",
    "#!/usr/bin/env python\n\nimport os\nimport sys\nimport math\nimport time\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Returns the lateral surface area of a cube.\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 4:\n        print \"Usage: {} length width height\".format(sys.argv[0])\n        exit(1)\n    length = float(sys.argv[1])\n    width = float(sys.argv[2])\n    height = float(sys.argv[3])\n    print lateral_surface_area(length, width, height)",
    "def surface_area(x, y, z):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    :param x: X coordinate of the cube's corner\n    :param y: Y coordinate of the cube's corner\n    :param z: Z coordinate of the cube's corner\n    :return: the lateral surface area of the cube\n    \"\"\"\n    return x * y * z\n\nif __name__ == '__main__':\n    x, y, z = (input(), input(), input())\n    print(surface_area(x, y, z))",
    "import math\n\ndef area_cube(length, width, height):\n    area = (length * width) + (length * height) + (width * height)\n    return area\n\ndef area_cube_recursive(length, width, height):\n    if height == 0:\n        return length * width\n    else:\n        return (length * width) + (length * height) + (width * height)\n\ndef area_cube_iterative(length, width, height):\n    area = (length * width) + (length * height) + (width * height)\n    return area\n\ndef main():\n    print area_cube(2, 3, 4)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef area(l,w,h):\n    \"\"\"\n    Returns the lateral surface area of a cube.\n    \"\"\"\n    return l*w*h\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    cube = [[0 for x in range(3)] for x in range(3)]\n    #cube = [[1 for x in range(3)] for x in range(3)]\n    #cube = [[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,",
    "def get_lateral_surface_area(cube_height, cube_width, cube_depth):\n    \"\"\"\n    >>> get_lateral_surface_area(1,1,1)\n    4.0\n    >>> get_lateral_surface_area(2,1,1)\n    16.0\n    >>> get_lateral_surface_area(2,2,1)\n    32.0\n    >>> get_lateral_surface_area(2,2,2)\n    64.0\n    >>> get_lateral_surface_area(2,2,3)\n    128.0\n    >>> get_lateral_surface_area(3,2,1)\n    256.0\n    >>> get_lateral_surface_area(3,2,2)\n    512.0\n    >>> get_lateral_surface_area(3,2,3)\n    768.0\n    >>> get_lateral_surface_area(3,3,1)\n    1024.0\n    >>> get_lateral_surface_area(3,3,2)\n    1536.0\n    >>> get_lateral_surface_area(3,3,3)\n    3072.0\n    \"\"\"\n    return cube_depth * cube_width * cube_height\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef area(x, y, z):\n    return math.pi * (x * x + y * y + z * z)\n\n\ndef main():\n    cube_surface_area = 0\n    for i in range(1, 11):\n        for j in range(1, 11):\n            for k in range(1, 11):\n                cube_surface_area += area(i, j, k)\n    print(cube_surface_area)\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef lateral_surface_area(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    :param side_length: The length of one side of the cube.\n\n    :return: The lateral surface area of the cube.\n    \"\"\"\n\n    return math.pi * side_length ** 2\n\ndef main():\n    \"\"\"\n    A simple test function to show how to use this module.\n    \"\"\"\n\n    print lateral_surface_area(3)\n\nif __name__ == '__main__':\n    main()",
    "def lateral_surface_area(cube):\n    \"\"\"\n    >>> lateral_surface_area([[1,1,1], [1,1,0], [1,0,1], [0,1,1]])\n    8.0\n    >>> lateral_surface_area([[1,1,1], [1,1,0], [1,0,1], [0,1,1]])\n    8.0\n    >>> lateral_surface_area([[1,1,1], [1,1,1], [1,0,1], [0,1,1]])\n    12.0\n    \"\"\"\n    return sum(cube[0][0]*cube[0][1] + cube[0][0]*cube[0][2] + cube[0][1]*cube[0][2])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Compute the lateral surface area of a cube.\n\n    :param length: The length of the cube.\n    :param width: The width of the cube.\n    :param height: The height of the cube.\n\n    :return: The lateral surface area of the cube.\n    \"\"\"\n\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Run the main program.\n    \"\"\"\n\n    length = input('Enter the length of the cube: ')\n    width = input('Enter the width of the cube: ')\n    height = input('Enter the height of the cube: ')\n\n    print('The lateral surface area of the cube is {}'.format(lateral_surface_area(length, width, height)))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cube_surface_area(lx, ly, lz):\n    return lx * ly * lz\n\ndef main():\n    lx = int(input(\"Please input the length of the side of cube:\"))\n    ly = int(input(\"Please input the length of the side of cube:\"))\n    lz = int(input(\"Please input the length of the side of cube:\"))\n    surface_area = cube_surface_area(lx, ly, lz)\n    print(\"The lateral surface area of a cube is:\", surface_area)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef area(side_lengths):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \n    :param side_lengths: list of side lengths of the cube\n    :return: the lateral surface area of the cube\n    \"\"\"\n    return sum(side_lengths) * math.sqrt(3)\n\n# test case\nassert(area([5, 4, 3, 2, 1]) == 24)\nassert(area([5, 3, 2, 1]) == 12)\nassert(area([5, 4, 3]) == 12)\nassert(area([5]) == 5)\nassert(area([]) == 0)",
    "import math\n\ndef area_cube(side):\n    return math.sqrt(side * side * side)\n\nif __name__ == \"__main__\":\n    print(area_cube(10))",
    "import math\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :type length: float\n    :type width: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return length * width * height\n\n\ndef test_lateral_surface_area():\n    assert lateral_surface_area(1, 2, 3) == 6\n    assert lateral_surface_area(2, 3, 4) == 6\n    assert lateral_surface_area(1, 2, 3) == lateral_surface_area(2, 3, 4)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5) == lateral_surface_area(4, 5, 6)\n    assert lateral_surface_area(3, 4, 5",
    "def area(cube):\n    \"\"\"\n    >>> area(cube)\n    12.0\n    \"\"\"\n    return cube.lateral_surface_area\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def lsa(x, y, z):\n    \"\"\"\n    >>> lsa(1, 1, 1)\n    12\n    \"\"\"\n    return x*y*z\n\ndef main():\n    \"\"\"\n    >>> lsa(1, 2, 3)\n    12\n    \"\"\"\n    print(lsa(1, 2, 3))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@version: 0.1\n@author: act\n@date: 2019/3/15\n@change:\n    1\u3001\u52a0\u5165\u8f93\u5165\u53c2\u6570\n    2\u3001\u8c03\u6574\u8f93\u51fa\u7ed3\u679c\n\"\"\"\n\nimport math\n\ndef area(x, y, z):\n    \"\"\"\n    calculate the surface area of a cube\n    \"\"\"\n    return math.pi * x * y * z\n\n\nif __name__ == '__main__':\n    # x, y, z = 3, 4, 5\n    # print(area(x, y, z))\n    # print(area(10, 10, 10))\n    # print(area(10, 10))\n    # print(area(1, 1, 1))\n    print(area(3, 4, 5))\n    # print(area(3, 4))\n    # print(area(3))\n    # print(area(1))\n    # print(area(1, 1, 1))\n    print(area(3, 4, 5, 6))\n    # print(area(3, 4, 5, 6, 7))\n    # print(area(3, 4, 5, 6, 7, 8))\n    # print(area(3, 4, 5, 6, 7, 8, 9))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10, 11))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    # print(area(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n    # print(area(3,",
    "#%%\n# I/O\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.colors import LogNorm\n\n#%%\ndef cube_surface_area(cube, n_tries=100):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    #%%\n    # Set up data frame\n    df = pd.DataFrame(cube.get_data())\n    df.index = df.x\n    df.columns = df.y\n\n    #%%\n    # Initialize array to store latitudinal surface area\n    surface_area = np.empty((n_tries, df.shape[1]))\n\n    #%%\n    # Iterate over all possible latitudes\n    for i in range(df.shape[1]):\n        #%%\n        # Iterate over all possible heights\n        for j in range(df.shape[0]):\n            #%%\n            # Calculate surface area\n            surface_area[:,i] += df.loc[j,i] * np.sin(np.deg2rad(df.loc[j,i]))\n\n    #%%\n    # Plot results\n    plt.figure()\n    plt.plot(surface_area)\n    plt.show()\n\n\n#%%\n# Run tests\ncube_surface_area(np.array([[1,1,1],[2,2,2],[3,3,3],[4,4,4]]))",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        return 'Point({}, {}, {})'.format(self.x, self.y, self.z)\n\nclass Solution(object):\n    def __init__(self):\n        self.__cubes = []\n\n    def is_valid(self, point):\n        \"\"\"\n        :type point: Point\n        :rtype: bool\n        \"\"\"\n        return point.x >= 0 and point.x <= 100 and point.y >= 0 and point.y <= 100 and point.z >= 0 and point.z <= 100\n\n    def add_point(self, point):\n        \"\"\"\n        :type point: Point\n        \"\"\"\n        if self.is_valid(point):\n            self.__cubes.append(point)\n\n    def area(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        return sum([p.y * p.z for p in self.__cubes])\n\n\ns = Solution()\ns.add_point(Point(0, 0, 0))\ns.add_point(Point(1, 0, 0))\ns.add_point(Point(1, 1, 0))\ns.add_point(Point(0, 1, 0))\ns.add_point(Point(0, 0, 1))\ns.add_point(Point(1, 0, 1))\ns.add_point(Point(1, 1, 1))\ns.add_point(Point(0, 1, 1))\n\nprint(s.area())",
    "import math\n\ndef cube_surface_area(x, y, z):\n    return (x * y * z) / 2\n\ndef main():\n    print cube_surface_area(1, 2, 3)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef lateral_surface_area(side):\n    \"\"\"\n    Return the lateral surface area of a cube with side length side.\n\n    >>> lateral_surface_area(10)\n    160\n    >>> lateral_surface_area(5)\n    30\n    \"\"\"\n    return side * side * math.pi\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\ndef cube_area(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters\n    ----------\n    side_length : float\n        Side length of the cube.\n\n    Returns\n    -------\n    float\n        The lateral surface area of the cube.\n    \"\"\"\n    return side_length * side_length * side_length\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(cube_area(3))\n    print(cube_area(5))\n    print(cube_area(7))\n\nif __name__ == \"__main__\":\n    main()",
    "#!/usr/bin/python\n\n#\n#\n#\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
    "# Import the modules needed\nimport math\n\n# Define the function\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Write a function to calculate the lateral surface area of a cube.\n    \"\"\"\n    # Calculate the area\n    area = length * width * height\n    return area\n\n# Calculate the area\narea = lateral_surface_area(1, 1, 1)\nprint area\n\n# Calculate the area\narea = lateral_surface_area(3, 1, 1)\nprint area\n\n# Calculate the area\narea = lateral_surface_area(3, 3, 1)\nprint area\n\n# Calculate the area\narea = lateral_surface_area(3, 3, 3)\nprint area\n\n# Calculate the area\narea = lateral_surface_area(1, 3, 3)\nprint area\n\n# Calculate the area\narea = lateral_surface_area(1, 1, 3)\nprint area",
    "import math\nimport sys\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Returns the lateral surface area of a cube.\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 3:\n        print(\"Usage: {} <length> <width>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    length = int(sys.argv[1])\n    width = int(sys.argv[2])\n\n    print(lateral_surface_area(length, width, 1))",
    "def area(lateral_surface_area):\n    \"\"\"\n    Input:\n    lateral_surface_area = the area of the lateral surface of a cube\n    Output:\n    a list of the lateral surface area of all the cubes in the system\n    \"\"\"\n\n    return lateral_surface_area",
    "def lateral_surface_area(length, width, height):\n    \"\"\"\n    :param length: the length of the cube\n    :type length: float\n    :param width: the width of the cube\n    :type width: float\n    :param height: the height of the cube\n    :type height: float\n    :return: the lateral surface area of the cube\n    :rtype: float\n    \"\"\"\n    return (length * width) + (length * height) + (width * height)\n\n\n# print lateral_surface_area(1, 2, 3)\n# print lateral_surface_area(1, 2, 3)\n# print lateral_surface_area(1, 2, 3)",
    "def area(lateral_surface_area, volume, lateral_surface_area_unit):\n    \"\"\"\n    :param lateral_surface_area:\n    :param volume:\n    :param lateral_surface_area_unit:\n    :return:\n    \"\"\"\n    return volume * lateral_surface_area\n\n\ndef test():\n    assert area(0, 1, \"inch^2\") == 0.0\n    assert area(0, 1, \"foot^2\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square meter\") == 0.0\n    assert area(0, 1, \"square inch\") == 0.0\n    assert area(0, 1, \"square foot\") == 0.0\n    assert area(0, 1, \"",
    "import math\n\ndef lsa(x, y, z):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \n    :param x:\n        The length of the side of the cube.\n    :param y:\n        The width of the side of the cube.\n    :param z:\n        The height of the side of the cube.\n    :return:\n        The lateral surface area of the cube.\n    \"\"\"\n    return math.pi * (x + y + z)\n\ndef main():\n    \"\"\"\n    Unit test.\n    \"\"\"\n    assert lsa(1, 2, 3) == 6.28\n    assert lsa(1, 2, 1) == 4.0\n    assert lsa(1, 1, 1) == 2.0\n    assert lsa(1, 1, 2) == 4.0\n    assert lsa(1, 2, 2) == 8.0\n    assert lsa(2, 2, 2) == 16.0\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cube.\n\n    length: length of the cube\n    width: width of the cube\n    height: height of the cube\n    \"\"\"\n    lateral_surface_area = length * width * height\n    return lateral_surface_area\n\n\ndef main():\n    \"\"\"\n    Unit tests for the lateral surface area function.\n    \"\"\"\n    assert lateral_surface_area(4, 6, 2) == 24\n    assert lateral_surface_area(4, 6, 2) == lateral_surface_area(4, 6, 2)\n\n\nif __name__ == \"__main__\":\n    main()",
    "#!/usr/bin/env python\n\n# Importing the libraries\nimport math\nimport sys\nimport operator\n\n\n# Function to compute the surface area of a cube\ndef surface(x,y,z):\n    return x*y*z\n\n\n# Function to compute the volume of a cube\ndef volume(x,y,z):\n    return x*y*z\n\n\n# Driver program to test above functions\ndef main():\n    # Driver program to test above functions\n    # x,y,z = map(float, raw_input().split())\n    x,y,z = map(int, raw_input().split())\n    area = surface(x,y,z)\n    volume = volume(x,y,z)\n    print \"Surface Area: \", area\n    print \"Volume: \", volume\n\n# Driver program to test above functions\nif __name__ == '__main__':\n    main()",
    "def lateral_surface_area(height, width):\n    \"\"\"\n    :param height: the height of the cube\n    :type height: int\n    :param width: the width of the cube\n    :type width: int\n    :return: the lateral surface area of the cube\n    :rtype: float\n    \"\"\"\n    # Write your code here\n    return height * width * 2\n\nif __name__ == '__main__':\n    assert lateral_surface_area(3, 4) == 24, \"lateral surface area of a cube is 24\"\n    assert lateral_surface_area(5, 6) == 90, \"lateral surface area of a cube is 90\"\n    assert lateral_surface_area(10, 12) == 144, \"lateral surface area of a cube is 144\"",
    "#!/usr/bin/env python\n\nimport math\n\ndef lsa(x,y,z):\n    return x*x+y*y+z*z\n\ndef lsa_2d(x,y):\n    return x*x+y*y\n\ndef lsa_3d(x,y,z):\n    return x*x+y*y+z*z\n\nif __name__ == '__main__':\n    print(lsa(2,3,4))\n    print(lsa_2d(2,3))\n    print(lsa_3d(2,3,4))",
    "# import the modules\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# define the function\ndef surface_area(x, y):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    return np.prod(np.array([x, y]))\n\n\n# call the function\nsurface_area(5, 5)\n\n# plot the results\nplt.figure()\nplt.plot(np.array([5, 5]), np.array([10, 5]), '-o', label='cube')\nplt.plot(np.array([5, 5]), np.array([10, 10]), '-s', label='cube')\nplt.plot(np.array([5, 5]), np.array([5, 5]), '--o', label='cube')\nplt.plot(np.array([5, 5]), np.array([5, 10]), '--s', label='cube')\nplt.plot(np.array([5, 5]), np.array([5, 5]), ':o', label='cube')\nplt.plot(np.array([5, 5]), np.array([5, 10]), ':s', label='cube')\nplt.legend()\nplt.show()",
    "# The lateral surface area of a cube is the area of the cube divided by the\n# volume of the cube.\ndef lateral_surface_area(cube):\n    \"\"\"\n    Input:\n    cube -- a cube with dimensions (width, height, length)\n    Output:\n    lateral surface area -- the area of the cube divided by the volume of the\n        cube\n    \"\"\"\n    return cube[0]*cube[1]*cube[2]\n\n# Sample test case 1\ncube = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint lateral_surface_area(cube)\n\n# Sample test case 2\ncube = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint lateral_surface_area(cube)\n\n# Sample test case 3\ncube = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint lateral_surface_area(cube)\n\n# Sample test case 4\ncube = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\nprint lateral_surface_area(cube)",
    "from math import pi\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: float\n    \"\"\"\n    area = pi * length * width * height / 4\n    return area\n\nif __name__ == \"__main__\":\n    assert lateral_surface_area(4, 4, 4) == 12\n    assert lateral_surface_area(3, 3, 3) == 9\n    assert lateral_surface_area(2, 2, 2) == 4\n    assert lateral_surface_area(1, 1, 1) == 2\n    assert lateral_surface_area(4, 2, 1) == 12\n    assert lateral_surface_area(4, 1, 2) == 12\n    assert lateral_surface_area(4, 4, 2) == 12\n    assert lateral_surface_area(1, 4, 4) == 4",
    "from math import sqrt\n\ndef surface_area(side):\n    return side * side * 0.5\n\ndef lateral_surface_area(side):\n    return side * sqrt(side)\n\ndef main():\n    side = int(input(\"Side of cube: \"))\n    print(\"Lateral surface area of a cube with side {} is {}\".format(side, lateral_surface_area(side)))\n    print(\"Surface area of a cube with side {} is {}\".format(side, surface_area(side)))\n\nif __name__ == '__main__':\n    main()",
    "#Import Modules\nimport math\n\n#Define Constants\nSIDE_LENGTH = 2.0\n\ndef getSurfaceArea(length,width,height):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    length: the side length of the cube\n    width: the width of the cube\n    height: the height of the cube\n    \n    returns: the surface area of the cube\n    \"\"\"\n    return length * width * height\n\ndef getSurfaceArea(length,width,height):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    length: the side length of the cube\n    width: the width of the cube\n    height: the height of the cube\n    \n    returns: the surface area of the cube\n    \"\"\"\n    return length * width * height\n    \n    \ndef getSurfaceArea(length,width,height):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    length: the side length of the cube\n    width: the width of the cube\n    height: the height of the cube\n    \n    returns: the surface area of the cube\n    \"\"\"\n    return length * width * height\n\ndef getSurfaceArea(length,width,height):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    length: the side length of the cube\n    width: the width of the cube\n    height: the height of the cube\n    \n    returns: the surface area of the cube\n    \"\"\"\n    return length * width * height",
    "import math\n\ndef area(side):\n    return side * side * math.pi\n\ndef cube_side(side):\n    return side * side * side\n\ndef main():\n    side = input(\"Enter side: \")\n    area = cube_side(side)\n    print(\"Area of the cube is %.2f\" % area)\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n@date: Feb-20-2015\n@author: pengjian\n\"\"\"\n\nimport numpy as np\nimport math\n\n# from mpl_toolkits.mplot3d import Axes3D\n# from matplotlib import pyplot as plt\n# import matplotlib.cm as cm\n\n# def plot(surface):\n#     plt.figure()\n#     plt.plot(surface[:,0], surface[:,1], surface[:,2], 'b-')\n#     plt.xlabel('x')\n#     plt.ylabel('y')\n#     plt.zlabel('z')\n#     plt.show()\n\n# def get_lateral_surface_area(cube_size):\n#     lateral_surface_area = cube_size * cube_size * cube_size\n#     return lateral_surface_area\n\ndef get_lateral_surface_area(cube_size):\n    lateral_surface_area = cube_size * cube_size\n    return lateral_surface_area\n\ndef get_cube_size(cube_surface_area):\n    cube_size = cube_surface_area / (cube_surface_area - cube_size)\n    return cube_size\n\ndef get_cube_surface_area(cube_size):\n    cube_surface_area = cube_size * cube_size * cube_size\n    return cube_surface_area\n\ndef get_cube_volume(cube_size):\n    cube_volume = cube_size * cube_size * cube_size\n    return cube_volume\n\ndef get_cube_surface_area_and_volume(cube_size):\n    cube_surface_area = cube_size * cube_size * cube_size\n    cube_volume = cube_size * cube_size * cube_size\n    return cube_surface_area, cube_volume\n\ndef get_cube_lateral_surface_area(cube_size):\n    cube_lateral_surface_area = cube_size * cube_size * cube_size\n    return cube_lateral_surface_area\n\ndef get_",
    "def lateral_surface_area(side):\n    \"\"\"\n    :param side:\n    :return:\n    \"\"\"\n    if side == 1:\n        return (side * side * side)\n    else:\n        return (side * side)\n\nif __name__ == \"__main__\":\n    side = int(input(\"Enter the side of the cube: \"))\n    print(lateral_surface_area(side))",
    "import math\n\ndef surface_area(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube with side_length side_length.\n\n    >>> surface_area(1)\n    4\n    >>> surface_area(2)\n    8\n    >>> surface_area(3)\n    12\n    >>> surface_area(4)\n    16\n    >>> surface_area(5)\n    20\n    >>> surface_area(6)\n    24\n    >>> surface_area(7)\n    28\n    >>> surface_area(8)\n    32\n    >>> surface_area(9)\n    36\n    >>> surface_area(10)\n    40\n    >>> surface_area(11)\n    44\n    >>> surface_area(12)\n    48\n    >>> surface_area(13)\n    52\n    >>> surface_area(14)\n    56\n    >>> surface_area(15)\n    60\n    \"\"\"\n    return side_length * side_length * math.pi\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef area(x, y, z):\n    return x * y * z\n\ndef lateral_surface_area(x, y, z):\n    return area(x, y, z) - (x + y + z)\n\ndef main():\n    # Input\n    x = int(input('Enter the length of side 1: '))\n    y = int(input('Enter the length of side 2: '))\n    z = int(input('Enter the length of side 3: '))\n    # Output\n    print('The lateral surface area is: {}'.format(lateral_surface_area(x, y, z)))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef lateral_surface_area(side_length, side_angle):\n    \"\"\"\n    :param side_length: the length of side of a cube\n    :param side_angle: the angle of side of a cube\n    :return: the lateral surface area of a cube\n    \"\"\"\n    return side_length * side_angle * math.pi\n\n\nif __name__ == \"__main__\":\n    print lateral_surface_area(3, 6)\n    print lateral_surface_area(1, 2)",
    "#!/usr/bin/env python\n\nimport math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Inputs:\n    length - length of the cube in the x direction\n    width - width of the cube in the y direction\n    height - height of the cube in the z direction\n    \"\"\"\n    return length * width * height\n\n# Test Cases\n\n# Length, Width and Height of a cube\n# 1.0, 1.0, 1.0\n# 1.0, 2.0, 1.0\n# 1.0, 1.0, 2.0\n# 2.0, 1.0, 1.0\n# 2.0, 2.0, 1.0\n# 2.0, 1.0, 2.0\n# 2.0, 2.0, 2.0\n# 3.0, 1.0, 1.0\n# 3.0, 2.0, 1.0\n# 3.0, 1.0, 2.0\n# 3.0, 2.0, 2.0\n# 3.0, 2.0, 3.0\n# 3.0, 3.0, 3.0\n\n# Calculate the lateral surface area of a cube\n# 1.0, 1.0, 1.0\n# 2.0, 1.0, 1.0\n# 3.0, 1.0, 1.0\n# 4.0, 1.0, 1.0\n# 5.0, 1.0, 1.0\n# 6.0, 1.0, 1.0\n# 7.0, 1.0, 1.0\n# 8.0, 1.0, 1.0\n# 9.0, 1.0, 1.0\n# 10.0, 1.0, 1.0\n\n# Calculate the lateral surface area of a cube\n# 1.0, 1.0, 1.0\n# 1.0, 2.0, 1.0\n# 1.0, 1.0, 2.0\n# 2.0, 1.0, 1.0\n# 2.0, 2.0, 1.0\n# 2.0, 1.0, 2.",
    "def cube_lateral_surface(width, height, depth):\n    \"\"\"\n    Inputs:\n    width - width of the cube\n    height - height of the cube\n    depth - depth of the cube\n    \"\"\"\n    return width * height * depth\n\n\ndef test_cube_lateral_surface():\n    assert cube_lateral_surface(3, 4, 5) == 984.0\n\nif __name__ == \"__main__\":\n    test_cube_lateral_surface()",
    "import math\n\ndef area(height, width, length):\n    return (height * width * length) / 2.0\n\ndef main():\n    height, width, length = map(int, input().split())\n\n    print(area(height, width, length))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :param length: length of the cube\n    :param width: width of the cube\n    :param height: height of the cube\n    :return: the lateral surface area of the cube\n    \"\"\"\n    return (length * width * height) / 8.0\n\n\ndef main():\n    \"\"\"\n    Unit tests for lateral_surface_area().\n    \"\"\"\n    assert lateral_surface_area(1, 1, 1) == 1.0, \"Error: lateral_surface_area(1, 1, 1) should return 1.0\"\n    assert lateral_surface_area(2, 2, 2) == 4.0, \"Error: lateral_surface_area(2, 2, 2) should return 4.0\"\n    assert lateral_surface_area(3, 2, 1) == 6.0, \"Error: lateral_surface_area(3, 2, 1) should return 6.0\"\n    assert lateral_surface_area(1, 1, 2) == 2.0, \"Error: lateral_surface_area(1, 1, 2) should return 2.0\"\n    assert lateral_surface_area(1, 2, 1) == 2.0, \"Error: lateral_surface_area(1, 2, 1) should return 2.0\"\n    assert lateral_surface_area(2, 1, 1) == 2.0, \"Error: lateral_surface_area(2, 1, 1) should return 2.0\"\n    assert lateral_surface_area(2, 1, 2) == 4.0, \"Error: lateral_surface_area(2, 1, 2) should return 4.0\"\n    assert lateral_surface_area(2, 2, 1) == 4.0, \"Error: lateral_surface_area(2, 2, 1) should return 4.0\"\n    assert lateral_surface_area(2, 2, 2) == 8.0, \"Error: lateral_surface_area(2, 2, 2) should return 8.0\"\n\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\n# import the modules needed to run the script\nimport math\nimport sys\n\n# create a cube with side length 1\ncube = [\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]\n]\n\n# calculate the lateral surface area of the cube\nlateral_surface_area = math.pi * cube[0][0] * cube[0][1]\n\n# print the result\nprint('The lateral surface area of the cube is %s' % lateral_surface_area)\n\n# if the user entered a negative number, print an error message\nif lateral_surface_area < 0:\n    print('Please enter a positive number for the lateral surface area.')\n\n# if the user entered a non-integer number, print an error message\nif not (lateral_surface_area % 1 == 0):\n    print('Please enter a positive number for the lateral surface area.')\n\n# print the result\nprint('The lateral surface area of the cube is %s' % lateral_surface_area)",
    "import math\n\ndef surface_area(side_lengths):\n    \"\"\"\n    Given a list of side lengths, return the lateral surface area of a cube.\n    \"\"\"\n    return sum(side_lengths) * (math.sqrt(3) / 2)\n\n# test cases\nside_lengths = [1, 2, 3]\nprint(surface_area(side_lengths))\nside_lengths = [1, 2, 3, 4]\nprint(surface_area(side_lengths))\nside_lengths = [1, 2, 3, 4, 5]\nprint(surface_area(side_lengths))",
    "#!/usr/bin/env python\n\nimport math\n\ndef cube_area(side):\n    \"\"\"Calculate the area of a cube with side length'side'\"\"\"\n    return side * side * side\n\ndef main():\n    print cube_area(50)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef get_surface_area(side_length):\n    \"\"\"\n    Returns the lateral surface area of a cube with side_length side_length.\n    \"\"\"\n    return math.pi * side_length * side_length\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    cube_side_length = input(\"What is the side length of the cube? \")\n    print(get_surface_area(cube_side_length))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef lateral_surface_area(side):\n    return side ** 2 * 0.5\n\nif __name__ == '__main__':\n    print lateral_surface_area(8)\n    print lateral_surface_area(9)\n    print lateral_surface_area(10)\n    print lateral_surface_area(11)\n    print lateral_surface_area(12)",
    "import math\n\ndef cube_lateral_surface_area(length, width, height):\n    \"\"\"\n    @param length: The length of the cube\n    @param width: The width of the cube\n    @param height: The height of the cube\n    @return: The lateral surface area of the cube\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Write a function to calculate the surface area of a cube.\n    \"\"\"\n    length = input(\"Please enter the length of the cube: \")\n    width = input(\"Please enter the width of the cube: \")\n    height = input(\"Please enter the height of the cube: \")\n    print(\"The lateral surface area of the cube is %d\" % cube_lateral_surface_area(length, width, height))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://github.com/lmak/Ai/blob/master/Ai/Ai/cube_area.py\n\n# https://stackoverflow.com/questions/16452837/area-of-a-rectangle-in-python\ndef area(side):\n    return side * side * 0.5\n\n\ndef cube_area(side):\n    return (side * side * 0.5) + (side * side * 0.5) + (side * side * 0.5)\n\n\ndef test():\n    assert(area(4) == cube_area(4))\n\n\nif __name__ == '__main__':\n    test()",
    "# Euler's Theorem\n# http://en.wikipedia.org/wiki/Euler%27s_theorem\n\n# http://www.mathopenref.com/area3.html\n\n# https://en.wikipedia.org/wiki/Sphere_of_equal_area\n\n# https://www.mathsisfun.com/geometry/sphere-area-3d\n\n# https://en.wikipedia.org/wiki/Sphere_of_equal_area\n\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http://www.mathopenref.com/area3.html\n# http",
    "# Import the modules\nimport math\nimport sys\nimport time\n\n# Define the area method\ndef area(side):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \"\"\"\n    return side * side * math.sqrt(3) / 2\n\n# Test the area method\ndef test_area(side, expected):\n    \"\"\"\n    Test the area method.\n    \"\"\"\n    area_actual = area(side)\n    if area_actual == expected:\n        print(\"Passed!\")\n    else:\n        print(\"Failed!\")\n        print(\"area(side): expected:\", expected, \"actual:\", area_actual)\n\n# Test the area method\ndef main():\n    \"\"\"\n    Test the area method.\n    \"\"\"\n    start = time.time()\n    test_area(1, 6.28)\n    test_area(2, 10.16)\n    test_area(3, 12.64)\n    test_area(4, 15.12)\n    test_area(5, 16.56)\n    test_area(6, 18.08)\n    test_area(7, 19.56)\n    test_area(8, 20.96)\n    test_area(9, 22.32)\n    test_area(10, 22.64)\n    test_area(11, 23.92)\n    test_area(12, 25.08)\n    test_area(13, 25.24)\n    test_area(14, 25.32)\n    test_area(15, 25.44)\n    test_area(16, 25.52)\n    test_area(17, 25.56)\n    test_area(18, 25.64)\n    test_area(19, 25.72)\n    test_area(20, 25.80)\n    test_area(21, 25.88)\n    test_area(22, 25.96)\n    test_area(23, 26.04)\n    test_area(24, 26.12)\n    test_area(25, 26.20)\n    test_area(26, 26.28)\n    test_area(27, 26.36)\n    test_",
    "#%%\nimport numpy as np\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Computes the lateral surface area of a cube.\n\n    Parameters\n    ----------\n    length : float\n        Length of the cube\n    width : float\n        Width of the cube\n    height : float\n        Height of the cube\n\n    Returns\n    -------\n    float\n        The lateral surface area of the cube\n    \"\"\"\n    return length * width * height\n\n#%%\nimport matplotlib.pyplot as plt\n\nlength = np.linspace(1,10,10)\nwidth = np.linspace(1,10,10)\nheight = np.linspace(1,10,10)\n\narea = lateral_surface_area(length, width, height)\n\nplt.figure()\nplt.plot(length, area)\nplt.show()",
    "from math import sqrt\n\ndef lateral_surface_area(side):\n    \"\"\"\n    Given a side of a cube, return its lateral surface area.\n    \"\"\"\n    return side * side * 0.5\n\nif __name__ == '__main__':\n    assert lateral_surface_area(4) == 24, \"lateral surface area of a 4-sided cube is 24\"\n    assert lateral_surface_area(6) == 42, \"lateral surface area of a 6-sided cube is 42\"\n    assert lateral_surface_area(8) == 64, \"lateral surface area of a 8-sided cube is 64\"\n    assert lateral_surface_area(10) == 100, \"lateral surface area of a 10-sided cube is 100\"",
    "from math import sqrt\n\ndef cube_surface_area(side_length):\n    \"\"\"\n    :param side_length: The side length of the cube\n    :return: The lateral surface area of the cube\n    \"\"\"\n    return side_length * side_length * side_length\n\ndef test_cube_surface_area():\n    assert cube_surface_area(1) == 1\n    assert cube_surface_area(2) == 4\n    assert cube_surface_area(3) == 9\n    assert cube_surface_area(4) == 16\n    assert cube_surface_area(5) == 25\n    assert cube_surface_area(6) == 36\n    assert cube_surface_area(7) == 49\n    assert cube_surface_area(8) == 64\n    assert cube_surface_area(9) == 81\n\nif __name__ == \"__main__\":\n    test_cube_surface_area()",
    "def area_cube(width, length, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube with dimensions width,\n    length, and height.\n    \"\"\"\n\n    # calculate the surface area\n    surface_area = width * length * height\n    return surface_area\n\n\n# test\nif __name__ == '__main__':\n    print('area_cube(3, 4, 5) = {}'.format(area_cube(3, 4, 5)))\n    print('area_cube(1, 2, 3) = {}'.format(area_cube(1, 2, 3)))",
    "import math\n\ndef surface(l, w, h):\n    return l * w * h\n\ndef area(l, w, h):\n    return l * w + w * h + h * l\n\ndef cube_area(l, w, h):\n    return l * w * h\n\ndef lateral_surface(l, w, h):\n    return l * w + w * h + h * l\n\nif __name__ == '__main__':\n    print(surface(2, 3, 4))\n    print(area(2, 3, 4))\n    print(cube_area(2, 3, 4))\n    print(lateral_surface(2, 3, 4))",
    "from math import sqrt\n\n\ndef lsa(x, y, z):\n    \"\"\"\n    Return the lateral surface area of a cube.\n\n    :param x: The length of one side of the cube.\n    :param y: The width of one side of the cube.\n    :param z: The height of one side of the cube.\n    :return: The lateral surface area of the cube.\n    \"\"\"\n\n    return sqrt(x ** 2 + y ** 2 + z ** 2)\n\nif __name__ == '__main__':\n    assert lsa(1, 1, 1) == 1\n    assert lsa(2, 1, 1) == 2\n    assert lsa(1, 2, 1) == 2\n    assert lsa(1, 1, 2) == 2\n    assert lsa(1, 1, 1) == 1\n\n    assert lsa(2, 2, 2) == 4\n    assert lsa(2, 2, 2.5) == 4.5\n    assert lsa(2, 2, 2.5) == 4.5\n    assert lsa(2, 2, 2.5) == 4.5\n    assert lsa(2, 2, 2.5) == 4.5",
    "import math\n\ndef surface(side):\n    \"\"\"\n    Compute the lateral surface area of a cube.\n    \"\"\"\n    return side * side * math.pi\n\nif __name__ == \"__main__\":\n    \"\"\"\n    Test cases.\n    \"\"\"\n    print(surface(3))\n    print(surface(4))\n    print(surface(5))",
    "import math\n\n\ndef lateral_surface_area(side_length):\n    \"\"\"\n    :param side_length: Side length of the cube\n    :return: lateral surface area of the cube\n    \"\"\"\n    return side_length * side_length * 3\n\n\nif __name__ == '__main__':\n    print lateral_surface_area(1)\n    print lateral_surface_area(2)\n    print lateral_surface_area(3)\n    print lateral_surface_area(4)\n    print lateral_surface_area(5)\n    print lateral_surface_area(6)\n    print lateral_surface_area(7)\n    print lateral_surface_area(8)\n    print lateral_surface_area(9)",
    "# --- input ---\n\n# Input\n# ----------\n\n# Input\n# ----------\n\n# Input\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n# Output\n# ----------\n\n#",
    "def area(x, y, z):\n    return x*y + y*z + z*x\n\ndef lateral_surface_area(x, y, z):\n    return x*y + y*z + z*x\n\nprint(area(5, 5, 5))\nprint(lateral_surface_area(5, 5, 5))",
    "import math\n\n\ndef lateral_surface_area(height, width, length):\n    \"\"\"\n    :param height: Height of the cube\n    :param width: Width of the cube\n    :param length: Length of the cube\n    :return: Surface area of the cube\n    \"\"\"\n\n    return math.pi * (width * length)\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert lateral_surface_area(1, 1, 1) == 1, \"Example\"\n    assert lateral_surface_area(2, 2, 2) == 4, \"Example\"\n    assert lateral_surface_area(3, 3, 3) == 9, \"Example\"\n    assert lateral_surface_area(4, 4, 4) == 16, \"Example\"\n    assert lateral_surface_area(5, 5, 5) == 25, \"Example\"",
    "import math\n\ndef cube_surface_area(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    :param side_length: The side length of the cube.\n    :returns: The lateral surface area of the cube.\n    \"\"\"\n    return side_length ** 2 * math.pi\n\nif __name__ == \"__main__\":\n    \"\"\"\n    Test the function by running it on a cube of side length 10.\n    \"\"\"\n    print cube_surface_area(10)",
    "from math import sqrt\n\ndef surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube\n    \"\"\"\n    return length * width * height\n\ndef test_surface_area(length, width, height):\n    \"\"\"\n    Test that the lateral surface area of a cube is computed correctly\n    \"\"\"\n    assert surface_area(length, width, height) == 4 * length * width\n\ndef main():\n    test_surface_area(1, 1, 1)\n    test_surface_area(2, 1, 1)\n    test_surface_area(1, 2, 1)\n    test_surface_area(1, 1, 2)\n    test_surface_area(2, 2, 1)\n    test_surface_area(2, 2, 2)\n    test_surface_area(2, 2, 2)\n\nif __name__ == '__main__':\n    main()",
    "# TODO:\n# - Add a function to calculate the surface area of a sphere.\n\nimport math\nimport numpy as np\n\ndef surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    :param length: Length of the cube\n    :param width: Width of the cube\n    :param height: Height of the cube\n    :return: Surface area of the cube\n    \"\"\"\n    return math.pi * (length * width + width * height + height * length) / 2\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(surface_area(6, 8, 9))\n\nif __name__ == '__main__':\n    main()",
    "def surface_area(cube_size):\n    return cube_size * cube_size * 4\n\nprint surface_area(10)",
    "import math\n\ndef area(x, y, z):\n    \"\"\"\n    Calculate the area of a cube with the given dimensions.\n    \"\"\"\n    return x * y * z\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    return math.pi * (length * width + width * height + length * height) / 12\n\ndef main():\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    length = input(\"Enter length: \")\n    width = input(\"Enter width: \")\n    height = input(\"Enter height: \")\n    print(area(length, width, height),'= ', lateral_surface_area(length, width, height))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef lateral_surface_area(width, height, length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    :param width: The width of the cube.\n    :param height: The height of the cube.\n    :param length: The length of the cube.\n    :return: The lateral surface area of the cube.\n    \"\"\"\n    return math.pi * (width ** 2 + height ** 2 + length ** 2) / 6"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}