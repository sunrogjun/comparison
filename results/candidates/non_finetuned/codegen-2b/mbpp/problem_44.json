{
  "problem": {
    "task_id": "MBPP/55",
    "prompt": "Write a function to find t-nth term of geometric series.",
    "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
    "test_list": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ],
    "challenge_test_list": [],
    "problem_id": 44
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def findTerm(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 6\n        if n == 9:\n            return 7\n        if n == 10:\n            return 8\n        if n == 11:\n            return 9\n        if n == 12:\n            return 10\n        if n == 13:\n            return 11\n        if n == 14:\n            return 12\n        if n == 15:\n            return 13\n        if n == 16:\n            return 14\n        if n == 17:\n            return 15\n        if n == 18:\n            return 16\n        if n == 19:\n            return 17\n        if n == 20:\n            return 18\n        if n == 21:\n            return 19\n        if n == 22:\n            return 20\n        if n == 23:\n            return 21\n        if n == 24:\n            return 22\n        if n == 25:\n            return 23\n        if n == 26:\n            return 24\n        if n == 27:\n            return 25\n        if n == 28:\n            return 26\n        if n == 29:\n            return 27\n        if n == 30:\n            return 28\n        if n == 31:\n            return 29\n        if n == 32:\n            return 30\n        if n == 33:\n            return 31\n        if n == 34:\n            return 32\n        if n == 35:\n            return 33\n        if n == 36:\n            return 34\n        if n == 37:\n            return 35\n        if n == 38:\n            return 36\n        if n == 39:\n            return 37\n        if n == 40:\n            return 38\n        if n == 41:\n            return 39\n        if n == 42:\n            return 40\n        if n == 43:\n            return 41\n        if",
    "def t_nth_geometric(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: float\n    \"\"\"\n    return t_nth_geometric_recursive(n, t, 1)\n\ndef t_nth_geometric_recursive(n, t, term):\n    if n == 0:\n        return term\n    return t_nth_geometric_recursive(n-1, t, term * (1 + term))",
    "def term(n):\n    if n == 0:\n        return 1\n    a = term(n-1)\n    b = 1\n    for i in range(2, n+1):\n        b = b * (n-i+1) / i\n    return a * b\n\nprint term(10)\n\n\"\"\"\nOutput:\n\n1\n\"\"\"",
    "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def getTerm(self, n, k):\n        if n == 0:\n            return 1\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k == 2:\n            return n*n\n        if k % 2 == 0:\n            return self.getTerm(n-1, k/2) * self.getTerm(n-1, k/2)\n        else:\n            return self.getTerm(n-1, k/2) * self.getTerm(n-1, k/2-1)\n\n\n# Note:\n# 1. We can do it by DP, but it will be too slow.\n# 2. We can do it by recursion, but it's not very readable.",
    "from math import factorial\n\ndef t_nth_term(t, n):\n    \"\"\"\n    Find t-nth term of geometric series.\n\n    :param t: integer\n    :param n: integer\n    :return: float\n    \"\"\"\n    if t < 0 or n < 0:\n        raise ValueError(\"t and n should be non-negative\")\n\n    if t == 0:\n        return 0\n\n    if t == 1:\n        return 1\n\n    return sum(factorial(n) / factorial(i) * t_nth_term(t - i, n - i)\n               for i in range(1, t))\n\n\nif __name__ == '__main__':\n    print(t_nth_term(4, 5))",
    "def get_t_nth_term(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # n is the term we want, t is the sum of all the terms\n    # n-1 is the term we want, t is the sum of all the terms\n    t = 1\n    for i in range(1, n+1):\n        t += 1\n    return t\n\nif __name__ == '__main__':\n    print get_t_nth_term(2)\n    print get_t_nth_term(3)\n    print get_t_nth_term(4)\n    print get_t_nth_term(5)\n    print get_t_nth_term(6)\n    print get_t_nth_term(7)\n    print get_t_nth_term(8)\n    print get_t_nth_term(9)\n    print get_t_nth_term(10)\n    print get_t_nth_term(11)\n    print get_t_nth_term(12)\n    print get_t_nth_term(13)\n    print get_t_nth_term(14)\n    print get_t_nth_term(15)\n    print get_t_nth_term(16)\n    print get_t_nth_term(17)\n    print get_t_nth_term(18)\n    print get_t_nth_term(19)\n    print get_t_nth_term(20)\n    print get_t_nth_term(21)\n    print get_t_nth_term(22)\n    print get_t_nth_term(23)\n    print get_t_nth_term(24)\n    print get_t_nth_term(25)\n    print get_t_nth_term(26)\n    print get_t_nth_term(27)\n    print get_t_nth_term(28)\n    print get_t_nth_term(29)\n    print get_t_nth_",
    "from math import floor, log, pow\n\ndef geometric_series(n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n    return pow(1.0, 1.0/n)\n\nif __name__ == '__main__':\n    n = int(input('Enter n: '))\n    t = int(input('Enter t: '))\n    print(geometric_series(n))",
    "from math import exp, log, sqrt\n\ndef t_nth_term(t, n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example\n    Given t = 1 and n = 3, return 3.\n\n    Note\n    If t <= 0, return 0.\n    If t > n, return 0.\n    \"\"\"\n    if t <= 0:\n        return 0\n    if n <= 1:\n        return 1\n    if t == n:\n        return 1\n    if t > n:\n        return 0\n    if n % 2 == 0:\n        return t_nth_term(t - 1, n // 2) * t_nth_term(t - 1, n // 2)\n    else:\n        return t_nth_term(t - 1, n - 1) * t_nth_term(t - 1, n - 1)\n\n\nif __name__ == '__main__':\n    print(t_nth_term(1, 3))\n    print(t_nth_term(2, 3))\n    print(t_nth_term(5, 3))\n    print(t_nth_term(10, 3))\n    print(t_nth_term(5, 1))\n    print(t_nth_term(5, 2))\n    print(t_nth_term(5, 3))\n    print(t_nth_term(5, 4))\n    print(t_nth_term(5, 5))\n    print(t_nth_term(5, 6))\n    print(t_nth_term(5, 7))\n    print(t_nth_term(5, 8))",
    "#!/usr/bin/python\n\n# @include\ndef find_t_nth_term(n, t):\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    return t * find_t_nth_term(n - 1, t)\n\n\n# @exclude\n\nclass Test(unittest.TestCase):\n\n    def test_find_t_nth_term(self):\n        self.assertEqual(find_t_nth_term(0, 1), 1)\n        self.assertEqual(find_t_nth_term(1, 1), 1)\n        self.assertEqual(find_t_nth_term(1, 2), 2)\n        self.assertEqual(find_t_nth_term(2, 2), 4)\n        self.assertEqual(find_t_nth_term(2, 3), 8)\n        self.assertEqual(find_t_nth_term(3, 3), 27)\n        self.assertEqual(find_t_nth_term(4, 3), 243)\n        self.assertEqual(find_t_nth_term(5, 3), 2835)\n        self.assertEqual(find_t_nth_term(6, 3), 2835)\n        self.assertEqual(find_t_nth_term(7, 3), 2835)\n        self.assertEqual(find_t_nth_term(8, 3), 2835)\n        self.assertEqual(find_t_nth_term(9, 3), 2835)\n        self.assertEqual(find_t_nth_term(10, 3), 2835)\n        self.assertEqual(find_t_nth_term(11, 3), 2835)\n        self.assertEqual(find_t_nth_term(12, 3), 2835)\n        self.assertEqual(find_t_nth_term(13, 3), 2835)\n        self.assertEqual(find_t_nth_term(14, 3), 2835)\n        self.assertEqual",
    "def nth_term(n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n\n    # The geometric series starts with 1.\n    # The geometric series is defined as follows:\n    # x(n) = x(n-1) * x(n-2) * x(n-3) *... * x(0)\n    # The n-th term is x(n).\n    # For example, the nth term of geometric series for n = 1 is 1.\n    # The nth term of geometric series for n = 2 is x(2) = 1 + x(1) * x(0).\n    # The nth term of geometric series for n = 3 is x(3) = 1 + x(2) * x(1) * x(0).\n    # The nth term of geometric series for n = 4 is x(4) = 1 + x(3) * x(2) * x(1) * x(0).\n    #...\n    # The nth term of geometric series for n = 8 is x(8) = 1 + x(7) * x(6) * x(5) * x(4) * x(3) * x(2) * x(1) * x(0).\n\n    # The series is defined as follows:\n    # x(n) = x(n-1) + x(n-2) + x(n-3) + x(n-4) + x(n-5) + x(n-6) + x(n-7) + x(n-8) +...\n    # The n-th term is x(n).\n    # For example, the nth term of geometric series for n = 1 is 1.\n    # The nth term of geometric series for n = 2 is x(2) = x(1) + x(0).\n    # The nth term of geometric series for n = 3 is x(3) = x(2) + x(1) * x(0).\n    # The nth term of geometric series for n = 4 is x(4) = x(3) + x(2) * x(1) * x(0).\n    #...\n    # The n",
    "import math\n\n\ndef t_nth_geometric_term(n, t):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example:\n    >>> t_nth_geometric_term(3, 3)\n    1.0\n    >>> t_nth_geometric_term(3, 4)\n    2.0\n    >>> t_nth_geometric_term(3, 5)\n    3.0\n    >>> t_nth_geometric_term(3, 6)\n    5.0\n    >>> t_nth_geometric_term(3, 7)\n    7.0\n    >>> t_nth_geometric_term(3, 8)\n    9.0\n    >>> t_nth_geometric_term(3, 9)\n    10.0\n    >>> t_nth_geometric_term(3, 10)\n    11.0\n    >>> t_nth_geometric_term(3, 11)\n    12.0\n    >>> t_nth_geometric_term(3, 12)\n    13.0\n    >>> t_nth_geometric_term(3, 13)\n    14.0\n    >>> t_nth_geometric_term(3, 14)\n    15.0\n    >>> t_nth_geometric_term(3, 15)\n    16.0\n    >>> t_nth_geometric_term(3, 16)\n    17.0\n    >>> t_nth_geometric_term(3, 17)\n    18.0\n    >>> t_nth_geometric_term(3, 18)\n    19.0\n    >>> t_nth_geometric_term(3, 19)\n    20.0\n    >>> t_nth_geometric_term(3, 20)\n    21.0\n    >>> t_nth_geometric_term(3, 21)\n    22.0\n    >>> t_nth_geometric_term(3, 22)\n    23.0\n    >>> t_nth_geometric_term(3, 23)\n    24.0\n    >>> t_nth",
    "def t_nth_term_geometric_series(n, a, b):\n    \"\"\"\n    Inputs:\n    n - term number\n    a - base\n    b - exponent\n    Output:\n    The n-th term of geometric series.\n    \"\"\"\n    result = a\n    for i in range(n):\n        result = (result * b) % 1000000007\n    return result\n\n\n# Your code should pass the following test cases.\n# Note: You may assume a is not less than b.\n\ntest_cases = [\n    (2, 3, 2),\n    (3, 2, 3),\n    (4, 3, 7),\n    (5, 4, 11),\n    (6, 5, 17),\n    (7, 6, 23),\n    (8, 7, 29),\n    (9, 8, 37),\n    (10, 9, 43),\n    (11, 10, 49),\n    (12, 11, 55),\n    (13, 12, 61),\n    (14, 13, 67),\n    (15, 14, 73),\n    (16, 15, 79),\n    (17, 16, 85),\n    (18, 17, 91),\n    (19, 18, 97),\n    (20, 19, 103),\n    (21, 20, 109),\n    (22, 21, 115),\n    (23, 22, 121),\n    (24, 23, 127),\n    (25, 24, 133),\n    (26, 25, 139),\n    (27, 26, 145),\n    (28, 27, 151),\n    (29, 28, 157),\n    (30, 29, 163),\n    (31, 30, 169),\n    (32, 31, 175),\n    (33, 32, 181),\n    (34, 33, 187),\n    (35, 34, 193),\n    (36, 35, 199),\n    (37, 36, 205),\n    (38, 37, 211),\n    (39, 38, 217),\n    (40, 39, 223),\n    (41, 40, 229),\n    (42, 41, 235),\n    (43, 42, 241),\n    (44, 43, 247",
    "def tnth_geometric_series(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    return (1+n)**t\n\nif __name__ == '__main__':\n    t = int(input())\n    n = int(input())\n    print(tnth_geometric_series(t, n))",
    "from math import floor, log\n\ndef tnth(t, n):\n    x = 1\n    for i in range(1, n):\n        x = x * t\n    return x\n\ndef tnth_2(t, n):\n    return tnth(t, n) / t\n\ndef tnth_3(t, n):\n    return tnth(t, n) / t / t\n\ndef tnth_4(t, n):\n    return tnth(t, n) / t / t / t\n\ndef tnth_5(t, n):\n    return tnth(t, n) / t / t / t / t\n\ndef tnth_6(t, n):\n    return tnth(t, n) / t / t / t / t / t\n\ndef tnth_7(t, n):\n    return tnth(t, n) / t / t / t / t / t / t\n\ndef tnth_8(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t\n\ndef tnth_9(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t / t\n\ndef tnth_10(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t / t / t\n\ndef tnth_11(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t / t / t / t\n\ndef tnth_12(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t / t / t / t / t\n\ndef tnth_13(t, n):\n    return tnth(t, n) / t / t / t / t / t / t / t / t / t / t / t / t\n\ndef tnth_14(t, n):\n    return tnth(t, n",
    "def tnth_term(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1 + (n - 1) * (1",
    "import math\n\n\ndef geometric_series(n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example\n    Given n = 2, the output should be:\n    t = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    \"\"\"\n    if n == 1:\n        return 1\n    return geometric_series(n - 1) + (n - 1) * math.log(n, 2)\n\nif __name__ == \"__main__\":\n    print(geometric_series(2))\n    print(geometric_series(3))",
    "import math\n\ndef t_nth_term(n, t):\n    \"\"\"\n    Input:\n    n: an integer\n    t: a number\n    Output:\n    the t-nth term of geometric series\n    \"\"\"\n    return t ** (1 / n)\n\nif __name__ == \"__main__\":\n    # test cases\n    assert t_nth_term(1, 1) == 1\n    assert t_nth_term(2, 1) == 1\n    assert t_nth_term(3, 1) == 1\n    assert t_nth_term(4, 1) == 1\n    assert t_nth_term(5, 1) == 1\n    assert t_nth_term(6, 1) == 1\n    assert t_nth_term(7, 1) == 1\n    assert t_nth_term(8, 1) == 1\n    assert t_nth_term(9, 1) == 1\n    assert t_nth_term(10, 1) == 1\n    assert t_nth_term(11, 1) == 1\n    assert t_nth_term(12, 1) == 1\n    assert t_nth_term(13, 1) == 1\n    assert t_nth_term(14, 1) == 1\n    assert t_nth_term(15, 1) == 1\n    assert t_nth_term(16, 1) == 1\n    assert t_nth_term(17, 1) == 1\n    assert t_nth_term(18, 1) == 1\n    assert t_nth_term(19, 1) == 1\n    assert t_nth_term(20, 1) == 1\n    assert t_nth_term(21, 1) == 1\n    assert t_nth_term(22, 1) == 1\n    assert t_nth_term(23, 1) == 1\n    assert t_nth_term(24, 1) == 1\n    assert t_nth_term(25, 1) == 1\n    assert t_nth_term(26, 1) == 1\n    assert t_nth_term(27, 1) ==",
    "import math\nfrom collections import Counter\n\ndef t_nth_term(n, term):\n    \"\"\"\n    nth term of geometric series is the sum of the terms of the geometric series\n    from 1 to n.\n\n    Example\n    >>> t_nth_term(4, 1)\n    1\n    >>> t_nth_term(4, 2)\n    2\n    >>> t_nth_term(4, 3)\n    6\n    >>> t_nth_term(4, 4)\n    24\n    >>> t_nth_term(4, 5)\n    120\n    >>> t_nth_term(4, 6)\n    720\n    >>> t_nth_term(4, 7)\n    5040\n    >>> t_nth_term(4, 8)\n    40320\n    >>> t_nth_term(4, 9)\n    362880\n    >>> t_nth_term(4, 10)\n    3628800\n    >>> t_nth_term(4, 11)\n    39916800\n    >>> t_nth_term(4, 12)\n    479001600\n    >>> t_nth_term(4, 13)\n    6227020800\n    >>> t_nth_term(4, 14)\n    87178291200\n    >>> t_nth_term(4, 15)\n    1307674368000\n    >>> t_nth_term(4, 16)\n    20922789888000\n    >>> t_nth_term(4, 17)\n    355687428096000\n    >>> t_nth_term(4, 18)\n    6.22089212800000e+18\n    >>> t_nth_term(4, 19)\n    1.22089210800000e+19\n    >>> t_nth_term(4, 20)\n    2.44173044800000e+20\n    >>> t_nth_term(4, 21)\n    6.88015986240000e+21\n    >>> t_nth_term(4, 22)\n    1.6228378240000e+22\n    >>> t_nth_",
    "import timeit\n\nstart = timeit.default_timer()\n\ndef tnth_term(n, t):\n    \"\"\"\n    >>> tnth_term(1, 1)\n    1\n    >>> tnth_term(1, 2)\n    0.5\n    >>> tnth_term(2, 2)\n    0.25\n    >>> tnth_term(3, 2)\n    0.125\n    >>> tnth_term(4, 2)\n    0.0625\n    >>> tnth_term(5, 2)\n    0.03125\n    >>> tnth_term(6, 2)\n    0.015625\n    >>> tnth_term(7, 2)\n    0.0078125\n    >>> tnth_term(8, 2)\n    0.00390625\n    \"\"\"\n    if n < t:\n        return 0\n    return tnth_term(n, t-1) + tnth_term(n-1, t) / t\n\nend = timeit.default_timer()\nprint(end - start)",
    "class Solution(object):\n    def tnth_term(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return t\n        if t == 1:\n            return 1 / n\n        if t == 2:\n            return 1 / n - 1\n        if t == 3:\n            return 1 / n - 2\n        if t == 4:\n            return 1 / n - 3\n        if t == 5:\n            return 1 / n - 4\n        if t == 6:\n            return 1 / n - 5\n        if t == 7:\n            return 1 / n - 6\n        if t == 8:\n            return 1 / n - 7\n        if t == 9:\n            return 1 / n - 8\n        if t == 10:\n            return 1 / n - 9\n        if t == 11:\n            return 1 / n - 10\n        if t == 12:\n            return 1 / n - 11\n        if t == 13:\n            return 1 / n - 12\n        if t == 14:\n            return 1 / n - 13\n        if t == 15:\n            return 1 / n - 14\n        if t == 16:\n            return 1 / n - 15\n        if t == 17:\n            return 1 / n - 16\n        if t == 18:\n            return 1 / n - 17\n        if t == 19:\n            return 1 / n - 18\n        if t == 20:\n            return 1 / n - 19\n        if t == 21:\n            return 1 / n - 20\n        if t == 22:\n            return 1 / n - 21\n        if t == 23:\n            return 1 / n - 22\n        if t == 24:\n            return 1 / n - 23\n        if t == 25:\n            return 1 / n - 24\n        if t == 26:\n            return 1 / n - 25\n        if t == 27:\n            return 1 / n - 26\n        if t == 28:\n            return 1 / n - 27\n        if t == 29:\n            return 1 / n - 28\n        if t == 30:",
    "import math\n\ndef term(t, n):\n    return math.factorial(n) / (math.factorial(n-t) * math.factorial(t))\n\ndef main():\n    t = int(input())\n    n = int(input())\n    print(term(t, n))\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} t\n    # @return {integer}\n    def getTerm(self, n, t):\n        return 0\n\n    # @param {integer} n\n    # @param {integer} t\n    # @return {boolean}\n    def isLeaf(self, n, t):\n        return n < 0\n\n    # @param {integer} n\n    # @param {integer} t\n    # @return {boolean}\n    def isTree(self, n, t):\n        return n >= 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getTerm(1, 3)\n    print s.isLeaf(1, 3)\n    print s.isTree(1, 3)",
    "def get_geometric_series(t, n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1.0\n    if n == 2:\n        return 1.0 / 2.0\n    if n == 3:\n        return 1.0 / 6.0\n    if n == 4:\n        return 1.0 / 24.0\n    if n == 5:\n        return 1.0 / 120.0\n    if n == 6:\n        return 1.0 / 720.0\n    if n == 7:\n        return 1.0 / 5040.0\n    if n == 8:\n        return 1.0 / 40320.0\n    if n == 9:\n        return 1.0 / 362880.0\n    if n == 10:\n        return 1.0 / 39916800.0\n    if n == 11:\n        return 1.0 / 479001600.0\n    if n == 12:\n        return 1.0 / 6227020800.0\n    if n == 13:\n        return 1.0 / 12245097600.0\n    if n == 14:\n        return 1.0 / 12089258240.0\n    if n == 15:\n        return 1.0 / 3036451792.0\n    if n == 16:\n        return 1.0 / 6046517632.0\n    if n == 17:\n        return 1.0 / 1307674368.0\n    if n == 18:\n        return 1.0 / 2092278912.0\n    if n == 19:\n        return 1.0 / 4104676976.0\n    if n == 20:\n        return 1.0 / 8209302368.0\n    if n == 21:\n        return 1.0 / 16587969184.0\n    if n == 22:\n        return 1.0 / 26211078400.0\n    if n == 23:\n        return 1.0 / 52274678240.0\n    if n == 24:\n        return 1.0 / 108399921920.0\n    if n",
    "def find_t_nth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for i in range(1, t+1):\n        ans += (t-i) * (t+i) / (i*i)\n    return ans\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: str\n        \"\"\"\n        n, t = cipher.split(' ')\n        return \"%s%d\" % (n, find_t_nth_term(int(n), int(t)))",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if t == 1:\n            return n\n        if n == 0:\n            return 0\n        if t == 2:\n            return 1\n        return self.getTerm(n - 1, t - 1) + self.getTerm(n - 1, t - 2)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getTerm(5, 2))",
    "from math import log\nfrom math import sqrt\nfrom math import exp\n\n\ndef find_t_nth_term(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: float\n    \"\"\"\n    if t < 0:\n        raise ValueError(\"t must be non-negative\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if t == 0:\n        raise ValueError(\"t must be non-zero\")\n\n    def term(t, n):\n        if t == n:\n            return 1\n        return term(t - 1, n) + (t - 1) * term(t - 1, n - 1)\n\n    return term(t, n)\n\n\ndef test():\n    assert find_t_nth_term(2, 1) == 1\n    assert find_t_nth_term(3, 1) == 1\n    assert find_t_nth_term(4, 1) == 1\n    assert find_t_nth_term(5, 1) == 1\n    assert find_t_nth_term(6, 1) == 2\n    assert find_t_nth_term(7, 1) == 2\n    assert find_t_nth_term(8, 1) == 2\n    assert find_t_nth_term(9, 1) == 2\n    assert find_t_nth_term(10, 1) == 2\n    assert find_t_nth_term(11, 1) == 2\n    assert find_t_nth_term(12, 1) == 2\n    assert find_t_nth_term(13, 1) == 2\n    assert find_t_nth_term(14, 1) == 2\n    assert find_t_nth_term(15, 1) == 2\n    assert find_t_nth_term(16, 1) == 2\n    assert find_t_nth_term(17, 1) == 2\n    assert find_t_nth_term(18, 1) == 2\n    assert find_t_nth_term(19, 1) == 2\n    assert find_t_",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def tnth_geometric(self, n, p):\n        \"\"\"\n        :type n: int\n        :type p: int\n        :rtype: float\n        \"\"\"\n        # TODO:\n        # 1. find the factorial\n        # 2. find the geometric series\n        # 3. return the sum of the terms\n        # 4. find the last term\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if p == 0:\n            return 1\n        if p == 1:\n            return 1\n        if p == 2:\n            return 1\n        if p == 3:\n            return 1\n        if p == 4:\n            return 1\n        if p == 5:\n            return 1\n        if p == 6:\n            return 1\n        if p == 7:\n            return 1\n        if p == 8:\n            return 1\n        if p == 9:\n            return 1\n        if p == 10:\n            return 1\n        if p == 11:\n            return 1\n        if p == 12:\n            return 1\n        if p == 13:\n            return 1\n        if p == 14:\n            return 1\n        if p == 15:\n            return 1\n        if p == 16:\n            return 1\n        if p == 17:\n            return 1\n        if p == 18:\n            return 1\n        if p == 19:\n            return 1\n        if p == 20:\n            return 1\n        if p == 21:\n            return 1\n        if p == 22:\n            return 1\n        if p == 23:\n            return 1\n        if p == 24:\n            return 1\n        if p == 25:\n            return 1\n        if p == 26:\n            return 1\n        if p == 27:\n            return 1\n        if p == 28:\n            return 1\n        if p == 29:",
    "import math\n\ndef tnth_geometric_series(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    term = 1\n    for i in range(2, n + 1):\n        term *= i\n    return term\n\nif __name__ == '__main__':\n    print(tnth_geometric_series(5))\n    print(tnth_geometric_series(10))\n    print(tnth_geometric_series(15))",
    "from math import log\n\ndef nth_term(n, x):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example:\n    nth_term(4, x) -> exp(log(x) / 4)\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    if n == 2:\n        return x * x\n    if n == 3:\n        return x * x * x\n    if n > 3:\n        return (1 - log(x) / n) * nth_term(n - 1, x)\n    else:\n        return 1\n\nprint(nth_term(4, 10))",
    "class Solution:\n    # @return an integer\n    def getTerm(self, n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            return 1\n        if n == 24:\n            return 1\n        if n == 25:\n            return 1\n        if n == 26:\n            return 1\n        if n == 27:\n            return 1\n        if n == 28:\n            return 1\n        if n == 29:\n            return 1\n        if n == 30:\n            return 1\n        if n == 31:\n            return 1\n        if n == 32:\n            return 1\n        if n == 33:\n            return 1\n        if n == 34:\n            return 1\n        if n == 35:\n            return 1\n        if n == 36:\n            return 1\n        if n == 37:\n            return 1\n        if n == 38:\n            return 1\n        if n == 39:\n            return 1\n        if n == 40:\n            return 1\n        if n == 41:\n            return 1\n        if n == 42:\n            return 1\n        if n == 43:\n            return 1\n        if n == 44:",
    "# https://www.hackerrank.com/challenges/geometric-series/problem\n\ndef geometric_series(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    s = 1\n    for i in range(1, t):\n        s = s * n\n    return s\n\nif __name__ == \"__main__\":\n    t = int(input())\n    n = int(input())\n    print(geometric_series(t, n))",
    "def nth_term(n, x):\n    \"\"\"\n    Input: n and x are integers.\n    Output: The nth term of geometric series.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    return x + nth_term(n - 1, x * x)\n\nprint(nth_term(5, 2))\n\n# Output:\n# 4.0",
    "import math\nfrom typing import List\n\ndef get_t_nth_term(n: int, t: int) -> float:\n    \"\"\"\n    Write a function to calculate t-nth term of geometric series.\n    t is the term to be calculated, n is the index of the term,\n    and the return value is the value of the term.\n    \"\"\"\n    return (math.factorial(n) / (math.factorial(n-t) * math.factorial(t)))\n\n\nclass Solution:\n    def calculate(self, n: int, t: int) -> float:\n        \"\"\"\n        Write a function to calculate t-nth term of geometric series.\n        t is the term to be calculated, n is the index of the term,\n        and the return value is the value of the term.\n        \"\"\"\n        return get_t_nth_term(n, t)",
    "# https://leetcode.com/problems/find-t-th-term-of-geometric-series/discuss/81461/Python-solution\n\nclass Solution(object):\n    def findTerm(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # n is 1\n        if n == 1:\n            return 1\n\n        # n is 2\n        if n == 2:\n            return 1\n\n        # n is 3\n        if n == 3:\n            return 1\n\n        # n is 4\n        if n == 4:\n            return 2\n\n        # n is 5\n        if n == 5:\n            return 2\n\n        # n is 6\n        if n == 6:\n            return 3\n\n        # n is 7\n        if n == 7:\n            return 3\n\n        # n is 8\n        if n == 8:\n            return 4\n\n        # n is 9\n        if n == 9:\n            return 4\n\n        # n is 10\n        if n == 10:\n            return 5\n\n        # n is 11\n        if n == 11:\n            return 5\n\n        # n is 12\n        if n == 12:\n            return 6\n\n        # n is 13\n        if n == 13:\n            return 6\n\n        # n is 14\n        if n == 14:\n            return 7\n\n        # n is 15\n        if n == 15:\n            return 7\n\n        # n is 16\n        if n == 16:\n            return 8\n\n        # n is 17\n        if n == 17:\n            return 8\n\n        # n is 18\n        if n == 18:\n            return 9\n\n        # n is 19\n        if n == 19:\n            return 9\n\n        # n is 20\n        if n == 20:\n            return 10\n\n        # n is 21\n        if n == 21:\n            return 10\n\n        # n is 22\n        if n == 22:\n            return 11\n\n        # n is 23\n        if n == 23:\n            return 11\n\n        # n is 24\n        if n == 24:\n            return 12\n\n        # n is 25\n        if n == 25:\n            return 12\n\n        # n is 26\n        if n ==",
    "def find_t(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n",
    "import math\n\n\ndef t_nth(n, t):\n    \"\"\"\n    :type n: int\n    :type t: float\n    :rtype: float\n    \"\"\"\n    return math.exp(t) / (math.factorial(n) * math.factorial(n - t))\n\n\nif __name__ == '__main__':\n    assert t_nth(1, 2) == 1.0\n    assert t_nth(3, 1.0) == 1.0\n    assert t_nth(3, 0.5) == 0.5\n    assert t_nth(10, 1) == 1.0\n    assert t_nth(10, 2) == 2.0\n    assert t_nth(10, 3) == 3.0\n    assert t_nth(10, 4) == 6.0\n    assert t_nth(10, 5) == 20.0\n    assert t_nth(10, 6) == 42.0\n    assert t_nth(10, 7) == 132.0\n    assert t_nth(10, 8) == 286.0\n    assert t_nth(10, 9) == 1562.0",
    "import numpy as np\n\ndef t_nth_term(n, t):\n    return np.exp(1.0/t) + (np.exp(1.0/t) - 1.0) * (n + 1) / (n * t)\n\nif __name__ == \"__main__\":\n    print t_nth_term(1, 2)\n    print t_nth_term(1, 10)\n    print t_nth_term(1, 100)",
    "def nth_term(n, t):\n    return ((1 - 1/n) ** (t/2)) ** (1/n)\n\n\nif __name__ == \"__main__\":\n    assert nth_term(2, 0) == 1\n    assert nth_term(2, 1) == 1\n    assert nth_term(2, 2) == 1\n    assert nth_term(2, 3) == 1\n    assert nth_term(2, 4) == 1\n    assert nth_term(2, 5) == 1\n    assert nth_term(2, 6) == 1\n    assert nth_term(2, 7) == 1\n    assert nth_term(2, 8) == 1\n    assert nth_term(2, 9) == 1\n    assert nth_term(2, 10) == 1\n    assert nth_term(2, 11) == 1\n    assert nth_term(2, 12) == 1\n    assert nth_term(2, 13) == 1\n    assert nth_term(2, 14) == 1\n    assert nth_term(2, 15) == 1\n    assert nth_term(2, 16) == 1\n    assert nth_term(2, 17) == 1\n    assert nth_term(2, 18) == 1\n    assert nth_term(2, 19) == 1\n    assert nth_term(2, 20) == 1\n    assert nth_term(2, 21) == 1\n    assert nth_term(2, 22) == 1\n    assert nth_term(2, 23) == 1\n    assert nth_term(2, 24) == 1\n    assert nth_term(2, 25) == 1\n    assert nth_term(2, 26) == 1\n    assert nth_term(2, 27) == 1\n    assert nth_term(2, 28) == 1\n    assert nth_term(2, 29) == 1\n    assert nth_term(2, 30) == 1\n    assert nth_term(2, 31) == 1\n    assert nth_term(2, 32) == 1\n    assert nth",
    "def tnth_term(n, t):\n    return tnth_term_recursive(n, t)\n\n\ndef tnth_term_recursive(n, t):\n    if t == 0:\n        return 1\n    if t == 1:\n        return n\n    if t == 2:\n        return n * (n + 1) / 2\n    if t % 2 == 0:\n        return tnth_term_recursive(n, t/2) * tnth_term_recursive(n - 1, t/2)\n    else:\n        return tnth_term_recursive(n, t/2) * tnth_term_recursive(n - 1, t/2) * tnth_term_recursive(n - 2, t/2)\n\nprint(tnth_term(5, 2))",
    "from math import factorial\n\ndef t_nth(n):\n    if n == 1:\n        return 1\n    return sum(factorial(n) / factorial(i) for i in range(1, n))\n\nprint(t_nth(1))\nprint(t_nth(2))\nprint(t_nth(3))\nprint(t_nth(4))",
    "from math import factorial\n\ndef tnth_term(t, n):\n    if t == 1:\n        return 1\n    return tnth_term(t-1, n-1) + tnth_term(t-1, n) * (1/t)\n\ndef tnth_term_iter(t, n):\n    if t == 1:\n        return 1\n    if n == 0:\n        return 1\n    return tnth_term_iter(t-1, n-1) + tnth_term_iter(t-1, n) * (1/t)\n\ndef tnth_term_rec(t, n):\n    if t == 1:\n        return 1\n    if n == 0:\n        return 1\n    return tnth_term_rec(t-1, n-1) + tnth_term_rec(t-1, n) * (1/t)\n\ndef tnth_term_iter_rec(t, n):\n    if t == 1:\n        return 1\n    if n == 0:\n        return 1\n    return tnth_term_iter_rec(t-1, n-1) + tnth_term_iter_rec(t-1, n) * (1/t)\n\ndef tnth_term_iter_rec_mod(t, n):\n    if t == 1:\n        return 1\n    if n == 0:\n        return 1\n    return tnth_term_iter_rec_mod(t-1, n-1) + tnth_term_iter_rec_mod(t-1, n) * (1/t)\n\ndef tnth_term_iter_mod(t, n):\n    if t == 1:\n        return 1\n    if n == 0:\n        return 1\n    return tnth_term_iter_mod(t-1, n-1) + tnth_term_iter_mod(t-1, n) * (1/t)\n\ndef tnth_term_iter_mod_rec(t, n):\n    if t == 1:\n        return 1\n    if n == 0:",
    "import math\n\ndef get_nth_term(n, p):\n    return (math.factorial(p) * (p + 1) / (math.factorial(p) * (p + 1)) ** n) / math.factorial(n)\n\nif __name__ == '__main__':\n    print get_nth_term(4, 3)",
    "class Solution:\n    # @param {integer} a\n    # @param {integer} n\n    # @return {integer}\n    def getTerm(self, a, n):\n        if n == 0:\n            return 1\n        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if n == 1:\n            return a\n        if n == 2:\n            return a * (1 - a)\n        if n == 3:\n            return a * (1 - a) * (2 - a)\n        if n == 4:\n            return a * (1 - a) * (3 - a) * (4 - a)\n        if n == 5:\n            return a * (1 - a) * (5 - a) * (7 - a) * (8 - a)\n        if n == 6:\n            return a * (1 - a) * (9 - a) * (13 - a) * (15 - a) * (16 - a)\n        if n == 7:\n            return a * (1 - a) * (17 - a) * (23 - a) * (29 - a) * (31 - a) * (32 - a)\n        if n == 8:\n            return a * (1 - a) * (31 - a) * (61 - a) * (79 - a) * (95 - a) * (111 - a) * (127 - a) * (131 - a)\n        if n == 9:\n            return a * (1 - a) * (55 - a) * (111 - a) * (223 - a) * (289 - a) * (365 - a) * (421 - a) * (479 - a) * (577 - a) * (631 - a) * (719 - a) * (811 - a) * (907 - a) * (1039 - a)\n        if n == 10:\n            return a * (1 - a) * (63 - a) * (127 - a) * (223 - a) * (289 - a) * (365 - a) * (421 - a) * (479 - a) * (577 - a) * (631 - a) * (7",
    "def nth_term(n):\n\t'''\n\tnth_term(n)\n\tInput:\n\t\tn: A positive integer.\n\tOutput:\n\t\tThe nth term of the geometric series.\n\tExample:\n\t\t>>> nth_term(2)\n\t\t2.0\n\t'''\n\t\n\treturn 1.0 / n\n\nif __name__ == '__main__':\n\tprint(nth_term(2))\n\tprint(nth_term(3))\n\tprint(nth_term(4))\n\tprint(nth_term(5))\n\tprint(nth_term(6))",
    "#!/usr/bin/env python\n\nimport math\n\ndef get_t_nth_term(a, n):\n    t = a\n    for i in range(1, n):\n        t *= a\n    return t\n\ndef main():\n    print get_t_nth_term(2, 3)\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    def term(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        a = 1\n        while n > 2:\n            a *= n\n            n -= 1\n        return a\n\n    def term2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return n * self.term(n - 1)\n\n\nif __name__ == '__main__':\n    print(Solution().term(3))\n    print(Solution().term(4))",
    "def g_nth(n, t):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n    return (1 + t) ** n / factorial(n)\n\ndef test_g_nth():\n    assert g_nth(0, 0) == 1\n    assert g_nth(1, 0) == 1\n    assert g_nth(1, 1) == 1\n    assert g_nth(2, 0) == 1\n    assert g_nth(2, 1) == 1\n    assert g_nth(2, 2) == 1\n    assert g_nth(3, 0) == 1\n    assert g_nth(3, 1) == 1\n    assert g_nth(3, 2) == 1\n    assert g_nth(3, 3) == 1\n    assert g_nth(4, 0) == 1\n    assert g_nth(4, 1) == 1\n    assert g_nth(4, 2) == 1\n    assert g_nth(4, 3) == 1\n    assert g_nth(4, 4) == 1\n    assert g_nth(5, 0) == 1\n    assert g_nth(5, 1) == 1\n    assert g_nth(5, 2) == 1\n    assert g_nth(5, 3) == 1\n    assert g_nth(5, 4) == 1\n    assert g_nth(5, 5) == 1\n    assert g_nth(6, 0) == 1\n    assert g_nth(6, 1) == 1\n    assert g_nth(6, 2) == 1\n    assert g_nth(6, 3) == 1\n    assert g_nth(6, 4) == 1\n    assert g_nth(6, 5) == 1\n    assert g_nth(6, 6) == 1\n    assert g_nth(7, 0) == 1\n    assert g_nth(7, 1) == 1\n    assert g_nth(7, 2) == 1\n    assert g_nth(7, 3) == 1\n    assert g_",
    "def tnth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: float\n    \"\"\"\n    # O(n^2) time, O(n) space\n    a = [1]\n    b = [1]\n    for i in range(1, n):\n        a.append(a[-1] + b[-1])\n        b.append(b[-1] * t)\n    return a[-1] / b[-1]\n\nif __name__ == '__main__':\n    assert tnth_term(3, 1) == 1\n    assert tnth_term(4, 2) == 1.5\n    assert tnth_term(5, 3) == 3.1622776601683794\n    assert tnth_term(7, 4) == 17.1622776601683795\n    assert tnth_term(8, 5) == 39.1622776601683794\n    assert tnth_term(9, 6) == 225.1622776601683794\n    assert tnth_term(10, 7) == 6561.1622776601683794\n    assert tnth_term(11, 8) == 362880.1622776601683794\n    assert tnth_term(12, 9) == 1039525.1622776601683794\n    assert tnth_term(13, 10) == 60786550.1622776601683794\n    assert tnth_term(14, 11) == 3.567487599334775\n    assert tnth_term(15, 12) == 16.25\n    assert tnth_term(16, 13) == 25\n    assert tnth_term(17, 14) == 49.25\n    assert tnth_term(18, 15) == 125\n    assert tnth_term(19, 16) == 249\n    assert tnth_term(20, 17) == 625\n    assert tnth_term(21, 18) == 1296\n    assert tnth_term",
    "def tnth_term(n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example 1:\n    Input: n = 1\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 2:\n    Input: n = 2\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 3:\n    Input: n = 3\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 4:\n    Input: n = 4\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 5:\n    Input: n = 5\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 6:\n    Input: n = 6\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 7:\n    Input: n = 7\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 8:\n    Input: n = 8\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Example 9:\n    Input: n = 9\n    Output: 1\n    Explanation: 1 + 1/1! = 1 + 1/1! + 1/2! + 1/3! + 1/4! +...\n\n    Note:",
    "def t_nth(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: float\n    \"\"\"\n    return (1 - 1/t) ** n\n\nif __name__ == \"__main__\":\n    assert t_nth(1, 1) == 1\n    assert t_nth(1, 2) == 1\n    assert t_nth(1, 3) == 1\n    assert t_nth(1, 4) == 1\n    assert t_nth(1, 5) == 1\n    assert t_nth(2, 1) == 1\n    assert t_nth(2, 2) == 1\n    assert t_nth(2, 3) == 1\n    assert t_nth(2, 4) == 1\n    assert t_nth(2, 5) == 1\n    assert t_nth(3, 1) == 1\n    assert t_nth(3, 2) == 1\n    assert t_nth(3, 3) == 1\n    assert t_nth(3, 4) == 1\n    assert t_nth(3, 5) == 1\n    assert t_nth(4, 1) == 1\n    assert t_nth(4, 2) == 1\n    assert t_nth(4, 3) == 1\n    assert t_nth(4, 4) == 1\n    assert t_nth(4, 5) == 1\n    assert t_nth(5, 1) == 1\n    assert t_nth(5, 2) == 1\n    assert t_nth(5, 3) == 1\n    assert t_nth(5, 4) == 1\n    assert t_nth(5, 5) == 1",
    "def tnth_term(n, t):\n    \"\"\"\n    :param n: integer\n    :param t: integer\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    if n == 2:\n        return t * (t + 1)\n    if n % 2 == 0:\n        return tnth_term(n // 2, t + 1) * tnth_term(n // 2, t)\n    else:\n        return tnth_term(n - 1, t) * tnth_term(n - 2, t + 1)\n\n# Test\n\nassert tnth_term(1, 1) == 1\nassert tnth_term(2, 1) == 1\nassert tnth_term(3, 1) == 1\nassert tnth_term(4, 1) == 1\nassert tnth_term(5, 1) == 1\nassert tnth_term(6, 1) == 1\nassert tnth_term(7, 1) == 1\nassert tnth_term(8, 1) == 1\nassert tnth_term(9, 1) == 1\nassert tnth_term(10, 1) == 1\nassert tnth_term(11, 1) == 1\nassert tnth_term(12, 1) == 1\nassert tnth_term(13, 1) == 1\nassert tnth_term(14, 1) == 1\nassert tnth_term(15, 1) == 1\nassert tnth_term(16, 1) == 1\nassert tnth_term(17, 1) == 1\nassert tnth_term(18, 1) == 1\nassert tnth_term(19, 1) == 1\nassert tnth_term(20, 1) == 1\nassert tnth_term(21, 1) == 1\nassert tnth_term(22, 1) == 1\nassert tnth_term(23, 1) == 1\nassert tnth_term(24, 1) == 1\nassert tnth_term(25, 1) == 1\nassert tnth_term(",
    "def find_nth_term(n):\n    return sum(1 for _ in range(n))\n\nif __name__ == '__main__':\n    print(find_nth_term(20))",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def getTerm(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return n\n        if k == 2:\n            return n * n\n        if k == 3:\n            return n * n * n\n        if k == 4:\n            return n * n * n * n\n        if k == 5:\n            return n * n * n * n * n\n        if k == 6:\n            return n * n * n * n * n * n\n        if k == 7:\n            return n * n * n * n * n * n * n\n        if k == 8:\n            return n * n * n * n * n * n * n * n\n        if k == 9:\n            return n * n * n * n * n * n * n * n * n\n        if k == 10:\n            return n * n * n * n * n * n * n * n * n * n\n        if k == 11:\n            return n * n * n * n * n * n * n * n * n * n * n\n        if k == 12:\n            return n * n * n * n * n * n * n * n * n * n * n * n\n        if k == 13:\n            return n * n * n * n * n * n * n * n * n * n * n * n * n\n        if k == 14:\n            return n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        if k == 15:\n            return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        if k == 16:\n            return n * n * n * n * n * n * n * n * n * n * n * n * n",
    "def nth_term_of_geometric_series(n, s):\n    \"\"\"\n    Input: n = the nth term of geometric series,\n           s = the series to be calculated\n    Output: the nth term of geometric series\n    \"\"\"\n    # TODO\n    return 0\n\n\nif __name__ == '__main__':\n    nth_term_of_geometric_series(0, 2)\n    nth_term_of_geometric_series(1, 2)\n    nth_term_of_geometric_series(2, 2)\n    nth_term_of_geometric_series(3, 2)\n    nth_term_of_geometric_series(4, 2)\n    nth_term_of_geometric_series(5, 2)\n    nth_term_of_geometric_series(6, 2)\n    nth_term_of_geometric_series(7, 2)\n    nth_term_of_geometric_series(8, 2)\n    nth_term_of_geometric_series(9, 2)\n    nth_term_of_geometric_series(10, 2)\n    nth_term_of_geometric_series(11, 2)\n    nth_term_of_geometric_series(12, 2)\n    nth_term_of_geometric_series(13, 2)\n    nth_term_of_geometric_series(14, 2)\n    nth_term_of_geometric_series(15, 2)\n    nth_term_of_geometric_series(16, 2)\n    nth_term_of_geometric_series(17, 2)\n    nth_term_of_geometric_series(18, 2)\n    nth_term_of_geometric_series(19, 2)\n    nth_term_of_geometric_series(20, 2)\n    nth_term_of_geometric_series(21, 2)\n    nth_term_of_geometric_series(22, 2)\n    nth_term_of_geometric_series(23, 2)",
    "# https://en.wikipedia.org/wiki/Geometric_Series\n\nfrom math import log, ceil\n\ndef geometric_series(n):\n    \"\"\"\n    Returns the n-th term of the geometric series\n\n    >>> geometric_series(0)\n    0\n    >>> geometric_series(1)\n    1\n    >>> geometric_series(2)\n    1\n    >>> geometric_series(3)\n    1\n    >>> geometric_series(4)\n    2\n    >>> geometric_series(5)\n    2\n    >>> geometric_series(6)\n    3\n    >>> geometric_series(7)\n    3\n    >>> geometric_series(8)\n    3\n    >>> geometric_series(9)\n    4\n    >>> geometric_series(10)\n    4\n    >>> geometric_series(11)\n    4\n    >>> geometric_series(12)\n    5\n    >>> geometric_series(13)\n    5\n    >>> geometric_series(14)\n    5\n    >>> geometric_series(15)\n    6\n    >>> geometric_series(16)\n    6\n    >>> geometric_series(17)\n    6\n    >>> geometric_series(18)\n    7\n    >>> geometric_series(19)\n    7\n    >>> geometric_series(20)\n    7\n    >>> geometric_series(21)\n    8\n    >>> geometric_series(22)\n    8\n    >>> geometric_series(23)\n    8\n    >>> geometric_series(24)\n    9\n    >>> geometric_series(25)\n    9\n    >>> geometric_series(26)\n    9\n    >>> geometric_series(27)\n    10\n    >>> geometric_series(28)\n    10\n    >>> geometric_series(29)\n    10\n    >>> geometric_series(30)\n    11\n    >>> geometric_series(31)\n    11\n    >>> geometric_series(32)\n    11\n    >>> geometric_series(33)\n    12\n    >>> geometric_series(34)\n    12\n    >>> geometric_series(35)\n    12\n    >>> geometric_series(36)\n    13\n    >>> geometric_series(37)\n    13\n    >>> geometric_series(",
    "def tnth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    if t == 0:\n        return 1\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1\n    if t == 3:\n        return 1\n    if t == 4:\n        return 1\n    if t == 5:\n        return 1\n    if t == 6:\n        return 1\n    if t == 7:\n        return 1\n    if t == 8:\n        return 1\n    if t == 9:\n        return 1\n    if t == 10:\n        return 1\n    if t == 11:\n        return 1\n    if t == 12:\n        return 1\n    if t == 13:\n        return 1\n    if t == 14:\n        return 1\n    if t == 15:\n        return 1\n    if t == 16:\n        return 1\n    if t == 17:\n        return 1\n    if t == 18:\n        return 1\n    if t == 19:\n        return 1\n    if t == 20:\n        return 1\n    if t == 21:\n        return 1\n    if t == 22:\n        return 1\n    if t == 23:\n        return 1\n    if t == 24:\n        return 1\n    if t == 25:\n        return 1\n    if t == 26:\n        return 1\n    if t == 27:\n        return 1\n    if t == 28:\n        return 1\n    if t == 29:\n        return 1\n    if t == 30:\n        return 1\n    if t == 31:\n        return 1\n    if t == 32:\n        return 1\n    if t == 33:\n        return 1\n    if t == 34:\n        return 1\n    if t == 35:\n        return 1\n    if t == 36:\n        return 1\n    if t == 37:\n        return 1\n    if t == 38:\n        return 1\n    if t == 39:\n        return 1\n    if t == 40:\n        return 1",
    "from math import sqrt\n\ndef t_nth_term(t, n):\n    if t == 0:\n        return 0\n    if n == 1:\n        return 1\n    return t_nth_term(t-1, n-1) + t_nth_term(t-1, n-2)\n\ndef main():\n    print(t_nth_term(1, 3))\n    print(t_nth_term(4, 6))\n\nif __name__ == \"__main__\":\n    main()",
    "def tnth_term(n, t):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return t\n    else:\n        return tnth_term(n-1, t) + tnth_term(n-2, t) * t\n\nif __name__ == \"__main__\":\n    n = int(input())\n    t = int(input())\n    print(tnth_term(n, t))",
    "class Solution(object):\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if t == 0:\n            return 1\n        return self.getTerm(n - 1, t - 1) + t\n\n\ndef test():\n    assert Solution().getTerm(1, 1) == 1\n    assert Solution().getTerm(3, 2) == 2\n    assert Solution().getTerm(6, 3) == 3\n    assert Solution().getTerm(6, 4) == 6\n    assert Solution().getTerm(7, 5) == 7\n    assert Solution().getTerm(7, 6) == 14\n    assert Solution().getTerm(7, 7) == 28\n    assert Solution().getTerm(8, 8) == 56\n    assert Solution().getTerm(8, 9) == 84\n    assert Solution().getTerm(9, 9) == 243\n    assert Solution().getTerm(10, 10) == 592\n    assert Solution().getTerm(10, 11) == 1230\n    assert Solution().getTerm(11, 11) == 4312\n    assert Solution().getTerm(12, 12) == 10304\n    assert Solution().getTerm(12, 13) == 30720\n    assert Solution().getTerm(13, 13) == 86400\n    assert Solution().getTerm(13, 14) == 243240\n    assert Solution().getTerm(14, 14) == 590240\n    assert Solution().getTerm(14, 15) == 1204640\n    assert Solution().getTerm(15, 15) == 3602880\n    assert Solution().getTerm(15, 16) == 9011968\n    assert Solution().getTerm(16, 16) == 24159696\n    assert Solution().getTerm(16, 17) == 56112128\n    assert Solution().getTerm(17, 17) == 12208544\n    assert Solution().getTerm(17, 18) == 30857600\n    assert Solution().getTerm(18, 18) == 7290400\n    assert Solution().getTerm(18, 19) == 14708864\n    assert Solution().getTerm(19, 19) == 35216128\n    assert Solution().getTerm",
    "class Solution(object):\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        c = 1\n        for i in range(1, t+1):\n            c *= (n+i)\n        return c\n\nif __name__ == '__main__':\n    assert Solution().getTerm(5, 3) == 25",
    "# https://oj.leetcode.com/problems/geometric-series/\n# time:O(n), space:O(n)\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# https://www.youtube.com/watch?v=gjy_jV8hb0c&t=2m38s\nclass Solution:\n    # @param {integer} n\n    # @param {integer} t\n    # @return {integer}\n    def findTerm(self, n, t):\n        if n == 0 or t == 0:\n            return 0\n        if n == 1:\n            return 1\n        if t == 1:\n            return n\n        if t > n:\n            return self.findTerm(n, t - 1)\n        else:\n            return self.findTerm(n - 1, t) + self.findTerm(n - 1, t - 1)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.findTerm(5, 2))",
    "def tnth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    return tnth_term(n-1, t) + tnth_term(n-2, t)\n\n\n# Your TnthTerm object will be instantiated and called as such:\n# obj = TnthTerm(n, t)\n# param_1 = obj.tnth_term(n, t)",
    "class Solution(object):\n    def findTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return t\n        if t == 1:\n            return n\n        if t == 0:\n            return 1\n        if t % 2 == 0:\n            return self.findTerm(n, t / 2)\n        else:\n            return self.findTerm(n, t - 1)",
    "#!/usr/bin/python\n\ndef find_t_nth_term(n, t):\n    \"\"\"\n    Input:\n        n: integer, the term number\n        t: integer, the term to be computed\n    Output:\n        t_nth: the nth term of geometric series\n    \"\"\"\n    \n    if n == 0:\n        return 1\n    \n    if t == 0:\n        return 0\n    \n    t_nth = 1\n    for i in range(1, n + 1):\n        t_nth *= t\n        t_nth /= i\n    \n    return t_nth\n\nif __name__ == '__main__':\n    print find_t_nth_term(5, 3)\n    print find_t_nth_term(4, 5)\n    print find_t_nth_term(3, 7)\n    print find_t_nth_term(2, 9)\n    print find_t_nth_term(1, 11)\n    print find_t_nth_term(0, 13)\n    print find_t_nth_term(5, 15)\n    print find_t_nth_term(4, 17)\n    print find_t_nth_term(3, 19)\n    print find_t_nth_term(2, 21)\n    print find_t_nth_term(1, 23)\n    print find_t_nth_term(0, 25)\n    print find_t_nth_term(5, 27)\n    print find_t_nth_term(4, 29)\n    print find_t_nth_term(3, 31)\n    print find_t_nth_term(2, 33)\n    print find_t_nth_term(1, 35)\n    print find_t_nth_term(0, 37)",
    "import math\n\ndef nth_term(t, n):\n    \"\"\"\n    Return the nth term of geometric series.\n    \"\"\"\n    return math.factorial(n) / math.factorial(t)\n\nif __name__ == '__main__':\n    print nth_term(3, 6)",
    "from math import log, pi\nfrom operator import mul\n\n\ndef tnth_term(n, t):\n    \"\"\"\n    Takes a value of t and n as input and returns the nth term of the geometric\n    series.\n    \"\"\"\n    return (1 - 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / t))))))) * n\n\n\ndef geometric_series(n, t):\n    \"\"\"\n    Takes a value of t and n as input and returns the geometric series\n    (t-1) * (t-2) * (t-3) *... * (t-n)\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return 1 - 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / t))))))\n    else:\n        return geometric_series(n - 1, t - 1) * geometric_series(n - 2, t - 2) * geometric_series(n - 3, t - 3) * geometric_series(n - 4, t - 4) * geometric_series(n - 5, t - 5) * geometric_series(n - 6, t - 6) * geometric_series(n - 7, t - 7) * geometric_series(n - 8, t - 8) * geometric_series(n - 9, t - 9) * geometric_series(n - 10, t - 10) * geometric_series(n - 11, t - 11) * geometric_series(n - 12, t - 12) * geometric_series(n - 13, t - 13) * geometric_series(n - 14, t - 14) * geometric_series(n - 15, t - 15) * geometric_series(n - 16, t - 16) * geometric_series(n - 17, t - 17) * geometric_series(n - 18, t - 18) * geometric_series(n - 19, t - 19) * geometric_series(n - 20, t - 20) * geometric_series(n - 21, t - 21) * geometric_series(n - 22, t - 22) * geometric_series(n",
    "def t_nth_term(n, x):\n    \"\"\"\n    Given n and x, find t-nth term of geometric series.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return (1 + x)**(n - 1) * x\n\n\nif __name__ == '__main__':\n    print t_nth_term(3, 0.5)\n    print t_nth_term(5, 0.5)\n    print t_nth_term(7, 0.5)\n    print t_nth_term(3, 1.5)\n    print t_nth_term(5, 1.5)\n    print t_nth_term(7, 1.5)\n    print t_nth_term(10, 1.5)\n    print t_nth_term(10, 0.5)\n    print t_nth_term(10, 0.1)\n    print t_nth_term(10, 0.01)\n    print t_nth_term(10, 0.001)\n    print t_nth_term(10, 0.0001)\n    print t_nth_term(10, 0.00001)\n    print t_nth_term(10, 0.000001)\n    print t_nth_term(10, 0.0000001)\n    print t_nth_term(10, 0.00000001)\n    print t_nth_term(10, 0.000000001)\n    print t_nth_term(10, 0.0000000001)",
    "from math import exp, log\n\ndef nth_term(n, t):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n    if n == 0:\n        return 1\n    if t == 0:\n        return 0\n    return t ** (n - 1) * (t + 1) / (n + 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_term(3, 1))\n    print(nth_term(3, 2))\n    print(nth_term(3, 3))\n    print(nth_term(3, 4))\n    print(nth_term(3, 5))\n    print(nth_term(3, 6))\n    print(nth_term(3, 7))",
    "def t_nth_term(t, n):\n\tsum = 1\n\tfor i in range(n):\n\t\tsum *= t\n\treturn sum\n\nprint(t_nth_term(2,3))",
    "# T = n\n# n = 2\n#\n# t = 0\n#\n# t = 1\n#\n# t = 2\n#\n# t = 3\n#\n# t = 4\n#\n# t = 5\n#\n# t = 6\n#\n# t = 7\n#\n# t = 8\n#\n# t = 9\n#\n# t = 10\n#\n# t = 11\n#\n# t = 12\n#\n# t = 13\n#\n# t = 14\n#\n# t = 15\n#\n# t = 16\n#\n# t = 17\n#\n# t = 18\n#\n# t = 19\n#\n# t = 20\n#\n# t = 21\n#\n# t = 22\n#\n# t = 23\n#\n# t = 24\n#\n# t = 25\n#\n# t = 26\n#\n# t = 27\n#\n# t = 28\n#\n# t = 29\n#\n# t = 30\n#\n# t = 31\n#\n# t = 32\n#\n# t = 33\n#\n# t = 34\n#\n# t = 35\n#\n# t = 36\n#\n# t = 37\n#\n# t = 38\n#\n# t = 39\n#\n# t = 40\n#\n# t = 41\n#\n# t = 42\n#\n# t = 43\n#\n# t = 44\n#\n# t = 45\n#\n# t = 46\n#\n# t = 47\n#\n# t = 48\n#\n# t = 49\n#\n# t = 50\n#\n# t = 51\n#\n# t = 52\n#\n# t = 53\n#\n# t = 54\n#\n# t = 55\n#\n# t = 56\n#\n# t = 57\n#\n# t = 58\n#\n# t = 59\n#\n# t = 60\n#\n# t = 61\n#\n# t = 62\n#\n# t = 63\n#\n# t = 64\n#\n# t = 65\n#\n# t = 66\n#\n# t = 67\n#\n# t = 68\n#\n# t = 69\n#\n# t = 70\n#\n# t",
    "class Solution(object):\n    def findNthTerm(self, n, a):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n == 1:\n            return a\n        # recursion\n        if n == 2:\n            return a * (1 + a)\n        return a * (1 + a) * (1 + a - 1) / (1 - a)\n\n    def findNthTerm1(self, n, a):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n == 1:\n            return a\n        # recursion\n        if n == 2:\n            return a * (1 + a)\n        return a * (1 + a) * (1 + a - 1) / (1 - a)\n\n    def findNthTerm2(self, n, a):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n == 1:\n            return a\n        # recursion\n        if n == 2:\n            return a * (1 + a)\n        return a * (1 + a) * (1 + a - 1) / (1 - a)\n\n\nif __name__ == '__main__':\n    print(Solution().findNthTerm(2, 2))\n    print(Solution().findNthTerm1(2, 2))\n    print(Solution().findNthTerm2(2, 2))",
    "def tnth_term(t, n):\n    \"\"\"\n    Write a function tnth_term(t, n) to find t-nth term of geometric series.\n\n    Input:\n        t: integer\n        n: integer\n\n    Output:\n        A list of the t-nth term of geometric series.\n    \"\"\"\n    if n == 1:\n        return [1]\n    if t <= 1:\n        return []\n    if n == 2:\n        return [t]\n    if n > 2:\n        ans = []\n        for i in range(2, n+1):\n            ans.append(tnth_term(t, i) + tnth_term(t-i, n-i))\n        return ans\n    else:\n        return []\n\ndef test_tnth_term():\n    assert tnth_term(1, 0) == []\n    assert tnth_term(1, 1) == [1]\n    assert tnth_term(2, 1) == [1]\n    assert tnth_term(3, 1) == [1]\n    assert tnth_term(3, 2) == [1, 3]\n    assert tnth_term(5, 2) == [1, 3, 6]\n    assert tnth_term(3, 3) == [1, 3, 6, 10]\n    assert tnth_term(5, 3) == [1, 3, 6, 10, 15]\n    assert tnth_term(7, 3) == [1, 3, 6, 10, 15, 21]\n    assert tnth_term(7, 4) == [1, 3, 6, 10, 15, 21, 28]\n    assert tnth_term(3, 4) == [1, 3, 6, 10, 15, 21, 28, 36]\n    assert tnth_term(5, 4) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\n    assert tnth_term(7, 4) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 56]\n    assert tnth_term(7, 5",
    "def find_t_nth_term(a, n):\n    \"\"\"\n    :type a: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    if n == 2:\n        return a**2\n    if n % 2 == 0:\n        return a**n*find_t_nth_term(a, n / 2)\n    else:\n        return a**n*find_t_nth_term(a, n / 2) + \\\n               find_t_nth_term(a, n / 2)\n\nprint(find_t_nth_term(1, 2))",
    "def nth_term(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    s = 1\n    for i in range(1, n + 1):\n        s *= i\n    return s\n\nprint(nth_term(3))",
    "def nth_term(n, x):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Input:\n    n = integer\n    x = float\n\n    Output:\n    float\n    \"\"\"\n    a = 1\n    for i in range(0, n):\n        a *= x\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "class Solution:\n    # @param {integer} n\n    # @param {integer} t\n    # @return {integer}\n    def getTerm(self, n, t):\n        if n == 0:\n            return 0\n        if t == 1:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n % 2 == 0:\n            return 1 + self.getTerm(n / 2, t)\n        else:\n            return self.getTerm(n - 1, t) + self.getTerm(n / 2, t)",
    "class Solution(object):\n    def calculate(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        return (t + 1) * (t + 2) / 2.0 ** n\n\nclass Solution(object):\n    def calculate(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        return (t + 1) * (t + 2) / 2.0 ** n\n\nclass Solution(object):\n    def calculate(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        return (t + 1) * (t + 2) / 2.0 ** n\n\nclass Solution(object):\n    def calculate(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        return (t + 1) * (t + 2) / 2.0 ** n\n\nclass Solution(object):\n    def calculate(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: float\n        \"\"\"\n        return (t + 1) * (t + 2) / 2.0 ** n",
    "from math import log\n\ndef geometric_series(n):\n    \"\"\"\n    nth term of geometric series is n*log(n)\n    \"\"\"\n    return n * log(n)\n\ndef main():\n    \"\"\"\n    Test cases.\n    \"\"\"\n    print(geometric_series(1))\n    print(geometric_series(2))\n    print(geometric_series(3))\n    print(geometric_series(4))\n    print(geometric_series(5))\n    print(geometric_series(6))\n    print(geometric_series(7))\n    print(geometric_series(8))\n    print(geometric_series(9))\n    print(geometric_series(10))\n\nif __name__ == '__main__':\n    main()",
    "def tnth(n):\n    '''\n    Input:\n        n: The number of term\n    Output:\n        The t-nth term of geometric series\n    Example:\n        >>> tnth(10)\n        0.5\n        >>> tnth(21)\n        0.5\n    '''\n    # Write your code here\n    if n < 0:\n        return 0\n    else:\n        return (1 - (1 - n)**(1/n))\n\nif __name__ == '__main__':\n    print(tnth(10))\n    print(tnth(21))",
    "class Solution:\n    # @param n an integer\n    # @param t a positive integer\n    # @return an integer\n    def gcd(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdRecursion(self, n, t):\n        if n == 0:\n            return 1\n        if n == 1:\n            return t\n        return self.gcdRecursion(n - 1, t)\n    \n    def gcdIter(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter2(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter3(self, n, t):\n        if n == 0:\n            return 1\n        if n == 1:\n            return t\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter4(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter5(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter6(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter7(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter8(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter9(self, n, t):\n        while n > t:\n            n, t = t, n % t\n        return t\n    \n    def gcdIter10(self, n, t):\n        while n > t:\n            n, t = t, n %",
    "import math\n\ndef geometric_series(n, t):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n\n    Example\n    >>> geometric_series(2, 1)\n    1\n    >>> geometric_series(2, 2)\n    1.3\n    >>> geometric_series(3, 1)\n    1.6\n    >>> geometric_series(3, 3)\n    4.5\n    >>> geometric_series(3, 4)\n    10.25\n    >>> geometric_series(3, 5)\n    28.125\n    >>> geometric_series(3, 6)\n    732.25\n    >>> geometric_series(3, 7)\n    1638.5\n    >>> geometric_series(3, 8)\n    3796.25\n    >>> geometric_series(3, 9)\n    10696.5\n    >>> geometric_series(3, 10)\n    28125.0\n    >>> geometric_series(3, 11)\n    73225.0\n    >>> geometric_series(3, 12)\n    163825.0\n    >>> geometric_series(3, 13)\n    379625.0\n    >>> geometric_series(3, 14)\n    1069625.0\n    \"\"\"\n    term = 1\n    for i in range(1, t + 1):\n        term *= (n + i)\n    return term\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def t_nth_term(n, a):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    Input:\n        n - integer\n        a - float\n    Output:\n        float\n    \"\"\"\n    return a ** n\n\nif __name__ == '__main__':\n    print(t_nth_term(4, 5.5))\n    print(t_nth_term(5, 5.5))",
    "class Solution:\n    # @param {integer} t\n    # @param {integer} n\n    # @return {integer}\n    def getTerm(self, t, n):\n        if n == 0:\n            return 1\n        return (t + n) * self.getTerm(t, n - 1)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getTerm(3, 3))\n    print(sol.getTerm(3, 4))\n    print(sol.getTerm(3, 5))",
    "from math import floor, sqrt, exp\n\ndef t_nth_geometric_term(t, n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    t is the term, n is the number of terms.\n    \"\"\"\n    if t == 0:\n        return 0\n    if t < 0:\n        return 0\n    if t > n:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    if n == 2:\n        return t * t\n    if n == 3:\n        return t * t * t\n    if n == 4:\n        return t * t * t * t\n    if n == 5:\n        return t * t * t * t * t\n    if n == 6:\n        return t * t * t * t * t * t\n    if n == 7:\n        return t * t * t * t * t * t * t\n    if n == 8:\n        return t * t * t * t * t * t * t * t\n    if n == 9:\n        return t * t * t * t * t * t * t * t * t\n    if n == 10:\n        return t * t * t * t * t * t * t * t * t * t\n    if n > 10:\n        return 0\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    if n == 2:\n        return t * t\n    if n == 3:\n        return t * t * t\n    if n == 4:\n        return t * t * t * t\n    if n == 5:\n        return t * t * t * t * t\n    if n == 6:\n        return t * t * t * t * t * t\n    if n == 7:\n        return t * t * t * t * t * t * t\n    if n == 8:\n        return t * t * t * t * t * t * t * t\n    if n == 9:\n        return t * t * t * t * t * t * t * t * t",
    "def tnth_term(t, n):\n    \"\"\"\n    Input:\n        t - positive integer, the nth term of the geometric series\n        n - positive integer, the number of terms in the geometric series\n\n    Output:\n        t - the tth term of geometric series\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return t\n    else:\n        return t + tnth_term(t, n - 1)\n\n\nif __name__ == \"__main__\":\n    print tnth_term(2, 3)\n    print tnth_term(2, 7)\n    print tnth_term(3, 4)\n    print tnth_term(3, 5)\n    print tnth_term(5, 2)\n    print tnth_term(3, 10)",
    "from math import log\n\ndef tnth_term(n, x):\n    \"\"\"\n    Returns the nth term of geometric series.\n    \"\"\"\n    return log(x, n)\n\nprint(tnth_term(5, 3))\nprint(tnth_term(10, 3))",
    "def get_term(n, t):\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    return t * get_term(n-1, t)\n\ndef get_nth_term(n, t):\n    return get_term(n, t)\n\ndef test():\n    assert get_term(1, 1) == 1\n    assert get_term(1, 2) == 1\n    assert get_term(2, 2) == 1\n    assert get_term(3, 3) == 2\n    assert get_term(4, 3) == 4\n    assert get_term(5, 3) == 8\n    assert get_term(6, 3) == 27\n    assert get_term(7, 3) == 128\n    assert get_term(8, 3) == 524288\n    assert get_term(9, 3) == 134217728\n    assert get_term(10, 3) == 268435456\n    assert get_term(11, 3) == 8589934592\n    assert get_term(12, 3) == 17179869184\n    assert get_term(13, 3) == 35184372096\n    assert get_term(14, 3) == 72057594096\n    assert get_term(15, 3) == 15292150464\n    assert get_term(16, 3) == 3072\n    assert get_term(17, 3) == 61440\n    assert get_term(18, 3) == 122880\n    assert get_term(19, 3) == 251658240\n    assert get_term(20, 3) == 5033164800\n    assert get_term(21, 3) == 100663296000\n    assert get_term(22, 3) == 2002175920000\n    assert get_term(23, 3) == 4006632944000\n    assert get_term(24, 3) == 8053063680000\n    assert get_term(25, 3) == 16106127360000\n    assert get_term(26, 3) == 317869126400000\n    assert get_term(27, 3) == 6227020800000",
    "import math\n\ndef t_nth_term(n, t):\n    \"\"\"\n    Return the nth term of geometric series.\n\n    Example:\n    >>> t_nth_term(1, 1)\n    1\n    >>> t_nth_term(1, 2)\n    1\n    >>> t_nth_term(2, 1)\n    1\n    >>> t_nth_term(3, 2)\n    1\n    >>> t_nth_term(4, 2)\n    1\n    >>> t_nth_term(5, 2)\n    1\n    >>> t_nth_term(6, 2)\n    1\n    >>> t_nth_term(7, 2)\n    1\n    >>> t_nth_term(8, 2)\n    1\n    >>> t_nth_term(9, 2)\n    1\n    >>> t_nth_term(10, 2)\n    1\n    >>> t_nth_term(11, 2)\n    1\n    >>> t_nth_term(12, 2)\n    1\n    >>> t_nth_term(13, 2)\n    1\n    >>> t_nth_term(14, 2)\n    1\n    >>> t_nth_term(15, 2)\n    1\n    >>> t_nth_term(16, 2)\n    1\n    >>> t_nth_term(17, 2)\n    1\n    >>> t_nth_term(18, 2)\n    1\n    >>> t_nth_term(19, 2)\n    1\n    >>> t_nth_term(20, 2)\n    1\n    >>> t_nth_term(21, 2)\n    1\n    >>> t_nth_term(22, 2)\n    1\n    >>> t_nth_term(23, 2)\n    1\n    >>> t_nth_term(24, 2)\n    1\n    >>> t_nth_term(25, 2)\n    1\n    >>> t_nth_term(26, 2)\n    1\n    >>> t_nth_term(27, 2)\n    1",
    "def find_t_nth_term(n):\n    \"\"\"\n    Input:\n        n = the nth term of geometric series\n    Output:\n        t = the nth term of geometric series\n    \"\"\"\n    term = 1\n    t = 1\n    while t <= n:\n        term = term * (t + 1)\n        t += 1\n    return term\n\nif __name__ == '__main__':\n    n = int(input())\n    t = find_t_nth_term(n)\n    print(t)",
    "def get_term(t, n):\n    if t == 0:\n        return 0\n    return 1.0/(t*(t+1))\n\ndef get_term_rec(t, n):\n    if t == 0:\n        return 0\n    if t == 1:\n        return 1\n    return get_term_rec(t-1, n) + get_term(t-1, n)\n\ndef get_term_rec_slow(t, n):\n    if t == 0:\n        return 0\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1\n    return get_term_rec(t-1, n) + get_term(t-1, n)\n\ndef get_term_iter(t, n):\n    if t == 0:\n        return 0\n    return sum([get_term(t-i, n) for i in range(1, n+1)])\n\ndef get_term_iter_slow(t, n):\n    if t == 0:\n        return 0\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1\n    if t == 3:\n        return 1\n    if t == 4:\n        return 1\n    if t == 5:\n        return 1\n    if t == 6:\n        return 1\n    if t == 7:\n        return 1\n    if t == 8:\n        return 1\n    if t == 9:\n        return 1\n    return sum([get_term(t-i, n) for i in range(1, n+1)])\n\ndef get_term_iter_slow_2(t, n):\n    if t == 0:\n        return 0\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1\n    if t == 3:\n        return 1\n    if t == 4:\n        return 1\n    if t == 5:\n        return 1\n    if t == 6:\n        return 1\n    if t == 7:\n        return 1\n    if t == 8:\n        return 1\n    if t == 9:\n        return 1\n    if t == 10:\n        return 1",
    "def tnth_term(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return tnth_term_recursive(t, n)\n\ndef tnth_term_recursive(t, n):\n    if n == 0:\n        return 1\n    return tnth_term_recursive(t, n - 1) * (t + 1) ** n\n\nif __name__ == \"__main__\":\n    print(tnth_term(5, 3))\n    print(tnth_term(5, 0))\n    print(tnth_term(5, 1))\n    print(tnth_term(5, 2))\n    print(tnth_term(5, 3))\n    print(tnth_term(5, 4))\n    print(tnth_term(5, 5))\n    print(tnth_term(5, 6))\n    print(tnth_term(5, 7))\n    print(tnth_term(5, 8))\n    print(tnth_term(5, 9))",
    "import math\n\ndef t_nth_term(t, n):\n    \"\"\"\n    Write a function t_nth_term that returns the t-th term of the geometric series.\n    \"\"\"\n\n    if t == 0:\n        return 1\n\n    if t == 1:\n        return 1\n\n    if t == 2:\n        return 1\n\n    if t == 3:\n        return 2\n\n    if t == 4:\n        return 4\n\n    if t == 5:\n        return 8\n\n    if t == 6:\n        return 16\n\n    if t == 7:\n        return 32\n\n    if t == 8:\n        return 64\n\n    if t == 9:\n        return 128\n\n    if t == 10:\n        return 256\n\n    if t == 11:\n        return 512\n\n    if t == 12:\n        return 1024\n\n    if t == 13:\n        return 2048\n\n    if t == 14:\n        return 4096\n\n    if t == 15:\n        return 8192\n\n    if t == 16:\n        return 16384\n\n    if t == 17:\n        return 32768\n\n    if t == 18:\n        return 65536\n\n    if t == 19:\n        return 131072\n\n    if t == 20:\n        return 262144\n\n    if t == 21:\n        return 524288\n\n    if t == 22:\n        return 1048576\n\n    if t == 23:\n        return 2097152\n\n    if t == 24:\n        return 4194304\n\n    if t == 25:\n        return 8388608\n\n    if t == 26:\n        return 16777216\n\n    if t == 27:\n        return 33554432\n\n    if t == 28:\n        return 67108864\n\n    if t == 29:\n        return 134217728\n\n    if t == 30:\n        return 268435456\n\n    if t == 31:\n        return 536870912\n\n    if t == 32:\n        return 1073741824\n\n    if t == 33:\n        return 2147483648\n\n    if t == 34:\n        return 4294967296\n\n    if t == 35:\n        return 8589934592\n\n    if t == 36:\n        return 17179869184\n\n    if t == 37",
    "def nth_term(n, t):\n    \"\"\"\n    >>> nth_term(1, 1)\n    1\n    >>> nth_term(2, 1)\n    1\n    >>> nth_term(3, 1)\n    1\n    >>> nth_term(4, 1)\n    1\n    >>> nth_term(5, 1)\n    1\n    >>> nth_term(6, 1)\n    1\n    >>> nth_term(7, 1)\n    1\n    >>> nth_term(8, 1)\n    1\n    >>> nth_term(9, 1)\n    1\n    >>> nth_term(10, 1)\n    1\n    >>> nth_term(11, 1)\n    1\n    >>> nth_term(12, 1)\n    1\n    >>> nth_term(13, 1)\n    1\n    >>> nth_term(14, 1)\n    1\n    >>> nth_term(15, 1)\n    1\n    >>> nth_term(16, 1)\n    1\n    >>> nth_term(17, 1)\n    1\n    >>> nth_term(18, 1)\n    1\n    >>> nth_term(19, 1)\n    1\n    >>> nth_term(20, 1)\n    1\n    >>> nth_term(21, 1)\n    1\n    >>> nth_term(22, 1)\n    1\n    >>> nth_term(23, 1)\n    1\n    >>> nth_term(24, 1)\n    1\n    >>> nth_term(25, 1)\n    1\n    >>> nth_term(26, 1)\n    1\n    >>> nth_term(27, 1)\n    1\n    >>> nth_term(28, 1)\n    1\n    >>> nth_term(29, 1)\n    1\n    >>> nth_term(30, 1)\n    1\n    >>> nth_term(31, 1)\n    1\n    >>> nth_term(32, 1)\n    1\n    >>> nth_term(33, 1)\n    1\n    >>>",
    "class Solution:\n    # @return an integer\n    def findTerm(self, n):\n        # write your code here\n        if n == 0:\n            return 0\n        \n        ans = 0\n        p = 1\n        for i in range(1, n):\n            p *= i\n        \n        while p > 1:\n            p /= n\n            ans += 1\n        return ans",
    "class Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        if a < b:\n            return self.gcd(b, a)\n        if a % b == 0:\n            return b\n        return self.gcd(b, a % b)\n\n    def nthTerm(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        a = 1\n        b = 1\n        for i in range(1, n):\n            a = self.gcd(a, i)\n            b = self.gcd(b, i)\n        return a * b\n\ndef main():\n    sol = Solution()\n    print sol.nthTerm(0)\n    print sol.nthTerm(1)\n    print sol.nthTerm(2)\n    print sol.nthTerm(3)\n    print sol.nthTerm(4)\n    print sol.nthTerm(5)\n    print sol.nthTerm(6)\n    print sol.nthTerm(7)\n    print sol.nthTerm(8)\n\nif __name__ == '__main__':\n    main()",
    "def find_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    return find_term(n-1, t) * t % mod\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    t = input()\n    n = input()\n    print(find_term(n, t))\n\nif __name__ == '__main__':\n    main()",
    "def tnth_term(n, t):\n    \"\"\"\n    Input:\n        n = integer,\n        t = integer\n\n    Output:\n        t-nth term of geometric series.\n\n    Example:\n        >>> tnth_term(2, 4)\n        -1.0\n        >>> tnth_term(3, 4)\n        -0.25\n        >>> tnth_term(5, 4)\n        -0.125\n        >>> tnth_term(6, 4)\n        -0.0625\n        >>> tnth_term(7, 4)\n        -0.03125\n        >>> tnth_term(8, 4)\n        -0.015625\n        >>> tnth_term(9, 4)\n        -0.0078125\n        >>> tnth_term(10, 4)\n        -0.00390625\n        >>> tnth_term(11, 4)\n        -0.001953125\n        >>> tnth_term(12, 4)\n        -0.0009765625\n        >>> tnth_term(13, 4)\n        -0.00048828125\n        >>> tnth_term(14, 4)\n        -0.000244140625\n        >>> tnth_term(15, 4)\n        -0.0001220703125\n        >>> tnth_term(16, 4)\n        -0.00006103515625\n        >>> tnth_term(17, 4)\n        -0.000030517578125\n        >>> tnth_term(18, 4)\n        -0.0000152587890625\n        >>> tnth_term(19, 4)\n        -0.0000104854375\n        >>> tnth_term(20, 4)\n        -0.00000762939453125\n        >>> tnth_term(21, 4)\n        -0.000004844951171875\n        >>> tnth_term(22, 4)\n        -0.0000025390625\n        >>> tnth_term(23, 4)\n        -0.000001220703125\n        >>>",
    "def find_t_nth(n, t):\n    \"\"\"\n    Find t-nth term of geometric series.\n\n    Input:\n    t - integer, number of terms of geometric series\n    n - integer, number of terms to find\n    \"\"\"\n    t_nth = 1\n    for i in range(n):\n        t_nth *= (t + i)\n    return t_nth\n\nif __name__ == '__main__':\n    print(find_t_nth(10, 5))\n    print(find_t_nth(10, 6))\n    print(find_t_nth(10, 7))",
    "def geometric_series(n):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    Input:\n        n: int\n    Output:\n        t-nth term of geometric series\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_series(n - 1)) / (1 - (n - 1) * (n - 2) / 2)\n\nif __name__ == \"__main__\":\n    print geometric_series(3)",
    "import math\nimport time\n\ndef tnth_term(n):\n    \"\"\"\n    Find t-nth term of geometric series.\n    \"\"\"\n    return (1.0 + math.sqrt(5.0)) ** n\n\ndef main():\n    start = time.time()\n    print tnth_term(2)\n    print 'Time elapsed: %s' % (time.time() - start)\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}