{
  "problem": {
    "task_id": "MBPP/379",
    "prompt": "Write a function to find the surface area of a cuboid.",
    "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
    "test_list": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ],
    "challenge_test_list": [],
    "problem_id": 368
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from math import sqrt\n\ndef cuboid_area(side_lengths):\n    \"\"\"\n    Input:\n        side_lengths: A list of the side lengths of the cuboid.\n    Output:\n        The surface area of the cuboid.\n    \"\"\"\n\n    return sqrt(side_lengths[0]**2 + side_lengths[1]**2 + side_lengths[2]**2)\n\nif __name__ == \"__main__\":\n    side_lengths = [1, 2, 3]\n    print(cuboid_area(side_lengths))",
    "import math\n\ndef area(side1, side2, side3):\n    area = (side1 + side2 + side3) * 0.5\n    return area\n\ndef main():\n    side1 = input(\"Enter side1: \")\n    side2 = input(\"Enter side2: \")\n    side3 = input(\"Enter side3: \")\n\n    print(area(side1, side2, side3))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cuboid_area(height, width):\n    return height * width\n\nif __name__ == \"__main__\":\n    height = int(input(\"Enter the height: \"))\n    width = int(input(\"Enter the width: \"))\n\n    print(cuboid_area(height, width))",
    "# https://www.hackerrank.com/challenges/cuboid-area/problem\n\ndef cuboid_area(height, width, length):\n    return height * width * length\n\ndef main():\n    height = int(input())\n    width = int(input())\n    length = int(input())\n    print(cuboid_area(height, width, length))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef surface_area(width, height, depth):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    \"\"\"\n    return width * height * depth\n\nif __name__ == '__main__':\n    print surface_area(5, 4, 2)",
    "import math\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    :param length: the length of the cuboid\n    :param width: the width of the cuboid\n    :param height: the height of the cuboid\n    :return: the surface area of the cuboid\n    \"\"\"\n    area = length * width * height\n    return area\n\n\ndef main():\n    print(cuboid_area(4, 2, 3))\n    print(cuboid_area(3, 2, 4))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cuboid_surface(length, width, height):\n    \"\"\"\n    The surface area of a cuboid is the sum of the four sides.\n    \"\"\"\n    return length * width * height + length * width + length * height + width * height\n\ndef test_cuboid_surface():\n    assert cuboid_surface(1, 1, 1) == 6\n    assert cuboid_surface(2, 2, 2) == 8\n    assert cuboid_surface(3, 3, 3) == 12\n    assert cuboid_surface(4, 4, 4) == 16\n\ndef main():\n    test_cuboid_surface()\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def surfaceArea(self, volume):\n        \"\"\"\n        :type volume: int\n        :rtype: int\n        \"\"\"\n        volume = volume * volume\n        return volume * 0.5",
    "def cuboid_area(length, width, height):\n    \"\"\"\n    Calculate the area of a cuboid with given length, width, and height.\n    \n    :param length: The length of the cuboid\n    :type length: int\n    \n    :param width: The width of the cuboid\n    :type width: int\n    \n    :param height: The height of the cuboid\n    :type height: int\n    \n    :returns: The area of the cuboid\n    :rtype: int\n    \"\"\"\n    return length * width * height\n\nif __name__ == '__main__':\n    print cuboid_area(2, 3, 4)",
    "def surface(x, y, z):\n    return x * y * z\n\n\ndef test_surface():\n    assert surface(4, 6, 8) == 36\n    assert surface(1, 2, 3) == 6\n    assert surface(2, 3, 4) == 12\n    assert surface(3, 4, 5) == 20\n    assert surface(4, 5, 6) == 24\n    assert surface(5, 6, 7) == 36\n    assert surface(6, 7, 8) == 40\n    assert surface(7, 8, 9) == 48\n    assert surface(8, 9, 10) == 56\n    assert surface(9, 10, 11) == 64\n    assert surface(10, 11, 12) == 72\n    assert surface(11, 12, 13) == 80\n    assert surface(12, 13, 14) == 88\n    assert surface(13, 14, 15) == 96\n    assert surface(14, 15, 16) == 104\n    assert surface(15, 16, 17) == 112\n    assert surface(16, 17, 18) == 120\n    assert surface(17, 18, 19) == 128\n    assert surface(18, 19, 20) == 136\n    assert surface(19, 20, 21) == 144\n    assert surface(20, 21, 22) == 152\n    assert surface(21, 22, 23) == 160\n    assert surface(22, 23, 24) == 168\n    assert surface(23, 24, 25) == 176\n    assert surface(24, 25, 26) == 184\n    assert surface(25, 26, 27) == 192\n    assert surface(26, 27, 28) == 200\n    assert surface(27, 28, 29) == 208\n    assert surface(28, 29, 30) == 216\n    assert surface(29, 30, 31) == 224\n    assert surface(30, 31, 32) == 232\n    assert surface(31, 32, 33) == 240\n    assert surface(32, 33, 34) == 248\n    assert surface(33, 34, 35) == 256\n    assert surface(34, 35, 36) == 264\n    assert surface(35, 36, 37) == 272\n    assert surface(36, 37, 38) == 280\n    assert surface(37",
    "from math import sqrt\n\nclass Cuboid:\n    \"\"\"Cuboid class that contains all the information for a cuboid.\n    \"\"\"\n    def __init__(self, width, height, depth):\n        self.width = width\n        self.height = height\n        self.depth = depth\n\n    def get_area(self):\n        return self.width * self.height * self.depth\n\ndef get_area(width, height, depth):\n    return width * height * depth\n\ndef get_area_surface(width, height, depth):\n    return width * height * depth / 2\n\ndef get_area_volume(width, height, depth):\n    return width * height * depth\n\ndef get_area_volume_surface(width, height, depth):\n    return width * height * depth / 2\n\ndef get_area_volume_surface_2(width, height, depth):\n    return sqrt(width * height * depth / 2)\n\ndef get_area_volume_surface_3(width, height, depth):\n    return sqrt(width * height * depth)\n\ndef get_area_volume_surface_4(width, height, depth):\n    return sqrt(width * height * depth / 4)\n\ndef get_area_volume_surface_5(width, height, depth):\n    return sqrt(width * height * depth / 8)\n\ndef get_area_volume_surface_6(width, height, depth):\n    return sqrt(width * height * depth / 16)\n\ndef get_area_volume_surface_7(width, height, depth):\n    return sqrt(width * height * depth / 32)\n\ndef get_area_volume_surface_8(width, height, depth):\n    return sqrt(width * height * depth / 64)\n\ndef get_area_volume_surface_9(width, height, depth):\n    return sqrt(width * height * depth / 128)\n\ndef get_area_volume_surface_10(width, height, depth):\n    return sqrt(width * height * depth / 256)\n\ndef get_area_volume_surface_11(width, height, depth):\n    return sqrt(width * height * depth /",
    "from math import sqrt\n\n\ndef surface_area(length, width, height):\n    return length * width * height\n\n\ndef main():\n    print(surface_area(1, 1, 1))\n    print(surface_area(1, 1, 2))\n    print(surface_area(1, 2, 1))\n    print(surface_area(2, 1, 1))\n    print(surface_area(2, 1, 2))\n    print(surface_area(2, 2, 1))\n    print(surface_area(2, 2, 2))\n    print(surface_area(2, 3, 1))\n    print(surface_area(3, 2, 1))\n    print(surface_area(3, 2, 2))\n    print(surface_area(3, 3, 1))\n    print(surface_area(3, 3, 2))\n    print(surface_area(3, 3, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef cuboid_area(side1, side2, side3, side4):\n    return (side1 * side2 * side3 + side2 * side3 * side4 + side3 * side4 * side1 + side4 * side1 * side2) / 2\n\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 1,2,3,4 is\", cuboid_area(1, 2, 3, 4)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 2,3,4,1 is\", cuboid_area(2, 3, 4, 1)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 3,4,1,2 is\", cuboid_area(3, 4, 1, 2)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 4,1,2,3 is\", cuboid_area(4, 1, 2, 3)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 2,1,4,3 is\", cuboid_area(2, 1, 4, 3)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 3,2,4,1 is\", cuboid_area(3, 2, 4, 1)\n# Area of a cuboid with sides 1,2,3,4\nprint \"Area of a cuboid with sides 4,3,1,2 is\", cuboid_area(4, 3, 1, 2)",
    "class Solution:\n    \"\"\"\n    @param: height, length and width of the cuboid\n    @return: the surface area of the cuboid\n    \"\"\"\n    def cuboidArea(self, height, length, width):\n        return (height * length) + (length * width) + (width * height)",
    "# https://leetcode.com/problems/surface-area-of-cuboid/\n\nclass Solution:\n    # @param {int} width\n    # @param {int} height\n    # @param {int} depth\n    # @return {int}\n    def surfaceArea(self, width, height, depth):\n        return width * height * depth\n\n    # @param {int} width\n    # @param {int} height\n    # @param {int} depth\n    # @return {int}\n    def surfaceArea2(self, width, height, depth):\n        return width * height + width * height + height * depth\n\n    # @param {int} width\n    # @param {int} height\n    # @param {int} depth\n    # @return {int}\n    def surfaceArea3(self, width, height, depth):\n        return width * height * depth * 2\n\n    # @param {int} width\n    # @param {int} height\n    # @param {int} depth\n    # @return {int}\n    def surfaceArea4(self, width, height, depth):\n        return width * height * depth * 4\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.surfaceArea(1, 1, 1))\n    print(s.surfaceArea2(1, 1, 1))\n    print(s.surfaceArea3(1, 1, 1))\n    print(s.surfaceArea4(1, 1, 1))",
    "__author__ = 'Libao Jin'\n__date__ = 'December 11, 2015'\n\ndef cuboid_surface(length, width, height):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    :param length: The length of the cuboid.\n    :param width: The width of the cuboid.\n    :param height: The height of the cuboid.\n    :return: The surface area of the cuboid.\n    \"\"\"\n    return length * width * height\n\nif __name__ == '__main__':\n    print cuboid_surface(3, 4, 5)",
    "import math\n\ndef cuboid_area(width, height, depth):\n    \"\"\"\n    Inputs:\n        width (int)\n        height (int)\n        depth (int)\n    Output:\n        surface area of the cuboid\n    \"\"\"\n    return width * height * depth\n\ndef main():\n    print(cuboid_area(1, 2, 3))\n    print(cuboid_area(2, 3, 4))\n    print(cuboid_area(4, 6, 8))\n    print(cuboid_area(5, 10, 15))\n\nif __name__ == '__main__':\n    main()",
    "def cuboid_area(width, height, length):\n    return width * height * length\n\n# your code goes here\nprint cuboid_area(1, 2, 3)",
    "import math\n\n\ndef surface_area(length, width, height):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n\n    :param length: The length of the cuboid.\n    :param width: The width of the cuboid.\n    :param height: The height of the cuboid.\n    :return: The surface area of the cuboid.\n    \"\"\"\n    return length * width * height\n\n\ndef main():\n    \"\"\"\n    Test the function using the unit tests.\n    \"\"\"\n    assert surface_area(2, 2, 2) == 8\n    assert surface_area(1, 2, 3) == 9\n    assert surface_area(2, 1, 3) == 10\n    assert surface_area(1, 2, 1) == 6\n\n\nif __name__ == \"__main__\":\n    main()",
    "def cuboid_surface_area(height, width, depth):\n    \"\"\"\n    >>> cuboid_surface_area(3, 4, 5)\n    12\n    \"\"\"\n    return (height * width * depth) / 2\n\ndef main():\n    height, width, depth = map(int, input().split())\n    print(cuboid_surface_area(height, width, depth))\n\nif __name__ == '__main__':\n    main()",
    "def cuboid_surface_area(height, width, length):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :type length: int\n    :rtype: int\n    \"\"\"\n    area = height * width * length\n    return area\n\n#print cuboid_surface_area(2, 2, 2)\n#print cuboid_surface_area(3, 3, 3)\n#print cuboid_surface_area(4, 4, 4)",
    "# Import the libraries\nimport math\n\n# Function to calculate the area of a cuboid\ndef cuboid_area(x1, y1, z1, x2, y2, z2):\n    # Calculate the area of the cuboid\n    return (x2 - x1) * (y2 - y1) * (z2 - z1)\n\n# Calculate the surface area of a cuboid\ndef surface_area(x1, y1, z1, x2, y2, z2):\n    # Return the surface area\n    return math.pi * (x2 - x1) * (y2 - y1) * (z2 - z1)\n\n# Test the function\nif __name__ == '__main__':\n    # Test for valid input\n    print(\"Testing for valid input\")\n    print(\"Enter the x coordinates of the lower left corner\")\n    x1 = input(\"Enter the x coordinates of the lower left corner: \")\n    print(\"Enter the y coordinates of the lower left corner\")\n    y1 = input(\"Enter the y coordinates of the lower left corner: \")\n    print(\"Enter the z coordinates of the lower left corner\")\n    z1 = input(\"Enter the z coordinates of the lower left corner: \")\n    print(\"Enter the x coordinates of the upper right corner\")\n    x2 = input(\"Enter the x coordinates of the upper right corner: \")\n    print(\"Enter the y coordinates of the upper right corner\")\n    y2 = input(\"Enter the y coordinates of the upper right corner: \")\n    print(\"Enter the z coordinates of the upper right corner\")\n    z2 = input(\"Enter the z coordinates of the upper right corner: \")\n\n    # Calculate the surface area\n    print(\"The surface area is:\", surface_area(x1, y1, z1, x2, y2, z2))\n    print(\"The cuboid area is:\", cuboid_area(x1, y1, z1, x2, y2, z2))\n    print(\"\")",
    "# https://github.com/DmitriyKatsia/Coding/blob/master/coding/cuboid-area-surfaces.py\n\ndef cuboid_area(width, height, length):\n    \"\"\"Calculates the surface area of a cuboid of the given dimensions.\n\n    Args:\n        width (int): The width of the cuboid.\n        height (int): The height of the cuboid.\n        length (int): The length of the cuboid.\n\n    Returns:\n        int: The surface area of the cuboid.\n    \"\"\"\n    area = (width + 1) * (height + 1) * length\n    return area\n\n\ndef test():\n    assert cuboid_area(5, 6, 7) == 120\n    assert cuboid_area(5, 6, 7, 9) == 90\n    assert cuboid_area(5, 6, 7, 9, 11) == 55\n    assert cuboid_area(5, 6, 7, 9, 11, 13) == 40\n    assert cuboid_area(5, 6, 7, 9, 11, 13, 15) == 35",
    "# https://www.hackerrank.com/challenges/cubes/problem\n\nimport math\n\ndef surface_area(x, y, z):\n    return x * y + x * z + y * z\n\n# x and y are the dimensions of the cuboid.\n# z is the number of sides.\n# Return the surface area of the cuboid.\n\ndef main():\n    # x = int(input())\n    # y = int(input())\n    # z = int(input())\n    x = 3\n    y = 4\n    z = 5\n    print(surface_area(x, y, z))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cuboid_area(width, height, depth):\n    return width * height * depth\n\nif __name__ == '__main__':\n    print(cuboid_area(3, 4, 5))",
    "# https://en.wikipedia.org/wiki/Cuboid#Surface_area\n\ndef cuboid_surface(length, width, height):\n    return length * width * height\n\n\nif __name__ == '__main__':\n    print cuboid_surface(3, 4, 5)\n    #>>> 60\n    print cuboid_surface(5, 2, 1)\n    #>>> 6",
    "from __future__ import division\nimport math\n\ndef cuboid_area(length, width, height):\n    return length * width * height\n\ndef surface_area(length, width, height):\n    return (length * width + length * height + width * height) / 2\n\ndef main():\n    print(cuboid_area(3, 4, 5))\n    print(surface_area(3, 4, 5))\n    print(surface_area(2, 4, 3))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef area(height, width, depth):\n    return height * width * depth\n\ndef main():\n    print(area(1, 1, 1))\n    print(area(1, 1, 2))\n    print(area(2, 2, 2))\n    print(area(2, 1, 1))\n    print(area(2, 1, 2))\n    print(area(1, 2, 2))\n    print(area(2, 2, 2))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cuboid_area(l, w, h):\n    \"\"\"\n    Calculate the area of a cuboid.\n\n    :param l: Length of the side of the cuboid.\n    :param w: Width of the side of the cuboid.\n    :param h: Height of the side of the cuboid.\n    :return: The area of the cuboid.\n    \"\"\"\n    return l * w * h\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    print(cuboid_area(1, 2, 3))\n    print(cuboid_area(3, 2, 1))\n    print(cuboid_area(3, 2, 3))\n    print(cuboid_area(1, 2, 1))\n    print(cuboid_area(1, 1, 1))\n    print(cuboid_area(2, 2, 2))\n    print(cuboid_area(2, 3, 2))\n    print(cuboid_area(2, 3, 3))\n    print(cuboid_area(3, 3, 2))\n    print(cuboid_area(3, 3, 3))\n\nif __name__ == '__main__':\n    main()",
    "def area(side1, side2, side3, side4):\n    \"\"\"\n    Input:\n        side1: the first side length\n        side2: the second side length\n        side3: the third side length\n        side4: the fourth side length\n    Output:\n        the surface area\n    \"\"\"\n\n    side1 = side1\n    side2 = side2\n    side3 = side3\n    side4 = side4\n\n    # 3-sided cuboid\n    if side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3\n    # 4-sided cuboid\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 6-sided cuboid\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 8-sided cuboid\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 4-sided square\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3\n    # 6-sided square\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 8-sided square\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 4-sided parallelogram\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3\n    # 6-sided parallelogram\n    elif side1 == side2 and side2 == side3 and side3 == side4:\n        return side1 * side2 * side3 * side4\n    # 8-sided parallelogram\n    elif side1 == side2 and side2 == side3 and side3 ==",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\nclass Solution:\n    def cuboidArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        surface = 0\n        for point in points:\n            surface += point.x * point.y\n            surface += point.y * point.z\n            surface += point.z * point.x\n        return surface",
    "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.cache = {}\n\n    def getSurface(self, length, width, height):\n        \"\"\"\n        :type length: int\n        :type width: int\n        :type height: int\n        :rtype: int\n        \"\"\"\n        if not (0 <= length and 0 <= width and 0 <= height):\n            return 0\n        if not (length * width * height in self.cache):\n            self.cache[length * width * height] = self.getSurface(length, width, height - 1) + self.getSurface(length, width, height - 2)\n        return self.cache[length * width * height]\n\n\ndef main():\n    Solution().getSurface(3, 4, 1)\n\n\nif __name__ == '__main__':\n    main()",
    "from math import pi\n\n\ndef surface(length, width, height):\n    \"\"\"\n    Surface is the area of the cuboid.\n    \"\"\"\n    return length * width * height\n\n\ndef surface_of_a_cube(length, width, height):\n    \"\"\"\n    Surface is the area of a cube.\n    \"\"\"\n    return length * width * height\n\n\ndef surface_of_a_sphere(radius):\n    \"\"\"\n    Surface is the area of a sphere.\n    \"\"\"\n    return pi * radius * radius\n\n\ndef main():\n    \"\"\"\n    Surface of a cube is the area of the cuboid.\n    \"\"\"\n    print(surface_of_a_cube(2, 2, 2))\n    print(surface_of_a_cube(2, 3, 4))\n    print(surface_of_a_cube(3, 4, 5))\n    print(surface_of_a_cube(3, 5, 6))\n    print(surface_of_a_cube(4, 5, 6))\n    print(surface_of_a_cube(5, 6, 7))\n    print(surface_of_a_cube(6, 7, 8))\n    print(surface_of_a_cube(7, 8, 9))\n    print(surface_of_a_cube(8, 9, 10))\n    print(surface_of_a_cube(9, 10, 11))\n    print(surface_of_a_cube(10, 11, 12))\n    print(surface_of_a_cube(11, 12, 13))\n    print(surface_of_a_cube(12, 13, 14))\n    print(surface_of_a_cube(13, 14, 15))\n    print(surface_of_a_cube(14, 15, 16))\n    print(surface_of_a_cube(15, 16, 17))\n    print(surface_of_a_cube(16, 17, 18))\n    print(surface_of_a_cube(17, 18, 19))\n    print(surface_of_a_cube(18, 19, 20))\n    print(surface_of_a_cube(19, 20, 21))\n    print",
    "import math\n\ndef cuboid_area(length, width, height):\n    return length * width * height\n\ndef main():\n    print(\"Surface area of a cuboid is\", cuboid_area(3, 4, 5))\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    def surfaceArea(self, l: int, b: int, w: int, h: int) -> int:\n        return l * (b + h) + w * (b + h) + (l + w) * (b + h)\n\n# Note:\n# This is the same as the solution in the book.\n# https://www.youtube.com/watch?v=QbYXQrV5JgU",
    "import math\n\n\ndef area(length, width, height):\n    return length * width * height\n\n\ndef surface(length, width, height):\n    return area(length, width, height) - length * width\n\n\ndef main():\n    print(area(3, 4, 5))\n    print(surface(3, 4, 5))\n\n\nif __name__ == '__main__':\n    main()",
    "from __future__ import print_function\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Return the surface area of a cuboid with given dimensions.\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    print(cuboid_area(3, 4, 5))",
    "def cuboid_surface_area(l, w, h):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    \"\"\"\n    return l * w * h\n\ndef main():\n    \"\"\"\n    Test the solution.\n    \"\"\"\n    assert cuboid_surface_area(1, 2, 3) == 36\n    assert cuboid_surface_area(1, 2, 3) == 36\n    assert cuboid_surface_area(2, 3, 4) == 36\n    assert cuboid_surface_area(1, 2, 3) == cuboid_surface_area(2, 3, 4)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cuboid_area(length, width, height):\n    return length * width * height\n\n\ndef main():\n    print(cuboid_area(1, 2, 3))\n    print(cuboid_area(4, 5, 6))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef cuboid_area(width, height, depth):\n    \"\"\"\n    Calculates the surface area of a cuboid with a given width, height and depth.\n    \"\"\"\n    # Calculate surface area of a cuboid.\n    return (math.pi * (width ** 2) + math.pi * (height ** 2) + math.pi * (depth ** 2)) / 6\n\n\nif __name__ == \"__main__\":\n    print cuboid_area(10, 20, 30)",
    "import math\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Calculates the area of a cuboid with a given length, width and height.\n    \"\"\"\n    return length * width * height\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print cuboid_area(4, 5, 6)\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/cuboid-area\n# http://www.geeksforgeeks.org/cuboid-surface-area-2/\n# http://www.geeksforgeeks.org/area-of-a-cube/\n\n# The area of a cuboid is the sum of the lengths of the sides\n# of the cuboid.\n\n# This is a recursive solution.\n\n# n = number of sides\n# s = side length\n# a = area of the cuboid\n# f(n, s, a) = f(n-1, s, a) + f(n-1, s/2, a*(s/2))\n\ndef area(n, s, a):\n    if n == 0:\n        return a\n    elif n == 1:\n        return a * s\n    else:\n        return area(n-1, s/2, a*(s/2))\n\nprint(area(3, 4, 4))",
    "from math import sqrt\n\n\ndef surface_area(width, height, depth):\n    \"\"\"\n    Surface area of a cuboid.\n    \"\"\"\n    return (width * height + width * depth + height * depth) / 2\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print('Surface area of a cuboid with dimensions: {}x{}x{} is: {}.'.format(\n        width, height, depth, surface_area(width, height, depth)))\n\n\nif __name__ == '__main__':\n    main()",
    "def cuboid_surface_area(width, height, length):\n    \"\"\"\n    :param width: Width of the cuboid\n    :param height: Height of the cuboid\n    :param length: Length of the cuboid\n    :return: Surface area of the cuboid\n    \"\"\"\n    return width * height * length\n\nif __name__ == \"__main__\":\n    print(cuboid_surface_area(1, 2, 3))",
    "from math import sqrt\n\n\ndef cuboid_surface_area(height, width, length):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :type length: int\n    :rtype: int\n    \"\"\"\n    return (height * width * length) / 2\n\n\nif __name__ == '__main__':\n    height = int(input())\n    width = int(input())\n    length = int(input())\n    print(cuboid_surface_area(height, width, length))",
    "from math import sqrt\n\n\ndef surface_area(length, width, height):\n    \"\"\"\n    :param length: The length of the cuboid\n    :param width: The width of the cuboid\n    :param height: The height of the cuboid\n    :return: The surface area of the cuboid\n    \"\"\"\n    area = length * width * height\n\n    return area\n\n\ndef main():\n    print(surface_area(2, 2, 2))\n    print(surface_area(5, 5, 5))\n    print(surface_area(3, 3, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def area(x, y, z):\n    \"\"\"\n    For a cuboid with dimensions x, y, and z, return the surface area.\n    \"\"\"\n    return x*y*z\n\ndef test(x, y, z):\n    \"\"\"\n    Test your function.\n    \"\"\"\n    print \"x = %d\\ny = %d\\nz = %d\\narea = %d\" % (x, y, z, area(x, y, z))\n\nif __name__ == \"__main__\":\n    test(1, 2, 3)",
    "import math\ndef cuboid(x, y, z):\n    return (x * y) + (y * z) + (z * x)\n\ndef surface(x, y, z):\n    return math.sqrt(cuboid(x, y, z))\n\ndef area(x, y, z):\n    return cuboid(x, y, z)\n\nif __name__ == '__main__':\n    print surface(1, 2, 3)",
    "# Your function will be called like this:\n# area = surface(width, height, depth)\n# Example:\n# >>> area = surface(1, 1, 1)\n# >>> area = surface(3, 2, 1)\n# >>> area = surface(4, 2, 3)\n# >>> area = surface(5, 3, 4)\n# >>> area = surface(5, 5, 5)\n# >>> area = surface(6, 5, 7)\n# >>> area = surface(5, 6, 7)\n# >>> area = surface(6, 6, 7)\n# >>> area = surface(7, 7, 7)\n\ndef surface(width, height, depth):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :type depth: int\n    :rtype: int\n    \"\"\"\n    return (width + height + depth) * 3",
    "def surface_area(width, height, depth):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :type depth: int\n    :rtype: int\n    \"\"\"\n    return width * height * depth\n\nif __name__ == '__main__':\n    print surface_area(5, 6, 7)",
    "class Solution(object):\n    def cuboidArea(self, l, b, w, h):\n        \"\"\"\n        :type l: int\n        :type b: int\n        :type w: int\n        :type h: int\n        :rtype: int\n        \"\"\"\n        return (l + w) * (b + h) - l * w - l * h - b * w - b * h",
    "# https://www.hackerrank.com/challenges/cuboid-surface-area\n# https://www.hackerrank.com/challenges/cuboid-volume\n# https://www.hackerrank.com/challenges/cuboid-volume-2\n# https://www.hackerrank.com/challenges/cuboid-volume-3\n# https://www.hackerrank.com/challenges/cuboid-volume-4\n# https://www.hackerrank.com/challenges/cuboid-volume-5\n# https://www.hackerrank.com/challenges/cuboid-volume-6\n# https://www.hackerrank.com/challenges/cuboid-volume-7\n# https://www.hackerrank.com/challenges/cuboid-volume-8\n# https://www.hackerrank.com/challenges/cuboid-volume-9\n# https://www.hackerrank.com/challenges/cuboid-volume-10\n# https://www.hackerrank.com/challenges/cuboid-volume-11\n# https://www.hackerrank.com/challenges/cuboid-volume-12\n# https://www.hackerrank.com/challenges/cuboid-volume-13\n# https://www.hackerrank.com/challenges/cuboid-volume-14\n# https://www.hackerrank.com/challenges/cuboid-volume-15\n# https://www.hackerrank.com/challenges/cuboid-volume-16\n# https://www.hackerrank.com/challenges/cuboid-volume-17\n# https://www.hackerrank.com/challenges/cuboid-volume-18\n# https://www.hackerrank.com/challenges/cuboid-volume-19\n# https://www.hackerrank.com/challenges/cuboid-volume-20\n# https://www.hackerrank.com/challenges/cuboid-volume-21\n# https://www.hackerrank.com/challenges/cuboid-volume-22\n# https://www.hackerr",
    "import math\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Calculate the area of a cuboid.\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Main function for testing.\n    \"\"\"\n    print cuboid_area(3, 4, 5)\n\nif __name__ == \"__main__\":\n    main()",
    "__author__ = 'Danyang'\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        def surface(a, b, c):\n            return a * b + b * c + c * a\n\n        return sum(surface(x, y, z) for x in range(1, a + 1)\n                   for y in range(1, b + 1)\n                   for z in range(1, c + 1))\n\n\nif __name__==\"__main__\":\n    import sys\n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        a, b, c = map(int, f.readline().strip().split(' '))\n        cipher = [int(x) for x in f.readline().strip().split(' ')]\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,",
    "import math\n\ndef cuboid_area(width, length, height):\n    return width * length * height\n\ndef main():\n    print(cuboid_area(1, 2, 3))\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/cuboid-area\ndef area(x, y, z):\n    \"\"\"\n    >>> area(3, 4, 5)\n    12\n    >>> area(5, 5, 5)\n    25\n    >>> area(5, 5, 5)\n    25\n    >>> area(1, 1, 1)\n    1\n    \"\"\"\n    return x * y * z\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef cuboid_area(length, width, height):\n    return length * width * height\n\ndef area_of_a_cube(length, width, height):\n    return math.pi * length * width * height\n\ndef main():\n    print \"Surface area of a cube: \", cuboid_area(1, 1, 1)\n    print \"Surface area of a cube: \", area_of_a_cube(1, 1, 1)\n\nif __name__ == '__main__':\n    main()",
    "import numpy as np\n\n\ndef cuboid_area(l, w, h):\n    \"\"\"\n    Compute the surface area of a cuboid.\n\n    :param l: length of the cuboid in x-direction.\n    :param w: width of the cuboid in y-direction.\n    :param h: height of the cuboid in z-direction.\n    :return: Surface area of the cuboid.\n    \"\"\"\n\n    return np.pi * l * w * h\n\n\ndef main():\n    print(cuboid_area(1, 2, 3))\n    print(cuboid_area(2, 1, 3))\n    print(cuboid_area(2, 3, 1))\n    print(cuboid_area(3, 1, 2))\n    print(cuboid_area(3, 2, 1))\n    print(cuboid_area(3, 3, 1))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef area(x1, y1, z1, x2, y2, z2):\n    x_length = x2 - x1\n    y_length = y2 - y1\n    z_length = z2 - z1\n\n    return math.sqrt(x_length * y_length * z_length)\n\n\ndef main():\n    print(area(0, 0, 0, 1, 1, 1))\n    print(area(0, 0, 0, 1, 2, 2))\n    print(area(0, 0, 0, 2, 2, 2))\n    print(area(0, 0, 0, 1, 1, 3))\n    print(area(0, 0, 0, 3, 3, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.hackerrank.com/challenges/cuboid/problem\n\nimport math\n\n\ndef area(x, y, z):\n    return math.sqrt(x * y * z)\n\n\ndef main():\n    x, y, z = map(int, input().split())\n    print(area(x, y, z))\n\n\nif __name__ == '__main__':\n    main()",
    "def cuboid_area(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    \"\"\"\n    return (x1 + x2) * (y1 + y2) * (z1 + z2) - x1 * y1 * z1 - x1 * y2 * z1 - x2 * y1 * z1 - x2 * y2 * z1 - x1 * y1 * z2 - x1 * y2 * z2 - x2 * y1 * z2 - x2 * y2 * z2\n\nif __name__ == '__main__':\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cuboid_area(1, 1, 1, 3, 3, 3))\n    print(cub",
    "def cuboid_area(width, height, depth):\n    \"\"\"\n    width, height and depth are the dimensions of the cuboid.\n\n    >>> cuboid_area(1, 1, 1)\n    2\n    >>> cuboid_area(2, 3, 4)\n    12\n    >>> cuboid_area(5, 6, 7)\n    343\n    \"\"\"\n    return width * height * depth\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def cuboid_area(height, width, length):\n    \"\"\"\n    Given a cuboid's height, width and length, return its surface area.\n\n    >>> cuboid_area(2, 3, 4)\n    12\n    >>> cuboid_area(1, 1, 1)\n    1\n    \"\"\"\n    return height * width * length\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        if cipher == \"\":\n            return 0\n\n        def find_surface(sides):\n            \"\"\"\n            find the surface of a cuboid with sides\n\n            :param sides:\n            :return:\n            \"\"\"\n            if sides == 1:\n                return 1\n            elif sides == 2:\n                return 4\n            elif sides == 3:\n                return 8\n            elif sides == 4:\n                return 16\n            elif sides == 5:\n                return 32\n            elif sides == 6:\n                return 64\n            elif sides == 7:\n                return 128\n            elif sides == 8:\n                return 256\n            else:\n                return 0\n\n        surface = 0\n        for i in range(1, cipher.count('(')):\n            surface += find_surface(int(cipher[i:i+1]))\n        surface += find_surface(int(cipher[cipher.count('(')+1:]))\n\n        return surface\n\n\nif __name__ == \"__main__\":\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = f.readline().strip()\n\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,",
    "class Solution(object):\n    def getSurfaceArea(self, l, b, r, t):\n        \"\"\"\n        :type l: int\n        :type b: int\n        :type r: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        return (r - l) * (t - b)\n\nif __name__ == \"__main__\":\n    assert Solution().getSurfaceArea(1, 1, 3, 3) == 24\n    assert Solution().getSurfaceArea(1, 2, 3, 1) == 24\n    assert Solution().getSurfaceArea(2, 2, 4, 3) == 64",
    "import math\n\ndef cuboid_area(height, width, length):\n    return (height * width * length) / 2\n\ndef main():\n    height = int(input(\"Enter the height of cuboid: \"))\n    width = int(input(\"Enter the width of cuboid: \"))\n    length = int(input(\"Enter the length of cuboid: \"))\n\n    print(\"The surface area of a cuboid with height {0}, width {1} and length {2} is {3}\".format(height, width, length, cuboid_area(height, width, length)))\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef surface(dimensions):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n    dimensions is a tuple of the form (length, width, height)\n    \"\"\"\n    return dimensions[0] * dimensions[1] * dimensions[2]\n\nif __name__ == '__main__':\n    print surface((2, 3, 4))",
    "from math import sqrt\n\ndef cuboid_area(height, width, depth):\n    \"\"\"\n    Calculate the area of a cuboid.\n\n    >>> cuboid_area(1, 1, 1)\n    6.0\n    >>> cuboid_area(2, 2, 2)\n    12.0\n    >>> cuboid_area(3, 4, 5)\n    60.0\n    >>> cuboid_area(6, 8, 10)\n    336.0\n    >>> cuboid_area(8, 4, 2)\n    12.0\n    >>> cuboid_area(4, 4, 4)\n    16.0\n    >>> cuboid_area(5, 1, 1)\n    8.0\n    >>> cuboid_area(1, 5, 1)\n    10.0\n    >>> cuboid_area(1, 1, 5)\n    5.0\n    \"\"\"\n\n    return height * width * depth\n\ndef test_cuboid_area(height, width, depth):\n    assert cuboid_area(height, width, depth) == 12 * (height * width + height * depth + width * depth) / 2\n\n\ndef main():\n    print(cuboid_area(5, 4, 3))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a cuboid.\nclass Cuboid(object):\n    def __init__(self, x, y, z, l, w, h):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.l = l\n        self.w = w\n        self.h = h\n\n    def __repr__(self):\n        return \"%s %s %s\" % (self.x, self.y, self.z)\n\nclass Solution(object):\n    def surfaceArea(self, cuboid):\n        \"\"\"\n        :type cuboid: Cuboid\n        :rtype: int\n        \"\"\"\n        return (cuboid.l * cuboid.w) + (cuboid.w * cuboid.h) + (cuboid.h * cuboid.l)",
    "def cuboid_area(length, width, height):\n    \"\"\"\n    >>> cuboid_area(3, 4, 5)\n    12\n    >>> cuboid_area(3, 4, 1)\n    6\n    >>> cuboid_area(1, 4, 5)\n    8\n    >>> cuboid_area(3, 1, 5)\n    6\n    >>> cuboid_area(3, 4, 1)\n    6\n    >>> cuboid_area(1, 4, 1)\n    4\n    >>> cuboid_area(1, 1, 1)\n    1\n    >>> cuboid_area(1, 1, 1)\n    1\n    \"\"\"\n    return length * width * height\n\ndef main():\n    print(cuboid_area(3, 4, 5))\n    print(cuboid_area(3, 4, 1))\n    print(cuboid_area(1, 4, 5))\n    print(cuboid_area(3, 1, 5))\n    print(cuboid_area(3, 4, 1))\n    print(cuboid_area(1, 4, 1))\n    print(cuboid_area(1, 1, 1))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef surface(length, width, height):\n    \"\"\"\n    Return the surface area of a cuboid.\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    print(surface(3, 4, 5))\n    print(surface(4, 5, 6))",
    "import math\n\ndef surface_area(length, width, height):\n    \"\"\"\n    Returns the surface area of a cuboid.\n    \"\"\"\n    return math.pi * (length * width + width * height + height * length)\n\ndef main():\n    \"\"\"\n    Returns the surface area of a cuboid.\n    \"\"\"\n    assert(len(sys.argv) == 3)\n    length, width, height = [int(x) for x in sys.argv[1:]]\n    assert(length > 0 and width > 0 and height > 0)\n    assert(surface_area(length, width, height) == 6 * (length * width + width * height + height * length))\n\nif __name__ == '__main__':\n    main()",
    "def area(x, y, z):\n    return (x * y) + (y * z) + (z * x)\n\ndef test_area(x, y, z):\n    assert area(x, y, z) == (x * y) + (y * z) + (z * x)\n\ntest_area(2, 3, 4)\ntest_area(1, 2, 3)\ntest_area(3, 2, 1)\ntest_area(3, 1, 2)\ntest_area(3, 3, 1)\ntest_area(3, 1, 1)\ntest_area(1, 1, 1)",
    "# https://www.hackerrank.com/challenges/cuboid-area\n# https://www.hackerrank.com/challenges/cuboid-volume\n\ndef cuboid_area(height, width, length):\n    \"\"\"\n    :param height: height of the cuboid\n    :param width: width of the cuboid\n    :param length: length of the cuboid\n    :return: the surface area of the cuboid\n    \"\"\"\n    return height * width * length\n\nif __name__ == '__main__':\n    height, width, length = map(int, input().split())\n\n    print(cuboid_area(height, width, length))",
    "def surfaceArea(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return length * width * height\n\n# print surfaceArea(5, 6, 7)\n# print surfaceArea(1, 2, 3)\n# print surfaceArea(4, 5, 6)",
    "import math\n\ndef cuboid_area(l, w, h):\n    return l * w + w * h + h * l\n\ndef print_area(l, w, h):\n    print(\"Area of a cuboid with side length {} and width {} is {}\".format(l, w, cuboid_area(l, w, h)))\n\ndef main():\n    print_area(1, 1, 1)\n    print_area(2, 3, 5)\n    print_area(10, 10, 10)\n    print_area(100, 100, 100)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef get_surface_area(length, width, height):\n    \"\"\"\n    :param length: Length of the cuboid.\n    :param width: Width of the cuboid.\n    :param height: Height of the cuboid.\n    :return: Surface area of the cuboid.\n    \"\"\"\n    return length * width * height\n\n\ndef main():\n    print(get_surface_area(3, 4, 5))\n    print(get_surface_area(5, 3, 2))\n    print(get_surface_area(2, 3, 3))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef area_cuboid(x, y, z):\n    \"\"\"\n    Return the surface area of a cuboid with length x, width y and height z.\n    \"\"\"\n    return (x * y) * z\n\ndef test_area_cuboid():\n    assert area_cuboid(1, 1, 1) == 6.0\n    assert area_cuboid(2, 2, 2) == 24.0\n    assert area_cuboid(3, 4, 5) == 144.0\n\nif __name__ == \"__main__\":\n    test_area_cuboid()",
    "# A cuboid can be represented by a list of points, like [1, 2, 3], [2, 4, 5], [3, 5, 6].\n# The area of the cuboid is the sum of the area of the cuboids which are formed by the four corner points.\n\n# Example:\n# Input: [[1,2,3], [2,4,5], [3,5,6], [1,2,4], [2,3,5], [3,4,6]]\n# Output: [24, 40, 48, 16, 32, 48]\n\n# Note:\n# The points of a cuboid don't necessarily form a convex polygon.\n# The answer is guaranteed to be at most 2^31 - 1.\n\n# Hint:\n# The area of a cuboid is the sum of the areas of all its sub-cuboids.\n# A cuboid is convex if and only if the areas of its sub-cuboids are all positive.\n\nclass Solution(object):\n    def surfaceArea(self, cuboid):\n        \"\"\"\n        :type cuboid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not cuboid:\n            return 0\n        cuboid = sorted(cuboid, key=lambda x: x[0], reverse=True)\n        return sum(x[1] for x in cuboid)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.surfaceArea([[1, 2, 3], [2, 4, 5], [3, 5, 6], [1, 2, 4], [2, 3, 5], [3, 4, 6]]))\n    print(sol.surfaceArea([[1, 2, 3], [2, 4, 5], [3, 5, 6], [1, 2, 4], [2, 3, 5], [3, 4, 6]]))\n    print(sol.surfaceArea([[1, 2, 3], [2, 4, 5], [3, 5, 6], [1, 2, 4], [2, 3, 5], [3, 4, 6]]))",
    "def cuboid_surface_area(width, height, depth):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :type depth: int\n    :rtype: int\n    \"\"\"\n    return (width + height + depth) * (width + height + depth) / 2\n\n\nif __name__ == '__main__':\n    assert cuboid_surface_area(3, 4, 5) == 12\n    assert cuboid_surface_area(4, 3, 5) == 12\n    assert cuboid_surface_area(5, 3, 4) == 12\n    assert cuboid_surface_area(5, 4, 3) == 12\n    assert cuboid_surface_area(4, 5, 3) == 12\n    assert cuboid_surface_area(3, 5, 4) == 12\n    assert cuboid_surface_area(3, 4, 5) == 12\n    assert cuboid_surface_area(4, 5, 3) == 12\n    assert cuboid_surface_area(5, 4, 3) == 12\n    assert cuboid_surface_area(5, 3, 4) == 12\n    assert cuboid_surface_area(4, 3, 5) == 12\n    assert cuboid_surface_area(5, 4, 3) == 12\n    assert cuboid_surface_area(4, 5, 3) == 12",
    "# https://stackoverflow.com/questions/31592332/calculate-surface-area-of-a-rectangle-in-python\n\ndef surface(length, width, height):\n    \"\"\"\n    Calculate the surface area of a cuboid with length, width and height.\n    :param length: The length of the cuboid.\n    :param width: The width of the cuboid.\n    :param height: The height of the cuboid.\n    :return: The surface area of the cuboid.\n    \"\"\"\n    return length * width * height\n\n# Test Cases\n\nassert(surface(1, 1, 1) == 1)\nassert(surface(2, 2, 2) == 4)\nassert(surface(2, 3, 4) == 12)\nassert(surface(2, 3, 5) == 20)\nassert(surface(3, 3, 3) == 9)\nassert(surface(3, 3, 4) == 24)\nassert(surface(3, 3, 5) == 36)\nassert(surface(3, 3, 6) == 60)\n\n# Your code\n\ndef surface(length, width, height):\n    return length * width * height\n\n# Your code\n\ndef surface(length, width, height):\n    return length * width * height\n\n# Your code\n\ndef surface(length, width, height):\n    return length * width * height",
    "from math import sqrt\n\ndef cuboid_area(height, width, length):\n    return sqrt(height**2 + width**2 + length**2)\n\nif __name__ == '__main__':\n    assert cuboid_area(2, 3, 4) == 24\n    assert cuboid_area(1, 3, 4) == 12\n    assert cuboid_area(1, 3, 1) == 3\n    assert cuboid_area(1, 1, 1) == 1\n    assert cuboid_area(1, 1, 3) == 3\n    assert cuboid_area(1, 3, 1) == 3\n    assert cuboid_area(1, 3, 3) == 9\n    assert cuboid_area(3, 3, 3) == 27\n    assert cuboid_area(2, 1, 1) == 2\n    assert cuboid_area(2, 1, 3) == 6\n    assert cuboid_area(2, 3, 1) == 6\n    assert cuboid_area(2, 3, 3) == 9\n    assert cuboid_area(2, 2, 2) == 4\n    assert cuboid_area(2, 2, 4) == 8\n    assert cuboid_area(2, 4, 2) == 8\n    assert cuboid_area(2, 4, 4) == 16\n    assert cuboid_area(4, 4, 4) == 64",
    "import math\n\ndef area(height, width, depth):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :type depth: int\n    :rtype: int\n    \"\"\"\n    return math.pi * (height * width + width * depth + depth * height) / 4.0\n\nif __name__ == '__main__':\n    assert area(3, 4, 5) == 12, 'Incorrect calculation!'\n    print 'Correct! The surface area of a cuboid is %s.' % area(3, 4, 5)",
    "from math import sqrt\n\n\ndef cuboid_area(x, y, z):\n    \"\"\"\n    Return the area of the cuboid.\n    \"\"\"\n    return x * y * z\n\n\ndef main():\n    \"\"\"\n    Write a function to find the surface area of a cuboid.\n    \"\"\"\n    assert(type(x) is int)\n    assert(type(y) is int)\n    assert(type(z) is int)\n\n    x = input(\"Enter x-dimension: \")\n    y = input(\"Enter y-dimension: \")\n    z = input(\"Enter z-dimension: \")\n\n    print(cuboid_area(x, y, z))\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef area(a, b, c, d):\n    \"\"\"\n    Return the area of a cuboid.\n\n    a, b, c, and d are the dimensions of the cuboid.\n    \"\"\"\n    return a*b*c\n\ndef test_area():\n    assert area(1, 2, 3, 4) == 24\n    assert area(1, 2, 3, 5) == 30\n\ndef test_area2():\n    assert area(1, 1, 1, 1) == 4\n    assert area(1, 1, 1, 2) == 8\n    assert area(1, 1, 1, 3) == 12\n    assert area(1, 1, 1, 4) == 16\n\nif __name__ == '__main__':\n    test_area()\n    test_area2()",
    "import math\nimport numpy as np\n\n\ndef cuboid_area(x, y, z):\n    return x * y * z\n\n\ndef test_cuboid_area():\n    assert cuboid_area(1, 1, 1) == 1\n    assert cuboid_area(2, 2, 2) == 4\n    assert cuboid_area(3, 4, 5) == 20\n\n\ndef main():\n    n = input(\"Enter the dimensions of the cuboid: \")\n    if n.isdigit():\n        n = int(n)\n        x, y, z = [int(i) for i in input().split()]\n        print(cuboid_area(x, y, z))\n\n\nif __name__ == \"__main__\":\n    main()",
    "class AreaCuboid:\n    def __init__(self, width, height, depth):\n        self.width = width\n        self.height = height\n        self.depth = depth\n\n    def area(self):\n        return self.width * self.height * self.depth\n\n    def volume(self):\n        return self.width * self.height * self.depth * self.height\n\n    def __str__(self):\n        return \"Area: \" + str(self.area()) + \" Volume: \" + str(self.volume())\n\n\ndef main():\n    # test_area_cuboid()\n    test_volume_cuboid()\n\n\ndef test_area_cuboid():\n    cuboid = AreaCuboid(2, 3, 4)\n    assert cuboid.area() == 12\n    assert str(cuboid) == \"Area: 12 Volume: 12\"\n\n\ndef test_volume_cuboid():\n    cuboid = AreaCuboid(2, 3, 4)\n    assert cuboid.volume() == 24\n    assert str(cuboid) == \"Area: 12 Volume: 24\"\n\n\nif __name__ == '__main__':\n    main()",
    "def cuboid_area(side1, side2, side3):\n    \"\"\"\n    This function is called and defined in the parent\n    class Vector.\n    \"\"\"\n    return (side1**2 + side2**2 + side3**2)**0.5\n\n\nclass Vector(object):\n    \"\"\"\n    The class that stores the surface area of a cuboid.\n    \"\"\"\n    def __init__(self, side1, side2, side3):\n        \"\"\"\n        The function is called and defined in the parent\n        class Vector.\n        \"\"\"\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def surface_area(self):\n        \"\"\"\n        This function is called and defined in the parent\n        class Vector.\n        \"\"\"\n        return cuboid_area(self.side1, self.side2, self.side3)\n\n\nif __name__ == '__main__':\n    print(Vector(1, 2, 3).surface_area())\n    print(cuboid_area(1, 2, 3))",
    "import math\n\ndef cuboid_area(width, height, depth):\n    \"\"\"\n    Return the surface area of a cuboid.\n\n    Args:\n        width (float): The width of the cuboid.\n        height (float): The height of the cuboid.\n        depth (float): The depth of the cuboid.\n\n    Returns:\n        float: The surface area of the cuboid.\n    \"\"\"\n    return width * height * depth\n\n\ndef test_cuboid_area(width, height, depth):\n    \"\"\"\n    Test the function that calculates the surface area of a cuboid.\n\n    Args:\n        width (float): The width of the cuboid.\n        height (float): The height of the cuboid.\n        depth (float): The depth of the cuboid.\n\n    Returns:\n        bool: True if the function is correct, False otherwise.\n    \"\"\"\n    print(cuboid_area(width, height, depth))\n    print(math.pi * width * height)\n    return True\n\nif __name__ == '__main__':\n    print(test_cuboid_area(2, 3, 4))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def getSurfaceArea(self, l, w, h, r):\n        \"\"\"\n        :param l: the length of the cuboid\n        :param w: the width of the cuboid\n        :param h: the height of the cuboid\n        :param r: the radius of the cuboid\n        :return: the surface area\n        \"\"\"\n        self.area = l * w * h + l * w + l * h + w * h + r * r + (r * r + r) * (r * r + r)\n\n    def getSurfaceArea2(self, l, w, h, r):\n        \"\"\"\n        :param l: the length of the cuboid\n        :param w: the width of the cuboid\n        :param h: the height of the cuboid\n        :param r: the radius of the cuboid\n        :return: the surface area\n        \"\"\"\n        self.area = (l * w + l + w) * (h * r + h + r) + (l * w + l + w) * (h * r + h + r) + (l * w + l + w) * (h * r + h + r)\n        self.area += (l * w + l + w) * (h * r + h + r) + (l * w + l + w) * (h * r + h + r) + (l * w + l + w) * (h * r + h + r)\n\n        # r * r * (r * r + r)\n        self.area += (r * r + r) * (r * r + r) * (r * r + r)\n\n        # r * r * r * r\n        self.area += (r * r + r) * (r * r + r) * (r * r + r) * (r * r + r)\n\n        # r * r * r * r * r * r * r * r\n        self.area += (r * r + r) * (r * r + r) * (r * r + r) * (r * r + r)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        return sum(cipher)\n\n\nif __name__ == \"__main__\":\n    import sys\n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        N = int(f.readline().strip())\n        cipher = []\n        for _ in xrange(N):\n            cipher.append(map(int, f.readline().strip().split(' ')))\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,",
    "#!/usr/bin/env python\n\n# import the necessary packages\nimport math\nimport os\nimport sys\nimport numpy as np\nimport scipy.io as io\n\n# import the necessary packages\nimport matplotlib.pyplot as plt\n\n# get the absolute path of the script\nmy_path = os.path.dirname(os.path.abspath(__file__))\n\n# get the directory of the current script\ncurrent_path = os.path.dirname(os.path.abspath(sys.argv[0]))\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the directory of the current script\ncurrent_path = os.path.dirname(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the directory of the current script\ncurrent_path = os.path.dirname(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name = os.path.basename(current_path)\n\n# get the name of the current script\nscript_name =",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@date: 2017-06-03\n@author: hearthstone\n@contact: https://github.com/hearthstone\n\"\"\"\n\nimport math\n\ndef surface(length, width, height):\n    return length * width * height\n\ndef surface_cuboid(length, width, height):\n    return length * width * height + (length + 1) * (width + 1) * (height + 1)\n\nif __name__ == '__main__':\n    print(\"surface(3, 4, 5) = \", surface(3, 4, 5))\n    print(\"surface_cuboid(3, 4, 5) = \", surface_cuboid(3, 4, 5))",
    "# https://www.hackerrank.com/challenges/cuboid-area/problem\n\nimport math\n\ndef cuboid_area(a, b, c, d, e, f, g, h, i, j):\n    s = (a * b * c * d + b * c * d * e + c * d * e * f + d * e * f * g +\n         e * f * g * h + f * g * h * i + g * h * i * j)\n    return s\n\na, b, c, d, e, f, g, h, i, j = map(int, input().strip().split(' '))\narea = cuboid_area(a, b, c, d, e, f, g, h, i, j)\nprint(area)",
    "import math\n\ndef cuboid_area(width, height, depth):\n    return width * height * depth\n\ndef main():\n    width = int(input())\n    height = int(input())\n    depth = int(input())\n    print(cuboid_area(width, height, depth))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cuboid_surface_area(width, height, depth):\n    \"\"\"\n    Calculate the surface area of a cuboid.\n\n    :param width: the width of the cuboid\n    :type width: int\n    :param height: the height of the cuboid\n    :type height: int\n    :param depth: the depth of the cuboid\n    :type depth: int\n    :returns: the surface area of the cuboid\n    :rtype: float\n    \"\"\"\n    return math.pi * width * height * depth\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert cuboid_surface_area(1, 2, 3) == 6, \"A1\"\n    assert cuboid_surface_area(2, 1, 3) == 6, \"A2\"\n    assert cuboid_surface_area(1, 3, 5) == 8, \"A3\"\n    assert cuboid_surface_area(5, 3, 1) == 8, \"A4\"\n    assert cuboid_surface_area(5, 3, 3) == 18, \"A5\"\n    assert cuboid_surface_area(3, 3, 5) == 18, \"A6\"\n    assert cuboid_surface_area(2, 5, 1) == 18, \"A7\"\n    assert cuboid_surface_area(1, 5, 2) == 18, \"A8\"\n    assert cuboid_surface_area(5, 2, 1) == 18, \"A9\"\n    assert cuboid_surface_area(5, 1, 2) == 18, \"A10\"",
    "def cuboid_surface_area(dimensions):\n    \"\"\"\n    Write a function to find the surface area of a cuboid.\n\n    :param dimensions: dimensions of the cuboid\n    :type dimensions: tuple\n    :return: surface area of the cuboid\n    :rtype: float\n    \"\"\"\n    return sum(dimensions) * (dimensions[0] + dimensions[1] + dimensions[2])\n\n\nif __name__ == '__main__':\n    assert cuboid_surface_area((3, 4, 5)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((3, 5, 4)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((3, 4, 5)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((5, 4, 3)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((5, 3, 4)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((5, 4, 3)) == 12, '3D cuboid surface area'\n    assert cuboid_surface_area((5, 3, 4)) == 12, '3D cuboid surface area'",
    "import math\n\n# define a cuboid\ndef cuboid(x, y, z, side1, side2, side3):\n    \"\"\"\n    x, y, z: coordinates of the cuboid\n    side1, side2, side3: dimensions of the cuboid\n    return: surface area of the cuboid\n    \"\"\"\n    return (side1**2 + side2**2 + side3**2) * math.pi\n\ndef main():\n    print cuboid(2, 1, 1, 3, 3, 3)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\n\ndef cuboid_area(height, width, depth):\n    \"\"\"\n    Calculate the surface area of a cuboid with height, width and depth.\n    \"\"\"\n    return (math.pi * height * depth) + (math.pi * width * depth) + (math.pi * width * height)\n\n\ndef main():\n    height = int(input(\"Enter the height of the cuboid: \"))\n    width = int(input(\"Enter the width of the cuboid: \"))\n    depth = int(input(\"Enter the depth of the cuboid: \"))\n\n    print(\"The surface area of the cuboid is {}\".format(cuboid_area(height, width, depth)))\n\n\nif __name__ == \"__main__\":\n    main()",
    "from math import sqrt\n\ndef surface_area(x, y, z):\n    return (x * y) + (x * z) + (y * z)\n\n# Test case\nprint surface_area(1, 1, 1)\nprint surface_area(2, 2, 2)\nprint surface_area(3, 3, 3)\nprint surface_area(4, 4, 4)\nprint surface_area(5, 5, 5)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}