{
  "problem": {
    "task_id": "MBPP/201",
    "prompt": "Write a python function to check whether the elements in a list are same or not.",
    "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1",
    "test_list": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ],
    "challenge_test_list": [],
    "problem_id": 190
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def is_same(L1, L2):\n    \"\"\"\n    Write a function is_same(L1, L2) that returns True if L1 and L2 have the same elements, False otherwise.\n\n    Example\n    L1 = [1, 2, 3, 4]\n    L2 = [1, 2, 3, 4]\n    L3 = [1, 2, 3, 5]\n    L4 = [1, 2, 3, 4, 5]\n    \"\"\"\n    for i in range(0, len(L1)):\n        if L1[i]!= L2[i]:\n            return False\n    return True",
    "# List\n\n# list = [1, 2, 3]\n# list2 = [1, 2, 3, 4]\n# list3 = [1, 2, 3, 5]\n# list4 = [1, 2, 3, 4, 5]\n# list5 = [1, 2, 3, 5, 6]\n# list6 = [1, 2, 3, 5, 6, 7]\n# list7 = [1, 2, 3, 5, 6, 7, 8]\n# list8 = [1, 2, 3, 5, 6, 7, 8, 9]\n# list9 = [1, 2, 3, 5, 6, 7, 8, 9, 10]\n\n# list10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n# list11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n# list12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n# list13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n# list14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n# list15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# list16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n# list17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return a boolean\n    def isPalindrome(self, x):\n        if x == 0:\n            return True\n        if x < 0:\n            return False\n\n        left, right = 0, len(x)-1\n        while left < right:\n            if x[left]!= x[right]:\n                return False\n            left += 1\n            right -= 1\n\n        return True\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isPalindrome([0, 1, 2, 3, 4, 5])\n    print s.isPalindrome([0, 1, 2, 3, 4, 5, 6])\n    print s.isPalindrome([0, 1, 2, 3, 4, 5, 6, 7])",
    "def same_list(list1, list2):\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n#print same_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\nprint same_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])",
    "def is_same(l1, l2):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    :param l1: list to be checked\n    :param l2: list to be checked\n    :return: True if the elements are same, else False\n    \"\"\"\n    if l1 == l2:\n        return True\n    else:\n        return False\n\n# Your is_same function should accept two lists as input and return a boolean.",
    "def check_same_list(l1, l2):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    :param l1: A list.\n    :param l2: A list.\n    :return: True or False.\n    \"\"\"\n    # l1 and l2 are both list or both tuple.\n    if type(l1)!= type(l2):\n        return False\n\n    # l1 and l2 are both list or both tuple.\n    if len(l1)!= len(l2):\n        return False\n\n    for i in range(len(l1)):\n        # Check whether the elements are same or not.\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [4, 2, 3, 1]\n    print(check_same_list(l1, l2))",
    "def same(list1, list2):\n    return list1 == list2\n\ndef test_same():\n    assert same([1,2,3], [1,2,3])\n    assert not same([1,2,3], [1,2,4])\n\nif __name__ == \"__main__\":\n    test_same()",
    "def is_same(lst):\n    \"\"\"\n    lst is a list\n    return True if list is same, otherwise False\n    \"\"\"\n    # check if all elements are same\n    # for i in range(len(lst)):\n    #     if lst[i]!= lst[0]:\n    #         return False\n    return True\n\nif __name__ == '__main__':\n    print is_same([1, 1, 2, 3])\n    print is_same([1, 2, 3, 4, 5])\n    print is_same([1, 2, 3, 4])\n    print is_same([1, 2, 3])\n    print is_same([1, 2, 3, 4, 5, 6])\n    print is_same([1, 2, 3, 4, 5])\n    print is_same([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    print is_same([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    print is_same([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])",
    "def same(l1, l2):\n    \"\"\"\n    l1 and l2 are lists of strings.\n    Return True if the lists are same, otherwise return False.\n    \"\"\"\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = ['hello', 'world', 'hi', 'adios']\n    l2 = ['hello', 'world', 'hi', 'adios']\n    print same(l1, l2)",
    "#!/usr/bin/python\n\n# Example\n\n# List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# print(is_same(List))\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : True\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : False\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : True\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : False\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : True\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : False\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n# Output : True\n#\n# Input : List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21",
    "def same(list1, list2):\n    \"\"\"\n    Checks whether the elements in the two lists are same or not.\n    :param list1: First list to be checked\n    :param list2: Second list to be checked\n    :return: True if both list are same else False.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    for elem1, elem2 in zip(list1, list2):\n        if elem1!= elem2:\n            return False\n    return True\n\nprint(same([1, 2, 3], [1, 2, 3]))\nprint(same([1, 2, 3], [2, 2, 3]))\nprint(same([1, 2, 3], [1, 2, 4]))\nprint(same([1, 2, 3], [1, 3, 3]))",
    "def is_same(lst):\n    for e in lst:\n        if e not in lst:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print(is_same(lst))",
    "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/list-comparison-problem\n\ndef check_list(input_list):\n    if len(input_list) < 2:\n        return True\n\n    for i in range(1, len(input_list)):\n        if input_list[i]!= input_list[i - 1]:\n            return False\n    return True\n\ndef main():\n    input_list = list(map(int, input().split()))\n    print(check_list(input_list))\n\nif __name__ == \"__main__\":\n    main()",
    "def is_same(l1, l2):\n    \"\"\"\n    l1, l2: list of integers\n    return: bool\n    \"\"\"\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nl = [1, 2, 3, 4]\nprint(is_same(l, l))",
    "def same_elements(list_1, list_2):\n    \"\"\"\n    Check whether the elements in list_1 are same or not.\n\n    :param list_1: The first list to check.\n    :param list_2: The second list to check.\n    :return: True if both lists are same, False otherwise.\n    \"\"\"\n    return list_1 == list_2\n\nif __name__ == '__main__':\n    list_1 = [1,2,3,4]\n    list_2 = [1,2,3,4]\n    print same_elements(list_1, list_2)\n    list_1 = [1,2,3,4]\n    list_2 = [1,2,3,5]\n    print same_elements(list_1, list_2)\n    list_1 = [1,2,3,4]\n    list_2 = [1,2,3,4,5]\n    print same_elements(list_1, list_2)\n    list_1 = [1,2,3,4]\n    list_2 = [1,2,3,4,5]\n    print same_elements(list_1, list_2)",
    "def is_same(l1, l2):\n    \"\"\"\n    l1 and l2 are both lists.\n    Return True if all the elements in l1 are also in l2, and False otherwise.\n    \"\"\"\n    return all(item in l2 for item in l1)\n\nprint(is_same([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(is_same([1, 2, 3, 4, 5], [2, 3, 4, 5, 7]))\nprint(is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
    "def is_same(L1, L2):\n    \"\"\"\n    L1 and L2 are lists, and L1 and L2 have the same length.\n    Return True if L1 and L2 are same, else False.\n    \"\"\"\n    if len(L1)!= len(L2):\n        return False\n    for i in range(len(L1)):\n        if L1[i]!= L2[i]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    L1 = [1, 2, 3, 4, 5]\n    L2 = [1, 2, 3, 4, 5]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6]\n    L2 = [1, 2, 3, 4, 5, 6]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6, 7]\n    L2 = [1, 2, 3, 4, 5, 6, 7]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    L2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    L2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print is_same(L1, L2)\n    L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    L2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print is_same",
    "def is_same_list(a, b):\n    \"\"\"\n    :type a: list\n    :type b: list\n    :rtype: bool\n    \"\"\"\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [2, 3, 4]\n    c = [1, 2, 3]\n    d = [1, 2, 3, 4]\n    e = [1, 2, 3, 4, 5]\n    f = [1, 2, 3, 4, 5, 6]\n    g = [1, 2, 3, 4, 5, 6, 7]\n    h = [1, 2, 3, 4, 5, 6, 7, 8]\n    print is_same_list(a, b)\n    print is_same_list(c, d)\n    print is_same_list(c, e)\n    print is_same_list(c, f)\n    print is_same_list(c, g)\n    print is_same_list(c, h)",
    "# Define a function to check whether the elements in a list are same or not.\ndef same_elements(lst1, lst2):\n    # Write your code here.\n    # The return type is boolean.\n    # The return value is either True or False.\n    # The return value is True if the elements in the list are same, False otherwise.\n    # The return value is True if the elements in the list are same, False otherwise.\n    # If the elements in the list are same, return True.\n    # If the elements in the list are not same, return False.\n    if lst1 == lst2:\n        return True\n    else:\n        return False\n\n# Test your function\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [1, 2, 3, 4, 5]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6, 7]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6, 7, 8]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6, 7, 8, 9]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(same_elements(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 3, 4, 5, 6, 7, 8",
    "# Note:\n#  1. The elements of the list are not passed by reference, so you can modify the\n#     original list and its elements will affect the original list.\n#  2. If the elements are not same, the function will return True.\n#  3. The function is not recursive.\n\n# Example:\n#  >>> my_list = [1, 2, 3]\n#  >>> check_list(my_list)\n#  True\n#  >>> my_list = [1, 2, 4]\n#  >>> check_list(my_list)\n#  False\n\ndef check_list(lst):\n    if len(lst) == 0:\n        return False\n\n    for i in range(len(lst) - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n\n    return True",
    "def is_sorted(alist):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    \"\"\"\n\n    # base case\n    if alist == []:\n        return True\n    elif alist[0] < alist[1]:\n        return is_sorted(alist[1:])\n    else:\n        return False\n\n\ndef test_is_sorted():\n    assert is_sorted([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert not is_sorted([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert not is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert not is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\nif __name__ == '__main__':\n    test_is_sorted()",
    "def same(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return list1 == list2\n\n\"\"\"\nTest\n\"\"\"\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\nprint(same(list1, list2))",
    "# Write your code here\n\ndef is_same(l1, l2):\n    return all(x == y for x, y in zip(l1, l2))\n\nprint is_same([1, 2, 3], [2, 3, 4])\nprint is_same([1, 2, 3], [1, 2, 3])\nprint is_same([1, 2, 3], [1, 2, 3, 4])",
    "def is_sorted(list):\n    \"\"\"\n    Check whether the list is sorted or not.\n    :param list: List to be checked\n    :return: True if list is sorted, else False\n    \"\"\"\n    for i in range(len(list) - 1):\n        if list[i] > list[i + 1]:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(is_sorted(list))\n    return 0\n\nif __name__ == '__main__':\n    main()",
    "def is_same(l1, l2):\n    for i in l1:\n        if i not in l2:\n            return False\n    return True\n\n#print is_same([1, 2, 3], [3, 2, 1])\n#print is_same([1, 2, 3], [3, 2, 1, 2])\n#print is_same([1, 2, 3], [3, 2, 1, 2, 3])\n#print is_same([1, 2, 3], [3, 2, 1, 2, 3, 4])\n\nprint is_same([1, 2, 3], [3, 2, 1, 2])",
    "# http://www.geeksforgeeks.org/check-whether-two-sorted-lists-are-equal/\ndef is_equal(a, b):\n    \"\"\"\n    Returns True if two lists are same.\n    \"\"\"\n    if len(a)!= len(b):\n        return False\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n\n    return True\n\ndef main():\n    a = [2, 4, 6, 8]\n    b = [2, 4, 6, 8]\n    print(is_equal(a, b))\n\n    a = [1, 3, 5]\n    b = [1, 3, 5]\n    print(is_equal(a, b))\n\n    a = [1, 3, 4]\n    b = [1, 3, 5]\n    print(is_equal(a, b))\n\n    a = [1, 3, 5]\n    b = [1, 3, 4]\n    print(is_equal(a, b))\n\nif __name__ == '__main__':\n    main()",
    "# Importing required libraries\nimport sys\n\n# Function to check whether the elements in a list are same or not\ndef is_same(list1, list2):\n    # Iterating through each element in list1 and list2\n    for i in range(0, len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\n# Main function\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [1, 3, 4]\n    # Check whether the elements in list1 and list2 are same or not\n    if is_same(list1, list2):\n        print 'The two lists are same'\n    else:\n        print 'The two lists are not same'",
    "def is_same(lst):\n    \"\"\"\n    lst: list of strings\n\n    Returns True if all elements in the list are same, False otherwise.\n    \"\"\"\n    # TODO: write your code here\n    return all(str(e) == str(lst[0]) for e in lst[1:])\n\nprint(is_same(['a', 'b', 'c', 'd', 'e']))\nprint(is_same(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(is_same(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(is_same(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(is_same(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/lists-are-equal\n\ndef check_lists_are_equal(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n\n    return True\n\n# Test Cases\n\n# l1 = [1, 2, 3]\n# l2 = [1, 2, 3]\n# l3 = [1, 2]\n# l4 = [1, 2, 3, 4]\n# l5 = [1, 2, 3, 4, 5]\n# l6 = [1, 2, 3, 4, 5, 6]\n\n# l1 = [1, 2, 3]\n# l2 = [1, 2, 3]\n# l3 = [1, 2, 3, 4]\n# l4 = [1, 2, 3, 4, 5]\n# l5 = [1, 2, 3, 4, 5, 6]\n# l6 = [1, 2, 3, 4, 5, 6, 7]\n\n# l1 = [1, 2, 3]\n# l2 = [1, 2, 3, 4]\n# l3 = [1, 2, 3, 4, 5]\n# l4 = [1, 2, 3, 4, 5, 6]\n# l5 = [1, 2, 3, 4, 5, 6, 7]\n# l6 = [1, 2, 3, 4, 5, 6, 7, 8]\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nl2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nl3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nl4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nl5 = [1,",
    "def check_list(list_to_check):\n    \"\"\"\n    Check whether the elements in the list are same.\n    :param list_to_check:\n    :return:\n    \"\"\"\n    # print(list_to_check)\n    # if list_to_check[0] is list_to_check[1]:\n    #     print('yes')\n    # else:\n    #     print('no')\n    # return True if list_to_check[0] is list_to_check[1] else False\n    for i in range(0, len(list_to_check)):\n        if list_to_check[i]!= list_to_check[i+1]:\n            return False\n    return True\n\ndef main():\n    # list_to_check = [1,2,3,4]\n    list_to_check = [1,2,3,4,5]\n    print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7,8]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7,8,9]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7,8,9,10]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7,8,9,10,11]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7,8,9,10,11,12]\n    # print(check_list(list_to_check))\n    # list_to_check = [1,2,3,4,5,6,7",
    "def is_same(lst1, lst2):\n    \"\"\"\n    :param lst1: list\n    :param lst2: list\n    :return: boolean\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\n\n\ndef main():\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    assert is_same(lst1, lst2)\n    lst1 = [1, 2, 3, 4]\n    lst2 = [2, 2, 3, 4]\n    assert not is_same(lst1, lst2)\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\n# For Python 2/3 compatibility\nfrom __future__ import print_function\n\ndef same_list(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4]\n    print(same_list(list1, list2))",
    "def is_same(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4]\n\n    print is_same(l1, l2)\n    print is_same([1,2,3,4], [1,2,3,4])\n    print is_same([1,2,3,4], [1,2,3,5])\n    print is_same([1,2,3,4], [1,2,3,4,5])\n    print is_same([1,2,3,4,5], [1,2,3,4,5])\n\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,5]\n\n    print is_same(l1, l2)\n    print is_same([1,2,3,4], [1,2,3,5])\n    print is_same([1,2,3,4], [1,2,3,4,5])\n    print is_same([1,2,3,4,5], [1,2,3,4,5])\n\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4,5]\n\n    print is_same(l1, l2)\n    print is_same([1,2,3,4], [1,2,3,4,5])\n    print is_same([1,2,3,4], [1,2,3,4,6])\n    print is_same([1,2,3,4], [1,2,3,4,5,6])\n    print is_same([1,2,3,4,5], [1,2,3,4,5,6])",
    "def check_list_same(list1, list2):\n    \"\"\"\n    Function to check whether the elements in a list are same or not.\n    :param list1: List of elements to be checked.\n    :param list2: List of elements to be checked.\n    :return: True if list1 and list2 have same elements.\n    \"\"\"\n    # To avoid duplicate elements, we use set.\n    list1 = set(list1)\n    list2 = set(list2)\n    # To avoid duplicates, we use list comprehension.\n    return list1 == list2",
    "def is_list_same(list1, list2):\n    \"\"\"\n    Check whether the elements in the list1 are same as the elements in the list2.\n    :param list1: list\n    :param list2: list\n    :return: bool\n    \"\"\"\n    return list1 == list2\n\nprint(is_list_same([1, 2, 3], [2, 3, 4]))\nprint(is_list_same([1, 2, 3], [3, 2, 1]))\nprint(is_list_same([1, 2, 3], [1, 2, 3]))\nprint(is_list_same([1, 2, 3], [1, 3, 2]))",
    "def is_same(a, b):\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\ndef main():\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4]\n    l3 = [1,2,3,5]\n    l4 = [1,2,3,4,5]\n    l5 = [1,2,3,4,5,6]\n    l6 = [1,2,3,4,5,6,7]\n    l7 = [1,2,3,4,5,6,7,8]\n    l8 = [1,2,3,4,5,6,7,8,9]\n    l9 = [1,2,3,4,5,6,7,8,9,10]\n    l10 = [1,2,3,4,5,6,7,8,9,10,11]\n    l11 = [1,2,3,4,5,6,7,8,9,10,11,12]\n    l12 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    l13 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    l14 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    l15 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    l16 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    l17 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
    "def is_same(a,b):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    :param a: List\n    :param b: List\n    :return: boolean\n    \"\"\"\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    a = [1,2,3,4,5,6,7,8,9]\n    b = [1,3,5,7,9,1,3,5,7]\n    print is_same(a,b)",
    "def isSame(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    # write your code here\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True",
    "def is_same(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n    return True\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3]\n    l3 = [1, 3, 5]\n    l4 = [1, 2, 3, 4]\n\n    print is_same(l1, l2)\n    print is_same(l1, l3)\n    print is_same(l1, l4)",
    "def is_same(a,b):\n\tif len(a)!= len(b):\n\t\treturn False\n\tfor i in range(len(a)):\n\t\tif a[i]!= b[i]:\n\t\t\treturn False\n\treturn True\n\nif __name__ == \"__main__\":\n\ta = [1,2,3,4]\n\tb = [2,3,4,5]\n\tprint is_same(a,b)",
    "#!/usr/bin/python\n\ndef is_same(l1, l2):\n    \"\"\"\n    l1 and l2 are lists\n    return true if the lists are same\n    \"\"\"\n    if len(l1)!= len(l2):\n        return False\n    else:\n        for i in range(len(l1)):\n            if l1[i]!= l2[i]:\n                return False\n        return True\n\nl1 = [1, 2, 3, 4]\nl2 = [2, 2, 3, 4]\nprint is_same(l1, l2)",
    "def isSame(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print isSame(list1, list2)\n    list2 = [1, 2, 3, 4, 5]\n    print isSame(list1, list2)\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print isSame(list1, list2)",
    "def is_same(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(0, len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nprint(is_same([1, 2, 3], [1, 2, 3]))\nprint(is_same([1, 2, 3], [1, 2, 4]))\nprint(is_same([1, 2, 3], [1, 2]))\nprint(is_same([1, 2, 3], [1, 2, 3]))\nprint(is_same([1, 2, 3], [1, 2, 3, 4]))\nprint(is_same([1, 2, 3], [1, 2, 3, 4, 5]))",
    "def is_same(a, b):\n    \"\"\"\n    Check whether the elements in a and b are same.\n    :param a: First list\n    :param b: Second list\n    :return: True if the elements in a and b are same else False\n    \"\"\"\n    return a[0] == b[0] and a[1] == b[1]\n\n# Test Cases\n\na = [1, 2, 3]\nb = [2, 3, 4]\nc = [1, 3, 4]\nd = [1, 2, 4]\ne = [1, 2, 3]\n\nprint(is_same(a, b))\nprint(is_same(a, c))\nprint(is_same(a, d))\nprint(is_same(a, e))",
    "# https://www.hackerrank.com/challenges/list-comparison/problem\n\ndef is_same(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\n\nprint(is_same(list1, list2))",
    "#!/usr/bin/python\n\n#!/usr/bin/python\n\ndef is_same(list1, list2):\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\n#list1 = [1, 2, 3, 4]\n#list2 = [2, 3, 4, 5]\n\n#print is_same(list1, list2)\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\n\nprint is_same(list1, list2)",
    "def is_same(list1, list2):\n    return list1 == list2\n\n# Test Cases\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3]\n# Output : True\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 4]\n# Output : False\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4]\n# Output : True\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5]\n# Output : False\n\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4]\n# Output : True\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5]\n# Output : True\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6]\n# Output : True\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6, 7]\n# Output : False\n\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6, 7]\n# Output : False\n\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6, 7, 8]\n# Output : True\n\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# Output : False\n\n# Input : list1 = [1, 2, 3]\n#          list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Output : True",
    "#!/usr/bin/python\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\ndef is_same_list(list1, list2):\n\tfor element in list1:\n\t\tif element not in list2:\n\t\t\treturn False\n\treturn True\n\nif __name__ == '__main__':\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3]\n\tl4 = [1, 2, 4]\n\tl5 = [1, 2, 3, 4]\n\tl6 = [1, 2, 4, 5]\n\n\tprint is_same_list(l1, l2)\n\tprint is_same_list(l1, l3)\n\tprint is_same_list(l1, l4)\n\tprint is_same_list(l1, l5)\n\tprint is_same_list(l1, l6)",
    "import unittest\n\nclass Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: List[str]\n        :type t: List[str]\n        :rtype: bool\n        \"\"\"\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/is-subsequence/solution/\n\n# 2ms 100%\nclass Solution {\n    public boolean isSubsequence(List<String> s, List<String> t) {\n        if (s == null || t == null || s.size() == 0 || t.size() == 0) return false;\n        int i = 0, j = 0;\n        while (i < s.size() && j < t.size()) {\n            if (s.get(i).equals(t.get(j))) {\n                i++;\n                j++;\n            } else if (i == s.size() - 1) {\n                return false;\n            } else if (j == t.size() - 1) {\n                return false;\n            } else {\n                if (i < s.size() - 1 &&!s.get(i).equals(t.get(j))) {\n                    i++;\n                }\n                if (j < t.size() - 1 &&!t.get(j).equals(s.get(i))) {\n                    j++;\n                }\n            }\n        }\n        return true;\n    }\n}\n'''",
    "#!/usr/bin/python\n\ndef is_same(list1, list2):\n    \"\"\"\n    check whether the elements in a list are same or not.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\nprint is_same([1, 2, 3], [1, 2, 3])\nprint is_same([1, 2, 3], [1, 3, 3])\nprint is_same([1, 2, 3], [2, 3, 3])\nprint is_same([1, 2, 3], [2, 2, 3])\nprint is_same([1, 2, 3], [2, 2, 2])\nprint is_same([1, 2, 3], [2, 2, 1])\nprint is_same([1, 2, 3], [2, 1, 3])\nprint is_same([1, 2, 3], [2, 1, 1])",
    "def is_sorted(a):\n    \"\"\"\n    This function sorts the list and returns whether the list is sorted or not.\n    \"\"\"\n    b = sorted(a)\n    if b == a:\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    This function prompts the user to enter the list and prints whether the list is sorted or not.\n    \"\"\"\n    l = []\n    while True:\n        try:\n            l.append(raw_input(\"Enter an element: \"))\n        except:\n            break\n    if is_sorted(l):\n        print \"The list is sorted.\"\n    else:\n        print \"The list is not sorted.\"\n\nif __name__ == '__main__':\n    main()",
    "#!/bin/python\n#!/usr/bin/python\n\ndef is_same(list1, list2):\n    return list1 == list2\n\nprint \"Hello, my name is Python and I am using the Python programming language. \"\n\nprint \"Give me an array of integers as input\"\n\narr = raw_input()\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array of integers [1,2,3,4,5,6,7] same as [1,2,3,4,5,6,7]?\"\n\nprint is_same(arr, arr)\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array of integers [1,2,3,4,5,6,7] same as [1,2,3,4,5,6,7,8]?\"\n\nprint is_same(arr, arr + [8])\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array of integers [1,2,3,4,5,6,7] same as [1,2,3,4,5,6,7,8,9]?\"\n\nprint is_same(arr, arr + [9])\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array of integers [1,2,3,4,5,6,7] same as [1,2,3,4,5,6,7,8,9,10]?\"\n\nprint is_same(arr, arr + [10])\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array of integers [1,2,3,4,5,6,7] same as [1,2,3,4,5,6,7,8,9,10,11]?\"\n\nprint is_same(arr, arr + [11])\n\nprint \"Now, I am going to check whether the elements in the array are same or not.\"\n\nprint \"Is the array",
    "import unittest\n\n# @include\ndef are_same(l1, l2):\n    return l1 == l2\n\n\nclass TestFunctions(unittest.TestCase):\n\n    def test_are_same(self):\n        self.assertEqual(are_same([1, 2, 3], [1, 2, 3]), True)\n        self.assertEqual(are_same([1, 2, 3], [2, 3, 4]), False)\n        self.assertEqual(are_same([1, 2, 3], [1, 3, 4]), False)\n        self.assertEqual(are_same([1, 2, 3], [1, 2, 3]), True)\n        self.assertEqual(are_same([1, 2, 3], [2, 2, 2]), False)\n        self.assertEqual(are_same([1, 2, 3], [2, 3, 1]), False)\n        self.assertEqual(are_same([1, 2, 3], [3, 2, 1]), False)\n        self.assertEqual(are_same([1, 2, 3], [1, 2, 3, 4]), False)\n        self.assertEqual(are_same([1, 2, 3], [1, 2, 3, 4, 5]), False)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]), True)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]), False)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3, 5, 6]), False)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]), False)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5]), False)\n        self.assertEqual(are_same([1, 2, 3, 4, 5], [1, 2, 3,",
    "#!/usr/bin/python\n\ndef check_same(list_1, list_2):\n    # write your code here\n    for i in list_1:\n        if i not in list_2:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    list_1 = [1,2,3]\n    list_2 = [1,2,3]\n    print \"List 1 is: \", list_1\n    print \"List 2 is: \", list_2\n    print \"Are they same: \", check_same(list_1, list_2)",
    "def is_list_same(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [4, 3, 2, 1]\n    print is_list_same(list1, list2)",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# check whether the elements in a list are same or not\n#\n\ndef is_same_list(l1, l2):\n    # check whether the list length is the same\n    if len(l1)!= len(l2):\n        return False\n    # check whether the elements are same\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5, 6]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(is_same_list(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29",
    "def same(lst1, lst2):\n    return all(a == b for a, b in zip(lst1, lst2))\n\n# lst1 = [1, 2, 3]\n# lst2 = [1, 3, 2]\n# print(same(lst1, lst2))\n# lst1 = [1, 2, 3]\n# lst2 = [1, 3, 2, 4]\n# print(same(lst1, lst2))\n\nlst1 = [1, 2, 3]\nlst2 = [1, 3, 2]\nprint(same(lst1, lst2))",
    "def same_elements(lst1, lst2):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\n\n\"\"\"\nOutput:\nTrue\n\nInput:\n[1, 2, 3]\n[1, 2, 3]\n\nOutput:\nTrue\n\"\"\"",
    "def is_same(L):\n    \"\"\"\n    Input:\n        L: a list of integer.\n\n    Output:\n        True if L contains the same elements, otherwise False.\n    \"\"\"\n    # Write your code here\n    same = True\n    for i in range(len(L)):\n        if L[i]!= L[i]:\n            same = False\n            break\n    return same\n\nprint is_same([1, 1, 2, 3, 5, 8, 13])",
    "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python",
    "def is_same(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4, 5]\n\nprint(is_same(lst1, lst2))\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4, 5]\n\nprint(is_same(lst1, lst2))\n\nlst1 = [1, 2, 3]\nlst2 = [1, 2, 3, 4]\n\nprint(is_same(lst1, lst2))\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4, 5]\n\nprint(is_same(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [1, 2, 3, 4]\n\nprint(is_same(lst1, lst2))\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [1, 2, 3, 4]\n\nprint(is_same(lst1, lst2))",
    "def is_same(a, b):\n    if len(a)!= len(b):\n        return False\n    for x in a:\n        if x not in b:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5, 6]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [1, 2, 3, 4, 5, 6, 7]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(is_same(l1, l2))\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "def isSame(a,b):\n    \"\"\"\n    a, b are lists\n    returns True if a and b are same, False otherwise\n    \"\"\"\n    if a == b:\n        return True\n    else:\n        return False\n\ndef main():\n    a = [1,2,3,4]\n    b = [1,2,3,4]\n    c = [1,2,3,5]\n    d = [1,2,3,5]\n    e = [1,2,3,5]\n    print(isSame(a,b))\n    print(isSame(a,c))\n    print(isSame(a,d))\n    print(isSame(a,e))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\ndef is_same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    for item in l1:\n        if item not in l2:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = [1,2,3]\n    l2 = [1,2,4]\n    print is_same(l1, l2)\n    l3 = [1,2,3,4]\n    print is_same(l1, l3)",
    "def same(list1, list2):\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nprint same([1, 2, 3], [1, 2, 3])\nprint same([1, 2, 3], [2, 2, 3])\nprint same([1, 2, 3], [1, 2, 4])\nprint same([1, 2, 3], [1, 2, 2])",
    "def is_same(a, b):\n    if a == b:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [4, 3, 2, 1]\n\n    print is_same(a, b)",
    "def is_same(a, b):\n    \"\"\"\n    Input:\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n    Output:\n    True\n    False\n    \"\"\"\n    return a == b\n\ndef is_same_2(a, b):\n    \"\"\"\n    Input:\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n    Output:\n    True\n    False\n    \"\"\"\n    return a == b and a == b\n\ndef is_same_3(a, b):\n    \"\"\"\n    Input:\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n    Output:\n    True\n    False\n    \"\"\"\n    return a == b and b == a\n\ndef is_same_4(a, b):\n    \"\"\"\n    Input:\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n    Output:\n    True\n    False\n    \"\"\"\n    return a == b and b == a and a == b\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n    c = [1, 2, 3]\n    d = [1, 2, 3]\n    print(is_same(a, b))\n    print(is_same_2(a, b))\n    print(is_same_3(a, b))\n    print(is_same_4(a, b))",
    "def is_list_equal(l1, l2):\n    return sorted(l1) == sorted(l2)\n\n\n# Test Cases\n# l1 = [1, 2, 3]\n# l2 = [1, 2, 3]\n# l3 = [1, 4, 5]\n# l4 = [1, 2, 3, 5]\n# l5 = [1, 2, 3, 4]\n# l6 = [1, 2, 3, 4, 5]\n# l7 = [1, 2, 3, 4, 5, 6]\n# l8 = [1, 2, 3, 4, 5, 6, 7]\n# l9 = [1, 2, 3, 4, 5, 6, 7, 8]\n# l10 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# l11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# l12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# l13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n# l14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n# l15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n# l16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n# l17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n# l18 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n# l19 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n# l20 = [1, 2",
    "def is_same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4]\n    print is_same(l1, l2)\n    l1 = [1,2,3]\n    l2 = [1,2,3,4]\n    print is_same(l1, l2)\n    l1 = [1,2,3]\n    l2 = [1,2,3,4]\n    print is_same(l1, l2)",
    "def same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    if set(l1)!= set(l2):\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 4]\n    print same(l1, l2)",
    "def is_same(list1, list2):\n    \"\"\"\n    Arguments:\n    list1: A list\n    list2: A list\n\n    Return:\n    A boolean\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 1, 4, 3]\n    print is_same(list1, list2)",
    "def isSame(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nprint isSame([1,2,3], [1,2,3])\nprint isSame([1,2,3], [1,2,4])\nprint isSame([1,2,3], [2,2,3])\nprint isSame([1,2,3], [1,2,4])\nprint isSame([1,2,3], [1,2,5])\nprint isSame([1,2,3], [1,2,4,5])\nprint isSame([1,2,3], [1,2,4,5,6])\nprint isSame([1,2,3], [1,2,4,5,6,7])\nprint isSame([1,2,3], [1,2,3])\nprint isSame([1,2,3], [1,2,3,4])\nprint isSame([1,2,3], [1,2,3,4,5])\nprint isSame([1,2,3], [1,2,3,4,5,6])\nprint isSame([1,2,3], [1,2,3,4,5,6,7])\nprint isSame([1,2,3], [1,2,3,4,5,6,7,8])\nprint isSame([1,2,3], [1,2,3,4,5,6,7,8,9])\nprint isSame([1,2,3], [1,2,3,4,5,6,7,8,9,10])\nprint isSame([1,2,3], [1,2,3,4,5,6,7,8,9,10,11])\nprint isSame([1,2,3], [1,2,3,4,5,6,7,8,9,10,11,12])\nprint isSame([1,2,3], [1,2,3,4,5",
    "def check_list(list):\n    if list is None:\n        return False\n    elif len(list) == 0:\n        return False\n    elif len(list) == 1:\n        return list[0] == list[0]\n    else:\n        for i in list[1:]:\n            if i!= list[0]:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3]\n    print(check_list(list))\n    list = [1, 3, 3]\n    print(check_list(list))\n    list = [1, 2, 3, 1]\n    print(check_list(list))",
    "#!/usr/bin/env python\n\n# Write your code here.\n\ndef same_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    # your code here\n\n    return all(l1[i] == l2[i] for i in range(len(l1)))\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4]\n    l3 = [1, 2, 3, 4, 5]\n\n    print(same_elements(l1, l2))\n    print(same_elements(l1, l3))\n    print(same_elements(l2, l3))",
    "#!/usr/bin/env python\n\ndef check(a,b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\ndef check_if_same(a,b):\n    if check(a,b):\n        return True\n    else:\n        return False\n\ndef main():\n    a = [1,2,3,4,5]\n    b = [3,4,5,6,7]\n    print check(a,b)\n    print check_if_same(a,b)\n\nif __name__ == '__main__':\n    main()",
    "def is_same(l1, l2):\n    \"\"\"\n    Input:\n        l1 = [1, 2, 3]\n        l2 = [1, 2, 3]\n\n    Output:\n        True\n    \"\"\"\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\n\ndef test():\n    assert is_same([1, 2, 3], [1, 2, 3])\n    assert is_same([1, 2, 3], [1, 2, 4])\n    assert is_same([1, 2, 3], [1, 2])\n    assert is_same([1, 2], [1, 2, 3])\n    assert is_same([1], [1, 2, 3])\n    assert is_same([1, 2, 3], [])\n    assert is_same([], [1, 2, 3])\n    assert is_same([1, 2, 3], [1, 2, 3, 4])\n    assert is_same([1, 2, 3], [1, 2, 3, 4, 5])\n    assert is_same([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    assert is_same([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n    assert is_same([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n    assert is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n    assert is_same([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert is_same([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert is_same([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6",
    "def isSameList(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\n\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [1, 2, 3, 4, 5, 6]\nl3 = [1, 2, 3, 4, 5, 7]\n\nprint isSameList(l1, l2)\nprint isSameList(l1, l3)",
    "def same(list1, list2):\n    \"\"\"\n    :param list1:\n    :param list2:\n    :return:\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    for element in list1:\n        if element not in list2:\n            return False\n    return True\n\n# print same([1, 2, 3, 4], [1, 2, 3, 4])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4])\n# print same([1, 2, 3, 4], [1, 2, 3, 4, 5])\n# print same([1, 2, 3], [1, 2, 3, 4])\n# print same([1, 2, 3], [1, 2, 3, 4, 5])\n# print same([1, 2, 3], [1, 2, 3, 4, 5, 6])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n# print same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n# print same([1, 2, 3, 4, 5], [1",
    "def same(l1, l2):\n    for i in range(0, len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nprint(same([1, 2, 3], [1, 2, 3]))\nprint(same([1, 2, 3], [1, 2, 3, 4]))\nprint(same([1, 2, 3], [1, 2, 3, 4, 5]))",
    "def check_same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [1, 2, 3, 4, 5, 6]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3, 4]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [1, 2, 3, 4, 5, 6, 7]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5, 6, 7]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print check_same(l1, l2)",
    "# Define a function to check whether the elements in a list are same or not\ndef is_same(list1, list2):\n    # If the length of the list is not equal, return False\n    if len(list1)!= len(list2):\n        return False\n\n    # Iterate over the list and compare the elements\n    for i in range(0, len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\n# Test\nprint(is_same([1, 2, 3], [1, 2, 3]))\nprint(is_same([1, 2, 3], [1, 3, 3]))\nprint(is_same([1, 2, 3], [3, 2, 1]))\nprint(is_same([1, 2, 3], [3, 2, 1, 4]))\nprint(is_same([1, 2, 3], [3, 2, 1, 4, 5]))",
    "def is_same(lst1, lst2):\n\tif lst1 == lst2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nlst1 = [1, 2, 3]\nlst2 = [1, 3, 2]\n\nprint(is_same(lst1, lst2))",
    "import sys\nsys.path.append('../..')\nimport itertools\nimport time\n\ndef check_same(l1, l2):\n    return l1 == l2\n\ndef test_check_same():\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4]\n    assert check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    assert check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 6]\n    assert not check_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5, 6]\n    assert not check_same(l1, l2)\n\nif __name__ == '__main__':\n    test_check_same()\n    print('Success')",
    "def is_same(list1, list2):\n    \"\"\"\n    @param list1: List\n    @param list2: List\n    @return: boolean\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print is_same([1, 2, 3, 4], [1, 2, 3, 4])",
    "def is_same(a, b):\n    if len(a)!= len(b):\n        return False\n    for x, y in zip(a, b):\n        if x!= y:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_same([1, 2, 3], [1, 2, 3]))\n    print(is_same([1, 2, 3], [2, 2, 3]))\n    print(is_same([1, 2, 3], [2, 2, 3]))\n    print(is_same([1, 2, 3], [3, 2, 1]))\n    print(is_same([1, 2, 3], [2, 3, 1]))\n    print(is_same([1, 2, 3], [3, 2, 1]))\n    print(is_same([1, 2, 3], [3, 2, 2]))\n    print(is_same([1, 2, 3], [3, 2, 3]))\n    print(is_same([1, 2, 3], [3, 2, 4]))",
    "# Write your code here\n\ndef same_list(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\nlist1 = [2, 1, 3, 2]\nlist2 = [1, 1, 2, 3]\nprint same_list(list1, list2)",
    "def same(list1, list2):\n    # Write your code here\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3]\n    l3 = [1, 2, 4]\n    l4 = [1, 2, 3, 4]\n    l5 = [1, 2, 3, 4, 5]\n    l6 = [1, 2, 3, 4, 5, 6]\n    l7 = [1, 2, 3, 4, 5, 6, 7]\n    l8 = [1, 2, 3, 4, 5, 6, 7, 8]\n    l9 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    l12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    l13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    l14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    l15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    l16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    l17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    l18 = [1, 2, 3,",
    "def is_same_list(list1, list2):\n    \"\"\"\n    Input:\n        list1 - list to be checked\n        list2 - list to be checked against list1\n\n    Output:\n        True/False\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\nprint(is_same_list([1,2,3], [2,2,2]))",
    "def same_list(list1, list2):\n    \"\"\"\n    :type list1: list\n    :type list2: list\n    :rtype: bool\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    for element in list1:\n        if element!= list2[element]:\n            return False\n    return True\n\nprint(same_list([1, 2, 3], [1, 2, 3]))\nprint(same_list([1, 2, 3], [3, 2, 1]))\nprint(same_list([1, 2, 3], [2, 1, 3]))\nprint(same_list([1, 2, 3], [2, 3, 1]))\nprint(same_list([1, 2, 3], [3, 1, 2]))",
    "def is_same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    else:\n        for i in range(len(l1)):\n            if l1[i]!= l2[i]:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    print is_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 6]\n    print is_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 6]\n    print is_same(l1, l2)\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 7]\n    print is_same(l1, l2)",
    "#!/usr/bin/env python\n\ndef are_same(x, y):\n    if x == y:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3]\n    print are_same(lst, lst)\n    print are_same(lst, [1, 2, 3])\n    print are_same([1, 2, 3], lst)\n    print are_same([1, 2, 3], [1, 2, 3])\n    print are_same([1, 2, 3], [1, 2, 4])\n    print are_same([1, 2, 4], [1, 2, 3])\n    print are_same([1, 2, 4], [1, 2, 4])\n    print are_same([1, 2, 4], [1, 2, 3, 4])\n    print are_same([1, 2, 3, 4], [1, 2, 3, 4])\n    print are_same([1, 2, 3, 4], [1, 2, 3, 5])\n    print are_same([1, 2, 3, 5], [1, 2, 3, 4])",
    "def is_same(lst1, lst2):\n\tif lst1 == lst2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nif __name__ == '__main__':\n\tlst1 = [1,2,3,4]\n\tlst2 = [1,2,3,4]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [2,1,3,4]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [2,3,4,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,1,3,2]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,2,1,3]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,2,3,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,3,2,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,3,2,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,3,2,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,4]\n\tlst2 = [4,3,2,1]\n\tprint is_same(lst1, lst2)\n\tlst1 = [1,2,3,",
    "import sys\n\ndef check(a,b):\n\tif len(a)!= len(b):\n\t\treturn False\n\tfor i in range(len(a)):\n\t\tif a[i]!= b[i]:\n\t\t\treturn False\n\treturn True\n\ndef main():\n\ta = list(sys.stdin.readlines())\n\tprint check(a,a)\n\nif __name__ == '__main__':\n\tmain()",
    "def is_sorted(list_):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    :param list_: list of elements\n    :return: boolean\n    \"\"\"\n    if len(list_) <= 1:\n        return True\n    else:\n        for i in range(len(list_) - 1):\n            if list_[i] > list_[i + 1]:\n                return False\n        return True\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    list_ = [2, 3, 4, 5, 6]\n    print(is_sorted(list_))\n\n\nif __name__ == '__main__':\n    main()",
    "# Write your code here\ndef is_same(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[i]:\n\t\t\treturn False\n\treturn True\n\nprint is_same([1, 2, 3, 4], [1, 2, 3, 4])\nprint is_same([1, 2, 3, 4], [1, 2, 3, 5])\nprint is_same([1, 2, 3, 4], [1, 2, 3, 4, 5])\nprint is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\nprint is_same([1, 2, 3, 4], [1, 2, 3])\nprint is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\nprint is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])\nprint is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\nprint is_same([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])",
    "def same_list(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\nprint same_list([1, 2, 3], [1, 2, 3, 4])",
    "def check_list(my_list):\n    \"\"\"\n    Check whether the elements in a list are same or not.\n    \"\"\"\n    result = True\n    for i in my_list:\n        if i!= my_list[0]:\n            result = False\n    return result\n\n# Test Cases\n\nlist_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3]\n\nprint \"List 1: \" + str(list_1)\nprint \"List 2: \" + str(list_2)\n\nif check_list(list_1) == check_list(list_2):\n    print \"List 1 and List 2 are same\"\nelse:\n    print \"List 1 and List 2 are not same\"",
    "def check(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\ndef main():\n    a = [1, 2, 3, 4]\n    b = [1, 2, 4, 3]\n    c = [1, 2, 3, 4]\n    d = [1, 2, 3, 4]\n    e = [1, 2, 3, 4]\n\n    print(check(a, b))\n    print(check(a, c))\n    print(check(a, d))\n    print(check(a, e))\n\nif __name__ == '__main__':\n    main()",
    "# write your code here\ndef isSame(l1, l2):\n    return l1 == l2\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    print(isSame(l1, l2))\n    l3 = [1, 2, 3, 4, 5]\n    l4 = [1, 2, 3, 4, 5, 6]\n    print(isSame(l3, l4))\n    l5 = [1, 2, 3, 4, 5, 6]\n    l6 = [1, 2, 3, 4, 5, 6, 7]\n    print(isSame(l5, l6))",
    "def check_if_same(a,b):\n    \"\"\"\n    Input:  a = [1,2,3], b = [1,2,3]\n    Output: a == b = True\n    \"\"\"\n    for i in a:\n        if i not in b:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    a = [1,2,3]\n    b = [1,2,3]\n    print(check_if_same(a,b))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}