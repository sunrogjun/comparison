{
  "problem": {
    "task_id": "MBPP/481",
    "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
    "test_list": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ],
    "challenge_test_list": [],
    "problem_id": 470
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] + nums[1] == sum(nums)\n        i = 0\n        for j in xrange(len(nums) - 1):\n            if i >= j:\n                break\n            if nums[i] + nums[j] == sum(nums[i:j+1]):\n                return True\n            i = j + 1\n        return False\n\n    def canPartition2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] + nums[1] == sum(nums)\n        for i in xrange(len(nums) - 1):\n            if nums[i] + nums[i+1] == sum(nums[i:i+2]):\n                return True\n        return False\n\nif __name__ == '__main__':\n    print Solution().canPartition([1,2,3,4])\n    print Solution().canPartition2([1,2,3,4])",
    "import unittest\n\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        for i in range(len(set)):\n            if sum - set[i] < 0:\n                return False\n        return True\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/sum-of-two-integers/solution/\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n# 0ms 100%\nclass Solution {\n    public boolean isSubset(TreeNode root, int sum) {\n        if (root == null) return false;\n        if (root.val == sum) return true;\n        return isSubset(root.left, sum - root.val) || isSubset(root.right, sum - root.val);\n    }\n}\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public boolean isSubset(TreeNode root, int sum) {\n        return helper(root, sum);\n    }\n\n    private boolean helper(TreeNode node, int sum) {\n        if (node == null) {\n            return false;\n        }\n        if (node.val == sum)",
    "class Solution:\n    # @param {integer} set\n    # @param {integer} sum\n    # @return {boolean}\n    def isSubset(self, set, sum):\n        if sum == 0:\n            return True\n        if sum < 0:\n            return False\n        if sum < len(set):\n            return self.isSubset(set[:sum], sum)\n        if sum == len(set):\n            return True\n        return self.isSubset(set, sum - set[sum - 1]) or self.isSubset(set, sum - set[sum - 2])\n\nif __name__ == '__main__':\n    print Solution().isSubset([1, 2], 3)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        for i in range(len(set)):\n            if sum - set[i] not in set:\n                return False\n        return True",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0 or sum == 0:\n            return False\n        set.sort()\n        for i in range(len(set)):\n            if sum - set[i] < 0:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isSubset([1, 2, 3], 4))\n    print(sol.isSubset([1, 2, 3], 3))\n    print(sol.isSubset([1, 2, 3], 5))",
    "def is_sum_subset(arr, sum):\n    \"\"\"\n    :type arr: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    # if there is a subset with sum equal to the given sum, return True\n    for index in range(len(arr)):\n        if sum - arr[index] == 0:\n            return True\n    return False\n\nif __name__ == '__main__':\n    arr = [1,2,3]\n    sum = 4\n    print is_sum_subset(arr, sum)",
    "__author__ = 'Daniel'\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        for i in xrange(len(set)):\n            if set[i] > sum:\n                return False\n            if sum - set[i] < 0:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.isSubset([3, 1, 2], 6)\n    print sol.isSubset([1, 2, 3], 4)\n    print sol.isSubset([1, 2, 3], 3)\n    print sol.isSubset([1, 2, 3], 1)\n    print sol.isSubset([1, 2, 3], 0)\n    print sol.isSubset([1, 2, 3], 5)",
    "import math\n\ndef is_sum_equal(set_size, sum):\n    return math.ceil(math.sqrt(sum)) == set_size\n\n\nclass Solution(object):\n    def isSumEqual(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        if nums[0] >= k:\n            return True\n        if k == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == k\n        if k == nums[0]:\n            return True\n        if k > nums[0]:\n            return False\n        return is_sum_equal(len(nums), k)\n\n\nif __name__ == '__main__':\n    print Solution().isSumEqual([1, 2, 3], 4)",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSubset(self, S, sum):\n        \"\"\"\n        :type S: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if sum == 0:\n            return True\n        if len(S) == 0:\n            return False\n        res = True\n        l = 0\n        r = len(S) - 1\n        while l <= r:\n            mid = l + (r - l) / 2\n            if sum < S[mid]:\n                r = mid - 1\n            elif sum > S[mid]:\n                l = mid + 1\n            else:\n                res = res and self.isSubset(S[l:mid], sum - S[l:mid])\n                l = mid + 1\n        return res\n\n# Note:\n# 1. The solution can be optimized by using a bitmask\n# 2. The solution can be optimized by using a map to store the partial sums\n# 3. The solution can be optimized by using a binary search to search the subset",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # https://leetcode.com/discuss/81749/java-dp-solution-with-explanation\n        if len(set) == 0:\n            return False\n        if len(set) == 1:\n            return set[0] == sum\n        if sum == 0:\n            return True\n        \n        set.sort()\n        \n        # for small set, we can use binary search\n        if len(set) <= 10:\n            for i in xrange(len(set)):\n                if set[i] == sum:\n                    return True\n            return False\n        \n        # for large set, we can use binary search to find the first index of the set with sum >= sum\n        # while set[i] < sum:\n        #     i += 1\n        #     if i == len(set):\n        #         return False\n        # if set[i] == sum:\n        #     return True\n        \n        # binary search for sum in [0, sum]\n        i = 0\n        while set[i] < sum:\n            i += 1\n        if set[i] == sum:\n            return True\n        \n        # binary search for sum in [sum, sum+sum/2]\n        while i < len(set) and set[i] < sum + (sum >> 1):\n            i += 1\n        if set[i] == sum:\n            return True\n        \n        return False",
    "def is_subset(set, sum):\n    \"\"\"\n    :type set: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if len(set) == 0:\n        return False\n    if sum < set[0]:\n        return False\n    if sum == set[0]:\n        return True\n    for i in range(1, len(set)):\n        if sum < set[i]:\n            return False\n        if sum == set[i]:\n            return True\n        if sum > set[i]:\n            return False\n    return False\n\nclass Solution:\n    \"\"\"\n    @param set: A set of numbers\n    @param sum: An integer\n    @return: A boolean\n    \"\"\"\n    def isSubset(self, set, sum):\n        if sum == 0:\n            return True\n        if sum < 0:\n            return False\n        if len(set) == 0:\n            return False\n        if sum < set[0]:\n            return False\n        if sum == set[0]:\n            return True\n        for i in range(1, len(set)):\n            if sum < set[i]:\n                return False\n            if sum == set[i]:\n                return True\n            if sum > set[i]:\n                return False\n        return False\n\nif __name__ == '__main__':\n    set = [1,2,3]\n    sum = 3\n    print(Solution().isSubset(set, sum))\n    set = [1,2]\n    sum = 3\n    print(Solution().isSubset(set, sum))\n    set = [1,2,3]\n    sum = 4\n    print(Solution().isSubset(set, sum))\n    set = [1,2,3]\n    sum = 5\n    print(Solution().isSubset(set, sum))\n    set = [1,2,3]\n    sum = 6\n    print(Solution().isSubset(set, sum))\n    set = [1,2,3]\n    sum = 7\n    print(Solution().isSub",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} targetSum\n    # @return {boolean}\n    def isSubsetWithSum(self, nums, targetSum):\n        if len(nums) == 0:\n            return False\n        if targetSum < 0:\n            return False\n        if targetSum == 0:\n            return True\n        nums.sort()\n        for i in range(len(nums)):\n            if targetSum == 0:\n                return True\n            if targetSum < nums[i]:\n                return False\n            targetSum -= nums[i]\n        return True\n\nif __name__ == '__main__':\n    print Solution().isSubsetWithSum([1, 2, 3], 3)\n    print Solution().isSubsetWithSum([1, 2, 3], 1)\n    print Solution().isSubsetWithSum([1, 2, 3], 4)",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        # write your code here\n        if sum == 0:\n            return True\n        elif set is None or sum == 0:\n            return False\n        elif len(set) == 0:\n            return False\n        else:\n            for i in set:\n                if sum == i:\n                    return True\n                if sum - i > 0:\n                    if self.isSubset(set - set[sum - i], sum - i):\n                        return True\n            return False",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0 or sum == 0:\n            return False\n\n        dp = [False] * (sum + 1)\n        dp[0] = True\n        for i in range(1, sum + 1):\n            for j in range(i):\n                if i - j >= 0 and set[j] + set[i - j] <= sum:\n                    dp[i] = dp[i] or dp[i - j]\n\n        return dp[sum]\n\n\nif __name__ == '__main__':\n    assert Solution().isSubset([1, 2, 3], 4) == True\n    assert Solution().isSubset([1, 2, 3], 3) == True\n    assert Solution().isSubset([1, 2, 3], 5) == False\n    assert Solution().isSubset([1, 2, 3, 4], 5) == True\n    assert Solution().isSubset([1, 2, 3, 4], 4) == True\n    assert Solution().isSubset([1, 2, 3, 4], 3) == True\n    assert Solution().isSubset([1, 2, 3, 4], 6) == False\n    assert Solution().isSubset([1, 2, 3, 4], 5) == True",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0:\n            return False\n        if len(set) == 1:\n            return set[0] == sum\n        if sum == 0:\n            return True\n        for i in range(len(set)):\n            if sum < set[i]:\n                return False\n            if sum >= set[i]:\n                return self.isSubset(set[i+1:], sum - set[i])\n        return False\n\n    def isSubset2(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if sum == 0:\n            return True\n        for i in range(len(set)):\n            if sum < set[i]:\n                return False\n            if sum >= set[i]:\n                return self.isSubset2(set[i+1:], sum - set[i])\n        return True\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isSubset([1,2,3], 4))\n    print(sol.isSubset([1,2,3,4], 4))\n    print(sol.isSubset([1,2,3,4], 5))\n    print(sol.isSubset2([1,2,3,4], 5))",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0:\n            return True\n        elif len(set) == 1:\n            return set[0] == sum\n        elif set[0] == sum:\n            return self.isSubset(set[1:], sum - set[0])\n        else:\n            return False",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isSubset(self, s, sum):\n        \"\"\"\n        :type s: str\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if sum == 0:\n            return True\n\n        if len(s) == 0:\n            return False\n\n        for i in range(len(s)):\n            if sum < s[i] + s[i+1]:\n                return False\n            sum -= s[i] + s[i+1]\n\n        return True\n\n\nif __name__ == \"__main__\":\n    print Solution().isSubset(\"a\", 2)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        count = 0\n        for i in range(len(set)):\n            if sum - set[i] in set:\n                count += 1\n                if count == len(set):\n                    return True\n        return False",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        result = False\n        if len(set) == 0:\n            return False\n        if sum == 0:\n            return True\n        if sum < 0:\n            return False\n        for num in set:\n            if num > sum:\n                break\n            else:\n                if sum == num:\n                    result = True\n                if sum < num:\n                    break\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    set = set([1,2,3])\n    print solution.isSubset(set, 0)\n    print solution.isSubset(set, 4)\n    print solution.isSubset(set, 5)",
    "class Solution(object):\n    def isSubset(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0 or k == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == k\n        if nums[0] == k:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i - 1]:\n                continue\n            if nums[i] + nums[i - 1] > k:\n                continue\n            if nums[i] == k:\n                return True\n            if self.isSubset(nums[i + 1:], k - nums[i]):\n                return True\n        return False\n\nprint Solution().isSubset([1, 2, 3], 3)\nprint Solution().isSubset([1, 2, 3], 4)\nprint Solution().isSubset([1, 2, 3], 1)\nprint Solution().isSubset([1, 2, 3], 3)\nprint Solution().isSubset([1, 2, 3], 2)\nprint Solution().isSubset([1, 2, 3], 4)",
    "# https://leetcode.com/problems/subset-sum-equals-k/description/\n\nclass Solution(object):\n    def subsetsWithDup(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if k == 0:\n            return [[]]\n\n        res = []\n        for i in range(len(nums)):\n            tmp = self.subsetsWithDup(nums[:i], k - nums[i])\n            for subset in tmp:\n                subset.insert(0, nums[i])\n                res.append(subset)\n\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.subsetsWithDup([1,2,3,4], 4)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        for i in xrange(len(set)):\n            if sum - set[i] <= 0:\n                return False\n            if sum - set[i] == 0:\n                return True\n        return False\n\na = Solution()\nprint a.isSubset([1,2,3], 4)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # https://leetcode.com/problems/subset-sum-equals-k/discuss/287931/Java-DP-solution-with-O(n)\n        # dp[i][j] = true if there is a subset of set[1..i] with sum equal to sum[1..j]\n        dp = [[False] * len(set) for _ in range(len(set))]\n        for i in range(1, len(set)):\n            dp[i][0] = True\n            for j in range(1, i + 1):\n                if set[i] == set[j]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] or dp[i][j - 1]\n        return dp[-1][-1]",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a set of non-negative integers, you are initially positioned at the first index of the set,\nand your goal is to compute recursively the next element of the set.\n\nThat is, for example, you have a set [1, 2, 3] and you are positioned at index 2, you should compute\nthe next element as [2, 3].\n\nCompute the next element as the sum of the current element and the next element.\n\nExample:\n\nInput: nums = [1, 2, 3], sum = 6\nOutput: [2, 4]\nExplanation:\nAt index 0, the previous element is 1, so the first possible next element is 2.\nAt index 1, the previous element is 2, so the next possible next element is 3.\nAt index 2, the previous element is 3, so the next possible next element is 4.\nAt index 3, the previous element is 2, so the next possible next element is 4.\nAt index 4, the previous element is 3, so the next possible next element is 6.\nAt index 5, the previous element is 4, so the next possible next element is 12.\n\"\"\"\n\nclass Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return n\n        \n        i = 0\n        while i < n-1:\n            if nums[i] > nums[i+1]:\n                j = i\n                while j < n-1 and nums[j] <= nums[i]:\n                    j += 1\n                # swap nums[i] and nums[j]\n                nums[i], nums[j] = nums[j], nums[i]\n                # swap nums[i+1] and nums[j+1]\n                nums[i+1], nums[j+1] = nums[j+1], nums[i+1]\n                # swap nums[i+2] and nums[j+2",
    "import unittest\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        return sum == sum(set) and not set or None\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subset-sum/solution/\n\n# 9ms 100%\nclass Solution {\n    public boolean isSubset(int[] nums, int sum) {\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return sum == sum(set);\n    }\n}\n\n# 9ms 100%\nclass Solution {\n    public boolean isSubset(int[] nums, int sum) {\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return sum == sum(set);\n    }\n}\n'''",
    "def subsetSum(nums, sum):\n    \"\"\"\n    :type nums: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    if sum < 0:\n        return False\n    if sum == 0:\n        return True\n    \n    nums.sort()\n    for i in range(len(nums) - 1):\n        if sum >= nums[i] and sum - nums[i] < nums[i + 1]:\n            return True\n    return False\n\n# Your code here",
    "# https://leetcode.com/problems/sum-of-subset-sum/\n\nclass Solution(object):\n    def isSubset(self, s, t):\n        \"\"\"\n        :type s: List[int]\n        :type t: int\n        :rtype: bool\n        \"\"\"\n        n = len(s)\n        if n!= len(t):\n            return False\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                dp[i][j] = dp[j][i]\n            dp[i][i] = True\n        for i in range(n):\n            for j in range(i):\n                if s[i] < t:\n                    dp[i][j] = dp[j][i]\n                else:\n                    break\n        return dp[0][n-1]",
    "# Definition for a subset.\nclass Subset:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def is_subset(self, sum):\n        # Write your code here\n        count = 0\n        for i in range(len(self.nums)):\n            if sum - self.nums[i] == 0:\n                count += 1\n        return count == len(self.nums)\n\n\nclass Solution(object):\n    def isSubset(self, nums, sum):\n        \"\"\"\n        :type nums: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        dp = [0] * sum\n        for i in range(sum):\n            dp[i] = i in nums\n        for i in range(sum):\n            if dp[i]:\n                for j in range(i + 1, sum):\n                    if not dp[j]:\n                        dp[j] = dp[i]\n        return all(dp)\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print Solution().isSubset(nums, 3)",
    "# Your code here\ndef is_sum_subset(arr, sum):\n    for i in range(len(arr)):\n        if arr[i] == sum:\n            return True\n        elif arr[i] > sum:\n            return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    sum = 7\n    print(is_sum_subset(arr, sum))",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if sum == 0:\n            return True\n\n        def isSubset(set, sum):\n            if sum == 0:\n                return True\n\n            for i in range(len(set)):\n                if sum < 0:\n                    return False\n                if sum == 0:\n                    return True\n                if sum - set[i] > 0:\n                    return False\n                if isSubset(set[:i] + set[i + 1:], sum - set[i]):\n                    return True\n                sum -= set[i]\n            return False\n\n        return isSubset(set, sum)\n\n\nif __name__ == \"__main__\":\n    assert Solution().isSubset([2, 3, 1, 2], 4) == True\n    assert Solution().isSubset([1, 2, 3, 4], 4) == False\n    assert Solution().isSubset([1, 2, 3, 4], 3) == True\n    assert Solution().isSubset([1, 2, 3, 4], 5) == False\n    assert Solution().isSubset([1, 2, 3, 4], 0) == True\n    assert Solution().isSubset([1, 2, 3, 4], 4) == True\n    assert Solution().isSubset([1, 2, 3, 4], 5) == False\n    assert Solution().isSubset([1, 2, 3, 4], -5) == False",
    "\"\"\"\nExample 1:\nInput: set = [1,2,3,4], sum = 6\nOutput: True\n\nExample 2:\nInput: set = [1,3,4], sum = 5\nOutput: True\n\nExample 3:\nInput: set = [1,2,3], sum = 4\nOutput: False\n\"\"\"\n\nclass Solution(object):\n    def subset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        \"\"\"\n        if sum == 0:\n            return False\n        \"\"\"\n        # return sum in set\n        return any(set[:i] + set[i + 1:] == set[i:i + 2] for i in range(len(set) - 1))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.subset([1,2,3,4], 6))\n    print(sol.subset([1,3,4], 5))\n    print(sol.subset([1,3,4], 4))\n    print(sol.subset([1,3,4], 3))\n    print(sol.subset([1,3,4], 2))\n    print(sol.subset([1,3,4], 1))\n    print(sol.subset([1,3,4], 0))\n    print(sol.subset([1,3,4], -1))",
    "# Definition for a subset of a set.\nclass Subset:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def __repr__(self):\n        return \"Subset({})\".format(self.nums)\n\n    def __str__(self):\n        return self.__repr__()\n\n    def __eq__(self, other):\n        return self.nums == other.nums\n\n    def __hash__(self):\n        return hash(self.nums)\n\n    def __contains__(self, item):\n        return all(item in subset for subset in self.nums)\n\n    def __len__(self):\n        return len(self.nums)\n\nclass Solution:\n    def isSubset(self, set, sum):\n        # naive\n        return len(set.nums) == sum\n\n    def isSubset2(self, set, sum):\n        # hash map\n        return sum == self.__calc_sum(set.nums)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.isSubset(Subset([1, 2, 3]), 4))\n    print(s.isSubset(Subset([1, 2, 3]), 8))\n    print(s.isSubset(Subset([1, 2, 3]), 6))\n    print(s.isSubset(Subset([1, 2, 3]), 4))\n    print(s.isSubset(Subset([1, 2, 3, 4, 5]), 5))\n    print(s.isSubset(Subset([1, 2, 3, 4, 5]), 6))",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        if len(set) == 0 or sum == 0:\n            return False\n        elif set[0] > sum:\n            return False\n        else:\n            for i in range(1, len(set)):\n                if sum - set[i-1] < set[i]:\n                    return False\n            return True\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isSubset([3, 1, 4, 2], 4)\n    print s.isSubset([2, 3, 1], 4)\n    print s.isSubset([1, 2, 3], 4)",
    "# Definition for a  binary tree node\nclass TreeNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution:\n\t# @param set, a set of integer\n\t# @param sum, an integer\n\t# @return a boolean\n\tdef isSubset(self, set, sum):\n\t\treturn self.dfs(set, sum, 0)\n\t\t\n\tdef dfs(self, set, sum, index):\n\t\tif sum == 0:\n\t\t\treturn True\n\t\tif index == len(set):\n\t\t\treturn False\n\t\tif set[index] > sum:\n\t\t\treturn False\n\t\tif self.dfs(set, sum-set[index], index+1):\n\t\t\treturn True\n\t\treturn False",
    "# https://leetcode.com/problems/subset-sum-equals-k/discuss/478717/Python-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/102286/Java-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/102286/Java-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/102286/Java-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/102286/Java-DP-solution-with-explanation\n\nfrom typing import List\nfrom collections import Counter\nfrom collections import defaultdict\n\nclass Solution:\n    def subsetsWithDup(self, nums: List[int], k: int) -> List[List[int]]:\n        if not nums:\n            return []\n        res = [nums]\n        res_set = set(res[0])\n        res_dict = defaultdict(list)\n        for num in nums:\n            if num in res_set:\n                res_dict[num].append(num)\n                res_set.remove(num)\n            else:\n                res_set.add(num)\n        res_set = list(res_set)\n        res_dict_copy = {}\n        for num in res_dict:\n            res_dict_copy[num] = res_dict[num]\n        for i in range(len(res_set)):\n            res.append(res_dict_copy[res_set[i]])\n        res.remove(res_dict_copy[res_set[0]])\n        return res\n\n# Time:  O(N*k)\n# Space: O(N)\n#\n# Explanation:\n# The problem is to find the subset of the given set with sum equal to the given sum.\n#\n#",
    "class Solution:\n    # @param nums, a list of integer\n    # @param k, an integer\n    # @return a boolean\n    def isSubset(self, nums, k):\n        n = len(nums)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] + nums[j] == k:\n                    dp[i][j] = True\n        return any(dp[i])",
    "import math\nimport unittest\n\n\nclass Solution(object):\n    def is_subset(self, s, t):\n        \"\"\"\n        :type s: List[int]\n        :type t: int\n        :rtype: bool\n        \"\"\"\n        return self.sum(s) == t and self.sum(t) == t\n\n    def sum(self, s):\n        \"\"\"\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(s)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/is-subset/solution/\n#\nApproach 1: Brute Force\nComplexity Analysis\nTime Complexity: O(n^2), where n is the length of the set.\nSpace Complexity: O(n^2)\n\n# 6ms 100%\nclass Solution {\n    public boolean isSubset(int[] s, int t) {\n        int sum = 0;\n        for (int i = 0; i < s.length; i++) {\n            sum += s[i];\n        }\n        return sum == t && s.length == t;\n    }\n}\n\n# 5ms 100%\nclass Solution {\n    public boolean isSubset(int[] s, int t) {\n        int sum = 0;\n        for (int i = 0; i < s.length; i++) {\n            sum += s[i];\n        }\n        return sum == t && s.length == t;\n    }\n}\n\n# 8ms 99.92%\nclass Solution {\n    public boolean isSubset(int[] s, int t) {\n        int sum = 0;\n        for (int i = 0; i < s.length; i++) {\n            sum += s[i];\n        }\n        return sum == t && s.length == t;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public boolean isSubset(int",
    "# https://leetcode.com/problems/subset-sum-equals-k/\n\nclass Solution:\n    def subsetSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        n = len(nums)\n        if n == 0: return False\n        dp = [[0] * (k+1) for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(1, k+1):\n                if i+j-1 >= n:\n                    dp[i][j] = False\n                else:\n                    dp[i][j] = dp[i][j-1]\n                    if dp[i][j] and nums[i] + j == k:\n                        dp[i][j] = True\n        \n        for i in range(n):\n            if dp[i][k]:\n                return True\n        \n        return False",
    "class Solution(object):\n    def isSubset(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        s = 0\n        for n in nums:\n            s += n\n        if s == k:\n            return True\n        if k < s:\n            return False\n        for i in range(len(nums)):\n            if nums[i] < k - s:\n                return False\n        return True",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param sum, an integer\n    # @return a boolean\n    def isSubtreeSum(self, root, sum):\n        if root is None:\n            return False\n        if root.val == sum:\n            return True\n        if root.val < sum:\n            if self.isSubtreeSum(root.right, sum):\n                return True\n        else:\n            if self.isSubtreeSum(root.left, sum):\n                return True\n        return False\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    s = Solution()\n    print(s.isSubtreeSum(root, 7))",
    "# https://leetcode.com/problems/subsets/\n\nclass Solution:\n    # @param set, a set of integers\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        # Write your code here\n        if sum == 0:\n            return True\n        if not set:\n            return False\n        # base case\n        if sum == sum(set):\n            return True\n        # if sum is greater than the sum of set, then return false\n        if sum > sum(set):\n            return False\n        # otherwise, we need to check if there is a subset with sum equal to sum\n        for i in range(len(set)):\n            if self.isSubset(set[:i] + set[i+1:], sum - set[i]):\n                return True\n        return False\n\na = Solution()\nprint a.isSubset([1,2,3], 4)",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param sum, an integer\n    # @return a boolean\n    def hasSubtreeSum(self, root, sum):\n        if root is None:\n            return False\n        if root.val == sum:\n            return True\n        if root.val > sum:\n            return False\n        if root.val < sum:\n            return False\n        if root.left is None and root.right is None:\n            return False\n        if root.left is None or root.right is None:\n            return False\n        if root.left is not None and self.hasSubtreeSum(root.left, sum - root.val):\n            return True\n        if root.right is not None and self.hasSubtreeSum(root.right, sum - root.val):\n            return True\n        return False\n\nif __name__ == '__main__':\n    root = TreeNode(5)\n    root.left = TreeNode(4)\n    root.right = TreeNode(6)\n    root.left.left = TreeNode(8)\n    root.left.right = TreeNode(10)\n    root.right.left = TreeNode(12)\n    root.right.right = TreeNode(14)\n    print Solution().hasSubtreeSum(root, 10)",
    "import math\n\n\ndef is_subset(set_, sum_):\n    \"\"\"\n    :type set_: List[int]\n    :type sum_: int\n    :rtype: bool\n    \"\"\"\n    # dp solution\n    # dp[i] = 1 if sum_ == i else 0\n    # dp[i] += dp[i-1]\n    # dp[0] = 1 if sum_ == 0 else 0\n    # dp[0] += dp[0]\n    # return dp[sum_]\n    if not set_:\n        return False\n    if sum_ == set_[0]:\n        return True\n    if sum_ < set_[0]:\n        return False\n    # find the index\n    for i in range(1, len(set_)):\n        if sum_ - set_[i-1] < set_[i]:\n            return False\n        elif sum_ - set_[i-1] > set_[i]:\n            break\n    return True\n\n\ndef is_subset_1(set_, sum_):\n    \"\"\"\n    :type set_: List[int]\n    :type sum_: int\n    :rtype: bool\n    \"\"\"\n    if not set_:\n        return False\n    if sum_ == set_[0]:\n        return True\n    if sum_ < set_[0]:\n        return False\n    for i in range(1, len(set_)):\n        if sum_ - set_[i-1] < set_[i]:\n            return False\n        elif sum_ - set_[i-1] > set_[i]:\n            break\n    return True\n\n\nif __name__ == '__main__':\n    set_ = [1, 2, 3, 4, 5, 6]\n    sum_ = 6\n    print(is_subset(set_, sum_))",
    "import collections\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        dic = collections.defaultdict(lambda: 0)\n        for e in set:\n            dic[e] += 1\n        if sum == 0:\n            return True\n        if sum == sum(dic.values()):\n            return True\n        if sum < sum(dic.values()):\n            return False\n        return self.isSubset(set[:sum(dic.values())], sum - sum(dic.values()))\n\n\nif __name__ == \"__main__\":\n    assert Solution().isSubset([1, 2, 3], 0) is True\n    assert Solution().isSubset([1, 2, 3], 4) is False\n    assert Solution().isSubset([1, 2, 3, 4], 0) is True\n    assert Solution().isSubset([1, 2, 3, 4], 5) is False",
    "def is_subset(A, B, sum):\n    \"\"\"\n    :type A: List[int]\n    :type B: int\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if sum == 0:\n        return True\n    if len(A) == 0:\n        return False\n    if sum < 0:\n        return False\n    if sum == sum * len(A):\n        return True\n    for i in range(len(A)):\n        if A[i] + B > sum:\n            return False\n    return True\n\nprint(is_subset([1, 2, 3], 4, 12))\nprint(is_subset([1, 2, 3], 4, 8))\nprint(is_subset([1, 2, 3], 4, 7))\nprint(is_subset([1, 2, 3], 4, 6))",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # DP\n        # dp[i] = True if the sum of all elements in subset i is equal to sum\n        # dp[0] = True if the sum is equal to sum\n        dp = [False for _ in xrange(len(set)+1)]\n        dp[0] = True\n        for i in xrange(1, len(set)+1):\n            for j in xrange(i):\n                if dp[j] and dp[i] and set[j] + set[i] == sum:\n                    return True\n            dp[i] = set[i] in dp\n        return False\n\n# Time:  O(n^2)\n# Space: O(n^2)\n#\n# My 2AC:\n# 1. Use 2 stacks to store the sum of numbers in subset 1 and subset 2\n# 2. Use a 2D array to store the subset numbers\n# 3. Use a 2D array to store the subset sum\n# 4. Use a 2D array to store the subset sum\n# 5. Use a 2D array to store the subset sum\n# 6. Use a 2D array to store the subset sum\n# 7. Use a 2D array to store the subset sum\n# 8. Use a 2D array to store the subset sum\n# 9. Use a 2D array to store the subset sum\n# 10. Use a 2D array to store the subset sum\n# 11. Use a 2D array to store the subset sum\n# 12. Use a 2D array to store the subset sum\n# 13. Use a 2D array to store the subset sum\n# 14. Use a 2D array to store the subset sum\n# 15. Use a 2D array to store the subset sum\n# 16. Use a 2D array to store the subset sum\n# 17. Use a 2D array to store the subset sum\n# 18. Use a 2D array to store the subset sum\n# 19. Use a 2D array to store the subset sum\n# 20. Use a 2D array to store the subset sum\n# 21.",
    "import unittest\nfrom collections import Counter\n\nclass Solution(object):\n    def checkSubsetSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        count = Counter(nums)\n        return all(count[i] == k for i in range(len(nums)) if count[i] > 0)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/check-subset-sum/solution/\n#\nApproach #1: Counting\nComplexity Analysis\nTime Complexity: O(|nums| + |k|), where |nums| is the length of nums.\nSpace Complexity: O(|nums|).\n\n# 12ms 100%\nclass Solution {\n    public boolean checkSubsetSum(int[] nums, int k) {\n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                dp[i] = Math.min(dp[i], dp[j] + nums[i]);\n            }\n        }\n        return dp[nums.length - 1] == k;\n    }\n}\n\n# 12ms 100%\nclass Solution {\n    public boolean checkSubsetSum(int[] nums, int k) {\n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                dp[i",
    "def is_sum_subset(s, sum):\n    for i in range(1, len(s)):\n        if sum - s[i] > 0:\n            return False\n        if sum - s[i] < 0:\n            return False\n    return True\n\ndef main():\n    s = \"abc\"\n    sum = 3\n    print is_sum_subset(s, sum)\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/sum-of-subset-equal-k-in-set/discuss/382493/Python-Coding-Lesson-2\n\nclass Solution(object):\n    def subsetsWithSum(self, num, k):\n        \"\"\"\n        :type num: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        if k == 0:\n            res.append([])\n            return res\n        if k > num:\n            return res\n        if k == num:\n            return [[0] * k]\n        for i in range(len(num)):\n            res.append([])\n            for j in range(len(num)):\n                if j < i:\n                    res[-1].append(num[j])\n                elif j == i:\n                    res[-1].append(0)\n                else:\n                    res[-1].append(num[j])\n            res[-1].append(num[i])\n            res[-1].sort()\n            res[-1].reverse()\n            res.append([])\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().subsetsWithSum(2, 1) == [[0, 1], [1, 0]]",
    "class Solution:\n    # @param num, a list of integer\n    # @param target, an integer\n    # @return a boolean\n    def isSubset(self, num, target):\n        \"\"\"\n        :type num: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        # if the target is not the same as the sum of the subset, return false\n        if target!= sum(num):\n            return False\n        # if the sum of the subset is greater than the target, return false\n        if sum(num) > target:\n            return False\n        # if the sum of the subset is less than the target, return true\n        return True\n\ns = Solution()\n\nprint s.isSubset([1, 2], 3)\nprint s.isSubset([1, 2], 2)\nprint s.isSubset([1, 2], 1)\nprint s.isSubset([1, 2, 3], 4)\nprint s.isSubset([1, 2, 3], 3)\nprint s.isSubset([1, 2, 3], 2)\nprint s.isSubset([1, 2, 3], 1)",
    "\"\"\"\nFor example, given a set of size 5 and sum = 7, return true.\n\nGiven a set of size 2 and sum = 3, return false.\n\nGiven a set of size 1 and sum = 1, return true.\n\nGiven a set of size 0 and sum = 0, return false.\n\n\"\"\"\n\nclass Solution(object):\n    \"\"\"\n    @param set, a set of integer\n    @param sum, a integer\n    @return a boolean\n    \"\"\"\n    def subsetSum(self, set, sum):\n        # write your code here\n        if len(set) == 0:\n            return False\n        if sum == 0:\n            return True\n\n        max_sub_sum = 0\n        for element in set:\n            if max_sub_sum < 0 or max_sub_sum > sum:\n                max_sub_sum = 0\n            max_sub_sum += element\n            if max_sub_sum == sum:\n                return True\n        return False\n\nclass Solution1(object):\n    \"\"\"\n    @param set, a set of integer\n    @param sum, a integer\n    @return a boolean\n    \"\"\"\n    def subsetSum(self, set, sum):\n        # write your code here\n        if len(set) == 0:\n            return False\n        if sum == 0:\n            return True\n        if sum < 0:\n            return False\n\n        n = len(set)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = sum - set[i]\n\n        for i in range(1, n):\n            for j in range(i):\n                if dp[j] - dp[i] > 0:\n                    dp[i] = dp[j] - dp[i]\n                if dp[i] == sum:\n                    return True\n\n        return False\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.subsetSum([2, 3, 1, 2], 7)\n    print solution.subsetSum([2, 3, 1, 2], 3)\n    print solution.subsetSum([2, 3, 1, 2], 1)\n    print solution.sub",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0:\n            return True\n        if set[0] > sum:\n            return False\n        if sum == 0:\n            return True\n        for i in xrange(len(set)):\n            if sum - set[i] < 0:\n                return False\n        return self.isSubset(set[1:], sum-set[0])\n\n\n# test\ns = Solution()\nprint s.isSubset([1, 2, 3], 4)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # the number of ways to add all the elements of the set\n        # in the form of the sum\n        # can be calculated by summing all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and then subtracting the sum of the set\n        # can be calculated by summing the sum of all the elements of the set\n        # and",
    "import time\nimport random\n\nstart_time = time.time()\n\ndef is_subset(set_, sum_):\n    \"\"\"\n    :type set_: List[int]\n    :type sum_: int\n    :rtype: bool\n    \"\"\"\n    if sum_ == 0:\n        return True\n    if len(set_) == 0:\n        return False\n    if sum_ < 0:\n        return False\n    for i in range(0, len(set_)):\n        if sum_ == sum_ - set_[i]:\n            if is_subset(set_[:i+1], sum_ - set_[i]):\n                return True\n    return False\n\nprint(is_subset([1, 2, 3], 4))\nprint(is_subset([1, 2, 3], 5))\n\nprint('Elapsed time: {}'.format(time.time() - start_time))",
    "# https://leetcode.com/problems/search-a-2d-matrix-without-duplicates-ii/discuss/73783/Python-O(N^2)-Time-Solution\n# https://www.youtube.com/watch?v=9mwVfBbZ9kc\n# https://www.youtube.com/watch?v=nH-6o7-Dhb0\n# https://www.youtube.com/watch?v=m1_wqVvZd0k\n# https://www.youtube.com/watch?v=KXv8xW5j8E0\n\nclass Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not matrix:\n            return False\n\n        n = len(matrix)\n        m = len(matrix[0])\n\n        # Check whether the sum is equal to the target\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == target:\n                    return True\n\n        # Check whether the sum is equal to the target, but the matrix is not full\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == target and j + 1 < m:\n                    return self.searchMatrix(matrix, target, i, j + 1)\n\n        return False\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n    print(Solution().searchMatrix(matrix, target))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isSubset(self, s, t):\n        \"\"\"\n        :type s: List[int]\n        :type t: int\n        :rtype: bool\n        \"\"\"\n        # https://leetcode.com/discuss/108963/java-solution-with-explanation\n        # https://leetcode.com/discuss/251254/python-solution-with-explanation\n        # https://leetcode.com/discuss/205563/python-solution-with-explanation\n        # https://leetcode.com/discuss/221805/python-solution-with-explanation\n        # https://leetcode.com/discuss/221804/python-solution-with-explanation\n        # https://leetcode.com/discuss/221802/python-solution-with-explanation\n        # https://leetcode.com/discuss/221801/python-solution-with-explanation\n        # https://leetcode.com/discuss/221800/python-solution-with-explanation\n        # https://leetcode.com/discuss/221798/java-solution-with-explanation\n        # https://leetcode.com/discuss/221797/java-solution-with-explanation\n        # https://leetcode.com/discuss/221796/java-solution-with-explanation\n        # https://leetcode.com/discuss/221795/java-solution-with-explanation\n        # https://leetcode.com/discuss/221794/java-solution-with-explanation\n        # https://leetcode.com/discuss/221793/java-solution-with-explanation\n        # https://leetcode.com/discuss/221792/java-solution-with-explanation\n        # https://leetcode.com/discuss/221791/java-solution-with-explanation\n        # https://le",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        if not set:\n            return False\n        if sum == sum(set):\n            return True\n        for i in range(len(set)):\n            if sum == sum(set[:i]) + sum(set[i + 1:]):\n                return True\n        return False\n\ns = Solution()\nprint s.isSubset([1,2,3], 3)\nprint s.isSubset([1,2,3,4], 6)",
    "# Definition for a subset of a set.\nclass Set(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.length = len(nums)\n\n    def __contains__(self, s):\n        return s in self.nums\n\n    def __iter__(self):\n        return iter(self.nums)\n\nclass Solution(object):\n    def isSubset(self, s, t):\n        \"\"\"\n        :type s: Set\n        :type t: Set\n        :rtype: bool\n        \"\"\"\n        return s.length == t.length and s.__contains__(t)",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if set is None or len(set) == 0:\n            return False\n        \n        return self.helper(set, sum)\n        \n    def helper(self, set, sum):\n        if sum == 0:\n            return True\n        \n        if sum < 0:\n            return False\n        \n        if sum == sum:\n            return self.helper(set[:sum], sum)\n        \n        for i in range(sum):\n            if self.helper(set[i:], sum - i):\n                return True\n        \n        return False",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        # write your code here\n        return len(set) < len(set) or sum == sum or self.check_subset(set, sum)\n\n    def check_subset(self, set, sum):\n        if sum == 0:\n            return True\n        elif sum < 0:\n            return False\n        else:\n            for i in set:\n                if sum == i:\n                    return True\n                else:\n                    if sum - i < 0:\n                        return False\n                    else:\n                        sum = sum - i\n        return False",
    "def is_subset(s, t):\n    if s is None or t is None:\n        return False\n\n    if s == t:\n        return True\n\n    for i in range(len(s)):\n        if s[i] not in t:\n            return False\n    return True\n\ns = [1,2,3]\nt = [1,2,3]\nprint is_subset(s, t)\n\ns = [2,3]\nt = [1,2,3]\nprint is_subset(s, t)\n\ns = [1,3]\nt = [1,2,3]\nprint is_subset(s, t)\n\ns = [1,3,5]\nt = [1,2,3,4]\nprint is_subset(s, t)\n\ns = [2,3,5]\nt = [1,2,3,4]\nprint is_subset(s, t)\n\ns = [1,2,3,4]\nt = [1,2,3,5]\nprint is_subset(s, t)\n\ns = [1,2,3,4]\nt = [2,3,5]\nprint is_subset(s, t)\n\ns = [2,3,5]\nt = [2,3,4]\nprint is_subset(s, t)\n\ns = [2,3,5]\nt = [2,3,5,7]\nprint is_subset(s, t)\n\ns = [2,3,5,7]\nt = [2,3,5,7]\nprint is_subset(s, t)\n\ns = [2,3,5,7]\nt = [2,3,5,6]\nprint is_subset(s, t)\n\ns = [2,3,5,7]\nt = [2,3,5,6,8]\nprint is_subset(s, t)\n\ns = [2,3,5,7]\nt = [2,3,5,8]\nprint is_subset(s, t)",
    "# write your code here\n\ndef subset_sum(nums, k):\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return nums[0] == k\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum == k:\n            return True\n    return False\n\n#print subset_sum([1,2,3,4], 4)\n\n# your code here\n\ndef subset_sum(nums, k):\n    nums.sort()\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return nums[0] == k\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum == k:\n            return True\n    return False\n\nprint subset_sum([1,2,3,4], 4)",
    "def sum_is_subset(set_, sum_):\n    return sum(set_) == sum_\n\n# Test Cases\nprint sum_is_subset(set(range(0, 5)), 10)\nprint sum_is_subset(set(range(1, 6)), 8)\nprint sum_is_subset(set(range(1, 6)), 5)\nprint sum_is_subset(set(range(1, 6)), 3)\nprint sum_is_subset(set(range(1, 6)), 1)\nprint sum_is_subset(set(range(1, 6)), 0)",
    "import math\n\ndef is_subset(set, sum):\n    for i in range(len(set)):\n        if sum - set[i] < 0:\n            return False\n        if sum - set[i] == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], 4))\n    print(is_subset([1, 2, 3], 3))\n    print(is_subset([1, 2, 3], 5))\n    print(is_subset([1, 2, 3], -4))\n    print(is_subset([1, 2, 3], -5))\n    print(is_subset([1, 2, 3], -6))\n    print(is_subset([1, 2, 3], 1))\n    print(is_subset([1, 2, 3], 2))\n    print(is_subset([1, 2, 3], 3))\n    print(is_subset([1, 2, 3], 4))\n    print(is_subset([1, 2, 3], 5))\n    print(is_subset([1, 2, 3], 6))\n    print(is_subset([1, 2, 3], 7))\n    print(is_subset([1, 2, 3], 8))\n    print(is_subset([1, 2, 3], 9))\n    print(is_subset([1, 2, 3], 10))",
    "def is_subset(set, sum):\n    \"\"\"\n    :type set: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if len(set) == 0:\n        return False\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if len(set) == 1:\n        return set[0] == sum\n    for i in range(len(set)):\n        if sum - set[i] >= 0:\n            if is_subset(set[:i] + set[i+1:], sum - set[i]):\n                return True\n    return False\n\nprint(is_subset([1,2,3], 3))\nprint(is_subset([1,2,3], 4))",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # Using brute force to check for the subset.\n        # We can use the following method to check for the subset:\n        # 1. Get the max value in the set.\n        # 2. Check if the sum is within the range of the max value.\n        # 3. If not, return false.\n        # 4. If so, add the max value to the sum and check again.\n        max_value = max(set)\n        if sum > max_value:\n            return False\n        else:\n            for v in set:\n                sum += v\n                if sum > max_value:\n                    return False\n            return True",
    "# https://leetcode.com/problems/subsets-ii/discuss/253870/Java-Python-DP-Solution-O(n^2)\n# https://discuss.leetcode.com/topic/39892/java-o-n-solution\nclass Solution(object):\n    def subsetsWithDup(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        # dp[i] = the subset sum with sum of [0, i)\n        # dp[0] = 0\n        # dp[i] = dp[i - 1] if i > 0\n        # dp[i] = dp[i - 1] + nums[i - 1] if i > 0 and nums[i - 1] == nums[i]\n        # dp[i] = dp[i - 1] + nums[i] if i > 0 and nums[i - 1]!= nums[i]\n        # dp[i] = dp[i - 1] if i > 0 and nums[i] == nums[i - 1]\n        # dp[i] = dp[i - 1] + nums[i] if i > 0 and nums[i]!= nums[i - 1]\n        # dp[i] = dp[i - 1] if i > 0 and nums[i]!= nums[i - 1]\n        # dp[i] = dp[i - 1] if i > 0 and nums[i]!= nums[i - 1]\n        # dp[i] = dp[i - 1] + nums[i] if i > 0 and nums[i]!= nums[i - 1]\n        # dp[i] = dp[i - 1] + nums[i] if i > 0 and nums[i] == nums[i - 1]\n        # dp[i] = dp[i - 1] + nums[i] if i > 0 and nums[i]!= num",
    "def subsetSum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    # write your code here\n    sum = 0\n    for num in nums:\n        sum += num\n    if sum < target:\n        return False\n    if sum == target:\n        return True\n    else:\n        return subsetSum(nums[1:], target - nums[0])\n\nprint(subsetSum([1, 2, 3, 4, 5], 5))\nprint(subsetSum([1, 2, 3, 4, 5], 6))\nprint(subsetSum([1, 2, 3, 4, 5], 7))\nprint(subsetSum([1, 2, 3, 4, 5], 0))\nprint(subsetSum([1, 2, 3, 4, 5], 5))\nprint(subsetSum([1, 2, 3, 4, 5], 6))\nprint(subsetSum([1, 2, 3, 4, 5], 7))\nprint(subsetSum([1, 2, 3, 4, 5], 8))",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        for i in range(len(set)):\n            if set[i] + set[i + 1] > sum:\n                return False\n            if set[i] + set[i + 1] < sum:\n                return True\n        return True\n\n\nif __name__ == \"__main__\":\n    assert Solution().isSubset([1, 2, 3], 4) == True\n    assert Solution().isSubset([1, 2, 3, 4], 4) == False\n    assert Solution().isSubset([1, 2, 3, 4], 5) == True",
    "class Solution:\n    def subsetSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        result = False\n        nums.sort()\n        max_sum = 0\n        for i in range(len(nums)):\n            max_sum = max(max_sum, nums[i] + i)\n            if max_sum >= k:\n                result = True\n                break\n\n        return result",
    "# https://leetcode.com/problems/subset-sum-equals-k/\n# Definition for a subset of a set:\n# class Subset(object):\n#     def __init__(self, indexes):\n#         self.indexes = indexes\n#         self.size = len(indexes)\n#     def size(self):\n#         return self.size\n#     def is_superset(self, s):\n#         if not self.size:\n#             return True\n#         for i in range(self.size):\n#             if s.indexes[i]!= i:\n#                 return False\n#         return True\n\nclass Solution(object):\n    def subsetSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if not nums or not k:\n            return False\n\n        def is_subset(s, k):\n            for i in range(len(s)):\n                if s[i]!= i:\n                    return False\n            return True\n\n        n = len(nums)\n        result = False\n        for i in range(n):\n            if is_subset(nums[:i] + nums[i+1:], k):\n                result = True\n                break\n        return result",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not set:\n            return False\n        if sum < 0:\n            return False\n        if sum == 0:\n            return True\n        if set[0] > sum:\n            return False\n\n        ret = False\n        for i in xrange(len(set)):\n            if set[i] > sum:\n                ret = True\n                break\n            if sum - set[i] > set[i]:\n                ret = True\n                break\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().isSubset([1,2,3], 4) == True\n    assert Solution().isSubset([1,2,3], 5) == False\n    assert Solution().isSubset([1,2,3,4,5], 6) == True\n    assert Solution().isSubset([1,2,3,4,5], 7) == False",
    "def is_subset(s, sum):\n    \"\"\"\n    :type s: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if sum == 0:\n        return True\n    if len(s) == 0:\n        return False\n    if sum < 0:\n        return False\n    for i in range(len(s)):\n        if sum - s[i] >= 0:\n            return is_subset(s[i+1:], sum - s[i])\n    return False\n\nprint is_subset([1,2,3], 4)\nprint is_subset([1,2,3], 4)\nprint is_subset([1,2,3], 5)",
    "# Example 1:\n# Input: s = [1, 2, 3], sum = 9\n# Output: True\n# Explanation: There is a subset of {1, 2, 3} with sum 9.\n# Example 2:\n# Input: s = [4, 2, 6], sum = 8\n# Output: False\n# Explanation: There is no subset of {4, 2, 6} with sum 8.\n\n# Note:\n# The set's size is in the range [1, 10000].\n# The sum will be an integer in the range [0, 9999].\n\nclass Solution(object):\n    def isSubset(self, s, sum):\n        \"\"\"\n        :type s: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not s or sum == 0:\n            return True\n\n        if sum < 0:\n            return False\n\n        dp = [False] * sum + [True]\n        for i in xrange(len(s)):\n            for j in xrange(sum):\n                if j + s[i] > sum:\n                    dp[j] = False\n                elif dp[j]:\n                    dp[j] = True\n        return dp[0]",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSubset(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0 or k == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == k\n        if len(nums) == 2:\n            return nums[0] + nums[1] == k\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2] == k\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3] == k\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == k\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == k\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] == k\n        return False",
    "import unittest\n\n\nclass Solution(object):\n    def isSubset(self, s, t):\n        \"\"\"\n        :type s: List[int]\n        :type t: int\n        :rtype: bool\n        \"\"\"\n        s = list(s)\n        t = int(t)\n        l = len(s)\n        for i in range(0, l):\n            if s[i] < t:\n                return False\n            if s[i] > t:\n                return True\n            t -= s[i]\n\n        return True\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subset-sum/solution/\n\n# 10:54 - 10:56\nclass Solution {\n    public boolean isSubset(int[] s, int t) {\n        int sum = 0;\n        for (int i = 0; i < s.length; i++) {\n            sum += s[i];\n        }\n        return sum == t;\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public boolean isSubset(int[] s, int t) {\n        int sum = 0;\n        for (int i = 0; i < s.length; i++) {\n            sum += s[i];\n        }\n        return sum == t;\n    }\n}\n'''",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        if len(set) == 0:\n            return False\n        \n        # find a subset of the set with sum equal to sum\n        for i in xrange(len(set)):\n            if sum - set[i] < 0:\n                return False\n            elif sum - set[i] == 0:\n                return True\n            else:\n                # find a subset of the set with sum equal to sum\n                # if sum - set[i] > 0\n                # then set[i] is not included in the subset\n                # if sum - set[i] == 0\n                # then set[i] is included in the subset\n                # if sum - set[i] < 0\n                # then set[i] is not included in the subset\n                if not self.isSubset(set[i+1:], sum - set[i]):\n                    return False\n        return True",
    "def subsetSum(nums, target):\n\t\"\"\"\n\t:type nums: List[int]\n\t:type target: int\n\t:rtype: bool\n\t\"\"\"\n\t# O(n^2)\n\tsum = 0\n\tfor i in range(len(nums)):\n\t\tsum += nums[i]\n\t\tif sum == target:\n\t\t\treturn True\n\t\tif sum < target:\n\t\t\treturn False\n\treturn False\n\nif __name__ == '__main__':\n\tprint subsetSum([1,2,3,4,5,6], 6)",
    "def is_subset(A, B, S):\n    \"\"\"\n    :type A: List[int]\n    :type B: List[int]\n    :type S: int\n    :rtype: bool\n    \"\"\"\n    # write your code here\n    if len(A) == 0:\n        return False\n    \n    # if A and B are not the same length, return false\n    if len(A)!= len(B):\n        return False\n    \n    # if sum of A is greater than sum of B, return false\n    if sum(A) > S:\n        return False\n    \n    # if sum of A is less than sum of B, return true\n    if sum(A) < S:\n        return True\n    \n    # if sum of A is equal to sum of B, check if there is a subset of A with sum = S\n    for i in range(len(A)):\n        if sum(A[:i+1]) == S:\n            return is_subset(A[i+1:], B, S)\n    \n    # if there is no subset of A with sum = S, return false\n    return False\n\nA = [2, 3, 1, 2, 4, 3]\nB = [2, 1, 2, 1, 3, 2]\nS = 5\n\nprint(is_subset(A, B, S))",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} sum\n    # @return {boolean}\n    def subsetSum(self, nums, sum):\n        if len(nums) == 0:\n            return False\n        dp = [False] * (sum + 1)\n        for i in range(len(nums)):\n            for j in range(sum):\n                if dp[j] or dp[sum - nums[i] - j]:\n                    continue\n                dp[j] = True\n                if dp[sum - nums[i] - j] and sum == j:\n                    return True\n        return False\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [2,3,1,2,4]\n    sum = 6\n    print(sol.subsetSum(nums, sum))",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0:\n            return False\n        if sum == 0:\n            return True\n        if set[0] >= sum:\n            return False\n        for i in xrange(1, len(set)):\n            if set[i] > set[i-1]:\n                return False\n        return self.isSubset(set[1:], sum - set[0])",
    "class Solution:\n    # @param set, a set of integer\n    # @param sum, an integer\n    # @return a boolean\n    def isSubset(self, set, sum):\n        if not set:\n            return False\n        \n        result = False\n        for i in range(len(set)):\n            if sum - set[i] >= 0:\n                if self.isSubset(set[i+1:], sum - set[i]):\n                    result = True\n                    break\n        return result\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.isSubset([1,2,3,4], 4)\n    print solution.isSubset([1,2,3,4], 5)\n    print solution.isSubset([1,2,3], -1)\n    print solution.isSubset([1,2,3], 4)\n    print solution.isSubset([1,2,3], -2)\n    print solution.isSubset([1,2,3,4,5], 5)",
    "def is_subset(nums, sum):\n    # write your code here\n    if len(nums) == 0 or sum == 0:\n        return False\n    for i in range(len(nums)):\n        if sum - nums[i] < 0:\n            return False\n    return True",
    "# Your Codecademy solution\n\n# Write your solution here.\n# Return True or False\n\n# Example:\n\n# Input: set = [1,2,3], sum = 6\n# Output: True\n# Example:\n\n# Input: set = [1,2], sum = 3\n# Output: False\n\n# Example:\n\n# Input: set = [1,2,3,4], sum = 7\n# Output: True\n\ndef is_subset(set, sum):\n\tif len(set) == 0:\n\t\treturn False\n\telif len(set) == 1:\n\t\tif set[0] == sum:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telif len(set) == 2:\n\t\tif set[0] == sum and set[1] == sum:\n\t\t\treturn True\n\t\telif set[0]!= sum and set[1]!= sum:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn is_subset(set[1:], sum)\n\telse:\n\t\treturn is_subset(set[1:], sum) and is_subset(set[:1], sum)\n\nif __name__ == '__main__':\n\tprint is_subset([1,2], 3)",
    "# https://leetcode.com/problems/subset-sum-equals-k/\n\nclass Solution(object):\n    def subsetSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        nums.sort()\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            if nums[start] + nums[end] == k:\n                return True\n            if nums[start] + nums[end] < k:\n                end -= 1\n            else:\n                start += 1\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Solution().subsetSum([-1, 0, 1, 2, -1], 0) == False\n    assert Solution().subsetSum([-1, 0, 1, 2, -1], 2) == True\n    assert Solution().subsetSum([-1, 0, 1, 2, -1], 3) == False\n    assert Solution().subsetSum([-1, 0, 1, 2, -1], 4) == True\n    assert Solution().subsetSum([-1, 0, 1, 2, -1], 5) == False",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        return sum == sum(set) and all(x in set for x in set)\n\nif __name__ == '__main__':\n    solution = Solution()\n    assert solution.isSubset([1, 2, 3], 5)\n    assert not solution.isSubset([1, 2, 3], 4)",
    "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # write your code here\n\n        return len(set) == 0 or sum - sum(set) >= 0",
    "# https://leetcode.com/problems/subset-sum-equals-k/discuss/181418/C%2B%2B-Python-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/151396/C%2B%2B-Python-DP-solution-with-explanation\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/151396/C%2B%2B-Python-DP-solution-with-explanation\n\n# DP\n# Time complexity: O(n*k)\n# Space complexity: O(k)\n# https://leetcode.com/problems/subset-sum-equals-k/discuss/181418/C%2B%2B-Python-DP-solution-with-explanation\ndef subsetSum(self, nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    # DP solution\n    # dp[i][j] indicates if there is a subset of nums[0:i] with sum = k\n    dp = [[False for _ in range(k+1)] for _ in range(len(nums)+1)]\n    for i in range(1, len(nums)+1):\n        for j in range(1, k+1):\n            if dp[i][j]:\n                dp[i][j] = True\n            else:\n                if j >= k:\n                    dp[i][j] = False\n                else:\n                    dp[i][j] = (dp[i-1][j] or dp[i][j-nums[i-1]])\n    return dp[-1][-1]",
    "import unittest\n\nclass Solution:\n    # @return a boolean\n    def subsetSum(self, nums, S):\n        \"\"\"\n        :type nums: List[int]\n        :type S: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        total = 0\n        for i in range(len(nums)):\n            total += nums[i]\n        if total == S:\n            return True\n        for i in range(len(nums)):\n            if total - nums[i] < 0:\n                return False\n            total -= nums[i]\n        return True\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subset-sum/solution/\n# Approach #2: Brute Force\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# 8ms 20.84%\nclass Solution {\n    public boolean subsetSum(int[] nums, int S) {\n        Arrays.sort(nums);\n        int total = 0;\n        for (int i = 0; i < nums.length; i++) {\n            total += nums[i];\n            if (total == S) return true;\n            if (total - nums[i] < 0) return false;\n            total -= nums[i];\n        }\n        return true;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public boolean subsetSum(int[] nums, int S) {\n        int[] sums = new int[nums.length];\n        for (int i = 0; i < sums.length; i++) {\n            sums[i] = nums[i] + sums[i+1];\n        }\n        for (int i = 0; i < sums.length; i++) {\n            if (sums[i] == S) return true;\n            if (sums[i",
    "class Solution(object):\n    def isSubset(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        nums.sort()\n        if target == 0:\n            return True\n        i = 0\n        while i < len(nums) and target > 0:\n            if nums[i] > target:\n                break\n            target -= nums[i]\n            i += 1\n        return i == len(nums) and target == 0",
    "def is_sum_subset(set_, sum_):\n    \"\"\"\n    :type set_: List[int]\n    :type sum_: int\n    :rtype: bool\n    \"\"\"\n    \n    # if sum is zero or sum is greater than the size of set, return false\n    if sum_ == 0 or sum_ > len(set_):\n        return False\n    \n    # find the number of elements that sum to sum_\n    num_elements = 0\n    for i in range(len(set_)):\n        if sum_ - set_[i] == 0:\n            num_elements += 1\n    \n    # if there is no element that sum to sum_, return false\n    if num_elements == 0:\n        return False\n    \n    # if there is one element that sum to sum_, return true\n    elif num_elements == 1:\n        return True\n    \n    # if there is more than one element that sum to sum_, return false\n    else:\n        return False\n    \n    \nif __name__ == \"__main__\":\n    set_ = [2, 3, 5, 7]\n    print(is_sum_subset(set_, 8))\n    set_ = [3, 2, 4]\n    print(is_sum_subset(set_, 7))\n    set_ = [2, 3, 4, 5, 6]\n    print(is_sum_subset(set_, 8))\n    set_ = [2, 4, 6, 8]\n    print(is_sum_subset(set_, 8))\n    set_ = [2, 4, 6, 8, 10]\n    print(is_sum_subset(set_, 8))\n    set_ = [2, 3, 5, 7]\n    print(is_sum_subset(set_, 7))\n    set_ = [3, 4, 5, 6]\n    print(is_sum_subset(set_, 7))\n    set_ = [2, 3, 5, 7, 9]\n    print(is_sum_subset(set_, 7))\n    set_ = [2, 3, 5, 7,",
    "# https://www.hackerrank.com/challenges/set-sum-equals-k/problem\n\n# Complete the setSumEqual function below.\ndef setSumEqual(set_, sum_):\n    for i in set_:\n        if sum_ == sum(i):\n            return True\n    return False\n\nif __name__ == '__main__':\n    set_ = [1,2,3]\n    sum_ = 4\n    print(setSumEqual(set_, sum_))",
    "# https://leetcode.com/problems/subsets/\n\nclass Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # https://leetcode.com/problems/subsets-with-duplicate/discuss/85748/Python-Cython-Solution\n        \n        if nums == []:\n            return []\n        \n        subset = [nums[0]]\n        result = [subset]\n        \n        for i in range(1, len(nums)):\n            newSubset = []\n            for j in range(len(subset)):\n                for k in range(len(subset)):\n                    newSubset.append(subset[j] + subset[k])\n            subset = newSubset\n            result.append(subset)\n        \n        return result",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param sum, an integer\n    # @return a boolean\n    def hasSubtreeSum(self, root, sum):\n        if root is None:\n            return False\n        if root.val == sum and root.left is None and root.right is None:\n            return True\n        if root.val == sum and root.left is None:\n            return self.hasSubtreeSum(root.right, sum)\n        if root.val == sum and root.right is None:\n            return self.hasSubtreeSum(root.left, sum)\n        if root.val == sum and root.left is not None:\n            return self.hasSubtreeSum(root.left, sum)\n        if root.val == sum and root.right is not None:\n            return self.hasSubtreeSum(root.right, sum)\n        return False",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if len(set) == 0 or sum == 0:\n            return False\n\n        return self.dfs(set, sum)\n\n    def dfs(self, set, sum):\n        if sum == 0:\n            return True\n        if set[0] > sum:\n            return False\n\n        for i in range(len(set)):\n            if set[i] > sum:\n                return False\n            if set[i] < sum:\n                return self.dfs(set[i + 1:], sum - set[i])\n\n        return True\n\n\nif __name__ == '__main__':\n    sol = Solution()\n\n    print sol.isSubset([1, 2, 3], 5)\n    print sol.isSubset([1, 2, 3], 4)\n    print sol.isSubset([1, 2, 3], 3)\n    print sol.isSubset([1, 2, 3], 2)",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nclass Solution:\n    # @return a boolean\n    def canPartition(self, S, sum):\n        if sum == 0:\n            return True\n        l = 0\n        r = len(S) - 1\n        while l < r:\n            m = (l + r) / 2\n            if sum == S[m]:\n                return True\n            elif sum > S[m]:\n                r = m - 1\n            else:\n                l = m + 1\n        return False\n\n    # @return a boolean\n    def canPartition2(self, S, sum):\n        return sum == 0 or sum == sum(S) or sum > sum(S)\n\n    # @return a boolean\n    def canPartition1(self, S, sum):\n        sum = sum(S)\n        return sum == 0 or sum == sum(S) or sum > sum(S)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.canPartition1([1, 2, 3], 6)\n    print s.canPartition1([1, 2, 3, 4, 5], 6)\n    print s.canPartition1([1, 2, 3, 4, 5], 5)\n    print s.canPartition1([1, 2, 3, 4, 5], 6)",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        # if set is empty, return false\n        if len(set) == 0:\n            return False\n\n        # if set is not empty, the sum can be at least sum\n        if sum >= len(set):\n            return True\n\n        # set is not empty, but sum is not greater than sum\n        if sum > sum:\n            return False\n\n        # set is not empty, and sum is greater than sum\n        for i in range(len(set)):\n            if sum - set[i] > sum:\n                return False\n\n        return True",
    "def is_subset(set, sum):\n    if sum == 0:\n        return True\n    for x in set:\n        if sum - x > 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    set = [1, 2, 3, 4, 5]\n    sum = 6\n    print(is_subset(set, sum))",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} targetSum\n    # @return {boolean}\n    def canPartition(self, nums, targetSum):\n        \"\"\"\n        :type nums: List[int]\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        \n        nums.sort()\n        \n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        \n        if sum == targetSum:\n            return True\n        \n        if sum > targetSum:\n            return False\n        \n        for i in range(len(nums)):\n            if sum >= targetSum:\n                return True\n            if sum < targetSum:\n                if nums[i] <= sum:\n                    return False\n                \n        return False\n        \n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1,2,3]\n    targetSum = 4\n    print(sol.canPartition(nums, targetSum))\n    nums = [2,3,4]\n    targetSum = 5\n    print(sol.canPartition(nums, targetSum))\n    nums = [1,1,1,1,1]\n    targetSum = 1\n    print(sol.canPartition(nums, targetSum))\n    nums = [1,2,3,4,5]\n    targetSum = 15\n    print(sol.canPartition(nums, targetSum))\n    nums = [1,2,3,4,5,6,7,8,9]\n    targetSum = 25\n    print(sol.canPartition(nums, targetSum))\n    nums = [1,1,1,1,1,1,1,1,1]\n    targetSum = 1\n    print(sol.canPartition(nums, targetSum))\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12]\n    targetSum = 25",
    "class Solution(object):\n    def isSubset(self, set, sum):\n        \"\"\"\n        :type set: List[int]\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not set or not sum:\n            return False\n        return self.dfs(set, sum, 0)\n\n    def dfs(self, set, sum, cur):\n        if sum == 0:\n            return True\n        if cur == sum:\n            return False\n        if cur > sum:\n            return False\n        for ele in set:\n            if self.dfs(set[:ele] + set[ele+1:], sum - cur, cur):\n                return True\n        return False"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}