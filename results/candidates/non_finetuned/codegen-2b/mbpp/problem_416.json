{
  "problem": {
    "task_id": "MBPP/427",
    "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
    "test_list": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ],
    "challenge_test_list": [],
    "problem_id": 416
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def yyyymmdd_to_ddmmyyyy(s):\n    regex = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(regex, s)\n    if match:\n        return '{0}-{1}-{2}'.format(match.group(3), match.group(2), match.group(1))\n    else:\n        return 'None'\n\nif __name__ == '__main__':\n    s = '2016-10-20'\n    print yyyymmdd_to_ddmmyyyy(s)",
    "import re\n\ndef convert_date(date):\n    pattern = re.compile(r\"^(\\d{4})-(\\d{2})-(\\d{2})$\")\n    match = pattern.match(date)\n    if match:\n        return \"{}-{}-{}\".format(match.group(3), match.group(2), match.group(1))\n    else:\n        return \"\"\n\n#Test\nprint(convert_date(\"2018-12-12\"))\nprint(convert_date(\"2017-12-12\"))\nprint(convert_date(\"2017-11-12\"))\nprint(convert_date(\"2017-02-12\"))",
    "# https://leetcode.com/problems/date-to-decade/discuss/93927/Java-Python-Regex-Solution\n\nclass Solution(object):\n    def convertToDecade(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.split('-')[0] + '-' + s.split('-')[1][2:] + '-' + s.split('-')[2]\n\n    def convertToDate(self, s):\n        return s.split('-')[0] + '-' + s.split('-')[1] + '-' + s.split('-')[2]\n\nclass Solution(object):\n    def convertToDecade(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.split('-')[0] + '-' + s.split('-')[1][2:] + '-' + s.split('-')[2]\n\n    def convertToDate(self, s):\n        return s.split('-')[0] + '-' + s.split('-')[1] + '-' + s.split('-')[2]\n\nclass Solution(object):\n    def convertToDecade(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.split('-')[0] + '-' + s.split('-')[1][2:] + '-' + s.split('-')[2]\n\n    def convertToDate(self, s):\n        return s.split('-')[0] + '-' + s.split('-')[1] + '-' + s.split('-')[2]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.convertToDecade('20191-11-23'))\n    print(s.convertToDate('20191-11-23'))\n    print(s.convertToDecade('2018-11-23'))\n    print(s.convertToDate('2018-11-23'",
    "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        s = s.strip()\n        if len(s)!= 10:\n            return \"\"\n        match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', s)\n        if not match:\n            return \"\"\n        return \"{}-{}-{}\".format(match.group(3), match.group(2), match.group(1))",
    "class Solution(object):\n    def convertToHuman(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile('[0-9]{1,4}-[0-1][0-9]-[0-3][0-9]')\n        return regex.sub('-', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.convertToHuman('2015-03-01') == '1-01-2015'\n    assert s.convertToHuman('2015-01-01') == '01-01-2015'",
    "import re\n\n\ndef convert(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})$', r'\\1-\\2-\\3', date)\n\n\nif __name__ == '__main__':\n    assert convert('2015-12-23') == '23-12-2015'\n    assert convert('2015-12-23 21:43:37') == '23-12-2015 21:43:37'\n    assert convert('2015-12-23 21:43:37') == '23-12-2015 21:43:37'\n    assert convert('2015-12-23 21:43:37') == '23-12-2015 21:43:37'",
    "import re\n\ndef convert_date(date_string):\n    date_string = re.sub(r'[^\\d]', '', date_string)\n    year = int(date_string[0:4])\n    month = int(date_string[5:7])\n    day = int(date_string[8:10])\n    return day, month, year\n\nif __name__ == '__main__':\n    date = '20150602'\n    day, month, year = convert_date(date)\n    print day, month, year\n    assert day == 31 and month == 10 and year == 2015",
    "# import re\n\n# def convert(date):\n#     return re.sub(r'^\\d{4}-\\d{2}-\\d{2}$', '00-00-0000', date)\n\n\n# # Test Cases\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date = '2015-11-22'\n# date =",
    "class Solution:\n    # @param date, a string\n    # @return a string\n    def dateToString(self, date):\n        date = date.split('-')\n        return date[2] + '-' + date[1] + '-' + date[0]\n\nif __name__ == '__main__':\n    solution = Solution()\n    date = \"2017-06-30\"\n    print(solution.dateToString(date))",
    "def convert(date):\n    # This is a good way to convert a string to a date\n    # date = datetime.datetime.strptime(date, '%Y-%m-%d')\n    # return date.strftime('%d-%m-%Y')\n    # This is a good way to convert a string to a date\n    date = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return date.strftime('%d-%m-%y')\n\nif __name__ == '__main__':\n    date = raw_input('Enter a date: ')\n    print convert(date)",
    "import re\n\ndef convert_date(date_str):\n    return re.sub(r'[^0-9-]', '', date_str)\n\nif __name__ == '__main__':\n    print convert_date(\"12-01-13\")\n    print convert_date(\"\")\n    print convert_date(\"aa-bb-cc\")\n    print convert_date(\"12-01-13\")\n    print convert_date(\"13-01-12\")",
    "class Solution(object):\n    def convertToHuman(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\D+', '', date)",
    "import re\n\ndef convert(date):\n    return date.replace('-', '').replace('/', '').replace('.', '')\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert('0000-00-00') == '0000-00-00', '0000-00-00'\n    assert convert('0001-00-00') == '0001-00-00', '0001-00-00'\n    assert convert('0101-00-00') == '0101-00-00', '0101-00-00'\n    assert convert('0101-01-00') == '0101-01-00', '0101-01-00'\n    assert convert('0101-01-01') == '0101-01-01', '0101-01-01'\n    assert convert('0101-02-01') == '0101-02-01', '0101-02-01'\n    assert convert('0101-03-01') == '0101-03-01', '0101-03-01'\n    assert convert('0101-04-01') == '0101-04-01', '0101-04-01'\n    assert convert('0101-05-01') == '0101-05-01', '0101-05-01'\n    assert convert('0101-06-01') == '0101-06-01', '0101-06-01'\n    assert convert('0101-07-01') == '0101-07-01', '0101-07-01'\n    assert convert('0101-08-01') == '0101-08-01', '0101-08-01'\n    assert convert('0101-09-01') == '0101-09-01', '0101-09-01'\n    assert convert('0101-10-01') == '0101-10-01', '0101-10-01'\n    assert convert('0101-11-01') == '0101-11-01', '0101-11-01'\n    assert convert('0101-12-01') == '0101-",
    "def convert_date(date):\n    \"\"\"\n    date: string of yyyy-mm-dd format\n    return: string of dd-mm-yyyy format\n    \"\"\"\n    if len(date)!= 8:\n        return date\n\n    day = date[0:2]\n    month = date[3:5]\n    year = date[6:8]\n    return day + '-' + month + '-' + year\n\ndef main():\n    date = \"2017-01-02\"\n    date = convert_date(date)\n    print(date)\n\nif __name__ == '__main__':\n    main()",
    "from string import ascii_lowercase\n\ndef date_to_date_string(date_str):\n    date_str = date_str.strip()\n    date_str = date_str.replace('-','')\n    date_str = date_str.replace('/','')\n    date_str = date_str.replace(' ','')\n    date_str = date_str.replace('.','')\n    date_str = date_str.replace(',','.')\n    date_str = date_str.replace('-','')\n    return date_str\n\ndef date_to_date_string_regex(date_str):\n    date_str = date_str.strip()\n    date_str = date_str.replace('-','')\n    date_str = date_str.replace('/','')\n    date_str = date_str.replace(' ','')\n    date_str = date_str.replace('.','')\n    date_str = date_str.replace(',','.')\n    date_str = date_str.replace('-','')\n    return date_str\n\ndef date_to_date_string_regex_2(date_str):\n    date_str = date_str.strip()\n    date_str = date_str.replace('-','')\n    date_str = date_str.replace('/','')\n    date_str = date_str.replace(' ','')\n    date_str = date_str.replace('.','')\n    date_str = date_str.replace(',','.')\n    date_str = date_str.replace('-','')\n    return date_str\n\ndef date_to_date_string_regex_3(date_str):\n    date_str = date_str.strip()\n    date_str = date_str.replace('-','')\n    date_str = date_str.replace('/','')\n    date_str = date_str.replace(' ','')\n    date_str = date_str.replace('.','')\n    date_str = date_str.replace(',','.')\n    date",
    "import re\n\ndef date_to_date(date_str):\n    \"\"\"\n    :type date_str: str\n    :rtype: str\n    \"\"\"\n    # match the date string with regex\n    pattern = re.compile(\"(\\d{4})(\\d{2})(\\d{2})\"\n                         \"\\s*((?:\\d{1,2}:\\d{2}(:\\d{2})?)|(?:\\d{2}:\\d{2}(:\\d{2})?)|(?:\\d{2}))\")\n    match = pattern.match(date_str)\n    if match:\n        return \"%s-%s-%s\" % (match.group(1), match.group(2), match.group(3))\n    else:\n        return None\n\n# test\nif __name__ == '__main__':\n    print(date_to_date(\"1999-11-31\"))\n    print(date_to_date(\"1999-11-31 12:12:12\"))\n    print(date_to_date(\"1999-11-31 12:12:12.121212\"))\n    print(date_to_date(\"1999-11-31 12:12:12.121212Z\"))\n    print(date_to_date(\"1999-11-31 12:12:12.121212+08:00\"))\n    print(date_to_date(\"1999-11-31 12:12:12.121212-08:00\"))",
    "import re\n\ndef convert(date):\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\1-\\2-\\3\", date)\n\nif __name__ == \"__main__\":\n    print(convert(\"2015-12-13\"))\n    print(convert(\"2014-12-13\"))\n    print(convert(\"2014-12-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014-01-01\"))\n    print(convert(\"2014",
    "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(\"-\", \"\").replace(\"/\", \"\").replace(\" \",\"\")\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.convert(\"20070812\")",
    "class Solution(object):\n    def toDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\n        matches = re.findall(pattern, s)\n        if matches:\n            return '%s-%s-%s' % (matches[0][2], matches[0][1], matches[0][0])\n        else:\n            return s\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.toDate('1999-11-30'))\n    print(sol.toDate('1999-11-30'))",
    "# Complete the dateToYear function below.\ndef dateToYear(date):\n    return date.split('-')[2] + '-' + date.split('-')[1] + '-' + date.split('-')[0]\n\n# Test Cases\n# dateToYear('05-10-2016') --> 2016-10-05\n# dateToYear('03-10-2016') --> 2016-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-10-03\n# dateToYear('03-10-2021') --> 2021-",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        year, month, day = map(int, s.split('-'))\n        return \"{day}{month}-{year}\".format(day=day, month=month, year=year)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.convertToDate(\"2015-09-21\")\n    print s.convertToDate(\"2015-09-21\")\n    print s.convertToDate(\"2015-09-21\")",
    "import re\n\n\ndef convert_date(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    # pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date = date.strip()\n    match = re.match(pattern, date)\n    if match:\n        return '{}-{}-{}'.format(match.group(1), match.group(2), match.group(3))\n    else:\n        return date\n\nif __name__ == '__main__':\n    print(convert_date('2014-09-06'))\n    print(convert_date('2014-09-06'))",
    "# https://stackoverflow.com/questions/42593363/how-to-convert-a-date-to-yyyy-mm-dd-format-in-python\n\n# def to_yyyy_mm_dd(date):\n#     return date.year + '-' + date.month + '-' + date.day\n\n# def to_dd_mm_yyyy(date):\n#     return date.day + '-' + date.month + '-' + date.year\n\n# def convert(date):\n#     return to_yyyy_mm_dd(date)\n\n# test\n# print(convert(datetime.datetime(2017, 10, 1)))\n# print(convert(datetime.datetime(2017, 1, 1)))\n# print(convert(datetime.datetime(2017, 10, 31)))\n# print(convert(datetime.datetime(2017, 11, 1)))\n# print(convert(datetime.datetime(2017, 12, 1)))\n# print(convert(datetime.datetime(2017, 12, 31)))\n# print(convert(datetime.datetime(2018, 1, 1)))\n# print(convert(datetime.datetime(2018, 2, 1)))\n# print(convert(datetime.datetime(2018, 2, 29)))\n# print(convert(datetime.datetime(2018, 3, 1)))\n# print(convert(datetime.datetime(2018, 3, 31)))\n# print(convert(datetime.datetime(2018, 4, 1)))\n# print(convert(datetime.datetime(2018, 4, 30)))\n# print(convert(datetime.datetime(2018, 5, 1)))\n# print(convert(datetime.datetime(2018, 5, 31)))\n# print(convert(datetime.datetime(2018, 6, 1)))\n# print(convert(datetime.datetime(2018, 6, 30)))\n# print(convert(datetime.datetime(2018, 7, 1)))\n# print(convert(datetime.datetime(2018, 7, 31)))\n# print(convert(datetime",
    "import re\n\ndef convert(date):\n    regex = r'^\\d{4}-\\d{2}-\\d{2}$'\n    matches = re.match(regex, date)\n    if matches:\n        return '{0}-{1}-{2}'.format(matches.group(1), matches.group(2), matches.group(3))\n    else:\n        return None\n\nif __name__ == '__main__':\n    date = '2016-12-31'\n    print convert(date)",
    "def to_date(date_str):\n    return date_str.replace(\"-\", \"\").replace(\"/\", \"\").replace(\",\", \"\")\n\ndef to_date_regex(date_str):\n    return re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n\nif __name__ == \"__main__\":\n    date_str = \"2016-12-21\"\n    print(to_date(date_str))\n    print(to_date_regex(date_str))\n    date_str = \"2016-12-21\"\n    print(to_date_regex(date_str))",
    "class Solution(object):\n    def convertToSentence(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        return date.replace(\"-\", \" \").replace(\"/\", \" \").replace(\" \", \"-\")",
    "from datetime import datetime\nimport re\n\ndef convert_date(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    if not date:\n        return \"\"\n\n    date = re.sub(r\"[^0-9]\", \"\", date)\n    date = re.sub(r\"^0+\", \"\", date)\n    date = re.sub(r\"^-0+\", \"\", date)\n    date = re.sub(r\"^[0-9]+$\", \"\", date)\n    date = re.sub(r\"^-\", \"-\", date)\n    date = re.sub(r\"^\\s+\", \"\", date)\n    date = re.sub(r\"\\s+\", \"-\", date)\n\n    return date\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"1/1/2016\", \"1/1/2016\"],\n        [\"",
    "import re\n\n\ndef to_date_format(date_str):\n    \"\"\"\n    :type date_str: str\n    :rtype: str\n    \"\"\"\n    # date_str = date_str.replace('-', '')\n    # date_str = date_str.replace(' ', '')\n    date_str = date_str.replace('/', '')\n    date_str = date_str.replace('.', '')\n    date_str = date_str.replace(':', '')\n    date_str = date_str.replace('-', '')\n    date_str = date_str.replace('0', '')\n    date_str = date_str.replace('1', '0')\n    date_str = date_str.replace('2', '0')\n    date_str = date_str.replace('3', '0')\n    date_str = date_str.replace('4', '0')\n    date_str = date_str.replace('5', '0')\n    date_str = date_str.replace('6', '0')\n    date_str = date_str.replace('7', '0')\n    date_str = date_str.replace('8', '0')\n    date_str = date_str.replace('9', '0')\n    date_str = date_str.replace('10', '0')\n    date_str = date_str.replace('11', '0')\n    date_str = date_str.replace('12', '0')\n    date_str = date_str.replace('13', '0')\n    date_str = date_str.replace('14', '0')\n    date_str = date_str.replace('15', '0')\n    date_str = date_str.replace('16', '0')\n    date_str = date_str.replace('17', '0')\n    date_str = date_str.replace('18', '0')\n    date_str = date_str.replace('19', '0')\n    date_str = date_str.replace('20', '0')\n    date_str = date_str.replace('21', '0')\n    date_",
    "# TODO:\n# 1. Add a regex to check if the input date is valid\n# 2. Add a regex to check if the input date is after today\n\nimport re\n\n\ndef date_to_date_format(date_str):\n    \"\"\"\n    Convert a string of yyyy-mm-dd format to dd-mm-yyyy format.\n    :param date_str: a string of yyyy-mm-dd format\n    :return: a string of dd-mm-yyyy format\n    \"\"\"\n    date_regex = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    if not date_regex.match(date_str):\n        return date_str\n    else:\n        return date_str.replace('-', '-')\n\n\ndef date_to_date_format_2(date_str):\n    \"\"\"\n    Convert a string of yyyy-mm-dd format to dd-mm-yyyy format.\n    :param date_str: a string of yyyy-mm-dd format\n    :return: a string of dd-mm-yyyy format\n    \"\"\"\n    date_regex = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    if not date_regex.match(date_str):\n        return date_str\n    else:\n        date_str = date_str.replace('-', '-')\n        date_str = date_str[6:]\n        date_str = date_str[0:2]\n        date_str = date_str + '-' + date_str[2:4]\n        date_str = date_str + '-' + date_str[4:6]\n        return date_str\n\n\ndef date_to_date_format_3(date_str):\n    \"\"\"\n    Convert a string of yyyy-mm-dd format to dd-mm-yyyy format.\n    :param date_str: a string of yyyy-mm-dd format\n    :return: a string of dd-mm-yyyy format\n    \"\"\"\n    date_regex = re.compile(",
    "def convert(date):\n    pattern = r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})'\n    regex = re.compile(pattern)\n    match = regex.match(date)\n    if match is None:\n        return 'Invalid date'\n    return '{0}-{1}-{2}'.format(match.group('year'), match.group('month'), match.group('day'))\n\nif __name__ == '__main__':\n    print(convert('2018-04-14'))",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        p = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n        return p.sub('-', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convertToDate('2014-11-11')",
    "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        if len(s)!= 16:\n            return \"\"\n        p = re.compile('(\\d{4})-(\\d{2})-(\\d{2})')\n        m = p.match(s)\n        if not m:\n            return \"\"\n        return \"%s-%s-%s\" % (m.group(1), m.group(2), m.group(3))",
    "import re\n\ndef yyyymmdd_to_ddmmyyyy(date):\n    match = re.search('^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return '%d-%d-%d' % (int(match.group(1)), int(match.group(2)), int(match.group(3)))\n    else:\n        return 'Error'\n\n\nif __name__ == '__main__':\n    print(yyyymmdd_to_ddmmyyyy('20140202'))",
    "class Solution(object):\n    def convertToStandardDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = r'\\d{4}-\\d{2}-\\d{2}'\n        return re.sub(regex, lambda m: str(int(m.group(0)) - 1), s)\n\n# test\ns = Solution()\nprint s.convertToStandardDate(\"20101229\")\nprint s.convertToStandardDate(\"20101229\")",
    "# Define a function to convert a string to a date\ndef convert(date):\n    # Your code here\n    return date\n\n# Test your function\n\n# Test 1:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 2:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 3:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 4:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 5:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 6:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 7:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 8:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 9:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 10:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 11:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 12:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 13:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 14:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 15:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 16:\nprint(convert('2016-02-10'))\n#>>> '10-02-2016'\n\n# Test 17:\nprint(convert('2016",
    "import re\n\n\ndef convert_date(date):\n    regex = re.compile(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})')\n    match = regex.match(date)\n    if match:\n        return match.group('day') + '-' + match.group('month') + '-' + match.group('year')\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    date = '2015-03-02'\n    print convert_date(date)",
    "class Solution(object):\n    def convertToRoman(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        res = ''\n        for i, r in enumerate(roman):\n            for j in range(i, len(s), 2):\n                res += s[j:j+2] + r\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.convertToRoman('123')",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = r'\\d{4}-\\d{1,2}-\\d{1,2}'\n        return re.sub(pattern, r'\\d{1,2}-\\d{1,2}-\\d{4}', s)",
    "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\n        matches = re.findall(pattern, s)\n        if len(matches)!= 0:\n            return '-'.join(matches[0])\n        return s",
    "def convert(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if s.isalpha():\n        return s\n    else:\n        return ''.join(s)\n\nif __name__ == '__main__':\n    print convert('1-4-2016')\n    print convert('10-4-2016')\n    print convert('10-4-2016')\n    print convert('10-4-2016')",
    "import re\nimport unittest\n\n\nclass Solution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(convert(\"20100201\"), \"01-2012\")\n        self.assertEqual(convert(\"20100201\"), \"01-2012\")\n        self.assertEqual(convert(\"20100201\"), \"01-2012\")\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "#!/usr/bin/env python\n\n# import time\n\ndef convert_date(date):\n    # time.sleep(0.5)\n    if not date:\n        return ''\n    if len(date) < 10:\n        return ''\n    date = date.replace('-', '')\n    date = date[:10]\n    if not date.isdigit():\n        return ''\n    return date + '-' + date[2:4] + '-' + date[4:6]\n\nif __name__ == '__main__':\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date('2014-01-01')\n    print convert_date",
    "# https://www.hackerrank.com/challenges/date-conversion/problem\n\ndef convert_to_date(date_str):\n    # Convert a string of yyyy-mm-dd format to dd-mm-yyyy format.\n    #\n    # Input:\n    #   date_str = \"2017-11-11\"\n    #\n    # Output:\n    #   \"11-11-2017\"\n    #\n    # Example:\n    #   Input:\n    #     date_str = \"2017-11-11\"\n    #   Output:\n    #     \"11-11-2017\"\n    \n    # Example:\n    #   Input:\n    #     date_str = \"2017-11-11\"\n    #   Output:\n    #     \"11-11-2017\"\n    #\n    # Example:\n    #   Input:\n    #     date_str = \"2017-11-11\"\n    #   Output:\n    #     \"11-11-2017\"\n    #\n    # Example:\n    #   Input:\n    #     date_str = \"2017-11-11\"\n    #   Output:\n    #     \"11-11-2017\"\n    #\n    # Example:\n    #   Input:\n    #     date_str = \"2017-11-11\"\n    #   Output:\n    #     \"11-11-2017\"\n    \n    # Date Format: YYYY-MM-DD\n    date_str = date_str[0:10]\n    return date_str + '-' + date_str[11:15] + '-' + date_str[16:19]\n\nif __name__ == '__main__':\n    date_str = input()\n    print(convert_to_date(date_str))",
    "import re\n\n# Complete the function below.\ndef convert(date):\n    date = date.strip()\n    year = date[0:4]\n    month = date[5:7]\n    day = date[8:10]\n    return day + '-' + month + '-' + year\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"01-01-2015\", \"01-01-2015\"),\n        (\"01-01-2015\", \"01-01-2015\"),\n        (\"01-01-2015\", \"01-01-2015\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10\", \"10-10-2010\"),\n        (\"10-10-10",
    "class Solution(object):\n    def toDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        y, m, d = s[0:4], s[4:6], s[6:8]\n        if len(y) == 2:\n            y = '20' + y\n        elif len(y) == 1:\n            y = '19' + y\n        return '%s-%s-%s' % (d, m, y)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.toDate('20120101')",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        m = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', s)\n        if m:\n            return \"%d-%d-%d\" % (int(m.group(3)), int(m.group(2)), int(m.group(1)))\n        return s\n\nif __name__ == \"__main__\":\n    assert Solution().convertToDate(\"2018-01-05\") == \"5-1-2018\"\n    assert Solution().convertToDate(\"2018-01-05\") == \"5-1-2018\"\n    assert Solution().convertToDate(\"2018-01-05\") == \"5-1-2018\"\n    assert Solution().convertToDate(\"2018-01-05\") == \"5-1-2018\"",
    "import re\n\ndef convert_date(date_str):\n    pattern = re.compile(\"^([1-9]{1}|0[1-9]|[12]\\d|3[01]|[01]\\d|\\d)\\/([1-9]|1[0-2])\\/([1-9]\\d\\d)$\")\n    match = pattern.match(date_str)\n    if match:\n        return \"{0}-{1}-{2}\".format(match.group(3), match.group(2), match.group(1))\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(convert_date(\"01/02/2003\"))",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[0:10] + s[11:19] + s[20:26] + s[27:]\n\n\nif __name__ == \"__main__\":\n    print Solution().convertToDate(\"20100122\")\n    print Solution().convertToDate(\"20100122\")\n    print Solution().convertToDate(\"20100122\")",
    "def convert_date(date_str):\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, date_str)\n    if match:\n        print(date_str +'->'+ str(match.group(1)) + '-' + str(match.group(2)) + '-' + str(match.group(3)))\n    else:\n        print(date_str +'is not a valid date.')\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_date('2001-05-30') == '2001-05-30', 'Simple conversion'\n    assert convert_date('200105030') == '10-05-30', 'Date with spaces'\n    assert convert_date('200105030') == '10-05-30', 'Date with dashes'\n    assert convert_date('200105030') == '10-05-30', 'Date with dots'\n    assert convert_date('200105030') == '10-05-30', 'Date with year'\n    assert convert_date('200105030') == '10-05-30', 'Date with month'\n    assert convert_date('200105030') == '10-05-30', 'Date with day'\n    assert convert_date('200105030') == '10-05-30', 'Date with all'\n    assert convert_date('200105030') == '10-05-30', 'Date with all'\n    assert convert_date('2001-05-30') == '30-05-01', 'Month with space'\n    assert convert_date('200105030') == '30-05-01', 'Month with dashes'\n    assert convert_date('200105030') == '30-05-01', 'Month with dots'\n    assert convert_date('200105030') == '30-05-01', 'Month with year'\n    assert convert_date('200105030') == '30-05-01', 'Month with month'\n    assert convert_date('",
    "import re\n\n\ndef convert_date(date_str):\n    \"\"\"\n    :type date_str: str\n    :rtype: str\n    \"\"\"\n    date_str = date_str.strip()\n    date_format = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n    match = date_format.match(date_str)\n    if match is None:\n        return date_str\n    else:\n        date_str = match.group(3) + \"-\" + match.group(2) + \"-\" + match.group(1)\n        return date_str\n\nif __name__ == \"__main__\":\n    date_str = \"2000-11-21\"\n    print(convert_date(date_str))\n    date_str = \"2000-11-21\"\n    print(convert_date(date_str))",
    "import re\n\nclass Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        re_str = r'(\\d{4})-(\\d{2})-(\\d{2})'\n        return re.sub(re_str, r'\\1-\\2-\\3', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convert(\"2006-12-24\")\n    print s.convert(\"2006-12-24 12:34:56\")\n    print s.convert(\"2006-12-24 12:34:56.123\")\n    print s.convert(\"2006-12-24 12:34:56.123456789\")\n    print s.convert(\"2006-12-24 12:34:56.1234567890123\")\n    print s.convert(\"2006-12-24 12:34:56.1234567890123456789\")\n    print s.convert(\"2006-12-24 12:34:56.123456789012345678901234\")",
    "# https://leetcode.com/problems/day-of-week-converter/discuss/235052/Java-Solution-using-regex-and-string-methods\n\nimport re\n\ndef convert(s):\n    return re.sub(r'(0[1-9]|[12]\\d|3[01])(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])([0-2]\\d|3[0-1])([0-2]\\d|[12]\\d|3[01])', r'\\3-\\2-\\1', s)\n\nif __name__ == '__main__':\n    s = \"2015-01-31\"\n    print(convert(s))",
    "# https://leetcode.com/problems/convert-date/\n\nclass Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        day = 0\n        month = 0\n        year = 0\n        regex = r'^\\d{4}-\\d{2}-\\d{2}$'\n        match = re.match(regex, s)\n        if match:\n            day, month, year = match.group().split('-')\n            day = int(day)\n            month = int(month)\n            year = int(year)\n            return day + '/' + month + '/' + str(year)\n        else:\n            return None\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-01-20'))\n    print(s.convert('20-",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(\"-\", \"\")\n\n# Note:\n#    1. year = \"2021-08-12\"\n#    2. year = \"2021-08-12\"\n#    3. year = \"2021-08-12\"\n#    4. year = \"2021-08-12\"\n#    5. year = \"2021-08-12\"\n#    6. year = \"2021-08-12\"\n#    7. year = \"2021-08-12\"\n#    8. year = \"2021-08-12\"\n#    9. year = \"2021-08-12\"\n#    10. year = \"2021-08-12\"\n#    11. year = \"2021-08-12\"\n#    12. year = \"2021-08-12\"\n#    13. year = \"2021-08-12\"\n#    14. year = \"2021-08-12\"\n#    15. year = \"2021-08-12\"\n#    16. year = \"2021-08-12\"\n#    17. year = \"2021-08-12\"\n#    18. year = \"2021-08-12\"\n#    19. year = \"2021-08-12\"\n#    20. year = \"2021-08-12\"\n#    21. year = \"2021-08-12\"\n#    22. year = \"2021-08-12\"\n#    23. year = \"2021-08-12\"\n#    24. year = \"2021-08-12\"\n#    25. year = \"2021-08-12\"\n#    26. year = \"2021-08-12\"\n#    27. year = \"2021-08-12\"\n#    28. year = \"2021-08-12\"\n#    29. year = \"2021-08-12\"\n#    30. year = \"2021-08-12\"\n#    31. year = \"2021",
    "def date_to_date(date):\n    return date[:4] + '-' + date[4:6] + '-' + date[6:]\n\ndef date_to_date_regex(date):\n    return '\\d{4}-\\d{2}-\\d{2}'\n\ndef date_to_date_regex_test():\n    assert date_to_date_regex('2016-02-29') == '2016-02-29'\n\nif __name__ == '__main__':\n    date_to_date_regex_test()",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if len(s)!= 10:\n            return s\n        # print(s)\n        match = re.match(r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\", s)\n        if match is None:\n            return s\n        else:\n            return \"{0}-{1}-{2}\".format(match.group(2), match.group(3), match.group(1))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.convertToDate(\"2000-01-01\"))\n    print(s.convertToDate(\"1999-12-31\"))\n    print(s.convertToDate(\"9999-12-31\"))\n    print(s.convertToDate(\"2001-12-31\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001-01-01\"))\n    print(s.convertToDate(\"2001",
    "class Solution(object):\n    def convertToValidDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = s.upper()\n        m = re.match(r'\\d{4}-\\d{2}-\\d{2}', s)\n        if m:\n            return s\n        m = re.match(r'\\d{4}-\\d{2}-\\d{2}', s)\n        if m:\n            return s\n        m = re.match(r'\\d{4}-\\d{2}-\\d{2}', s)\n        if m:\n            return s\n        m = re.match(r'\\d{4}-\\d{2}-\\d{2}', s)\n        if m:\n            return s\n        return s\n\n\nif __name__ == \"__main__\":\n    print Solution().convertToValidDate(\"01-02-03\")\n    print Solution().convertToValidDate(\"2001-01-01\")\n    print Solution().convertToValidDate(\"01-01-01\")",
    "def convert_date(date_str):\n    # write your code here\n    return date_str\n\nif __name__ == '__main__':\n    test_str = '2017-05-20'\n    print(convert_date(test_str))",
    "import re\n\nclass Solution:\n    # @param date, a string\n    # @return a string\n    def convert(self, date):\n        if len(date) == 10:\n            return date\n        else:\n            date_match = re.compile(r'^(\\d{4})-(\\d{1,2})-(\\d{1,2})$')\n            return date_match.sub(r'\\2-\\1-\\3', date)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convert('2004-11-20')\n    print s.convert('2004-11-20 11:11:11')\n    print s.convert('2004-11-20 11:11:11.11')\n    print s.convert('2004-11-20 11:11:11.1111')",
    "# https://www.hackerrank.com/challenges/date-to-dd-mm-yyyy/problem\n# Written by: Linus Lagergren\n\n# The function below is a modified version of the one in\n# https://www.hackerrank.com/challenges/date-to-dd-mm-yyyy/submissions/code/391523\n\n# The date format is yyyy-mm-dd.\n# It is similar to the one used by \"date\" command.\n\n# The output is in dd-mm-yyyy format.\n\ndef date_to_dd_mm_yyyy(date):\n    if date == None:\n        return None\n\n    # 1. Remove all trailing white space.\n    date = date.strip()\n\n    # 2. Split the string into parts.\n    date_split = date.split(\"-\")\n\n    # 3. Check if the last element is a valid date.\n    # If it is not a valid date, then return None.\n    try:\n        int(date_split[2])\n        int(date_split[1])\n        int(date_split[0])\n    except ValueError:\n        return None\n\n    # 4. If the date is February 29th, then return None.\n    # This is because the date format does not have February 29th.\n    # If the date is February 29th, then return None.\n    if date_split[1] == \"2\" and date_split[0] == \"29\":\n        return None\n\n    # 5. Convert the date to dd-mm-yyyy format.\n    # The first element is the day, the second element is the month,\n    # and the third element is the year.\n    return \"{}-{}-{}\".format(date_split[2], date_split[1], date_split[0])\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013-02-29\"],\n        [\"2013",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[:10] + \"-\" + s[10:12] + \"-\" + s[12:]\n\n\nif __name__ == '__main__':\n    Solution().convertToDate(\"20100401\")",
    "# https://www.tutorialspoint.com/python/regex/\n# https://www.tutorialspoint.com/python/python_regex_regular_expressions.htm\n\n\ndef convert_date(date_str):\n    \"\"\"\n    :param date_str: String containing the date in yyyy-mm-dd format\n    :return: String containing the date in dd-mm-yyyy format\n    \"\"\"\n    date_str = date_str.replace(\"-\", \"\")\n    date_str = date_str.replace(\"/\", \"\")\n    date_str = date_str.replace(\" \", \"\")\n    date_str = date_str.replace(\":\", \"\")\n    date_str = date_str.replace(\".\", \"\")\n    date_str = date_str.replace(\"-\", \"\")\n    date_str = date_str.replace(\"/\", \"-\")\n    date_str = date_str.replace(\" \", \"-\")\n    date_str = date_str.replace(\":\", \"-\")\n    date_str = date_str.replace(\".\", \"-\")\n    date_str = date_str.replace(\"-\", \"\")\n    date_str = date_str.replace(\"/\", \"\")\n    date_str = date_str.replace(\" \", \"\")\n    return date_str\n\nif __name__ == \"__main__\":\n    date = convert_date(\"20150301\")\n    print date",
    "class Solution(object):\n    def convertToIso(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        regex = re.compile('^(\\d{4})-(\\d{2})-(\\d{2})$')\n        match = regex.match(s)\n        if not match:\n            return s\n        day, month, year = match.groups()\n        day = int(day)\n        month = int(month)\n        year = int(year)\n        if day < 1 or month < 1 or year < 1:\n            return s\n        day = day if day <= 31 else 31\n        month = month if month <= 12 else 12\n        year = year if year <= 9999 else 9999\n        return str(day) + '-' + str(month) + '-' + str(year)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.convertToIso('20150505'))",
    "import re\n\ndef to_date(s):\n    return s[0:4] + \"-\" + s[4:6] + \"-\" + s[6:8]\n\ndef to_date_re(s):\n    return re.compile(\"^\\d{4}-\\d{2}-\\d{2}$\")\n\ndef test_to_date():\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert to_date(\"2018-01-01\") == \"01-01-2018\"\n    assert",
    "import re\n\ndef convert(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    pattern = re.compile(r\"(\\d{4})(\\d{1,2})(\\d{1,2})\")\n    match = pattern.match(date)\n    if match:\n        return \"%s-%s-%s\" % (match.group(3), match.group(2), match.group(1))\n    else:\n        return \"Unknown Date\"\n\nif __name__ == '__main__':\n    print convert(\"2017-01-01\")\n    print convert(\"2017-01-31\")\n    print convert(\"2017-01-31\")\n    print convert(\"2017-02-30\")\n    print convert(\"2017-02-30\")\n    print convert(\"2017-02-29\")\n    print convert(\"2017-02-29\")\n    print convert(\"2017-02-28\")\n    print convert(\"2017-02-28\")",
    "import re\n\n\ndef to_date(s):\n    return s.replace('-', '')\n\n\ndef to_date_with_re(s):\n    return re.sub(r'[-]','', s.replace('-', ''))\n\n\ndef main():\n    print(to_date('20150327'))\n    print(to_date('20150327 23:59:59'))\n    print(to_date('20150327 23:59:59.123'))\n\n    print(to_date_with_re('20150327'))\n    print(to_date_with_re('20150327 23:59:59'))\n    print(to_date_with_re('20150327 23:59:59.123'))\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import namedtuple\n\n# Your code here\n\nclass Date:\n    def __init__(self, month, day, year):\n        self.month = month\n        self.day = day\n        self.year = year\n\n    def __str__(self):\n        return \"%d-%02d-%d\" % (self.year, self.month, self.day)\n\ndef convert_date(date):\n    \"\"\"\n    :type date: str\n    :rtype: Date\n    \"\"\"\n    month = int(date[6:8])\n    day = int(date[4:6])\n    year = int(date[0:4])\n    return Date(month, day, year)\n\ndef convert_date_regex(date):\n    \"\"\"\n    :type date: str\n    :rtype: Date\n    \"\"\"\n    return Date(date[6:8], date[4:6], date[0:4])\n\n# Your code here\n\nif __name__ == \"__main__\":\n    date = \"20-03-01\"\n    print convert_date_regex(date)\n    date = \"02-02-19\"\n    print convert_date_regex(date)",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[0:10] + s[11:20] + s[21:]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convertToDate(\"200-11-11\")",
    "class Solution(object):\n    def convertToYear(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        d = {\n            '0': 0,\n            '1': 1,\n            '2': 2,\n            '3': 3,\n            '4': 4,\n            '5': 5,\n            '6': 6,\n            '7': 7,\n            '8': 8,\n            '9': 9,\n            'A': 10,\n            'B': 11,\n            'C': 12,\n            'D': 13,\n            'E': 14,\n            'F': 15,\n            'a': 10,\n            'b': 11,\n            'c': 12,\n            'd': 13,\n            'e': 14,\n            'f': 15,\n        }\n        n = len(s)\n        if n < 4:\n            return s\n        if s[n - 4] not in d:\n            return s\n        if s[n - 3] not in d:\n            return s\n        if s[n - 2] not in d:\n            return s\n        if s[n - 1] not in d:\n            return s\n        year = d[s[n - 4]] * 1000 + d[s[n - 3]] * 100 + d[s[n - 2]] * 10 + d[s[n - 1]]\n        return '{:04d}-{:02d}-{:02d}'.format(year, d[s[n - 4]], d[s[n - 3]])\n\nif __name__ == \"__main__\":\n    assert Solution().convertToYear('2000-02-29') == '2000-02-29'\n    assert Solution().convertToYear('2000-02-29') == '2000-02-29'",
    "import re\n\ndef convert(date):\n    m = re.match(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)', date)\n    if m is None:\n        return None\n    d = m.group(1)\n    m = re.match(r'(\\d\\d)-(\\d\\d)-(\\d\\d)', d)\n    if m is None:\n        return None\n    return m.group(1) + \"-\" + m.group(2) + \"-\" + m.group(3)\n\nif __name__ == '__main__':\n    print convert(\"2015-11-01\")",
    "import re\n\n\ndef date_to_date(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    date = date.split(\"-\")\n    return date[2] + \"-\" + date[1] + \"-\" + date[0]\n\n\ndef date_to_date_re(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r\"[^0-9]\", \"\", date)\n\n\ndef main():\n    # these are the test cases I got from the book\n    # \"Python Cookbook\" by Michael Laudati\n    # http://www.oreilly.com/catalog/python/ch05.html\n    # date = \"20130207\"\n    # date = \"20130207-15\"\n    # date = \"20130207-15:30\"\n    # date = \"20130207-1530\"\n    # date = \"20130207-1530:30\"\n    # date = \"20130207-153030\"\n    # date = \"20130207-153030:30\"\n    date = \"20130207-153030:30\"\n    print date_to_date(date)\n    print date_to_date_re(date)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def convert_date(date):\n    \"\"\"\n    date: string, date of yyyy-mm-dd format\n    return: string, date of dd-mm-yyyy format\n    \"\"\"\n    # date = '20140201'\n    # date = '20140202'\n    # date = '20140203'\n    # date = '20140204'\n    # date = '20140205'\n    # date = '20140206'\n    # date = '20140207'\n    # date = '20140208'\n    # date = '20140209'\n    # date = '20140210'\n    # date = '20140211'\n    # date = '20140212'\n    # date = '20140213'\n    # date = '20140214'\n    # date = '20140215'\n    # date = '20140216'\n    # date = '20140217'\n    # date = '20140218'\n    # date = '20140219'\n    # date = '20140220'\n    # date = '20140221'\n    # date = '20140222'\n    # date = '20140223'\n    # date = '20140224'\n    # date = '20140225'\n    # date = '20140226'\n    # date = '20140227'\n    # date = '20140228'\n    # date = '20140229'\n    # date = '20140230'\n    # date = '20140231'\n    # date = '20140232'\n    # date = '20140233'\n    # date = '20140234'\n    # date = '20140235'\n    # date = '20140236'\n    # date = '20140237'\n    # date = '20140238'\n    # date = '20140239'\n    # date = '20140240'\n    # date = '20140241'\n    # date = '20140242'\n    # date = '20140243'\n    # date = '20140244'\n    # date = '20140245'\n    # date = '20140246'\n    # date = '201",
    "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\d{4}-\\d{2}-\\d{2}', r'\\d{2}-\\d{2}-\\d{4}', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convert(\"2015-03-30\")",
    "class Solution(object):\n    def convertToValidFormat(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if len(str)!= 14:\n            return str\n        if str[:4]!= \"20\":\n            return str\n        if str[4:7]!= \"01\" or str[7:9]!= \"01\":\n            return str\n        if str[9:11]!= \"02\":\n            return str\n        if str[11:13]!= \"29\":\n            return str\n        return str[0:4] + \"-\" + str[5:7] + \"-\" + str[8:11]",
    "import re\nimport datetime\n\ndef convert_date(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    y, m, d = date.split(\"-\")\n    return \"{0}-{1}-{2}\".format(d, m, y)\n\ndef main():\n    date = input(\"Please enter date: \")\n    date = convert_date(date)\n    print(date)\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.w3resource.com/python/regex/\n# https://www.w3resource.com/python/regex/regular-expression-tutorial/\n\ndef convert_date(date):\n    # match the date with regex\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", date)\n    # if no match found, return -1\n    if match is None:\n        return -1\n    # return the date in dd-mm-yyyy format\n    return \"{}-{}-{}\".format(match.group(2), match.group(3), match.group(1))\n\n# test cases\ndate = '2018-10-10'\ndate = '2018-02-01'\ndate = '2018-10-10'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'\ndate = '2018-01-01'",
    "# https://www.codeeval.com/open_challenges/141/\n\nimport re\n\ndef convert(date):\n    return date.replace(\"-\", \" \").replace(\"/\", \" \").replace(\" \", \"\").replace(\"-\", \"-\").replace(\"/\", \"/\")\n\n# Test Cases\n#print(convert(\"2016-06-06\"))\n#print(convert(\"2016-06-06 22:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00\"))\n#print(convert(\"2016-06-06 22:00:00",
    "# https://www.hackerrank.com/challenges/date-conversion/problem\nimport re\n\ndef convert_date(date):\n    # Your code here\n    month = re.search('^(0?[1-9]|1[0-2])', date)\n    day = re.search('^(0?[1-9]|[12]\\d|3[01]|[12]\\d|4[01]|5[01]|6[01]|7[01]|8[01]|9[01]|10[01]|11[01])', date)\n    year = re.search('^(20[0-9]{2}|19[0-9]{2})', date)\n    \n    if month:\n        month = month.group(0)\n    else:\n        month = \"0\"\n    \n    if day:\n        day = day.group(0)\n    else:\n        day = \"0\"\n    \n    if year:\n        year = year.group(0)\n    else:\n        year = \"0\"\n    \n    return month + day + year",
    "import re\nimport time\nimport datetime\n\n\ndef to_yyyy_mm_dd(date_str):\n    if not isinstance(date_str, str):\n        return None\n    if not date_str.startswith('20') and not date_str.startswith('19'):\n        return None\n    year = int(date_str[2:4])\n    month = int(date_str[4:6])\n    day = int(date_str[6:8])\n    return year * 100 + month * 10 + day\n\n\ndef to_dd_mm_yyyy(date_str):\n    if not isinstance(date_str, str):\n        return None\n    if not date_str.startswith('20') and not date_str.startswith('19'):\n        return None\n    year = int(date_str[6:8])\n    month = int(date_str[4:6])\n    day = int(date_str[2:4])\n    return day * 100 + month * 10 + year\n\n\ndef convert_date(date_str):\n    if not isinstance(date_str, str):\n        return None\n    if not date_str.startswith('20') and not date_str.startswith('19'):\n        return None\n    year = int(date_str[2:4])\n    month = int(date_str[4:6])\n    day = int(date_str[6:8])\n    return datetime.datetime(year, month, day)\n\n\ndef convert_date_to_yyyy_mm_dd(date):\n    if not isinstance(date, datetime.datetime):\n        return None\n    year = date.year\n    month = date.month\n    day = date.day\n    return '{:04d}-{:02d}-{:02d}'.format(year, month, day)\n\n\ndef convert_date_to_dd_mm_yyyy(date):\n    if not isinstance(date, datetime.datetime):\n        return None\n    year = date.year\n    month = date.month\n    day = date.day\n    return '",
    "from collections import namedtuple\nimport re\n\n\nclass Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", s)\n        if match:\n            return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n        else:\n            return ''\n\n\nif __name__ == '__main__':\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004', 'expected 11-04-2004'\n    assert Solution().convert('2004-05-11') == '11-04-2004',",
    "class Solution(object):\n    def convertToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # step 1: split the string\n        string = str(num)\n        string = string.split('-')\n        # step 2: calculate the length\n        length = len(string)\n        # step 3: use regex to get the number\n        regex = r'^[MDCLXVI]'\n        regex = re.compile(regex)\n        # step 4: use the regex to get the result\n        result = regex.sub(lambda m: \"MDCLXVI\"[m.group() - 1], string[0])\n        for i in range(1, length):\n            result += \"MDCLXVI\"\n            result += string[i]\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.convertToRoman(1))\n    print(s.convertToRoman(2))\n    print(s.convertToRoman(3))\n    print(s.convertToRoman(4))\n    print(s.convertToRoman(5))\n    print(s.convertToRoman(10))\n    print(s.convertToRoman(100))\n    print(s.convertToRoman(1000))\n    print(s.convertToRoman(5000))",
    "import re\n\ndef convert(date_str):\n    m = re.search(\"(\\d{4})-(\\d{2})-(\\d{2})\", date_str)\n    if m:\n        year = int(m.group(1))\n        month = int(m.group(2))\n        day = int(m.group(3))\n        return str(day) + '-' + str(month) + '-' + str(year)\n    else:\n        return \"Error\"\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert(\"2015-10-12\") == \"12-10-2015\", \"Simple conversion\"\n    assert convert(\"2015-10-12 12:12:12\") == \"12-10-2015 12:12:12\", \"Time conversion\"\n    assert convert(\"2015-10-12 12:12:12.123\") == \"12-10-2015 12:12:12.123\", \"Precision conversion\"\n    assert convert(\"2015-10-12 12:12:12.123456789\") == \"12-10-2015 12:12:12.123456789\", \"Long conversion\"",
    "import re\n\n# This regex is for yyyy-mm-dd\npattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n\n# This regex is for dd-mm-yyyy\npattern2 = r\"(\\d{2})-(\\d{2})-(\\d{4})\"\n\n\ndef convert_to_date(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(pattern, r\"\\1-\\2-\\3\", s)\n\n\ndef convert_to_date2(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(pattern2, r\"\\1-\\2-\\3\", s)\n\n\nif __name__ == \"__main__\":\n    print(convert_to_date(\"2014-12-22\"))\n    print(convert_to_date2(\"22-12-2014\"))\n    print(convert_to_date2(\"22-12-2014\"))",
    "import re\n\n\nclass Solution:\n    def convertToRoman(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        roman = [\n            ('M', 1000),\n            ('CM', 900),\n            ('D', 500),\n            ('CD', 400),\n            ('C', 100),\n            ('XC', 90),\n            ('L', 50),\n            ('XL', 40),\n            ('X', 10),\n            ('IX', 9),\n            ('V', 5),\n            ('IV', 4),\n            ('I', 1)\n        ]\n        roman_str = ''\n        for num in roman:\n            while s >= num[1]:\n                roman_str += num[0]\n                s -= num[1]\n        return roman_str\n\n\nif __name__ == '__main__':\n    assert Solution().convertToRoman('1000') == 'MDCCCLXXXVIII', '1000'\n    assert Solution().convertToRoman('4') == 'IV', '4'\n    assert Solution().convertToRoman('1') == 'I', '1'\n    assert Solution().convertToRoman('0') == '', '0'\n    assert Solution().convertToRoman('2') == 'II', '2'\n    assert Solution().convertToRoman('9') == 'IX', '9'\n    assert Solution().convertToRoman('10') == 'X', '10'\n    assert Solution().convertToRoman('11') == 'XI', '11'\n    assert Solution().convertToRoman('20') == 'XX', '20'\n    assert Solution().convertToRoman('30') == 'XXX', '30'\n    assert Solution().convertToRoman('50') == 'XL', '50'\n    assert Solution().convertToRoman('60') == 'L', '60'\n    assert Solution().convertToRoman('70') == 'XC', '70'\n    assert Solution().convertToRoman('80') == 'C', '80'\n    assert Solution().convertToRoman('90') == 'X', '90'\n    assert Solution().convertToRoman('100') == 'C', '100'\n    assert",
    "class Solution(object):\n    def convertToValidDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        m = re.match(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)', s)\n        if m is not None:\n            return \"%s-%s-%s\" % (m.group(1), m.group(2), m.group(3))\n        return None\n\nif __name__ == \"__main__\":\n    print Solution().convertToValidDate(\"2015-09-22\")",
    "import re\n\n\nclass Solution(object):\n    def convertToRoman(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile('(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?)(?:(CM|CD|D?C?",
    "# https://www.youtube.com/watch?v=c-LzG3_6JKg\n\ndef convert_date(date):\n    date_str = date.split('-')\n    date_str.reverse()\n    date_str = ''.join(date_str)\n    date_str = date_str[2:] + date_str[0:2]\n    return date_str\n\ndef main():\n    date_str = '2014-11-11'\n    date = convert_date(date_str)\n    print date\n    \n    date_str = '2014-11-11'\n    date = convert_date(date_str)\n    print date\n    \n    date_str = '2014-11-11'\n    date = convert_date(date_str)\n    print date\n    \n    date_str = '2014-11-11'\n    date = convert_date(date_str)\n    print date\n    \n    date_str = '2014-11-11'\n    date = convert_date(date_str)\n    print date\n\nif __name__ == '__main__':\n    main()",
    "class Solution:\n    # @param date, a string\n    # @return a string\n    def convert(self, date):\n        month_re = r'(0[1-9]|[12]\\d|3[01]|[0-2]\\d)'\n        day_re = r'(0[1-9]|[1-2]\\d|[3-9]\\d|[1-9]\\d|[12]\\d|3[01]|[0-2]\\d)'\n        year_re = r'\\d{4}'\n        date_re = r'(0[1-9]|1[012])(0[1-9]|[1-9]\\d|[12]\\d|3[01]|[0-2]\\d)'\n        date = date.strip()\n        if date == '':\n            return ''\n        year = int(date[0:4])\n        month = int(date[5:7])\n        day = int(date[8:10])\n        return \"%d-%d-%d\" % (day, month, year)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convert('2015-06-05')",
    "class Solution:\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        match = re.match(r\"^(\\d{4})(\\d{2})(\\d{2})$\", s)\n        if match:\n            y, m, d = match.groups()\n            d = int(d)\n            m = int(m)\n            y = int(y)\n            if m < 10:\n                m = '0' + str(m)\n            if d < 10:\n                d = '0' + str(d)\n            return \"{}-{}-{}\".format(d, m, y)\n        return None\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))\n    print(s.convertToDate(\"2014-12-21\"))",
    "class Solution(object):\n    def convertToYear(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        re = r\"(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})$\"\n        m = re.match(s)\n        if m:\n            return \"%s-%s-%s\" % (m.group('year'), m.group('month'), m.group('day'))\n        else:\n            return s\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convertToYear(\"2014-2-13\"))\n    print(sol.convertToYear(\"2014-02-13\"))\n    print(sol.convertToYear(\"2014-2-13\"))\n    print(sol.convertToYear(\"2014-02-13\"))\n    print(sol.convertToYear(\"2014-02-13\"))",
    "import re\n\ndef convert_date(date):\n    # write your code here\n    if date:\n        date = date.strip()\n        if date:\n            date = date.split('-')\n            date = [int(i) for i in date]\n            date = '{0:02d}-{1:02d}-{2:04d}'.format(*date)\n            return date\n    return None\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_date('01-01-2017') == '01-01-2017', \"Day\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Month\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Year\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Full Date\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Full Date\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Full Date\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Full Date\"\n    assert convert_date('2017-01-01') == '01-01-2017', \"Full Date\"\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/date-to-date/discuss/87321/Java-Python-Regex-Solution\n\nclass Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'^(.*)(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$', r'\\3 \\4 \\5', s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.convertToDate(\"1999-12-31\"))\n    print(s.convertToDate(\"12-31-1999\"))\n    print(s.convertToDate(\"1999-12-31 12:00\"))\n    print(s.convertToDate(\"12-31-1999 12:00\"))\n    print(s.convertToDate(\"12-31-1999 12:00:00\"))",
    "import re\n\n\nclass Solution(object):\n    def convertToIso(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n        return regex.sub('-', s)\n\n\ndef main():\n    solution = Solution()\n    s = '20150210'\n    print solution.convertToIso(s)\n\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/date-conversion/problem\n\ndef convert(date):\n    return '%d-%d-%d' % (date[0], date[1], date[2])\n\n\nif __name__ == '__main__':\n    date = input().split()\n    date = [int(x) for x in date]\n    print(convert(date))",
    "# Write your code here\ndef convert_date(date):\n    # your code here\n    return date[0] + date[2] + date[5]\n\nif __name__ == '__main__':\n    # test_data = (\"1993-09-04\", \"1993-09-04\")\n    test_data = (\"1993-09-04\", \"1993-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_data = (\"2093-09-04\", \"2093-09-04\")\n    test_",
    "import re\n\n\nclass Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\d+', lambda x: '-', s)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convertToDate(\"2017-07-04\"))",
    "class Solution(object):\n    def convertToDate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        re = r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})'\n        return re.sub(r'(?P<month>\\d{2})-(?P<day>\\d{2})-(?P<year>\\d{4})', s, re)\n\nif __name__ == \"__main__\":\n    print Solution().convertToDate(\"199-1-1\")",
    "import re\n\ndef to_dd_mm_yyyy(date):\n    pattern = '\\d{2}-\\d{2}-\\d{4}'\n    matches = re.search(pattern, date)\n    if matches:\n        return matches.group(0)\n    else:\n        return None\n\ndef test():\n    assert(to_dd_mm_yyyy('01-01-2015') == '01-01-2015')\n    assert(to_dd_mm_yyyy('01-01-2015') == '01-01-2015')\n    assert(to_dd_mm_yyyy('2015-01-01') == '01-01-2015')\n    assert(to_dd_mm_yyyy('01-01-2015') == '01-01-2015')\n    assert(to_dd_mm_yyyy('2015-01-01') == '01-01-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')\n    assert(to_dd_mm_yyyy('2015-02-29') == '02-29-2015')",
    "import re\n\ndef convert_date(date):\n    return re.sub(r'[-/]', '-', date)\n\n\ndef main():\n    date = input()\n    print(convert_date(date))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def convertToOldFormat(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[0:10] + s[11:17] + s[18:26]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.convertToOldFormat(\"2019101\")\n    print s.convertToOldFormat(\"2016-01-01\")"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}