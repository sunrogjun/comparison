{
  "problem": {
    "task_id": "MBPP/135",
    "prompt": "Write a function to find the nth hexagonal number.",
    "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
    "test_list": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ],
    "challenge_test_list": [],
    "problem_id": 124
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import unittest\n\n\nclass Solution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(find_hex(6), 16)\n        self.assertEqual(find_hex(0), 0)\n        self.assertEqual(find_hex(1), 1)\n        self.assertEqual(find_hex(2), 4)\n        self.assertEqual(find_hex(3), 9)\n        self.assertEqual(find_hex(4), 16)\n        self.assertEqual(find_hex(5), 25)\n        self.assertEqual(find_hex(6), 36)\n        self.assertEqual(find_hex(7), 49)\n        self.assertEqual(find_hex(8), 64)\n        self.assertEqual(find_hex(9), 81)\n        self.assertEqual(find_hex(10), 100)\n        self.assertEqual(find_hex(11), 121)\n        self.assertEqual(find_hex(12), 144)\n        self.assertEqual(find_hex(13), 169)\n        self.assertEqual(find_hex(14), 196)\n        self.assertEqual(find_hex(15), 225)\n        self.assertEqual(find_hex(16), 256)\n        self.assertEqual(find_hex(17), 289)\n        self.assertEqual(find_hex(18), 324)\n        self.assertEqual(find_hex(19), 359)\n        self.assertEqual(find_hex(20), 384)\n        self.assertEqual(find_hex(21), 423)\n        self.assertEqual(find_hex(22), 458)\n        self.assertEqual(find_hex(23), 487)\n        self.assertEqual(find_hex(24), 516)\n        self.assertEqual(find_hex(25), 545)\n        self.assertEqual(find_hex(26), 583)\n        self.assertEqual(find_hex(27), 612)\n        self.assertEqual(find_hex(28), 641)",
    "import math\n\ndef hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (3 * n - 1) + 1) / 2\n\n\nif __name__ == '__main__':\n    print hexagon_nth(1)\n    print hexagon_nth(2)\n    print hexagon_nth(3)\n    print hexagon_nth(4)\n    print hexagon_nth(5)\n    print hexagon_nth(6)",
    "def hexagon_n(n):\n    return (n * (3 * n - 1) * (2 * n - 1) + 1) / 2\n\n# Note:\n# 1 <= n <= 9\n\nif __name__ == \"__main__\":\n    for n in range(1, 10):\n        print(hexagon_n(n))",
    "from math import sqrt\n\ndef hexagon_nth(n):\n    return n*(3*n - 1)/2\n\ndef test(n):\n    assert hexagon_nth(1) == 1\n    assert hexagon_nth(2) == 6\n    assert hexagon_nth(3) == 15\n    assert hexagon_nth(4) == 36\n    assert hexagon_nth(5) == 105\n    assert hexagon_nth(6) == 364\n    assert hexagon_nth(7) == 1035\n    assert hexagon_nth(8) == 3796\n    assert hexagon_nth(9) == 15936\n    assert hexagon_nth(10) == 39640\n\nif __name__ == '__main__':\n    test(1)\n    test(2)\n    test(3)\n    test(4)\n    test(5)\n    test(6)\n    test(7)\n    test(8)\n    test(9)\n    test(10)\n    test(11)\n    test(12)\n    test(13)\n    test(14)\n    test(15)\n    test(16)\n    test(17)\n    test(18)\n    test(19)\n    test(20)\n    test(21)\n    test(22)\n    test(23)\n    test(24)\n    test(25)\n    test(26)\n    test(27)\n    test(28)\n    test(29)\n    test(30)\n    test(31)\n    test(32)\n    test(33)\n    test(34)\n    test(35)\n    test(36)\n    test(37)\n    test(38)\n    test(39)\n    test(40)\n    test(41)\n    test(42)\n    test(43)\n    test(44)\n    test(45)\n    test(46)\n    test(47)\n    test(48)\n    test(49)\n    test(50)\n    test(51)\n    test(52)\n    test(53)\n    test(54)\n    test(55",
    "def hexagon_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 12\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 20\n    elif n == 7:\n        return 24\n    elif n == 8:\n        return 32\n    elif n == 9:\n        return 36\n    else:\n        return hexagon_n(n - 1) + hexagon_n(n - 2)\n\nif __name__ == '__main__':\n    print(hexagon_n(10))",
    "# http://stackoverflow.com/a/20990964/222892\ndef hexagonal_number(n):\n    return (n*(3*n-1))//2\n\n# Test Cases\nprint hexagonal_number(0)\nprint hexagonal_number(1)\nprint hexagonal_number(2)\nprint hexagonal_number(3)\nprint hexagonal_number(4)\nprint hexagonal_number(5)\nprint hexagonal_number(6)\nprint hexagonal_number(7)\nprint hexagonal_number(8)",
    "import time\nstart_time = time.time()\n\ndef hexagon(n):\n    return n * (3 * n - 1) / 2\n\nprint hexagon(10)\nprint hexagon(100)\n\nelapsed_time = time.time() - start_time\nprint 'Run time...', elapsed_time,'seconds'",
    "def hex(n):\n  return (n*(3*n-1) + n)/2\n\nif __name__ == '__main__':\n  assert hex(0) == 0\n  assert hex(1) == 1\n  assert hex(2) == 3\n  assert hex(3) == 7\n  assert hex(4) == 15\n  assert hex(5) == 31\n  assert hex(6) == 63\n  assert hex(7) == 127\n  assert hex(8) == 255\n  assert hex(9) == 511\n  assert hex(10) == 1023\n  assert hex(11) == 2047\n  assert hex(12) == 4095\n  assert hex(13) == 8191\n  assert hex(14) == 16383\n  assert hex(15) == 32767\n  assert hex(16) == 65535\n  assert hex(17) == 131071\n  assert hex(18) == 262143\n  assert hex(19) == 524287\n  assert hex(20) == 1048575\n  assert hex(21) == 2097151\n  assert hex(22) == 4194303\n  assert hex(23) == 8388607\n  assert hex(24) == 16777215\n  assert hex(25) == 33554431\n  assert hex(26) == 67108863\n  assert hex(27) == 134217727\n  assert hex(28) == 268435455\n  assert hex(29) == 536870911\n  assert hex(30) == 1073741823\n  assert hex(31) == 2147483647\n  assert hex(32) == 4294967295\n  assert hex(33) == 858993459\n  assert hex(34) == 17179869183\n  assert hex(35) == 340282366920938463463374607431768211456\n  assert hex(36) == 690821988072191059746038753432430734593601\n  assert hex(37) == 134217728072191059746038753432430734593601\n  assert hex(38) == 2684354519085208010615725097156586",
    "def hexagon_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return hexagon_n_1(n) + hexagon_n_2(n) - hexagon_n_3(n)\n\n\ndef hexagon_n_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3 * n - 1) / 2\n\n\ndef hexagon_n_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (2 * n - 1) / 2\n\n\ndef hexagon_n_3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3 * n - 2) / 2\n\n\nif __name__ == '__main__':\n    assert hexagon_n(2) == 8\n    assert hexagon_n(3) == 15\n    assert hexagon_n(4) == 24",
    "# Definition for a hexagonal number.\n# class HexagonalNumber(object):\n#     def __init__(self, n):\n#         self.n = n\n\n# TODO:\n# 1. Add the case when n is even.\n# 2. Add the case when n is odd.\n\nclass Solution(object):\n    def hexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        \n        # if n is even, find the hexagonal number of the even number\n        if n % 2 == 0:\n            return self.hexagonalNumber(n // 2)\n        \n        # if n is odd, find the hexagonal number of the even number\n        else:\n            return (n + 1) * (n + 1) // 2",
    "from math import sqrt\n\ndef hex(n):\n    '''\n    n is a positive integer.\n    Return the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    if n == 4:\n        return 12\n    if n == 5:\n        return 16\n    if n == 6:\n        return 20\n    if n == 7:\n        return 24\n    if n == 8:\n        return 32\n    if n == 9:\n        return 36\n    if n == 10:\n        return 40\n    if n == 11:\n        return 45\n    if n == 12:\n        return 48\n    if n == 13:\n        return 50\n    if n == 14:\n        return 52\n    if n == 15:\n        return 56\n    if n == 16:\n        return 60\n    if n == 17:\n        return 64\n    if n == 18:\n        return 72\n    if n == 19:\n        return 80\n    if n == 20:\n        return 96\n    if n == 21:\n        return 100\n    if n == 22:\n        return 108\n    if n == 23:\n        return 120\n    if n == 24:\n        return 144\n    if n == 25:\n        return 160\n    if n == 26:\n        return 176\n    if n == 27:\n        return 192\n    if n == 28:\n        return 208\n    if n == 29:\n        return 224\n    if n == 30:\n        return 240\n    if n == 31:\n        return 256\n    if n == 32:\n        return 288\n    if n == 33:\n        return 320\n    if n == 34:\n        return 352\n    if n == 35:\n        return 384\n    if n == 36:\n        return 416\n    if n == 37:\n        return 448\n    if n == 38:\n        return 480\n    if n == 39:\n        return 512\n    if n == 40:\n        return 544\n    if n == 41:\n        return 576\n    if n == 42:",
    "def hex(n):\n    \"\"\"\n    n: int\n    return: int\n    \"\"\"\n    return (n*(3*n+1))/2\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print hex(i)",
    "from euler import *\n\ndef hexagonal_nth(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return hexagonal_sum(n)\n\nif __name__ == \"__main__\":\n    print hexagonal_nth(1)\n    print hexagonal_nth(2)\n    print hexagonal_nth(3)\n    print hexagonal_nth(4)\n    print hexagonal_nth(5)\n    print hexagonal_nth(6)\n    print hexagonal_nth(7)\n    print hexagonal_nth(8)\n    print hexagonal_nth(9)\n    print hexagonal_nth(10)\n    print hexagonal_nth(11)\n    print hexagonal_nth(12)\n    print hexagonal_nth(13)\n    print hexagonal_nth(14)\n    print hexagonal_nth(15)\n    print hexagonal_nth(16)\n    print hexagonal_nth(17)\n    print hexagonal_nth(18)\n    print hexagonal_nth(19)\n    print hexagonal_nth(20)\n    print hexagonal_nth(21)\n    print hexagonal_nth(22)\n    print hexagonal_nth(23)\n    print hexagonal_nth(24)\n    print hexagonal_nth(25)\n    print hexagonal_nth(26)\n    print hexagonal_nth(27)\n    print hexagonal_nth(28)\n    print hexagonal_nth(29)\n    print hexagonal_nth(30)\n    print hexagonal_nth(31)\n    print hexagonal_nth(32)\n    print hexagonal_nth(33)\n    print hexagonal_nth(34)\n    print hexagonal_nth(35)\n    print hexagonal_nth(36)\n    print hexagonal_nth(37)\n    print hexagonal_nth(38)\n    print hexagonal_nth(39)\n    print hexagonal_nth(40)\n    print hexagonal_nth(41)\n    print hexagonal_",
    "import math\n\ndef hexagonal_nth(n):\n    if n < 1:\n        return None\n    num = 0\n    while n > 0:\n        num += (n - 1) * (n + 1) / 2\n        n -= 1\n    return num\n\n\ndef main():\n    print hexagonal_nth(1)\n    print hexagonal_nth(2)\n    print hexagonal_nth(3)\n    print hexagonal_nth(4)\n    print hexagonal_nth(5)\n    print hexagonal_nth(6)\n    print hexagonal_nth(7)\n    print hexagonal_nth(8)\n    print hexagonal_nth(9)\n    print hexagonal_nth(10)\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a hexagonal number.\n# class HexagonalNumber(object):\n#     def __init__(self, num):\n#         self.num = num\n#         self.nth = num\n\nclass Solution(object):\n    def hexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.__hexagonal_number(n)\n\n    def __hexagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 7\n        if n == 4:\n            return 12\n        if n == 5:\n            return 20\n        if n == 6:\n            return 30\n        if n == 7:\n            return 40\n        if n == 8:\n            return 50\n        if n == 9:\n            return 60\n        if n == 10:\n            return 70\n        if n == 11:\n            return 80\n        if n == 12:\n            return 90\n        if n == 13:\n            return 100\n        if n == 14:\n            return 110\n        if n == 15:\n            return 120\n        if n == 16:\n            return 130\n        if n == 17:\n            return 140\n        if n == 18:\n            return 150\n        if n == 19:\n            return 160\n        if n == 20:\n            return 170\n        if n == 21:\n            return 180\n        if n == 22:\n            return 190\n        if n == 23:\n            return 200\n        if n == 24:\n            return 210\n        if n == 25:\n            return 220\n        if n == 26:\n            return 230\n        if n == 27:\n            return 240\n        if n == 28:\n            return 250\n        if n == 29:\n            return 260\n        if n == 30:\n            return 270\n        if n == 31:\n            return 280\n        if n == 32:\n            return 290\n        if n == 33:\n            return 300\n        if n == 34:\n            return 310\n        if n == 35:",
    "from math import sqrt\n\n\ndef hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a = sqrt(3)\n    b = sqrt(8)\n    return int((a + b) * (a + b) / 2 + n * (n + 1) / 2)",
    "# https://www.youtube.com/watch?v=jNq1cZ8lGg4\n\ndef hexagonal_number(n):\n    \"\"\"\n    n is an integer\n    returns the nth hexagonal number\n    \"\"\"\n    hexagonal_number_sum = 0\n    for i in range(1, n):\n        hexagonal_number_sum += (i**2) + (i - 1)\n    return hexagonal_number_sum\n\nif __name__ == '__main__':\n    assert hexagonal_number(1) == 1\n    assert hexagonal_number(2) == 3\n    assert hexagonal_number(3) == 15\n    assert hexagonal_number(4) == 55\n    assert hexagonal_number(5) == 271\n    assert hexagonal_number(6) == 1265\n    assert hexagonal_number(7) == 6145\n    assert hexagonal_number(8) == 36275\n    assert hexagonal_number(9) == 182611\n    assert hexagonal_number(10) == 1039575\n    assert hexagonal_number(11) == 5597565\n    assert hexagonal_number(12) == 29375975\n    assert hexagonal_number(13) == 171875275\n    assert hexagonal_number(14) == 1069755325\n    assert hexagonal_number(15) == 6297555125\n    assert hexagonal_number(16) == 329755512525\n    assert hexagonal_number(17) == 1809375575125\n    assert hexagonal_number(18) == 103937557512525\n    assert hexagonal_number(19) == 55937557512512525\n    assert hexagonal_number(20) == 293755755512512525\n    assert hexagonal_number(21) == 17183755755512512525\n    assert hexagonal_number(22) == 10693755755512512525\n    assert hexagonal_number(23) == 629375575551251252525\n    assert hexagonal_number(24) == 32937557555125125252525\n    assert hexagonal_number(25) == 18093755755512512525252525\n    assert hexagonal",
    "import math\n\ndef nthhexagon(n):\n    \"\"\"\n    >>> nthhexagon(1)\n    16\n    >>> nthhexagon(2)\n    32\n    >>> nthhexagon(3)\n    48\n    >>> nthhexagon(4)\n    64\n    >>> nthhexagon(5)\n    80\n    >>> nthhexagon(6)\n    96\n    >>> nthhexagon(7)\n    112\n    >>> nthhexagon(8)\n    128\n    >>> nthhexagon(9)\n    144\n    >>> nthhexagon(10)\n    160\n    \"\"\"\n    return math.sqrt(n)**3 - math.sqrt(n) + 1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import math\n\ndef hexagon_n(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 21\n    elif n == 5:\n        return 30\n    else:\n        return hexagon_n(n-1) + hexagon_n(n-2) + hexagon_n(n-3) + hexagon_n(n-4) + hexagon_n(n-5)\n\nif __name__ == '__main__':\n    print hexagon_n(6)",
    "def hexagon_nth(n):\n    return (n + 1) * (n + 1) / 2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(hexagon_nth(n))",
    "from math import sqrt\nfrom itertools import count\n\ndef hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(map(int, str(n * sqrt(i) + (i - 1) * (i + 1) / 2)))\n\nif __name__ == '__main__':\n    print hexagonal_number(1)\n    print hexagonal_number(2)\n    print hexagonal_number(3)\n    print hexagonal_number(4)\n    print hexagonal_number(5)\n    print hexagonal_number(6)\n    print hexagonal_number(7)\n    print hexagonal_number(8)\n    print hexagonal_number(9)",
    "import math\n\ndef hexagon_nth(n):\n    \"\"\"\n    n: the nth hexagonal number\n    return: the hexagonal number\n    \"\"\"\n    return hexagon_nth_recursive(n, 1)\n\ndef hexagon_nth_recursive(n, base):\n    \"\"\"\n    n: the nth hexagonal number\n    base: the base of hexagonal numbers\n    return: the hexagonal number\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return base\n    elif n % 2 == 0:\n        return hexagon_nth_recursive(n // 2, base * base)\n    else:\n        return hexagon_nth_recursive(n // 2, base * base) * base\n\nif __name__ == '__main__':\n    print hexagon_nth(100)",
    "import math\n\n\ndef hexagon_nth(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    :param n: the number of hexagonal numbers to find\n    :return: the hexagonal number\n    \"\"\"\n    return math.sqrt(math.pow(2*n, 1.5))\n\n\nif __name__ == \"__main__\":\n    print(hexagon_nth(1))\n    print(hexagon_nth(2))\n    print(hexagon_nth(3))\n    print(hexagon_nth(4))\n    print(hexagon_nth(5))\n    print(hexagon_nth(6))\n    print(hexagon_nth(7))\n    print(hexagon_nth(8))\n    print(hexagon_nth(9))\n    print(hexagon_nth(10))\n    print(hexagon_nth(11))\n    print(hexagon_nth(12))",
    "from math import sqrt\n\n\ndef hexagonal(n):\n    \"\"\"\n    nth hexagonal number\n    :param n:\n    :return:\n    \"\"\"\n    return int(sqrt(n)) * 2 + 1\n\n\nif __name__ == \"__main__\":\n    assert hexagonal(10) == 55",
    "from __future__ import print_function\nfrom time import time\n\ndef hex(n):\n    return n*(3*n - 1)/2\n\ndef hex_n(n):\n    return hex(n) - 1\n\ndef hex_sum(n):\n    return hex(n) + hex_n(n)\n\ndef hex_n_sum(n):\n    return hex_sum(n) + hex_n(n)\n\ndef hex_n_sum_sum(n):\n    return hex_sum(n) + hex_n_sum(n)\n\ndef hex_n_sum_sum_sum(n):\n    return hex_n_sum_sum(n) + hex_n_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum(n) + hex_n_sum_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum_sum(n) + hex_n_sum_sum_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum_sum_sum(n) + hex_n_sum_sum_sum_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum_sum_sum_sum(n) + hex_n_sum_sum_sum_sum_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum_sum_sum_sum_sum(n) + hex_n_sum_sum_sum_sum_sum_sum_sum(n)\n\ndef hex_n_sum_sum_sum_sum_sum_sum_sum_sum_sum(n):\n    return hex_n_sum_sum_sum_sum_sum_sum_sum_sum(n) + hex_",
    "def hexagon_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 1 + n * (3 * n - 1) / 2\n\n\nif __name__ == '__main__':\n    print hexagon_number(1)\n    print hexagon_number(2)\n    print hexagon_number(3)\n    print hexagon_number(4)\n    print hexagon_number(5)\n    print hexagon_number(6)\n    print hexagon_number(7)\n    print hexagon_number(8)\n    print hexagon_number(9)\n    print hexagon_number(10)",
    "from math import sqrt\n\n\ndef hexagonal_number(n):\n    return (1 + sqrt(5)) * (n**2) / 2\n\nif __name__ == '__main__':\n    print hexagonal_number(2)\n    print hexagonal_number(3)\n    print hexagonal_number(4)\n    print hexagonal_number(5)\n    print hexagonal_number(6)\n    print hexagonal_number(7)\n    print hexagonal_number(8)\n    print hexagonal_number(9)\n    print hexagonal_number(10)\n    print hexagonal_number(11)",
    "from collections import defaultdict\nfrom functools import reduce\n\n\ndef hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number(n - 1) + hexagonal_number(n - 2)\n\n\ndef hexagonal_number_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number_2(n - 1) + hexagonal_number_2(n - 2)\n\n\ndef hexagonal_number_3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number_3(n - 1) + hexagonal_number_3(n - 2)\n\n\ndef hexagonal_number_4(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number_4(n - 1) + hexagonal_number_4(n - 2)\n\n\ndef hexagonal_number_5(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number_5(n - 1) + hexagonal_number_5(n - 2)\n\n\ndef hexagonal_number_6(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return hexagonal_number_6(n - 1) + hexagonal_number_6(n - 2)\n\n\ndef hexagonal_number_7(n):\n    \"\"\"\n    :type n: int\n    :",
    "import math\n\n\ndef hexagonal_nth(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    nth_hexagonal = int(math.floor(n / (math.sqrt(3) * 2)))\n    return (nth_hexagonal * (math.sqrt(3) * 2) + (n % (math.sqrt(3) * 2)))\n\n\nif __name__ == '__main__':\n    assert hexagonal_nth(1) == 1\n    assert hexagonal_nth(2) == 3\n    assert hexagonal_nth(3) == 5\n    assert hexagonal_nth(4) == 7\n    assert hexagonal_nth(5) == 11\n    assert hexagonal_nth(6) == 13\n    assert hexagonal_nth(7) == 17\n    assert hexagonal_nth(8) == 19\n    assert hexagonal_nth(9) == 23\n    assert hexagonal_nth(10) == 29\n    assert hexagonal_nth(11) == 31\n    assert hexagonal_nth(12) == 37\n    assert hexagonal_nth(13) == 41\n    assert hexagonal_nth(14) == 43\n    assert hexagonal_nth(15) == 47\n    assert hexagonal_nth(16) == 53\n    assert hexagonal_nth(17) == 59\n    assert hexagonal_nth(18) == 61\n    assert hexagonal_nth(19) == 67\n    assert hexagonal_nth(20) == 73\n    assert hexagonal_nth(21) == 79\n    assert hexagonal_nth(22) == 83\n    assert hexagonal_nth(23) == 89\n    assert hexagonal_nth(24) == 97\n    assert hexagonal_nth(25) == 101\n    assert hexagonal_nth(26) == 103\n    assert hexagonal_nth(27) == 107\n    assert hexagonal_nth(28) == 109\n    assert hexagonal_nth(29) == 113\n    assert hexagonal_nth(30) == 127\n    assert hexagonal_nth(31) == 131",
    "# http://www.tutorialspoint.com/math/math_functions/hexagonal_numbers.htm\n\ndef hexagonal_n(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # hexagonal numbers are the nth hexagonal number\n    # the number is the sum of the number of hexagons to the left\n    # and the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hexagons to the left of the number\n    # is equal to the number of hexagons to the right of the number\n    # the number of hexagons to the right of the number\n    # is equal to the number of hexagons to the left of the number\n    # the number of hex",
    "import math\n\ndef hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a, b = 1, 1\n    for i in range(1, n+1):\n        a, b = b, a*b\n    return a\n\nif __name__ == '__main__':\n    print hexagonal(2)\n    print hexagonal(3)\n    print hexagonal(4)\n    print hexagonal(5)\n    print hexagonal(6)\n    print hexagonal(7)\n    print hexagonal(8)\n    print hexagonal(9)\n    print hexagonal(10)\n    print hexagonal(11)",
    "# Definition for a hexagonal number.\nclass HexagonalNumber(object):\n    def __init__(self, number):\n        \"\"\"\n        :type number: int\n        \"\"\"\n        self.number = number\n\n    def __repr__(self):\n        return str(self.number)\n\nclass Solution(object):\n    def hexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: HexagonalNumber\n        \"\"\"\n        return HexagonalNumber(n*(n+1)//2)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.hexagonalNumber(5))\n    print(sol.hexagonalNumber(10))",
    "# The function should return the nth hexagonal number\n# n is represented as a string.\n\n# Hint:\n# The hexagonal numbers are generated by the formula:\n# hex(n) = hex(n/2) * 3 + hex(n/2)\n# For example, hex(3) = 9, hex(6) = 55.\n# Hint:\n# For calculating the hexagonal number, you can use the following formula:\n# hex(n) = hex(n/2) + hex(n/2) + hex(n/2)\n# For example, hex(4) = hex(2) + hex(2) + hex(2) = hex(6) = 55.\n\ndef hexagon(n):\n    return hex(n)\n\nif __name__ == '__main__':\n    assert hexagon(1) == \"1\", \"1\"\n    assert hexagon(2) == \"3\", \"2\"\n    assert hexagon(3) == \"7\", \"3\"\n    assert hexagon(4) == \"15\", \"4\"\n    assert hexagon(5) == \"31\", \"5\"\n    assert hexagon(6) == \"63\", \"6\"\n    assert hexagon(7) == \"127\", \"7\"\n    assert hexagon(8) == \"255\", \"8\"\n    assert hexagon(9) == \"511\", \"9\"\n    assert hexagon(10) == \"1023\", \"10\"\n    assert hexagon(11) == \"2045\", \"11\"\n    assert hexagon(12) == \"4087\", \"12\"\n    assert hexagon(13) == \"8191\", \"13\"\n    assert hexagon(14) == \"16383\", \"14\"\n    assert hexagon(15) == \"32767\", \"15\"",
    "from math import sqrt\n\n\ndef hexagonal_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (3 * n - 1) + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print hexagonal_n(4)",
    "def nthhex(n):\n    \"\"\"\n    nth hexagonal number\n    \"\"\"\n    if n < 0 or n > 100:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    if n == 3:\n        return 15\n    if n == 4:\n        return 36\n    if n == 5:\n        return 81\n    if n == 6:\n        return 162\n    if n == 7:\n        return 243\n    if n == 8:\n        return 324\n    if n == 9:\n        return 432\n    if n == 10:\n        return 486\n    if n == 11:\n        return 561\n    if n == 12:\n        return 648\n    if n == 13:\n        return 729\n    if n == 14:\n        return 810\n    if n == 15:\n        return 901\n    if n == 16:\n        return 1008\n    if n == 17:\n        return 1117\n    if n == 18:\n        return 1225\n    if n == 19:\n        return 1333\n    if n == 20:\n        return 1440\n    if n == 21:\n        return 1547\n    if n == 22:\n        return 1654\n    if n == 23:\n        return 1761\n    if n == 24:\n        return 1868\n    if n == 25:\n        return 1980\n    if n == 26:\n        return 2097\n    if n == 27:\n        return 2212\n    if n == 28:\n        return 2325\n    if n == 29:\n        return 2438\n    if n == 30:\n        return 2551\n    if n == 31:\n        return 2664\n    if n == 32:\n        return 2776\n    if n == 33:\n        return 2890\n    if n == 34:\n        return 3003\n    if n == 35:\n        return 3117\n    if n == 36:\n        return 3231\n    if n == 37:\n        return 3445\n    if n == 38:\n        return 3553\n    if n == 39:\n        return 3676\n    if n == 40:\n        return 3889\n    if n == 41",
    "# Definition for a hexagonal number.\n# class HexagonalNumber(object):\n#     def __init__(self, num):\n#         \"\"\"\n#         :type num: int\n#         \"\"\"\n#         self.num = num\n#\n#     def __str__(self):\n#         return str(self.num)\n#\n#\n# def hexagonal_number(n):\n#     \"\"\"\n#     :type n: int\n#     :rtype: HexagonalNumber\n#     \"\"\"\n#     return HexagonalNumber(n)\n\n# def hexagonal_number(n):\n#     if n == 0:\n#         return HexagonalNumber(0)\n#     elif n == 1:\n#         return HexagonalNumber(1)\n#     else:\n#         return hexagonal_number(n - 2) + hexagonal_number(n - 1)\n#\n# print hexagonal_number(1)\n# print hexagonal_number(2)\n# print hexagonal_number(3)\n# print hexagonal_number(4)\n# print hexagonal_number(5)\n# print hexagonal_number(6)\n# print hexagonal_number(7)\n# print hexagonal_number(8)\n# print hexagonal_number(9)\n# print hexagonal_number(10)\n# print hexagonal_number(11)\n# print hexagonal_number(12)\n# print hexagonal_number(13)\n# print hexagonal_number(14)\n# print hexagonal_number(15)\n# print hexagonal_number(16)\n# print hexagonal_number(17)\n# print hexagonal_number(18)\n# print hexagonal_number(19)\n# print hexagonal_number(20)\n# print hexagonal_number(21)\n# print hexagonal_number(22)\n# print hexagonal_number(23)\n# print hexagonal_number(24)\n# print hexagonal_number(25)\n# print hexagonal_number(26)\n# print hexagonal_number(27)\n# print hexagonal_number(28)\n# print hexagonal_number(29)\n# print hexagonal_number(30)\n# print hexagonal_number(",
    "import math\nfrom functools import reduce\n\ndef hex(n):\n    return math.sqrt(3) * math.pow(math.sqrt(3), n / 2)\n\n\ndef hexagon(n):\n    return hex(n) - 1\n\n\ndef hexagon_count(n):\n    return int(reduce(lambda x, y: x * y,\n                      map(lambda x: hexagon(x) - hexagon_count(x - 1), range(1, n + 1))))\n\n\nif __name__ == '__main__':\n    print hexagon_count(3)",
    "def hexagon(n):\n    return ((3*n) - 1) * (3*n - 1)\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number:\"))\n    print(\"Hexagonal number is:\", hexagon(n))",
    "def hexagon_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return ((n + 1) * (n + 3) / 2) - (n * (n + 3) / 2)\n\n\nif __name__ == '__main__':\n    assert hexagon_n(1) == 28\n    assert hexagon_n(2) == 58\n    assert hexagon_n(3) == 76\n    assert hexagon_n(4) == 90\n    assert hexagon_n(5) == 110\n    assert hexagon_n(6) == 122\n    assert hexagon_n(7) == 134\n    assert hexagon_n(8) == 146\n    assert hexagon_n(9) == 158\n    assert hexagon_n(10) == 170\n    assert hexagon_n(11) == 182\n    assert hexagon_n(12) == 194\n    assert hexagon_n(13) == 206\n    assert hexagon_n(14) == 218\n    assert hexagon_n(15) == 230\n    assert hexagon_n(16) == 242\n    assert hexagon_n(17) == 254\n    assert hexagon_n(18) == 266\n    assert hexagon_n(19) == 278\n    assert hexagon_n(20) == 290\n    assert hexagon_n(21) == 302\n    assert hexagon_n(22) == 314\n    assert hexagon_n(23) == 326\n    assert hexagon_n(24) == 338\n    assert hexagon_n(25) == 350\n    assert hexagon_n(26) == 362\n    assert hexagon_n(27) == 374\n    assert hexagon_n(28) == 386",
    "import math\n\ndef hexagonal(n):\n    \"\"\"\n    nth hexagonal number\n    :param n: int\n    :return: int\n    \"\"\"\n    return (n * (n+1)) / 2\n\nif __name__ == '__main__':\n    print hexagonal(100)",
    "import math\n\n\ndef hexagon_n(n):\n    return (n * (3 * n - 1) / 2) + ((n * (3 * n + 1)) / 2) - 1\n\n\nif __name__ == '__main__':\n    print hexagon_n(1)\n    print hexagon_n(2)\n    print hexagon_n(3)\n    print hexagon_n(4)\n    print hexagon_n(5)\n    print hexagon_n(6)\n    print hexagon_n(7)\n    print hexagon_n(8)",
    "import math\n\ndef hexagonal(n):\n    return int(math.sqrt(3) * (math.pow(2, n/6.0) - 1.0) + 1)\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(hexagonal(i))",
    "import math\n\ndef hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (3 * n - 1) + 1) // 2\n\nif __name__ == '__main__':\n    assert hexagon_nth(0) == 1\n    assert hexagon_nth(1) == 6\n    assert hexagon_nth(2) == 15\n    assert hexagon_nth(3) == 21\n    assert hexagon_nth(4) == 28\n    assert hexagon_nth(5) == 35\n    assert hexagon_nth(6) == 42\n    assert hexagon_nth(7) == 50\n    assert hexagon_nth(8) == 56\n    assert hexagon_nth(9) == 63\n    assert hexagon_nth(10) == 70\n    assert hexagon_nth(11) == 76\n    assert hexagon_nth(12) == 82\n    assert hexagon_nth(13) == 88\n    assert hexagon_nth(14) == 94\n    assert hexagon_nth(15) == 100\n    assert hexagon_nth(16) == 106\n    assert hexagon_nth(17) == 112\n    assert hexagon_nth(18) == 118\n    assert hexagon_nth(19) == 124\n    assert hexagon_nth(20) == 130\n    assert hexagon_nth(21) == 136\n    assert hexagon_nth(22) == 142\n    assert hexagon_nth(23) == 148\n    assert hexagon_nth(24) == 154\n    assert hexagon_nth(25) == 160\n    assert hexagon_nth(26) == 166\n    assert hexagon_nth(27) == 172\n    assert hexagon_nth(28) == 178\n    assert hexagon_nth(29) == 184\n    assert hexagon_nth(30) == 190\n    assert hexagon_nth(31) == 196\n    assert hexagon_nth(32) == 202\n    assert hexagon_nth(33) == 208\n    assert hexagon_",
    "import os\nimport sys\nimport math\n\n\ndef hexagonal_number(n):\n    \"\"\"\n    nth hexagonal number\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return hexagonal_number(n - 1) + math.sqrt(3 * n)\n\n\ndef main():\n    \"\"\"\n    Main function\n    :return:\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print \"Usage: {} <n>\".format(sys.argv[0])\n        sys.exit(1)\n\n    n = int(sys.argv[1])\n    print hexagonal_number(n)\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for hexagonal number.\n# class HexagonalNumber(object):\n#     def __init__(self, n):\n#         \"\"\"\n#         n: an integer\n#         \"\"\"\n#         self.n = n\n\nclass Solution(object):\n    def hexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        hexagonal_numbers = [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\n        return hexagonal_numbers[n-1]",
    "# Definition for a hexagonal number.\n# class Hexagonal(object):\n#     def __init__(self, num):\n#         self.num = num\n#         self.side = 2 * num + 1\n#         self.num_squares = self.side ** 2\n\n# The following is a good test case for this problem.\n# n = 1\n# print hexagonal(n)\n# n = 2\n# print hexagonal(n)\n# n = 3\n# print hexagonal(n)\n# n = 4\n# print hexagonal(n)\n# n = 5\n# print hexagonal(n)\n# n = 6\n# print hexagonal(n)\n# n = 7\n# print hexagonal(n)\n# n = 8\n# print hexagonal(n)\n# n = 9\n# print hexagonal(n)\n# n = 10\n# print hexagonal(n)\n# n = 11\n# print hexagonal(n)\n# n = 12\n# print hexagonal(n)\n# n = 13\n# print hexagonal(n)\n# n = 14\n# print hexagonal(n)\n# n = 15\n# print hexagonal(n)\n# n = 16\n# print hexagonal(n)\n# n = 17\n# print hexagonal(n)\n# n = 18\n# print hexagonal(n)\n# n = 19\n# print hexagonal(n)\n# n = 20\n# print hexagonal(n)\n# n = 21\n# print hexagonal(n)\n# n = 22\n# print hexagonal(n)\n# n = 23\n# print hexagonal(n)\n# n = 24\n# print hexagonal(n)\n# n = 25\n# print hexagonal(n)\n# n = 26\n# print hexagonal(n)\n# n = 27\n# print hexagonal(n)\n# n = 28\n# print hexagonal(n)\n# n = 29\n# print hexagonal(n)\n# n = 30\n# print hexagonal(n)\n# n = 31\n# print hexagonal(n)\n# n = 32\n# print hexagonal(n)\n# n = 33\n# print hexagonal(n)\n# n = 34",
    "import math\n\ndef hexagonal_nth(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    >>> hexagonal_nth(1)\n    3\n    >>> hexagonal_nth(2)\n    5\n    >>> hexagonal_nth(3)\n    7\n    >>> hexagonal_nth(4)\n    11\n    >>> hexagonal_nth(5)\n    13\n    \"\"\"\n    return (math.sqrt(5) + 1) * (n + 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import math\n\n\ndef hexagonal(n):\n    return (math.sqrt(3) * (n + 1) + n) / 2\n\n\nif __name__ == '__main__':\n    for n in range(1, 101):\n        print hexagonal(n)",
    "import math\n\ndef hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result = (result + math.sqrt(5))/2\n    return result\n\nif __name__ == '__main__':\n    print hexagonal_nth(1)\n    print hexagonal_nth(2)\n    print hexagonal_nth(3)\n    print hexagonal_nth(4)\n    print hexagonal_nth(5)\n    print hexagonal_nth(6)\n    print hexagonal_nth(7)\n    print hexagonal_nth(8)\n    print hexagonal_nth(9)\n    print hexagonal_nth(10)\n    print hexagonal_nth(11)\n    print hexagonal_nth(12)\n    print hexagonal_nth(13)\n    print hexagonal_nth(14)\n    print hexagonal_nth(15)\n    print hexagonal_nth(16)\n    print hexagonal_nth(17)\n    print hexagonal_nth(18)\n    print hexagonal_nth(19)\n    print hexagonal_nth(20)",
    "def hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = n - 1\n    for x in range(1, n):\n        y = (n - x) * x\n        if y > 9:\n            y = (y - 9) / 3\n            x += 1\n        if y == 1:\n            break\n    return y\n\nif __name__ == \"__main__\":\n    assert hexagonal_nth(3) == 2\n    assert hexagonal_nth(5) == 6\n    assert hexagonal_nth(7) == 8",
    "import math\n\ndef hexagon(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) / 2) + 1\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print hexagon(i)",
    "import math\n\n\ndef hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3 * n - 1) / 2\n\n\ndef hexagonal_number_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (2 * n - 1) / 2\n\n\ndef hexagonal_number_3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2\n\n\ndef hexagonal_number_4(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef hexagonal_number_5(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3 * n - 1) / 2\n\n\nif __name__ == '__main__':\n    print hexagonal_number(1)\n    print hexagonal_number_2(1)\n    print hexagonal_number_3(1)\n    print hexagonal_number_4(1)\n    print hexagonal_number_5(1)",
    "def hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n - 1) * (2 * n - 1) / 2 + n\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print hexagonal_number(i)",
    "import math\n\ndef hexagon(n):\n    return int(math.sqrt(1 + 4 * n))\n\ndef main():\n    print hexagon(3)\n\nif __name__ == '__main__':\n    main()",
    "import os\n\n\ndef hexagon_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return hexagon_n_rec(1, n)\n\n\ndef hexagon_n_rec(n, n_to_find):\n    if n == n_to_find:\n        return hexagon_n_rec(n+1, n_to_find)\n    else:\n        return hexagon_n_rec(n+1, n_to_find) + hexagon_n_rec(n+2, n_to_find)\n\n\nif __name__ == '__main__':\n    assert hexagon_n(0) == 1\n    assert hexagon_n(1) == 6\n    assert hexagon_n(2) == 15\n    assert hexagon_n(3) == 31\n    assert hexagon_n(4) == 61\n    assert hexagon_n(5) == 127\n    assert hexagon_n(6) == 255\n    assert hexagon_n(7) == 511\n    assert hexagon_n(8) == 1023\n    assert hexagon_n(9) == 2047\n    assert hexagon_n(10) == 4095\n    assert hexagon_n(11) == 8191\n    assert hexagon_n(12) == 16383\n    assert hexagon_n(13) == 32767\n    assert hexagon_n(14) == 65535\n    assert hexagon_n(15) == 131071\n    assert hexagon_n(16) == 262143\n    assert hexagon_n(17) == 524287\n    assert hexagon_n(18) == 1048571\n    assert hexagon_n(19) == 2097143\n    assert hexagon_n(20) == 4194303\n    assert hexagon_n(21) == 8388607\n    assert hexagon_n(22) == 16777213\n    assert hexagon_n(23) == 33554431\n    assert hexagon_n(24) == 67108863\n    assert hexagon_n(25) == 134217727\n    assert hexagon_n(26) == 268435455",
    "def nth_hexagonal(n):\n    # @include\n    def hexagon_num(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        # Use the formula to calculate the hexagonal number.\n        return n * (3 * n - 1) // 2\n\n    return hexagon_num(n)\n    # @exclude\n\nif __name__ == '__main__':\n    for n in [1, 2, 3, 4, 5, 7, 8, 9, 10, 15, 16, 17]:\n        print(n, nth_hexagonal(n))",
    "# https://github.com/hackerrank/challenges/issues/3\ndef hexagonal_nth(n):\n    \"\"\"\n    :param n: the nth hexagonal number\n    :return: the nth hexagonal number\n    \"\"\"\n\n    # 1st hexagonal number is 1\n    if n == 1:\n        return 1\n\n    # 2nd hexagonal number is 6\n    elif n == 2:\n        return 6\n\n    # 3rd hexagonal number is 15\n    elif n == 3:\n        return 15\n\n    # 4th hexagonal number is 34\n    elif n == 4:\n        return 34\n\n    # 5th hexagonal number is 55\n    elif n == 5:\n        return 55\n\n    # 6th hexagonal number is 92\n    elif n == 6:\n        return 92\n\n    # 7th hexagonal number is 144\n    elif n == 7:\n        return 144\n\n    # 8th hexagonal number is 244\n    elif n == 8:\n        return 244\n\n    # 9th hexagonal number is 324\n    elif n == 9:\n        return 324\n\n    # 10th hexagonal number is 456\n    elif n == 10:\n        return 456\n\n    # 11th hexagonal number is 624\n    elif n == 11:\n        return 624\n\n    # 12th hexagonal number is 864\n    elif n == 12:\n        return 864\n\n    # 13th hexagonal number is 1296\n    elif n == 13:\n        return 1296\n\n    # 14th hexagonal number is 1792\n    elif n == 14:\n        return 1792\n\n    # 15th hexagonal number is 2520\n    elif n == 15:\n        return 2520\n\n    # 16th hexagonal number is 3456\n    elif n == 16:\n        return 3456\n\n    # 17th hexagonal number is 4608\n    elif n == 17:\n        return 4608\n\n    # 18th hexagonal number is 6144\n    elif n == 18:\n        return 6144\n\n    # 19th hexagonal number is 8192\n    elif n == 19:\n        return 8192\n\n    # 20th hexagonal number is 12288\n    elif n == 20",
    "def hex(n):\n    return n * (3 * n - 1) // 2\n\nif __name__ == '__main__':\n    print(hex(1))\n    print(hex(2))\n    print(hex(3))\n    print(hex(4))\n    print(hex(5))\n    print(hex(6))\n    print(hex(7))\n    print(hex(8))\n    print(hex(9))",
    "import math\n\ndef hexagonal(n):\n    \"\"\"\n    n: integer\n    return: hexagonal number\n    \"\"\"\n    return int(math.sqrt(3 * n))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hexagonal(1) == 1, \"1st hexagonal is 1\"\n    assert hexagonal(2) == 3, \"2nd hexagonal is 3\"\n    assert hexagonal(3) == 5, \"3rd hexagonal is 5\"\n    assert hexagonal(4) == 7, \"4th hexagonal is 7\"\n    assert hexagonal(5) == 9, \"5th hexagonal is 9\"\n    assert hexagonal(6) == 11, \"6th hexagonal is 11\"\n    assert hexagonal(7) == 13, \"7th hexagonal is 13\"\n    assert hexagonal(8) == 15, \"8th hexagonal is 15\"\n    assert hexagonal(9) == 17, \"9th hexagonal is 17\"\n    assert hexagonal(10) == 19, \"10th hexagonal is 19\"\n    assert hexagonal(11) == 23, \"11th hexagonal is 23\"\n    assert hexagonal(12) == 29, \"12th hexagonal is 29\"\n    assert hexagonal(13) == 31, \"13th hexagonal is 31\"\n    assert hexagonal(14) == 37, \"14th hexagonal is 37\"\n    assert hexagonal(15) == 41, \"15th hexagonal is 41\"\n    assert hexagonal(16) == 43, \"16th hexagonal is 43\"\n    assert hexagonal(17) == 47, \"17th hexagonal is 47\"\n    assert hexagonal(18) == 53, \"18th hexagonal is 53\"\n    assert hexagonal(19) == 59, \"19th hexagonal is 59\"\n    assert hexagonal(20) == 61, \"20th hexagonal is 61\"\n    assert hexagonal(10000) == 10001, \"10000th hexagonal is 10001\"",
    "import math\nimport unittest\n\ndef hexagon_nth(n):\n    \"\"\"\n    Returns the nth hexagonal number\n    \"\"\"\n    return math.sqrt(3 * (n + 1) / 2)\n\n\nclass TestHexagon(unittest.TestCase):\n    def test_hexagon_nth(self):\n        self.assertEqual(hexagon_nth(1), 1.0)\n        self.assertEqual(hexagon_nth(2), 2.0)\n        self.assertEqual(hexagon_nth(3), 3.0)\n        self.assertEqual(hexagon_nth(4), 4.0)\n        self.assertEqual(hexagon_nth(5), 5.0)\n        self.assertEqual(hexagon_nth(6), 6.0)\n        self.assertEqual(hexagon_nth(7), 7.0)\n        self.assertEqual(hexagon_nth(8), 8.0)\n        self.assertEqual(hexagon_nth(9), 9.0)\n        self.assertEqual(hexagon_nth(10), 10.0)\n        self.assertEqual(hexagon_nth(11), 11.0)\n        self.assertEqual(hexagon_nth(12), 12.0)\n        self.assertEqual(hexagon_nth(13), 13.0)\n        self.assertEqual(hexagon_nth(14), 14.0)\n        self.assertEqual(hexagon_nth(15), 15.0)\n        self.assertEqual(hexagon_nth(16), 16.0)\n        self.assertEqual(hexagon_nth(17), 17.0)\n        self.assertEqual(hexagon_nth(18), 18.0)\n        self.assertEqual(hexagon_nth(19), 19.0)\n        self.assertEqual(hexagon_nth(20), 20.0)\n        self.assertEqual(hexagon_nth(21), 21.0)\n        self.assertEqual(hexagon_n",
    "# Definition for a hexagonal number.\nclass HexagonalNumber(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n\n    def __eq__(self, other):\n        return self.n == other.n\n\n    def __lt__(self, other):\n        return self.n < other.n\n\n    def __str__(self):\n        return str(self.n)\n\nclass Solution(object):\n    def hexagonalNumbers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[HexagonalNumber]\n        \"\"\"\n        result = []\n        for i in range(0, n + 1):\n            result.append(HexagonalNumber(i * (i + 1) // 2))\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.hexagonalNumbers(4)\n    print s.hexagonalNumbers(3)",
    "def hexagon(n):\n    return ((n*(3*n + 1))/2) + ((n*(2*n + 1))/2) + n\n\nif __name__ == '__main__':\n    print hexagon(1)\n    print hexagon(2)\n    print hexagon(3)\n    print hexagon(4)\n    print hexagon(5)\n    print hexagon(6)\n    print hexagon(7)\n    print hexagon(8)\n    print hexagon(9)",
    "import unittest\n\n\ndef hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\n\nclass TestProblem1(unittest.TestCase):\n    \"\"\"\n    class to test problem1\n    \"\"\"\n\n    def test_hexagonal_number(self):\n        \"\"\"\n        test hexagonal number\n        \"\"\"\n        self.assertEqual(hexagonal_number(1), 1)\n        self.assertEqual(hexagonal_number(2), 6)\n        self.assertEqual(hexagonal_number(3), 15)\n        self.assertEqual(hexagonal_number(4), 36)\n        self.assertEqual(hexagonal_number(5), 105)\n        self.assertEqual(hexagonal_number(6), 216)\n        self.assertEqual(hexagonal_number(7), 345)\n        self.assertEqual(hexagonal_number(8), 545)\n        self.assertEqual(hexagonal_number(9), 855)\n        self.assertEqual(hexagonal_number(10), 1296)\n        self.assertEqual(hexagonal_number(11), 2516)\n        self.assertEqual(hexagonal_number(12), 4164)\n        self.assertEqual(hexagonal_number(13), 6765)\n        self.assertEqual(hexagonal_number(14), 10946)\n        self.assertEqual(hexagonal_number(15), 17711)\n        self.assertEqual(hexagonal_number(16), 28657)\n        self.assertEqual(hexagonal_number(17), 46368)\n        self.assertEqual(hexagonal_number(18), 75025)\n        self.assertEqual(hexagonal_number(19), 121393)\n        self.assertEqual(hexagonal_number(20), 251621)\n        self.assertEqual(hexagonal_number(21), 466229)\n        self.assertEqual(hexagonal_number(22), 750725)\n        self.assertEqual(hexagonal_number(23), 1223937)\n        self",
    "def hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3*n-1) // 2 + n * (n-1) // 2\n\nif __name__ == '__main__':\n    print(hexagonal_number(1))\n    print(hexagonal_number(2))\n    print(hexagonal_number(3))\n    print(hexagonal_number(4))\n    print(hexagonal_number(5))\n    print(hexagonal_number(6))",
    "import math\n\ndef hexagonal_number(n):\n    return int(math.sqrt(n)) * int(math.sqrt(3)/2)\n\ndef test():\n    assert hexagonal_number(1) == 1\n    assert hexagonal_number(3) == 3\n    assert hexagonal_number(5) == 15\n\nif __name__ == '__main__':\n    test()",
    "from math import sqrt\n\n\ndef hexagonal_nth_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2 + n\n\n\ndef main():\n    print hexagonal_nth_number(1)\n    print hexagonal_nth_number(2)\n    print hexagonal_nth_number(3)\n    print hexagonal_nth_number(4)\n    print hexagonal_nth_number(5)\n    print hexagonal_nth_number(6)\n    print hexagonal_nth_number(7)\n    print hexagonal_nth_number(8)\n    print hexagonal_nth_number(9)\n    print hexagonal_nth_number(10)\n    print hexagonal_nth_number(11)\n    print hexagonal_nth_number(12)\n    print hexagonal_nth_number(13)\n    print hexagonal_nth_number(14)\n    print hexagonal_nth_number(15)\n    print hexagonal_nth_number(16)\n    print hexagonal_nth_number(17)\n    print hexagonal_nth_number(18)\n    print hexagonal_nth_number(19)\n    print hexagonal_nth_number(20)\n    print hexagonal_nth_number(21)\n    print hexagonal_nth_number(22)\n    print hexagonal_nth_number(23)\n    print hexagonal_nth_number(24)\n    print hexagonal_nth_number(25)\n    print hexagonal_nth_number(26)\n    print hexagonal_nth_number(27)\n    print hexagonal_nth_number(28)\n    print hexagonal_nth_number(29)\n    print hexagonal_nth_number(30)\n    print hexagonal_nth_number(31)\n    print hexagonal_nth_number(32)\n    print hexagonal_nth_number(33)\n    print hexagonal_nth_number(34)\n    print hexagonal_nth_number(",
    "def nthhex(n):\n    if n < 1:\n        return 0\n    if n > 26:\n        return 0\n    num = 0\n    for i in range(n):\n        num = num*6 + (i+1)\n    return num\n\nif __name__ == \"__main__\":\n    print(nthhex(1))\n    print(nthhex(2))\n    print(nthhex(3))\n    print(nthhex(4))\n    print(nthhex(5))\n    print(nthhex(6))\n    print(nthhex(7))\n    print(nthhex(8))\n    print(nthhex(9))\n    print(nthhex(10))\n    print(nthhex(11))\n    print(nthhex(12))\n    print(nthhex(13))\n    print(nthhex(14))\n    print(nthhex(15))\n    print(nthhex(16))\n    print(nthhex(17))\n    print(nthhex(18))\n    print(nthhex(19))\n    print(nthhex(20))\n    print(nthhex(21))\n    print(nthhex(22))\n    print(nthhex(23))\n    print(nthhex(24))\n    print(nthhex(25))\n    print(nthhex(26))\n    print(nthhex(27))\n    print(nthhex(28))\n    print(nthhex(29))\n    print(nthhex(30))\n    print(nthhex(31))\n    print(nthhex(32))\n    print(nthhex(33))\n    print(nthhex(34))\n    print(nthhex(35))\n    print(nthhex(36))\n    print(nthhex(37))\n    print(nthhex(38))\n    print(nthhex(39))\n    print(nthhex(40))\n    print(nthhex(41))\n    print(nthhex(42))\n    print(nthhex(43))\n    print(nthhex(44",
    "def hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n*(n+1))/2\n\nif __name__ == \"__main__\":\n    print hexagonal_nth(1)\n    print hexagonal_nth(2)\n    print hexagonal_nth(3)\n    print hexagonal_nth(4)\n    print hexagonal_nth(5)\n    print hexagonal_nth(6)\n    print hexagonal_nth(7)\n    print hexagonal_nth(8)\n    print hexagonal_nth(9)\n    print hexagonal_nth(10)",
    "def hexagonal_number(n):\n    \"\"\"\n    Input:\n    n -- number\n    Output:\n    hexagonal_number -- hexagonal number\n    \"\"\"\n    for i in range(1, n+1):\n        print(i, end=' ')\n        for j in range(1, i+1):\n            print(j, end=' ')\n            if i % 2 == 1 and j % 2 == 1:\n                print(i, end=' ')\n            elif i % 2 == 1 and j % 2 == 0:\n                print(j, end=' ')\n            elif i % 2 == 0 and j % 2 == 1:\n                print(i, end=' ')\n            elif i % 2 == 0 and j % 2 == 0:\n                print(j, end=' ')\n    return i\n\nif __name__ == '__main__':\n    n = int(input())\n    print(hexagonal_number(n))",
    "def hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n + 1) * (n + 3) / 2\n\nif __name__ == '__main__':\n    import time\n\n    start_time = time.time()\n    print hexagon_nth(3)\n    print 'Run time: %fs' % (time.time() - start_time)",
    "# Definition for a hexagonal number.\nclass HexagonalNumber(object):\n    def __init__(self, n):\n        self.n = n\n\n    def get_hexagonal_number(self):\n        return hex(self.n)\n\ndef get_hexagonal_number(hex_number):\n    n = int(hex_number)\n    return HexagonalNumber(n)\n\n# Note:\n# 1. The hexagonal number is the sum of its squares.\n# 2. The hexagonal number is a positive integer.\n\n# Example 1:\n\n# Input: n = 3\n# Output: 7\n# Explanation: The first hexagonal number is 1 + 4 + 9 = 16.\n# Example 2:\n\n# Input: n = 5\n# Output: 42\n# Explanation: The second hexagonal number is 4 + 41 + 64 = 123.\n\n# Note:\n# 1 <= n <= 100",
    "# Definition for a hexagonal number.\nclass HexagonalNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def get_hexagonal_number(self):\n        hexagonal_number = 1\n        for i in range(1, self.n+1):\n            hexagonal_number *= i\n            hexagonal_number += 1\n            if hexagonal_number % 12 == 0:\n                hexagonal_number -= 12\n            else:\n                hexagonal_number += 12\n        return hexagonal_number\n\n\ndef main():\n    # hexagonal_number = HexagonalNumber(10)\n    hexagonal_number = HexagonalNumber(20)\n    print(hexagonal_number.get_hexagonal_number())\n\nif __name__ == '__main__':\n    main()",
    "def hexagon(n):\n    \"\"\"\n    n: An integer, n > 0.\n    Return the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n % 2 == 0:\n        return (n * (3 * n - 1) / 2)\n    else:\n        return (n * (3 * n - 1) / 2 + 1)\n\n# Test Cases\n\n# n = 1\nprint hexagon(1)\n\n# n = 2\nprint hexagon(2)\n\n# n = 3\nprint hexagon(3)\n\n# n = 4\nprint hexagon(4)",
    "from utils.functions import *\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return hexagonal_number(n)\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(4))\n    print(nth_hexagonal_number(10))\n    print(nth_hexagonal_number(20))",
    "import math\n\ndef hexagon_n(n):\n    return math.sqrt(3) * n * (3 * n - 1) / 4\n\nprint hexagon_n(100)",
    "from math import sqrt\n\ndef hexagonal_number(n):\n    \"\"\"\n    Returns the nth hexagonal number\n    \"\"\"\n    return n * (3 * n - 1) / 4\n\n\ndef hexagonal_numbers(n):\n    \"\"\"\n    Returns the first n hexagonal numbers.\n    \"\"\"\n    return [hexagonal_number(n) for i in range(0, n)]\n\n\ndef hexagonal_numbers_sum(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers.\n    \"\"\"\n    return sum(hexagonal_numbers(n))\n\n\ndef hexagonal_numbers_sum_2(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef hexagonal_numbers_sum_3(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef hexagonal_numbers_sum_4(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef hexagonal_numbers_sum_5(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef hexagonal_numbers_sum_6(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef hexagonal_numbers_sum_7(n):\n    \"\"\"\n    Returns the sum of the first n hexagonal numbers using\n    a recursion.\n    \"\"\"\n    return sum([hexagonal_number(n) for i in range(0, n)])\n\n\ndef",
    "import math\n\ndef hexagon(n):\n    return (math.sqrt(3) + 1) * (n * (n + 1) - math.sqrt(3)) / 2\n\nif __name__ == '__main__':\n    print hexagon(6)",
    "def hexagon(n):\n    return (n*(3*n + 1) + 1) / (2 * n)\n\nif __name__ == '__main__':\n    print hexagon(6)\n    print hexagon(10)\n    print hexagon(20)",
    "import math\n\ndef hexagon_n(n):\n    \"\"\"\n    nth hexagonal number\n    :param n: nth hexagonal number\n    :return: hexagonal number\n    \"\"\"\n    return (n*(3*n-1) - (n-1)*(2*n+1))/2\n\nif __name__ == '__main__':\n    print hexagon_n(1)\n    print hexagon_n(2)\n    print hexagon_n(3)\n    print hexagon_n(4)\n    print hexagon_n(5)\n    print hexagon_n(6)\n    print hexagon_n(7)\n    print hexagon_n(8)",
    "def hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    if n % 2 == 0:\n        return hexagonal_number(n/2)*2\n    else:\n        return hexagonal_number(n/2)*3 + hexagonal_number(n/2 + 1)*2\n\n# test cases\nprint hexagonal_number(3)\nprint hexagonal_number(4)\nprint hexagonal_number(6)\nprint hexagonal_number(7)\nprint hexagonal_number(100)",
    "from math import sqrt\n\n\ndef hexagon_number(n):\n    return int(sqrt(n)) * (n - 1) / 2\n\n\ndef hexagon_numbers():\n    return range(1, 101)\n\n\nif __name__ == '__main__':\n    print(hexagon_number(20))\n    print(hexagon_numbers())",
    "def hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n+1)*(n+2)/2\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print hexagon(i)",
    "# https://www.hackerrank.com/challenges/nth-hexagonal-number/problem\n\nimport math\n\ndef nth_hexagonal(n):\n    hexagonal = (math.sqrt(3) + 1) / 2\n    for i in range(1, n + 1):\n        hexagonal = hexagonal * (i * 2 - 1) / (i * 2)\n    return hexagonal\n\nprint nth_hexagonal(int(input().strip()))",
    "import math\n\ndef hex(n):\n    \"\"\"\n    >>> hex(1)\n    1\n    >>> hex(2)\n    3\n    >>> hex(3)\n    7\n    >>> hex(4)\n    15\n    >>> hex(5)\n    31\n    >>> hex(6)\n    63\n    >>> hex(7)\n    127\n    >>> hex(8)\n    255\n    >>> hex(9)\n    511\n    >>> hex(10)\n    1023\n    >>> hex(11)\n    2047\n    >>> hex(12)\n    4095\n    \"\"\"\n    n = int(n)\n    return (math.sqrt(3) * (n - 1)) / 2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    for i in range(1, 13):\n        print hex(i)",
    "import math\n\ndef hexagonal(n):\n    \"\"\"\n    n: The number to find.\n    Returns: The nth hexagonal number.\n    \"\"\"\n    return int(math.sqrt(3*n))*int(math.sqrt(2*n))\n\nif __name__ == \"__main__\":\n    print hexagonal(9)",
    "def hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n*(n+1))/2\n\nif __name__ == '__main__':\n    print hexagonal(4)\n    print hexagonal(3)",
    "def hexagonal_nth(n):\n    return (n * (n + 1) / 2) * (n + 1)\n\nif __name__ == '__main__':\n    print hexagonal_nth(2)\n    print hexagonal_nth(3)\n    print hexagonal_nth(4)\n    print hexagonal_nth(5)\n    print hexagonal_nth(6)\n    print hexagonal_nth(7)\n    print hexagonal_nth(8)\n    print hexagonal_nth(9)\n    print hexagonal_nth(10)",
    "import math\n\ndef hexagonal(n):\n    if n < 1:\n        return 0\n    return n * (3 * n - 1) / 2\n\ndef main():\n    print(hexagonal(1))\n    print(hexagonal(2))\n    print(hexagonal(3))\n    print(hexagonal(4))\n    print(hexagonal(5))\n    print(hexagonal(6))\n    print(hexagonal(7))\n    print(hexagonal(8))\n    print(hexagonal(9))\n    print(hexagonal(10))\n    print(hexagonal(11))\n    print(hexagonal(12))\n    print(hexagonal(13))\n    print(hexagonal(14))\n    print(hexagonal(15))\n    print(hexagonal(16))\n    print(hexagonal(17))\n    print(hexagonal(18))\n    print(hexagonal(19))\n    print(hexagonal(20))\n    print(hexagonal(21))\n    print(hexagonal(22))\n    print(hexagonal(23))\n    print(hexagonal(24))\n    print(hexagonal(25))\n    print(hexagonal(26))\n    print(hexagonal(27))\n    print(hexagonal(28))\n    print(hexagonal(29))\n    print(hexagonal(30))\n    print(hexagonal(31))\n    print(hexagonal(32))\n    print(hexagonal(33))\n    print(hexagonal(34))\n    print(hexagonal(35))\n    print(hexagonal(36))\n    print(hexagonal(37))\n    print(hexagonal(38))\n    print(hexagonal(39))\n    print(hexagonal(40))\n    print(hexagonal(41))\n    print(hexagonal(42))\n    print(hexagonal(43))\n    print(hexagonal(44))\n    print(hexagonal(45))\n    print(hexagonal(46))\n    print(hexagonal(47))\n    print(hexagonal(48))\n    print(hexagonal(49))\n    print(hexagonal(50))\n    print(hexagonal(51))\n    print(hexagonal(52))\n    print",
    "from math import sqrt\n\ndef hex(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> hex(1)\n    1\n    >>> hex(2)\n    3\n    >>> hex(3)\n    5\n    >>> hex(4)\n    7\n    >>> hex(5)\n    9\n    >>> hex(6)\n    11\n    >>> hex(7)\n    13\n    >>> hex(8)\n    15\n    >>> hex(9)\n    17\n    >>> hex(10)\n    19\n    >>> hex(11)\n    23\n    >>> hex(12)\n    29\n    >>> hex(13)\n    31\n    >>> hex(14)\n    37\n    >>> hex(15)\n    41\n    >>> hex(16)\n    43\n    >>> hex(17)\n    47\n    >>> hex(18)\n    53\n    >>> hex(19)\n    59\n    >>> hex(20)\n    61\n    >>> hex(21)\n    67\n    >>> hex(22)\n    71\n    >>> hex(23)\n    73\n    >>> hex(24)\n    79\n    >>> hex(25)\n    83\n    >>> hex(26)\n    89\n    >>> hex(27)\n    97\n    >>> hex(28)\n    101\n    >>> hex(29)\n    103\n    >>> hex(30)\n    107\n    >>> hex(31)\n    109\n    >>> hex(32)\n    113\n    >>> hex(33)\n    127\n    >>> hex(34)\n    131\n    >>> hex(35)\n    137\n    >>> hex(36)\n    139\n    >>> hex(37)\n    143\n    >>> hex(38)\n    149\n    >>> hex(39)\n    151\n    >>> hex(40)\n    157\n    >>> hex(41)\n    163\n    >>> hex(42)\n    167\n    >>> hex(43)\n    173\n    >>> hex(44)\n    179\n    >>> hex(45)\n    181\n    >>> hex(46)\n    187\n    >>> hex(47)\n    191\n    >>> hex(48)\n    193\n    >>> hex(49",
    "def nth_hexagonal_number(n):\n    \"\"\"\n    Input: n = number of hexagon\n    Output: The nth hexagonal number.\n    \"\"\"\n    hexagon_num = n*(n+1)/2\n    return hexagon_num\n\nif __name__ == '__main__':\n    print nth_hexagonal_number(1)\n    print nth_hexagonal_number(2)\n    print nth_hexagonal_number(3)\n    print nth_hexagonal_number(4)\n    print nth_hexagonal_number(5)\n    print nth_hexagonal_number(6)\n    print nth_hexagonal_number(7)\n    print nth_hexagonal_number(8)\n    print nth_hexagonal_number(9)\n    print nth_hexagonal_number(10)\n    print nth_hexagonal_number(11)\n    print nth_hexagonal_number(12)\n    print nth_hexagonal_number(13)\n    print nth_hexagonal_number(14)\n    print nth_hexagonal_number(15)\n    print nth_hexagonal_number(16)\n    print nth_hexagonal_number(17)\n    print nth_hexagonal_number(18)\n    print nth_hexagonal_number(19)\n    print nth_hexagonal_number(20)\n    print nth_hexagonal_number(21)\n    print nth_hexagonal_number(22)\n    print nth_hexagonal_number(23)\n    print nth_hexagonal_number(24)\n    print nth_hexagonal_number(25)\n    print nth_hexagonal_number(26)\n    print nth_hexagonal_number(27)\n    print nth_hexagonal_number(28)\n    print nth_hexagonal_number(29)\n    print nth_hexagonal_number(30)\n    print nth_hexagonal_number(31)\n    print nth_hexagonal_number(32)\n    print nth_hexagonal_number(33)\n    print nth_hexagonal_number",
    "from euler import is_hexagonal\n\ndef hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n % 2 == 0:\n        return hexagonal_number(n // 2)\n    else:\n        return (n * (n + 1) + 1) // 2\n\nif __name__ == '__main__':\n    print(hexagonal_number(2))\n    print(hexagonal_number(3))\n    print(hexagonal_number(4))\n    print(hexagonal_number(5))\n    print(hexagonal_number(6))\n    print(hexagonal_number(7))\n    print(hexagonal_number(8))\n    print(hexagonal_number(9))\n    print(hexagonal_number(10))\n    print(hexagonal_number(11))\n    print(hexagonal_number(12))\n    print(hexagonal_number(13))\n    print(hexagonal_number(14))\n    print(hexagonal_number(15))",
    "def hexagon(n):\n    n = n % 6\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 12\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 17\n    else:\n        return n * (n + 1) * (n - 1) / 6\n\ndef main():\n    for i in range(1, 21):\n        print hexagon(i)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef hexagon(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    return int(math.sqrt(3 * n) / 2) * 2 + n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert hexagon(1) == 1, \"Testcase 1\"\n    assert hexagon(2) == 6, \"Testcase 2\"\n    assert hexagon(3) == 15, \"Testcase 3\"\n    assert hexagon(4) == 34, \"Testcase 4\"\n    assert hexagon(5) == 55, \"Testcase 5\"\n    assert hexagon(6) == 86, \"Testcase 6\"\n    assert hexagon(7) == 130, \"Testcase 7\"\n    assert hexagon(8) == 172, \"Testcase 8\"\n    assert hexagon(9) == 228, \"Testcase 9\"\n    assert hexagon(10) == 286, \"Testcase 10\"\n    assert hexagon(11) == 350, \"Testcase 11\"\n    assert hexagon(12) == 406, \"Testcase 12\"\n    assert hexagon(13) == 462, \"Testcase 13\"\n    assert hexagon(14) == 518, \"Testcase 14\"\n    assert hexagon(15) == 584, \"Testcase 15\"\n    assert hexagon(16) == 652, \"Testcase 16\"",
    "# Hint:\n# 1. The first hexagonal number is 6\n# 2. The second hexagonal number is 8\n# 3. The third hexagonal number is 18\n# 4. The fourth hexagonal number is 22\n# 5. The fifth hexagonal number is 30\n# 6. The sixth hexagonal number is 48\n# 7. The seventh hexagonal number is 70\n# 8. The eighth hexagonal number is 88\n# 9. The ninth hexagonal number is 110\n# 10. The tenth hexagonal number is 128\n# 11. The eleventh hexagonal number is 138\n# 12. The twelveth hexagonal number is 160\n# 13. The thirteen hexagonal number is 178\n# 14. The 14th hexagonal number is 196\n# 15. The 15th hexagonal number is 220\n# 16. The 16th hexagonal number is 242\n# 17. The 17th hexagonal number is 278\n# 18. The 18th hexagonal number is 306\n# 19. The 19th hexagonal number is 335\n# 20. The 20th hexagonal number is 363\n# 21. The 21st hexagonal number is 404\n# 22. The 22nd hexagonal number is 446\n# 23. The 23rd hexagonal number is 487\n# 24. The 24th hexagonal number is 522\n# 25. The 25th hexagonal number is 559\n# 26. The 26th hexagonal number is 611\n# 27. The 27th hexagonal number is 646\n# 28. The 28th hexagonal number is 696\n# 29. The 29th hexagonal number is 748\n# 30. The 30th hexagonal number is 799\n# 31. The 31st hexagonal number is 857\n# 32. The 32nd hexagonal number is 909\n# 33. The 33rd hexagonal number is 959\n# 34. The 34th hexagonal number is 1012\n# 35. The 35th hexagonal number is 1065\n# 36. The 36th hexagonal number is 1110\n# 37. The 37th hexagonal number is 1162\n# 38. The 38th hexagonal number is 1215\n# 39. The 39th hexagonal number is 1268\n# 40. The 40th hexagonal number is 1320\n# 41. The 41st hexagonal number is 1374\n# 42. The 42",
    "import os\n\ndef hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return ((n * (n + 1)) / 2) + ((n * (n + 1) - 1) / 2)\n\ndef main():\n    \"\"\"\n    Sample Input\n    ----------\n    10\n    Sample Output\n    ----------\n    28\n    \"\"\"\n    input_file_path = os.path.join(os.path.dirname(__file__), \"input.txt\")\n    with open(input_file_path, 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        n = int(line.strip())\n        print hexagon(n)\n\nif __name__ == '__main__':\n    main()",
    "def hexagonal_number(n):\n    return n * (3 * n - 1) / 2\n\ndef main():\n    print hexagonal_number(1)\n    print hexagonal_number(2)\n    print hexagonal_number(3)\n    print hexagonal_number(4)\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n * (n + 1) * (2 * n - 1) / 6)\n\n\ndef hexagon_nth_iter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    h = 0\n    while True:\n        h += (n * (n + 1) * (2 * n - 1) / 6)\n        if h == n:\n            break\n    return h\n\n\ndef main():\n    print hexagon_nth(1)\n    print hexagon_nth(2)\n    print hexagon_nth(3)\n    print hexagon_nth(4)\n    print hexagon_nth(5)\n    print hexagon_nth(6)\n    print hexagon_nth(7)\n    print hexagon_nth(8)\n    print hexagon_nth(9)\n    print hexagon_nth(10)\n    print hexagon_nth(11)\n    print hexagon_nth(12)\n    print hexagon_nth(13)\n    print hexagon_nth(14)\n    print hexagon_nth(15)\n    print hexagon_nth(16)\n    print hexagon_nth(17)\n    print hexagon_nth(18)\n    print hexagon_nth(19)\n    print hexagon_nth(20)\n    print hexagon_nth(21)\n    print hexagon_nth(22)\n    print hexagon_nth(23)\n    print hexagon_nth(24)\n    print hexagon_nth(25)\n    print hexagon_nth(26)\n    print hexagon_nth(27)\n    print hexagon_nth(28)\n    print hexagon_nth(29)\n    print hexagon_nth(30)\n    print hexagon_nth(31)\n    print hexagon",
    "import math\n\ndef hexagon_nth(n):\n    \"\"\"\n    nth hexagonal number\n    \"\"\"\n    return hexagon_nth_rec(n, 1)\n\ndef hexagon_nth_rec(n, base):\n    \"\"\"\n    nth hexagonal number\n    \"\"\"\n    return hexagon_nth_rec(n - 1, math.sqrt(3) * base) + hexagon_nth_rec(n - 2, base)\n\nif __name__ == '__main__':\n    print hexagon_nth(15)\n    print hexagon_nth(20)\n    print hexagon_nth(30)\n    print hexagon_nth(50)\n    print hexagon_nth(100)",
    "from __future__ import print_function\n\ndef hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    numerator = (n - 1) * (n + 1)\n    denominator = n * (n + 2)\n    return numerator / denominator\n\nif __name__ == '__main__':\n    print(hexagon(2))",
    "def hexagon(n):\n    \"\"\"\n    n: number of hexagons\n    returns: nth hexagonal number\n    \"\"\"\n    return n*(n+1)/2\n\nif __name__ == '__main__':\n    print hexagon(5)\n    print hexagon(10)\n    print hexagon(100)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}