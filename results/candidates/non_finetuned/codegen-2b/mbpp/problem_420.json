{
  "problem": {
    "task_id": "MBPP/431",
    "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
    "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
    "test_list": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ],
    "challenge_test_list": [],
    "problem_id": 420
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# https://www.hackerrank.com/challenges/lists-common-elements\n\nimport unittest\n\ndef lists_common_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n\nclass TestMethods(unittest.TestCase):\n    def test_methods(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 9ms 91.70%\nclass Solution {\n    public boolean listsCommonElements(List<Integer> l1, List<Integer> l2) {\n        List<Integer> a = new ArrayList<Integer>();\n        List<Integer> b = new ArrayList<Integer>();\n        for (int i : l1) {\n            if (!a.contains(i)) {\n                a.add(i);\n            }\n        }\n        for (int i : l2) {\n            if (!b.contains(i)) {\n                b.add(i);\n            }\n        }\n        return a.containsAll(b);\n    }\n}\n\n# 9ms 91.70%\nclass Solution {\n    public boolean listsCommonElements(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> a = new HashSet<Integer>();\n        for (int i : l1) {\n            if (!a.contains(i)) {\n                a.add(i);\n            }\n        }\n        Set<Integer> b = new HashSet<Integer>();\n        for (int i : l2) {\n            if (!b.contains(i)) {\n                b.add(i);\n            }\n        }\n        return a.containsAll(b);\n    }\n}\n'''",
    "",
    "# Test Cases\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]\n# Output: True\n\n# Input: [1, 2, 3], [1, 2, 3, 4, 5]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: True\n\n# Input: [1, 2, 3], [1, 2, 3, 4, 5]\n# Output: False\n\n# Input: [1, 2, 3], [1, 2, 3, 4, 5]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: True\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]\n# Output: True\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: True\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: False\n\n# Input: [1, 2, 3], [1, 2, 3, 4, 5, 6]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output: False\n\n# Input: [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]\n# Output",
    "# Example 1:\n\n# Input:\n# A = [1, 2, 3], B = [2, 3, 4]\n# Output: true\n\n# Explanation:\n# The lists have at least one common element.\n\n# Example 2:\n\n# Input:\n# A = [1, 2, 3], B = [1, 2]\n# Output: false\n\n# Explanation:\n# The lists do not have any common element.\n\n# Example 3:\n\n# Input:\n# A = [1, 2, 3], B = [1, 3, 4]\n# Output: true\n\n# Explanation:\n# The lists have at least one common element.\n\n# Note:\n#\n# The size of both lists will not exceed 50.\n# The length of all elements in both lists will be in range [1, 10,000].\n# The length of both lists is in range [1, 100].\n# The length of both lists will not be in range [0, 1000].\n# The elements in both lists will be in range [0, 99].\n\nclass Solution(object):\n    def hasCommonElement(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A) == 0 or len(B) == 0:\n            return False\n\n        for i in xrange(len(A)):\n            if A[i] in B:\n                return True\n\n        return False",
    "def common_elements(a, b):\n    common_elements = set(a) & set(b)\n    return common_elements",
    "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    # for each element of list1\n    for i in range(0, len(list1)):\n        # for each element of list2\n        for j in range(0, len(list2)):\n            # if they are equal\n            if list1[i] == list2[j]:\n                # return true\n                return True\n    # if all elements are equal\n    return False\n\n\ndef test_common_elements():\n    assert common_elements([1, 2, 3], [1, 2, 3]) == True\n    assert common_elements([1, 2, 3], [1, 2, 4]) == False\n    assert common_elements([1, 2, 3], [2, 3, 4]) == True\n    assert common_elements([1, 2, 3], [2, 3, 5]) == False\n    assert common_elements([1, 2, 3], [1, 4, 5]) == False",
    "def has_common_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    for i in l1:\n        for j in l2:\n            if i == j:\n                return True\n    return False",
    "def common_elements(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\nif __name__ == '__main__':\n    list1 = [1,2,3,4,5,6,7]\n    list2 = [1,2,3,4,5,6,7]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4]\n    list2 = [1,2,3,4,5,6,7]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7]\n    list2 = [1,2,3,4,5,6,7,8]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7,8]\n    list2 = [1,2,3,4,5,6,7,8]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7,8]\n    list2 = [1,2,3,4,5,6,7,8,9]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7,8,9]\n    list2 = [1,2,3,4,5,6,7,8,9]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7,8,9]\n    list2 = [1,2,3,4,5,6,7,8,9,10]\n    print(common_elements(list1, list2))\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    list2 = [1,2,3,4,5,6,7,8,9,10]",
    "def lists_have_common_elements(list1, list2):\n    return sum(i for i, x in enumerate(list1) if x in list2) > 0\n\n#Test cases\nassert lists_have_common_elements([1,2,3,4], [1,2,3,4,5]) == True\nassert lists_have_common_elements([1,2,3], [1,2,3,4,5]) == False\nassert lists_have_common_elements([1,2,3], [1,2,3,4]) == True\nassert lists_have_common_elements([1,2,3], [1,2,3,4,5,6]) == False\nassert lists_have_common_elements([1,2,3], [1,2,3,4,5,6,7]) == True\nassert lists_have_common_elements([1,2,3,4], [1,2,3,4,5]) == False\nassert lists_have_common_elements([1,2,3,4,5], [1,2,3,4,5,6]) == True\nassert lists_have_common_elements([1,2,3,4,5], [1,2,3,4,5,6,7]) == True\nassert lists_have_common_elements([1,2,3,4,5], [1,2,3,4,5,6,7,8]) == False\nassert lists_have_common_elements([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]) == False\nassert lists_have_common_elements([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == False\n\n#Your code\n\n# End of test cases",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isIntersecting(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: bool\n        \"\"\"\n        # TODO: write your code here.\n        if headA is None or headB is None:\n            return False\n\n        while headA is not None:\n            if headA.val == headB.val:\n                headA = headA.next\n                headB = headB.next\n            else:\n                return False\n\n        while headB is not None:\n            if headA.val == headB.val:\n                headA = headA.next\n                headB = headB.next\n            else:\n                return False\n\n        return True",
    "def common(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return False\n\n    for i in range(len(a)):\n        if a[i] in b:\n            return True\n    return False",
    "def lists_intersect(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(lists_intersect(list1, list2))",
    "# https://leetcode.com/problems/common-elements-in-two-lists/\n\nimport unittest\n\nclass Solution(object):\n    def common_elements(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A) == 0 or len(B) == 0:\n            return False\n        return set(A) & set(B)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/common-elements-in-two-lists/solution/\n\n# 1ms 100%\nclass Solution {\n    public boolean commonElements(int[] A, int[] B) {\n        return new HashSet<>(Arrays.asList(A)).containsAll(Arrays.asList(B));\n    }\n}\n\n# 3ms 100%\nclass Solution {\n    public boolean commonElements(int[] A, int[] B) {\n        Set<Integer> setA = new HashSet<>(Arrays.asList(A));\n        Set<Integer> setB = new HashSet<>(Arrays.asList(B));\n        return setA.containsAll(setB);\n    }\n}\n'''",
    "def common(l1, l2):\n    for x in l1:\n        if x in l2:\n            return True\n    return False\n\nprint(common([1, 2, 3], [3, 4, 5]))",
    "def has_common_elements(first, second):\n    for i in first:\n        if i in second:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    first = [1, 2, 3]\n    second = [1, 3, 5]\n    print(has_common_elements(first, second))",
    "def common_elements(list1, list2):\n    # write your code here\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    return common\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 3, 4, 5]\n    common = common_elements(list1, list2)\n    print(common)",
    "# Thought: https://leetcode.com/problems/common-subsequence/solution/\n\n# DFS\nclass Solution(object):\n    def hasSubsequence(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums1) == 0:\n            return False\n        if len(nums2) == 0:\n            return False\n        if len(nums1) < len(nums2):\n            return self.hasSubsequence(nums2, nums1)\n        for i in range(len(nums1)):\n            if nums1[i] in nums2:\n                return True\n        return False",
    "import unittest\n\n\ndef has_common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(list1.intersection(list2)) > 0\n\nclass TestFunctions(unittest.TestCase):\n    def test_has_common_elements(self):\n        self.assertTrue(has_common_elements([1,2,3,4], [3,2,1,4,5]))\n        self.assertTrue(has_common_elements([1,2,3,4], [1,2,3,4,5]))\n        self.assertFalse(has_common_elements([1,2,3,4], [1,2,3]))\n        self.assertFalse(has_common_elements([1,2,3,4], [1,2,3,4,5,6]))\n        self.assertTrue(has_common_elements([1,2,3,4], []))\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def common_elements(l1, l2):\n    \"\"\"\n    :type l1: list\n    :type l2: list\n    :rtype: bool\n    \"\"\"\n    return len(set(l1) & set(l2)) > 0\n\n# Your CommonElements solution goes here.",
    "def common_elements(list1, list2):\n    return len(set(list1).intersection(list2)) > 0\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3], [2, 3, 4])\n    assert common_elements([1, 2, 3], [2, 4])\n    assert common_elements([1, 2, 3], [2, 3])\n    assert common_elements([1, 2, 3], [1, 2, 3])\n    assert common_elements([1, 2, 3], [2, 3, 4])",
    "# https://leetcode.com/problems/common-subsequence/description/\n\nclass Solution(object):\n    def hasCommonElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        # two pointers\n        # if both pointers are at the end of the lists, the lists have no common elements\n        # if not, the lists have a common element\n        if len(nums1) == 0 or len(nums2) == 0:\n            return False\n\n        # if the first pointer is at the end of the list, there is no common element\n        if nums1[0] == nums2[0]:\n            return False\n\n        # if the first pointer is not at the end of the list, the lists have no common elements\n        if nums1[0]!= nums2[0]:\n            return False\n\n        # the common element is in the list\n        return True\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    nums1 = [1, 2, 3]\n    nums2 = [1, 2, 3, 4]\n\n    print solution.hasCommonElement(nums1, nums2)",
    "",
    "# Write your code here\n\ndef common_elements(list1, list2):\n    return all(x in list2 for x in list1)\n\nprint common_elements([1, 2, 3], [4, 5, 6])\n#>>> True\n\nprint common_elements([1, 2, 3], [1, 2, 3])\n#>>> False\n\nprint common_elements([1, 2, 3], [3, 4, 5])\n#>>> False\n\nprint common_elements([1, 2, 3], [4, 5, 6])\n#>>> True\n\nprint common_elements([1, 2, 3], [4, 5, 6, 7])\n#>>> False\n\nprint common_elements([1, 2, 3], [1, 2, 3, 4])\n#>>> True",
    "def common_elements(first_list, second_list):\n    if len(first_list)!= len(second_list):\n        return False\n    for element in first_list:\n        if element in second_list:\n            return True\n    return False",
    "def has_common_elements(l1, l2):\n\tfor x in l1:\n\t\tif x in l2:\n\t\t\treturn True\n\treturn False",
    "# https://www.hackerrank.com/challenges/find-common-elements/problem\n\n#!/usr/bin/env python\n\nimport sys\n\n\ndef common_elements(first_list, second_list):\n    common_elements_set = set(first_list) & set(second_list)\n    if len(common_elements_set) == 0:\n        return False\n    return True\n\nif __name__ == '__main__':\n    input_first_list = sys.stdin.readline().strip().split(' ')\n    input_second_list = sys.stdin.readline().strip().split(' ')\n    result = common_elements(input_first_list, input_second_list)\n    sys.stdout.write(str(result) + '\\n')",
    "def common_elements(a, b):\n    \"\"\"\n    >>> common_elements([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    >>> common_elements([1, 2, 3, 4], [1, 3, 4, 5])\n    False\n    >>> common_elements([1, 2, 3, 4], [1, 2, 4, 5])\n    True\n    \"\"\"\n    return a.count(b[0]) == b.count(a[0])",
    "def common(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(a) < 1 or len(b) < 1:\n        return False\n    return set(a).intersection(set(b))\n\nif __name__ == \"__main__\":\n    assert(common([1, 2, 3], [1, 3, 4]) == True)\n    assert(common([1, 2, 3], [1, 2, 3]) == True)\n    assert(common([1, 2, 3], [4, 5, 6]) == False)\n    assert(common([1, 2, 3], [4, 5, 6, 7]) == False)\n    assert(common([1, 2, 3, 4], [1, 3, 4, 5]) == False)",
    "def common_elements(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3, 4], [2, 3, 4, 5]) == True\n    assert common_elements([1, 2, 3], [2, 3, 4, 5]) == False\n    assert common_elements([1, 2, 3, 4], []) == False\n    assert common_elements([], []) == True\n    assert common_elements([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert common_elements([1, 2, 3, 4], [1, 2, 4, 5]) == False",
    "import unittest\n\ndef has_common_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(set(l1).intersection(l2)) > 0\n\nclass TestHasCommonElements(unittest.TestCase):\n    def test_has_common_elements(self):\n        self.assertTrue(has_common_elements([1, 2], [1, 2, 3]))\n        self.assertFalse(has_common_elements([1, 2], [1, 3]))\n        self.assertTrue(has_common_elements([1, 2], [3, 4]))\n        self.assertFalse(has_common_elements([1, 2], [3, 4, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def common_elements(list1, list2):\n    for elt in list1:\n        if elt in list2:\n            return True\n    return False",
    "#\n# Write a function that takes two lists and returns true if they have at least one common element.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a list.\n#\n\n#\n# This is the same as the previous problem, but the second list is a set, and the first list is a list.\n#\n\n#\n# This is the same as the previous problem, but the second list is a set, and the first list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is the same as the previous problem, but the first list is a set, and the second list is a set.\n#\n\n#\n# This is",
    "# https://pt.stackoverflow.com/q/105077/101\n\ndef common(list_1, list_2):\n    if len(list_1) == 0 or len(list_2) == 0:\n        return False\n    for elem in list_1:\n        if elem in list_2:\n            return True\n    return False\n\n# https://pt.stackoverflow.com/q/105077/101\n\ndef common(list_1, list_2):\n    if len(list_1) == 0 or len(list_2) == 0:\n        return False\n    for elem in list_1:\n        if elem in list_2:\n            return True\n    return False",
    "def is_common(list1, list2):\n    \"\"\"\n    Args:\n        list1: A list\n        list2: A list\n\n    Returns:\n        True if the two lists share at least one element. False otherwise.\n    \"\"\"\n    if len(list1) < 1 or len(list2) < 1:\n        return False\n    return set(list1) & set(list2) == set(list1)\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_common([1,2,3,4], [2,3,4,5]), \"Example 1\"\n    assert is_common([1,2,3], [2,3,4,5]), \"Example 2\"\n    assert is_common([1,2,3,4], [1,2,3,4]), \"Example 3\"\n    assert is_common([1], [2,3,4,5]), \"Example 4\"\n    assert is_common([], [1,2,3,4,5]), \"Example 5\"\n    assert is_common([], []), \"Example 6\"",
    "def is_common(l1, l2):\n    # +++your code here+++\n    for i in l1:\n        if i in l2:\n            return True\n    return False",
    "def common_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    return any(x in l1 and x in l2 for x in l1)",
    "#!/usr/bin/python\n\ndef has_common_elements(first_list, second_list):\n    for item in first_list:\n        if item in second_list:\n            return True\n    return False\n\nprint has_common_elements([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"])",
    "# https://www.hackerrank.com/challenges/list-comprehension/problem\n\n# First list\nlist1 = [1,2,3,4]\n\n# Second list\nlist2 = [3,4,5,6]\n\n# This is the function that needs to be modified\ndef has_common_elements(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_2(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_3(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_4(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_5(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_6(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_7(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_8(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# This is the function that needs to be modified\ndef has_common_elements_9(list1, list2):",
    "def common_elements(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 4, 5]\n    print(common_elements(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# from CommonClasses import Common\nimport collections\n\n\nclass Solution(object):\n    def isIntersecting(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        if len(nums1) == 0 or len(nums2) == 0:\n            return False\n        intersection = collections.defaultdict(int)\n        for i in range(len(nums1)):\n            intersection[nums1[i]] += 1\n        for i in range(len(nums2)):\n            intersection[nums2[i]] += 1\n        for i in range(len(nums1)):\n            if intersection[nums1[i]] >= len(nums2):\n                return True\n        return False",
    "def common(l1, l2):\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n\n# Test cases\nprint(common(range(5), range(5)))\nprint(common(range(10), range(5)))\nprint(common(range(3), range(2)))\nprint(common(range(2), range(3)))\nprint(common(range(1, 6), range(5, 6)))\nprint(common(range(1, 6), range(6, 7)))\nprint(common(range(1, 6), range(6, 7, 2)))",
    "def has_common(first_list, second_list):\n    for first_item in first_list:\n        if first_item in second_list:\n            return True\n    return False\n\n# https://www.hackerrank.com/challenges/two-lists/problem\n# Challenge: Two Lists\n# \n# The first list is a list of integers.\n# The second list is a list of integers.\n# \n# Return true if the two lists have at least one common element.\n# \n# \n# Example 1:\n# \n# Input: first_list = [1,2,3,4], second_list = [2,4,5,6]\n# Output: true\n# \n# \n# Example 2:\n# \n# Input: first_list = [1,2,3], second_list = [2,3,4]\n# Output: false\n# \n# \n# Example 3:\n# \n# Input: first_list = [1,2,3], second_list = []\n# Output: true\n# \n# \n# Example 4:\n# \n# Input: first_list = [], second_list = [1,2,3]\n# Output: false\n# \n# \n# Example 5:\n# \n# Input: first_list = [], second_list = []\n# Output: true\n# \n# \n# Constraints:\n# \n# \n# 1 <= first_list.length <= 100\n# 1 <= second_list.length <= 100\n# first_list.length == second_list.length\n# first_list and second_list are both lists of integers.\n# \n# \n# \n# Company Tags:\n# \n# \n# Tags: Math, Two Pointers\n# \n# Similar Problems: (M) Two Sum\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
    "def common(list1, list2):\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print common([\"a\", \"b\", \"c\"], [\"c\", \"d\"])\n    print common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"])\n    print common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"d\"])\n    print common([\"a\", \"b\", \"c\"], [\"a\", \"d\", \"d\"])\n    print common([\"a\", \"b\", \"c\"], [\"b\", \"a\", \"d\"])",
    "# https://www.hackerrank.com/challenges/common-elements/problem\n\nimport unittest\n\ndef common_elements(first, second):\n    common = 0\n    for x in first:\n        for y in second:\n            if x == y:\n                common += 1\n    return common\n\n\nclass TestCode(unittest.TestCase):\n    def test_common_elements(self):\n        self.assertEqual(common_elements([1, 2, 3], [1, 2, 4]), 2)\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def lists_have_common_elements(list1, list2):\n    for i in range(0, len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\nprint(lists_have_common_elements([1, 2, 3], [2, 2, 3]))\nprint(lists_have_common_elements([1, 2, 3], [1, 2]))\nprint(lists_have_common_elements([1, 2, 3], [1, 2, 3]))\nprint(lists_have_common_elements([1, 2, 3], [1, 3, 2]))\nprint(lists_have_common_elements([1, 2, 3], [1, 2, 3, 4]))",
    "def common_elements(list1, list2):\n    for x in list1:\n        if x in list2:\n            return True\n    return False",
    "def has_common(lst1, lst2):\n    for i in lst1:\n        if i in lst2:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4,5]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4,5]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4,5]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4,5]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4,5]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4,5]\n    lst2 = [2,3,4]\n    print(has_common(lst1, lst2))\n    lst1 = [1,2,3,4]\n    lst2 = [2,3,4,5]\n    print(has_common(lst1, lst2))\n    lst1 =",
    "def common(a, b):\n    for i in a:\n        if i in b:\n            return True\n    return False\n\nprint common([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\nprint common([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7])",
    "def common_element(l1, l2):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :return: bool\n    \"\"\"\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n\nl1 = ['a', 'b', 'c']\nl2 = ['a', 'b', 'd']\n\nprint common_element(l1, l2)",
    "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def hasCommonNode(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if not l1 or not l2:\n            return False\n        while l1 and l2:\n            if l1 == l2:\n                return True\n            l1 = l1.next\n            l2 = l2.next\n        return False\n\n    def hasCommonNode1(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if not l1 or not l2:\n            return False\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                return True\n        return False\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l1.next = l2\n    l2.next = l1\n    l1 = ListNode(3)\n    l2 = ListNode(4)\n    l1.next = l2\n    l2.next = l1\n    l1 = ListNode(5)\n    l2 = ListNode(6)\n    l1.next = l2\n    l2.next = l1\n    l1 = ListNode(7)\n    l2 = ListNode(8)\n    l1.next = l2\n    l2.next = l1\n    l1 = ListNode(9)\n    l2 = ListNode(10)\n    l1.next = l2\n    l2.next = l1\n    l1 = ListNode(11)\n    l2 = ListNode(12)\n    l1.next = l2\n    l2.next = l1",
    "def is_common(l1, l2):\n\t\"\"\"\n\tInput:\n\t\tl1, l2: lists of integers\n\tOutput:\n\t\ttrue if there is at least one common element in l1 and l2, false otherwise\n\t\"\"\"\n\tfor i in range(0,len(l1)):\n\t\tif l1[i] in l2:\n\t\t\treturn True\n\treturn False\n\ndef main():\n\tl1 = [1,2,3]\n\tl2 = [1,3]\n\n\tprint(is_common(l1, l2))\n\nmain()",
    "# https://www.hackerrank.com/challenges/two-lists-intersection\n\ndef has_intersection(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nif __name__ == '__main__':\n    test_cases = [\n        [[\"b\", \"a\", \"d\"], [\"c\", \"a\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"a\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"a\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"a\", \"c\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"b\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"a\", \"c\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"b\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"b\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"b\", \"c\"]],\n        [[\"a\", \"a\", \"a\"], [\"a\", \"c\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"a\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"a\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"a\", \"c\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"b\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"b\", \"b\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"b\", \"c\"]],\n        [[\"a\", \"a\", \"a\"], [\"b\", \"c\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"c\", \"a\", \"a\"]],\n        [[\"a\", \"a\", \"a\"], [\"c\", \"",
    "def common(l1, l2):\n    \"\"\"\n    :type l1: list\n    :type l2: list\n    :rtype: bool\n    \"\"\"\n    if len(l1) == 0 or len(l2) == 0:\n        return False\n\n    for i in range(0, len(l1)):\n        if l1[i] in l2:\n            return True\n\n    return False",
    "# https://www.hackerrank.com/challenges/two-arrays/problem\n\n# Complete the twoArrays function below.\ndef twoArrays(a, b):\n    # Write your code here\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3]\n    arr2 = [2, 3, 4]\n    print(twoArrays(arr1, arr2))",
    "def has_common_elements(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nprint(has_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(has_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]))\nprint(has_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 7]))",
    "def has_common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return any(item in list1 for item in list2)\n\n# +++your code here+++\n# Write output\n#print has_common_elements([1, 2, 3], [2, 3, 4])\nprint has_common_elements([1, 2, 3], [2, 4])",
    "# https://stackoverflow.com/questions/27307521/how-to-check-if-one-list-has-all-elements-of-another\n# https://stackoverflow.com/questions/34464563/how-to-check-if-two-lists-have-common-elements\n# https://stackoverflow.com/questions/15335870/how-to-check-if-two-lists-have-common-elements\n\ndef common_elements(list_1, list_2):\n    return list(set(list_1) & set(list_2))\n\n# list_1 = [1, 2, 3, 4]\n# list_2 = [2, 3, 4, 5]\n# print(common_elements(list_1, list_2))\n\n# list_1 = [1, 2, 3, 4]\n# list_2 = [3, 4, 5, 6]\n# print(common_elements(list_1, list_2))\n\nlist_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nprint(common_elements(list_1, list_2))",
    "def has_common_elements(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(first) == 0 or len(second) == 0:\n        return False\n    \n    for elem in first:\n        if elem in second:\n            return True\n    return False\n\n\n# if you want to test your solution, just uncomment these lines\n# first = [1, 2, 3]\n# second = [1, 2, 3, 4]\n# assert has_common_elements(first, second) == True\n# first = [1, 2, 3]\n# second = [3, 4, 5]\n# assert has_common_elements(first, second) == False",
    "# Import Modules\nimport collections\n\n# Create Function\ndef has_common_elements(list1, list2):\n\t\"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n\treturn set(list1).intersection(set(list2))\n\n# Test Cases\n\n# Output\nprint has_common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint has_common_elements([1,2,3], [1,2,3])\n#>>> False\n\nprint has_common_elements([1,2,3], [1,2,4])\n#>>> False\n\nprint has_common_elements([1,2,3], [1,2,3,4])\n#>>> True\n\n# Output\nprint has_common_elements([1,2,3], [1,2,3,4,5])\n#>>> False\n\nprint has_common_elements([1,2,3,4,5], [1,2,3,4,5])\n#>>> True",
    "",
    "from collections import Counter\n\ndef has_common(list1, list2):\n    return len(list1 & list2)!= 0\n\n# +++your code here+++\n# Example:\n\n# has_common([1, 2, 3], [2, 3, 4]) -> True\n# has_common([1, 2, 3], [7]) -> False\n\ndef has_common(list1, list2):\n    return len(list1 & list2)!= 0",
    "def common_elements(first_list, second_list):\n    for first_element in first_list:\n        if first_element in second_list:\n            return True\n    return False\n\nprint common_elements([1, 2, 3], [2, 4, 5])",
    "def common_elements(list_1, list_2):\n    for item in list_1:\n        if item in list_2:\n            return True\n    return False\n\n# Test Cases\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [1,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [1,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2,3,4])\n#>>> True\n\nprint common_elements([1,2,3], [2,3,5])\n#>>> False\n\nprint common_elements([1,2,3], [2",
    "# https://www.hackerrank.com/challenges/two-lists-common-elements/problem\n\ndef common_elements(list1, list2):\n    return len(list1) >= len(list2) and list1.count(list2[0]) >= 1",
    "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCommonElement(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        # if one of the lists is empty, return false\n        if l1 == None or l2 == None:\n            return False\n        # keep track of the current node\n        curr = l1\n        # keep track of the next node\n        next = l2\n        # if both lists have the same length, compare the values of the current node\n        while curr!= None and next!= None:\n            if curr.val!= next.val:\n                return False\n            curr = curr.next\n            next = next.next\n        # if we've reached the end of both lists, return true\n        return True",
    "# https://www.hackerrank.com/challenges/two-lists-common-elements/problem\n\ndef common_elements(a, b):\n    return len(set(a) & set(b)) > 0\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6]\n    b = [1, 2, 3, 4, 5]\n    print(common_elements(a, b))\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4]\n    print(common_elements(a, b))\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(common_elements(a, b))\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 5]\n    print(common_elements(a, b))\n    a = [1, 2, 3, 5]\n    b = [1, 2, 3, 4]\n    print(common_elements(a, b))\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(common_elements(a, b))",
    "def has_common_elements(list1, list2):\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(has_common_elements([1, 2, 3], [2, 4, 5]))\n    print(has_common_elements([1, 2, 3], [1, 2, 3]))",
    "",
    "def has_common(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n\n    return False",
    "# https://www.hackerrank.com/challenges/lists-are-equal\n\n# Note: if the lists are of different length, the function should return false.\n# Example 1:\n#   Input: list 1: [1, 2, 3], list 2: [2, 3, 4]\n#   Output: True\n#   Explanation: The two lists have at least one common element: 2\n# Example 2:\n#   Input: list 1: [1, 2, 3], list 2: [1, 2]\n#   Output: False\n#   Explanation: The two lists don't have any common elements.\n# Example 3:\n#   Input: list 1: [], list 2: []\n#   Output: True\n#   Explanation: The two lists are empty.\n# Example 4:\n#   Input: list 1: [1, 2, 3], list 2: [4, 5, 6]\n#   Output: False\n#   Explanation: The lists don't have any common elements.\n# Note:\n#   The length of the inputs will be in the range [1, 100].\n#   The length of the inputs will be in the range [1, 10].\n#   The length of the inputs will not be in the range [0, 1].\n#   Each list's elements will be in the range [1, 100].\n#   All inputs will be unique.\n#   The lists do not contain duplicates.\n\n# my solution\ndef has_common_elements(a, b):\n    for i in range(len(a)):\n        if a[i] in b:\n            return True\n    return False\n\n# my solution:\n#   1. remove duplicates\n#   2. find the first common element\n#   3. return if there is one\n#   4. return false\ndef has_common_elements2(a, b):\n    # remove duplicates\n    a = list(set(a))\n    # find the first common element\n    for i in range(len(a)):\n        if a[i] in b:\n            return True\n    return False\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-",
    "# https://www.hackerrank.com/challenges/list-common-elements/problem\n\ndef common_elements(first, second):\n    for first_element in first:\n        if first_element in second:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    first = [1, 2, 3]\n    second = [1, 2, 3, 4]\n    print(common_elements(first, second))",
    "import unittest\n\nclass Solution:\n    # @return a boolean\n    def isIntersect(self, list1, list2):\n        return len(list1 & list2) > 0\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/is-intersect-two-linked-lists/solution/\n#\nApproach #1: Recursion [Accepted]\nComplexity Analysis\nTime Complexity: O(m+n), where m is the length of the first list, and n is the length of the second list.\nSpace Complexity: O(m+n).\n\n# 8ms 100%\nclass Solution {\n    public boolean isIntersect(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) return false;\n        ListNode a = headA;\n        ListNode b = headB;\n        while (a!= null && b!= null) {\n            if (a.val == b.val) {\n                a = a.next;\n                b = b.next;\n            } else if (a.val < b.val) {\n                a = a.next;\n            } else {\n                b = b.next;\n            }\n        }\n        return a!= null || b!= null;\n    }\n}\n\nApproach #2: DP [Accepted]\nComplexity Analysis\nTime Complexity: O(m+n), where m is the length of the first list, and n is the length of the second list.\nSpace Complexity: O(m+n).\n\n# 9ms 100%\nclass Solution {\n    public boolean isIntersect(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) return false;\n        int m = 0;\n        int n = 0;\n        while (headA!= null) {\n            m++;\n            headA = headA.next;\n        }\n        while (head",
    "def common(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
    "# Write your code here\n\ndef have_common(x, y):\n    for i in range(0, len(x)):\n        if y.count(x[i]) > 0:\n            return True\n    return False\n\n\n# if have_common([1,2,3,4], [2,3,4,5]) == True:\n#     print \"Yes\"\n# else:\n#     print \"No\"\n\nx = [1,2,3,4]\ny = [2,3,4,5]\n\nif have_common(x, y) == True:\n    print \"Yes\"\nelse:\n    print \"No\"",
    "def lists_have_common_elements(a, b):\n    # write your code here\n    return a.count(b[0]) > 0 or b.count(a[0]) > 0\n\n# tests\n\nassert lists_have_common_elements([1, 2, 3], [1, 2, 3]) == True\nassert lists_have_common_elements([1, 2, 3], [3, 4, 5]) == False\nassert lists_have_common_elements([1, 2, 3], [1, 2, 4]) == False\nassert lists_have_common_elements([1, 2, 3], [2, 3, 4]) == False",
    "",
    "from collections import defaultdict\nfrom functools import reduce\n\n\ndef common_elements(list_1, list_2):\n    return reduce(lambda x, y: x and y, map(lambda x: x in list_2, list_1))\n\n\ndef test_common_elements():\n    assert common_elements([1, 2, 3], [2, 3, 4])\n    assert common_elements([1, 2, 3], [1, 2, 3])\n    assert not common_elements([1, 2, 3], [4, 5])\n\n\nif __name__ == '__main__':\n    test_common_elements()",
    "def lists_have_common_elements(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\nprint lists_have_common_elements([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"])",
    "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCommonElement(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if not l1 or not l2:\n            return False\n        if l1.val == l2.val:\n            return True\n        for node in l1:\n            if node in l2:\n                return True\n        return False",
    "def common_element(list1, list2):\n    \"\"\"\n    Return True if list1 and list2 have at least one common element.\n\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\nprint(common_element([1, 2, 3], [2, 3, 4]))\nprint(common_element([1, 2, 3], [2, 3, 5]))\nprint(common_element([1, 2, 3], [1, 3, 5]))\nprint(common_element([1, 2, 3], [1, 3, 5, 7]))\nprint(common_element([1, 2, 3], [2, 3, 5, 7]))\nprint(common_element([1, 2, 3], [2, 3, 5, 7, 11]))",
    "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3], [1, 2, 3, 4]))",
    "def common_elements(list_1, list_2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n\n    Example:\n        >>> common_elements([1, 2, 3, 4], [2, 3, 4, 5])\n        True\n        >>> common_elements([1, 2, 3, 4], [2, 3, 5, 6])\n        False\n        >>> common_elements([1, 2, 3, 4], [2, 3, 4])\n        True\n    \"\"\"\n    return list_1.count(list_2[0]) == len(list_2)",
    "# http://www.geeksforgeeks.org/write-a-function-that-takes-two-lists-and-returns-true-if-they-have-at-least-one-common-element/\n\ndef common_elements(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nprint common_elements([1,2,3], [1,2,3,4])\nprint common_elements([1,2,3], [1,2,3,4,5])\nprint common_elements([1,2,3], [1,2,3,4,5,6])",
    "def common_elements(list1, list2):\n    return len(list1 & list2) > 0\n\nprint(common_elements([\"A\", \"B\", \"C\"], [\"B\", \"C\", \"D\"]))",
    "# 1. Create a function that takes two lists and returns true if they have at least one common element.\ndef has_common_elements(lst1, lst2):\n    # 2. Create a dictionary with all elements of lst1 as keys and all elements of lst2 as values.\n    dic1 = {x:1 for x in lst1}\n    dic2 = {x:1 for x in lst2}\n    # 3. Create a set of all elements of lst1 and all elements of lst2.\n    set1 = set(lst1)\n    set2 = set(lst2)\n    # 4. Create a boolean variable that will be returned.\n    common_elements = False\n    # 5. If set1 and set2 are equal, return true.\n    if set1 == set2:\n        return True\n    # 6. If set1 and set2 are not equal, check if one of them contains all elements in the other set.\n    for el in set1.intersection(set2):\n        if dic1.get(el) == dic2.get(el):\n            common_elements = True\n            break\n    # 7. If both sets are not equal, return false.\n    return common_elements\n\n\n# 8. Create a function that takes two lists and returns the size of the largest list.\ndef largest_list_size(lst1, lst2):\n    # 9. Create a list of the largest list.\n    largest_list = [x for x in lst1 if x in lst2]\n    # 10. Return the size of the largest list.\n    return len(largest_list)\n\n\n# 11. Create a function that takes a list and returns the size of the smallest list.\ndef smallest_list_size(lst1, lst2):\n    # 12. Create a list of the smallest list.\n    smallest_list = [x for x in lst1 if x not in lst2]\n    # 13. Return the size of the smallest list.\n    return len(smallest_list)\n\n\n# 14. Create a function that takes two lists and returns the size of the smallest list.\ndef smallest_list_size_from",
    "def common(l1, l2):\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return common\n\nassert common(['a', 'b'], ['a', 'b']) == ['a', 'b']\nassert common(['a', 'b'], ['a', 'c']) == []\nassert common(['a', 'b'], ['b', 'a']) == ['a']\nassert common(['a', 'b'], ['c', 'a']) == []\nassert common(['a', 'b'], ['c', 'b']) == []\nassert common(['a', 'b'], ['c', 'c']) == []\nassert common(['a', 'b'], ['a', 'c']) == []\nassert common(['a', 'b'], ['b', 'a']) == []\nassert common(['a', 'b'], ['b', 'b']) == []\nassert common(['a', 'b'], ['c', 'c']) == []\nassert common(['a', 'b'], ['d', 'c']) == []\nassert common(['a', 'b'], ['d', 'd']) == []\nassert common(['a', 'b'], ['a', 'a']) == []\nassert common(['a', 'b'], ['b', 'b']) == []\nassert common(['a', 'b'], ['c', 'a']) == []\nassert common(['a', 'b'], ['c', 'b']) == []\nassert common(['a', 'b'], ['c', 'c']) == []\nassert common(['a', 'b'], ['a', 'a']) == []\nassert common(['a', 'b'], ['b', 'b']) == []\nassert common(['a', 'b'], ['c', 'c']) == []\nassert common(['a', 'b'], ['d', 'a']) == []\nassert common(['a', 'b'], ['d', 'b']) == []\nassert common(['a', 'b'], ['d', 'c']) == []",
    "# https://www.hackerrank.com/challenges/common-elements-in-two-lists\n# https://www.geeksforgeeks.org/find-common-elements-two-lists/\n# https://www.geeksforgeeks.org/find-common-elements-two-lists-with-python/\n# https://www.geeksforgeeks.org/count-common-elements-two-lists/\n# https://www.geeksforgeeks.org/write-a-function-to-find-the-common-elements-of-two-lists/\n\n# TODO: Optimize the algorithm\n\ndef common_elements(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem in b:\n            count += 1\n    return count > 0\n\n\n# TODO: Optimize the algorithm\ndef common_elements_2(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem in b:\n            count += 1\n    return count > 0\n\n\n# TODO: Optimize the algorithm\ndef common_elements_3(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem in b:\n            count += 1\n    return count > 0\n\n\n# TODO: Optimize the algorithm\ndef common_elements_4(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem in b:\n            count += 1\n    return count > 0\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3]",
    "# https://www.hackerrank.com/challenges/common-elements-in-two-lists/problem\n\n# Example\n# Given lists [[1, 2, 3], [2, 3, 4]] and [[1, 2], [2, 3]],\n# return true.\n\n# Example\n# Given lists [[1, 2, 3], [2, 3, 4]] and [[1, 2], [2, 3, 4]],\n# return false.\n\ndef common_elements(a, b):\n    # Write your code here\n    if len(a) == 0 or len(b) == 0:\n        return False\n    else:\n        return a.count(b[0]) >= 1\n\n# Testcases\na = [[1, 2, 3], [2, 3, 4]]\nb = [[1, 2], [2, 3]]\nassert common_elements(a, b) == True\na = [[1, 2, 3], [2, 3, 4]]\nb = [[1, 2], [2, 3]]\nassert common_elements(a, b) == False",
    "# https://www.hackerrank.com/challenges/common-elements-in-two-lists\n\ndef common_elements(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [2, 3, 4]\n    print(common_elements(list1, list2))",
    "def common_elements(l1, l2):\n    \"\"\"\n    :type l1: list\n    :type l2: list\n    :rtype: bool\n    \"\"\"\n    for x in l1:\n        if x in l2:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4]\n    assert common_elements(l1, l2) == True\n    l1 = [1, 2, 3]\n    l2 = [2, 3, 4]\n    assert common_elements(l1, l2) == True\n    l1 = [1, 2, 3]\n    l2 = [4]\n    assert common_elements(l1, l2) == False\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3]\n    assert common_elements(l1, l2) == True\n    l1 = [1, 2, 3]\n    l2 = [2, 3, 4]\n    assert common_elements(l1, l2) == True\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3, 4]\n    assert common_elements(l1, l2) == True\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3, 4]\n    assert common_elements(l1, l2) == False\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3]\n    assert common_elements(l1, l2) == True",
    "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1) > len(list2):\n        return False\n    else:\n        for element in list1:\n            if element in list2:\n                return True\n    return False\n\nprint(common_elements([1, 2, 3], [2, 4, 5]))",
    "def has_common(l1, l2):\n    # write your code here\n    return any(e1 in l2 for e1 in l1)",
    "def lists_intersect(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    \n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\nprint(lists_intersect([1,2,3,4], [3,4,5,6]))\nprint(lists_intersect([1,2,3,4], [4,5,6,7]))\nprint(lists_intersect([1,2,3,4], [1,2,3,4]))\nprint(lists_intersect([1,2,3,4], [1,2,3,4,5,6]))\nprint(lists_intersect([1,2,3,4], [1,2,3,4,5]))\nprint(lists_intersect([1,2,3,4], [1,2,3,4,5,6,7,8]))",
    "#!/usr/bin/env python\n\n# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\nimport unittest\n\nclass TestExample(unittest.TestCase):\n\tdef test_example(self):\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.tutorialspoint.com/python/python_list_list_comparison.htm\n\t\t# REF [site] >> https://www.",
    "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for i in range(0, len(list1)):\n        if list1[i] in list2:\n            return True\n\n    return False\n\nclass Solution(object):\n    def commonElements(self, list1, list2):\n        \"\"\"\n        :type list1: List[int]\n        :type list2: List[int]\n        :rtype: bool\n        \"\"\"\n        return common_elements(list1, list2)",
    "def common_elements(list1, list2):\n    \"\"\"\n    list1 and list2 are two lists of unique elements.\n    Return True if they have at least one common element, and False otherwise.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\nprint(common_elements([1, 2, 3, 4], [1, 3, 5, 6]))\n#>>> True\nprint(common_elements([1, 2, 3, 4], [1, 3, 5, 6, 7]))\n#>>> False",
    "def common(a, b):\n    for a_i in a:\n        for b_i in b:\n            if a_i == b_i:\n                return True\n    return False\n\nassert common([1, 2, 3], [1, 2, 3, 4]) == True\nassert common([1, 2], [1, 2, 3, 4]) == False\nassert common([1, 2], [1, 2, 3]) == True\nassert common([1], [1, 2, 3]) == False\nassert common([1], [1, 2, 3]) == True",
    "def common_elements(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False",
    "def has_common_elements(list1, list2):\n    # write your code here\n    common = []\n    for item in list1:\n        if item in list2:\n            common.append(item)\n\n    return len(common) > 0\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print has_common_elements(list1, list2)",
    "# https://www.hackerrank.com/challenges/two-lists-common-elements/problem\n\ndef is_common(a, b):\n    for item in a:\n        if item in b:\n            return True\n    return False\n\na = [1, 2, 3, 4, 5, 6]\nb = [2, 3, 4, 5, 6, 7]\n\nprint(is_common(a, b))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}