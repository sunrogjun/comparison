{
  "problem": {
    "task_id": "MBPP/89",
    "prompt": "Write a function to find the closest smaller number than n.",
    "canonical_solution": "def closest_num(N):\r\n  return (N - 1)",
    "test_list": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ],
    "challenge_test_list": [],
    "problem_id": 78
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from math import ceil\n\n\ndef closest_smaller_number(n):\n    if n <= 0:\n        return 0\n    if n < 10:\n        return n\n    return closest_smaller_number(n//10) + n%10\n\nif __name__ == '__main__':\n    assert closest_smaller_number(1) == 1\n    assert closest_smaller_number(10) == 10\n    assert closest_smaller_number(100) == 10\n    assert closest_smaller_number(1000) == 10\n    assert closest_smaller_number(1001) == 1\n    assert closest_smaller_number(1010) == 10\n    assert closest_smaller_number(1010) == 10\n    assert closest_smaller_number(1099) == 10\n    assert closest_smaller_number(1100) == 10\n    assert closest_smaller_number(9999) == 9999\n    assert closest_smaller_number(10000) == 9999\n    assert closest_smaller_number(10001) == 1\n    assert closest_smaller_number(10010) == 10\n    assert closest_smaller_number(10011) == 1\n    assert closest_smaller_number(10012) == 1\n    assert closest_smaller_number(10099) == 10\n    assert closest_smaller_number(10100) == 10\n    assert closest_smaller_number(10101) == 1\n    assert closest_smaller_number(10102) == 1\n    assert closest_smaller_number(10199) == 10\n    assert closest_smaller_number(10200) == 10\n    assert closest_smaller_number(10201) == 1\n    assert closest_smaller_number(10202) == 1\n    assert closest_smaller_number(10999) == 10\n    assert closest_smaller_number(10000) == 10\n    assert closest_smaller_number(10001) == 1\n    assert closest_smaller_number(10010) == 10\n    assert closest_smaller_number(10011) == 1\n    assert closest_smaller_number(10012) == 1\n    assert closest_smaller_number(10099) ==",
    "def closest_smaller_number(n):\n    \"\"\"\n    n is an int.\n    Return the closest smaller number to n.\n    \"\"\"\n    ans = n\n    while n > 0:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n = n - 1\n    return ans\n\ndef test_closest_smaller_number():\n    assert closest_smaller_number(100) == 2\n    assert closest_smaller_number(100000) == 2\n    assert closest_smaller_number(1234567890) == 3\n\nif __name__ == '__main__':\n    test_closest_smaller_number()",
    "# https://leetcode.com/problems/closest-smaller-number-to-target/discuss/166896/Python-C%2B%2B-with-Python-2-7-1-3-solution-and-Java-solution\n# https://leetcode.com/problems/closest-smaller-number-to-target/discuss/81434/Java-solution-using-stack-and-logic-for-closest-smaller-number\n\n# The closest smaller number to target is the smallest number between target and n that is greater than target.\n#\n# For example, if target is 5, the closest smaller number to target is 3.\n# If target is 7, the closest smaller number to target is 3.\n# If target is 9, the closest smaller number to target is 3.\n# If target is 15, the closest smaller number to target is 13.\n#\n# Note:\n# There will be no duplicates in the input array.\n# The input array will not be empty and will have at least one number.\n\nclass Solution(object):\n    def closestSmaller(self, arr, target):\n        \"\"\"\n        :type arr: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        stack = []\n        for x in arr:\n            while stack and stack[-1] > x:\n                stack.pop()\n            stack.append(x)\n        return stack[0] if stack else target\n\n\nif __name__ == '__main__':\n    s = Solution()\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    target = 18\n    print s.closestSmaller(arr, target)\n    print arr",
    "def closest_smaller_number(n):\n    \"\"\"\n    n: integer\n    return: integer\n    \"\"\"\n    while n > 0:\n        if n % 10 == 0:\n            n = n / 10\n        else:\n            n = n / 10 + 1\n\n    return n\n\nif __name__ == \"__main__\":\n    print(closest_smaller_number(100))\n    print(closest_smaller_number(1000))\n    print(closest_smaller_number(10000))",
    "def closest_smaller(n):\n    return min(map(lambda x: x - 1, range(n, 0, -1)))\n\nif __name__ == '__main__':\n    assert closest_smaller(5) == 2\n    assert closest_smaller(100) == 1\n    assert closest_smaller(1000) == 1\n    assert closest_smaller(10000) == 1\n    assert closest_smaller(100000) == 1",
    "# https://www.codewars.com/kata/55e8d5c5b2c8b2b7a9c2c0\n\nimport math\n\ndef closest_smaller_number(number, list):\n    \"\"\"\n    :type number: int\n    :type list: list[int]\n    :rtype: int\n    \"\"\"\n    # check if number is in list\n    for i in list:\n        if number == i:\n            return i\n\n    # if number is not in list, check if it is the closest smaller number\n    closest_smaller_number = None\n    for i in list:\n        if i > number:\n            break\n        elif i == number:\n            closest_smaller_number = i\n        else:\n            closest_smaller_number = i\n\n    return closest_smaller_number\n\n\n\n# Your Closest Smaller Number Kata solution\n# number = 5\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 3\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 4\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 6\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 7\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 9\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 11\n# list = [1, 2, 3, 4, 5]\n# print(closest_smaller_number(number, list))\n\n# number = 12\n# list = [1, 2, 3, 4, 5]\n# print(closest_small",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n\n\nif __name__ == '__main__':\n    assert find_closest_smaller(5) == 1\n    assert find_closest_smaller(1) == 0\n    assert find_closest_smaller(100) == 1\n    assert find_closest_smaller(99) == 99\n    assert find_closest_smaller(1000) == 1",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n        while n > 9:\n            if n % 10 == 0:\n                return n\n            n /= 10\n        return n\n\n\ns = Solution()\nprint s.closestNumber(1)\nprint s.closestNumber(10)\nprint s.closestNumber(100)\nprint s.closestNumber(1000)\nprint s.closestNumber(10000)",
    "import math\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.floor(n * 1.0 / 10) + 1\n\n\nif __name__ == '__main__':\n    assert closest_smaller(10) == 1\n    assert closest_smaller(1) == 1\n    assert closest_smaller(100) == 1\n    assert closest_smaller(101) == 2\n    assert closest_smaller(102) == 3\n    assert closest_smaller(103) == 4\n    assert closest_smaller(104) == 5\n    assert closest_smaller(105) == 6\n    assert closest_smaller(106) == 7\n    assert closest_smaller(107) == 8\n    assert closest_smaller(108) == 9\n    assert closest_smaller(109) == 10\n    assert closest_smaller(110) == 11\n    assert closest_smaller(111) == 12\n    assert closest_smaller(112) == 13\n    assert closest_smaller(113) == 14\n    assert closest_smaller(114) == 15\n    assert closest_smaller(115) == 16\n    assert closest_smaller(116) == 17\n    assert closest_smaller(117) == 18\n    assert closest_smaller(118) == 19\n    assert closest_smaller(119) == 20\n    assert closest_smaller(120) == 21\n    assert closest_smaller(121) == 22\n    assert closest_smaller(122) == 23\n    assert closest_smaller(123) == 24\n    assert closest_smaller(124) == 25\n    assert closest_smaller(125) == 26\n    assert closest_smaller(126) == 27\n    assert closest_smaller(127) == 28\n    assert closest_smaller(128) == 29\n    assert closest_smaller(129) == 30\n    assert closest_smaller(130) == 31\n    assert closest_smaller(131) == 32\n    assert closest_smaller(132) == 33\n    assert closest_smaller(133) == 34\n    assert closest_smaller(134) == 35\n    assert closest_small",
    "from math import ceil\n\n\nclass Solution(object):\n    def closestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 2:\n            return n\n\n        floor = ceil(n / 2)\n        return max(floor, n - floor)\n\n\nif __name__ == '__main__':\n    assert Solution().closestSmaller(1) == 1\n    assert Solution().closestSmaller(2) == 1\n    assert Solution().closestSmaller(3) == 2\n    assert Solution().closestSmaller(4) == 2\n    assert Solution().closestSmaller(5) == 3\n    assert Solution().closestSmaller(6) == 3\n    assert Solution().closestSmaller(7) == 3\n    assert Solution().closestSmaller(8) == 3\n    assert Solution().closestSmaller(9) == 3",
    "def closest_smaller(n):\n    return n-1\n\nif __name__ == '__main__':\n    assert closest_smaller(100) == 99\n    assert closest_smaller(10) == 9\n    assert closest_smaller(0) == -1",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def closestPoint(self, points, target):\n        \"\"\"\n        :type points: List[Point]\n        :type target: float\n        :rtype: Point\n        \"\"\"\n        closest = None\n        for point in points:\n            if closest is None:\n                closest = point\n            else:\n                dist = Point.distance(closest, point)\n                if dist < Point.distance(closest, target):\n                    closest = point\n        return closest\n\n\nif __name__ == '__main__':\n    points = [Point(3, 4), Point(1, 3), Point(5, -1), Point(4, 2)]\n    s = Solution()\n    print(s.closestPoint(points, 5))\n    print(s.closestPoint(points, 3))\n    print(s.closestPoint(points, 1))\n    print(s.closestPoint(points, 5))\n    print(s.closestPoint(points, 4))",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        low = 1\n        high = n\n        while low < high:\n            mid = low + (high - low) / 2\n            if mid < n:\n                low = mid + 1\n            elif mid > n:\n                high = mid - 1\n            else:\n                return mid\n        return low\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closestNumber(10))\n    print(sol.closestNumber(100))\n    print(sol.closestNumber(1000))",
    "class Solution:\n    # @return an integer\n    def closestSmaller(self, n):\n        return n - (n % (10**7))\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closestSmaller(1))\n    print(sol.closestSmaller(10))\n    print(sol.closestSmaller(100))\n    print(sol.closestSmaller(1000))\n    print(sol.closestSmaller(100000))\n    print(sol.closestSmaller(1000000))",
    "class Solution(object):\n    def findClosestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return 0",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n % 2 == 0:\n        return n/2\n    else:\n        return n - 1\n\nif __name__ == '__main__':\n    assert find_closest_smaller(1) == 0\n    assert find_closest_smaller(3) == 2\n    assert find_closest_smaller(10) == 4\n    assert find_closest_smaller(100) == 50",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\n\nif __name__ == '__main__':\n    print(closest_smaller(1))\n    print(closest_smaller(2))\n    print(closest_smaller(3))\n    print(closest_smaller(4))\n    print(closest_smaller(5))\n    print(closest_smaller(6))\n    print(closest_smaller(7))\n    print(closest_smaller(8))\n    print(closest_smaller(9))\n    print(closest_smaller(10))\n    print(closest_smaller(11))\n    print(closest_smaller(12))\n    print(closest_smaller(13))\n    print(closest_smaller(14))\n    print(closest_smaller(15))\n    print(closest_smaller(16))\n    print(closest_smaller(17))\n    print(closest_smaller(18))\n    print(closest_smaller(19))\n    print(closest_smaller(20))\n    print(closest_smaller(21))\n    print(closest_smaller(22))\n    print(closest_smaller(23))\n    print(closest_smaller(24))\n    print(closest_smaller(25))\n    print(closest_smaller(26))\n    print(closest_smaller(27))\n    print(closest_smaller(28))\n    print(closest_smaller(29))\n    print(closest_smaller(30))\n    print(closest_smaller(31))\n    print(closest_smaller(32))\n    print(closest_smaller(33))\n    print(closest_",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return",
    "from math import ceil, floor\n\nclass Solution(object):\n    def closestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return ceil(n / 2.0) if n % 2 else floor(n / 2.0)",
    "class Solution(object):\n    def closestValue(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42\n        if n == 43:\n            return 43\n        if",
    "def find_smallest_closest(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    l, r = 1, n\n    while l < r:\n        m = l + (r - l) / 2\n        if m == n:\n            return m\n        elif n < m:\n            r = m\n        else:\n            l = m + 1\n    return l",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n - 1\n    \n    # Solution 1: Brute force\n    # O(n)\n    # for i in range(1, n):\n    #     if i < closest_smaller(i):\n    #         closest_smaller = i\n    # return closest_smaller\n\nif __name__ == '__main__':\n    assert closest_smaller(100) == -1\n    assert closest_smaller(2) == -1\n    assert closest_smaller(5) == 4\n    assert closest_smaller(100) == -1\n    assert closest_smaller(0) == 0\n    assert closest_smaller(1) == -1\n    assert closest_smaller(2) == -1\n    assert closest_smaller(3) == 2\n    assert closest_smaller(5) == 2\n    assert closest_smaller(6) == 3\n    assert closest_smaller(7) == 3\n    assert closest_smaller(8) == 4\n    assert closest_smaller(9) == 4\n    assert closest_smaller(10) == 4\n    assert closest_smaller(1000) == -1",
    "def closest_smaller_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    smaller = 0\n    for i in range(1, n):\n        if n % i == 0:\n            smaller = i\n            break\n    return smaller\n\nif __name__ == \"__main__\":\n    print closest_smaller_num(1)\n    print closest_smaller_num(2)\n    print closest_smaller_num(3)\n    print closest_smaller_num(4)\n    print closest_smaller_num(5)\n    print closest_smaller_num(6)\n    print closest_smaller_num(7)\n    print closest_smaller_num(8)\n    print closest_smaller_num(9)\n    print closest_smaller_num(10)\n    print closest_smaller_num(11)\n    print closest_smaller_num(12)\n    print closest_smaller_num(13)\n    print closest_smaller_num(14)\n    print closest_smaller_num(15)\n    print closest_smaller_num(16)\n    print closest_smaller_num(17)\n    print closest_smaller_num(18)\n    print closest_smaller_num(19)\n    print closest_smaller_num(20)\n    print closest_smaller_num(21)\n    print closest_smaller_num(22)\n    print closest_smaller_num(23)\n    print closest_smaller_num(24)\n    print closest_smaller_num(25)\n    print closest_smaller_num(26)\n    print closest_smaller_num(27)\n    print closest_smaller_num(28)\n    print closest_smaller_num(29)\n    print closest_smaller_num(30)\n    print closest_smaller_num(31)\n    print closest_smaller_num(32)\n    print closest_smaller_num(33)",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(10, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    assert closest_smaller(10) == 3\n    assert closest_smaller(2147483647) == 2147483647\n    assert closest_smaller(2147483648) == 2147483647\n    assert closest_smaller(2147483649) == 2147483647",
    "def closest_smaller_num(n):\n    return closest_smaller_num_rec(n, 0)\n\ndef closest_smaller_num_rec(n, i):\n    if i >= len(str(n)) - 1:\n        return str(n)\n    else:\n        if n % 10 == 0:\n            return closest_smaller_num_rec(n / 10, i + 1)\n        else:\n            return closest_smaller_num_rec(n / 10, i) + str(n % 10)",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def closestSmaller(self, root: TreeNode, target: int) -> TreeNode:\n        \"\"\"\n        Brute force\n        \"\"\"\n        res = TreeNode(target)\n        res.left = self.findClosestSmaller(root, target - 1)\n        res.right = self.findClosestSmaller(root, target + 1)\n        return res\n\n    def findClosestSmaller(self, root, target) -> TreeNode:\n        if root is None:\n            return None\n        if root.val == target:\n            return root\n        if root.val < target:\n            return self.findClosestSmaller(root.left, target)\n        else:\n            return self.findClosestSmaller(root.right, target)",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    smaller = 2\n    while n > smaller:\n        smaller += 1\n    return smaller\n\n\nif __name__ == \"__main__\":\n    assert closest_smaller(5) == 2\n    assert closest_smaller(7) == 3\n    assert closest_smaller(8) == 3\n    assert closest_smaller(100) == 10",
    "def closest_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n - 1\n\nclass Solution(object):\n    def closestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # for i in range(1, n):\n        #     if n % i == 0:\n        #         return i\n        # return n\n        # use a dictionary to store the smallest number\n        # return min(smallest_number[n], smallest_number[n - 1])\n        smallest_number = {}\n        smallest_number[1] = 1\n        for i in range(2, n):\n            if i in smallest_number:\n                continue\n            smallest_number[i] = i\n            for j in range(1, i):\n                if j in smallest_number:\n                    continue\n                if j % i == 0:\n                    smallest_number[i] = j\n        return smallest_number[n]\n\na = Solution()\nprint a.closestSmaller(10)\nprint a.closestSmaller(100)\nprint a.closestSmaller(100000)",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Sort numbers\n    nums = sorted(range(n), reverse=True)\n    # Find the closest smaller number\n    return nums[0]",
    "class Solution:\n    def findClosestSmaller(self, n: int) -> int:\n        ans = n\n        while ans > 1:\n            if ans % 2 == 0:\n                ans //= 2\n            else:\n                ans += 1\n        return ans\n\nif __name__ == \"__main__\":\n    print(Solution().findClosestSmaller(10))\n    print(Solution().findClosestSmaller(100))\n    print(Solution().findClosestSmaller(1000))\n    print(Solution().findClosestSmaller(10000))",
    "def find_smallest_number_less_than_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return find_smallest_number_less_than_n(n / 2)\n    else:\n        return find_smallest_number_less_than_n(n - 1)\n\nif __name__ == \"__main__\":\n    print(find_smallest_number_less_than_n(100))\n    print(find_smallest_number_less_than_n(200))\n    print(find_smallest_number_less_than_n(300))\n    print(find_smallest_number_less_than_n(400))\n    print(find_smallest_number_less_than_n(500))\n    print(find_smallest_number_less_than_n(600))\n    print(find_smallest_number_less_than_n(700))",
    "# https://www.hackerrank.com/challenges/closest-smaller-number\n# Solution:\n#  https://www.hackerrank.com/challenges/closest-smaller-number/submissions/code/5341330\n#\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n# Note:\n#  n is a non-negative integer, in the range [1, 10,000].\n#\n# Hint:\n#  - Try to use a binary search.\n#  - If the number is smaller than n, return n.\n#  - Otherwise, return the smaller number in the range [1, n].\n\nimport math\n\ndef closest_smaller(n):\n    return n if n % 2 == 0 else n - 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = closest_smaller(n)\n    print(result)",
    "from collections import Counter\n\nclass Solution:\n    def closest_smaller(self, n: int) -> int:\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return min(n - 1, n - self.closest_smaller(n - 1))\n\n    def closest_smaller_2(self, n: int) -> int:\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return min(n - 1, n - self.closest_smaller(n - 1))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.closest_smaller(10))\n    print(sol.closest_smaller_2(10))",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # Recursive\n        # if not root:\n        #     return 0\n        # elif root.val == target:\n        #     return root.val\n        # elif root.val < target:\n        #     return self.closestValue(root.left, target)\n        # else:\n        #     return self.closestValue(root.right, target)\n        \n        # Iterative\n        if not root:\n            return 0\n        left_sum = 0\n        right_sum = 0\n        if root.left:\n            left_sum += root.left.val\n        if root.right:\n            right_sum += root.right.val\n        if root.val < target:\n            return left_sum + root.val\n        else:\n            return right_sum + root.val",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n <= 0:\n            return 0\n        if n >= len(numbers):\n            return len(numbers) - 1\n        min = 0\n        for i in range(len(numbers)):\n            if n >= numbers[i]:\n                min = i\n                break\n        return min",
    "from math import log\n\n\nclass Solution(object):\n    def closestNum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 2:\n            return 1\n\n        if n == 2:\n            return 2\n\n        return self.closestNum(n - 1) + 1\n\n\nif __name__ == '__main__':\n    print Solution().closestNum(5)",
    "def closest_smaller(n):\n    return n",
    "import math\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # find closest smaller number\n    if n < 100:\n        return n\n    elif n < 1000:\n        return closest_smaller(n - 1)\n    elif n < 1000000:\n        return closest_smaller(n - 2)\n    else:\n        return closest_smaller(n - 3)\n\n\nif __name__ == '__main__':\n    print closest_smaller(100)\n    print closest_smaller(1000)\n    print closest_smaller(1000000)\n    print closest_smaller(2000000)",
    "def closest_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n\n    # first, find the smallest number greater than n\n    # and then find the smallest number smaller than n\n    # if the smallest number is greater than n, then return n\n    # if the smallest number is smaller than n, then return the smallest number\n    for x in range(n, -1, -1):\n        if x >= n:\n            return n\n        elif x < n:\n            return x\n    return n\n\nclass Solution(object):\n    def closest_smaller_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return closest_smaller_number(n)",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def closestNum(self, n):\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42\n        if n == 43:",
    "class Solution:\n    # @param {int} n\n    # @return {int}\n    def findClosestSmaller(self, n):\n        if n < 1:\n            return 0\n        if n < 10:\n            return 1\n        if n < 100:\n            return 2\n        if n < 1000:\n            return 3\n        if n < 10000:\n            return 4\n        if n < 100000:\n            return 5\n        if n < 1000000:\n            return 6\n        if n < 10000000:\n            return 7\n        if n < 100000000:\n            return 8\n        if n < 1000000000:\n            return 9\n        return 10\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findClosestSmaller(100000)\n    print s.findClosestSmaller(100)\n    print s.findClosestSmaller(10000)\n    print s.findClosestSmaller(1000000)\n    print s.findClosestSmaller(1)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)\n    print s.findClosestSmaller(0)",
    "def find_closest_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = n\n    while n > 0:\n        if n % 10 == 0:\n            result = n\n            break\n        else:\n            n = n - 1\n    return result\n\nif __name__ == '__main__':\n    assert find_closest_smaller_number(1) == 1\n    assert find_closest_smaller_number(10) == 1\n    assert find_closest_smaller_number(100) == 1\n    assert find_closest_smaller_number(1000) == 1\n    assert find_closest_smaller_number(10000) == 100\n    assert find_closest_smaller_number(100000) == 100\n    assert find_closest_smaller_number(1000000) == 100\n    assert find_closest_smaller_number(100000000) == 100\n    assert find_closest_smaller_number(1000000000) == 100\n    assert find_closest_smaller_number(10000000000) == 100\n    assert find_closest_smaller_number(100000000000) == 100\n    assert find_closest_smaller_number(1000000000000) == 100\n    assert find_closest_smaller_number(10000000000000) == 100\n    assert find_closest_smaller_number(100000000000000) == 100\n    assert find_closest_smaller_number(1000000000000000) == 100\n    assert find_closest_smaller_number(100000000000000000) == 100\n    assert find_closest_smaller_number(10000000000000000) == 100\n    assert find_closest_smaller_number(100000000000000000) == 100",
    "def closest_smaller(n):\n    return n-1 if n >= 1 else 0\n\n\nif __name__ == '__main__':\n    assert closest_smaller(6) == 1\n    assert closest_smaller(5) == 0\n    assert closest_smaller(7) == 2\n    assert closest_smaller(-10) == -10\n    assert closest_smaller(-1) == -1\n    assert closest_smaller(0) == 0\n    assert closest_smaller(1) == 0\n    assert closest_smaller(100) == 99\n    assert closest_smaller(1000000) == 1000000\n    assert closest_smaller(1000000000000) == 100000000\n    assert closest_smaller(100000000000000) == 100000000000\n    assert closest_smaller(100000000000000000) == 1000000000000000000\n    assert closest_smaller(1000000000000000000) == 1000000000000000000000\n    assert closest_smaller(1000000000000000000000) == 100000000000000000000000000\n    assert closest_smaller(100000000000000000000000000) == 10000000000000000000000000000000000000000000\n    assert closest_smaller(1000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000\n    assert closest_smaller(100000000000000000000000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "class Solution:\n    def closestSmaller(self, n: int) -> int:\n        return -1\n\n\nif __name__ == '__main__':\n    assert Solution().closestSmaller(100) == -1\n    assert Solution().closestSmaller(200) == -1\n    assert Solution().closestSmaller(0) == -1\n    assert Solution().closestSmaller(1) == 0\n    assert Solution().closestSmaller(2) == 0\n    assert Solution().closestSmaller(3) == 0\n    assert Solution().closestSmaller(4) == 0\n    assert Solution().closestSmaller(5) == 0\n    assert Solution().closestSmaller(6) == 0\n    assert Solution().closestSmaller(7) == 0\n    assert Solution().closestSmaller(8) == 0\n    assert Solution().closestSmaller(9) == 0\n    assert Solution().closestSmaller(10) == 0\n    assert Solution().closestSmaller(11) == 0\n    assert Solution().closestSmaller(12) == 0\n    assert Solution().closestSmaller(13) == 0\n    assert Solution().closestSmaller(14) == 0\n    assert Solution().closestSmaller(15) == 0\n    assert Solution().closestSmaller(16) == 0\n    assert Solution().closestSmaller(17) == 0\n    assert Solution().closestSmaller(18) == 0\n    assert Solution().closestSmaller(19) == 0\n    assert Solution().closestSmaller(20) == 0\n    assert Solution().closestSmaller(21) == 0\n    assert Solution().closestSmaller(22) == 0\n    assert Solution().closestSmaller(23) == 0\n    assert Solution().closestSmaller(24) == 0\n    assert Solution().closestSmaller(25) == 0\n    assert Solution().closestSmaller(26) == 0\n    assert Solution().closestSmaller(27) == 0\n    assert Solution().closestSmaller(28) == 0\n    assert Solution().clos",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n - 1\n\nif __name__ == '__main__':\n    assert closest_smaller(5) == 1\n    assert closest_smaller(8) == 1\n    assert closest_smaller(9) == 2\n    assert closest_smaller(100) == 99",
    "# https://leetcode.com/problems/closest-smaller-number-to-target/discuss/83934/Python-DP-solution-using-numba-and-numpy-with-extra-memory-and-time-spent\ndef closestSmaller(self, n):\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 3\n\n    def dp(n):\n        if n <= 0:\n            return 1\n\n        if n <= 3:\n            return n\n\n        return min(dp(n - 1), dp(n - 2), dp(n - 3))\n\n    return dp(n)\n\nif __name__ == '__main__':\n    assert closestSmaller(1) == 1\n    assert closestSmaller(2) == 2\n    assert closestSmaller(3) == 3\n    assert closestSmaller(4) == 3",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    min_num = n\n    for i in range(2, n):\n        if n % i == 0:\n            min_num = min(min_num, i)\n    return min_num\n\nif __name__ == '__main__':\n    print(find_closest_smaller(3))\n    print(find_closest_smaller(17))",
    "class Solution:\n    # @param {int} n\n    # @return {int}\n    def closestSmaller(self, n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n < 1:\n            return -1\n        else:\n            for i in range(2, n + 1):\n                if n % i == 0:\n                    return i\n        return n\n\nif __name__ == \"__main__\":\n    print Solution().closestSmaller(1)\n    print Solution().closestSmaller(10)\n    print Solution().closestSmaller(15)\n    print Solution().closestSmaller(16)\n    print Solution().closestSmaller(21)",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return find_closest_smaller(n/10) * 10",
    "# Approach 1: Counting\n# Time complexity: O(n)\n# Space complexity: O(1)\n# n is an int\n# Returns an int\ndef closest_smaller_number(n):\n    # Returns the closest smaller number of n\n    return n - 1\n\n# Approach 2: Binary Search\n# Time complexity: O(n)\n# Space complexity: O(n)\n# Returns an int\ndef closest_smaller_number_binary(n):\n    # Find the closest smaller number of n\n    # If n is the closest smaller number, return n\n    low = 0\n    high = n - 1\n    while low < high:\n        mid = (low + high) / 2\n        if mid == n - 1:\n            return n\n        elif mid > n - 1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n# Approach 3: Recursive\n# Time complexity: O(n)\n# Space complexity: O(n)\n# Returns an int\ndef closest_smaller_number_recursive(n):\n    # Find the closest smaller number of n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n + n / 2) / 2\n    else:\n        return n / 2\n\n# Approach 4: Recursive\n# Time complexity: O(n)\n# Space complexity: O(1)\n# Returns an int\ndef closest_smaller_number_recursive_2(n):\n    # Find the closest smaller number of n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n + n / 2) / 2\n    else:\n        return n / 2\n\n# Approach 5: Recursive\n# Time complexity: O(n)\n# Space complexity: O(1)\n# Returns an int\ndef closest_smaller_number_recursive_3(n):\n    # Find the closest smaller number of n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n + n / 2) / 2\n    else:\n        return n / 2\n\n# Approach 6: Recursive",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def closestSmaller(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        def dfs(root):\n            if not root:\n                return None\n            if root.val < target:\n                return root.val\n            return dfs(root.left) + dfs(root.right)\n        return dfs(root)",
    "from collections import defaultdict\n\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    d = defaultdict(int)\n    for i in range(10, n + 1):\n        d[i] = i\n    for i in range(10, 1, -1):\n        d[i] = 0\n    for i in range(1, 10):\n        if d[i] > 0:\n            d[i] = min(d[j] for j in range(i, n + 1) if d[j] > 0)\n        else:\n            d[i] = min(d[j] for j in range(i, n + 1) if d[j] == 0)\n    return d[n]",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        x = 0\n        y = n\n        while x < y:\n            m = (x + y) // 2\n            if m < n:\n                x = m + 1\n            elif m > n:\n                y = m - 1\n            else:\n                return m\n\n        return x",
    "class Solution:\n    # @param {int} n\n    # @return {int}\n    def closestNumber(self, n):\n        # write your code here\n        l = n\n        r = n\n        while r >= l:\n            m = (l+r)/2\n            if m > n:\n                r = m\n            else:\n                l = m\n        return l\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.closestNumber(1))\n    print(s.closestNumber(2))\n    print(s.closestNumber(3))\n    print(s.closestNumber(4))\n    print(s.closestNumber(5))",
    "def closest_smaller(n):\n\tsmaller = 1\n\twhile n > 1:\n\t\tsmaller = smaller * 10\n\t\tif n % smaller == 0:\n\t\t\tbreak\n\t\telse:\n\t\t\tn = n / 10\n\treturn smaller\n\nif __name__ == \"__main__\":\n\tprint closest_smaller(10000)",
    "from collections import Counter\n\nclass Solution(object):\n    def findClosestNum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n < 2:\n            return n\n        # find the smallest number that is greater than n\n        # and is also the closest to n\n        for i in range(2, n + 1):\n            if n - i > 0 and n - i < n:\n                return n - i\n            elif n - i < 0:\n                return n - i\n            elif n - i > 0:\n                return n - i\n        return n\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findClosestNum(100))",
    "def find_closest(n):\n    # write your code here\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    if n == 10: return 10\n    if n == 11: return 11\n    if n == 12: return 12\n    if n == 13: return 13\n    if n == 14: return 14\n    if n == 15: return 15\n    if n == 16: return 16\n    if n == 17: return 17\n    if n == 18: return 18\n    if n == 19: return 19\n    if n == 20: return 20\n    if n == 21: return 21\n    if n == 22: return 22\n    if n == 23: return 23\n    if n == 24: return 24\n    if n == 25: return 25\n    if n == 26: return 26\n    if n == 27: return 27\n    if n == 28: return 28\n    if n == 29: return 29\n    if n == 30: return 30\n    if n == 31: return 31\n    if n == 32: return 32\n    if n == 33: return 33\n    if n == 34: return 34\n    if n == 35: return 35\n    if n == 36: return 36\n    if n == 37: return 37\n    if n == 38: return 38\n    if n == 39: return 39\n    if n == 40: return 40\n    if n == 41: return 41\n    if n == 42: return 42\n    if n == 43: return 43\n    if n == 44: return 44\n    if n == 45: return 45\n    if n == 46: return 46\n    if n == 47: return 47\n    if n == 48: return 48\n    if n == 49: return 49\n    if n == 50: return 50\n    if n == 51: return 51\n    if n == 52: return 52\n    if n == 53: return 53\n    if n == 54: return 54",
    "#!/usr/bin/env python\n\ndef find_closest_smaller(n):\n    # Write your code here\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n\n\n\nif __name__ == '__main__':\n    assert find_closest_smaller(4) == 2",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # find the smaller number\n    small = 1\n    while small * small < n:\n        small += 1\n    return small\n\n\nif __name__ == '__main__':\n    print closest_smaller(1)\n    print closest_smaller(2)\n    print closest_smaller(3)\n    print closest_smaller(10)\n    print closest_smaller(100)",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return None\n        if root.val == target:\n            return root.val\n        if root.val > target:\n            return self.closestValue(root.right, target)\n        if root.val < target:\n            return self.closestValue(root.left, target)\n        return root.val",
    "def find_smallest_number(n):\n    if n == 1:\n        return 1\n    else:\n        return find_smallest_number(n-1) + n\n\nif __name__ == \"__main__\":\n    print find_smallest_number(10)",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return closest_smaller(n // 2)\n    else:\n        return n",
    "def closest_smaller_number(n):\n    \"\"\"\n    >>> closest_smaller_number(5)\n    3\n    >>> closest_smaller_number(10)\n    7\n    >>> closest_smaller_number(15)\n    9\n    >>> closest_smaller_number(20)\n    17\n    \"\"\"\n    low, high = 1, n\n    while low < high:\n        mid = (low + high) // 2\n        if mid > n:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "import timeit\nimport math\nimport random\n\nfrom utils import is_prime\n\n\ndef find_closest_smaller(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 3\n\n    if n == 4:\n        return 4\n\n    if n == 5:\n        return 5\n\n    if n == 6:\n        return 6\n\n    if n == 7:\n        return 7\n\n    if n == 8:\n        return 8\n\n    if n == 9:\n        return 9\n\n    if n == 10:\n        return 10\n\n    if n == 11:\n        return 11\n\n    if n == 12:\n        return 12\n\n    if n == 13:\n        return 13\n\n    if n == 14:\n        return 14\n\n    if n == 15:\n        return 15\n\n    if n == 16:\n        return 16\n\n    if n == 17:\n        return 17\n\n    if n == 18:\n        return 18\n\n    if n == 19:\n        return 19\n\n    if n == 20:\n        return 20\n\n    if n == 21:\n        return 21\n\n    if n == 22:\n        return 22\n\n    if n == 23:\n        return 23\n\n    if n == 24:\n        return 24\n\n    if n == 25:\n        return 25\n\n    if n == 26:\n        return 26\n\n    if n == 27:\n        return 27\n\n    if n == 28:\n        return 28\n\n    if n == 29:\n        return 29\n\n    if n == 30:\n        return 30\n\n    if n == 31:\n        return 31\n\n    if n == 32:\n        return 32\n\n    if n == 33:\n        return 33\n\n    if n == 34:\n        return 34\n\n    if n == 35:\n        return 35\n\n    if n == 36:\n        return 36\n\n    if n == 37:\n        return 37\n\n    if n == 38:\n        return 38\n\n    if n == 39:\n        return 39\n\n    if n == 40:\n        return 40\n\n    if n == 41:",
    "from math import sqrt\n\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 10:\n            return n\n        else:\n            for i in range(10, n+1):\n                if n % i == 0:\n                    return i\n        return n",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def findClosestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # binary search\n        l = 0\n        r = n\n        while l < r:\n            m = l + (r - l) / 2\n            if m < n:\n                r = m\n            else:\n                l = m + 1\n        return l\n\nif __name__ == '__main__':\n    assert Solution().findClosestSmaller(2) == 1\n    assert Solution().findClosestSmaller(3) == 2\n    assert Solution().findClosestSmaller(5) == 3",
    "def closestSmaller(n):\n    return min(n, n - 1, n - 2, n - 3, n - 4)\n\nprint(closestSmaller(5))\n#>>> 2",
    "class Solution:\n    def closestSmaller(self, n: int) -> int:\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n + 1 if n % 2 == 0 else n - 1",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 10:\n            return n\n        \n        num = n\n        while num > 0:\n            num /= 10\n            if num == 0:\n                return 0\n        \n        return num",
    "from collections import defaultdict\n\nclass Solution(object):\n    def closestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        dict = defaultdict(int)\n        for i in xrange(1, n):\n            if i < n:\n                dict[i] = min(dict[i], n - i)\n            if i > n:\n                dict[i] = max(dict[i], i)\n        return min(dict[n])\n\n\nif __name__ == '__main__':\n    assert Solution().closestSmaller(0) == 0\n    assert Solution().closestSmaller(1) == 0\n    assert Solution().closestSmaller(10) == 10\n    assert Solution().closestSmaller(100) == 0\n    assert Solution().closestSmaller(1000) == 0\n    assert Solution().closestSmaller(10000) == 0\n    assert Solution().closestSmaller(100000) == 100000\n    assert Solution().closestSmaller(1000000) == 1000000\n    assert Solution().closestSmaller(1000000000) == 1000000000\n    assert Solution().closestSmaller(10000000000) == 10000000000",
    "from math import ceil\nfrom itertools import count\nfrom functools import reduce\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    \n    # find the number with the smallest digit greater than n\n    pairs = list(zip(range(1, n + 1), range(n + 1, -1, -1)))\n    smallest_digit = pairs[0][0]\n    smallest_digit_pos = pairs[0][1]\n    \n    for digit in range(n + 1):\n        for pair in pairs:\n            if pair[0] <= digit <= pair[1]:\n                if digit < smallest_digit:\n                    smallest_digit = digit\n                    smallest_digit_pos = pair[1]\n    \n    return smallest_digit_pos\n\nif __name__ == '__main__':\n    print(closest_smaller(0))\n    print(closest_smaller(1))\n    print(closest_smaller(2))\n    print(closest_smaller(3))\n    print(closest_smaller(4))\n    print(closest_smaller(5))\n    print(closest_smaller(6))\n    print(closest_smaller(7))\n    print(closest_smaller(8))\n    print(closest_smaller(9))\n    print(closest_smaller(10))\n    print(closest_smaller(11))\n    print(closest_smaller(12))\n    print(closest_smaller(13))\n    print(closest_smaller(14))\n    print(closest_smaller(15))\n    print(closest_smaller(16))\n    print(closest_smaller(17))\n    print(closest_smaller(18))\n    print(closest_smaller(19))\n    print(closest_smaller(20))\n    print(closest_small",
    "from math import ceil\n\nclass Solution(object):\n    def closestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return ceil(n/2.0)",
    "def closest_smaller(n):\n    # write your code here\n    smaller_numbers = []\n    for i in range(1,n+1):\n        if i not in smaller_numbers and i < n:\n            smaller_numbers.append(i)\n\n    return smallest_number(smaller_numbers)\n\ndef smallest_number(smaller_numbers):\n    smallest_number = larger_number(smaller_numbers)\n    return smallest_number\n\ndef larger_number(smaller_numbers):\n    smaller_numbers.sort()\n    return smaller_numbers[-1]\n\nif __name__ == \"__main__\":\n    print closest_smaller(10)",
    "def closest_smaller_number(n):\n    return n\n\ndef main():\n    n = 10\n    print(closest_smaller_number(n))\n    n = 1\n    print(closest_smaller_number(n))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\n# This file is part of https://github.com/cpiz/CMPUT306-Assignment1\n\nimport unittest\n\nclass TestFunctions(unittest.TestCase):\n    def test_closest_smaller_number_to_n(self):\n        self.assertEqual(closest_smaller_number_to_n(3), 1)\n        self.assertEqual(closest_smaller_number_to_n(4), 2)\n        self.assertEqual(closest_smaller_number_to_n(9), 3)\n        self.assertEqual(closest_smaller_number_to_n(10), 4)\n        self.assertEqual(closest_smaller_number_to_n(10), 4)\n        self.assertEqual(closest_smaller_number_to_n(100), 5)\n        self.assertEqual(closest_smaller_number_to_n(1000), 6)\n        self.assertEqual(closest_smaller_number_to_n(1000000), 7)\n        self.assertEqual(closest_smaller_number_to_n(10000000), 8)\n        self.assertEqual(closest_smaller_number_to_n(100000000), 9)\n        self.assertEqual(closest_smaller_number_to_n(1000000000), 10)\n        self.assertEqual(closest_smaller_number_to_n(10000000000), 11)\n        self.assertEqual(closest_smaller_number_to_n(100000000000), 12)\n        self.assertEqual(closest_smaller_number_to_n(1000000000000), 13)\n        self.assertEqual(closest_smaller_number_to_n(10000000000000), 14)\n        self.assertEqual(closest_smaller_number_to_n(100000000000000), 15)\n        self.assertEqual(closest_smaller_number_to_n(1000000000000000",
    "# The closest smaller number to n.\ndef closest_smaller_number(n):\n    return n - (n % (2 ** (n.bit_length() - 1)))\n\n\n# The closest smaller number to n.\ndef closest_smaller_number_2(n):\n    return n - (n % (2 ** (n.bit_length() - 1)))",
    "import time\n\n\ndef closest_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n - 1\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n\n    print closest_smaller_number(10000)\n    print 'Elapsed: %s' % (time.time() - start_time)",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.val == target:\n            return root.val\n        if root.val > target:\n            return self.closestValue(root.left, target)\n        else:\n            return self.closestValue(root.right, target)",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    l, r = 1, n\n    while l < r:\n        m = l + (r - l) // 2\n        if m > n:\n            r = m\n        elif m < n:\n            l = m + 1\n        else:\n            return m\n\n\nif __name__ == \"__main__\":\n    print(closest_smaller(1))\n    print(closest_smaller(10))\n    print(closest_smaller(100))\n    print(closest_smaller(1000))\n    print(closest_smaller(10000))\n    print(closest_smaller(100000))\n    print(closest_smaller(1000000))\n    print(closest_smaller(10000000))\n    print(closest_smaller(100000000))\n    print(closest_smaller(1000000000))\n    print(closest_smaller(10000000000))\n    print(closest_smaller(100000000000))\n    print(closest_smaller(1000000000000))\n    print(closest_smaller(10000000000000))\n    print(closest_smaller(100000000000000))\n    print(closest_smaller(1000000000000000))\n    print(closest_smaller(10000000000000000))",
    "from math import ceil\n\ndef closest_smaller(n):\n    \"\"\"\n    >>> closest_smaller(7)\n    3\n    >>> closest_smaller(1)\n    1\n    >>> closest_smaller(0)\n    0\n    >>> closest_smaller(-1)\n    -1\n    >>> closest_smaller(-100)\n    0\n    >>> closest_smaller(-100000)\n    -100000\n    \"\"\"\n    return ceil(n / 2)",
    "def closest_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a = n\n    while n > 1:\n        a -= 1\n        if a % 2 == 0:\n            a -= 1\n            if a % 3 == 0:\n                a -= 1\n                if a % 5 == 0:\n                    a -= 1\n                    if a % 7 == 0:\n                        a -= 1\n                        if a % 11 == 0:\n                            a -= 1\n                            if a % 13 == 0:\n                                a -= 1\n                                if a % 17 == 0:\n                                    a -= 1\n                                    if a % 19 == 0:\n                                        a -= 1\n                                        if a % 23 == 0:\n                                            a -= 1\n                                            if a % 29 == 0:\n                                                a -= 1\n                                                if a % 31 == 0:\n                                                    a -= 1\n                                                    if a % 37 == 0:\n                                                        a -= 1\n                                                        if a % 41 == 0:\n                                                            a -= 1\n                                                            if a % 43 == 0:\n                                                                a -= 1\n                                                                if a % 47 == 0:\n                                                                    a -= 1\n                                                                    if a % 53 == 0:\n                                                                        a -= 1\n                                                                        if a % 59 == 0:\n                                                                            a -= 1\n                                                                            if a % 61 == 0:\n                                                                                a -= 1\n                                                                                if a % 67 == 0:\n                                                                                    a -= 1\n                                                                                    if a % 71 == 0:\n                                                                                        a -= 1\n                                                                                        if a % 73 == 0:\n                                                                                            a -= 1\n                                                                                            if a % 79 == 0:\n                                                                                                a -= 1\n                                                                                                if a % 83 == 0:\n                                                                                                    a -= 1\n                                                                                                    if a % 89 == 0:",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def closestSmallerNumber(self, root: TreeNode, target: int) -> int:\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        return self.findSmaller(root, target, 0, target, 0)\n\n    def findSmaller(self, root, target, low, high, curr):\n        if not root:\n            return high\n        if root.val < target:\n            return self.findSmaller(root.left, target, low, curr, curr + 1)\n        if root.val > target:\n            return self.findSmaller(root.right, target, curr + 1, high, curr + 1)\n        return curr\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(8)\n    root.left.left.right = TreeNode(9)\n    root.left.right.left = TreeNode(10)\n    root.left.right.right = TreeNode(11)\n    root.right.left.left = TreeNode(12)\n    root.right.left.right = TreeNode(13)\n    root.right.right.left = TreeNode(14)\n    root.right.right.right = TreeNode(15)\n\n    print(Solution().closestSmallerNumber(root, 11))\n    print(Solution().closestSmallerNumber(root, 4))\n    print(Solution().closestSmallerNumber(root, -1))",
    "def closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for x in range(1, n+1):\n        if x < n:\n            if n % x == 0:\n                return x\n            else:\n                return n\n\n    return n\n\nprint closest_smaller(10)",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def closestSmaller(self, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.closestSmaller(n / 2)\n\nif __name__ == '__main__':\n    Solution().closestSmaller(2)",
    "import unittest\n\nclass Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = abs(n)\n        if n == 0:\n            return 0\n        if n % 2 == 0:\n            return 1 + self.closestNumber(n/2)\n        else:\n            return self.closestNumber(n/2) + 1\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/closest-smaller-number/solution/\n#\nApproach #1: Sort [0, n]\nComplexity Analysis\nTime Complexity: O(nlog(n)), where n is the number of elements in the array.\nSpace Complexity: O(1).\n\n# 2ms 100%\nclass Solution {\n    public int closestNumber(int n) {\n        int[] arr = new int[n];\n        for(int i=0; i<arr.length; i++) arr[i] = i+1;\n        Arrays.sort(arr);\n        return arr[0];\n    }\n}\n\nApproach #2: Binary Search\nComplexity Analysis\nTime Complexity: O(log(n)).\nSpace Complexity: O(1).\n\n# 2ms 100%\nclass Solution {\n    public int closestNumber(int n) {\n        int lo = 1;\n        int hi = n;\n        int ans = lo;\n        while(lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if(abs(mid - n) < abs(ans - n)) ans = mid;\n            else hi = mid;\n        }\n        return ans;\n    }\n}\n'''",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def closestSmaller(self, root: TreeNode, target: int) -> int:\n        \"\"\"\n        O(n)\n        O(log(n))\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ans = sys.maxsize\n        self.helper(root, target, ans)\n        return ans\n\n    def helper(self, root, target, ans):\n        if root is None:\n            return ans\n        if root.val < target:\n            self.helper(root.left, target, ans)\n        if root.val > target:\n            self.helper(root.right, target, ans)\n        if root.val < ans:\n            ans = root.val\n        return ans",
    "import math\n\nclass Solution(object):\n    def findClosestSmaller(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n < 2:\n            return 1\n        if n < 5:\n            return 2\n        if n < 10:\n            return 5\n        if n < 15:\n            return 10\n        if n < 20:\n            return 15\n        if n < 25:\n            return 20\n        if n < 30:\n            return 25\n        if n < 35:\n            return 30\n        if n < 40:\n            return 35\n        if n < 45:\n            return 40\n        if n < 50:\n            return 45\n        if n < 55:\n            return 50\n        if n < 60:\n            return 55\n        if n < 65:\n            return 60\n        if n < 70:\n            return 65\n        if n < 75:\n            return 70\n        if n < 80:\n            return 75\n        if n < 85:\n            return 80\n        if n < 90:\n            return 85\n        if n < 95:\n            return 90\n        if n < 100:\n            return 95\n        if n < 105:\n            return 100\n        if n < 110:\n            return 105\n        if n < 115:\n            return 110\n        if n < 120:\n            return 115\n        if n < 125:\n            return 120\n        if n < 130:\n            return 125\n        if n < 135:\n            return 130\n        if n < 140:\n            return 135\n        if n < 145:\n            return 140\n        if n < 150:\n            return 145\n        if n < 155:\n            return 150\n        if n < 160:\n            return 155\n        if n < 165:\n            return 160\n        if n < 170:\n            return 165\n        if n < 175:\n            return 170\n        if n < 180:\n            return 175\n        if n < 185:\n            return 180\n        if n < 190:\n            return 185\n        if n <",
    "# https://www.hackerrank.com/challenges/closest-smaller-number\n\ndef closest_smaller(n):\n    smallest_number = -1\n    for i in range(n):\n        if i < smallest_number:\n            smallest_number = i\n    return smallest_number\n\nif __name__ == '__main__':\n    n = int(input())\n    print(closest_smaller(n))",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n\n        def get_closest(root, target):\n            if root.val == target:\n                return root.val\n            elif root.val > target:\n                return get_closest(root.left, target)\n            else:\n                return get_closest(root.right, target)\n\n        return get_closest(root, target)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.left.left = TreeNode(6)\n    root.left.left.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n    root.right.right = TreeNode(9)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    print solution.closestValue(root, 5)",
    "import math\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1: return 1\n    d = math.ceil(math.log10(n))\n    i = 10**d\n    while i <= n:\n        if n % i == 0:\n            j = int(math.ceil(math.log10(n/i)))\n            return i * (10**j)\n        i *= 10\n    return n",
    "def find_smaller_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Base Case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Recursive Case\n        if n % 2 == 0:\n            return find_smaller_number(n / 2)\n        else:\n            return find_smaller_number(n - 1)\n\n\n# Your code here",
    "# O(n) time and O(1) space\nclass Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 1\n\n        if n < 1000:\n            return n\n\n        low = 1\n        high = n\n\n        while low < high:\n            mid = (low + high) / 2\n            if mid * mid < n:\n                low = mid + 1\n            else:\n                high = mid\n        return low",
    "def find_closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return find_closest_smaller(n / 2)\n    return find_closest_smaller(n - 1)\n\n\nif __name__ == '__main__':\n    assert find_closest_smaller(100) == 2\n    assert find_closest_smaller(101) == 2\n    assert find_closest_smaller(102) == 2\n    assert find_closest_smaller(200) == 2\n    assert find_closest_smaller(201) == 3\n    assert find_closest_smaller(300) == 3\n    assert find_closest_smaller(301) == 3\n    assert find_closest_smaller(500) == 3\n    assert find_closest_smaller(501) == 4\n    assert find_closest_smaller(600) == 4\n    assert find_closest_smaller(601) == 5\n    assert find_closest_smaller(700) == 5\n    assert find_closest_smaller(701) == 6\n    assert find_closest_smaller(900) == 6\n    assert find_closest_smaller(901) == 7\n    assert find_closest_smaller(1000) == 7\n    assert find_closest_smaller(1001) == 8\n    assert find_closest_smaller(2000) == 8\n    assert find_closest_smaller(2001) == 9\n    assert find_closest_smaller(3000) == 9\n    assert find_closest_smaller(3001) == 10\n    assert find_closest_smaller(4000) == 10\n    assert find_closest_smaller(4001) == 11\n    assert find_closest_smaller(5000) == 11\n    assert find_closest_smaller(5001) == 12\n    assert find_closest_smaller(",
    "import timeit\n\nstart = timeit.default_timer()\n\ndef closest_smaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return n - 1\n\nprint(timeit.default_timer() - start)",
    "def closestSmaller(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n-1\n\nif __name__ == '__main__':\n    print closestSmaller(3)\n    print closestSmaller(5)\n    print closestSmaller(10)\n    print closestSmaller(100)",
    "class Solution(object):\n    def closestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        i = n\n        while i > 1:\n            if i % 2 == 0:\n                i /= 2\n            else:\n                i = 3 * i + 1\n        return i",
    "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def findClosestSmaller(self, n):\n        if n < 0:\n            return 0\n        res = n\n        while n > 0:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                n = 3 * n + 1\n            res = min(res, n)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.findClosestSmaller(1))\n    print(sol.findClosestSmaller(2))\n    print(sol.findClosestSmaller(3))\n    print(sol.findClosestSmaller(4))\n    print(sol.findClosestSmaller(5))\n    print(sol.findClosestSmaller(6))\n    print(sol.findClosestSmaller(7))\n    print(sol.findClosestSmaller(8))\n    print(sol.findClosestSmaller(9))",
    "import unittest\n\nclass Solution:\n    def findClosest(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return self.findClosest(n / 2) + n / 2\n        else:\n            return self.findClosest(n - 1) + 1\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test(22, 2)\n        self._test(22, 3)\n        self._test(22, 4)\n        self._test(22, 5)\n        self._test(22, 6)\n        self._test(22, 7)\n        self._test(22, 8)\n        self._test(22, 9)\n        self._test(22, 10)\n        self._test(22, 15)\n        self._test(22, 17)\n        self._test(22, 18)\n        self._test(22, 19)\n        self._test(22, 20)\n        self._test(22, 21)\n        self._test(22, 22)\n        self._test(22, 23)\n        self._test(22, 24)\n        self._test(22, 25)\n        self._test(22, 26)\n        self._test(22, 27)\n        self._test(22, 28)\n        self._test(22, 29)\n        self._test(22, 30)\n        self._test(22, 31)\n        self._test(22, 32)\n        self._test(22, 33)\n        self._test(22, 34)\n        self._test(22, 35)\n        self._test(22, 36)\n        self._test(22, 37)\n        self._test(22, 38)\n        self._test(22, 39)\n        self._test(22, 40)\n        self._test(22, 41)\n        self._test(22, 42)\n        self._test(22, 43)\n        self._test(22, 44)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}