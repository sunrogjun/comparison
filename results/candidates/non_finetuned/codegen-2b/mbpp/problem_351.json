{
  "problem": {
    "task_id": "MBPP/362",
    "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
    "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
    "test_list": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 351
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def maxOccurrences(lst):\n    \"\"\"\n    :param lst: a list\n    :return: the item with maximum occurrences\n    \"\"\"\n    max_occurrences = 0\n    for item in lst:\n        if item in lst:\n            if len(lst) == 1:\n                return item\n            else:\n                if item in lst[:max_occurrences+1]:\n                    max_occurrences = max_occurrences + 1\n                elif len(lst) == max_occurrences:\n                    return item\n    return lst[max_occurrences]\n\nprint(maxOccurrences([1, 2, 3, 1, 2, 3, 1, 2, 3]))\nprint(maxOccurrences([1, 2, 1, 2, 3, 1, 2, 3, 1]))\nprint(maxOccurrences([1, 1, 2, 3, 1, 2, 3, 1, 2]))",
    "def find_max(mylist):\n    max_item = max(mylist)\n    max_item_index = mylist.index(max_item)\n    return max_item, max_item_index\n\ndef find_max_2(mylist):\n    max_item = max(mylist)\n    max_item_index = mylist.index(max_item)\n    for item in mylist:\n        if item == max_item:\n            max_item_index = mylist.index(item)\n    return max_item, max_item_index\n\ndef find_max_3(mylist):\n    max_item = max(mylist)\n    max_item_index = mylist.index(max_item)\n    for index, item in enumerate(mylist):\n        if item == max_item:\n            max_item_index = index\n    return max_item, max_item_index\n\ndef find_max_4(mylist):\n    max_item = max(mylist)\n    max_item_index = mylist.index(max_item)\n    for index, item in enumerate(mylist):\n        if item == max_item:\n            max_item_index = index\n    return max_item, max_item_index\n\n\n\nif __name__ == \"__main__\":\n    mylist = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]\n    print find_max_4(mylist)\n    print find_max_3(mylist)\n    print find_max_2(mylist)\n    print find_max_1(mylist)",
    "#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\"\"\"\nThis module contains a python function that will find the item with the maximum\noccurrences in a given list.\n\"\"\"\n\n# Import the python module\nimport sys\n\n# Import the numpy module\nimport numpy as np\n\n# Import the scipy module\nimport scipy\n\n# Import the csv module\nimport csv\n\n\n# Define the function\ndef find_max_occurrences(list_of_items):\n    \"\"\"\n    This function will find the item with the maximum occurrences in a given\n    list.\n\n    :param list_of_items: A list of items that will be used to check for\n    max occurrences.\n    :type list_of_items: list\n\n    :returns: The maximum occurrences in the list.\n    :rtype: float\n    \"\"\"\n\n    # Create a list of the occurrences\n    occurrences = []\n\n    # Loop through the list\n    for item in list_of_items:\n        # Add the item to the list of occurrences\n        occurrences.append(item.count(item))\n\n    # Return the maximum item\n    return max(occurrences)\n\n\n# Main program\nif __name__ == '__main__':\n\n    # Read the file\n    with open(\"test_input.csv\", \"r\") as f:\n        reader = csv.reader(f)\n        data = list(reader)\n\n    # Create a list of the items\n    items = []\n    for item in data:\n        items.append(item[0])\n\n    # Write the result\n    print(find_max_occurrences(items))",
    "def find_max_count(list_of_items, max_count):\n    \"\"\"\n    Args:\n        list_of_items: List of items.\n        max_count: Max number of items.\n    Returns:\n        The item with the maximum count.\n    \"\"\"\n    # Write your code here\n    max_count_item = 0\n    max_count_item_count = 0\n    for item in list_of_items:\n        if item in list_of_items:\n            if item_count > max_count_item_count:\n                max_count_item = item\n                max_count_item_count = item_count\n            else:\n                if item_count == max_count_item_count:\n                    max_count_item = item\n    return max_count_item\n\nif __name__ == '__main__':\n    list_of_items = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    max_count_item = find_max_count(list_of_items, 5)\n    print(max_count_item)",
    "# Your function will be called as follows:\n# function(items, k) where items is a list of items and k is an integer\n# The function will be passed two parameters:\n#  items: A list of items\n#  k: An integer denoting the amount of items to be considered\n# The function should return the index of the item with maximum occurrences.\n\ndef find_max_count(items, k):\n    # write your code here\n    count = 0\n    max_count = 0\n    for i in range(len(items)):\n        if count <= k:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    return max_count\n\nif __name__ == \"__main__\":\n    items = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]\n    k = 3\n    print find_max_count(items, k)",
    "import sys\n\ndef find_max_occurrence(a_list):\n    \"\"\"\n    Find the item with the maximum occurrences in a given list.\n    \"\"\"\n\n    if len(a_list) == 0:\n        return None\n\n    max_occurrence = a_list[0]\n    max_occurrence_index = 0\n    max_occurrence_index_position = 0\n\n    for index, item in enumerate(a_list):\n        if item == max_occurrence:\n            if index == max_occurrence_index:\n                continue\n            max_occurrence_index = index\n            max_occurrence_index_position = index\n\n        if item > max_occurrence:\n            max_occurrence = item\n            max_occurrence_index = index\n            max_occurrence_index_position = index\n\n    return max_occurrence_index, max_occurrence_index_position\n\n\ndef find_max_occurrence_recursive(a_list):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    \"\"\"\n\n    if len(a_list) == 0:\n        return None\n\n    max_occurrence = a_list[0]\n    max_occurrence_index = 0\n    max_occurrence_index_position = 0\n\n    for index, item in enumerate(a_list):\n        if item == max_occurrence:\n            if index == max_occurrence_index:\n                continue\n            max_occurrence_index = index\n            max_occurrence_index_position = index\n\n        if item > max_occurrence:\n            max_occurrence = item\n            max_occurrence_index = index\n            max_occurrence_index_position = index\n\n    return max_occurrence_index, max_occurrence_index_position\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n\n    a_list = [1, 2, 2, 3, 3, 3, 3, 3, 3]\n\n    print(\"max occurrence:\", find_max_occurrence(a_list))\n    print(\"max occurrence recursive:\", find_max_occurrence_recursive(a_list))\n\n    return 0\n\n\nif __name__ == '__main__':",
    "def find_max(lst):\n    max_count = max(lst)\n    max_idx = 0\n    for idx, val in enumerate(lst):\n        if val == max_count:\n            max_idx = idx\n            break\n    return max_idx\n\nif __name__ == '__main__':\n    lst = [1,1,1,2,2,3,4,5,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9]\n    print(find_max(lst))",
    "import random\nimport collections\n\n# Your function should return a tuple (item, occurrences).\n# Item is a list element, occurrences is an integer.\n# If the list is empty, return None, None.\ndef max_occurrences(lst):\n    if not lst:\n        return None, None\n    max_occurrences = collections.defaultdict(int)\n    for item in lst:\n        max_occurrences[item] += 1\n    return max(max_occurrences.items(), key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6, 6]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8]\n    print(max_occurrences(lst))\n    lst = [1, 1, 2, 1, 3, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9]\n    print",
    "# https://github.com/pydanny/Python-Scripts/blob/master/Max_Occurrences.py\n\ndef max_occurrences(list_):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    \"\"\"\n    max_count = 0\n    max_item = None\n    for item in list_:\n        if item in list_:\n            count = list_.count(item)\n            if count > max_count:\n                max_count = count\n                max_item = item\n\n    return max_item, max_count\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 1, 2, 3]\n    max_item, max_count = max_occurrences(l)\n    print(max_item, max_count)",
    "def findMax(myList, myKey):\n    \"\"\"\n    :type myList: List\n    :type myKey: List\n    :rtype: int\n    \"\"\"\n\n    # Sort the list in ascending order.\n    myList.sort()\n\n    # Iterate through the list and find the maximum.\n    for i in range(0, len(myList)):\n        if myKey == myList[i]:\n            return i\n\n    return -1\n\n\ndef main():\n    \"\"\"\n    main() is used to test the findMax function.\n    \"\"\"\n\n    # Test 1\n    test1 = [1, 2, 1, 3, 2]\n    test1Key = 1\n    test1Max = findMax(test1, test1Key)\n    print(\"Test 1: \" + str(test1Max))\n\n    # Test 2\n    test2 = [3, 1, 2, 4, 4, 4]\n    test2Key = 4\n    test2Max = findMax(test2, test2Key)\n    print(\"Test 2: \" + str(test2Max))\n\n    # Test 3\n    test3 = [1, 2, 1, 3, 2, 4, 4, 4]\n    test3Key = 4\n    test3Max = findMax(test3, test3Key)\n    print(\"Test 3: \" + str(test3Max))\n\n    # Test 4\n    test4 = [2, 2, 2, 2, 2, 2, 2, 2]\n    test4Key = 2\n    test4Max = findMax(test4, test4Key)\n    print(\"Test 4: \" + str(test4Max))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_max(lst):\n    \"\"\"\n    Write a function to find the item with maximum occurrences in a given list.\n\n    Input:\n        lst = List of integers\n    Output:\n        The item with maximum occurrences in the list.\n    \"\"\"\n    max_value = max(lst)\n    max_index = lst.index(max_value)\n    return max_value, max_index\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n    max_value, max_index = find_max(lst)\n    print max_value, max_index\n    lst = [1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9]\n    max_value, max_index = find_max(lst)\n    print max_value, max_index\n    lst = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9]\n    max_value, max_index = find_max(lst)\n    print max_value, max_index",
    "def max_occurrences(list_):\n    \"\"\"\n    :param list_: A list of items\n    :return: The item with maximum occurrences in a given list\n    \"\"\"\n    max_occurrences = 0\n    for i in list_:\n        if i not in list_:\n            continue\n        if list_.count(i) > max_occurrences:\n            max_occurrences = list_.count(i)\n    return i\n\n\n\nlist_ = [1,1,2,2,3,4,3,4,5,4,4]\nprint max_occurrences(list_)",
    "def max_occurrences(l):\n    \"\"\"\n    :param l: List\n    :return: Item with maximum occurrences\n    \"\"\"\n    return max([(i, j) for i, j in l])[1]\n\nif __name__ == '__main__':\n    l = [1, 2, 1, 3, 2]\n    print(max_occurrences(l))\n    l = [1, 1, 2, 2, 2, 2]\n    print(max_occurrences(l))\n    l = [1, 2, 1, 2, 2, 3, 2]\n    print(max_occurrences(l))",
    "def max_occurrences(items):\n    \"\"\"\n    :param items: list\n    :return: the item with maximum occurrences\n    \"\"\"\n    items = sorted(items)\n    return items[-1]\n\ndef test_max_occurrences():\n    assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert max_occurrences([1, 1, 2, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n\nif __name__ == '__main__':\n    test_max_occurrences()",
    "def findMax(lst):\n    maxValue = -1\n    maxIndex = -1\n    for index, val in enumerate(lst):\n        if val == maxValue:\n            maxIndex = index\n        else:\n            if val > maxValue:\n                maxIndex = index\n                maxValue = val\n    return maxIndex\n\n\nif __name__ == '__main__':\n    testList = [1,2,2,3,3,3,4,4,4,5]\n    maxIndex = findMax(testList)\n    print maxIndex",
    "def find_max(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    :param lst: The list to search.\n    :return: The maximum item in the list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst)\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 1, 2, 3]\n    print(find_max(lst))\n    lst = [1, 2, 2, 1, 2, 3]\n    print(find_max(lst))\n    lst = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "# This is a good place to start learning about list comprehensions\n# http://www.python-course.eu/list_comprehensions.php\n\n# a = [1,2,3,4,5,6,6,7,8,9]\n# b = [3,2,1]\n# c = [1,1,2,2,3,3,4,5,6,6]\n# d = [2,2,2]\n# e = [1,1,1]\n# f = [1,2,3,4,5,6,7,8,9,10]\n\n# The following is a good place to start learning about list comprehension\n# http://www.python-course.eu/list_comprehensions.php\n\ndef max_occurrences(list_of_numbers):\n    # list comprehension\n    # list_of_numbers = [1,2,3,4,5,6,6,7,8,9]\n    # list_of_numbers = [3,2,1]\n    # list_of_numbers = [1,1,2,2,3,3,4,5,6,6]\n    # list_of_numbers = [2,2,2]\n    # list_of_numbers = [1,1,1]\n    # list_of_numbers = [1,2,3,4,5,6,7,8,9,10]\n\n    # The following is a good place to start learning about list comprehension\n    # http://www.python-course.eu/list_comprehensions.php\n    # list_of_numbers = [1,2,3,4,5,6,6,7,8,9]\n    # list_of_numbers = [3,2,1]\n    # list_of_numbers = [1,1,2,2,3,3,4,5,6,6]\n    # list_of_numbers = [2,2,2]\n    # list_of_numbers = [1,1,1]\n    # list_of_numbers = [1,2,3,4,5",
    "from collections import Counter\n\ndef find_max_item(item_list):\n    max_count = 0\n    max_item = None\n    for item in item_list:\n        if Counter(item).most_common()[0][1] > max_count:\n            max_count = Counter(item).most_common()[0][1]\n            max_item = item\n    return max_item\n\n#print(find_max_item(['a', 'a', 'b', 'b', 'a', 'a', 'a']))\n\n#print(find_max_item(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'b']))\n\n#print(find_max_item(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'a']))",
    "import operator\nfrom collections import Counter\n\ndef max_occurrences(items, list_):\n    \"\"\"\n    :type items: List[int]\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    if not items:\n        return 0\n    counts = Counter(items)\n    max_count = max(counts.values())\n    max_index = list_.index(max(counts, key=counts.get))\n    return items[max_index]\n\nif __name__ == \"__main__\":\n    items = [3, 3, 2, 3, 2, 2, 3, 4, 3, 2, 3, 2, 2, 1]\n    list_ = [3, 2, 3, 4, 3, 3, 1, 2, 3, 2, 3, 3, 1, 2]\n    print max_occurrences(items, list_)",
    "#!/usr/bin/env python\n\n# import the python library\nimport sys\n\n# read the file\nwith open(sys.argv[1], 'r') as f:\n    lines = f.readlines()\n\n# define the function\ndef getMaxOccurrences(l):\n    # create a list of occurrence\n    occurrences = []\n    # create a list to store the maximum occurrences\n    maxOccurrences = []\n    # iterate the list\n    for line in lines:\n        # split the line by whitespace\n        line = line.split()\n        # create a list of occurrences\n        occurrences.append(line)\n        # create a list of the maximum occurrences\n        maxOccurrences.append(0)\n        # for each line in the list, increment the maximum occurrence\n        for i in range(len(line)):\n            # check if the current value is greater than the current maximum\n            if line[i] > maxOccurrences[i]:\n                # if so, update the maximum occurrence\n                maxOccurrences[i] = line[i]\n    # return the maximum occurrences\n    return maxOccurrences\n\n\n# call the function\nprint(getMaxOccurrences(sys.argv[1]))",
    "def max_occurrences(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    max_val = -1\n    max_idx = -1\n    for idx, val in enumerate(lst):\n        if val > max_val:\n            max_val = val\n            max_idx = idx\n    return max_idx\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 2, 2, 3, 4, 1, 2, 1]\n    print(max_occurrences(lst))",
    "# Function to find maximum\ndef findMax(myList):\n    max_item = myList[0]\n    for item in myList:\n        if item > max_item:\n            max_item = item\n    return max_item\n\n\n# Function to find maximum using for loop\ndef findMaxUsingFor(myList):\n    max_item = myList[0]\n    for item in myList:\n        if item > max_item:\n            max_item = item\n    return max_item\n\n\n# Function to find maximum using while loop\ndef findMaxUsingWhile(myList):\n    max_item = myList[0]\n    while max_item < len(myList):\n        max_item = myList[max_item]\n    return max_item\n\n\n# Function to find maximum using a nested loop\ndef findMaxUsingNestedLoop(myList):\n    max_item = myList[0]\n    for i in range(0, len(myList)):\n        for j in range(i+1, len(myList)):\n            if myList[j] > myList[i]:\n                max_item = myList[j]\n    return max_item\n\n\n# Function to find maximum using a nested loop\ndef findMaxUsingNestedLoop2(myList):\n    max_item = myList[0]\n    for i in range(0, len(myList)):\n        for j in range(i+1, len(myList)):\n            if myList[j] > myList[i]:\n                if max_item < myList[j]:\n                    max_item = myList[j]\n    return max_item\n\n\n# Function to find maximum using a nested loop\ndef findMaxUsingNestedLoop3(myList):\n    max_item = myList[0]\n    for i in range(0, len(myList)):\n        for j in range(i+1, len(myList)):\n            if myList[j] > myList[i]:\n                if max_item < myList[j]:\n                    max_item = myList[j]\n    return max_item\n\n\n# Function to find maximum using a nested loop\ndef findMaxUsingN",
    "#!/usr/bin/env python\n\nimport sys\n\ndef findMaxOccurrences(aList):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    :param aList: the list to be searched\n    :return: the item with maximum occurrences in the list\n    \"\"\"\n\n    maxOccurrences = 0\n    maxItem = None\n\n    for item in aList:\n        if item in aList:\n            if aList.count(item) > maxOccurrences:\n                maxOccurrences = aList.count(item)\n                maxItem = item\n\n    return maxItem\n\n\n\nif __name__ == \"__main__\":\n    inputList = sys.stdin.readlines()\n    inputList = [x.strip() for x in inputList]\n    aList = []\n\n    for line in inputList:\n        if line:\n            aList.append(line.split())\n\n    print findMaxOccurrences(aList)",
    "# TODO:\n# - Add tests\n# - Refactor to use list comprehensions\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to use a generator\n# - Refactor to",
    "# Example\n# >>> list_with_max_occurrences(['a', 'b', 'b', 'a'])\n# ['a', 'b']\n\ndef list_with_max_occurrences(list_):\n    \"\"\"\n    >>> list_with_max_occurrences(['a', 'b', 'b', 'a'])\n    ['a', 'b']\n    \"\"\"\n    list_ = sorted(list_)\n    max_occurrences = 0\n    for i in range(len(list_)):\n        if list_[i] in list_:\n            if list_[i] not in max_occurrences:\n                max_occurrences = list_[i]\n    return max_occurrences",
    "def max_occurrence(lst):\n    max_occ = 0\n    for i in range(len(lst)):\n        if lst[i] > max_occ:\n            max_occ = lst[i]\n    return max_occ\n\nprint(max_occurrence([1,1,1,2,2,2,3,3,3]))\nprint(max_occurrence([1,2,3,4,5,6,7,8,9]))\nprint(max_occurrence([1,2,3,4,5,6,7,8,9,10]))",
    "def max_occurrences(items):\n    \"\"\"\n    :type items: List[int]\n    :rtype: int\n    \"\"\"\n    max_count = 0\n    max_item = 0\n    for item in items:\n        if item > max_count:\n            max_count = item\n            max_item = item\n        elif item == max_count:\n            max_item = max(max_item, item)\n    return max_item",
    "def max_occurrences(item_list):\n    \"\"\"\n    :type item_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_item = 0\n    for item in item_list:\n        if item > max_occurrences:\n            max_occurrences = item\n            max_occurrences_item = item\n\n    return max_occurrences_item",
    "def max_occurrences(lst):\n    \"\"\"\n    lst: list of integers\n    return: the item with maximum occurrences\n    \"\"\"\n    # sort the list\n    lst = sorted(lst)\n    # find the item with maximum occurrences\n    max_occurrences = max(lst)\n    for item in lst:\n        if max_occurrences == item:\n            max_occurrences = item\n    return max_occurrences\n\nprint(max_occurrences([1,3,3,1,1,2,2,2,2,1]))\nprint(max_occurrences([1,1,1,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,1,1,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,1,1,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,2,3,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,2,3,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,2,3,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,2,3,1,1,1,1,1,1,1]))\nprint(max_occurrences([1,2,3,1,1,1,1,1,1,1]))",
    "# https://www.hackerrank.com/challenges/find-max-occurrence-in-a-list\n# https://www.hackerrank.com/challenges/find-max-occurrence-in-a-list/problem\n\nimport random\nimport sys\n\n\ndef find_max_occurrence(data_list):\n    max_occurrence = 0\n    max_index = 0\n    for index, value in enumerate(data_list):\n        if value > max_occurrence:\n            max_occurrence = value\n            max_index = index\n    return max_index\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    data_list = list(map(int, input().strip().split(' ')))\n    print(find_max_occurrence(data_list))",
    "import unittest\n\n\nclass Solution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n        self.assertEqual(max_occurrences([\"one\", \"two\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\", \"one\", \"one\", \"one\"]), \"one\")\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def max_occurrences(my_list):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_item = 0\n    for item in my_list:\n        if item > max_occurrences:\n            max_occurrences = item\n            max_occurrences_item = item\n\n    return max_occurrences_item\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    my_list = [3, 3, 3, 4, 3, 4, 5, 2, 4, 5]\n    print(max_occurrences(my_list))\n\nif __name__ == '__main__':\n    main()",
    "def max_occurrence(list):\n    \"\"\"\n    :param list: list of integers\n    :return: item with maximum occurrences\n    \"\"\"\n\n    return max(list, key=list.count)\n\nif __name__ == '__main__':\n    assert max_occurrence([1, 1, 2, 3, 2, 1, 1]) == 3\n    assert max_occurrence([1, 2, 3]) == 1",
    "def findMax(aList, aKey=lambda x: x):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    Input: aList: a list of integers.\n    Output: the item with maximum occurrences in aList.\n    \"\"\"\n    maxKey = aKey(aList[0])\n    for item in aList:\n        if aKey(item) > maxKey:\n            maxKey = aKey(item)\n    return maxKey\n\n\ndef main():\n    \"\"\"\n    Test cases for findMax().\n    \"\"\"\n    print \"findMax() with maxKey=lambda x: x\"\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4])\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], lambda x: x)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], lambda x: x)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], lambda x: x)\n    print \"findMax() with maxKey=max\"\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print \"findMax() with maxKey=max\"\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print \"findMax() with maxKey=max\"\n    print findMax([1, 2, 2, 3, 3, 3, 3, 3, 3, 4], max)\n    print findMax([1, 2, 2, 3, 3",
    "import argparse\nimport collections\n\ndef get_max_count(lst):\n    \"\"\"\n    Given a list, find the maximum number of times an item is in the list.\n    \"\"\"\n    max_count = collections.Counter(lst).most_common()[0][1]\n    return max_count\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"list_file\", help=\"Input file name\")\n    args = parser.parse_args()\n\n    with open(args.list_file, \"r\") as f:\n        lst = [int(x.strip()) for x in f]\n\n    print(get_max_count(lst))",
    "def maxOccurrences(list1):\n    # YOUR CODE HERE\n    pass",
    "def max_occurrences(items):\n    return max(items, key=lambda x: items.count(x))\n\n#print(max_occurrences([1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 10, 10, 11, 12, 12, 12, 12, 12, 12, 12, 13, 14, 14, 14, 14, 14]))\n#print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,",
    "def max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\n\ndef max_occurrences(list):\n    max_occurrences = max(list)\n    max_occurrences_index = list.index(max_occurrences)\n    return max_occurrences_index\n\n\n\n\"\"\"",
    "def max_occurrences(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    # Solution 1:  Count the number of times each item appears in the list and\n    # return the maximum.\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n\n    max_item = max(counts, key=counts.get)\n    return max_item\n\n\ndef max_occurrences_2(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    # Solution 2:  Sort the list, then find the maximum number of times an item\n    # appears.\n    lst = sorted(lst)\n    max_item = 0\n    for item in lst:\n        if item > max_item:\n            max_item = item\n    return max_item\n\n# Note:\n# The solution above is more than O(n) complexity, but it is still O(n) time.\n# The solution below is more than O(nlogn) complexity, but it is still O(n) time.\n# The solution below is O(n) complexity, but it is still O(n) time.",
    "import argparse\nimport sys\n\nfrom collections import Counter\n\ndef find_max(items, k):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    :param items: List of items to find the maximum of.\n    :param k: The number of items to find.\n    :return: The item with the maximum number of occurrences, or None if there are no items to find.\n    \"\"\"\n    if not items:\n        return None\n    # Sort the list by frequency\n    items.sort(key=lambda x: Counter(x).most_common(k)[0][1], reverse=True)\n    # Find the item with the maximum number of occurrences\n    return items[0] if items[0] in Counter(items[:k]).most_common() else None\n\n\ndef main(args):\n    \"\"\"\n    Main function of the program.\n    :param args: The arguments given to the program.\n    :return: None\n    \"\"\"\n    # Parse the arguments\n    parser = argparse.ArgumentParser(description='Find the item with the maximum number of occurrences in a list.')\n    parser.add_argument('-i', '--input', type=str, required=True, help='Path to the input file.')\n    parser.add_argument('-k', '--k', type=int, required=True, help='Number of items to find.')\n    args = parser.parse_args(args)\n\n    # Read the input file\n    with open(args.input) as input_file:\n        input_lines = input_file.readlines()\n\n    # Find the item with the maximum number of occurrences\n    max_item = find_max(input_lines, args.k)\n\n    # Print the result\n    if max_item:\n        print(max_item)\n    else:\n        print('There is no item with more than {} occurrences.'.format(args.k))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])",
    "# TODO\n# - return a list of maximum occurrences\n# - return a list of max occurrences and the corresponding element\n\n# TODO:\n# - get the list with the maximum number of occurrences\n# - get the list with the maximum number of occurrences and the corresponding element\n\ndef get_max_occurrences(list):\n    \"\"\"\n    Returns a list of the element with the maximum number of occurrences in the list.\n    \"\"\"\n    # TODO: write a method to get the maximum number of occurrences\n    # TODO: write a method to get the maximum number of occurrences and the corresponding element\n\n    # TODO: return a list of the element with the maximum number of occurrences\n    # TODO: return a list of the element with the maximum number of occurrences and the corresponding element",
    "def max_occurrences(lst):\n    if len(lst) == 0:\n        return None\n    return max(lst, key=lambda x: lst.count(x))\n\n\n\ndef main():\n    lst = [1, 1, 2, 2, 2, 3, 3]\n    print(max_occurrences(lst))\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurrence(list):\n    return max(list, key=lambda x: list.count(x))\n\n# Your code here\n\nif __name__ == '__main__':\n    l = [2, 3, 4, 5, 6, 2, 4, 5, 6]\n    print(max_occurrence(l))",
    "def max_occurrences(my_list):\n    max_occurrences_list = [0] * len(my_list)\n    for item in my_list:\n        max_occurrences_list[item] = max(max_occurrences_list[item], my_list.count(item))\n\n    return max_occurrences_list\n\nprint max_occurrences([1,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
    "def find_max_occurrences(items, max_occurrences):\n    max_occurrences = max(max_occurrences)\n    for item in items:\n        if item in items:\n            if len(items) < max_occurrences:\n                items.append(item)\n            else:\n                items.remove(item)\n                items.append(item)\n    return items\n\nitems = [1,2,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\nmax_occurrences = 10\n\nprint(find_max_occurrences(items, max_occurrences))",
    "def find_max(list_):\n    \"\"\"\n    :param list_: list of numbers\n    :return: the item with the maximum number of occurrences in the list\n    \"\"\"\n    max_occurrences = 0\n    max_item = 0\n    for item in list_:\n        if item in list_:\n            if item > max_occurrences:\n                max_occurrences = item\n                max_item = item\n    return max_item",
    "from collections import Counter\n\ndef max_occurrences(numbers):\n    \"\"\"\n    Find the item with the maximum number of occurrences in a given list.\n\n    numbers: list of numbers.\n    returns: the item with the maximum number of occurrences.\n    \"\"\"\n    items = Counter(numbers)\n    max_occurrences = max(items.items(), key=lambda x: x[1])[0]\n    return max_occurrences\n\nif __name__ == '__main__':\n    # The first input is a list of numbers.\n    numbers = [1, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_occurrences(numbers))",
    "def max_occurrences(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: the item with the maximum number of occurrences in the list\n    \"\"\"\n    return max(lst, key=lst.count)\n\ndef main():\n    print(max_occurrences([1, 2, 3, 3, 2, 2, 1]))\n\nif __name__ == '__main__':\n    main()",
    "def findMax(l):\n    # Your code here\n    max_item = l[0]\n    max_count = 0\n    for i in range(len(l)):\n        if l[i] == max_item:\n            max_count = max_count + 1\n        elif l[i] > max_item:\n            max_item = l[i]\n            max_count = 1\n        elif l[i] < max_item:\n            max_count = max_count + 1\n    return max_item, max_count\n\ndef findMax2(l):\n    # Your code here\n    max_item = l[0]\n    max_count = 0\n    for i in range(len(l)):\n        if l[i] > max_item:\n            max_item = l[i]\n            max_count = 1\n        elif l[i] < max_item:\n            max_item = l[i]\n            max_count = max_count + 1\n    return max_item, max_count\n\nl = [1,2,3,1,4]\n\nmax_item, max_count = findMax2(l)\nprint max_item, max_count\n\nl = [1,2,3,4,5]\n\nmax_item, max_count = findMax2(l)\nprint max_item, max_count",
    "def findMax(list):\n    \"\"\"\n    >>> list = [1, 3, 1, 2, 2, 3, 3, 1, 1, 2, 2]\n    >>> findMax(list)\n    3\n    >>> findMax([])\n    Traceback (most recent call last):\n   ...\n    AssertionError: list is empty\n    >>> findMax([1, 2, 3, 4, 5, 6])\n    Traceback (most recent call last):\n   ...\n    AssertionError: list has more than one element\n    \"\"\"\n    assert not list == []\n    assert len(list) > 1, 'list is empty'\n\n    max_occurrence = 0\n    max_occurrence_item = None\n\n    for item in list:\n        if item in list:\n            if item > max_occurrence:\n                max_occurrence = item\n                max_occurrence_item = item\n\n    return max_occurrence_item\n\ndef test_findMax():\n    assert findMax([1, 3, 1, 2, 2, 3, 3, 1, 1, 2, 2]) == 3\n    assert findMax([]) == None\n    assert findMax([1, 2, 3, 4, 5, 6]) == 6\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def max_occurrence(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    \n    m = 0\n    for i in lst:\n        if i in lst:\n            if lst.count(i) > m:\n                m = lst.count(i)\n    return m",
    "def find_max_item(lst):\n    \"\"\"\n    :param lst: List of numbers.\n    :return: The index of the maximum number.\n    \"\"\"\n    max_item = -1\n    max_count = 0\n\n    for i, n in enumerate(lst):\n        if n > max_count:\n            max_item = i\n            max_count = n\n\n    return max_item\n\n\nif __name__ == '__main__':\n    lst = [3, 1, 2, 1, 3, 2, 3, 4, 2, 1, 3, 1, 2, 4, 2, 3]\n    print(find_max_item(lst))",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def maxOccurrences(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        \n        def count(node):\n            if node is None:\n                return 0\n            \n            count = 1\n            while node.next:\n                count += count(node.next)\n                node = node.next\n            return count\n        \n        count = count(head)\n        \n        return max(1, count)",
    "def max_occurrences(list_of_numbers):\n    \"\"\"\n    Return the item with the maximum number of occurrences in a given list.\n    \"\"\"\n\n    # TODO: implement your code here\n\n    # Your code here\n    return\n\n\nif __name__ == '__main__':\n    # TODO: write your code here\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_occurrences([1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]) == 7\n    assert max_",
    "#!/usr/bin/env python\n\nfrom collections import Counter\n\n# Complete the maxOccurrences function below.\ndef maxOccurrences(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # Complete this function\n    counter = Counter(nums)\n    return max(counter.values())\n\nif __name__ == '__main__':\n    print maxOccurrences([1, 3, 3, 1, 2, 3, 3, 1, 2])\n    print maxOccurrences([1, 3, 3, 1, 2, 3, 3, 1, 2])\n    print maxOccurrences([1, 3, 3, 1, 2, 3, 3, 1, 2])\n    print maxOccurrences([1, 3, 3, 1, 2, 3, 3, 1, 2])",
    "# The following line is not needed if using Python 3\n# import __future__\n\nimport math\n\ndef max_occurrences(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Your Code Here\n    # Count the number of occurrences of each element\n    count = collections.Counter(numbers)\n    # Find the maximum count\n    max_count = max(count.values())\n    # Return the index of the maximum count\n    return max_count\n\ndef main():\n    numbers = [1,2,3,1,2,3,2,3,2,2]\n    print(max_occurrences(numbers))\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurrences(list_):\n    \"\"\"\n    :param list_: a list\n    :return: the item with max occurrences\n    \"\"\"\n    max_occurrences = max(list_)\n    return max_occurrences\n\n# your code goes here",
    "import sys\n\ndef max_occurrences(list_):\n    \"\"\"\n    Returns the maximum occurrences in a given list.\n    :param list_: list of values.\n    :return: the maximum number of occurrences in the given list.\n    \"\"\"\n    count = 0\n    for x in list_:\n        count += 1\n        if count > list_.count(x):\n            list_ = [x]\n            count = 1\n    return list_\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    max_occurrences(list_)\n    print(max_occurrences(list_))",
    "def max_occurrences(list_):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    :param list_:\n    :return:\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_item = None\n    for item in list_:\n        if item in list_:\n            if item in list_:\n                if list_[item] > max_occurrences:\n                    max_occurrences = list_[item]\n                    max_occurrences_item = item\n    return max_occurrences_item\n\nif __name__ == '__main__':\n    list_ = [1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5]\n    print(max_occurrences(list_))",
    "def max_occurrences(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers: A list of numbers.\n    :return: The index of the element with maximum occurrences in the list.\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_index = 0\n    for i in range(0, len(list_of_numbers)):\n        if list_of_numbers[i] > max_occurrences:\n            max_occurrences = list_of_numbers[i]\n            max_occurrences_index = i\n    return max_occurrences_index\n\nif __name__ == \"__main__\":\n    assert max_occurrences(range(1, 6)) == 3\n    assert max_occurrences(range(5, 0, -1)) == 3\n    assert max_occurrences(range(1, 10, 2)) == 2\n    assert max_occurrences(range(1, 11, 2)) == 1\n    assert max_occurrences(range(1, 11, 3)) == 3\n    assert max_occurrences(range(1, 11, 4)) == 4\n    assert max_occurrences(range(1, 11, 5)) == 5\n    assert max_occurrences(range(1, 11, 6)) == 6",
    "def max_occurrence(list_):\n    \"\"\"\n    :param list_: A list of integers.\n    :return: The item with the maximum number of occurrences in the list.\n    \"\"\"\n    max_occurrence = -1\n    max_occurrence_index = -1\n    for i, item in enumerate(list_):\n        if item > max_occurrence:\n            max_occurrence = item\n            max_occurrence_index = i\n    return max_occurrence_index\n\n\nif __name__ == \"__main__\":\n    assert max_occurrence([1,2,3,3,3,4,5]) == 3\n    assert max_occurrence([1,1,1,1,1,1]) == 1\n    assert max_occurrence([1,1,1,1,1,1]) == 1\n    assert max_occurrence([1,1,1,1,1,1]) == 1\n    assert max_occurrence([1,1,1,1,1,1]) == 1\n    assert max_occurrence([1,2,3,3,3,4,5]) == 5\n    assert max_occurrence([1,2,3,3,3,4,5]) == 5",
    "import sys\n\ndef find_max_item(items, n):\n    \"\"\"\n    :type items: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if len(items) == 0:\n        return None\n    \n    # first sort the list\n    items.sort()\n    \n    # find the maximum element in the list\n    max_index = 0\n    max_val = items[0]\n    for i in range(1, len(items)):\n        if items[i] > max_val:\n            max_val = items[i]\n            max_index = i\n    \n    # return the index of the maximum element\n    return max_index\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    if len(sys.argv)!= 3:\n        print(\"python3 {} {}\".format(sys.argv[0], sys.argv[1]))\n        sys.exit(1)\n    \n    input_list = [int(x) for x in sys.argv[2].split(' ')]\n    n = len(input_list)\n    \n    print(find_max_item(input_list, n))\n\nif __name__ == '__main__':\n    main()",
    "import sys\n\ndef find_max(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a list.\n    :param lst: list\n    :return: tuple (max, item)\n    \"\"\"\n    max_count = 0\n    max_item = None\n    for item in lst:\n        if item not in lst:\n            continue\n        if lst.count(item) > max_count:\n            max_count = lst.count(item)\n            max_item = item\n    return (max_count, max_item)\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: {} <list>'.format(sys.argv[0]))\n        sys.exit(1)\n    lst = map(int, sys.argv[1].split(','))\n    print('Max: {}'.format(find_max(lst)))",
    "def max_occurrences(numbers):\n    \"\"\"\n    Find the maximum number of occurrences in a list of numbers.\n\n    :type numbers: list\n    :rtype: int\n\n    >>> max_occurrences([1, 2, 3, 2, 1])\n    3\n    >>> max_occurrences([1, 2, 3, 2, 1, 1])\n    2\n    \"\"\"\n    max_occurrences = 0\n    for i in numbers:\n        if i > max_occurrences:\n            max_occurrences = i\n    return max_occurrences\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 2, 1]\n    print(max_occurrences(numbers))",
    "#!/usr/bin/env python\n\nimport sys\n\ndef max_occurrences(list_):\n    if len(list_) < 1:\n        return 0\n    max_occurrences = 0\n    max_occurrences_item = 0\n    for item in list_:\n        if item in list_:\n            list_.remove(item)\n        if len(list_) == 0:\n            return 0\n        if len(list_) > max_occurrences:\n            max_occurrences = len(list_)\n            max_occurrences_item = item\n    return max_occurrences_item\n\nif __name__ == '__main__':\n    input_ = sys.stdin.read()\n    list_ = []\n    for line in input_.splitlines():\n        list_.append(int(line))\n    print max_occurrences(list_)",
    "import collections\n\ndef max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    Input:\n        lst: a list of integers\n    Output:\n        the item with maximum occurrences\n    \"\"\"\n    if not lst:\n        return 0\n    max_item = collections.defaultdict(int)\n    max_item[lst[0]] = 1\n    for i in range(1, len(lst)):\n        if lst[i] in max_item:\n            max_item[lst[i]] += 1\n        else:\n            max_item[lst[i]] = 1\n    return max(max_item, key=max_item.get)",
    "# Create list of numbers from 1 to 100\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n\n# Create a list to hold the maximum number of times an item appears in the list\nmax_counts = [0] * 100\n\n# Iterate through the list of numbers and update the max_counts list\nfor num in numbers:\n    # If the current number appears in the list, increment its count by 1\n    if num in max_counts:\n        max_counts[num] += 1\n    # Otherwise, set the current number as the max number\n    else:\n        max_counts[num] = 1\n\n# Find the maximum number of times the current number appears in the list\nmax_count = max(max_counts)\n\n# Print the result\nprint \"The number of times the number \" + str(max_count) + \" appears in the list is: \" + str(max_counts[max_count])",
    "def findMax(lst):\n    max = 0\n    max_item = 0\n    for item in lst:\n        if item > max:\n            max = item\n            max_item = item\n        elif item == max:\n            max_item += 1\n    return max_item\n\ndef test():\n    lst = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "import sys\nimport os\nimport math\nimport timeit\n\n\ndef main():\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    \"\"\"\n    print(\"---Time:\", timeit.timeit(\"max_occurrences(range(1, 100))\", setup=\"from __main__ import max_occurrences\", number=1000))\n\n    for i in range(1, 100):\n        max_occurrences = max_occurrences(range(1, i + 1))\n        print(\"Max Occurrences:\", max_occurrences)\n\ndef max_occurrences(nums):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    :param nums: list\n    :return: int\n    \"\"\"\n    max_value = -1\n    for i in range(len(nums)):\n        if nums[i] > max_value:\n            max_value = nums[i]\n    return max_value\n\n\nif __name__ == '__main__':\n    main()",
    "def findMax(items):\n    \"\"\"\n    items: list of integers.\n    \n    returns: The item with maximum occurrences in the list.\n    \"\"\"\n    max_occurrences = 0\n    max_item = 0\n    for item in items:\n        if max_occurrences < item:\n            max_occurrences = item\n            max_item = item\n        elif max_occurrences == item:\n            max_item = item\n    return max_item\n\nif __name__ == '__main__':\n    input_list = [1,2,3,4,5,6,7,8,9,10]\n    print(findMax(input_list))",
    "import random\n\ndef max_occurrences(input_list):\n    \"\"\"\n    :type input_list: list\n    :rtype: int\n    \"\"\"\n    if len(input_list) < 2:\n        return input_list[0]\n    max_item = input_list[0]\n    max_item_occurrences = input_list[0]\n    for item in input_list[1:]:\n        if input_list.count(item) > input_list.count(max_item):\n            max_item = item\n            max_item_occurrences = input_list.count(item)\n    return max_item\n\ndef main():\n    \"\"\"\n    Sample Input:\n    [1,3,4,2,2,3,1,2,1]\n    Sample Output:\n    2\n    \"\"\"\n    input_list = [1,3,4,2,2,3,1,2,1]\n    print(\"Max Occurrences:\", max_occurrences(input_list))\n\nif __name__ == '__main__':\n    main()",
    "def find_max(my_list):\n    max_count = max(my_list)\n    max_index = 0\n    for index in range(len(my_list)):\n        if my_list[index] == max_count:\n            max_index = index\n            break\n    return max_index\n\n# test cases\n\nmy_list = [10, 3, 5, 2, 1, 5, 8, 2, 7]\nprint(find_max(my_list))\n\nmy_list = [10, 3, 5, 2, 1, 5, 8, 2, 7, 8]\nprint(find_max(my_list))\n\nmy_list = [1, 1, 1, 2, 2, 2, 2, 2, 2]\nprint(find_max(my_list))\n\nmy_list = [1, 1, 1, 2, 2, 2, 2, 2, 2, 3]\nprint(find_max(my_list))\n\nmy_list = [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3]\nprint(find_max(my_list))\n\nmy_list = [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3]\nprint(find_max(my_list))",
    "def max_occurrences(items, n):\n    \"\"\"\n    :type items: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    m = -1\n    for i in range(len(items)):\n        if items[i] > m:\n            m = items[i]\n    return m\n\nprint max_occurrences([1,3,1,2,3,3,1], 3)",
    "def max_occurrences(data):\n    \"\"\"\n    :param data: the given list\n    :return: the item with maximum occurrences\n    \"\"\"\n    # YOUR CODE HERE\n    return None",
    "def maxOccurrences(items, k):\n    \"\"\"\n    :type items: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if not items:\n        return 0\n\n    # Write your code here\n    def max_items(items, k):\n        if not items:\n            return 0\n        else:\n            max_item = max(items)\n            max_count = 1\n            for item in items:\n                if item == max_item:\n                    max_count += 1\n                else:\n                    max_count = max(max_count, max_items(items[:item], k))\n            return max_count\n\n    return max_items(items, k)\n\n\nprint(maxOccurrences([3, 2, 3, 1, 2, 4, 3, 5, 1, 5, 4, 5, 3, 1, 3, 5, 3, 4], 3))",
    "def findMax(aList):\n    maxValue = aList[0]\n    for i in aList:\n        if i > maxValue:\n            maxValue = i\n    return maxValue\n\ndef main():\n    aList = [1,1,2,2,3,3,3,3,3,3,3]\n    print findMax(aList)\n\nif __name__ == '__main__':\n    main()",
    "def findMax(items):\n    maxValue = items[0]\n    maxIndex = 0\n    for index in range(len(items)):\n        if items[index] > maxValue:\n            maxValue = items[index]\n            maxIndex = index\n    return maxIndex\n\nif __name__ == '__main__':\n    items = [1,2,3,2,2,1]\n    maxIndex = findMax(items)\n    print(maxIndex)",
    "def findMax(mylist):\n    \"\"\"\n    :param mylist: a list\n    :return: the item with maximum occurrences\n    \"\"\"\n    max_item = 0\n    max_occurrences = 0\n    for item in mylist:\n        if item > max_occurrences:\n            max_occurrences = item\n            max_item = item\n    return max_item\n\nprint(findMax([1, 3, 3, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
    "def max_occurrences(list_):\n    max_occurrences = 0\n    for i in range(0, len(list_)):\n        if list_[i] == list_[i]:\n            if list_[i] > max_occurrences:\n                max_occurrences = list_[i]\n    return max_occurrences\n\nlist_ = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "# The input list can be given as a single integer or a list of integers.\n\ndef max_occurrences(input_list):\n    # YOUR CODE HERE\n    if type(input_list) is int:\n        return max(input_list)\n    elif type(input_list) is list:\n        return max(input_list)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    print max_occurrences([1, 1, 2, 1, 1, 3, 4, 2, 5, 1, 2, 1, 2, 3, 1, 2, 1, 4, 1, 3, 1, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "def findMax(l):\n    return max(l, key=l.count)\n\nif __name__ == '__main__':\n    l = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]\n    print findMax(l)",
    "def max_occurrences(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: int\n    \"\"\"\n    max_occurrences = 0\n    for i in range(0, len(L)):\n        if L[i] > max_occurrences:\n            max_occurrences = L[i]\n    return max_occurrences",
    "# Write your code here\n#\n#\n\ndef max_occurrences(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: int\n    \"\"\"\n    max_value = 0\n    max_index = 0\n    for i in range(len(my_list)):\n        if my_list[i] == max_value:\n            max_index = i\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n            max_index = i\n    return max_index\n\n\n\nif __name__ == '__main__':\n    my_list = [1,2,2,3,3,3,3,4,4,4]\n    print(max_occurrences(my_list))\n    my_list = [1,1,2,3,3,3,4,4,4]\n    print(max_occurrences(my_list))\n    my_list = [1,1,1,1,1,1,1,1,1]\n    print(max_occurrences(my_list))\n    my_list = [1,2,3,3,3,3,3,3,3,3]\n    print(max_occurrences(my_list))\n    my_list = [1,2,3,4,4,4,4,5,6,7,8,9,10]\n    print(max_occurrences(my_list))\n    my_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75",
    "def findMax(list):\n    \"\"\"\n    Find the maximum value in the list.\n\n    :param list: List of integers.\n    :return: The maximum value.\n    \"\"\"\n    return max(list)\n\n\n# The following code is not tested\ndef findMax2(list):\n    \"\"\"\n    Find the maximum value in the list.\n\n    :param list: List of integers.\n    :return: The maximum value.\n    \"\"\"\n    # Find the index of the maximum value\n    maxIndex = 0\n    maxValue = list[0]\n\n    for i in range(1, len(list)):\n        if list[i] > maxValue:\n            maxValue = list[i]\n            maxIndex = i\n\n    return maxValue, maxIndex\n\n\ndef main():\n    # Test 1\n    list = [1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(findMax(list))\n\n    # Test 2\n    list = [5, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(findMax2(list))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_occurrences(a_list):\n    \"\"\"\n    :param a_list: A list\n    :return: The item with the highest occurrences.\n    \"\"\"\n    max_occurrences = -1\n    for item in a_list:\n        if item in a_list:\n            if item > max_occurrences:\n                max_occurrences = item\n        else:\n            return item\n    return max_occurrences",
    "def find_max(lst):\n    \"\"\"\n    :param lst: list\n    :return: tuple (max_item, max_occurrences)\n    \"\"\"\n    return max(lst, key=lst.count)\n\nif __name__ == '__main__':\n    lst = [1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "def max_occurrences(lst):\n    \"\"\"\n    lst: list of ints\n    returns: the item with maximum occurrences in the list\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_item = 0\n    for item in lst:\n        if item > max_occurrences:\n            max_occurrences = item\n            max_occurrences_item = item\n    return max_occurrences_item\n\nprint(max_occurrences( [3,3,3,3,3,3,3,3,3,3]))",
    "def find_max(items, list_length):\n    max_item = 0\n    max_count = 0\n    for item in items:\n        count = 0\n        for i in range(list_length):\n            if item == items[i]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item, max_count\n\nif __name__ == \"__main__\":\n    items = [1, 2, 3, 1, 4, 2, 3, 1, 2, 3, 1, 2, 3]\n    list_length = len(items)\n    max_item, max_count = find_max(items, list_length)\n    print max_item, max_count",
    "def find_max(lst):\n    \"\"\"\n    find_max(lst) -> item, count\n\n    :param lst: List of values\n    :return: the item with maximum count, and its count\n    \"\"\"\n    max_count = 0\n    max_item = None\n\n    for item in lst:\n        if item in lst:\n            count = lst.count(item)\n            if count > max_count:\n                max_count = count\n                max_item = item\n\n    return max_item, max_count\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7]\n    item, count = find_max(lst)\n    print(item, count)",
    "def maxOccurence(lst):\n    max_occurence = 0\n    for item in lst:\n        if(item in lst):\n            lst.remove(item)\n        if(lst.count(item) > max_occurence):\n            max_occurence = lst.count(item)\n    return max_occurence\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9]\n    print(maxOccurence(lst))\n    lst = [1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9]\n    print(maxOccurence(lst))\n    lst = [1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9]\n    print(maxOccurence(lst))",
    "def max_occurrence(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    max_occurrence = 0\n    for number in list_of_numbers:\n        if number in list_of_numbers:\n            list_of_numbers.remove(number)\n        else:\n            max_occurrence = max(max_occurrence, number)\n    return max_occurrence\n\n\"\"\"\nprint(max_occurrence([2, 4, 6, 1, 3, 5, 7, 9]))\n\"\"\"",
    "def find_max(lst, key=None):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    Arguments:\n    lst -- list of items.\n    key -- function used to compare items.\n\n    Returns:\n    The item with maximum occurrences.\n    \"\"\"\n    if key is None:\n        key = lambda x: x\n    max_item = None\n    max_count = 0\n    for item in lst:\n        if key(item) > max_count:\n            max_count = key(item)\n            max_item = item\n    return max_item\n\n\ndef test_find_max():\n    assert find_max([1,2,3,4,5]) == 5\n    assert find_max([2,1,1,4,5]) == 1\n    assert find_max([1,2,3,4,4,5]) == 4\n    assert find_max([1,2,3,4,4,4,5]) == 4\n    assert find_max([1,2,3,4,4,4,5,6]) == 6\n    assert find_max([1,2,3,4,4,4,5,6,7]) == 6\n\nif __name__ == \"__main__\":\n    test_find_max()",
    "# Write your code below\ndef max_occurrences(lst):\n    # YOUR CODE HERE\n    pass\n\n\nif __name__ == \"__main__\":\n    lst = [1,3,1,1,3]\n    print max_occurrences(lst)",
    "def max_occurrences(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    max_val = 0\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\"\"\"\nTest cases\n\"\"\"\n\nlst = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\nprint(max_occurrences(lst))",
    "def findMaxOccurrences(myList):\n    \"\"\"\n    :type myList: List[int]\n    :rtype: int\n    \"\"\"\n    max = 0\n    for i in range(0, len(myList)):\n        if myList[i] > max:\n            max = myList[i]\n    return max\n\nif __name__ == '__main__':\n    myList = [1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6",
    "# Your function will be called as follows:\n# function(items, num_occurrences)\n#\n# items is a list of strings\n# num_occurrences is an integer\n#\n# The function's return value will be stored in the list items\n\ndef max_occurrences(items, num_occurrences):\n    \"\"\"\n    :type items: List[str]\n    :type num_occurrences: int\n    :rtype: List[str]\n    \"\"\"\n    max_count = 0\n    max_item = \"\"\n    for i in range(0, len(items)):\n        if items[i] not in max_item:\n            max_count = max(max_count, num_occurrences[i])\n            if max_count > num_occurrences[i]:\n                max_item = items[i]\n                max_count = num_occurrences[i]\n    return max_item",
    "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python",
    "#!/usr/bin/env python\n\n# imports\nimport sys\nimport random\n\n# create a list\nnumbers = []\n\n# add some random numbers\nfor i in range(10):\n    numbers.append(random.randint(0, 10))\n\n# print the list\nprint(numbers)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:\", max)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the min of the list\nmin = min(numbers)\n\n# print the min\nprint(\"The min number is:\", min)\n\n# get the max of the list\nmax = max(numbers)\n\n# print the max\nprint(\"The max number is:",
    "def max_occurrences(lst):\n    \"\"\"\n    Input: list of integers\n    Output: the item with maximum occurrences\n    \"\"\"\n    def max_occurrences_helper(lst, current_max):\n        if current_max == 0:\n            return 0\n        for i in range(0, len(lst)):\n            if lst[i] == current_max:\n                return i\n            elif lst[i] > current_max:\n                current_max = lst[i]\n                return i\n    return max_occurrences_helper(lst, 0)\n\nprint(max_occurrences([1, 2, 2, 3, 3, 3, 4]))",
    "def findMax(list):\n    maxIndex = 0\n    maxCount = 0\n    for i in range(len(list)):\n        if list[i] > maxCount:\n            maxIndex = i\n            maxCount = list[i]\n    return maxIndex\n\nif __name__ == '__main__':\n    l = [4, 2, 1, 3, 3, 2]\n    print findMax(l)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}