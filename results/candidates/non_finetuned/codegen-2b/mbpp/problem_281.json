{
  "problem": {
    "task_id": "MBPP/292",
    "prompt": "Write a python function to find quotient of two numbers.",
    "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
    "test_list": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ],
    "challenge_test_list": [],
    "problem_id": 281
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_quotient(a, b):\n    # write your code here\n    if b == 0:\n        return None\n    elif a == 0:\n        return 0\n    else:\n        return a // b\n\na = int(input())\nb = int(input())\nprint(find_quotient(a, b))",
    "def quotient(n1, n2):\n    '''\n    Returns the quotient of two numbers.\n    '''\n    n1, n2 = int(n1), int(n2)\n    if n2 == 0:\n        return 0\n    else:\n        return n1/n2\n\nif __name__ == '__main__':\n    print quotient(1, 1)\n    print quotient(2, 2)\n    print quotient(3, 3)\n    print quotient(2, 3)\n    print quotient(5, 4)",
    "import math\n\ndef find_quotient(a, b):\n    if b == 0:\n        raise ZeroDivisionError('Quotient cannot be zero')\n\n    return a / b\n\n\nif __name__ == '__main__':\n    print(find_quotient(10, 2))\n    print(find_quotient(10, 3))\n    print(find_quotient(10, 5))",
    "def quotient(num1, num2):\n    return num1 / num2\n\nif __name__ == '__main__':\n    assert quotient(1, 0) == 1\n    assert quotient(0, 1) == 0\n    assert quotient(2, 3) == 1\n    assert quotient(3, 4) == 0.75\n    assert quotient(4, 2) == 2\n    assert quotient(5, 4) == 1\n    assert quotient(5, 3) == 2\n    assert quotient(4, 5) == 0.5",
    "def find_quotient(a, b):\n    \"\"\"\n    Return the quotient of two numbers.\n    :param a: First number.\n    :param b: Second number.\n    :return: Quotient of two numbers.\n    \"\"\"\n\n    if a < 0 or b < 0:\n        raise ValueError(\"Numbers should not be negative.\")\n\n    if a == 0:\n        return 0\n\n    return a / b\n\ndef test_find_quotient():\n    assert find_quotient(2, 3) == 1\n    assert find_quotient(4, 2) == 2\n    assert find_quotient(5, 2) == 2\n    assert find_quotient(7, 3) == 2\n    assert find_quotient(7, 4) == 3\n    assert find_quotient(4, 7) == 1\n    assert find_quotient(4, 0) == 0\n    assert find_quotient(0, 4) == 0\n    assert find_quotient(0, 0) == 0",
    "def quotient(a, b):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :return: quotient of a and b\n    \"\"\"\n    return a / b\n\nif __name__ == \"__main__\":\n    a = 7\n    b = 2\n    print(quotient(a, b))",
    "def find_quotient(num1, num2):\n    \"\"\"\n    Find quotient of two numbers.\n    \"\"\"\n    # return int(num1/num2) if num2 > 0 else 0\n    return num1 / num2\n\nif __name__ == '__main__':\n    print find_quotient(3, 2)",
    "def divide(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == 1:\n        return 1\n    if b == 1:\n        return 1\n    if a == b:\n        return 1\n    if b == -1:\n        return -1\n    if a > b:\n        return divide(a, b)\n    return divide(b, a)\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    result = divide(a, b)\n    print(result)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef quotient(a, b):\n    return int(round(a/b))\n\n\ndef test_quotient():\n    assert quotient(2, 1) == 2\n    assert quotient(5, 2) == 2\n    assert quotient(4, 3) == 1\n    assert quotient(4, 2) == 2\n    assert quotient(4, 4) == 1\n    assert quotient(4, 5) == 1\n    assert quotient(5, 5) == 1\n\nif __name__ == '__main__':\n    test_quotient()",
    "def quotient(num1, num2):\n    if num2 == 0:\n        return 0\n    elif num2 == 1:\n        return num1\n    else:\n        return num1 / num2\n\n\nprint(quotient(1, 2))\nprint(quotient(2, 2))\nprint(quotient(3, 2))\nprint(quotient(4, 2))",
    "def divide(a, b):\n    while b:\n        a, b = a // b, a % b\n    return a\n\nif __name__ == '__main__':\n    print(divide(3, 2))\n    print(divide(5, 3))\n    print(divide(3, 5))\n    print(divide(15, 10))\n    print(divide(9, 3))\n    print(divide(3, 9))",
    "def quotient(a, b):\n    if b == 0:\n        return None\n    else:\n        return a / b\n\nprint quotient(2, 3)\nprint quotient(3, 4)\nprint quotient(3, 3)\nprint quotient(4, 4)\nprint quotient(0, 0)",
    "def find_quotient(a, b):\n    if a == 0 or b == 0:\n        return 0\n    quotient = a / b\n    return quotient\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (10, 10),\n        (2, 4),\n        (5, 2),\n        (0, 1),\n        (2, -2),\n        (3, -1)\n    ]\n    for test_case in test_cases:\n        print(find_quotient(*test_case))",
    "def find_quotient(n1, n2):\n    return n1/n2\n\nprint(find_quotient(2, 4))",
    "def quotient(num1, num2):\n    \"\"\"\n    Return the quotient of two numbers.\n    num1 and num2 can be either integers or floats.\n    \"\"\"\n    if num1 == 0:\n        return 0\n    else:\n        return num2 / num1\n\nif __name__ == \"__main__\":\n    assert quotient(2, 3) == 1\n    assert quotient(5, 3) == 2\n    assert quotient(5, -3) == -2",
    "def find_quotient(a, b):\n    \"\"\"\n    Find quotient of two numbers a and b.\n    \"\"\"\n    if b == 0:\n        raise ValueError('Division by zero is not allowed')\n    return a / b",
    "def find_quotient(x, y):\n    return x / y\n\nprint find_quotient(3, 2)",
    "import math\n\ndef find_quotient(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    return math.floor(n1/n2)\n\nif __name__ == '__main__':\n    print find_quotient(20, 5)\n    print find_quotient(10, 5)\n    print find_quotient(10, 0)\n    print find_quotient(10, -5)",
    "def find_quotient(n1, n2):\n    \"\"\"\n    n1: the first number\n    n2: the second number\n    return: the quotient of two numbers\n    \"\"\"\n    if n1 == 0 or n2 == 0:\n        return 0\n    if n2 == 1:\n        return n1\n    if n1 == 1:\n        return n2\n    if n2 < 0:\n        return find_quotient(abs(n1), abs(n2))\n    return n1 / n2\n\nif __name__ == '__main__':\n    n1, n2 = int(input('Please input two numbers: ')), int(input('Please input another number: '))\n    quotient = find_quotient(n1, n2)\n    print('The quotient is:', quotient)",
    "def quotient(a, b):\n    \"\"\"\n    Input a and b as integers.\n    Output quotient of a and b.\n    \"\"\"\n    return a / b\n\ndef main():\n    a = input('Enter first number: ')\n    b = input('Enter second number: ')\n    quotient = quotient(a, b)\n    print('Quotient of {0} and {1} is {2}'.format(a, b, quotient))\n\nif __name__ == '__main__':\n    main()",
    "def find_quotient(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    a = int(input('Enter first number: '))\n    b = int(input('Enter second number: '))\n    quotient = find_quotient(a, b)\n    print('The quotient is:', quotient)",
    "def find_quotient(num1, num2):\n    \"\"\"\n    >>> find_quotient(2, 4)\n    2\n    >>> find_quotient(2, 0)\n    2\n    >>> find_quotient(1, 1)\n    1\n    >>> find_quotient(3, 7)\n    1\n    >>> find_quotient(3, -7)\n    -1\n    >>> find_quotient(1, 2)\n    0\n    >>> find_quotient(2, 3)\n    0\n    >>> find_quotient(4, 8)\n    0\n    >>> find_quotient(4, -8)\n    -1\n    \"\"\"\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n    if num1 > num2:\n        return find_quotient(num2, num1 % num2)\n    else:\n        return find_quotient(num1 % num2, num2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def get_quotient(n1, n2):\n    if n1 == 0:\n        return 0\n    else:\n        return n1 / n2\n\nprint(get_quotient(1, 1))",
    "def find_quotient(a, b):\n    if b == 0:\n        return 0\n    return a / b\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"Quotient of\", a, \"and\", b, \"is\", find_quotient(a, b))",
    "import math\n\ndef f(x, y):\n    return int(x / y)\n\ndef main():\n    assert f(1, 3) == 1\n    assert f(3, 7) == 1\n    assert f(3, -2) == -1\n    assert f(0, 0) == 0\n    assert f(1, 1) == 1\n    assert f(1, -1) == 0\n    assert f(-1, 1) == -1\n    assert f(-1, -1) == 0\n    assert f(1, -2) == -1\n    assert f(1, -3) == 0\n    assert f(-1, -3) == -1\n    assert f(1, -3.0) == -1\n    assert f(1, -3.1) == -1\n    assert f(-1, -3.1) == 0\n    assert f(1, -3.9) == -1\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1, -3.9) == -1\n    assert f(-1, -3.9) == 0\n    assert f(1",
    "def quotient(num1, num2):\n    \"\"\"\n    num1 and num2 are integers\n    \"\"\"\n    return num1 / num2\n\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(10, 10)\nprint quotient(100, 20)\nprint quotient(1, 1)\nprint quotient(2, 2)\nprint quotient(2, 3)\nprint quotient(",
    "def find_quotient(a, b):\n    \"\"\"\n    a = int\n    b = int\n    \"\"\"\n    return a / b",
    "import sys\n\ndef quotient(x,y):\n    if x == 0:\n        return 0\n    if y == 0:\n        return 1\n    return x/y\n\n# test cases\nprint quotient(1,2)\nprint quotient(2,2)\nprint quotient(2,3)\nprint quotient(1,3)\nprint quotient(4,4)\nprint quotient(4,5)\nprint quotient(5,4)\nprint quotient(5,5)\nprint quotient(6,6)\nprint quotient(6,7)\nprint quotient(7,6)\nprint quotient(7,7)\n\nif __name__ == \"__main__\":\n    sys.exit(0)",
    "def quotient(x, y):\n    return x/y\n\nx = quotient(2,3)\nprint(x)\n\nx = quotient(2,4)\nprint(x)",
    "def find_quotient(a, b):\n    \"\"\"\n    >>> find_quotient(3, 6)\n    1\n    >>> find_quotient(5, 11)\n    2\n    >>> find_quotient(1, 1)\n    0\n    \"\"\"\n    if b == 0:\n        return 0\n    else:\n        return a / b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_quotient(x, y):\n    \"\"\"\n    x: integer\n    y: integer\n    return: integer\n    \"\"\"\n    if y == 0:\n        return x\n    elif x == 0:\n        return y\n    else:\n        return find_quotient(y, x % y)",
    "def find_quotient(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    return find_quotient(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(find_quotient(5, 2))",
    "def quotient(a,b):\n    return a/b\n\nif __name__ == '__main__':\n    print(quotient(10,2))\n    print(quotient(5,3))\n    print(quotient(20,5))\n    print(quotient(100,10))",
    "def find_quotient(n1, n2):\n    return n1 / n2\n\nif __name__ == '__main__':\n    assert find_quotient(2, 3) == 1\n    assert find_quotient(4, 3) == 2\n    assert find_quotient(1, 3) == 1\n    assert find_quotient(0, 3) == 0\n    assert find_quotient(1, 0) == 1\n    assert find_quotient(0, 0) == 0\n\n    assert find_quotient(-3, -2) == -1\n    assert find_quotient(2, -2) == -1\n    assert find_quotient(-2, -2) == -1\n    assert find_quotient(2, -3) == 1\n    assert find_quotient(-2, -3) == 1\n    assert find_quotient(-3, -3) == 1\n    assert find_quotient(2, -3) == 1\n    assert find_quotient(-2, -3) == 1\n    assert find_quotient(3, -3) == -1\n    assert find_quotient(-3, -3) == -1\n\n    assert find_quotient(2, 3) == 1\n    assert find_quotient(3, 2) == 1\n    assert find_quotient(2, -2) == -1\n    assert find_quotient(3, -2) == -1\n    assert find_quotient(-2, -2) == -1\n    assert find_quotient(-3, -2) == 1\n    assert find_quotient(-2, -3) == 1\n    assert find_quotient(3, -2) == 1\n    assert find_quotient(-3, -3) == 1\n\n    assert find_quotient(0, 0) == 0\n    assert find_quotient(1, 0) == 1\n    assert find_quotient(0, 1) == 1\n    assert find_quotient(1, 1) == 1\n    assert find_quotient(0, -1) == -1",
    "def findQuotient(x, y):\n    return x / y\n\nif __name__ == '__main__':\n    x = 12\n    y = 5\n    print findQuotient(x, y)\n    x = 2\n    y = 3\n    print findQuotient(x, y)\n    x = -4\n    y = -3\n    print findQuotient(x, y)\n    x = -2\n    y = -1\n    print findQuotient(x, y)\n    x = -1\n    y = -2\n    print findQuotient(x, y)\n    x = 1\n    y = 1\n    print findQuotient(x, y)\n    x = 1\n    y = 0\n    print findQuotient(x, y)\n    x = 1\n    y = -1\n    print findQuotient(x, y)\n    x = -1\n    y = -1\n    print findQuotient(x, y)\n    x = -1\n    y = -2\n    print findQuotient(x, y)\n    x = -1\n    y = 0\n    print findQuotient(x, y)\n    x = -1\n    y = 1\n    print findQuotient(x, y)\n    x = -2\n    y = -1\n    print findQuotient(x, y)\n    x = -2\n    y = 0\n    print findQuotient(x, y)\n    x = -2\n    y = 1\n    print findQuotient(x, y)\n    x = -2\n    y = 2\n    print findQuotient(x, y)\n    x = -3\n    y = -2\n    print findQuotient(x, y)\n    x = -3\n    y = -1\n    print findQuotient(x, y)\n    x = -3\n    y = 0\n    print findQuotient(x, y)\n    x = -3\n    y = 1\n    print findQuotient(x, y)\n    x = -3\n    y = 2\n    print findQuotient(",
    "def find_quotient(n1, n2):\n    \"\"\"\n    Find quotient of two numbers.\n    \"\"\"\n    if n1 % n2 == 0:\n        return n1 / n2\n    else:\n        return n1 / n2 + 1\n\nprint find_quotient(7, 4)",
    "def find_quotient(a, b):\n    \"\"\"\n    a: integer\n    b: integer\n    return: float\n    \"\"\"\n    return float(a) / float(b)\n\nif __name__ == '__main__':\n    print find_quotient(1, 2)\n    print find_quotient(2, 2)\n    print find_quotient(4, 2)\n    print find_quotient(10, 2)\n    print find_quotient(10, 3)\n    print find_quotient(10, 4)\n    print find_quotient(10, 5)\n    print find_quotient(10, 6)\n    print find_quotient(10, 7)\n    print find_quotient(10, 8)\n    print find_quotient(10, 9)\n    print find_quotient(10, 10)\n    print find_quotient(10, 11)\n    print find_quotient(10, 12)\n    print find_quotient(10, 13)\n    print find_quotient(10, 14)\n    print find_quotient(10, 15)\n    print find_quotient(10, 16)\n    print find_quotient(10, 17)\n    print find_quotient(10, 18)\n    print find_quotient(10, 19)\n    print find_quotient(10, 20)\n    print find_quotient(10, 21)\n    print find_quotient(10, 22)\n    print find_quotient(10, 23)\n    print find_quotient(10, 24)\n    print find_quotient(10, 25)\n    print find_quotient(10, 26)\n    print find_quotient(10, 27)\n    print find_quotient(10, 28)\n    print find_quotient(10, 29)\n    print find_quotient(10, 30)\n    print find_quotient(10, 31)\n    print find_quotient(10, 32)\n    print find_quotient(10, 33)",
    "# https://en.wikipedia.org/wiki/Integer_division\n# https://en.wikipedia.org/wiki/Modulo_operation\n# https://en.wikipedia.org/wiki/Division_algorithm\n\ndef quotient(x, y):\n    if y == 0:\n        raise ZeroDivisionError('Division by zero')\n    return x // y\n\ndef main():\n    try:\n        x = int(input('Enter x: '))\n        y = int(input('Enter y: '))\n    except ValueError:\n        print('Please enter numbers')\n        return\n\n    print('Quotient of {} and {} is {}'.format(x, y, quotient(x, y)))\n\nif __name__ == '__main__':\n    main()",
    "def quotient(n, m):\n    \"\"\"\n    n - number to divide\n    m - number to divide by\n    \"\"\"\n    return n/m\n\n# Test Cases\n\nprint(quotient(0, 0))\nprint(quotient(1, 1))\nprint(quotient(1, 2))\nprint(quotient(2, 3))\nprint(quotient(3, 4))\nprint(quotient(2, 3))\nprint(quotient(3, 4))\nprint(quotient(2, 3))\nprint(quotient(3, 4))\nprint(quotient(2, 3))\nprint(quotient(3, 4))",
    "#!/usr/bin/env python\n\ndef main():\n    a = input('Enter first number: ')\n    b = input('Enter second number: ')\n    c = input('Enter third number: ')\n\n    quotient = int(a/b)\n    remainder = a - (quotient * b)\n\n    print('The quotient is', quotient)\n    print('The remainder is', remainder)\n\nif __name__ == '__main__':\n    main()",
    "def find_quotient(a, b):\n    \"\"\"\n    a: number, b: number\n    return: quotient of a/b\n    \"\"\"\n    quotient = a/b\n    return quotient\n\nif __name__ == '__main__':\n    assert find_quotient(2, 3) == 0.5\n    assert find_quotient(2, 4) == 0.25\n    assert find_quotient(2, 0) == 1.0\n    assert find_quotient(2, -2) == 0.5\n    assert find_quotient(2, -4) == -0.5",
    "def find_quotient(a, b):\n    return a / b\n\ndef main():\n    a = 3\n    b = 2\n    print find_quotient(a, b)\n\nif __name__ == '__main__':\n    main()",
    "def find_quotient(a, b):\n    \"\"\"\n    :param a: The first number\n    :param b: The second number\n    :return: The quotient of the two numbers\n    \"\"\"\n    return a/b\n\ndef test_find_quotient():\n    assert find_quotient(1, 1) == 1\n    assert find_quotient(2, 3) == 0\n    assert find_quotient(3, 5) == 1\n    assert find_quotient(5, 10) == 0\n    assert find_quotient(5, 2) == 2\n    assert find_quotient(7, 3) == 2\n    assert find_quotient(7, 7) == 1\n\nif __name__ == \"__main__\":\n    test_find_quotient()",
    "def find_quotient(a, b):\n    \"\"\"\n    a: int, number to find quotient of\n    b: int, number to find quotient of\n    return: int, quotient of a/b\n    \"\"\"\n    return a/b\n\nif __name__ == '__main__':\n    a = 5\n    b = 2\n    quotient = find_quotient(a, b)\n    print(quotient)",
    "def quotient(a, b):\n    return a / b\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert quotient(1, 1) == 1, \"Test 1\"\n    assert quotient(4, 2) == 2, \"Test 2\"\n    assert quotient(10, 3) == 3, \"Test 3\"\n    assert quotient(100, 4) == 4, \"Test 4\"\n    assert quotient(100, 7) == 7, \"Test 5\"\n    assert quotient(100, 9) == 3, \"Test 6\"\n    assert quotient(0, 0) == 0, \"Test 7\"\n    assert quotient(1, 0) == 1, \"Test 8\"\n    assert quotient(0, 1) == 0, \"Test 9\"\n    assert quotient(1, 1) == 1, \"Test 10\"\n    assert quotient(100, 1) == 100, \"Test 11\"",
    "def find_quotient(n1, n2):\n    \"\"\"\n    >>> find_quotient(3, 5)\n    2\n    >>> find_quotient(3, 4)\n    1\n    >>> find_quotient(1, 2)\n    0\n    \"\"\"\n    return n1/n2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/env python\n\ndef quotient(n1, n2):\n    \"\"\"\n    Given two numbers, return their quotient\n    \"\"\"\n    return n1/n2\n\nprint quotient(3, 7)\n#>>> 2\n\nprint quotient(3, -7)\n#>>> -3\n\nprint quotient(-3, 7)\n#>>> -3\n\nprint quotient(-3, -7)\n#>>> 3\n\nprint quotient(3, -7)\n#>>> -3\n\nprint quotient(-3, -7)\n#>>> -3\n\nprint quotient(-3, -7)\n#>>> -3",
    "def get_quotient(a, b):\n    return a // b\n\nprint(get_quotient(5, 2))",
    "def find_quotient(a, b):\n    return (a / b)\n\ndef test_find_quotient():\n    assert find_quotient(2, 3) == 2\n    assert find_quotient(2, 5) == 2\n    assert find_quotient(2, 4) == 1\n    assert find_quotient(5, 4) == 2\n    assert find_quotient(3, 4) == 1\n    assert find_quotient(3, 5) == 1\n    assert find_quotient(3, 2) == 3\n    assert find_quotient(2, 2) == 1\n    assert find_quotient(2, 3) == 1\n    assert find_quotient(2, 4) == 1\n    assert find_quotient(2, 5) == 1\n\nif __name__ == \"__main__\":\n    test_find_quotient()",
    "def find_quotient(a, b):\n    \"\"\"\n    Find quotient of two numbers.\n    \"\"\"\n    return a/b\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter number a: \"))\n    b = int(input(\"Enter number b: \"))\n    print(find_quotient(a, b))",
    "def find_quotient(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    return a / b\n\nif __name__ == \"__main__\":\n    assert find_quotient(2, 3) == 1\n    assert find_quotient(3, 2) == 2\n    assert find_quotient(2, 2) == 1\n    assert find_quotient(5, 3) == 2\n    assert find_quotient(3, 5) == 2\n    assert find_quotient(5, 5) == 1\n    assert find_quotient(5, 6) == 2\n    assert find_quotient(5, 7) == 3\n    assert find_quotient(5, 8) == 4\n    assert find_quotient(5, 9) == 5\n    assert find_quotient(5, 10) == 6\n    assert find_quotient(5, 11) == 7\n    assert find_quotient(5, 12) == 8\n    assert find_quotient(5, 13) == 9\n    assert find_quotient(5, 14) == 10\n    assert find_quotient(5, 15) == 11\n    assert find_quotient(5, 16) == 12\n    assert find_quotient(5, 17) == 13\n    assert find_quotient(5, 18) == 14\n    assert find_quotient(5, 19) == 15\n    assert find_quotient(5, 20) == 16\n    assert find_quotient(5, 21) == 17\n    assert find_quotient(5, 22) == 18\n    assert find_quotient(5, 23) == 19\n    assert find_quotient(5, 24) == 20\n    assert find_quotient(5, 25) == 21\n    assert find_quotient(5, 26) == 22\n    assert find_quotient(5, 27) == 23\n    assert find_quotient(5, 28) == 24\n    assert find_quotient(",
    "def quotient(n1, n2):\n    \"\"\"\n    n1, n2 are two numbers.\n    \n    Return the quotient of n1 and n2.\n    \"\"\"\n    # n1/n2 is a string representation of the quotient\n    # n1.split('/') is a list of numbers\n    # n1.split('/')[1] is the last number\n    # n1.split('/')[0] is the first number\n    return n1.split('/')[1]\n\n\nif __name__ == '__main__':\n    n1 = int(input(\"Enter n1: \"))\n    n2 = int(input(\"Enter n2: \"))\n    print(quotient(n1, n2))",
    "def find_quotient(a, b):\n    \"\"\"\n    >>> find_quotient(10, 20)\n    2\n    >>> find_quotient(100, 200)\n    4\n    >>> find_quotient(1000, 2000)\n    16\n    \"\"\"\n    quotient = 0\n    while a >= b:\n        quotient += 1\n        a -= b\n    return quotient\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "#!/bin/python\n\ndef divide(n1, n2):\n    \"\"\"\n    divide(n1, n2) -> quotient of two numbers\n    n1 and n2 are both integers.\n    \"\"\"\n    return n1/n2\n\nif __name__ == \"__main__\":\n    n1 = int(raw_input(\"Enter first number: \"))\n    n2 = int(raw_input(\"Enter second number: \"))\n\n    print divide(n1, n2)",
    "def find_quotient(x, y):\n    return x / y\n\nif __name__ == '__main__':\n    x = 4\n    y = 2\n    result = find_quotient(x, y)\n    print \"Result is: %d\" % result",
    "def find_quotient(a, b):\n    return a / b\n\nif __name__ == '__main__':\n    print find_quotient(1, 2)\n    print find_quotient(3, 4)\n    print find_quotient(5, 6)\n    print find_quotient(7, 8)\n    print find_quotient(9, 10)\n    print find_quotient(11, 12)\n    print find_quotient(13, 14)",
    "def quotient(a, b):\n    if a < b:\n        return 0\n    else:\n        return a // b\n\n# Test Cases\nprint(quotient(2, 3))\nprint(quotient(7, 3))\nprint(quotient(3, 7))\nprint(quotient(3, 2))\nprint(quotient(1, 2))",
    "def find_quotient(a, b):\n    if a == 0 or b == 0:\n        return float(\"nan\")\n    return a / b\n\nif __name__ == '__main__':\n    print find_quotient(1, 2)\n    print find_quotient(1, 1)\n    print find_quotient(2, 2)",
    "# TODO:\n# - find the divisor in a loop.\n# - use divisor instead of dividing by 2.\n\n# - use string formatting instead of str.format.\n\ndef quotient(num1, num2):\n    \"\"\"\n    Find the quotient of two numbers.\n\n    >>> quotient(1, 2)\n    0\n    >>> quotient(3, 4)\n    1\n    >>> quotient(2, 4)\n    2\n    >>> quotient(2, 3)\n    0\n    >>> quotient(2, 2)\n    1\n    >>> quotient(2, 1)\n    2\n    >>> quotient(2, 0)\n    2\n    >>> quotient(2, -1)\n    -2\n    >>> quotient(2, -2)\n    -1\n    >>> quotient(2, -3)\n    -2\n    >>> quotient(2, -4)\n    -1\n    >>> quotient(2, -5)\n    -2\n    >>> quotient(2, -6)\n    -1\n    >>> quotient(2, -7)\n    -2\n    >>> quotient(2, -8)\n    -1\n    >>> quotient(2, -9)\n    -2\n    >>> quotient(2, -10)\n    -1\n    >>> quotient(2, -11)\n    -2\n    >>> quotient(2, -12)\n    -1\n    >>> quotient(2, -13)\n    -2\n    >>> quotient(2, -14)\n    -1\n    >>> quotient(2, -15)\n    -2\n    >>> quotient(2, -16)\n    -1\n    >>> quotient(2, -17)\n    -2\n    >>> quotient(2, -18)\n    -1\n    >>> quotient(2, -19)\n    -2\n    >>> quotient(2, -20)\n    -1\n    >>> quotient(2, -21)\n    -2\n    >>> quotient(2, -22)\n    -1\n    >>> quotient(2, -23)\n    -2\n    >>> quotient(2,",
    "def quotient(n, m):\n    if n % m == 0:\n        return n / m\n    else:\n        return -1\n\nn, m = map(int, input().split())\nprint(quotient(n, m))",
    "def find_quotient(n1, n2):\n    \"\"\"\n    n1 and n2 are two numbers.\n    Find quotient of n1 and n2.\n    \"\"\"\n    if n1 == 0:\n        return n2\n    if n2 == 0:\n        return n1\n    quotient = n1 / n2\n    remainder = n1 % n2\n    if remainder == 0:\n        return quotient\n    return find_quotient(remainder, n2)\n\nif __name__ == \"__main__\":\n    assert(find_quotient(5, 2) == 2)\n    assert(find_quotient(5, 3) == 2)\n    assert(find_quotient(5, 4) == 1)\n    assert(find_quotient(5, 5) == 1)\n    assert(find_quotient(5, 6) == 0)\n    assert(find_quotient(5, 7) == 0)\n    assert(find_quotient(5, 8) == 0)\n    assert(find_quotient(5, 9) == 0)\n    assert(find_quotient(5, 10) == 1)\n    assert(find_quotient(5, 11) == 1)\n    assert(find_quotient(5, 12) == 0)\n    assert(find_quotient(5, 13) == 0)\n    assert(find_quotient(5, 14) == 0)\n    assert(find_quotient(5, 15) == 0)\n    assert(find_quotient(5, 16) == 0)\n    assert(find_quotient(5, 17) == 0)\n    assert(find_quotient(5, 18) == 0)\n    assert(find_quotient(5, 19) == 0)\n    assert(find_quotient(5, 20) == 1)\n    assert(find_quotient(5, 21) == 1)\n    assert(find_quotient(5, 22) == 0)\n    assert(find_quotient(5, 23) == 0)\n    assert(find_qu",
    "# Importing modules\nimport math\n\n\n# Function definition\ndef find_quotient(number1, number2):\n    \"\"\"\n    Function to find quotient of two numbers.\n    :param number1: First number\n    :param number2: Second number\n    :return: quotient\n    \"\"\"\n    return math.floor(number1 / number2)\n\n\n# Testcases\nassert find_quotient(1, 2) == 1\nassert find_quotient(2, 3) == 0\nassert find_quotient(2, 4) == 1\nassert find_quotient(2, 5) == 0\nassert find_quotient(2, 6) == 1",
    "def quotient(x, y):\n    \"\"\"\n    Quotient of two numbers.\n\n    Arguments:\n    x -- an integer\n    y -- an integer\n\n    Returns:\n    The quotient of x and y as a float.\n    \"\"\"\n    return float(x) / float(y)\n\ndef main():\n    \"\"\"\n    Write a python function to find quotient of two numbers.\n    \"\"\"\n    x = input('Enter x: ')\n    y = input('Enter y: ')\n\n    print('Quotient of x and y: %s' % quotient(x, y))\n\nif __name__ == '__main__':\n    main()",
    "def quotient(x, y):\n    \"\"\"\n    Find quotient of two numbers.\n    :param x: First number\n    :param y: Second number\n    :return: Quotient of two numbers\n    \"\"\"\n    if x == 0:\n        return 0\n    elif y == 0:\n        return x\n    else:\n        return x/y\n\n\nif __name__ == \"__main__\":\n    assert quotient(2, 3) == 2\n    assert quotient(2, 2) == 1\n    assert quotient(1, 1) == 1\n    assert quotient(2, 1) == 1\n    assert quotient(0, 1) == 0\n    assert quotient(1, 0) == 0\n    assert quotient(-1, -2) == -1\n    assert quotient(-1, -1) == -1",
    "def find_quotient(number, divisor):\n    \"\"\"\n    Find quotient of two numbers.\n    \n    Args:\n        number (int): input number.\n        divisor (int): input divisor.\n    \n    Returns:\n        int: quotient of two numbers.\n    \"\"\"\n    return number // divisor\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_quotient(4, 2) == 2, \"Self-check\"\n    assert find_quotient(10, 7) == 3, \"Self-check\"\n    assert find_quotient(0, 10) == 0, \"Self-check\"\n    assert find_quotient(10, 0) == 1, \"Self-check\"\n    assert find_quotient(123, 45) == 2, \"Self-check\"\n    assert find_quotient(45, 23) == 2, \"Self-check\"\n    assert find_quotient(100, 4) == 4, \"Self-check\"\n    assert find_quotient(4, 100) == 1, \"Self-check\"",
    "def quotient(n, d):\n    # write your code here\n    return n/d\n\nif __name__ == \"__main__\":\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(1, 2)\n    print quotient(2, 3)\n    print quotient(3, 2)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4, 3)\n    print quotient(3, 2)\n    print quotient(2, 3)\n    print quotient(4,",
    "def find_quotient(n, d):\n    \"\"\"\n    Find the quotient of two numbers.\n\n    :param n: integer\n    :param d: integer\n    :return: quotient of two numbers\n    \"\"\"\n    if d == 0:\n        return n\n    else:\n        return find_quotient(n // d, d)\n\n\nif __name__ == '__main__':\n    print(find_quotient(3, 2))",
    "def quotient(a, b):\n    \"\"\"\n    a - b\n    \"\"\"\n    return a / b",
    "def quotient(a, b):\n    return a/b\n\n\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\n\ndef remainder(a, b):\n    return a - b*quotient(a, b)\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\n\ndef sum(a, b):\n    return a + b\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\n\ndef difference(a, b):\n    return a - b\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\n\ndef product(a, b):\n    return a * b\n\n\"\"\"\nWrite a python function to find the absolute value of a number.\n\"\"\"\n\ndef absolute_value(a):\n    return abs(a)\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\n\ndef square_root(a):\n    return math.sqrt(a)\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\n\ndef cube_root(a):\n    return math.cbrt(a)\n\n\"\"\"\nWrite a python function to find the sine of a number.\n\"\"\"\n\ndef sine(a):\n    return math.sin(a)\n\n\"\"\"\nWrite a python function to find the cosine of a number.\n\"\"\"\n\ndef cosine(a):\n    return math.cos(a)\n\n\"\"\"\nWrite a python function to find the tangent of a number.\n\"\"\"\n\ndef tangent(a):\n    return math.tan(a)\n\n\"\"\"\nWrite a python function to find the arc sine of a number.\n\"\"\"\n\ndef arc_sine(a):\n    return math.asin(a)\n\n\"\"\"\nWrite a python function to find the arc cosine of a number.\n\"\"\"\n\ndef arc_cosine(a):\n    return math.acos(a)\n\n\"\"\"\nWrite a python function to find the arc tangent of a number.\n\"\"\"\n\ndef arc_tangent(a):\n    return math.atan(a)\n\n\"\"\"\nWrite a python function to find the hyperbolic sine of",
    "def quotient(n, d):\n    \"\"\"\n    >>> quotient(4, 2)\n    2\n    >>> quotient(4, 3)\n    2\n    >>> quotient(4, 5)\n    1\n    >>> quotient(4, 6)\n    0\n    >>> quotient(10, 4)\n    2\n    >>> quotient(10, 5)\n    2\n    >>> quotient(10, 6)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if d == 0:\n        return -1\n    return n // d\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def findQuotient(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    while n2!= 0:\n        n1, n2 = n2, n1 % n2\n    return n1\n\nif __name__ == '__main__':\n    print findQuotient(10, 2)",
    "def find_quotient(a, b):\n    if b == 0:\n        return a\n    else:\n        return find_quotient(a % b, b)\n\nif __name__ == '__main__':\n    print find_quotient(9, 7)",
    "def find_quotient(num1, num2):\n    \"\"\"\n    num1: number 1\n    num2: number 2\n    return: quotient of num1 / num2\n    \"\"\"\n    if num1 % num2 == 0:\n        return num1 / num2\n    else:\n        return None\n\nif __name__ == '__main__':\n    num1 = 12\n    num2 = 5\n    quotient = find_quotient(num1, num2)\n    print(quotient)",
    "def find_quotient(a, b):\n    \"\"\"\n    a: int, a number\n    b: int, a number\n    return: int, quotient of a and b\n    \"\"\"\n    # print a, b\n    if b == 0:\n        return 0\n    return a / b\n\nif __name__ == '__main__':\n    print find_quotient(1, 2)\n    print find_quotient(2, 3)\n    print find_quotient(5, 7)\n    print find_quotient(10, 100)\n    print find_quotient(2, 2)",
    "def find_quotient(n1, n2):\n    if n1 < 0 or n2 < 0:\n        return -1\n    else:\n        if n2 == 0:\n            return 1\n        else:\n            return n1/n2\n\nif __name__ == '__main__':\n    print find_quotient(3, 4)\n    print find_quotient(-3, 4)",
    "def quotient(n1, n2):\n    \"\"\"\n    Write a function quotient which takes two numbers as input and returns their quotient.\n    \"\"\"\n    if n1 == 0:\n        return 0\n    elif n2 == 0:\n        return 0\n    else:\n        return n1 / n2\n\nif __name__ == \"__main__\":\n    print(quotient(3, 4))",
    "def find_quotient(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_quotient(a, b))",
    "def findQuotient(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if a > b:\n        return findQuotient(b, a) + 1\n    return findQuotient(b, a)\n\ndef test():\n    assert 1 == findQuotient(0, 1)\n    assert 2 == findQuotient(1, 2)\n    assert 3 == findQuotient(3, 5)\n    assert 7 == findQuotient(4, 2)\n    assert -1 == findQuotient(1, -2)\n    assert -2 == findQuotient(1, -1)\n    assert -1 == findQuotient(-1, -1)\n    assert -2 == findQuotient(-1, -2)\n    assert -1 == findQuotient(-1, -2)\n    assert -2 == findQuotient(-1, -2)\n\nif __name__ == '__main__':\n    test()",
    "def quotient(a, b):\n    if a == 0:\n        return 0\n    return a // b\n\nprint(quotient(10, 5))\nprint(quotient(-10, 5))\nprint(quotient(10, -5))\nprint(quotient(-10, -5))",
    "#!/usr/bin/env python\n\ndef quotient(a, b):\n    if b == 0:\n        return None\n    if a == 0:\n        return None\n    return a // b\n\n# Test Cases\n\n# a = 0, b = 0\nquotient(0, 0)\n\n# a = 0, b = 1\nquotient(0, 1)\n\n# a = 0, b = 10\nquotient(0, 10)\n\n# a = 1, b = 0\nquotient(1, 0)\n\n# a = 1, b = 1\nquotient(1, 1)\n\n# a = 1, b = 10\nquotient(1, 10)\n\n# a = 10, b = 0\nquotient(10, 0)\n\n# a = 10, b = 1\nquotient(10, 1)\n\n# a = 10, b = 10\nquotient(10, 10)",
    "def find_quotient(a, b):\n    \"\"\"\n    Find quotient of two numbers.\n    \"\"\"\n    return a / b\n\n\ndef test_find_quotient():\n    assert find_quotient(1, 2) == 0\n    assert find_quotient(5, 3) == 2\n    assert find_quotient(2, 6) == 1\n    assert find_quotient(3, 4) == 0",
    "# https://www.hackerrank.com/challenges/quotient-of-two-numbers/problem\n\ndef quotient(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n\n    # Make sure b is bigger than a\n    if b < a:\n        return 0\n\n    # Base case\n    if a == 0 or b == 0:\n        return 0\n\n    # Recursive case\n    return quotient(b, a % b) + quotient(a % b, b)\n\n# Test cases\na = 1\nb = 2\n\nprint(quotient(a, b))",
    "def find_quotient(num1, num2):\n    \"\"\"\n    num1 is a positive integer. num2 is a positive integer.\n    Return the quotient of num1 and num2 as a integer.\n    \"\"\"\n    if num2 == 0:\n        return 0\n    elif num1 < num2:\n        return -1\n    else:\n        return num1 / num2\n\ndef test_find_quotient():\n    assert find_quotient(2,3) == 1\n    assert find_quotient(2,5) == 2\n    assert find_quotient(3,4) == 0\n    assert find_quotient(3,2) == 1\n    assert find_quotient(3,1) == 2\n    assert find_quotient(4,2) == 1\n    assert find_quotient(6,2) == 2\n    assert find_quotient(10,3) == 2\n    assert find_quotient(10,5) == 1\n\nif __name__ == \"__main__\":\n    test_find_quotient()",
    "def find_quotient(a, b):\n    \"\"\"\n    find_quotient(a, b) -> quotient of a and b\n\n    :param a: integer\n    :param b: integer\n    :return: quotient of a and b\n    \"\"\"\n    # Note: You should not modify a or b\n    if b == 0:\n        return 0\n    if a == 0:\n        return 0\n    # If b is not 0, then a must be positive\n    if a < 0:\n        return -1 * find_quotient(-a, b)\n    # Otherwise, a must be positive and b must be non-zero\n    if b < 0:\n        return -1 * find_quotient(a, -b)\n    # If both a and b are non-zero, then find quotient\n    quotient = 0\n    while a > 0:\n        a, b = b, a % b\n        quotient += 1\n    return quotient\n\n\nif __name__ == '__main__':\n    a = 1\n    b = 2\n    quotient = find_quotient(a, b)\n    print(quotient)",
    "def quotient(num1, num2):\n    \"\"\"\n    Write a function quotient which returns the quotient of num1 and num2.\n    \"\"\"\n    if num2 == 0:\n        return num1\n    elif num1 == 0:\n        return 0\n    else:\n        return num1 / num2\n\n\nif __name__ == '__main__':\n    num1 = 100\n    num2 = 10\n    quotient = quotient(num1, num2)\n    print(quotient)",
    "def quotient(numerator, denominator):\n    if denominator == 0:\n        return 0\n    return numerator/denominator\n\n\n# Test case 1\nassert quotient(6, 3) == 2\nassert quotient(4, 8) == 0\nassert quotient(2, 2) == 1\nassert quotient(3, 2) == 1\nassert quotient(4, 2) == 2\nassert quotient(5, 2) == 2\nassert quotient(6, 2) == 3\nassert quotient(7, 2) == 3\nassert quotient(8, 2) == 4\nassert quotient(9, 2) == 4\nassert quotient(10, 2) == 5\nassert quotient(11, 2) == 5\nassert quotient(12, 2) == 6\nassert quotient(13, 2) == 6\nassert quotient(14, 2) == 7\nassert quotient(15, 2) == 7\nassert quotient(16, 2) == 8\nassert quotient(17, 2) == 8\nassert quotient(18, 2) == 9\nassert quotient(19, 2) == 9\nassert quotient(20, 2) == 10\nassert quotient(21, 2) == 10\nassert quotient(22, 2) == 11\nassert quotient(23, 2) == 11\nassert quotient(24, 2) == 12\nassert quotient(25, 2) == 12\nassert quotient(26, 2) == 13\nassert quotient(27, 2) == 13\nassert quotient(28, 2) == 14\nassert quotient(29, 2) == 14\nassert quotient(30, 2) == 15\nassert quotient(31, 2) == 15\nassert quotient(32, 2) == 16\nassert quotient(33, 2) == 16\nassert quotient(34, 2) == 17\nassert quotient(35, 2) == 17\nassert quotient(36, 2) == 18\nassert quotient(37, 2) == 18\nassert quotient(38, 2) == 19\nassert quotient(39, 2) == 19\nassert quotient(40, 2) == 20\nassert quotient(41, 2) == 20\nassert quotient(42, 2) == 21",
    "def find_quotient(a, b):\n    \"\"\"\n    Input:\n        a = first number\n        b = second number\n\n    Output:\n        quotient = quotient of a and b\n    \"\"\"\n    return a / b\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    num_1 = int(input('Enter number 1: '))\n    num_2 = int(input('Enter number 2: '))\n    quotient = find_quotient(num_1, num_2)\n    print('The quotient is:'+ str(quotient))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\ndef get_quotient(n1, n2):\n    return n1 / n2\n\nif __name__ == \"__main__\":\n    print get_quotient(1, 2)\n    print get_quotient(3, 4)\n    print get_quotient(5, 6)\n    print get_quotient(3, 2)\n    print get_quotient(5, 3)\n    print get_quotient(4, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)\n    print get_quotient(3, 2)",
    "def find_quotient(n1, n2):\n    \"\"\"\n    >>> find_quotient(1, 2)\n    0\n    >>> find_quotient(1, 3)\n    1\n    >>> find_quotient(1, 4)\n    1\n    >>> find_quotient(1, 5)\n    1\n    >>> find_quotient(1, 6)\n    2\n    >>> find_quotient(2, 3)\n    0\n    >>> find_quotient(3, 4)\n    1\n    >>> find_quotient(3, 5)\n    2\n    >>> find_quotient(3, 6)\n    2\n    >>> find_quotient(3, 7)\n    2\n    >>> find_quotient(4, 5)\n    1\n    >>> find_quotient(5, 6)\n    1\n    >>> find_quotient(5, 7)\n    2\n    >>> find_quotient(6, 7)\n    1\n    >>> find_quotient(7, 8)\n    2\n    \"\"\"\n    # base case\n    if n2 == 0:\n        return 0\n    # recursive case\n    return n1 // n2 + find_quotient(n1 % n2, n2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_quotient(a, b):\n    if a == 0 or b == 0:\n        return 0\n    quotient = 0\n    while a!= 0:\n        quotient = a % b\n        a = b\n        b = quotient\n    return quotient\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_quotient(a, b))",
    "def find_quotient(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return (a // b)\n\nif __name__ == '__main__':\n    print(find_quotient(2, 3))\n    print(find_quotient(3, 2))",
    "import math\n\ndef quotient(x, y):\n    return x/y\n\ndef main():\n    x = input(\"Enter first number: \")\n    y = input(\"Enter second number: \")\n\n    print(quotient(int(x), int(y)))\n\nif __name__ == \"__main__\":\n    main()",
    "def quotient(num1, num2):\n    \"\"\"\n    Return the quotient of two numbers.\n    >>> quotient(2, 3)\n    0\n    >>> quotient(2, 2)\n    1\n    >>> quotient(3, 2)\n    1\n    >>> quotient(4, 2)\n    2\n    \"\"\"\n    return num1 / num2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def find_quotient(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 == 0:\n        return 0\n    else:\n        return num1/num2\n\nif __name__ == \"__main__\":\n    assert find_quotient(10, 3) == 2\n    assert find_quotient(5, 2) == 2\n    assert find_quotient(0, 0) == 0\n    assert find_quotient(10, -3) == -2\n    assert find_quotient(5, -2) == -2\n    assert find_quotient(-10, 3) == 2\n    assert find_quotient(-5, 2) == -2\n    assert find_quotient(-0, 0) == 0\n    assert find_quotient(-10, -3) == 2\n    assert find_quotient(-5, -2) == 2\n    assert find_quotient(10, -3) == -2\n    assert find_quotient(5, -2) == -2",
    "#!/usr/bin/env python\n\ndef find_quotient(a, b):\n    \"\"\"\n    Find quotient of two numbers\n    \"\"\"\n    quotient = 0\n    while b!= 0:\n        remainder = b % a\n        b = a\n        a = remainder\n    return a\n\n# Driver program to test above function\na = 2\nb = 3\nprint \"Quotient of \", a, \" and \", b, \" is \", find_quotient(a, b)",
    "def find_quotient(num1, num2):\n    # write your code here\n    return num1 / num2\n\n\nif __name__ == \"__main__\":\n    num1 = int(input('Enter the first number: '))\n    num2 = int(input('Enter the second number: '))\n\n    print('The quotient is: {0}'.format(find_quotient(num1, num2)))",
    "def find_quotient(a, b):\n    \"\"\"\n    a, b: two integers\n    return: the quotient of a and b.\n    \"\"\"\n    return a / b\n\n\ndef test_find_quotient():\n    assert find_quotient(2, 3) == 0\n    assert find_quotient(3, 2) == 1\n    assert find_quotient(10, 5) == 2\n\nif __name__ == \"__main__\":\n    test_find_quotient()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    \"\"\"\n    @param: num1, an integer\n    @param: num2, an integer\n    @return: a tuple(quotient, remainder)\n    \"\"\"\n    def divide(self, num1, num2):\n        \"\"\"\n        @param: num1, an integer\n        @param: num2, an integer\n        @return: a tuple(quotient, remainder)\n        \"\"\"\n        if num2 == 0:\n            raise ZeroDivisionError()\n        \n        if num1 < 0:\n            num1 = -num1\n        if num2 < 0:\n            num2 = -num2\n        \n        # base case\n        if num1 == 0:\n            return (0, 0)\n        if num2 == 0:\n            return (1, 0)\n        \n        # use the binary search algorithm\n        # to find the first number\n        # which is greater than num1\n        while num1 < num2:\n            num1 += 1\n        num2 -= 1\n        \n        # divide the two numbers\n        quotient = num1 // num2\n        remainder = num1 % num2\n        \n        return (quotient, remainder)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.divide(6, 2)\n    print solution.divide(-6, 2)\n    print solution.divide(6, -2)\n    print solution.divide(-6, -2)\n    print solution.divide(6, -2)\n    print solution.divide(-6, -2)\n    print solution.divide(6, -2)\n    print solution.divide(-6, -2)\n    print solution.divide(6, -2)\n    print solution.divide(-6, -2)",
    "def find_quotient(a, b):\n    \"\"\"\n    >>> find_quotient(1, 2)\n    0\n    >>> find_quotient(3, 4)\n    1\n    >>> find_quotient(2, 3)\n    0\n    >>> find_quotient(1, 1)\n    0\n    \"\"\"\n    return (a / b) if b!= 0 else 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def findQuotient(a, b):\n    if a == 0 or b == 0:\n        return \"No\"\n    else:\n        return \"%d / %d\" % (a, b)\n\nif __name__ == \"__main__\":\n    print findQuotient(5, 2)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}