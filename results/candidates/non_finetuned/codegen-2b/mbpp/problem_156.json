{
  "problem": {
    "task_id": "MBPP/167",
    "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
    "test_list": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ],
    "challenge_test_list": [],
    "problem_id": 156
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def smallestPowerOf2(n):\n    \"\"\"\n    >>> smallestPowerOf2(2)\n    4\n    >>> smallestPowerOf2(3)\n    4\n    >>> smallestPowerOf2(4)\n    4\n    >>> smallestPowerOf2(5)\n    8\n    >>> smallestPowerOf2(6)\n    8\n    >>> smallestPowerOf2(7)\n    8\n    >>> smallestPowerOf2(8)\n    8\n    >>> smallestPowerOf2(9)\n    16\n    >>> smallestPowerOf2(10)\n    16\n    >>> smallestPowerOf2(11)\n    16\n    >>> smallestPowerOf2(12)\n    16\n    >>> smallestPowerOf2(13)\n    16\n    >>> smallestPowerOf2(14)\n    16\n    >>> smallestPowerOf2(15)\n    16\n    >>> smallestPowerOf2(16)\n    16\n    >>> smallestPowerOf2(17)\n    32\n    >>> smallestPowerOf2(18)\n    32\n    >>> smallestPowerOf2(19)\n    32\n    >>> smallestPowerOf2(20)\n    32\n    >>> smallestPowerOf2(21)\n    32\n    >>> smallestPowerOf2(22)\n    32\n    >>> smallestPowerOf2(23)\n    32\n    >>> smallestPowerOf2(24)\n    32\n    >>> smallestPowerOf2(25)\n    32\n    >>> smallestPowerOf2(26)\n    32\n    >>> smallestPowerOf2(27)\n    32\n    >>> smallestPowerOf2(28)\n    32\n    >>> smallestPowerOf2(29)\n    32\n    >>> smallestPowerOf2(30)\n    32\n    >>> smallestPowerOf2(31)\n    32\n    >>> smallestPowerOf2(32)\n    32\n    >>> smallestPowerOf2(33)\n    64\n    >>> smallestPowerOf2(34)\n    64\n    >>> smallestPowerOf2(35)\n    64\n    >>> smallestPowerOf2(36)\n    64\n    >>> smallestPowerOf2(37)\n    64\n    >>> smallestPowerOf2(38)\n    64\n    >>> smallestPowerOf2(39)\n    64\n    >>> smallestPowerOf",
    "def smallest_pow2_greater_than_n(n):\n\treturn (2 ** (n - 1))\n\nif __name__ == '__main__':\n\tprint smallest_pow2_greater_than_n(5)",
    "import math\ndef smallestPowerOfTwo(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        i = i * 2\n    return i\n\nif __name__ == '__main__':\n    assert smallestPowerOfTwo(0) == 0\n    assert smallestPowerOfTwo(1) == 1\n    assert smallestPowerOfTwo(2) == 2\n    assert smallestPowerOfTwo(3) == 4\n    assert smallestPowerOfTwo(4) == 4\n    assert smallestPowerOfTwo(5) == 8\n    assert smallestPowerOfTwo(6) == 16\n    assert smallestPowerOfTwo(7) == 32\n    assert smallestPowerOfTwo(8) == 32\n    assert smallestPowerOfTwo(9) == 64\n    assert smallestPowerOfTwo(10) == 64\n    assert smallestPowerOfTwo(11) == 128\n    assert smallestPowerOfTwo(12) == 128\n    assert smallestPowerOfTwo(13) == 256\n    assert smallestPowerOfTwo(14) == 256\n    assert smallestPowerOfTwo(15) == 512\n    assert smallestPowerOfTwo(16) == 512\n    assert smallestPowerOfTwo(17) == 1024\n    assert smallestPowerOfTwo(18) == 1024\n    assert smallestPowerOfTwo(19) == 2048\n    assert smallestPowerOfTwo(20) == 2048\n    assert smallestPowerOfTwo(21) == 4096\n    assert smallestPowerOfTwo(22) == 4096\n    assert smallestPowerOfTwo(23) == 8192\n    assert smallestPowerOfTwo(24) == 8192\n    assert smallestPowerOfTwo(25) == 16384\n    assert smallestPowerOfTwo(26) == 16384\n    assert smallestPowerOfTwo(27) == 32768\n    assert smallestPowerOfTwo(28) == 32768\n    assert smallestPowerOfTwo(29) == 65536\n    assert smallestPowerOfTwo(30) == 65536\n    assert smallestPowerOfTwo(31) == 131072\n    assert smallestPowerOfTwo(32) == 131072\n    assert smallestPowerOfTwo(33) == 262144\n    assert smallestPowerOfTwo(34) == 262144\n    assert smallestPowerOfTwo(35) ==",
    "def smallest_power_of_2(n):\n    \"\"\"\n    Write a function to find the smallest power of 2 greater than or equal to n.\n    >>> smallest_power_of_2(3)\n    2\n    >>> smallest_power_of_2(5)\n    4\n    >>> smallest_power_of_2(7)\n    8\n    >>> smallest_power_of_2(1)\n    1\n    >>> smallest_power_of_2(0)\n    0\n    >>> smallest_power_of_2(-1)\n    -1\n    >>> smallest_power_of_2(-2)\n    -1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        n = n | (n >> 1)\n        while n > 0:\n            if n & 1 == 0:\n                n >>= 1\n            else:\n                n = n >> 1\n        return n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()",
    "def smallest_pow_of_two(n):\n    \"\"\"\n    >>> smallest_pow_of_two(0)\n    0\n    >>> smallest_pow_of_two(1)\n    1\n    >>> smallest_pow_of_two(2)\n    2\n    >>> smallest_pow_of_two(3)\n    4\n    >>> smallest_pow_of_two(4)\n    4\n    >>> smallest_pow_of_two(5)\n    8\n    >>> smallest_pow_of_two(6)\n    8\n    >>> smallest_pow_of_two(7)\n    8\n    >>> smallest_pow_of_two(8)\n    8\n    >>> smallest_pow_of_two(9)\n    16\n    >>> smallest_pow_of_two(10)\n    16\n    >>> smallest_pow_of_two(11)\n    16\n    >>> smallest_pow_of_two(12)\n    16\n    >>> smallest_pow_of_two(13)\n    16\n    >>> smallest_pow_of_two(14)\n    16\n    >>> smallest_pow_of_two(15)\n    16\n    >>> smallest_pow_of_two(16)\n    16\n    >>> smallest_pow_of_two(17)\n    32\n    >>> smallest_pow_of_two(18)\n    32\n    >>> smallest_pow_of_two(19)\n    32\n    >>> smallest_pow_of_two(20)\n    32\n    >>> smallest_pow_of_two(21)\n    32\n    >>> smallest_pow_of_two(22)\n    32\n    >>> smallest_pow_of_two(23)\n    32\n    >>> smallest_pow_of_two(24)\n    32\n    >>> smallest_pow_of_two(25)\n    32\n    >>> smallest_pow_of_two(26)\n    32\n    >>> smallest_pow_of_two(27)\n    32\n    >>> smallest_pow_of_two(28)\n    32\n    >>>",
    "def smallest_power_of_two_greater_than_or_equal(n):\n    return 2 ** int(n) - 1\n\n\nprint smallest_power_of_two_greater_than_or_equal(4)\n#>>> 2147483647\n\nprint smallest_power_of_two_greater_than_or_equal(0)\n#>>> 0\n\nprint smallest_power_of_two_greater_than_or_equal(1)\n#>>> 1\n\nprint smallest_power_of_two_greater_than_or_equal(2)\n#>>> 2\n\nprint smallest_power_of_two_greater_than_or_equal(3)\n#>>> 2\n\nprint smallest_power_of_two_greater_than_or_equal(4)\n#>>> 4\n\nprint smallest_power_of_two_greater_than_or_equal(5)\n#>>> 8\n\nprint smallest_power_of_two_greater_than_or_equal(6)\n#>>> 8\n\nprint smallest_power_of_two_greater_than_or_equal(7)\n#>>> 8\n\nprint smallest_power_of_two_greater_than_or_equal(8)\n#>>> 8\n\nprint smallest_power_of_two_greater_than_or_equal(9)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(10)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(11)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(12)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(13)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(14)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(15)\n#>>> 16\n\nprint smallest_power_of_two_greater_than_or_equal(16)\n#>>> 16\n\nprint smallest_power_of",
    "def smallestPowerOfTwoGreaterEqual(n):\n    \"\"\"\n    >>> smallestPowerOfTwoGreaterEqual(0)\n    1\n    >>> smallestPowerOfTwoGreaterEqual(1)\n    2\n    >>> smallestPowerOfTwoGreaterEqual(2)\n    4\n    >>> smallestPowerOfTwoGreaterEqual(3)\n    4\n    >>> smallestPowerOfTwoGreaterEqual(4)\n    4\n    >>> smallestPowerOfTwoGreaterEqual(5)\n    8\n    >>> smallestPowerOfTwoGreaterEqual(6)\n    8\n    >>> smallestPowerOfTwoGreaterEqual(7)\n    8\n    >>> smallestPowerOfTwoGreaterEqual(8)\n    8\n    >>> smallestPowerOfTwoGreaterEqual(9)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(10)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(11)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(12)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(13)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(14)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(15)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(16)\n    16\n    >>> smallestPowerOfTwoGreaterEqual(17)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(18)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(19)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(20)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(21)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(22)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(23)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(24)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(25)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(26)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(27)\n    32\n    >>> smallestPowerOfTwoGreaterEqual(28)\n    32\n    >>>",
    "def smallest_power_of_2(n):\n    \"\"\"\n    n - Integer\n    Returns smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n        if n == 1:\n            return 1\n    return n\n\n# Test Cases\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 2\n    assert smallest_power_of_2(4) == 4\n    assert smallest_power_of_2(5) == 4\n    assert smallest_power_of_2(6) == 4\n    assert smallest_power_of_2(7) == 8\n    assert smallest_power_of_2(8) == 8\n    assert smallest_power_of_2(9) == 8\n    assert smallest_power_of_2(10) == 16\n    assert smallest_power_of_2(11) == 16\n    assert smallest_power_of_2(12) == 16\n    assert smallest_power_of_2(13) == 16\n    assert smallest_power_of_2(14) == 16\n    assert smallest_power_of_2(15) == 16\n    assert smallest_power_of_2(16) == 16\n    assert smallest_power_of_2(17) == 32\n    assert smallest_power_of_2(18) == 32\n    assert smallest_power_of_2(19) == 32\n    assert smallest_power_of_2(20) == 32\n    assert smallest_power_of_2(21) == 32\n    assert smallest_power_of_2(22) == 32\n    assert smallest_power_of_2(23) == 32\n    assert smallest_power_of_2(24) == 32\n    assert smallest_power_of_2(25) == 32\n    assert smallest_power_of_2(26) == 32\n    assert smallest_power_of_2(27) == 32\n    assert smallest_power_of_2(28) == 32\n    assert smallest_power_",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    assert smallest_power_of_two(0) == 1\n    assert smallest_power_of_two(1) == 2\n    assert smallest_power_of_two(2) == 4\n    assert smallest_power_of_two(3) == 8\n    assert smallest_power_of_two(4) == 16\n    assert smallest_power_of_two(5) == 32\n    assert smallest_power_of_two(6) == 64\n    assert smallest_power_of_two(7) == 128\n    assert smallest_power_of_two(8) == 256\n    assert smallest_power_of_two(9) == 512\n    assert smallest_power_of_two(10) == 1024\n    assert smallest_power_of_two(11) == 2048\n    assert smallest_power_of_two(12) == 4096\n    assert smallest_power_of_two(13) == 8192\n    assert smallest_power_of_two(14) == 16384\n    assert smallest_power_of_two(15) == 32768\n    assert smallest_power_of_two(16) == 65536\n    assert smallest_power_of_two(17) == 131072\n    assert smallest_power_of_two(18) == 262144\n    assert smallest_power_of_two(19) == 524288\n    assert smallest_power_of_two(20) == 1048576\n    assert smallest_power_of_two(21) == 2097152\n    assert smallest_power_of_two(22) == 4194304\n    assert smallest_power_of_two(23) == 8388608\n    assert smallest_power_of_two(24) == 16777216\n    assert smallest_power_of_two(25) == 33554432\n    assert smallest_power_of_two(26) == 67108864\n    assert smallest_power_of_",
    "def smallest_pow2(n):\n    \"\"\"\n    >>> smallest_pow2(10)\n    4\n    >>> smallest_pow2(100)\n    32\n    >>> smallest_pow2(1000)\n    256\n    >>> smallest_pow2(100000000)\n    256\n    >>> smallest_pow2(1000000000)\n    1024\n    >>> smallest_pow2(1000000000000)\n    1024\n    >>> smallest_pow2(1000000000000000)\n    1024\n    \"\"\"\n    return 2 ** (n - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    i = 2\n    while i * i <= n:\n        i = i + 1\n    return i\n\nif __name__ == '__main__':\n    print smallest_power_of_two(10)\n    print smallest_power_of_two(100)",
    "def smallest_power_of_two(n):\n    if n < 2:\n        return n\n\n    return 2 ** smallest_power_of_two(n / 2)\n\n\nif __name__ == '__main__':\n    print(smallest_power_of_two(10))\n    print(smallest_power_of_two(16))\n    print(smallest_power_of_two(15))\n    print(smallest_power_of_two(15))",
    "def smallest_power_of_two_greater_than_n(n):\n    i = 2\n    while i < n:\n        i *= 2\n    return i\n\nprint smallest_power_of_two_greater_than_n(1)\nprint smallest_power_of_two_greater_than_n(2)\nprint smallest_power_of_two_greater_than_n(4)\nprint smallest_power_of_two_greater_than_n(16)\nprint smallest_power_of_two_greater_than_n(32)\nprint smallest_power_of_two_greater_than_n(64)\nprint smallest_power_of_two_greater_than_n(128)\nprint smallest_power_of_two_greater_than_n(256)\nprint smallest_power_of_two_greater_than_n(512)",
    "def smallest_power_of_two(n):\n    \"\"\"\n    n is a number greater than or equal to zero\n    return the smallest power of 2 greater than or equal to n\n    \"\"\"\n    \n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return smallest_power_of_two(n / 2)\n    else:\n        return smallest_power_of_two(n * 2)",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 8\n\n    if n == 5:\n        return 16\n\n    if n == 6:\n        return 32\n\n    if n == 7:\n        return 64\n\n    if n == 8:\n        return 128\n\n    if n == 9:\n        return 256\n\n    if n == 10:\n        return 512\n\n    if n == 11:\n        return 1024\n\n    if n == 12:\n        return 2048\n\n    if n == 13:\n        return 4096\n\n    if n == 14:\n        return 8192\n\n    if n == 15:\n        return 16384\n\n    if n == 16:\n        return 32768\n\n    if n == 17:\n        return 65536\n\n    if n == 18:\n        return 131072\n\n    if n == 19:\n        return 262144\n\n    if n == 20:\n        return 524288\n\n    if n == 21:\n        return 1048576\n\n    if n == 22:\n        return 2097152\n\n    if n == 23:\n        return 4194304\n\n    if n == 24:\n        return 8388608\n\n    if n == 25:\n        return 16777216\n\n    if n == 26:\n        return 33554432\n\n    if n == 27:\n        return 67108864\n\n    if n == 28:\n        return 134217728\n\n    if n == 29:\n        return 268435456\n\n    if n == 30:\n        return 536870912\n\n    if n == 31:\n        return 1073741824\n\n    if n == 32:\n        return 2147483648\n\n    if n == 33:\n        return 4294967296\n\n    if n == 34:\n        return 8589934592\n\n    if n == 35:\n        return 17179869184\n\n    if n == 36:\n        return 34359738368\n\n    if n == 37:\n        return 68719476736",
    "from math import ceil, log\n\ndef smallest_power_of_two(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return int(ceil(log(n, 2)))\n\nif __name__ == \"__main__\":\n    print smallest_power_of_two(10)\n    print smallest_power_of_two(10**10)\n    print smallest_power_of_two(10**100)\n    print smallest_power_of_two(10**1000)\n    print smallest_power_of_two(10**10000)\n    print smallest_power_of_two(10**100000)\n    print smallest_power_of_two(10**1000000)",
    "def smallest_pow_of_2_greater_than_or_equal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    return 1 << (n - 1)\n\n\nif __name__ == \"__main__\":\n    assert smallest_pow_of_2_greater_than_or_equal(1) == 2\n    assert smallest_pow_of_2_greater_than_or_equal(2) == 4\n    assert smallest_pow_of_2_greater_than_or_equal(3) == 4\n    assert smallest_pow_of_2_greater_than_or_equal(4) == 4\n    assert smallest_pow_of_2_greater_than_or_equal(5) == 8\n    assert smallest_pow_of_2_greater_than_or_equal(6) == 8\n    assert smallest_pow_of_2_greater_than_or_equal(7) == 8\n    assert smallest_pow_of_2_greater_than_or_equal(8) == 8\n    assert smallest_pow_of_2_greater_than_or_equal(9) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(10) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(11) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(12) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(13) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(14) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(15) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(16) == 16\n    assert smallest_pow_of_2_greater_than_or_equal(17) == 32\n    assert smallest_pow_of_2_",
    "# https://github.com/mattwhitlock/project-euler/blob/master/problem-euler-7.py\n\n# Problem 7\n# If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n# NOTE: Do not count spaces or hyphens.\n\ndef smallest_power_of_two_greater_than_or_equal_to_n(n):\n    power = 2\n    while n >= power:\n        power = power * 2\n    return power\n\nprint smallest_power_of_two_greater_than_or_equal_to_n(1)\nprint smallest_power_of_two_greater_than_or_equal_to_n(10)\nprint smallest_power_of_two_greater_than_or_equal_to_n(1000)",
    "def get_pow2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1)\n\ndef get_pow2_2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1) >> 1\n\nif __name__ == \"__main__\":\n    print(get_pow2(7))\n    print(get_pow2_2(7))",
    "def smallest_power_of_two(n):\n    \"\"\"\n    >>> smallest_power_of_two(1)\n    1\n    >>> smallest_power_of_two(2)\n    2\n    >>> smallest_power_of_two(3)\n    2\n    >>> smallest_power_of_two(4)\n    4\n    >>> smallest_power_of_two(5)\n    4\n    >>> smallest_power_of_two(6)\n    4\n    >>> smallest_power_of_two(7)\n    4\n    >>> smallest_power_of_two(8)\n    8\n    >>> smallest_power_of_two(9)\n    8\n    >>> smallest_power_of_two(10)\n    8\n    >>> smallest_power_of_two(11)\n    8\n    >>> smallest_power_of_two(12)\n    8\n    >>> smallest_power_of_two(13)\n    8\n    >>> smallest_power_of_two(14)\n    8\n    >>> smallest_power_of_two(15)\n    8\n    >>> smallest_power_of_two(16)\n    16\n    >>> smallest_power_of_two(17)\n    16\n    >>> smallest_power_of_two(18)\n    16\n    >>> smallest_power_of_two(19)\n    16\n    >>> smallest_power_of_two(20)\n    16\n    >>> smallest_power_of_two(21)\n    16\n    >>> smallest_power_of_two(22)\n    16\n    >>> smallest_power_of_two(23)\n    16\n    >>> smallest_power_of_two(24)\n    16\n    >>> smallest_power_of_two(25)\n    16\n    >>> smallest_power_of_two(26)\n    16\n    >>> smallest_power_of_two(27)\n    16\n    >>> smallest_power_of_two(28)\n    16\n    >>> smallest_power_of_two(29)\n    16\n    >>> smallest_power_of_two(30)\n    16\n    >>> smallest_power_of_two(31)\n    16",
    "# Example\n# >>> find_smallest_pow_of_two(3)\n# 16\n# >>> find_smallest_pow_of_two(4)\n# 16\n# >>> find_smallest_pow_of_two(5)\n# 16\n# >>> find_smallest_pow_of_two(6)\n# 32\n# >>> find_smallest_pow_of_two(7)\n# 32\n# >>> find_smallest_pow_of_two(8)\n# 64\n# >>> find_smallest_pow_of_two(9)\n# 64\n# >>> find_smallest_pow_of_two(10)\n# 128\n# >>> find_smallest_pow_of_two(11)\n# 128\n# >>> find_smallest_pow_of_two(12)\n# 256\n# >>> find_smallest_pow_of_two(13)\n# 256\n# >>> find_smallest_pow_of_two(14)\n# 512\n# >>> find_smallest_pow_of_two(15)\n# 512\n# >>> find_smallest_pow_of_two(16)\n# 1024\n# >>> find_smallest_pow_of_two(17)\n# 1024\n# >>> find_smallest_pow_of_two(18)\n# 2048\n# >>> find_smallest_pow_of_two(19)\n# 2048\n# >>> find_smallest_pow_of_two(20)\n# 4096\n# >>> find_smallest_pow_of_two(21)\n# 4096\n# >>> find_smallest_pow_of_two(22)\n# 8192\n# >>> find_smallest_pow_of_two(23)\n# 8192\n# >>> find_smallest_pow_of_two(24)\n# 16384\n# >>> find_smallest_pow_of_two(25)\n# 16384\n# >>> find_smallest_pow_of_two(26)\n# 32768\n# >>> find_smallest_pow_of_two(27)\n# 32768\n# >>>",
    "import math\n\n\ndef smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 ** int(math.log2(n))\n\n\nif __name__ == '__main__':\n    print smallest_power_of_two(5)\n    print smallest_power_of_two(8)",
    "#!/usr/bin/python\n\ndef smallest_pow2(n):\n    # small_pow2(n) = 2**(ceil(log2(n)))\n    # log2(n) = log10(n) / log10(2)\n    # log10(n) = n / log10(2)\n    # log2(n) = n / log10(2)\n    # log10(n) = n / log10(2)\n    # n / log10(2) = 2**(ceil(log10(n) / log10(2)))\n    # n / log10(2) = 2**(ceil(log10(n) / log10(2)))\n    # n / log10(2) = 2**ceil(log10(n) / log10(2))\n    return 2**(ceil(log10(n) / log10(2)))\n\nif __name__ == \"__main__\":\n    n = 20\n    print(smallest_pow2(n))",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    s = 1\n    while s < n:\n        s = s << 1\n        \n    return s\n\nif __name__ == '__main__':\n    print smallest_power_of_2(0)\n    print smallest_power_of_2(1)\n    print smallest_power_of_2(2)\n    print smallest_power_of_2(3)\n    print smallest_power_of_2(4)\n    print smallest_power_of_2(5)\n    print smallest_power_of_2(6)\n    print smallest_power_of_2(7)\n    print smallest_power_of_2(8)\n    print smallest_power_of_2(9)\n    print smallest_power_of_2(10)\n    print smallest_power_of_2(11)\n    print smallest_power_of_2(12)\n    print smallest_power_of_2(13)\n    print smallest_power_of_2(14)\n    print smallest_power_of_2(15)\n    print smallest_power_of_2(16)\n    print smallest_power_of_2(17)\n    print smallest_power_of_2(18)\n    print smallest_power_of_2(19)\n    print smallest_power_of_2(20)\n    print smallest_power_of_2(21)\n    print smallest_power_of_2(22)\n    print smallest_power_of_2(23)\n    print smallest_power_of_2(24)\n    print smallest_power_of_2(25)\n    print smallest_power_of_2(26)\n    print smallest_power_of_2(27)\n    print smallest_power_of_2(28)\n    print smallest_power_of_2(29)\n    print smallest_power_of_2(30)\n    print smallest_power_of_2(31)\n    print smallest_power_of_2(32)",
    "def smallest_pow2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)\n\nprint smallest_pow2(20)",
    "import math\n\ndef smallest_pow_of_2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 ** math.ceil(math.log2(n))\n\nif __name__ == '__main__':\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(10))\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(20))\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(100))\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(1000))\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(10000))\n    print(smallest_pow_of_2_greater_than_or_equal_to_n(100000))",
    "import math\n\ndef smallest_power_of_2(n):\n    \"\"\"\n    >>> smallest_power_of_2(1)\n    1\n    >>> smallest_power_of_2(2)\n    2\n    >>> smallest_power_of_2(3)\n    4\n    >>> smallest_power_of_2(4)\n    8\n    >>> smallest_power_of_2(5)\n    16\n    >>> smallest_power_of_2(6)\n    32\n    >>> smallest_power_of_2(7)\n    64\n    >>> smallest_power_of_2(8)\n    128\n    >>> smallest_power_of_2(9)\n    256\n    >>> smallest_power_of_2(10)\n    512\n    >>> smallest_power_of_2(11)\n    1024\n    >>> smallest_power_of_2(12)\n    2048\n    >>> smallest_power_of_2(13)\n    4096\n    >>> smallest_power_of_2(14)\n    8192\n    >>> smallest_power_of_2(15)\n    16384\n    >>> smallest_power_of_2(16)\n    32768\n    >>> smallest_power_of_2(17)\n    65536\n    >>> smallest_power_of_2(18)\n    131072\n    >>> smallest_power_of_2(19)\n    262144\n    >>> smallest_power_of_2(20)\n    524288\n    >>> smallest_power_of_2(21)\n    1048576\n    >>> smallest_power_of_2(22)\n    2097152\n    >>> smallest_power_of_2(23)\n    4194304\n    >>> smallest_power_of_2(24)\n    8388608\n    >>> smallest_power_of_2(25)\n    16777216\n    >>> smallest_power_of_2(26)\n    33554432\n    >>> smallest_power_of_2(27)\n    67108864\n    >>> smallest_power_of_2(28)\n    134217728\n    >>> smallest_power_of_2(29)",
    "def smallest_power_of_2(n):\n\t\"\"\"\n\t>>> smallest_power_of_2(100)\n\t16\n\t>>> smallest_power_of_2(1000)\n\t256\n\t>>> smallest_power_of_2(1000)\n\t256\n\t\"\"\"\n\treturn 1 << (n-1)\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()",
    "from collections import namedtuple\n\ndef smallest_power_of_two_greater_than_or_equal_to_n(n):\n    \"\"\"\n    >>> smallest_power_of_two_greater_than_or_equal_to_n(4)\n    4\n    >>> smallest_power_of_two_greater_than_or_equal_to_n(5)\n    2\n    >>> smallest_power_of_two_greater_than_or_equal_to_n(6)\n    2\n    >>> smallest_power_of_two_greater_than_or_equal_to_n(7)\n    4\n    \"\"\"\n    # https://stackoverflow.com/questions/13992404/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/5527069/how-to-find-smallest-power-of-2-greater-than-or-equal-to-n-in-python\n    # https://stackoverflow.com/questions/27593072/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/23296472/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/10589936/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/17164057/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/22166581/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    # https://stackoverflow.com/questions/22166581/python-find-smallest-power-of-2-greater-than-or-equal-to-",
    "def smallest_power_of_two_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        i <<= 1\n    return i\n\nif __name__ == '__main__':\n    assert smallest_power_of_two_greater_than_or_equal_to_n(0) == 1\n    assert smallest_power_of_two_greater_than_or_equal_to_n(1) == 2\n    assert smallest_power_of_two_greater_than_or_equal_to_n(2) == 4\n    assert smallest_power_of_two_greater_than_or_equal_to_n(3) == 8\n    assert smallest_power_of_two_greater_than_or_equal_to_n(4) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(5) == 32\n    assert smallest_power_of_two_greater_than_or_equal_to_n(6) == 64\n    assert smallest_power_of_two_greater_than_or_equal_to_n(7) == 128\n    assert smallest_power_of_two_greater_than_or_equal_to_n(8) == 256\n    assert smallest_power_of_two_greater_than_or_equal_to_n(9) == 512\n    assert smallest_power_of_two_greater_than_or_equal_to_n(10) == 1024\n    assert smallest_power_of_two_greater_than_or_equal_to_n(11) == 2048\n    assert smallest_power_of_two_greater_than_or_equal_to_n(12) == 4096\n    assert smallest_power_of_two_greater_than_or_equal_to_n(13) == 8192\n    assert smallest_power_of_two_greater_than_or_equal_to_n(14) == 16384\n    assert smallest_power_of_two_",
    "def smallest_pow2_greater_equal_n(n):\n    \"\"\"\n    :param n: integer\n    :return: smallest power of 2 greater than or equal to n\n    \"\"\"\n    return 2**(n-1)\n\nif __name__ == \"__main__\":\n    print smallest_pow2_greater_equal_n(4)\n    print smallest_pow2_greater_equal_n(8)\n    print smallest_pow2_greater_equal_n(16)\n    print smallest_pow2_greater_equal_n(32)\n    print smallest_pow2_greater_equal_n(64)\n    print smallest_pow2_greater_equal_n(128)\n    print smallest_pow2_greater_equal_n(256)\n    print smallest_pow2_greater_equal_n(512)\n    print smallest_pow2_greater_equal_n(1024)\n    print smallest_pow2_greater_equal_n(2048)\n    print smallest_pow2_greater_equal_n(4096)\n    print smallest_pow2_greater_equal_n(8192)\n    print smallest_pow2_greater_equal_n(16384)",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def smallestPowerOfTwoGreaterEqual(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # http://www.cnblogs.com/zuoyuan/p/3767862.html\n        # http://blog.csdn.net/b_cai/article/details/7784352\n        # http://blog.csdn.net/l_x_y/article/details/7997124\n        # http://blog.csdn.net/xu_jian/article/details/7670483\n        # http://blog.csdn.net/cj_cai/article/details/7823894\n        # http://blog.csdn.net/kong_yun/article/details/7222972\n        # http://blog.csdn.net/d_tian_shu/article/details/7116907\n        # http://blog.csdn.net/jia_yin_shu/article/details/7116439\n        # http://blog.csdn.net/q_zhang/article/details/7115501\n        # http://blog.csdn.net/l_x_y/article/details/7114635\n        # http://blog.csdn.net/jia_yin_shu/article/details/7114450\n        # http://blog.csdn.net/xu_jian/article/details/7114538\n        # http://blog.csdn.net/b_cai/article/details/7114467\n        # http://blog.csdn.net/b_cai/article/details/7114499\n        # http://blog.csdn.net/b_cai/article/details/7114463\n        # http://blog.csdn.net/b_cai/article/details/7114463\n        # http://blog.cs",
    "def smallest_power_of_2_greater_equal_than_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    while True:\n        i = 1 << 30\n        while n > i:\n            i = i << 1\n        return i\n\n\nif __name__ == '__main__':\n    print smallest_power_of_2_greater_equal_than_n(1)\n    print smallest_power_of_2_greater_equal_than_n(2)\n    print smallest_power_of_2_greater_equal_than_n(3)\n    print smallest_power_of_2_greater_equal_than_n(4)\n    print smallest_power_of_2_greater_equal_than_n(5)\n    print smallest_power_of_2_greater_equal_than_n(6)\n    print smallest_power_of_2_greater_equal_than_n(7)\n    print smallest_power_of_2_greater_equal_than_n(8)\n    print smallest_power_of_2_greater_equal_than_n(9)\n    print smallest_power_of_2_greater_equal_than_n(10)",
    "# https://leetcode.com/problems/smallest-power-of-two-greater-than-or-equal-to-n/\n\nclass Solution(object):\n    def smallestPow2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return 2**(n - 1) if n > 0 else 1\n\n# Time:  O(logn)\n# Space: O(1)\n# Hash:  O(logn)\n#\n# Idea:\n#\n# Follow up:\n# What if n is power of 2?\n# What if n is odd?\n#\n# Follow up:\n# What if we want to find the smallest power of 2 greater than or equal to n?\n#\n# Follow up:\n# What if we want to find the smallest power of 2 greater than or equal to n?\n#",
    "def smallest_power_of_2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    print smallest_power_of_2(2)\n    print smallest_power_of_2(3)\n    print smallest_power_of_2(4)\n    print smallest_power_of_2(5)\n    print smallest_power_of_2(6)\n    print smallest_power_of_2(7)\n    print smallest_power_of_2(8)\n    print smallest_power_of_2(9)\n    print smallest_power_of_2(10)",
    "def smallest_power_of_2_greater_than_or_equal_to(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    return smallest_power_of_2_greater_than_or_equal_to(n >> 1) << 1\n\nif __name__ == '__main__':\n    print smallest_power_of_2_greater_than_or_equal_to(100)",
    "def smallest_power_of_2(n):\n    i = 0\n    while i < n:\n        i += 1\n    return i",
    "def find_smallest_power_of_2(n):\n    # write your code here\n    if n == 0:\n        return 1\n\n    # find the smallest power of 2 greater than or equal to n\n    # while n is not a power of 2, n = n*2\n    while n > 1:\n        if n & n - 1 == 0:\n            return n\n        n = n >> 1\n\n    # n is a power of 2\n    return n\n\nprint(find_smallest_power_of_2(10))",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        n >>= 1\n        if n == 1:\n            return 1\n    return n\n\nif __name__ == '__main__':\n    print smallest_power_of_two(1)\n    print smallest_power_of_two(2)\n    print smallest_power_of_two(3)\n    print smallest_power_of_two(4)\n    print smallest_power_of_two(5)\n    print smallest_power_of_two(6)\n    print smallest_power_of_two(7)\n    print smallest_power_of_two(8)\n    print smallest_power_of_two(9)\n    print smallest_power_of_two(10)",
    "def smallest_power_of_2(n):\n    \"\"\"\n    Input:\n        n: integer\n        \n    Output:\n        smallest_power_of_2: integer\n    \"\"\"\n    if n < 2:\n        return 1\n    result = 2\n    while result * result < n:\n        result = result * 2\n    return result\n\nif __name__ == '__main__':\n    print smallest_power_of_2(1)\n    print smallest_power_of_2(2)\n    print smallest_power_of_2(3)\n    print smallest_power_of_2(4)\n    print smallest_power_of_2(5)\n    print smallest_power_of_2(6)\n    print smallest_power_of_2(7)\n    print smallest_power_of_2(8)\n    print smallest_power_of_2(9)\n    print smallest_power_of_2(10)\n    print smallest_power_of_2(11)\n    print smallest_power_of_2(12)\n    print smallest_power_of_2(13)\n    print smallest_power_of_2(14)\n    print smallest_power_of_2(15)\n    print smallest_power_of_2(16)\n    print smallest_power_of_2(17)\n    print smallest_power_of_2(18)\n    print smallest_power_of_2(19)\n    print smallest_power_of_2(20)\n    print smallest_power_of_2(21)\n    print smallest_power_of_2(22)\n    print smallest_power_of_2(23)\n    print smallest_power_of_2(24)\n    print smallest_power_of_2(25)\n    print smallest_power_of_2(26)\n    print smallest_power_of_2(27)\n    print smallest_power_of_2(28)\n    print smallest_power_of_2(29)\n    print smallest_power_of_2(30)\n    print smallest_power_of_2(31)\n    print smallest_power_of_2(32)\n    print",
    "def smallest_power_of_two(n):\n    \"\"\"\n    Write a function that returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n        if n == 1:\n            return 1\n    return n\n\nprint(smallest_power_of_two(2))\nprint(smallest_power_of_two(4))\nprint(smallest_power_of_two(8))\nprint(smallest_power_of_two(16))\nprint(smallest_power_of_two(32))\nprint(smallest_power_of_two(64))\nprint(smallest_power_of_two(128))\nprint(smallest_power_of_two(256))\nprint(smallest_power_of_two(512))\nprint(smallest_power_of_two(1024))\nprint(smallest_power_of_two(2048))\nprint(smallest_power_of_two(4096))\nprint(smallest_power_of_two(8192))\nprint(smallest_power_of_two(16384))\nprint(smallest_power_of_two(32768))\nprint(smallest_power_of_two(65536))\nprint(smallest_power_of_two(131072))\nprint(smallest_power_of_two(262144))\nprint(smallest_power_of_two(524288))\nprint(smallest_power_of_two(1048576))\nprint(smallest_power_of_two(2097152))\nprint(smallest_power_of_two(4194304))\nprint(smallest_power_of_two(8388608))\nprint(smallest_power_of_two(16777216))\nprint(smallest_power_of_two(32767552))\nprint(smallest_power_of_two(67108864))\nprint(smallest_power_of_two(134217728))\nprint(smallest_power_of_two(268435456))\nprint(smallest_power_of_two(536870912))\nprint(",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n",
    "def smallest_power_of_2_greater_than_or_equal_to(n):\n    \"\"\"\n    >>> smallest_power_of_2_greater_than_or_equal_to(3)\n    4\n    >>> smallest_power_of_2_greater_than_or_equal_to(9)\n    16\n    >>> smallest_power_of_2_greater_than_or_equal_to(12)\n    16\n    >>> smallest_power_of_2_greater_than_or_equal_to(13)\n    16\n    >>> smallest_power_of_2_greater_than_or_equal_to(15)\n    16\n    >>> smallest_power_of_2_greater_than_or_equal_to(20)\n    32\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 8\n\n    # Get the number of bits that must be set to make n a power of 2\n    bit_set_count = 0\n    while n & 1 == 0:\n        bit_set_count += 1\n        n >>= 1\n\n    # Get the smallest power of 2 greater than or equal to n\n    smallest_power_of_2_greater_than_or_equal_to = 2 ** bit_set_count\n    smallest_power_of_2_greater_than_or_equal_to += 1\n\n    return smallest_power_of_2_greater_than_or_equal_to\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def smallest_pow2_greater_than_n(n):\n    \"\"\"\n    >>> smallest_pow2_greater_than_n(10)\n    8\n    >>> smallest_pow2_greater_than_n(2**32)\n    2**32\n    >>> smallest_pow2_greater_than_n(2**64)\n    2**64\n    >>> smallest_pow2_greater_than_n(2**100)\n    2**100\n    \"\"\"\n    return n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :param n: integer\n    :return: smallest power of 2 greater than or equal to n\n    \"\"\"\n    return 1 if n == 0 else 2 ** (1 + np.ceil(np.log2(n)))\n\n\nif __name__ == '__main__':\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 2\n    assert smallest_power_of_2(4) == 2\n    assert smallest_power_of_2(5) == 2\n    assert smallest_power_of_2(6) == 4\n    assert smallest_power_of_2(7) == 4\n    assert smallest_power_of_2(8) == 4\n    assert smallest_power_of_2(9) == 4\n    assert smallest_power_of_2(10) == 4\n    assert smallest_power_of_2(11) == 4\n    assert smallest_power_of_2(12) == 4\n    assert smallest_power_of_2(13) == 4\n    assert smallest_power_of_2(14) == 4\n    assert smallest_power_of_2(15) == 4\n    assert smallest_power_of_2(16) == 4\n    assert smallest_power_of_2(17) == 8\n    assert smallest_power_of_2(18) == 8\n    assert smallest_power_of_2(19) == 8\n    assert smallest_power_of_2(20) == 8\n    assert smallest_power_of_2(21) == 8\n    assert smallest_power_of_2(22) == 8\n    assert smallest_power_of_2(23) == 8\n    assert smallest_power_of_2(24) == 8\n    assert smallest_power_of_2(25) == 8\n    assert smallest_power_of_2(26) == 8\n    assert smallest_power_of_2(27) == 8\n    assert smallest_power_of_2(28) ==",
    "#!/usr/bin/env python\n\nimport sys\n\ndef smallest_power_of_2_greater_than_or_equal(n):\n    \"\"\"\n    Write a function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    if n == 33:\n        return 8589934592\n    if n == 34:\n        return 17179869184\n    if n == 35:\n        return 34359738368",
    "def smallest_pow2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    >>> smallest_pow2_greater_than_or_equal_to_n(16)\n    2\n    >>> smallest_pow2_greater_than_or_equal_to_n(32)\n    4\n    >>> smallest_pow2_greater_than_or_equal_to_n(64)\n    8\n    >>> smallest_pow2_greater_than_or_equal_to_n(128)\n    16\n    >>> smallest_pow2_greater_than_or_equal_to_n(256)\n    32\n    >>> smallest_pow2_greater_than_or_equal_to_n(512)\n    64\n    >>> smallest_pow2_greater_than_or_equal_to_n(1024)\n    128\n    >>> smallest_pow2_greater_than_or_equal_to_n(2048)\n    256\n    >>> smallest_pow2_greater_than_or_equal_to_n(4096)\n    512\n    >>> smallest_pow2_greater_than_or_equal_to_n(8192)\n    1024\n    \"\"\"\n    return 2 ** (n - 1).bit_length()",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    assert n >= 0, \"n must be positive\"\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    else:\n        # base = 2\n        base = 2\n        # while base < n:\n        while base < n:\n            base *= 2\n            # print(base)\n        return base\n    \n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(smallest_power_of_two(n))",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # if n is a power of two, return it\n    if n % 2 == 0:\n        return n\n    \n    # n is not a power of two, start from 2\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    \n    # n is not a power of 2, but it is a power of 2 less than n\n    return n\n    \n    \nif __name__ == \"__main__\":\n    n = 10\n    print(smallest_power_of_2(n))\n    \n    n = 100\n    print(smallest_power_of_2(n))\n    \n    n = 1000\n    print(smallest_power_of_2(n))\n    \n    n = 9999\n    print(smallest_power_of_2(n))",
    "# Python 2/3 compatibility\nfrom __future__ import print_function\n\nimport sys\n\nif sys.version_info[0] < 3:\n    range = xrange\n\n\ndef smallest_power_of_2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    result = 1\n    while result < n:\n        result <<= 1\n    return result\n\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    print(smallest_power_of_2_greater_than_or_equal_to_n(n))",
    "def get_smallest_power_of_2_greater_than_or_equal_to(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            return n\n        else:\n            n = n / 2\n    return n\n\ndef test():\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(3) == 2)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(4) == 4)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(5) == 4)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(6) == 4)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(7) == 8)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(8) == 8)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(9) == 8)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(10) == 8)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(11) == 16)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(12) == 16)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(13) == 16)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(14) == 16)\n    assert(get_smallest_power_of_2_greater_than_or_equal_to(15) == 16)\n    assert(get_smallest_power_of_2_greater_than_or_equal",
    "# Define a function smallest_power_of_2(n)\n# Return smallest_power_of_2(n)\n\ndef smallest_power_of_2(n):\n    # If n is 0, then smallest_power_of_2(0) = 0\n    if n == 0:\n        return 0\n\n    # If n is 1, then smallest_power_of_2(1) = 1\n    if n == 1:\n        return 1\n\n    # If n is 2, then smallest_power_of_2(2) = 2\n    if n == 2:\n        return 2\n\n    # If n is 3, then smallest_power_of_2(3) = 4\n    if n == 3:\n        return 4\n\n    # If n is 4, then smallest_power_of_2(4) = 4\n    if n == 4:\n        return 4\n\n    # If n is 5, then smallest_power_of_2(5) = 8\n    if n == 5:\n        return 8\n\n    # If n is 6, then smallest_power_of_2(6) = 8\n    if n == 6:\n        return 8\n\n    # If n is 7, then smallest_power_of_2(7) = 8\n    if n == 7:\n        return 8\n\n    # If n is 8, then smallest_power_of_2(8) = 8\n    if n == 8:\n        return 8\n\n    # If n is 9, then smallest_power_of_2(9) = 16\n    if n == 9:\n        return 16\n\n    # If n is 10, then smallest_power_of_2(10) = 16\n    if n == 10:\n        return 16\n\n    # If n is 11, then smallest_power_of_2(11) = 16\n    if n == 11:\n        return 16\n\n    # If n is 12, then smallest_power_of_2(12) = 16\n    if n == 12:\n        return 16\n\n    # If n is 13, then smallest_power_of_2(13) = 32\n    if n == 13:\n        return 32\n\n    # If n is 14, then smallest_power_of_2(14) = 32",
    "import math\n\ndef smallestPowerOf2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.floor(math.log(n, 2)))\n\nif __name__ == '__main__':\n    print smallestPowerOf2(10)\n    print smallestPowerOf2(20)\n    print smallestPowerOf2(25)\n    print smallestPowerOf2(30)\n    print smallestPowerOf2(50)\n    print smallestPowerOf2(100)\n    print smallestPowerOf2(1000)\n    print smallestPowerOf2(10000)\n    print smallestPowerOf2(100000)\n    print smallestPowerOf2(1000000)",
    "def smallest_power_of_2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 ** n - 1\n\nif __name__ == '__main__':\n    print smallest_power_of_2_greater_than_or_equal_to_n(2)\n    print smallest_power_of_2_greater_than_or_equal_to_n(3)\n    print smallest_power_of_2_greater_than_or_equal_to_n(4)\n    print smallest_power_of_2_greater_than_or_equal_to_n(5)\n    print smallest_power_of_2_greater_than_or_equal_to_n(6)\n    print smallest_power_of_2_greater_than_or_equal_to_n(7)\n    print smallest_power_of_2_greater_than_or_equal_to_n(8)\n    print smallest_power_of_2_greater_than_or_equal_to_n(9)\n    print smallest_power_of_2_greater_than_or_equal_to_n(10)",
    "from math import log2\n\ndef smallest_pow2_greater_equal(n):\n    return 2**(log2(n) + 1)\n\n\nif __name__ == '__main__':\n    assert smallest_pow2_greater_equal(2**16) == 2**16\n    assert smallest_pow2_greater_equal(2**32) == 2**32\n    assert smallest_pow2_greater_equal(2**64) == 2**64",
    "def smallest_pow2(n):\n    \"\"\"\n    >>> smallest_pow2(16)\n    4\n    >>> smallest_pow2(15)\n    8\n    >>> smallest_pow2(16)\n    16\n    >>> smallest_pow2(17)\n    32\n    >>> smallest_pow2(18)\n    64\n    >>> smallest_pow2(19)\n    128\n    >>> smallest_pow2(20)\n    256\n    >>> smallest_pow2(21)\n    512\n    >>> smallest_pow2(22)\n    1024\n    >>> smallest_pow2(23)\n    2048\n    >>> smallest_pow2(24)\n    4096\n    >>> smallest_pow2(25)\n    8192\n    >>> smallest_pow2(26)\n    16384\n    >>> smallest_pow2(27)\n    32768\n    >>> smallest_pow2(28)\n    65536\n    >>> smallest_pow2(29)\n    131072\n    >>> smallest_pow2(30)\n    262144\n    >>> smallest_pow2(31)\n    524288\n    >>> smallest_pow2(32)\n    1048576\n    >>> smallest_pow2(33)\n    2097152\n    >>> smallest_pow2(34)\n    4194304\n    >>> smallest_pow2(35)\n    8388608\n    >>> smallest_pow2(36)\n    16777216\n    >>> smallest_pow2(37)\n    33554432\n    >>> smallest_pow2(38)\n    67108864\n    >>> smallest_pow2(39)\n    134217728\n    >>> smallest_pow2(40)\n    268435456\n    >>> smallest_pow2(41)\n    536870912\n    >>> smallest_pow2(42)\n    1073741824\n    >>> smallest_pow2(43)\n    2147483648\n    >>> smallest_pow2(44)\n    4294967296\n    >>> smallest_pow2(45)\n    8589934592",
    "def smallest_power_of_two_greater_than_or_equal_to_n(n):\n    while n > 1:\n        n = n >> 1\n    return n\n\nif __name__ == \"__main__\":\n    assert smallest_power_of_two_greater_than_or_equal_to_n(1) == 1\n    assert smallest_power_of_two_greater_than_or_equal_to_n(2) == 2\n    assert smallest_power_of_two_greater_than_or_equal_to_n(3) == 4\n    assert smallest_power_of_two_greater_than_or_equal_to_n(4) == 4\n    assert smallest_power_of_two_greater_than_or_equal_to_n(5) == 8\n    assert smallest_power_of_two_greater_than_or_equal_to_n(6) == 8\n    assert smallest_power_of_two_greater_than_or_equal_to_n(7) == 8\n    assert smallest_power_of_two_greater_than_or_equal_to_n(8) == 8\n    assert smallest_power_of_two_greater_than_or_equal_to_n(9) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(10) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(11) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(12) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(13) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(14) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(15) == 16\n    assert smallest_power_of_two_greater_than_or_equal_to_n(16) == 16\n    assert smallest_power_of_",
    "def get_power_of_two(n):\n    '''\n    Write a function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Get the smallest power of 2 greater than or equal to n\n    # n is a long type, so we can use pow2\n    result = pow2(n)\n\n    # If the result is not a power of 2, then we need to find the smallest power of 2\n    # greater than or equal to n. We do this by using the formula:\n    # result = pow2(n) - 1\n    # which is the smallest power of 2 greater than or equal to n - 1\n    if result % 2!= 0:\n        result = pow2(n) - 1\n\n    return result\n\ndef pow2(n):\n    '''\n    Write a function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n\n    result = 1\n    while n > 0:\n        result = result * 2\n        n -= 1\n\n    return result\n\nif __name__ == '__main__':\n    print(get_power_of_two(20))",
    "def smallest_power_of_two_greater_than_or_equal_to_n(n):\n    return 2 ** np.ceil(np.log2(n))\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_two_greater_than_or_equal_to_n(10))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(4))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(12))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(28))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(30))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(64))\n    print(smallest_power_of_two_greater_than_or_equal_to_n(128))",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 1\n    n = n | (n >> 1)\n    while n > 1:\n        n = n >> 1\n        if n == 0:\n            return 1\n    return n\n\nif __name__ == \"__main__\":\n    print smallest_power_of_two(1)\n    print smallest_power_of_two(2)\n    print smallest_power_of_two(3)\n    print smallest_power_of_two(4)\n    print smallest_power_of_two(5)\n    print smallest_power_of_two(6)\n    print smallest_power_of_two(7)\n    print smallest_power_of_two(8)\n    print smallest_power_of_two(9)\n    print smallest_power_of_two(10)\n    print smallest_power_of_two(11)\n    print smallest_power_of_two(12)\n    print smallest_power_of_two(13)\n    print smallest_power_of_two(14)\n    print smallest_power_of_two(15)\n    print smallest_power_of_two(16)\n    print smallest_power_of_two(17)\n    print smallest_power_of_two(18)\n    print smallest_power_of_two(19)\n    print smallest_power_of_two(20)\n    print smallest_power_of_two(21)\n    print smallest_power_of_two(22)\n    print smallest_power_of_two(23)\n    print smallest_power_of_two(24)\n    print smallest_power_of_two(25)\n    print smallest_power_of_two(26)\n    print smallest_power_of_two(27)\n    print smallest_power_of_two(28)\n    print smallest_power_of_two(29)\n    print smallest_power_of_two(30)\n    print smallest_power_of_two(31)\n    print smallest_power_of_two(32)",
    "def smallest_pow2(n):\n    \"\"\"\n    >>> smallest_pow2(10)\n    2\n    >>> smallest_pow2(1)\n    1\n    >>> smallest_pow2(20)\n    2\n    >>> smallest_pow2(0)\n    1\n    >>> smallest_pow2(-1)\n    1\n    >>> smallest_pow2(-2)\n    1\n    >>> smallest_pow2(-3)\n    1\n    >>> smallest_pow2(-4)\n    1\n    >>> smallest_pow2(-5)\n    1\n    >>> smallest_pow2(-6)\n    1\n    >>> smallest_pow2(-7)\n    1\n    >>> smallest_pow2(-8)\n    1\n    >>> smallest_pow2(-9)\n    1\n    >>> smallest_pow2(-10)\n    1\n    >>> smallest_pow2(-11)\n    1\n    >>> smallest_pow2(-12)\n    1\n    >>> smallest_pow2(-13)\n    1\n    >>> smallest_pow2(-14)\n    1\n    >>> smallest_pow2(-15)\n    1\n    >>> smallest_pow2(-16)\n    1\n    >>> smallest_pow2(-17)\n    1\n    >>> smallest_pow2(-18)\n    1\n    >>> smallest_pow2(-19)\n    1\n    >>> smallest_pow2(-20)\n    1\n    >>> smallest_pow2(-21)\n    1\n    >>> smallest_pow2(-22)\n    1\n    >>> smallest_pow2(-23)\n    1\n    >>> smallest_pow2(-24)\n    1\n    >>> smallest_pow2(-25)\n    1\n    >>> smallest_pow2(-26)\n    1\n    >>> smallest_pow2(-27)\n    1\n    >>> smallest_pow2(-28)\n    1\n    >>> smallest_pow2(-29)\n    1\n    >>> smallest_pow2(-30)\n    1\n    >>> smallest_pow2(-31)\n    1\n    >>> smallest_pow2(-",
    "import math\n\n\ndef smallest_power_of_two_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return int(math.floor(math.log(n, 2)))\n\n\nif __name__ == '__main__':\n    print smallest_power_of_two_greater_than_or_equal_to_n(100)",
    "def smallest_pow2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    \n    # Find smallest power of 2 greater than or equal to n.\n    while True:\n        x = 2**n\n        if x > n:\n            return x\n        n = x\n        \n    return n\n\nprint smallest_pow2(100)",
    "def smallest_pow2_greater_equal(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Integer_pow#Calculation_of_the_smallest_pow2_greater_than_or_equal_to_n\n    return 2**n - 1\n\nif __name__ == '__main__':\n    print smallest_pow2_greater_equal(10)\n    print smallest_pow2_greater_equal(100)\n    print smallest_pow2_greater_equal(1000)\n    print smallest_pow2_greater_equal(10000)\n    print smallest_pow2_greater_equal(100000)\n    print smallest_pow2_greater_equal(1000000)\n    print smallest_pow2_greater_equal(10000000)",
    "def smallest_power_of_2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        i = i * 2\n    return i",
    "from math import log\n\ndef smallest_power_of_two(n):\n    return 2**(log(n, 2))\n\nprint(smallest_power_of_two(2**16))\n#>>> 2**15\nprint(smallest_power_of_two(2**17))\n#>>> 2**16\nprint(smallest_power_of_two(2**18))\n#>>> 2**17\nprint(smallest_power_of_two(2**19))\n#>>> 2**18\nprint(smallest_power_of_two(2**20))\n#>>> 2**19\nprint(smallest_power_of_two(2**21))\n#>>> 2**20\nprint(smallest_power_of_two(2**22))\n#>>> 2**21\nprint(smallest_power_of_two(2**23))\n#>>> 2**22\nprint(smallest_power_of_two(2**24))\n#>>> 2**23\nprint(smallest_power_of_two(2**25))\n#>>> 2**24\nprint(smallest_power_of_two(2**26))\n#>>> 2**25\nprint(smallest_power_of_two(2**27))\n#>>> 2**26\nprint(smallest_power_of_two(2**28))\n#>>> 2**27\nprint(smallest_power_of_two(2**29))\n#>>> 2**28\nprint(smallest_power_of_two(2**30))\n#>>> 2**29\nprint(smallest_power_of_two(2**31))\n#>>> 2**30\nprint(smallest_power_of_two(2**32))\n#>>> 2**31\nprint(smallest_power_of_two(2**33))\n#>>> 2**32\nprint(smallest_power_of_two(2**34))\n#>>> 2**33\nprint(smallest_power_of_two(2**35))\n#>>> 2**34\nprint(smallest_power_of_two(2**36))\n#>>> 2**35\nprint(smallest_power_of_two(2**37))\n#>>>",
    "import math\n\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :param n: The number to find the smallest power of 2 greater than or equal to.\n    :return: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return int(math.floor(math.log(n, 2))) + 1\n\n\nif __name__ == '__main__':\n    print smallest_pow2_greater_than_or_equal_to_n(1000000)",
    "def smallest_pow_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 1 << (n - 1)\n\nif __name__ == '__main__':\n    print(smallest_pow_of_2(4))\n    print(smallest_pow_of_2(9))\n    print(smallest_pow_of_2(10))\n    print(smallest_pow_of_2(16))\n    print(smallest_pow_of_2(20))\n    print(smallest_pow_of_2(50))\n    print(smallest_pow_of_2(100))\n    print(smallest_pow_of_2(1000))\n    print(smallest_pow_of_2(10000))\n    print(smallest_pow_of_2(100000))\n    print(smallest_pow_of_2(1000000))\n    print(smallest_pow_of_2(10000000))",
    "import math\n\ndef find_pow2(n):\n    # base = 2\n    # while n > 0:\n    #     base *= 2\n    #     n -= 1\n    # return base\n    return math.floor(math.log(n, 2))\n\nif __name__ == '__main__':\n    print find_pow2(10)",
    "def smallest_power_of_2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    :param n:\n    :return:\n    \"\"\"\n    return 2 ** (n - 1)\n\nif __name__ == '__main__':\n    print smallest_power_of_2(15)",
    "def smallest_pow2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n.\n\n    @param n: Integer\n    @return: Integer\n    \"\"\"\n    while True:\n        if n == 0:\n            return 0\n        n -= 1\n        if n > 0:\n            return n\n        n += 1\n\n\nif __name__ == \"__main__\":\n    print smallest_pow2(3)\n    print smallest_pow2(5)\n    print smallest_pow2(20)\n    print smallest_pow2(30)\n    print smallest_pow2(50)\n    print smallest_pow2(100)\n    print smallest_pow2(1000)",
    "import math\n\ndef smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.pow(2, math.ceil(math.log(n, 2)))\n\nif __name__ == '__main__':\n    print smallest_power_of_2(1)\n    print smallest_power_of_2(2)\n    print smallest_power_of_2(3)\n    print smallest_power_of_2(4)\n    print smallest_power_of_2(5)\n    print smallest_power_of_2(6)\n    print smallest_power_of_2(7)\n    print smallest_power_of_2(8)\n    print smallest_power_of_2(9)\n    print smallest_power_of_2(10)\n    print smallest_power_of_2(11)\n    print smallest_power_of_2(12)\n    print smallest_power_of_2(13)\n    print smallest_power_of_2(14)\n    print smallest_power_of_2(15)\n    print smallest_power_of_2(16)\n    print smallest_power_of_2(17)\n    print smallest_power_of_2(18)\n    print smallest_power_of_2(19)\n    print smallest_power_of_2(20)\n    print smallest_power_of_2(21)\n    print smallest_power_of_2(22)\n    print smallest_power_of_2(23)\n    print smallest_power_of_2(24)\n    print smallest_power_of_2(25)\n    print smallest_power_of_2(26)\n    print smallest_power_of_2(27)\n    print smallest_power_of_2(28)\n    print smallest_power_of_2(29)\n    print smallest_power_of_2(30)\n    print smallest_power_of_2(31)\n    print smallest_power_of_2(32)\n    print smallest_power_of_2(33)\n    print smallest_power_of_2(34",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # https://stackoverflow.com/questions/6274207/python-find-smallest-power-of-2-greater-than-or-equal-to-n\n    return 2**(n//2)\n\n\nif __name__ == '__main__':\n    print(smallest_power_of_two(10))",
    "# https://en.wikipedia.org/wiki/Logarithm#Procedure_for_calculating_the_base_2_logarithm\n# https://www.youtube.com/watch?v=KkXb5b9LfA0\ndef log2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be positive\")\n    result = 0\n    while n!= 0:\n        if n % 2 == 0:\n            n = n / 2\n            result += 1\n        else:\n            n = n * 3 + 1\n    return result\n\ndef log2_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    result = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            result += 1\n        else:\n            n = n * 3 + 1\n    return result\n\nif __name__ == \"__main__\":\n    assert log2(10) == 2\n    assert log2(100) == 3\n    assert log2(1000) == 4\n    assert log2(10000) == 5\n    assert log2(100000) == 6\n    assert log2(1000000) == 7\n    assert log2(10000000) == 8\n    assert log2(100000000) == 9\n    assert log2(1000000000) == 10\n    assert log2(10000000000) == 11\n    assert log2(100000000000) == 12\n    assert log2(1000000000000) == 13\n    assert log2(10000000000000) == 14\n    assert log2(100000000000000) == 15\n    assert log2(1000000000000000) == 16\n    assert log2(10000000000000000) == 17\n    assert log2(100000000000000000) == 18\n    assert log2(1000000000000000000) == 19\n    assert log2(10000000000000000000) == 20\n    assert log2(100000000000000000000) == 21\n    assert log2(1000000000000000000000) == 22\n    assert log2(10000000000000000000000) ==",
    "def smallest_power_of_2_greater_than_or_equal_to(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 1 << (n - 1)\n\nif __name__ == '__main__':\n    print(smallest_power_of_2_greater_than_or_equal_to(5))\n    print(smallest_power_of_2_greater_than_or_equal_to(0))\n    print(smallest_power_of_2_greater_than_or_equal_to(1))\n    print(smallest_power_of_2_greater_than_or_equal_to(2))\n    print(smallest_power_of_2_greater_than_or_equal_to(4))\n    print(smallest_power_of_2_greater_than_or_equal_to(8))\n    print(smallest_power_of_2_greater_than_or_equal_to(16))\n    print(smallest_power_of_2_greater_than_or_equal_to(32))\n    print(smallest_power_of_2_greater_than_or_equal_to(64))",
    "import math\n\ndef smallest_power_of_2_greater_than_or_equal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.log(n, 2)) + 1\n\nif __name__ == \"__main__\":\n    assert smallest_power_of_2_greater_than_or_equal(1) == 2\n    assert smallest_power_of_2_greater_than_or_equal(2) == 4\n    assert smallest_power_of_2_greater_than_or_equal(3) == 4\n    assert smallest_power_of_2_greater_than_or_equal(4) == 8\n    assert smallest_power_of_2_greater_than_or_equal(5) == 8\n    assert smallest_power_of_2_greater_than_or_equal(6) == 8\n    assert smallest_power_of_2_greater_than_or_equal(7) == 8\n    assert smallest_power_of_2_greater_than_or_equal(8) == 8\n    assert smallest_power_of_2_greater_than_or_equal(9) == 16\n    assert smallest_power_of_2_greater_than_or_equal(10) == 16\n    assert smallest_power_of_2_greater_than_or_equal(11) == 16\n    assert smallest_power_of_2_greater_than_or_equal(12) == 16\n    assert smallest_power_of_2_greater_than_or_equal(13) == 16\n    assert smallest_power_of_2_greater_than_or_equal(14) == 16\n    assert smallest_power_of_2_greater_than_or_equal(15) == 16\n    assert smallest_power_of_2_greater_than_or_equal(16) == 16\n    assert smallest_power_of_2_greater_than_or_equal(17) == 32\n    assert smallest_power_of_2_greater_than_or_equal(18) == 32\n    assert smallest_power_of",
    "def smallest_pow2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return n\n    pow2 = 2\n    while pow2 < n:\n        pow2 = pow2 << 1\n    return pow2\n\nif __name__ == \"__main__\":\n    print(smallest_pow2(5))\n    print(smallest_pow2(8))",
    "def smallest_power_of_two(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n\n    Example\n    Input:\n    n = 5\n    Output:\n    2\n    \"\"\"\n    return 2**(n/2)",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def smallestPow2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 1\n        # find the smallest power of 2 greater than or equal to n\n        while n > 1:\n            n = n >> 1\n            if n == 0:\n                return 1\n        return n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.smallestPow2(1)\n    print s.smallestPow2(2)\n    print s.smallestPow2(3)\n    print s.smallestPow2(4)\n    print s.smallestPow2(5)\n    print s.smallestPow2(6)\n    print s.smallestPow2(7)\n    print s.smallestPow2(8)\n    print s.smallestPow2(9)\n    print s.smallestPow2(10)\n    print s.smallestPow2(11)\n    print s.smallestPow2(12)",
    "def smallest_power_of_2(n):\n\t\"\"\"\n\t>>> smallest_power_of_2(0)\n\t0\n\t>>> smallest_power_of_2(1)\n\t1\n\t>>> smallest_power_of_2(2)\n\t2\n\t>>> smallest_power_of_2(3)\n\t4\n\t>>> smallest_power_of_2(4)\n\t4\n\t>>> smallest_power_of_2(5)\n\t8\n\t>>> smallest_power_of_2(6)\n\t8\n\t>>> smallest_power_of_2(7)\n\t8\n\t>>> smallest_power_of_2(8)\n\t8\n\t>>> smallest_power_of_2(9)\n\t16\n\t>>> smallest_power_of_2(10)\n\t16\n\t>>> smallest_power_of_2(11)\n\t16\n\t>>> smallest_power_of_2(12)\n\t16\n\t>>> smallest_power_of_2(13)\n\t16\n\t>>> smallest_power_of_2(14)\n\t16\n\t>>> smallest_power_of_2(15)\n\t16\n\t>>> smallest_power_of_2(16)\n\t16\n\t>>> smallest_power_of_2(17)\n\t32\n\t>>> smallest_power_of_2(18)\n\t32\n\t>>> smallest_power_of_2(19)\n\t32\n\t>>> smallest_power_of_2(20)\n\t32\n\t>>> smallest_power_of_2(21)\n\t32\n\t>>> smallest_power_of_2(22)\n\t32\n\t>>> smallest_power_of_2(23)\n\t32\n\t>>> smallest_power_of_2(24)\n\t32\n\t>>> smallest_power_of_2(25)\n\t32\n\t>>> smallest_power_of_2(26)\n\t32\n\t>>> smallest_power_of_2(27)\n\t32\n\t>>> smallest_power_of_2(28)\n\t32\n\t>>> smallest_power_of_2(29)\n\t32\n\t>>> smallest_power_of_2(30)\n\t32",
    "from math import ceil\n\n\ndef smallest_pow2_greater_equal(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n\n    Input:\n    n - Integer\n\n    Output:\n    Smallest power of 2 greater than or equal to n\n\n    Example:\n    >>> smallest_pow2_greater_equal(8)\n    2\n    >>> smallest_pow2_greater_equal(9)\n    4\n    >>> smallest_pow2_greater_equal(10)\n    8\n    >>> smallest_pow2_greater_equal(11)\n    16\n    >>> smallest_pow2_greater_equal(12)\n    16\n    >>> smallest_pow2_greater_equal(13)\n    32\n    >>> smallest_pow2_greater_equal(14)\n    32\n    >>> smallest_pow2_greater_equal(15)\n    32\n    >>> smallest_pow2_greater_equal(16)\n    64\n    >>> smallest_pow2_greater_equal(17)\n    64\n    >>> smallest_pow2_greater_equal(18)\n    64\n    >>> smallest_pow2_greater_equal(19)\n    128\n    >>> smallest_pow2_greater_equal(20)\n    128\n    >>> smallest_pow2_greater_equal(21)\n    128\n    >>> smallest_pow2_greater_equal(22)\n    256\n    >>> smallest_pow2_greater_equal(23)\n    256\n    >>> smallest_pow2_greater_equal(24)\n    256\n    >>> smallest_pow2_greater_equal(25)\n    512\n    >>> smallest_pow2_greater_equal(26)\n    512\n    >>> smallest_pow2_greater_equal(27)\n    512\n    >>> smallest_pow2_greater_equal(28)\n    512\n    >>> smallest_pow2_greater_equal(29)\n    1024\n    >>> smallest_pow2_greater_equal(30)\n    1024",
    "def smallest_power_of_2_greater_than_or_equal_to(n):\n    \"\"\"\n    >>> smallest_power_of_2_greater_than_or_equal_to(10)\n    16\n    \"\"\"\n    return 2 ** int(np.ceil(np.log2(n)))",
    "def smallest_pow2(n):\n\t# base case\n\tif n == 0:\n\t\treturn 1\n\t\n\t# recurse\n\tif n & 1:\n\t\treturn smallest_pow2(n/2)\n\telse:\n\t\treturn smallest_pow2(n/2) * 2\n\n\nprint(smallest_pow2(10))\n#>>> 2",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # 1. find the first bit in binary representation of n\n    # 2. count number of 1's in binary representation of n\n    # 3. find the number of 1's in binary representation of n\n    # 4. return the smallest power of 2 greater than or equal to n\n    # 5. return the binary representation of n with the smallest power of 2\n    # 6. return the binary representation of n with the smallest power of 2\n    # 7. return the binary representation of n with the smallest power of 2\n    # 8. return the binary representation of n with the smallest power of 2\n    # 9. return the binary representation of n with the smallest power of 2\n    # 10. return the binary representation of n with the smallest power of 2\n    # 11. return the binary representation of n with the smallest power of 2\n    # 12. return the binary representation of n with the smallest power of 2\n    # 13. return the binary representation of n with the smallest power of 2\n    # 14. return the binary representation of n with the smallest power of 2\n    # 15. return the binary representation of n with the smallest power of 2\n    # 16. return the binary representation of n with the smallest power of 2\n    # 17. return the binary representation of n with the smallest power of 2\n    # 18. return the binary representation of n with the smallest power of 2\n    # 19. return the binary representation of n with the smallest power of 2\n    # 20. return the binary representation of n with the smallest power of 2\n    # 21. return the binary representation of n with the smallest power of 2\n    # 22. return the binary representation of n with the smallest power of 2\n    # 23. return the binary representation of n with the smallest power of 2\n    # 24. return the binary representation of n with the smallest power of 2\n    # 25. return the binary representation of n with the smallest power of 2\n    # 26. return the binary representation of n with the smallest power of 2\n    # 27. return the binary representation of n with the smallest power of 2\n    # 28. return the binary representation of n with the smallest power of 2\n    # 29. return the binary representation of",
    "import sys\n\ndef smallest_power_of_2_greater_equal(n):\n    \"\"\"\n    For given number n, return smallest power of 2 greater than or equal to n.\n    \"\"\"\n    assert n > 0\n    power_of_2 = 1\n    while n > 1:\n        power_of_2 *= 2\n        n -= 1\n        assert n > 0\n    return power_of_2\n\nif __name__ == '__main__':\n    try:\n        n = int(sys.argv[1])\n    except IndexError:\n        n = 1000\n    print smallest_power_of_2_greater_equal(n)",
    "def smallest_pow2(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    return 0\n\nif __name__ == \"__main__\":\n    assert smallest_pow2(0) == 1\n    assert smallest_pow2(1) == 2\n    assert smallest_pow2(2) == 4\n    assert smallest_pow2(3) == 8\n    assert smallest_pow2(4) == 16\n    assert smallest_pow2(5) == 32",
    "def smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        i = i * 2\n    return i\n\nif __name__ == '__main__':\n    assert smallest_power_of_two(1) == 1\n    assert smallest_power_of_two(2) == 2\n    assert smallest_power_of_two(3) == 2\n    assert smallest_power_of_two(4) == 4\n    assert smallest_power_of_two(5) == 4\n    assert smallest_power_of_two(6) == 4\n    assert smallest_power_of_two(7) == 8\n    assert smallest_power_of_two(8) == 8\n    assert smallest_power_of_two(9) == 8\n    assert smallest_power_of_two(10) == 16\n    assert smallest_power_of_two(11) == 16\n    assert smallest_power_of_two(12) == 16\n    assert smallest_power_of_two(13) == 16\n    assert smallest_power_of_two(14) == 16\n    assert smallest_power_of_two(15) == 16\n    assert smallest_power_of_two(16) == 16\n    assert smallest_power_of_two(17) == 32\n    assert smallest_power_of_two(18) == 32\n    assert smallest_power_of_two(19) == 32\n    assert smallest_power_of_two(20) == 32\n    assert smallest_power_of_two(21) == 32\n    assert smallest_power_of_two(22) == 32\n    assert smallest_power_of_two(23) == 32\n    assert smallest_power_of_two(24) == 32\n    assert smallest_power_of_two(25) == 32\n    assert smallest_power_of_two(26) == 64\n    assert smallest_power_of_two(27) == 64\n    assert smallest_power_of_two(28) == 64\n    assert smallest_power_of_two(29) == 64\n    assert smallest_power_of_two",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 0:\n        n >>= 1\n    return n\n\n\nif __name__ == '__main__':\n    print smallest_power_of_2(3)\n    print smallest_power_of_2(4)\n    print smallest_power_of_2(5)\n    print smallest_power_of_2(6)\n    print smallest_power_of_2(7)\n    print smallest_power_of_2(8)\n    print smallest_power_of_2(9)\n    print smallest_power_of_2(10)\n    print smallest_power_of_2(11)\n    print smallest_power_of_2(12)\n    print smallest_power_of_2(13)\n    print smallest_power_of_2(14)\n    print smallest_power_of_2(15)\n    print smallest_power_of_2(16)\n    print smallest_power_of_2(17)\n    print smallest_power_of_2(18)\n    print smallest_power_of_2(19)\n    print smallest_power_of_2(20)\n    print smallest_power_of_2(21)\n    print smallest_power_of_2(22)\n    print smallest_power_of_2(23)\n    print smallest_power_of_2(24)\n    print smallest_power_of_2(25)\n    print smallest_power_of_2(26)\n    print smallest_power_of_2(27)\n    print smallest_power_of_2(28)\n    print smallest_power_of_2(29)\n    print smallest_power_of_2(30)\n    print smallest_power_of_2(31)\n    print smallest_power_of_2(32)\n    print smallest_power_of_2(33)\n    print smallest_power_of_2(34)\n    print smallest_power_of_2(35)\n    print smallest_power_of_2(36)\n    print smallest_power_of_",
    "def smallest_power_of_two(n):\n    \"\"\"\n    >>> smallest_power_of_two(5)\n    2\n    >>> smallest_power_of_two(6)\n    4\n    >>> smallest_power_of_two(7)\n    4\n    >>> smallest_power_of_two(8)\n    8\n    >>> smallest_power_of_two(9)\n    8\n    >>> smallest_power_of_two(10)\n    8\n    >>> smallest_power_of_two(11)\n    8\n    >>> smallest_power_of_two(12)\n    16\n    >>> smallest_power_of_two(13)\n    16\n    >>> smallest_power_of_two(14)\n    16\n    >>> smallest_power_of_two(15)\n    16\n    >>> smallest_power_of_two(16)\n    16\n    >>> smallest_power_of_two(17)\n    16\n    >>> smallest_power_of_two(18)\n    16\n    >>> smallest_power_of_two(19)\n    16\n    >>> smallest_power_of_two(20)\n    16\n    >>> smallest_power_of_two(21)\n    16\n    >>> smallest_power_of_two(22)\n    16\n    >>> smallest_power_of_two(23)\n    16\n    >>> smallest_power_of_two(24)\n    16\n    >>> smallest_power_of_two(25)\n    16\n    >>> smallest_power_of_two(26)\n    16\n    >>> smallest_power_of_two(27)\n    16\n    >>> smallest_power_of_two(28)\n    16\n    >>> smallest_power_of_two(29)\n    16\n    >>> smallest_power_of_two(30)\n    16\n    >>> smallest_power_of_two(31)\n    16\n    >>> smallest_power_of_two(32)\n    16\n    >>> smallest_power_of_two(33)\n    16\n    >>> smallest_power_of_two(34)\n    16\n    >>> smallest_power_of_two(35)\n    16",
    "from __future__ import print_function\n\ndef smallest_pow2_greater_equal(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    :param n:\n    :return:\n    \"\"\"\n    while n > 1:\n        if n & 1:\n            return n\n        n >>= 1\n    return n\n\ndef test():\n    assert smallest_pow2_greater_equal(1) == 2\n    assert smallest_pow2_greater_equal(2) == 2\n    assert smallest_pow2_greater_equal(3) == 2\n    assert smallest_pow2_greater_equal(4) == 2\n    assert smallest_pow2_greater_equal(5) == 2\n    assert smallest_pow2_greater_equal(6) == 2\n    assert smallest_pow2_greater_equal(7) == 2\n    assert smallest_pow2_greater_equal(8) == 2\n    assert smallest_pow2_greater_equal(9) == 2\n    assert smallest_pow2_greater_equal(10) == 2\n    assert smallest_pow2_greater_equal(11) == 2\n    assert smallest_pow2_greater_equal(12) == 2\n    assert smallest_pow2_greater_equal(13) == 2\n    assert smallest_pow2_greater_equal(14) == 2\n    assert smallest_pow2_greater_equal(15) == 2\n    assert smallest_pow2_greater_equal(16) == 2\n    assert smallest_pow2_greater_equal(17) == 2\n    assert smallest_pow2_greater_equal(18) == 2\n    assert smallest_pow2_greater_equal(19) == 2\n    assert smallest_pow2_greater_equal(20) == 2\n    assert smallest_pow2_greater_equal(21) == 2\n    assert smallest_pow2_greater_equal(22) == 2\n    assert smallest_pow2_greater_equal(23) == 2\n    assert smallest",
    "def smallest_power_of_2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n        if n == 1:\n            return 1\n    return n\n\nif __name__ == \"__main__\":\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 2\n    assert smallest_power_of_2(4) == 2\n    assert smallest_power_of_2(5) == 2\n    assert smallest_power_of_2(6) == 2\n    assert smallest_power_of_2(7) == 2\n    assert smallest_power_of_2(8) == 4\n    assert smallest_power_of_2(9) == 4\n    assert smallest_power_of_2(10) == 4\n    assert smallest_power_of_2(11) == 4\n    assert smallest_power_of_2(12) == 4\n    assert smallest_power_of_2(13) == 4\n    assert smallest_power_of_2(14) == 4\n    assert smallest_power_of_2(15) == 4\n    assert smallest_power_of_2(16) == 8\n    assert smallest_power_of_2(17) == 8\n    assert smallest_power_of_2(18) == 8\n    assert smallest_power_of_2(19) == 8\n    assert smallest_power_of_2(20) == 8\n    assert smallest_power_of_2(21) == 8\n    assert smallest_power_of_2(22) == 8\n    assert smallest_power_of_2(23) == 8\n    assert smallest_power_of_2(24) == 8\n    assert smallest_power_of_2(25) == 8\n    assert smallest_power_of_2(26) == 8\n    assert smallest_power_of_2(27) == 8\n    assert smallest_",
    "def smallest_pow2_greater_than_or_equal_to_n(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return 2 ** int(np.ceil(np.log2(n)))",
    "def smallest_power_of_2(n):\n    \"\"\"\n    :param n: a number\n    :return: the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Power_of_two#Integer_powers\n    return 2 ** (1 + int(n ** 0.5))\n\nif __name__ == '__main__':\n    print(smallest_power_of_2(100))\n    print(smallest_power_of_2(1000))\n    print(smallest_power_of_2(1000000))\n    print(smallest_power_of_2(100000000))\n    print(smallest_power_of_2(1000000000))",
    "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n\n    power_of_2 = 1\n    while power_of_2 * 2 < n:\n        power_of_2 = power_of_2 * 2\n    return power_of_2\n\ndef main():\n    n = int(input())\n    print(smallest_power_of_2(n))\n\nif __name__ == '__main__':\n    main()",
    "def smallest_pow2_greater_than_or_equal_to(n):\n    # write your code here\n    return 2 ** (n - 1)\n\n\n\nif __name__ == \"__main__\":\n    print smallest_pow2_greater_than_or_equal_to(10)",
    "import math\n\ndef get_power_of_2(num):\n    return int(math.log(num, 2))\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The smallest power of 2 greater than or equal to {} is {}\".format(n, get_power_of_2(n)))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_smallest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return n\n    if n == 2:\n        return 4\n    return n | (n >> 1)\n\nif __name__ == '__main__':\n    print(find_smallest_power_of_two(0))\n    print(find_smallest_power_of_two(1))\n    print(find_smallest_power_of_two(2))\n    print(find_smallest_power_of_two(3))\n    print(find_smallest_power_of_two(4))\n    print(find_smallest_power_of_two(5))\n    print(find_smallest_power_of_two(6))\n    print(find_smallest_power_of_two(7))\n    print(find_smallest_power_of_two(8))\n    print(find_smallest_power_of_two(9))\n    print(find_smallest_power_of_two(10))\n    print(find_smallest_power_of_two(11))\n    print(find_smallest_power_of_two(12))\n    print(find_smallest_power_of_two(13))\n    print(find_smallest_power_of_two(14))\n    print(find_smallest_power_of_two(15))\n    print(find_smallest_power_of_two(16))\n    print(find_smallest_power_of_two(17))\n    print(find_smallest_power_of_two(18))\n    print(find_smallest_power_of_two(19))\n    print(find_smallest_power_of_two(20))\n    print(find_smallest_power_of_two(21))\n    print(find_smallest_power_of_two(22))\n    print(find_smallest_power_of_two(23))",
    "# https://en.wikipedia.org/wiki/Power_of_two#Smallest_possible_power_of_two_greater_than_n\ndef smallest_power_of_two(n):\n    return n - 1",
    "from math import log2\n\n\ndef smallest_power_of_2_greater_than_or_equal_to(n):\n    if n <= 1:\n        return 1\n    return int(2 ** log2(n))\n\n\nif __name__ == \"__main__\":\n    print smallest_power_of_2_greater_than_or_equal_to(1)\n    print smallest_power_of_2_greater_than_or_equal_to(2)\n    print smallest_power_of_2_greater_than_or_equal_to(3)\n    print smallest_power_of_2_greater_than_or_equal_to(4)\n    print smallest_power_of_2_greater_than_or_equal_to(5)\n    print smallest_power_of_2_greater_than_or_equal_to(6)\n    print smallest_power_of_2_greater_than_or_equal_to(7)\n    print smallest_power_of_2_greater_than_or_equal_to(8)\n    print smallest_power_of_2_greater_than_or_equal_to(9)\n    print smallest_power_of_2_greater_than_or_equal_to(10)\n    print smallest_power_of_2_greater_than_or_equal_to(11)\n    print smallest_power_of_2_greater_than_or_equal_to(12)\n    print smallest_power_of_2_greater_than_or_equal_to(13)\n    print smallest_power_of_2_greater_than_or_equal_to(14)\n    print smallest_power_of_2_greater_than_or_equal_to(15)\n    print smallest_power_of_2_greater_than_or_equal_to(16)\n    print smallest_power_of_2_greater_than_or_equal_to(17)\n    print smallest_power_of_2_greater_than_or_equal_to(18)\n    print smallest_power_of_2_greater_than",
    "# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return 2**ceil(log2(n))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @include\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ceil(log2(n)))\n\n\n# @exclude\ndef smallest_pow2_greater_than_or_equal_to_n(n):\n    return pow(2, ce"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}