{
  "problem": {
    "task_id": "MBPP/65",
    "prompt": "Write a function of recursion list sum.",
    "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
    "test_list": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ],
    "challenge_test_list": [],
    "problem_id": 54
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def recursion_sum(nums):\n    \"\"\"\n    nums: a list of integers.\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        return nums[0] + recursion_sum(nums[1:])\n\nif __name__ == '__main__':\n    nums = [2,3,5]\n    print(recursion_sum(nums))\n    nums = [1,2,3,4,5,6,7,8,9]\n    print(recursion_sum(nums))\n    nums = [1,1,1,1,1,1,1,1,1,1]\n    print(recursion_sum(nums))",
    "def sum_recursion(n):\n    \"\"\"\n    sum_recursion(n)\n    n is an integer, the sum of the first n numbers.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        return sum_recursion(n-1) + n\n\n\ndef sum_recursion_2(n):\n    \"\"\"\n    sum_recursion_2(n)\n    n is an integer, the sum of the first n numbers.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        return sum_recursion_2(n-1) + sum_recursion_2(n-2) + n\n\n\ndef sum_recursion_3(n):\n    \"\"\"\n    sum_recursion_3(n)\n    n is an integer, the sum of the first n numbers.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        return sum_recursion_3(n-1) + sum_recursion_3(n-2) + sum_recursion_3(n-3) + n\n\n\nif __name__ == '__main__':\n    print sum_recursion(10)\n    print sum_recursion_2(10)\n    print sum_recursion_3(10)",
    "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n\n    def recursion(self, head):\n        if not head: return 0\n        if not head.next: return head.val\n        return self.recursion(head.next) + self.recursion(head.next.next)",
    "# Definition for a recursive list.\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def recursiveSum(self, head, sum):\n        \"\"\"\n        :type head: ListNode\n        :type sum: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return head\n        else:\n            return self.recursiveSum(head.next, sum + head.val)\n\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return head\n        else:\n            return self.recursiveSum(head.next, head.val)",
    "# Definition for a recursive list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def sumOfRecursive(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        return self.sumOfRecursive(head.next) + head.val\n\n    def sumOfRecursive2(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.sumOfRecursive2(head.next) + head.val\n\n    def sumOfRecursive3(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        return self.sumOfRecursive3(head.next) + head.val\n\n    def sumOfRecursive4(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.sumOfRecursive4(head.next) + head.val\n\n    def sumOfRecursive5(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.sumOfRecursive5(head.next) + head.val\n\n    def sumOfRecursive6(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.sumOfRecursive6(head.next) + head.val\n\n    def sumOfRecursive7(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n\n    def sumNumbers(self, head):\n        if head is None:\n            return None\n\n        if head.next is None:\n            return head\n\n        result = None\n        pre = None\n        pre = self.sumNumbers(head.next)\n        if pre is not None:\n            result = ListNode(0)\n            result.next = pre\n        else:\n            result = head\n        pre = None\n\n        while head:\n            head = head.next\n            num = head.val\n            if pre is not None:\n                pre.next = ListNode(num)\n                pre = pre.next\n            else:\n                result = ListNode(num)\n                pre = result\n        return result",
    "class Solution(object):\n    def recursiveListSum(self, list):\n        \"\"\"\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if not list:\n            return 0\n        return self.recursiveListSum(list[1:]) + list[0]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.recursiveListSum([1, 2, 3]))\n    print(sol.recursiveListSum([1, 2, 3, 4]))",
    "class Node(object):\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n    def __str__(self):\n        return str(self.data)\n\n\nclass RecursiveListSum(object):\n    def __init__(self, head):\n        self.head = head\n\n    def __str__(self):\n        return str(self.head)\n\n    def sum(self, cur_node):\n        if not cur_node:\n            return 0\n\n        return cur_node.data + self.sum(cur_node.next)\n\n    def sum_recursive(self, cur_node):\n        if not cur_node:\n            return 0\n\n        return cur_node.data + self.sum_recursive(cur_node.next)\n\n\nclass RecursiveListSumTest(unittest.TestCase):\n    def test_sum_recursive(self):\n        rls = RecursiveListSum(Node(1, Node(2, Node(3))))\n        self.assertEqual(rls.sum_recursive(rls.head), 7)\n\n    def test_sum(self):\n        rls = RecursiveListSum(Node(1, Node(2, Node(3))))\n        self.assertEqual(rls.sum(rls.head), 7)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def recursion_list_sum(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    if not lst:\n        return 0\n    return sum(recursion_list_sum(lst[1:]) + lst[0])",
    "class Solution:\n    # @return a list of integers\n    def sum_recursion(self, list_):\n        \"\"\"\n        :type list_: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not list_:\n            return []\n        ret = [0]\n        for i in range(len(list_)):\n            ret.append(ret[i] + list_[i])\n            if i == 0 or i == len(list_) - 1:\n                continue\n            ret[i] += ret[i-1] + ret[i+1]\n        return ret\n\n    def sum_recursion_dp(self, list_):\n        \"\"\"\n        :type list_: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not list_:\n            return []\n        ret = [0]\n        for i in range(len(list_)):\n            if i == 0:\n                ret.append(0)\n            else:\n                ret[i] += ret[i-1]\n            ret[i] += list_[i]\n            if i == len(list_) - 1:\n                continue\n            ret[i] += ret[i+1]\n        return ret",
    "def sum_recursion(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sum_recursion(nums[1:]) + nums[0]\n\ndef sum_recursion_iter(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sum_recursion_iter(nums[1:]) + nums[0]\n\ndef sum_recursion_iter2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sum_recursion_iter2(nums[1:]) + nums[0]\n\nif __name__ == '__main__':\n    assert sum_recursion([1, 2, 3, 4]) == 10\n    assert sum_recursion_iter([1, 2, 3, 4]) == 10\n    assert sum_recursion_iter2([1, 2, 3, 4]) == 10",
    "def sum_recursion(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return sum_recursion(lst[1:]) + lst[0]\n\ndef sum_recursion_recursive(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return sum_recursion_recursive(lst[1:]) + lst[0]\n\ndef sum_recursion_iterative(lst):\n    return sum(lst)\n\ndef sum_recursion_recursive_iterative(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return sum_recursion_recursive_iterative(lst[1:]) + lst[0]\n\n\nprint sum_recursion([1,2,3])\nprint sum_recursion_recursive([1,2,3])\nprint sum_recursion_iterative([1,2,3])\nprint sum_recursion_recursive_iterative([1,2,3])",
    "import numpy as np\n\ndef recursion_list_sum(n, list_):\n    \"\"\"\n    :param n: the size of the list\n    :param list_: the list to sum\n    :return: the sum of list\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return list_[0]\n    else:\n        return recursion_list_sum(n - 1, [list_[i] + list_[i + 1] for i in range(len(list_) - 1)])\n\nif __name__ == '__main__':\n    # test\n    n = 5\n    list_ = [1, 2, 3, 4, 5]\n    print(recursion_list_sum(n, list_))\n    # expected result: 6",
    "def recursion_list_sum(l):\n    \"\"\"\n    A recursion list is a list of lists.\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + recursion_list_sum(l[1:])\n\n\nif __name__ == \"__main__\":\n    l = [[1, 2, 3], [4, 5], [6, 7], [8, 9]]\n    print(recursion_list_sum(l))",
    "class ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def getSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head: return 0\n        sum = 0\n        while head:\n            sum += head.val\n            head = head.next\n        return sum\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    print(solution.getSum(head))\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\n    print(solution.getSum(head))\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6))))))\n    print(solution.getSum(head))",
    "import numpy as np\n\ndef sum_recursion(lst):\n    \"\"\"\n    sum_recursion(lst)\n\n    Input:\n    lst -- a list of integers.\n\n    Output:\n    The sum of all elements in lst.\n\n    Exceptions:\n    IndexError if lst is empty.\n    \"\"\"\n    if len(lst) == 0:\n        raise IndexError(\"list is empty\")\n    return sum_recursion(lst[1:]) + lst[0]\n\n\ndef sum_recursion_with_list(lst):\n    \"\"\"\n    sum_recursion_with_list(lst)\n\n    Input:\n    lst -- a list of integers.\n\n    Output:\n    The sum of all elements in lst.\n\n    Exceptions:\n    IndexError if lst is empty.\n    \"\"\"\n    if len(lst) == 0:\n        raise IndexError(\"list is empty\")\n    return sum_recursion_with_list(lst[1:]) + lst[0]\n\n\ndef sum_recursion_with_list_2(lst):\n    \"\"\"\n    sum_recursion_with_list_2(lst)\n\n    Input:\n    lst -- a list of integers.\n\n    Output:\n    The sum of all elements in lst.\n\n    Exceptions:\n    IndexError if lst is empty.\n    \"\"\"\n    if len(lst) == 0:\n        raise IndexError(\"list is empty\")\n    return sum_recursion_with_list_2(lst[1:]) + lst[0]\n\n\ndef sum_recursion_with_list_3(lst):\n    \"\"\"\n    sum_recursion_with_list_3(lst)\n\n    Input:\n    lst -- a list of integers.\n\n    Output:\n    The sum of all elements in lst.\n\n    Exceptions:\n    IndexError if lst is empty.\n    \"\"\"\n    if len(lst) == 0:\n        raise IndexError(\"list is empty\")\n    return sum_recursion_with_list_3(lst[1:]) + lst[0]\n\n\ndef sum_recursion_with_",
    "def sum_recursive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if not list:\n        return 0\n    return list[0] + sum_recursive(list[1:])\n\nif __name__ == '__main__':\n    assert sum_recursive([1, 2, 3]) == 6\n    assert sum_recursive([1, 2, 3, 4]) == 12\n    assert sum_recursive([1, 2, 3, 4, 5]) == 21\n    assert sum_recursive([1, 2, 3, 4, 5, 6]) == 36\n    assert sum_recursive([1, 2, 3, 4, 5, 6, 7]) == 49\n    assert sum_recursive([1, 2, 3, 4, 5, 6, 7, 8]) == 64\n    assert sum_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 81",
    "def recursion_list_sum(L):\n    if len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0] + L[1]\n    else:\n        return L[0] + recursion_list_sum(L[1:])\n\ndef recursion_list_sum_2(L):\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + recursion_list_sum_2(L[1:])\n\nif __name__ == '__main__':\n    print recursion_list_sum([1, 2, 3, 4, 5, 6])\n    print recursion_list_sum_2([1, 2, 3, 4, 5, 6])",
    "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\ndef sumRecursion(head):\n    if not head:\n        return 0\n    return sum(sumRecursion(head.next)) + head.val\n\ndef sumRecursion1(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sum(sumRecursion(head.next)) + head.val + sumRecursion1(head.next)\n\ndef sumRecursion2(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sum(sumRecursion(head.next)) + head.val + sumRecursion2(head.next)\n\ndef sumRecursion3(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sum(sumRecursion(head.next)) + head.val + sumRecursion3(head.next)\n\ndef sumRecursion4(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sumRecursion(head.next) + head.val + sumRecursion4(head.next)\n\ndef sumRecursion5(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sumRecursion(head.next) + head.val + sumRecursion5(head.next)\n\ndef sumRecursion6(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sumRecursion(head.next) + head.val + sumRecursion6(head.next)\n\ndef sumRecursion7(head):\n    if not head:\n        return 0\n    if not head.next:\n        return head.val\n    return sumRecursion(head.next) + head.val + sumRecursion7(head.next)\n\ndef sumRecursion8(head):\n    if not head:\n        return 0\n    if not head.next",
    "class ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\ndef sum_recursion_list(head):\n    if head is None:\n        return 0\n    if head.next is None:\n        return head.val\n    return sum_recursion_list(head.next) + head.val\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    print(sum_recursion_list(head))",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def sumList(self, head):\n        if head == None or head.next == None:\n            return head\n        res = head\n        while head.next:\n            res = self.sumList(res.next)\n            head = head.next\n        return res",
    "class RecursionList:\n    def __init__(self, lst):\n        self.lst = lst\n    def sum(self):\n        if len(self.lst) == 0:\n            return 0\n        if len(self.lst) == 1:\n            return self.lst[0]\n        res = 0\n        for i in range(len(self.lst)):\n            res += self.lst[i]\n            res += self.sum(self.lst[i+1:])\n        return res\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4]\n    rl = RecursionList(lst)\n    print(rl.sum())",
    "def sum(list, start):\n    if not list:\n        return 0\n    return list[start] + sum(list[start+1:], start+1)\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def recListSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        else:\n            return sum(self.recListSum(head.next), 0)",
    "class RecursionListSum:\n    \"\"\"\n    A RecursionListSum class is defined as follow:\n\n    RecursionListSum(self, list)\n    Input:\n        list: a list of integer\n    Output:\n        a list of integer\n    \"\"\"\n    def __init__(self, list):\n        \"\"\"\n        Initialize the class.\n        \"\"\"\n        self.list = list\n\n    def recursion_sum(self):\n        \"\"\"\n        A recursive method to sum the list.\n\n        Return:\n            a list of integer\n        \"\"\"\n        if self.list == []:\n            return []\n        else:\n            return self.recursion_sum() + self.list[0]\n\nif __name__ == '__main__':\n    #Test the class RecursionListSum\n    rls = RecursionListSum([1,2,3])\n    print rls.recursion_sum()\n    #Test the class RecursionListSum\n    rls = RecursionListSum([1,2,3,4,5])\n    print rls.recursion_sum()",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def addTwoNumbers(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        newhead = Solution.create_new_node(head.val)\n        newhead.next = Solution.add_two_numbers(head)\n        return newhead\n    \n    @staticmethod\n    def create_new_node(x):\n        return ListNode(x)\n    \n    @staticmethod\n    def add_two_numbers(head):\n        if not head:\n            return None\n        \n        pre_val = head.val\n        \n        head.val = head.val + head.next.val\n        head.next = None\n        \n        newhead = Solution.create_new_node(head.val)\n        newhead.next = Solution.add_two_numbers(head.next)\n        return newhead",
    "# Definition for a recursion list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def recursionListSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursionListSum(head.next) + self.recursionListSum(head.next.next)",
    "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass RecursionListSum:\n    def __init__(self, head):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.head = head\n        self.length = 0\n\n    def add(self, val):\n        \"\"\"\n        Add a value to the list. Returns true if the list did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if not self.head:\n            self.head = Node(val)\n            self.length += 1\n            return True\n\n        pre = self.head\n        while pre.next:\n            pre = pre.next\n        pre.next = Node(val)\n        self.length += 1\n        return True\n\n    def get(self, index):\n        \"\"\"\n        Get the value at index position.\n        :type index: int\n        :rtype: int\n        \"\"\"\n        cur = self.head\n        for i in range(index):\n            cur = cur.next\n        return cur.value\n\n    def removeAt(self, index):\n        \"\"\"\n        Remove the value at index position.\n        :type index: int\n        :rtype: void\n        \"\"\"\n        cur = self.head\n        pre = None\n        for i in range(index):\n            pre = cur\n            cur = cur.next\n        if pre:\n            pre.next = cur.next\n        self.length -= 1\n\n    def remove(self, val):\n        \"\"\"\n        Remove a value from the list. Returns true if the list contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        pre = self.head\n        cur = self.head\n        while cur:\n            if cur.value == val:\n                if pre:\n                    pre.next = cur.next\n                else:\n                    self.head = cur.next\n                self.length -= 1\n                return True\n            pre = cur\n            cur = cur.next\n        return False\n\n    def sum(self, index):\n        \"\"\"\n        Sum of elements, starting at position index.",
    "class Solution:\n    def recursionListSum(self, list_):\n        \"\"\"\n        :type list_: List[int]\n        :rtype: int\n        \"\"\"\n        if not list_:\n            return 0\n        return self.recursionListSum(list_[1:]) + list_[0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.recursionListSum([1, 2, 3, 4])",
    "def recursion_list_sum(lst):\n    \"\"\"\n    :param lst: List of integers\n    :return: Sum of all elements in list\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + recursion_list_sum(lst[1:])\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(recursion_list_sum(lst))",
    "# Definition for a recursive list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def __init__(self):\n        self.l = []\n\n    def add(self, x, y):\n        result = x + y\n        if result > 9:\n            return result - 10\n        else:\n            return result\n\n    def addList(self, l1, l2):\n        if l1 is None or l2 is None:\n            return None\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        l = ListNode(0)\n        l.next = self.addList(l1.next, l2.next)\n        l.val = l1.val + l2.val\n        return l\n\n    def sumList(self, head):\n        if head is None:\n            return 0\n        return sum([self.addList(l1, l2) for l1, l2 in zip(head.next, head.next.next)])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    l1 = ListNode(1)\n    l1.next = ListNode(0)\n    l1.next.next = ListNode(2)\n    l1.next.next.next = ListNode(3)\n    l1.next.next.next.next = ListNode(4)\n    l1.next.next.next.next.next = ListNode(5)\n    l1.next.next.next.next.next.next = ListNode(6)\n    l1.next.next.next.next.next.next.next = ListNode(7)\n    l1.next.next.next.next.next.next.next.next = ListNode(8)\n    l1.next.next.next.next.next.next.next.next.next = ListNode(9)\n    head = l1\n    print(s.sumList(head))",
    "def recursion_list_sum(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + recursion_list_sum(lst[1:])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(recursion_list_sum(lst))",
    "class Solution:\n    def sumNumbers(self, l):\n        \"\"\"\n        :type l: List[int]\n        :rtype: int\n        \"\"\"\n        if not l:\n            return 0\n        return self.sumNumbers(l[1:]) + l[0]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.sumNumbers([1, 2, 3]))",
    "def list_sum(l):\n    if not l:\n        return 0\n    return list_sum(l[1:]) + l[0]\n\ndef recursion_list_sum(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n    return l[0] + recursion_list_sum(l[1:])\n\n\n\nif __name__ == '__main__':\n    l = [1,2,3,4,5]\n    print(list_sum(l))\n    print(recursion_list_sum(l))\n    l = [1]\n    print(list_sum(l))\n    print(recursion_list_sum(l))\n    l = []\n    print(list_sum(l))\n    print(recursion_list_sum(l))\n    l = [1,2,3]\n    print(list_sum(l))\n    print(recursion_list_sum(l))\n    l = [1,2,3,4,5,6]\n    print(list_sum(l))\n    print(recursion_list_sum(l))\n    l = [1,2,3,4,5,6,7,8,9]\n    print(list_sum(l))\n    print(recursion_list_sum(l))",
    "class RecursionList:\n    def __init__(self, lst):\n        self.lst = lst\n\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:])\n\n\nclass RecursionList2(RecursionList):\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:]) + self.lst[-1]\n\n\nclass RecursionList3(RecursionList):\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:]) + self.sum(self.lst[-1:])\n\n\nclass RecursionList4(RecursionList):\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:]) + self.sum(self.lst[-1:]) + self.lst[-2]\n\n\nclass RecursionList5(RecursionList):\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:]) + self.sum(self.lst[-1:]) + self.sum(self.lst[-2:])\n\n\nclass RecursionList6(RecursionList):\n    def sum(self):\n        if not self.lst:\n            return 0\n        else:\n            return self.lst[0] + self.sum(self.lst[1:]) + self.sum(self.lst[-1:]) + self.sum(self.lst[-2:]) + self.lst[-3]\n\n\ndef test_recursion_list_sum():\n    assert RecursionList([1]).sum() == 1\n    assert RecursionList([",
    "def sum_recursion(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return sum_recursion(lst[1:]) + lst[0]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4]\n    assert(sum_recursion(lst) == 10)",
    "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: ListNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.next:\n            return root.val\n        return self.sumOfLeftLeaves(root.next) + self.sumOfLeftLeaves(root.next.next)",
    "# https://leetcode.com/problems/recursive-list-sum/description/\n\nclass Solution(object):\n    def recursive_list_sum(self, list):\n        \"\"\"\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if not list:\n            return 0\n        return self.recursive_list_sum(list[1:]) + list[0]\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    assert solution.recursive_list_sum([1,2,3]) == 6\n    assert solution.recursive_list_sum([-1, -2, -3, -4]) == 0\n    assert solution.recursive_list_sum([]) == 0\n    assert solution.recursive_list_sum([1,2]) == 3",
    "import unittest\n\nclass TestSum(unittest.TestCase):\n    def test_sum_recursion(self):\n        sum_recursion = []\n        sum_recursion.append(1)\n        sum_recursion.append(2)\n        sum_recursion.append(3)\n        self.assertEqual(sum_recursion_sum(sum_recursion), 7)\n\n    def test_sum_recursion_2(self):\n        sum_recursion = []\n        sum_recursion.append(1)\n        sum_recursion.append(2)\n        sum_recursion.append(3)\n        sum_recursion.append(4)\n        sum_recursion.append(5)\n        self.assertEqual(sum_recursion_sum(sum_recursion), 15)\n\n    def test_sum_recursion_3(self):\n        sum_recursion = []\n        sum_recursion.append(1)\n        sum_recursion.append(2)\n        sum_recursion.append(3)\n        sum_recursion.append(4)\n        sum_recursion.append(5)\n        sum_recursion.append(6)\n        sum_recursion.append(7)\n        sum_recursion.append(8)\n        self.assertEqual(sum_recursion_sum(sum_recursion), 39)\n\ndef sum_recursion_sum(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + sum_recursion_sum(list[1:])\n\nif __name__ == '__main__':\n    unittest.main()",
    "# Definition for a recursive list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head: return head\n        ret = ListNode(0)\n        ret.next = self.sumNumbers(head.next)\n        ret.val = head.val\n        ret.next.val = head.val * 10 + head.next.val\n        return ret",
    "class Solution(object):\n    def sumRec(self, n, list):\n        \"\"\"\n        :type n: int\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return list[0]\n        else:\n            return self.sumRec(n - 1, list) + list[n - 1]",
    "def sum_recursion_list(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    if not list_:\n        return 0\n    return sum_recursion_list(list_[1:]) + list_[0]\n\n\nif __name__ == '__main__':\n    assert sum_recursion_list([1, 2, 3, 4, 5]) == 15\n    assert sum_recursion_list([1, 2, 3, 4]) == 9\n    assert sum_recursion_list([1, 2, 3, 4, 5, 6]) == 20\n    assert sum_recursion_list([1, 2, 3, 4, 5, 6, 7]) == 30\n    assert sum_recursion_list([1, 2, 3, 4, 5, 6, 7, 8]) == 42\n    assert sum_recursion_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 55",
    "def recursion_sum(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + recursion_sum(nums[1:])\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4]\n    print(recursion_sum(nums))\n    nums = [1, 2, 3]\n    print(recursion_sum(nums))\n    nums = [1, 2]\n    print(recursion_sum(nums))\n    nums = [1]\n    print(recursion_sum(nums))\n    nums = []\n    print(recursion_sum(nums))",
    "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        # Get the sum\n        sum = 0\n        while head:\n            sum += head.val\n            head = head.next\n        return sum\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print solution.getSum(head)",
    "def recursion_list_sum(list_sum):\n    if not list_sum:\n        return 0\n    if len(list_sum) == 1:\n        return list_sum[0]\n    return list_sum[0] + recursion_list_sum(list_sum[1:])\n\ndef test():\n    assert recursion_list_sum([1, 2, 3]) == 6\n    assert recursion_list_sum([1, 2, 3, 4]) == 10\n\nif __name__ == '__main__':\n    test()",
    "class Solution(object):\n    def recursionSum(self, list):\n        \"\"\"\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if len(list) == 0:\n            return 0\n        return self.recursionSum(list[:-1]) + list[-1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().recursionSum([1,2,3,4,5]) == 15\n    assert Solution().recursionSum([1,2,3,4,5,6,7]) == 42",
    "def sum_recursion(list_):\n    \"\"\"\n    list_ is a list of integers.\n    \"\"\"\n\n    if len(list_) == 0:\n        return 0\n\n    return sum_recursion(list_[1:]) + list_[0]\n\n\n# Your code here\n\ndef sum_recursion(list_):\n    \"\"\"\n    list_ is a list of integers.\n    \"\"\"\n\n    if len(list_) == 0:\n        return 0\n\n    return sum_recursion(list_[1:]) + list_[0]\n\nprint(sum_recursion([1, 2, 3, 4, 5, 6]))",
    "# https://oj.leetcode.com/problems/sum-of-list-without-duplicates/\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def sumOfList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        else:\n            ret = self.sumOfList(head.next) + head.val\n            head.next = None\n            return ret\n\n\nif __name__ == \"__main__\":\n    a = ListNode(1)\n    b = ListNode(1)\n    c = ListNode(2)\n    a.next = b\n    b.next = c\n    a = Solution().sumOfList(a)\n    print a.val\n    print a.next.val\n    print a.next.next.val\n    print Solution().sumOfList(a)\n    print Solution().sumOfList(a.next)\n    print Solution().sumOfList(a.next.next)\n    print Solution().sumOfList(a.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next.next.next.next.next)\n    print Solution().sumOfList(a.next.next.next.next.next.next.next.next.next.next)\n    print Solution().sumOfList",
    "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return \"ListNode(%d)\" % self.val\n\nclass Solution:\n    # @return a ListNode\n    def addTwoNumbers(self, l1, l2):\n        if l1 is None:\n            return l2\n        if l2 is None:\n            return l1\n        if l1.val == 0 or l2.val == 0:\n            return None\n        if l1.val > l2.val:\n            l1, l2 = l2, l1\n        n = 0\n        res = ListNode(0)\n        cur = res\n        while l1 is not None or l2 is not None:\n            cur.next = ListNode(n)\n            if l1 is not None:\n                cur = cur.next\n                cur.val += l1.val\n                l1 = l1.next\n            if l2 is not None:\n                cur = cur.next\n                cur.val += l2.val\n                l2 = l2.next\n            n = n + 1\n        return res.next\n\nif __name__ == '__main__':\n    l1 = ListNode(1)\n    l1.next = ListNode(0)\n    l2 = ListNode(1)\n    l2.next = ListNode(1)\n    l3 = ListNode(2)\n    l3.next = ListNode(2)\n    l4 = ListNode(3)\n    l4.next = ListNode(3)\n    l5 = ListNode(4)\n    l5.next = ListNode(4)\n    l6 = ListNode(5)\n    l6.next = ListNode(5)\n    l7 = ListNode(6)\n    l7.next = ListNode(6)\n    l8 = ListNode(7)\n    l8.next = ListNode(7)\n    l9 = ListNode(8)\n    l9.next = ListNode(8)\n    l10 = ListNode(9)\n    l10.next = ListNode",
    "class RecursionListSum:\n    def __init__(self):\n        self.result = 0\n        self.sum = 0\n\n    def add(self, n):\n        if n == 0:\n            self.result += self.sum\n            return\n        self.sum += n\n        self.add(n - 1)\n        self.sum -= n\n        self.add(n - 1)\n\n    def sum(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    rec = RecursionListSum()\n    rec.add(3)\n    rec.add(4)\n    rec.add(5)\n    rec.add(6)\n    rec.add(7)\n    rec.add(8)\n    rec.add(9)\n    rec.add(10)\n    rec.add(11)\n    rec.add(12)\n    rec.add(13)\n    rec.add(14)\n    rec.add(15)\n    print(rec.sum())",
    "class RecursionListSum(object):\n    \"\"\"\n    class RecursionListSum:\n        def __init__(self, l):\n            self.l = l\n\n        def recursionListSum(self):\n            if self.l:\n                return self.l[0] + self.recursionListSum(self.l[1:])\n\n    >>> rls = RecursionListSum([1, 2, 3])\n    >>> rls.recursionListSum()\n    6\n    \"\"\"\n    def recursionListSum(self, l):\n        if l:\n            return l[0] + self.recursionListSum(l[1:])\n\n    def test(self):\n        self.recursionListSum([1, 2, 3, 4, 5, 6])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import sys\n\ndef recursion_sum(l):\n    if len(l) == 0:\n        return 0\n    return l[0] + recursion_sum(l[1:])\n\ndef test():\n    assert(recursion_sum([]) == 0)\n    assert(recursion_sum([1,2,3]) == 6)\n    assert(recursion_sum([4,2,1]) == 6)\n    assert(recursion_sum([3,2,1]) == 6)\n    assert(recursion_sum([1,2,3,4]) == 12)\n    assert(recursion_sum([-1,-2,-3,-4]) == 12)\n    assert(recursion_sum([-1,-2,-3,-4,1]) == 12)\n    assert(recursion_sum([-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1,-2,-3,-4,1,-1",
    "import unittest\n\nclass TestRecursionListSum(unittest.TestCase):\n    def test_recursion_list_sum(self):\n        self.assertEqual(recursion_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]), 60)\n        self.assertEqual(recursion_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 61)\n        self.assertEqual(recursion_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 62)\n\n    def test_recursion_list_sum_no_recursion(self):\n        self.assertEqual(recursion_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 63)",
    "def sum_recursion(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion(nums[1:]) + nums[0]\n\ndef sum_recursion2(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion2(nums[1:]) + nums[0] + nums[0]\n\ndef sum_recursion3(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion3(nums[1:]) + nums[0] + nums[0] + nums[0]\n\ndef sum_recursion4(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion4(nums[1:]) + nums[0] + nums[0] + nums[0] + nums[0]\n\ndef sum_recursion5(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion5(nums[1:]) + nums[0] + nums[0] + nums[0] + nums[0] + nums[0]\n\ndef sum_recursion6(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return sum_recursion6(nums[1:]) + nums[0] + nums[0] + nums[0] + nums[0] + nums[0] + nums[0]\n\ndef sum_recursion7(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if l1 == None:\n            return l2\n        if l2 == None:\n            return l1\n        if l1.val == 0 and l2.val == 0:\n            return None\n        if l1.val == 0:\n            return self.addTwoNumbers(l1.next, l2)\n        if l2.val == 0:\n            return self.addTwoNumbers(l1, l2.next)\n        \n        carry = 0\n        res = ListNode(0)\n        curr = res\n        while l1!= None or l2!= None or carry > 0:\n            val = l1.val + l2.val + carry\n            curr.next = ListNode(val % 10)\n            l1 = l1.next\n            l2 = l2.next\n            carry = val / 10\n            curr = curr.next\n        return res.next",
    "def sum_recursive(self, start, end):\n    if start >= end:\n        return 0\n    return sum_recursive(self, start + 1, end) + self[start]\n\ndef sum_iterative(self, start, end):\n    total = 0\n    for i in range(start, end):\n        total += self[i]\n    return total\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    print sum_recursive(a, 0, len(a) - 1)\n    print sum_iterative(a, 0, len(a) - 1)",
    "def recursion_list_sum(lst):\n    if not lst:\n        return 0\n    return sum(recursion_list_sum(lst[1:]) + lst[0])\n\ndef test_recursion_list_sum():\n    assert(recursion_list_sum([1,2,3,4,5,6]) == 15)\n    assert(recursion_list_sum([1,2,3,4,5,6,7]) == 30)\n    assert(recursion_list_sum([1,2,3,4,5,6,7,8]) == 42)\n    assert(recursion_list_sum([1,2,3,4,5,6,7,8,9]) == 57)\n    assert(recursion_list_sum([1,2,3,4,5,6,7,8,9,10]) == 75)\n    assert(recursion_list_sum([1,2,3,4,5,6,7,8,9,10,11]) == 91)\n\nif __name__ == '__main__':\n    test_recursion_list_sum()",
    "def sum_recursion_list(lst):\n    \"\"\"\n    :type lst: ListNode\n    :rtype: int\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return sum_recursion_list(lst.next) + lst.val\n\n\ndef test_sum_recursion_list():\n    assert sum_recursion_list([1,2,3]) == 6\n    assert sum_recursion_list([1]) == 1\n    assert sum_recursion_list([1,2]) == 3\n    assert sum_recursion_list([1,2,3,4]) == 10\n    assert sum_recursion_list([]) == 0\n\n\nif __name__ == '__main__':\n    test_sum_recursion_list()",
    "class Solution(object):\n    def __init__(self):\n        self.ans = 0\n        self.cache = {}\n\n    def sum(self, nums):\n        if nums is None:\n            return 0\n        if nums in self.cache:\n            return self.cache[nums]\n        self.cache[nums] = self.sum(nums[1:]) + nums[0]\n        return self.cache[nums]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum([1, 2, 3, 4]))\n    print(sol.sum([1, 2, 3, 4, 5, 6]))\n    print(sol.sum([1, 2, 3, 4, 5, 6, 7]))\n    print(sol.sum([1, 2, 3, 4, 5, 6, 7, 8]))",
    "from __future__ import print_function\nfrom collections import defaultdict\n\nclass Solution(object):\n    def __init__(self):\n        self.dic = defaultdict(int)\n\n    def recursion(self, list, start):\n        if len(list) == 0:\n            return 0\n        elif len(list) == 1:\n            return list[0]\n        else:\n            return self.recursion(list[1:], start+list[0])\n\n    def sumRecursion(self, list):\n        return self.recursion(list, 0)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.sumRecursion([1,2,3]))\n    print(solution.sumRecursion([1,2,3,4,5]))",
    "import unittest\n\ndef sum_recursion_list(self, l):\n    \"\"\"\n    :type l: ListNode\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n    sum, cur_sum = 0, 0\n    while l:\n        cur_sum += l.val\n        sum += cur_sum\n        l = l.next\n    return sum\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(sum_recursion_list(self, [1,2,3]), 6)\n\nif __name__ == '__main__':\n    unittest.main()",
    "def recursion_list_sum(head):\n    \"\"\"\n    recursion list sum\n\n    :param head: the head node of the recursion list\n    :return: the sum of all numbers in the recursion list\n    \"\"\"\n    if head is None:\n        return 0\n\n    return recursion_list_sum(head.next) + head.value + recursion_list_sum(head.next.next)\n\nif __name__ == '__main__':\n    l = [1, 2, 3]\n    print(recursion_list_sum(l))",
    "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        nodes = [head]\n        sum = 0\n        while nodes:\n            cur = nodes.pop(0)\n            sum += cur.val\n            if cur.next:\n                nodes.append(cur.next)\n            else:\n                cur.next = ListNode(sum)\n                sum = 0\n                nodes.append(cur.next)\n        return nodes[0].next\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next",
    "# Definition for a recursive list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param x, an integer\n    # @return a ListNode\n    def getSum(self, head, x):\n        if head is None:\n            return None\n        if head.val == x:\n            return head\n        return self.getSum(head.next, x)\n\n    def getSumRecur(self, head):\n        if head is None:\n            return None\n        if head.next is None:\n            return head.val\n        return self.getSumRecur(head.next) + self.getSumRecur(head.next.next)",
    "# Definition for a recursive list.\nclass ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def getSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        sum = 0\n        p = head\n        while p:\n            sum += p.next.val\n            p = p.next.next\n        return sum + self.getSum(head.next)\n\n\nif __name__ == '__main__':\n    assert Solution().getSum(ListNode(1)) == 1\n    assert Solution().getSum(ListNode(1, ListNode(2))) == 3",
    "import os\nimport sys\nimport timeit\n\ndef sum_recursion(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + n\n\ndef sum_recursion_2(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2)\n\ndef sum_recursion_3(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum_recursion(n-3)\n\ndef sum_recursion_4(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum_recursion(n-3) + sum_recursion(n-4)\n\ndef sum_recursion_5(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum_recursion(n-3) + sum_recursion(n-4) + sum_recursion(n-5)\n\ndef sum_recursion_6(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum_recursion(n-3) + sum_recursion(n-4) + sum_recursion(n-5) + sum_recursion(n-6)\n\ndef sum_recursion_7(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum_recursion(n-3) + sum_recursion(n-4) + sum_recursion(n-5) + sum_recursion(n-6) + sum_recursion(n-7)\n\ndef sum_recursion_8(n):\n    if n == 1:\n        return 1\n    return sum_recursion(n-1) + sum_recursion(n-2) + sum",
    "class Solution(object):\n    def recursionListSum(self, listNode):\n        \"\"\"\n        :type listNode: ListNode\n        :rtype: int\n        \"\"\"\n        if not listNode:\n            return 0\n        return self.recursionListSum(listNode.next) + listNode.val\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    #print(sol.recursionListSum(ListNode(1, ListNode(2))))\n    print(sol.recursionListSum(ListNode(1)))",
    "class Solution:\n    # @param nums: A list of integers\n    # @return: A integer\n    def recursive_sum(self, nums, start, end):\n        if start == end:\n            return nums[start]\n        return nums[start] + self.recursive_sum(nums, start + 1, end)\n    \n    # @param nums: A list of integers\n    # @return: A integer\n    def iterative_sum(self, nums):\n        return sum(nums)\n    \n    # @param nums: A list of integers\n    # @return: A integer\n    def recursive_sum2(self, nums, start, end):\n        if start == end:\n            return nums[start]\n        return nums[start] + self.recursive_sum2(nums, start + 1, end)\n    \n    # @param nums: A list of integers\n    # @return: A integer\n    def iterative_sum2(self, nums):\n        return sum(nums)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.recursive_sum([1,2,3], 0, 3)\n    print solution.iterative_sum([1,2,3], 0, 3)\n    print solution.recursive_sum2([1,2,3], 0, 3)\n    print solution.iterative_sum2([1,2,3], 0, 3)",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef sum(head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: int\n    \"\"\"\n    if not head:\n        return 0\n\n    # sum up the two lists\n    sum_list = []\n    while head:\n        sum_list.append(head.val)\n        head = head.next\n\n    # reverse the list\n    sum_list.reverse()\n    sum_list.append(0)\n\n    # sum up the lists\n    sum = 0\n    for i in sum_list:\n        sum += i\n\n    return sum",
    "class Solution:\n    # @param l: A list of integers\n    # @return: A integer\n    def recursionListSum(self, l):\n        if not l:\n            return 0\n        else:\n            return self.recursionListSum(l[:-1]) + l[-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.recursionListSum([1,2,3,4,5])",
    "from common.list_util import list_to_set\n\ndef list_sum(L):\n    \"\"\"\n    :type L: ListNode\n    :rtype: int\n    \"\"\"\n    if not L: return 0\n    \n    sum = L.val\n    Lnext = L.next\n    if Lnext:\n        sum += list_sum(Lnext)\n    return sum\n\n\ndef test():\n    l = [1,2,3,4,5,6,7]\n    assert list_sum(l) == 30\n    \n    l = [1,2,3,4,5,6,7,8,9]\n    assert list_sum(l) == 55\n\n\nif __name__ == '__main__':\n    test()",
    "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        result = []\n        res_head = ListNode(0)\n        res_head.next = l1\n        res_head.next = l2\n        current = res_head\n        carry = 0\n\n        while current:\n            temp = current.next\n            carry = carry + current.val\n            current.val = carry % 10\n            carry = carry / 10\n            current.next = ListNode(0)\n            current = current.next\n            current.val = carry\n            current.next = temp\n            if current == res_head:\n                res_head = current\n\n        if carry:\n            res_head.next = ListNode(1)\n            res_head.next.val = carry\n\n        return res_head.next\n\n\nif __name__ == '__main__':\n    s = Solution()\n    l1 = ListNode(2)\n    l1.next = ListNode(4)\n    l1.next.next = ListNode(3)\n\n    l2 = ListNode(5)\n    l2.next = ListNode(6)\n    l2.next.next = ListNode(4)\n\n    l1 = s.addTwoNumbers(l1, l2)\n    while l1:\n        print l1.val\n        l1 = l1.next",
    "class Solution:\n    # @param lis, a list of integers\n    # @return an integer\n    def sum(self, lis):\n        if len(lis) == 0:\n            return 0\n        if len(lis) == 1:\n            return lis[0]\n        return self.sum(lis[1:]) + lis[0]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum([1, 3, 2]))",
    "# Definition for a recursive list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def recursiveSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursiveSum(head.next) + self.recursiveSum(head.next.next)\n\n    def recursiveSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursiveSum(head.next) + self.recursiveSum(head.next.next)\n\n    def recursiveSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursiveSum(head.next) + self.recursiveSum(head.next.next)\n\n    def recursiveSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursiveSum(head.next) + self.recursiveSum(head.next.next)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.recursiveSum(ListNode(1))\n    print s.recursiveSum(ListNode(2))\n    print s.recursiveSum(ListNode(3))\n    print s.recursiveSum(ListNode(4))\n    print s.recursiveSum(ListNode(5))\n    print s.recursiveSum(ListNode(6))\n    print s.recursiveSum(ListNode(7))\n    print s.recursiveSum(ListNode(8))\n    print s.recursiveSum(ListNode",
    "class RecursiveListSum(object):\n    def __init__(self):\n        self.recursive_list_sum = []\n    \n    def recursive_list_sum(self, list):\n        if list is None or len(list) == 0:\n            return 0\n        if len(list) == 1:\n            return list[0]\n        else:\n            return self.recursive_list_sum(list[1:]) + list[0]\n    \n    def recursive_list_sum_2(self, list):\n        if list is None or len(list) == 0:\n            return 0\n        if len(list) == 1:\n            return list[0]\n        else:\n            return self.recursive_list_sum_2(list[1:]) + list[0]\n    \n    def recursive_list_sum_3(self, list):\n        if list is None or len(list) == 0:\n            return 0\n        if len(list) == 1:\n            return list[0]\n        else:\n            return self.recursive_list_sum_3(list[1:]) + list[0]\n    \n    def recursive_list_sum_4(self, list):\n        if list is None or len(list) == 0:\n            return 0\n        if len(list) == 1:\n            return list[0]\n        else:\n            return self.recursive_list_sum_4(list[1:]) + list[0]\n\ndef test():\n    recursive_list_sum = RecursiveListSum()\n    assert recursive_list_sum.recursive_list_sum(None) == 0\n    assert recursive_list_sum.recursive_list_sum([1]) == 1\n    assert recursive_list_sum.recursive_list_sum([1, 2]) == 3\n    assert recursive_list_sum.recursive_list_sum([1, 2, 3]) == 6\n    assert recursive_list_sum.recursive_list_sum([1, 2, 3, 4, 5]) == 15\n    assert recursive_list_sum.recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9",
    "def sum_recursion(list_sum):\n    \"\"\"\n    :type list_sum: List[int]\n    :rtype: int\n    \"\"\"\n    if not list_sum:\n        return 0\n    if len(list_sum) == 1:\n        return list_sum[0]\n    return sum_recursion(list_sum[1:]) + list_sum[0]\n\nclass Solution(object):\n    def sumOfRecursion(self, list_sum):\n        \"\"\"\n        :type list_sum: List[int]\n        :rtype: int\n        \"\"\"\n        if not list_sum:\n            return 0\n        return sum_recursion(list_sum)",
    "# Definition for a recursive list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution:\n#     def getSum(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: int\n#         \"\"\"\n#         if not head:\n#             return 0\n#         if not head.next:\n#             return head.val\n#         return head.next.val + self.getSum(head.next.next)\n\nclass Solution:\n    def getSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return head.val + self.getSum(head.next)",
    "# Definition for a recursive list sum.\nclass ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\ndef recursive_sum(head):\n    if head is None:\n        return 0\n    if head.next is None:\n        return head.val\n    else:\n        return recursive_sum(head.next) + recursive_sum(head.next.next)\n\ndef recursive_sum_test():\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, None))))\n    head.next.next.next = head\n    assert recursive_sum(head) == 9\n\ndef main():\n    recursive_sum_test()\n    return 0\n\nif __name__ == '__main__':\n    main()",
    "def sum_recursion(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if not list:\n        return 0\n\n    return sum_recursion(list[1:]) + list[0]\n\n# Your code should pass these tests:\n# sum_recursion([1,2,3]) == 6\n# sum_recursion([1,2,3,4]) == 12\n# sum_recursion([1,2,3,4,5]) == 15",
    "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def __init__(self):\n        self.res = []\n        self.total = 0\n\n    def recursive(self, head):\n        if head is None:\n            return\n        self.recursive(head.next)\n        self.res.append(head.val)\n        self.total += head.val\n        return\n\n    def sum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        self.recursive(head)\n        return self.total\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next",
    "def sum(l):\n    if not l:\n        return 0\n    return sum(l[1:]) + l[0]\n\nif __name__ == '__main__':\n    l = [1,2,3,4]\n    print(sum(l))",
    "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        sum = 0\n        while head:\n            sum += head.val\n            head = head.next\n        return sum\n\nif __name__ == \"__main__\":\n    assert Solution().sumNumbers(None) == 0\n    assert Solution().sumNumbers(ListNode(1)) == 1\n    assert Solution().sumNumbers(ListNode(1)) == 1\n    assert Solution().sumNumbers(ListNode(2)) == 3\n    assert Solution().sumNumbers(ListNode(3)) == 6\n    assert Solution().sumNumbers(ListNode(1, ListNode(2, ListNode(3)))) == 6\n    assert Solution().sumNumbers(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))) == 15\n    assert Solution().sumNumbers(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6))))))) == 30\n    assert Solution().sumNumbers(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7)))))))) == 42\n    assert Solution().sumNumbers(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8))))))))\n            ) == 57",
    "# https://www.hackerrank.com/challenges/recursion-sum/problem\n\ndef sumRecursion(l):\n    \"\"\"\n    sumRecursion(l) -> List of integers\n    \n    For the given list l, sumRecursion computes the sum of all numbers in l\n    using recursive calls.\n    \"\"\"\n    if l is None or l == []:\n        return 0\n    else:\n        return l[0] + sumRecursion(l[1:])\n\nif __name__ == \"__main__\":\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    print(sumRecursion(l))",
    "def sum_recursion(lst):\n    \"\"\"\n    lst: a list of integers\n    return: the sum of all elements in the list\n    \"\"\"\n    if not lst:\n        return 0\n    if lst[0] > 0:\n        return sum_recursion(lst[1:]) + lst[0]\n    else:\n        return sum_recursion(lst[1:])\n\nif __name__ == \"__main__\":\n    lst = [2,3,4,5]\n    print sum_recursion(lst)",
    "def sum_recursion_list(lst):\n    if not lst:\n        return 0\n    if not lst[-1]:\n        return sum_recursion_list(lst[:-1])\n    return sum_recursion_list(lst[:-1]) + lst[-1]\n\nif __name__ == \"__main__\":\n    print sum_recursion_list([1, 2, 3, 4, 5, 6, 7])",
    "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        res = ListNode(0)\n        curr = res\n        while head:\n            curr.next = ListNode(head.val)\n            head = head.next\n            curr = curr.next\n\n        # reverse\n        curr = res\n        while curr.next:\n            curr.next.val += curr.next.next.val\n            curr = curr.next.next\n        return res.next\n\n\ndef main():\n    s = Solution()\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n6 = ListNode(6)\n    n7 = ListNode(7)\n    n8 = ListNode(8)\n    n9 = ListNode(9)\n    n10 = ListNode(10)\n    n11 = ListNode(11)\n    n12 = ListNode(12)\n    n13 = ListNode(13)\n    n14 = ListNode(14)\n    n15 = ListNode(15)\n    n16 = ListNode(16)\n    n17 = ListNode(17)\n    n18 = ListNode(18)\n    n19 = ListNode(19)\n    n20 = ListNode(20)\n    n21 = ListNode(21)\n    n22 = ListNode(22)\n    n23 = ListNode(23)\n    n24 = ListNode(24)\n    n25 = ListNode(25)\n    n26 = ListNode(26)\n    n27 = ListNode(27)\n    n28 = ListNode(28)\n    n29 = ListNode(29)\n    n30 = ListNode(30)\n    n31 = ListNode(31)\n    n32 = ListNode(",
    "# Definition for a recursive list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def recursiveSum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        return self.recursiveSum(head.next) + self.recursiveSum(head.next.next)",
    "from common.list_node import ListNode\n\ndef sum_recursion_list(self):\n    \"\"\"\n    :type self: ListNode\n    :rtype: int\n    \"\"\"\n    if self is None or self.next is None:\n        return 0\n    return sum_recursion_list(self.next) + self.val\n\n\ndef sum_recursion_list_iter(self):\n    \"\"\"\n    :type self: ListNode\n    :rtype: int\n    \"\"\"\n    if self is None or self.next is None:\n        return 0\n    return sum_recursion_list_iter(self.next) + self.val\n\n\ndef sum_recursion_list_iter_with_head(self):\n    \"\"\"\n    :type self: ListNode\n    :rtype: int\n    \"\"\"\n    if self is None or self.next is None:\n        return 0\n    return sum_recursion_list_iter_with_head(self.next) + self.val\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print sum_recursion_list(head)\n    print sum_recursion_list_iter(head)\n    print sum_recursion_list_iter_with_head(head)",
    "def recursion_list_sum(n, m, a, b):\n    if n == 0:\n        return m\n    if n == 1:\n        return a + b\n    return recursion_list_sum(n-1, a+b, a, b)\n\n# print(recursion_list_sum(3, 1, 1, 1))\nprint(recursion_list_sum(3, 2, 1, 2))",
    "class Solution:\n    def sum_recur(self, list: List[int], start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        return sum(self.sum_recur(list, start, end - 1) + list[start]) + self.sum_recur(list, start + 1, end)\n\n    def sum_iter(self, list: List[int], start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        return sum(list[start] for start in range(start, end + 1)) + self.sum_iter(list, start + 1, end)\n\n    def sum_recur_2(self, list: List[int], start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        return sum(list[start] for start in range(start, end + 1)) + self.sum_recur_2(list, start + 1, end)\n\n\n    def sum_iter_2(self, list: List[int], start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        return sum(list[start] for start in range(start, end + 1)) + self.sum_iter_2(list, start + 1, end)",
    "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def sumNumbers(self, head):\n        if not head or not head.next:\n            return 0\n        dummy = ListNode(0)\n        dummy.next = head\n        sum = 0\n        while dummy.next:\n            curr = dummy.next\n            dummy.next = curr.next\n            sum += curr.val\n            curr.next = dummy\n        return sum\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print Solution().sumNumbers(head)",
    "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def sum(self, head):\n        if not head: return 0\n        if not head.next: return head.val\n        return self.sum(head.next) + head.val\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    print(Solution().sum(head))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def sumNumbers(self, head):\n        if not head: return 0\n        \n        if not head.next:\n            return head.val\n        \n        return self.sumNumbers(head.next) + self.sumNumbers(head.next.next)",
    "class ListSumRecursion(object):\n    def __init__(self, lst):\n        \"\"\"\n        :type lst: List[int]\n        \"\"\"\n        self.lst = lst\n\n    def sum(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if not self.lst:\n            return 0\n\n        return self.lst[0] + self.sum(self.lst[1:])\n\nclass Solution(object):\n    def sumOfRecursiveSubList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n\n        return self.sumOfRecursiveSubList(nums[1:]) + nums[0]",
    "def list_sum(l):\n    \"\"\"\n    Recursive function of list sum.\n\n    :type l: List\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n    return l[0] + list_sum(l[1:])\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6]\n    print(list_sum(l))",
    "def list_sum(list_sum):\n    if not list_sum:\n        return 0\n    else:\n        return list_sum[-1] + list_sum[-2]\n\ndef test():\n    assert list_sum([]) == 0\n    assert list_sum([1]) == 1\n    assert list_sum([1,2,3]) == 6\n    assert list_sum([1,2,3,4]) == 10\n\nif __name__ == \"__main__\":\n    test()",
    "class RecursionList:\n    def __init__(self, list):\n        self.list = list\n\n    def sum(self):\n        if len(self.list) == 1:\n            return self.list[0]\n\n        return sum(self.list[0] + self.sum(self.list[1:]) for i in range(len(self.list) - 1))\n\n\nif __name__ == '__main__':\n    list = [2, 3, 5, 7, 11, 13]\n    rl = RecursionList(list)\n    print(rl.sum())",
    "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def sum(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        ret, cur = 0, head\n        while cur:\n            ret += cur.val\n            cur = cur.next\n        return ret\n\n\"\"\"\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\"\"\"",
    "from common.list import ListNode\n\nclass Solution:\n    def mySums(self, l):\n        \"\"\"\n        :type l: ListNode\n        :rtype: int\n        \"\"\"\n        if not l:\n            return 0\n        ans = 0\n        curr = l\n        while curr:\n            ans += curr.val\n            curr = curr.next\n        return ans",
    "def recursion_sum(nums):\n    if not nums:\n        return 0\n    return recursion_sum(nums[1:]) + nums[0]\n\nif __name__ == '__main__':\n    nums = [1,2,3]\n    print(recursion_sum(nums))",
    "import unittest\n\n\nclass RecursionListSumTest(unittest.TestCase):\n\n    def test_recursion_list_sum(self):\n        \"\"\"\n        Given a list of integers, return the sum of the numbers in the list.\n        \"\"\"\n        self.assertEqual(recursion_list_sum([1, 2, 3, 4]), 9)\n        self.assertEqual(recursion_list_sum([-1, 0, 1, 2, -3, -4, -5]), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}