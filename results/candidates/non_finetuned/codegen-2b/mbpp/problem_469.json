{
  "problem": {
    "task_id": "MBPP/480",
    "prompt": "Write a python function to find the maximum occurring character in a given string.",
    "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "test_list": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ],
    "challenge_test_list": [],
    "problem_id": 469
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_occurance(string):\n    max_occurance = 0\n    for character in string:\n        if character in string:\n            max_occurance = max(max_occurance, string.count(character))\n    return max_occurance\n\nprint(max_occurance('aabcccda'))",
    "def max_occurring_char(str):\n    count = 0\n    max = 0\n    for ch in str:\n        if ch == max:\n            count += 1\n        else:\n            if count > max:\n                max = count\n            count = 0\n    return max\n\nprint(max_occurring_char(\"aabbcc\"))\nprint(max_occurring_char(\"aaabbcc\"))\nprint(max_occurring_char(\"aaabbcc\"))\nprint(max_occurring_char(\"aaabbcc\"))\nprint(max_occurring_char(\"aaabbcc\"))",
    "def findMax(string):\n    maxChar = 0\n    for char in string:\n        if char > maxChar:\n            maxChar = char\n    return maxChar\n\nprint findMax(\"hello world\")",
    "def max_occurrences(str):\n    max_occurrences = 0\n    max_occurrences_pos = 0\n    for i in range(0, len(str)):\n        if str[i] not in str:\n            max_occurrences = max(max_occurrences, 1)\n            max_occurrences_pos = i\n    return max_occurrences, max_occurrences_pos\n\nif __name__ == '__main__':\n    str = \"aabbccdd\"\n    print max_occurrences(str)\n\n    str = \"abccddd\"\n    print max_occurrences(str)\n\n    str = \"abbccdd\"\n    print max_occurrences(str)\n\n    str = \"aabbccdd\"\n    print max_occurrences(str)",
    "def findMax(string):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n    :param string: string to be searched\n    :return: maximum character found\n    \"\"\"\n    # TODO: implement a solution that uses a built-in function max()\n\n    # TODO: add a comment about why we are using a loop instead of a list comprehension\n    # TODO: add a comment about why we are using a string instead of a list\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why we are using a list instead of a list comprehension\n    # TODO: add a comment about why",
    "def findMax(string):\n    '''\n    Find the maximum occurring character in a string.\n    '''\n    count = 0\n    for c in string:\n        if c > count:\n            count = c\n    return count\n\nif __name__ == '__main__':\n    string = \"abcabcabc\"\n    print findMax(string)",
    "def max_char(string):\n    \"\"\"\n    :param string: String to be searched.\n    :return: Maximum occurring character.\n    \"\"\"\n    max_char_count = 0\n    max_char = 0\n    for c in string:\n        if c in string:\n            if c in string.upper() or c in string.lower():\n                if c > max_char_count:\n                    max_char_count = c\n                    max_char = c\n                elif c == max_char:\n                    max_char_count += 1\n    return max_char_count",
    "def max_occuring_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    max = 0\n    for c in s:\n        if c > max:\n            max = c\n    return max\n\n\nif __name__ == '__main__':\n    assert max_occuring_char('abcabcabcabcabc') == 3\n    assert max_occuring_char('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "# The function should return a tuple of (string, max_char)\n# If the string is empty, return ('', 0)\n# If the string is only one character, return ('', 1)\n# If the string is only two characters, return ('', 2)\n# If the string is three characters, return ('', 3)\n# If the string is greater than three characters, return ('', 4)\n\ndef find_max_char(string):\n    if len(string) == 0:\n        return ('', 0)\n\n    if len(string) == 1:\n        return (string, 1)\n\n    if len(string) == 2:\n        return (string, 2)\n\n    if len(string) == 3:\n        return (string, 3)\n\n    if len(string) > 3:\n        return (string, 4)\n    else:\n        return (string, 1)\n\n# Test Cases\nprint(find_max_char('a'))\nprint(find_max_char('aa'))\nprint(find_max_char('aaa'))\nprint(find_max_char('aaaaa'))\nprint(find_max_char('aaabbb'))\nprint(find_max_char('aaabbbbb'))\nprint(find_max_char('aaabbbbbbbb'))\nprint(find_max_char('aaabbbbbbbbb'))\nprint(find_max_char('aaabbbbbbbbbb'))\nprint(find_max_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "def maxOccurs(s):\n    max = 0\n    for c in s:\n        if c > max:\n            max = c\n    return max\n\nif __name__ == '__main__':\n    s = \"abcbabababcbabababababbbababababababababababbbabababababababababababbbababababababbbababababababababababbbababababababbbabababababababababababbbababababababbbabababababababababababbbababababababbbababababababababababababababababbbababababababababababababbbababababababbbabababababababababababbbababababababbbababababababababababababababababbbababababababababababababbbababababababbbababababababababababababababababababbbababababababababababababbbababababababbbababababababababababababababababbbababababababababababababbbababababababbbabababababababababababababababababbbabababababababababababababababababbbababababababbbababababababababababababababbbabababababababababababababababababbbababababababbbabababababababababababababababababbbababababababababababababababababababbbababababababbbabababababababababababababababababbbababababababbbababababababababababababbbababababababbbababababababababababababababababbbababab",
    "def get_max(string):\n    #Write your code here\n    max_char = \"\"\n    for char in string:\n        if char > max_char:\n            max_char = char\n    return max_char\n\nif __name__ == \"__main__\":\n    string = \"aabccc\"\n    print(get_max(string))",
    "def max_occurrence(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = {}\n    for c in s:\n        if c not in count:\n            count[c] = 0\n        count[c] += 1\n    return max(count.values())\n\nif __name__ == '__main__':\n    s = \"aabbccdd\"\n    print(max_occurrence(s))\n    s = \"aabbcccc\"\n    print(max_occurrence(s))\n    s = \"abcde\"\n    print(max_occurrence(s))\n    s = \"abcdd\"\n    print(max_occurrence(s))\n    s = \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
    "import sys\n\ndef find_max(s):\n    # Complete this function\n    if len(s) == 0:\n        return 0\n    else:\n        return max(s)\n\n\n\n#print find_max(\"aabcccccaaa\")\nprint find_max(\"abcabd\")",
    "def max_occurrence(s):\n    \"\"\"\n    >>> max_occurrence(\"Hello world\")\n    'h'\n    \"\"\"\n    max_occur = 0\n    for c in s:\n        if c in s:\n            if c in s:\n                if c > max_occur:\n                    max_occur = c\n    return max_occur\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def find_max_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    max_char = 0\n    for i in string:\n        if i > max_char:\n            max_char = i\n    return max_char\n\nif __name__ == '__main__':\n    string = 'abcabcabc'\n    print(find_max_char(string))",
    "# Complete the function below.\ndef findMax(s):\n    max = 0\n    for i in range(0,len(s)):\n        if s[i] > max:\n            max = s[i]\n    return max\n\nif __name__ == \"__main__\":\n    s = \"A\"\n    print findMax(s)\n    s = \"AB\"\n    print findMax(s)\n    s = \"ABC\"\n    print findMax(s)\n    s = \"ABCD\"\n    print findMax(s)\n    s = \"ABCDE\"\n    print findMax(s)\n    s = \"ABCDEF\"\n    print findMax(s)\n    s = \"ABCDEFG\"\n    print findMax(s)\n    s = \"ABCDEFGH\"\n    print findMax(s)\n    s = \"ABCDEFGHI\"\n    print findMax(s)\n    s = \"ABCDEFGHIJ\"\n    print findMax(s)\n    s = \"ABCDEFGHIJK\"\n    print findMax(s)",
    "def max_occurring_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return max(ord(c) for c in s)\n\n\n# Your MaxOccurringChar solution here.\nprint max_occurring_char('abcabc')\nprint max_occurring_char('aaabbb')\nprint max_occurring_char('aabbb')",
    "def findMax(s):\n    return max(map(ord, s))\n\ndef main():\n    s = \"aabbccddeeff\"\n    print findMax(s)\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max(s):\n    \"\"\"\n    Write a function to find the maximum occurring character in a given string.\n\n    Example:\n    >>> find_max('aabbccdd')\n    'c'\n    >>> find_max('cbaab')\n    'c'\n    >>> find_max('aabbccdd')\n    'c'\n    >>> find_max('aabbccdd')\n    'c'\n    \"\"\"\n    max_char = 0\n    for c in s:\n        if c > max_char:\n            max_char = c\n    return max_char\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_max('aabbccdd') == 'c', \"Find max in string\"\n    assert find_max('cbaab') == 'c', \"Find max in string\"\n    assert find_max('aabbccdd') == 'c', \"Find max in string\"\n    assert find_max('aabbccdd') == 'c', \"Find max in string\"",
    "# This is the function you need to implement.\n# Input: A string\n# Output: The maximum occurring character\ndef findMax(s):\n    # You can assume that s is a string.\n    max_char = -1\n    for i in s:\n        if i > max_char:\n            max_char = i\n    return max_char\n\n# Test cases\ntest_str1 = \"Hello, World!\"\ntest_str2 = \"Hello World!\"\ntest_str3 = \"Hello, World\"\ntest_str4 = \"Hello, World!\"\ntest_str5 = \"Hello, World!\"\ntest_str6 = \"Hello, World!\"\n\n# The expected result of your function\nexpected_result = \"H\"\n\n# Test your function\nprint(findMax(test_str1))\nprint(findMax(test_str2))\nprint(findMax(test_str3))\nprint(findMax(test_str4))\nprint(findMax(test_str5))\nprint(findMax(test_str6))\n\n# If you get the expected result, print True, otherwise print False.\nprint(findMax(test_str1) == expected_result)\nprint(findMax(test_str2) == expected_result)\nprint(findMax(test_str3) == expected_result)\nprint(findMax(test_str4) == expected_result)\nprint(findMax(test_str5) == expected_result)\nprint(findMax(test_str6) == expected_result)",
    "def max_occurrences(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    max_occurrences = 0\n    for i in range(len(str)):\n        if str[i] == str[max_occurrences]:\n            max_occurrences += 1\n        else:\n            max_occurrences = 1\n    return max_occurrences\n\nprint max_occurrences(str=\"ababab\")",
    "def find_max_char(s):\n    return max(s)\n\nprint(find_max_char('abcdefghijklmnopqrstuvwxyz'))",
    "def find_max(s):\n    max_char = -1\n    for c in s:\n        if max_char < c:\n            max_char = c\n    return max_char\n\ns = \"A man, a plan, a canal: Panama\"\nprint find_max(s)",
    "def findMax(s):\n    \"\"\"\n    :param s: a string\n    :return: the maximum character in the string\n    \"\"\"\n    max = ord(s[0])\n    for i in range(len(s)):\n        if ord(s[i]) > max:\n            max = ord(s[i])\n    return max\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print findMax(s)",
    "def max_occurring_char(string):\n    max_occurring_char = 0\n    max_occurring_char_index = 0\n    for i in range(0, len(string)):\n        if string[i] == string[max_occurring_char_index]:\n            max_occurring_char = max(max_occurring_char, i)\n        else:\n            max_occurring_char_index = i\n    return max_occurring_char\n\nprint max_occurring_char(\"bacbacac\")",
    "def max_occuring_char(string):\n    max_occuring_char_list = []\n\n    for i in range(len(string)):\n        occurences = 1\n        for j in range(i):\n            if string[i] == string[j]:\n                occurences += 1\n        max_occuring_char_list.append(occurences)\n\n    return max(max_occuring_char_list)\n\nprint(max_occuring_char(\"aab\"))",
    "def maxOccur(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    occur = 0\n    maxOccur = 0\n    for c in string:\n        if c in string:\n            occur += 1\n        else:\n            occur = 1\n        if occur > maxOccur:\n            maxOccur = occur\n    return maxOccur",
    "def max_occurring_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return max(s.count(c) for c in s)\n\ns = \"abbcabbcabbabbababbbabbabbabbabbabbabbababbababbbabbabbabbabbabbabbabbabbabbababbabbabbabbabbabbabbabbababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb",
    "def find_max(str):\n    max_char = -1\n    for i in range(0, len(str)):\n        if max_char < str[i]:\n            max_char = str[i]\n    return max_char\n\n\nif __name__ == \"__main__\":\n    str = \"abcdefghijklmnopqrstuvwxyz\"\n    max_char = find_max(str)\n    print(max_char)",
    "import re\n\ndef findMax(str):\n    maxValue = 0\n    for c in str:\n        if c > maxValue:\n            maxValue = c\n    return maxValue\n\ndef findMaxWithRegex(str):\n    maxValue = 0\n    for c in str:\n        if re.search('[a-zA-Z]', c):\n            if c > maxValue:\n                maxValue = c\n    return maxValue\n\nif __name__ == '__main__':\n    str = 'Hello world, I am a python script.'\n    print findMax(str)\n    print findMaxWithRegex(str)",
    "def max_char(s):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n\n    :param s: string\n    :return: int\n    \"\"\"\n    m = -1\n    for i in range(len(s)):\n        if s[i] > m:\n            m = s[i]\n    return m\n\n\nif __name__ == '__main__':\n    s = 'abc'\n    m = max_char(s)\n    print m",
    "import string\n\ndef get_max_occurrence(string_to_check):\n    \"\"\"\n    Write a function get_max_occurrence which returns the maximum occurring character in a given string.\n    :param string_to_check: the string to be checked\n    :return: the maximum occurring character in a given string\n    \"\"\"\n    return string_to_check.max()\n\ndef main():\n    string_to_check = \"abcdefghijklmnopqrstuvwxyz\"\n    print(get_max_occurrence(string_to_check))\n\nif __name__ == \"__main__\":\n    main()",
    "def findMaxChar(str):\n    maxChar = \"\"\n    for char in str:\n        if len(char) > len(maxChar):\n            maxChar = char\n    return maxChar\n\n\n#Test Cases\nprint findMaxChar(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "# -*- coding:utf-8 -*-\n\n\"\"\"\nExample\nGiven s = \"leetcode\",\nreturn 6.\n\"\"\"\n\ndef max_occurr_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Count the number of times each character is in s.\n    return {c: s.count(c) for c in s}\n\n\nif __name__ == '__main__':\n    s = \"leetcode\"\n    print(max_occurr_char(s))",
    "def maxOccurringChar(string):\n    occurring_char = \"\"\n    max_occurring_char = 0\n    for char in string:\n        if char in occurring_char:\n            occurring_char = occurring_char + char\n            max_occurring_char = max(max_occurring_char, len(occurring_char))\n        else:\n            occurring_char = char\n    return max_occurring_char\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print maxOccurringChar(string)",
    "def max_occurring_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    res = 0\n    for i in str:\n        if i > res:\n            res = i\n    return str[res]\n\nif __name__ == '__main__':\n    str = \"abcdabcabcd\"\n    print(max_occurring_char(str))",
    "def findMax(str):\n    \"\"\"\n    str: a string of lowercase characters\n    returns: the maximum character in str\n    \"\"\"\n\n    max_char = str[0]\n\n    for i in range(len(str)):\n        if str[i] > max_char:\n            max_char = str[i]\n\n    return max_char\n\n\n\nif __name__ == '__main__':\n\n    str = \"abcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcd\"\n    print findMax(str)\n\n    str = \"abcdefg\"\n    print findMax(str)\n\n    str = \"a\"\n    print findMax(str)\n\n    str = \"aabcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcd\"\n    print findMax(str)\n\n    str = \"abcdefg\"\n    print findMax(str)\n\n    str = \"a\"\n    print findMax(str)\n\n    str = \"aabcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcd\"\n    print findMax(str)\n\n    str = \"abcdefg\"\n    print findMax(str)\n\n    str = \"a\"\n    print findMax(str)\n\n    str = \"aabcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcdefghijklmnopqrstuvwxyz\"\n    print findMax(str)\n\n    str = \"abcd\"\n    print findMax(str)\n\n    str = \"abcdefg\"\n    print findMax(str)\n\n    str = \"a\"\n    print findMax(str)\n\n    str = \"aabcdefghijklmnopqrstuvwxyz\"\n    print find",
    "def findMax(s):\n    \"\"\"\n    >>> findMax(\"Hello, world!\")\n    'h'\n    >>> findMax(\"Hello, world! Hello, world! Hello, world!\")\n    'h'\n    >>> findMax(\"Hello, world! Hello, world! Hello, world!\")\n    'w'\n    >>> findMax(\"Hello, world! Hello, world! Hello, world! Hello, world!\")\n    '!'\n    >>> findMax(\"Hello, world! Hello, world! Hello, world! Hello, world!\")\n    '!'\n    >>> findMax(\"Hello, world! Hello, world! Hello, world! Hello, world!\")\n    '!'\n    \"\"\"\n    max = s[0]\n    for i in range(len(s)):\n        if s[i] > max:\n            max = s[i]\n    return max\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def maxOccurringChar(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    char_dict = {}\n    for char in str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    max_char = max(char_dict, key=char_dict.get)\n    return max_char\n\n\n\nif __name__ == \"__main__\":\n    print(maxOccurringChar(\"Hello\"))\n    print(maxOccurringChar(\"Hello world\"))",
    "def max_occurrence(string):\n    \"\"\"\n    :param string: A string to check.\n    :return: A tuple of the maximum occurring character and its position in the string.\n    \"\"\"\n    # your code here\n    return (max(string), string.find(max(string)))\n\nif __name__ == '__main__':\n    string = \"aaabbb\"\n    print(max_occurrence(string))",
    "def find_max(s):\n    max_char = 0\n    for i in range(0, len(s)):\n        if s[i] > max_char:\n            max_char = s[i]\n    return max_char\n\nif __name__ == '__main__':\n    test_string = \"aabcccdda\"\n    print(find_max(test_string))",
    "#\n# Example:\n#\n# def get_max_char(string):\n#     if len(string) < 1:\n#         return None\n#     max_char = string[0]\n#     for i in range(1, len(string)):\n#         if string[i] > max_char:\n#             max_char = string[i]\n#     return max_char\n#\n\ndef get_max_char(string):\n    if len(string) < 1:\n        return None\n    max_char = string[0]\n    for i in range(1, len(string)):\n        if string[i] > max_char:\n            max_char = string[i]\n    return max_char\n\ndef main():\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print(get_max_char(string))\n    print(get_max_char(string))\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print(get_max_char(string))\n    print(get_max_char(string))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\ndef maxOccur(text):\n    \"\"\"\n    Write a function to find the maximum occurring character in a given string.\n\n    :param text: a string\n    :return: a string containing the maximum occurring character\n    \"\"\"\n\n    return max(map(ord, text))\n\n\ndef main():\n    \"\"\"\n    Write a main function to test your code.\n\n    :return: a string containing the maximum occurring character\n    \"\"\"\n    text = \"Hello World! How are you? I am fine.\"\n    print \"Text:\", text\n    print \"Maximum Occurrence:\", maxOccur(text)\n\n\nif __name__ == \"__main__\":\n    main()",
    "def max_occurrence(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    max_occurrence = 0\n    for c in string:\n        if c in string:\n            if c in string:\n                if string[c] > max_occurrence:\n                    max_occurrence = string[c]\n            if c > max_occurrence:\n                max_occurrence = c\n    return max_occurrence\n\nif __name__ == '__main__':\n    print max_occurrence('abcdabcabcdabcd')",
    "import sys\n\ndef max_occ(s):\n    occ = []\n    for c in s:\n        if c in occ:\n            occ[occ.index(c)] += 1\n        else:\n            occ.append(c)\n\n    return max(occ)\n\n\ndef main():\n    s = sys.argv[1]\n    print(max_occ(s))\n\nif __name__ == '__main__':\n    main()",
    "def findMax(string):\n    return max(string)\n\ndef main():\n    test = \"aabbbbbb\"\n    result = findMax(test)\n    print(result)\n\nif __name__ == '__main__':\n    main()",
    "def max_occurring_char(s):\n    max_occurring_char = 0\n    for i in range(len(s)):\n        if s[i] > max_occurring_char:\n            max_occurring_char = s[i]\n    return max_occurring_char\n\nif __name__ == \"__main__\":\n    s = \"Hello World\"\n    print(max_occurring_char(s))",
    "def max_occuring_char(string):\n    \"\"\"\n    >>> max_occuring_char('abcde')\n    'e'\n    >>> max_occuring_char('aabbcc')\n    'b'\n    >>> max_occuring_char('aabbccdd')\n    'b'\n    >>> max_occuring_char('aabbccde')\n    'c'\n    \"\"\"\n    string_dict = {}\n    for c in string:\n        if c in string_dict:\n            string_dict[c] += 1\n        else:\n            string_dict[c] = 1\n\n    max_key = max(string_dict.keys())\n    max_value = max(string_dict[max_key])\n    return max_key\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def find_max_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    max_char = -1\n    for i in range(len(str)):\n        if max_char < len(str[i]) and max_char < len(str[i]):\n            max_char = len(str[i])\n    return max_char\n\n\nif __name__ == '__main__':\n    assert find_max_char(\"ab\") == 2, \"Test failed!\"\n    assert find_max_char(\"aaabbbccccc\") == 3, \"Test failed!\"\n    assert find_max_char(\"aaabbbccccc\") == 3, \"Test failed!\"\n    assert find_max_char(\"aaabbbccccc\") == 3, \"Test failed!\"",
    "def find_max(string):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n\n    :type string: str\n    :param string: The string to find the max.\n    :rtype: int\n    :return: The maximum character in the string.\n    \"\"\"\n    # TODO: write your code here.\n    max_char = 0\n    for c in string:\n        if c > max_char:\n            max_char = c\n\n    return max_char\n\n\nprint find_max(\"abcabcab\")",
    "def findMax(inputStr):\n    max_char = \"\"\n    max_value = 0\n    for c in inputStr:\n        if c > max_value:\n            max_value = c\n            max_char = c\n    return max_char\n\nif __name__ == \"__main__\":\n    test_case = \"piyo\"\n    print(findMax(test_case))",
    "def findMax(string):\n    \"\"\"\n    Arguments:\n    string -- A string to find the maximum occurring character in.\n    \"\"\"\n    maxVal = 0\n    for c in string:\n        if c > maxVal:\n            maxVal = c\n    return maxVal\n\nif __name__ == \"__main__\":\n    assert findMax(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "def max_occurring_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    occurring_character = \"\"\n    for i in range(len(string)):\n        if string[i] in occurring_character:\n            occurring_character = string[i]\n    return occurring_character\n\nif __name__ == \"__main__\":\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occurring_character(\"abcabcabc\") == \"a\"\n    assert max_occ",
    "#!/usr/bin/env python\n\n# Complete the maxChar function below.\ndef maxChar(s):\n    return max(s)\n\nif __name__ == '__main__':\n    f = open(\"1.txt\", 'r')\n    s = f.read().strip()\n    f.close()\n\n    print maxChar(s)",
    "# Write your code here\n\ndef max_char(string):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n    :param string: a string\n    :return: a character\n    \"\"\"\n    max_char = ''\n    for i in range(len(string)):\n        if string[i] > max_char:\n            max_char = string[i]\n    return max_char\n\nif __name__ == '__main__':\n    string = 'Hello, world!'\n    print(max_char(string))",
    "def max_occurring_char(s):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n\n    :type s: str\n    :rtype: str\n    \"\"\"\n    m = {}\n    for c in s:\n        if c in m:\n            m[c] += 1\n        else:\n            m[c] = 1\n\n    max_val = 0\n    for k, v in m.items():\n        if v > max_val:\n            max_val = v\n            max_key = k\n\n    return max_key\n\nprint(max_occurring_char('aabbcc'))",
    "def max_char(string):\n    \"\"\"\n    Write a function that takes a string as input and returns the maximum occurring character in the string.\n    \"\"\"\n    max_char_map = {}\n    for c in string:\n        if c in max_char_map:\n            max_char_map[c] += 1\n        else:\n            max_char_map[c] = 1\n\n    max_char_list = list(max_char_map.items())\n    max_char_list = sorted(max_char_list, key=lambda x: x[1], reverse=True)\n    return max_char_list[0][0]\n\n\nif __name__ == \"__main__\":\n    test_string = \"aabbcc\"\n    print(max_char(test_string))",
    "def max_occuring_char(s):\n    \"\"\"\n    Input: string s\n    Output: maximum occurring character in s\n    \"\"\"\n    max_char = 0\n    max_occuring_char = 0\n    for char in s:\n        if char > max_occuring_char:\n            max_occuring_char = char\n            max_char = char\n    return max_occuring_char\n\nif __name__ == '__main__':\n    s = \"aaabbbcccdddeee\"\n    print max_occuring_char(s)",
    "def max_occurring_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    # We can use a hashmap to keep track of all the chars\n    # and then when we hit the max char, return the value\n    # if we have a max, otherwise just return the max\n    # and return 0\n    max_chars = {}\n    for c in s:\n        if c in max_chars:\n            if max_chars[c] > len(s):\n                max_chars[c] = len(s)\n        else:\n            max_chars[c] = len(s)\n    return max(max_chars.values())",
    "def get_max_char(string):\n    \"\"\"\n    :param string: a string\n    :return: the maximum occurring character in a string\n    \"\"\"\n    max_char = -1\n    for char in string:\n        if char > max_char:\n            max_char = char\n    return max_char\n\ndef main():\n    string = \"Hello World!\"\n    print get_max_char(string)\n\nif __name__ == \"__main__\":\n    main()",
    "#!/usr/bin/python\n\ndef maxChar(str):\n    max_value = 0\n    for i in range(0,len(str)):\n        if str[i] > max_value:\n            max_value = str[i]\n    return max_value\n\n# test cases\ntest_cases = [\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"aabbcc\", \"aabbcc\"),\n    (\"a",
    "def findMax(s):\n    \"\"\"\n    Input:\n    s: string to find maximum\n    Output:\n    max: maximum character\n    \"\"\"\n    max = s[0]\n    for i in range(len(s)):\n        if s[i] > max:\n            max = s[i]\n    return max\n\n#Test cases\nprint findMax('abc')\nprint findMax('pqr')\nprint findMax('abcdef')\nprint findMax('abcdefg')\nprint findMax('abcdefgh')\nprint findMax('abcdefghi')\nprint findMax('abcdefghij')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefghijk')\nprint findMax('abcdefgh",
    "def find_max_char(string):\n    \"\"\"\n    Write a python function to find the maximum occurring character in a given string.\n\n    :param string:\n    :return:\n    \"\"\"\n    max_char = ''\n    for i in range(len(string)):\n        if string[i] > max_char:\n            max_char = string[i]\n\n    return max_char\n\nif __name__ == '__main__':\n    string = 'abc'\n    print find_max_char(string)",
    "def max_occurrence(s):\n    \"\"\"\n    >>> max_occurrence(\"aabcc\")\n    'a'\n    >>> max_occurrence(\"aaabbbccc\")\n    'a'\n    >>> max_occurrence(\"ababbbccc\")\n    'b'\n    >>> max_occurrence(\"ababbbcccaaabbbcccaabbbcccaabbbcccaabbbcccaaabbbcccaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaaabbbcccaa",
    "def findMaxChar(str):\n    maxChars = 0\n    for i in range(len(str)):\n        if str[i] > maxChars:\n            maxChars = str[i]\n    return maxChars\n\n# Test Cases\nprint(\"Maximum occurring character in string \\\"ababab\\\" is \", findMaxChar(\"ababab\"))\nprint(\"Maximum occurring character in string \\\"ababab\\\" is \", findMaxChar(\"ababababab\"))\nprint(\"Maximum occurring character in string \\\"ababab\\\" is \", findMaxChar(\"abababababababababab\"))",
    "def find_max_char(s):\n    max_char = 0\n    for ch in s:\n        if ch > max_char:\n            max_char = ch\n    return max_char\n\ndef main():\n    s = \"A\"\n    print(find_max_char(s))\n    s = \"ABAB\"\n    print(find_max_char(s))\n    s = \"ABABAB\"\n    print(find_max_char(s))\n\nif __name__ == '__main__':\n    main()",
    "def max_occurring_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    occurring_chars = [ord(c) for c in s]\n    max_occurring_char = max(occurring_chars)\n    return max_occurring_char\n\nif __name__ == '__main__':\n    assert max_occurring_char('abbba') == 3\n    assert max_occurring_char('abbbabbbabb') == 3\n    assert max_occurring_char('abbbabbbabbbabbbabb') == 3\n    assert max_occurring_char('abbbabbbabbbabbbabbbbabbbabbbabbbabbbabbbabbbbabbbbbabbbbabbbabbbbabbbbabbbabbbbabbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabb",
    "def max_char(str):\n    # write your code here\n    count = 0\n    for char in str:\n        if char > count:\n            count = char\n    return count\n\nif __name__ == \"__main__\":\n    print max_char(\"aabbccdd\")\n    print max_char(\"abbccdd\")\n    print max_char(\"aabbccdd\")\n    print max_char(\"aabbccdd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")\n    print max_char(\"abcd\")",
    "#!/usr/bin/env python\n\ndef max_occurance_char(s):\n    '''\n    Returns the maximum occurring character in a string s.\n    '''\n    max_occurance_char = 0\n    for i in range(len(s)):\n        if s[i] > max_occurance_char:\n            max_occurance_char = s[i]\n    return max_occurance_char\n\ndef main():\n    s = \"abcdefg\"\n    print max_occurance_char(s)\n\nif __name__ == '__main__':\n    main()",
    "def max_occurance_char(str):\n    '''\n    Write a python function to find the maximum occurring character in a given string.\n    >>> max_occurance_char(\"aabbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Kevin Jamieson\n# @Date:   2014-06-12\n# @Email:  kevin.jamieson@ed.ac.uk\n# @Last modified by:   Kevin Jamieson\n# @Last modified time: 2015-01-28\n# @License: Apache v2.0\n# @Copyright:\n# @    This file is part of the LUCY Modules.\n# @    The LUCY Modules are free software: you can redistribute them and/or\n#    modify them under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n# @    LUCY is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n# @    You should have received a copy of the GNU General Public License\n#    along with LUCY.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import print_function\n\nimport re\n\ndef max_occurance(text):\n    max_occurance_re = re.compile('[\\w]+')\n    max_occurance = max_occurance_re.findall(text)\n    return max_occurance\n\nif __name__ == '__main__':\n    text = 'the quick brown fox jumped over the lazy dog'\n    print(max_occurance(text))",
    "def max_occurring_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return max(string.count(c) for c in string)\n\nif __name__ == '__main__':\n    assert max_occurring_character(\"hello\") == 1\n    assert max_occurring_character(\"hello world\") == 1\n    assert max_occurring_character(\"hello world hello\") == 2\n    assert max_occurring_character(\"hello world hello world\") == 3\n    assert max_occurring_character(\"hello world hello world hello\") == 3\n    assert max_occurring_character(\"hello world hello world hello world\") == 3\n    assert max_occurring_character(\"hello world hello world hello world hello\") == 3\n    assert max_occurring_character(\"\") == 0\n    assert max_occurring_character(\"hello\") == 0\n    assert max_occurring_character(\"hello world hello world hello\") == 0",
    "def find_max(str):\n    \"\"\"\n    Find the maximum character in the string.\n    \"\"\"\n    max_value = max(str)\n    return max_value\n\nprint find_max(\"abcd\")\n#>>> 'd'\nprint find_max(\"abcdefghijklmnopqrstuvwxyz\")\n#>>> 'z'\nprint find_max(\"\")\n#>>> '\\x00'",
    "def find_max(s):\n    return max(s, key=s.count)\n\n\nif __name__ == \"__main__\":\n    test_cases = [(\"aabbcc\", \"a\"), (\"aabbcc\", \"aabb\"), (\"aabbcc\", \"b\"), (\"aabbcc\", \"cc\"), (\"aabbcc\", \"c\"), (\"aabbcc\", \"aabbcc\"), (\"aabbcc\", \"aabbccc\")]\n    for test_case in test_cases:\n        print(\"Max of \", test_case[0], \" is \", find_max(test_case[0]))",
    "def find_max(s):\n    \"\"\"\n    >>> find_max('abcabcabc')\n    'c'\n    >>> find_max('ab')\n    'a'\n    >>> find_max('aaabbbb')\n    'a'\n    >>> find_max('abc')\n    'c'\n    >>> find_max('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'c'\n    >>> find_max('ab')\n    'a'\n    \"\"\"\n    return max(s, key=lambda x: s.count(x))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def getMax(string):\n    maxChar = 0\n    for ch in string:\n        if ch > maxChar:\n            maxChar = ch\n    return maxChar\n\ndef getMaxChar(string):\n    return max(string)\n\nprint getMax('abcdefghijklmnopqrstuvwxyz')\n#>>> 'z'\n\nprint getMaxChar('abcdefghijklmnopqrstuvwxyz')\n#>>> 'z'",
    "def findMax(string):\n    \"\"\"\n    Arguments:\n    string - string to be searched\n    Returns:\n    max - maximum occurring character in the given string\n    \"\"\"\n    max = 0\n    for i in range(len(string)):\n        if string[i] > max:\n            max = string[i]\n    return max\n\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World\"))\nprint(findMax(\"Hello World",
    "import re\n\n\ndef max_occurring_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return max(re.findall(r'[A-Z]', string), key=len)\n\n\nif __name__ == '__main__':\n    print max_occurring_char('Hello, this is a sample string')",
    "def findMax(string):\n    max_char = 0\n    max_occ = 0\n    for char in string:\n        if char > max_char:\n            max_char = char\n            max_occ = 1\n        elif char == max_char:\n            max_occ += 1\n    return max_occ\n\n#string = \"aabccc\"\n#print findMax(string)\n#string = \"aaabbbccc\"\n#print findMax(string)\n#string = \"aaabbccc\"\n#print findMax(string)\n#string = \"aaabbbbccc\"\n#print findMax(string)\n#string = \"aabbbbccc\"\n#print findMax(string)",
    "def maxOccurChar(str):\n    maxOccur = 0\n    for ch in str:\n        if ch > maxOccur:\n            maxOccur = ch\n    return maxOccur\n\n\nif __name__ == '__main__':\n    print maxOccurChar(\"abcd\")\n    print maxOccurChar(\"abbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbb",
    "def max_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    max_char = 0\n    for i in str:\n        if max_char < len(i):\n            max_char = len(i)\n    return max_char\n\n\nif __name__ == \"__main__\":\n    assert max_char(\"aabbcc\") == 3\n    assert max_char(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "def maxOccurringCharacter(str):\n    char_list = []\n    for i in range(0, len(str)):\n        if str[i] not in char_list:\n            char_list.append(str[i])\n\n    return max(char_list)\n\n\nprint(maxOccurringCharacter('abcdxyz'))",
    "def max_occurrence(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    occurrence = 0\n    for c in s:\n        if c not in set(s):\n            occurrence += 1\n        elif occurrence > occurrence:\n            occurrence = occurrence\n    return occurrence\n\nif __name__ == '__main__':\n    assert max_occurrence('aabbcc') == 3\n    assert max_occurrence('abbcc') == 2\n    assert max_occurrence('abbcccc') == 1\n    assert max_occurrence('abbcccccc') == 1\n    assert max_occurrence('abbcccccccc') == 1\n    assert max_occurrence('abbcccccccccc') == 1\n    assert max_occurrence('abbcccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccccccccccccccc') == 1\n    assert max_occurrence('abbcccccccccccccccccccccccc",
    "# https://oj.leetcode.com/problems/maximum-character/\n# Given a string, find the maximum character.\n# The maximum character is the one that occurs most often in the string.\n#\n# Example 1:\n# Input:\n# s = \"aabbbbbbbbc\"\n# Output:\n# \"c\"\n#\n# Explanation:\n# \"bbbbbbbbb\" is a subsequence of \"aabbbbbbbbc\" that has the maximum frequency.\n# Note that \"bbbbbbbbb\" is not a subsequence of \"aabbbbbbbbc\" and has\n# a smaller frequency.\n#\n# Example 2:\n# Input:\n# s = \"aabbbbbbbbc\"\n# Output:\n# \"c\"\n#\n# Explanation:\n# \"bbbbbbbbb\" is a subsequence of \"aabbbbbbbbc\" that has the maximum frequency.\n# Note that \"bbbbbbbbb\" is not a subsequence of \"aabbbbbbbbc\" and has\n# a smaller frequency.\n#\n# Example 3:\n# Input:\n# s = \"aabbbbbbbbc\"\n# Output:\n# \"c\"\n#\n# Explanation:\n# \"bbbbbbbbb\" is a subsequence of \"aabbbbbbbbc\" that has the maximum frequency.\n# Note that \"bbbbbbbbb\" is not a subsequence of \"aabbbbbbbbc\" and has\n# a smaller frequency.\n#\n# Note:\n# 1 <= s.length <= 10000\n# s consists only of lowercase English letters.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def maxChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        node = TreeNode(val=s[0], left=None, right=None)\n        def dfs(node):\n            if node is",
    "def max_char(string):\n    max_char = 0\n    for c in string:\n        if c > max_char:\n            max_char = c\n    return max_char\n\n\n\nprint max_char('hello')",
    "def maxOccurrence(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = collections.Counter(string)\n    max_count = max(count.values())\n    return max_count\n\n\nif __name__ == '__main__':\n    assert(maxOccurrence(\"aabbcc\") == 'aabb')\n    assert(maxOccurrence(\"aaaaaabbbbcccccc\") == 'aabb')\n    assert(maxOccurrence(\"abbbbcccccccccccccccccccccccccc\") == 'aabb')\n    assert(maxOccurrence(\"abbbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc",
    "def findMax(s):\n    maxChar = 0\n    for c in s:\n        if c > maxChar:\n            maxChar = c\n    return maxChar\n\ndef main():\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(findMax(s))\n\nif __name__ == '__main__':\n    main()",
    "# Write your code below\n\ndef findMax(string):\n    max_occuring_char = 0\n    max_occuring_char_index = 0\n    for index, char in enumerate(string):\n        if char > max_occuring_char:\n            max_occuring_char = char\n            max_occuring_char_index = index\n    return max_occuring_char, max_occuring_char_index\n\n\n\n# If the input is not a string, then just return 0.\n# If the input is a string, but the max occurs character is not a letter, then return 0.\n# If the input is a string, and the max occurs character is a letter, then return the index of the max occur character.\n\ndef findMax(string):\n    if type(string)!= str:\n        return 0\n    elif len(string) == 0:\n        return 0\n    elif string[0]!= string[0].lower():\n        return 0\n    else:\n        max_occuring_char = 0\n        max_occuring_char_index = 0\n        for index, char in enumerate(string):\n            if char > max_occuring_char:\n                max_occuring_char = char\n                max_occuring_char_index = index\n        return max_occuring_char_index\n\n# Test cases\n\nstring = \"hello\"\n\n#string = \"a\"\n#print(findMax(string))\n\nstring = \"hello\"\n\n#string = \"hello\"\n#print(findMax(string))\n\nstring = \"abcd\"\n\n#string = \"abcd\"\n#print(findMax(string))\n\nstring = \"abcd\"\n\n#string = \"abc\"\n#print(findMax(string))\n\nstring = \"abcd\"\n\n#string = \"abc\"\n#print(findMax(string))\n\nstring = \"abc\"\n\n#string = \"abc\"\n#print(findMax(string))\n\nstring = \"abc\"\n\n#string = \"abc\"\n#print(findMax(string))",
    "import sys\nimport math\n\ndef maxOccurs(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return max(string.count(char) for char in string)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = sys.argv[1]\n    print(maxOccurs(string))\n\nif __name__ == '__main__':\n    main()",
    "def findMaxChar(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    max_char = ''\n    for i in range(len(s)):\n        if s[i] > max_char:\n            max_char = s[i]\n    return max_char\n\n\nif __name__ == '__main__':\n    s = 'aabbbcccdddeee'\n    print findMaxChar(s)",
    "def find_max_char(str):\n    max_char = 0\n    for char in str:\n        if char > max_char:\n            max_char = char\n\n    return max_char\n\n# print find_max_char(\"abcabcab\")\n# print find_max_char(\"abcdabcdab\")\n# print find_max_char(\"abcdabcd\")\n\n# def find_max_char(str):\n#     max_char = 0\n#     for char in str:\n#         if char > max_char:\n#             max_char = char\n#     return max_char\n#\n# print find_max_char(\"abcabcab\")\n# print find_max_char(\"abcdabcdab\")\n# print find_max_char(\"abcdabcd\")\n\n# def find_max_char(str):\n#     max_char = 0\n#     for char in str:\n#         if char > max_char:\n#             max_char = char\n#     return max_char\n#\n# print find_max_char(\"abcabcab\")\n# print find_max_char(\"abcdabcdab\")\n# print find_max_char(\"abcdabcd\")\n\n# def find_max_char(str):\n#     max_char = 0\n#     for char in str:\n#         if char > max_char:\n#             max_char = char\n#     return max_char\n#\n# print find_max_char(\"abcabcab\")\n# print find_max_char(\"abcdabcdab\")\n# print find_max_char(\"abcdabcd\")",
    "def findMax(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    maxChar = 0\n    for char in s:\n        if char > maxChar:\n            maxChar = char\n    return maxChar\n\nprint findMax('aabbbcc')",
    "def max_occurance(string):\n    max_occurance = 0\n    for char in string:\n        if char in string:\n            if char > max_occurance:\n                max_occurance = char\n    return max_occurance\n\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))\nprint(max_occurance(\"Hello, world!\"))",
    "def findMax(string):\n    maxchar = 0\n    for char in string:\n        if char > maxchar:\n            maxchar = char\n    return maxchar\n\n# test code\n\nif __name__ == \"__main__\":\n    testString = \"abcabcabc\"\n    print(findMax(testString))",
    "def max_occur(string):\n    max_occur = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            max_occur = max(max_occur, i+1)\n    return max_occur\n\nif __name__ == '__main__':\n    string = \"aabbccddeeffgghhiiijjjkkllllmmmnnnnooppppqrrrrsssssssssssttttttuuuuuuuuuuvvwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
    "def max_occuring_char(text):\n    \"\"\"\n    :param text: string\n    :return: maximum occurring character in the given string\n    \"\"\"\n    max_char = ''\n    for char in text:\n        if char not in max_char:\n            max_char = char\n    return max_char\n\nprint max_occuring_char('hello world')",
    "def max_occurring_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    occurring_char = 0\n    max_occurring_char = 0\n    for char in string:\n        if char in string:\n            if occurring_char < char:\n                occurring_char = char\n        else:\n            occurring_char = char\n        if occurring_char > max_occurring_char:\n            max_occurring_char = occurring_char\n    return max_occurring_char\n\nif __name__ == '__main__':\n    assert max_occurring_char('hello') == 'h'\n    assert max_occurring_char('hello world') == 'h'\n    assert max_occurring_char('hello world') == 'h'\n    assert max_occurring_char('hello world') == 'h'",
    "def max_char(string):\n    \"\"\"\n    Find the maximum occurring character in a given string.\n    :param string: a string\n    :return: maximum occurring character\n    \"\"\"\n    max_char = 0\n    for char in string:\n        if char > max_char:\n            max_char = char\n    return max_char\n\n\n# --------------------------------------------------------------\n# Unit tests\n# --------------------------------------------------------------\n\ndef test_max_char():\n    assert max_char(\"test\") == 't'\n    assert max_char(\"test test\") == 't'\n    assert max_char(\"test\\ntest\") == 't'\n    assert max_char(\"test\\ntest\\ntest\\n\") == 't'\n    assert max_char(\"test\\ntest\\ntest\\n\") == 't'\n    assert max_char(\"test\\ntest\\ntest\\n\") == 't'\n\nif __name__ == '__main__':\n    test_max_char()",
    "def max_occurring_char(string):\n    # write your code here\n    max_char = \"\"\n    for i in range(len(string)):\n        if string[i] not in max_char:\n            max_char = string[i]\n    return max_char\n\nif __name__ == \"__main__\":\n    print max_occurring_char(\"Hello World\")",
    "#!/usr/bin/env python\n\ndef findMax(string):\n    maxIndex = 0\n    maxValue = 0\n\n    for i in range(len(string)):\n        if string[i] > maxValue:\n            maxValue = string[i]\n            maxIndex = i\n\n    return maxIndex\n\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(findMax(string))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}