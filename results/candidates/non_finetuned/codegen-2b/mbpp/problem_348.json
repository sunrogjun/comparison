{
  "problem": {
    "task_id": "MBPP/359",
    "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
    "test_list": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ],
    "challenge_test_list": [],
    "problem_id": 348
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def is_twice(a, b, c):\n    return (b*b-4*a*c)>0\n\ndef main():\n    x = raw_input()\n    a = raw_input()\n    b = raw_input()\n    c = raw_input()\n    if is_twice(a, b, c):\n        print \"YES\"\n    else:\n        print \"NO\"\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef check_for_multiple(a, b, c):\n    \"\"\"\n    Check whether the roots of the quadratic equation are twice of the other or not.\n    :param a: The coefficient of the quadratic equation.\n    :param b: The constant term of the quadratic equation.\n    :param c: The variable term of the quadratic equation.\n    :return: True if the roots are twice of the other, else False.\n    \"\"\"\n    if a == 0:\n        return False\n    else:\n        x1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        x2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        return x1 == x2\n\n\nif __name__ == '__main__':\n    a = float(input('Enter the value of a: '))\n    b = float(input('Enter the value of b: '))\n    c = float(input('Enter the value of c: '))\n    print('The roots are: {}'.format(check_for_multiple(a, b, c)))",
    "# 1. Define a function,\ndef is_twice(a, b, c):\n    if a == 0:\n        return True\n    else:\n        return c/a == 2\n\n# 2. Check whether two roots of the quadratic equation are twice of each other,\n# or return False if they are not.\n# Note that if two roots are the same, then the result is False.\ndef check_twice(a, b, c):\n    return is_twice(a, b, c) or is_twice(b, a, c)\n\n# 3. Return the number of roots of the quadratic equation that are twice of the other roots.\n# If there is no such number, return False.\ndef check_twice_num(a, b, c):\n    if not is_twice(a, b, c):\n        return 0\n    if is_twice(a, b, c):\n        return 1\n    if is_twice(b, a, c):\n        return 2\n    return False\n\n# 4. Test\nprint check_twice_num(2, 4, -1)\nprint check_twice_num(3, -1, -2)\nprint check_twice_num(-1, 2, 2)",
    "import math\n\ndef is_twice_root(a, b, c):\n    \"\"\"\n    a, b, c are the coefficients of the quadratic equation.\n    \"\"\"\n    if (a**2 - 4*b*c) % (2*c) == 0:\n        return True\n    return False\n\ndef main():\n    \"\"\"\n    A function to test the is_twice_root function.\n    \"\"\"\n    print(is_twice_root(1, 2, 3))\n    print(is_twice_root(2, 2, 3))\n    print(is_twice_root(2, 4, 3))\n    print(is_twice_root(2, 4, 5))\n    print(is_twice_root(2, 4, 6))\n    print(is_twice_root(2, 4, 7))\n\nif __name__ == \"__main__\":\n    main()",
    "def is_quad(a, b, c):\n    x = (b*b - 4*a*c) / 2 / a\n    y = (b*b + 4*a*c) / 2 / a\n    if x > 0 and y > 0 and x*x + y*y < 1:\n        return True\n    else:\n        return False\n\ndef test_is_quad():\n    assert is_quad(0, 0, 0) == True\n    assert is_quad(0, 0, 1) == False\n    assert is_quad(0, 1, 0) == False\n    assert is_quad(1, 1, 0) == True\n    assert is_quad(1, 1, 1) == True\n    assert is_quad(1, -1, 1) == False\n    assert is_quad(1, -1, -1) == False\n    assert is_quad(1, 1, -1) == True\n    assert is_quad(1, -1, -1) == False\n    assert is_quad(1, 1, -1) == True\n    assert is_quad(1, -1, 1) == True\n    assert is_quad(1, -1, -1) == False\n    assert is_quad(1, 1, 1) == True\n    assert is_quad(1, -1, 1) == False\n    assert is_quad(1, 1, -1) == False\n    assert is_quad(1, -1, -1) == True\n    assert is_quad(1, 1, -1) == False\n    assert is_quad(1, -1, 1) == True\n    assert is_quad(1, -1, -1) == False\n    assert is_quad(1, -1, -1) == True\n    assert is_quad(1, -1, 1) == True\n    assert is_quad(1, -1, -1) == True\n    assert is_quad(1, -1, -1) == True\n    assert is_quad(1, -1, 1) == True\n    assert is_quad(1, -1, -1) == True\n    assert is_quad(1, -1, 1) == True",
    "def check_for_double_root(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + b**2 == c**2 + 2*a*b:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    a, b, c = input().strip().split(' ')\n    a, b, c = [int(a), int(b), int(c)]\n\n    if check_for_double_root(a, b, c):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "def is_root(a, b, c):\n    return (a ** 2 + b ** 2) == c ** 2\n\ndef check_is_root(a, b, c):\n    if is_root(a, b, c):\n        return True\n    else:\n        return False\n\n#Test Cases\n# a, b, c = 3, 4, 5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = 3, 4, -5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = 3, -4, 5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = 3, -4, -5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = -3, 4, 5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = -3, 4, -5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = -3, -4, 5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))\n\n# a, b, c = -3, -4, -5\n# print(is_root(a, b, c))\n# print(check_is_root(a, b, c))",
    "def is_twice(a, b, c):\n    x = -b/a\n    y = -c/a\n    return abs(x-y) < 1e-8\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    x = a\n    y = b\n    if is_twice(a, b, c):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "# The code below is just a quick test to see if the code is working properly\n# It does not do any testing or testing of the code itself\n\ndef is_twice(a, b, c):\n    d = b*b - 4*a*c\n    if d == 0:\n        return True\n    elif d > 0:\n        return False\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print is_twice(1, 2, 3)\n    print is_twice(4, 8, -16)\n    print is_twice(-1, -2, -3)\n    print is_twice(-4, -8, 16)",
    "import math\n\n\ndef is_square(a):\n    return math.sqrt(a) == a\n\n\ndef is_square_root(a):\n    return a == math.sqrt(a)\n\n\ndef is_square_root_of(a, b):\n    return a == math.sqrt(b)\n\n\ndef main():\n    print(is_square_root(4, 2))\n    print(is_square_root_of(2, 4))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef check_quadratic(a, b, c):\n    \"\"\"\n    a = the coefficient of x\n    b = the coefficient of x^2\n    c = the coefficient of x^3\n    \"\"\"\n    if a == 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    #print check_quadratic(-1, 2, -2)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(-1, 2, -2)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(-1, -2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #print check_quadratic(-2, 2, 4)\n    #print check_quadratic(-2, -1, 4)\n    #print check_quadratic(2, -1, -4)\n    #",
    "import math\n\ndef check(a, b, c):\n    \"\"\"\n    check(a, b, c) -> bool\n    a is the first number, b is the second number, c is the third number.\n    returns True if a is twice of b or c, False otherwise.\n    \"\"\"\n    if b == 0:\n        if a == c:\n            return True\n        return False\n    if c == 0:\n        if a == b:\n            return True\n        return False\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return False\n    t = (-b + math.sqrt(d)) / (2 * a)\n    if t < 0 or t > 1:\n        return False\n    return True\n\nprint check(3, 0, 0)\nprint check(3, 0, 1)\nprint check(3, 1, 0)\nprint check(3, 1, 1)\nprint check(0, 3, 0)\nprint check(0, 3, 1)\nprint check(1, 3, 0)\nprint check(1, 3, 1)\nprint check(0, 0, 3)\nprint check(1, 1, 3)\nprint check(3, 1, -3)\nprint check(3, 1, 2)\nprint check(3, 1, -2)",
    "def solve_quadratic(a, b, c):\n    \"\"\"\n    a, b, c are the coefficients of the quadratic equation\n    returns True if the equation is satisfied\n    \"\"\"\n    a, b, c = float(a), float(b), float(c)\n    d = b*b - 4*a*c\n    if d < 0:\n        return False\n    else:\n        x1 = (-b - math.sqrt(d)) / (2*a)\n        x2 = (-b + math.sqrt(d)) / (2*a)\n        if x1 == x2:\n            return True\n        else:\n            return False\n\n# Test Cases\na, b, c = 3, -4, 7\n\nprint solve_quadratic(a, b, c)\n\na, b, c = -2, -4, 7\n\nprint solve_quadratic(a, b, c)",
    "def check(a,b,c):\n    if a*a-4*b*c >= 0:\n        return False\n    else:\n        return True\n\ndef main():\n    a = input()\n    b = input()\n    c = input()\n    if check(a,b,c):\n        print(2)\n    else:\n        print(1)\n\nif __name__ == \"__main__\":\n    main()",
    "def is_twice(a, b, c):\n    \"\"\"\n    a: the a value of the quadratic equation\n    b: the b value of the quadratic equation\n    c: the c value of the quadratic equation\n    Returns: True if the root is twice of the other root\n    \"\"\"\n    return (a*c) - (2 * b*a) == 0\n\nif __name__ == \"__main__\":\n    print is_twice(1, 2, 3)\n    print is_twice(2, 4, 9)\n    print is_twice(3, 5, 7)\n    print is_twice(4, 6, 10)\n    print is_twice(5, 8, 15)\n    print is_twice(6, 12, 21)\n    print is_twice(7, 10, 30)\n    print is_twice(8, 16, 45)\n    print is_twice(9, 12, 63)\n    print is_twice(10, 14, 84)\n    print is_twice(11, 20, 165)\n    print is_twice(12, 22, 243)\n    print is_twice(13, 24, 343)\n    print is_twice(14, 26, 462)\n    print is_twice(15, 28, 681)\n    print is_twice(16, 30, 927)\n    print is_twice(17, 32, 1245)\n    print is_twice(18, 34, 1575)\n    print is_twice(19, 36, 1920)\n    print is_twice(20, 38, 2520)\n    print is_twice(21, 40, 3240)\n    print is_twice(22, 42, 3960)\n    print is_twice(23, 44, 4960)\n    print is_twice(24, 46, 6160)\n    print is_twice(25, 48, 7920)\n    print is_twice(26, 50, 9960)\n    print is_twice(27, 52, 13320)\n    print is_twice(28, 54, 17560)\n    print is",
    "# write a function to check whether one root of the quadratic equation is twice of the other or not\ndef is_twice(a, b, c):\n    if b * b - 4 * a * c > 0:\n        return True\n    else:\n        return False\n\nprint(is_twice(-1, 2, 2))\nprint(is_twice(1, 2, 2))\nprint(is_twice(1, 2, 3))",
    "# Your code here\n\ndef is_twice(a,b,c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    if (a == 0):\n        return True\n    if (b == 0):\n        return False\n    else:\n        return (a*c - b*b)/(2*a) == 0\n\nprint(is_twice(2,3,4))\nprint(is_twice(1,2,3))\nprint(is_twice(1,2,1))\nprint(is_twice(0,2,3))",
    "def is_twice(x, b, c):\n    return x**2 + b*x + c == 0\n\ndef main():\n    print is_twice(0, -3, -4)\n\nif __name__ == '__main__':\n    main()",
    "def is_twice(a,b,c):\n    x = a * b - c\n    if x == 0:\n        return False\n    if x > 0:\n        return True\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n\nprint(is_twice(-1,0,0))\nprint(is_twice(0,0,-1))\nprint(is_twice(-1,1,1))\nprint(is_twice(1,1,-1))\nprint(is_twice(0,1,-1))\nprint(is_twice(0,1,1))\nprint(is_twice(0,1,0))",
    "def check_root(a, b, c):\n    if (a**2 + b**2) == c:\n        return True\n    else:\n        return False\n\n# Sample Input\na = 4\nb = 2\nc = 3\n\n# Sample Output\nprint(check_root(a, b, c))",
    "import math\ndef check_number(a, b, c):\n    #print a, b, c\n    #print \"------------------\"\n    x1 = -b / (2 * a)\n    x2 = -b / (2 * a)\n    if x1 == x2:\n        #print \"x1 = x2\"\n        return True\n    else:\n        #print \"x1!= x2\"\n        return False\n\ndef check_root(a, b, c):\n    #print a, b, c\n    #print \"------------------\"\n    x = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    if x == 0:\n        #print \"x = 0\"\n        return False\n    else:\n        #print \"x!= 0\"\n        return True\n\ndef check_all_root(a, b, c):\n    #print a, b, c\n    #print \"------------------\"\n    if check_number(a, b, c) and check_root(a, b, c):\n        #print \"check_number and check_root\"\n        return True\n    else:\n        #print \"check_number and check_root\"\n        return False\n\ndef main():\n    a = -1\n    b = -1\n    c = 1\n    #print check_all_root(a, b, c)\n\nif __name__ == '__main__':\n    main()",
    "def check_quadratic(a, b, c):\n    return (a*b - c) == 0\n\nif __name__ == '__main__':\n    print check_quadratic(1, 2, 3)\n    print check_quadratic(2, 4, 6)\n    print check_quadratic(3, 5, 6)\n    print check_quadratic(4, 6, 8)",
    "from math import sqrt\n\ndef is_twice(a, b, c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    \"\"\"\n    return (a*a - b*b) / 2 == c\n\nif __name__ == \"__main__\":\n    print is_twice(-5, 1, 2)\n    print is_twice(-4, 3, 7)",
    "def is_twice(a, b, c):\n    # if a is zero\n    if a == 0:\n        # if b is zero\n        if b == 0:\n            # if c is zero\n            if c == 0:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        if b is zero:\n            return True\n        else:\n            if c is zero:\n                return False\n            else:\n                # b^2 + c = a\n                return (b**2 + c) == a\n\ndef is_twice_python(a, b, c):\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        if b is zero:\n            return True\n        else:\n            if c is zero:\n                return False\n            else:\n                # b^2 + c = a\n                return (b**2 + c) == a\n\nif __name__ == \"__main__\":\n    a = 4\n    b = 0\n    c = 1\n    print(is_twice(a, b, c))\n    print(is_twice_python(a, b, c))",
    "def is_pythagorean(a,b,c):\n\ta2 = a*a\n\tb2 = b*b\n\tc2 = c*c\n\tif a2 == b2 and a2 == c2:\n\t\treturn True\n\telif b2 == a2 and b2 == c2:\n\t\treturn True\n\telif a2 == c2 and b2 == a2:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef main():\n\tprint(is_pythagorean(1,2,3))\n\nif __name__ == '__main__':\n\tmain()",
    "def is_quadratic(a,b,c):\n    x1 = (-b + sqrt(b**2 - 4 * a * c)) / (2 * a)\n    x2 = (-b - sqrt(b**2 - 4 * a * c)) / (2 * a)\n    return x1 == x2\n\ndef main():\n    a, b, c = map(float, input().split())\n    if is_quadratic(a, b, c):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()",
    "def is_twice_root(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    if a == 0:\n        return False\n    s = c / a\n    if s == b:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_twice_root(2, 3, 4))\n    print(is_twice_root(0, -3, 4))\n    print(is_twice_root(0, -3, -4))",
    "def check(a,b,c):\n\tif a == 0:\n\t\treturn False\n\td = b ** 2 - 4 * a * c\n\tif d < 0:\n\t\treturn False\n\telse:\n\t\td = sqrt(d)\n\t\treturn d == b or d == -b\n\ndef main():\n\ta = input()\n\tb = input()\n\tc = input()\n\tif check(a,b,c):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\nif __name__ == '__main__':\n\tmain()",
    "def is_twice(a, b, c):\n    # Solve the quadratic equation\n    x1, x2 = (b*b - 4*a*c)/2, (-b*b + b*c + 2*a*c)/2\n    return x1 == x2\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(is_twice(a, b, c))\n\nif __name__ == \"__main__\":\n    main()",
    "def check_if_twice(a, b, c):\n    if (a == 0 and b == 0) or (a == 0 and c == 0) or (b == 0 and c == 0):\n        return False\n    else:\n        if (a**2 + b**2 == c**2):\n            return True\n        else:\n            return False\n\nprint(check_if_twice(1, 1, 2))\nprint(check_if_twice(1, -1, 2))\nprint(check_if_twice(1, 1, -2))\nprint(check_if_twice(1, -1, -2))",
    "import math\n\ndef check(a, b, c):\n    if a == b:\n        return True\n    else:\n        return check_rec(a, b, c)\n\ndef check_rec(a, b, c):\n    if a == b:\n        return True\n    else:\n        return check_rec(b, a, c)\n\ndef test():\n    assert check(0, 0, 0) == True\n    assert check(-1, -1, 0) == True\n    assert check(-1, 1, 0) == True\n    assert check(1, -1, 0) == True\n    assert check(1, 1, 0) == True\n    assert check(2, 2, 0) == True\n    assert check(2, -1, 0) == False\n    assert check(2, 1, 0) == False\n    assert check(2, 2, 1) == True\n    assert check(2, -1, 1) == False\n    assert check(2, 1, 1) == False\n    assert check(2, 2, -1) == False\n    assert check(2, -1, -1) == True\n    assert check(2, 1, -1) == True\n    assert check(2, 2, -1) == True\n    assert check(-2, -2, 0) == True\n    assert check(-2, -1, 0) == False\n    assert check(-2, 1, 0) == False\n    assert check(-2, -2, -1) == True\n    assert check(-2, -1, -1) == False\n    assert check(-2, 1, -1) == False\n    assert check(-2, -2, 1) == False\n    assert check(-2, -1, 1) == True\n    assert check(-2, 1, 1) == True\n    assert check(-2, -2, -1) == True\n    assert check(-2, 1, -1) == True\n    assert check(-2, -1, 1) == True\n    assert check(-2, -2, 1) == True\n    assert check(3, -2, -2) == True\n    assert check(-3, -2, -2) == True\n    assert check(3, -",
    "def is_twice(a, b, c):\n    return ((a ** 2 - b ** 2) * (a ** 2 - c ** 2) * (b ** 2 - c ** 2)) == 0\n\n# Test Cases\n\n# a = 3, b = -4, c = -1\n# a = 4, b = -4, c = -1\n# a = -3, b = -4, c = -1\n# a = -4, b = 4, c = -1\n# a = -4, b = -4, c = 3\n# a = -4, b = -4, c = 4\n# a = -4, b = 4, c = 4\n# a = -4, b = 4, c = -4\n# a = 4, b = -4, c = 4\n# a = -4, b = 4, c = 4\n# a = 4, b = 4, c = -4\n\ndef test_is_twice():\n    assert is_twice(3, -4, -1) == False\n    assert is_twice(4, -4, -1) == False\n    assert is_twice(-3, -4, -1) == False\n    assert is_twice(-4, 4, -1) == False\n    assert is_twice(-4, -4, 3) == False\n    assert is_twice(-4, -4, 4) == False\n    assert is_twice(-4, 4, 4) == False\n    assert is_twice(-4, 4, -4) == False\n    assert is_twice(4, -4, 4) == True\n    assert is_twice(4, -4, -4) == True\n    assert is_twice(4, 4, -4) == True\n    assert is_twice(4, 4, 4) == True\n    assert is_twice(4, -4, -4) == True\n\nif __name__ == '__main__':\n    test_is_twice()",
    "import math\n\ndef is_twice(a, b, c):\n    if b ** 2 - 4 * a * c > 0:\n        return False\n    else:\n        return True\n\n# test cases\ntest_cases = [\n    (1, 2, 1),\n    (2, 4, 4),\n    (3, 5, 2),\n    (4, 6, 2),\n    (5, 7, 2),\n    (6, 8, 2),\n    (7, 9, 2),\n    (8, 10, 2),\n    (9, 11, 2),\n    (10, 12, 2),\n    (11, 13, 2),\n    (12, 14, 2),\n    (13, 15, 2),\n    (14, 16, 2),\n    (15, 17, 2),\n    (16, 18, 2),\n    (17, 19, 2),\n    (18, 20, 2),\n    (19, 21, 2),\n    (20, 22, 2),\n    (21, 23, 2),\n    (22, 24, 2),\n    (23, 25, 2),\n    (24, 26, 2),\n    (25, 27, 2),\n    (26, 28, 2),\n    (27, 29, 2),\n    (28, 30, 2),\n    (29, 31, 2),\n    (30, 32, 2),\n    (31, 33, 2),\n    (32, 34, 2),\n    (33, 35, 2),\n    (34, 36, 2),\n    (35, 37, 2),\n    (36, 38, 2),\n    (37, 39, 2),\n    (38, 40, 2),\n    (39, 41, 2),\n    (40, 42, 2),\n    (41, 43, 2),\n    (42, 44, 2),\n    (43, 45, 2),\n    (44, 46, 2),\n    (45, 47, 2),\n    (46, 48, 2),\n    (47, 49, 2),\n    (48, 50, 2),\n    (49, 51, 2),\n    (50, 52, 2),\n    (51, 53,",
    "import numpy as np\n\n\ndef solve(a, b, c):\n    \"\"\"\n    a is the quadratic coeffient\n    b is the x coeffient\n    c is the y coeffient\n\n    Returns a boolean whether root is twice or not\n    \"\"\"\n    return np.sqrt(b ** 2 - 4 * a * c) in [0, -1, 1]\n\n\nif __name__ == \"__main__\":\n    a = 2\n    b = 3\n    c = -1\n\n    assert solve(a, b, c) is False\n\n    a = 2\n    b = -3\n    c = -1\n\n    assert solve(a, b, c) is True\n\n    a = 2\n    b = 3\n    c = 1\n\n    assert solve(a, b, c) is False\n\n    a = 2\n    b = -3\n    c = 1\n\n    assert solve(a, b, c) is True",
    "def is_twice(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    return (a*a - b*b) % c == 0\n\n# Your code here\n\nif __name__ == '__main__':\n    is_twice(1, 0, 1)",
    "from math import sqrt, fabs\n\ndef is_twice(a,b,c):\n    d = sqrt(a*a-4*b*c)\n    return a+d, b+d\n\ndef main():\n    a = int(input(\"Enter a value for a: \"))\n    b = int(input(\"Enter a value for b: \"))\n    c = int(input(\"Enter a value for c: \"))\n    x, y = is_twice(a,b,c)\n    if x == y:\n        print(\"The roots are equal\")\n    elif x > y:\n        print(\"The roots are greater than the other\")\n    elif x < y:\n        print(\"The roots are less than the other\")\n    else:\n        print(\"The roots are not equal\")\n\nif __name__ == \"__main__\":\n    main()",
    "def is_twice_root(a,b,c):\n    x1 = (-b + (2*a)**(1/2))/(2*c)\n    x2 = (-b - (2*a)**(1/2))/(2*c)\n    return x1==x2\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_twice_root(1, 2, 3) == True, \"First\"\n    assert is_twice_root(1, 3, 4) == True, \"Second\"\n    assert is_twice_root(1, 4, 8) == False, \"Third\"\n    assert is_twice_root(4, 8, 16) == False, \"Fourth\"",
    "def solve_quadratic(a, b, c):\n    d = b ** 2 - 4 * a * c\n    if d > 0:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    a, b, c = input().split()\n    print(solve_quadratic(float(a), float(b), float(c)))",
    "# The problem is:\n# x^2 - x - y^2 = 0\n# x^2 - x = y^2\n# x^2 + x - y^2 = 0\n# x^2 + x = y^2\n# x^2 + y^2 - y^2 = 0\n# x^2 + x - y^2 = 0\n# x^2 + y^2 - y^2 = 0\n# x^2 - x - y^2 = 0\n# x^2 - x = y^2\n# x^2 - y^2 = 0\n# x^2 + y^2 - y^2 = 0\n# x^2 + y^2 - x^2 = 0\n# x^2 + y^2 - y^2 = 0\n# x^2 + x - y^2 = 0\n# x^2 + y^2 - x^2 = 0\n# x^2 - y^2 - x^2 + y^2 = 0\n# x^2 - x - y^2 = 0\n# x^2 - y^2 - x^2 + y^2 = 0\n# x^2 - x + y^2 = 0\n# x^2 - y^2 - x^2 + y^2 = 0\n\ndef is_quadratic(x, y):\n    return x * x + y * y == 0\n\ndef is_twice(x, y):\n    return x * x + y * y == 0 and x * x + x * y == y * y\n\nif __name__ == '__main__':\n    print(is_quadratic(0, 0))\n    print(is_quadratic(1, 1))\n    print(is_quadratic(0, 1))\n    print(is_quadratic(1, -1))\n    print(is_quadratic(1, -1))\n    print(is_quadratic(1, 1))\n    print(is_quadratic(1, 2))\n    print(is_quadratic(1, 3))\n    print(is_quadratic(1, 4))\n    print(is_quadratic(1, 5))\n    print(is_quadratic",
    "def is_twice(a, b, c):\n    return (b ** 2 - 4 * a * c) < 0\n\ndef is_twice2(a, b, c):\n    return (b ** 2 - 4 * a * c) > 0\n\ndef is_twice3(a, b, c):\n    return (b ** 2 - 4 * a * c) == 0\n\nif __name__ == '__main__':\n    print(is_twice(1, 2, 3))\n    print(is_twice2(1, 2, 3))\n    print(is_twice3(1, 2, 3))",
    "def is_twice(a,b,c):\n\tif(a*b + c > 0):\n\t\tif(a**2 + b**2 + c**2 == 0):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\n\ndef main():\n\ta = float(input(\"Enter a: \"))\n\tb = float(input(\"Enter b: \"))\n\tc = float(input(\"Enter c: \"))\n\tif(is_twice(a,b,c)):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\nmain()",
    "def is_quadratic(a,b,c):\n    x1 = (b ** 2 - 4 * a * c) / 2\n    x2 = (b ** 2 + 4 * a * c) / 2\n    if x1 > 0 and x2 > 0:\n        return True\n    else:\n        return False\n\ndef is_quadratic_recur(a,b,c):\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return is_quadratic_recur(a, b, c - 1) and is_quadratic_recur(a, b, c + 1)\n\ndef is_quadratic_recur_2(a,b,c):\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return is_quadratic_recur_2(a, b, c - 1) and is_quadratic_recur_2(a, b, c + 1)\n\ndef is_quadratic_recur_3(a,b,c):\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return is_quadratic_recur_3(a, b, c - 1) and is_quadratic_recur_3(a, b, c + 1)\n\ndef is_quadratic_recur_4(a,b,c):\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return is_quadratic_recur_4(a, b, c - 1) and is_quadratic_recur_4(a, b, c + 1)\n\ndef is_quadratic_recur_5(a,b,c):\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return is_quadratic_recur_5(a, b, c - 1) and is_quadratic_recur_5(a, b, c + 1)\n\ndef is_quadratic_recur_6(a,b,",
    "def is_twice(a, b, c):\n    if (a*a - b*b) % c == 0:\n        return True\n    else:\n        return False\n\n# Your code here\n\n# test cases:\n# a = 1, b = -1, c = 3\n# a = 1, b = 1, c = -1\n# a = -1, b = 1, c = 1\n# a = 1, b = -1, c = -1\n# a = -1, b = 1, c = -1\n# a = 1, b = -1, c = 1\n# a = -1, b = -1, c = 1\n# a = 1, b = 1, c = -1\n# a = -1, b = 1, c = 1\n# a = 1, b = -1, c = -1\n# a = -1, b = -1, c = -1\n# a = -1, b = -1, c = 1\n# a = -1, b = 1, c = 1\n# a = -1, b = -1, c = -1\n# a = -1, b = 1, c = -1\n# a = -1, b = -1, c = 1\n# a = -1, b = -1, c = -1\n\n# a = -1, b = 1, c = 1\n# a = -1, b = 1, c = -1\n# a = -1, b = -1, c = 1\n# a = -1, b = -1, c = -1\n# a = 1, b = -1, c = 1\n# a = 1, b = 1, c = -1\n# a = 1, b = -1, c = 1\n# a = -1, b = 1, c = -1\n# a = -1, b = -1, c = 1\n# a = -1, b = -1, c = -1\n\n# a = -1, b = -1, c = -1\n# a = 1, b = -1, c = 1\n# a = 1, b = 1, c = 1\n# a = -1, b = 1, c = -",
    "import math\n\ndef check(a, b, c):\n    return math.sqrt(a ** 2 - 4 * b * c) == 0\n\ndef solve(a, b, c):\n    if check(a, b, c):\n        return True\n    else:\n        return False\n\n# Write a function that takes two numbers and returns the number of times the first number is\n# the same as the second one.\n\n# Hint:\n# You can write a helper function that takes two numbers and returns the number of times the first number is\n# the same as the second one.\n\ndef check_helper(a, b):\n    if a == b:\n        return 1\n    else:\n        return 0\n\ndef solve_helper(a, b):\n    if a == b:\n        return 1\n    else:\n        return 0\n\ndef check_helper2(a, b):\n    if a == b:\n        return 1\n    else:\n        return 0\n\ndef solve_helper2(a, b):\n    if a == b:\n        return 1\n    else:\n        return 0\n\nprint(solve(1, 2, 3))\nprint(solve(3, 2, 1))\nprint(solve(2, 3, 1))\nprint(solve(1, 1, 1))\nprint(solve(1, 1, 2))\nprint(solve(1, 2, 2))",
    "def is_twice(a,b,c):\n    return (a*a-b*b)%c == 0\n\ndef is_twice_2(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0\n\ndef is_twice_3(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0\n\ndef is_twice_4(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0 and (a*a-b*b)%a == 0\n\ndef is_twice_5(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0 and (a*a-b*b)%a == 0\n\ndef is_twice_6(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0 and (a*a-b*b)%a == 0\n\ndef is_twice_7(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0 and (a*a-b*b)%a == 0\n\ndef is_twice_8(a,b,c):\n    return (a*a-b*b)%c == 0 and (a*a-c*c)%c == 0 and (a*a-c*c)%a == 0 and (a*a-b*b)%a == 0\n\ndef is_twice",
    "#!/usr/bin/env python\n\nimport math\n\ndef is_twice_root(x, y):\n    return math.sqrt(x**2 - 4*x*y + y**2)\n\nif __name__ == '__main__':\n    print is_twice_root(2, -1)\n    print is_twice_root(2, 3)",
    "def is_quadratic(a, b, c):\n    x = a/b\n    y = c/b\n    if x == y:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    else:\n        return True\n\nprint(is_quadratic(-1, 2, -3))\nprint(is_quadratic(4, 6, -1))\nprint(is_quadratic(-1, -2, 2))",
    "def check(a,b,c):\n    if b**2 - 4*a*c == 0:\n        return True\n    else:\n        return False\n\ndef test():\n    assert check(2, 3, 0), \"2^2 - 3*0 = 0\"\n    assert check(2, 3, 4), \"2^2 - 3*4 = 0\"\n    assert check(2, 3, -4), \"2^2 - 3*-4 = 0\"\n    assert check(2, -3, 4), \"2*-3^2 + 4 = 0\"\n    assert check(2, -3, -4), \"2*-3^2 + -4 = 0\"\n    assert check(-2, 3, 4), \"2*-3^2 - 4 = 0\"\n    assert check(-2, 3, -4), \"2*-3^2 - -4 = 0\"\n    assert check(-2, -3, 4), \"2*-3^2 - 4 = 0\"\n    assert check(-2, -3, -4), \"2*-3^2 - -4 = 0\"\n\nif __name__ == \"__main__\":\n    test()",
    "import math\n\ndef is_twice(a, b, c):\n    return (b*b-4*a*c)/4 == 0\n\nif __name__ == '__main__':\n    print is_twice(-2, -2, -2)\n    print is_twice(-2, -1, -2)\n    print is_twice(-2, -1, -1)\n    print is_twice(-2, -1, 0)\n    print is_twice(-2, -1, 1)\n    print is_twice(-2, -1, 2)\n    print is_twice(-2, -1, 3)\n    print is_twice(-2, -1, 4)\n    print is_twice(-2, -1, 5)\n    print is_twice(-2, -1, 6)\n    print is_twice(-2, -1, 7)\n    print is_twice(-2, -1, 8)\n    print is_twice(-2, -1, 9)\n    print is_twice(-2, -1, 10)\n    print is_twice(-2, -1, 11)\n    print is_twice(-2, -1, 12)\n    print is_twice(-2, -1, 13)\n    print is_twice(-2, -1, 14)\n    print is_twice(-2, -1, 15)\n    print is_twice(-2, -1, 16)\n    print is_twice(-2, -1, 17)\n    print is_twice(-2, -1, 18)\n    print is_twice(-2, -1, 19)\n    print is_twice(-2, -1, 20)\n    print is_twice(-2, -1, 21)\n    print is_twice(-2, -1, 22)\n    print is_twice(-2, -1, 23)\n    print is_twice(-2, -1, 24)\n    print is_twice(-2, -1, 25)\n    print is_twice(-2, -1, 26)\n    print is_twice(-2, -1,",
    "import math\n\ndef check_for_twice(a, b, c):\n    if (a*a - b*b) == 0:\n        return False\n    else:\n        if (a*a - c*c) == 0:\n            return True\n        else:\n            if (a*a - b*b) == 0:\n                return False\n            else:\n                return False\n\ndef main():\n    a = input('Enter the a value: ')\n    b = input('Enter the b value: ')\n    c = input('Enter the c value: ')\n    if (check_for_twice(a, b, c)):\n        print('The roots are twice of the other')\n    else:\n        print('The roots are not twice of the other')\n\nif __name__ == \"__main__\":\n    main()",
    "def is_twice(a, b, c):\n    return (a*b) == (c*c)\n\ndef is_twice_two(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c)\n\ndef is_twice_three(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)\n\ndef is_twice_four(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)\n\ndef is_twice_five(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)\n\ndef is_twice_six(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)\n\ndef is_twice_seven(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)\n\ndef is_twice_eight(a, b, c):\n    return (a*b) == (c*c) and (a*b)!= (c*c) and (a*b)!= (c*c)",
    "def is_quadratic(a, b, c):\n    return a * a - b * b == c * c\n\ndef is_twice(a, b, c):\n    return (a * a - b * b) % c == 0\n\ndef is_quadratic_equation(a, b, c):\n    return is_quadratic(a, b, c) or is_quadratic(b, a, c) or is_quadratic(c, a, b)\n\ndef is_twice_equation(a, b, c):\n    return is_twice(a, b, c) or is_twice(b, a, c) or is_twice(c, a, b)\n\ndef is_quadratic_equation_n(n):\n    a = []\n    b = []\n    c = []\n    for i in range(1, n + 1):\n        a.append(i)\n        b.append(i)\n        c.append(i)\n    return is_quadratic_equation_n_helper(a, b, c)\n\ndef is_quadratic_equation_n_helper(a, b, c):\n    if len(a) == 1:\n        return is_quadratic_equation(a[0], b[0], c[0])\n    if len(b) == 1:\n        return is_quadratic_equation(a[0], b[0], c[0])\n    if len(c) == 1:\n        return is_quadratic_equation(a[0], b[0], c[0])\n    if len(a) == 2:\n        return is_quadratic_equation(a[0], b[0], c[0]) and is_quadratic_equation(a[1], b[1], c[1])\n    if len(b) == 2:\n        return is_quadratic_equation(a[0], b[0], c[0]) and is_quadratic_equation(a[1], b[1], c[1])\n    if len(c) == 2:",
    "def is_quad_equation(a, b, c):\n    if a == 0:\n        return False\n    else:\n        return (b ** 2) - (4 * a * c) == 0\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    if is_quad_equation(a, b, c):\n        print(\"The equation is a quadratic equation.\")\n    else:\n        print(\"The equation is not a quadratic equation.\")\n\nmain()",
    "def is_twice(a, b, c):\n    x = b * b - 4 * a * c\n    if x < 0:\n        return False\n    x = sqrt(x)\n    if abs(a) < 1e-6 and abs(b) < 1e-6:\n        return False\n    else:\n        return True\n\ndef main():\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    if is_twice(a, b, c):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()",
    "def is_twice(a,b,c):\n    d = a*a - b*c;\n    if d >= 0:\n        return False\n    else:\n        return True\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a value: \"))\n    b = float(input(\"Enter b value: \"))\n    c = float(input(\"Enter c value: \"))\n    if is_twice(a,b,c):\n        print \"Root 1 is twice of root 2\"\n    else:\n        print \"Root 1 is not twice of root 2\"",
    "def is_root_twice(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    if a == 0 and b == 0:\n        return False\n    if b == 0:\n        return c % a == 0\n    if a == 0:\n        return c % b == 0\n    if c == 0:\n        return False\n    if (a * a - b * b) % c == 0:\n        return True\n    return False\n\nclass Solution:\n    # @param {integer[]} equations\n    # @param {integer} target\n    # @return {integer}\n    def solveEquations(self, equations, target):\n        if len(equations) == 0:\n            return None\n        equations.sort()\n        for i in xrange(len(equations)):\n            if is_root_twice(equations[i][0], equations[i][1], target):\n                return equations[i][0]\n        return None\n\nif __name__ == \"__main__\":\n    equations = [\n        [1,2],\n        [1,2],\n        [1,0],\n        [1,1],\n        [2,2],\n        [2,1],\n        [2,2],\n        [3,1],\n        [3,2],\n        [3,3],\n    ]\n    target = 4\n    print Solution().solveEquations(equations, target)",
    "#!/usr/bin/env python\n\nimport math\n\ndef solve(a, b, c):\n    \"\"\"\n    solve(a, b, c) -> (r, s)\n    a, b, c are real numbers\n    return (r, s) where r is the real root, and s is the imaginary root of the equation.\n    \"\"\"\n    if (b**2) - (4 * a * c) == 0:\n        r = -b / (2 * a)\n        s = -c / (2 * a)\n        return (r, s)\n    else:\n        return None\n\ndef check(a, b, c):\n    \"\"\"\n    check(a, b, c) -> (r, s)\n    a, b, c are real numbers\n    return (r, s) where r is the real root, and s is the imaginary root of the equation.\n    \"\"\"\n    r, s = solve(a, b, c)\n    if r!= None and s!= None:\n        return (r, s)\n    else:\n        return None\n\nif __name__ == \"__main__\":\n    print(check(2, 3, 1))",
    "def check(a,b,c):\n    return(a*a - b*b) == 0 and (a*a - c*c) == 0 and a!= 0\n\n\ndef main():\n    print(check(1,0,1))\n    print(check(1,0,2))\n    print(check(1,1,1))\n    print(check(1,1,2))\n    print(check(1,2,1))\n    print(check(1,2,2))\n\nmain()",
    "def check_twice(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:\n        x = a * a - 4 * b * c\n        if x < 0:\n            return False\n        else:\n            return (2 * a + b + sqrt(x)) % 2\n\ndef check_twice_2(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:\n        x = a * a - 4 * b * c\n        if x < 0:\n            return False\n        else:\n            return (2 * a + b + sqrt(x)) % 2\n\ndef check_twice_3(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:\n        x = a * a - 4 * b * c\n        if x < 0:\n            return False\n        else:\n            return (2 * a + b + sqrt(x)) % 2\n\ndef check_twice_4(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:\n        x = a * a - 4 * b * c\n        if x < 0:\n            return False\n        else:\n            return (2 * a + b + sqrt(x)) % 2\n\ndef check_twice_5(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:\n        x = a * a - 4 * b * c\n        if x < 0:\n            return False\n        else:\n            return (2 * a + b + sqrt(x)) % 2\n\ndef check_twice_6(a, b, c):\n    if a == 0:\n        if b == 0:\n            return c % 2\n        else:\n            return False\n    else:",
    "import math\n\ndef check(a,b,c):\n    if a**2 - 4*b*c == 0:\n        if a == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check(1,2,3))\n    print(check(-1,2,3))\n    print(check(1,2,-3))\n    print(check(-1,2,-3))",
    "def is_twice_root(a, b, c):\n    if b!= 0:\n        return (b**2) == (a*c)\n    else:\n        return False\n\ndef main():\n    print(is_twice_root(0, 0, 1))\n    print(is_twice_root(1, 0, 1))\n    print(is_twice_root(0, 0, 2))\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\ndef check_roots(a,b,c):\n    if (a**2 + b**2) == c:\n        return True\n    else:\n        return False\n\ndef main():\n    # a,b,c = map(int, input().split())\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if check_roots(a,b,c):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()",
    "def is_twice(a, b, c):\n    if (b*b-4*a*c) == 0:\n        if (a > 0) and (b > 0) and (c > 0) :\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    a = float(input('Enter the value of a: '))\n    b = float(input('Enter the value of b: '))\n    c = float(input('Enter the value of c: '))\n    if is_twice(a, b, c):\n        print('The roots are: ', (b + 2*a)/2, (c + 2*b)/2)\n    else:\n        print('No Roots')\n\nif __name__ == '__main__':\n    main()",
    "def is_twice(a, b, c):\n    return a*b == c*c\n\n\n# Your code here\na = float(input())\nb = float(input())\nc = float(input())\nif is_twice(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "def is_twice(a,b,c):\n    if (a*a - 4*b*c) % 4 == 0:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    if is_twice(a,b,c):\n        print(\"The roots are twice of the other\")\n    else:\n        print(\"The roots are not twice of the other\")\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/quadratic-equation-roots/problem\n\ndef solve(a, b, c):\n    # a and b are the coefficients of the equation\n    # c is the constant term\n    # Find the roots of the equation\n    # If there are two roots, print them and return\n    # If there is no root, print \"No roots\" and return\n    # If there is only one root, print its value and return\n    # If there are multiple roots, print the roots and return\n    # If the equation is a quadratic equation, print \"Quadratic\" and return\n    # If the equation is linear, print \"Linear\" and return\n    # If the equation is constant, print \"Constant\" and return\n    # If the equation is zero, print \"Zero\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return\n    # If the equation is not zero, print \"Not Zero\" and return\n    # If the equation is not constant, print \"Not Constant\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return\n    # If the equation is not zero, print \"Not Zero\" and return\n    # If the equation is not constant, print \"Not Constant\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return\n    # If the equation is not zero, print \"Not Zero\" and return\n    # If the equation is not constant, print \"Not Constant\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return\n    # If the equation is not zero, print \"Not Zero\" and return\n    # If the equation is not constant, print \"Not Constant\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return\n    # If the equation is not zero, print \"Not Zero\" and return\n    # If the equation is not constant, print \"Not Constant\" and return\n    # If the equation is not quadratic nor linear, print \"Not Quadratic nor Linear\" and return",
    "import math\n\ndef check_double_root(a, b, c):\n    \"\"\"\n    Check whether one root is twice of the other\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    if a == 0:\n        return False\n\n    root = (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if root >= 0 and root <= 1:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    a = input(\"Enter a: \")\n    b = input(\"Enter b: \")\n    c = input(\"Enter c: \")\n\n    print(\"Root 1 is {}\".format(check_double_root(a, b, c)))\n    print(\"Root 2 is {}\".format(check_double_root(a, b, -c)))\n    print(\"Root 3 is {}\".format(check_double_root(a, -b, c)))\n    print(\"Root 4 is {}\".format(check_double_root(a, -b, -c)))",
    "def is_twice(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return (a * b) - (4 * a * c) + (b * b) - (4 * b * c) + (c * c) - (4 * c * b)\n\nif __name__ == '__main__':\n    a, b, c = map(float, input().split())\n    print(is_twice(a, b, c))",
    "def is_twice(a, b, c):\n    return (b*b - 4*a*c) >= 0\n\n\"\"\"\nInput:\na = 1\nb = 2\nc = 3\n\nOutput:\nFalse\n\nExplanation:\nb = 2\nb^2 - 4*a*c = 0\nb^2 - 2*a*c = 0\nb^2 - 2*a*c = -4*a*c\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0\nb^2 - 4*a*c = 0",
    "import math\n\ndef is_quadratic(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return math.sqrt((a * a) + (b * b)) == (a + b) * (a - b)\n\ndef is_quadratic_2(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return (a * a) + (b * b) == (c * c)\n\ndef is_quadratic_3(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return (a * a) + (b * b) == (c * c) and (a * b) == (c * a)\n\ndef is_quadratic_4(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return (a * a) + (b * b) == (c * c) and (a * b) == (a * c) and (b * c) == (b * a)\n\ndef is_quadratic_5(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return (a * a) + (b * b) == (c * c) and (a * b) == (a * c) and (b * c) == (b * a)\n\ndef is_quadratic_6(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return (a * a) + (b * b) == (c * c) and (a * b) == (b * a) and (b",
    "def is_quadratic(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    if a == 0:\n        return False\n    x = (-b + abs(c))/(2*a)\n    y = (-b - abs(c))/(2*a)\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    assert(is_quadratic(0, 0, 0) == False)\n    assert(is_quadratic(0, 0, 1) == False)\n    assert(is_quadratic(0, 0, 2) == True)\n    assert(is_quadratic(1, 0, 0) == True)\n    assert(is_quadratic(1, 0, 1) == False)\n    assert(is_quadratic(1, 0, 2) == False)\n    assert(is_quadratic(1, 1, 0) == True)\n    assert(is_quadratic(1, 1, 1) == True)\n    assert(is_quadratic(1, 1, 2) == False)\n    assert(is_quadratic(1, 2, 0) == True)\n    assert(is_quadratic(1, 2, 1) == True)\n    assert(is_quadratic(1, 2, 2) == False)\n    assert(is_quadratic(2, 2, 0) == False)\n    assert(is_quadratic(2, 2, 1) == False)\n    assert(is_quadratic(2, 2, 2) == False)",
    "def is_twice(a, b, c):\n    if a == 0:\n        return True\n    elif b == 0:\n        return True\n    elif c == 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    a = input()\n    b = input()\n    c = input()\n    print(is_twice(a, b, c))",
    "from math import sqrt\n\ndef is_twice(a,b,c):\n    if b*b - 4*a*c >= 0:\n        return False\n    if b*b - 4*a*c == 0:\n        return True\n    return False\n\ndef is_twice_c(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_b(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_a(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_a_b(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_a_c(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_b_c(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_a_b_c(a,b,c):\n    if b*b - 4*a*c == 0:\n        return True\n    if b*b - 4*a*c >= 0:\n        return False\n    return False\n\ndef is_twice_a_b_c_d(a,b,c,d):\n    if b*b - 4*a",
    "def is_twice(a, b, c):\n    if a == 0:\n        return False\n    else:\n        return (b**2 - 4*a*c) > 0\n\n\n\ndef main():\n    print is_twice(-1, -3, 4)\n    print is_twice(-1, -1, 2)\n    print is_twice(-1, -1, -2)\n    print is_twice(-1, -1, -3)\n    print is_twice(-1, -1, -4)\n    print is_twice(-1, -1, 1)\n    print is_twice(-1, -1, 2)\n    print is_twice(-1, -1, 3)\n    print is_twice(-1, -1, 4)\n\n\nif __name__ == '__main__':\n    main()",
    "def check(a, b, c):\n    if (a == b and b == c) or (a == b and c == a) or (b == c and a == c):\n        return True\n    else:\n        return False\n\ndef check2(a, b, c):\n    if (a == b and b == c) or (a == b and c == a) or (b == c and a == c):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    print(check(a, b, c))\n    print(check2(a, b, c))",
    "# define a function to check whether one root of the quadratic equation is twice of the other or not\ndef check_for_double(a,b,c):\n    if(a == 0):\n        return (b*b - c) >= 0\n    if(b == 0):\n        return (a*a - c) >= 0\n    if(a == b):\n        return (a*a - c) == 0\n    else:\n        return (b*b - c) == 0\n\n# check whether one root of the quadratic equation is twice of the other or not\ndef check_for_double(a,b,c):\n    if(a == 0):\n        return (b*b - c) >= 0\n    if(b == 0):\n        return (a*a - c) >= 0\n    if(a == b):\n        return (a*a - c) == 0\n    else:\n        return (b*b - c) == 0\n\n# test cases\nprint check_for_double(1, 0, 1)\nprint check_for_double(-1, -2, -3)\nprint check_for_double(1, 0, 1)\nprint check_for_double(1, 0, 1)",
    "# define the class Quadratic\nclass Quadratic:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return \"a = %d, b = %d, c = %d\" % (self.a, self.b, self.c)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return (self.a == other.a) and (self.b == other.b) and (self.c == other.c)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __lt__(self, other):\n        return self.a * other.b * other.c < self.b * other.c * other.b\n\n    def __le__(self, other):\n        return self.__lt__(other) or self.__eq__(other)\n\n    def __gt__(self, other):\n        return self.a * other.b * other.c > self.b * other.c * other.b\n\n    def __ge__(self, other):\n        return self.__gt__(other) or self.__eq__(other)\n\n    def __int__(self):\n        return (self.a * self.b * self.b) + (self.c * self.c) - self.b * self.b\n\n    def __float__(self):\n        return float(self.__int__())\n\n\n# test\nq = Quadratic(2, 3, 5)\nprint q\nprint q.__eq__(q)\nprint q.__ne__(q)\nprint q.__lt__(q)\nprint q.__le__(q)\nprint q.__gt__(q)\nprint q.__ge__(q)\nprint q.__int__()\nprint q.__float__()",
    "def check_root(a, b, c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    :param a: the coeff of the quadratic equation\n    :param b: the coeff of the quadratic equation\n    :param c: the coeff of the quadratic equation\n    :return: True or False\n    \"\"\"\n    return a * a - b * b == c * c\n\ndef test_check_root():\n    assert check_root(1, 2, 1) == True\n    assert check_root(2, 3, 4) == False\n    assert check_root(1, 1, 4) == False\n\nif __name__ == '__main__':\n    test_check_root()",
    "def is_twice_root(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return False\n    else:\n        return x == 0 or x == 2 * b * b - 4 * a * c\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if is_twice_root(a, b, c):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "def is_root(a,b,c):\n    if (a == 0):\n        return False\n    else:\n        r = (b**2) - (4*a*c)\n        if (r == 0):\n            return True\n        else:\n            return False\n\n#print(is_root(1,2,3))\n#print(is_root(1,3,4))\n#print(is_root(1,3,5))\n#print(is_root(1,5,6))\n#print(is_root(1,5,7))\n#print(is_root(2,3,4))\n#print(is_root(2,3,5))\n#print(is_root(2,5,6))\n#print(is_root(2,5,7))\n#print(is_root(3,4,5))\n#print(is_root(3,4,6))\n#print(is_root(3,5,6))\n#print(is_root(3,5,7))\n#print(is_root(4,5,6))\n#print(is_root(4,5,7))\n#print(is_root(5,6,7))\n#print(is_root(5,6,8))\n#print(is_root(5,7,8))\n#print(is_root(6,7,8))\n#print(is_root(6,7,9))\n#print(is_root(6,8,9))\n#print(is_root(6,8,10))\n#print(is_root(6,9,10))\n#print(is_root(6,9,11))\n#print(is_root(6,10,11))\n#print(is_root(7,8,9))\n#print(is_root(7,8,10))\n#print(is_root(7,9,10))\n#print(is_root(7,9,11))\n#print(is_root(7,10,11))\n#print(is_root(8,9,10))\n#print(is_root(8,9,",
    "def is_twice(a,b,c):\n    if b*b - 4*a*c >= 0:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print is_twice(-2, 0, -1)\n    print is_twice(-2, 0, -2)\n    print is_twice(-2, 0, -3)\n    print is_twice(-2, 0, 0)\n    print is_twice(-2, 0, 1)\n    print is_twice(-2, 0, 2)\n    print is_twice(-2, 0, 3)\n    print is_twice(-2, 0, 4)\n    print is_twice(-2, 0, 5)\n    print is_twice(-2, 0, 6)\n    print is_twice(-2, 0, 7)\n    print is_twice(-2, 0, 8)\n    print is_twice(-2, 0, 9)\n    print is_twice(-2, 0, 10)\n    print is_twice(-2, 0, 11)\n    print is_twice(-2, 0, 12)\n    print is_twice(-2, 0, 13)\n    print is_twice(-2, 0, 14)\n    print is_twice(-2, 0, 15)\n    print is_twice(-2, 0, 16)\n    print is_twice(-2, 0, 17)\n    print is_twice(-2, 0, 18)\n    print is_twice(-2, 0, 19)\n    print is_twice(-2, 0, 20)\n    print is_twice(-2, 0, 21)\n    print is_twice(-2, 0, 22)\n    print is_twice(-2, 0, 23)\n    print is_twice(-2, 0, 24)\n    print is_twice(-2, 0, 25)\n    print is_twice(-2, 0, 26)\n    print is_twice(-2, 0, 27)\n    print is_twice(-2, 0, 28)\n    print is_twice(-2",
    "import math\n\ndef check_roots(a, b, c):\n    root1 = -b / (2 * a)\n    root2 = -b / (2 * a)\n    if root1 == root2:\n        return root1\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    a = input(\"Enter a: \")\n    b = input(\"Enter b: \")\n    c = input(\"Enter c: \")\n    print(check_roots(a, b, c))",
    "import math\n\ndef check_for_twice(a,b,c):\n    if a==0:\n        return b==0\n    else:\n        root1 = math.sqrt(a)\n        root2 = math.sqrt(b)\n        if root1==root2:\n            return True\n        else:\n            return False\n\nprint(check_for_twice(0,0,0))\nprint(check_for_twice(0,0,1))\nprint(check_for_twice(0,1,1))\nprint(check_for_twice(1,1,1))\nprint(check_for_twice(1,1,2))",
    "import numpy as np\n\ndef is_twice(a, b, c):\n    x = np.sqrt(b ** 2 - 4 * a * c)\n    if x == 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    print(is_twice(-2, 4, -1))",
    "from math import sqrt\n\ndef check(a,b,c):\n    root1 = sqrt(a+b)\n    root2 = sqrt(a-b)\n    if root1 == root2:\n        return True\n    return False\n\nif __name__ == '__main__':\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n    c = int(input('Enter c: '))\n    print(check(a,b,c))",
    "def check(a,b,c):\n    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    a = a**2\n    b = b**2\n    c = c**2\n    print(check(a,b,c))",
    "from math import sqrt, fabs\nfrom collections import namedtuple\n\nQuadratic = namedtuple('Quadratic', ['a', 'b', 'c'])\n\ndef check(a, b, c):\n    if fabs(b**2 - 4*a*c) == 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    a = 1\n    b = -2\n    c = 1\n\n    if check(a, b, c):\n        print('The equation is a quadratic')\n    else:\n        print('The equation is not a quadratic')",
    "from math import sqrt\n\n\ndef is_twice_root(a, b, c):\n    \"\"\"\n    a: quadratic equation coefficients\n    b: roots of the equation\n    c: roots of the equation\n\n    returns: True if a, b and c are all roots of the quadratic equation\n    \"\"\"\n    if b ** 2 - 4 * a * c == 0:\n        return False\n    elif b ** 2 - 4 * a * c == 0:\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    a = int(input(\"a: \"))\n    b = int(input(\"b: \"))\n    c = int(input(\"c: \"))\n\n    if is_twice_root(a, b, c):\n        print(\"a, b and c are all roots of the quadratic equation\")\n    else:\n        print(\"a, b and c are not all roots of the quadratic equation\")\n\n\nif __name__ == '__main__':\n    main()",
    "def is_twice_root(a, b, c):\n    \"\"\"\n    a, b, c: coefficients of the quadratic equation\n    return: whether the quadratic equation is twice of the other\n    \"\"\"\n    soln = (-b + (b ** 2) ** 0.5) / a\n    if soln == 0 or soln == -1:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    assert is_twice_root(1, 1, 1) == True\n    assert is_twice_root(1, 1, -1) == False\n    assert is_twice_root(1, -1, 1) == False\n    assert is_twice_root(1, -1, -1) == True",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom math import sqrt\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_pythagorean(self):\n        self.assertEqual(2 * sqrt(3), sqrt(3))\n        self.assertEqual(sqrt(3), sqrt(3))\n\n    def test_pythagorean_2(self):\n        self.assertEqual(2 * sqrt(3) + 1, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 1, sqrt(3))\n\n    def test_pythagorean_3(self):\n        self.assertEqual(2 * sqrt(3) + 2, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 2, sqrt(3))\n\n    def test_pythagorean_4(self):\n        self.assertEqual(2 * sqrt(3) + 3, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 3, sqrt(3))\n\n    def test_pythagorean_5(self):\n        self.assertEqual(2 * sqrt(3) + 4, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 4, sqrt(3))\n\n    def test_pythagorean_6(self):\n        self.assertEqual(2 * sqrt(3) + 5, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 5, sqrt(3))\n\n    def test_pythagorean_7(self):\n        self.assertEqual(2 * sqrt(3) + 6, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 6, sqrt(3))\n\n    def test_pythagorean_8(self):\n        self.assertEqual(2 * sqrt(3) + 7, sqrt(3))\n        self.assertEqual(2 * sqrt(3) - 7,",
    "def is_twice(a,b,c):\n    if a == 0:\n        return True\n    else:\n        return b*b - 4*a*c >= 0\n\ndef is_twice_rec(a,b,c):\n    if a == 0:\n        return True\n    else:\n        return is_twice_rec(b,2*b,c) or is_twice_rec(a,2*a,c) or is_twice_rec(a,b,2*b)\n\ndef is_twice_rec_test(a,b,c):\n    if a == 0:\n        return True\n    else:\n        return is_twice_rec_test(b,2*b,c) or is_twice_rec_test(a,2*a,c) or is_twice_rec_test(a,b,2*b)\n\nif __name__ == \"__main__\":\n    print(is_twice_rec_test(1,1,1))\n    print(is_twice_rec_test(1,2,1))\n    print(is_twice_rec_test(1,2,2))\n    print(is_twice_rec_test(1,3,1))\n    print(is_twice_rec_test(1,3,2))\n    print(is_twice_rec_test(1,3,3))\n    print(is_twice_rec_test(1,4,1))\n    print(is_twice_rec_test(1,4,2))\n    print(is_twice_rec_test(1,4,3))\n    print(is_twice_rec_test(1,4,4))\n    print(is_twice_rec_test(2,3,1))\n    print(is_twice_rec_test(2,3,2))\n    print(is_twice_rec_test(2,3,3))\n    print(is_twice_rec_test(2,3,4))\n    print(is_twice_rec_test(2,4,1))\n    print",
    "def is_twice(a,b,c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    :param a: First root of the equation\n    :param b: Second root of the equation\n    :param c: Third root of the equation\n    :return: True if one root is twice of the other one, False otherwise\n    \"\"\"\n    return (a**2 + b**2 - c**2) % 2 == 0\n\n\n# Testing\nprint is_twice(1, 2, 3)\nprint is_twice(5, -2, -3)\nprint is_twice(5, -2, 3)\nprint is_twice(5, 2, -3)\nprint is_twice(5, 2, 3)",
    "def check_if_twice_root(a,b,c):\n    x1 = (b**2 - 4*a*c)**.5\n    x2 = (b**2 - 4*a*c)**.5\n    if x1 == x2:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a python function to check whether the two roots of the quadratic equation are distinct or not.\n\"\"\"\ndef check_if_distinct_roots(a,b,c):\n    x1 = (b**2 - 4*a*c)**.5\n    x2 = (b**2 - 4*a*c)**.5\n    if x1 == x2:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given root is a real root of the quadratic equation or not.\n\"\"\"\ndef is_real_root(a,b,c,root):\n    x = (b**2 - 4*a*c)**.5\n    if x == root:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a python function to check whether the given root is a complex root of the quadratic equation or not.\n\"\"\"\ndef is_complex_root(a,b,c,root):\n    x = (b**2 - 4*a*c)**.5\n    if x == root:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given root is a zero root of the quadratic equation or not.\n\"\"\"\ndef is_zero_root(a,b,c,root):\n    x = (b**2 - 4*a*c)**.5\n    if x == root:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given root is a imaginary root of the quadratic equation or not.\n\"\"\"\ndef is_imaginary_root(a,b,c,root):\n    x = (b**2 - 4*a*c)**.5\n    if x == root:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite",
    "def is_twice(a, b, c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    :param a: The constant of the equation.\n    :param b: The coefficient of the equation.\n    :param c: The constant of the equation.\n    :return: True if one root is twice of the other, otherwise return False.\n    \"\"\"\n    if a == b:\n        return False\n    elif a == c:\n        return False\n    elif b == c:\n        return False\n    else:\n        if b == 0:\n            return False\n        else:\n            return True\n\nif __name__ == '__main__':\n    a, b, c = map(float, input().split())\n    print(is_twice(a, b, c))",
    "import math\n\ndef is_twice(a,b,c):\n    \"\"\"\n    a,b,c: coefficients of quadratic equation\n    return: True or False\n    \"\"\"\n    # discriminant = (b - a)**2 - 4*a*c\n    discriminant = (b - a)**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    a,b,c = input().split()\n    a,b,c = int(a),int(b),int(c)\n    if is_twice(a,b,c):\n        print('Yes')\n    else:\n        print('No')",
    "def is_twice(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_b(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_c(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_a(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_a_b(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_a_c(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\ndef is_twice_b_c(a, b, c):\n    return (a*c - b*b)/2.0 == 0\n\nif __name__ == '__main__':\n    a = 2\n    b = 3\n    c = -5\n    print(is_twice(a, b, c))\n    print(is_twice_b(a, b, c))\n    print(is_twice_c(a, b, c))\n    print(is_twice_a(a, b, c))\n    print(is_twice_a_b(a, b, c))\n    print(is_twice_a_c(a, b, c))\n    print(is_twice_b_c(a, b, c))",
    "def is_twice_root(a, b, c):\n    x1 = (b**2 - 4 * a * c)\n    x2 = (b**2 - 4 * a * (b - c))\n    return x1 == 0 and x2 == 0\n\ndef test_is_twice_root():\n    assert is_twice_root(2, 3, 5) == True\n    assert is_twice_root(2, 3, 4) == False\n\nif __name__ == \"__main__\":\n    test_is_twice_root()",
    "def is_twice_root(a, b, c):\n    \"\"\"\n    a = root\n    b = root\n    c = root\n\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    # check whether a is twice of b\n    if b**2 == c**2:\n        return True\n    # check whether a is twice of c\n    if a**2 == c**2:\n        return True\n    # check whether a is twice of b or c\n    if a**2 == b**2 or b**2 == c**2:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    a = input()\n    b = input()\n    c = input()\n    print(is_twice_root(a, b, c))",
    "def is_twice_root(a,b,c):\n    return a * a - b * b == c * c\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    if is_twice_root(a,b,c):\n        print(\"The root is twice of other\")\n    else:\n        print(\"The root is not twice of other\")",
    "def is_twice(a,b,c):\n    if (b*b-4*a*c) == 0:\n        if (a==0 and b==0):\n            return True\n        elif (a==0 and b!=0):\n            return False\n        elif (a!=0 and b==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef main():\n    a = input(\"Enter the value of a: \")\n    b = input(\"Enter the value of b: \")\n    c = input(\"Enter the value of c: \")\n    if is_twice(a,b,c):\n        print(\"The roots of the quadratic equation are: {0} and {1}\".format(a,b))\n    else:\n        print(\"The roots of the quadratic equation are: {0} and {1}\".format(a,b))\n\nmain()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}