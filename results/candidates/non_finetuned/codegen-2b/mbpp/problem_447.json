{
  "problem": {
    "task_id": "MBPP/458",
    "prompt": "Write a function to find the area of a rectangle.",
    "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
    "test_list": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ],
    "challenge_test_list": [],
    "problem_id": 447
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import math\n\ndef area(width, height):\n    return width * height / 2\n\ndef test_area():\n    assert area(10, 10) == 50\n\ndef main():\n    test_area()\n\nif __name__ == '__main__':\n    main()",
    "class Rectangle(object):\n    \"\"\"\n    A Rectangle is a rectangular area in the plane.\n    \"\"\"\n\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return self.length + self.width\n\n\ndef test_area(rectangle):\n    assert rectangle.area() == rectangle.area()\n\ndef test_perimeter(rectangle):\n    assert rectangle.perimeter() == rectangle.perimeter()\n\ndef main():\n    rectangle = Rectangle(2, 3)\n    test_area(rectangle)\n    test_perimeter(rectangle)\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef get_area(width, height):\n    \"\"\"\n    @return the area of a rectangle with given width and height\n    \"\"\"\n    return width * height\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert get_area(1, 1) == 1, \"Test 1\"\n    assert get_area(1, 2) == 2, \"Test 2\"\n    assert get_area(2, 1) == 2, \"Test 3\"\n    assert get_area(2, 3) == 6, \"Test 4\"\n\nif __name__ == '__main__':\n    main()",
    "def rect_area(width, height):\n    return width * height\n\nif __name__ == '__main__':\n    print(rect_area(10, 10))\n    print(rect_area(5, 10))",
    "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        return (B*C + C*D + D*E + E*F + F*G + G*H - A*B*C - B*D*C - C*D*E - D*E*F - E*F*G - F*G*H) / 2",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getArea(self, width, height):\n        \"\"\"\n        :param width:\n        :param height:\n        :return: the area of the rectangle\n        \"\"\"\n        return width * height\n\n\nif __name__ == \"__main__\":\n    Solution().getArea(2, 3)",
    "from math import sqrt\n\ndef rectangle_area(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: float\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n    print(rectangle_area(4, 2))",
    "class Solution(object):\n    def __init__(self, area):\n        \"\"\"\n        @param area: A list of integers\n        @return: An integer\n        \"\"\"\n        self.area = area\n\n    def solve(self):\n        \"\"\"\n        @return: An integer\n        \"\"\"\n        if len(self.area)!= 2:\n            return 0\n        return max(self.area[0] * self.area[1], self.area[1] * self.area[0])",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        return width * height\n\n\nif __name__ == '__main__':\n    Solution().computeArea(5, 5)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {float}\n    def calculate(self, points):\n        xmin = ymin = float('inf')\n        xmax = ymax = 0.0\n        for p in points:\n            x = p.x\n            y = p.y\n            if x < xmin:\n                xmin = x\n            if x > xmax:\n                xmax = x\n            if y < ymin:\n                ymin = y\n            if y > ymax:\n                ymax = y\n        return (xmax - xmin) * (ymax - ymin)",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point x=%r y=%r>' % (self.x, self.y)\n\nclass Solution(object):\n    def __init__(self):\n        self.ans = 0\n\n    def is_inside(self, x, y, width, height):\n        x1 = x\n        y1 = y\n        x2 = x + width\n        y2 = y + height\n        if x1 > x2 or y1 > y2:\n            return False\n        if (x1 < 0) or (y1 < 0) or (x2 > width) or (y2 > height):\n            return False\n        return True\n\n    def rectangleArea(self, A, B, C, D, E, F, G, H):\n        if not self.is_inside(A.x, A.y, B.x-A.x, B.y-A.y):\n            return 0\n        if not self.is_inside(C.x, C.y, D.x-C.x, D.y-C.y):\n            return 0\n        if not self.is_inside(E.x, E.y, F.x-E.x, F.y-E.y):\n            return 0\n        if not self.is_inside(G.x, G.y, H.x-G.x, H.y-G.y):\n            return 0\n        return (B.x-A.x) * (D.y-C.y) + (B.y-A.y) * (F.x-E.x) + \\\n               (D.x-C.x) * (H.y-G.y) + (D.y-C.y) * (G.x-E.x) + \\\n               (F.x-E.x) * (H.y-G.y) + (F.y-E.y) * (G.x-E.x) + \\\n               (G.x",
    "import math\n\ndef area(width, height):\n    return width * height\n\ndef main():\n    print \"area of a rectangle with side-lengths of 1, 2, 3, and 4: \", area(1, 2), area(2, 2), area(3, 2), area(4, 2)\n    print \"area of a rectangle with side-lengths of 1, 2, 3, and 5: \", area(1, 2), area(2, 2), area(3, 2), area(5, 2)\n    print \"area of a rectangle with side-lengths of 1, 2, 3, and 6: \", area(1, 2), area(2, 2), area(3, 2), area(6, 2)\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        left = min(A, min(C, min(E, F)))\n        right = max(B, max(D, max(G, H)))\n        return (right - left) * (min(D, min(E, F)) - left) + (max(G, H) - min(D, min(E, F))) * (right - max(G, H))",
    "# https://leetcode.com/problems/rectangle-area/\n# https://leetcode.com/explore/learn/card/geometry/\n\n\nclass Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: float\n        :type B: float\n        :type C: float\n        :type D: float\n        :type E: float\n        :type F: float\n        :type G: float\n        :type H: float\n        :rtype: float\n        \"\"\"\n        # A is the width\n        # B is the height\n        # C is the x center\n        # D is the y center\n        # E is the x1\n        # F is the y1\n        # G is the x2\n        # H is the y2\n        return (A + B) * (C - D) + (G - H) * (D - C)\n\n\ndef main():\n    solution = Solution()\n    # print solution.computeArea(1, 2, 3, 4, 5, 6, 7, 8)\n    print solution.computeArea(1, 1, 1, 1, 0, 0, 0, 0)\n    print solution.computeArea(2, 2, 2, 2, 0, 0, 0, 0)\n    print solution.computeArea(3, 3, 3, 3, 0, 0, 0, 0)\n    print solution.computeArea(3, 3, 3, 3, 0, 0, 0, 0)\n    print solution.computeArea(4, 4, 4, 4, 0, 0, 0, 0)\n    print solution.computeArea(4, 4, 4, 4, 0, 0, 0, 0)\n    print solution.computeArea(5, 5, 5, 5, 0, 0, 0, 0)\n    print solution.computeArea(5, 5, 5, 5, 0, 0, 0, 0)\n    print solution.computeArea(6, 6, 6, 6, 0, 0, 0, 0)\n    print solution.computeArea(6, 6, 6, 6, 0, 0, 0,",
    "# The area of a rectangle is the sum of its width and height.\n#\n# Example:\n#\n# Input:\n# width = 2\n# height = 3\n#\n# Output:\n# 4\n#\n# Explanation:\n# The area of a rectangle with width = 2 and height = 3 is 4.\n#\n# Note:\n#\n# The given width and height are both positive integers.\n# The rectangle does not have any base.\n#\n# Related Topics\n# Math\n#\n\nclass Solution(object):\n    def computeArea(self, width, height):\n        \"\"\"\n        :type width: int\n        :type height: int\n        :rtype: int\n        \"\"\"\n        return width * height",
    "import math\n\ndef rectangle_area(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n    assert(rectangle_area(1, 2) == 4)\n    assert(rectangle_area(4, 3) == 9)",
    "import math\n\ndef rectangle_area(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    return height * width\n\n\ndef test_area():\n    assert rectangle_area(1, 1) == 1\n    assert rectangle_area(1, 2) == 2\n    assert rectangle_area(3, 2) == 6\n    assert rectangle_area(5, 5) == 25\n\nif __name__ == '__main__':\n    test_area()",
    "class Rectangle():\n    \"\"\"\n    A Rectangle object.\n    \"\"\"\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n\ndef main():\n    \"\"\"\n    Write a function that takes a rectangle as input and returns the area\n    of the rectangle.\n    \"\"\"\n    rect = Rectangle(1, 1)\n    print(rect.area())\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef rectangleArea(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return (width * height) / 2\n\nif __name__ == '__main__':\n    print(rectangleArea(4, 6))",
    "# Define the rectangle's area.\n# Return 0 if the input is invalid.\n\n# Implement the function.\n\n# Example:\n# Input: (x1, y1, x2, y2) = (0, 0, 1, 1)\n# Output: 1\n# Example:\n# Input: (x1, y1, x2, y2) = (0, 0, 0, 0)\n# Output: 0\n\ndef rectangle_area(x1, y1, x2, y2):\n    area = (x2 - x1) * (y2 - y1)\n    return area\n\nif __name__ == '__main__':\n    print rectangle_area(0, 0, 1, 1)\n    print rectangle_area(0, 0, 0, 0)",
    "class Solution(object):\n    def __init__(self):\n        self.max_area = 0\n\n    def solve(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        self.max_area = 0\n        for i in range(len(points)):\n            for j in range(len(points[i])):\n                if i == j:\n                    continue\n                area = points[i][j] * points[i][j]\n                self.max_area = max(self.max_area, area)\n        return self.max_area\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.solve(points)",
    "# https://www.hackerrank.com/challenges/rectangle/problem\n\nimport math\n\n\ndef area(width, height):\n    return width * height\n\n\ndef main():\n    try:\n        width = int(input())\n        height = int(input())\n        print(area(width, height))\n    except:\n        print(\"Incorrect Input\")\n\n\nif __name__ == '__main__':\n    main()",
    "def rectangleArea(height, width):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    return (height * width) / 2\n\n# Your code here.\n\n\"\"\"\nTesting\n\"\"\"\n\n#print rectangleArea(5, 7)\nprint rectangleArea(5, 5)\nprint rectangleArea(5, 1)\nprint rectangleArea(5, 10)\nprint rectangleArea(10, 10)\n\n\"\"\"\nOutput:\n\n10\n10\n0\n10\n\"\"\"",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def __init__(self):\n        self.x_min = None\n        self.y_min = None\n        self.x_max = None\n        self.y_max = None\n\n    def findArea(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n        x4, y4 = p4.x, p4.y\n\n        # x1, y1 is the top left corner\n        # x2, y2 is the top right corner\n        # x3, y3 is the bottom left corner\n        # x4, y4 is the bottom right corner\n        # the area of a rectangle is (x2-x1) * (y2-y1)\n        # so we just need to find the area of the rectangle\n        area = (x2-x1) * (y2-y1)\n        return area",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.max_area = 0\n\n    def calculate(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return: the area of the rectangle\n        \"\"\"\n        return min(l, r) * min(t, b)\n\n    def calculate1(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return: the area of the rectangle\n        \"\"\"\n        return max(l, r) * max(t, b)\n\n    def calculate2(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return: the area of the rectangle\n        \"\"\"\n        return l * t + r * b\n\n    def calculate3(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return: the area of the rectangle\n        \"\"\"\n        return r * t - l * b\n\n    def calculate4(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return: the area of the rectangle\n        \"\"\"\n        return r * b - l * t\n\nif __name__ == \"__main__\":\n    print Solution().calculate1(0, 0, 3, 1)\n    print Solution().calculate1(0, 0, 3, 1)\n    print Solution().calculate1(0, 0, 3, 1)\n    print Solution().calculate1(0, 0, 3, 1)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def getArea(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        area = abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p4.y) + p3.x * (p4.y - p1.y) - p1.x * (p2.y - p3.y) - p2.x * (p3.y - p4.y) - p3.x * (p4.y - p1.y)) / 2\n        return area",
    "class Solution:\n    # @param {integer} x1\n    # @param {integer} y1\n    # @param {integer} x2\n    # @param {integer} y2\n    # @return {integer}\n    def computeArea(self, x1, y1, x2, y2):\n        return (x2 - x1) * (y2 - y1)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n    def __eq__(self, other):\n        return (self.x, self.y) == (other.x, other.y)\n\n\nclass Solution:\n    def __init__(self):\n        self.min_x = 0\n        self.max_x = 0\n        self.min_y = 0\n        self.max_y = 0\n\n    def is_in(self, p):\n        if p.x < self.min_x or p.x > self.max_x:\n            return False\n        if p.y < self.min_y or p.y > self.max_y:\n            return False\n        return True\n\n    def area(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        for p in points:\n            if self.is_in(p):\n                if self.min_x > p.x:\n                    self.min_x = p.x\n                if self.max_x < p.x:\n                    self.max_x = p.x\n                if self.min_y > p.y:\n                    self.min_y = p.y\n                if self.max_y < p.y:\n                    self.max_y = p.y\n        return (self.max_x - self.min_x) * (self.max_y - self.min_y)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    p4 = Point(4, 4)\n    p5 = Point(5, 5)\n    p6 = Point(6, 6)\n    p7 = Point(7, 7)\n    p8 = Point(8, 8)\n    p9 = Point",
    "#!/usr/bin/python\n\nclass Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        \"\"\"\n        :type width: int\n        :type height: int\n        :rtype: int\n        \"\"\"\n        if width == 0 or height == 0:\n            return 0\n        return width * height\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.computeArea(2, 4)\n    print s.computeArea(5, 5)\n    print s.computeArea(6, 6)\n    print s.computeArea(3, 3)\n    print s.computeArea(0, 0)\n    print s.computeArea(9, 9)",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n\nclass Solution:\n    def areaOfRect(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0].x * points[0].y\n        if len(points) == 2:\n            return points[0].x * points[1].y\n\n        # A = (P1.x - P2.x) * (P2.y - P1.y)\n        # B = (P2.x - P1.x) * (P2.y - P1.y)\n        # C = (P3.x - P4.x) * (P4.y - P3.y)\n        # D = (P4.x - P3.x) * (P4.y - P3.y)\n        # return abs(A + B - C - D) / 2\n        \n        # A = (P1.x - P2.x) * (P2.y - P1.y)\n        # B = (P2.x - P1.x) * (P2.y - P1.y)\n        # return abs(A + B) / 2\n\n        # A = (P1.x - P2.x) * (P2.y - P1.y)\n        # B = (P2.x - P1.x) * (P2.y - P1.y)\n        # return abs(A + B) / 2\n\n        # A = (P1.x - P2.x) * (P2.y - P1.y)\n        # B = (P3.x - P4.x) * (P4.y - P3.y)\n        # C = (P4.x - P3.x) *",
    "import math\ndef rectangle_area(width, height):\n    return math.sqrt(width ** 2 + height ** 2)\n\nif __name__ == '__main__':\n    rectangle_area(1, 2)\n    rectangle_area(1, 3)",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        # Write your code here\n        return width * height\n\ns = Solution()\nprint(s.computeArea(2, 3))",
    "# https://leetcode.com/problems/rectangle-area/discuss/3900/Python-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n# https://leetcode.com/problems/rectangle-area/discuss/3900/Java-DP-solution\n\nclass Solution:\n    def computeArea(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int) -> int:\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        # [x,y]\n        x1, y1 = A, B\n        x2, y2 = C, D\n        x3, y3 = E, F\n        x4, y4 = G, H\n\n        # A rectangle with area of (x1,y1)-(x2,y2)\n        # B rectangle with area of (x3,y3)-(x4,y4)\n        # Area of A and B is the area of (x1,y1)-(x2,y2) x (x3,y3)-(x4,y4)\n        return (x2 - x1) * (y4 - y3)",
    "def rectangle_area(width, height):\n    return width * height\n\nprint(rectangle_area(3, 4))",
    "# https://www.hackerrank.com/challenges/rectangle-area/problem\n\n# Definition for a point.\n# class Point(object):\n#     def __init__(self, x=0, y=0):\n#         self.x = x\n#         self.y = y\n#\n#     def __str__(self):\n#         return str(self.x) +'' + str(self.y)\n\nclass Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        # If the sides of the rectangle are the same, then the area is zero.\n        if A == B == C == D == E == F == G == H:\n            return 0\n        # Area of the rectangle = (a + b) * (c - d)\n        # Area of the triangle = (a * b) / 2\n        # Area of the trapezoid = (a + b + c + d) / 4\n        # Area of the trapezoid = (a + b + c + d + e + f) / 8\n        # Area of the trapezoid = (a + b + c + d + e + f + g + h) / 16\n        # Area of the trapezoid = (a + b + c + d + e + f + g + h + i) / 32\n        # Area of the trapezoid = (a + b + c + d + e + f + g + h + i + j) / 64\n        # Area of the trapezoid = (a + b + c + d + e + f + g + h + i + j + k) / 128\n        # Area of the trapezoid = (a + b + c + d + e + f + g + h + i + j + k + l) / 256\n        # Area of the trapezoid = (a + b + c + d + e + f +",
    "# Write your code below\n\ndef area_of_rectangle(width, height):\n    return width * height\n\nif __name__ == \"__main__\":\n    print area_of_rectangle(3, 4)\n    print area_of_rectangle(10, 10)\n    print area_of_rectangle(15, 5)",
    "def rectangle_area(width, height):\n    \"\"\"\n    :param width: int\n    :param height: int\n    :return: int\n    \"\"\"\n    return width * height\n\n\ndef main():\n    \"\"\"\n    Test cases.\n    \"\"\"\n    assert(rectangle_area(1, 1) == 1)\n    assert(rectangle_area(1, 2) == 2)\n    assert(rectangle_area(2, 2) == 4)\n    assert(rectangle_area(3, 3) == 9)\n    assert(rectangle_area(4, 4) == 16)\n    assert(rectangle_area(5, 5) == 25)\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        return (B - A) * (G - E) + (H - F) * (D - C) - (D - C) * (B - A) - (E - G) * (H - F)",
    "def rectangle_area(width, height):\n    \"\"\"\n    :param width: width of the rectangle\n    :param height: height of the rectangle\n    :return: the area of the rectangle\n    \"\"\"\n    return (width * height) / 2\n\n\nif __name__ == \"__main__\":\n    assert rectangle_area(1, 1) == 1\n    assert rectangle_area(2, 2) == 4\n    assert rectangle_area(3, 4) == 9\n    assert rectangle_area(4, 3) == 12\n    assert rectangle_area(4, 4) == 16",
    "# https://www.hackerrank.com/challenges/rectangle-area\n\n# Definition for a rectangle.\nclass Rectangle(object):\n    def __init__(self, left, top, right, bottom):\n        self.left = left\n        self.top = top\n        self.right = right\n        self.bottom = bottom\n\n    def area(self):\n        return self.left * self.top + self.right * self.bottom\n\n# Your Rectangle object will be instantiated and called as such:\n# obj = Rectangle(left, top, right, bottom)\n# param_1 = obj.left\n# param_2 = obj.top\n# param_3 = obj.right\n# param_4 = obj.bottom\n# param_5 = obj.area()\n\n# Testing\nr1 = Rectangle(10, 10, 30, 30)\nprint r1.area()\nr2 = Rectangle(0, 0, 100, 100)\nprint r2.area()",
    "import math\n\ndef rectangle_area(width, height):\n    area = width * height\n    return area\n\ndef main():\n    print(rectangle_area(2, 2))\n    print(rectangle_area(3, 4))\n    print(rectangle_area(10, 7))\n    print(rectangle_area(9, 10))\n\nif __name__ == '__main__':\n    main()",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :param A: top left x\n        :param B: top left y\n        :param C: bottom right x\n        :param D: bottom right y\n        :param E: width\n        :param F: height\n        :param G:\n        :param H:\n        :return: int\n        \"\"\"\n        x1 = min(A, B, C, D)\n        x2 = max(A, B, C, D)\n        y1 = min(E, F, G, H)\n        y2 = max(E, F, G, H)\n        return (x2-x1)*(y2-y1)\n\n\nif __name__ == \"__main__\":\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        A = int(f.readline().strip())\n        B = int(f.readline().strip())\n        C = int(f.readline().strip())\n        D = int(f.readline().strip())\n        E = int(f.readline().strip())\n        F = int(f.readline().strip())\n        G = int(f.readline().strip())\n        H = int(f.readline().strip())\n        area = solution.computeArea(A, B, C, D, E, F, G, H)\n        print \"Case #%d: %d\" % (t+1, area)\n        # f.readline()",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        if height <= 0 or width <= 0:\n            return 0\n        return (width * height) / 2\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.computeArea(1, 1)\n    print s.computeArea(2, 2)\n    print s.computeArea(3, 3)\n    print s.computeArea(4, 4)\n    print s.computeArea(5, 5)\n    print s.computeArea(6, 6)\n    print s.computeArea(7, 7)\n    print s.computeArea(8, 8)\n    print s.computeArea(9, 9)\n    print s.computeArea(10, 10)\n    print s.computeArea(11, 11)\n    print s.computeArea(12, 12)",
    "def rectangle_area(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: float\n    \"\"\"\n    return float(width * height)\n\n# Your Code Here\nprint(rectangle_area(2, 3))\nprint(rectangle_area(5, 4))",
    "# https://www.hackerrank.com/challenges/rectangle-area/problem\n\n# from CommonClasses import *\n# point = Point(0, 0)\n# point2 = Point(0, 0)\n\n# point.x = point.x + point2.x\n# point.y = point.y + point2.y\n\n# print(point.x, point.y)\n\n# print(point.x, point.y)\n# print(point.x * point.y)\n\n# print(point.x * point.y)\n# print(point.x + point2.x)\n# print(point.x + point2.y)\n# print(point.x - point2.x)\n# print(point.x - point2.y)\n\n# print(point.x - point2.x)\n# print(point.x - point2.y)\n# print(point.x + point2.x)\n# print(point.x + point2.y)\n\n# print(point.x * point.y)\n\n# point2.x = point.x + point.y\n# point2.y = point.y + point.x\n\n# print(point.x, point.y)\n\n# print(point.x, point.y)\n# print(point.x * point.y)\n# print(point.x + point2.x)\n# print(point.x + point2.y)\n# print(point.x - point2.x)\n# print(point.x - point2.y)\n\n# print(point.x - point2.x)\n# print(point.x - point2.y)\n# print(point.x + point2.x)\n# print(point.x + point2.y)\n\n# print(point.x * point.y)\n\n# point2.x = point.x - point.y\n# point2.y = point.y - point.x\n\n# print(point.x, point.y)\n\n# print(point.x, point.y)\n# print(point.x * point.y)\n# print(point.x - point2.",
    "# https://www.geeksforgeeks.org/find-the-area-of-a-rectangle/\n# A rectangle is defined as [x_1, y_1, x_2, y_2]\n# The area of a rectangle is the sum of all the sides\n# Area of a rectangle is obtained by the following formula\n# A = (x2 - x1) * (y2 - y1)\n# where x1 and y1 are the top left corner coordinates of the rectangle\n# and x2 and y2 are the bottom right corner coordinates of the rectangle\n\n# http://www.geeksforgeeks.org/dynamic-programming-set-2-rectangle-area/\ndef rectangleArea(rectangle):\n    \"\"\"\n    :type rectangle: List[int]\n    :rtype: int\n    \"\"\"\n    x1, y1, x2, y2 = rectangle\n    return (x2 - x1) * (y2 - y1)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return str(self.x) + ',' + str(self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash(self.x) + hash(self.y)\n\n\nclass Solution(object):\n    def isPointInPolygon(self, p, q):\n        \"\"\"\n        :type p: Point\n        :type q: Point\n        :rtype: bool\n        \"\"\"\n        # check if the point is inside the polygon\n        # if point is inside the polygon, then it is on the boundary, so return true\n        # if point is outside the polygon, then it is not on the boundary\n        # so return false\n        # if point is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        # if it is outside the polygon, then return false\n        # if it is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        # if it is outside the polygon, then return false\n        # if it is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        # if it is outside the polygon, then return false\n        # if it is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        # if it is outside the polygon, then return false\n        # if it is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        # if it is outside the polygon, then return false\n        # if it is on the boundary, then check if it is inside the polygon or not\n        # if it is inside the polygon, then return true\n        #",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '<Point (%s, %s)>' % (self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Solution(object):\n    def computeArea(self, P, Q, R, S):\n        \"\"\"\n        :type P: Point\n        :type Q: Point\n        :type R: Point\n        :type S: Point\n        :rtype: int\n        \"\"\"\n        # area = (R.x - P.x) * (S.y - Q.y) - (S.x - Q.x) * (R.y - P.y)\n        # area = (R.x - P.x) * (S.y - Q.y) - (S.x - Q.x) * (R.y - P.y)\n        # area = (R.x - P.x) * (S.y - Q.y) - (S.x - Q.x) * (R.y - P.y)\n        # return area\n        return (Q.x - P.x) * (S.y - R.y) - (S.x - R.x) * (Q.y - P.y)",
    "class Solution(object):\n    def __init__(self, sides):\n        \"\"\"\n        :type sides: int\n        \"\"\"\n        self.sides = sides\n\n    def calculate(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.sides * (self.sides + 1) / 2\n\n\nif __name__ == '__main__':\n    assert Solution(4).calculate() == 8\n    assert Solution(5).calculate() == 20\n    assert Solution(6).calculate() == 40\n    assert Solution(7).calculate() == 56\n    assert Solution(8).calculate() == 80",
    "# https://www.hackerrank.com/challenges/rectangle-area/problem\n\ndef area(x, y, width, height):\n    \"\"\"\n    Returns the area of a rectangle with given coordinates and dimensions.\n    \"\"\"\n    return (width * height) / 2\n\nif __name__ == \"__main__\":\n    print(area(1, 1, 2, 3))\n    print(area(2, 2, 4, 4))\n    print(area(3, 4, 5, 6))\n    print(area(6, 7, 8, 9))",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a rectangle defined by its lower left corner (llc) and upper right\ncorner (urc), return the area of the rectangle.\n\nllc and urc are 2-dimensional points (coordinates on a plane).\n\"\"\"\n\nimport math\n\n\ndef rectangle_area(llc, urc):\n    \"\"\"\n    :type llc: tuple\n    :type urc: tuple\n    :rtype: int\n    \"\"\"\n    # llc is a point\n    # urc is a point\n    # area is the area of the rectangle\n    return (urc[0] - llc[0]) * (urc[1] - llc[1])\n\n\ndef test_rectangle_area():\n    assert rectangle_area((0, 0), (2, 3)) == 10\n    assert rectangle_area((1, 0), (3, 3)) == 12\n\n\nif __name__ == \"__main__\":\n    print(\"rectangle_area\")\n    test_rectangle_area()",
    "def rectangle_area(length, width):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :rtype: int\n    \"\"\"\n    return length * width\n\nif __name__ == '__main__':\n    print(rectangle_area(3, 4))",
    "class Solution:\n    # @param {integer[]} height\n    # @param {integer} width\n    # @return {integer}\n    def computeArea(self, height, width):\n        \"\"\"\n        :type height: List[int]\n        :type width: List[int]\n        :rtype: int\n        \"\"\"\n        return height[0] * width[1] - height[1] * width[0]",
    "#!/usr/bin/env python\n\nclass Solution(object):\n    def __init__(self, rectangle):\n        \"\"\"\n        :type rectangle: List[int]\n        \"\"\"\n        self.rectangle = rectangle\n\n    def area(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        width = self.rectangle[2] - self.rectangle[0]\n        height = self.rectangle[3] - self.rectangle[1]\n        return width * height\n\n\n\n# test\nrectangle = [1, 2, 3, 4]\nrectangle = [1, 2, 3, 4, 5]\nrectangle = [1, 2, 3, 4, 5, 6]\nrectangle = [1, 2, 3, 4, 5, 6, 7]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\nrectangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n        self.max_x = 0\n        self.max_y = 0\n\n    def isPointInRect(self, point, rect):\n        if point.x >= rect.x and point.x <= rect.x + rect.width and point.y >= rect.y and point.y <= rect.y + rect.height:\n            return True\n        else:\n            return False\n\n    def area(self, rect):\n        \"\"\"\n        :type rect: Point\n        :rtype: int\n        \"\"\"\n        # Check for empty rectangle.\n        if rect.x == rect.y == rect.width == rect.height == 0:\n            return 0\n\n        # Check for rectangle is a point.\n        if self.isPointInRect(rect, rect):\n            return 0\n\n        # Check for rectangle is a line.\n        if self.isPointInRect(rect.left, rect.top) and self.isPointInRect(rect.right, rect.top) and self.isPointInRect(rect.left, rect.bottom) and self.isPointInRect(rect.right, rect.bottom):\n            return 0\n\n        # Check for rectangle is a triangle.\n        if self.isPointInRect(rect.left, rect.top) and self.isPointInRect(rect.right, rect.top) and self.isPointInRect(rect.left, rect.bottom) and self.isPointInRect(rect.right, rect.bottom):\n            return 0\n\n        # Check for rectangle is a square.\n        if self.isPointInRect(rect.left, rect.top) and self.isPointInRect(rect.right, rect.top) and self.isPointInRect(rect.left, rect.bottom) and self.isPointInRect(rect.right, rect.bottom):\n            return (rect.right - rect.left) * (rect.bottom - rect.top)\n\n        # Check for rectangle is a trapezoid.\n        if self.is",
    "from math import sqrt\n\ndef area(height, width):\n    return height * width\n\nif __name__ == '__main__':\n    height, width = map(int, input().split())\n    print(area(height, width))",
    "def rectangle_area(height, width):\n    \"\"\"\n    :param height: height of the rectangle\n    :param width: width of the rectangle\n    :return: area of the rectangle\n    \"\"\"\n    return height * width\n\n\ndef main():\n    \"\"\"\n    Testing function\n    \"\"\"\n    print(rectangle_area(10, 10))\n    print(rectangle_area(15, 10))\n    print(rectangle_area(15, 15))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '<Point x=%r y=%r>' % (self.x, self.y)\n\nclass Solution(object):\n    def calculate(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        x1 = p1.x\n        y1 = p1.y\n        x2 = p2.x\n        y2 = p2.y\n        x3 = p3.x\n        y3 = p3.y\n        x4 = p4.x\n        y4 = p4.y\n\n        if x1 > x2:\n            x1, x2 = x2, x1\n        if y1 > y2:\n            y1, y2 = y2, y1\n        if x3 > x4:\n            x3, x4 = x4, x3\n        if y3 > y4:\n            y3, y4 = y4, y3\n\n        a = (x2 - x1) * (y4 - y3)\n        b = (x4 - x3) * (y1 - y3)\n        c = (x1 - x3) * (y2 - y1)\n        d = (x2 - x1) * (y1 - y2)\n\n        return (a + b + c + d) / 2\n\n\nif __name__ == '__main__':\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    p3 = Point(5, 6)\n    p4 = Point(7, 8)\n\n    print Solution().calculate(p1, p2, p3, p4)",
    "def area_rectangle(width, height):\n    \"\"\"\n    Given a width and height, return the area of a rectangle.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n    print(area_rectangle(3, 4))\n    print(area_rectangle(10, 20))",
    "def area(height, width):\n    \"\"\"\n    :param height: the height of the rectangle\n    :param width: the width of the rectangle\n    :return: the area of the rectangle\n    \"\"\"\n    return height * width\n\n\nif __name__ == '__main__':\n    assert area(4, 6) == 24, 'Wrong area'\n    assert area(5, 4) == 20, 'Wrong area'\n    assert area(5, 5) == 20, 'Wrong area'\n    assert area(10, 10) == 100, 'Wrong area'\n    assert area(10, 5) == 10, 'Wrong area'",
    "# Define a function\ndef area(width, height):\n    return width * height\n\n# Test your function\nassert area(4, 5) == 20\nassert area(3, 2) == 6\nassert area(5, 4) == 20\nassert area(3, 6) == 12\nassert area(3, 5) == 15\nassert area(1, 1) == 1\nassert area(5, 1) == 5",
    "#!/usr/bin/env python\n\nimport math\n\n\ndef rectangle_area(width, height):\n    return width * height\n\n\ndef rectangle_area_2(width, height):\n    return math.sqrt(width ** 2 + height ** 2)\n\n\nif __name__ == \"__main__\":\n    print rectangle_area(10, 20)\n    print rectangle_area_2(10, 20)",
    "import math\n\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: float\n    \"\"\"\n    return width * height\n\n\nif __name__ == '__main__':\n    assert area_of_rectangle(1, 2) == 2\n    assert area_of_rectangle(2, 1) == 2\n    assert area_of_rectangle(3, 5) == 5\n    assert area_of_rectangle(2, 3) == 4\n    assert area_of_rectangle(3, 2) == 4",
    "def area(width, height):\n    return width * height\n\nif __name__ == \"__main__\":\n    print(area(3, 4))\n    print(area(10, 2))\n    print(area(5, 10))\n    print(area(10, 2))\n    print(area(4, 5))\n    print(area(3, 6))\n    print(area(3, 7))\n    print(area(3, 9))\n    print(area(4, 6))\n    print(area(5, 6))",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution(object):\n    def computeArea(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        p1x, p1y = p1.x, p1.y\n        p2x, p2y = p2.x, p2.y\n        p3x, p3y = p3.x, p3.y\n        p4x, p4y = p4.x, p4.y\n        a = (p1x * p2y) - (p1y * p2x)\n        b = (p2x * p3y) - (p2y * p3x)\n        c = (p3x * p4y) - (p3y * p4x)\n        d = (p4x * p1y) - (p4y * p1x)\n        return abs(a + b + c - d) / 2",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def calculate(self, l, t, r, b):\n        \"\"\"\n        :param l:\n        :param t:\n        :param r:\n        :param b:\n        :return:\n        \"\"\"\n        if l > r:\n            return 0\n        if t > b:\n            return 0\n        self.area += (r - l) * (b - t)\n        return self.area\n\n\nif __name__ == \"__main__\":\n    Solution().calculate(0, 0, 1, 1)",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        \"\"\"\n        main method.\n        \"\"\"\n        self.area = 0\n\n    def calculate(self, l, b, r, t):\n        \"\"\"\n        :param l:\n        :param b:\n        :param r:\n        :param t:\n        :return:\n        \"\"\"\n        # base case\n        if l == r and b == t:\n            self.area = 0\n            return self.area\n\n        # recursive case\n        if r <= l or t <= b:\n            return 0\n\n        self.area += (r-l) * (t-b)\n\n        return self.calculate(l, b, r, t) + self.calculate(l, b, r, t)\n\n    def calculateArea(self, l, b, r, t):\n        \"\"\"\n        :param l:\n        :param b:\n        :param r:\n        :param t:\n        :return:\n        \"\"\"\n        return self.calculate(l, b, r, t)\n\n\nif __name__ == \"__main__\":\n    Solution().calculate(1, 1, 3, 3)",
    "# https://www.hackerrank.com/challenges/rectangle-area/problem\n\ndef rectangle_area(width, height):\n    \"\"\"\n    :param width: integer\n    :param height: integer\n    :return: integer\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n    width = int(input())\n    height = int(input())\n    print(rectangle_area(width, height))",
    "# https://www.hackerrank.com/challenges/rectangle-area/problem\n\ndef rectangle_area(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n\n    return width * height\n\nif __name__ == \"__main__\":\n    width, height = map(int, input().split())\n    print(rectangle_area(width, height))",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        if not width or not height:\n            return 0\n        return width * height",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({0}, {1})'.format(self.x, self.y)\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def isPointInPolygon(self, point, polygon):\n        \"\"\"\n        :type point: Point\n        :type polygon: List[Point]\n        :rtype: bool\n        \"\"\"\n        # http://www.mathblog.dk/how-to-find-if-a-point-is-inside-a-polygon/\n        if len(polygon) < 3:\n            return False\n        \n        x, y = point.x, point.y\n        n = len(polygon)\n        for i in range(n):\n            if y < polygon[i].y or y > polygon[i].y or x < polygon[i].x or x > polygon[i].x:\n                continue\n            if i == 0:\n                if y < polygon[n-1].y:\n                    return False\n            elif i == n-1:\n                if y > polygon[i-1].y:\n                    return False\n            else:\n                if y < polygon[i-1].y:\n                    return False\n                if y > polygon[i+1].y:\n                    return False\n        return True\n\n    def area(self, A, B, C, D):\n        \"\"\"\n        :type A: Point\n        :type B: Point\n        :type C: Point\n        :type D: Point\n        :rtype: int\n        \"\"\"\n        if B.y > C.y:\n            return (D.x - B.x) * (C.y - A.y) + (D.y - B.y) * (A.x - C.x)\n        else:\n            return (D.x - C.x) * (B.y - A.y) + (D.y - C.y) * (",
    "class Solution:\n    # @param {integer} a, b\n    # @return {integer}\n    def computeArea(self, a, b):\n        return (a * b) / 2\n\ns = Solution()\nprint s.computeArea(5, 10)",
    "import math\n\n\ndef rectangle_area(width, height):\n    return width * height\n\n\ndef rectangle_area_2(width, height):\n    return width * height / 2\n\n\ndef rectangle_area_3(width, height):\n    return width * height / 4\n\n\ndef rectangle_area_4(width, height):\n    return width * height / 8\n\n\ndef rectangle_area_5(width, height):\n    return width * height / 16\n\n\nif __name__ == \"__main__\":\n    print(rectangle_area(1, 2))\n    print(rectangle_area_2(1, 2))\n    print(rectangle_area_3(1, 2))\n    print(rectangle_area_4(1, 2))\n    print(rectangle_area_5(1, 2))",
    "def rectangle_area(width, height):\n    return width * height\n\nprint rectangle_area(4, 5)\nprint rectangle_area(3, 4)",
    "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\nclass Solution(object):\n    def __init__(self):\n        self.max = 0\n        self.min = 0\n        self.area = 0\n\n    def is_in_rectangle(self, p, l, r, t, b):\n        \"\"\"\n        :type p: Point\n        :type l: int\n        :type r: int\n        :type t: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        if p.x < l or p.y < t or p.x > r or p.y > b:\n            return False\n        return True\n\n    def findArea(self, p, l, r, t, b):\n        \"\"\"\n        :type p: Point\n        :type l: int\n        :type r: int\n        :type t: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if not self.is_in_rectangle(p, l, r, t, b):\n            return 0\n\n        self.max = max(self.max, (r - l) * (b - t))\n        self.min = min(self.min, (r - l) * (t - b))\n        self.area = self.max + self.min\n\n        return self.area\n\n\nif __name__ == '__main__':\n    s = Solution()\n    p = Point(1, 2)\n    l = 2\n    r = 3\n    t = 3\n    b = 4\n    print(s.findArea(p, l, r, t, b))",
    "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {number}\n    def computeArea(self, points):\n        if not points:\n            return 0\n        left = right = points[0].x\n        top = bottom = points[0].y\n        for point in points[1:]:\n            if point.x < left:\n                left = point.x\n            elif point.x > right:\n                right = point.x\n            if point.y < top:\n                top = point.y\n            elif point.y > bottom:\n                bottom = point.y\n        return (right - left) * (bottom - top)",
    "def area(width, height):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    # Note:\n    # 1. height and width can be negative\n    # 2. 1's and -1's are valid values for width and height\n    if width == 0 or height == 0:\n        return 0\n    return width * height\n\nprint area(0, 0)\nprint area(1, 1)\nprint area(2, 2)\nprint area(3, 4)\nprint area(4, 3)\nprint area(3, 2)\nprint area(2, 4)\nprint area(4, 3)\nprint area(3, 4)\nprint area(4, 3)\nprint area(4, 4)\nprint area(5, 5)\nprint area(5, 5)\nprint area(5, 5)\nprint area(5, 5)\nprint area(5, 5)\nprint area(5, 5)",
    "class Solution:\n    \"\"\"\n    @param: A 2D integer matrix\n    @return: An integer\n    \"\"\"\n    def areaOfRectangle(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m, n = len(mat), len(mat[0])\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    res += (i + 1) * (j + 1)\n        return res",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def get_area(self, l, w, h):\n        \"\"\"\n        :param l:\n        :param w:\n        :param h:\n        :return: the area of rectangle\n        \"\"\"\n        self.area = l * w + (l - 1) * w * h + (w - 1) * h + (h - 1) * w\n        return self.area\n\n\nif __name__ == \"__main__\":\n    Solution().get_area(1, 1, 1)\n    assert Solution().get_area(1, 1, 1) == 1, \"area of square: {}\".format(Solution().get_area(1, 1, 1))\n    assert Solution().get_area(1, 1, 2) == 1, \"area of rectangle: {}\".format(Solution().get_area(1, 1, 2))\n    assert Solution().get_area(2, 1, 1) == 2, \"area of rectangle: {}\".format(Solution().get_area(2, 1, 1))\n    assert Solution().get_area(2, 1, 2) == 4, \"area of rectangle: {}\".format(Solution().get_area(2, 1, 2))\n    assert Solution().get_area(3, 1, 1) == 3, \"area of rectangle: {}\".format(Solution().get_area(3, 1, 1))\n    assert Solution().get_area(3, 1, 2) == 9, \"area of rectangle: {}\".format(Solution().get_area(3, 1, 2))\n    assert Solution().get_area(4, 1, 1) == 4, \"area of rectangle: {}\".format(Solution().get_area(4, 1, 1))\n    assert Solution().get_area(4, 1, 2) == 16, \"area of rectangle: {}\".format(Solution().get_area(4, 1, 2))\n    assert Solution().get_area(5, 1, 1) == 5, \"area of rectangle: {}\".format(Solution().get_area(5, 1, 1))\n    assert Solution().get_area(5, 1,",
    "import math\n\ndef rectangle_area(height, width):\n    return height * width\n\nprint(rectangle_area(3, 4))\nprint(rectangle_area(2, 3))\nprint(rectangle_area(3, 2))\nprint(rectangle_area(3, 3))",
    "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        return (B - A) * (D - C) + (F - E) * (G - H)\n\nclass Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        return (B - A) * (D - C) + (F - E) * (G - H)\n\n\nif __name__ == \"__main__\":\n    print Solution().computeArea(1, 2, 3, 4, 5, 6, 7, 8)",
    "# Write your code here\n\n#!/usr/bin/env python\n\nclass Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @param {integer} w\n    # @param {integer} h\n    # @return {integer}\n    def computeArea(self, x, y, w, h):\n        x1 = x + w\n        y1 = y + h\n        return (x1 - x) * (y1 - y)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.computeArea(1, 2, 3, 4)",
    "def rectangle_area(width, height):\n    \"\"\"\n    :param width: width of rectangle\n    :param height: height of rectangle\n    :return: area of rectangle\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n    assert(rectangle_area(1, 2) == 4)",
    "from math import sqrt\n\ndef get_area(x1, y1, x2, y2):\n    \"\"\"\n    Returns the area of a rectangle with coordinates x1, y1\n    and x2, y2.\n    \"\"\"\n    return (x2 - x1) * (y2 - y1)\n\nif __name__ == '__main__':\n    x1 = int(input('Enter the x1: '))\n    y1 = int(input('Enter the y1: '))\n    x2 = int(input('Enter the x2: '))\n    y2 = int(input('Enter the y2: '))\n    print('The area of a rectangle is: {}'.format(get_area(x1, y1, x2, y2)))",
    "def rectangle_area(width, height):\n    return width * height\n\nif __name__ == '__main__':\n    print(rectangle_area(5, 3))\n    print(rectangle_area(4, 3))",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        return width * height\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.computeArea(5, 10))",
    "# Definition for a point\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"Point(%s, %s)\" % (self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Solution(object):\n    def __init__(self):\n        self.max_length = 0\n\n    def area(self, p1, p2, p3, p4):\n        area = 0\n        x1 = min(p1.x, p2.x, p3.x, p4.x)\n        y1 = min(p1.y, p2.y, p3.y, p4.y)\n        x2 = max(p1.x, p2.x, p3.x, p4.x)\n        y2 = max(p1.y, p2.y, p3.y, p4.y)\n        area += abs(x2 - x1) * abs(y2 - y1)\n        self.max_length = max(self.max_length, abs(x2 - x1) + abs(y2 - y1))\n        return area\n\n    def get_max_area(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        points = sorted(points, key=lambda p: (p.x, p.y))\n        return self.area(points[0], points[1], points[2], points[3])\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.area(p1,p2,p3,p4)",
    "from math import sqrt\n\ndef rectangleArea(side1, side2):\n    return side1 * side2\n\ndef test():\n    assert rectangleArea(1, 2) == 4\n\nif __name__ == '__main__':\n    test()",
    "import math\n\ndef rectangle_area(width, height):\n    return math.sqrt(width ** 2 + height ** 2)\n\n# print rectangle_area(5, 10)\n# print rectangle_area(10, 15)\n# print rectangle_area(20, 25)\n\ndef main():\n    print rectangle_area(5, 10)\n    print rectangle_area(10, 15)\n    print rectangle_area(20, 25)\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def __init__(self):\n        self.maxArea = 0\n\n    def isPointInRectangle(self, point, p1, p2):\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        if point.x < min(x1, x2):\n            return False\n        if point.y < min(y1, y2):\n            return False\n        if point.x > max(x1, x2):\n            return False\n        if point.y > max(y1, y2):\n            return False\n        return True\n\n    def area(self, p1, p2, p3, p4):\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n        x4, y4 = p4.x, p4.y\n\n        s1 = (x2-x1)**2 + (y2-y1)**2\n        s2 = (x4-x3)**2 + (y4-y3)**2\n\n        s = s1 + s2\n        if s == 0:\n            return 0\n        return (s1*(y4-y3) + s2*(x4-x3))/s\n\n    def isRectangleCoverPoint(self, points):\n        for p in points:\n            for q in points:\n                if self.isPointInRectangle(p, points[0], points[1]):\n                    return True\n        return False\n\n    def rectangleArea(self, points):\n        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0].x*points[0].y\n        p",
    "import math\n\ndef rectangle_area(width, height):\n    return math.sqrt(width**2 + height**2)\n\n#Test Cases\nprint(\"Test Case 1:\", rectangle_area(5, 5))\nprint(\"Test Case 2:\", rectangle_area(10, 10))\nprint(\"Test Case 3:\", rectangle_area(10, 20))\nprint(\"Test Case 4:\", rectangle_area(5, 20))",
    "class Solution:\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(map(lambda x: int(x[0]) * int(x[1]), s.split(\"x\")))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        x1, y1, x2, y2 = min(A, B, C, D), min(E, F, G, H), max(A, B, C, D), max(E, F, G, H)\n        return (x2 - x1) * (y2 - y1)\n\n\nif __name__ == \"__main__\":\n    print Solution().computeArea(1, 2, 3, 4, 5, 6, 7, 8)",
    "class Solution:\n    # @return an integer\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        area = 0\n        if A > 0 and B > 0 and C > 0 and D > 0 and E > 0 and F > 0 and G > 0 and H > 0:\n            area = (C - A) * (D - B)\n            area += (G - E) * (H - F)\n            area += (B - D) * (A - G)\n            area += (D - H) * (B - E)\n            area += (A - F) * (C - G)\n            area += (E - H) * (A - B)\n            area += (G - F) * (C - D)\n            return area\n        return 0\n\nif __name__ == '__main__':\n    A = 3\n    B = 4\n    C = 2\n    D = 6\n    E = 8\n    F = 4\n    G = 1\n    H = 3\n    s = Solution()\n    print s.computeArea(A, B, C, D, E, F, G, H)",
    "def area(l, w, h):\n    return l*w\n\nif __name__ == '__main__':\n    print(area(2, 3, 4))\n    print(area(2, 3, 1))\n    print(area(1, 2, 3))\n    print(area(1, 2, 3.5))",
    "class Solution:\n    # @param {integer} width\n    # @param {integer} height\n    # @return {integer}\n    def computeArea(self, width, height):\n        return width * height",
    "class Solution(object):\n    def __init__(self, rectangle):\n        \"\"\"\n        :type rectangle: List[int]\n        \"\"\"\n        self.rectangle = rectangle\n        self.area = 0\n        self.max_area = 0\n        self.max_area_pos = -1\n\n    def area_of_rectangle(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.area\n\n    def max_area(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.max_area\n\n    def max_area_pos(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.max_area_pos\n\nclass Solution2(object):\n    def __init__(self, rectangle):\n        \"\"\"\n        :type rectangle: List[int]\n        \"\"\"\n        self.rectangle = rectangle\n        self.area = 0\n        self.max_area = 0\n        self.max_area_pos = -1\n\n    def area_of_rectangle(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        area = 0\n        for i in range(len(self.rectangle)):\n            area += self.rectangle[i]\n        return area\n\n    def max_area(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.max_area\n\n    def max_area_pos(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.max_area_pos\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(rectangle)\n# param_1 = obj.area_of_rectangle()\n# param_2 = obj.max_area()\n# param_3 = obj.max_area_pos()",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport math\n\ndef area(width, height):\n    return math.sqrt(width ** 2 + height ** 2)\n\nif __name__ == '__main__':\n    print area(10, 20)",
    "def area(height, width):\n    return height * width\n\n# ------------------------------------------------------------\n# Testing\n# ------------------------------------------------------------\n\ndef test_area():\n    assert area(2, 3) == 9\n    assert area(3, 4) == 12\n\n# ------------------------------------------------------------\n# Main\n# ------------------------------------------------------------\n\ndef main():\n    test_area()\n\nif __name__ == '__main__':\n    main()",
    "# Your function will be called as follows:\n# functionName(width, height)\n# where width and height are ints\n#\n# For example, if the function is called like this:\n# function(2, 2)\n# it should return 4.\n\ndef rectangle(width, height):\n    return width * height\n\n# TEST CASES\n\n# rectangle(2, 2) should return 4.\n# rectangle(3, 2) should return 9.\n# rectangle(2, 3) should return 6.\n# rectangle(1, 1) should return 1.\n\n# Hint:\n# Use the formula to compute the area of a rectangle.\n# You can assume that the rectangle is square.\n\n# SAMPLE OUTPUT\n#\n# rectangle(2, 2)\n# 4\n#\n# rectangle(3, 2)\n# 9\n#\n# rectangle(2, 3)\n# 6\n#\n# rectangle(1, 1)\n# 1\n\nrectangle(2, 2)\n4\n\nrectangle(3, 2)\n9\n\nrectangle(2, 3)\n6\n\nrectangle(1, 1)\n1"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}