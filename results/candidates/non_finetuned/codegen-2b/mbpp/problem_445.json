{
  "problem": {
    "task_id": "MBPP/456",
    "prompt": "Write a function to reverse strings in a given list of string values.",
    "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
    "test_list": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ],
    "challenge_test_list": [],
    "problem_id": 445
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def reverseStrings(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for i in range(len(nums)):\n            nums[i], nums[-i-1] = nums[-i-1], nums[i]\n\nif __name__ == \"__main__\":\n    print Solution().reverseStrings([1, 2, 3])",
    "import unittest\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for s in strings:\n            result.append(s[::-1])\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/reverse-strings-in-a-string-list/solution/\n# Approach 1: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 2: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 3: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 4: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 5: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 6: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 7: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 8: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 9: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 10: Reverse String\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n\n# Approach 11: Reverse String\n# Complexity Analysis\n# Time",
    "# https://leetcode.com/problems/reverse-string/\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        if not strings:\n            return\n        for i in range(len(strings)):\n            strings[i], strings[-i - 1] = strings[-i - 1], strings[i]",
    "# https://leetcode.com/problems/reverse-words-in-a-string/\n# https://leetcode.com/problems/reverse-words-in-a-string/solution/\n# [Accepted, 90.28%]\n# Total Accepted:   2235\n# Total Submissions: 9227\n# Testcase Example: 'abc'\n# Testcase Example: 'Hello World!'\n# Testcase Example: ['Hello World', 'This is a test case']\n# Testcase Example: ['Hello World', 'This is a test case', 'This is a test case']\n# Testcase Example: ['a', 'b', 'c']\n# Testcase Example: ['ab', 'c', 'a']\n# Testcase Example: ['Hello World', 'This is a test case', 'This is a test case', 'This is a test case']\n# Testcase Example: ['a', 'b', 'c', 'd', 'e', 'f']\n# Testcase Example: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n# Testcase Example: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# Total Accepted:   2546\n# Total Submissions: 14862\n# Testcase Example: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# Total Submissions: 14862\n# Testcase Example: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r",
    "import re\n\ndef reverse(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(reversed(string))\n    return reversed_strings\n\ndef reversed(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(reversed(string))\n\nif __name__ == '__main__':\n    strings = ['Hello', 'World', 'Python', 'Java']\n    print(reverse(strings))",
    "def reverse_string(strings):\n    for i in range(len(strings)):\n        strings[i] = strings[i][::-1]\n    return strings\n\nif __name__ == '__main__':\n    strings = [\"hello\", \"world\", \"moon\"]\n    reverse_string(strings)\n    for s in strings:\n        print s",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: None Do not return anything, modify strings in-place instead.\n        \"\"\"\n        if not strings:\n            return\n        \n        rev_str = ''\n        for s in strings:\n            rev_str += s[::-1]\n        \n        for i in range(len(strings)):\n            strings[i] = rev_str[i]",
    "def reverse_string(string_list):\n    \"\"\"\n    :type string_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    rev_list = []\n    for i in range(len(string_list)):\n        rev_list.append(string_list[len(string_list) - 1 - i])\n    return rev_list\n\n# Test Cases\ntest_cases = [\n    (['abcdefg', 'hijklmn', 'opqrstu', 'vwxyz'],\n     ['cdefghjiklmnopqrstuvwxyz']),\n    (['ab', 'cde', 'fgh', 'ijkl'],\n     ['cdeabgfijklmnopqrstu']),\n    (['abcd', 'efgh', 'ijkl','mnop'],\n     ['mnopefghijklabcd'])\n]\n\nfor case in test_cases:\n    print(reverse_string(case[0]))",
    "def reverse(strings):\n    \"\"\"\n    reverse(strings):\n        Return a list of reversed strings.\n    \"\"\"\n    result = []\n    for s in strings:\n        result.append(s[::-1])\n    return result\n\ndef main():\n    strings = [\n        \"Hello\",\n        \"Goodbye\",\n        \"Hello Again\",\n        \"Goodbye Again\"\n    ]\n    print(reverse(strings))\n\nif __name__ == '__main__':\n    main()",
    "def reverse_string(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    \n    return [s[::-1] for s in strings]",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: None Do not return anything, modify strings in-place instead.\n        \"\"\"\n        for i in range(len(strings)):\n            strings[i], strings[len(strings) - 1 - i] = strings[len(strings) - 1 - i], strings[i]\n\nif __name__ == \"__main__\":\n    assert Solution().reverseStrings([\"hello\"]) == \"olleh\"",
    "# TODO: Implement it.\ndef reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in xrange(len(strings)):\n        strings[i], strings[-1-i] = strings[-1-i], strings[i]\n    return strings\n\nif __name__ == '__main__':\n    strings = ['abcde', 'bcd', 'cde', 'ab']\n    print reverse_strings(strings)",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        strings = list(strings)\n        for i in xrange(len(strings)):\n            strings[i], strings[-1 - i] = strings[-1 - i], strings[i]\n\n        return strings",
    "from collections import deque\n\ndef reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reverse_strings = []\n    for string in strings:\n        reverse_strings.append(reverse_string(string))\n    return reverse_strings\n\ndef reverse_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(reversed(string))\n\ndef main():\n    strings = ['a', 'b', 'c', 'd']\n    reverse_strings(strings)\n    print(strings)\n    reverse_strings(['a', 'b', 'c'])\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef reverse(string_list):\n    return [re.sub(r'\\W+','', s) for s in string_list]\n\n\ndef main():\n    string_list = ['hello', 'world', 'this', 'is', 'a', 'test', '!']\n    print(reverse(string_list))\n\nif __name__ == '__main__':\n    main()",
    "def reverse_strings(strings):\n    for i in range(len(strings)):\n        strings[i] = strings[i][::-1]\n\n    return strings\n\ndef reverse_strings_recursive(strings):\n    if not strings:\n        return strings\n\n    first = strings[0]\n    rest = strings[1:]\n    reverse_strings_recursive(rest)\n    strings[0] = first\n    reverse_strings_recursive(rest)\n    return strings\n\ndef reverse_strings_iterative(strings):\n    reverse_strings_iterative_helper(strings, 0, len(strings)-1)\n    return strings\n\ndef reverse_strings_iterative_helper(strings, start, end):\n    if start == end:\n        return\n\n    first = strings[start]\n    rest = strings[start+1:end]\n    reverse_strings_iterative_helper(rest, start+1, end)\n    strings[start] = first\n    reverse_strings_iterative_helper(rest, start, end-1)\n    return strings\n\n#Test cases\nstrings = ['Hello', 'world']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['Hello', 'world', 'goodbye']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['Hello', 'world', 'goodbye', 'hello']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['hello', 'goodbye', 'world']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['hello', 'goodbye', 'world']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['hello', 'goodbye', 'world']\nprint('reverse_strings: ', reverse_strings(strings))\n\nstrings = ['hello', 'goodbye', 'world']\nprint('reverse_strings: ', reverse_strings(strings))",
    "import unittest\n\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        strings.reverse()\n        for i in xrange(len(strings) - 1, -1, -1):\n            strings[i], strings[i - 1] = strings[i - 1], strings[i]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/reverse-string-ii/solution/\n\n# DFS\n# 3ms 100%\nclass Solution {\n    public void reverseStrings(List<String> strings) {\n        for (int i = 0; i < strings.size() - 1; i++) {\n            String tmp = strings.get(i);\n            strings.set(i, strings.get(i + 1));\n            strings.set(i + 1, tmp);\n        }\n    }\n}\n\n# BFS\n# 1ms 100%\nclass Solution {\n    public void reverseStrings(List<String> strings) {\n        if (strings.size() <= 1) return;\n        for (int i = 0; i < strings.size() / 2; i++) {\n            String tmp = strings.get(i);\n            strings.set(i, strings.get(strings.size() - 1 - i));\n            strings.set(strings.size() - 1 - i, tmp);\n        }\n    }\n}\n'''",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for s in strings:\n        result.append(s[::-1])\n    return result\n\nif __name__ == '__main__':\n    strings = [\n        \"Hello World\",\n        \"Hello\",\n        \"World Hello\",\n        \"Hello, World\",\n        \"Hello, World, Hello\",\n        \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello",
    "# https://www.hackerrank.com/challenges/reverse-strings/problem\n# Reverse the strings in the list\n# Solution:\n# Iterate through the list and reverse the string in the list\n# The reversed string can be obtained by reversing the list\n# The total number of iterations is equal to the size of the list\ndef reverse_strings(arr):\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    return arr",
    "from collections import defaultdict\n\n\nclass Solution:\n\n    def reverseWords(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        # sort strs, then reverse\n        strs = sorted(strs)\n        strs.reverse()\n        # create a dict of word -> index\n        words = defaultdict(int)\n        for index, word in enumerate(strs):\n            words[word] = index\n        # reverse words\n        return [strs[words[word]] for word in strs]",
    "# https://leetcode.com/problems/reverse-strings/\n\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        # iterate over all string in the list\n        # reverse each string\n        # return the list\n        # reverse each string again\n\n        result = []\n        for s in strings:\n            # reverse string\n            result.append(s[::-1])\n\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.reverseStrings(['cba', 'dcb'])",
    "# https://leetcode.com/problems/reverse-strings/description/\n# Given a list of strings, return a new list of strings in which each element is the reverse of the\n# element that precedes it.\n#\n# For example, [\"hello\",\"world\"] should return [\"dlrow,olleh\"], and [\"a\",\"b\",\"c\"] should return\n# [\"dcba\"].\n#\n# Follow up:\n# Could you do it without extra space? (Note: the returned list must not contain any duplicates).\n#\n# Companies\n# Pocket Gems\n# Related Topics\n# Binary Search\n# Similar Questions\n# Reverse String\n#\nimport unittest\nimport collections\n\nclass Solution(object):\n    def reverseStrings(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: List[str]\n        \"\"\"\n        nums.sort()\n        nums.reverse()\n        return nums\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/reverse-strings/solution/\n#\n# Approach #1: Sort\n# Complexity Analysis\n# Time Complexity: O(n log n)\n# Space Complexity: O(1)\n#\n# Approach #2: Binary Search\n# Complexity Analysis\n# Time Complexity: O(n log n)\n# Space Complexity: O(n)\n\n# Approach #3: Dynamic Programming\n# Complexity Analysis\n# Time Complexity: O(n log n)\n# Space Complexity: O(n)\n\n# Approach #4: Sort + Reverse\n# Complexity Analysis\n# Time Complexity: O(n log n)\n# Space Complexity: O(1)\n\n# Approach #5: Sort + Reverse\n# Complexity Analysis\n# Time Complexity: O(n log n)\n# Space Complexity: O(1)\n\n# Approach #6: Sort + Reverse\n# Complexity Analysis\n# Time Complexity: O(n log n)",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in strings]\n\nif __name__ == '__main__':\n    strings = ['Hello', 'World']\n    print(reverse_strings(strings))",
    "# https://www.hackerrank.com/challenges/reverse-strings-in-a-list-of-strings\ndef reverse_strings_in_a_list_of_strings(strings):\n    reverse_strings = [str(s) for s in strings]\n    reverse_strings.reverse()\n    return reverse_strings",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    \n    reverse_list = []\n    for string in strings:\n        reverse_list.append(string[::-1])\n    return reverse_list",
    "import unittest\n\nfrom string_utils import reverse_string\n\n\nclass TestStringUtils(unittest.TestCase):\n    def test_reverse_string(self):\n        self.assertEqual(reverse_string('hello'), 'olleh')\n        self.assertEqual(reverse_string('hello', 'a'), 'lahe')\n        self.assertEqual(reverse_string('hello', 'abc'), 'hlea')\n        self.assertEqual(reverse_string('hello', 'abcd'), 'hlea')\n\n    def test_reverse_string_with_empty_input(self):\n        self.assertEqual(reverse_string(''), '')\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution:\n    # @param {string[]} strs\n    # @return {void} Do not return anything, modify strs in-place instead.\n    def reverseStrings(self, strs):\n        if not strs:\n            return\n        \n        for i in range(0, len(strs) / 2):\n            strs[i], strs[-1 - i] = strs[-1 - i], strs[i]\n            \n        return",
    "import collections\n\ndef reverse_string(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[i] for i in reversed(range(len(s)))]\n\n\nif __name__ == '__main__':\n    s = 'abc'\n    print(reverse_string(s))\n    s = [1, 2, 3]\n    print(reverse_string(s))\n    s = ['a', 'b', 'c']\n    print(reverse_string(s))\n    s = ['a', 'b', 'c', 'd', 'e', 'f']\n    print(reverse_string(s))\n    s = [1, 2, 3, 4]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(reverse_string(s))\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(reverse_string(s))",
    "def reverse_string(string):\n    \"\"\"\n    :type string: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reversed_string = []\n    for char in string:\n        reversed_string.append(chr(ord(char) - ord('a') + ord('A')))\n    return reversed_string\n\n# Your ReverseString solution here.",
    "import sys\n\nclass Solution:\n    def reverseStrings(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return [s[::-1] for s in nums]\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [\n        'a',\n        'bb',\n        'ccc',\n        'dddd'\n    ]\n    nums = [\n        'ab',\n        'abc',\n        'abc',\n        'abc',\n        'abc'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'abc',\n        'abc',\n        'abc'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [\n        'a',\n        'a',\n        'a'\n    ]\n    nums = [",
    "# https://oj.leetcode.com/problems/reverse-strings-in-string-list/\n\n# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[String]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        # https://oj.leetcode.com/discuss/7352/dp-solution\n        if not strings:\n            return\n\n        # DP, O(n)\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2] + s[i-1].count('a'))\n        # dp[i] = max(dp[i-1], dp[i-2]",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        for i in range(len(strings)-1, -1, -1):\n            strings[i], strings[i+1] = strings[i+1], strings[i]",
    "# https://github.com/hackerrank/challenges/blob/master/solutions/reverse-strings-in-a-string-list.py\n# https://www.geeksforgeeks.org/reverse-string-in-a-list/\ndef reverse(string_list):\n    \"\"\"\n    string_list = [\n        'a',\n        'bc',\n        'd',\n        'ef',\n        'gh',\n        'ij',\n        'kl',\n       'mn',\n        'op',\n        'qr',\n        'tu',\n        'uv',\n        'wxyz'\n    ]\n\n    return [\n       ''.join(reversed(string)) for string in string_list\n    ]\n\nif __name__ == '__main__':\n    string_list = [\n        'a',\n        'bc',\n        'd',\n        'ef',\n        'gh',\n        'ij',\n        'kl',\n       'mn',\n        'op',\n        'qr',\n        'tu',\n        'uv',\n        'wxyz'\n    ]\n\n    print(reverse(string_list))\n    \"\"\"\n    string_list = [\n        'a',\n        'bc',\n        'd',\n        'ef',\n        'gh',\n        'ij',\n        'kl',\n       'mn',\n        'op',\n        'qr',\n        'tu',\n        'uv',\n        'wxyz'\n    ]\n\n    string_list = [\n        'a',\n        'bc',\n        'd',\n        'ef',\n        'gh',\n        'ij',\n        'kl',\n       'mn',\n        'op',\n        'qr',\n        'tu',\n        'uv',\n        'wxyz'\n    ]\n\n    print(reverse(string_list))\n    \"\"\"",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n\n    for string in strings:\n        result.append(string[::-1])\n\n    return result",
    "def reverse_string(values):\n    \"\"\"\n    :type values: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return list(reversed(values))\n\nif __name__ == '__main__':\n    assert(reverse_string([\"Hello\", \"World\"]) == [\"World\", \"Hello\"])",
    "def reverse_string(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: None\n    \"\"\"\n    reverse_str = []\n    for i in strings:\n        reverse_str.append(i[::-1])\n    return reverse_str\n\nif __name__ == \"__main__\":\n    s = [\"Hello\", \"World\"]\n    print(reverse_string(s))",
    "class Solution(object):\n    def reverseStrings(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # TODO: todo\n        pass\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.reverseStrings(['a', 'b', 'c']))",
    "class Solution(object):\n    def reverseStr(self, s, n):\n        \"\"\"\n        :type s: List[str]\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+n] for i in range(0, len(s), n)]\n\n\n# Note:\n# 1. Reverse the string.\n# 2. Reverse the string again.\n# 3. The end result should be a list of strings.\n# 4. Return a list of strings.\n\n# Note:\n# 1. Reverse the string.\n# 2. Reverse the string again.\n# 3. The end result should be a list of strings.\n# 4. Return a list of strings.",
    "from collections import namedtuple\n\n# https://leetcode.com/problems/reverse-words-in-string/\n\nclass Solution(object):\n    def reverseWords(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if not strs:\n            return []\n        p = namedtuple('p', 'pre_word pre_end_word next_word next_end_word')\n        reverse = []\n        for word in strs:\n            p = p(word, 0, len(word), 0)\n            reverse.append(p.pre_word)\n            reverse.append(p.pre_end_word)\n            reverse.append(p.next_word)\n            reverse.append(p.next_end_word)\n        reverse.append(p.pre_word)\n        reverse.append(p.pre_end_word)\n        return reverse",
    "class Solution:\n    # @param {List<string>} strs\n    # @return {void} Do not return anything, modify strs in-place instead.\n    def reverseStrings(self, strs):\n        i = 0\n        j = len(strs)-1\n        while i < j:\n            strs[i], strs[j] = strs[j], strs[i]\n            i += 1\n            j -= 1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.reverseStrings([])\n    s.reverseStrings([1, 2, 3])",
    "class Solution:\n    # @param {List<string>} arr\n    # @return {void} Do not return anything, modify arr in-place instead.\n    def reverseStrings(self, arr):\n        for i in range(0, len(arr)):\n            arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]",
    "def reverse_strings(strings):\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\ndef main():\n    strings = [\n        \"A\",\n        \"BC\",\n        \"D\"\n    ]\n    print(reverse_strings(strings))\n\nif __name__ == \"__main__\":\n    main()",
    "import unittest\nfrom string_reverse_function import reverse\n\n\nclass TestStringReverse(unittest.TestCase):\n    def test_reverse(self):\n        self.assertEqual(reverse([\"A\"]), [\"A\"])\n        self.assertEqual(reverse([\"\"]), [\"\"])\n        self.assertEqual(reverse([\"A\", \"B\", \"C\"]), [\"C\", \"B\", \"A\"])\n        self.assertEqual(reverse([\"A\", \"B\", \"C\"]), [\"C\", \"B\", \"A\"])\n        self.assertEqual(reverse([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]),\n                         [\"E\", \"D\", \"F\", \"C\", \"B\", \"A\"])\n\nif __name__ == '__main__':\n    unittest.main()",
    "import unittest\n\n\ndef reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in strings]\n\n\nclass ReverseStringsTest(unittest.TestCase):\n    def test_reverse_strings(self):\n        self.assertEqual(\n            reverse_strings([\"hello\", \"world\", \"this\"]),\n            [\"thi\", \"wo\", \"rld\"]\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution:\n    def reverseStr(self, s: List[String]) -> None:\n        if len(s) == 0:\n            return\n        s.reverse()\n        for i in range(len(s)):\n            s[i] = s[i].rstrip()\n            if len(s[i]) == 0:\n                s.pop(i)\n                i -= 1\n        return\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.reverseStr([String(\"abcd\"), String(\"efgh\")])",
    "# https://leetcode.com/problems/reverse-words-in-string/\n\nclass Solution(object):\n    def reverseWords(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return [s[::-1] for s in strs]",
    "class Solution:\n    # @param {string[]} strs\n    # @return {string[]}\n    def reverseStrings(self, strs):\n        for i in range(0, len(strs) / 2):\n            strs[i], strs[len(strs) - i - 1] = strs[len(strs) - i - 1], strs[i]\n        return strs\n\nif __name__ == '__main__':\n    solution = Solution()\n    strs = ['hello', 'leetcode']\n    strs = [\"hello\", \"leetcode\"]\n    strs = [\"hello\", \"leetcode\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n    strs = [\"hello\", \"leetcode\",",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for s in strings:\n        res.append(s[::-1])\n    return res",
    "from __future__ import print_function\n\nimport sys\n\n__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def reverseStrings(self, nums):\n        \"\"\"\n        reverse string list\n        :param nums: List[str]\n        :return: None\n        \"\"\"\n        nums.reverse()\n        for i in xrange(len(nums)):\n            nums[i] = nums[i][::-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseStrings(['a', 'b', 'c', 'd', 'e']))\n    print(sol.reverseStrings(['a', 'b', 'c', 'd', 'e', 'f']))",
    "import sys\n\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if not strings:\n            return strings\n        strings.sort()\n        return [s[::-1] for s in strings]\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.reverseStrings(sys.argv[1])",
    "import sys\n\n\ndef reverse(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [str(x) for x in reversed(list_of_strings)]\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    string_list = input()\n    list_of_strings = reverse(string_list.split(\",\"))\n    print(list_of_strings)\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: None Do not return anything, modify strings in-place instead.\n        \"\"\"\n        strings.reverse()",
    "from collections import defaultdict\n\n\ndef reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    # build a dictionary to find the reverse of each string\n    reverse_dict = defaultdict(list)\n    for s in strings:\n        reverse_dict[s].append(s)\n    # reverse the dictionary\n    reverse_dict_copy = defaultdict(list)\n    for key in reverse_dict:\n        reverse_dict_copy[reverse_dict[key][0]] = reverse_dict[key]\n    return [reverse_dict_copy[s] for s in reverse_dict_copy]",
    "from collections import Counter\n\ndef reverse_string(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reverse_string_dict = {\n        \"\".join(reversed(s)): s\n        for s in strings\n    }\n    return [reverse_string_dict[s] for s in strings]\n\nif __name__ == \"__main__\":\n    strings = [\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"ab",
    "# https://leetcode.com/problems/reverse-string-in-place/\n# \n# Given an array of strings, return an array of reversed strings.\n# \n# Example 1:\n# \n# Input: [\"Hello\", \"World\"]\n# Output: [\"dlrow\", \"oWleH\"]\n# Example 2:\n# \n# Input: [\"a\", \"b\", \"c\"]\n# Output: [\"c\", \"b\", \"a\"]\n# \n# Note:\n# \n# All inputs will be in lower-case.\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
    "class Solution(object):\n    def reverseStrings(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # Time:  O(n)\n        # Space: O(n)\n        nums.reverse()\n        for i in range(len(nums)):\n            nums[i] = nums[i][::-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [\"Hello\", \"World\"]\n    print(sol.reverseStrings(nums))",
    "def reverse_string(string):\n    \"\"\"\n    Input:\n        string: A list of string values.\n\n    Output:\n        A list of string values in reversed order.\n    \"\"\"\n    return ''.join(reversed(string))\n\n\ndef test_reverse_string():\n    assert reverse_string(['a', 'b', 'c']) == ['c', 'b', 'a']\n    assert reverse_string(['', 'a', 'b', 'c']) == ['c', 'b', 'a']\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/reverse-words-in-a-string/description/\n\nclass Solution(object):\n    def reverseWords(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(strs)):\n            result.append(strs[i])\n            if i < len(strs) - 1 and strs[i + 1] =='':\n                result[-1] = result[-1][:len(result[-1]) - 1] + result[-1][len(result[-1]) - 1:] + strs[i + 1]\n                i += 1\n        return result\n\n\ndef main():\n    solution = Solution()\n    strs = [\"Hello\", \"world\", \"how are you\"]\n    print solution.reverseWords(strs)\n\nif __name__ == '__main__':\n    main()",
    "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        strings.reverse()\n        for i in range(len(strings)):\n            strings[i] = strings[i][::-1]\n        strings.reverse()",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return map(lambda s: s[::-1], strings)",
    "# https://www.hackerrank.com/challenges/reverse-v2/problem\n\ndef reverse(string):\n    return string[::-1]\n\ndef main():\n    string = input().strip()\n    print(reverse(string))\n\nif __name__ == \"__main__\":\n    main()",
    "def reverse_string(str_list):\n    # write your code here\n    return_list = []\n    for str in str_list:\n        return_list.append(str[::-1])\n    return return_list\n\nif __name__ == '__main__':\n    test_str = ['abc', 'd', 'efgh', 'ij']\n    test_str_reverse = ['d', 'efgh', 'ij', 'abc']\n    print reverse_string(test_str)\n    print reverse_string(test_str_reverse)\n    #print reverse_string(test_str)",
    "class Solution(object):\n    def reverseStr(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        s.reverse()\n        for i in range(len(s)-1, -1, -1):\n            s[i], s[i-1] = s[i-1], s[i]",
    "# https://www.hackerrank.com/challenges/reverse-a-string-in-a-list\n# \n# Python 3.5\n\ndef reverse_string(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_2(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_3(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_4(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_5(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_6(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_7(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_8(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_9(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_10(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef reverse_string_list_11(arr):\n    return [x[::-1] for x in arr]\n\n# Returns a new list with the elements in reverse order\ndef",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    s = ''\n    for i in strings:\n        s += i[::-1]\n    return s\n\nif __name__ == '__main__':\n    strings = [\n        'ABC',\n        'BCD',\n        'CDE',\n        'DEF',\n        'ABCD',\n        'ABCDE',\n        'ABCDEF',\n        'ABCDEFGH',\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        '0123456789'\n    ]\n    print(reverse_strings(strings))",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in strings]",
    "def reverse(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    \n    result = []\n    for string in strings:\n        for i in range(len(string)):\n            result.append(string[::-1])\n    return result",
    "def reverse_string(str_list):\n    \"\"\"\n    :type str_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for i in str_list:\n        result.append(i[::-1])\n    return result",
    "def reverse(l):\n  \"\"\"\n  Args:\n    l: list of string values\n  Returns:\n    new list of string values\n  \"\"\"\n  return [v[::-1] for v in l]\n\ndef main():\n  l = ['a', 'b', 'c']\n  print(reverse(l))\n  l = ['a', 'b', 'c', 'd', 'e', 'f']\n  print(reverse(l))\n\nif __name__ == '__main__':\n  main()",
    "def reverse_string(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reverse_strings = []\n    for string in strings:\n        reverse_strings.append(string[::-1])\n    return reverse_strings\n\nif __name__ == '__main__':\n    strings = [\"Hello\", \"World\"]\n    reverse_strings = reverse_string(strings)\n    print(reverse_strings)",
    "import sys\nimport re\n\ndef reverse_string(string_list):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n\n    The function should return a list of reversed string values.\n    \"\"\"\n    new_list = []\n    for i in range(len(string_list)):\n        new_list.append(string_list[i][::-1])\n    return new_list\n\ndef main():\n    \"\"\"\n    Write a program that reverses the string \"hello\" in the list [ \"hello\",\n    \"ll\", \"lll\", \"hello\" ].\n    \"\"\"\n    string_list = [ \"hello\", \"ll\", \"lll\", \"hello\" ]\n    print reverse_string(string_list)\n    return 0\n\nif __name__ == \"__main__\":\n    main()",
    "def reverse_string(string):\n    \"\"\"\n    :type string: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in string]\n\ndef main():\n    print(reverse_string([\"hello\", \"world\"]))\n    print(reverse_string([\"Hello\", \"World\"]))\n    print(reverse_string([\"Hello\", \"World\", \"!\"]))\n\nif __name__ == '__main__':\n    main()",
    "from collections import deque\n\nclass Solution:\n    def reverseStrings(self, strings: 'List[str]') -> 'List[str]':\n        if not strings:\n            return []\n        \n        # first reverse the strings in the list\n        strings = self.reverseStrings(strings)\n        \n        # now reverse the strings in the list one by one\n        # the trick is to create a deque of the strings to reverse\n        # when we find a string, we remove it from the deque and reverse it\n        # we do this recursively until we reach the end of the list\n        # when we get to the end, we reverse the entire list\n        strings_deque = deque(strings)\n        \n        while strings_deque:\n            # get the first element in the deque\n            # we remove it and reverse it\n            # if there is no element, we break\n            # this is the trick to reverse a string\n            string = strings_deque.popleft()\n            \n            # reverse the string\n            string = \"\".join(reversed(string))\n            \n            # add it to the deque\n            strings_deque.append(string)\n        \n        return strings",
    "# Definition for a string:\n#   type string = character array\nclass String:\n    def __init__(self, s: str) -> None:\n        self.s = s\n\n    def __repr__(self) -> str:\n        return f'{self.s}'\n\n    def __str__(self) -> str:\n        return self.s\n\n\nclass Solution:\n    def reverseWords(self, s: String) -> None:\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.split()\n        s.reverse()\n        s =''.join(s)\n        s = s.",
    "def reverse(l):\n    \"\"\"\n    Args:\n        l (list): List of strings to be reversed.\n    Returns:\n        list: List of reversed strings.\n    \"\"\"\n    return list(reversed(l))",
    "import unittest\n\n# Complete the reverseString function below.\ndef reverseString(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in strs]\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: void Do not return anything, modify strings in-place instead.\n        \"\"\"\n        for i in range(len(strings)):\n            strings[i] = strings[i][::-1]",
    "def reverse_string(string_list):\n    \"\"\"\n    :type string_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    new_list = []\n    for item in string_list:\n        new_list.append(item[::-1])\n    return new_list",
    "def reverse_string(string):\n    string = list(string)\n    string.reverse()\n    return ''.join(string)\n\n\ndef main():\n    test_cases = [\n        ['abc', 'abc'],\n        ['aabc', 'cba'],\n        ['abc', 'abc', 'abc'],\n        ['abc', 'abc', 'abc', 'abc']\n    ]\n\n    for test in test_cases:\n        print('reverse:', reverse_string(test[0]))\n        print('reverse_slow:', reverse_string_slow(test[0]))\n        print()\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/reverse-strings-in-string-list/\n\n# Definition for a string.\n# class String:\n#     def __init__(self, s: str):\n#         self.s = s\n#         self.len = len(s)\n#\n#     def __str__(self):\n#         return self.s\n#\n#     def __repr__(self):\n#         return self.s\n#\n#\n# class Solution:\n#     def reverseStrings(self, strings: List[String]) -> List[String]:\n#         reverse_strings = []\n#         for i in range(len(strings)):\n#             reverse_strings.append(strings[i].s[::-1])\n#         return reverse_strings\n#\n#     def reverseStrings(self, strings: List[String]) -> List[String]:\n#         reverse_strings = []\n#         for i in range(len(strings)):\n#             reverse_strings.append(strings[i].s[::-1])\n#         return reverse_strings\n\nclass Solution:\n    def reverseStrings(self, strings: List[String]) -> List[String]:\n        reverse_strings = []\n        for i in range(len(strings)):\n            reverse_strings.append(strings[i].s[::-1])\n        return reverse_strings\n\nif __name__ == '__main__':\n    strings = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n    print(Solution().reverseStrings(strings))",
    "# https://oj.leetcode.com/problems/reverse-words-in-a-string/\n# Given an array of strings, return an array of reversed strings.\n# For example,\n# Given s = [\"Hello\",\"world\"]\n# Return [\"olleh\",\"orld\"].\n#\n# Note:\n# The order of the returned strings is irrelevant.\n# The returned strings should be in lexicographic order.\n# Example 1:\n# Input: s = [\"Hello\",\"world\"]\n# Output: [\"olleh\",\"orld\"].\n# Example 2:\n# Input: s = [\"a\",\"ab\",\"abc\"]\n# Output: [\"bab\",\"abc\",\"ab\"].\n# Example 3:\n# Input: s = [\"a\",\"b\"]\n# Output: [\"b\",\"a\"].\n# Example 4:\n# Input: s = [\"\",\"a\",\"a\"]\n# Output: [\"a\",\"\",\"a\"].\n# Example 5:\n# Input: s = [\"\",\"a\"]\n# Output: [\"a\",\"\"].\n# Example 6:\n# Input: s = [\"a\"]\n# Output: [\"a\"].\n#\n# Note:\n# s contains only lowercase English letters.\n# s will have length in range [1,1000].\n# s[i] will be a string with length in range [1,20].\n# All letters in s[i] can be used at most once.\n\nclass Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: List[str]\n        \"\"\"\n        # https://leetcode.com/discuss/71743/java-solution-with-explanation\n        # https://leetcode.com/discuss/55881/c-python-java-solution-with-explanation\n        # https://leetcode.com/discuss/57142/python-solution-with-explanation\n        # https://leetcode.com/discuss/63813/java-solution-with-explanation\n        # https://leetcode.com/discuss/57142/python-solution-with-explanation\n        # https://leetcode",
    "import re\n\ndef reverse(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    s = [re.sub(r'\\s+', '', s) for s in strings]\n    s = [s[::-1] for s in s]\n    return s\n\n\nif __name__ == '__main__':\n    strings = [\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz',\n        'foo bar baz",
    "def reverse(values):\n    return ''.join(reversed(values))\n\n\"\"\"\nGiven a string, reverse the string and return the reversed string.\n\nInput:\n    The first line of input contains an integer T denoting the number of test cases.\n    The first line of each test case contains a single string, S.\n    The next line of each test case contains an integer N, denoting the length of S.\n    The next line of each test case contains N space-separated integers, describing the values of S.\n    \nOutput:\n    Print the reversed string for each test case.\n    \nConstraints:\n    1 \u2264 T \u2264 100\n    1 \u2264 N \u2264 100\n    S and S' are both strings of length N.\n    All the integers in the test cases are in the range [0, 100].\n\"\"\"\n\n#\n#\n#\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        S = input().strip()\n        N = int(input())\n        values = [int(x) for x in input().strip().split(' ')]\n        print(reverse(values))",
    "# Write your code below.\ndef reverse_string(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [s[::-1] for s in strs]\n\nif __name__ == '__main__':\n    assert reverse_string(['hello', 'world']) == ['orld', 'hell']",
    "class Solution:\n    # @param {List<string>} strs\n    # @return {void} Do not return anything, modify strs in-place instead.\n    def reverseStrings(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: void Do not return anything, modify strs in-place instead.\n        \"\"\"\n        for i in range(len(strs) - 1, -1, -1):\n            strs[i], strs[i + 1] = strs[i + 1], strs[i]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    strs = ['hello', 'world', 'how', 'are', 'you']\n    sol.reverseStrings(strs)\n    print(strs)",
    "# Example 1:\n# Input: [\"Hello\", \"World\"]\n# Output: [\"World\", \"Hello\"]\n# Example 2:\n# Input: [\"My\", \"Friend\"]\n# Output: [\"Friend\", \"My\"]\n# Example 3:\n# Input: [\"My\", \"Friend\", \"My\", \"Friend\", \"My\", \"Friend\"]\n# Output: [\"Friend\", \"Friend\", \"My\", \"My\", \"My\", \"Friend\"]\n\n\nclass Solution(object):\n    def reverseWords(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return [s[::-1] for s in strs]",
    "from typing import List\n\nclass Solution:\n    def reverseStrings(self, strings: List[str]) -> None:\n        \"\"\"\n        :type strings: List[str]\n        :rtype: None Do not return anything, modify strings in-place instead.\n        \"\"\"\n        for i, s in enumerate(strings):\n            strings[i] = s[::-1]",
    "# Definition for a string.\nclass String:\n    def __init__(self, s: str) -> None:\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution:\n    def reverseStrings(self, strings: List[String]) -> None:\n        for i in range(len(strings) - 1, -1, -1):\n            strings[i], strings[i + 1] = strings[i + 1], strings[i]\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = []\n# param_2 = []\n# param_2 = obj.reverseStrings(param_2)",
    "def reverse(string_list):\n    \"\"\"\n    :type string_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reverse_list = []\n    for string in string_list:\n        reverse_list.append(str(string[::-1]))\n    return reverse_list\n\nclass Solution(object):\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return reverse(strings)",
    "import sys\n\n# Complete the reverseStrings function below.\ndef reverseStrings(strings):\n    reverse_list = []\n    for i in range(len(strings)):\n        reverse_list.append(str(strings[len(strings)-i-1]))\n    return ''.join(reverse_list)\n\nif __name__ == '__main__':\n    strings = [input().strip() for _ in range(int(input().strip()))]\n    print(reverseStrings(strings))",
    "import sys\n\ndef reverse_string(list_string):\n    \"\"\"\n    :type list_string: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in range(len(list_string) / 2):\n        list_string[i], list_string[-i - 1] = list_string[-i - 1], list_string[i]\n    return list_string\n\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python3 {} <list_string>'.format(sys.argv[0]))\n        sys.exit(1)\n\n    list_string = sys.argv[1].split(' ')\n    list_string = [i.strip() for i in list_string]\n    list_string = reverse_string(list_string)\n    print(list_string)",
    "# Definition for a string:\n# class String:\n#     def __init__(self, s: str):\n#         self.s = s\n\nclass Solution:\n    def reverseStrings(self, strings: List[str]) -> None:\n        strings = [s.split(' ') for s in strings]\n        for i in range(len(strings)):\n            strings[i] = [s[::-1] for s in strings[i]]\n        for s in strings:\n            for i in range(len(s)):\n                s[i] = s[i][::-1]\n        return strings\n\nif __name__ == '__main__':\n    strings = [\n        \"hello world\",\n        \"hello\",\n        \"world\",\n        \"world hello\",\n        \"hello world hello\",\n        \"hello world hello world\",\n        \"hello world world hello world\",\n    ]\n    sol = Solution()\n    sol.reverseStrings(strings)\n    for s in strings:\n        print(s)",
    "import unittest\n\nclass Solution:\n    def reverseStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(strings)):\n            result.append(strings[i][::-1])\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/reverse-strings-in-string/solution/\n\nApproach #1: Iterate [O(n)] [Accepted]\nComplexity Analysis\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n# 6ms 97.92%\nclass Solution {\n    public List<String> reverseStrings(List<String> strings) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            for (int i = s.length() - 1; i >= 0; i--) {\n                result.add(s.substring(i, i + 1) + s.substring(0, i));\n            }\n        }\n        return result;\n    }\n}\n\nApproach #2: Sort + StringBuilder [Accepted]\nComplexity Analysis\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n# 7ms 98.32%\nclass Solution {\n    public List<String> reverseStrings(List<String> strings) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n            sb.reverse();\n            result.add(sb.toString());\n        }\n        return result;\n    }\n}\n\nApproach #3: Sort + StringJoiner",
    "import unittest\n\n# https://leetcode.com/problems/reverse-string-ii/\n\n\nclass Solution:\n    def reverseStrings(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        for word in words:\n            ret.append(word[::-1])\n        return ret\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([], [])\n        self._test([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"])\n\n    def _test(self, words, expected):\n        actual = Solution().reverseStrings(words)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def reverse_string(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        result.append(s[len(s)-i-1])\n    return result\n\n\ndef main():\n    s = \"hello\"\n    s2 = \"goodbye\"\n    s3 = \"adios\"\n    print(reverse_string(s))\n    print(reverse_string(s2))\n    print(reverse_string(s3))\n    print(reverse_string([s, s2, s3]))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution:\n    # @param {string[]} strs\n    # @return {void} Do not return anything, modify strs in-place instead.\n    def reverseStr(self, strs):\n        # Write your code here\n        for i in range(len(strs)-1, -1, -1):\n            strs[i] = strs[i][::-1]\n        return\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.reverseStr([\"a\", \"b\", \"c\"])\n    print s.reverseStr([\"a\", \"b\", \"c\"])",
    "# https://www.hackerrank.com/challenges/reverse-a-string\n# https://www.codewars.com/kata/reverse-a-string-python\n# https://www.codewars.com/kata/reverse-a-string-python/train/python\n# https://www.codewars.com/kata/reverse-a-string-python/train/python\n# https://www.codewars.com/kata/reverse-a-string-python/train/python\n# https://www.codewars.com/kata/reverse-a-string-python/train/python\n\n# In[1]:\n\ndef reverse_str(str_val):\n    return str_val[::-1]\n\n\n# In[2]:\n\nprint(reverse_str('Python'))\n\n\n# In[3]:\n\nprint(reverse_str('Python2'))\n\n\n# In[4]:\n\nprint(reverse_str('Python3'))\n\n\n# In[5]:\n\nprint(reverse_str('Python4'))\n\n\n# In[6]:\n\nprint(reverse_str('Python5'))\n\n\n# In[7]:\n\nprint(reverse_str('Python6'))\n\n\n# In[8]:\n\nprint(reverse_str('Python7'))\n\n\n# In[9]:\n\nprint(reverse_str('Python8'))\n\n\n# In[10]:\n\nprint(reverse_str('Python9'))\n\n\n# In[11]:\n\nprint(reverse_str('Python10'))\n\n\n# In[12]:\n\nprint(reverse_str('Python11'))\n\n\n# In[13]:\n\nprint(reverse_str('Python12'))\n\n\n# In[14]:\n\nprint(reverse_str('Python13'))\n\n\n# In[15]:\n\nprint(reverse_str('Python14'))\n\n\n# In[16]:\n\nprint(reverse_str('Python15'))\n\n\n# In[17]:\n\nprint(reverse_str('Python16'))\n\n\n# In[18]:\n\nprint(reverse_str('Python17'))\n\n\n# In[19]:\n\nprint(reverse_str('",
    "def reverse_strings(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    reverse = [0] * len(strings)\n    for i, x in enumerate(strings):\n        reverse[-i - 1] = x\n    return reverse",
    "# https://www.hackerrank.com/challenges/reverse-v2/problem\n\ndef reverse(s):\n    return s[::-1]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    strs = input().split()\n    for s in strs:\n        print(reverse(s))",
    "def reverse_string(s):\n    if s == None or len(s) == 0:\n        return None\n    if len(s) == 1:\n        return s[0]\n    res = []\n    for i in range(len(s) - 1, -1, -1):\n        res.append(s[i])\n    return res\n\ndef reverse_string_list(s):\n    if s == None or len(s) == 0:\n        return None\n    if len(s) == 1:\n        return s[0]\n    res = []\n    for i in range(len(s) - 1, -1, -1):\n        res.append(s[i])\n    return res\n\ndef main():\n    s = 'abcdefg'\n    s2 = reverse_string(s)\n    print s == s2\n    s = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    s2 = reverse_string_list(s)\n    print s == s2\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}