{
  "problem": {
    "task_id": "MBPP/378",
    "prompt": "Write a python function to shift last element to first position in the given list.",
    "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
    "test_list": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ],
    "challenge_test_list": [],
    "problem_id": 367
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        dummy2 = dummy\n        count = 1\n        while count < k:\n            dummy = dummy.next\n            count += 1\n        \n        while dummy.next is not None:\n            dummy = dummy.next\n            dummy2.next = dummy.next\n            dummy.next = dummy2\n            dummy2 = dummy2.next\n        \n        return dummy2.next",
    "def shift(lst):\n    \"\"\"\n    Input: A list of integers\n    Output: The shifted list\n    \"\"\"\n    return lst[0:len(lst) - 1] + lst[len(lst) - 1:]\n\ndef test():\n    assert(shift([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9])\n\ndef main():\n    test()\n    return 0\n\nif __name__ == '__main__':\n    main()",
    "def shift_first_last(list):\n    if not list:\n        return list\n    head = list[0]\n    tail = list[-1]\n    list[0] = tail\n    list[-1] = head\n    return list\n\nprint(shift_first_last([1,2,3,4]))\n\n\"\"\"\nWrite a python function to shift all elements in a list to the front.\n\"\"\"\n\ndef shift_front(list):\n    if not list:\n        return list\n    head = list[0]\n    for i in range(1, len(list)):\n        list[i] = list[i]\n    list[0] = head\n    return list\n\nprint(shift_front([1,2,3,4]))\n\n\"\"\"\nWrite a python function to shift all elements in a list to the back.\n\"\"\"\n\ndef shift_back(list):\n    if not list:\n        return list\n    tail = list[-1]\n    for i in range(len(list)-1, -1, -1):\n        list[i] = list[i-1]\n    list[-1] = tail\n    return list\n\nprint(shift_back([1,2,3,4]))\n\n\"\"\"\nWrite a python function to shift all elements in a list to the front.\n\"\"\"\n\ndef shift_back_front(list):\n    if not list:\n        return list\n    tail = list[-1]\n    head = list[0]\n    for i in range(len(list)-1, -1, -1):\n        list[i] = list[i-1]\n    list[0] = head\n    list[-1] = tail\n    return list\n\nprint(shift_back_front([1,2,3,4]))",
    "def shift_list(l):\n    return l[1:] + [l[0]]\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4]\n    print(shift_list(l))",
    "def shift_last_to_first(lst):\n    \"\"\"\n    Shift the last element to first position in the given list.\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n\n    >>> shift_last_to_first([])\n    []\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n\n    >>> shift_last_to_first([1,2,3,4,5])\n    [1,2,3,4,5]\n    \"\"\"\n    if not lst:\n        return lst\n    return lst[:1] + lst[1:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def shift(l):\n    \"\"\"\n    >>> shift([1,2,3,4])\n    [2,3,4,1]\n    >>> shift([1,2,3])\n    [1,2,3]\n    >>> shift([])\n    []\n    \"\"\"\n    \n    if len(l) == 0:\n        return l\n    elif len(l) == 1:\n        return [l[0], l[-1]]\n    else:\n        return [l[-1], l[0]]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def shift_last_to_first(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    return list[:-1] + [list[0]] + list[1:]\n\ndef shift_last_to_first2(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    return list[:-1] + [list[-1]] + list[:-1]\n\ndef shift_last_to_first3(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    return list[:-1] + [list[-1]]\n\ndef shift_last_to_first4(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    return list[:-1] + list[-1]",
    "def shift(nums):\n    if len(nums) < 2:\n        return nums\n\n    i = 0\n    while i < len(nums) - 1:\n        nums[i], nums[i+1] = nums[i+1], nums[i]\n        i = i + 1\n\n    return nums\n\ndef main():\n    nums = [1,2,3,4]\n    print(shift(nums))\n\nif __name__ == '__main__':\n    main()",
    "import random\n\n\ndef shift_list(list_):\n    \"\"\"\n    list_: list to be shifted\n    \"\"\"\n    return list_[1:] + [list_[0]]\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_ = shift_list(list_)\n    print(list_)\n\n\nif __name__ == '__main__':\n    main()",
    "def shift(lst):\n    if len(lst) < 1:\n        return lst\n    elif len(lst) == 1:\n        return lst[0] + lst[1:]\n    else:\n        return lst[1:] + lst[0]\n\nif __name__ == '__main__':\n    lst = [1,2,3]\n    print(shift(lst))\n    lst = [1,2,3]\n    print(lst)\n    lst = [4,5,6,7]\n    print(lst)\n    lst = [1,2,3]\n    print(lst)",
    "def shift(lst):\n\t\"\"\"\n\tShift last element to first element in the list.\n\t\"\"\"\n\treturn lst[:-1] + [lst[0]]\n\nprint(shift([1,2,3]))",
    "def shift(lst):\n    if not lst:\n        return []\n    return lst[1:] + [lst[0]]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(shift(lst))",
    "def shift(l):\n    return l[1:] + [l[0]]\n\n# Your Solution\n\ndef shift(l):\n    return l[1:] + [l[0]]",
    "def shift_last_to_first(L):\n\tif len(L) > 0:\n\t\tL[0], L[-1] = L[-1], L[0]\n\ndef test():\n\tL = [3, 4, 5]\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\tprint'shift_last_to_first(L) ->', shift_last_to_first(L)\n\nif __name__ == '__main__':\n\ttest()",
    "def shift(lst):\n\t\"\"\"\n\t>>> shift([1,2,3,4,5])\n\t[1,2,3,4,5]\n\t>>> shift([])\n\t[]\n\t>>> shift([1])\n\t[1]\n\t\"\"\"\n\tif not lst:\n\t\treturn lst\n\ti = len(lst) - 1\n\twhile i > 0:\n\t\tlst[i] = lst[i-1]\n\t\ti -= 1\n\tlst[0] = lst[0]\n\treturn lst",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def shiftList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        while p:\n            n = p.next\n            p.next = p.next.next\n            p = n\n        p.next = head\n        return head",
    "def reverse_list(lst):\n    \"\"\"\n    reverse list\n    \"\"\"\n    lst.reverse()\n    return lst\n\ndef reverse_list2(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    lst.reverse()\n    return lst\n\ndef reverse_list3(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return lst\n\ndef reverse_list4(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in reversed(range(len(lst))):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return lst\n\ndef reverse_list5(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in reversed(range(len(lst) - 1, -1, -1)):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return lst\n\ndef reverse_list6(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in reversed(range(len(lst) - 1, -1, -1)):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return lst\n\ndef reverse_list7(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in reversed(range(len(lst))):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return lst\n\ndef reverse_list8(lst):\n    \"\"\"\n    reverse list using a list comprehension\n    \"\"\"\n    for i in reversed(range(len(lst) - 1, -1, -1)):\n        lst[i], lst[-1] = lst[-1], lst[i]\n    return l",
    "def shift(lst):\n    last = lst[-1]\n    lst[-1] = lst[0]\n    lst[0] = last\n    return lst\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5]\n    print(shift(lst))\n    # >>> [1, 2, 3, 4, 5]\n    # >>> [5, 1, 2, 3, 4]\n    # >>> [1, 5, 2, 3, 4]\n    # >>> [5, 1, 4, 3, 2]",
    "#!/usr/bin/env python\n\ndef shift(lst):\n    \"\"\"\n    Shift last element to first position in the given list.\n    >>> lst = [1, 2, 3]\n    >>> shift(lst)\n    [1, 2, 3]\n    \"\"\"\n    \n    return lst[1:] + lst[0:1]\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3]\n    print(shift(lst))",
    "def shift_last_to_first(list):\n    \"\"\"\n    shift last element to first position in the given list\n    :param list:\n    :return:\n    \"\"\"\n    list.reverse()\n    list.insert(0, list.pop())\n    return list\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4]\n    l = shift_last_to_first(l)\n    print(l)",
    "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution:\n#     # @param head, a ListNode\n#     # @return a ListNode\n#     def rotateRight(self, head):\n#         dummy = head\n#         pre = head\n#         cur = head.next\n#         while cur.next!= None:\n#             pre = pre.next\n#             cur = cur.next\n#\n#         pre.next = None\n#         dummy.next = cur\n#\n#         return dummy\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def rotateRight(self, head):\n        dummy = head\n        pre = head\n        cur = head.next\n        while cur!= None:\n            pre = pre.next\n            cur = cur.next\n        pre.next = None\n        dummy.next = cur\n        return dummy",
    "def shift(lst):\n    \"\"\"\n    >>> lst = [1,2,3,4]\n    >>> shift(lst)\n    [1, 4, 2, 3]\n    >>> lst = [1,2,3]\n    >>> shift(lst)\n    [1, 2, 3]\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i] = lst[i-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def shift(lst):\n    # write your code here\n    lst.insert(0, lst.pop(-1))\n    return lst\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6]\n    print(lst)\n    print(shift(lst))\n\nif __name__ == '__main__':\n    main()",
    "def shift_last(l):\n    if len(l) == 0:\n        return l\n    elif len(l) == 1:\n        return l\n    else:\n        return l[1:] + [l[0]]\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3]\n    print(shift_last(l))",
    "def shift(L):\n    if len(L) < 2:\n        return L\n    else:\n        return L[1:] + [L[0]]\n\n# Sample Output\n# >>> shift([1,2,3])\n# [1, 2, 3]\n# >>> shift([1,2,3,4])\n# [1, 4, 3, 2]\n# >>> shift([1,2,3,4,5])\n# [1, 5, 4, 3, 2]\n# >>> shift([1,2,3,4,5,6])\n# [1, 6, 5, 4, 3, 2]\n\n# Test Cases\n# >>> shift([])\n# []\n# >>> shift([1])\n# [1]\n# >>> shift([1,2])\n# [1, 2]\n# >>> shift([1,2,3])\n# [1, 3, 2]\n# >>> shift([1,2,3,4])\n# [1, 4, 3, 2]\n# >>> shift([1,2,3,4,5])\n# [1, 5, 4, 3, 2]\n# >>> shift([1,2,3,4,5,6])\n# [1, 6, 5, 4, 3, 2]",
    "def shift_list(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        return lst[1:] + [lst[0]]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print(shift_list(lst))",
    "def shift(a):\n\treturn a[0], a[1:]\n\ndef main():\n\ta = [1, 2, 3, 4, 5]\n\tprint shift(a)\n\nif __name__ == '__main__':\n\tmain()",
    "def shift(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(list_) == 0:\n        return list_\n\n    return [list_[0], list_[1], list_[2], list_[3]]\n\ndef test_shift():\n    assert shift([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert shift([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert shift([1]) == [1]\n\nif __name__ == '__main__':\n    test_shift()",
    "def shift_last_to_first(list_):\n    \"\"\"\n    @param list_: a list to be shifted\n    @return: a list with the shifted elements\n    \"\"\"\n    return list_[:1] + list_[1:]\n\n\n# Test\nif __name__ == '__main__':\n    l = [1, 2, 3]\n    print(shift_last_to_first(l))",
    "def shift_last_to_first(L):\n    return L[:1] + L[2:]\n\ndef main():\n    L = list(range(10))\n    print(L)\n    print(shift_last_to_first(L))\n\nif __name__ == \"__main__\":\n    main()",
    "def shift_list(l):\n    return l[0:len(l)-1] + [l[-1]] + l[0:len(l)-1]\n\n\n# Your code here\ndef shift_list(l):\n    return l[0:len(l)-1] + [l[-1]] + l[0:len(l)-1]\n\n\n\n# Your code here\ndef shift_list(l):\n    return l[0:len(l)-1] + [l[-1]] + l[0:len(l)-1]\n\n\n# Your code here\ndef shift_list(l):\n    return l[0:len(l)-1] + [l[-1]] + l[0:len(l)-1]\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print shift_list(l)\n    print l",
    "def shift(L):\n    return L[1:] + [L[0]]\n\ndef main():\n    L = [1, 2, 3, 4, 5]\n    print(shift(L))\n\nif __name__ == \"__main__\":\n    main()",
    "def shift_last_to_first(l):\n    \"\"\"\n    >>> l = [1, 2, 3]\n    >>> shift_last_to_first(l)\n    [2, 1, 3]\n    >>> l = [1, 2]\n    >>> shift_last_to_first(l)\n    [2, 1]\n    \"\"\"\n    return l[1:len(l):1] + [l[0]]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "import unittest\nimport Solution\n\nclass Test(unittest.TestCase):\n    def test_shiftLastToFirst(self):\n        solution = Solution.Solution()\n        self.assertEqual(solution.shiftLastToFirst([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n    def test_shiftLastToFirst_empty(self):\n        solution = Solution.Solution()\n        self.assertEqual(solution.shiftLastToFirst([]), [])\n\nif __name__ == '__main__':\n    unittest.main()",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef shift_last_to_first(lst):\n    # write your code here\n    return lst[0], lst[1:]\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    print(shift_last_to_first(lst))",
    "#shift_last_to_first(mylist):\n#    shifted = mylist[:1] + mylist[1:]\n#    return shifted\n\ndef shift_last_to_first(mylist):\n    if mylist == []:\n        return []\n    shifted = mylist[:1] + mylist[1:]\n    return shifted\n\nif __name__ == \"__main__\":\n    mylist = [1,2,3,4,5]\n    print(mylist)\n    print(\"Result: \" + str(shift_last_to_first(mylist)))",
    "def shift_first(nums):\n    return nums[1:] + [nums[0]]\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    nums2 = shift_first(nums)\n    print(nums2)",
    "def shift(L):\n    return L[1:] + [L[0]]\n\ndef main():\n    L = [1, 2, 3]\n    print shift(L)\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    \"\"\"\n    Shift last element to first position in the given list.\n    \"\"\"\n    if (len(sys.argv) < 2):\n        sys.stderr.write('usage: %s <list>\\n' % sys.argv[0])\n        sys.exit(1)\n\n    lst = sys.argv[1]\n    lst.reverse()\n    lst.append(lst.pop(0))\n    print lst\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\ndef reverse_list(lst):\n    \"\"\"\n    reverse a list\n    \"\"\"\n    lst.reverse()\n    return lst\n\ndef shift_last_to_first(lst):\n    \"\"\"\n    shift the last element to the first element\n    \"\"\"\n    first = lst[0]\n    lst.pop()\n    lst.insert(0, first)\n    return lst\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    reverse_list(lst)\n    print lst\n    print shift_last_to_first(lst)\n\nif __name__ == '__main__':\n    main()",
    "# Example 1\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [5, 6, 7, 8, 1, 2, 3, 4]\n\n# Example 2\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [8, 7, 6, 5, 4, 3, 2, 1]\n\n# Example 3\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [8, 7, 6, 5, 4, 3, 2, 1]\n\n# Example 4\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Example 5\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Example 6\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [4, 5, 6, 7, 8, 1, 2, 3]\n\n# Example 7\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [4, 5, 6, 7, 8, 1, 2, 3]\n\n# Example 8\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [4, 5, 6, 7, 8, 1, 2, 3]\n\n# Example 9\n# >>> list = [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> list.reverse()\n# >>> list\n# [4, 5, 6, 7, 8, 1, 2, 3]",
    "def shift_last_to_first(L):\n    if len(L) == 0:\n        return []\n    i = len(L) - 1\n    L[0], L[i] = L[i], L[0]\n    return L\n\n\nif __name__ == \"__main__\":\n    L = [1,2,3]\n    print(shift_last_to_first(L))\n    L = [1,2,3,4]\n    print(shift_last_to_first(L))\n    L = [1,2,3,4,5]\n    print(shift_last_to_first(L))",
    "# write your code here\ndef shift(lst):\n    if len(lst) < 2:\n        return lst\n    \n    return lst[1:] + [lst[0]]\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(shift(lst))",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        newhead = ListNode(0)\n        newhead.next = head\n        p = newhead\n        while p and p.next:\n            q = p.next\n            p.next = q.next\n            q.next = p\n            p = q\n        return newhead.next",
    "# https://www.hackerrank.com/challenges/shift-last-element-to-first-position\n\ndef shift_last_element_to_first_position(list):\n    if not list:\n        return 0\n    else:\n        return list[0] + list[1] + list[2]\n\nif __name__ == '__main__':\n    list = [1, 2, 3]\n    result = shift_last_element_to_first_position(list)\n    print(result)",
    "# Note:\n# This is a good way to use the built-in function list.sort.\n# The function list.sort() sorts the list in descending order.\n# The function list.sort() does not allow to change the order of the elements in the list.\n# You need to use the built-in function list.sort() to do this.\n# The built-in function list.sort() sorts the elements in descending order.\n# The built-in function list.sort() sorts the elements in ascending order.\n# The built-in function list.sort() sorts the elements in ascending order.\n# The built-in function list.sort() sorts the elements in ascending order.\n\n# Example 1:\n# Input: [1,2,3]\n# Output: [1,2,3]\n# Explanation:\n# The input list is already sorted in ascending order.\n# Shift the last element to the first position in the list.\n# Return the input list.\n# Example 2:\n# Input: [1,2,3,4]\n# Output: [1,2,3,4]\n# Explanation:\n# The input list is already sorted in ascending order.\n# Shift the last element to the first position in the list.\n# Return the input list.\n\n# Note:\n# The length of the given list will not exceed 1000.\n# The given list will only contain numbers.\n# The numbers in the given list are in the range of [-1000, 1000].\n\nclass Solution(object):\n    def shiftList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return head\n        if head.next is None:\n            return head\n        prev = head\n        while prev.next.next is not None:\n            prev = prev.next\n        prev.next = None\n        prev.next = head\n        return head",
    "import pytest\n\ndef shift(lst):\n    \"\"\"\n    Shift the last element to the first position in the given list.\n\n    :param lst: a list of integers\n    :return: a list of integers\n    \"\"\"\n\n    # You can use a list comprehension to perform the shift operation.\n    return [lst[0], lst[-1]] + lst[1:-1]\n\n\ndef test_shift():\n    assert shift([1,2,3,4,5]) == [1,2,3,4,5]\n    assert shift([1,2,3]) == [1,2,3]\n    assert shift([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n    assert shift([]) == []\n\n\ndef test_shift_negative_input():\n    with pytest.raises(ValueError):\n        shift([1,2,3,4,5,6,7])\n\n\nif __name__ == \"__main__\":\n    pytest.main([__file__])",
    "def shift(lst):\n    \"\"\"\n    >>> shift([1,2,3,4])\n    [4, 1, 2, 3]\n    >>> shift([])\n    []\n    >>> shift([1])\n    [1]\n    >>> shift([1,2,3,4])\n    [4, 1, 2, 3]\n    \"\"\"\n    if lst == []:\n        return lst\n    if lst[-1] < lst[0]:\n        return lst\n    else:\n        return lst[:1] + lst[1:] + lst[2:]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# TODO\n# Implement a function that returns a list with the same elements as the input list, but with the elements in the given index shifted.\n#\n# For example:\n#\n# shift_list([1,2,3,4,5])\n# -> [1,2,3,4,5]\n#\n# shift_list([1,2,3,4,5], 2)\n# -> [3,4,5,1,2]\n#\n# shift_list([1,2,3,4,5], -2)\n# -> [5,4,3,2,1]\n#\n# shift_list([1,2,3,4,5], 3)\n# -> [4,3,2,1,5]\n#\n# shift_list([1,2,3,4,5], -3)\n# -> [4,3,2,5,1]\n\ndef shift_list(list_to_shift):\n    \"\"\"\n    Shift last element to first position in the given list.\n    :param list_to_shift:\n    :return:\n    \"\"\"\n    return list_to_shift[:0:-1] + list_to_shift[-1:]",
    "# TODO:\n# - replace list with any other data structure\n# - test your solution on a test function\n# - write a unit test\n\n# The list you are given is sorted in ascending order.\n# The function should return a new list shifted by one element.\n# If the given list contains duplicate elements, print them first.\n# Example:\n# Given sorted list: [1,2,3,4,5]\n# shift_list([1,2,3,4,5]) -> [2,3,4,5,1]\n\ndef shift_list(list):\n    if len(list) < 2:\n        return list\n    \n    return [list[0], list[1:]]\n\n# Note:\n# The first element in the list is the last element.\n# The second element in the list is the first element.\n\n# Test Cases:\n# shift_list([1,2,3,4,5]) -> [2,3,4,5,1]\n# shift_list([1,2,3,4,5,6]) -> [2,3,4,5,6,1]\n\n# Note:\n# This is the most common use case.\n# In this case, list is sorted in ascending order.\n\n# Example:\n# input: [1,2,3,4,5]\n# output: [2,3,4,5,1]\n\n# Example:\n# input: [1,2,3,4,5,6]\n# output: [2,3,4,5,6,1]",
    "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef shiftRight(self, head):\n\t\tif not head or not head.next:\n\t\t\treturn head\n\n\t\tp = head\n\t\twhile p.next:\n\t\t\tp = p.next\n\t\t\tp.next = p.next.next\n\n\t\tp.next = head\n\t\treturn head\n\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef reverseList(self, head):\n\t\tif not head or not head.next:\n\t\t\treturn head\n\n\t\tp = head\n\t\tq = None\n\t\twhile p:\n\t\t\tq = p.next\n\t\t\tp.next = p.next.next\n\t\t\tp = p.next\n\n\t\treturn q\n\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef reverseList2(self, head):\n\t\tif not head or not head.next:\n\t\t\treturn head\n\n\t\tp = head\n\t\tq = None\n\t\twhile p:\n\t\t\tq = p.next\n\t\t\tp.next = p.next.next\n\t\t\tp = p.next\n\n\t\tp = head\n\t\tq = None\n\t\twhile p:\n\t\t\tq = p.next\n\t\t\tp.next = p.next.next\n\t\t\tp = p.next\n\t\t\tp.next = q\n\n\t\treturn p\n\nif __name__ == \"__main__\":\n\ts = Solution()\n\tp = ListNode(1)\n\tq = ListNode(2)\n\tr = ListNode(3)\n\ts.shiftRight(p)\n\tp.next = q\n\ts.shiftRight(q)\n\tq.next = r\n\ts.shiftRight(r)\n\tprint s.reverseList(p)\n\n\ts = Solution()\n\tp = ListNode(1)\n\tq = ListNode(2)\n\tr = ListNode(3)\n\ts.reverseList2(p)\n\tp.next = q\n\ts.reverseList2(q)\n\tq.next",
    "#!/usr/bin/python\n\n# Create the list\nnumbers = [1, 2, 3, 4]\n\n# Get the last element\nlast_element = numbers[-1]\n\n# Get the first element\nfirst_element = numbers[0]\n\n# Print the first and last element\nprint \"First element: \", first_element\nprint \"Last element: \", last_element",
    "#!/usr/bin/env python\n\ndef shift_list(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        return lst[1:] + [lst[0]]\n\nprint(shift_list([1, 2, 3, 4]))\nprint(shift_list([4, 3, 2, 1]))",
    "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def shiftList(self, head):\n        if not head or not head.next:\n            return head\n        p = head\n        while p and p.next:\n            p = p.next\n        p.next = head\n        return p\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print(solution.shiftList(head))",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        \n        temp = head.next\n        head.next = None\n        \n        while temp:\n            temp.next = head\n            head = temp\n            temp = temp.next\n        return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n\n    s = Solution()\n    head = s.reverseList(head)\n    while head:\n        print(head.val)\n        head = head.next",
    "def shift(arr):\n    \"\"\"\n    shift(arr) -> list\n    \n    Shifts the last element to the first position in the given list.\n    \"\"\"\n    return arr[:-1] + [arr[-1]] + arr[:-1]\n\ndef main():\n    arr = [1,2,3,4,5]\n    print(shift(arr))\n\nif __name__ == '__main__':\n    main()",
    "def shift_first(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        return nums[1:] + [nums[0]]\n\n\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    print(shift_first(nums))",
    "# The following is my solution.\ndef shift_last_to_first(list_):\n    if len(list_) == 0:\n        return []\n    return [list_[-1], list_[0]] + list_[1:]",
    "class Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        new_head = head.next\n        new_head.next = head\n        head.next = None\n        while new_head.next and new_head.next.next:\n            new_head = new_head.next\n            head = head.next\n            new_head.next = head.next\n            head.next = None\n            head = new_head.next\n            new_head.next = head.next\n\n        return new_head\n\nif __name__ == \"__main__\":\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n1.next = n2\n    n2.next = n3\n    n3.next = n4\n    n1 = Solution().swapPairs(n1)\n    while n1:\n        print(n1.val)\n        n1 = n1.next",
    "def shift_last_to_first(lst):\n    \"\"\"\n    Shift last element to first position in the given list.\n    >>> shift_last_to_first([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> shift_last_to_first([])\n    []\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n    return lst[:1] + lst[2:]\n\nif __name__ == \"__main__\":\n    print(shift_last_to_first([1, 2, 3, 4]))",
    "# https://leetcode.com/problems/shift-last-element-to-first-position/discuss/158947/Python-solution-with-explanation\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def shift(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n            p.next = p.next.next\n            p.next.next = p\n        p.next = head\n        return head",
    "#!/usr/bin/env python\n\ndef shift_last_to_first(lst):\n    \"\"\"\n    Shift last element to first position in the given list.\n    :param lst:\n    :return:\n    \"\"\"\n    if lst and len(lst) > 1:\n        lst[-1], lst[0] = lst[0], lst[-1]",
    "def shift(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: List[int]\n    \"\"\"\n    n = len(L)\n    if n == 0:\n        return []\n    else:\n        L[0], L[n-1] = L[n-1], L[0]\n        return L\n\n\n# Your Solution here",
    "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        p = head.next\n        head.next = None\n        while p:\n            q = p.next\n            p.next = head\n            head = p\n            p = q\n        return head",
    "def shift(lst):\n    if not lst:\n        return lst\n    lst.append(lst.pop(0))\n    return lst\n\nif __name__ == \"__main__\":\n    lst = [1,2,3,4,5]\n    shift(lst)\n    print lst",
    "# https://leetcode.com/problems/move-zeros/\n\nclass Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return nums\n\n        new_nums = []\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                new_nums.append(nums[i])\n        new_nums.append(0)\n\n        for i in range(len(nums)):\n            if i!= 0:\n                new_nums[i] = nums[i - 1]\n\n        return new_nums",
    "#!/usr/bin/python\n\ndef shift_last_to_first(list):\n\tif len(list) <= 1:\n\t\treturn list\n\tlast_element = list[-1]\n\tlast_element_index = list.index(last_element)\n\tlist[last_element_index] = list[0]\n\tlist[0] = last_element\n\treturn list\n\nif __name__ == '__main__':\n\tlist = [1,2,3,4,5]\n\tprint(shift_last_to_first(list))\n\tlist = [1,2,3,4,5,6]\n\tprint(shift_last_to_first(list))",
    "def shift_list(lst):\n    \"\"\"\n    :param lst: a list\n    :return: a list with the same elements as lst, except the last element is first\n    \"\"\"\n    res = []\n    for i in range(len(lst) - 1):\n        res.append(lst[i])\n    res.append(lst[-1])\n    return res\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6]\n    print(shift_list(lst))",
    "def reverse_list(lst):\n    return lst[::-1]\n\ndef shift_last_to_first(lst):\n    return lst[:-1] + [lst[-1]]\n\ndef reverse_shift_last_to_first(lst):\n    return [lst[-1]] + lst[:-1]\n\ndef main():\n    print(reverse_list([1,2,3,4,5]))\n    print(reverse_shift_last_to_first([1,2,3,4,5]))\n    print(reverse_shift_last_to_first(reverse_list([1,2,3,4,5])))\n    print(reverse_shift_last_to_first(reverse_list([1,2,3,4,5])))\n\nif __name__ == '__main__':\n    main()",
    "def shift_last_to_first(my_list):\n    \"\"\"\n    :param my_list: list\n    :return: list\n    \"\"\"\n    # TODO: Implement your function here.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #",
    "def shift_last(lst):\n    return lst[0], lst[1:]\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(shift_last(lst))",
    "def shift_last_to_first(nums):\n    \"\"\"\n    shift_last_to_first(nums) -> None\n\n    :param nums: a list of ints\n    :return: None\n    \"\"\"\n\n    # write your code here\n    for i in range(len(nums)):\n        nums[i], nums[-1] = nums[-1], nums[i]",
    "import sys\n\ndef shift_last_to_first(lst):\n\tlst.reverse()\n\tlst.insert(0, lst.pop())\n\tlst.reverse()\n\treturn lst\n\ndef main():\n\tlst = []\n\tlst.append(1)\n\tlst.append(2)\n\tlst.append(3)\n\tprint shift_last_to_first(lst)\n\tprint lst\n\tlst = []\n\tlst.append(1)\n\tlst.append(2)\n\tlst.append(3)\n\tlst.append(4)\n\tlst.append(5)\n\tlst.append(6)\n\tprint shift_last_to_first(lst)\n\tprint lst\n\tlst = []\n\tlst.append(1)\n\tlst.append(2)\n\tlst.append(3)\n\tlst.append(4)\n\tlst.append(5)\n\tlst.append(6)\n\tlst.append(7)\n\tlst.append(8)\n\tlst.append(9)\n\tprint shift_last_to_first(lst)\n\tprint lst\n\nif __name__ == '__main__':\n\tmain()",
    "def shift_last_to_first(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if lst:\n        return lst[:1] + lst[1:]\n    return []",
    "def shift_last_to_first(list):\n    if len(list) < 2:\n        return list\n    return list[:1] + list[2:]\n\ndef main():\n    print(shift_last_to_first([1,2,3]))\n    print(shift_last_to_first([1,2,3,4]))\n    print(shift_last_to_first([1,2,3,4,5]))\n    print(shift_last_to_first([1,2,3,4,5,6]))\n    print(shift_last_to_first([1,2,3,4,5,6,7]))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/shift-string-right/\n\nclass Solution(object):\n    def shiftString(self, S, shift):\n        \"\"\"\n        :type S: str\n        :type shift: int\n        :rtype: str\n        \"\"\"\n        l = len(S)\n        if l <= 1:\n            return S\n        if shift > l:\n            shift = l\n        i = l - shift\n        while i >= 0:\n            S = S[i] + S[i + shift]\n            i -= 1\n        return S",
    "def shift_last_to_first(l):\n    if l:\n        return l[0], l[1:]\n    return l, []\n\n# Your ShiftingLastToFirst function should return a tuple as shown.\n# shift_last_to_first(['a', 'b', 'c']) -> ('b', ['a', 'c'])\n# shift_last_to_first(['a', 'b', 'c', 'd']) -> ('d', ['a', 'b', 'c'])",
    "def shift_last_to_first(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: void\n    \"\"\"\n    # write your code here\n    if list is None or len(list) == 0:\n        return\n    \n    shifted_list = list[:]\n    shifted_list.pop()\n    shifted_list.insert(0, list[len(list)-1])\n    print(shifted_list)\n\n\nif __name__ == '__main__':\n    list = [1,2,3,4,5]\n    shift_last_to_first(list)\n\n    list = [1,2,3,4,5]\n    print(list)\n    shift_last_to_first(list)\n    print(list)",
    "#!/usr/bin/env python\n\n# This file is part of Nanobrowser.\n# Copyright (C) 2013-2018, Martin Kolman, Martin Zugle\n#\n# Nanobrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Nanobrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Nanobrowser. If not, see <http://www.gnu.org/licenses/>.\n\nfrom nanobrowser.utils import is_number\n\ndef shift_last_to_first(list):\n    \"\"\"\n    Shift last element to first element in the given list.\n    :param list: list to shift\n    :return: None\n    \"\"\"\n    if len(list) < 2:\n        return\n    list[0], list[-1] = list[-1], list[0]\n\ndef shift_first_to_last(list):\n    \"\"\"\n    Shift first element to last element in the given list.\n    :param list: list to shift\n    :return: None\n    \"\"\"\n    if len(list) < 2:\n        return\n    list[0], list[-1] = list[-1], list[0]",
    "def shift_last_to_first(my_list):\n\tif len(my_list) == 0:\n\t\treturn []\n\telse:\n\t\treturn my_list[1:] + [my_list[0]]\n\nif __name__ == \"__main__\":\n\tmy_list = [1,2,3,4]\n\tprint shift_last_to_first(my_list)",
    "def shift_last_to_first(L):\n    \"\"\"\n    Input: A list of integers.\n    Output: The list with the first element shifted to the last.\n    \"\"\"\n    if L:\n        L.insert(0, L[-1])\n        return L\n    else:\n        return L\n\nL = [1, 2, 3, 4]\nprint shift_last_to_first(L)",
    "def shift_first(lst):\n    return lst[1:] + [lst[0]]\n\ndef shift_last(lst):\n    return [lst[-1]] + lst[:-1]\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(shift_first(lst))\n    print(shift_last(lst))",
    "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def shiftList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        new_head = head.next\n        head.next = None\n        \n        while new_head:\n            head = new_head\n            new_head = new_head.next\n            \n            if head.next:\n                head.next = head.next.next\n        \n        return head",
    "def shift_first(lst):\n    if len(lst) == 0:\n        return\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1:] + [lst[0]]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(shift_first(lst))",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def shiftList(self, head):\n        if not head: return head\n        p = head\n        while p.next:\n            p = p.next\n            p.next = p.next.next\n            p.next = p.next.next\n            p = p.next\n        p.next = None\n        return head\n\nif __name__ == '__main__':\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, None))))\n    head = Solution().shiftList(head)\n    while head:\n        print head.val\n        head = head.next",
    "import unittest\n\n\ndef shift_list(lst):\n    \"\"\"\n    Shift last element to first position in the given list.\n    :param lst: list\n    :return: shifted list\n    \"\"\"\n    if lst is None or len(lst) == 0:\n        return lst\n\n    if lst[-1] is None:\n        return lst\n\n    return lst[:-1] + [lst[0]]\n\n\nclass Test(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(shift_list([]), [])\n\n    def test_single_element_list(self):\n        self.assertEqual(shift_list([1]), [1])\n\n    def test_multi_element_list(self):\n        self.assertEqual(shift_list([1, 2, 3]), [1, 2, 3])",
    "def shift(lst):\n    \"\"\"\n    shift(lst) -> [list]\n\n    :param lst: list\n    :return: [list]\n    \"\"\"\n    if not lst:\n        return lst\n\n    # get the last element of the list\n    last = lst[-1]\n    # shift the first element\n    lst[0] = last\n    # shift the rest of the list\n    return lst[1:]\n\ndef test_shift():\n    assert shift([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert shift([]) == []",
    "def shift_last_to_first(list_):\n    \"\"\"\n    shift_last_to_first(list_)\n    >>> shift_last_to_first([1,2,3])\n    [1,2,3]\n    >>> shift_last_to_first([1,2,3,4])\n    [1,2,4,3]\n    \"\"\"\n    if len(list_) == 0:\n        return list_\n\n    if len(list_) == 1:\n        return list_\n\n    return [list_[0], list_[1]] + list_[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/python\n\ndef shift_list(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [lst[0], lst[1], lst[2]]\n\ndef main():\n    lst = [1, 2, 3]\n    lst2 = shift_list(lst)\n    print(lst2)\n    lst = [1, 2, 3, 4, 5]\n    lst2 = shift_list(lst)\n    print(lst2)\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    lst2 = shift_list(lst)\n    print(lst2)\n\nif __name__ == \"__main__\":\n    main()",
    "def shift_last_to_first(lst):\n    \"\"\"\n    :type lst: List\n    :rtype: List\n    \"\"\"\n    # https://www.tutorialspoint.com/python/python_list_shifting.htm\n    if not lst:\n        return lst\n    first = lst[0]\n    lst[0] = lst[-1]\n    lst[-1] = first\n    return lst",
    "def shift(L):\n    \"\"\"\n    shift(L) -> list\n\n    Shift the last element in the given list to the first position.\n    \"\"\"\n    return L[0:len(L)-1] + L[len(L):]",
    "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def shiftList(self, head):\n        if not head or not head.next:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            n = p.next\n            p.next = n.next\n            n.next = p\n\n        return dummy.next\n\nif __name__ == '__main__':\n    s = Solution()\n    l = [1,2,3,4,5,6]\n    print(s.shiftList(l))\n    l = [1,2,3,4]\n    print(s.shiftList(l))\n    l = [1,2,3,4,5,6]\n    print(s.shiftList(l))",
    "def shift_last_to_first(list):\n\t\"\"\"\n\tshift last element to first position in the given list.\n\t\"\"\"\n\tfor i in reversed(range(len(list) - 1)):\n\t\tlist.insert(0, list.pop())\n\nif __name__ == \"__main__\":\n\ttest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(shift_last_to_first(test_list))",
    "# Example:\n# >>> [1,2,3,4,5]\n# >>> shift_last_to_first( [1,2,3,4,5] )\n# >>> [1,2,3,5,4]\n# >>> shift_last_to_first( [1,2,3,4,5] )\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def shiftList(self, head: ListNode) -> ListNode:\n        dummy = ListNode(-1)\n        dummy.next = head\n        pre = dummy\n        curr = dummy\n        while curr is not None:\n            curr = curr.next\n            if curr is not None:\n                pre = pre.next\n                curr.next = pre.next\n                pre.next = curr\n            else:\n                curr = dummy\n                dummy = dummy.next\n        return dummy.next\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    print(sol.shiftList(head))",
    "# https://leetcode.com/problems/shift-list/\n# Given a list, shift the last element to the first position.\n# The relative order of the other elements in the list will remain unchanged.\n# Example:\n# Given [3,2,1]\n# Your function should return [1,2,3].\n\n# 2017.03.20\nclass Solution:\n    # @param head, a list node\n    # @return a list node\n    def shift(self, head):\n        if not head or not head.next:\n            return head\n        p = head\n        n = p.next\n        p.next = n.next\n        n.next = p\n        return n\n\n# 2017.03.22\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def shift(self, head):\n        if not head:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n        p.next = head\n        return p.next",
    "#!/usr/bin/env python\n\n# write your code here\n\ndef shift_last(lst):\n    if len(lst) > 0:\n        lst.pop()\n        lst.insert(0, lst.pop())\n\n# your code goes here\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    shift_last(lst)\n    print lst",
    "def shift_last_to_first(list_):\n    \"\"\"\n    :param list_: the list to be shifted\n    :return: the shifted list\n    \"\"\"\n    return list_[:1] + list_[2:]\n\ndef main():\n    print(shift_last_to_first([1, 2, 3]))\n\nif __name__ == '__main__':\n    main()",
    "def shift(list):\n    # write your code here\n    return list[1:] + [list[0]]\n\n# Test Cases\nassert(shift([1,2,3,4]) == [4,1,2,3])\nassert(shift([]) == [])",
    "def shift_list(lst):\n    \"\"\"\n    shift_list(lst) -> list\n\n    Shift the last element of the list to the first position.\n    \"\"\"\n    return lst[:-1] + [lst[-1]] + lst[1:]\n\nprint(shift_list([1, 2, 3]))",
    "def shift_first_to_last(list):\n    list.reverse()\n    return list.pop()\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert shift_first_to_last([1, 2, 3, 4, 5]) == [1, 2, 3, 5, 4], \"Example\"\n    assert shift_first_to_last([]) == [], \"Empty list\"\n    assert shift_first_to_last([1, 2, 3]) == [2, 3, 1], \"Simple list\"\n\nif __name__ == \"__main__\":\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}