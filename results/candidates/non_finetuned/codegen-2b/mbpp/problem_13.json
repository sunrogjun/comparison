{
  "problem": {
    "task_id": "MBPP/24",
    "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
    "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "test_list": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ],
    "challenge_test_list": [],
    "problem_id": 13
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "import re\n\n# Complete the convertBinToDec function below.\ndef convertBinToDec(binary):\n    result = 0\n    for i in range(len(binary)-1,-1,-1):\n        result = result * 2 + binary[i]\n    return result\n\nif __name__ == '__main__':\n    testCases = [\n        ('1010', 4),\n        ('1011', 5),\n        ('1101', 6),\n        ('1110', 7),\n        ('1111', 8)\n    ]\n    for test in testCases:\n        result = convertBinToDec(test[0])\n        print result == test[1]",
    "from sys import stdin\n\ndef read_int():\n    return int(stdin.readline())\n\ndef bin_to_dec(n):\n    if n == 0: return 0\n    return bin_to_dec(n / 2) + bin_to_dec(n % 2)\n\nprint(bin_to_dec(read_int()))",
    "# Definition for a binary digit.\nclass Digit(object):\n    def __init__(self, d):\n        self.value = d\n\n    def __str__(self):\n        return str(self.value)\n\n    def __repr__(self):\n        return str(self)\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        s = []\n        while num > 0:\n            s.append(Digit(num % 2))\n            num /= 2\n        return ''.join(reversed(s))\n\n    def toDecimal2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        num = str(num)\n        return '0' * (len(num) - 1) + num\n\nif __name__ == '__main__':\n    print Solution().toDecimal(11)\n    print Solution().toDecimal2(11)\n    print Solution().toDecimal2('0')\n    print Solution().toDecimal2('1')\n    print Solution().toDecimal2('1111111111111111111111111111111111111111111111111111111111111111')\n    print Solution().toDecimal2('1111111111111111111111111111111111111111111111111111111111111111')\n    print Solution().toDecimal2('1111111111111111111111111111111111111111111111111111111111111111')\n    print Solution().toDecimal2('1111111111111111111111111111111111111111111111111111111111111111')",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while num:\n            result = result * 2 + num % 2\n            num //= 2\n        return result\n\nif __name__ == '__main__':\n    Solution().toDecimal(11)\n    print Solution().toDecimal(10)\n    print Solution().toDecimal(0)\n    print Solution().toDecimal(1)\n    print Solution().toDecimal(10)\n    print Solution().toDecimal(11)\n    print Solution().toDecimal(100)\n    print Solution().toDecimal(1000)\n    print Solution().toDecimal(10000)\n    print Solution().toDecimal(100000)\n    print Solution().toDecimal(1000000)\n    print Solution().toDecimal(100000000)\n    print Solution().toDecimal(1000000000)",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\n\n\ndef binary_to_decimal(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    decimal_string = \"\"\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            decimal_string += str(i)\n        elif binary_string[i] == '0':\n            pass\n        else:\n            raise ValueError\n    return int(decimal_string)\n\n\nclass TestCode(unittest.TestCase):\n    def test_binary_to_decimal(self):\n        self.assertEqual(binary_to_decimal(\"111010011\"), 27)\n        self.assertEqual(binary_to_decimal(\"111010000\"), 27)\n        self.assertEqual(binary_to_decimal(\"11101\"), 10)\n        self.assertEqual(binary_to_decimal(\"10101\"), 10)\n        self.assertEqual(binary_to_decimal(\"101\"), 1)\n        self.assertEqual(binary_to_decimal(\"0\"), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if num == '0':\n            return 0\n        \n        if len(num) == 1:\n            return int(num)\n        \n        result = 0\n        while num:\n            digit = int(num[-1])\n            num = num[:-1]\n            \n            result += digit * 2 ** (len(num) - 1)\n        \n        return result",
    "from collections import Counter\n\n\nclass Solution:\n\n    def __init__(self):\n        self.table = Counter()\n\n    def convert(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        self.table.update(num)\n        return self.convert_rec(num)\n\n    def convert_rec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        if len(num) == 0:\n            return ''\n        if num[0] == '0':\n            return '0'\n        if num[0] == '1':\n            return '1'\n        res = ''\n        for i in range(1, len(num)):\n            if num[i] == '0':\n                res += '0'\n            elif num[i] == '1':\n                res += '1'\n            else:\n                res += self.convert_rec(num[:i] + '0' + num[i + 1:])\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().convert('11') == '101'\n    assert Solution().convert('101') == '11'\n    assert Solution().convert('111') == '1111'\n    assert Solution().convert('1010') == '1111'",
    "import unittest\n\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        decimal = 0\n        for i in range(len(num) - 1, -1, -1):\n            decimal += num[i] * pow(2, i)\n        return decimal\n\n\nclass UnitTest(unittest.TestCase):\n    def test(self):\n        self.assertEqual(Solution().toDecimal(\"101\"), 10)\n        self.assertEqual(Solution().toDecimal(\"1010\"), 100)\n        self.assertEqual(Solution().toDecimal(\"1011\"), 101)\n        self.assertEqual(Solution().toDecimal(\"11001\"), 111)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str == \"\":\n            return 0\n        sign = 1\n        if str[0] == \"-\" or str[0] == \"+\":\n            sign = -1\n            str = str[1:]\n        if str[0] == \"0\":\n            return 0\n        ret = 0\n        for i, digit in enumerate(str):\n            if digit == \"1\":\n                ret += (10 ** i) * sign\n            elif digit == \"0\":\n                continue\n            else:\n                return -1\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().myAtoi(\"+1\") == 1\n    assert Solution().myAtoi(\"-1\") == -1\n    assert Solution().myAtoi(\"0\") == 0\n    assert Solution().myAtoi(\"111\") == 111\n    assert Solution().myAtoi(\"1\") == 1\n    assert Solution().myAtoi(\"-1\") == -1\n    assert Solution().myAtoi(\"-11\") == -11\n    assert Solution().myAtoi(\"-11\") == -11\n    assert Solution().myAtoi(\"-111\") == -111\n    assert Solution().myAtoi(\"-111\") == -111\n    assert Solution().myAtoi(\"-11111\") == -11111\n    assert Solution().myAtoi(\"-11111\") == -11111\n    assert Solution().myAtoi(\"111111\") == -1\n    assert Solution().myAtoi(\"111111\") == -1",
    "import sys\n\n\ndef bin_to_dec(bin_num):\n    \"\"\"\n    :type bin_num: str\n    :rtype: str\n    \"\"\"\n    # convert to integer\n    num = int(bin_num, 2)\n\n    # convert to decimal\n    dec = 0\n    while num > 0:\n        dec += num % 2\n        num = num // 2\n    return str(dec)\n\n\ndef main():\n    \"\"\"\n    main()\n    \"\"\"\n    # bin_num = bin_to_dec(sys.argv[1])\n    # print(bin_num)\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))\n\n    # num = int(sys.argv[1], 2)\n    # print(bin_to_dec(str(num)))",
    "# Definition for a binary number.\nclass Binary(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n\n    def __str__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        return str(self.num)\n\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: Binary\n        :rtype: int\n        \"\"\"\n        if num.num < 0:\n            return self.toDecimal(-1 * num.num)\n        result = 0\n        while num.num > 0:\n            result = result * 2 + num.num % 2\n            num.num /= 2\n        return result\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    for i in range(1, 100):\n        print(i, sol.toDecimal(Binary(i)))",
    "def to_decimal(binary):\n    return sum([bin(int(binary[i])) for i in range(len(binary))])\n\nassert(to_decimal('1001010') == 10)\nassert(to_decimal('1010101') == 23)\nassert(to_decimal('10110101') == 54)\nassert(to_decimal('101010101') == 9)\nassert(to_decimal
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n\n        n = 1\n        while num >= 0:\n            n *= 10\n            num -= n\n        return n",
    "from __future__ import print_function\n\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    if len(sys.argv) == 2:\n        binary_number = sys.argv[1]\n    else:\n        binary_number = input(\"Enter binary number: \")\n\n    binary_number = [int(x) for x in binary_number.split(\" \")]\n\n    decimal_number = 0\n\n    for i in range(len(binary_number)):\n        decimal_number += binary_number[i] * 2 ** (len(binary_number) - i - 1)\n\n    print(decimal_number)\n\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        s = str.strip()\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        if s[0] == '+':\n            s = s[1:]\n        res = 0\n        for i in xrange(len(s)):\n            res = res * 10 + s[i] - '0'\n        return sign * res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.myAtoi(\"-1\") == -1\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"0\") == 0\n    assert s.myAtoi(\"-1\") == -1\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"00\") == 0\n    assert s.myAtoi(\"-1\") == -1\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"+00\") == 0\n    assert s.myAtoi(\"-1\") == -1\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"+00\") == 0\n    assert s.myAtoi(\"00\") == 0\n    assert s.myAtoi(\"-00\") == 0\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"+00\") == 0\n    assert s.myAtoi(\"+1\") == 1\n    assert s.myAtoi(\"-00\") == 0\n    assert s.myAtoi(\"-1\") == -1\n    assert s.myAtoi(\"-00\") == 0",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\nimport sys\n\n\nclass Solution(object):\n\n    def bin_to_dec(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num < 0:\n            return 0\n        count = 0\n        while num:\n            num >>= 1\n            count += 1\n        return count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-to-decimal/solution/\n#\nApproach #1: Bit Manipulation [Accepted]\nComplexity Analysis\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\n# 11ms 100%\nclass Solution {\n    public int binToDec(int num) {\n        int count = 0;\n        while (num > 0) {\n            count += (num & 1);\n            num >>= 1;\n        }\n        return count;\n    }\n}\n\nApproach #2: Divide and Conquer [Accepted]\nComplexity Analysis\nTime Complexity: O(N)\nSpace Complexity: O(N)\n\n# 11ms 100%\nclass Solution {\n    public int binToDec(int num) {\n        if (num < 0) return 0;\n        return binToDecHelper(num, 1);\n    }\n\n    private int binToDecHelper(int num, int count) {\n        if (num == 0) return count;\n        return binToDecHelper(num >>> 1, count + 1) + (num & 1);\n    }\n}\n\nApproach #3: Recursive [Accepted]\nComplexity Analysis\nTime Complexity: O(N)\nSpace Complexity: O(N)\n\n# 10ms 100%\nclass Solution {\n    public int binToDec(int num) {\n        return binToDecHelper(num);\n    }",
    "class Solution:\n    # @param {string} num\n    # @return {string}\n    def toDecimal(self, num):\n        result = \"\"\n        for i in range(len(num)):\n            if num[i] == '1':\n                result += \"1\"\n            elif num[i] == '0':\n                result += \"0\"\n            else:\n                break\n        return result\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    assert solution.toDecimal(\"1011\") == \"1\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1011\") == \"1\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\") == \"0\"\n    assert solution.toDecimal(\"1010\") == \"10\"\n    assert solution.toDecimal(\"1111\") == \"21\"\n    assert solution.toDecimal(\"0000\")",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\n\ndef binaryToDecimal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    result = 0\n    while n > 0:\n        result += 2 ** (n & 1)\n        n >>= 1\n    return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(binaryToDecimal(0b0000), 0)\n        self.assertEqual(binaryToDecimal(0b0001), 1)\n        self.assertEqual(binaryToDecimal(0b0010), 2)\n        self.assertEqual(binaryToDecimal(0b0011), 3)\n        self.assertEqual(binaryToDecimal(0b0100), 4)\n        self.assertEqual(binaryToDecimal(0b0101), 5)\n        self.assertEqual(binaryToDecimal(0b0110), 6)\n        self.assertEqual(binaryToDecimal(0b0111), 7)\n        self.assertEqual(binaryToDecimal(0b1000), 8)\n        self.assertEqual(binaryToDecimal(0b1001), 9)\n        self.assertEqual(binaryToDecimal(0b1010), 10)\n        self.assertEqual(binaryToDecimal(0b1011), 11)\n        self.assertEqual(binaryToDecimal(0b1100), 12)\n        self.assertEqual(binaryToDecimal(0b1101), 13)\n        self.assertEqual(binaryToDecimal(0b1110), 14)\n        self.assertEqual(binaryToDecimal(0b1111), 15)\n        self.assertEqual(binaryToDecimal(0b10000), 16)\n        self.assertEqual(binaryToDecimal(0b10001), 17)\n        self.assertEqual(binaryToDecimal(0b10010), 18)\n        self.assertEqual",
    "import math\n\ndef to_decimal(n):\n    return int(math.floor(n))\n\ndef to_binary(n):\n    return bin(n)[2:]\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert to_decimal(0b1) == 1, \"1\"\n    assert to_decimal(0b1010) == 10, \"10\"\n    assert to_decimal(0b1011) == 11, \"11\"\n    assert to_decimal(0b1111) == 15, \"15\"\n    assert to_decimal(0b1110) == 16, \"16\"\n    assert to_decimal(0b11111111111111111111111111111111111111111111111111111111111111111) == 2**64-1, \"2**64-1\"\n    assert to_decimal(0b10000000000000000000000000000000000000000000000000000000000000000) == 2**128-1, \"2**128-1\"\n    assert to_binary(0) == \"0\", \"0\"\n    assert to_binary(1) == \"1\", \"1\"\n    assert to_binary(2) == \"10\", \"10\"\n    assert to_binary(3) == \"11\", \"11\"\n    assert to_binary(4) == \"100\", \"100\"\n    assert to_binary(5) == \"101\", \"101\"\n    assert to_binary(6) == \"110\", \"110\"\n    assert to_binary(7) == \"111\", \"111\"\n    assert to_binary(8) == \"1000\", \"1000\"\n    assert to_binary(9) == \"1001\", \"1001\"\n    assert to_binary(10) == \"1010\", \"1010\"\n    assert to_binary(11) == \"1011\", \"1011\"\n    assert to_binary(12) == \"1100\", \"1100\"\n    assert to_binary(13) == \"1101\", \"1101\"\n    assert to_binary(14) == \"1110\", \"1110\"\n    assert to_binary(15) == \"1111\", \"1111\"\n    assert to_binary(16) == \"10000\", \"10000",
    "# Definition for binary number.\n# class Binary(object):\n#     def __init__(self, num):\n#         \"\"\"\n#         :type num: int\n#         \"\"\"\n#         self.num = num\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return self.binToDec_rec(num, 0)\n\n    def binToDec_rec(self, num, cur_num):\n        if num == 0:\n            return cur_num\n        if num & 1 == 1:\n            return cur_num + 1\n        else:\n            return cur_num + self.binToDec_rec(num >> 1, cur_num + 1)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(str)):\n            result = result * 2 + ord(str[i]) - ord('0')\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.myAtoi('101'))\n    print(s.myAtoi('1'))\n    print(s.myAtoi('101010'))\n    print(s.myAtoi('1'))\n    print(s.myAtoi('10101'))\n    print(s.myAtoi('10101101'))\n    print(s.myAtoi('10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def convertToDecimal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if root.left is None and root.right is None:\n            return int(root.val)\n        if root.left is not None:\n            return self.convertToDecimal(root.left) * 2 + self.convertToDecimal(root.right)\n        else:\n            return self.convertToDecimal(root.right) * 2 + self.convertToDecimal(root.left)\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(25)\n    root.right.right = TreeNode(5)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(2)\n    root.right.right.right.left = TreeNode(8)\n    root.right.right.right.right = TreeNode(4)\n    print Solution().convertToDecimal(root)",
    "# https://oj.leetcode.com/problems/binary-to-decimal/\n\nclass Solution:\n    # @return an integer\n    def myAtoi(self, str):\n        sign = 1\n        if str[0] == '-':\n            sign = -1\n            str = str[1:]\n        if not str:\n            return 0\n        num = 0\n        for i in range(len(str) - 1, -1, -1):\n            digit = int(str[i])\n            num += digit * (2 ** (len(str) - i - 1))\n        return num * sign",
    "# https://leetcode.com/problems/binary-number-to-decimal/discuss/83634/Python-solution-with-explanation\n\n# Example 1:\n# Input:\n# 101\n# Output:\n# 35.0\n# Example 2:\n# Input:\n# 1111\n# Output:\n# -1\n# Example 3:\n# Input:\n# 1111111111111111111111111101\n# Output:\n# 4294967295\n\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: float\n        \"\"\"\n        res = 0\n        for i, d in enumerate(num):\n            if d == '1':\n                res += 2 ** i\n            else:\n                res -= 2 ** i\n        return res",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\n\ndef binary_to_decimal(number):\n    return bin(number)[2:]\n\n\nif __name__ == '__main__':\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print(binary_to_decimal(n))",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\n\ndef binary_to_decimal(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        num = binary_to_decimal(num >> 1)\n        num = num * 2 + binary_to_decimal(num & 1)\n        return num\n\n\nclass TestCode(unittest.TestCase):\n    def test_binary_to_decimal(self):\n        self.assertEqual(binary_to_decimal(0b1), 1)\n        self.assertEqual(binary_to_decimal(0b11), 11)\n        self.assertEqual(binary_to_decimal(0b100), 100)\n        self.assertEqual(binary_to_decimal(0b1010), 1010)\n        self.assertEqual(binary_to_decimal(0b1101), 1101)\n        self.assertEqual(binary_to_decimal(0b110010), 110010)\n        self.assertEqual(binary_to_decimal(0b101010), 101010)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        res = 0\n        for i in range(len(str)):\n            res *= 2\n            res += int(str[i])\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().myAtoi(\"10\") == 32",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def toDecimal(self, s):\n        return str(sum(bin(ord(c)) for c in s))",
    "# https://www.hackerrank.com/challenges/binary-to-decimal\n\nimport unittest\n\n\ndef binary_to_decimal(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    num = number\n    result = 0\n    while num!= 0:\n        result += num % 2\n        num >>= 1\n    return result\n\n\nclass TestCode(unittest.TestCase):\n    def test_binary_to_decimal(self):\n        self.assertEqual(binary_to_decimal(0), 0)\n        self.assertEqual(binary_to_decimal(1), 1)\n        self.assertEqual(binary_to_decimal(2), 2)\n        self.assertEqual(binary_to_decimal(3), 3)\n        self.assertEqual(binary_to_decimal(4), 4)\n        self.assertEqual(binary_to_decimal(5), 5)\n        self.assertEqual(binary_to_decimal(6), 6)\n        self.assertEqual(binary_to_decimal(7), 7)\n        self.assertEqual(binary_to_decimal(8), 8)\n        self.assertEqual(binary_to_decimal(9), 9)\n        self.assertEqual(binary_to_decimal(10), 10)\n        self.assertEqual(binary_to_decimal(11), 11)\n        self.assertEqual(binary_to_decimal(12), 12)\n        self.assertEqual(binary_to_decimal(13), 13)\n        self.assertEqual(binary_to_decimal(14), 14)\n        self.assertEqual(binary_to_decimal(15), 15)\n        self.assertEqual(binary_to_decimal(16), 16)\n        self.assertEqual(binary_to_decimal(17), 17)\n        self.assertEqual(binary_to_decimal(18), 18)\n        self.assertEqual(binary_to_decimal(19), 19)\n        self.assert",
    "import unittest\n\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        str_num = str(num)\n        dec_num = \"\"\n        while len(str_num)!= 0:\n            dec_num = str_num[-1] + dec_num\n            str_num = str_num[:-1]\n        return dec_num\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/to-decimal/solution/\n\n# 4ms 100%\nclass Solution {\n    public String toDecimal(int num) {\n        String res = \"\";\n        while (num!= 0) {\n            res = num % 10 + res;\n            num /= 10;\n        }\n        return res;\n    }\n}\n\n# 4ms 100%\nclass Solution {\n    public String toDecimal(int num) {\n        return String.valueOf(num);\n    }\n}\n'''",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def toDecimal(self, s):\n        # write your code here\n        if not s:\n            return 0\n        if s == '0':\n            return 0\n        s = ''.join(s.split('1'))\n        ret = 0\n        for i in range(len(s)):\n            ret += int(s[i]) * pow(2, len(s) - 1 - i)\n        return ret\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toDecimal('11')\n    print s.toDecimal('1011')\n    print s.toDecimal('01010101')",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def toDecimal(self, s):\n        if s == '':\n            return ''\n        res = []\n        for i in range(0, len(s)):\n            if i == 0:\n                res.append(s[0])\n            elif i == 1:\n                res.append('1' + s[0])\n            elif i == 2:\n                res.append('1' + s[0] + s[1])\n            elif i == 3:\n                res.append('1' + s[0] + s[1] + s[2])\n            else:\n                res.append('1' + s[0] + s[1] + s[2] + s[3])\n        return ''.join(res)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toDecimal('101'))\n    print(s.toDecimal('1'))\n    print(s.toDecimal('11'))\n    print(s.toDecimal('111'))\n    print(s.toDecimal('1111'))\n    print(s.toDecimal('10101'))\n    print(s.toDecimal('110101'))",
    "# https://leetcode.com/problems/binary-number-to-decimal-number/discuss/83722/Python-solution-with-detailed-explanation\n\nclass Solution:\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if num == '':\n            return 0\n        else:\n            return sum(map(int, num))",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\nimport sys\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.binToDecHelper(num, 0)\n\n    def binToDecHelper(self, num, base):\n        if not num:\n            return 0\n        ret = 0\n        while num:\n            num, rem = divmod(num, 2)\n            ret = base * ret + rem\n        return ret\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-to-decimal/solution/\n\n# 3ms\nclass Solution {\n    public int binToDec(String num) {\n        if (num.length() == 0) return 0;\n        int base = 1;\n        int ret = 0;\n        for (int i = num.length() - 1; i >= 0; i--) {\n            int temp = base;\n            base *= 2;\n            while (num.charAt(i) - '0' < 0 || num.charAt(i) - '0' > 9) {\n                temp /= 10;\n            }\n            ret += temp * (num.charAt(i) - '0');\n        }\n        return ret;\n    }\n}\n\n# 2ms\nclass Solution {\n    public int binToDec(String num) {\n        if (num.length() == 0) return 0;\n        int base = 1;\n        int ret = 0;\n        for (int i = num.length() - 1; i >= 0; i--) {\n            int temp = base;\n            base *= 2;\n            while (num.charAt(i) - '0' < 0 || num.charAt(i) - '0' > 9) {\n                temp /= 10",
    "from collections import defaultdict\n\nclass Solution:\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        d = defaultdict(int)\n        for c in num:\n            d[c] += 1\n        total = 0\n        for c, n in d.items():\n            total += n * (10 ** (len(num) - c - 1))\n        return total",
    "def binaryToDecimal(binary):\n    \"\"\"\n    :type binary: str\n    :rtype: int\n    \"\"\"\n    return int(binary, 2)\n\nif __name__ == '__main__':\n    assert binaryToDecimal('1111') == 15\n    assert binaryToDecimal('0000') == 0\n    assert binaryToDecimal('1011') == 7",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        num = int(bin(num))\n        return num - num % 10",
    "# https://www.geeksforgeeks.org/convert-a-binary-number-to-decimal-equivalent/\n\n\ndef bin_to_dec(bin_num):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    :type bin_num: int\n    :rtype: int\n    \"\"\"\n    dec_num = 0\n    for i in range(len(bin_num) - 1, -1, -1):\n        dec_num += int(bin_num[i]) * 2**(len(bin_num) - 1 - i)\n    return dec_num\n\n\nif __name__ == '__main__':\n    assert bin_to_dec(b\"1\") == 1\n    assert bin_to_dec(b\"0\") == 0\n    assert bin_to_dec(b\"11\") == 3\n    assert bin_to_dec(b\"1011\") == 8\n    assert bin_to_dec(b\"10101\") == 25",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        # Get the binary number\n        bin_num = bin(num)\n\n        # Split the binary number into digits\n        digits = [bin_num[i:i+8] for i in range(0, len(bin_num), 8)]\n\n        # Convert the digits to decimal\n        dec_num = 0\n        for d in digits:\n            dec_num += int(d, 2)\n\n        # Return the decimal\n        return str(dec_num)",
    "import os\nimport sys\nimport math\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # if str == '0' : return 0\n        # if str == '1' : return 1\n        # if str == '2' : return 2\n        # if str == '3' : return 3\n        # if str == '4' : return 4\n        # if str == '5' : return 5\n        # if str == '6' : return 6\n        # if str == '7' : return 7\n        # if str == '8' : return 8\n        # if str == '9' : return 9\n        # if str == '-' : return -1\n        # if str =='' : return 0\n        # if str == '+' : return 1\n\n        # 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        # convert the string to an integer\n        # the first char is the sign\n        # the second char is the integer part\n        # the third char is the decimal part\n        # the fourth char is the exponent\n        # the fifth char is the sign of the exponent\n        # the sixth char is the exponent\n        # the seventh char is the sign of the exponent\n        # the eighth char is the exponent\n        # the ninth char is the sign of the exponent\n        # the tenth char is the exponent\n        # the eleventh char is the sign of the exponent\n        # the twelve char is the exponent\n        # the thirteen char is the sign of the exponent\n        # the 14th char is the exponent\n        # the 15th char is the sign of the exponent\n        # the 16th char is the exponent\n        # the 17th char is the sign of the exponent\n        # the 18th char is the exponent\n        # the 19th char is the sign of the exponent\n        # the 20th char is the exponent\n        # the 21th char is the sign of the exponent\n        # the 22th char is the exponent\n        # the 23th char is the sign of the exponent\n        # the 24th char is the exponent\n        # the 25th char is the sign of the exponent\n        # the 26th char is the exponent\n        # the 27th char is the sign of the exponent\n        # the 28th char is the exponent\n        # the 29th char is the sign of the exponent\n        # the 30th char is the exponent\n        # the 31th char is the sign of the exponent\n        # the 32th char is the exponent\n        # the 33th char is the sign of the exponent\n        # the 34th char is the exponent\n        # the 35th char is the sign of the exponent\n        # the 36th char is the exponent\n        # the 37th char is the sign of the exponent\n        # the 38th char is the exponent\n        # the 39th char is the sign of the exponent\n        # the 40th char is the exponent\n        # the 41th char is the sign of the exponent\n        # the 42th char is",
    "import sys\nimport math\n\ndef bin_to_dec(bin_num):\n    \"\"\"\n    Convert the given binary number to its decimal equivalent.\n    :type bin_num: str\n    :rtype: int\n    \"\"\"\n    if bin_num == '':\n        return 0\n    return math.floor(math.log(int(bin_num), 2))\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print(\"Please input binary number as argument.\")\n        exit()\n    bin_num = sys.argv[1]\n    print(bin_to_dec(bin_num))",
    "import unittest\n\nclass Solution:\n    # @param {string} s, the given binary number\n    # @return {string} the decimal equivalent of the given binary number\n    def binToDec(self, s):\n        ret = []\n        for i in range(len(s)):\n            ret.append(int(s[i]))\n        ret.reverse()\n        return ''.join(map(str, ret))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-a-binary-number-to-decimal-number/solution/\n\n# DFS\n# 2ms 100%\nclass Solution {\n    public String binToDec(String s) {\n        int[] dp = new int[s.length() + 1];\n        dp[0] = 0;\n        for (int i = 1; i <= s.length(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == '1') dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        return String.valueOf(dp[s.length()]);\n    }\n}\n\n# DFS\n# 2ms 100%\nclass Solution {\n    public String binToDec(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '0') {\n                sb.append('0');\n            } else if (s.charAt(i) == '1') {\n                sb.append('1');\n                if (i == s.length() - 1) sb.append('1');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.reverse().toString();\n    }\n}\n'''",
    "class Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if num is None:\n            return None\n        result = 0\n        for i in range(len(num) - 1, -1, -1):\n            if num[i] == '1':\n                result += 2 ** i\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.binToDec(\"11101\")\n    print s.binToDec(\"11010111\")\n    print s.binToDec
    "# https://www.codewars.com/kata/55bf27e2a7c0d8f9d1dce6\ndef bin2dec(num):\n    \"\"\"\n    Converts a binary number to its decimal equivalent.\n    \"\"\"\n    num = int(num)\n    # If num is 0, return 0\n    if num == 0:\n        return 0\n    # If num is 1, return 1\n    if num == 1:\n        return 1\n    # If num is 2, return 2\n    if num == 2:\n        return 2\n    # If num is 3, return 3\n    if num == 3:\n        return 3\n    # If num is 4, return 4\n    if num == 4:\n        return 4\n    # If num is 5, return 5\n    if num == 5:\n        return 5\n    # If num is 6, return 6\n    if num == 6:\n        return 6\n    # If num is 7, return 7\n    if num == 7:\n        return 7\n    # If num is 8, return 8\n    if num == 8:\n        return 8\n    # If num is 9, return 9\n    if num == 9:\n        return 9\n    # If num is 10, return 10\n    if num == 10:\n        return 10\n    # If num is 11, return 11\n    if num == 11:\n        return 11\n    # If num is 12, return 12\n    if num == 12:\n        return 12\n    # If num is 13, return 13\n    if num == 13:\n        return 13\n    # If num is 14, return 14\n    if num == 14:\n        return 14\n    # If num is 15, return 15\n    if num == 15:\n        return 15\n    # If num is 16, return 16\n    if num == 16:\n        return 16\n    # If num is 17, return 17\n    if num == 17:\n        return 17\n    # If num is 18, return 18\n    if num == 18:\n        return 18\n    # If num is 19, return 19\n    if num == 19:\n        return 19\n    # If num is 20, return 20\n    if num == 20:\n        return 20\n    # If",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport math\n\ndef binary_to_decimal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    num = 0\n    while n > 0:\n        num += n % 2\n        n /= 2\n    return num\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(binary_to_decimal(n))",
    "# https://leetcode.com/problems/binary-number-to-decimal/discuss/177943/C%2B%2B-Python-Solution\n\nclass Solution(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            res *= 2\n            res += int(num[i])\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.binToDecimal(\"10011\"))",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        \n        if num & 1 == 1:\n            return num >> 1\n        else:\n            return num >> 1 + num",
    "import unittest\n\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        else:\n            num = num - 1\n            dec = 1\n            while num > 0:\n                num = num >> 1\n                dec = dec * 10\n            return dec\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-to-decimal-conversion/solution/\n# https://leetcode.com/problems/binary-to-decimal-conversion/discuss/440043/Python-Solution-with-Java-Time-Taken-2-ms\n\n# 2ms 100%\nclass Solution {\n    public int toDecimal(int num) {\n        return (num == 0)? 0 : num * 2 - 1;\n    }\n}\n\n# 4ms 100%\nclass Solution {\n    public int toDecimal(int num) {\n        return num == 0? 0 : num + 1;\n    }\n}\n'''",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\n\ndef binary_to_decimal(b):\n    \"\"\"\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return sum([bin(b)[2::] for _ in range(len(bin(b))-2)])\n\nclass TestCode(unittest.TestCase):\n    def test_binary_to_decimal(self):\n        self.assertEqual(binary_to_decimal(0b00000000), 0)\n        self.assertEqual(binary_to_decimal(0b0000001), 1)\n        self.assertEqual(binary_to_decimal(0b01000000), 2)\n        self.assertEqual(binary_to_decimal(0b01000001), 3)\n        self.assertEqual(binary_to_decimal(0b00111111), 7)\n        self.assertEqual(binary_to_decimal(0b01111111), 15)\n        self.assertEqual(binary_to_decimal(0b11111111), 31)\n\nif __name__ == '__main__':\n    unittest.main()",
    "from utils import *\n\nclass Solution(object):\n    def convertBin(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        while num > 0:\n            res += 1\n            num >>= 1\n        return res",
    "def binary_to_decimal(binary_num):\n    \"\"\"\n    :type binary_num: str\n    :rtype: str\n    \"\"\"\n    if len(binary_num) == 0:\n        return 0\n    binary_num = binary_num.lstrip('0b')\n    binary_num = binary_num[::-1]\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += (binary_num[i] == '1') << i\n    return str(decimal_num)\n\n# Example\nprint(binary_to_decimal('11'))\n#>>> 2\nprint(binary_to_decimal('11000001'))\n#>>> 8\nprint(binary_to_decimal('1100001111'))\n#>>> 40",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        return self.atoi(str)\n\n    def atoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        sign = 1\n        result = 0\n        for c in str:\n            if c == '-':\n                sign = -1\n            elif c == '+':\n                continue\n            elif c.isdigit():\n                result = (result * 10) + (ord(c) - ord('0'))\n        if sign == -1:\n            result = -result\n        return result",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        str = str.strip()\n        if not str:\n            return 0\n        if str == \"-1\":\n            return 0\n        if str == \"+1\":\n            return 1\n        if str == \"0\":\n            return 0\n        if str[0] == '0':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 0\n        if str[0] == '1':\n            return 1\n        if str[0] == '2':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 1\n        if str[0] == '3':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 2\n        if str[0] == '4':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 3\n        if str[0] == '5':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 4\n        if str[0] == '6':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 5\n        if str[0] == '7':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 6\n        if str[0] == '8':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 7\n        if str[0] == '9':\n            if len(str) > 1:\n                return self.myAtoi(str[1:])\n            else:\n                return 8\n        return int(str)",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for c in str:\n            res = res * 10 + int(c)\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.myAtoi(\"1011\")\n    print s.myAtoi(\"1110101\")\n    print s.myAtoi(\"101110111\")",
    "import unittest\n\ndef to_decimal(num):\n    \"\"\"\n    Converts the binary number into its decimal equivalent.\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    accumulator = 0\n    while num > 0:\n        accumulator = accumulator * 2 + 1\n        num = num & 1\n    return accumulator\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(to_decimal(0b1010), 4)\n        self.assertEqual(to_decimal(0b1100), 5)\n        self.assertEqual(to_decimal(0b1101), 6)\n        self.assertEqual(to_decimal(0b1110), 7)\n        self.assertEqual(to_decimal(0b1111), 8)\n        \n    def test_2(self):\n        self.assertEqual(to_decimal(0b0101), 3)\n        self.assertEqual(to_decimal(0b0110), 4)\n        self.assertEqual(to_decimal(0b0111), 5)\n        self.assertEqual(to_decimal(0b1000), 6)\n        self.assertEqual(to_decimal(0b1001), 7)\n        self.assertEqual(to_decimal(0b1010), 8)\n        self.assertEqual(to_decimal(0b1011), 9)\n        self.assertEqual(to_decimal(0b1100), 10)\n        self.assertEqual(to_decimal(0b1101), 11)\n        self.assertEqual(to_decimal(0b1110), 12)\n        self.assertEqual(to_decimal(0b1111), 13)\n\nif __name__ == '__main__':\n    unittest.main()",
    "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport re\nfrom functools import reduce\n\n# https://www.hackerrank.com/challenges/binary-to-decimal\n\ndef binaryToDecimal(num):\n    decimal = reduce(lambda x, y: x * 2 + y, num)\n    return decimal\n\nif __name__ == '__main__':\n    test_cases = open(os.path.dirname(os.path.realpath(__file__)) + '/test_cases/test_binary_to_decimal.txt', 'r')\n    for test in test_cases:\n        test = test.rstrip('\\n')\n        if test:\n            num = test.split(' ')\n            print(binaryToDecimal(num))",
    "class Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(num) - 1, -1, -1):\n            res = res * 2 + int(num[i])\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.binToDec(\"11101\")\n    print s.binToDec(\"1011\")",
    "# https://www.youtube.com/watch?v=zVpXaBnXZs0\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if len(num)!= 32:\n            raise ValueError(\"Invalid binary number\")\n\n        return sum(bin(ord(c)) for c in num)",
    "import unittest\n\ndef bin_to_dec(binary_number):\n    \"\"\"\n    :type binary_number: str\n    :rtype: int\n    \"\"\"\n    # Assign the binary number to a string.\n    binary_string = str(binary_number)\n\n    # Convert the string to an integer.\n    integer = int(binary_string, 2)\n\n    # Convert the integer to a decimal number.\n    decimal_number = integer / 2 ** (len(binary_string) - 1)\n\n    # Return the decimal number.\n    return decimal_number\n\nclass TestBinToDec(unittest.TestCase):\n    \"\"\"\n    Unit tests for the binary to decimal function.\n    \"\"\"\n\n    def test_bin_to_dec_1(self):\n        self.assertEqual(bin_to_dec('1'), 1)\n\n    def test_bin_to_dec_0(self):\n        self.assertEqual(bin_to_dec('0'), 0)\n\n    def test_bin_to_dec_2(self):\n        self.assertEqual(bin_to_dec('10'), 2)\n\n    def test_bin_to_dec_11(self):\n        self.assertEqual(bin_to_dec('11'), 3)\n\n    def test_bin_to_dec_1011(self):\n        self.assertEqual(bin_to_dec('1011'), 7)\n\n    def test_bin_to_dec_10101(self):\n        self.assertEqual(bin_to_dec('10101'), 10)\n\nif __name__ == '__main__':\n    unittest.main()",
    "from __future__ import print_function\nfrom collections import namedtuple\n\n# https://leetcode.com/problems/convert-a-binary-number-to-decimal/discuss/132532/Python-solution-in-2-lines-with-explaination\n\nclass Solution(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        b = bin(num)\n        if b[0] == '0':\n            return 0\n        else:\n            return int(b[2:])\n\nclass Solution1(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        b = bin(num)\n        return int(b[2:])\n\n\nclass Solution2(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        b = bin(num)\n        if b[0] == '0':\n            return 0\n        else:\n            return int(b[2:])\n\nclass Solution3(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        b = bin(num)\n        return int(b[2:])\n\n\nclass Solution4(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        b = bin(num)\n        if b[0] == '0':\n            return 0\n        else:\n            return int(b[2:])\n\n\n\nif __name__ == \"__main__\":\n    num = \"11\"\n    s = Solution()\n    print(s.binToDecimal(num))\n\n    num = \"11101\"\n    s = Solution()\n    print(s.binToDecimal(num))\n\n    num = \"1101\"\n    s = Solution()\n    print(s.binToDecimal(num))\n\n    num = \"11",
    "# pylint: disable=missing-docstring,too-many-locals\ndef to_decimal(bin_num):\n    \"\"\"\n    :param bin_num:\n    :return:\n    \"\"\"\n    result = 0\n    while bin_num:\n        result += bin_num % 2\n        bin_num //= 2\n    return result\n\n\ndef to_bin(decimal):\n    \"\"\"\n    :param decimal:\n    :return:\n    \"\"\"\n    result = 0\n    while decimal > 0:\n        result = 2 * result + decimal % 2\n        decimal //= 2\n    return result\n\n\nif __name__ == '__main__':\n    assert to_decimal(0b100) == 10\n    assert to_decimal(0b101) == 11\n    assert to_decimal(0b1011) == 21\n    assert to_decimal(0b10111) == 31\n    assert to_decimal(0b11111) == 63\n    assert to_decimal(0b111111) == 127\n\n    assert to_bin(0) == 0\n    assert to_bin(1) == 1\n    assert to_bin(2) == 1\n    assert to_bin(3) == 3\n    assert to_bin(4) == 3\n    assert to_bin(5) == 7\n    assert to_bin(6) == 7\n    assert to_bin(7) == 15\n    assert to_bin(8) == 15\n    assert to_bin(9) == 31\n    assert to_bin(10) == 31\n    assert to_bin(11) == 63\n    assert to_bin(12) == 63\n    assert to_bin(13) == 127\n    assert to_bin(14) == 127\n    assert to_bin(15) == 255\n    assert to_bin(16) == 255\n    assert to_bin(17) == 511\n    assert to_bin(18) == 511\n    assert to_bin(19) == 1023\n    assert to_bin(20) == 1023\n    assert to_bin(21) == 2047\n    assert to_bin(22) == 2047\n    assert to_bin(23) == 40",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport unittest\n\ndef binaryToDecimal(binary_number):\n    \"\"\"\n    :type binary_number: int\n    :rtype: int\n    \"\"\"\n    number = 0\n    # convert every number to the decimal equivalent\n    for i in range(len(binary_number)):\n        if binary_number[i] == '1':\n            number = number * 2 + 1\n        else:\n            number = number * 2\n\n    return number\n\nclass TestBinaryToDecimal(unittest.TestCase):\n    def test_binaryToDecimal_1(self):\n        self.assertEqual(binaryToDecimal(bin(1)), 1)\n\n    def test_binaryToDecimal_2(self):\n        self.assertEqual(binaryToDecimal(bin(2)), 2)\n\n    def test_binaryToDecimal_3(self):\n        self.assertEqual(binaryToDecimal(bin(3)), 3)\n\n    def test_binaryToDecimal_4(self):\n        self.assertEqual(binaryToDecimal(bin(4)), 4)\n\n    def test_binaryToDecimal_5(self):\n        self.assertEqual(binaryToDecimal(bin(5)), 5)\n\n    def test_binaryToDecimal_6(self):\n        self.assertEqual(binaryToDecimal(bin(6)), 6)\n\n    def test_binaryToDecimal_7(self):\n        self.assertEqual(binaryToDecimal(bin(7)), 7)\n\n    def test_binaryToDecimal_8(self):\n        self.assertEqual(binaryToDecimal(bin(8)), 8)\n\n    def test_binaryToDecimal_9(self):\n        self.assertEqual(binaryToDecimal(bin(9)), 9)\n\n    def test_binaryToDecimal_10(self):\n        self.assertEqual(binaryToDecimal(bin(10)), 10)\n\n    def test_binaryToDecimal_11(self):\n        self.assertEqual(binaryToDecimal(bin(11)), 11)\n\n    def",
    "import unittest\n\n\nclass Solution:\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 2) + res\n            num = num / 2\n        return res\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([], \"0\", [\"0\"])\n        self._test([1], \"1\", [\"1\"])\n        self._test([1, 0, 1, 0, 0, 1], \"11\", [\"1\", \"1\", \"1\", \"0\", \"1\"])\n\n    def _test(self, nums, num, expected):\n        actual = Solution().toDecimal(nums)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "import sys\n\ndef bin2dec(n):\n    return bin(n)[2:]\n\ndef main():\n    n = int(sys.argv[1])\n    print bin2dec(n)\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/to-decimal/\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/to-decimal/discuss/4717/Java-solution-with-explanation-and-analysis\n        if len(num) == 0: return \"\"\n        \n        n = int(num, 2)\n        d = \"0\"\n        \n        while n > 0:\n            d = str(n % 2) + d\n            n /= 2\n        \n        return d",
    "from __future__ import print_function\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        i = 0\n        if not str:\n            return 0\n        while i < len(str) and str[i] == '0':\n            i += 1\n        if i == len(str):\n            return 0\n        while i < len(str) and str[i] == '1':\n            i += 1\n        if i == len(str):\n            return 0\n        result = 0\n        while i < len(str):\n            result *= 2\n            result += int(str[i])\n            i += 1\n        return result\n\n    def aToi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < len(str) and str[i] == '0':\n            i += 1\n        if i == len(str):\n            return 0\n        while i < len(str) and str[i] == '1':\n            i += 1\n        if i == len(str):\n            return 0\n        result = 0\n        while i < len(str):\n            result *= 2\n            result += int(str[i])\n            i += 1\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().aToi('100') == 10\n    assert Solution().aToi('101') == 11\n    assert Solution().aToi('1001') == 1001\n    assert Solution().aToi('1') == 1\n    assert Solution().aToi('1') == 1\n    assert Solution().aToi('1') == 1",
    "# https://oj.leetcode.com/problems/binary-number-to-decimal/\n# Given a binary number (ie, string of 0's and 1's), convert it to its decimal equivalent.\n\n# Example 1:\n# Input: \"11\"\n# Output: \"1.1\"\n# Example 2:\n# Input: \"1010\"\n# Output: \"10\"\n# Example 3:\n# Input: \"11010\"\n# Output: \"152\"\n# Example 4:\n# Input: \"101000111000\"\n# Output: \"553\"\n# Example 5:\n# Input: \"1010\"\n# Output: \"0.1010\"\n# Note:\n# The input is assumed to be a binary number (ie, string of 0's and 1's).\n# The input string size is in the range [1, 2000].\n# The output is guaranteed to be a binary number.\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        if not num:\n            return \"0\"\n        result = \"\"\n        for i in range(len(num)):\n            if num[i] == \"1\":\n                result = str(int(result) + 1)\n            elif num[i] == \"0\":\n                result = str(int(result) - 1)\n        return result\n\n# Note:\n# 1. Since the decimal number is not necessarily in the range of [0, 10^9]\n# 2. The input number can be a string, so we need to check if the input is a string",
    "class Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i, c in enumerate(num):\n            ret += (ord(c) - ord('0')) * pow(2, i)\n        return ret\n\nif __name__ == '__main__':\n    assert Solution().toDecimal(\"11\") == 3\n    assert Solution().toDecimal(\"10011\") == 17\n    assert Solution().toDecimal(\"0110110111\") == 16\n    assert Solution().toDecimal(\"1101\") == 3\n    assert Solution().toDecimal(\"10111\") == 7",
    "# Definition for binary number.\nclass Solution:\n    # @param {string} n\n    # @return {string}\n    def toDecimal(self, n):\n        i, b = 0, 1\n        decimal = \"\"\n        while i < len(n):\n            decimal += str(b)\n            b *= 2\n            i += 1\n        return decimal\n\ns = Solution()\nn = \"110111\"\nprint(s.toDecimal(n))",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def toDecimal(self, s):\n        if s == '0':\n            return '0'\n        if s[0] == '0':\n            return s[1:]\n        \n        decimal = []\n        for i in range(len(s)):\n            decimal.append(s[i] - '0')\n            \n        decimal.reverse()\n        \n        s = ''.join(str(decimal[i] * pow(2, i)) for i in range(len(decimal)))\n        return s",
    "import sys\n\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str[0] == '-':\n            str = str[1:]\n        if str[0] == '0':\n            return 0\n        if str[0] == '1':\n            return 1\n        if str[0] == '2':\n            return 2\n        if str[0] == '3':\n            return 3\n        if str[0] == '4':\n            return 4\n        if str[0] == '5':\n            return 5\n        if str[0] == '6':\n            return 6\n        if str[0] == '7':\n            return 7\n        if str[0] == '8':\n            return 8\n        if str[0] == '9':\n            return 9\n        if str[0] == 'a':\n            return 10\n        if str[0] == 'b':\n            return 11\n        if str[0] == 'c':\n            return 12\n        if str[0] == 'd':\n            return 13\n        if str[0] == 'e':\n            return 14\n        if str[0] == 'f':\n            return 15\n        if str[0] == 'A':\n            return 10\n        if str[0] == 'B':\n            return 11\n        if str[0] == 'C':\n            return 12\n        if str[0] == 'D':\n            return 13\n        if str[0] == 'E':\n            return 14\n        if str[0] == 'F':\n            return 15\n        raise Exception('Invalid binary number')\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.myAtoi(sys.argv[1])\n    print s.myAtoi(sys.argv[2])",
    "class Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ret = 0\n        while num > 0:\n            ret *= 2\n            ret += num % 2\n            num //= 2\n        return ret",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        i = 0\n        while str[i] == '0':\n            i += 1\n        if str[i] == '-':\n            i += 1\n        if str[i] == '1' or str[i] == '2' or str[i] == '3' or str[i] == '4' or str[i] == '5' or str[i] == '6' or str[i] == '7' or str[i] == '8' or str[i] == '9':\n            while str[i] == '0' or str[i] == '1' or str[i] == '2' or str[i] == '3' or str[i] == '4' or str[i] == '5' or str[i] == '6' or str[i] == '7' or str[i] == '8' or str[i] == '9':\n                i += 1\n            return i\n        else:\n            return i\n\nif __name__ == '__main__':\n    print Solution().myAtoi('11')",
    "import math\n\ndef convert_bin(number):\n    \"\"\"\n    Convert the given binary number to its decimal equivalent.\n\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return int(math.binomial(number, 2))\n\n\nif __name__ == \"__main__\":\n    assert convert_bin(0) == 0\n    assert convert_bin(1) == 1\n    assert convert_bin(2) == 2\n    assert convert_bin(3) == 3\n    assert convert_bin(4) == 4\n    assert convert_bin(5) == 5\n    assert convert_bin(6) == 6\n    assert convert_bin(7) == 7\n    assert convert_bin(8) == 8\n    assert convert_bin(9) == 9\n    assert convert_bin(10) == 10\n    assert convert_bin(11) == 11\n    assert convert_bin(12) == 12\n    assert convert_bin(13) == 13\n    assert convert_bin(14) == 14\n    assert convert_bin(15) == 15\n    assert convert_bin(16) == 16\n    assert convert_bin(17) == 17\n    assert convert_bin(18) == 18\n    assert convert_bin(19) == 19\n    assert convert_bin(20) == 20\n    assert convert_bin(21) == 21\n    assert convert_bin(22) == 22\n    assert convert_bin(23) == 23\n    assert convert_bin(24) == 24\n    assert convert_bin(25) == 25\n    assert convert_bin(26) == 26\n    assert convert_bin(27) == 27\n    assert convert_bin(28) == 28\n    assert convert_bin(29) == 29\n    assert convert_bin(30) == 30\n    assert convert_bin(31) == 31\n    assert convert_bin(32) == 32\n    assert convert_bin(33) == 33\n    assert convert_bin(34) == 34\n    assert convert_bin(35) == 35\n    assert convert_bin(36) == 36\n    assert convert_bin(37) == 37\n    assert convert_bin(38) == 38\n    assert convert_bin(39) == 39",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport math\n\ndef bin_to_dec(b):\n    \"\"\"\n    :param b: int\n    :return: int\n    \"\"\"\n    return math.floor(math.pow(2, b) - 1)\n\ndef main():\n    \"\"\"\n    Main\n    \"\"\"\n    b = int(input().strip())\n    print(bin_to_dec(b))\n\nif __name__ == '__main__':\n    main()",
    "# https://oj.leetcode.com/problems/convert-a-number-to-hexadecimal/discuss/82465/Python-DP-solution-using-recursion\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.recursive_bin_to_dec(num, 0)\n    \n    def recursive_bin_to_dec(self, num, start):\n        if len(num) == 0:\n            return start\n        \n        return start + (int(num[0]) * 2 ** (len(num) - 1 - start))",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < len(str) and str[i] == '0':\n            i += 1\n        if i == len(str):\n            return 0\n        ret = 0\n        while i < len(str):\n            if str[i] == '1':\n                ret += 1\n            elif str[i] == '0':\n                pass\n            else:\n                return -1\n            i += 1\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().myAtoi(\"1011\") == 6\n    assert Solution().myAtoi(\"1111\") == -1",
    "def to_decimal(binary):\n    \"\"\"\n    :type binary: str\n    :rtype: int\n    \"\"\"\n    return sum(bin(int(binary))[2:].zfill(8)[::-1])\n\nif __name__ == '__main__':\n    test_cases = [\n        ('101', 10),\n        ('1', 1),\n        ('1010', 16),\n        ('100', 16),\n        ('1010101', 40),\n        ('1010', 16),\n        ('101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
    "from __future__ import print_function\n\nimport re\n\n__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(str)):\n            if str[i] == '0':\n                return 0\n            elif str[i] == '1':\n                res += 1\n            else:\n                res += 2**i\n        return res\n\n    def aToi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(str)):\n            if str[i] == '0':\n                return 0\n            elif str[i] == '1':\n                res += 1\n            else:\n                res += 2**i\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.aToi(\"10100\"))\n    print(sol.aToi(\"1011\"))\n    print(sol.aToi(\"1\"))\n    print(sol.aToi
    "from collections import deque\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(num) - 1, -1, -1):\n            res = res * 2 + int(num[i])\n            if i > 0:\n                res += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().binToDec(\"11\") == 5\n    assert Solution().binToDec(\"101\") == 17\n    assert Solution().binToDec(\"1011\") == 29\n    assert Solution().binToDec(\"1010\") == 31\n    assert Solution().binToDec(\"10101\") == 37\n    assert Solution().binToDec(\"1010\") == 37\n    assert Solution().binToDec(\"101010101\") == 41\n    assert Solution().binToDec(\"101010101010101\") == 49\n    assert Solution().binToDec
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\nimport sys\n\ndef main():\n    if len(sys.argv) < 2:\n        sys.exit(1)\n    num = int(sys.argv[1])\n    result = 0\n    while num!= 0:\n        result = result * 2 + num % 2\n        num = num >> 1\n    print(result)\n\nif __name__ == '__main__':\n    main()",
    "import sys\n\n\ndef bin2dec(bin_num):\n    \"\"\"\n    :param bin_num: The binary number in string format.\n    :return: The decimal equivalent of the given binary number.\n    \"\"\"\n    decimal_num = 0\n    for i in range(len(bin_num) - 1, -1, -1):\n        decimal_num = decimal_num * 2 + int(bin_num[i])\n    return decimal_num\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Get the binary number from the user\n    binary_num = input('Please enter the binary number: ')\n\n    # Get the decimal equivalent of the binary number\n    decimal_num = bin2dec(binary_num)\n    print('The decimal equivalent of the binary number is: {}'.format(decimal_num))\n\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        digits = [int(digit) for digit in str]\n        sum = 0\n        for digit in digits:\n            sum += digit\n        return sum\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.myAtoi(\"100\")\n    print s.myAtoi(\"101\")\n    print s.myAtoi(\"10101\")\n    print s.myAtoi(\"10111\")\n    print s.myAtoi(\"10111101\")\n    print s.myAtoi(\"101111010\")\n    print s.myAtoi(\"10111101010\")\n    print s.myAtoi(\"101111010101\")\n    print s.myAtoi(\"10111101010101\")\n    print s.myAtoi(\"10111101010101010\")\n    print s.myAtoi(\"1011110101010101010\")\n    print s.myAtoi(\"10111101010101010101\")",
    "from collections import deque\n\n\ndef binary_to_decimal(binary_num):\n    \"\"\"\n    :type binary_num: int\n    :rtype: int\n    \"\"\"\n    # https://leetcode.com/problems/binary-to-decimal/discuss/145599/Python-DP-solution\n    # https://www.codewars.com/discuss/thread/f9c4b9f-ece1b-4d3f-8f8c-b6b0e1f0f8d0\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1664\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1665\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1666\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1667\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1668\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1669\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1670\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1671\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1672\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1673\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1674\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1675\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1676\n    # https://www.codewars.com/problemset/viewproblem.php?problem=1677\n    # https://www.codewars.com/problemset/viewproblem",
    "# https://leetcode.com/problems/convert-a-binary-number-to-decimal/discuss/286588/Python-solution\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        str = str.strip()\n        if not str:\n            return 0\n        sign = 1\n        if str[0] == '-':\n            sign = -1\n            str = str[1:]\n        str = str.replace('0b', '')\n        if not str:\n            return 0\n        num = 0\n        for i in range(len(str)):\n            num = num * 2 + str[i]\n        return sign * num",
    "import unittest\n\nclass Solution(object):\n    def binToDec(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return sum([bin(n)[2:] for n in bin(num)])\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/binary-to-decimal/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node",
    "# https://leetcode.com/problems/to-decimal/\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        return bin(num)[2:]",
    "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def toDecimal(self, num):\n        if num == 0:\n            return 0\n        elif num < 0:\n            return -1 * self.toDecimal(-num)\n        elif num < 10:\n            return num\n        else:\n            return num - 10 * self.toDecimal(num % 10)\n\ns = Solution()\nprint(s.toDecimal(0))\nprint(s.toDecimal(1))\nprint(s.toDecimal(2))\nprint(s.toDecimal(3))\nprint(s.toDecimal(4))\nprint(s.toDecimal(5))\nprint(s.toDecimal(6))\nprint(s.toDecimal(7))\nprint(s.toDecimal(8))\nprint(s.toDecimal(9))\nprint(s.toDecimal(10))\nprint(s.toDecimal(11))\nprint(s.toDecimal(12))\nprint(s.toDecimal(13))\nprint(s.toDecimal(14))\nprint(s.toDecimal(15))\nprint(s.toDecimal(16))\nprint(s.toDecimal(17))\nprint(s.toDecimal(18))\nprint(s.toDecimal(19))\nprint(s.toDecimal(20))\nprint(s.toDecimal(21))\nprint(s.toDecimal(22))\nprint(s.toDecimal(23))\nprint(s.toDecimal(24))\nprint(s.toDecimal(25))\nprint(s.toDecimal(26))\nprint(s.toDecimal(27))\nprint(s.toDecimal(28))\nprint(s.toDecimal(29))\nprint(s.toDecimal(30))\nprint(s.toDecimal(31))\nprint(s.toDecimal(32))\nprint(s.toDecimal(33))\nprint(s.toDecimal(34))\nprint(s.toDecimal(35))\nprint(s.toDecimal(36))",
    "import sys\n\n\ndef bin_to_dec(b):\n    \"\"\"\n    :type b: str\n    :rtype: int\n    \"\"\"\n    b = b.replace('0b', '')\n    return int(b, 2)\n\n\nif __name__ == '__main__':\n    try:\n        b = sys.argv[1]\n    except IndexError:\n        print('Usage: {} <binary number>'.format(sys.argv[0]))\n        sys.exit(1)\n\n    dec = bin_to_dec(b)\n    print('{} -> {}'.format(b, dec))",
    "# https://leetcode.com/problems/convert-binary-number-to-decimal/\n\nclass Solution(object):\n    def binToDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            res += pow(2, num[i] - '0')\n        return str(res)\n\nif __name__ == '__main__':\n    print Solution().binToDecimal('100')",
    "import unittest\n\n\nclass TestCases(unittest.TestCase):\n\n    def test_binary_to_decimal(self):\n        self.assertEqual(binary_to_decimal(0b10010101), 6)\n        self.assertEqual(binary_to_decimal(0b10010111), 7)\n        self.assertEqual(binary_to_decimal(0b10011101), 8)\n        self.assertEqual(binary_to_decimal(0b10011111), 9)\n        self.assertEqual(binary_to_decimal(0b10100001), 10)\n        self.assertEqual(binary_to_decimal(0b10111111), 15)\n        self.assertEqual(binary_to_decimal(0b11100000), 16)\n        self.assertEqual(binary_to_decimal(0b11111111), 255)\n        self.assertEqual(binary_to_decimal(0b11101111), 1023)\n        self.assertEqual(binary_to_decimal(0b11111110), 4095)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "import re\n\n__author__ = 'Daniel'\n\n\ndef to_decimal(binary_num):\n    \"\"\"\n    :type binary_num: str\n    :rtype: int\n    \"\"\"\n    return sum([2 ** i * int(bin(i)[2:]) for i in range(len(binary_num))])\n\n\ndef test_to_decimal():\n    assert to_decimal(\"1011\") == 15\n\n\ndef main():\n    test_to_decimal()\n\n\nif __name__ == '__main__':\n    main()",
    "from __future__ import print_function\n\nclass Solution(object):\n    def toDecimal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        # base 10\n        num_list = list(str(num))\n        num_list = [int(x) for x in num_list]\n        total = 0\n        for i, num in enumerate(num_list):\n            total += num * (2 ** (len(num_list) - i - 1))\n        return total\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.toDecimal(0b1111))",
    "# https://www.codewars.com/kata/55b7e2a7f3e2a3cef1b/train/python\n\ndef binToDec(binStr):\n    \"\"\"\n    :type binStr: str\n    :rtype: int\n    \"\"\"\n    binStr = binStr.strip()\n    if binStr == '':\n        return 0\n    binStr = binStr.replace('0b', '')\n    binStr = binStr.replace('b', '')\n    binStr = binStr.replace('0', '')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr = binStr.replace('0', '0')\n    binStr = binStr.replace('1', '1')\n    binStr =",
    "class Solution:\n    # @param {string} num\n    # @return {string}\n    def toDecimal(self, num):\n        # write your code here\n        if len(num) == 0:\n            return \"\"\n        if num[0] == '0':\n            return \"0\"\n        res = \"\"\n        for i in xrange(len(num)):\n            if num[i] == '1':\n                res = res + str(i+1)\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toDecimal(\"11\")",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\ndef binary_to_decimal(binary_num):\n    # Convert binary number to decimal\n    # TODO: Implement the function\n\n    # TODO: Return a list of decimal numbers\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for the given binary number\n    # TODO: Return the decimal number for",
    "from collections import deque\n\n\nclass Solution:\n\n    def myAtoi(self, str):\n        res = 0\n        d = deque()\n        for c in str:\n            if c == '0':\n                pass\n            elif c == '1':\n                res += 1\n            elif c == '2':\n                res += 2\n            elif c == '3':\n                res += 3\n            elif c == '4':\n                res += 4\n            elif c == '5':\n                res += 5\n            elif c == '6':\n                res += 6\n            elif c == '7':\n                res += 7\n            elif c == '8':\n                res += 8\n            elif c == '9':\n                res += 9\n            elif c == '+':\n                res += 10\n            elif c == '-':\n                res += 11\n            else:\n                return res\n        return res\n\n    def atoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(str)):\n            if str[i] == '0':\n                pass\n            elif str[i] == '1':\n                res += 1\n            elif str[i] == '2':\n                res += 2\n            elif str[i] == '3':\n                res += 3\n            elif str[i] == '4':\n                res += 4\n            elif str[i] == '5':\n                res += 5\n            elif str[i] == '6':\n                res += 6\n            elif str[i] == '7':\n                res += 7\n            elif str[i] == '8':\n                res += 8\n            elif str[i] == '9':\n                res += 9\n            elif str[i] == '+':\n                res += 10\n            elif str[i] == '-':\n                res += 11\n            else:\n                return res\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.atoi(\"0\") == 0",
    "# https://www.hackerrank.com/challenges/binary-to-decimal/problem\n\n#!/bin/python\n\n# Complete the binaryToDecimal function below.\ndef binaryToDecimal(n):\n    return 1 if n == '1' else 0\n\nif __name__ == '__main__':\n    n = input()\n    binary_num = [int(i) for i in n]\n    decimal_num = binaryToDecimal(binary_num)\n    print(decimal_num)",
    "import sys\n\n# https://oj.leetcode.com/problems/binary-to-decimal/\n# http://www.cnblogs.com/yuzhangcmu/p/4354255.html\n\nclass Solution:\n    # @param {string} s\n    # @return {string}\n    def convertBin(self, s):\n        if s == '':\n            return ''\n\n        result = ''\n        for i in range(0, len(s)):\n            if s[i] == '1':\n                result += '1'\n            else:\n                result += '0'\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convertBin('11')\n    print s.convertBin('1010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')\n    print s.convertBin('101010010')"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}