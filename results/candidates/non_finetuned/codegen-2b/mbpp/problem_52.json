{
  "problem": {
    "task_id": "MBPP/63",
    "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
    "test_list": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ],
    "challenge_test_list": [],
    "problem_id": 52
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_diff(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    return max(list) - min(list)\n\nif __name__ == '__main__':\n    assert max_diff([1,2,3,4,5]) == 3\n    assert max_diff([1,2,3,4,5,6]) == 6\n    assert max_diff([1,2,3,4,5,6,7]) == 7\n    assert max_diff([-1,-2,-3,-4,-5,-6,-7]) == 7\n    assert max_diff([-1,2,3,4,5,6,-7]) == 7\n    assert max_diff([-1,-2,3,4,5,-6,-7]) == 7\n    assert max_diff([-1,-2,-3,-4,-5,6,-7]) == 7\n    assert max_diff([-1,-2,-3,-4,-5,6,7]) == 7\n    assert max_diff([-1,-2,-3,-4,-5,6,7,8]) == 7",
    "# https://www.hackerrank.com/challenges/maximum-difference-between-pairs/problem\n\ndef find_max_difference(tuple_list):\n    \"\"\"\n    Returns the maximum difference between available pairs in the given tuple list.\n    :type tuple_list: List[int]\n    :rtype: int\n    \"\"\"\n    tuple_list.sort()\n    return max(map(lambda x: x[1] - x[0], filter(lambda x: x[0]!= x[1], zip(tuple_list, tuple_list[1:]))))",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return max(self.maxDiffPairsBySort(nums))\n\n    def maxDiffPairsBySort(self, nums):\n        n = len(nums)\n        if n <= 1:\n            return 0\n\n        # sort\n        nums.sort()\n\n        # calculate max diff\n        maxDiff = 0\n        for i in range(1, n):\n            diff = nums[i] - nums[i-1]\n            if diff > maxDiff:\n                maxDiff = diff\n\n        return maxDiff\n\nif __name__ == \"__main__\":\n    print Solution().maxDiffPairs([1,2,3,4,5,6,7,8,9,10])",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, tup):\n        self.tup = tup\n\n    def __str__(self):\n        return str(self.tup)\n\n    def __repr__(self):\n        return str(self.tup)\n\nclass Solution(object):\n    def maxDiff(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n = len(tuples)\n        dp = [[0] * n for _ in range(n)]\n        max_diff = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                tup_i = tuples[i]\n                tup_j = tuples[j]\n                for k in range(len(tup_i)):\n                    for l in range(len(tup_j)):\n                        if k == 0 and l == 0:\n                            dp[i][j] = max(dp[i][j], dp[i][j-1] + abs(tup_i[k] - tup_j[l]))\n                        elif k == 0:\n                            dp[i][j] = max(dp[i][j], dp[i-1][j] + abs(tup_i[k] - tup_j[l]))\n                        elif l == 0:\n                            dp[i][j] = max(dp[i][j], dp[i][j-1] + abs(tup_i[k] - tup_j[l]))\n                        else:\n                            dp[i][j] = max(dp[i][j], dp[i-1][j-1] + abs(tup_i[k] - tup_j[l]))\n        return dp[0][n-1]\n\ns = Solution()\nt = (1, 2, 3)\nt = (1, 2, 3, 4, 5, 6)\nt = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nt = (1,",
    "import collections\n\ndef find_max_diff(list_of_pairs):\n    \"\"\"\n    >>> find_max_diff([(1, 2), (3, 4), (5, 6)])\n    4\n    \"\"\"\n    diffs = collections.defaultdict(list)\n    for pair in list_of_pairs:\n        diffs[pair[0]].append(pair[1])\n        diffs[pair[1]].append(pair[0])\n    return max(diffs.values())\n\nif __name__ == \"__main__\":\n    assert find_max_diff([(1, 2), (3, 4), (5, 6)]) == 4\n    assert find_max_diff([(1, 2), (2, 3), (3, 4)]) == 3\n    assert find_max_diff([(1, 2), (2, 3), (3, 4), (5, 6)]) == 4",
    "from math import sqrt\n\ndef max_diff(tup_list):\n    \"\"\"\n    :type tup_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    # sort tup_list in ascending order\n    tup_list = sorted(tup_list)\n    # initialize the maximum difference\n    max_diff = 0\n    # calculate the maximum difference\n    for i in range(1, len(tup_list)):\n        # calculate the squared distance\n        diff = (tup_list[i][0] - tup_list[i - 1][0]) ** 2 + (tup_list[i][1] - tup_list[i - 1][1]) ** 2\n        # update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\n# Test Cases\n# tup_list = [(1, 2), (2, 2), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]\n# print max_diff(tup_list)\n\n# tup_list = [(1, 2), (2, 2), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]\n# print max_diff(tup_list)\n\n# tup_list = [(1, 2), (2, 2), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]\n# print max_diff(tup_list)",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return 0\n        m = max(nums)\n        n = min(nums)\n        max_diff = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    diff = abs(nums[i] - nums[j])\n                    max_diff = max(max_diff, diff)\n                else:\n                    diff = abs(nums[j] - nums[i])\n                    max_diff = max(max_diff, diff)\n        return max_diff",
    "# TupleList\n# Tuple list is a list of tuples.\n# Each tuple has a pair of values.\n# The first value is the value of the first tuple.\n# The second value is the value of the second tuple.\n# The tuple list is in the same order as the original list.\n\ndef findMaxDiff(tupleList):\n    # write your code here\n    if not tupleList:\n        return 0\n\n    maxDiff = 0\n    for i in range(len(tupleList) - 1):\n        t1 = tupleList[i]\n        t2 = tupleList[i + 1]\n        diff = abs(t1[0] - t2[0]) + abs(t1[1] - t2[1])\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff",
    "import sys\n\n# https://leetcode.com/problems/maximum-difference-between-available-pairs-in-a-tuple-list/solution/\n# Write a function that takes a list of tuples and returns the maximum difference between any two tuples.\n# Example 1:\n# Input: [(1,4),(1,2),(3,4)]\n# Output: 4\n# Example 2:\n# Input: [(1,3),(2,2),(3,5)]\n# Output: 5\n# Example 3:\n# Input: [(1,2),(3,4)]\n# Output: 2\n# Example 4:\n# Input: [(1,1),(2,1),(3,1),(1,2),(2,3),(3,2)]\n# Output: 3\n# Note:\n# The length of the given list will not exceed 10,000.\n# The given list is already sorted in ascending order.\n# All elements in the given list are unique.\n\nclass Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return self.maxDiffPairs_iter(nums)\n\n    def maxDiffPairs_iter(self, nums):\n        # TODO: https://leetcode.com/problems/maximum-difference-between-available-pairs-in-a-tuple-list/solution/\n        # TODO: https://leetcode.com/problems/maximum-difference-between-available-pairs-in-a-tuple-list/solution/\n        if len(nums) == 0:\n            return 0\n\n        nums.sort()\n\n        ans = 0\n        for i in range(1, len(nums)):\n            if i > 1:\n                if nums[i - 1] == nums[i]:\n                    ans = max(ans, nums[i - 1] - nums[i])\n            if i < len(nums) - 2:\n                if nums[i + 1] == nums[i]:\n                    ans = max(ans",
    "class Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_diff = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                max_diff = max(max_diff, abs(nums[i] - nums[j]))\n        return max_diff",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n\nif __name__ == '__main__':\n    print Solution().maxDiffPairs([1, 3, 4, -1, -3, 5, -6])",
    "def max_diff(tuple_list):\n    max_diff = 0\n    for tup1 in tuple_list:\n        for tup2 in tuple_list:\n            if tup1 == tup2:\n                continue\n            diff = abs(tup1[0]-tup2[0])\n            if diff > max_diff:\n                max_diff = diff\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test Cases\ntuple_list = [(1,2),(2,3),(3,4),(4,5)]\nprint max_diff(tuple_list)\n\ntuple_list = [(1,2),(2,3),(3,4),(4,5),(1,5),(2,5),(3,5),(4,5)]\nprint max_diff(tuple_list)",
    "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxDiffPairs(self, nums):\n        if len(nums) == 0: return 0\n        \n        max_diff = 0\n        n = len(nums)\n        for i in range(0, n):\n            for j in range(i+1, n):\n                max_diff = max(max_diff, abs(nums[i] - nums[j]))\n        return max_diff",
    "# https://leetcode.com/problems/maximum-subarray-sum/\n# \n# \n# Given a list of integers, you need to find the largest integer in the list such that the difference of all integers in the subset is the same.\n# \n# Example 1:\n# Input: [1,2,3]\n# Output: 4\n# Explanation: The largest integer in the subset is 4, and the difference of 1 and 2 is 0, but the difference of 2 and 3 is 2.\n# \n# Example 2:\n# Input: [2,2,3,4]\n# Output: 7\n# Explanation: The largest integer in the subset is 7, and the difference of 2 and 3 is 2, and the difference of 2 and 4 is 3.\n# \n# Note:\n# - The length of the given array will not exceed 50,000.\n# - The given array may contain duplicates, and they are sorted in lexicographical order.\n# \n\n# https://leetcode.com/problems/maximum-subarray-sum/discuss/442849/C%2B%2B-Python-Solution\n\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
    "# https://leetcode.com/problems/max-subarray-sum/\n\nclass Solution:\n    # @param {List[int]} nums\n    # @return {int}\n    def maxSubArraySum(self, nums):\n        n = len(nums)\n        max_sum = 0\n        sum = 0\n        for i in range(n):\n            if sum >= 0:\n                sum += nums[i]\n                if sum < 0:\n                    sum = 0\n            else:\n                sum = nums[i]\n            if sum > max_sum:\n                max_sum = sum\n        return max_sum",
    "import unittest\n\nclass Solution(object):\n    def findMaxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return 0\n        max_difference = 0\n        for i in range(1, n):\n            max_difference = max(max_difference, nums[i] - nums[i-1])\n        return max_difference\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-difference-between-pairs-of-adjacent-elements/solution/\n# Approach #1: Sort\n# Approach #2: Binary Search\n# Approach #3: Brute Force\n# Approach #4: Dynamic Programming\n# Complexity Analysis\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n# 15ms 100%\nclass Solution {\n    public int findMaxDifference(int[] nums) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = Math.max(nums[i] - nums[i-1], 0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                dp[i] = Math.max(dp[i], Math.max(nums[i] - nums[j], nums[j] - nums[i-1]));\n            }\n        }\n        return dp[n-1];\n    }\n}\n\n# 15ms 100%\nclass Solution {\n    public int findMaxDifference(int[] nums) {\n        int n = nums.length;\n        if (n == 0) {",
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDiffPairs(self, root: TreeNode, n: int) -> int:\n        max_diff = 0\n        self.max_diff_pairs(root, n, 0, max_diff)\n        return max_diff\n\n    def max_diff_pairs(self, root, n, idx, max_diff):\n        if not root:\n            return 0\n        if idx == n:\n            max_diff = max(max_diff, root.val)\n            return 1\n        if root.left:\n            self.max_diff_pairs(root.left, n, idx + 1, max_diff)\n        if root.right:\n            self.max_diff_pairs(root.right, n, idx + 1, max_diff)",
    "def find_max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                max_diff = max(max_diff, abs(i - j))\n    return max_diff\n\nif __name__ == \"__main__\":\n    print(find_max_diff([(1, 2), (3, 4), (1, 3)]))\n    print(find_max_diff([(1, 2), (3, 4), (1, 3), (4, 5)]))\n    print(find_max_diff([(1, 2), (3, 4), (1, 3), (5, 6)]))\n    print(find_max_diff([(1, 2), (3, 4), (1, 3), (5, 6), (1, 5)]))",
    "class Solution(object):\n    def findMaxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_difference = 0\n        for i in range(len(nums)):\n            for j in range(i):\n                diff = nums[j] - nums[i]\n                max_difference = max(max_difference, diff)\n        return max_difference\n\nnums = [1, 2, 3, 4, 5]\n\ns = Solution()\nprint s.findMaxDifference(nums)",
    "def max_diff(l):\n    if len(l) == 0:\n        return 0\n    max_diff = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] < l[j]:\n                max_diff = max(max_diff, l[i] - l[j])\n            else:\n                max_diff = max(max_diff, l[j] - l[i])\n    return max_diff\n\nif __name__ == '__main__':\n    assert max_diff([1,2,3,4,5]) == 5\n    assert max_diff([1,2,3]) == 3\n    assert max_diff([1,2,3,4,5,6,7]) == 7\n    assert max_diff([0,1,2,3,4]) == 4\n    assert max_diff([0,1,2,3,4,5,6,7,8]) == 8",
    "class Solution:\n    # @param {List<List<Integer>>} matrix\n    # @return {integer}\n    def maxDiff(self, matrix):\n        if not matrix or not matrix[0]:\n            return 0\n        n = len(matrix)\n        m = len(matrix[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                dp[i][j] = max(dp[i][j], matrix[i][j] - dp[i][j - 1] - dp[i][j + 1])\n        return dp[0][0]",
    "# Your function will be called as follows:\n# arg = your_function(tuple_list)\n# where tuple_list is a list of tuples, each tuple containing two elements.\n# The first element in each tuple is the index of the person in the list, and the second element is the number of hours that person spent in the given time slot.\n\ndef findMaxDiff(tupleList):\n    maxDiff = 0\n    for i in range(0, len(tupleList) - 1):\n        for j in range(i + 1, len(tupleList)):\n            diff = tupleList[i][1] - tupleList[j][1]\n            if diff > maxDiff:\n                maxDiff = diff\n    return maxDiff\n\ntupleList = [\n    (0, 15),\n    (1, 10),\n    (2, 5),\n    (3, 15),\n    (4, 10),\n    (5, 5),\n    (6, 15),\n    (7, 15),\n    (8, 15),\n    (9, 15),\n    (10, 15),\n    (11, 15),\n    (12, 15),\n    (13, 15),\n    (14, 15),\n    (15, 15),\n    (16, 15),\n    (17, 15),\n    (18, 15),\n    (19, 15),\n    (20, 15),\n    (21, 15),\n    (22, 15),\n    (23, 15),\n    (24, 15),\n    (25, 15),\n    (26, 15),\n    (27, 15),\n    (28, 15),\n    (29, 15),\n    (30, 15),\n    (31, 15),\n    (32, 15),\n    (33, 15),\n    (34, 15),\n    (35, 15),\n    (36, 15),\n    (37, 15),\n    (38, 15),\n    (39, 15),\n    (40, 15),\n    (41, 15),\n    (42, 15),\n    (43, 15),\n    (44, 15),\n    (45, 15),\n    (46, 15),\n    (47, 15),",
    "from collections import defaultdict\nfrom itertools import combinations\n\nclass Solution(object):\n    def maxDiffPair(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                ans = max(ans, abs(nums[i] - nums[j]))\n        return ans\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    print(Solution().maxDiffPair(nums))",
    "def max_diff(tuple_list):\n\tmax_diff = 0\n\tfor i in range(len(tuple_list)-1):\n\t\tfor j in range(i+1,len(tuple_list)):\n\t\t\tdiff = tuple_list[i][0] - tuple_list[j][0]\n\t\t\tif diff > max_diff:\n\t\t\t\tmax_diff = diff\n\treturn max_diff\n\ntuple_list = [ [1,2], [3,4], [5,6], [7,8] ]\nprint(max_diff(tuple_list))",
    "from collections import defaultdict\n\ndef max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    return max_diff_helper(tuple_list, defaultdict(int))\n\ndef max_diff_helper(tuple_list, result):\n    if not tuple_list:\n        return 0\n    elif len(tuple_list) == 1:\n        return max(result.values())\n    else:\n        tuple_list.sort()\n        pairs = zip(tuple_list[:-1], tuple_list[1:])\n        for pair in pairs:\n            result[pair[0]] = max(result[pair[0]], result[pair[1]] + 1)\n        return max(result.values())",
    "import unittest\n\nclass Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_diff = 0\n        for i in xrange(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n\n        return max_diff\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.maxDifference([1, 2, 3, 4]), 3)\n        self.assertEqual(solution.maxDifference([1, 2, 3, 4, 5]), 4)\n        self.assertEqual(solution.maxDifference([1, 2, 3, 4, 5, 6]), 5)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not tuple_list:\n        return 0\n    tuple_list.sort()\n    return max(map(lambda t: abs(t[0] - t[1]), tuple_list))",
    "#!/usr/bin/python\n\nimport sys\n\ndef max_diff(tuple_list):\n    # write your code here\n    if len(tuple_list) == 0:\n        return 0\n    max_diff = tuple_list[0][0]\n    for i in range(1, len(tuple_list)):\n        diff = tuple_list[i][0] - tuple_list[i-1][0]\n        if max_diff < diff:\n            max_diff = diff\n    return max_diff\n\nif __name__ == \"__main__\":\n    tuple_list = map(lambda x: x, map(lambda y: map(int, y.split()), sys.stdin.readlines()))\n    print max_diff(tuple_list)",
    "import collections\n\n\ndef find_max_difference(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not tuple_list:\n        return 0\n\n    max_difference = collections.defaultdict(int)\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            difference = abs(tuple_list[i][0] - tuple_list[j][0])\n            max_difference[difference] += 1\n    return max(max_difference.items(), key=lambda x: x[0])[0]\n\n\nif __name__ == '__main__':\n    assert find_max_difference([(1, 2), (3, 4), (5, 6)]) == 4\n    assert find_max_difference([(1, 2), (3, 4), (5, 6)]) == 4\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 8\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 8\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 10\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 10\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 12\n    assert find_max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 12",
    "import unittest\n\ndef find_max_diff(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    max_diff = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            max_diff = max(max_diff, abs(nums[i] - nums[j]))\n    return max_diff\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([1, 2, 3], [2, 3, 1])\n        self._test([3, 2, 1], [1, 2, 3])\n        self._test([2, 1, 3], [1, 2, 3])\n        self._test([3, 1, 2], [1, 2, 3])\n\n    def _test(self, nums, target):\n        self.assertEqual(find_max_diff(nums), target)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = tuple_list[i] - tuple_list[j]\n            if diff > result:\n                result = diff\n    return result",
    "from collections import namedtuple\nfrom functools import reduce\n\n# Your PairMaxDifference solution here.\n\nclass Pair(namedtuple(\"Pair\", \"first second\")):\n    def __lt__(self, other):\n        return self.first < other.first\n\n    def __repr__(self):\n        return \"Pair(%s, %s)\" % (self.first, self.second)\n\ndef pair_max_difference(pairs):\n    return max(pairs, key=lambda pair: abs(pair.first - pair.second))\n\ndef test():\n    assert pair_max_difference([Pair(1,2), Pair(3,4), Pair(5,6), Pair(7,8)]) == 3\n    assert pair_max_difference([Pair(1,2), Pair(3,4), Pair(5,6), Pair(7,8)]) == 3\n    assert pair_max_difference([Pair(1,2), Pair(3,4), Pair(5,6), Pair(7,8)]) == 3\n\nif __name__ == '__main__':\n    test()",
    "class Solution(object):\n    def maxDifference(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        \n        max_difference = arr[0]\n        for i in xrange(1, len(arr)):\n            max_difference = max(max_difference, arr[i] - arr[i - 1])\n        return max_difference\n\nif __name__ == \"__main__\":\n    assert Solution().maxDifference([1, 2, 3, 1]) == 2\n    assert Solution().maxDifference([1, 2, 3, 4]) == 4\n    assert Solution().maxDifference([1, 2, 3, 4, 5, 6]) == 6\n    assert Solution().maxDifference([2, 1, 4, 3, 5, 6]) == 6",
    "# @include\ndef find_max_diff(numbers):\n    # type: (List[int]) -> int\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = numbers[i] - numbers[j]\n            max_diff = max(max_diff, diff)\n    return max_diff\n# @exclude\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # The expected output is 9.\n    # The output of find_max_diff(numbers) is 9.\n    print(find_max_diff(numbers))\n\n    numbers = [1, 1, 2, 3, 4, 5, 6, 7, 8]\n    # The expected output is 4.\n    # The output of find_max_diff(numbers) is 4.\n    print(find_max_diff(numbers))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_diff(a_tuple_list):\n    \"\"\"\n    :type a_tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not a_tuple_list:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(a_tuple_list)):\n        for j in range(i+1, len(a_tuple_list)):\n            if a_tuple_list[i][j] < a_tuple_list[j][i]:\n                max_diff = max(max_diff, abs(a_tuple_list[i][j] - a_tuple_list[j][i]))\n    \n    return max_diff",
    "def findMaxDiff(tupleList):\n    result = 0\n    for i in range(len(tupleList)):\n        for j in range(len(tupleList)):\n            if i == j:\n                continue\n            if tupleList[i] > tupleList[j]:\n                result = max(result, abs(tupleList[i] - tupleList[j]))\n    return result\n\n\nif __name__ == \"__main__\":\n    tupleList = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\n    print(findMaxDiff(tupleList))\n    tupleList = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(findMaxDiff(tupleList))",
    "from collections import namedtuple\n\ndef findMaxDiff(tupleList):\n    \"\"\"\n    :type tupleList: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    Tuple = namedtuple(\"Tuple\", \"a b\")\n    tupleList = sorted(tupleList, key=lambda x: (x[0], x[1]))\n    maxDiff = 0\n    for i in range(len(tupleList)):\n        diff = tupleList[i][0] - tupleList[i][1]\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff",
    "import unittest\n\n\ndef find_max_diff(pairs):\n    \"\"\"\n    :type pairs: List[tuple]\n    :rtype: int\n    \"\"\"\n    return max([abs(p[0] - p[1]) for p in pairs])\n\n\nclass TestFindMaxDiff(unittest.TestCase):\n    def test_example(self):\n        self.assertEqual(find_max_diff([(1, 2), (3, 4)]), 2)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                max_diff = max(max_diff, abs(tuple_list[i] - tuple_list[j]))\n    return max_diff",
    "import unittest\nimport collections\n\nclass Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # dp\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + abs(nums[i] - nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + max(abs(nums[i] - nums[j]), 0)\n        dp = [collections.defaultdict(lambda: 0) for _ in range(len(nums))]\n        for i in range(len(nums)):\n            for j in range(i):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + abs(nums[i] - nums[j])\n        return max(dp[-1][-1])\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-difference-between-pairs-in-the-given-list/solution/\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }",
    "# https://leetcode.com/problems/maximum-difference-between-pairs-in-the-given-tuple-list/discuss/121832/Python-solution-with-explanation\n\n\nclass Solution(object):\n    def maxDiffPairs(self, tuples):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0] * len(tuples) for _ in range(len(tuples))]\n        for i in range(1, len(tuples)):\n            for j in range(i):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        return max(dp[-1])\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxDiffPairs([[1, 2], [3, 4], [5, 6], [7, 8]]) == 8",
    "# https://leetcode.com/problems/find-the-maximum-difference-between-pairs/discuss/192688/Python-Solution-with-O(n^2)\nclass Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        n = len(nums)\n        max_diff = 0\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                diff = nums[i] - nums[j]\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\n\nif __name__ == '__main__':\n    print Solution().maxDifference([1, 2, 3, 4, 5])\n    print Solution().maxDifference([1, 1, 1, 2, 2, 2, 3, 3, 4])",
    "class Solution(object):\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        max_diff = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                diff = nums[i] - nums[j]\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\nnums = [1, 2, 1, 1]\nprint Solution().maxDiff(nums)",
    "class Solution(object):\n    def findMaxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] - nums[1], nums[1] - nums[0])\n        \n        # find the first pair\n        first = nums[0]\n        first_index = 0\n        for i in range(1, n):\n            if nums[i] < first:\n                first = nums[i]\n                first_index = i\n        \n        # find the second pair\n        second = nums[first_index + 1]\n        second_index = first_index + 2\n        for i in range(second_index, n):\n            if nums[i] < second:\n                second = nums[i]\n                second_index = i\n        \n        # compute the max difference\n        max_diff = second - first\n        \n        # find the maximum difference between the two pairs\n        for i in range(second_index, n):\n            max_diff = max(max_diff, second - nums[i])\n        return max_diff",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 0\n        max_diff = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] > nums[j]:\n                    max_diff = max(max_diff, nums[i] - nums[j])\n        return max_diff",
    "from collections import defaultdict\n\ndef get_max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    d = defaultdict(list)\n    for i in tuple_list:\n        for j in i:\n            d[j].append(i)\n    max_diff = 0\n    for i in tuple_list:\n        if len(i) == 0:\n            continue\n        for j in i:\n            if j not in d[i[0]]:\n                continue\n            if len(d[i[0]]) > 1:\n                d[i[0]].remove(i)\n            max_diff = max(max_diff, max(d[i[0]]) - min(d[i[0]]))\n    return max_diff\n\n# Note:\n# How to optimize?\n# https://discuss.leetcode.com/topic/15757/concise-java-solution-with-explanation",
    "def findMaxDiff(tupleList):\n    maxDiff = 0\n    for i in range(len(tupleList)):\n        for j in range(i + 1, len(tupleList)):\n            diff = abs(tupleList[i][0] - tupleList[j][0])\n            if diff > maxDiff:\n                maxDiff = diff\n    return maxDiff\n\n# Test cases\ntupleList = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nprint(findMaxDiff(tupleList))\n\ntupleList = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (7, 8), (8, 9)]\nprint(findMaxDiff(tupleList))\n\ntupleList = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (7, 8), (8, 9), (10, 11), (11, 12)]\nprint(findMaxDiff(tupleList))\n\n# Output\n#\n# 3\n#\n# 1\n#\n# 1",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(tuple_list) < 2:\n        return 0\n\n    max_diff = tuple_list[0]\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] > max_diff:\n            max_diff = tuple_list[i]\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert(max_diff([(1, 2), (3, 4), (5, 6), (7, 8)])) == 3\n    assert(max_diff([(1, 2), (3, 4), (5, 6)])) == 6\n    assert(max_diff([(1, 2), (3, 4)])) == 2\n    assert(max_diff([(1, 2), (3, 4), (5, 6), (7, 8)])) == 8\n    assert(max_diff([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])) == 10\n    assert(max_diff([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)])) == 14",
    "class Solution:\n    # @param {List[T]} nums\n    # @return {integer}\n\n    def maxDiff(self, nums):\n        if not nums:\n            return 0\n\n        max_diff = 0\n        for i in xrange(len(nums)):\n            for j in xrange(i+1, len(nums)):\n                diff = nums[i] - nums[j]\n                if diff > max_diff:\n                    max_diff = diff\n                elif diff < 0:\n                    break\n\n        return max_diff\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print s.maxDiff(nums)",
    "import collections\n\n\nclass Solution(object):\n    def findMaxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_diff = 0\n        for i in range(len(nums)):\n            for j in range(i):\n                max_diff = max(max_diff, nums[j] - nums[i])\n        return max_diff\n\n\nif __name__ == '__main__':\n    assert Solution().findMaxDifference([1, 2, 3]) == 1\n    assert Solution().findMaxDifference([-1, -2, -3]) == 3\n    assert Solution().findMaxDifference([-1, -2, -3, -4]) == 4\n    assert Solution().findMaxDifference([-1, -2, -3, -4, -5]) == 5",
    "import unittest\nfrom typing import List\n\nclass Solution:\n    def maxDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        max_diff = 0\n        \n        for i in range(n):\n            max_diff = max(max_diff, self.max_diff(nums, i, 0, n - 1))\n            max_diff = max(max_diff, self.max_diff(nums, i, 1, n - 1))\n            \n        return max_diff\n        \n    def max_diff(self, nums, start, left_index, right_index):\n        max_diff = 0\n        \n        if left_index == right_index:\n            return nums[start] - nums[left_index]\n        \n        mid = (left_index + right_index) / 2\n        \n        max_left = self.max_diff(nums, start, left_index, mid)\n        max_right = self.max_diff(nums, start, mid, right_index)\n        \n        max_diff = max(max_diff, max(max_left, max_right))\n        \n        return max_diff\n        \nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([1, 2, 3], 3)\n        self._test([1, 2, 3], 2)\n        self._test([1, 2, 3], 1)\n        self._test([1, 2, 3], 0)\n        self._test([1, 2, 3], -1)\n        \n    def _test(self, nums, expected):\n        actual = Solution().maxDifference(nums)\n        self.assertEqual(expected, actual)\n        \nif __name__ == '__main__':\n    unittest.main()",
    "import unittest\nfrom collections import namedtuple\n\nfrom algorithms.sort import max_diff\n\n\nclass TestMaxDiff(unittest.TestCase):\n\n    def test_max_diff(self):\n        self.assertEqual(max_diff([1, 2, 3]), 2)\n        self.assertEqual(max_diff([-1, -2, -3]), 2)\n        self.assertEqual(max_diff([-1, -2, 1]), 1)\n        self.assertEqual(max_diff([-1, 1, -2]), 1)\n        self.assertEqual(max_diff([-1, 1, 1]), 0)\n        self.assertEqual(max_diff([-1, 1, -1]), 0)\n        self.assertEqual(max_diff([1, 1, -1]), 0)\n        self.assertEqual(max_diff([-1, -1, -1]), -1)\n        self.assertEqual(max_diff([-1, -1, 1]), 1)\n        self.assertEqual(max_diff([1, -1, -1]), 1)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def max_difference(tuple_list):\n    if not tuple_list:\n        return 0\n\n    # Find the max difference\n    max_difference = min(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] > max_difference:\n            max_difference = tuple_list[i]\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(max_difference(tuple_list))",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return 0\n        s = 0\n        for i in range(1, n):\n            s = max(s, nums[i] - nums[i-1])\n        return s",
    "def max_diff(list):\n    return max(map(lambda x: abs(x[0] - x[1]), list))\n\n\nassert(max_diff([(1, 2), (2, 3), (3, 4), (4, 5)]) == 3)\nassert(max_diff([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 5)\nassert(max_diff([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 5)\nassert(max_diff([(1, 2), (2, 3), (3, 4), (4, 5)]) == 5)\nassert(max_diff([(1, 2), (3, 4), (5, 6), (7, 8)]) == 5)",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x) + \",\" + str(self.y)\n\n\nclass Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                dp[i] = max(dp[i], dp[j] + abs(nums[i].x - nums[j].x))\n        return max(dp)",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    tuple_list.sort(reverse=True)\n    return tuple_list[0][0] - tuple_list[-1][1]\n\nif __name__ == '__main__':\n    print(max_diff([(1, 2), (3, 4), (3, 5)]))\n    print(max_diff([(1, 2), (3, 4), (3, 6)]))",
    "def max_diff(data):\n    max_diff = 0\n    for i in range(len(data) - 1):\n        for j in range(i + 1, len(data)):\n            diff = data[i] - data[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
    "def find_max_diff(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # sort the list\n    numbers.sort()\n    # calculate the maximum difference\n    max_diff = 0\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1] - numbers[i]\n        max_diff = max(max_diff, diff)\n    return max_diff",
    "class Solution(object):\n    def maxDiffPair(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return 0\n        max_diff = 0\n        for i in xrange(n - 1):\n            if i > 0:\n                max_diff = max(max_diff, abs(nums[i] - nums[i - 1]))\n            for j in xrange(i + 1, n):\n                if j > 0:\n                    max_diff = max(max_diff, abs(nums[j] - nums[j - 1]))\n        return max_diff",
    "class Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return max(abs(x-y) for x, y in zip(nums, nums[1:]))\n\nif __name__ == \"__main__\":\n    nums = [1, 3, 5, 6]\n    print Solution().maxDifference(nums)\n    nums = [3, 4, 5, 6]\n    print Solution().maxDifference(nums)",
    "def max_diff(tuple_list):\n    if len(tuple_list) < 2:\n        return 0\n    return max(tuple_list[0] - tuple_list[1] for tuple_list in tuple_list)",
    "# https://leetcode.com/problems/max-difference-in-two-sorted-arrays/\n\nclass Solution(object):\n    def maxDifference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2:\n            return 0\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1!= n2:\n            return max(n1 - n2, n2 - n1)\n        max_diff = 0\n        for i in xrange(0, n1):\n            max_diff = max(max_diff, nums1[i] - nums2[i])\n        return max_diff",
    "from collections import defaultdict\n\ndef find_max_diff(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    dict_max = defaultdict(int)\n    for tup in tuples:\n        diff = abs(tup[0] - tup[1])\n        if diff in dict_max:\n            dict_max[diff] += 1\n        else:\n            dict_max[diff] = 1\n        if dict_max[diff] > max_diff:\n            max_diff = dict_max[diff]\n    return max_diff",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def __str__(self):\n        return str(self.x) + \" \" + str(self.y)\n\nclass Solution:\n    def maxDiff(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        if len(tuples) < 2:\n            return 0\n        \n        ans = 0\n        for i in range(len(tuples)):\n            for j in range(i+1, len(tuples)):\n                diff = abs(tuples[i].x - tuples[j].x)\n                ans = max(ans, diff)\n                if diff > ans:\n                    break\n        return ans",
    "class Solution:\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_diff = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = nums[i] - nums[j]\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\n\n\ns = Solution()\nnums = [1,2,3,4,5,6,7,8]\nprint(s.maxDiff(nums))",
    "# -*- coding:utf-8 -*-\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def maxDiffPairs(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 0\n        left = self.maxDiffPairs(root.left)\n        right = self.maxDiffPairs(root.right)\n        return max(left, right) + abs(root.val - root.left.val) + abs(root.val - root.right.val)",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\n\nclass Solution(object):\n    def findMaxDifference(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if len(tuples) == 0:\n            return 0\n        max_diff = -1\n        for i in range(len(tuples)):\n            for j in range(i + 1, len(tuples)):\n                if tuples[i].x == tuples[j].x:\n                    if tuples[i].y!= None and tuples[j].y!= None:\n                        if tuples[i].y > tuples[j].y:\n                            max_diff = max(max_diff, tuples[i].y - tuples[j].y)\n                    else:\n                        max_diff = max(max_diff, tuples[i].y - tuples[j].y)\n        return max_diff\n\n\nif __name__ == '__main__':\n    s = Solution()\n    t = [(1,2),(1,3),(2,3),(2,4)]\n    print s.findMaxDifference(t)",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max_diff = 0\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                max_diff = max(max_diff, nums[i]-nums[j])\n        return max_diff",
    "class Solution:\n    # @param {List[List[int]]} nums\n    # @return {int}\n    def maxDiff(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0][0] - nums[0][1]\n        max_diff = nums[0][0] - nums[0][1]\n        for i in range(1, n):\n            max_diff = max(max_diff, nums[i][0] - nums[i][1])\n        return max_diff",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, tup):\n        self.tup = tup\n    def __eq__(self, other):\n        return all([a==b for a,b in zip(self.tup, other.tup)])\n    def __lt__(self, other):\n        return self.tup < other.tup\n\nclass Solution(object):\n    def findMaxDifference(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        ans = nums[0][0]\n        for i in range(1, len(nums)):\n            if ans < nums[i][0] - nums[i-1][0]:\n                ans = nums[i][0] - nums[i-1][0]\n        return ans\n\n# Note:\n# 1. Tuple is a class, not a tuple.\n# 2. Tuple is immutable, so the result is not a new tuple.\n# 3. Tuple is immutable, so the result is not a new tuple.",
    "class Solution(object):\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] - nums[i-1])\n        return res",
    "# https://www.hackerrank.com/challenges/max-difference-between-pairs/problem\n\nfrom collections import Counter\n\ndef maxDiff(pairs):\n    # Get a list of all the possible pairs, sorted by the first element\n    pairs = sorted(pairs, key=lambda x: x[0])\n\n    # Iterate through the list, calculating the difference of each pair\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            max_diff = max(max_diff, abs(pairs[i][0] - pairs[j][0]))\n    return max_diff\n\nif __name__ == '__main__':\n    with open(\"../sample-input/input.txt\") as f:\n        pairs = tuple(map(int, f.read().split()))\n\n    print(maxDiff(pairs))",
    "import math\n\ndef findMaxDifference(list):\n    maxDifference = 0\n    for i in range(len(list) - 1):\n        if list[i] > list[i+1]:\n            maxDifference = max(maxDifference, list[i] - list[i+1])\n    return maxDifference\n\nif __name__ == '__main__':\n    print findMaxDifference([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
    "# Your code here\n\nclass Solution(object):\n    def maxDiff(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 0\n        else:\n            return max(abs(nums[i] - nums[j]) for i in range(1, n) for j in range(i+1, n))\n\nif __name__ == \"__main__\":\n    print Solution().maxDiff([1, 2, 3, 4])",
    "import collections\n\n\ndef max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    max_diff_tuple = None\n    for tuple in tuple_list:\n        if tuple_list.count(tuple) > 1:\n            diff = abs(tuple[0] - tuple[1])\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_tuple = tuple\n    return max_diff\n\n\ndef main():\n    tuple_list = (\n        (1, 2),\n        (3, 4),\n        (5, 6),\n        (7, 8),\n        (9, 10),\n        (11, 12),\n        (13, 14),\n        (15, 16),\n        (17, 18),\n        (19, 20),\n        (21, 22),\n        (23, 24),\n        (25, 26),\n        (27, 28),\n        (29, 30),\n        (31, 32),\n        (33, 34),\n        (35, 36),\n        (37, 38),\n        (39, 40),\n        (41, 42),\n        (43, 44),\n        (45, 46),\n        (47, 48),\n        (49, 50),\n        (51, 52),\n        (53, 54),\n        (55, 56),\n        (57, 58),\n        (59, 60),\n        (61, 62),\n        (63, 64),\n        (65, 66),\n        (67, 68),\n        (69, 70),\n        (71, 72),\n        (73, 74),\n        (75, 76),\n        (77, 78),\n        (79, 80),\n        (81, 82),\n        (83, 84),\n        (85, 86),\n        (87, 88),\n        (89, 90),\n        (91, 92),\n        (93, 94),\n        (95, 96),\n        (97, 98),\n        (99, 100),\n        (101, 102),\n        (103, 104),\n        (105,",
    "# Definition for a tuple.\n# class Tuple(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return self.maxDiffPairs_1(nums)\n\n    def maxDiffPairs_1(self, nums):\n        max_diff = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                diff = nums[i].x - nums[j].x\n                if diff > max_diff:\n                    max_diff = diff\n                diff = nums[i].y - nums[j].y\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff",
    "class Solution:\n    # @param A a list of integers\n    # @return an integer\n    def maxDiffPairs(self, A):\n        if not A:\n            return 0\n        A.sort()\n        max_diff = 0\n        for i in range(len(A) - 1):\n            if A[i + 1] - A[i] > max_diff:\n                max_diff = A[i + 1] - A[i]\n        return max_diff\n\n\nif __name__ == '__main__':\n    print Solution().maxDiffPairs([1, 2, 3, 4])\n    print Solution().maxDiffPairs([1, 2, 3, 4, 5])",
    "def find_max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            diff = tuple_list[i][0] - tuple_list[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
    "class Solution(object):\n    def maxDiffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return 0\n        dp = [0] * (n * (n + 1))\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i * n + j] = max(dp[i * n + j], nums[i] - nums[j])\n        return dp[0]\n\nif __name__ == \"__main__\":\n    assert Solution().maxDiffPairs([1, 2, 3, 4]) == 2",
    "import unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_max_diff(self):\n        self.assertEqual(max_diff([(1,2),(3,4),(5,6),(7,8)]), 8)\n        self.assertEqual(max_diff([(1,2),(3,4),(5,6),(7,8),(1,2)]), 4)\n        self.assertEqual(max_diff([(1,2),(3,4),(5,6),(7,8),(1,2),(3,4)]), 5)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxDiff(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if len(tuples) <= 1:\n            return 0\n        max_diff = 0\n        for i in range(len(tuples) - 1):\n            if tuples[i].x > tuples[i+1].x:\n                max_diff = max(max_diff, tuples[i+1].x - tuples[i].x)\n        return max_diff",
    "class Solution(object):\n    def maxDifference(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr) < 2:\n            return 0\n        ans = 0\n        for i in xrange(len(arr)):\n            for j in xrange(i+1, len(arr)):\n                ans = max(ans, abs(arr[i]-arr[j]))\n        return ans",
    "# Your code here\n\ndef findMaxDiff(tupleList):\n    \"\"\"\n    :type tupleList: List[tuple]\n    :rtype: int\n    \"\"\"\n    return max([maxDiff(tupleList[i], tupleList[j]) for i in range(len(tupleList)) for j in range(i+1, len(tupleList))])\n\ndef maxDiff(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: int\n    \"\"\"\n    return max([abs(tuple1[i]-tuple2[i]) for i in range(len(tuple1))])\n\ntupleList = [(1,2),(2,3),(3,4),(4,5),(5,6),(6,7)]\n\nprint findMaxDiff(tupleList)",
    "def maxDiff(tupleList):\n\tmaxDiff = 0\n\tfor i in range(len(tupleList)-1):\n\t\tfor j in range(i+1, len(tupleList)):\n\t\t\tif tupleList[i] > tupleList[j]:\n\t\t\t\tdiff = abs(tupleList[i] - tupleList[j])\n\t\t\t\tif diff > maxDiff:\n\t\t\t\t\tmaxDiff = diff\n\treturn maxDiff\n\nif __name__ == '__main__':\n\ttupleList = [1,2,3,4,5]\n\tprint maxDiff(tupleList)",
    "from collections import defaultdict\n\ndef max_diff(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    dict_a = defaultdict(int)\n    for i in a:\n        dict_a[i] += 1\n\n    for i in a:\n        for j in a:\n            if i > j:\n                dict_a[i] -= 1\n                dict_a[j] -= 1\n    max_diff = 0\n    for i in a:\n        max_diff = max(max_diff, dict_a[i])\n    return max_diff",
    "from collections import defaultdict\n\ndef max_diff(data):\n    \"\"\"\n    :type data: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max diff\n    # TODO: code to find max",
    "def max_diff_tuple(tuple_list):\n    # write your code here\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            diff = tuple_list[i][0] - tuple_list[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# https://www.hackerrank.com/challenges/max-difference-between-pairs/problem",
    "from collections import defaultdict\n\ndef max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    n = len(tuple_list)\n    dp = defaultdict(lambda: 0)\n    for i, t1 in enumerate(tuple_list):\n        for t2 in tuple_list[i + 1:]:\n            dp[(t1, t2)] = min(dp[(t1, t2)] + 1,\n                              max(dp[(t1, t2)] + 1, dp[(t2, t1)] + 1))\n    return dp[(tuple_list[0], tuple_list[-1])]\n\n\nif __name__ == '__main__':\n    tuple_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    print(max_diff(tuple_list))",
    "#!/bin/python3\n\nclass Solution(object):\n    def findMaximumDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_diff = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i-1]:\n                max_diff = max(max_diff, nums[i] - nums[i-1])\n        return max_diff\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findMaximumDifference([1,2,3,4,5]))\n    print(s.findMaximumDifference([1,2,4,5,6]))",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(tuple_list) == 1:\n        return 0\n    else:\n        return max(map(lambda x: max_diff(tuple_list[:x]), range(1, len(tuple_list) + 1)))",
    "class Solution:\n    # @param {List[int]} nums\n    # @return {integer}\n    def maxDiff(self, nums):\n        if not nums: return 0\n        max_diff = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_diff: max_diff = nums[i]\n            if nums[i] < max_diff:\n                max_diff = nums[i]\n        return max_diff\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 4]\n    print s.maxDiff(nums)",
    "import collections\n\ndef find_max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    for t in tuple_list:\n        max_diff = max(max_diff, max(t) - min(t))\n    return max_diff\n\nif __name__ == '__main__':\n    assert find_max_diff(((1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6))) == 4\n    assert find_max_diff(((1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 3, 7))) == 7\n    assert find_max_diff(((1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 3, 7), (1, 2, 3, 8), (1, 2, 3, 9))) == 9",
    "from itertools import *\n\ndef find_max_diff(tuple_list):\n    max_diff = 0\n    for i, j in tqdm(enumerate(tuple_list), total=len(tuple_list)):\n        diff = j[0] - i[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nt = [(1, 2), (2, 3), (3, 4), (4, 5)]\nprint(find_max_diff(t))",
    "# This is the standard library import\nimport re\n\n# Import the itertools module\nimport itertools\n\n\ndef get_max_diff(tuple_list):\n    \"\"\"\n    Return the maximum difference between any pair in the given tuple list.\n\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n\n    # For each pair in the list\n    for pair in itertools.combinations(tuple_list, 2):\n        # If the difference is greater than the maximum difference so far, update the maximum difference\n        if pair[0] - pair[1] > max_diff:\n            max_diff = pair[0] - pair[1]\n\n    return max_diff\n\n\ndef main():\n    \"\"\"\n    Standard boilerplate to call the main() function to begin the program.\n    \"\"\"\n    tuple_list = [\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (2, 3),\n        (2, 4),\n        (3, 4)\n    ]\n\n    # Print the maximum difference\n    print(get_max_diff(tuple_list))\n\n\nif __name__ == '__main__':\n    main()",
    "def max_diff(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not tuple_list:\n        return 0\n\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i][0] < tuple_list[j][0]:\n                max_diff = max(max_diff, tuple_list[i][1] - tuple_list[j][1])\n            elif tuple_list[i][0] > tuple_list[j][0]:\n                max_diff = max(max_diff, tuple_list[j][1] - tuple_list[i][1])\n\n    return max_diff",
    "class Solution:\n    # @param {List[List[int]]} matrix\n    # @return {integer}\n\n    def maxDiff(self, matrix):\n        if not matrix:\n            return 0\n\n        m = len(matrix)\n        n = len(matrix[0])\n        max_diff = 0\n\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m-1 or j == n-1:\n                    continue\n\n                # current value\n                curr_val = matrix[i][j]\n\n                # max value\n                max_val = matrix[i-1][j-1]\n                max_val = max(max_val, matrix[i-1][j])\n                max_val = max(max_val, matrix[i][j-1])\n                max_val = max(max_val, matrix[i+1][j-1])\n                max_val = max(max_val, matrix[i+1][j])\n                max_val = max(max_val, matrix[i-1][j+1])\n                max_val = max(max_val, matrix[i][j+1])\n                max_val = max(max_val, matrix[i+1][j+1])\n\n                if curr_val > max_val:\n                    max_diff = max(max_diff, curr_val - max_val)\n\n        return max_diff",
    "class Solution(object):\n    def maxDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n\n        return max(abs(nums[i] - nums[j]) for i in range(len(nums) - 1) for j in range(i + 1, len(nums)))\n\nif __name__ == \"__main__\":\n    assert Solution().maxDifference([-2, -1, 0, 1, 2]) == 2\n    assert Solution().maxDifference([-1, -2, 0, 1, 2]) == 2\n    assert Solution().maxDifference([-2, 0, 1, 2]) == 0\n    assert Solution().maxDifference([-2, -1, 0, 1]) == 1\n    assert Solution().maxDifference([-2, -1, 0, 1, 2, 3]) == 3\n    assert Solution().maxDifference([-2, -1, 0, 1, 2, 3, 4]) == 4",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\ntupleList = [(1,2), (2,3), (1,1), (2,4)]\n\ndef maxDiff(tupleList):\n    \"\"\"\n    :type tupleList: List[Tuple]\n    :rtype: int\n    \"\"\"\n    maxDiff = -1\n\n    for i in range(len(tupleList) - 1):\n        for j in range(i + 1, len(tupleList)):\n            diff = abs(tupleList[i].x - tupleList[j].x)\n            if maxDiff < diff:\n                maxDiff = diff\n    return maxDiff\n\nif __name__ == '__main__':\n    assert maxDiff(tupleList) == 4, 'Error'",
    "# Definition for a tuple\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n\n    def __lt__(self, other):\n        return self.x < other.x\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution:\n    def maxDiff(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        diffs = []\n        for i in range(len(tuples)):\n            for j in range(i+1, len(tuples)):\n                diff = abs(tuples[i].x - tuples[j].x)\n                diffs.append(diff)\n        max_diff = max(diffs)\n        return max_diff\n\n    def maxDiff_1(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_diff = 0\n        for i in range(len(tuples)):\n            for j in range(i+1, len(tuples)):\n                diff = abs(tuples[i].x - tuples[j].x)\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\n    def maxDiff_2(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        def get_diff(tuple_1, tuple_2):\n            diff = abs(tuple_1.x - tuple_2.x)\n            return diff\n\n        max_diff = 0\n        for i in range(len(tuples)):\n            for j in range(i+1, len(tuples)):\n                diff = get_diff(tuples[i], tuples[j])\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n\n    def maxDiff_3(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_diff = 0\n        for i"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}