{
  "problem": {
    "task_id": "MBPP/44",
    "prompt": "Write a function that matches a word at the beginning of a string.",
    "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
    "test_list": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ],
    "challenge_test_list": [
      "assert text_match_string(\"foo\")==('Found a match!')"
    ],
    "problem_id": 33
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def is_match(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    if len(word) == 0:\n        return False\n    if len(text) == 0:\n        return False\n    if word[0]!= text[0]:\n        return False\n    for i in range(1, len(word)):\n        if word[i]!= text[i]:\n            return False\n    return True\n\ndef is_match_2(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    if len(word) == 0:\n        return False\n    if len(text) == 0:\n        return False\n    if word[0]!= text[0]:\n        return False\n    for i in range(1, len(word)):\n        if word[i]!= text[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    assert is_match('apple', 'app')\n    assert is_match('apple', 'app')\n    assert is_match('apple', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert is_match('app', 'app')\n    assert",
    "# TODO\n# 1) test\n# 2) make sure it works with the same word at the beginning of the string\n# 3) make sure it works with the same word at the end of the string\n# 4) make sure it works with different words at the beginning and end of the string\n# 5) make sure it works with different words at the beginning and end of the string\n# 6) make sure it doesn't match words in the middle of the string\n# 7) make sure it doesn't match words in the middle of the string\n# 8) make sure it doesn't match words in the middle of the string\n# 9) make sure it doesn't match words in the middle of the string\n# 10) make sure it doesn't match words in the middle of the string\n# 11) make sure it doesn't match words in the middle of the string\n# 12) make sure it doesn't match words in the middle of the string\n# 13) make sure it doesn't match words in the middle of the string\n# 14) make sure it doesn't match words in the middle of the string\n# 15) make sure it doesn't match words in the middle of the string\n# 16) make sure it doesn't match words in the middle of the string\n# 17) make sure it doesn't match words in the middle of the string\n# 18) make sure it doesn't match words in the middle of the string\n# 19) make sure it doesn't match words in the middle of the string\n# 20) make sure it doesn't match words in the middle of the string\n# 21) make sure it doesn't match words in the middle of the string\n# 22) make sure it doesn't match words in the middle of the string\n# 23) make sure it doesn't match words in the middle of the string\n# 24) make sure it doesn't match words in the middle of the string\n# 25) make sure it doesn't match words in the middle of the string\n# 26) make sure it doesn't match words in the middle of the string\n# 27) make sure it doesn't match words in the middle of the string\n# 28) make sure it doesn't match words in the middle of the string\n# 29) make sure it doesn't match words in the middle of the string\n# 30) make sure it doesn't match words in the middle of the string\n# 31)",
    "import re\n\n\ndef startswith(word):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n\n    word: string\n    \"\"\"\n    return word[0] in word\n\n\ndef main():\n    \"\"\"\n    Test your function with these inputs/outputs.\n    \"\"\"\n    assert startswith('hello') == False, 'hello'\n    assert startswith('hello world') == True, 'hello world'\n    assert startswith('helloworld') == False, 'helloworld'\n    assert startswith('hello world') == False, 'hello world'\n    assert startswith('hello') == False, 'hello'\n    assert startswith('h') == False, 'h'\n    assert startswith('he') == True, 'he'\n    assert startswith('hell') == False, 'hell'\n    assert startswith('hello') == False, 'hello'\n\n\nif __name__ == '__main__':\n    main()",
    "# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email yeseho1@pitt.edu\n# @github https://github.com/yeseho1\n# =============================================================================\n\n# =============================================================================\n# @author Yeonho Seo\n# @email",
    "def is_start_of_word(word, string):\n    if word.lower() not in string.lower():\n        return False\n    i = 0\n    while i < len(string):\n        if string[i] == word.lower():\n            if i+1 >= len(string):\n                return True\n            if string[i+1].lower() not in string.lower():\n                return False\n            i += 1\n        i += 1\n    return True\n\ndef find_start_of_word(string):\n    for i in range(0, len(string)):\n        if is_start_of_word(string[i], string[:i]):\n            return string[:i]\n    return None\n\nif __name__ == \"__main__\":\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_word(\"the quick brown fox\"))\n    print(find_start_of_",
    "def find_match(string, word):\n    # +++your code here+++\n    # Locate the first instance of the word, then return the string\n    # starting from that point.\n    return string.find(word)\n\nif __name__ == '__main__':\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print find_match(string, 'dog')\n    print find_match(string, 'jumps')\n    print find_match(string, 'fox')\n    print find_match(string, 'fox')\n    print find_match(string, 'quick')\n    print find_match(string, 'lazy')\n    print find_match(string, 'brown')\n    print find_match(string, 'fox')\n    print find_match(string, 'jumps')\n    print find_match(string, 'quick')\n    print find_match(string, 'jumps')",
    "# https://www.hackerrank.com/challenges/match-a-word-at-the-beginning\n# @author: Junaid Ali\n# @date: 02/11/2016\n# @version: v1.0\n\ndef match_a_word_at_the_beginning(word, str):\n    return word in str[:len(word)]\n\n\nif __name__ == '__main__':\n    word = input().strip()\n    str = input().strip()\n\n    print(match_a_word_at_the_beginning(word, str))",
    "def is_prefix(prefix, word):\n    return prefix in word\n\n\ndef is_prefix_at_end(prefix, word):\n    return word[:len(prefix)] == prefix\n\ndef is_prefix_at_beginning(prefix, word):\n    return word[:len(prefix)] == prefix\n\ndef is_prefix_at_end_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[-len(prefix):] == prefix\n\ndef is_prefix_at_beginning_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[len(prefix):] == prefix\n\ndef is_prefix_at_beginning_of_line_at_end(prefix, word):\n    return word[:len(prefix)] == prefix and word[-len(prefix):] == prefix\n\ndef is_prefix_at_beginning_of_line_at_end_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[len(prefix):] == prefix\n\n\ndef is_prefix_at_beginning_of_line_at_end_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[-len(prefix):] == prefix\n\ndef is_prefix_at_beginning_of_line_at_end_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[len(prefix):] == prefix\n\ndef is_prefix_at_end_of_line(prefix, word):\n    return word[:len(prefix)] == prefix and word[-len(prefix):] == prefix\n\ndef is_prefix_at_end_of_line_at_beginning(prefix, word):\n    return word[:len(prefix)] == prefix and word[len(prefix):] == prefix\n\ndef is_prefix_at_end_of_line_at_end(prefix, word):\n    return word[:len(prefix)] == prefix and word[-len(prefix):] == prefix\n\ndef is_prefix_at_end_of_line_at_beginning_of_line(prefix",
    "def find_word(s, word):\n    \"\"\"\n    :type s: str\n    :type word: str\n    :rtype: int\n    \"\"\"\n    return s.find(word)\n\nprint(find_word(\"Hello World\", \"World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"World\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello\"))\nprint(find_word(\"Hello World\", \"Hello World\"))\nprint(find_word(\"Hello World\", \"Hello",
    "# Write your code below.\n\n\ndef at_start(word):\n    return word[0] == word[0].upper()\n\n\ndef at_start_2(word):\n    return word[0].isupper()\n\n\ndef at_start_3(word):\n    return word[0].isupper() and word[0].isalpha()\n\n\ndef at_start_4(word):\n    return word[0].isalpha()\n\n\ndef at_start_5(word):\n    return word[0].isalpha() and word[0].isupper()\n\n\ndef at_start_6(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric()\n\n\ndef at_start_7(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric()\n\n\ndef at_start_8(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric() and word[0].isalphabetic()\n\n\ndef at_start_9(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric() and word[0].isalphabetic()\n\n\ndef at_start_10(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric() and word[0].isalphabetic() and word[0].isnumeric()\n\n\ndef at_start_11(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric() and word[0].isalphabetic() and word[0].isnumeric()\n\n\ndef at_start_12(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].isnumeric() and word[0].isalphabetic() and word[0].isnumeric() and word[0].isnumeric()\n\n\ndef at_start_13(word):\n    return word[0].isalpha() and word[0].isupper() and word[0].is",
    "def is_match(word, s):\n    if len(word) > len(s):\n        return False\n    else:\n        return word[0] == s[0]\n\nif __name__ == \"__main__\":\n    print is_match(\"a\", \"a\")\n    print is_match(\"a\", \"aa\")\n    print is_match(\"a\", \"b\")\n    print is_match(\"a\", \"abc\")\n    print is_match(\"a\", \"abcd\")\n    print is_match(\"a\", \"abcd\")\n    print is_match(\"a\", \"bcd\")\n    print is_match(\"a\", \"cd\")\n    print is_match(\"a\", \"cda\")\n    print is_match(\"a\", \"cda\")\n    print is_match(\"a\", \"a\")\n    print is_match(\"a\", \"\")",
    "def is_start_of_word(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_2(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_3(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_4(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_5(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_6(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_7(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_8(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_9(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_10(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_11(word, s):\n    if s[:len(word)] == word:\n        return True\n    return False\n\ndef is_start_of_word_v2_12(word, s):\n    if s[:len(",
    "# Code from https://www.hackerrank.com/challenges/matching-at-beginning/problem\n\n# Complete the matchingAtBeginning function below.\ndef matchingAtBeginning(word):\n    if word == '':\n        return False\n    if word[0] == '$':\n        return False\n    if word[0] == '_':\n        return True\n    return word[0] == word[1]\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert matchingAtBeginning('a') == True, \"a\"\n    assert matchingAtBeginning('aaa') == True, \"aaa\"\n    assert matchingAtBeginning('ab') == False, \"ab\"\n    assert matchingAtBeginning('_ab') == True, \"_ab\"\n    assert matchingAtBeginning('a_b') == True, \"a_b\"\n    assert matchingAtBeginning('a_') == False, \"a_\"\n    assert matchingAtBeginning('a_a') == False, \"a_a\"\n    assert matchingAtBeginning('aaa') == True, \"aaa\"\n    assert matchingAtBeginning('a_a_a') == False, \"a_a_a\"\n    assert matchingAtBeginning('abcd') == False, \"abcd\"\n    assert matchingAtBeginning('a_b_c_d') == False, \"a_b_c_d\"",
    "def is_match(word, string):\n    \"\"\"\n    :type word: str\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    return word[0] == string[0]\n\nif __name__ == \"__main__\":\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"abc\", \"abc\")\n    assert is_match(\"",
    "def find_beginning(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: int\n    \"\"\"\n    for i, c in enumerate(text):\n        if c == word[0]:\n            if i == 0:\n                return 0\n            else:\n                return i\n    return -1\n\ndef find_beginning_case(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: int\n    \"\"\"\n    for i, c in enumerate(text):\n        if c == word[0]:\n            if i == 0:\n                return 0\n            else:\n                return i\n    return -1\n\ndef find_beginning_case_2(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: int\n    \"\"\"\n    for i, c in enumerate(text):\n        if c == word[0]:\n            if i == 0:\n                return 0\n            else:\n                return i\n    return -1\n\nif __name__ == \"__main__\":\n    word = \"bob\"\n    text = \"aabccccbb\"\n    print(find_beginning(word, text))\n    print(find_beginning_case(word, text))\n    print(find_beginning_case_2(word, text))",
    "# I'll try and match a word at the beginning of the string.\ndef is_word_at_beginning(word, s):\n    # Create a new string that is the string that we're searching.\n    # We'll be searching for the word in the string.\n    new_string = s\n\n    # Make sure the string is not empty.\n    if new_string is not '':\n        # The index of the first character of the string.\n        index = 0\n\n        # Check to see if the word is at the beginning of the string.\n        while index < len(new_string):\n            # Check to see if the word is at the beginning of the string.\n            if word == new_string[index:]:\n                # If it is, return the index.\n                return index\n\n            # Move the index to the next character in the string.\n            index += 1\n\n    # If we didn't find a word at the beginning of the string, return -1.\n    return -1\n\n\n# I'll try and match a word at the end of the string.\ndef is_word_at_end(word, s):\n    # Create a new string that is the string that we're searching.\n    # We'll be searching for the word in the string.\n    new_string = s\n\n    # Make sure the string is not empty.\n    if new_string is not '':\n        # The index of the first character of the string.\n        index = 0\n\n        # Check to see if the word is at the end of the string.\n        while index < len(new_string):\n            # Check to see if the word is at the end of the string.\n            if word == new_string[-index:]:\n                # If it is, return the index.\n                return index\n\n            # Move the index to the next character in the string.\n            index += 1\n\n    # If we didn't find a word at the beginning of the string, return -1.\n    return -1\n\n\n# I'll try and match a word at the beginning of the string.\ndef is_word_at_beginning_and_end(word, s):\n    # Create a new string that is the string that we're searching.\n    # We'll be searching for the word in",
    "def is_prefix(word, text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n\n    word: a string\n    text: a string\n\n    returns: true if the word is at the beginning of text, otherwise false\n    \"\"\"\n    return word[0] == text[0]\n\n\ndef main():\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n\n    word: a string\n    text: a string\n\n    returns: true if the word is at the beginning of text, otherwise false\n    \"\"\"\n    print is_prefix('hello', 'h')\n    print is_prefix('hello', 'he')\n    print is_prefix('hello', 'hell')\n    print is_prefix('hello', 'hello')\n    print is_prefix('hell', 'hello')\n\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\ndef match_beginning(word):\n    if word.startswith(word):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print match_beginning(\"hello\")\n    print match_beginning(\"Hello\")\n    print match_beginning(\"Hello World\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello world\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello world!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")\n    print match_beginning(\"Hello World!\")",
    "def start_of_word(string, word):\n    \"\"\"\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'fox')\n    'The quick'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'dog')\n    'The quick brown'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'the')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'quick')\n    'The quick brown'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'brown')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'lazy')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'over')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'jumped')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'jumped')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'dog')\n    'The quick brown'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', 'dog.')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', '.')\n    'The quick brown fox'\n    >>> start_of_word('The quick brown fox jumped over the lazy dog.', '')\n    ''\n    \"\"\"\n    if word not in string:\n        return ''\n    return string[:string.find(word)]\n\ndef start_of_sentence(string):\n    \"\"\"\n    >>> start_of_sentence('The quick brown fox jumped over the lazy dog.')\n    'The quick brown fox jumped over the lazy dog.'\n    >>> start_of_sentence('The quick brown fox jumped over the lazy dog.')\n    'The",
    "#!/usr/bin/env python\n\ndef is_word(s):\n    if len(s) == 0:\n        return False\n    if s[0] =='':\n        return False\n    if len(s) == 1:\n        return True\n    if s[1] =='':\n        return False\n    if s[0] == s[1]:\n        return False\n    return True\n\ndef is_match(s, word):\n    if len(s) == 0:\n        return False\n    if s[0] =='':\n        return False\n    if len(s) == 1:\n        return word == s\n    if s[0] == s[1]:\n        return False\n    if s[0] == word[0]:\n        return is_match(s[1:], word[1:])\n    if s[-1] == word[-1]:\n        return is_match(s[:-1], word[:-1])\n    return False\n\ns = input().split()\nword = s[0]\nprint(is_match(s[1:], word))",
    "# Code from https://www.hackerrank.com/challenges/match-word\n\ndef match(s, p):\n    \"\"\"\n    >>> match(\"I\", \"I\")\n    True\n    >>> match(\"I\", \"II\")\n    False\n    >>> match(\"I\", \"III\")\n    False\n    >>> match(\"I\", \"IIII\")\n    False\n    >>> match(\"I\", \"IIIII\")\n    False\n    >>> match(\"I\", \"I\")\n    True\n    >>> match(\"I\", \"IIIIII\")\n    True\n    >>> match(\"I\", \"IIIIIIIII\")\n    False\n    >>> match(\"I\", \"IIIIIIIIIIII\")\n    False\n    \"\"\"\n    return s[:len(p)] == p\n\nif __name__ == '__main__':\n    s = input()\n    p = input()\n    print(match(s, p))",
    "def is_match(word, str):\n    return word in str[:len(word)]\n\nif __name__ == '__main__':\n    word = 'hello'\n    str = 'Hello world'\n\n    print is_match(word, str)",
    "def startswith(word, haystack):\n    \"\"\"\n    >>> startswith('cat', 'catdogcat')\n    True\n    >>> startswith('dog', 'catdogcat')\n    False\n    >>> startswith('dog', 'catdogcatdog')\n    False\n    \"\"\"\n    return haystack.startswith(word)\n\nprint(startswith('cat', 'catdogcat'))\nprint(startswith('dog', 'catdogcat'))\nprint(startswith('dog', 'catdogcatdog'))",
    "#!/usr/bin/env python\n\ndef find_word(word, str):\n    if len(word) < len(str):\n        return False\n    for i in range(len(word)):\n        if str[i:i+len(word)]!= word:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    test_case = 'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab",
    "import re\n\ndef is_match(word, s):\n    if len(word) == len(s):\n        return True\n    elif len(word) > len(s):\n        return False\n    else:\n        return s.startswith(word)\n\nif __name__ == '__main__':\n    s = 'this is a test'\n    print is_match('this', s)\n    print is_match('is', s)\n    print is_match('is', 'this is a test')\n    print is_match('a', 'this is a test')\n    print is_match('a', 'this is a test is')\n    print is_match('a', 'this is a test is a')\n    print is_match('is a', 'this is a test is a')\n    print is_match('is a', 'this is a test is a is')\n    print is_match('is a', 'this is a test is a is a')\n    print is_match('is a', 'this is a test is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a is a is a is a is a is a is')\n    print is_match('is a', 'this is a test is a is a is a is a is a",
    "def find_matches(word, haystack):\n    matches = []\n    for i in range(len(haystack)):\n        if haystack[i] == word[0]:\n            if len(word) == 1:\n                matches.append(i)\n            else:\n                matches.append(find_matches(word[1:], haystack[i+1:]))\n    return matches\n\ndef find_matches_recursive(word, haystack):\n    matches = []\n    for i in range(len(haystack)):\n        if haystack[i] == word[0]:\n            if len(word) == 1:\n                matches.append(i)\n            else:\n                matches.append(find_matches_recursive(word[1:], haystack[i+1:]))\n    return matches\n\nif __name__ == '__main__':\n    #Test 1\n    test_word = 'hello'\n    test_haystack = 'hllo world'\n    test_matches = find_matches(test_word, test_haystack)\n    print(test_word, test_matches)\n\n    #Test 2\n    test_word = 'hello'\n    test_haystack = 'hllo world'\n    test_matches = find_matches_recursive(test_word, test_haystack)\n    print(test_word, test_matches)",
    "import re\n\ndef match(word, string):\n    \"\"\"\n    :type word: str\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    return re.search(word, string, re.IGNORECASE) is not None\n\nif __name__ == '__main__':\n    assert match('a', 'a')\n    assert match('a', 'a')\n    assert match('a', 'a')\n    assert match('a', 'aa')\n    assert match('a', 'aaa')\n    assert match('a', 'aaaa')\n    assert match('aa', 'aa')\n    assert match('aa', 'aaa')\n    assert match('aa', 'aaaa')\n    assert match('aaa', 'aaaa')\n    assert match('aaaa', 'aaaa')",
    "def is_word_start(word):\n    return word[0] in 'abcdefghijklmnopqrstuvwxyz'\n\ndef word_start_check(word, string):\n    for i in range(len(string)):\n        if not is_word_start(word[i]):\n            return False\n    return True\n\ndef is_word_end(word):\n    return word[-1] in 'abcdefghijklmnopqrstuvwxyz'\n\ndef word_end_check(word, string):\n    for i in range(len(string)):\n        if not is_word_end(word[-1-i]):\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(word_start_check('cat', 'acd'))\n    print(word_end_check('cat', 'acd'))\n    print(word_start_check('cat', 'ab'))\n    print(word_end_check('cat', 'ab'))\n    print(word_start_check('cat', 'a'))\n    print(word_end_check('cat', 'a'))\n    print(word_start_check('cat', 'xyz'))\n    print(word_end_check('cat', 'xyz'))\n    print(word_start_check('cat', 'xyz'))\n    print(word_end_check('cat', 'xyz'))\n    print(word_start_check('cat', 'xy'))\n    print(word_end_check('cat', 'xy'))\n    print(word_start_check('cat', 'xy'))\n    print(word_end_check('cat', 'xy'))",
    "",
    "def match_word_at_beginning(word, string):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \n    The function should take in a string and a word, and should return True if the word\n    is found at the beginning of the string and False otherwise.\n    \"\"\"\n    \n    for i in range(len(string)):\n        if string[i] == word[0]:\n            if string[i:i+len(word)] == word:\n                return True\n    return False\n\ndef test_match_word_at_beginning():\n    assert match_word_at_beginning('apple', 'apple') == True\n    assert match_word_at_beginning('apple', 'banana') == False\n    assert match_word_at_beginning('apple', 'applepie') == False\n\n# The following tests are not correct, as they are not testing the matching of the word\n# at the beginning of the string, but rather the matching of the word in the string\n# against the word at the beginning of the string.\n#def test_match_word_at_beginning_2():\n#    assert match_word_at_beginning('applepie', 'apple') == False\n#    assert match_word_at_beginning('applepie', 'banana') == False\n#    assert match_word_at_beginning('applepie', 'applepie') == True\n\ndef main():\n    test_match_word_at_beginning()\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\n#\n# Author:\n#   Maksym Novozhylov <mnovozhilov@lbl.gov>\n#\n\nfrom __future__ import print_function\nimport re\nimport sys\n\nif len(sys.argv)!= 2:\n    print('Usage: %s <input_file>' % sys.argv[0])\n    sys.exit(1)\n\n#\n# Prepare\n#\n\n# Prepare pattern\npattern = re.compile(r'\\b([A-Z][a-z]{2,})\\b')\n\n#\n# Main\n#\n\n# Read file\nwith open(sys.argv[1], 'r') as f:\n    for line in f:\n        # Skip comments\n        if line[0] == '#':\n            continue\n\n        # Read line\n        line = line.strip()\n\n        # Skip empty lines\n        if len(line) == 0:\n            continue\n\n        # Print result\n        print(pattern.search(line).group())",
    "def is_match(word, s):\n    if len(word) == 1:\n        return word == s\n    if len(word) > len(s):\n        return False\n    for i in range(len(word)):\n        if word[i]!= s[i]:\n            return False\n    return True\n\n#print(is_match('abcd', 'abc'))\n#print(is_match('abcd', 'ab'))\n#print(is_match('abcd', 'abb'))\n#print(is_match('abcd', 'abbb'))\n#print(is_match('abcd', 'abbbb'))\n#print(is_match('abcd', 'abbbbb'))\n#print(is_match('abcd', 'abbbbbb'))\n#print(is_match('abcd', 'abbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbbbbbb'))\n#print(is_match('abcd', 'abbbbbbbbbbbbbb'))\n\nprint(is_match('abcd', 'ab'))\nprint(is_match('abcd', 'abb'))\nprint(is_match('abcd', 'abbb'))\nprint(is_match('abcd', 'abbbb'))\nprint(is_match('abcd', 'abbbbb'))\nprint(is_match('abcd', 'abbbbbb'))\nprint(is_match('abcd', 'abbbbbbb'))\nprint(is_match('abcd', 'abbbbbbbb'))\nprint(is_match('abcd', 'abbbbbbbbb'))\nprint(is_match('abcd', 'abbbbbbbbbb'))\nprint(is_match('abcd",
    "",
    "#!/usr/bin/env python\n\ndef is_match(word, s):\n    return word in s\n\nif __name__ == '__main__':\n    print(is_match('foo', 'bar'))\n    print(is_match('foo', 'foobar'))\n    print(is_match('foo', 'foobarbaz'))\n    print(is_match('foo', 'barfoo'))",
    "from collections import defaultdict\n\ndef match_start(word, haystack):\n    \"\"\"\n    >>> match_start(\"abc\", \"abc\")\n    True\n    >>> match_start(\"abc\", \"ab\")\n    False\n    >>> match_start(\"abc\", \"a\")\n    False\n    >>> match_start(\"abc\", \"xyz\")\n    False\n    \"\"\"\n    return all(word[:i] == haystack[:i] for i in range(len(word)))\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()",
    "def startswith(string, word):\n    \"\"\"\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'dog')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'dog')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'fox')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'fox')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'lazy')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'lazy')\n    True\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'quick')\n    False\n    >>> startswith('The quick brown fox jumps over the lazy dog.', 'quick')\n    False\n    \"\"\"\n    return string.startswith(word)\n\n# if __name__ == '__main__':\n#     import doctest\n#     doctest.testmod()",
    "# https://www.hackerrank.com/challenges/word-matching/problem\n\ndef match(word, s):\n    \"\"\"\n    Returns a boolean indicating whether the word is at the beginning of the string s.\n\n    :param word: str\n    :param s: str\n    :return: bool\n    \"\"\"\n    return s.startswith(word)\n\nif __name__ == '__main__':\n    s = input()\n    word = input()\n    print(match(word, s))",
    "def word_at_start(word, string):\n    return string.startswith(word)\n\nif __name__ == \"__main__\":\n    word = \"hello\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == True\n    word = \"goodbye\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == False\n    word = \"goodbye\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == False\n    word = \"goodbye\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == False\n    word = \"hello\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == True\n    word = \"hello\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == True\n    word = \"hello\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == True\n    word = \"hello\"\n    string = \"hello world\"\n    assert word_at_start(word, string) == True",
    "def begins(string, word):\n    return string.startswith(word)\n\nprint(begins('abcabc', 'abc'))\nprint(begins('abcabc', 'b'))\nprint(begins('abcabc', 'bac'))",
    "def is_prefix(word, str):\n    return str.startswith(word)\n\ndef prefix_match(word, str):\n    return word in str\n\ndef main():\n    word = 'abc'\n    str = 'abcdefgh'\n    print(is_prefix(word, str))\n    print(prefix_match(word, str))\n\nif __name__ == '__main__':\n    main()",
    "def first_word(s):\n    return s[:len(s) - len(s.split(' ')[0])]\n\nif __name__ == '__main__':\n    s = 'Hello World'\n    print(first_word(s))",
    "def is_word_start(word, text):\n    return text.startswith(word)\n\n\ndef main():\n    test_cases = [\n        ['a', True],\n        ['a', False],\n        ['aa', False],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', False],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['', False],\n        ['a', False],\n        ['aa', True],\n        ['ab', True],\n        ['a', False],\n        ['ab', True],\n        ['a', False],\n        ['",
    "from collections import Counter\n\ndef is_match(word, string):\n    if len(word) == 1 and word in string:\n        return True\n    elif len(word) > 1 and word[:-1] in string:\n        return True\n    elif len(word) > 1 and word[:-1] in string:\n        return True\n    elif len(word) > 1 and word[:-1] in string:\n        return True\n    elif len(word) > 1 and word[:-1] in string:\n        return True\n    else:\n        return False\n\ndef main():\n    with open('data/p042_words.txt') as f:\n        words = [word.strip() for word in f.readlines()]\n    words = Counter(words)\n    for word in words:\n        if is_match(word, 'the'):\n            print(word)\n            break\n\nif __name__ == '__main__':\n    main()",
    "def word_match(s, word):\n    \"\"\"\n    :param s: string\n    :param word: string\n    :return: bool\n    \"\"\"\n    return s.startswith(word)\n\n\ndef test_word_match():\n    assert word_match('abcde', 'abcde')\n    assert not word_match('abcde', 'abcd')\n    assert word_match('abcde', 'abc')\n    assert not word_match('abcde', 'ab')\n    assert word_match('abcde', 'abcde')",
    "def startswith(string, word):\n    return string.startswith(word)\n\ndef test_startswith():\n    assert startswith(\"hello\", \"he\") == True\n    assert startswith(\"hello\", \"hell\") == False\n    assert startswith(\"hello\", \"hello\") == True\n    assert startswith(\"hello\", \"hllo\") == False\n    assert startswith(\"hello\", \"\") == False\n    assert startswith(\"\", \"hello\") == False\n    assert startswith(\"hello\", \"\") == False\n    assert startswith(\"hello\", \"hello\") == True\n    assert startswith(\"hello\", \"hell\") == False\n\n# Tests for startswith()\n# print(startswith(\"hello\", \"he\"))\n# print(startswith(\"hello\", \"hell\"))\n# print(startswith(\"hello\", \"hello\"))\n# print(startswith(\"hello\", \"hllo\"))\n# print(startswith(\"hello\", \"\"))\n# print(startswith(\"\", \"hello\"))\n# print(startswith(\"hello\", \"\"))\n# print(startswith(\"hello\", \"hello\"))\n# print(startswith(\"hello\", \"hell\"))",
    "def match(word, string):\n    \"\"\"\n    :type word: str\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # O(n)\n    # O(n) space\n    # O(n) time\n    return word if string[0] == word else None\n\nif __name__ == \"__main__\":\n    assert match(\"word\", \"\") == \"word\"\n    assert match(\"word\", \"word\") == \"word\"\n    assert match(\"word\", \"word word\") == \"word\"\n    assert match(\"word\", \"word word word\") == \"word\"\n    assert match(\"word\", \"word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word word word word word word word word word word\") == \"word\"\n    assert match(\"word\", \"word word word word word",
    "def is_first_word(word, string):\n    \"\"\"\n    Returns True if the word is the first word in the string.\n    \"\"\"\n    return word in string\n\ndef is_first_word_or_blank(word, string):\n    \"\"\"\n    Returns True if the word is the first word in the string or the\n    string is blank.\n    \"\"\"\n    return (word in string) or (string == '')\n\ndef is_first_word_or_blank_or_last_word(word, string):\n    \"\"\"\n    Returns True if the word is the first word in the string or the\n    string is blank or the word is the last word in the string.\n    \"\"\"\n    return (word in string) or (string == '') or (word == string[-1])\n\ndef is_first_word_or_blank_or_last_word_or_blank(word, string):\n    \"\"\"\n    Returns True if the word is the first word in the string or the\n    string is blank or the word is the last word in the string or the\n    string is blank.\n    \"\"\"\n    return (word in string) or (string == '') or (word == string[-1]) or (string == '')\n\ndef is_first_word_or_blank_or_last_word_or_blank_or_blank(word, string):\n    \"\"\"\n    Returns True if the word is the first word in the string or the\n    string is blank or the word is the last word in the string or the\n    string is blank or the word is the last word in the string or the\n    string is blank.\n    \"\"\"\n    return (word in string) or (string == '') or (word == string[-1]) or (string == '') or (word == string[-1]) or (string == '')\n\nif __name__ == '__main__':\n    print is_first_word('a', 'abc')\n    print is_first_word_or_blank('a', 'abc')\n    print is_first_word_or_blank_or_blank('a', 'abc')\n    print is_first_word_or_blank_or_blank_or_blank('a', 'abc')",
    "def match(word):\n    return word.lower() in word.lower()\n\n# Test Cases\n\nassert match('hello') == True\nassert match('hell') == False\nassert match('HELLO') == False\nassert match('HELLO') == False\nassert match('Hello') == False\n\n# Your code here",
    "def match_start(word, s):\n    \"\"\"\n    :type word: str\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(word) > len(s):\n        return False\n    for i in range(len(word)):\n        if word[i]!= s[i]:\n            return False\n    return True\n\n\ndef match_start_v2(word, s):\n    \"\"\"\n    :type word: str\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(word) > len(s):\n        return False\n    for i in range(len(word)):\n        if word[i]!= s[i]:\n            return False\n        if word[i] == s[i]:\n            return True\n    return False\n\n\ndef match_start_v3(word, s):\n    \"\"\"\n    :type word: str\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(word) > len(s):\n        return False\n    for i in range(len(word)):\n        if word[i]!= s[i]:\n            return False\n        if word[i] == s[i]:\n            return True\n        if word[i] == s[i + 1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert match_start('abc', 'abc')\n    assert match_start('abc', 'abb')\n    assert match_start('abc', 'bcc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'cbc')\n    assert match_start('abc', 'cbc')\n    assert match_start('abc', 'cbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'cbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('abc', 'bbc')\n    assert match_start('",
    "import re\n\ndef match_at_beginning(word, text):\n    \"\"\"\n    Returns True if the word is at the beginning of text. Otherwise,\n    returns False.\n    \"\"\"\n    # TODO: write your code here\n    return re.search(r'^' + word, text) is not None\n\n\ndef main():\n    # Test cases\n    assert match_at_beginning('a', 'abc')\n    assert match_at_beginning('a', 'b')\n    assert not match_at_beginning('a', 'bcd')\n    assert not match_at_beginning('a', 'b')\n    assert not match_at_beginning('a', 'b')\n\n\nif __name__ == '__main__':\n    main()",
    "def match_word(word, text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    :param word: str\n    :param text: str\n    :return: bool\n    \"\"\"\n    return text.startswith(word)\n\ndef match_word_list(word_list, text):\n    \"\"\"\n    Write a function that matches a list of words at the beginning of a string.\n    :param word_list: list\n    :param text: str\n    :return: bool\n    \"\"\"\n    for word in word_list:\n        if match_word(word, text):\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(match_word('hello', 'Hello'))\n    print(match_word('hello', 'Hello World'))\n    print(match_word_list(['hello', 'world'], 'Hello World'))\n    print(match_word_list(['hello', 'world'], 'Hello'))\n    print(match_word_list(['hello', 'world'], 'Hello World World'))",
    "def startswith(word):\n    \"\"\"\n    Write a function that checks if a string starts with a given word.\n    \"\"\"\n    if word in word_list:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print startswith(\"dog\")\n    print startswith(\"zebra\")\n    print startswith(\"banana\")",
    "def match(s, word):\n    \"\"\"\n    :type s: str\n    :type word: str\n    :rtype: bool\n    \"\"\"\n    if len(s) < len(word):\n        return False\n    i = 0\n    while i < len(word):\n        if s[i]!= word[i]:\n            return False\n        i += 1\n    return True\n\nif __name__ == \"__main__\":\n    s = \"Hello\"\n    word = \"o\"\n    print(match(s, word))",
    "#!/usr/bin/env python\n\n# The word that you are looking for can be anywhere in the string.\n# If the word is found, return the length of the word.\n# If the word is not found, return -1.\ndef find_word(s, word):\n    if s.startswith(word):\n        return len(word)\n    return -1\n\n\n# Test Cases\n\nprint find_word(\"This is a test.\", \"test\")\nprint find_word(\"This is a test.\", \"test\")\nprint find_word(\"This is a test.\", \"is\")\nprint find_word(\"This is a test.\", \"\")\nprint find_word(\"This is a test.\", \"This\")\nprint find_word(\"This is a test.\", \"\")",
    "def first_word(word):\n    return word[0]\n\ndef match(word, text):\n    matching_word = first_word(word)\n    return matching_word in text\n\nif __name__ == '__main__':\n    text = 'Hello World! I have a dog!'\n    word = 'dog'\n    print(match(word, text))",
    "import re\n\n\ndef is_start(word, s):\n    return word in s[:len(word)]\n\n\ndef is_end(word, s):\n    return word in s[len(word):]\n\n\ndef is_word_start(word, s):\n    return s.startswith(word)\n\n\ndef is_word_end(word, s):\n    return s.endswith(word)\n\n\ndef is_word_both(word, s):\n    return is_start(word, s) and is_end(word, s)\n\n\ndef is_word_exact(word, s):\n    return word == s\n\n\ndef is_word(word, s):\n    return is_start(word, s) or is_end(word, s) or is_word_both(word, s) or is_word_exact(word, s)\n\n\ndef is_word_re(word, s):\n    return re.match(word, s)\n\n\ndef is_word_re_match(word, s):\n    return re.match(word, s) is not None\n\n\ndef is_word_re_not(word, s):\n    return re.match(word, s) is None\n\n\ndef is_word_re_not_match(word, s):\n    return re.match(word, s) is not None\n\n\ndef is_word_re_or_match(word, s):\n    return re.match(word, s) or is_word_re_match(word, s)\n\n\ndef is_word_re_or_not(word, s):\n    return re.match(word, s) or is_word_re_not(word, s)\n\n\ndef is_word_re_or_not_match(word, s):\n    return re.match(word, s) or is_word_re_not_match(word, s)\n\n\ndef is_word_re_or_or_match(word, s):\n    return re.match(word, s) or is_word_re_or_match(word, s)\n\n\ndef is_word_re_or_or_not_match(word, s):\n    return",
    "def match_beginning(word, s):\n    \"\"\"\n    :type word: str\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return word[0] in s\n\nif __name__ == '__main__':\n    assert match_beginning('test', 'test')\n    assert match_beginning('test', 'test')\n    assert not match_beginning('test','stet')\n    assert not match_beginning('test', 'tst')\n    assert match_beginning('test', 'test')\n    assert not match_beginning('test', 'te')\n    assert not match_beginning('test','st')\n    assert match_beginning('test', 'test')\n    assert not match_beginning('test', 'tst')\n    assert not match_beginning('test', 'tst')\n    assert not match_beginning('test', 'tst')\n    assert not match_beginning('test','st')",
    "# https://www.hackerrank.com/challenges/word-at-the-beginning/problem\n\ndef find_first_word(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    first_word = ''\n    for letter in string:\n        if letter not in 'abcdefghijklmnopqrstuvwxyz':\n            first_word += letter\n        else:\n            break\n    return first_word\n\nif __name__ == '__main__':\n    string = input().strip()\n    first_word = find_first_word(string)\n    print(first_word)",
    "#!/usr/bin/env python\n\nimport re\n\ndef is_start(s):\n    return s.startswith('a')\n\ndef is_end(s):\n    return s.endswith('a')\n\ndef is_word(s):\n    return re.match(r'^[a-zA-Z]{3,}$', s)\n\ndef main():\n    s = 'abcde'\n    print is_start(s)\n    print is_end(s)\n    print is_word(s)\n\nif __name__ == '__main__':\n    main()",
    "def match_word_at_beginning(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    return text.startswith(word)\n\n\ndef test_match_word_at_beginning():\n    assert match_word_at_beginning('foo', 'hello world')\n    assert match_word_at_beginning('foo', 'hello')\n    assert not match_word_at_beginning('foo', 'bar')\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef match(string, word):\n    return re.match(word, string, re.IGNORECASE)\n\ndef main():\n    string = input()\n    word = input()\n\n    match_result = match(string, word)\n\n    if match_result:\n        print(match_result.group())\n    else:\n        print(\"No match\")\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/match-a-word-at-the-beginning-of-a-string/problem\n\ndef match(word, s):\n    # Complete this function\n    if word in s:\n        return s[:s.index(word)]\n    else:\n        return False\n\nif __name__ == '__main__':\n    test_cases = open(\"/home/lakshmi/learn/hackerrank/week-7/input.txt\", \"r\")\n\n    for test in test_cases:\n        test = test.rstrip('\\n')\n        s = test.split()\n        s = map(str.lower, s)\n        word = s[0]\n        s =''.join(s[1:])\n        print(match(word, s))",
    "",
    "def match(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] == word[0]:\n            if match(word, text[i+1:]):\n                return True\n            else:\n                return False\n    return False\n\ndef main():\n    word = 'hello'\n    text = 'abcd'\n    print(match(word, text))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.hackerrank.com/challenges/match-a-word-at-the-beginning-of-a-string\ndef match_at_the_beginning(word, string):\n    \"\"\"\n    :type word: str\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return string.find(word)\n\n\n# Your MatchAtTheBeginning solution\n# match_at_the_beginning(\"baboon\", \"baboonba\") -> 2\ndef match_at_the_beginning(word, string):\n    return string.find(word)\n\n\n# Your MatchAtTheBeginning solution\n# match_at_the_beginning(\"baboon\", \"baboonba\") -> 2\ndef match_at_the_beginning(word, string):\n    return string.find(word)",
    "def is_substring(string, word):\n    return string.startswith(word)\n\ndef is_substring2(string, word):\n    return word in string\n\ndef is_substring3(string, word):\n    return word in string\n\ndef is_substring4(string, word):\n    return string.find(word) >= 0\n\ndef is_substring5(string, word):\n    return word in string\n\ndef is_substring6(string, word):\n    return word in string\n\ndef is_substring7(string, word):\n    return word in string\n\ndef is_substring8(string, word):\n    return word in string\n\ndef is_substring9(string, word):\n    return string.find(word) >= 0\n\ndef is_substring10(string, word):\n    return word in string\n\ndef is_substring11(string, word):\n    return word in string\n\ndef is_substring12(string, word):\n    return word in string\n\ndef is_substring13(string, word):\n    return word in string\n\ndef is_substring14(string, word):\n    return word in string\n\ndef is_substring15(string, word):\n    return word in string\n\ndef is_substring16(string, word):\n    return word in string\n\ndef is_substring17(string, word):\n    return word in string\n\ndef is_substring18(string, word):\n    return word in string\n\ndef is_substring19(string, word):\n    return word in string\n\ndef is_substring20(string, word):\n    return word in string\n\ndef is_substring21(string, word):\n    return word in string\n\ndef is_substring22(string, word):\n    return word in string\n\ndef is_substring23(string, word):\n    return word in string\n\ndef is_substring24(string, word):\n    return word in string\n\ndef is_substring25(string, word):\n    return word in string\n\ndef is_substring26(string, word):\n    return word in string\n\ndef is_",
    "def is_word_at_beg(word):\n    return word[0] in 'abcdefghijklmnopqrstuvwxyz'\n\n\n# ------------------------------------------------------------------------------\n\n\ndef is_word_at_end(word):\n    return word[-1] in 'abcdefghijklmnopqrstuvwxyz'\n\n\n# ------------------------------------------------------------------------------\n\n\ndef is_word_at_beg_or_end(word):\n    return is_word_at_beg(word) or is_word_at_end(word)\n\n\n# ------------------------------------------------------------------------------\n\n\ndef is_word_at_beg_or_end_or_middle(word):\n    return is_word_at_beg(word) or is_word_at_end(word) or is_word_at_beg_or_end(word)",
    "def is_word_in_string(word, string):\n    \"\"\"\n    Return True if the word is in the string, False otherwise.\n    \"\"\"\n    return any(word[0:i] == s[0:i] for i in range(len(word)))\n\nif __name__ == '__main__':\n    string = 'Hello World'\n    word = 'World'\n    assert is_word_in_string(word, string), \"Word is not in string\"\n    print(\"Word is in string\")",
    "def is_word(s):\n    \"\"\"\n    >>> is_word(\"hello\")\n    True\n    >>> is_word(\"hello world\")\n    False\n    >>> is_word(\"hello world\")\n    True\n    >>> is_word(\"hello world\")\n    False\n    >>> is_word(\"hello world\")\n    False\n    \"\"\"\n    return s[0] in \"abcdefghijklmnopqrstuvwxyz\"\n\ndef word_start(s):\n    \"\"\"\n    >>> word_start(\"hello\")\n    True\n    >>> word_start(\"hello world\")\n    False\n    >>> word_start(\"hello world\")\n    True\n    >>> word_start(\"hello world\")\n    False\n    >>> word_start(\"hello world\")\n    False\n    \"\"\"\n    return s[0] in \"abcdefghijklmnopqrstuvwxyz\"\n\ndef word_end(s):\n    \"\"\"\n    >>> word_end(\"hello\")\n    False\n    >>> word_end(\"hello world\")\n    True\n    >>> word_end(\"hello world\")\n    False\n    >>> word_end(\"hello world\")\n    False\n    >>> word_end(\"hello world\")\n    False\n    \"\"\"\n    return s[-1] in \"abcdefghijklmnopqrstuvwxyz\"\n\ndef word_match(s):\n    \"\"\"\n    >>> word_match(\"hello\")\n    True\n    >>> word_match(\"hello world\")\n    True\n    >>> word_match(\"hello world\")\n    True\n    >>> word_match(\"hello world\")\n    False\n    >>> word_match(\"hello world\")\n    False\n    \"\"\"\n    return is_word(s) and word_start(s) and word_end(s)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def is_start(word, s):\n    return word[0] in s\n\ndef match_start(word, s):\n    return word in s[:len(word)]\n\nif __name__ == '__main__':\n    assert is_start('hello', 'h')\n    assert match_start('hello', 'h')\n    assert is_start('hello', 'hell')\n    assert not match_start('hello', 'hello')\n    assert not match_start('hello', 'hell')\n    assert not is_start('hello', 'he')\n    assert not match_start('hello', 'he')\n    assert not is_start('hello', 'l')\n    assert not match_start('hello', 'l')\n    assert not is_start('hello', 'll')\n    assert not match_start('hello', 'll')\n    assert not is_start('hello', 'o')\n    assert not match_start('hello', 'o')\n    assert not is_start('hello', 'oo')\n    assert not match_start('hello', 'oo')\n    assert not is_start('hello', 'h')\n    assert not match_start('hello', 'h')\n    assert not is_start('hello', 'he')\n    assert not match_start('hello', 'he')\n    assert not is_start('hello', 'll')\n    assert not match_start('hello', 'll')\n    assert not is_start('hello', 'lo')\n    assert not match_start('hello', 'lo')\n    assert not is_start('hello', 'llo')\n    assert not match_start('hello', 'llo')",
    "# Example\n# input = \"hello\", \"helloo\"\n# output = \"helloo\"\n\ndef find_start(word):\n    return word[0]\n\n# Your code should work with a string input and return a string.",
    "from collections import defaultdict\n\n\ndef find_word(string, word):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n    if word in string:\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    Main program body.\n    \"\"\"\n    string = \"Hello, World!\"\n    print(find_word(string, \"World\"))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def match_first_word(word):\n    return word[0] in word\n\nif __name__ == '__main__':\n    print match_first_word('test')",
    "",
    "# Your function will take in a string and return a boolean.\n\ndef startsWith(word):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n    return word[:len(word)] == word\n\n# TEST CASES\n\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\n\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\n\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\n\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')\nprint \"startsWith('Hello') = \", startsWith('Hello')",
    "#%%\ndef is_start_of_word(word, s):\n    return s.startswith(word)\n\n#%%\ndef is_start_of_word_from_list(word, s):\n    return word in s\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_list_with_no_space(word, s):\n    return word in s and s.find(' ') == -1\n\n#%%\ndef is_start_of_word_from_",
    "def is_first_word(word, s):\n    \"\"\"\n    >>> is_first_word(\"a\", \"abc\")\n    True\n    >>> is_first_word(\"b\", \"abc\")\n    False\n    >>> is_first_word(\"c\", \"abc\")\n    False\n    >>> is_first_word(\"a\", \"a\")\n    True\n    \"\"\"\n    return s.startswith(word)\n\n\ndef is_first_word_reversed(word, s):\n    \"\"\"\n    >>> is_first_word_reversed(\"a\", \"abc\")\n    False\n    >>> is_first_word_reversed(\"b\", \"abc\")\n    False\n    >>> is_first_word_reversed(\"c\", \"abc\")\n    False\n    >>> is_first_word_reversed(\"a\", \"a\")\n    False\n    >>> is_first_word_reversed(\"b\", \"a\")\n    True\n    >>> is_first_word_reversed(\"c\", \"a\")\n    True\n    >>> is_first_word_reversed(\"a\", \"b\")\n    False\n    >>> is_first_word_reversed(\"b\", \"b\")\n    False\n    >>> is_first_word_reversed(\"c\", \"b\")\n    False\n    >>> is_first_word_reversed(\"a\", \"c\")\n    False\n    >>> is_first_word_reversed(\"b\", \"c\")\n    False\n    >>> is_first_word_reversed(\"c\", \"c\")\n    False\n    >>> is_first_word_reversed(\"a\", \"d\")\n    False\n    >>> is_first_word_reversed(\"b\", \"d\")\n    False\n    >>> is_first_word_reversed(\"c\", \"d\")\n    False\n    >>> is_first_word_reversed(\"a\", \"e\")\n    False\n    >>> is_first_word_reversed(\"b\", \"e\")\n    False\n    >>> is_first_word_reversed(\"c\", \"e\")\n    False\n    >>> is_first_word_reversed(\"a\", \"f",
    "#!/usr/bin/env python\n\ndef match(s):\n    return s[0:len(s)] == s\n\n\ndef test():\n    assert match('hello') == True\n    assert match('Hello') == False\n    assert match('hell') == False\n    assert match('Hello world') == False\n    assert match('hello world') == False\n    assert match('hello world!') == True\n\nif __name__ == '__main__':\n    test()",
    "",
    "# https://oj.leetcode.com/problems/word-search/\n\nclass Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # count the number of words\n        num_words = 0\n        for word in words:\n            num_words += 1\n        \n        # if the number of words is 0, return []\n        if num_words == 0:\n            return []\n        \n        # build the word list\n        word_list = []\n        for word in words:\n            word_list.append(word)\n            \n        # build the visited board\n        visited = [[False] * len(board[0]) for _ in range(len(board))]\n        \n        # search the board\n        result = self.search(board, word_list, visited)\n        \n        # return the results\n        return result\n    \n    def search(self, board, word_list, visited):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word_list: List[str]\n        :type visited: List[List[bool]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # if the board is empty, return []\n        if len(board) == 0:\n            return []\n        \n        # if the board is not empty, then search the board\n        for i in range(len(board)):\n            for j in range(len(board[i])):\n                # if the board is visited, then break the loop\n                if visited[i][j]:\n                    continue\n                \n                # if the word is in the word_list, then return the board\n                if word_list[0] in board[i][j]:\n                    visited[i][j] = True\n                    result = self.search(board[i][j], word_list[1:], visited)\n                    visited[i][j] = False\n                    return result\n        \n        # return the board\n        return board",
    "def match_at_start(word, string):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n    if not string.startswith(word):\n        return False\n    return True\n\ndef main():\n    print match_at_start(\"cat\", \"this is a cat\")\n    print match_at_start(\"cat\", \"this is a catcat\")\n    print match_at_start(\"cat\", \"this is not a cat\")\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef find_beginning(s):\n    \"\"\"\n    Find the word that is at the beginning of the string s.\n\n    You can assume that the string s contains only lowercase letters.\n\n    Input\n    -----\n    s: str\n        The string to be searched.\n    \"\"\"\n\n    pattern = r'^' + re.escape(s) + r'$'\n    return re.search(pattern, s).group(0)\n\n\ndef find_beginning_all(s):\n    \"\"\"\n    Find the word that is at the beginning of the string s.\n\n    You can assume that the string s contains only lowercase letters.\n\n    Input\n    -----\n    s: str\n        The string to be searched.\n    \"\"\"\n\n    pattern = r'^' + re.escape(s) + r'$'\n    return re.findall(pattern, s)\n\n\ndef main():\n    s = 'the quick brown fox'\n    print(find_beginning(s))\n    print(find_beginning_all(s))\n\n\nif __name__ == '__main__':\n    main()",
    "def match_beginning(word, s):\n    \"\"\"\n    :type word: str\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return s.startswith(word)\n\ndef main():\n    \"\"\"\n    Sample Input\n    word\n    Sample Output\n    True\n    \"\"\"\n    assert match_beginning('word', 'word')\n    assert not match_beginning('word', 'wordx')\n    assert not match_beginning('', 'word')\n    assert not match_beginning('', '')\n\nif __name__ == \"__main__\":\n    main()",
    "def is_start(string, word):\n    \"\"\"\n    >>> is_start('abcd', 'a')\n    True\n    >>> is_start('abcd', 'ab')\n    True\n    >>> is_start('abcd', 'acd')\n    False\n    >>> is_start('abcd', 'bcd')\n    False\n    >>> is_start('abcd', 'abcde')\n    False\n    >>> is_start('abcd', 'abcdeabcdeabcdeabcdeabcde')\n    True\n    \"\"\"\n    return word == string[:len(word)]\n\ndef is_start_list(string, word):\n    \"\"\"\n    >>> is_start_list('abcd', 'a')\n    True\n    >>> is_start_list('abcd', 'ab')\n    True\n    >>> is_start_list('abcd', 'acd')\n    False\n    >>> is_start_list('abcd', 'bcd')\n    False\n    >>> is_start_list('abcd', 'abcde')\n    False\n    >>> is_start_list('abcd', 'abcdeabcdeabcdeabcdeabcde')\n    True\n    \"\"\"\n    return word == string[:len(word)]\n\ndef is_start_dict(string, word):\n    \"\"\"\n    >>> is_start_dict('abcd', 'a')\n    True\n    >>> is_start_dict('abcd', 'ab')\n    True\n    >>> is_start_dict('abcd', 'acd')\n    False\n    >>> is_start_dict('abcd', 'bcd')\n    False\n    >>> is_start_dict('abcd', 'abcde')\n    False\n    >>> is_start_dict('abcd', 'abcdeabcdeabcdeabcdeabcde')\n    True\n    \"\"\"\n    return word == string[:len(word)]\n\ndef is_start_generator(string, word):\n    \"\"\"\n    >>> is_start_generator('abcd', 'a')\n    True\n    >>> is_start_generator('abcd', 'ab')\n    True\n    >>> is_start_generator('abcd', 'acd')",
    "import re\n\ndef is_match(word, text):\n    \"\"\"\n    Returns whether the given word matches the beginning of the given text.\n\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    # print(word, text)\n    # print(re.search('^' + word, text))\n    return bool(re.search('^' + word, text))\n\ndef main():\n    print(is_match('cat', 'abc'))\n\nif __name__ == '__main__':\n    main()",
    "def is_match(word, s):\n    \"\"\"\n    >>> is_match('hit', 'hippopotamuses')\n    False\n    >>> is_match('hit', 'hippo')\n    True\n    \"\"\"\n    return s.startswith(word)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "# Write your code here\n\ndef is_prefix(word, target):\n    return target.startswith(word)\n\nif __name__ == '__main__':\n    word = input('Enter word: ')\n    target = input('Enter prefix: ')\n    print(is_prefix(word, target))",
    "#TODO:\n#Write a function that takes a string and returns true if the word is at the beginning of the string.\n#Write a function that takes a string and returns true if the word is at the end of the string.\n#Write a function that takes a string and returns true if the word is in the middle of the string.\n#Write a function that takes a string and returns true if the word is at the beginning of a sentence.\n#Write a function that takes a string and returns true if the word is at the end of a sentence.\n#Write a function that takes a string and returns true if the word is in the middle of a sentence.\n\ndef is_word_at_beginning(word, text):\n    #TODO: Write a function that takes a string and returns true if the word is at the beginning of the string.\n    return word in text\n\ndef is_word_at_end(word, text):\n    #TODO: Write a function that takes a string and returns true if the word is at the end of the string.\n    return word in text\n\ndef is_word_in_middle(word, text):\n    #TODO: Write a function that takes a string and returns true if the word is in the middle of the string.\n    return word in text\n\ndef is_sentence_at_beginning(sentence, text):\n    #TODO: Write a function that takes a string and returns true if the word is at the beginning of a sentence.\n    return sentence in text\n\ndef is_sentence_at_end(sentence, text):\n    #TODO: Write a function that takes a string and returns true if the word is at the end of a sentence.\n    return sentence in text\n\ndef is_sentence_in_middle(sentence, text):\n    #TODO: Write a function that takes a string and returns true if the word is in the middle of a sentence.\n    return sentence in text\n\nif __name__ == '__main__':\n    text = \"Hello, world!\"\n    print(is_word_at_beginning(\"hello\", text))\n    print(is_word_at_end(\"world\", text))\n    print(is_word_in_middle(\"",
    "def is_word(word, str):\n    return str.startswith(word)\n\n# Complete the is_word function below.\n\ndef is_word(word, str):\n    return str.startswith(word)\n\nif __name__ == '__main__':\n    test_str = \"Hello World\"\n    test_word = \"Hello\"\n    print(is_word(test_word, test_str))\n    print(is_word(\"hello\", \"Hello World\"))",
    "def at_start(word, text):\n    \"\"\"\n    :type word: str\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    return text.startswith(word)\n\n# test\nassert at_start('hello', 'hello world')\nassert not at_start('hello', 'Hello world')\nassert not at_start('hello', 'Hello')",
    "def is_start(word, str):\n    return str.startswith(word)\n\nif __name__ == '__main__':\n    assert is_start('abc', 'abc')\n    assert not is_start('abc', 'abcdef')",
    "# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/21084816/160156\n\ndef is_start_of_word(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text[0:len(word)] == word\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/15451784/160156\n\ndef is_start_of_word_2(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text.startswith(word)\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/18794986/160156\n\ndef is_start_of_word_3(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text.find(word) == 0\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/26983394/160156\n\ndef is_start_of_word_4(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text.startswith(word)\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/15451784/160156\n\ndef is_start_of_word_5(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text.startswith(word, 0)\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/a/18794986/160156\n\ndef is_start_of_word_6(word, text):\n    \"\"\"\n    Return True if word is at the beginning of the text.\n    \"\"\"\n    return text.find(word, 0) == 0\n\n# The following solution is from the stackoverflow:\n# https://stackoverflow.com/",
    "def word_start(word, string):\n    \"\"\"\n    :type word: str\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return string[:len(word)] == word\n\n# Your WordStart function should return the empty string if the word is not found.",
    "#!/usr/bin/env python\n\ndef find_word_at_beginning(word, str):\n    if len(str) > len(word):\n        return False\n    i = 0\n    for c in str:\n        if c!= word[i]:\n            break\n        i += 1\n    return word[:i] == str\n\n\nif __name__ == '__main__':\n    test_cases = open(\"tests.txt\", 'r')\n    for test in test_cases:\n        test = test.strip()\n        print(\"Test Case: \" + test)\n        test_case = test.split(\" \")\n        word = test_case[0]\n        str = test_case[1]\n        result = find_word_at_beginning(word, str)\n        print(word + \" \" + str + \" : \" + str(result))",
    "def match_word(word, str):\n    return str[0:len(word)] == word\n\nprint match_word(\"cat\", \"abc\")\nprint match_word(\"cat\", \"cat\")\nprint match_word(\"cat\", \"cAt\")\nprint match_word(\"cat\", \"a\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT\")\nprint match_word(\"cat\", \"CAT",
    "import string\n\ndef word_match(word, str):\n    word_length = len(word)\n    str_length = len(str)\n    if str_length < word_length:\n        return False\n    if str[:word_length] == word:\n        return True\n    return False\n\ndef test_word_match():\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cat\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cat\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cat\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") == True\n    assert word_match(\"cat\", \"cats\") ==",
    "def match_beginning(word, s):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n    if len(word) > len(s):\n        return False\n    if word == s[:len(word)]:\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(match_beginning(\"test\", \"test\"))\n    print(match_beginning(\"test\", \"st\"))\n    print(match_beginning(\"test\", \"stt\"))\n    print(match_beginning(\"test\", \"es\"))\n    print(match_beginning(\"test\", \"est\"))\n    print(match_beginning(\"test\", \"estest\"))\n    print(match_beginning(\"test\", \"estestestestest\"))\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef is_prefix(s, prefix):\n    return prefix in s\n\ndef main():\n    \"\"\"\n    main entry point\n    \"\"\"\n    tests = [\n        # [\"foo\", \"foobar\", \"foobarfoo\"],\n        [\"foo\", \"bar\", \"foobarfoo\"],\n        [\"bar\", \"foo\", \"barfoo\"],\n        [\"bar\", \"barfoo\", \"barfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo\"],\n        [\"bar\", \"barfoo\", \"barfoobarfoo",
    "def word_at_beg(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[:len(s) - len(s.lstrip())]\n\n\nif __name__ == \"__main__\":\n    assert word_at_beg(\"Hello\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg(\"Hello world\") == \"Hello\"\n    assert word_at_beg",
    "def is_prefix(word, text):\n    \"\"\"\n    >>> is_prefix('abc', 'abcdefgh')\n    True\n    >>> is_prefix('abc', 'abcdefghi')\n    False\n    >>> is_prefix('abc', 'abcdefghij')\n    False\n    >>> is_prefix('abc', 'abcdefghijk')\n    False\n    >>> is_prefix('abc', 'abcdefghijkl')\n    False\n    \"\"\"\n    if len(text) < len(word):\n        return False\n    else:\n        for i in range(len(word)):\n            if text[i]!= word[i]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}