{
  "problem": {
    "task_id": "MBPP/459",
    "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
    "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
    "test_list": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ],
    "challenge_test_list": [],
    "problem_id": 448
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        def remove_upper(s):\n            return \"\".join([c if c.lower()!= c else c for c in s])\n\n        return \"\".join([remove_upper(c) for c in s])\n\n\ndef main():\n    s = Solution()\n    print s.removeUppercase(\"A man, a plan, a canal: Panama\")\n\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef remove_uppercase_substrings(string):\n    pattern = re.compile(r'([A-Z])+')\n    match = pattern.findall(string)\n    return ''.join(match)\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(remove_uppercase_substrings(string))",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        regex = re.compile('[A-Z]')\n        return regex.sub('', s)",
    "from string import ascii_uppercase as upper\n\n\ndef remove_uppercase(s):\n    return ''.join(c for c in s if c.isupper())\n\n\n# Your RemoveUppercase function should return the same string\nprint(remove_uppercase(\"A man, a plan, a canal: Panama\"))\nprint(remove_uppercase(\"race a car\"))\nprint(remove_uppercase(\"Hello\"))\nprint(remove_uppercase(\"leetcode\"))",
    "import re\n\ndef remove_uppercase(s):\n    return re.sub('(?=[A-Z])', '', s)\n\nif __name__ == '__main__':\n    s = 'A quick brown fox jumped over the lazy dog'\n    print(remove_uppercase(s))",
    "def remove_uppercase(s):\n    '''\n    :type s: str\n    :rtype: str\n    '''\n    pattern = r'[A-Z]*'\n    return re.sub(pattern, '', s)\n\n\nif __name__ == '__main__':\n    s = 'A man, a plan, a canal, Panama!'\n    print(remove_uppercase(s))",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # use re.sub to remove all uppercase substring\n        return re.sub(r'(?<=\\w)(?=[A-Z])', '', s)",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def removeUpperCase(self, s):\n        # Write your code here\n        return ''.join([c for c in s if c.lower()!= c])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUpperCase('A man, a plan, a canal: Panama')",
    "def remove_uppercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c.isupper())\n\nif __name__ == '__main__':\n    string = 'ABcde'\n    print(remove_uppercase(string))",
    "class Solution(object):\n    def removeLowercaseLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('[a-z]','',s)\n\n# Note:\n# 1. I had to add a new line here.\n# 2. I had to add a new line here.\n# 3. I had to add a new line here.\n# 4. I had to add a new line here.\n# 5. I had to add a new line here.\n# 6. I had to add a new line here.\n# 7. I had to add a new line here.\n# 8. I had to add a new line here.\n# 9. I had to add a new line here.\n# 10. I had to add a new line here.\n# 11. I had to add a new line here.\n# 12. I had to add a new line here.\n# 13. I had to add a new line here.\n# 14. I had to add a new line here.\n# 15. I had to add a new line here.\n# 16. I had to add a new line here.\n# 17. I had to add a new line here.\n# 18. I had to add a new line here.\n# 19. I had to add a new line here.\n# 20. I had to add a new line here.\n# 21. I had to add a new line here.\n# 22. I had to add a new line here.\n# 23. I had to add a new line here.\n# 24. I had to add a new line here.\n# 25. I had to add a new line here.\n# 26. I had to add a new line here.\n# 27. I had to add a new line here.\n# 28. I had to add a new line here.\n# 29. I had to add a new line here.\n# 30. I had to add a new line here.\n# 31. I had to add a new line here.\n# 32. I had to add a new line here.\n# 33. I had to add a new line here.\n# 34. I had to add a new line here.\n# 35. I had to add a new",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeAllLetters(self, s):\n        s = s.lower()\n        pattern = r'[a-z]+'\n        return re.sub(pattern, '', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeAllLetters('Hello')",
    "# Definition for a substring.\nclass Substring:\n    def __init__(self, s, t):\n        self.start = s\n        self.end = t\n        \n    def __str__(self):\n        return self.start + \"..\" + self.end\n\nclass Solution:\n    def removeUppercaseSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = ''.join(ch for ch in s if ch.isupper())\n        return s\n\nif __name__ == \"__main__\":\n    s = \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B2C3D4E5F6G7H8I9J10K11L12M13N14O15P16Q17R18S19T20U21V22W23X24Y25Z26\"\n    s = \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B2C3D4E5F6G7H8I9J10K11L12M13N14O15P16Q17R18S19T20U21V22W23X24Y25Z26\"\n    s = \"abcabc\"\n    s = \"aBcD\"\n    s = \"abcABC\"\n    s = \"abc\"\n    s = \"abcd\"\n    s = \"aBcD\"\n    s = \"aBcD\"\n    s = \"abcd\"\n    s = \"abcABC\"\n    s = \"abc\"\n    s = \"abcd\"\n    s = \"aBcD\"\n    s = \"aBcD\"\n    s = \"aBcD\"\n    s = \"aBcD\"\n    s = \"aBcD\"\n    s = \"aBcD\"",
    "import re\n\ndef remove_uppercase(string):\n    regex = re.compile(\"[A-Z]\")\n    return regex.sub(\"\", string)\n\nprint remove_uppercase(\"Hello\")",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # match with 'a'\n        for i in xrange(len(s)):\n            if s[i].isupper():\n                s = s[:i] + s[i+1:]\n        return s\n\n\nif __name__ == \"__main__\":\n    import sys\n    s = Solution()\n    s.removeUppercaseString(\"AABBCCDD\")\n    s.removeUppercaseString(\"abbbbb\")\n    s.removeUppercaseString(\"abbbbbbb\")\n    s.removeUppercaseString(\"\")\n    s.removeUppercaseString(\"aabbccdd\")\n    s.removeUppercaseString(\"abbbbb\")\n    s.removeUppercaseString(\"abbbbbbb\")\n    print s.removeUppercaseString(\"ABCabc\")\n\n    for s in sys.stdin:\n        print s, s.strip().upper()",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower()!= c)",
    "#Write your code here\n\ndef remove_uppercase_substring(string):\n    regex = r'[A-Z]'\n    return re.sub(regex, '', string)\n\nif __name__ == '__main__':\n    string = 'Hello World'\n    print(remove_uppercase_substring(string))\n    print(remove_uppercase_substring(string.upper()))\n    print(remove_uppercase_substring(string.lower()))",
    "from string import ascii_uppercase\n\ndef remove_uppercase(s):\n    return ''.join(c for c in s if c.isupper())\n\nprint(remove_uppercase('HELLO'))\nprint(remove_uppercase('hello'))\nprint(remove_uppercase('HELLO WORLD'))\nprint(remove_uppercase('HELLO WORLD '))\nprint(remove_uppercase('HELLO WORLD WORLD'))\nprint(remove_uppercase('HELLO WORLD WORLD'))\nprint(remove_uppercase('HELLO WORLD WORLD '))\nprint(remove_uppercase('HELLO WORLD WORLD '))\nprint(remove_uppercase('HELLO WORLD WORLD '))",
    "class Solution:\n    def removeUppercaseSubstrings(self, s: str) -> str:\n        if not s:\n            return s\n        res = ''\n        for i in range(len(s)):\n            sub = s[i:]\n            for j in range(len(sub)):\n                if sub[j] >= 'A' and sub[j] <= 'Z':\n                    sub[j] = sub[j].lower()\n            res += sub\n        return res",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(s[:1], '').replace(s[-1:], '')",
    "import re\n\n# Your function should return the number of characters removed.\n\ndef remove_uppercase(string):\n    return len(re.sub(r'[A-Z]', '', string))\n\nif __name__ == '__main__':\n    print(remove_uppercase('Hello World'))\n    print(remove_uppercase('Hello World World'))\n    print(remove_uppercase('Hello'))\n    print(remove_uppercase('Hello World'))\n    print(remove_uppercase('Hello'))\n    print(remove_uppercase('Hello World'))\n    print(remove_uppercase('Hello'))",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s.lower() if c.isalpha())\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeUppercase('abcBDE'))",
    "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub('[A-Z]', '', string)\n\n\nif __name__ == '__main__':\n    string = 'Hello World'\n    print(remove_uppercase(string))",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r'[A-Z]')\n        return regex.sub('', s)",
    "def remove_uppercase(string):\n    \n    regex = '^[A-Z]+'\n    match = re.search(regex, string)\n    \n    if match is None:\n        return string\n    \n    return string[:match.start()] + string[match.end():]\n\nif __name__ == '__main__':\n    \n    string = 'ABCD'\n    \n    print(remove_uppercase(string))",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeAllLetters(self, s):\n        if not s:\n            return s\n        return re.sub('[A-Z]', '', s)",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        return re.sub('[A-Z]', '', s)",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeAllLetters(self, s):\n        pattern = '[' + ''.join(i for i in string.ascii_uppercase) + ']'\n        return s.replace(pattern, '')\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.removeAllLetters('AbCdEfGhIj')",
    "#!/bin/python\n\n# The solution is to use the regex expression and match against the input string.\n# We can use the re.sub function to replace the substring with the new string.\n# We can use the re.match function to check if the substring is present in the input string.\n# We can use the re.findall function to get all the matches.\n# We can use the re.sub function to replace the match with the new string.\n# Note that we do not use the string.replace because we want to preserve the case of the match.\n# We do not use the regex to match the string.\n# The string.replace is faster than the regex and is more general than the regex.\n\n# Example:\n# s = \"A\"\n# s = \"ABC\"\n# s = \"aBc\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc\"\n# s = \"ABC\"\n# s = \"aBC\"\n# s = \"ABc\"\n# s = \"aBC\"\n# s = \"abc",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.translate(str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyz\"), str.upper)",
    "# https://www.hackerrank.com/challenges/string-to-lowercase/problem\n\n# import string\n#\n# input_string = input()\n#\n# # Remove all uppercase characters.\n# input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()\n#\n# # Remove all uppercase characters.\n# # input_string = input_string.lower()",
    "# https://www.hackerrank.com/challenges/remove-uppercase-from-string\n# from https://www.hackerrank.com/challenges/remove-uppercase-from-string/problem\n#\n# I have written a Python solution to this problem\n# The problem is to remove all uppercase characters from a given string.\n#\n# The code below is a Python solution to this problem.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
    "# https://leetcode.com/problems/remove-all-capitalized-letters/discuss/7086/Python-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Python-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%2B%2B-Java-C%",
    "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('', string)\n\ndef main():\n    print(remove_uppercase('Hello'))\n    print(remove_uppercase('HELLO'))\n    print(remove_uppercase('Hi'))\n    print(remove_uppercase('HI'))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'[A-Z]', lambda x: x.lower(), s)\n\nclass Solution2(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'([A-Z])', r'\\1', s)\n\nclass Solution3(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'))\n\nclass Solution4(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c if c.lower()!= c else c.upper() for c in s)",
    "def remove_uppercase(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    # Remove all uppercase letters from a string\n    return text.lower()\n\n\nif __name__ == '__main__':\n    assert remove_uppercase('ABABAB') == 'ABAAB'\n    assert remove_uppercase('ABABAB') == 'ABAAB'\n    assert remove_uppercase('ABABAB') == 'ABAAB'",
    "# https://www.hackerrank.com/challenges/remove-uppercase/problem\n# Implement a function to remove all uppercase characters in a string.\n\ndef remove_uppercase(s):\n    return s.lower()\n\nif __name__ == \"__main__\":\n    s = input()\n    print(remove_uppercase(s))",
    "def remove_uppercase(string):\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('', string)\n\nprint(remove_uppercase('ABcDeFg'))",
    "import re\n\ndef remove_uppercase_substrings(string):\n    regex = re.compile('[A-Z]')\n    return regex.sub('', string)\n\nif __name__ == '__main__':\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")\n    assert(remove_uppercase_substrings(\"Hello World\") == \"World\")",
    "import re\n\ndef remove_uppercase(text):\n    # write your code here\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', text)\n\nif __name__ == '__main__':\n    print(remove_uppercase(\"Replaceable\"))",
    "# https://www.hackerrank.com/challenges/remove-uppercase\n# https://www.hackerearth.com/practice/strings/regex-remove-uppercase/practice-problems/algorithm/remove-uppercase-from-string/\n\ndef removeUpperCase(string):\n    # Complete this function\n    return ''.join(c.lower() for c in string)\n\n\nif __name__ == '__main__':\n    string = input()\n    print(removeUpperCase(string))",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.lower() == c)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUppercase(\"Hello World\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")\n    print s.removeUppercase(\"HELLO WORLD\")",
    "import re\n\ndef remove_uppercase_substring(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = re.sub(r'\\b[A-Z]\\w+\\b', '', s)\n    return s\n\nif __name__ == '__main__':\n    s = \"Hello World\"\n    print(remove_uppercase_substring(s))",
    "def remove_uppercase_substring(s):\n    return re.sub('[A-Z]','',s)\n\nif __name__ == '__main__':\n    s = 'Abc def ghi'\n    print s\n    print remove_uppercase_substring(s)",
    "def remove_uppercase(string):\n    regex = r'[A-Z]*'\n    regex = re.compile(regex)\n    return regex.sub('', string)",
    "def remove_uppercase(s):\n    regex = re.compile('[A-Z]')\n    return regex.sub('', s)\n\nprint remove_uppercase('Hello')\n#>>> ''\n\nprint remove_uppercase('HELLO')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('HELLO')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('HELLO')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('HELLO')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('HELLO')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('Hello')\n#>>> 'hello'\n\nprint remove_uppercase('",
    "def remove_uppercase_substrings(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    regex = r'(?P<uppercase>[A-Z])'\n    match = re.search(regex, s)\n    while match:\n        s = s[:match.start()] + s[match.end():]\n        match = re.search(regex, s)\n    return s\n\nif __name__ == '__main__':\n    s = \"This is a test\"\n    print(remove_uppercase_substrings(s))",
    "# https://github.com/codecademy/Python/blob/master/codecademy/python/remove_uppercase_from_string.py\n\n# Example:\n# input: \"Hello world!\"\n# output: \"hello world\"\n#\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# input: \"Hello world!\"\n# output: \"hello world!\"\n\n# Remove uppercase substring\ndef remove_uppercase_from_string(string):\n    regex = r\"([A-Z]\\S*)\"\n    return re.sub(regex, lambda x: x.group(0).lower(), string)\n\n\n# Example:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# input: \"Hello world!\"\n# output: \"hello world!\"\ndef remove_uppercase_from_string_2(string):\n    regex = r\"([A-Z]\\S*)\"\n    return re.sub(regex, lambda x: x.group(0).lower(), string)\n\n# Test Cases\n# Test Case 1:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# Test Case 2:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# Test Case 3:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n\n# Test Case 4:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# Test Case 5:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# Test Case 6:\n# input: \"Hello world!\"\n# output: \"hello world!\"\n#\n# Test Case 7:\n# input: \"Hello world!\"\n# output: \"Hello world!\"\n#\n# Test Case 8:\n# input: \"Hello world!\"\n# output: \"Hello world!\"\n#\n# Test Case 9:\n# input: \"Hello world!\"\n# output: \"Hello world!\"\n#\n# Test Case 10:\n# input: \"Hello world!\"\n# output: \"Hello world!\"",
    "class Solution:\n    def removeUppercase(self, s: str) -> str:\n        def sub(m):\n            return m.group(0).lower()\n        return re.sub(r'(?u)[A-Z]', sub, s)\n\nif __name__ == '__main__':\n    assert Solution().removeUppercase(\"Hello World\") == \"hHwWlD\"\n    assert Solution().removeUppercase(\"Hello World\") == \"hHwWlD\"\n    assert Solution().removeUppercase(\"Hello World\") == \"hHwWlD\"",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = '[' + ''.join(s.upper()) + ']'\n        return s.translate(str.maketrans(pattern, ''.join(s.lower())), pattern)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUppercase('Hello')\n    print s.removeUppercase('HELLO')\n    print s.removeUppercase('HELLO WORLD')\n    print s.removeUppercase('AaBbCcDd')\n    print s.removeUppercase('AbBbCcDd')\n    print s.removeUppercase('AaBbCcDd')",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeUppercase(self, str):\n        return ''.join([c for c in str if c.lower()!= c])",
    "# Write your code here\ndef remove_uppercase_substrings(string):\n    return re.sub(r'(?=[A-Z])', '', string)\n\nif __name__ == '__main__':\n    string = 'this is a test'\n    print(remove_uppercase_substrings(string))",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        t = s.upper()\n        if t.isupper():\n            return s\n        return t\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercaseString(\"A man, a plan, a canal: Panama\")",
    "def remove_uppercase_substring_regex(string):\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', string)\n\nprint(remove_uppercase_substring_regex('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'))\n\n\"\"\"\nInput:\n    string = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\nOutput:\n    string = \"aabbccddeeffgghhiiijjjkkllmmnnooppqqrrsstttuuvvwwxxyyzz\"\n\"\"\"",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = '[A-Z]'\n        return s.replace(pattern, '')\n\n\ndef main():\n    s = Solution()\n    print s.removeUppercase('A man, a plan, a canal: Panama')\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c.islower() else c.lower() for c in s])",
    "def remove_uppercase(s):\n    return re.sub(r'[A-Z]{3,}', '', s)\n\nprint(remove_uppercase('Hello'))\nprint(remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))",
    "import re\n\ndef remove_uppercase_substrings(s):\n    return re.sub(r'[A-Z]', '', s)\n\nif __name__ == '__main__':\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'\n    assert remove_uppercase_substrings('A man, a plan, a canal, Panama') == 'a man, a plan, a canal, a'",
    "import re\n\n# https://www.hackerrank.com/challenges/remove-uppercase/problem\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('', string)\n\nif __name__ == \"__main__\":\n    string = input()\n    print(remove_uppercase(string))",
    "def remove_uppercase_string(string):\n    regex = r\"([A-Z])([a-z])\"\n    return string.replace(regex, r\"\\g<1>\\g<2>\")\n\n\nif __name__ == '__main__':\n    string = \"A1B2C3D4E5\"\n    print(remove_uppercase_string(string))",
    "def remove_uppercase(s):\n    return s.translate(string.maketrans(string.ascii_uppercase, string.ascii_lowercase))\n\nif __name__ == '__main__':\n    s = 'abcdabcdabcd'\n    print(remove_uppercase(s))",
    "def remove_uppercase(string):\n    regex = re.compile('[A-Z]')\n    return regex.sub('', string)\n\nif __name__ == '__main__':\n    print remove_uppercase('ABCDEF')\n    print remove_uppercase('hello world')\n    print remove_uppercase('HELLO WORLD')\n    print remove_uppercase('HELLO WORLD')\n    print remove_uppercase('abcd')\n    print remove_uppercase('ABCD')\n    print remove_uppercase('abcd')",
    "def remove_uppercase(string):\n    regex = r'(?<![A-Z])[A-Z]{2,}[A-Z]{2,}'\n    return re.sub(regex, '', string)\n\nif __name__ == '__main__':\n    string = 'AABBCCDD'\n    print(remove_uppercase(string))",
    "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeUpperCase(self, str):\n        return ''.join(filter(lambda x: x.islower(), str))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeUpperCase('A man, a plan, a canal: Panama'))",
    "def remove_uppercase(string):\n    pattern = r'[A-Z]{2,}'\n    regex = re.compile(pattern)\n    result = regex.sub('', string)\n    return result\n\nif __name__ == \"__main__\":\n    test_string = \"Hello World\"\n    print remove_uppercase(test_string)",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = re.compile(r'[A-Z]')\n        return pattern.sub('', s)",
    "#Write your code here\n\ndef remove_uppercase(string):\n\tstring = string.upper()\n\tfor i in range(len(string)-1, -1, -1):\n\t\tif string[i] >= 'A' and string[i] <= 'Z':\n\t\t\tstring = string[:i+1] + string[i+1:]\n\treturn string\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n\tassert remove_uppercase(\"A man, a plan, a canal: Panama\") == \"a man, a plan, a canal: Panama\", \"1\"\n\tassert remove_uppercase(\"Able was I, but...\") == \"able was I, but...\", \"2\"\n\tassert remove_uppercase(\"\") == \"\", \"3\"\n\tassert remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"4\"\n\tassert remove_uppercase(\"a\") == \"a\", \"5\"\n\tassert remove_uppercase(\"A\") == \"A\", \"6\"\n\tassert remove_uppercase(\"aaaa\") == \"aaaa\", \"7\"\n\tassert remove_uppercase(\"aaaaa\") == \"aaaaa\", \"8\"\n\tassert remove_uppercase(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\", \"9\"\n\tassert remove_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"abcdefghijklmnopqrstuvwxyz\", \"10\"\n\tassert remove_uppercase(\"aabccdd\") == \"aabccdd\", \"11\"\n\tassert remove_uppercase(\"\") == \"\", \"12\"\n\tassert remove_uppercase(\"A\") == \"A\", \"13\"\n\tassert remove_uppercase(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "#\n# Example\n#\n# import re\n# s = \"A man, a plan, a canal: Panama\"\n# remove_uppercase(s)\n# print s\n#\n# Output\n#\n# A man,a plan,a canal: Panama\n#\n# Credit\n#\n# https://www.codewars.com/kata/remove-uppercase/train/python\n#\n\n#\n# Question:\n#\n# How many ways can a string be modified without making a single change?\n#\n# Example:\n#\n# s = \"A man, a plan, a canal: Panama\"\n#\n# Remove all uppercase letters from the string and return the string.\n#\n#\n# Notes:\n#\n# For now, we are just going to use a simple algorithm.\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a string be modified without making a single change?\n#\n#\n#\n# Challenge:\n#\n# How many ways can a",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.lower()!= x, s))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeUppercaseSubstrings(self, s):\n        \"\"\"\n        Replace all uppercase with lowercase\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c.lower() for c in s)",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s.lower() for s in s.upper())",
    "import re\n\ndef remove_uppercase_substring(string):\n    \"\"\"\n    Given a string, remove all uppercase substring from it.\n    :param string: str\n    :return: str\n    \"\"\"\n    return re.sub(r'(?<![a-z])([A-Z])', '', string)\n\n\nif __name__ == '__main__':\n    string = 'Hello world'\n    print(remove_uppercase_substring(string))",
    "# https://www.hackerrank.com/challenges/string-to-lowercase/problem\n\ndef remove_uppercase(string):\n    # write your code here\n    return string.lower()\n\nif __name__ == '__main__':\n    string = input().lower()\n    print(remove_uppercase(string))",
    "class Solution:\n    # @param s, a string\n    # @param p, a string\n    # @return a string\n    def remove_uppercase(self, s, p):\n        # Write your code here\n        return s.replace(p, '', 0, -1)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.remove_uppercase(\"\", \"\")\n    print s.remove_uppercase(\"\", \"abc\")\n    print s.remove_uppercase(\"\", \"Aa\")\n    print s.remove_uppercase(\"abc\", \"\")\n    print s.remove_uppercase(\"ABC\", \"\")\n    print s.remove_uppercase(\"Abc\", \"\")\n    print s.remove_uppercase(\"abcd\", \"abc\")\n    print s.remove_uppercase(\"abcdd\", \"abc\")\n    print s.remove_uppercase(\"abcd\", \"aBc\")\n    print s.remove_uppercase(\"abc\", \"aBc\")\n    print s.remove_uppercase(\"abcd\", \"ABc\")",
    "class Solution(object):\n    def removeUppercaseSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        regex = re.compile('[A-Z]')\n        return regex.sub('', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    s.removeUppercaseSubstrings('Hello')\n    print s.removeUppercaseSubstrings('HELLO')\n    print s.removeUppercaseSubstrings('HELLO WORLD')\n    print s.removeUppercaseSubstrings('HELLO WORLD')",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile('[A-Z]')\n        return regex.sub('', s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercase(\"Hello\")\n    print s.removeUppercase(\"Hello World\")\n    print s.removeUppercase(\"Hello World\")",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(s)):\n            if s[i].isupper():\n                res += s[i].lower()\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUppercase('A man, a plan, a canal: Panama')\n    print s.removeUppercase('race a car')",
    "class Solution(object):\n    def removeUppercaseSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = s.upper()\n        s = re.sub(r'\\b[A-Z]\\b', '', s)\n        return s\n\n\nif __name__ == '__main__':\n    print Solution().removeUppercaseSubstrings('Hello World')\n    print Solution().removeUppercaseSubstrings('Hello World World World')\n    print Solution().removeUppercaseSubstrings('hello world')\n    print Solution().removeUppercaseSubstrings('Hello World')\n    print Solution().removeUppercaseSubstrings('hello world')\n    print Solution().removeUppercaseSubstrings('Hello World World World')",
    "import re\n\ndef remove_uppercase_string(string):\n    regex = re.compile(r'[A-Z]')\n    return regex.sub('', string)\n\nif __name__ == '__main__':\n    print(remove_uppercase_string('hello'))\n    print(remove_uppercase_string('Hello'))\n    print(remove_uppercase_string('Hello world'))\n    print(remove_uppercase_string('Hello world! This is a test'))",
    "#!/bin/python\n\ndef remove_uppercase(string):\n    regex = r'[A-Z]{2,}'\n    pattern = re.compile(regex)\n    return pattern.sub('', string)\n\nif __name__ == '__main__':\n    print remove_uppercase('Hello world')",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s.lower() if c.isupper() else c for c in s)",
    "# https://www.hackerearth.com/practice/string/algorithms/string-searching/practice-problems/algorithm/string-searching/algorithm/remove-uppercase-substrings/\n\ndef remove_uppercase(str):\n    str = str.lower()\n    str = str.strip()\n    return [x.lower() for x in re.findall(r'[A-Z]', str)]\n\nif __name__ == '__main__':\n    print(remove_uppercase(\"Hello World\"))",
    "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeUppercase(self, str):\n        return re.sub(r'([A-Z])', r'\\1', str)",
    "import re\n\n\ndef remove_uppercase_substring(string):\n    regex = re.compile(r\"[A-Z]\")\n    return regex.sub('', string)\n\nprint(remove_uppercase_substring('This is a test'))",
    "import re\n\ndef remove_uppercase(string):\n    regex = re.compile('[A-Z]')\n    return regex.sub('', string)\n\nif __name__ == \"__main__\":\n    print remove_uppercase(\"Hello World\")",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '123456789'),\n                           ord('A') - ord('a'))\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUppercase('A man, a plan, a canal: Panama')",
    "def remove_uppercase_substring(string):\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', string)\n\nif __name__ == '__main__':\n    s = 'abc'\n    print(remove_uppercase_substring(s))",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'[A-Z]*', lambda m: m.group(0).lower(), s)",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'([A-Z])', lambda m: m.group(1).lower(), s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercase(\"Hello World\")",
    "# write your code\ndef remove_uppercase(string):\n    return re.sub(r'(?<=[A-Z])', '', string)\n\n# tests\ntests = [\n    ('The quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'),\n    ('the quick brown fox jumped over the lazy dog.', 'the quick brown fox jumped over the lazy dog.'",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.upper()\n        return ''.join(s[i:i + 1] for i in xrange(len(s)))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercase(\"Hello World\")",
    "# https://www.hackerrank.com/challenges/remove-uppercase-substrings/problem\n# TODO: Try to solve this problem using a regular expression.\n\ndef remove_uppercase_substrings(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    pattern = '.'\n    for letter in string:\n        if letter.isupper():\n            pattern = pattern.replace(letter, '')\n    return pattern\n\nif __name__ == '__main__':\n    string = 'hello world'\n    print(remove_uppercase_substrings(string))",
    "# https://www.hackerrank.com/challenges/remove-uppercase/problem\n\nimport re\nimport string\n\n\ndef remove_uppercase(s):\n    # Complete this function\n    return s.translate(string.maketrans(string.ascii_uppercase, '', s))\n\n\nif __name__ == '__main__':\n    s = input()\n    print(remove_uppercase(s))",
    "def remove_uppercase(s):\n    regex = re.compile('[A-Z]')\n    return regex.sub('', s)\n\nif __name__ == '__main__':\n    s = 'Abcdefghijklmnopqrstuvwxyz'\n    print(remove_uppercase(s))",
    "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeUpperCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # naive implementation\n        if not s:\n            return s\n        pattern = r'[A-Z]{2,}'\n        return s.replace(pattern, '')\n\n\nif __name__ == \"__main__\":\n    import time\n\n    start_time = time.time()\n    s = \"Hello World\"\n    print Solution().removeUpperCase(s)\n    print \"Time elapsed: %s seconds\" % (time.time() - start_time)",
    "# Definition for a substring.\nclass Substring(object):\n    def __init__(self, s):\n        self.start, self.end = 0, len(s) - 1\n        self.length = len(s)\n\n    def __repr__(self):\n        return repr((self.start, self.end, self.length))\n\n\nclass Solution(object):\n    def removeUppercaseSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile('[A-Z]')\n        result = ''\n        for sub in regex.finditer(s):\n            start, end = sub.start(), sub.end()\n            result += s[start:end]\n        return result",
    "class Solution(object):\n    def removeUppercaseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        pattern = r'[A-Z]{1}[a-z]*'\n        return re.sub(pattern, '', s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercaseString(\"AaBbCc\")",
    "class Solution:\n    # @param {string} str\n    # @param {string} patten\n    # @return {string}\n    def removeUpperCase(self, str, patten):\n        return re.sub(patten, '', str).lower()\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeUpperCase(\"A man, a plan, a canal: Panama\", \"a\")\n    print s.removeUpperCase(\"\", \"a\")\n    print s.removeUpperCase(\"\", \"a\")\n    print s.removeUpperCase(\"A man, a plan, a canal: Panama\", \"a\")\n    print s.removeUpperCase(\"A man, a plan, a canal: Panama\", \"a\")\n    print s.removeUpperCase(\"A man, a plan, a canal: Panama\", \"a\")\n    print s.removeUpperCase(\"A man, a plan, a canal: Panama\", \"a\")",
    "class Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i, c in enumerate(s):\n            if c.isupper():\n                res += s[i+1:].lower()\n            else:\n                res += c\n        return res\n\nif __name__ == \"__main__\":\n    s = \"A man, a plan, a canal: Panama\"\n    print Solution().removeUppercase(s)",
    "def remove_uppercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    regex = r'\\b[A-Z]\\w+[A-Z]\\w+\\b'\n    return re.sub(regex, '', string)\n\n\ndef test():\n    assert remove_uppercase('Hello World') == 'World'\n    assert remove_uppercase('hello world') == 'world'\n    assert remove_uppercase('HELLOWORLD') == 'WORLD'\n    assert remove_uppercase('HelloWorld') == 'World'\n    assert remove_uppercase('Hello') == 'Hello'\n    assert remove_uppercase('HelloWorld') == 'World'\n\nif __name__ == '__main__':\n    test()",
    "# https://leetcode.com/problems/remove-uppercase-substrings/discuss/102273/Java-Python-solution\n\nclass Solution(object):\n    def removeUppercase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = s.lower()\n        regex = r\"[A-Z]\"\n        return re.sub(regex, \"\", s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeUppercase(\"A man, a plan, a canal: Panama\")\n    print s.removeUppercase(\"\")"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}