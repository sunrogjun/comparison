{
  "problem": {
    "task_id": "MBPP/315",
    "prompt": "Write a python function to find the first maximum length of even word.",
    "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
    "test_list": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ],
    "challenge_test_list": [],
    "problem_id": 304
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef find_max_even_length(s):\n    \"\"\"Find the first maximum length of even word.\n    \n    s is a list of word.\n    \"\"\"\n    \n    max_len = 0\n    \n    for word in s:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    \n    return max_len\n\n\ndef main():\n    s = [\"apple\", \"pear\", \"banana\"]\n    print(find_max_even_length(s))\n\n\nif __name__ == '__main__':\n    main()",
    "def find_first_max_even_length(words):\n    \"\"\"\n    Return the first max even length of words.\n    \"\"\"\n    return max(len(word) for word in words if len(word) % 2 == 0)\n\n\ndef test_find_first_max_even_length():\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == 4\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == 4\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) == 6\n    assert find_first_max_even_length([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k",
    "def find_first_max_even_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # TODO: (1)\n    # Write your code here.\n    # If the first word is even, then the rest of the words is even as well.\n    # If the first word is odd, then the rest of the words is odd as well.\n    # In other words, if the first word is even, then the rest of the words is even as well.\n    # If the first word is odd, then the rest of the words is odd as well.\n    # If the first word is even, then the rest of the words is even as well.\n    # If the first word is odd, then the rest of the words is odd as well.\n    # If the first word is even, then the rest of the words is even as well.\n    # If the first word is odd, then the rest of the words is odd as well.\n    # If the first word is even, then the rest of the words is even as well.\n    # If the first word is odd, then the rest of the words is odd as well.\n\n    return 0\n\nif __name__ == '__main__':\n    string = 'aabbccddeeff'\n    print(find_first_max_even_length(string))",
    "def maxLength(word):\n  \"\"\"\n  Return the maximum length of an even word.\n  \"\"\"\n  return max([len(x) for x in word if x.isdigit()])\n\ndef main():\n  \"\"\"\n  Test cases\n  \"\"\"\n  assert maxLength(\"abc\") == 3\n  assert maxLength(\"abcd\") == 3\n  assert maxLength(\"abcde\") == 3\n  assert maxLength(\"abcdef\") == 3\n  assert maxLength(\"abcdeg\") == 3\n  assert maxLength(\"abcdefg\") == 3\n  assert maxLength(\"abcdefgh\") == 3\n  assert maxLength(\"abcdefghi\") == 3\n  assert maxLength(\"abcdefghij\") == 3\n  assert maxLength(\"abcdefghijk\") == 3\n  assert maxLength(\"abcdefghijkl\") == 3\n  assert maxLength(\"abcdefghijklm\") == 3\n  assert maxLength(\"abcdefghijklmn\") == 3\n  assert maxLength(\"abcdefghijklmno\") == 3\n  assert maxLength(\"abcdefghijklmnop\") == 3\n  assert maxLength(\"abcdefghijklmnopq\") == 3\n  assert maxLength(\"abcdefghijklmnopqr\") == 3\n  assert maxLength(\"abcdefghijklmnopqrst\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstu\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuv\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuvw\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuvwx\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuvwxy\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuvwxyz\") == 3\n  assert maxLength(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == 3\n\nif __name__ == '__main__':\n  main()",
    "def findMaxLength(words):\n    maxLen = 0\n    for word in words:\n        maxLen = max(len(word), maxLen)\n    return maxLen\n\n\nif __name__ == '__main__':\n    words = ['a', 'abcd', 'abcde', 'abcdcde', 'abcdcde', 'abcdeabcdeabcdeabcde']\n    print(findMaxLength(words))",
    "def find_max_even_word(word_list):\n    \"\"\"\n    :param word_list:\n    :return:\n    \"\"\"\n    # TODO: write your code here\n    return max(map(lambda x: len(x) % 2, word_list))\n\nif __name__ == \"__main__\":\n    word_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    print(find_max_even_word(word_list))",
    "def max_length_even(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n    return max_length\n\nprint(max_length_even([\"a\", \"bb\", \"ccc\", \"dddd\"]))",
    "def firstMaxEvenWordLength(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    maxLength = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > maxLength:\n                maxLength = len(word)\n    return maxLength",
    "def find_max_even_word(words):\n    \"\"\"\n    Args:\n        words: a list of strings\n    Returns:\n        a list of integers\n    \"\"\"\n    max_len = 0\n    max_index = 0\n    for i in range(len(words)):\n        if words[i][0] % 2 == 0:\n            if words[i][0] > max_len:\n                max_len = words[i][0]\n                max_index = i\n    return words[max_index]",
    "def maxLength(words):\n    return max(map(len, words))\n\nif __name__ == \"__main__\":\n    words = [\"hello\", \"hello\", \"world\", \"world\", \"hello\", \"world\"]\n    print(maxLength(words))",
    "def find_max_even_length(words):\n    \"\"\"\n    Given a list of words, find the first maximum length of even word.\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n\nif __name__ == '__main__':\n    words = ['a', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']\n    print find_max_even_length(words)",
    "def find_first_max_even_length(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: int\n    \"\"\"\n    # Find the first maximum length of even word.\n    # O(n) time, O(n) space\n    max_length = 0\n    for i in range(0, len(s)):\n        if s[i] == 'e':\n            if max_length < 2:\n                max_length = 2\n            else:\n                max_length = max(max_length, len(s[i+1:])+1)\n    return max_length\n\n\nif __name__ == \"__main__\":\n    s = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\n    print(find_first_max_even_length(s))\n\n    s = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    print(find_first_max_even_length(s))",
    "def findMaxLength(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    # Find max length of even word\n    maxLength = 0\n    for word in words:\n        length = len(word)\n        if length % 2 == 0:\n            length += 1\n        if length > maxLength:\n            maxLength = length\n    return maxLength\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert findMaxLength([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 3, \"1\"\n    assert findMaxLength([\"a\", \"bb\", \"ccc\", \"dddd\", \"eee\", \"fff\", \"ggg\"]) == 6, \"2\"\n    assert findMaxLength([\"a\", \"bb\", \"ccc\", \"dddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"]) == 8, \"3\"\n    assert findMaxLength([\"a\", \"bb\", \"ccc\", \"dddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"kkk\", \"lll\", \"mmm\"]) == 10, \"4\"",
    "# Define a function\ndef max_length(words):\n    # Declare a variable to store the length of the longest word\n    max_length = 0\n\n    # Iterate over all words and find the maximum length of even word\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n\n    return max_length\n\n# Test your function\nprint max_length([\"hello\", \"world\", \"world\"])\nprint max_length([\"hello\", \"world\", \"world\", \"hello\"])\nprint max_length([\"hello\", \"world\", \"world\", \"world\", \"hello\"])\nprint max_length([\"hello\", \"world\", \"world\", \"world\", \"world\", \"hello\"])",
    "import collections\n\ndef first_max_even_word(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    even_dict = collections.defaultdict(int)\n    for word in s.split():\n        even_dict[word] += 1\n    return max(even_dict.values())\n\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print(first_max_even_word(s))\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(first_max_even_word(s))",
    "def find_max_length_even_word(word_list):\n    max_length = 0\n    for word in word_list:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n#print find_max_length_even_word([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffffff\", \"ggggggg\", \"hhhhhhhh\"])",
    "def find_max_even_length(words):\n    max_length = 0\n    max_length_word = ''\n    for word in words:\n        length = len(word)\n        if length % 2 == 0:\n            if length > max_length:\n                max_length = length\n                max_length_word = word\n    return max_length_word\n\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'cat', 'dog', 'dog', 'dog', 'dog']\n    print(find_max_even_length(words))",
    "def find_first_max_even(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\nif __name__ == '__main__':\n    words = ['i', 'love', 'leetcode']\n    print(find_first_max_even(words))",
    "from collections import Counter\n\ndef get_max_length_of_even_word(text):\n    \"\"\"\n    Given a text, return the maximum length of an even word.\n    :param text:\n    :return:\n    \"\"\"\n    text = text.lower()\n    max_length = 0\n    max_length_of_even_word = 0\n    for i in range(0, len(text)):\n        if (text[i] in 'abcdefghijklmnopqrstuvwxyz') and (text[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n            if (len(text[i:]) % 2) == 0:\n                max_length_of_even_word = max(max_length_of_even_word, len(text[i:]) / 2)\n    return max_length_of_even_word\n\nif __name__ == '__main__':\n    text = 'HelloWorld'\n    print get_max_length_of_even_word(text)",
    "def max_length_even(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(len(word), max_length)\n    return max_length\n\nprint(max_length_even(['a', 'b', 'c', 'd']))",
    "# https://www.hackerrank.com/challenges/first-maximum-length-of-even-word\n\n# https://www.hackerrank.com/challenges/first-maximum-length-of-even-word/submissions/code/31583910\n\ndef find_first_max_length(words):\n    \"\"\"\n    :param words: List of words\n    :return: First maximum length of even word\n    \"\"\"\n\n    # If there is only one word, there is no max length\n    if len(words) == 1:\n        return len(words[0])\n\n    # Create a set to store the max length of even words\n    max_lengths = set()\n\n    # Add the max length of even words to the set\n    for word in words:\n        if len(word) % 2 == 0:\n            max_lengths.add(len(word))\n\n    # Return the first max length of even word\n    return max(max_lengths)\n\n\nif __name__ == \"__main__\":\n    # Input comes from STDIN\n    words = list(map(str.strip, sys.stdin.readlines()))\n\n    # Print the answer\n    print(find_first_max_length(words))",
    "# Definition for a  binary tree node\nclass TreeNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution:\n\t# @param root, a tree node\n\t# @return an integer\n\tdef maxDepth(self, root):\n\t\tif root == None:\n\t\t\treturn 0\n\t\treturn 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n\nif __name__ == \"__main__\":\n\ts = Solution()\n\tprint(s.maxDepth(TreeNode(1)))\n\tprint(s.maxDepth(TreeNode(3)))\n\tprint(s.maxDepth(TreeNode(3)))",
    "def max_even_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # Use a stack to keep track of the longest string\n    stack = []\n    for c in string:\n        if c.isdigit():\n            stack.append(int(c))\n        else:\n            if len(stack) == 0:\n                return 0\n            else:\n                stack.pop()\n    return len(stack)\n\n\nif __name__ == '__main__':\n    s = 'abcabcbb'\n    print(max_even_length(s))",
    "import sys\n\ndef max_length(s):\n    \"\"\"\n    Find the maximum length of even word in string s.\n    >>> max_length('abcdefg')\n    6\n    >>> max_length('abcdef')\n    4\n    >>> max_length('abcde')\n    3\n    >>> max_length('abc')\n    2\n    >>> max_length('a')\n    1\n    >>> max_length('')\n    0\n    \"\"\"\n    return max([len(s[i:]) % 2 for i in range(0, len(s)) if s[i:]])\n\n\nif __name__ == '__main__':\n    print max_length(sys.argv[1])",
    "def find_first_max_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if not string:\n        return 0\n    length = 0\n    for char in string:\n        if char.isdigit():\n            length += 1\n        else:\n            length += 1\n            length += 1\n    return length\n\nif __name__ == '__main__':\n    assert find_first_max_even(\"abcd\") == 4\n    assert find_first_max_even(\"abcde\") == 6\n    assert find_first_max_even(\"abcdef\") == 6\n    assert find_first_max_even(\"abcdefg\") == 6\n    assert find_first_max_even(\"abcdefgh\") == 6\n    assert find_first_max_even(\"abcdefghi\") == 6\n    assert find_first_max_even(\"abcdefghij\") == 6\n    assert find_first_max_even(\"abcdefghijk\") == 6\n    assert find_first_max_even(\"abcdefghijkl\") == 6\n    assert find_first_max_even(\"abcdefghijklm\") == 6\n    assert find_first_max_even(\"abcdefghijklmn\") == 6\n    assert find_first_max_even(\"abcdefghijklmno\") == 6\n    assert find_first_max_even(\"abcdefghijklmnop\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopq\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqr\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqrs\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqrs1\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqrs2\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqrs3\") == 6\n    assert find_first_max_even(\"abcdefghijklmnopqrs4\") == 6\n    assert find_first_max_even(\"abcdef",
    "def findMaxLength(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for word in words:\n        length = len(word)\n        if length & 1 == 0:\n            result = max(result, length)\n    return result\n\nif __name__ == '__main__':\n    words = [\"love\", \"leetcode\", \"code\", \"leet\", \"code\"]\n    print(findMaxLength(words))",
    "def findMaxLength(wordlist):\n    # write your code here\n    maxLen = 0\n    for word in wordlist:\n        if len(word) % 2 == 0:\n            if len(word) > maxLen:\n                maxLen = len(word)\n    return maxLen\n\nif __name__ == '__main__':\n    with open('../input/day_12.txt', 'r') as f:\n        wordlist = [word.strip() for word in f.readlines()]\n    print(findMaxLength(wordlist))",
    "def findMaxLength(wordList):\n    \"\"\"\n    :type wordList: List[str]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    maxLen = 0\n    for word in wordList:\n        if len(word) % 2 == 0:\n            maxLen = max(maxLen, len(word))\n    return maxLen\n\nif __name__ == '__main__':\n    print(findMaxLength([\"a\", \"b\", \"c\", \"d\", \"e\"]))\n    print(findMaxLength([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))",
    "# write your code here\ndef findMax(arr):\n    \"\"\"\n    :type arr: List[str]\n    :rtype: int\n    \"\"\"\n    maxLen = 0\n    for i in range(0, len(arr)):\n        if arr[i] == \"\":\n            continue\n        if arr[i].isdigit():\n            maxLen = max(maxLen, len(arr[i]))\n    return maxLen\n\nif __name__ == \"__main__\":\n    arr = [\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",",
    "# http://www.geeksforgeeks.org/first-maximum-length-even-word-in-a-given-string/\ndef firstMaxLengthEvenWord(input):\n    wordList = input.split()\n    wordLength = [len(word) for word in wordList]\n    wordLength.sort()\n    # Find the index of the first element greater than even word length.\n    for i in range(len(wordLength) - 1, -1, -1):\n        if wordLength[i] % 2 == 0:\n            return wordLength[i]\n    return 0\n\nprint firstMaxLengthEvenWord(\"aabbccdd\")",
    "def findMax(l):\n    maxLen = 0\n    for i in l:\n        if i % 2 == 0:\n            maxLen = max(maxLen, len(i))\n    return maxLen\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(findMax(l))\n    l = [2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(findMax(l))\n    l = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "def max_even_length(string):\n    \"\"\"\n    Write a function that takes a string and returns the length of the longest\n    even-length substring.\n    \"\"\"\n    return max(len(s) for s in string if s.isalnum() and s.isupper())",
    "def find_first_max_even(words):\n    \"\"\"\n    words is a list of string.\n    Return the first maximum length of even word.\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    return max_len\n\n# Test\nwords = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert(find_first_max_even(words) == 6)",
    "from itertools import combinations\n\ndef find_max_length_even_word(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # TODO: write code\n    \n    if n <= 0:\n        return 0\n\n    return max(\n        [len(word) for word in combinations(list('abcdefghijklmnopqrstuvwxyz'), n)])\n\nif __name__ == '__main__':\n    print(find_max_length_even_word(2))\n    print(find_max_length_even_word(3))\n    print(find_max_length_even_word(4))\n    print(find_max_length_even_word(5))\n    print(find_max_length_even_word(6))\n    print(find_max_length_even_word(7))\n    print(find_max_length_even_word(8))",
    "def find_first_max_even_word(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_length_word = \"\"\n\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n                max_length_word = word\n\n    return max_length_word\n\n\nif __name__ == \"__main__\":\n    words = [\"cat\", \"dog\", \"mouse\"]\n    print(find_first_max_even_word(words))",
    "def first_max_even(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in range(len(input_string)):\n        if input_string[i] % 2 == 0:\n            if input_string[i] > max_length:\n                max_length = input_string[i]\n\n    return max_length\n\nif __name__ == '__main__':\n    print(first_max_even('abacab'))\n    print(first_max_even('aabca'))",
    "def find_first_max_length(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    first_max = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > first_max:\n                first_max = len(word)\n    return first_max\n\nif __name__ == \"__main__\":\n    words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]\n    print(find_first_max_length(words))",
    "def find_max_even_length(words):\n    # write your code here\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n\nprint(find_max_even_length([\"hello\", \"world\"]))\nprint(find_max_even_length([\"hello\", \"world\", \"goodbye\"]))\nprint(find_max_even_length([\"hello\", \"world\", \"goodbye\", \"goodbye\"]))\nprint(find_max_even_length([\"hello\", \"goodbye\", \"goodbye\", \"goodbye\"]))\nprint(find_max_even_length([\"hello\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\"]))",
    "def find_first_max(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    return max(map(len, words))\n\ndef test_find_first_max():\n    assert find_first_max([\"a\", \"b\", \"c\", \"d\"]) == 2\n    assert find_first_max([\"a\", \"b\", \"c\", \"a\", \"b\"]) == 2\n    assert find_first_max([\"a\", \"b\", \"c\", \"a\", \"c\"]) == 2\n    assert find_first_max([\"a\", \"b\", \"c\", \"a\", \"d\"]) == 2\n    assert find_first_max([\"a\", \"b\", \"c\", \"c\", \"c\"]) == 3\n    assert find_first_max([\"a\", \"b\", \"c\", \"c\", \"c\", \"a\"]) == 3\n    assert find_first_max([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"a\"]) == 3\n    assert find_first_max([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\"]) == 3\n\nif __name__ == '__main__':\n    test_find_first_max()",
    "def find_max_even_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\nif __name__ == '__main__':\n    print find_max_even_word(['hello', 'goodbye', 'world'])",
    "def find_max_even_len(words):\n    \"\"\"\n    Return the first maximum length of even word in the list of words.\n    \"\"\"\n    max_len = 0\n    for w in words:\n        if w[0] % 2 == 0:\n            if len(w) > max_len:\n                max_len = len(w)\n    return max_len\n\nif __name__ == '__main__':\n    print(find_max_even_len([\n        'i',\n        'love',\n        'leetcode',\n        'code'\n    ]))",
    "def first_max_even(str):\n    return max(0, len(str) - 1)\n\nif __name__ == '__main__':\n    assert first_max_even(\"a\") == 0\n    assert first_max_even(\"abc\") == 1\n    assert first_max_even(\"abcd\") == 2\n    assert first_max_even(\"abcde\") == 3\n    assert first_max_even(\"abcdef\") == 4\n    assert first_max_even(\"abcdefg\") == 4\n    assert first_max_even(\"abcdefgh\") == 5\n    assert first_max_even(\"abcdefghi\") == 5\n    assert first_max_even(\"abcdefghij\") == 5\n    assert first_max_even(\"abcdefghijk\") == 5\n    assert first_max_even(\"abcdefghijkl\") == 5\n    assert first_max_even(\"abcdefghijklm\") == 5\n    assert first_max_even(\"abcdefghijklmn\") == 5\n    assert first_max_even(\"abcdefghijklmnop\") == 5\n    assert first_max_even(\"abcdefghijklmnopq\") == 5\n    assert first_max_even(\"abcdefghijklmnopqr\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrs\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrst\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstu\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuv\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuvw\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuvwx\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuvwxy\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuvwxyz\") == 5\n    assert first_max_even(\"abcdefghijklmnopqrstuvwxyz\") == 5\n    assert",
    "from collections import Counter\n\ndef find_first_max_length(words):\n    \"\"\"\n    Find the first max length of even word\n    :param words: List of words\n    :return: The first max length of even word\n    \"\"\"\n    max_length = 0\n    max_length_words = []\n\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n                max_length_words = []\n\n            if len(word) < max_length:\n                max_length_words.append(word)\n    return max_length_words\n\n\nif __name__ == '__main__':\n    words = [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\", \"rat\"]\n    print(find_first_max_length(words))",
    "# Write a function to find the first maximum length of even word.\n# Input: a string.\n# Output: the length of the first maximum length of even word.\n# Example:\n# Input: \"abcdef\"\n# Output: 6\n# Explanation: \"abc\" is the first maximum length of even word.\n# Note:\n# The length of the string is in the range [1, 10000].\n# The words consist of lowercase letters and digits only.\n# Examples:\n# Input: \"abcdef\"\n# Output: 6\n# Input: \"a\"\n# Output: 2\n# Input: \"abcd\"\n# Output: 3\n# Input: \"abbcd\"\n# Output: 6\n# Input: \"abbccd\"\n# Output: 3\n# Input: \"abbcccdd\"\n# Output: 6\n\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use a while loop to find the first maximum length of even word.\n# Use",
    "import collections\n\ndef find_first_max_even(string):\n    words = collections.defaultdict(int)\n    for char in string:\n        words[char] += 1\n    max_len = 0\n    for key, value in words.items():\n        if value % 2 == 0:\n            if value > max_len:\n                max_len = value\n    return max_len\n\nif __name__ == '__main__':\n    assert find_first_max_even('aabbccdd') == 2\n    assert find_first_max_even('aaaabbbb') == 3\n    assert find_first_max_even('aaaabbbbccccdd') == 5",
    "def find_first_max_even(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            result = max(result, len(word))\n    return result\n\n\nif __name__ == \"__main__\":\n    words = [\"i\", \"love\", \"leetcode\"]\n    print(find_first_max_even(words))",
    "def max_even_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\nif __name__ == '__main__':\n    string = 'hello world'\n    print max_even_length(string)",
    "def find_max_even(word):\n    if len(word) == 0:\n        return 0\n    if len(word) == 1:\n        return 1\n    if len(word) == 2:\n        return 2\n    max_length = 2\n    for i in range(len(word) - 1):\n        if word[i] % 2 == 0:\n            if len(word[i:]) > max_length:\n                max_length = len(word[i:])\n    return max_length\n\nif __name__ == '__main__':\n    print find_max_even(\"aab\")\n    print find_max_even(\"ababab\")\n    print find_max_even(\"abbabbb\")\n    print find_max_even(\"abababbb\")",
    "import os\nimport re\nfrom collections import defaultdict\nfrom collections import Counter\n\n\nclass Solution(object):\n    def maxLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        word_dict = defaultdict(int)\n        for word in words:\n            word_dict[word] += 1\n\n        counter = Counter(words)\n        max_count = 0\n        for word, count in counter.most_common():\n            if word_dict[word] % 2 == 0:\n                max_count = max(max_count, count)\n        return max_count\n\n\nif __name__ == '__main__':\n    s = Solution()\n    words = [\"a\", \"abcd\", \"abcdcd\", \"abcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd",
    "def findMaxLengthOfEvenWord(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    if not words:\n        return 0\n\n    maxLen = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            maxLen = max(maxLen, len(word))\n        else:\n            maxLen = max(maxLen, len(word) + 1)\n\n    return maxLen\n\n\nif __name__ == '__main__':\n    words = [\n        \"apple\",\n        \"ball\",\n        \"ballot\",\n        \"balloon\",\n        \"balloon\",\n        \"balloons\",\n        \"bambi\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"banana\",\n        \"",
    "def find_max_even(string):\n    \"\"\"\n    Find the first maximum length of even word in the given string.\n    \"\"\"\n    max_length = 0\n    max_index = -1\n    for index, letter in enumerate(string):\n        if (index % 2 == 0 and letter.isalpha()):\n            if (index + 1 > max_length):\n                max_length = index + 1\n                max_index = index\n    return max_index",
    "def max_even_length(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    # words = [\"hello\", \"world\", \"good\", \"morning\", \"noon\", \"even\"]\n    # print(max_even_length(words))\n    # print(max_even_length(words))\n\n    # def max_even_length(words):\n    #     \"\"\"\n    #     :type words: List[str]\n    #     :rtype: int\n    #     \"\"\"\n    #     if not words:\n    #         return 0\n    #     max_len = 0\n    #     for w in words:\n    #         if len(w) % 2 == 0:\n    #             max_len = max(max_len, len(w))\n    #     return max_len\n\n    def max_even_length(words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        # words = [\"hello\", \"world\", \"good\", \"morning\", \"noon\", \"even\"]\n        # print(max_even_length(words))\n        # print(max_even_length(words))\n\n        if not words:\n            return 0\n        max_len = 0\n        for w in words:\n            if len(w) % 2 == 0:\n                max_len = max(max_len, len(w))\n        return max_len\n\n    return max_even_length(words)",
    "import math\n\ndef find_max_even_length(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(len(word), max_length)\n    return max_length\n\nif __name__ == \"__main__\":\n    words = [\"Hello\", \"World\", \"I\", \"Love\", \"You\"]\n    print(find_max_even_length(words))\n    print(find_max_even_length([\"Hello\", \"World\", \"I\", \"Love\", \"You\"]))",
    "def findMaxLengthEvenWord(s):\n    maxLength = 0\n    for i in range(len(s)):\n        if s[i] % 2 == 0:\n            maxLength = max(maxLength, i)\n    return maxLength\n\nprint findMaxLengthEvenWord(\"hello world\")",
    "def find_first_max_even_word(words):\n    \"\"\"\n    words is a list of words\n    Return the first maximum length of even word in words\n    \"\"\"\n    # words is a list of words\n    # Return the first maximum length of even word in words\n    return max(filter(lambda x: x.is_even(), words))\n\n\n# print(find_first_max_even_word([u'hello', u'world', u'hello', u'world', u'world', u'world', u'hello', u'world', u'world']))\n# print(find_first_max_even_word(['hello', 'world', 'hello', 'world', 'world', 'world', 'hello', 'world', 'world']))\n# print(find_first_max_even_word(['hello', 'world', 'world', 'hello', 'world', 'world', 'hello', 'world', 'world']))\n\nprint(find_first_max_even_word(['hello', 'world', 'hello', 'world', 'world', 'world', 'hello', 'world', 'world']))",
    "def find_first_even_max_length(str_list):\n    \"\"\"\n    Input:\n    str_list: a list of string\n    Output:\n    first_even_max_length: the first maximum length of even word\n    \"\"\"\n    max_length_of_even_word = 0\n    for word in str_list:\n        if len(word) % 2 == 0:\n            if len(word) > max_length_of_even_word:\n                max_length_of_even_word = len(word)\n\n    return max_length_of_even_word\n\n\nif __name__ == '__main__':\n    str_list = ['a', 'ab', 'abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg']\n    print find_first_even_max_length(str_list)",
    "def find_max_even(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    return max(map(len, filter(lambda x: x % 2 == 0, words)))\n\n\nif __name__ == \"__main__\":\n    words = [\"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    print(find_max_even(words))",
    "def first_max(word):\n    max_length = 0\n    for i in xrange(len(word)):\n        if word[i] % 2 == 0 and len(word) - i > max_length:\n            max_length = len(word) - i\n    return max_length\n\ndef test():\n    assert(first_max(\"a\") == 0)\n    assert(first_max(\"bbb\") == 1)\n    assert(first_max(\"bbbbbbbbbb\") == 3)\n    assert(first_max(\"abbbbbbbbbb\") == 3)\n    assert(first_max(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "def find_max(list_of_words):\n    return max(list_of_words)\n\n\ndef main():\n    list_of_words = [\"hello\", \"world\", \"hello\", \"python\", \"hello\", \"python\"]\n    print(find_max(list_of_words))\n\n\nif __name__ == \"__main__\":\n    main()",
    "def find_max_even_len(string):\n    # write your code here\n    length = len(string)\n    max_length = 0\n    for i in range(length):\n        if string[i] % 2 == 0:\n            if i + 1 < length:\n                if string[i] > string[i + 1]:\n                    max_length = max(max_length, i + 1)\n        else:\n            if i + 2 < length:\n                if string[i] > string[i + 2]:\n                    max_length = max(max_length, i + 2)\n    return max_length\n\nif __name__ == '__main__':\n    test_case = 'hello'\n    print find_max_even_len(test_case)",
    "import sys\n\ndef max_even(words):\n    \"\"\"\n    Find the first maximum length of even word.\n\n    >>> max_even([\"b\", \"bb\", \"ccc\", \"cccc\", \"c\", \"cc\"])\n    4\n    >>> max_even([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"])\n    5\n    >>> max_even([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"a\"])\n    4\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    return max_len\n\nif __name__ == \"__main__\":\n    words = sys.argv[1:]\n    print max_even(words)",
    "def max_length_even_word(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    if not words:\n        return 0\n    length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            length = max(length, len(word))\n    return length\n\n\nif __name__ == '__main__':\n    words = [\"a\", \"bb\", \"ccc\", \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
    "def findMaxLength(words):\n    maxLength = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > maxLength:\n                maxLength = len(word)\n    return maxLength\n\nwords = ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n\nprint(findMaxLength(words))",
    "def find_max_length(words):\n    \"\"\"\n    Find the first maximum length of even word.\n    :param words:\n    :return:\n    \"\"\"\n    if not words:\n        return 0\n\n    # count the length of even word\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n\n    return max_length\n\nif __name__ == '__main__':\n    print(find_max_length([\"a\", \"bb\", \"ccc\", \"dddd\"]))",
    "def max_even_length(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n    return max_length\n\n\nif __name__ == '__main__':\n    words = [\n        'a',\n        'a',\n        'abcde',\n        'ab',\n        'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
    "def find_first_max_even_length(words):\n    \"\"\"\n    Return the first max length of even length\n    \"\"\"\n    max_length = 0\n    for word in words:\n        length = len(word)\n        if length % 2 == 0 and length > max_length:\n            max_length = length\n    return max_length\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    print(find_first_max_even_length(words))",
    "import sys\n\ndef find_first_max_len_even(s):\n    \"\"\"\n    >>> find_first_max_len_even(\"Hello\")\n    3\n    >>> find_first_max_len_even(\"I'm\")\n    1\n    >>> find_first_max_len_even(\"a\")\n    1\n    >>> find_first_max_len_even(\"abc\")\n    3\n    >>> find_first_max_len_even(\"abcd\")\n    3\n    >>> find_first_max_len_even(\"aabcd\")\n    4\n    \"\"\"\n    return max(len(s) for s in s.split(\" \") if s.isalpha())\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        print(find_first_max_len_even(sys.stdin.read()))\n    else:\n        with open(sys.argv[1]) as f:\n            print(find_first_max_len_even(f.read()))",
    "from collections import Counter\n\ndef max_length_even(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    return max_len\n\nif __name__ == '__main__':\n    words = [\n        'abc',\n        'abcd',\n        'abcd',\n        'abcd',\n        'abcd',\n        'abcd',\n        'abcde',\n        'abcde',\n        'abcde',\n        'abcde',\n        'abcde',\n        'abcde',\n        'abcdef',\n        'abcdef',\n        'abcdef',\n        'abcdef',\n        'abcdef',\n        'abcdef',\n        'abcdefg',\n        'abcdefg',\n        'abcdefg',\n        'abcdefg',\n        'abcdefg',\n        'abcdefg',\n        'abcdefgh',\n        'abcdefgh',\n        'abcdefgh',\n        'abcdefgh',\n        'abcdefgh',\n        'abcdefgh',\n        'abcdefghi',\n        'abcdefghi',\n        'abcdefghi',\n        'abcdefghi',\n        'abcdefghi',\n        'abcdefghi',\n        'abcdefghij',\n        'abcdefghij',\n        'abcdefghij',\n        'abcdefghij',\n        'abcdefghij',\n        'abcdefghij',\n        'abcdefghijk',\n        'abcdefghijk',\n        'abcdefghijk',\n        'abcdefghijk',\n        'abcdefghijk',\n        'abcdefghijk',\n        'abcdefghijkl',\n        'abcdefghijkl',\n        'abcdefghijkl',\n        'abcdefghijkl',\n        'abcdefghijkl',\n        'abcdefghijkl',\n        'abcdefghijklm',\n        'abcdefghijklm",
    "def find_max_even(words):\n    \"\"\"\n    Find the first maximum length of even word.\n    \"\"\"\n    length = 0\n    max_length = 0\n    for word in words:\n        length += len(word)\n        if length % 2 == 0 and length > max_length:\n            max_length = length\n\n    return max_length\n\n\nif __name__ == '__main__':\n    words = [\"ab\", \"cd\", \"ef\", \"gh\"]\n    print find_max_even(words)",
    "# This function is a modified version of the \"Word Length: Maximum Length of Even Words\"\n# problem in the Python Cookbook.\n\ndef max_even_length(s):\n    max_length = 0\n    for i in range(0, len(s)):\n        if s[i] % 2 == 0:\n            if s[i] > max_length:\n                max_length = s[i]\n    return max_length\n\nprint max_even_length(\"abcd\")",
    "# O(n^2)\ndef find_max_even_word_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i):\n            if string[i] == string[j] and string[i] == 'e':\n                max_length = max(max_length, len(string[i:j+1]))\n    return max_length\n\n# O(n)\ndef find_max_even_word_length_2(string):\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == 'e':\n            max_length = max(max_length, len(string[i:i+1]))\n    return max_length\n\n# O(n)\ndef find_max_even_word_length_3(string):\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == 'e' and string[i+1]!= 'e':\n            max_length = max(max_length, len(string[i:i+2]))\n    return max_length\n\n# O(n^2)\ndef find_max_even_word_length_4(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i):\n            if string[i] == string[j] and string[i] == 'e':\n                max_length = max(max_length, len(string[i:j+1]))\n    return max_length\n\n# O(n)\ndef find_max_even_word_length_5(string):\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == 'e' and string[i+1]!= 'e':\n            max_length = max(max_length, len(string[i:i+2]))\n    return max_length\n\n# O(n^2)\ndef find_max_even_word_length_6(string):\n    max_length = 0\n    for i in range(len(",
    "def firstMaxLength(word):\n    return max(len(word), len(word) % 2)\n\n# Test\nprint(firstMaxLength('abcd'))\nprint(firstMaxLength('bab'))\nprint(firstMaxLength('aa'))\nprint(firstMaxLength('a'))\nprint(firstMaxLength('aaa'))\nprint(firstMaxLength('bbbb'))",
    "def findMaxLength(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    maxLength = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            continue\n        if i == 0 or s[i-1] == '0':\n            continue\n        if i >= maxLength and s[i]!= s[i-1]:\n            maxLength = i\n    return maxLength\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz123'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz123456'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz123456789'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz1234567890123456789'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz12345678901234567890123456789'\n    print findMaxLength(s)\n    s = 'abcdefghijklmnopqrstuvwxyz123456789012345678901234567890123456789'\n    print findMaxLength(s)",
    "def firstMaxLength(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    maxLength = 0\n    for i in range(len(string)):\n        if string[i] % 2 == 0 and string[i]!= 0:\n            if maxLength < i:\n                maxLength = i\n    return maxLength\n\nprint(firstMaxLength(\"aabbcc\"))\nprint(firstMaxLength(\"abbccdd\"))\nprint(firstMaxLength(\"abbccddee\"))",
    "def first_max_even_length(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    first_max_even_length = max([len(numbers[i]) for i in range(len(numbers)) if numbers[i] % 2 == 0])\n    return first_max_even_length\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_max_even_length(numbers))",
    "# https://leetcode.com/problems/first-maximum-length-of-even-word/discuss/118880/Python-Solution-O(n^2)-Time-O(n)-Space\n\nclass Solution(object):\n    def firstMaxLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        if not words: return 0\n\n        # sort the words\n        words.sort()\n\n        # find the first index of even length\n        start = 0\n        end = len(words) - 1\n        while start < end:\n            mid = (start + end) / 2\n            if words[mid] == words[mid + 1]:\n                end = mid\n            else:\n                start = mid + 1\n\n        # get the first max length\n        max_length = 0\n        for i in range(start, end, -1):\n            if words[i] % 2 == 0:\n                max_length = max(max_length, len(words[i]))\n\n        return max_length",
    "#!/usr/bin/env python\n\ndef max_even(string):\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] % 2 == 0:\n            if len(string[i:]) > max_length:\n                max_length = len(string[i:])\n    return max_length\n\n# print(max_even('abcd'))\n# print(max_even('abcdab'))\n# print(max_even('abcdabcd'))\n\nif __name__ == '__main__':\n    print(max_even('abcd'))\n    print(max_even('abcdab'))\n    print(max_even('abcdabcd'))",
    "def find_max_length_even_word(string):\n    \"\"\"\n    Write a function to find the first maximum length of even word.\n\n    :type string: str\n    :rtype: int\n    \"\"\"\n    lengths = {}\n    for i in range(len(string)):\n        if string[i] in lengths:\n            lengths[string[i]] += 1\n        else:\n            lengths[string[i]] = 1\n    return max(lengths.values())",
    "# Write your code here\n\ndef find_first_max_even_word(str):\n    length = len(str)\n    result = 0\n    for i in range(length):\n        if str[i] in ['a', 'e', 'i', 'o', 'u']:\n            result = i + 1\n            break\n    return result\n\nprint find_first_max_even_word(\"abcd\")",
    "def find_max_even_length(words):\n    return max(map(lambda x: len(x) % 2 == 0, words))\n\n\nprint find_max_even_length([\"c\", \"bb\", \"bbb\", \"cc\", \"cdd\"])",
    "def first_max_length_even_word(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n\nif __name__ == \"__main__\":\n    words = [\n        \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"\n    ]\n    print(first_max_length_even_word(words))",
    "# Definition for a word.\nclass Word:\n    def __init__(self, word):\n        self.word = word\n        self.length = len(word)\n\n    def __repr__(self):\n        return self.word\n\nclass Solution:\n    def findMaxLengthWord(self, words):\n        \"\"\"\n        :type words: List[Word]\n        :rtype: int\n        \"\"\"\n        def max_length_even_word(words):\n            \"\"\"\n            :type words: List[Word]\n            :rtype: int\n            \"\"\"\n            length = len(words)\n            for i in range(length):\n                for j in range(i+1, length):\n                    if words[i].word[j]!= words[j].word[i]:\n                        break\n                if j == length:\n                    return j\n            return length\n\n        return max_length_even_word(words)\n\ns = Solution()\nwords = [\n    Word(\"apple\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),\n    Word(\"a\"),",
    "def maxLengthEvenWord(words):\n    \"\"\"\n    Input:\n    words: a list of words\n    Output:\n    an integer\n    \"\"\"\n\n    maxLength = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            length = len(word) / 2\n            if length > maxLength:\n                maxLength = length\n    return maxLength\n\n\nif __name__ == '__main__':\n    words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print maxLengthEvenWord(words)",
    "from collections import defaultdict\n\ndef find_max_even_length(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    result = defaultdict(int)\n    for w in words:\n        result[w[::2]] += 1\n    return max(result.values())\n\nif __name__ == \"__main__\":\n    print(find_max_even_length([\"apple\", \"apple\", \"appel\", \"appel\"]))\n    print(find_max_even_length([\"a\", \"aa\", \"aa\", \"aaa\"]))\n    print(find_max_even_length([\"\", \"a\", \"aa\", \"aaa\", \"aabb\", \"aabbb\", \"aabbbb\"]))\n    print(find_max_even_length([\"a\", \"aa\", \"aa\", \"aaa\", \"aabb\", \"aabbb\", \"aabbbb\", \"aabbbbb\", \"aabbbbbb\"]))",
    "def find_first_max_even(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    word_length = {}\n    for word in words:\n        if word in word_length:\n            word_length[word] += 1\n        else:\n            word_length[word] = 1\n    max_len = 0\n    for word, value in word_length.items():\n        if value % 2 == 0 and value > max_len:\n            max_len = value\n    return max_len\n\n\nif __name__ == '__main__':\n    words = ['cat', 'bat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat']\n    print(find_first_max_even(words))",
    "def max_even_length(word_list):\n    if len(word_list) == 0:\n        return 0\n    else:\n        return max(map(lambda w: len(w) & 1, word_list))\n\nif __name__ == '__main__':\n    print max_even_length(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])",
    "def find_first_max_even(string):\n    \"\"\"\n    Find the first maximum length of even word.\n    string: A string\n    return: A integer\n    \"\"\"\n    return find_first_max_even_rec(string, 0, len(string) - 1)\n\n\ndef find_first_max_even_rec(string, start, end):\n    \"\"\"\n    Find the first maximum length of even word.\n    string: A string\n    start: A integer\n    end: A integer\n    return: A integer\n    \"\"\"\n    if start >= end:\n        return start\n    if string[start] % 2 == 1:\n        return find_first_max_even_rec(string, start + 1, end)\n    else:\n        return find_first_max_even_rec(string, start + 1, end - 1)\n\nif __name__ == '__main__':\n    string = \"aabbccddee\"\n    print(find_first_max_even(string))\n    string = \"abcd\"\n    print(find_first_max_even(string))\n    string = \"abcd\"\n    print(find_first_max_even(string))",
    "def find_first_even_max_length(str):\n    \"\"\"\n    :param str:\n    :return: first max length of even word.\n    \"\"\"\n    return max(map(len, filter(lambda x: x % 2 == 0, str)))\n\n\nif __name__ == \"__main__\":\n    str = \"aabcccddd\"\n    print(find_first_even_max_length(str))",
    "def find_max_even_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return max(len(word) for word in string.split(' ') if word.isdigit())\n\nif __name__ == '__main__':\n    assert find_max_even_length(\"a aaa aaaa\") == 4\n    assert find_max_even_length(\"abcd\") == 2\n    assert find_max_even_length(\"aaa\") == 1\n    assert find_max_even_length(\"a\") == 1",
    "# First, create a function that returns the length of the first\n# maximum length of even number in a list of strings.\n\ndef find_max_length_even(list_of_strings):\n    \"\"\"\n    Return the length of the first maximum length of even number in a list of strings.\n    \"\"\"\n    # TODO: write your code here\n    # TODO: test your code and check if it works properly\n    # TODO: write the code that calculates the max length of even number in a list of strings\n    # TODO: return the length of the first maximum length of even number in a list of strings\n    return max(map(lambda s: len(s) % 2 == 0, list_of_strings))\n\nif __name__ == '__main__':\n    # TODO: test your code and check if it works properly\n    # TODO: write the code that calculates the max length of even number in a list of strings\n    # TODO: return the length of the first maximum length of even number in a list of strings\n    print(find_max_length_even([\"a\", \"b\", \"c\", \"d\"]))",
    "def find_max_length(words):\n    \"\"\"\n    Find the maximum length of even word.\n\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n    return max_length\n\nif __name__ == '__main__':\n    words = ['abcd', 'abce', 'abcde', 'abcef', 'abcdef']\n    print(find_max_length(words))",
    "def first_maximum_odd_length(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 1:\n            max_length = max(max_length, len(word))\n    return max_length\n\nwords = ['a', 'bbb', 'ccc']\nprint(first_maximum_odd_length(words))",
    "def find_max_even_length(words):\n    max_length = 0\n    for word in words:\n        length = len(word)\n        if length % 2 == 0:\n            if length > max_length:\n                max_length = length\n    return max_length\n\nprint(find_max_even_length(['cat', 'bat', 'rat']))",
    "def max_even_length_word(string):\n    return max(map(len, filter(lambda x: x.is_even, string)))\n\nif __name__ == \"__main__\":\n    print max_even_length_word(\"A cat sat on a mat\")",
    "def find_first_max_length_even_word(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return max(len(word) for word in text.split(' ') if len(word) % 2 == 0)",
    "def find_max_even(words):\n    max_len = 0\n    max_len_even = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len_even:\n            max_len_even = len(word)\n            max_len = max(max_len, max_len_even)\n    return max_len\n\nif __name__ == '__main__':\n    words = ['a', 'abcd', 'abcd', 'abcd', 'abcde', 'abcde']\n    print(find_max_even(words))",
    "def find_first_max_even(words):\n    \"\"\"\n    Find the first max length of even word.\n    \"\"\"\n    # max_length = 0\n    # for word in words:\n    #     if len(word) % 2 == 0:\n    #         max_length = max(max_length, len(word))\n    # return max_length\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n    return max_length\n\nif __name__ == '__main__':\n    print find_first_max_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    print find_first_max_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    print find_first_max_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    print find_first_max_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    print find_first_max",
    "def findFirstMaxLengthEvenWord(words):\n    return max(map(lambda w: len(w) & 1, words))\n\nif __name__ == '__main__':\n    words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    print(findFirstMaxLengthEvenWord(words))",
    "import sys\n\n\ndef max_length_even(words):\n    \"\"\"\n    Write a function to return the length of the first max length even word\n    in the given list of words.\n    \"\"\"\n    return max([len(word) for word in words if word[0] % 2 == 0])\n\n\ndef max_length_odd(words):\n    \"\"\"\n    Write a function to return the length of the first max length odd word\n    in the given list of words.\n    \"\"\"\n    return max([len(word) for word in words if word[0] % 2 == 1])\n\n\nif __name__ == '__main__':\n    input_file_name = sys.argv[1]\n    input_file = open(input_file_name, 'r')\n    words = [line.strip() for line in input_file]\n    print \"Max Length of even word:\", max_length_even(words)\n    print \"Max Length of odd word:\", max_length_odd(words)",
    "# write your code here\ndef find_max_even_word(string):\n    max_length = 0\n    for word in string:\n        if len(word) % 2 == 0:\n            max_length = max(len(word), max_length)\n    return max_length\n\nprint find_max_even_word('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}