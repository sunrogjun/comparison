{
  "problem": {
    "task_id": "MBPP/411",
    "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
    "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_list": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ],
    "challenge_test_list": [],
    "problem_id": 400
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "from re import match\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    if not snake_str:\n        return ''\n    snake_str = snake_str.lower()\n    result = ''\n    for i, letter in enumerate(snake_str):\n        if i!= 0 and letter == '_':\n            result += '_'\n        else:\n            result += match(r'(.)([A-Z][a-z]+)', letter).group(2).upper()\n    return result\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake_case'))",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        # http://stackoverflow.com/a/17356433\n        s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', S)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).upper()",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('_([a-z])', lambda m: m.group(1).upper(), s)\n\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('_([a-z])', lambda m: m.group(1).upper(), s)\n\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('_([a-z])', lambda m: m.group(1).upper(), s)\n\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('_([a-z])', lambda m: m.group(1).upper(), s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('Snake_case'))\n    print(s.snake2Camel('snake_case_'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case_'))\n    print(s.snake2Camel('snake_case_'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snake_case",
    "class Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        snake_map = {\n            \"a\": \"A\",\n            \"b\": \"B\",\n            \"c\": \"C\",\n            \"d\": \"D\",\n            \"e\": \"E\",\n            \"f\": \"F\",\n            \"g\": \"G\",\n            \"h\": \"H\",\n            \"i\": \"I\",\n            \"j\": \"J\",\n            \"k\": \"K\",\n            \"l\": \"L\",\n            \"m\": \"M\",\n            \"n\": \"N\",\n            \"o\": \"O\",\n            \"p\": \"P\",\n            \"q\": \"Q\",\n            \"r\": \"R\",\n            \"s\": \"S\",\n            \"t\": \"T\",\n            \"u\": \"U\",\n            \"v\": \"V\",\n            \"w\": \"W\",\n            \"x\": \"X\",\n            \"y\": \"Y\",\n            \"z\": \"Z\",\n        }\n\n        camel_map = {\n            \"A\": \"a\",\n            \"B\": \"b\",\n            \"C\": \"c\",\n            \"D\": \"d\",\n            \"E\": \"e\",\n            \"F\": \"f\",\n            \"G\": \"g\",\n            \"H\": \"h\",\n            \"I\": \"i\",\n            \"J\": \"j\",\n            \"K\": \"k\",\n            \"L\": \"l\",\n            \"M\": \"m\",\n            \"N\": \"n\",\n            \"O\": \"o\",\n            \"P\": \"p\",\n            \"Q\": \"q\",\n            \"R\": \"r\",\n            \"S\": \"s\",\n            \"T\": \"t\",\n            \"U\": \"u\",\n            \"V\": \"v\",\n            \"W\": \"w\",\n            \"X\": \"x\",\n            \"Y\": \"y\",\n            \"Z\": \"z\",\n        }\n\n        res = \"\"\n        for i in range(len(S)):\n            if S[i] in snake_map:\n                res += snake_map",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snake_to_camel(self, str):\n        regex = re.compile(r'_([a-z])')\n        return regex.sub(lambda m: m.group(1).upper(), str)\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.snake_to_camel(\"_a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z\")\n    print solution.snake_to_camel(\"aBcDeFgHiJkLmNOPQRsTUvWxYz\")",
    "from collections import Counter\n\nclass Solution:\n    def snake2Camel(self, S: str) -> str:\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        cnt = Counter(S)\n        lst = cnt.keys()\n        lst.sort(key=lambda x: -cnt[x])\n        return ''.join([x.title() for x in lst])\n\nif __name__ == '__main__':\n    assert Solution().snake2Camel('snake_case') == 'Snake_case'",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        S = S.replace(\"_\", \"\")\n        S = S.replace(\"-\", \"\")\n        S = S.replace(\" \", \"\")\n        S = re.sub(r\"[^a-zA-Z0-9]+\", \"\", S)\n        return re.sub(r\"[a-zA-Z]+\", lambda m: m.group(0).upper(), S)\n\nif __name__ == \"__main__\":\n    assert Solution().camelCase(\"snake_case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_case_\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase_\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakecase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakecase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_Case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_Case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_case_\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_Case_\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_Case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snake_Case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"",
    "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r\"([a-z])([A-Z])\", r\"\\g<1> \\g<2>\", s)\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.snakeToCamel(\"snake_case\")",
    "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if s == None or len(s) == 0:\n            return ''\n        \n        s1 = ''\n        s2 = ''\n        s3 = ''\n        for i in range(0, len(s)):\n            if i == 0:\n                s1 = s[i]\n            elif i == len(s) - 1:\n                s2 = s[i]\n            else:\n                s3 = s[i]\n                \n            if s1 == '_':\n                s1 = s[i]\n            elif s2 == '_':\n                s2 = s[i]\n            elif s3 == '_':\n                s3 = s[i]\n            else:\n                s1 = s[i].upper()\n                s2 = s[i].lower()\n                s3 = s[i].lower()\n        \n        return s1 + s2 + s3",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n\n        L = list(S)\n        for i in range(0, len(L)):\n            if L[i] == '_':\n                L[i] =''\n            elif i > 0 and L[i] =='' and L[i-1] in ['_', '-']:\n                L[i-1] =''\n                L[i] =''\n            else:\n                L[i] = L[i].upper()\n        return ''.join(L)\n\n\nif __name__ == '__main__':\n    assert Solution().toCamelCase('_Snake_case') == 'SnakeCase', '_Snake_case'\n    assert Solution().toCamelCase('_snake_case') == 'SnakeCase', '_snake_case'\n    assert Solution().toCamelCase('snake_case') == 'SnakeCase','snake_case'\n    assert Solution().toCamelCase('snakeCase') == 'SnakeCase','snakeCase'\n    assert Solution().toCamelCase('_snake_case_') == 'SnakeCase', '_snake_case_'\n    assert Solution().toCamelCase('snake_case_') == 'SnakeCase','snake_case_'\n    assert Solution().toCamelCase('snakeCase_') == 'SnakeCase','snakeCase_'",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n\n        S = S.lower()\n        if S[0] == '_':\n            S = S[1:]\n\n        ret = []\n        for c in S:\n            if c.isupper():\n                ret.append(c.lower())\n            else:\n                ret.append(c)\n        return ''.join(ret)\n\n\nif __name__ == '__main__':\n    print Solution().camelCase('_snake_case')\n    print Solution().camelCase('snake_case')",
    "import re\n\n\nclass Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        return re.sub('([A-Z])', lambda x: '_' + x.group(1).lower(), s)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.snake2Camel('snake_case')",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s1 = re.compile(r'[a-zA-Z]')\n        s2 = re.compile(r'[A-Z]')\n        s3 = re.compile(r'[0-9]')\n        return ''.join(s1.sub(s2.sub(s3.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(s2.sub(s1.sub(",
    "class Solution(object):\n    def snake_case_to_camel_case(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        # regex to convert snake_case to camel_case\n        # r'([a-z][A-Z]|[A-Z][a-z])+'\n        # r'(?:[A-Z][a-z]|[a-z][A-Z])+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'\n        # r'(?:[A-Z]\\w*|[\\w]\\w*)+'",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        def camel_case(string):\n            \"\"\"\n            :type string: str\n            :rtype: str\n            \"\"\"\n            res = []\n            for c in string:\n                if c.isupper():\n                    if res:\n                        res.append(' ')\n                    res.append(c.lower())\n                else:\n                    res.append(c)\n            return ''.join(res)\n        \n        res = re.sub(r\"([A-Z])([a-z0-9])\", lambda m: m.group(1) + m.group(2).upper(), S)\n        return camel_case(res)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.snakeToCamel(\"snake_case\")",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in xrange(len(S)):\n            if S[i] in 'abcdefghijklmnopqrstuvwxyz':\n                res += S[i].lower()\n            elif S[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                res += S[i].upper()\n            else:\n                res += '_'\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.camelCase('snake_case')\n    print sol.camelCase('Snake_Case')\n    print sol.camelCase('snakeCase')\n    print sol.camelCase('snake_case_')\n    print sol.camelCase('snakeCase_')",
    "class Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n\n        S = S.lower()\n        R = re.compile('[A-Z]')\n        L = re.compile('[a-z]')\n        L1 = re.compile('[0-9]')\n        L2 = re.compile('[^A-Za-z0-9]')\n        L3 = re.compile('[A-Za-z]')\n\n        res = ''\n        for i in range(len(S)):\n            if R.match(S[i]):\n                res += S[i]\n            elif L.match(S[i]):\n                res += S[i].capitalize()\n            elif L1.match(S[i]):\n                res += S[i].capitalize()\n            elif L2.match(S[i]):\n                res += S[i]\n            elif L3.match(S[i]):\n                res += S[i].capitalize()\n            else:\n                res += '_'\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().snake2Camel(\"snake_case\")",
    "import re\n\ns = \"snake_case\"\n\n#regex = re.compile(\"[A-Z]\")\nregex = re.compile(\"[a-z]\")\n\ndef snake_case_to_camel_case(snake_case):\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    \n    return regex.sub('', snake_case).title()\n\nif __name__ == \"__main__\":\n    print snake_case_to_camel_case(s)",
    "class Solution(object):\n    def snake2Camel(self, s):\n        s = s.lower()\n        s = s.replace('_','')\n        s = s.replace('-','')\n        s = s.replace(' ', '')\n        return ''.join([x.title() if x.isupper() else x.lower() for x in s.split('-')])\n\n    def camel2Snake(self, s):\n        s = s.lower()\n        s = s.replace(' ', '')\n        s = s.replace('-','')\n        s = s.replace(' ', '')\n        return '-'.join([x.title() if x.isupper() else x.lower() for x in s.split('-')])\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.snake2Camel('Snake_case'))\n    print(sol.snake2Camel('snake_case'))\n    print(sol.snake2Camel('snakeCase'))\n    print(sol.snake2Camel('snake_case_'))\n    print(sol.snake2Camel('snakeCase_'))\n    print(sol.snake2Camel('snakeCase'))\n    print(sol.snake2Camel('snake-case'))\n    print(sol.snake2Camel('snake-case'))\n    print(sol.snake2Camel('snake-case'))\n    print(sol.snake2Camel('snakeCase'))\n    print(sol.snake2Camel('snakeCase'))\n    print(sol.snake2Camel('Snake_case'))\n    print(sol.snake2Camel('snake_case'))\n    print(sol.snake2Camel('Snake_case'))\n    print(sol.snake2Camel('snake_case'))\n    print(sol.snake2Camel('Snake_case'))\n    print(sol.snake2Camel('snake_case'))\n    print(sol.snake2Camel('Snake",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        p = re.compile(r\"([a-z])([A-Z])\")\n        return p.sub(lambda m: m.group(2).upper() + m.group(1).lower(), s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.snake2Camel(\"snake_case\")",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = s.replace(\"_\", \" \")\n        return re.sub(r\"([a-z])([A-Z])\", r'\\1 \\2', s)\n\n    def snakeCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        return re.sub(r\"([A-Z])\", r'\\1_', s)\n\nclass Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r\"([a-z])([A-Z])\", r'\\1_\\2', s)\n\n    def snakeCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r\"([A-Z])\", r'\\1_', s)\n\nclass Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        return s.replace(\"_\", \" \").title()\n\n    def snakeCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(\"_\", \" \").title()\n\nif __name__ == \"__main__\":\n    print Solution().camelCase(\"snake_case_string\")\n    print Solution().snakeCase(\"snakeCaseString\")",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s.title() for s in re.split('(?<=[a-z])(?=[A-Z])', S))\n\n\nif __name__ == '__main__':\n    print Solution().toCamelCase('hello_world')",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.strip()\n        if s == '':\n            return ''\n        s = s.lower()\n        res = ''\n        for i, c in enumerate(s):\n            if c == '_':\n                res = res +''\n            else:\n                res = res + c\n            if i == len(s) - 1:\n                break\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.snake2Camel('snake')\n    print solution.snake2Camel('snake_case')\n    print solution.snake2Camel('snake_case_')\n    print solution.snake2Camel('snake_case_')\n    print solution.snake2Camel('snake_case')\n    print solution.snake2Camel('snake_case_')\n    print solution.snake2Camel('snake_case_')\n    print solution.snake2Camel('snake_case_')\n    print solution.snake2Camel('snake_case')",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeToCamel(self, s):\n        res = ''\n        i = 0\n        while i < len(s):\n            if s[i] == '_':\n                res += s[i+1]\n                i += 2\n            else:\n                res += s[i]\n                i += 1\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeToCamel('snake_case')\n    print s.snakeToCamel('snake_case_')\n    print s.snakeToCamel('snake_case_1')\n    print s.snakeToCamel('snake_case_1_')\n    print s.snakeToCamel('snake_case_1_2')\n    print s.snakeToCamel('snake_case_1_2_3')\n    print s.snakeToCamel('snake_case_1_2_3_')",
    "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        \n        str = str.replace('_', '')\n        str = str.replace('-', '')\n        str = str.replace(' ', '')\n        str = str.replace('.', '')\n        \n        words = []\n        for word in str.split('-'):\n            if word[0] == word[-1]:\n                word = word[1:-1]\n            else:\n                words.append(word)\n        \n        return ''.join(words)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toUpperCamelCase('snake_case_string')",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return re.sub('(^[A-Z]|[A-Z][a-z])', lambda m: m.group(0)[1].upper(), S)\n\n\nif __name__ == \"__main__\":\n    print Solution().toCamelCase(\"snake_case\")",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        \n        res = []\n        for i, c in enumerate(S):\n            if c.isupper():\n                if i > 0 and S[i-1] == '_':\n                    res.append('_')\n                res.append(c.lower())\n                continue\n            \n            res.append(c)\n        \n        return ''.join(res)",
    "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n\n        r = re.compile(r'(.)([A-Z][a-z]+)')\n        def get_camel(s):\n            match = r.match(s)\n            if not match:\n                return s\n            return match.group(2)\n\n        return ''.join(get_camel(s) for s in s.split('_'))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snake_to_camel('snake_case')\n    print s.snake_to_camel('snake_case_')\n    print s.snake_to_camel('snake_case_')",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeToCamel(self, str):\n        regex = re.compile(r\"([A-Z])([a-z])\")\n        camel_str = re.sub(regex, r\"\\g<1>_\\g<2>\", str)\n        return camel_str\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.snakeToCamel(\"a_b_c\"))",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        s = s.strip()\n        s = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', s)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1 \\2', s).lower()\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snake2Camel('snake_case')\n    print s.snake2Camel('Snake_Case')\n    print s.snake2Camel('Snake Case')",
    "class Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        words = s.split('_')\n        result = []\n        for word in words:\n            if word.isalpha():\n                result.append(word.lower())\n            else:\n                result.append(word[0].lower() + word[1:])\n        return ''.join(result)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toCamelCase('snake_case')\n    print s.toCamelCase('snake_case_')\n    print s.toCamelCase('snakeCase')\n    print s.toCamelCase('snakeCase_')\n    print s.toCamelCase('snake_case_with_underscore')",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        res = \"\"\n        for i in range(0, len(s)):\n            if s[i] == '_':\n                continue\n            if i > 0 and s[i] == '_':\n                res += \" \"\n            res += s[i].upper()\n        return res",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s1 = S.replace(\"_\", \" \")\n        s2 = s1.split(\" \")\n        s3 = []\n        for s in s2:\n            if s.isupper():\n                s3.append(s[0].lower() + s[1:])\n            else:\n                s3.append(s)\n        return ''.join(s3)\n\nif __name__ == \"__main__\":\n    print Solution().camelCase(\"hello_world\")",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n        S = S.lower()\n        return \"\".join(map(lambda s: s[1:] if s.isalpha() else s, S.split(\"_\")))\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.camelCase(\"snake_case\"))\n    print(sol.camelCase(\"Snake_case\"))\n    print(sol.camelCase(\"SnakeCase\"))\n    print(sol.camelCase(\"snakeCase\"))\n    print(sol.camelCase(\"SnakeCase_\"))\n    print(sol.camelCase(\"snakeCase_\"))\n    print(sol.camelCase(\"SnakeCase_\"))\n    print(sol.camelCase(\"snake_case_\"))\n    print(sol.camelCase(\"Snake_case_\"))\n    print(sol.camelCase(\"SnakeCase\"))\n    print(sol.camelCase(\"snake_case\"))",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.replace('_','')\n        s = s.replace('-','')\n        s = s.replace(' ', '')\n        s = s.lower()\n        return ''.join(word.capitalize() for word in s.split(' '))",
    "class Solution(object):\n    def toUpperCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'([a-z])([A-Z])', lambda m: m.group(1).upper() + m.group(2).lower(), s).upper()\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.toUpperCamelCase(\"snake_case\") == \"SnakeCase\"\n    assert s.toUpperCamelCase(\"snakeCase\") == \"SnakeCase\"\n    assert s.toUpperCamelCase(\"snakeCase_\") == \"SnakeCase\"\n    assert s.toUpperCamelCase(\"_snake_case\") == \"_Snake_case\"",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(S)):\n            if i == 0 or S[i-1] == '_':\n                res += S[i]\n            else:\n                res += '_' + S[i]\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.snakeToCamel('snake_case')\n    print solution.snakeToCamel('snake_case_')\n    print solution.snakeToCamel('snake_case__')\n    print solution.snakeToCamel('snake_case_')\n    print solution.snakeToCamel('snake_case_')\n    print solution.snakeToCamel('snake_case_')",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if S == None:\n            return None\n        S = S.lower()\n        S = S.replace('_', '')\n        S = S.replace('-', '')\n        S = S.replace(' ', '')\n        S = S.replace('(', '')\n        S = S.replace(')', '')\n        S = S.replace('(', '')\n        S = S.replace(')', '')\n        S = S.replace('/', '')\n        S = S.replace('#', '')\n        S = S.replace('$', '')\n        S = S.replace('@', '')\n        S = S.replace('[', '')\n        S = S.replace(']', '')\n        S = S.replace('{', '')\n        S = S.replace('}', '')\n        S = S.replace('<', '')\n        S = S.replace('>', '')\n        S = S.replace('*', '')\n        S = S.replace('^', '')\n        S = S.replace('&', '')\n        S = S.replace('|', '')\n        S = S.replace('-', '')\n        S = S.replace('.', '')\n        S = S.replace(',', '')\n        S = S.replace('?', '')\n        S = S.replace('!', '')\n        S = S.replace('~', '')\n        S = S.replace('%', '')\n        S = S.replace('*', '')\n        S = S.replace('?', '')\n        S = S.replace('+', '')\n        S = S.replace('=', '')\n        S = S.replace(')', '')\n        S = S.replace('(', '')\n        S = S.replace(')', '')\n        S = S.replace('[', '')\n        S = S.replace(']', '')\n        S = S.replace('{', '')",
    "# https://github.com/kevin1024/snake-case-to-camel-case\n# https://www.tutorialspoint.com/python/python_regex.htm\n\n# input: snake_case_str = \"snake_case\"\n# output: camel_case_str = \"snakeCase\"\n\ndef snake_case_to_camel_case(snake_case_str):\n    if not snake_case_str:\n        return \"\"\n    \n    snake_case_str = snake_case_str.lower()\n    snake_case_str = snake_case_str.replace(\"_\", \" \")\n    snake_case_str = snake_case_str.replace(\"-\", \" \")\n    snake_case_str = snake_case_str.replace(\".\", \" \")\n    snake_case_str = snake_case_str.replace(\"-\", \" \")\n    snake_case_str = snake_case_str.replace(\" \", \"-\")\n    snake_case_str = snake_case_str.replace(\" \", \"-\")\n    snake_case_str = snake_case_str.replace(\" \", \"\")\n    \n    return snake_case_str.title()\n\nif __name__ == \"__main__\":\n    snake_case_str = \"snake_case\"\n    print(snake_case_to_camel_case(snake_case_str))",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def camelCase(self, str):\n        if not str:\n            return str\n        str = str.lower()\n        str = str.strip()\n        result = \"\"\n        for i, c in enumerate(str):\n            if i == 0 or i == len(str) - 1:\n                result += c\n            else:\n                result += c.title()\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.camelCase(\"snake_case\")",
    "from collections import Counter\n\nclass Solution(object):\n    def camelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        def convert(s):\n            s1 = s[0]\n            s2 = s[1:].lower()\n            return s1 + s2.capitalize()\n        \n        words = str.split('_')\n        res = []\n        for word in words:\n            res.append(convert(word))\n        return ''.join(res)\n\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.camelCase('snake_case')",
    "class Solution:\n    # @param {string} s\n    # @return {string}\n    def camelCase(self, s):\n        result = []\n        for i in range(0, len(s)):\n            if i == 0 or i == len(s) - 1 or s[i-1] == '-' or s[i] == '-' or s[i] == '_':\n                result.append(s[i])\n            else:\n                result.append(s[i].upper())\n        return ''.join(result)\n\nif __name__ == '__main__':\n    print Solution().camelCase('snake-case')",
    "from collections import Counter\nfrom functools import reduce\nfrom itertools import combinations\nfrom re import match\n\nclass Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        snake_map = {'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M':'m', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S':'s', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z', '_': '_','': '_', '-': '_'}\n\n        camel_map = {'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L','m': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r': 'R','s': 'S', 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z': 'Z', '_': '_','': '_', '-': '_'}\n\n        camel_dict = Counter(camel_map.values())\n        snake_dict = Counter(snake_map.values())\n\n        snake_dict.update(camel_dict)\n        snake_dict = dict(snake_dict.most_common())\n\n        snake_dict = sorted(snake_dict.items(), key=lambda",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = re.sub('_([a-z])', lambda m: m.group(1).upper(), S)\n        return res\n\n    def camelToSnake(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = re.sub('([a-z])([A-Z])', lambda m: m.group(1) + m.group(2).lower(), S)\n        return res",
    "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.title()\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toUpperCamelCase(\"snake_case\")\n    print s.toUpperCamelCase(\"snakeCase\")\n    print s.toUpperCamelCase(\"snakeCase\")\n    print s.toUpperCamelCase(\"snake_case\")\n    print s.toUpperCamelCase(\"Snake_Case\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"snake_case\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")\n    print s.toUpperCamelCase(\"SnakeCase\")",
    "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        import re\n        s = s.replace('_','')\n        s = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', s)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1 \\2', s).lower()\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.snakeToCamel('foo_bar') == 'fooBar'\n    assert s.snakeToCamel('foo_bar_baz') == 'fooBarBaz'\n    assert s.snakeToCamel('foo_bar_baz_qux') == 'fooBarBazQux'",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.upper()\n        def convert(s):\n            return s[0].lower() + s[1:].lower()\n        return ''.join(map(convert, S.split('_')))\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase_\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert solution.camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_case\") == \"SnakeCase\"\n    assert solution.camelCase(\"snake_",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).upper()",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        if not S[0].isalpha():\n            return ''\n        R = []\n        for c in S:\n            if c.isalpha():\n                R.append(c.lower())\n            else:\n                R.append(c)\n        return ''.join(R)\n\n    def snake_case(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        R = []\n        for c in S:\n            if c.isalpha():\n                R.append(c.upper())\n            else:\n                R.append(c)\n        return ''.join(R)\n\n    def test(self):\n        assert self.camel_case('snake_case') == 'SnakeCase'\n        assert self.camel_case('snake_case_') == 'SnakeCase'\n        assert self.camel_case('_snake_case') == 'SnakeCase'\n        assert self.camel_case('snakeCase') == 'SnakeCase'\n        assert self.camel_case('snake_case_') == 'SnakeCase'\n        assert self.camel_case('snakeCase') == 'SnakeCase'\n        assert self.camel_case('_snake_case') == 'SnakeCase'\n        assert self.camel_case('snakeCase_') == 'SnakeCase'\n        assert self.camel_case('_snakeCase') == 'SnakeCase'\n        assert self.camel_case('snakeCase') == 'SnakeCase'\n        assert self.camel_case('snake_case_') == 'SnakeCase'\n        assert self.camel_case('snakeCase') == 'SnakeCase'\n        assert self.camel_case('_snakeCase') == 'SnakeCase'\n        assert self.camel_case('snakeCase_') == 'SnakeCase'\n        assert self.camel_case('_snakeCase') == 'SnakeCase'\n        assert self.camel_case('",
    "# https://www.hackerrank.com/challenges/snake-case/problem\n\nclass Solution(object):\n    def snakeCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = s.strip()\n        s = s.replace('_','')\n        s = s.replace('-','')\n        s = s.replace('.','')\n        s = s.replace(' ', '-')\n        s = s.replace('-','')\n        s = s.replace('-','')\n        s = s.replace(' ', '-')\n        s = s.replace('-','')\n        s = s.replace(' ', '-')\n        return ''.join(x.capitalize() for x in s.split('-'))\n\n\ns = Solution()\nprint s.snakeCase('snake_case')",
    "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        def camel(snake):\n            if snake.isupper():\n                return snake.lower()\n            else:\n                return snake.upper()\n\n        return ''.join(map(camel, s.split('_')))\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snake_to_camel('snake_case'))",
    "class Solution(object):\n    def snakeCaseToCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s = S.lower()\n        s = re.sub(r'(?<=[a-z0-9])([A-Z])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([A-Z])', r'\\1', s)\n        s = re.sub(r'(?<=[a-z0-9])([0-9])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([0-9])', r'\\1', s)\n        s = re.sub(r'(?<=[a-z0-9])([A-Z][a-z])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([A-Z][a-z])', r'\\1', s)\n        s = re.sub(r'(?<=[a-z0-9])([0-9][a-z])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([0-9][a-z])', r'\\1', s)\n        s = re.sub(r'(?<=[a-z0-9])([A-Z][a-z0-9])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([A-Z][a-z0-9])', r'\\1', s)\n        s = re.sub(r'(?<=[a-z0-9])([0-9][A-Z])', r'\\1', s)\n        s = re.sub(r'(?<=[^a-z0-9])([0-9][A-Z])', r'\\1', s)",
    "class Solution(object):\n    def snake2Camel(self, s):\n        return ''.join(self.snake_to_camel(s))\n\n    def snake_to_camel(self, s):\n        return ''.join([self.snake_to_camel_sub(c) for c in s]).upper()\n\n    def snake_to_camel_sub(self, c):\n        return ''.join([self.snake_to_camel_sub_char(c) if c.isupper() else c.lower() for c in c.split('_')])\n\n    def snake_to_camel_sub_char(self, c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snake2Camel('snake_case'))\n    print(s.snake2Camel('snakeCase'))\n    print(s.snake2Camel('snakeCase_'))\n    print(s.snake2Camel('snakeCase__'))\n    print(s.snake2Camel('snakeCase_'))\n    print(s.snake2Camel('_SnakeCase'))\n    print(s.snake2Camel('snakeCase'))\n    print(s.snake2Camel('snakeCase_'))\n    print(s.snake2Camel('snakeCase__'))\n    print(s.snake2Camel('_SnakeCase'))",
    "import re\n\n\nclass Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return re.sub(r\"[_\\s]+\",'', s).title().split('_')[0]",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = s.replace('_', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = ''.join(c.title() for c in s)\n        return s\n\nif __name__ == '__main__':\n    print Solution().camelCase('snake_case')",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeCase(self, str):\n        if not str: return str\n        str = str.strip()\n        res = []\n        for i in range(len(str)):\n            if str[i] == '_':\n                res.append('_')\n                res.append(str[i+1].upper())\n                res.append(str[i+2].upper())\n            else:\n                res.append(str[i].upper())\n        return ''.join(res)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.snakeCase(\"_snake_case\")\n    print s.snakeCase(\"snake_case\")\n    print s.snakeCase(\"snakeCase\")\n    print s.snakeCase(\"snakeCase\")\n    print s.snakeCase(\"snake_case_\")\n    print s.snakeCase(\"snakeCase_\")\n    print s.snakeCase(\"snake_case_\")",
    "import re\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string by using regex.\n\n    Example:\n    snake_str = \"aBcDeFg\"\n    snake_to_camel(snake_str) ==> \"AbcDeFg\"\n    \"\"\"\n    snake_str = snake_str.lower()\n    snake_str = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_str)\n    snake_str = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', snake_str)\n    return snake_str.capitalize()\n\nif __name__ == '__main__':\n    print snake_to_camel('aBcDeFg')\n    print snake_to_camel('1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5",
    "class Solution:\n    def camelCase(self, s):\n        s = s.strip()\n        return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.camelCase(\"_snake_case\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case\"))\n    print(s.camelCase(\"_snake_case\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case_\"))\n    print(s.camelCase(\"_snake_case\"))",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join([\n            s[0].upper() + s[1:].lower()\n            for s in re.split('(?<=[A-Z])(?=[a-z])', S)\n            if s\n        ])",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x.title() for x in S.split('_'))\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.camelCase('snake_case'))\n    print(solution.camelCase('SnakeCase'))\n    print(solution.camelCase('snake_case_1'))\n    print(solution.camelCase('snake_case_1_1'))\n    print(solution.camelCase('snake_case_1_2'))\n    print(solution.camelCase('snake_case_1_3'))\n    print(solution.camelCase('snake_case_1_4'))\n    print(solution.camelCase('snake_case_1_5'))\n    print(solution.camelCase('snake_case_1_6'))\n    print(solution.camelCase('snake_case_1_7'))\n    print(solution.camelCase('snake_case_1_8'))\n    print(solution.camelCase('snake_case_1_9'))\n    print(solution.camelCase('snake_case_1_10'))",
    "class Solution(object):\n    def snake_case_to_camel_case(self, s):\n        s = s.replace('_', '')\n        return ''.join(x.title() for x in s.split('-'))\n\n    def snake_case_to_camel_case_regex(self, s):\n        r = re.compile(r'(?<!^)(?=[A-Z])')\n        return r.sub(r'\\1_', s).title()\n\n    def test(self):\n        print self.snake_case_to_camel_case('snake_case')\n        print self.snake_case_to_camel_case_regex('snake_case')\n\n\nif __name__ == '__main__':\n    Solution().test()",
    "import re\n\nclass Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r\"([a-z])([A-Z])\")\n        words = regex.findall(S)\n        return ''.join([w[0].upper() + w[1].lower() for w in words])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.camelCase(\"Snake_case\")",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        pattern = r\"([a-z][A-Z]*)+\"\n        match = re.findall(pattern, S)\n        result = \"\"\n        for word in match:\n            result += word[0].upper() + word[1:]\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.camelCase(\"snake_case\")\n    print solution.camelCase(\"snake_case_1\")\n    print solution.camelCase(\"snakeCase\")\n    print solution.camelCase(\"SnakeCase\")\n    print solution.camelCase(\"SNAKE_CASE\")\n    print solution.camelCase(\"snake_case_1\")\n    print solution.camelCase(\"snakeCase\")\n    print solution.camelCase(\"SNAKE_CASE\")",
    "import re\n\nclass Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n\n        s = re.sub(r'([A-Z])', r'_\\1', s)\n        s = re.sub(r'(.)([A-Z][a-z])', r'\\1_\\2', s)\n        return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', s)\n\n\nif __name__ == \"__main__\":\n    print Solution().snake2Camel(\"snake_case\")",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def camelCase(self, s):\n        if not s:\n            return s\n        s = s.strip().lower()\n        s = re.sub(r'(?<=[a-z0-9])[A-Z]', r'\\g<1>', s)\n        s = re.sub(r'(?<![a-z0-9])[A-Z]', r'\\g<0>', s)\n        return s",
    "import re\n\ndef snake_to_camel(snake):\n    s1 = re.compile(\"[A-Z]+\")\n    s2 = re.compile(\"[a-z]+\")\n    return s1.sub(s2.sub(\"_\", snake).lower(), snake)\n\n\nprint snake_to_camel(\"snake_case\")\nprint snake_to_camel(\"snakeCase\")\nprint snake_to_camel(\"Snake_Case\")\nprint snake_to_camel(\"SnakeCase\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case_\")\nprint snake_to_camel(\"Snake_Case",
    "class Solution:\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = re.sub('(?<=[a-z])[A-Z]', lambda m: m.group(0).upper(), s)\n        s = re.sub('(?<=[a-z0-9])[A-Z0-9]', lambda m: m.group(0).upper(), s)\n        s = re.sub('(?<=[a-z0-9])[a-z]', lambda m: m.group(0).upper(), s)\n        s = re.sub('(?<=[0-9])[A-Z]', lambda m: m.group(0).upper(), s)\n        s = re.sub('(?<=[0-9])[a-z]', lambda m: m.group(0).upper(), s)\n        return s\n\n\nif __name__ == '__main__':\n    assert Solution().snake2Camel('snake') == 'Snake'\n    assert Solution().snake2Camel('snake') == 'Snake'\n    assert Solution().snake2Camel('snake_case') == 'SnakeCase'\n    assert Solution().snake2Camel('snake_Case') == 'SnakeCase'\n    assert Solution().snake2Camel('snake_case_') == 'SnakeCase'",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def camelCase(self, str):\n        str = str.replace('_', '')\n        return ''.join(word.capitalize() for word in str.split('-'))\n\nclass Solution(object):\n    def camelCase(self, s):\n        return ''.join(word.capitalize() for word in s.split('_'))",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return S\n        # S.replace('_', '')\n        S = S.lower()\n        S = S.replace(' ', '')\n        S = S.replace('-', '')\n        S = S.replace('.', '')\n        S = S.replace(',', '')\n        S = S.replace(';', '')\n        S = S.replace('(', '')\n        S = S.replace(')', '')\n        S = S.replace('{', '')\n        S = S.replace('}', '')\n        S = S.replace('[', '')\n        S = S.replace(']', '')\n        S = S.replace('<', '')\n        S = S.replace('>', '')\n        S = S.replace('/', '')\n        S = S.replace('&', '')\n        S = S.replace('#', '')\n        S = S.replace('@', '')\n        S = S.replace('*', '')\n        S = S.replace('=', '')\n        S = S.replace('+', '')\n        S = S.replace('$', '')\n        S = S.replace('%', '')\n        S = S.replace('^', '')\n        S = S.replace('|', '')\n        S = S.replace('~', '')\n        S = S.replace('`', '')\n        S = S.replace('\"', '')\n        S = S.replace(\"'\", '')\n        return S\n\n\nif __name__ == '__main__':\n    print Solution().camelCase(\"ThisIsCamelCase\")",
    "class Solution(object):\n    def toUpperCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return S\n\n        def camel_case_part(part):\n            if part == '_':\n                return ''\n            else:\n                return part[0].upper() + camel_case_part(part[1:])\n\n        return ''.join(camel_case_part(part) for part in S.split('_'))",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        \n        pattern = re.compile(r'([a-z])([A-Z])')\n        return pattern.sub(r'\\1 \\2', S)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.camelCase('snake_case'))",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        S = S.replace(\"_\", \" \")\n        S = S.replace(\"-\", \" \")\n        S = S.replace(\".\", \" \")\n        S = S.replace(\" \", \"\")\n        S = S.replace(\"(\", \"\")\n        S = S.replace(\")\", \"\")\n        S = S.replace(\"{\", \"\")\n        S = S.replace(\"}\", \"\")\n        S = S.replace(\"[\", \"\")\n        S = S.replace(\"]\", \"\")\n        S = S.replace(\"\\\"\", \"\")\n        S = S.replace(\"'\", \"\")\n        return \"\".join(x.title() for x in S.split())\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.snakeToCamel(\"Snake_Case\"))\n    print(s.snakeToCamel(\"Snake Case\"))\n    print(s.snakeToCamel(\"snakeCase\"))\n    print(s.snakeToCamel(\"Snake Case\"))\n    print(s.snakeToCamel(\"snake_case\"))",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        regex = re.compile('[a-z]|([A-Z])([A-Z][a-z])|([A-Z][a-z][A-Z])')\n        return regex.sub(lambda x: x.group(0)[0] + x.group(1) + x.group(2)[1], s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.camelCase('snake_case')\n    print s.camelCase('Snake_case')\n    print s.camelCase('SnakeCase')\n    print s.camelCase('snakeCase')\n    print s.camelCase('SnakeCase_')",
    "import re\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Example:\n    snake_str = \"snake_case\"\n    snake_to_camel(snake_str) == \"SnakeCase\"\n\n    snake_str = \"snake_case_with_underscore\"\n    snake_to_camel(snake_str) == \"SnakeCaseWithUnderscore\"\n    \"\"\"\n    camel_str = snake_str\n    if len(snake_str) > 0:\n        camel_str = camel_str[0].upper()\n        for i in range(1, len(snake_str)):\n            if snake_str[i-1] == '_':\n                camel_str = camel_str + snake_str[i].upper()\n            else:\n                camel_str = camel_str + snake_str[i].lower()\n    return camel_str\n\nif __name__ == \"__main__\":\n    test_case1 = \"snake_case\"\n    test_case2 = \"snake_case_with_underscore\"\n    print(snake_to_camel(test_case1))\n    print(snake_to_camel(test_case2))",
    "class Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(self.snake_to_camel(s))\n\n    def snake_to_camel(self, s):\n        return ''.join(s.title() for s in re.split('([a-z][A-Z])', s))\n\n\nif __name__ == '__main__':\n    assert Solution().toCamelCase('snake_case') == 'SnakeCase'",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return S\n        res = ''\n        for i in xrange(0, len(S)):\n            if S[i] == '_':\n                res +=''\n            else:\n                res += S[i].upper()\n        return res",
    "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n\n        def camel_to_snake(s):\n            return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n\n        s = camel_to_snake(s)\n        if s.startswith('_'):\n            s = s[1:]\n\n        if s.endswith('_'):\n            s = s[:-1]\n\n        return s\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeToCamel('_snake_case')\n    print s.snakeToCamel('_Snake_Case')\n    print s.snakeToCamel('_SnakeCase')\n    print s.snakeToCamel('_snakeCase')\n    print s.snakeToCamel('_SnakeCase_')",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(0, len(s)):\n            if s[i] in ['_', '-', '.']:\n                res += '-'\n            elif s[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                res += s[i]\n            else:\n                res += s[i].upper()\n        return res\n\n    def snake2Camel2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(0, len(s)):\n            if s[i] in ['_', '-', '.']:\n                res += '-'\n            elif s[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                res += s[i]\n            else:\n                res += s[i].upper()\n        return res\n\n    def snake2Camel3(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(0, len(s)):\n            if s[i] in ['_', '-', '.']:\n                res += '-'\n            elif s[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                res += s[i]\n            else:\n                res += s[i].upper()\n        return res\n\nif __name__ == '__main__':\n    print Solution().snake2Camel(\"snake_case\")\n    print Solution().snake2Camel2(\"snake_case\")\n    print Solution().snake2Camel3(\"snake_case\")",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        return ''.join([x[0].upper() + x[1:].lower() for x in re.split('([a-z])([A-Z])', S) if x!= ''])\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snakeToCamel('snake_case'))",
    "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(self._convert(s))\n\n    def _convert(self, s):\n        s = s.lower()\n        s = s.strip()\n        result = []\n        i = 0\n        while i < len(s):\n            if s[i] in ['_', '-']:\n                i += 1\n                continue\n            if i > 0 and s[i - 1] in ['_', '-']:\n                result.append('-')\n            result.append(s[i])\n            i += 1\n        return result",
    "class Solution(object):\n    def snake_case_to_camel_case(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        # S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", \"\\\\1\\\\2\", S)\n        # S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        # S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        # S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\", S)\n        S = re.sub(r\"(?<=[\\s\\u00a0])_([\\w\\s])\", r\"\\1_\\2\",",
    "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        import re\n\n        res = ''\n        for i in range(len(S)):\n            if i > 0 and S[i] == '_':\n                if len(res) == 0:\n                    res += '_'\n                else:\n                    res +=''\n            else:\n                res += S[i]\n        return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "class Solution:\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        L = []\n        for i in range(len(S)):\n            if S[i] == '_':\n                L.append(S[i+1])\n            else:\n                L.append(S[i].upper())\n        return \"\".join(L)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.camelCase(\"snake_case\"))\n    print(s.camelCase(\"Snake_Case\"))\n    print(s.camelCase(\"SnakeCase\"))\n    print(s.camelCase(\"snake_case_with_underscore\"))\n    print(s.camelCase(\"Snake_Case_With_Underscore\"))\n    print(s.camelCase(\"SnakeCase_With_Underscore\"))",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        def camel_case(S):\n            regex = r\"([a-z])([A-Z])\"\n            regex_match = re.findall(regex, S)\n            camel_case_match = []\n            for match in regex_match:\n                camel_case_match.append(match[0]+match[1])\n            return \"\".join(camel_case_match)\n        return camel_case(S)",
    "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        def camel(s):\n            return re.sub(r'(^|[A-Z]|[^a-z])([a-z])', r'\\1_\\2', s)\n        return camel(S)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.toCamelCase(\"snake_case\")",
    "import re\n\ndef snake_case_to_camel_case(s):\n    if s is None:\n        return s\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == \"_\":\n            result += s[i+1].upper()\n        elif s[i] == \" \":\n            result += \"_\"\n        elif s[i] == \".\":\n            result += \"_\"\n        elif s[i] == \":\":\n            result += \"_\"\n        elif s[i] == \"-\":\n            result += \"_\"\n        elif s[i].isupper():\n            result += s[i].lower()\n        else:\n            result += s[i].upper()\n    \n    return result\n\nif __name__ == \"__main__\":\n    print(snake_case_to_camel_case(\"_snake_case_string_\"))\n    print(snake_case_to_camel_case(\"_snake_case_string_\"))\n    print(snake_case_to_camel_case(\"_snake_case_string_\"))",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'(^|_)([a-z0-9]+)(?=_|$)', lambda m: m.group(0)[1] + m.group(2), S).lower()\n\ndef main():\n    sol = Solution()\n    print(sol.camelCase(\"snake_case\"))\n    print(sol.camelCase(\"Snake_Case\"))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def snakeCaseToCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        str = ''\n        for i in range(0, len(S)):\n            if S[i] == '_':\n                str +=''\n            elif S[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                str += S[i]\n            else:\n                str += S[i].upper()\n        return str\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.snakeCaseToCamelCase('snake_case_string')\n    print solution.snakeCaseToCamelCase('snake_case_string_')\n    print solution.snakeCaseToCamelCase('_')\n    print solution.snakeCaseToCamelCase('_0')\n    print solution.snakeCaseToCamelCase('__')",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return S.title().replace('_','').replace('-','').replace('.','').replace(' ','').replace('.','').replace('-','').replace(' ','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').replace('.','').replace(' ','').",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n        str = \"\"\n        for c in S:\n            if c.isupper():\n                str += c.lower()\n            else:\n                str += c\n        return str",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def snake2Camel(self, s):\n        res = \"\"\n        for i in range(len(s)):\n            if s[i] == \" \":\n                res += \" \"\n            elif s[i] == \"_\":\n                res += \"-\"\n            else:\n                res += s[i].upper()\n        return res\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.snake2Camel(\"snake_case\"))\n    print(solution.snake2Camel(\"snake case\"))",
    "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        if not S:\n            return ''\n        S = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', S)\n        return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', S).upper()\n\nif __name__ == '__main__':\n    print Solution().camelCase('snake_case')",
    "class Solution(object):\n    def snake_case_to_camel_case(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r\"([a-z])([A-Z])\", r\"\\g<1>_\\g<2>\", str)\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.snake_case_to_camel_case(\"snake_case\")\n    print solution.snake_case_to_camel_case(\"snakeCase\")\n    print solution.snake_case_to_camel_case(\"snake Case\")\n    print solution.snake_case_to_camel_case(\"snake_case_\")",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeToCamel(self, str):\n        # write your code here\n        return str.split('_')[0].title() + ''.join(x.title() for x in str.split('_')[1:])",
    "class Solution(object):\n    def snakeCaseToCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'([a-z])([A-Z])', r'\\1_\\2', S)",
    "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeCase(self, str):\n        p = re.compile(r\"([A-Z])([a-z])([A-Z])([a-z])\")\n        return p.sub(r\"\\1 \\3 \\2 \\4\", str)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.snakeCase(\"test_snakeCase\")",
    "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if s is None or len(s) == 0:\n            return \"\"\n        return ''.join(x.title() for x in s.split('_'))\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeToCamel(\"\")\n    print s.snakeToCamel(\"snake\")\n    print s.snakeToCamel(\"snake_case\")\n    print s.snakeToCamel(\"snakeCase\")\n    print s.snakeToCamel(\"snakeCase_\")\n    print s.snakeToCamel(\"snake_case_\")\n    print s.snakeToCamel(\"snakeCase\")\n    print s.snakeToCamel(\"snake_case_\")",
    "class Solution:\n    # @param s, a string\n    # @return a string\n    def snakeToCamel(self, s):\n        if s is None or s == '':\n            return ''\n        s = s.strip()\n        if not s:\n            return ''\n        s = s.replace('_','')\n        res = []\n        for i in range(0, len(s)):\n            if i < len(s) - 1 and s[i] == '_' and s[i + 1]!= '_':\n                res.append(s[i + 1])\n                i += 1\n            else:\n                res.append(s[i])\n        return ''.join(res)\n\n    # @param s, a string\n    # @return a string\n    def snakeToCamel2(self, s):\n        res = ''\n        s = s.replace('_','')\n        for i in range(0, len(s)):\n            if s[i] == '_':\n                if i < len(s) - 1 and s[i + 1]!= '_':\n                    res += s[i + 1]\n                    i += 1\n            else:\n                res += s[i]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snakeToCamel('snake_case'))\n    print(s.snakeToCamel2('snake_case'))",
    "from re import findall\nfrom string import ascii_lowercase\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    snake_str: str\n    \"\"\"\n    return ''.join([x.title() for x in findall(r'[a-z]', snake_str)])\n\ndef main():\n    snake = \"camelCase\"\n    print(snake_to_camel(snake))\n\nif __name__ == '__main__':\n    main()",
    "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.replace('_','')\n        s = s.replace('-', '')\n        s = s.replace(' ', '-')\n        return ''.join(x.title() for x in s.split('-'))\n\nif __name__ == '__main__':\n    print Solution().snake2Camel('snake_case')"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}