{
  "problem": {
    "task_id": "MBPP/468",
    "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
    "test_list": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ],
    "challenge_test_list": [],
    "problem_id": 457
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def max_product_increasing_subsequence(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_prod = nums[0]\n    for i in range(1, len(nums)):\n        max_prod = max(nums[i] * max_prod, nums[i])\n    return max_prod\n\ndef test_max_product_increasing_subsequence():\n    assert max_product_increasing_subsequence([4, 2, 1, 3]) == 24\n    assert max_product_increasing_subsequence([-4, -2, -1, 3]) == -24\n    assert max_product_increasing_subsequence([-4, -2, -1, 0]) == -4\n    assert max_product_increasing_subsequence([-4, -2, -1, -1]) == -4\n    assert max_product_increasing_subsequence([-4, -2, -1, -2]) == -4\n\nif __name__ == '__main__':\n    test_max_product_increasing_subsequence()",
    "import sys\n\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    n = len(arr)\n    max_product = arr[0]\n    max_product_cnt = 1\n    for i in range(1, n):\n        curr_max = max_product * arr[i]\n        if curr_max > max_product:\n            max_product = curr_max\n            max_product_cnt = 1\n        else:\n            max_product_cnt = max_product_cnt + 1\n    return max_product_cnt\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    print(max_product(arr))",
    "from collections import defaultdict\n\ndef find_max_product_increasing_subsequence(nums):\n    max_product = 0\n    max_start = 0\n    max_end = 0\n    max_product_len = 0\n    max_product_start = 0\n    max_product_end = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < nums[i + 1]:\n            max_product_len += 1\n            max_product_start = i + 1\n            max_product_end = i + 1 + nums[i + 1]\n            max_product = max(max_product, max_product_len)\n            max_product_len = 1\n            \n    max_product_len += 1\n    max_product_start = 0\n    max_product_end = 0\n    max_product = max(max_product, max_product_len)\n    \n    return max_product\n\ndef find_max_product_increasing_subsequence_2(nums):\n    max_product = 0\n    max_start = 0\n    max_end = 0\n    max_product_len = 0\n    max_product_start = 0\n    max_product_end = 0\n    \n    nums_len = len(nums)\n    \n    for i in range(nums_len):\n        if nums[i] < nums[i + 1]:\n            max_product_len += 1\n            max_product_start = i + 1\n            max_product_end = i + 1 + nums[i + 1]\n            max_product = max(max_product, max_product_len)\n            max_product_len = 1\n            \n    max_product_len += 1\n    max_product_start = 0\n    max_product_end = 0\n    max_product = max(max_product, max_product_len)\n    \n    return max_product\n\nif __name__ == '__main__':\n    nums = [1, 3, 5, 6, 8, 10]\n    print find_max_product_increasing_subsequence(nums)\n    print find_max_product_increasing",
    "# https://www.hackerrank.com/challenges/maximum-product-of-increasing-subsequence/problem\n\nimport os\nimport sys\n\n# Complete the maximumProduct function below.\ndef maximumProduct(nums):\n    return max(\n        [\n            max(\n                [\n                    int(x)*int(y) for x in range(1, i+1) for y in range(i+1, n+1)\n                ],\n                key=lambda x: x[0]*x[1]\n            )\n            for i in range(1, n+1)\n        ]\n    )\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    fptr.write(str(maximumProduct(n)) + '\\n')\n\n    fptr.close()",
    "import unittest\n\n\nclass Solution(object):\n    def findMaxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n\n        # get the subsequence\n        s = self.getSubsequence(nums)\n\n        # get the max product of that subsequence\n        maxProduct = 1\n        for i in range(len(s)):\n            maxProduct *= s[i]\n\n        # get the max product of all subsequences\n        maxProduct = max(maxProduct, self.getMaxProduct(nums[1:]))\n\n        return maxProduct\n\n    def getMaxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n\n        # get the max product of the subsequence\n        maxProduct = 1\n        for i in range(len(nums)):\n            maxProduct *= nums[i]\n\n        # get the max product of all subsequences\n        maxProduct = max(maxProduct, self.getMaxProduct(nums[1:]))\n\n        return maxProduct\n\n    def getSubsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # get the last number\n        lastNum = nums[-1]\n\n        # get the subsequence\n        subseq = []\n        for i in range(len(nums) - 2, -1, -1):\n            subseq.append(nums[i] * lastNum)\n            lastNum *= nums[i]\n\n        return subseq\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/max-product-of-increasing-subsequence/solution/\n#",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n# O(n) time, O(n) space\n# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/discuss/54319/C%2B%2B-python-solution-with-explanation-and-performance-time-concise-answer-with-explanation\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 1\n        previous = nums[0]\n        for num in nums[1:]:\n            max_product *= num\n            if previous < num:\n                max_product *= previous\n                previous = num\n        return max_product",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/discuss/175535/Python-Solution-using-numpy\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        max_product = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        \n        return max_product\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.maxProduct([1, 2, 3, 4]))\n    print(s.maxProduct([3, 3, 4]))\n    print(s.maxProduct([3, 4, 1, 2]))\n    print(s.maxProduct([1, 1, 1, 2, 2]))",
    "def max_product_increasing_subsequence(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    max_product = nums[0]\n    max_product_for_subseq = nums[0]\n    for i in range(1, n):\n        max_product_for_subseq = max(max_product_for_subseq, nums[i]) * nums[i]\n        max_product = max(max_product, max_product_for_subseq)\n    return max_product\n\nif __name__ == '__main__':\n    assert max_product_increasing_subsequence([1,2,3,4,5]) == 120\n    assert max_product_increasing_subsequence([1,2,3,4]) == 120\n    assert max_product_increasing_subsequence([1,2,3]) == 120\n    assert max_product_increasing_subsequence([1,2,3,4,5,6,7,8]) == 720\n    assert max_product_increasing_subsequence([1,2,3,4,5,6,7,8,9,10]) == 720\n    assert max_product_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11,12]) == 720\n    assert max_product_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 720\n    assert max_product_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,",
    "import time\nstart_time = time.time()\n\ndef max_product(numbers):\n    max_product = 0\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - i):\n            max_product = max(max_product, numbers[j] * numbers[j + i])\n    return max_product\n\nprint(\"Time elapsed: %s seconds.\" % round(time.time() - start_time, 4))",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n# Definition for an Interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxProduct(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return 0\n        max = -sys.maxint\n        ans = 0\n        for i in xrange(len(intervals)):\n            ans = max(ans, self.maxProduct(intervals[i:]))\n            ans = max(ans, self.maxProduct(intervals[:i]))\n            if ans > max:\n                max = ans\n        return ans",
    "import timeit\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        result = nums[0]\n        for i in range(1, len(nums)):\n            result = max(result * nums[i], nums[i])\n        return result\n\n\nif __name__ == \"__main__\":\n    print timeit.timeit(\"Solution().maxProduct(nums)\", setup=\"from __main__ import Solution, nums\", number=1000)",
    "def maxProduct(arr):\n    if not arr:\n        return 0\n    if not arr[0]:\n        return arr[0]\n    max = arr[0]\n    for i in range(1, len(arr)):\n        max = max if arr[i] == arr[i-1] else max * arr[i]\n    return max\n\n# Testing\narr = [1,2,3,4,5,6,7,8,9]\nprint(maxProduct(arr))\narr = [1,2,3,4,5,6,7,8]\nprint(maxProduct(arr))\narr = [1,2,3,4,5,6,7]\nprint(maxProduct(arr))\narr = [1,2,3,4,5,6]\nprint(maxProduct(arr))\narr = [1,2,3,4]\nprint(maxProduct(arr))\narr = [1,2]\nprint(maxProduct(arr))\narr = [1]\nprint(maxProduct(arr))\narr = []\nprint(maxProduct(arr))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 1\n        for i in xrange(len(nums)):\n            res = max(res, nums[i]*self.maxProduct(nums[:i]))\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().maxProduct([3, 2, 1, 4])\n    print Solution().maxProduct([-2, -3, -5, -6])\n    print Solution().maxProduct([-1, -3, -5, -6])",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def maxProductHelper(nums, start):\n            if start == len(nums):\n                return 1\n            \n            maxProduct = 0\n            for i in range(start, len(nums)):\n                maxProduct = max(maxProduct, nums[i] * maxProductHelper(nums, start + 1))\n            \n            return maxProduct\n        \n        return maxProductHelper(nums, 0)",
    "from math import factorial\n\n\ndef max_product(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if len(numbers) <= 1:\n        return 1\n    max_product = numbers[0]\n    for i in range(1, len(numbers)):\n        max_product = max(max_product * numbers[i], numbers[i])\n    return max_product\n\n\ndef max_product_recursive(numbers):\n    if len(numbers) <= 1:\n        return 1\n    return max(numbers[0] * max_product_recursive(numbers[1:]), numbers[0])\n\n\ndef max_product_recursive2(numbers):\n    if len(numbers) <= 1:\n        return 1\n    max_product = numbers[0]\n    for i in range(1, len(numbers)):\n        max_product = max(numbers[i] * max_product, numbers[i])\n    return max_product\n\n\ndef max_product_iterative(numbers):\n    max_product = numbers[0]\n    for i in range(1, len(numbers)):\n        max_product = max(numbers[i] * max_product, numbers[i])\n    return max_product\n\n\ndef max_product_dp(numbers):\n    if len(numbers) <= 1:\n        return 1\n    max_product = numbers[0]\n    for i in range(1, len(numbers)):\n        max_product = max(max_product * numbers[i], numbers[i])\n    return max_product\n\n\ndef max_product_dp2(numbers):\n    if len(numbers) <= 1:\n        return 1\n    max_product = numbers[0]\n    for i in range(1, len(numbers)):\n        max_product = max(max_product * numbers[i], numbers[i])\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_product(range(1, 10)) == 120\n    assert max_product_iterative(range(1, 10)) == 120",
    "import collections\n\ndef maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # get the max product with the given sequence\n    # create a dict to store the max product\n    # max_dict = collections.defaultdict(int)\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         max_dict[arr[i] * arr[j]] = max(max_dict[arr[i] * arr[j]], arr[i] * arr[j])\n    # return max(max_dict.values())\n    # use the list as the sequence\n    max_list = [1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_list[0] *= arr[i]\n            max_list[1] *= arr[j]\n            max_list[2:] = [max(max_list[k] * arr[i+k], max_list[k-1] * arr[j+k]) for k in range(3, len(max_list) + 1)]\n    return max(max_list)\n\narr = [4, 5, 6, 3, 7]\nprint maxProduct(arr)",
    "# Complete the function below.\n\ndef max_product(arr):\n    n = len(arr)\n    max_product = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                continue\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "def product_of_increasing_subsequence(array):\n    result = 1\n    for i in range(1, len(array)):\n        result = result * array[i]\n    return result\n\nif __name__ == '__main__':\n    assert product_of_increasing_subsequence([1,2,3,4,5]) == 120\n    assert product_of_increasing_subsequence([1,2,3,4,5,6,7]) == 720\n    assert product_of_increasing_subsequence([2,3,4,5,6]) == 120\n    assert product_of_increasing_subsequence([2,3,4,5,6,7]) == 720\n    assert product_of_increasing_subsequence([2,3,4,5,6,7,8]) == 720\n    assert product_of_increasing_subsequence([2,3,4,5,6,7,8,9]) == 720",
    "def maximum_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_product = max(map(lambda x: max(nums) * x, nums[1:]))\n    max_product = max(max_product, max(map(lambda x: max(nums) * x, nums[:1])))\n    return max_product\n\nif __name__ == '__main__':\n    print(maximum_product([3, 2, 1, 2, 3, 1, 4]))\n    print(maximum_product([2, 1, 2, 3, 4]))\n    print(maximum_product([2, 3, 1, 4, 2, 3, 1, 4, 3]))",
    "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def maxProduct(self, nums, k):\n        if not nums or not k:\n            return 0\n\n        n = len(nums)\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[i-k])\n\n        return max_product\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [3,2,1]\n    k = 2\n    print s.maxProduct(nums, k)",
    "from collections import deque\nimport math\n\ndef find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result = max(result, nums[i] * nums[j])\n    return result\n\ndef find_max_product_recur(nums):\n    if len(nums) == 0:\n        return 0\n\n    max_product = find_max_product_recur(nums[1:])\n    product = nums[0] * nums[1]\n    max_product = max(max_product, product)\n    for i in range(2, len(nums)):\n        product = nums[i-1] * nums[i]\n        max_product = max(max_product, product)\n    return max_product\n\ndef find_max_product_recur(nums):\n    if len(nums) == 0:\n        return 0\n\n    max_product = find_max_product_recur(nums[1:])\n    product = nums[0] * nums[1]\n    max_product = max(max_product, product)\n    for i in range(2, len(nums)):\n        product = nums[i-1] * nums[i]\n        max_product = max(max_product, product)\n    return max_product\n\ndef find_max_product_recur(nums):\n    if len(nums) == 0:\n        return 0\n\n    max_product = find_max_product_recur(nums[1:])\n    product = nums[0] * nums[1]\n    max_product = max(max_product, product)\n    for i in range(2, len(nums)):\n        product = nums[i-1] * nums[i]\n        max_product = max(max_product, product)\n    return max_product\n\ndef find_max_product_recur(n",
    "def max_product(arr):\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n            if max_product > 0:\n                max_index = max(max_index, j)\n    return max_product, max_index\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_product(arr))",
    "# https://www.hackerrank.com/challenges/maximum-product-subsequence/problem\n\n# Returns the maximum product of a list of numbers\n# nums is a list of numbers\n# max_product is the maximum product of any element\ndef maxProduct(nums):\n    max_product = nums[0]\n    for i in range(len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n    return max_product\n\n# Returns the maximum product of a list of numbers\n# nums is a list of numbers\n# max_product is the maximum product of any element\ndef maxProduct2(nums):\n    max_product = nums[0]\n    for i in range(len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n    return max_product\n\n# Returns the maximum product of a list of numbers\n# nums is a list of numbers\n# max_product is the maximum product of any element\ndef maxProduct3(nums):\n    max_product = nums[0]\n    for i in range(len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n    return max_product\n\n# Returns the maximum product of a list of numbers\n# nums is a list of numbers\n# max_product is the maximum product of any element\ndef maxProduct4(nums):\n    max_product = nums[0]\n    for i in range(len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n    return max_product\n\n# Returns the maximum product of a list of numbers\n# nums is a list of numbers\n# max_product is the maximum product of any element\ndef maxProduct5(nums):\n    max_product = nums[0]\n    for i in range(len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n    return max_product\n\n# Returns the maximum product of a list of numbers\n# nums is a list of",
    "from collections import defaultdict\n\n\ndef max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 1\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                dp[i] = max(dp[i], dp[i - 1] * nums[j])\n    return max(dp.values())\n\n\nif __name__ == '__main__':\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7]))",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        nums.sort()\n        n = len(nums)\n\n        max_product = 1\n        for i in range(n):\n            max_product = max(max_product, nums[i] * max(1, nums[i + 1:]))\n        return max_product",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] * nums[i], nums[i])\n        \n        res = 1\n        for i in range(n - 1, 0, -1):\n            res = max(res, dp[i])\n        return res",
    "#!/usr/bin/env python\n\n# https://oj.leetcode.com/problems/maximum-product-of-increasing-subsequence/\n# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n\n\ndef maxProduct(arr):\n    if not arr:\n        return 0\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n    if length == 2:\n        return max(arr[0], arr[1])\n    max_product = arr[0]\n    max_product = max(max_product, arr[1] * arr[2])\n    for i in range(2, length):\n        max_product = max(max_product, arr[i] * arr[i - 1] * arr[i - 2])\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print(maxProduct(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(maxProduct(arr))",
    "import math\n\ndef find_max_product(arr):\n    max_product = 0\n    for i in range(0, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i+1])\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Max product of increasing subsequence: {}\".format(find_max_product(arr)))",
    "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        result = nums[0]\n        for i in range(1, len(nums)):\n            result = max(result * nums[i], nums[i])\n        return result\n\n# Test Cases\nnums = [1, 2, 3]\nprint(maxProduct(nums))\n\nnums = [1, 2, 3, 4]\nprint(maxProduct(nums))\n\nnums = [1, 2, 3, 4, 5]\nprint(maxProduct(nums))\n\nnums = [1, 2, 3, 4, 5, 6]\nprint(maxProduct(nums))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product",
    "# https://discuss.leetcode.com/topic/122869/python-solution-with-explanation\n\n# Example:\n# For [1,2,3,4,5], the subsequence [1,2,3,4] has the maximum product of 5, and [1,2,3,4] has the maximum product of 4\n# The answer is 2 * 3 * 4 = 24\n\n# Solution:\n# Sort the array, then for each increasing subsequence, find the maximum product\n# The answer is the maximum product of the subsequence.\n\n# Time: O(n^2)\n# Space: O(n)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = 1\n        for i in range(1, len(nums)):\n            ans = max(ans, nums[i] * nums[i-1])\n        return ans",
    "# Your code here\n\n# This is the problem:\n# Given [2,3,4,5,6], return 15.\n\ndef maxProduct(arr):\n    return max(arr, key=lambda x: maxProduct(arr[:x] + arr[x+1:]))\n\nprint maxProduct([2,3,4,5,6])",
    "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_val = arr[0]\n    max_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        max_val = max(arr[i], max_val * arr[i])\n        max_arr.append(max_val)\n\n    return max_arr[-1]\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    print max_product(arr)",
    "# Your code here\n\ndef maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    max_product = maxProduct(nums[1:])\n    max_product *= nums[0]\n    max_product = max(max_product, nums[0] * maxProduct(nums[1:]));\n    return max_product\n\nprint maxProduct([2, 3, 4, 5, 6])",
    "def findMaxProduct(nums):\n\tif len(nums) == 1:\n\t\treturn nums[0]\n\telif len(nums) == 2:\n\t\treturn max(nums[0] * nums[1], nums[1] * nums[0])\n\telse:\n\t\treturn max(findMaxProduct(nums[:len(nums)/2]), findMaxProduct(nums[len(nums)/2:])) * nums[len(nums)/2]\n\nprint(findMaxProduct([1,2,3,4,5]))",
    "import unittest\n\n\ndef max_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\nclass TestMaxProduct(unittest.TestCase):\n    def test_max_product(self):\n        self.assertEqual(max_product([1, 2, 3, 4, 5]), 120)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [2, 3, 1, 2]\n    print(max_product(arr))\n    arr = [1, 2, 3]\n    print(max_product(arr))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        # find the first element\n        first = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[first]:\n                first = i\n\n        # find the max product\n        max_product = 1\n        for i in range(first, len(nums)):\n            max_product = max(max_product, nums[i] * nums[first] * nums[i + 1])\n        return max_product\n\n\nif __name__ == \"__main__\":\n    print(Solution().maxProduct([1, 2, 3]))\n    print(Solution().maxProduct([1, 2, 3, 4]))\n    print(Solution().maxProduct([1, 2, 3, 4, 5]))\n    print(Solution().maxProduct([1, 2, 3, 4, 5, 6]))\n    print(Solution().maxProduct([1, 2, 3, 4, 5, 6, 7]))\n    print(Solution().maxProduct([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(Solution().maxProduct([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "def maxProduct(nums):\n    if not nums:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    max = nums[0]\n    for i in range(1, len(nums)):\n        max = max * nums[i]\n        if max < 0:\n            return max\n\n    return max\n\n\nif __name__ == \"__main__\":\n    print(maxProduct([1, 2, 3, 4]))\n    print(maxProduct([1, 2, 3, 4, 5]))\n    print(maxProduct([1, 2, 3, 4, 5, 6]))\n    print(maxProduct([1, 2, 3, 4, 5, 6, 7]))",
    "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return max_product_helper(arr, 0, len(arr) - 1)\n\ndef max_product_helper(arr, start, end):\n    if start == end:\n        return arr[start]\n    else:\n        if arr[end] > arr[start]:\n            return arr[end] * arr[start]\n        else:\n            return max_product_helper(arr, start + 1, end)",
    "def max_product(arr):\n    # write your code here\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return max(arr[:len(arr) - 1]) * max(arr[1:])",
    "from math import sqrt\n\n\ndef max_product_increasing_subsequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return 1\n\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\ndef test():\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 720\n    assert max_product_increasing_subsequence([1, 2, 3, 4, 5, 6",
    "def get_max_product_of_increasing_subsequence(arr):\n    max_product = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        max_product = max(max_product, arr[start] * arr[end])\n        if arr[start] < arr[end]:\n            start += 1\n        else:\n            end -= 1\n    return max_product\n\narr = [1, 2, 3, 4, 5]\nprint(get_max_product_of_increasing_subsequence(arr))",
    "# https://www.hackerrank.com/challenges/max-product/problem\n\nimport sys\n\ndef maxProduct(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\nnumbers = input().split()\nn = int(numbers[0])\n\nfor i in range(1, n):\n    numbers.append(int(numbers[i]))\n\nprint(maxProduct(numbers))",
    "def max_product(nums):\n    # write your code here\n    if len(nums) == 0:\n        return 0\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    # calculate max product\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        max_product = max(max_product*nums[i], nums[i])\n    \n    # return max product\n    return max_product\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 5]\n    print(max_product(nums))",
    "def max_product(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        max_product_tmp = nums[0]\n        for i in range(1, len(nums)):\n            max_product_tmp = max(nums[i], nums[i] * max_product_tmp)\n        return max_product_tmp\n\ndef main():\n    nums = [3, 2, 4, 1]\n    print(max_product(nums))\n\nif __name__ == '__main__':\n    main()",
    "def max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        if i == 0:\n            max_product = max(max_product, nums[i] * nums[i])\n        else:\n            max_product = max(max_product, nums[i] * nums[i - 1])\n    return max_product\n\nnums = [2, 3, 4, 6, 7, 8, 9, 10, 11]\nprint(max_product(nums))",
    "def product(nums):\n    # Write your code here\n    res = 1\n    for i in range(len(nums)):\n        res = res * nums[i]\n    return res\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(product(nums))",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/\n\n# DP\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        \n        ans = 1\n        for i in xrange(1, len(nums)):\n            ans = max(ans, nums[i - 1] * nums[i])\n        return ans",
    "def find_max_product_subsequence(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in range(len(numbers)):\n        max_product = max(max_product, numbers[i] * find_max_product_subsequence(numbers[i+1:]))\n    return max_product\n\nif __name__ == '__main__':\n    numbers = [2, 3, 1, 1, 4, 2, 3, 2]\n    print(find_max_product_subsequence(numbers))",
    "#!/usr/bin/env python\n\nimport sys\n\ndef findMaxProduct(arr):\n    maxProduct = 0\n    maxProductIndex = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > maxProduct:\n                maxProduct = product\n                maxProductIndex = (i, j)\n    return maxProduct, maxProductIndex\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print findMaxProduct(arr)\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print findMaxProduct(arr)\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
    "def getMaxProduct(arr):\n    maxProd = 0\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            maxProd = max(arr[i] * arr[i + 1], maxProd)\n    return maxProd\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6]\n    print getMaxProduct(arr)",
    "from collections import Counter\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n\n    return max_product\n\n\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_product([1, 2, 3, 4, 5, 6]))",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0] * nums[1], nums[1] * nums[0])\n\n        res = nums[0] * nums[1]\n        for i in xrange(2, len(nums)):\n            res = max(res, nums[i] * nums[i-1])\n\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([1,2,3]) == 6\n    assert Solution().maxProduct([1,2,3,4]) == 24\n    assert Solution().maxProduct([1,2,3,4,5]) == 120\n    assert Solution().maxProduct([1,2,3,4,5,6]) == 720\n    assert Solution().maxProduct([1,2,3,4,5,6,7]) == 5040",
    "def max_product(numbers):\n    # write your code here\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        max_product = numbers[0]\n        for i in range(1, len(numbers)):\n            if numbers[i] > max_product:\n                max_product = numbers[i]\n            else:\n                if numbers[i] * numbers[i] > max_product:\n                    max_product = numbers[i] * numbers[i]\n        return max_product\n\nif __name__ == \"__main__\":\n    print max_product([1,2,3,4,5,6])",
    "import math\n\ndef max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\ndef main():\n    arr = [1,2,3,4,5]\n    print(max_product(arr))\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/env python\n\ndef find_max_product(nums):\n    # The first product is just the first number\n    product = nums[0]\n    # The rest of the products are the product of the previous product and the next number\n    for i in range(1, len(nums)):\n        product *= nums[i]\n    return product\n\n# Test cases\nnums = [2, 3, 4, 5, 6]\nprint find_max_product(nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nprint find_max_product(nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint find_max_product(nums)",
    "import sys\nsys.setrecursionlimit(100000)\n\ndef findMaxProduct(arr):\n    if len(arr) < 2:\n        return 0\n\n    max = 0\n    max_product = 0\n    max_length = 0\n\n    for i in range(1, len(arr)):\n        product = arr[i - 1] * arr[i]\n        if product > max_product:\n            max_product = product\n            max_length = i\n        elif product > max_product:\n            max_product = product\n            max_length = i\n\n    return max_product * arr[max_length]\n\n\ndef main():\n    arr = [5, 4, 3, 2, 1]\n    print(findMaxProduct(arr))\n\nif __name__ == \"__main__\":\n    main()",
    "import sys\nsys.path.append(\"..\")\nimport time\nimport collections\nimport heapq\nimport itertools\nimport math\n\n\ndef max_product_of_increasing_subsequence(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if not array:\n        return 0\n\n    n = len(array)\n    if n == 1:\n        return array[0]\n\n    max_product = array[0]\n    for i in range(1, n):\n        max_product = max(max_product * array[i], array[i])\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    n = int(input())\n    array = list(map(int, input().rstrip().split()))\n    print(max_product_of_increasing_subsequence(array))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
    "import numpy as np\n\ndef find_max_product(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(numbers)\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If even, we can multiply by 2 and then take the maximum product of even and odd numbers\n        return max(numbers[0] * 2, numbers[1] * 2) * max(numbers[2] * 2, numbers[3] * 2) * max(numbers[4] * 2, numbers[5] * 2) * max(numbers[6] * 2, numbers[7] * 2)\n    else:\n        # If odd, we can multiply by 2 and then take the maximum product of even and odd numbers\n        return max(numbers[0] * 2, numbers[1] * 2) * max(numbers[2] * 2, numbers[3] * 2) * max(numbers[4] * 2, numbers[5] * 2) * max(numbers[6] * 2, numbers[7] * 2)\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7]\n    print(find_max_product(numbers))",
    "from math import sqrt\n\n\ndef max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 1\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            max_product *= nums[i] * nums[j]\n    return max_product\n\n\ndef test_max_product():\n    assert max_product([1, 2, 3]) == 6\n    assert max_product([3, 2, 1]) == 6\n    assert max_product([2, 1]) == 2\n    assert max_product([1, 2, 3, 4, 5, 6]) == 120\n    assert max_product([3, 2, 1, 4, 5, 6]) == 720\n    assert max_product([3, 2, 1, 4, 5, 6, 7]) == 720\n    assert max_product([3, 2, 1, 4, 5, 6, 7, 8]) == 720\n\n\nif __name__ == '__main__':\n    test_max_product()",
    "# https://www.hackerrank.com/challenges/maximum-product-subarray/problem\n\n# TODO:\n# - Dynamic programming to find maximum product\n\nimport math\n\ndef maxProduct(arr):\n    # Dynamic programming\n    ans = 0\n    for i in range(len(arr)):\n        ans = max(ans, arr[i] * maxProduct(arr[i+1:]));\n    return ans\n\n# Test case\narr = [1, 2, 3, 4, 5]\nprint(maxProduct(arr))",
    "def get_max_product(nums):\n    res = 0\n    for i in range(len(nums)):\n        if i > 0 and nums[i] >= nums[i - 1]:\n            res = max(res, nums[i] * get_max_product(nums[i:len(nums)]))\n    return res\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_max_product(nums))",
    "def get_max_product(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i - 1])\n\n    return max_product\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(get_max_product(arr))",
    "# Note:\n# The increasing subsequence of an array is a subsequence of the array with the smallest value\n# larger than the largest value in the subsequence.\n# This is equivalent to finding the maximum of the subsequences of the array.\n\n# Example:\n# Input:\n# [1,2,3,4]\n# Output: 24\n# Explanation:\n# The increasing subsequence is [1, 2], [2, 3], [3, 4].\n# The maximum is the product of these numbers, which is 24.\n\n# Note:\n# The length of the increasing subsequence will be in the range [1, n].\n# The length of the input array will be in the range [1, 200].\n# -100 <= the input array[i] <= 100.\n# -100 <= the increasing subsequence[i] <= 100.\n# -100 <= the output <= 100.\n\n# Companies\n# LinkedIn\n# Related Topics\n# Math\n# Similar Questions\n# Maximum Product Subarray\n\nimport random\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        dp = [[0 for j in range(n)] for i in range(n)]\n        for i in range(1, n):\n            dp[i][0] = nums[i]\n            for j in range(1, i):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) * nums[i]\n        return dp[n - 1][n - 1]\n\n# Note:\n# This is a recursive solution.\n# The idea is to find the maximum subarray which is increasing subsequence.\n# The problem is that the number of subsequence is increasing.\n# The solution is to find the maximum of the subsequence.\n\n# Note:\n# This is a recursive solution.\n# The idea is to find the maximum subarray which is increasing subsequence.\n# The problem is that the number of subsequence is increasing",
    "from collections import defaultdict\n\ndef max_product_of_increasing_subsequence(nums):\n    max_product = 1\n    max_product_list = []\n    for i in range(len(nums)):\n        max_product_list.append(1)\n    for j in range(len(nums)-1):\n        max_product_list[j+1] *= nums[j]\n    for i in range(len(nums)-1, -1, -1):\n        for j in range(len(nums)):\n            if j >= i:\n                max_product_list[i] *= nums[j]\n    max_product = max(max_product_list)\n    return max_product\n\ndef max_product_of_increasing_subsequence_2(nums):\n    max_product = 1\n    max_product_list = []\n    for i in range(len(nums)):\n        max_product_list.append(1)\n    for i in range(len(nums)-1):\n        max_product_list[i+1] = max(max_product_list[i], max_product_list[i+1]) * nums[i]\n    max_product = max_product_list[0]\n    return max_product\n\ndef max_product_of_increasing_subsequence_3(nums):\n    max_product = 1\n    max_product_list = [1]\n    for i in range(len(nums)-1):\n        max_product_list.append(max(max_product_list[i], max_product_list[i+1]))\n    for i in range(len(nums)-1, -1, -1):\n        for j in range(len(nums)):\n            if j >= i:\n                max_product_list[i] = max(max_product_list[i], max_product_list[i+1] * nums[j])\n    max_product = max_product_list[0]\n    return max_product\n\ndef max_product_of_increasing_subsequence_4(nums):\n    max_product = 1",
    "import sys\n\ndef max_product_increasing_subsequence(nums):\n    # write your code here\n    max_product = 0\n    max_start = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            max_start = i\n        else:\n            max_product = max(max_product, nums[i] * max_product_increasing_subsequence(nums[:max_start+1]))\n    return max_product\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print max_product_increasing_subsequence(nums)",
    "def max_product(nums):\n    if len(nums) == 0:\n        return 1\n    return max(max_product(nums[1:]), max(nums[:i] * nums[i + 1:]) for i in range(len(nums) - 1))\n\nif __name__ == \"__main__\":\n    nums = [2,3,4,5,6]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8,9]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8,9,10,11]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12]\n    print max_product(nums)\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print max_product(nums)",
    "def get_max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n    max_product = arr[0]*arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i]*arr[i-1])\n    return max_product\n\nprint(get_max_product([1, 2, 3, 4, 5, 6, 7, 8]))",
    "from math import ceil\nfrom itertools import combinations\n\n\ndef product_of_increasing_subsequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\ndef test_product_of_increasing_subsequence():\n    assert product_of_increasing_subsequence([3, 2, 1]) == 6\n    assert product_of_increasing_subsequence([1, 2, 3, 4, 5]) == 120\n\n\ndef product_of_increasing_subsequence_recursive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] * product_of_increasing_subsequence_recursive(arr[1:]),\n                   arr[0] * product_of_increasing_subsequence_recursive(arr[:-1]))\n\n\ndef test_product_of_increasing_subsequence_recursive():\n    assert product_of_increasing_subsequence_recursive([3, 2, 1]) == 6\n    assert product_of_increasing_subsequence_recursive([1, 2, 3, 4, 5]) == 120\n\n\ndef product_of_increasing_subsequence_iterative(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\ndef test_product_of_increasing_subsequence_iterative():\n    assert product_of_increasing_subsequence_iterative([3, 2, 1]) == 6\n    assert product_of_increasing_subsequence_iterative([1, 2, 3, 4, 5]) == 120\n\n\ndef product_of_increasing_subsequence_",
    "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    res = 1\n    for i in range(1, len(nums)):\n        res = max(res, nums[i-1] * nums[i])\n    return res\n\nif __name__ == '__main__':\n    print(find_max_product([1,2,3,4]))\n    print(find_max_product([1,2,3]))\n    print(find_max_product([2,3,4,5,6,7,8,9,10]))\n    print(find_max_product([1,2,3,4,5,6]))\n    print(find_max_product([1,2,3,4,5,6,7,8,9,10]))\n    print(find_max_product([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(find_max_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(find_max_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103",
    "#!/usr/bin/env python\n\nimport numpy as np\n\ndef maxProduct(arr):\n    \"\"\"\n    Returns the maximum product of the numbers in the array.\n\n    Args:\n        arr: A list of numbers.\n\n    Returns:\n        The maximum product of the numbers in the array.\n    \"\"\"\n\n    # Make the list into an ndarray\n    arr = np.array(arr)\n\n    # Make the array into a row vector\n    arr = arr.reshape((arr.size, 1))\n\n    # Find the maximum product in the row vector\n    return np.max(arr.T * arr)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print maxProduct(arr)",
    "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans, nums[i] * nums[i])\n\n        for i in range(len(nums) - 2, -1, -1):\n            ans = max(ans, nums[i] * nums[i + 1])\n            if i < len(nums) - 2:\n                ans = max(ans, nums[i] * nums[i + 2])\n\n        return ans",
    "import sys\n\ndef maxProduct(arr):\n    max_product = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    print maxProduct(arr)",
    "def max_product(nums):\n    \"\"\"\n    nums: a list of numbers\n    returns: the maximum product of the numbers\n    \"\"\"\n    if not nums:\n        return 1\n\n    min_num = nums[0]\n    max_num = nums[0]\n\n    for num in nums[1:]:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n\n    return max_num * min_num\n\nprint max_product([1,2,3,4,5,6,7,8])\nprint max_product([1,2,3,4,5,6,7,8,9])",
    "def find_max_product_in_increasing_subsequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr: return 0\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res, arr[i] * arr[i - 1])\n    return res",
    "def product(nums):\n    max_product = 1\n    for i in range(len(nums)):\n        if i == 0:\n            max_product *= nums[i]\n        else:\n            max_product *= nums[i]\n    return max_product\n\nif __name__ == \"__main__\":\n    nums = [5, 4, 3, 2, 1]\n    print(product(nums))\n    nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205",
    "def product_of_increasing_subsequence(numbers):\n    if len(numbers) == 0:\n        return 1\n\n    product = numbers[0]\n    for i in range(1, len(numbers)):\n        product *= numbers[i]\n    return product\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(product_of_increasing_subsequence(numbers))",
    "def max_product_of_increasing_subsequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    # 1st step: find the first increasing subsequence\n    # 2nd step: find the maximum product of increasing subsequence\n    # 3rd step: merge the two subsequences into one\n    # 4th step: find the maximum product of increasing subsequence\n    # 5th step: merge the two subsequences into one\n    # 6th step: find the maximum product of increasing subsequence\n    # 7th step: merge the two subsequences into one\n    # 8th step: find the maximum product of increasing subsequence\n    # 9th step: merge the two subsequences into one\n    # 10th step: find the maximum product of increasing subsequence\n    # 11th step: merge the two subsequences into one\n    # 12th step: find the maximum product of increasing subsequence\n    # 13th step: merge the two subsequences into one\n    # 14th step: find the maximum product of increasing subsequence\n    # 15th step: merge the two subsequences into one\n    # 16th step: find the maximum product of increasing subsequence\n    # 17th step: merge the two subsequences into one\n    # 18th step: find the maximum product of increasing subsequence\n    # 19th step: merge the two subsequences into one\n    # 20th step: find the maximum product of increasing subsequence\n    # 21st step: merge the two subsequences into one\n    # 22nd step: find the maximum product of increasing subsequence\n    # 23rd step: merge the two subsequences into one\n    # 24th step: find the maximum product of increasing subsequence\n    # 25th step: merge the two subsequences into one\n    # 26th step: find the maximum product of increasing subsequence\n    # 27th step: merge the two subsequences into one\n    # 28th step: find the maximum product of increasing subsequence\n    # 29th step: merge the two subsequences into one\n    # 30th step: find the maximum product of increasing subsequence\n    # 31st step: merge the two subsequences into one\n    # 32nd step: find the",
    "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        nums.sort()\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxProduct([1, 2, 3, 4, 5])\n    print s.maxProduct([1, 2, 3, 4, 5, 6])\n    print s.maxProduct([1, 2, 3, 4, 5, 6, 7])\n    print s.maxProduct([-1, -2, -3, -4, -5, -6, -7])",
    "from collections import Counter\nfrom itertools import chain\n\ndef product_max(arr, k):\n    max_product = arr[0]\n    for i in range(1, k):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 2\n    print(product_max(numbers, k))\n\nif __name__ == '__main__':\n    main()",
    "from time import time\n\nn = 1000000\n\ndef get_max_product(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    max_product = nums[0]\n    max_product_product = nums[0]\n    for i in range(1, len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n        max_product_product = max(max_product_product * nums[i], nums[i])\n\n    return max_product\n\ndef main():\n    t = time()\n    print(get_max_product(range(1, n + 1)))\n    print(\"Time taken: {}\".format(time() - t))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return nums[0] if nums else 0\n        dp = [1] * n\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * dp[i - 1])\n            dp[i] = max_product\n        return max_product",
    "from collections import deque\nimport math\n\ndef max_product_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    \n    res = max(nums[0], 1)\n    for i in range(len(nums) - 1):\n        res = max(res * nums[i], nums[i + 1])\n    return res\n\ndef main():\n    nums = [1,2,3,4]\n    assert max_product_increasing_subsequence(nums) == 24\n    nums = [1,2,3,4,5]\n    assert max_product_increasing_subsequence(nums) == 120\n    nums = [1,2,3,4,5,6]\n    assert max_product_increasing_subsequence(nums) == 720\n    nums = [1,2,3,4,5,6,7]\n    assert max_product_increasing_subsequence(nums) == 5040\n    nums = [1,2,3,4,5,6,7,8]\n    assert max_product_increasing_subsequence(nums) == 40320\n\nif __name__ == '__main__':\n    main()",
    "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    else:\n        return max(arr[i] * arr[i+1] for i in range(len(arr)-1))\n\n\nif __name__ == '__main__':\n    assert(max_product([1,2,3]) == 6)\n    assert(max_product([2,3,4]) == 24)\n    assert(max_product([3,4,5]) == 120)\n    assert(max_product([3,4,5,6]) == 720)\n    assert(max_product([3,4,5,6,7]) == 5040)\n    assert(max_product([3,4,5,6,7,8]) == 40320)",
    "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0] * nums[0]\n        l = len(nums)\n        res = nums[0] * nums[0]\n        for i in range(1, l):\n            res = max(res, nums[i] * nums[i])\n        return res",
    "import sys\nsys.path.append(\"..\")\nimport utils\nimport numpy as np\nimport numpy.random as npr\n\ndef run_test():\n    npr.seed(0)\n    for n in range(100):\n        x = npr.randint(0, 100, size=n)\n        y = npr.randint(0, 100, size=n)\n        z = npr.randint(0, 100, size=n)\n        print(utils.max_product(x, y, z))\n\nif __name__ == \"__main__\":\n    run_test()",
    "from collections import Counter\n\ndef find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # Find the longest increasing subsequence\n    # Return the maximum product\n    max_product = -1\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    \n    return max_product\n\nif __name__ == '__main__':\n    arr = [3, 2, 4, 1]\n    print(find_max_product(arr))",
    "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) <= 1:\n        return 1\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(arr[i] * arr[i - 1], max_prod)\n    return max_prod\n\nif __name__ == '__main__':\n    arr = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_product(arr))\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_product(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_product(arr))",
    "import sys\nimport timeit\n\nstart = timeit.default_timer()\n\n# https://www.hackerrank.com/challenges/maximum-product-subsequence/problem\n\n# The problem is to find the maximum product of all the numbers of increasing subsequence of the given array\n# It can be solved using the following way\n# 1. Find the maximum of the first subsequence\n# 2. Find the maximum of the second subsequence\n# 3. Find the maximum of the third subsequence\n# 4....\n# 5. Find the maximum of the last subsequence\n# 6. Find the maximum of the whole array\n# 7. Find the maximum of the last subsequence of the array\n# 8. Find the maximum of the last subsequence of the first subsequence\n# 9. Find the maximum of the last subsequence of the second subsequence\n# 10. Find the maximum of the last subsequence of the third subsequence\n# 11....\n# 12. Find the maximum of the last subsequence of the last subsequence\n# 13. Find the maximum of the last subsequence of the last subsequence\n# 14. Find the maximum of the last subsequence of the last subsequence of the first subsequence\n# 15. Find the maximum of the last subsequence of the last subsequence of the second subsequence\n# 16. Find the maximum of the last subsequence of the last subsequence of the third subsequence\n# 17....\n# 18. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 19. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 20. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 21. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 22. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 23. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 24. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 25. Find the maximum of the last subsequence of the last subsequence of the last subsequence\n# 26. Find the maximum of the last subsequence of the last subsequence of the last subsequ",
    "def max_product_subseq(nums):\n    if len(nums) < 2:\n        return 1\n    \n    max_product = 1\n    for i in range(2, len(nums) + 1):\n        max_product = max(max_product, nums[i - 1] * nums[i - 2] * nums[i - 1])\n    \n    return max_product",
    "# https://leetcode.com/problems/maximum-product-of-increasing-subsequence/discuss/785036/Python-Solution-O(n^2)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        n = len(nums)\n        # dp[i] is the maximum product of the first i elements.\n        dp = [1] * n\n\n        for i in range(1, n):\n            dp[i] = max(dp[i-1] * nums[i-1], dp[i-1])\n\n        # print(dp)\n        # print(dp[-1])\n        return max(dp[-1] * nums[-1], dp[-1])",
    "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_val = 0\n    for i in range(len(arr)):\n        curr_max = 1\n        for j in range(i):\n            curr_max *= arr[j]\n        max_val = max(max_val, curr_max)\n    return max_val",
    "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    max = 1\n    for i in range(1, len(nums)):\n        max = max * nums[i]\n    return max\n\nprint maxProduct([1,2,3,4])\n\n\"\"\"\nOutput:\n\n4\n\"\"\"",
    "def maxProduct(nums):\n    max_val = 1\n    for val in nums:\n        max_val *= val\n    return max_val\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(maxProduct(nums))",
    "import unittest\nfrom collections import Counter\n\n# TODO\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        max_product = 1\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product, self.max_product(nums[:i], nums[i:]))\n        return max_product\n\n    def max_product(self, l, r):\n        max_product = 1\n        for i in xrange(0, len(l)):\n            max_product = max(max_product, l[i] * r[i])\n        return max_product\n\n    def max_product(self, l, r):\n        max_product = 1\n        for i in xrange(0, len(l)):\n            max_product = max(max_product, l[i] * r[i])\n        return max_product\n\n    def max_product(self, l, r):\n        max_product = 1\n        for i in xrange(0, len(l)):\n            max_product = max(max_product, l[i] * r[i])\n        return max_product\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-product-of-increasing-subsequence/solution/\n\n# 15ms 100%\nclass Solution {\n    public int maxProduct(int[] nums) {\n        int max = 1;\n        int max_product = 1;\n        for (int i = 0; i < nums.length; i++) {\n            int curr_product = 1;\n            for (int j = 0; j < i; j",
    "# Your code here\n\ndef max_product_of_increasing_subsequence(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product*arr[i], arr[i])\n    return max_product\n\nprint(max_product_of_increasing_subsequence([1,3,2,5,4]))\nprint(max_product_of_increasing_subsequence([1,2,3]))\nprint(max_product_of_increasing_subsequence([3,2,1]))\nprint(max_product_of_increasing_subsequence([2,3,4,5]))\nprint(max_product_of_increasing_subsequence([1,2,3,4,5]))\nprint(max_product_of_increasing_subsequence([1,2,3,4,5,6]))",
    "import time\nimport collections\n\nstart_time = time.time()\n\n\ndef max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * nums[1]\n    else:\n        max_product = nums[0] * nums[1]\n        for i in range(2, len(nums)):\n            max_product = max(max_product, nums[i-1] * nums[i])\n        return max_product\n\n\ndef max_product_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * nums[1]\n    else:\n        max_product = nums[0] * nums[1]\n        for i in range(2, len(nums)):\n            max_product = max(max_product, nums[i-1] * nums[i])\n        return max_product\n\n\ndef max_product_3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * nums[1]\n    else:\n        max_product = nums[0] * nums[1]\n        for i in range(2, len(nums)):\n            max_product = max(max_product, nums[i-1] * nums[i])\n        return max_product\n\n\ndef max_product",
    "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_product(arr))",
    "def maxProduct(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        max = max if arr[i] > arr[i-1] else arr[i]\n        max = max if arr[i] * arr[i-1] > max else arr[i] * arr[i-1]\n    return max\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(maxProduct(arr))\n\nif __name__ == '__main__':\n    main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}