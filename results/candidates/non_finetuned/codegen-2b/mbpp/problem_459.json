{
  "problem": {
    "task_id": "MBPP/470",
    "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
    "test_list": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ],
    "challenge_test_list": [],
    "problem_id": 459
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def pairwise_add(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    if not tuples:\n        return []\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0]+tuples[j][0], tuples[i][1]+tuples[j][1]))\n    return result",
    "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\ndef add_tuples(tuples):\n    \"\"\"\n    Add tuples to the given list.\n\n    >>> add_tuples([Tuple(1, 2), Tuple(3, 4), Tuple(5, 6)])\n    [(1, 2), (4, 6), (3, 5)]\n    \"\"\"\n    return [tuple(x + y for x, y in zip(tuple, tuple_)) for tuple_ in tuples]\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    tuples = add_tuples([(1, 2), (3, 4), (5, 6)])\n    assert add_tuples([(1, 2), (3, 4), (5, 6)]) == tuples\n\n\nif __name__ == '__main__':\n    main()",
    "import unittest\n\nclass Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(a)):\n            res.append(a[i] + b[i])\n        return res\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition/solution/\n#\nApproach 1: Sort\nComplexity Analysis\nTime Complexity: O(n^2), where n is the size of the array.\nSpace Complexity: O(n^2), where n is the size of the array.\n\n# 11ms 100%\nclass Solution {\n    public List<Integer> getSum(List<Integer> a, List<Integer> b) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j < b.size(); j++) {\n                res.add(a.get(i) + b.get(j));\n            }\n        }\n        return res;\n    }\n}\n\nApproach 2: Binary Search\nComplexity Analysis\nTime Complexity: O(n), where n is the size of the array.\nSpace Complexity: O(1).\n\n# 11ms 100%\nclass Solution {\n    public List<Integer> getSum(List<Integer> a, List<Integer> b) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (a.size() == 0) {\n            return b;\n        }\n        if (b.size() == 0) {\n            return a;\n        }\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {",
    "# TODO:\n# - add tests\n# - add more comments\n\ndef pairwise_add(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    result = []\n    for t in tuples:\n        result.append((t[0] + t[1], t[1] + t[0]))\n    return result\n\n\ndef main():\n    # TODO: write tests\n    tuples = [(1, 2), (3, 4)]\n    print(pairwise_add(tuples))\n    tuples = [(1, 2), (3, 5)]\n    print(pairwise_add(tuples))\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(pairwise_add(tuples))\n\n\nif __name__ == '__main__':\n    main()",
    "#!/usr/bin/python\n\nclass Solution(object):\n    def plusOne(self, tuples):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ret = []\n        for tup in tuples:\n            for i in range(len(tup)):\n                if tup[i] == 9:\n                    tup[i] = 0\n                    break\n            ret.append(tup)\n        for tup in ret:\n            for i in range(len(tup)):\n                if tup[i] == 0:\n                    tup[i] = 1\n                    break\n            for i in range(len(tup) - 1, -1, -1):\n                tup[i] += 1\n                if tup[i] > 9:\n                    tup[i] = 0\n                    tup[i + 1] += 1\n        return ret",
    "import unittest\n\ndef pairwise_add(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    if len(tuple_list) == 0:\n        return []\n    elif len(tuple_list) == 1:\n        return [tuple_list[0]]\n    else:\n        result = []\n        for i in range(len(tuple_list) - 1):\n            for j in range(i + 1, len(tuple_list)):\n                result.append((tuple_list[i] + tuple_list[j]))\n        return result\n\nclass Test(unittest.TestCase):\n    def test_pairwise_add(self):\n        self.assertEqual(pairwise_add([(1, 2), (3, 4), (5, 6)]),\n                         [(1, 2), (3, 4), (5, 6), (6, 8), (8, 10)])\n\nif __name__ == '__main__':\n    unittest.main()",
    "def pairwise_add(t1, t2):\n    \"\"\"\n    Return the pairwise addition of the elements of the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(t1)):\n        for j in range(len(t2)):\n            result.append((t1[i]+t2[j], t1[i], t2[j]))\n    return result\n\n\nif __name__ == '__main__':\n    print(pairwise_add([1, 2], [3, 4]))\n    print(pairwise_add([1, 2, 3, 4], [5, 6]))",
    "import unittest\n\nclass Solution:\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return list(map(lambda x, y: x + y, a, b))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition-of-elements-in-tuples/solution/\n#\nApproach #1: Sort [a, b, c]\nComplexity Analysis\nTime Complexity: O(n log n), where n is the length of the given array.\nSpace Complexity: O(n log n)\n\n# 8ms 99.99%\nclass Solution {\n    public List<Integer> getSum(List<Integer> a, List<Integer> b) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (a.isEmpty() || b.isEmpty()) return res;\n        Collections.sort(a);\n        Collections.sort(b);\n        for (int i = 0; i < a.size(); i++) {\n            res.add(a.get(i) + b.get(i));\n        }\n        return res;\n    }\n}\n\nApproach #2: Sort [a, b, c]\nComplexity Analysis\nTime Complexity: O(n log n), where n is the length of the given array.\nSpace Complexity: O(n log n)\n\n# 8ms 99.99%\nclass Solution {\n    public List<Integer> getSum(List<Integer> a, List<Integer> b) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (a.isEmpty() || b.isEmpty()) return res;\n        Collections.sort(a);\n        Collections.sort(b);\n        for (int i = 0; i <",
    "class Solution:\n    def add(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return nums\n        res = [[0] * n for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i):\n                res[i][j] = res[j][i] = nums[i][j] + nums[j][i]\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [([1, 2], [3, 4]), ([3, 4], [1, 2]), ([1, 1], [1, 1]), ([1, 1], [1, 1]), ([1, 1], [1, 1])]\n    for i in range(len(nums)):\n        print(s.add(nums[i]))",
    "def pairwise_add(tuples):\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            tuples[i] = tuple(a + b for a, b in zip(tuples[i], tuples[j]))\n    return tuples\n\ndef main():\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(pairwise_add(tuples))\n\nif __name__ == \"__main__\":\n    main()",
    "class Solution(object):\n    def add(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple[int, int]]\n        :rtype: List[Tuple[int, int]]\n        \"\"\"\n        res = []\n        for t in tuples:\n            if t[0] == 0:\n                res.append((t[1], 0))\n            else:\n                res.append((t[0], t[1] + res[-1][1]))\n        return res",
    "import unittest\n\n\nclass Solution:\n    # @param {List[List[int]]} matrix\n    # @return {List[List[int]]}\n    def matrixAdd(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not matrix:\n            return []\n\n        m = len(matrix)\n        n = len(matrix[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n\n        for i in range(m):\n            for j in range(n):\n                ans[i][j] = matrix[i][j] + sum(matrix[i][k] + matrix[k][j] for k in range(m) if k!= i)\n\n        return ans\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        matrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n        matrix3 = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]\n        matrix4 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n        matrix5 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n        self.assertEqual(sorted(Solution().matrixAdd(matrix)), sorted(Solution().matrixAdd(matrix2)))\n        self.assertEqual(sorted(Solution().matrixAdd(matrix3)), sorted(Solution().matrixAdd(matrix4)))\n        self.assertEqual(sorted(Solution().matrixAdd(matrix4)), sorted(Solution().matrixAdd(matrix5)))\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "import collections\n\ndef add_tuples(tuples):\n    \"\"\"\n    Input: A list of tuples, e.g. [('a', 1), ('b', 2)]\n    Output: A list of tuples, e.g. [('a', 3), ('b', 4)]\n    \"\"\"\n    res = collections.defaultdict(list)\n    for t in tuples:\n        res[t[0]].append(t[1])\n    return [t for t in res.items() if t[1]]\n\nif __name__ == \"__main__\":\n    tuples = [['a', 1], ['b', 2], ['c', 3]]\n    print(add_tuples(tuples))\n    tuples = [['a', 1], ['a', 2], ['b', 3]]\n    print(add_tuples(tuples))",
    "import unittest\nfrom collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\n\nclass Solution(object):\n    def add(self, iterable):\n        \"\"\"\n        :type iterable: Iterable[Tuple[int, int]]\n        :rtype: List[Tuple[int, int]]\n        \"\"\"\n        return [Tuple(x, y) for x, y in zip(iterable, iterable[1:])]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition/solution/\n\n# 1ms 100%\nclass Solution {\n    public List<Tuple> add(List<Tuple> iterable) {\n        List<Tuple> result = new ArrayList<>();\n        for (int i = 0; i < iterable.size(); i++) {\n            for (int j = i + 1; j < iterable.size(); j++) {\n                Tuple t = new Tuple(iterable.get(i).x + iterable.get(j).x, iterable.get(i).y + iterable.get(j).y);\n                result.add(t);\n            }\n        }\n        return result;\n    }\n}\n'''",
    "# https://www.hackerrank.com/challenges/pairwise-addition/problem\n\ndef pairwise_add(tuples):\n    # write your code here\n    pairs = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            pairs.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return pairs\n\ndef main():\n    tuples = [[3, 4], [2, 6], [5, 1], [1, 3]]\n    print(pairwise_add(tuples))\n\nif __name__ == \"__main__\":\n    main()",
    "from collections import namedtuple\nfrom itertools import combinations\nfrom typing import List\n\n# TODO: Implement the function.\n\n\ndef pairwise_addition(tuples: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    :param tuples: List of tuples\n    :return: List of tuples\n    \"\"\"\n    return []\n\n\ndef main():\n    \"\"\"\n    For test cases, see the file \"tests.py\"\n    \"\"\"\n    print(pairwise_addition([(1, 2), (1, 3)]))\n    print(pairwise_addition([(1, 2), (2, 3)]))\n    print(pairwise_addition([(1, 2), (3, 4)]))\n    print(pairwise_addition([(1, 2), (2, 3), (3, 4)]))\n    print(pairwise_addition([(1, 2), (1, 2)]))\n\n\nif __name__ == '__main__':\n    main()",
    "from collections import defaultdict\n\ndef pairwise_addition(tuple_list):\n    \"\"\"\n    Given a list of tuples, find the pairwise addition of the elements of the list.\n    Note: The addition of two elements must be the same.\n    :type tuple_list: list of tuple\n    :rtype: list of tuple\n    \"\"\"\n    result = defaultdict(list)\n    for i, t in enumerate(tuple_list):\n        for j, t2 in enumerate(tuple_list):\n            if i!= j:\n                result[tuple_list[i]].append(tuple_list[j])\n    return list(result.values())",
    "def find_pairwise_add(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [ [a+b for a in t1] for t1 in tuples ]\n\ndef find_pairwise_add_2(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for a in t1] for t1 in tuples]\n\ndef find_pairwise_add_3(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for b in t2] for t1 in tuples for t2 in tuples]\n\ndef find_pairwise_add_4(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for a in t1] for t1 in tuples for b in t2 for t2 in tuples]\n\ndef find_pairwise_add_5(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for b in t2] for t1 in tuples for a in t1 for t2 in tuples]\n\ndef find_pairwise_add_6(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for a in t1] for t1 in tuples for b in t2 for t2 in tuples]\n\ndef find_pairwise_add_7(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[a+b for a in t1] for t1 in tuples for b in t2 for t2 in tuples]",
    "import unittest\n\n\nclass Solution:\n    def get_pairs(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not nums:\n            return []\n\n        pairs = []\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                pairs.append((nums[i][0] + nums[j][0], nums[i][1] + nums[j][1]))\n\n        return pairs\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairs-with-addition/solution/\n\n# Trie\n# DFS\n# Time:  O(N)\n# Space: O(N)\n# 11ms 99.79%\nclass Solution {\n    public List<List<Integer>> getPairs(List<List<Integer>> nums) {\n        if (nums == null || nums.size() == 0) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        TrieNode root = new TrieNode();\n        for (List<Integer> num : nums) {\n            root.add(num.get(0));\n            root.add(num.get(1));\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            TrieNode node = root;\n            for (int j = i + 1; j < nums.size(); j++) {\n                node = node.getChild(nums.get(i).get(0) + nums.get(j).get(0));\n                if (node == null) break;\n                node.add(nums.get(i).get(1) + nums.get(j).get(1));\n            }\n            res.add(new ArrayList",
    "class Solution:\n    def add(self, a: List[int], b: List[int]) -> List[int]:\n        ans = []\n        for i in range(len(a)):\n            for j in range(len(b)):\n                ans.append(a[i] + b[j])\n        return ans",
    "def pairwise_add(tuple_list):\n    \"\"\"\n    Input:\n        tuple_list: an iterable of tuples\n    Output:\n        A list of tuples with the result of the addition of the elements of the given tuples\n    \"\"\"\n    return [(i + j) for i, j in zip(tuple_list[0], tuple_list[1])]\n\nif __name__ == '__main__':\n    tuple_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(pairwise_add(tuple_list))",
    "class Solution:\n    # @param {List[List[int]]} matrix\n    # @return {List[List[int]]}\n    def matrixAdd(self, matrix):\n        n = len(matrix)\n        m = len(matrix[0])\n        result = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 or j == 0:\n                    result[i][j] = matrix[i][j]\n                elif i == n-1 or j == m-1:\n                    result[i][j] = matrix[i][j] + result[i-1][j-1]\n                else:\n                    result[i][j] = matrix[i][j] + result[i-1][j] + result[i][j-1]\n        return result\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    print(Solution().matrixAdd(matrix))",
    "import math\n\ndef pairwise_add(tuples):\n    return [(a + b) for a, b in tuples]\n\n\ndef test_pairwise_add():\n    assert pairwise_add([(1, 2), (3, 4), (5, 6)]) == [1, 3, 5, 7, 9]\n\n\nif __name__ == '__main__':\n    print(pairwise_add([(1, 2), (3, 4), (5, 6)]))",
    "from collections import namedtuple\n\ndef sum_tuples(t1, t2):\n    \"\"\"\n    Given two tuples, return the pairwise addition of the elements.\n    \"\"\"\n    return namedtuple('sum_tuples', ['a', 'b'])(\n        sum(t1[i] + t2[i] for i in range(len(t1))),\n        sum(t1[i] + t2[i] for i in range(len(t2)))\n    )\n\nt1 = (1, 2)\nt2 = (3, 4)\nt3 = (5, 6)\n\nprint(sum_tuples(t1, t2))\nprint(sum_tuples(t3, t2))",
    "def find_pairs(t1, t2):\n    \"\"\"\n    :type t1: List[int]\n    :type t2: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [t1[i]+t2[i] for i in range(len(t1))]\n\nif __name__ == '__main__':\n    t1 = [1, 2, 3]\n    t2 = [4, 5, 6]\n    print(find_pairs(t1, t2))",
    "def pairwise_addition(tuples):\n    \"\"\"\n    Args:\n        tuples (list): List of tuples, where each tuple is of length 2.\n    Returns:\n        list: List of tuples, where each tuple is of length 2.\n    \"\"\"\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append((tuples[i][0] + tuples[i + 1][0], tuples[i][1] + tuples[i + 1][1]))\n    result.append((tuples[-1][0] + tuples[0][0], tuples[-1][1] + tuples[0][1]))\n    return result\n\n\nif __name__ == '__main__':\n    tuples = [\n        (3, 5),\n        (2, 6),\n        (4, 1),\n        (1, 2),\n        (8, 9),\n        (7, 8)\n    ]\n    print(pairwise_addition(tuples))",
    "import unittest\n\n\nclass Solution(object):\n    def pairwise_sum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums = sorted(nums)\n        ans = [[0] * len(nums) for _ in range(len(nums))]\n        for i in range(len(nums) - 1):\n            ans[i][i + 1] = nums[i]\n            for j in range(i + 2, len(nums)):\n                ans[i][j] = ans[i][j - 1] + nums[j]\n        return ans\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition/solution/\n\n# Approach 1: Brute Force\n# Complexity Analysis\n# Time Complexity: O(N^2)\n# Space Complexity: O(N^2)\n# To find the pairwise sum of the elements of the given tuple, we will consider each element of the tuple\n# and calculate the sum of all the elements of the tuple and store it in a matrix.\n# In order to find the pairwise sum of the elements of the given tuple, we will consider each element of the tuple and calculate the sum of all the elements of the tuple and store it in a matrix.\n# We will store the sum of all the elements of the tuple in a matrix.\n\n# 1) For each element of the tuple, calculate the sum of all the elements of the tuple and store it in a matrix.\n# 2) For each element of the tuple, calculate the sum of all the elements of the tuple and store it in a matrix.\n# 3) Compare the sum of all the elements of the tuple with the sum of all the elements of the tuple one by one.\n# 4) If the sum of all the elements of the tuple is equal to the sum of all the elements of the tuple one by one,\n# then we can say",
    "import collections\n\nclass Solution(object):\n    def add(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        result = collections.defaultdict(list)\n        for i, num in enumerate(nums1):\n            result[num + nums2[i]].append(i)\n        return [i for i in result.values()]\n\nif __name__ == \"__main__\":\n    print Solution().add([1, 2, 3, 4], [2, 3, 4, 5])\n    print Solution().add([1, 2, 3, 4], [3, 4, 5, 6])",
    "def pairwise_add(tuples):\n\tresult = [tuple(0)]\n\tfor i in range(1, len(tuples)):\n\t\tresult.append(tuple(result[i-1][0] + tuples[i][0]))\n\treturn result\n\ndef main():\n\tt = [tuple(i) for i in range(10)]\n\tprint(tuple(0))\n\tprint(tuple(10))\n\tprint(tuple(20))\n\tprint(tuple(30))\n\tprint(tuple(40))\n\tprint(tuple(50))\n\tprint(tuple(60))\n\tprint(tuple(70))\n\tprint(tuple(80))\n\tprint(tuple(90))\n\tprint(tuple(100))\n\tprint(tuple(120))\n\tprint(tuple(130))\n\tprint(tuple(140))\n\tprint(tuple(150))\n\tprint(tuple(160))\n\tprint(tuple(170))\n\tprint(tuple(180))\n\tprint(tuple(190))\n\tprint(tuple(200))\n\tprint(tuple(210))\n\tprint(tuple(220))\n\tprint(tuple(230))\n\tprint(tuple(240))\n\tprint(tuple(250))\n\tprint(tuple(260))\n\tprint(tuple(270))\n\tprint(tuple(280))\n\tprint(tuple(290))\n\tprint(tuple(300))\n\tprint(tuple(310))\n\tprint(tuple(320))\n\tprint(tuple(330))\n\tprint(tuple(340))\n\tprint(tuple(350))\n\tprint(tuple(360))\n\tprint(tuple(370))\n\tprint(tuple(380))\n\tprint(tuple(390))\n\tprint(tuple(400))\n\tprint(tuple(410))\n\tprint(tuple(420))\n\tprint(tuple(430))\n\tprint(tuple(440))\n\tprint(tuple(450))\n\tprint(tuple(460))\n\tprint(tuple(470))",
    "import unittest\n\ndef pairwise_add(tuples):\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i == j:\n                continue\n            yield (tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1])\n\nclass Test(unittest.TestCase):\n    def test_pairwise_add(self):\n        tuples = [('A', 1), ('B', 2), ('C', 3), ('D', 4)]\n        self.assertEqual(sorted(pairwise_add(tuples)), sorted([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]))\n\nif __name__ == '__main__':\n    unittest.main()",
    "from collections import namedtuple\n\ndef pairwise_add(tuples):\n    \"\"\"\n    :type tuples: Iterable[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    pairs = []\n    for tup1, tup2 in zip(tuples, tuples[1:]):\n        pairs.append((tup1 + tup2, tup2 + tup1))\n    return pairs\n\nif __name__ == \"__main__\":\n    t1 = (1, 2)\n    t2 = (2, 3)\n    t3 = (3, 4)\n    t4 = (4, 5)\n    t5 = (5, 6)\n    t6 = (6, 7)\n    t7 = (7, 8)\n    t8 = (8, 9)\n    t9 = (9, 10)\n    t10 = (10, 11)\n    t11 = (11, 12)\n    t12 = (12, 13)\n    t13 = (13, 14)\n    t14 = (14, 15)\n    t15 = (15, 16)\n    t16 = (16, 17)\n    t17 = (17, 18)\n    t18 = (18, 19)\n    t19 = (19, 20)\n    t20 = (20, 21)\n    t21 = (21, 22)\n    t22 = (22, 23)\n    t23 = (23, 24)\n    t24 = (24, 25)\n    t25 = (25, 26)\n    t26 = (26, 27)\n    t27 = (27, 28)\n    t28 = (28, 29)\n    t29 = (29, 30)\n    t30 = (30, 31)\n    t31 = (31, 32)\n    t32 = (32, 33)\n    t33 = (33, 34)\n    t34 = (34, 35)\n    t35 = (35, 36)\n    t36 = (36, 37)\n    t37 = (37, 38)\n    t38 = (38, 39)\n    t39 = (39, 40",
    "def pairwise_add(tuple_list):\n    \"\"\"\n    Pairwise add the elements of the given tuple list.\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    # Your code here\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            result.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return result\n\nif __name__ == '__main__':\n    assert pairwise_add([(1, 2), (3, 4)]) == [(4, 6), (7, 10)]",
    "from collections import defaultdict\n\ndef pairwise_addition(tuples):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n    :type tuples: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    result = defaultdict(list)\n    for t in tuples:\n        for i in range(len(t)):\n            for j in range(i):\n                result[t[i] + t[j]].append((t[i], t[j]))\n    return list(result.values())\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(pairwise_addition(tuples))",
    "from collections import defaultdict\nfrom operator import add\n\n\ndef pairwise_add(tuples):\n    \"\"\"\n    Write a function to pairwise add the elements of the given tuples.\n\n    For example,\n\n    pairwise_add([(1, 2), (3, 4), (5, 6)]) => ((6, 8), (9, 12))\n    pairwise_add([(1, 2), (3, 4)]) => ((5, 7), (9, 11))\n    pairwise_add([(1, 2), (3, 4), (5, 6)]) => ((6, 8), (9, 12))\n    pairwise_add([(1, 2), (3, 4), (5, 6), (7, 8)]) => ((9, 12), (15, 20))\n    \"\"\"\n    if not tuples:\n        return None\n    result = defaultdict(list)\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result[(tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1])].append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n\n\nif __name__ == '__main__':\n    tuples = [\n        (1, 2),\n        (3, 4),\n        (5, 6),\n        (7, 8),\n        (9, 10),\n        (11, 12)\n    ]\n    print(pairwise_add(tuples))",
    "import unittest\n\n\nclass Solution:\n    def pairwise_sum(self, tuples):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[sum(tuple), i] for tuple, i in zip(tuples, range(len(tuples)))]\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([[2, 3, 4, 5], [1, 2, 3, 4]], [[8, 15], [9, 14]])\n\n    def _test(self, tuples, expected):\n        actual = Solution().pairwise_sum(tuples)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def pairwise_add(a, b):\n    return (a[0] + b[0], a[1] + b[1])\n\nif __name__ == \"__main__\":\n    t = (1, 3)\n    t = (3, 1)\n    print(pairwise_add(t, (2, 4)))\n    print(pairwise_add((1, 3), (3, 1)))",
    "def pairwise_add(tuples):\n    \"\"\"\n    Return a list of lists.\n    Each element in the list is a list of the pairwise sum of the elements in the tuple.\n    \"\"\"\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i):\n            result.append([tuples[i][0]+tuples[j][0], tuples[i][1]+tuples[j][1]])\n    return result\n\ndef test_pairwise_add():\n    assert pairwise_add([(1,2),(2,3),(3,4)]) == [[(1+2),(2+3)], [(2+3),(3+4)], [(3+4),(4+1)]]\n    assert pairwise_add([(1,2),(2,3),(3,4)]) == [[(1+2),(2+3)], [(2+3),(3+4)], [(3+4),(4+1)]]\n    assert pairwise_add([(1,2),(2,3),(3,4)]) == [[(1+2),(2+3)], [(2+3),(3+4)], [(3+4),(4+1)]]\n    assert pairwise_add([(1,2),(2,3),(3,4)]) == [[(1+2),(2+3)], [(2+3),(3+4)], [(3+4),(4+1)]]\n\nif __name__ == \"__main__\":\n    test_pairwise_add()",
    "def pairwise_add(tuple_list):\n    return [tuple(map(sum, p)) for p in zip(*tuple_list)]\n\n\nif __name__ == '__main__':\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('a', 'b'), ('c', 'd'), ('e', 'f')]\n    t = [('a', 'b'), ('c', 'd'), ('e', '",
    "def find_pairwise_addition(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result",
    "def add_tuples(tuples):\n    return [tuple(map(sum, zip(a, b))) for a, b in tuples]\n\ndef add_tuples_2(tuples):\n    return [tuple(a + b for a, b in zip(a, b)) for a, b in tuples]\n\ndef add_tuples_3(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_4(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_5(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_6(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_7(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_8(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_9(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_10(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_11(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_12(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_13(tuples):\n    return [(a + b, c + d) for a, b, c, d in tuples]\n\ndef add_tuples_14(tuples):\n    return [(a + b, c + d) for a,",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __iter__(self):\n        return iter(self.x)\n\nclass Solution(object):\n    def pairwiseAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        res = []\n        for i in range(len(tuples) - 1):\n            for j in range(i + 1, len(tuples)):\n                res.append(Tuple(tuples[i].x + tuples[j].x))\n        return res\n\nclass Solution2(object):\n    def pairwiseAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        res = []\n        for i in range(len(tuples) - 1):\n            res.append(tuples[i].x + tuples[i+1].x)\n        return res",
    "from collections import defaultdict\n\ndef find_pairwise(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    # build a dictionary to store the result\n    res = defaultdict(list)\n    for t in tuples:\n        a, b = t\n        res[a].append(b)\n        res[b].append(a)\n    # build the list of pairs\n    return [(a, b) for a, b in res.items() if len(res[a]) == 2]",
    "def find_pairwise_addition(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    return sum(map(lambda x, y: x+y, tuple_list))\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (3, 4)]\n    print(find_pairwise_addition(tuple_list))\n    tuple_list = [(1, 2), (3, 4, 5)]\n    print(find_pairwise_addition(tuple_list))",
    "import collections\n\ndef add_tuples(tuples):\n    \"\"\"\n    :type tuples: collections.Iterable[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    result = []\n    for t1, t2 in tuples:\n        result.append((t1, t2))\n    return result\n\n\nif __name__ == \"__main__\":\n    tuples = (('A', 'B'), ('C', 'D'), ('E', 'F'))\n    print(add_tuples(tuples))\n    tuples = (('A', 'B'), ('C', 'D'))\n    print(add_tuples(tuples))\n    tuples = (('A', 'B'), ('C', 'D'), ('E', 'F'))\n    print(add_tuples(tuples))",
    "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def __add__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\nclass Solution:\n    def add(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        self.result = []\n        self.dic = {}\n        self.tot = 0\n        for t in tuples:\n            if t.y == 0:\n                self.tot += t.x\n                self.dic[t.x] = t.y\n            else:\n                self.tot += t.x + t.y\n                self.dic[t.x] = t.y + self.dic[t.x]\n        for k in self.dic:\n            self.result.append(Tuple(k, self.dic[k]))\n        return self.result\n\na = Solution()\na.add([(1,2),(2,3),(3,4)])\nprint(a.result)",
    "def pairwise_add(t):\n    \"\"\"\n    :type t: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # O(n^2) time. O(n^2) space.\n    # TODO: write your code here\n    # http://stackoverflow.com/questions/32982921/python-pairwise-addition-of-tuples\n    t = list(t)\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            t[i] += t[j]\n    return t",
    "from collections import namedtuple\n\ndef pairwise_add(tup):\n    t = namedtuple('t', 'a b')\n    return [(a+b) for a, b in zip(tup, tup)]",
    "def pairwiseAdd(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [list(t) for t in zip(*tuples)]\n\nclass Solution:\n    def pairwiseAdd(self, tuples: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        result = []\n        for t1, t2 in zip(tuples, pairwiseAdd(tuples)):\n            for i in range(len(t1)):\n                t1[i] += t2[i]\n            result.append(t1)\n        return result",
    "import unittest\n\nclass Solution(object):\n    def pairwiseAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        def add(t1, t2):\n            return [a+b for a, b in zip(t1, t2)]\n        return reduce(add, tuples, [])\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition-of-elements-of-tuples/solution/\n\n# 10ms 99.52%\nclass Solution {\n    public List<List<Integer>> pairwiseAdd(List<List<Integer>> a) {\n        List<List<Integer>> ans = new ArrayList<>();\n        for (List<Integer> i : a) {\n            ans.add(new ArrayList<>());\n        }\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j < a.get(i).size() - 1; j++) {\n                int sum = a.get(i).get(j) + a.get(i).get(j + 1);\n                ans.get(i).add(sum);\n            }\n        }\n        return ans;\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public List<List<Integer>> pairwiseAdd(List<List<Integer>> a) {\n        List<List<Integer>> ans = new ArrayList<>();\n        for (int i = 0; i < a.size(); i++) {\n            ans.add(new ArrayList<>());\n        }\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j < a.get(i).size() - 1; j++) {\n                int sum = a.get(i).get(j) + a",
    "import collections\n\ndef pairwise_add(tuples):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n\n    Example:\n    Given [1, 2, 3], return [2, 4, 6], [1, 3, 5].\n    \"\"\"\n    return collections.Counter(zip(*tuples)).values()\n\n\nif __name__ == \"__main__\":\n    tuples = [\n        (1, 2),\n        (3, 4),\n        (5, 6),\n    ]\n    print pairwise_add(tuples)",
    "def pairwise_add(t1, t2):\n    \"\"\"\n    :type t1: List[int]\n    :type t2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] + t2[i])\n    return result\n\nif __name__ == '__main__':\n    t1 = [1, 2, 3]\n    t2 = [4, 5, 6]\n    print pairwise_add(t1, t2)\n    t1 = [1, 2]\n    t2 = [3, 4]\n    print pairwise_add(t1, t2)\n    t1 = [1, 2, 3]\n    t2 = [4, 5, 6]\n    print pairwise_add(t1, t2)",
    "def sum_tuples(tuples):\n    return sum(tuple(x + y for x, y in pair))\n\ndef test_sum_tuples():\n    assert sum_tuples([(1, 2), (3, 4)]) == 10\n    assert sum_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]) == 18\n\nif __name__ == '__main__':\n    test_sum_tuples()",
    "import unittest\n\n\nclass Solution(object):\n    def pairwise_add(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) < 2:\n            return nums\n\n        res = []\n        for i in range(len(nums) - 1):\n            res.append(nums[i] + nums[i + 1])\n        return res\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition/solution/\n\n# 4ms\nclass Solution {\n    public List<Integer> pairwiseAdd(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < nums.length - 1; i++) {\n            res.add(nums[i] + nums[i + 1]);\n        }\n        return res;\n    }\n}\n\n# 7ms\nclass Solution {\n    public List<Integer> pairwiseAdd(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < nums.length - 1; i++) {\n            res.add(nums[i] + nums[i + 1]);\n        }\n        return res;\n    }\n}\n'''",
    "class Solution(object):\n    def add(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return nums\n        result = [[0] * n for _ in xrange(n)]\n        for i in xrange(n):\n            for j in xrange(i):\n                result[i][j] = result[j][i] = nums[i][j]\n        for i in xrange(n):\n            for j in xrange(i):\n                for k in xrange(j):\n                    result[i][k] += result[j][k]\n        return result",
    "class Solution(object):\n    def plusOne(self, tuples):\n        \"\"\"\n        :type tuples: List[tuple]\n        :rtype: List[tuple]\n        \"\"\"\n        result = []\n        for t in tuples:\n            carry = 1\n            for i in range(len(t)):\n                if i == len(t) - 1:\n                    carry = carry * 10 + 1\n                else:\n                    carry = carry * 10 + t[i + 1]\n                t[i] = carry % 10\n                carry = carry / 10\n            if carry!= 0:\n                result.append(t + (carry,))\n            else:\n                result.append(t)\n        return result",
    "import unittest\n\n\ndef add_tuples(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    return [(sum(t), t) for t in tuples]\n\n\nclass Solution:\n    def pairwiseAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[tuple]\n        :rtype: List[tuple]\n        \"\"\"\n        return add_tuples(tuples)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([(1, 2)], [(3, 4)])\n\n    def _test(self, tuples, expected):\n        actual = Solution().pairwiseAdd(tuples)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "def pairwise_add(t):\n    \"\"\"\n    t is a tuple of tuples.\n    \"\"\"\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            t[i] += (t[j][i], t[j][j])\n    return t\n\nif __name__ == \"__main__\":\n    t = (('a', 'b'), ('c', 'd'), ('e', 'f'))\n    print pairwise_add(t)",
    "def find_pairwise_addition(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    n = len(tuple_list)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += tuple_list[i][0] + tuple_list[j][0]\n    return result\n\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(find_pairwise_addition(tuple_list))",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [x + y for x, y in zip(a, b)]",
    "def pairwise_add(t):\n    \"\"\"\n    :type t: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    t = sorted(t)\n    for i in range(len(t) - 1):\n        t[i] = (t[i][0] + t[i+1][0], t[i][1] + t[i+1][1])\n    return t\n\ndef test_pairwise_add():\n    assert pairwise_add([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 6), (5, 4)]",
    "def pairwise_add(t):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n\n    Example:\n    >>> pairwise_add([(1, 2), (3, 4), (5, 6)])\n    [(2, 4), (6, 8), (10, 12)]\n    >>> pairwise_add([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [(2, 4), (6, 8), (10, 12), (14, 16)]\n    >>> pairwise_add([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n    [(2, 4), (6, 8), (10, 12), (14, 16), (18, 20)]\n    \"\"\"\n    n = len(t)\n    ans = [t[0]]\n    for i in range(1, n):\n        ans.append(t[i] + ans[i - 1])\n    return ans\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# https://leetcode.com/problems/pairs/\n\n\nclass Solution:\n    def getPair(self, t1, t2):\n        \"\"\"\n        :type t1: List[int]\n        :type t2: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(t1)!= len(t2):\n            return []\n        res = [list(), list()]\n        for i in range(len(t1)):\n            res[0][i] = t1[i] + t2[i]\n            res[1][i] = t1[i] - t2[i]\n        return res\n\n    def getPairs(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                res.append(self.getPair([nums1[i]], [nums2[j]]))\n        return res\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.getPairs(nums1, nums2)",
    "import unittest\n\n\ndef pairwise_add(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    if not tuple_list:\n        return []\n    result = []\n    for t in tuple_list:\n        if not t:\n            continue\n        for i in range(len(t)):\n            result.append(t[:i] + (t[i] + t[i + 1:]) if i < len(t) - 1 else t + (t[i] + t[i + 1:]))\n    return result\n\n\nclass TestPy(unittest.TestCase):\n    def test_pairwise_add(self):\n        self.assertEqual(pairwise_add([(1, 2), (3, 4)]), [(1, 3), (2, 4)])\n        self.assertEqual(pairwise_add([(1, 2), (3, 4), (5, 6)]), [(1, 3), (2, 4), (5, 6)])\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "# https://discuss.leetcode.com/topic/38757/java-java-solution-with-explanation\n# http://blog.csdn.net/u011759505/article/details/41641929\n\nclass Solution(object):\n    def pairwiseAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        result = []\n        for i in range(len(tuples)):\n            for j in range(i+1, len(tuples)):\n                result.append([tuples[i][k]+tuples[j][k] for k in range(len(tuples[i]))])\n        return result\n\nif __name__ == '__main__':\n    t = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    s = Solution()\n    print(s.pairwiseAdd(t))",
    "# Example\n# For example, given a tuple of (1,2,3), the pairwise addition is:\n# ((1,1,1), (2,3,3), (1,2,3))\n# Note:\n# Elements in a tuple cannot be duplicated.\n# The length of a tuple is at most 100.\n# Example 1:\n# Input: (1,2,3)\n# Output: (1,3,3)\n# Example 2:\n# Input: (1,2,3,4)\n# Output: (1,5,5,5)\n# Example 3:\n# Input: (1,2,3,4,5)\n# Output: (1,7,7,7,7)\n\n# score:100(4ms)\n# time:O(n)\n# space:O(n)\nclass Solution(object):\n    def findPairWise(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        result = []\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                result.append([nums[i], nums[j]])\n        return result",
    "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        a.sort()\n        b.sort()\n        return [a[i]+b[i] for i in range(len(a))]",
    "from collections import namedtuple\nfrom typing import List\n\ndef pairwise_add(tuples: List[namedtuple]) -> List[namedtuple]:\n    for i, t1 in enumerate(tuples):\n        for j, t2 in enumerate(tuples[:i+1], i+1):\n            tuples[i][t1.__class__.__name__] += t2[t1.__class__.__name__]\n    return tuples\n\nif __name__ == \"__main__\":\n    tuples = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n        (6, 7),\n        (7, 8),\n        (8, 9),\n        (9, 10),\n        (10, 11),\n        (11, 12),\n        (12, 13),\n        (13, 14),\n        (14, 15),\n        (15, 16),\n        (16, 17),\n        (17, 18),\n        (18, 19),\n        (19, 20),\n        (20, 21),\n        (21, 22),\n        (22, 23),\n        (23, 24),\n        (24, 25),\n        (25, 26),\n        (26, 27),\n        (27, 28),\n        (28, 29),\n        (29, 30),\n        (30, 31),\n        (31, 32),\n        (32, 33),\n        (33, 34),\n        (34, 35),\n        (35, 36),\n        (36, 37),\n        (37, 38),\n        (38, 39),\n        (39, 40),\n        (40, 41),\n        (41, 42),\n        (42, 43),\n        (43, 44),\n        (44, 45),\n        (45, 46),\n        (46, 47),\n        (47, 48),\n        (48, 49),\n        (49, 50),\n        (50, 51),\n        (51, 52),\n        (52, 53),\n        (53, 54),\n        (54, 55),\n        (55,",
    "import unittest\n\nclass TestCases(unittest.TestCase):\n\n    def test_pairwise_addition(self):\n        self.assertEqual(pairwise_addition([(1, 2), (3, 4)]), [(2, 4), (5, 6)])\n        self.assertEqual(pairwise_addition([(1, 2), (3, 4), (1, 2)]), [(2, 4), (3, 6)])\n        self.assertEqual(pairwise_addition([(1, 2), (3, 4), (1, 2), (1, 2)]), [(2, 4), (3, 6)])\n\n    def test_pairwise_addition_with_empty_tuples(self):\n        self.assertEqual(pairwise_addition([(1, 2), (), (1, 2)]), [(2, 4), (3, 6)])\n        self.assertEqual(pairwise_addition([(1, 2), (3, 4), (), (1, 2)]), [(2, 4), (3, 6)])\n        self.assertEqual(pairwise_addition([(1, 2), (3, 4), (), (1, 2), (1, 2)]), [(2, 4), (3, 6)])\n\nif __name__ == '__main__':\n    unittest.main()",
    "def pairwise_add(tuples):\n    \"\"\"\n    Input: A list of tuples.\n    Output: A list of tuples.\n    \"\"\"\n    return [(t1 + t2) for t1, t2 in tuples]\n\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(pairwise_add(tuples))",
    "import collections\n\nclass Solution(object):\n    def add(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(a)\n        m = len(b)\n        if n!= m:\n            return []\n        ans = []\n        for i in range(n):\n            ans.append(a[i] + b[i])\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add([1, 2, 3], [1, 2, 3]))\n    print(sol.add([1, 2, 3], [1, 2, 4]))\n    print(sol.add([1, 2, 3], [4, 5, 6]))\n    print(sol.add([1, 2, 3], [4, 5, 7]))",
    "from collections import namedtuple\n\nA = namedtuple('A', ['a', 'b', 'c'])\nB = namedtuple('B', ['b', 'c', 'd'])\n\ndef pairwise_addition(tuple_list):\n    \"\"\"\n    Given a list of tuples, return the pairwise addition of the elements.\n\n    Time complexity: O(n^2).\n    Space complexity: O(n).\n    \"\"\"\n    if not tuple_list:\n        return 0\n\n    A = tuple_list[0]\n    B = tuple_list[1]\n\n    for i in range(2, len(tuple_list)):\n        A = A.add(tuple_list[i].a)\n        B = B.add(tuple_list[i].b)\n        A = A.add(tuple_list[i].c)\n        B = B.add(tuple_list[i].d)\n\n    return A.sum() + B.sum()",
    "import collections\n\nclass Tuple(object):\n    def __init__(self, *args):\n        self._tuple = args\n\n    def __repr__(self):\n        return repr(self._tuple)\n\n    def __iter__(self):\n        return iter(self._tuple)\n\n    def __getitem__(self, key):\n        return self._tuple[key]\n\ndef tuple_addition(tuple_list):\n    \"\"\"\n    :type tuple_list: list of tuple\n    :rtype: list of tuple\n    \"\"\"\n    if not tuple_list:\n        return []\n    if len(tuple_list) == 1:\n        return tuple_list\n    tuple_list.sort()\n    result = collections.defaultdict(list)\n    for i in range(len(tuple_list)):\n        for j in range(i, len(tuple_list)):\n            if tuple_list[i] < tuple_list[j]:\n                result[tuple_list[i]].append(tuple_list[j])\n                result[tuple_list[j]].append(tuple_list[i])\n    return [Tuple(sorted(v)) for v in result.values()]\n\nif __name__ == '__main__':\n    tuple_list = [Tuple(1,2,3), Tuple(4,5,6), Tuple(7,8,9)]\n    tuple_list = tuple_addition(tuple_list)\n    print tuple_list",
    "class Solution(object):\n    def add(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        i = 0\n        while i < len(a) and i < len(b):\n            res.append(a[i] + b[i])\n            i += 1\n        while i < len(a):\n            res.append(a[i])\n            i += 1\n        while i < len(b):\n            res.append(b[i])\n            i += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().add([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
    "# https://oj.leetcode.com/problems/pairwise-addition/\n# tags: medium, array, numeric, pairwise-addition, sum\n\nclass Solution(object):\n    def pairwiseAdd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        return [x + y for x, y in zip(nums[:-1], nums[1:])]",
    "from collections import namedtuple\n\ndef sum_tuples(tuples):\n    \"\"\"\n    sum_tuples(tuples) -> (sum, count)\n    \n    Sum the elements of the given tuples.\n    \n    >>> sum_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n    (15, 4)\n    \"\"\"\n    sum, count = 0, 0\n    for t in tuples:\n        sum += t[0] + t[1]\n        count += 1\n    return sum, count\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    sum, count = sum_tuples(tuples)\n    print sum, count",
    "import collections\n\ndef pairwise_add(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append([])\n        for j in range(i + 1, len(tuples)):\n            result[i].append(tuples[i][j] + tuples[j][i])\n    return result\n\nif __name__ == '__main__':\n    tuples = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16],\n    ]\n    print(pairwise_add(tuples))",
    "import operator\n\ndef find_pairwise_addition(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            tuples[i] = (tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1])\n    return tuples\n\ndef main():\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(find_pairwise_addition(tuples))\n\nif __name__ == '__main__':\n    main()",
    "# https://leetcode.com/problems/pairwise-addition/discuss/139872/Python-DP-solution\n\nclass Solution(object):\n    def pairwiseAdd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return nums\n\n        res = [0] * (n+1)\n        res[0] = 0\n        res[1] = 0\n        for i in xrange(2, n+1):\n            res[i] = res[i-1] + res[i-2]\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.pairwiseAdd([1,2,3,4,5])\n    print s.pairwiseAdd([-3,-2,-1,0,1,2,3,4,5,6])",
    "def pairwise_add(tuples):\n    \"\"\"\n    Input:\n        tuples - a list of tuples, each tuple is a list of integers\n    Output:\n        A list of tuples, each tuple is a list of integers, the sum of each tuple's elements.\n    Examples:\n        >>> pairwise_add([(1, 2), (3, 4)])\n        [(4, 6), (7, 10)]\n    \"\"\"\n    return [tuple(map(sum, pair)) for pair in zip(*tuples)]",
    "# https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n\ndef pairwise_addition(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # A tuple is a list of numbers\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars.com/kata/pairwise-addition-of-tuples/train/python\n    # https://www.codewars",
    "def find_pairwise_addition(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    ret = 0\n    for i in range(len(tuples)-1):\n        ret += tuples[i][0] + tuples[i+1][0]\n        ret += tuples[i][1] + tuples[i+1][1]\n    return ret",
    "import unittest\n\n\nclass TestAddPairwise(unittest.TestCase):\n    def test_add_pairwise(self):\n        self.assertEqual(((1, 2), (3, 4)), add_pairwise((1, 2), (3, 4)))\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "import collections\n\ndef add(a, b):\n    return collections.Counter(a + b)\n\nif __name__ == \"__main__\":\n    assert add([1, 2, 3], [3, 4, 5]) == {1: 2, 2: 4, 3: 6}\n    assert add([1, 2, 3], [1, 3, 5]) == {1: 4, 2: 5, 3: 6}\n    assert add([1, 2, 3], [4, 5, 6]) == {1: 5, 2: 7, 3: 10}",
    "from collections import defaultdict\nfrom itertools import combinations\n\n\ndef find_pairwise_addition(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    # Use a defaultdict to store the result\n    # The key is the tuple, the value is a list of tuples\n    result = defaultdict(list)\n\n    # Use combinations to get all possible pairwise tuples\n    # Each tuple is a combination of the elements in the tuples\n    for t in combinations(tuples, 2):\n        # Get the sum of the elements in the tuple\n        sum_tuple = sum(t)\n\n        # For each combination of the elements in the tuple\n        # Add the sum of the elements in the tuple to the result\n        for i in range(len(t)):\n            result[t[i]].append(t[:i] + (t[i] + sum_tuple,) + t[i + 1:])\n\n    return [tuple(sorted(r)) for r in result.values()]\n\n\nif __name__ == '__main__':\n    tuples = [\n        (1, 2, 3),\n        (2, 3, 4),\n        (3, 4, 5),\n        (4, 5, 6),\n        (5, 6, 7),\n        (6, 7, 8),\n        (7, 8, 9),\n        (8, 9, 10),\n        (9, 10, 11),\n        (10, 11, 12),\n        (11, 12, 13),\n        (12, 13, 14),\n        (13, 14, 15),\n        (14, 15, 16),\n        (15, 16, 17),\n        (16, 17, 18),\n        (17, 18, 19),\n        (18, 19, 20),\n        (19, 20, 21),\n        (20, 21, 22),\n        (21, 22, 23),\n        (22, 23, 24),\n        (23, 24, 25),\n        (24, 25, 26),\n        (25, 26, 27),\n        (26, 27, 28),\n        (27, 28, 29),",
    "class Solution(object):\n    def add(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not a or not b:\n            return []\n        ans = []\n        for i in range(len(a)):\n            for j in range(len(b)):\n                ans.append(a[i] + b[j])\n        return ans",
    "# https://leetcode.com/problems/pairwise-addition-of-tuples/\n# O(n^2)\n# time complexity: O(n^2)\n# space complexity: O(1)\n# https://discuss.leetcode.com/topic/90772/java-solution-with-explanation-and-analysis-using-dfs-backtracking\n# https://discuss.leetcode.com/topic/90772/java-solution-with-explanation-and-analysis-using-dfs-backtracking\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer[][]}\n    def pairwiseAdd(self, nums):\n        if not nums:\n            return []\n\n        stack = []\n        result = []\n        for i in range(len(nums)):\n            while stack and stack[-1] + nums[i] < nums[i]:\n                stack.pop()\n            stack.append(nums[i])\n        while stack:\n            result.append(stack.pop())\n\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.pairwiseAdd([1,2,3,4,5]))\n    print(solution.pairwiseAdd([1,2,3,4,5,6,7,8,9]))\n    print(solution.pairwiseAdd([1,2,3,4,5,6,7,8,9,10]))",
    "from collections import defaultdict\n\ndef pairwise_add(tuples):\n    \"\"\"\n    >>> pairwise_add([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [(1, 3), (5, 7), (3, 5), (1, 8)]\n    >>> pairwise_add([(1, 2), (3, 4), (5, 6)])\n    []\n    \"\"\"\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def pairwise_add(a,b):\n    for i in range(len(a)):\n        a[i] = (a[i][0] + b[i][0], a[i][1] + b[i][1])\n    return a\n\ndef print_pairwise_add(a):\n    for i in range(len(a)):\n        print(a[i])\n\ndef pairwise_add_test():\n    a = [\n        (1,2),\n        (2,3),\n        (3,4),\n        (4,5),\n        (5,6)\n    ]\n    b = [\n        (6,7),\n        (7,8),\n        (8,9),\n        (9,10),\n        (10,11)\n    ]\n    \n    a = pairwise_add(a,b)\n    print_pairwise_add(a)\n\npairwise_add_test()",
    "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __add__(self, other):\n        return Tuple(self.x + other.x)\n\n\nclass Solution(object):\n    def tupleAdd(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        result = []\n        for t in tuples:\n            result.append(tuple(map(lambda x: x + t.x, result)))\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    t = (1, 2, 3, 4)\n    print s.tupleAdd([t, (5, 6), (7, 8), (9, 10)])\n    print s.tupleAdd([t, (5, 6), (7, 8), (9, 10)])",
    "# https://leetcode.com/problems/pairwise-addition-of-tuples/discuss/133924/Python-Solution\n\nclass Solution:\n    def pairwiseAdd(self, a: List[int]) -> List[int]:\n        ans = []\n        for i in range(len(a)):\n            for j in range(i):\n                ans.append(a[i] + a[j])\n        return ans",
    "import unittest\n\nclass Solution(object):\n    def add(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(a)!= len(b):\n            return []\n        result = [0] * len(a)\n        for i in range(len(a)):\n            result[i] = a[i] + b[i]\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairwise-addition/solution/\n\n# 9ms 99.38%\nclass Solution {\n    public List<Integer> add(List<Integer> a, List<Integer> b) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (a.size()!= b.size()) return result;\n        for (int i = 0; i < a.size(); i++) {\n            result.add(a.get(i) + b.get(i));\n        }\n        return result;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public List<Integer> add(List<Integer> a, List<Integer> b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < a.size(); i++) {\n            result.add(a.get(i) + b.get(i));\n        }\n        return result;\n    }\n}\n'''",
    "from collections import defaultdict\n\ndef pairwise_sum(t):\n    d = defaultdict(int)\n    for a, b in t:\n        d[a] += b\n    return [d[i] for i in sorted(d)]\n\ndef main():\n    t = [(1, 2), (3, 4), (5, 6)]\n    print(pairwise_sum(t))\n\nif __name__ == '__main__':\n    main()",
    "import collections\n\ndef pairwise_add(tup):\n    \"\"\"\n    >>> pairwise_add((1,2))\n    (2, 3)\n    >>> pairwise_add((1, 2, 3))\n    (2, 4, 6)\n    >>> pairwise_add((1, 2, 3, 4, 5))\n    (2, 6, 10, 14, 18)\n    >>> pairwise_add((1, 2, 3, 4, 5, 6))\n    (2, 7, 12, 19, 26, 35)\n    \"\"\"\n    result = collections.defaultdict(int)\n    for x in tup:\n        for y in tup:\n            result[x + y] += 1\n    return tuple(result.values())\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def pairwiseAdd(tupList):\n    for i in range(len(tupList)-1):\n        for j in range(i+1, len(tupList)):\n            tupList[i] = (tupList[i][0] + tupList[j][0], tupList[i][1] + tupList[j][1])\n    return tupList\n\n\nif __name__ == '__main__':\n    tupList = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print pairwiseAdd(tupList)",
    "import sys\n\ndef find_pairwise_addition(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int]]\n    :rtype: List[Tuple[int]]\n    \"\"\"\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            result.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return result\n\nif __name__ == '__main__':\n    tuple_list = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    result = find_pairwise_addition(tuple_list)\n    print(result)\n    for i in result:\n        print(i)\n    assert(result == [[1, 3], [3, 5], [5, 7], [7, 9], [9, 11]])",
    "def find_pairwise_add(t):\n    \"\"\"\n    :type t: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not t:\n        return []\n\n    res = []\n    for i in range(len(t)):\n        for j in range(i+1, len(t)):\n            res.append([t[i][j], t[j][i]])\n    return res",
    "from collections import namedtuple\n\nfrom typing import List\n\n# Your code here\nclass Tuple:\n    def __init__(self, a: int, b: int) -> None:\n        self.a = a\n        self.b = b\n\n    def __str__(self) -> str:\n        return f'({self.a}, {self.b})'\n\n    def __repr__(self) -> str:\n        return f'({self.a}, {self.b})'\n\nclass Pair:\n    def __init__(self, a: int, b: int) -> None:\n        self.a = a\n        self.b = b\n\n    def __str__(self) -> str:\n        return f'({self.a}, {self.b})'\n\n    def __repr__(self) -> str:\n        return f'({self.a}, {self.b})'\n\ndef add_tuples(tuples: List[Tuple]) -> List[Pair]:\n    result = []\n    for a, b in tuples:\n        result.append(Pair(a, b))\n    return result\n\ndef add_tuples_rec(tuples: List[Tuple]) -> List[Pair]:\n    if len(tuples) == 1:\n        return [Pair(tuples[0].a, tuples[0].b)]\n    else:\n        return add_tuples_rec(tuples[1:]) + add_tuples(tuples[0:1])\n\ndef main():\n    a = (1, 2)\n    b = (3, 4)\n    c = (5, 6)\n    d = (7, 8)\n    tuples = [a, b, c, d]\n    print(add_tuples(tuples))\n    print(add_tuples_rec(tuples))\n\nif __name__ == '__main__':\n    main()",
    "def pairwise_add(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: a list of tuples\n    \"\"\"\n    result = []\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(pairwise_add(tuples))\n    tuples = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(pairwise_add(tuples))",
    "import unittest\n\nclass Solution:\n    def add(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        a_sum = 0\n        b_sum = 0\n        for i in range(len(a)):\n            a_sum += a[i]\n            b_sum += b[i]\n        return [a_sum + b_sum]\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([(1, 2)], [(3, 4)])\n\n    def _test(self, args, exp):\n        actual = Solution().add(*args)\n        self.assertEqual(exp, actual)\n\nif __name__ == '__main__':\n    unittest.main()",
    "import unittest\n\nclass Solution:\n    def getSum(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        sum = 0\n        for a, b in tuples:\n            sum += a + b\n        return sum\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([(1, 2), (3, 4)], 4)\n        self._test([(1, 2), (3, 3)], 6)\n        self._test([(1, 2), (3, 4), (5, 6), (7, 8)], 20)\n\n    def _test(self, tuples, expected):\n        actual = Solution().getSum(tuples)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}