{
  "problem": {
    "task_id": "MBPP/51",
    "prompt": "Write a function to print check if the triangle is equilateral or not.",
    "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
    "test_list": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "challenge_test_list": [],
    "problem_id": 40
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Input: a, b, c are the three sides of the triangle\n    Output: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    a_b_c = a + b + c\n    return a_b_c == a*b*c\n\ndef main():\n    \"\"\"\n    main function.\n    \"\"\"\n    a, b, c = map(int, input().split())\n    print(is_equilateral(a, b, c))\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(n):\n    \"\"\"\n    n is a number\n    returns True if n is a triangle\n    returns False if n is not a triangle\n    \"\"\"\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i * j) == n:\n                return True\n    return False\n\n#Test\nprint(is_equilateral(3))\nprint(is_equilateral(4))\nprint(is_equilateral(5))\nprint(is_equilateral(6))",
    "import math\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a,b,c):\n    return math.sqrt((a**2 + b**2) / 2) == math.sqrt((a**2 + c**2) / 2)\n\ndef is_equilateral(a",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p):\n        \"\"\"\n        :type p: List[int]\n        :rtype: bool\n        \"\"\"\n        a = p[0]\n        b = p[1]\n        c = p[2]\n        if a == b:\n            if a == c:\n                return False\n            else:\n                return True\n        if a > b and a > c:\n            return True\n        if b > a and b > c:\n            return True\n        if c > a and c > b:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    triangle = [3, 4, 5]\n    print Solution().isEquilateral(triangle)",
    "def check_equilateral(p1, p2, p3):\n    \"\"\"\n    Check if the triangle is equilateral.\n    :param p1: First point of triangle\n    :param p2: Second point of triangle\n    :param p3: Third point of triangle\n    :return: True if equilateral, False otherwise\n    \"\"\"\n    a = p1[0] - p2[0]\n    b = p1[1] - p2[1]\n    c = p1[0] - p3[0]\n    d = p1[1] - p3[1]\n    e = a * d - b * c\n    return e == 0\n\nif __name__ == '__main__':\n    p1 = (1, 1)\n    p2 = (2, 1)\n    p3 = (3, 1)\n    print(check_equilateral(p1, p2, p3))",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def isEquilateral(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: bool\n        \"\"\"\n        n = len(points)\n        if n < 3:\n            return True\n\n        for i in range(0, n - 1):\n            for j in range(i + 1, n):\n                if (points[i].x - points[j].x) ** 2!= (points[i].y - points[j].y) ** 2:\n                    return False\n        return True",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of a triangle.\n    returns True if the triangle is equilateral, otherwise False.\n    \"\"\"\n\n    # If a = b + c, then a is a perfect square.\n    # If a = b - c, then a is a perfect square.\n    # If a = sqrt(b^2 + c^2), then a is a perfect square.\n    # If a = sqrt(b^2 - c^2), then a is a perfect square.\n    if (a + b) == c:\n        return True\n    elif (a - b) == c:\n        return True\n    elif (a**2) == (b**2 + c**2):\n        return True\n    elif (a**2) == (b**2 - c**2):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_equilateral(1, 1, 1) == True, \"Test with equilateral triangle\"\n    assert is_equilateral(2, 3, 4) == True, \"Test with equilateral triangle\"\n    assert is_equilateral(4, 1, 2) == False, \"Test with not equilateral triangle\"\n    assert is_equilateral(3, 4, 5) == False, \"Test with not equilateral triangle\"\n    assert is_equilateral(3, 2, 4) == False, \"Test with not equilateral triangle\"",
    "import math\n\ndef is_equilateral(x, y):\n    return abs(x*y - math.sqrt(x**2 + y**2)) < 0.0001\n\ndef main():\n    print is_equilateral(5, 7)\n    print is_equilateral(5, 3)\n\nif __name__ == \"__main__\":\n    main()",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    # a^2 + b^2 = c^2\n    return a * a + b * b == c * c\n\nif __name__ == '__main__':\n    assert is_equilateral(3, 4, 5)\n    assert not is_equilateral(3, 4, 6)",
    "#!/usr/bin/env python\n\nimport math\n\ndef is_equilateral(triangle):\n    return math.sqrt(triangle[0]**2 + triangle[1]**2) == math.sqrt(triangle[2]**2 + triangle[3]**2)\n\n\nif __name__ == '__main__':\n    triangle = [3, 4, 7]\n    print(is_equilateral(triangle))",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    Check if a, b, and c are a triangle with equilateral sides.\n\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    return math.sqrt((a ** 2) + (b ** 2) + (c ** 2)) == a + b + c\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = int(input('Enter the length of side 1: '))\n    b = int(input('Enter the length of side 2: '))\n    c = int(input('Enter the length of side 3: '))\n\n    if is_equilateral(a, b, c):\n        print('The triangle is equilateral')\n    elif is_equilateral(a, b, c) and is_equilateral(b, c, a):\n        print('The triangle is equilateral')\n    elif is_equilateral(a, b, c) and is_equilateral(c, a, b):\n        print('The triangle is equilateral')\n    elif is_equilateral(a, b, c) and is_equilateral(c, b, a):\n        print('The triangle is equilateral')\n    else:\n        print('The triangle is not equilateral')\n\n\nif __name__ == '__main__':\n    main()",
    "def equilateral_triangle(side1, side2, side3):\n    \"\"\"\n    side1 is the length of one side of the triangle\n    side2 is the length of the other side\n    side3 is the length of the third side\n    \"\"\"\n    if side1 * side2 == side3:\n        return 'Equilateral'\n    elif side1 + side2 == side3:\n        return 'Isosceles'\n    else:\n        return 'Not Equilateral'\n\n#Test\nprint equilateral_triangle(4, 6, 8)",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Checks if the triangle is equilateral\n    \"\"\"\n    return (a**2 + b**2 == c**2)\n\n# Example\n# is_equilateral(3, 4, 5) = True\n# is_equilateral(6, 4, 5) = False\n\nif __name__ == '__main__':\n    a = int(input('Enter the first side of the triangle: '))\n    b = int(input('Enter the second side of the triangle: '))\n    c = int(input('Enter the third side of the triangle: '))\n\n    is_equilateral(a, b, c)",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of the triangle.\n    return true if the triangle is equilateral.\n    \"\"\"\n    return abs(a + b + c - 2*sqrt(a*b + b*c + c*a)) < 1e-9\n\ndef is_equilateral2(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of the triangle.\n    return true if the triangle is equilateral.\n    \"\"\"\n    return abs(a + b + c - 2*sqrt(a*b + b*c + c*a)) < 1e-9\n\ndef is_equilateral3(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of the triangle.\n    return true if the triangle is equilateral.\n    \"\"\"\n    return abs(a + b + c - 2*sqrt(a*b + b*c + c*a)) < 1e-9\n\ndef main():\n    \"\"\"\n    A test case.\n    \"\"\"\n    a, b, c = (1, 2, 3)\n    assert is_equilateral(a, b, c) == True\n    assert is_equilateral2(a, b, c) == True\n    assert is_equilateral3(a, b, c) == True\n    assert is_equilateral(1, 1, 2) == False\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(first, second, third):\n    \"\"\"\n    :type first: list\n    :type second: list\n    :type third: list\n    :rtype: bool\n    \"\"\"\n    if (first[0] + second[1] + third[2]) == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_equilateral([4, 4, 4], [1, 4, 4], [3, 4, 4]))\n    print(is_equilateral([1, 1, 1], [1, 1, 1], [1, 1, 1]))",
    "def is_equilateral(p):\n    return p[0] == p[1] and p[0] == p[2]\n\np = [float(x) for x in input().split()]\n\nif is_equilateral(p):\n    print('It is equilateral')\nelse:\n    print('It is not equilateral')",
    "def is_equilateral(side1, side2, side3):\n    if side1 + side2 == side3 or side1 + side3 == side2 or side2 + side3 == side1:\n        return True\n    return False\n\nif __name__ == '__main__':\n    triangle_list = [\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,1],\n        [1,2,2],\n        [2,2,2],\n        [2,1,1],\n        [1,1,",
    "# https://www.hackerrank.com/challenges/triangle-equilateral/problem\ndef is_equilateral(n):\n    \"\"\"\n    Input: n is the number of rows in the triangle\n    Output: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    # If the triangle is not square, then the triangle is not equilateral\n    if n % 2!= 0:\n        return False\n\n    # If the triangle is square, then we need to check the diagonals\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += n - i\n\n    if diagonal_sum % 2 == 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    # n = int(input())\n    # print(is_equilateral(n))\n    n = int(input())\n    print(is_equilateral(n))",
    "# The input will be a list of points.\n\n# Example 1\n# Input: [(0,0), (1,0), (0,1), (2,2)]\n# Output: True\n\n# Example 2\n# Input: [(0,0), (1,0), (2,3)]\n# Output: False\n\n# Example 3\n# Input: [(0,0), (1,0), (2,2)]\n# Output: True\n\n\ndef equilateral_triangle(points):\n    \"\"\"\n    :type points: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    # The idea is that we can check if a point is the midpoint of two\n    # points that are on the same line.\n    # If the midpoint of two points is the same then the triangle is\n    # equilateral.\n    for point in points:\n        for i in range(len(points)):\n            if point[0] == points[i][0] and point[1] == points[i][1]:\n                return True\n    return False\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    points = [(0, 0), (1, 0), (0, 1), (2, 2)]\n    print(equilateral_triangle(points))\n\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(triangle):\n    \"\"\"\n    Check if the triangle is equilateral.\n    triangle: list\n    \"\"\"\n    a = triangle[0]\n    b = triangle[1]\n    c = triangle[2]\n\n    if a == b and b == c:\n        return True\n    elif a == b or b == c or a == c:\n        return False\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    triangle = [1, 2, 3]\n    print(is_equilateral(triangle))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Input: 3 numbers a, b, c\n    Output: True or False\n    \"\"\"\n    return abs(a**2 - b**2 - c**2) == 0\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print is_equilateral(1, 2, 3)\n    print is_equilateral(2, 3, 4)\n    print is_equilateral(3, 4, 5)\n    print is_equilateral(4, 5, 6)\n    print is_equilateral(5, 6, 7)\n    print is_equilateral(6, 7, 8)\n    print is_equilateral(7, 8, 9)\n    print is_equilateral(8, 9, 10)\n    print is_equilateral(9, 10, 11)\n    print is_equilateral(10, 11, 12)\n    print is_equilateral(11, 12, 13)\n    print is_equilateral(12, 13, 14)\n    print is_equilateral(13, 14, 15)\n    print is_equilateral(14, 15, 16)\n    print is_equilateral(15, 16, 17)\n    print is_equilateral(16, 17, 18)\n    print is_equilateral(17, 18, 19)\n    print is_equilateral(18, 19, 20)\n    print is_equilateral(19, 20, 21)\n    print is_equilateral(20, 21, 22)\n    print is_equilateral(21, 22, 23)\n    print is_equilateral(22, 23, 24)\n    print is_equilateral(23, 24, 25)\n    print is_equilateral(24, 25, 26)\n    print is_equilateral(25, 26, 27)\n    print is_equilateral(26, 27, 28)\n    print is_equilateral(27, 28, 29)\n    print is_equilateral(28, 29, 30)\n    print is_equilateral(29, 30, 31)\n    print is_equilateral(30, 31, 32)\n    print is_equilateral(31, 32, 33)\n    print is_equilateral",
    "def equilateral(triangle):\n    '''\n    Input Triangle as a list of 3 integers.\n    Output True or False.\n    '''\n    x1, y1, x2, y2, x3, y3 = triangle\n    x = (x1 + x2 + x3) / 2\n    y = (y1 + y2 + y3) / 2\n    if x * x + y * y == (x1 * x1 + y1 * y1 + x2 * x2 + y2 * y2 + x3 * x3 + y3 * y3) / 6:\n        return True\n    else:\n        return False",
    "def is_equilateral(a, b, c):\n    return abs(a*c - b*b) == abs(a*c - b*b)\n\nif __name__ == \"__main__\":\n    print is_equilateral(3, 4, 5)",
    "def is_equilateral(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return is_equilateral(n/2) and is_equilateral(n/2 + 1)\n    else:\n        return False\n\nprint(is_equilateral(3))",
    "def equilateral_triangle(a,b,c):\n    \"\"\"\n    a,b,c are the three sides of the triangle.\n    returns True if the triangle is equilateral, else False.\n    \"\"\"\n    return (a+b+c) == float(a*b*c)/2\n\nif __name__ == \"__main__\":\n    print equilateral_triangle(1, 2, 3)\n    print equilateral_triangle(2, 3, 4)\n    print equilateral_triangle(3, 4, 5)\n    print equilateral_triangle(4, 5, 6)\n    print equilateral_triangle(5, 6, 7)\n    print equilateral_triangle(6, 7, 8)\n    print equilateral_triangle(7, 8, 9)\n    print equilateral_triangle(8, 9, 10)\n    print equilateral_triangle(9, 10, 11)\n    print equilateral_triangle(10, 11, 12)\n    print equilateral_triangle(11, 12, 13)\n    print equilateral_triangle(12, 13, 14)\n    print equilateral_triangle(13, 14, 15)\n    print equilateral_triangle(14, 15, 16)\n    print equilateral_triangle(15, 16, 17)\n    print equilateral_triangle(16, 17, 18)\n    print equilateral_triangle(17, 18, 19)\n    print equilateral_triangle(18, 19, 20)\n    print equilateral_triangle(19, 20, 21)\n    print equilateral_triangle(20, 21, 22)\n    print equilateral_triangle(21, 22, 23)\n    print equilateral_triangle(22, 23, 24)\n    print equilateral_triangle(23, 24, 25)\n    print equilateral_triangle(24, 25, 26)\n    print equilateral_triangle(25, 26, 27)\n    print equilateral_triangle(26, 27, 28)\n    print equilateral_triangle(27, 28, 29)\n    print equilateral_triangle(28, 29, 30)\n    print equilateral_triangle(29",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Return True if the triangle is equilateral, otherwise return False.\n    :param a: the first side of the triangle\n    :param b: the second side of the triangle\n    :param c: the third side of the triangle\n    :return: True or False\n    \"\"\"\n    return a + b == c\n\nif __name__ == '__main__':\n    a = input(\"Please enter the first side of the triangle: \")\n    b = input(\"Please enter the second side of the triangle: \")\n    c = input(\"Please enter the third side of the triangle: \")\n    print(\"The triangle is equilateral if\", is_equilateral(a, b, c))",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p):\n        \"\"\"\n        :type p: Triangle\n        :rtype: bool\n        \"\"\"\n        if p.a == p.b and p.b == p.c:\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    triangle = Triangle(1, 2, 3)\n    s = Solution()\n    print s.isEquilateral(triangle)\n    print s.isEquilateral(Triangle(1, 1, 1))",
    "def is_equilateral(n):\n    \"\"\"\n    Check if a triangle is equilateral or not.\n\n    Input:\n        n -- The number of vertices of the triangle.\n\n    Output:\n        True or False.\n    \"\"\"\n    if n <= 0:\n        return False\n    a, b, c = [0] * n\n    for i in range(2, n):\n        a[i] = (i - 1) * (i - 2)\n        b[i] = a[i] + i * i\n        c[i] = a[i] + b[i]\n    for i in range(3, n):\n        c[i] = a[i] + b[i]\n    for i in range(3, n):\n        if a[i]!= c[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    print(is_equilateral(n))",
    "from math import sqrt\n\ndef is_equilateral(n):\n    \"\"\"\n    Return True if the triangle is equilateral, False otherwise.\n    \"\"\"\n\n    # The equation of a triangle is:\n    # (x - x2)**2 + (y - y2)**2 = 1\n    # If the sides are equal then the triangle is equilateral.\n    #\n    # x - x2 = y - y2\n    # x**2 - 2*x*y + y**2 = 1\n    # x**2 - y**2 + y**2 - 2*x**2 = 0\n    # x**2 - y**2 + y**2 - 2*x**2 = 0\n    # x**2 + y**2 - 2*x**2 = 0\n    # x**2 + y**2 = 4*x*y\n    # x**2 + y**2 - 4*x**2 = 0\n    # x**2 - 2*x**2 + y**2 = 0\n    # x**2 - y**2 - 2*x**2 + y**2 = 0\n    # x**2 - y**2 + y**2 - x**2 = 0\n    # x**2 - x**2 + y**2 - y**2 = 0\n    # x**2 - x**2 - y**2 + y**2 = 0\n    # x**2 - x**2 - y**2 + y**2 = 0\n    # x**2 - x**2 + y**2 - y**2 = 0\n    # x**2 - y**2 - x**2 + y**2 = 0\n    # x**2 + y**2 - x**2 - y**2 = 0\n    # x**2 + y**2 - x**2 - y**2 = 0\n    # x**2 - x**2 + y**2 - y**2 = 0\n    # x**2 - x**2 - y**2 + y**2 = 0\n    # x**2 - x**2 + y**2 + y**2 = 0\n    # x**2 + y**2 - x**2 - y**2 = 0\n    # x**2 + y**2 - x**2 + y**2 = 0",
    "def is_equilateral(triangle):\n    \"\"\"\n    Checks if a triangle is equilateral.\n    \"\"\"\n    if triangle[0] * triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    triangle = [1, 1, 1]\n    print(is_equilateral(triangle))\n    triangle = [1, 2, 3]\n    print(is_equilateral(triangle))\n    triangle = [1, 3, 2]\n    print(is_equilateral(triangle))",
    "def check_equilateral(a,b,c):\n    \"\"\"\n    Checks if the triangle is equilateral or not.\n    a: the length of the first side\n    b: the length of the second side\n    c: the length of the third side\n    return: boolean\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef main():\n    \"\"\"\n    main() function\n    \"\"\"\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    print(check_equilateral(a,b,c))\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __str__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def isEquilateral(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: bool\n        \"\"\"\n        if p1 == p2 or p2 == p3 or p1 == p3:\n            return False\n        else:\n            c1 = p1.x * p2.y - p1.y * p2.x\n            c2 = p2.x * p3.y - p2.y * p3.x\n            c3 = p3.x * p1.y - p3.y * p1.x\n            return abs(c1 - c2) < 1e-7 and abs(c2 - c3) < 1e-7\n\nif __name__ == '__main__':\n    p1 = Point(2, 2)\n    p2 = Point(2, 3)\n    p3 = Point(3, 2)\n    print Solution().isEquilateral(p1, p2, p3)",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c: the three sides of the triangle\n    \"\"\"\n    return abs(a - b) == abs(a - c) == abs(b - c)\n\nif __name__ == '__main__':\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(is_equilateral(a, b, c))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    return (a * b == c * c) or (a * b < c * c)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    print(is_equilateral(a, b, c))\n\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef equilateral_triangle(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_2(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_3(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_4(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_5(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_6(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_7(a,b,c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a**2+b**2==c**2):\n        return True\n    else:\n        return False\n\ndef equilateral_triangle_8(a,b,c):\n    a = float(a)\n    b",
    "import math\n\ndef is_equilateral(x, y):\n    a = (x + y) / 2\n    b = math.sqrt(x * x + y * y)\n    return abs(a - b) < 0.001\n\ndef main():\n    triangle = [[1, 1], [2, 1], [3, 1]]\n    equilateral = [[1, 1], [2, 2], [3, 3]]\n    assert(is_equilateral(triangle[0][0], triangle[0][1]) == True)\n    assert(is_equilateral(triangle[1][0], triangle[1][1]) == False)\n    assert(is_equilateral(triangle[2][0], triangle[2][1]) == False)\n    assert(is_equilateral(equilateral[0][0], equilateral[0][1]) == True)\n    assert(is_equilateral(equilateral[1][0], equilateral[1][1]) == False)\n    assert(is_equilateral(equilateral[2][0], equilateral[2][1]) == False)\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p1, p2, p3):\n        \"\"\"\n        :type p1: list\n        :type p2: list\n        :type p3: list\n        :rtype: bool\n        \"\"\"\n        # p1 is the length of the triangle\n        # p2 is the length of the middle line\n        # p3 is the length of the side\n        # check if p1 + p2 < p3\n        return (p1[0] + p2[0]) < (p3[0] + p3[1]) and (p1[1] + p2[1]) < (p3[1] + p3[0])",
    "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    return a**2 == b**2 and b**2 == c**2\n\n\"\"\"\nTest Cases\n\"\"\"\na = 1\nb = 2\nc = 3\n\nprint check_equilateral(a, b, c)",
    "# Definition for a triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    def isEquilateral(self, a: int, b: int, c: int) -> bool:\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: bool\n        \"\"\"\n        return abs(a * c - b * b) < 1e-7",
    "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def isEquilateral(self, p1, p2, p3):\n        # Triangle area\n        a = (p1.x - p2.x)**2 + (p1.y - p2.y)**2\n        b = (p2.x - p3.x)**2 + (p2.y - p3.y)**2\n        c = (p3.x - p1.x)**2 + (p3.y - p1.y)**2\n        s = (a + b + c) / 2.0\n        # Equilateral triangle\n        if s == 0:\n            return True\n        # Not equilateral triangle\n        elif s < 0:\n            return False\n        else:\n            return False\n\n# Note:\n# https://discuss.leetcode.com/topic/83538/java-solution-using-convex-hull\n# http://www.geeksforgeeks.org/check-if-a-triangle-is-equilateral/\n# http://www.geeksforgeeks.org/check-if-a-triangle-is-convex-or-concave/",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type c: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\n#         # Note: a, b, c is not given.\n#         #       Only the area of the triangle is given.\n#         #       Also, a, b, c is not given.\n\n#         self.area = 0\n#         self.is_equilateral = False\n\n\nclass Solution(object):\n    def isEquilateral(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: bool\n        \"\"\"\n        # Calculate area of triangle.\n        self.area = triangle.a + triangle.b + triangle.c\n        # Check if area is greater than or equal to 1/3 of the square root of 3.\n        if self.area >= 1.0/3.0:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    triangle = Triangle(1, 2, 3)\n    print triangle.isEquilateral(triangle)\n    print triangle.isEquilateral(Triangle(2, 3, 4))",
    "class Solution:\n    # @param triangle, a list of lists of integers\n    # @return a boolean\n    def isEquilateral(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if triangle is None or len(triangle) == 0:\n            return False\n        if len(triangle) == 1:\n            return True\n        for i in range(len(triangle) - 1):\n            if triangle[i][0] * triangle[i+1][1]!= triangle[i+1][0] * triangle[i][1]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    triangle = [[3,4,5],[6,5,6],[4,2,1]]\n    print Solution().isEquilateral(triangle)",
    "import math\n\ndef is_equilateral(a,b,c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    return math.sqrt((a**2)+(b**2)) == math.sqrt((c**2)+(a**2))\n\nif __name__ == '__main__':\n    triangle = [int(x) for x in raw_input().split()]\n    print is_equilateral(triangle[0], triangle[1], triangle[2])",
    "def equilateral(a, b, c):\n    \"\"\"\n    Check if triangle is equilateral.\n\n    :type a: float\n    :param a: First vertex of the triangle.\n    :type b: float\n    :param b: Second vertex of the triangle.\n    :type c: float\n    :param c: Third vertex of the triangle.\n    \"\"\"\n    return abs(a**2 + b**2 - c**2) == 0\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = input(\"Enter the first vertex of the triangle: \")\n    b = input(\"Enter the second vertex of the triangle: \")\n    c = input(\"Enter the third vertex of the triangle: \")\n    if equilateral(a, b, c):\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")\n\nmain()",
    "class Solution(object):\n    def checkEquilateral(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if len(points) < 3:\n            return True\n\n        # calculate the area of triangle\n        area = 0\n        for i in range(len(points)):\n            p1 = points[i]\n            for j in range(i+1, len(points)):\n                p2 = points[j]\n                area += (p1[0] - p2[0]) * (p1[1] + p2[1])\n                p1 = p2\n        area = abs(area / 2)\n        # print(area)\n\n        # if the area of triangle is bigger than 1, it is not equilateral\n        if area > 1:\n            return False\n\n        # otherwise, if the area of triangle is smaller than 1, it is equilateral\n        return True",
    "def is_equilateral(p1, p2, p3):\n    \"\"\"\n    Check if the triangle is equilateral.\n\n    The function should return True if the triangle is equilateral,\n    otherwise it should return False.\n\n    Example:\n\n    p1 = (1, 1)\n    p2 = (1, 2)\n    p3 = (2, 1)\n\n    The function should return True if the triangle is equilateral,\n    otherwise it should return False.\n    \"\"\"\n    # check if the first point is the same as the second point\n    # if so, the triangle is equilateral\n    if p1[0] == p2[0] and p1[1] == p2[1]:\n        return True\n    # check if the third point is the same as the first point\n    # if so, the triangle is equilateral\n    elif p1[0] == p3[0] and p1[1] == p3[1]:\n        return True\n    # check if the third point is the same as the second point\n    # if so, the triangle is equilateral\n    elif p2[0] == p3[0] and p2[1] == p3[1]:\n        return True\n    # otherwise, the triangle is not equilateral\n    else:\n        return False\n\nif __name__ == '__main__':\n    # tests\n    assert is_equilateral((1, 1), (1, 2), (2, 1)) == True\n    assert is_equilateral((1, 1), (1, 2), (1, 1)) == False",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, and c are the three sides of a triangle.\n    Return True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    return a == b or b == c or a == c\n\n# https://www.hackerrank.com/challenges/equilateral-triangle\ndef equilateral_triangle(a, b, c):\n    \"\"\"\n    a, b, and c are the three sides of a triangle.\n    Return True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    return a == b or b == c or a == c\n\nif __name__ == '__main__':\n    a, b, c = input().split(' ')\n    a, b, c = int(a), int(b), int(c)\n    if is_equilateral(a, b, c) == True:\n        print('equilateral')\n    elif equilateral_triangle(a, b, c) == True:\n        print('equilateral')\n    else:\n        print('not equilateral')",
    "def is_equilateral(p):\n    return (p[0] * p[2] == p[1] * p[1])\n\ndef is_equilateral_triangle(p):\n    return (p[0] * p[1] == p[2] * p[2]) or (p[1] * p[2] == p[0] * p[2])\n\ndef main():\n    p = (2, 1, 1)\n    print(is_equilateral(p))\n    p = (1, 2, 1)\n    print(is_equilateral(p))\n    p = (1, 2, 3)\n    print(is_equilateral_triangle(p))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    Return true if the triangle is equilateral, false otherwise.\n    \"\"\"\n    return math.fabs(a * b - c * c) < 1e-7\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    a, b, c = input().split()\n    a, b, c = map(int, (a, b, c))\n    if is_equilateral(a, b, c):\n        print(\"TRIANGLE EQUILATERAL\")\n    else:\n        print(\"TRIANGLE NOT EQUILATERAL\")\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(triangle):\n    \"\"\"\n    Input: triangle = [[1,1],[1,2],[2,1]]\n    Output: True\n    \"\"\"\n    if triangle[0][0] == triangle[1][0] and triangle[1][0] == triangle[2][0]:\n        return True\n    return False\n\ndef main():\n    triangle = [[1,1],[1,2],[2,1]]\n    print is_equilateral(triangle)\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(x):\n    \"\"\"\n    x is a number\n    \"\"\"\n    a = float(x)\n    b = float(x)\n    c = float(x)\n    return a == b or b == c or a == c\n\ndef is_equilateral_test(x):\n    \"\"\"\n    x is a number\n    \"\"\"\n    if not isinstance(x, int) and isinstance(x, float):\n        a = float(x)\n        b = float(x)\n        c = float(x)\n        return a == b or b == c or a == c\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_equilateral(4.5))\n    print(is_equilateral_test(4.5))",
    "def is_equilateral(first, second, third):\n    return (first + second + third) == (first * second * third)\n\nprint is_equilateral(2, 3, 4)",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of the triangle.\n    returns true if the triangle is equilateral, else returns false.\n    \"\"\"\n    if a == b or b == c or a == c:\n        return False\n    else:\n        return True\n\n#Test cases\n\n# a, b, c = 3, 5, 7\n# print is_equilateral(a, b, c)\n\n# a, b, c = 4, 6, 8\n# print is_equilateral(a, b, c)\n\n# a, b, c = 8, 4, 2\n# print is_equilateral(a, b, c)\n\n# a, b, c = 7, 7, 7\n# print is_equilateral(a, b, c)\n\n\ndef main():\n    a, b, c = 3, 5, 7\n    print is_equilateral(a, b, c)\n\nif __name__ == '__main__':\n    main()",
    "# Your code here.\n\ndef is_equilateral(p1, p2, p3):\n    \"\"\"\n    check if the triangle is equilateral\n    \"\"\"\n    x1, y1, x2, y2 = p1\n    x3, y3, x4, y4 = p2\n    x5, y5, x6, y6 = p3\n    if (y1**2 - y2**2) * (x2 - x3)**2 == (x1 - x3)**2 * (y3 - y2)**2:\n        if (y1**2 - y2**2) * (x2 - x4)**2 == (x1 - x4)**2 * (y4 - y2)**2:\n            if (y1**2 - y2**2) * (x2 - x5)**2 == (x1 - x5)**2 * (y5 - y2)**2:\n                return True\n    return False\n\ndef is_equilateral_1(p1, p2, p3):\n    \"\"\"\n    check if the triangle is equilateral\n    \"\"\"\n    x1, y1, x2, y2 = p1\n    x3, y3, x4, y4 = p2\n    x5, y5, x6, y6 = p3\n    if y1**2 - y2**2 == y3**2 - y4**2:\n        if y1**2 - y2**2 == y5**2 - y6**2:\n            return True\n    return False\n\ndef is_equilateral_2(p1, p2, p3):\n    \"\"\"\n    check if the triangle is equilateral\n    \"\"\"\n    x1, y1, x2, y2 = p1\n    x3, y3, x4, y4 = p2\n    x5, y5, x6, y6 = p3\n    if x1**2 - x2**2 == x3**2 - x4**2:\n        if x5**2 - x6**2 == x1**2 - x6**2:\n            return True\n    return False\n\n\ndef is_equilateral_3(p",
    "# https://www.hackerrank.com/challenges/check-if-triangle-is-equilateral\n\n# Triangle\n# Triangle is a rectangular prism with three equal sides.\n# The area of this prism is the sum of the areas of the three equal sides.\n# The length of the longest side is the square root of the sum of the squares of the two sides.\n# Given a triangle, write a function to check if it is equilateral.\n# For example, if the triangle is equilateral, then the area is equal to 1/2 the sum of the\n# two sides and the length of the longest side is the square root of the sum of the squares of the two sides.\n#\n# Input:\n# The first line of the input contains three space-separated integers T (1<=T<=100), N (1<=N<=100),\n# and P (1<=P<=100). The next T lines contain N space-separated integers representing the lengths of\n# the sides of the triangle.\n#\n# Output:\n# For each test case, output either \"Yes\" or \"No\".\n\n# Example 1:\n# Input:\n# 2 3 4\n# 3 4 5\n# 4 5 6\n#\n# Output:\n# Yes\n#\n# Example 2:\n# Input:\n# 4 4 4\n# 5 5 5\n#\n# Output:\n# No\n\nclass Solution:\n    def checkEquilateral(self, triangle):\n        sides = [float(i) for i in triangle]\n        if sum(sides) == 0:\n            return False\n        if sum(sides) == 1:\n            return True\n        if sum(sides) == 2:\n            return False\n        return (1.0 / (1 + math.sqrt(1 + 8 * sum(sides[0] ** 2) / sum(sides)))) ** 2 == 1.0",
    "def check_if_triangle_equilateral(a,b,c):\n    if a == b and b == c:\n        return \"Triangle is equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Triangle is equilateral\"\n    else:\n        return \"Triangle is not equilateral\"\n\ndef main():\n    a = int(input(\"Enter the first side of the triangle\"))\n    b = int(input(\"Enter the second side of the triangle\"))\n    c = int(input(\"Enter the third side of the triangle\"))\n    print(check_if_triangle_equilateral(a,b,c))\n\nmain()",
    "# https://leetcode.com/problems/check-if-triangle-is-equilateral/discuss/121180/Java-Python-Minimal-Solution\n\nclass Solution(object):\n    def isEquilateral(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(triangle) == 3 and triangle[0] == triangle[1] and triangle[1] == triangle[2]",
    "class Solution(object):\n    def isEquilateral(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        # if len(points) < 3, return false\n        # if len(points) == 3:\n        #     return (points[0][0] + points[1][1] + points[2][2]) == 0\n        # else:\n        #     for i in range(len(points)):\n        #         for j in range(i+1, len(points)):\n        #             if ((points[i][0] + points[j][1])**2 + (points[i][1] + points[j][2])**2) == (points[i][0] + points[j][1] + points[i][2] + points[j][2])**2:\n        #                 return False\n        # return True\n        # https://leetcode.com/problems/check-if-a-triangle-is-equilateral/discuss/80962/Python-2-O(n)-Solution-O(n)-Time-Space-Complexity\n        return self.check(points)\n\n    def check(self, points):\n        # if len(points) < 3, return false\n        # if len(points) == 3:\n        #     return (points[0][0] + points[1][1] + points[2][2]) == 0\n        # else:\n        #     for i in range(len(points)):\n        #         for j in range(i+1, len(points)):\n        #             if ((points[i][0] + points[j][1])**2 + (points[i][1] + points[j][2])**2) == (points[i][0] + points[j][1] + points[i][2] + points[j][2])**2:\n        #                 return False\n        # return True\n        return self.triangle(points)\n\n    def triangle(self, points):\n        # points is a list of list.\n        # if len(points) == 3, return true\n        # if len(points) == 4,",
    "import math\n\ndef is_equilateral(x, y, z):\n    return abs(1.0 - (math.sqrt(x*x + y*y + z*z))) < 0.0001\n\nif __name__ == \"__main__\":\n    triangle = [[1, 1, 1], [2, 2], [3, 4]]\n    print(is_equilateral(triangle[0][0], triangle[1][1], triangle[2][2]))\n    print(is_equilateral(triangle[0][0], triangle[1][1], triangle[2][2], 1.0))\n    print(is_equilateral(triangle[0][0], triangle[1][1], triangle[2][2], 0.5))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n\n    :param a: The length of the first side\n    :param b: The length of the second side\n    :param c: The length of the third side\n    :return: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef main():\n    \"\"\"\n    Main function for the exercise.\n    \"\"\"\n    a = int(input(\"Enter the length of first side: \"))\n    b = int(input(\"Enter the length of second side: \"))\n    c = int(input(\"Enter the length of third side: \"))\n    if is_equilateral(a, b, c):\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\nif __name__ == \"__main__\":\n    main()",
    "def is_equilateral(n):\n    \"\"\"\n    >>> is_equilateral(1)\n    True\n    >>> is_equilateral(2)\n    False\n    >>> is_equilateral(3)\n    False\n    >>> is_equilateral(4)\n    True\n    >>> is_equilateral(5)\n    False\n    >>> is_equilateral(6)\n    False\n    >>> is_equilateral(7)\n    True\n    >>> is_equilateral(8)\n    True\n    >>> is_equilateral(9)\n    False\n    >>> is_equilateral(10)\n    False\n    >>> is_equilateral(11)\n    True\n    >>> is_equilateral(12)\n    False\n    >>> is_equilateral(13)\n    False\n    >>> is_equilateral(14)\n    True\n    >>> is_equilateral(15)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n % 2 == 0:\n        return (n - 1) ** 2 == n ** 2 - 3 * n\n    else:\n        return (n - 1) ** 2 == n ** 2 - 3 * n\n\ndef test():\n    assert is_equilateral(1)\n    assert is_equilateral(2)\n    assert is_equilateral(3)\n    assert is_equilateral(4)\n    assert is_equilateral(5)\n    assert is_equilateral(6)\n    assert is_equilateral(7)\n    assert is_equilateral(8)\n    assert is_equilateral(9)\n    assert is_equilateral(10)\n    assert is_equilateral(11)\n    assert is_equilateral(12)\n    assert is_equilateral(13)\n    assert is_equilateral(14)\n    assert is_equilateral(15)\n    assert is_equilateral(16)\n\nif __name__ == '__main__':\n    test()",
    "from math import sqrt\n\n\ndef is_equilateral(a, b, c):\n    return a * b == c * c\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    triangle = [float(input(\"Enter the first side: \")),\n                float(input(\"Enter the second side: \")),\n                float(input(\"Enter the third side: \"))]\n    print(is_equilateral(*triangle))\n\n\nif __name__ == \"__main__\":\n    main()",
    "import math\n\ndef is_equilateral(p):\n    \"\"\"\n    p is a point.\n    \"\"\"\n    if (p[0]**2 + p[1]**2 == p[2]**2):\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    main function.\n    \"\"\"\n    p1 = [3, 2, 1]\n    p2 = [3, 3, 3]\n    p3 = [4, 3, 2]\n    print(is_equilateral(p1))\n    print(is_equilateral(p2))\n    print(is_equilateral(p3))\n    \n\nif __name__ == '__main__':\n    main()",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p1, p2, p3):\n        \"\"\"\n        :type p1: tuple\n        :type p2: tuple\n        :type p3: tuple\n        :rtype: bool\n        \"\"\"\n        if p1 == p2 or p2 == p3 or p1 == p3:\n            return True\n        else:\n            return False\n\ndef main():\n    #print Solution().isEquilateral((4, 3, 7), (6, 7, 2), (6, 7, 9))\n    p1 = (4, 3, 7)\n    p2 = (6, 7, 2)\n    p3 = (6, 7, 9)\n    print Solution().isEquilateral(p1, p2, p3)\n\nif __name__ == '__main__':\n    main()",
    "def is_equilateral(triangle):\n    \"\"\"\n    The triangle is equilateral if the area of the triangle is equal to the\n    area of the hypotenuse.\n    \"\"\"\n\n    return triangle[0] * triangle[1] == triangle[2] * triangle[2]\n\nif __name__ == '__main__':\n    triangle = [[1, 2], [3, 4], [5, 6]]\n\n    print(is_equilateral(triangle))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle a, b, c is equilateral.\n    \"\"\"\n    return abs(a ** 2 + b ** 2 - c ** 2) == 0\n\nif __name__ == \"__main__\":\n    \"\"\"\n    Test cases:\n    1, 2, 3, 4, 5, 6, 7, 8\n    \"\"\"\n    # Test 1\n    a, b, c = 1, 2, 3\n    assert is_equilateral(a, b, c)\n\n    # Test 2\n    a, b, c = 3, 4, 5\n    assert is_equilateral(a, b, c)\n\n    # Test 3\n    a, b, c = 4, 5, 6\n    assert is_equilateral(a, b, c)\n\n    # Test 4\n    a, b, c = 5, 6, 7\n    assert is_equilateral(a, b, c)\n\n    # Test 5\n    a, b, c = 6, 7, 8\n    assert is_equilateral(a, b, c)\n\n    # Test 6\n    a, b, c = 7, 8, 9\n    assert is_equilateral(a, b, c)\n\n    # Test 7\n    a, b, c = 8, 9, 10\n    assert is_equilateral(a, b, c)\n\n    # Test 8\n    a, b, c = 9, 10, 11\n    assert is_equilateral(a, b, c)",
    "def is_equilateral(a,b,c):\n    \"\"\"\n    Check if triangle is equilateral\n    \"\"\"\n    a1 = (a**2 - b**2) / (2*c)\n    a2 = (a**2 + b**2) / (2*c)\n    if a1 == a2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_equilateral(5,6,7))\n    print(is_equilateral(8,4,6))\n    print(is_equilateral(5,6,5))\n    print(is_equilateral(2,2,2))",
    "def is_equilateral(n):\n    \"\"\"\n    Given the number of sides of a triangle, return True if the triangle\n    is equilateral and False if not.\n    \"\"\"\n    return (n * (n + 1)) / 2 == (n * (n - 1)) / 2\n\ndef main():\n    \"\"\"\n    The number of sides of a triangle is the product of the three sides.\n    The number of triangles is 2^n.\n    \"\"\"\n    for n in range(1, 10):\n        if is_equilateral(n):\n            print 'equilateral'\n        else:\n            print 'not equilateral'\n\nif __name__ == '__main__':\n    main()",
    "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p):\n        \"\"\"\n        :type p: List[int]\n        :rtype: bool\n        \"\"\"\n        if p[0] == p[1] == p[2]:\n            return True\n        if p[0] == p[1] or p[1] == p[2] or p[0] == p[2]:\n            return False\n        a = p[0] * p[1]\n        b = p[1] * p[2]\n        c = p[0] * p[2]\n        if a == b or a == c or b == c:\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    s = Solution()\n    p = [0, 0, 0]\n    print s.isEquilateral(p)",
    "import math\n\ndef equilateral(triangle):\n    \"\"\"\n    For the triangle, the length of the sides are the same,\n    the triangle is equilateral if the length of the perimeter is equal to the\n    sum of the two sides.\n    \"\"\"\n    return triangle.length == triangle.perimeter\n\nif __name__ == '__main__':\n    triangle = Triangle(3, 4, 5)\n    print(equilateral(triangle))",
    "# Definition for a point\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: bool\n        \"\"\"\n        return ((p1.a * p2.b - p1.b * p2.a) ==\n                (p1.c * p2.b - p1.b * p2.c) and\n                (p1.a * p3.b - p1.b * p3.a) ==\n                (p1.c * p3.b - p1.b * p3.c))",
    "from math import sqrt\n\ndef is_equilateral(a, b, c):\n    if sqrt((a-b)**2 + (c-b)**2) == a:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_equilateral(10, 10, 10))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c are the three sides of the triangle\n    returns True if the triangle is equilateral, False otherwise\n    \"\"\"\n    return (a + b + c) == float(a*b*c)\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert is_equilateral(1, 1, 1), \"Triangle is equilateral\"\n    assert not is_equilateral(1, 2, 3), \"Triangle is not equilateral\"\n\nif __name__ == \"__main__\":\n    main()",
    "def equilateral_triangle(a, b, c):\n    \"\"\"\n    Write a function to check if the triangle is equilateral.\n    \"\"\"\n    if (a+b <= c):\n        return False\n    elif (a+c <= b):\n        return False\n    elif (b+c <= a):\n        return False\n    else:\n        return True\n\ndef main():\n    \"\"\"\n    Write a function to check if the triangle is equilateral.\n    \"\"\"\n    print(equilateral_triangle(1, 2, 3))\n\nif __name__ == '__main__':\n    main()",
    "def equilateral(triangle):\n    \"\"\"\n    Input triangle as a list of integers.\n    Output 1 or 0 to indicate if the triangle is equilateral or not.\n    \"\"\"\n    # TODO: Implement your code here.\n    pass\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12",
    "def is_equilateral(a,b,c):\n    \"\"\"\n    a,b,c: the three sides of the triangle\n    return: true if the triangle is equilateral, false otherwise\n    \"\"\"\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a+b) == c:\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    a = float(input(\"Please input the first side: \"))\n    b = float(input(\"Please input the second side: \"))\n    c = float(input(\"Please input the third side: \"))\n    if is_equilateral(a,b,c):\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")\n    \nif __name__ == \"__main__\":\n    main()",
    "# https://oj.leetcode.com/problems/is-triangle-equilateral/\n# Given the triangle, find out whether it is equilateral.\n# The area of a triangle is (a + b + c)/2.\n# If a + b + c is even, the triangle is equilateral.\n# If a + b + c is odd, the triangle is not equilateral.\n# Example 1:\n#     Input: a = 1, b = 1, c = 1\n#     Output: True\n#     Explanation: a + b + c = 2\n#     Example 2:\n#     Input: a = 1, b = 2, c = 1\n#     Output: False\n#     Explanation: a + b + c = 3\n#     Example 3:\n#     Input: a = 1, b = 2, c = 2\n#     Output: True\n#     Explanation: a + b + c = 3\n#     Example 4:\n#     Input: a = 1, b = 1, c = 2\n#     Output: True\n#     Explanation: a + b + c = 2\n#     Example 5:\n#     Input: a = 1, b = 2, c = 3\n#     Output: False\n#     Explanation: a + b + c = 4\n#     Note:\n#     The area of the triangle is in the range [1, 10000].\n#     a, b, and c are in the range [0, 10000].\n\n# 2017.02.25\nclass Solution:\n    def checkTriangle(self, a, b, c):\n        if a + b + c == 2:\n            return True\n        if a + b + c == 3:\n            return True\n        if a + b + c == 4:\n            return True\n        if a + b + c % 2 == 0:\n            return True\n        return False\n\n# 2017.02.25\n# http://www.cnblogs.com/zuoyuan/p/3728596.html\nclass Solution:\n    def checkTriangle(self, a, b, c):\n        return abs(a + b + c - 2) < 1e-6",
    "# https://www.hackerrank.com/challenges/equilateral-triangles/problem\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c: the three sides of the triangle\n    returns True if the triangle is equilateral, otherwise False\n    \"\"\"\n    return a/b == c/b\n\n# Sample Input\n# a, b, c = 3, 4, 5\n# Sample Output\n# False\n# True\n# True\n\n# Sample Input\n# a, b, c = 1, 1, 1\n# Sample Output\n# True\n# False\n\n# Sample Input\n# a, b, c = 4, 1, 2\n# Sample Output\n# True\n# False\n\n# Sample Input\n# a, b, c = 4, 1, 2\n# Sample Output\n# True\n# False\n\n# Sample Input\n# a, b, c = 3, 2, 2\n# Sample Output\n# False\n# True\n\n# Sample Input\n# a, b, c = 4, 3, 3\n# Sample Output\n# False\n# True\n\n# Sample Input\n# a, b, c = 4, 3, 3\n# Sample Output\n# True\n# False\n\n# Sample Input\n# a, b, c = 4, 3, 3\n# Sample Output\n# True\n# False",
    "def check_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return (a + b <= c) and (a + c <= b)\n\nif __name__ == '__main__':\n    \"\"\"\n    Write the test cases for check_triangle() function.\n    \"\"\"\n    # Check if the triangle is equilateral or not.\n    print(check_triangle(3, 4, 5))\n    print(check_triangle(4, 7, 9))\n    print(check_triangle(9, 4, 7))\n    print(check_triangle(5, 3, 4))\n    print(check_triangle(1, 2, 3))",
    "def is_equilateral(x, y, z):\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_equilateral(1, 1, 1))\n    print(is_equilateral(2, 2, 2))\n    print(is_equilateral(3, 3, 3))\n    print(is_equilateral(1, 2, 1))\n    print(is_equilateral(1, 1, 2))\n    print(is_equilateral(2, 3, 2))\n    print(is_equilateral(3, 4, 2))\n    print(is_equilateral(4, 3, 2))\n    print(is_equilateral(3, 3, 4))\n    print(is_equilateral(4, 4, 4))\n    print(is_equilateral(5, 5, 5))\n    print(is_equilateral(6, 5, 6))\n    print(is_equilateral(5, 5, 6))\n    print(is_equilateral(6, 6, 6))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    return a * b == c * c\n\nif __name__ == '__main__':\n    print(is_equilateral(3, 4, 5))\n    print(is_equilateral(4, 5, 6))\n    print(is_equilateral(5, 6, 7))\n    print(is_equilateral(1, 2, 3))\n    print(is_equilateral(2, 3, 4))\n    print(is_equilateral(3, 4, 5))",
    "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.x = a\n#         self.y = b\n#         self.z = c\n\nclass Solution:\n    # @param triangle, a list of Point\n    # @return a boolean\n    def isEquilateral(self, triangle):\n        if triangle is None or len(triangle)!= 3:\n            return False\n        for i in range(0, len(triangle) - 1):\n            if triangle[i].z!= triangle[i + 1].z:\n                return False\n        return True",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    if a + b > c and a + c > b:\n        return True\n    else:\n        return False\n\nprint is_equilateral(1, 2, 3)\nprint is_equilateral(2, 1, 1)\nprint is_equilateral(3, 1, 2)\nprint is_equilateral(3, 2, 1)\nprint is_equilateral(3, 3, 3)",
    "def is_equilateral(n):\n    \"\"\"\n    Check if a triangle is equilateral or not.\n\n    :param n: The number of vertices of the triangle.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 3:\n        return False\n    return all([a**2 + b**2 == c**2 for a, b, c in zip(range(n), range(n), range(n))])\n\nprint(is_equilateral(3))",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    return (a * b == c)\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    if is_equilateral(a, b, c):\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    \"\"\"\n    Check if triangle is equilateral\n\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return math.sqrt((a + b + c) / 2) == math.sqrt((a + b + c) / 2)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n\n    print(\"a: {}, b: {}, c: {}\".format(a, b, c))\n\n    if is_equilateral(a, b, c):\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")",
    "def is_equilateral(p):\n    return p[0]**2 + p[1]**2 == p[2]**2\n\n# Complete the isEquilateral function below.\ndef is_equilateral(p):\n    return p[0]**2 + p[1]**2 == p[2]**2\n\nif __name__ == '__main__':\n    assert is_equilateral([2,3,4]) == True\n    assert is_equilateral([4,1,2]) == False",
    "from math import sqrt\n\ndef is_equilateral(triangle):\n    \"\"\"\n    Given a triangle, return True if it is equilateral, and False otherwise.\n\n    triangle = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    triangle = [[1, 2, 3], [1, 2, 4], [1, 2, 5]]\n\n    triangle = [[1, 2, 3], [2, 2, 3], [1, 2, 3]]\n\n    triangle = [[1, 2, 3], [2, 2, 3], [2, 2, 3]]\n\n    triangle = [[1, 2, 3], [2, 2, 3], [3, 2, 3]]\n\n    triangle = [[1, 2, 3], [2, 2, 3], [3, 2, 3], [3, 2, 3]]\n    \"\"\"\n    n = len(triangle)\n    for i in range(0, n):\n        for j in range(0, i):\n            if triangle[i][0] == triangle[j][0]:\n                if triangle[i][1] == triangle[j][1]:\n                    if triangle[i][2] == triangle[j][2]:\n                        if abs(triangle[i][0] - triangle[j][0]) == abs(triangle[i][1] - triangle[j][1]) and abs(triangle[i][2] - triangle[j][2]) == abs(triangle[i][0] - triangle[j][0]):\n                            return True\n    return False\n\n#print(is_equilateral([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n#print(is_equilateral([[1, 2, 3], [1, 2, 4], [1, 2, 5]]))\n#print(is_equilateral([[1, 2, 3], [2, 2, 3], [1, 2, 3]]))\n#print(is_equilateral([[1, 2, 3], [2, 2, 3], [2, 2, 3]]))\n#print(is_equilateral([[1, 2, 3], [2, 2, 3], [3",
    "def is_equilateral(a, b, c):\n    \"\"\"\n    a, b, c: The length of sides of the triangle.\n    \"\"\"\n    return (a + b + c) == (a * b * c) / 2\n\ndef main():\n    \"\"\"\n    main() is the entry point of this program.\n    \"\"\"\n    print(is_equilateral(1, 1, 1))\n    print(is_equilateral(1, 1, 2))\n    print(is_equilateral(1, 2, 1))\n    print(is_equilateral(2, 1, 1))\n    print(is_equilateral(1, 1, 1))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef equilateral(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    if (x1 * y2 - y1 * x2) == 0:\n        if (x2 * y3 - y2 * x3) == 0:\n            if (x3 * y1 - y3 * x1) == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\n# Test Cases\nx1, y1, x2, y2, x3, y3 = 1, 2, 3, 4, 5, 6\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# False\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# False\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)\n\n# True\nprint equilateral(x1, y1, x2, y2, x3, y3)",
    "def equilateral(triangle):\n    \"\"\"\n    Input: A triangle, a list of points in the triangle\n    Output: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    # If the triangle is not equilateral, there will be a point that is not\n    # equal to the sum of the two adjacent points\n    sum_of_adj = triangle[0] + triangle[1]\n    for point in triangle[2:]:\n        if point!= sum_of_adj:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    triangle = [[1,2,3],[2,4,6],[3,6,9]]\n    print equilateral(triangle)\n    triangle = [[1,2,3],[1,4,5],[1,5,6],[1,6,7]]\n    print equilateral(triangle)\n    triangle = [[1,2,3],[2,4,5],[3,6,7],[4,5,6]]\n    print equilateral(triangle)\n    triangle = [[1,2,3],[2,4,5],[3,6,7],[4,5,6],[4,6,7]]\n    print equilateral(triangle)",
    "import math\n\n\ndef is_equilateral(a, b, c):\n    return math.sqrt(a ** 2 + b ** 2) == c\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first side: \"))\n    b = float(input(\"Enter second side: \"))\n    c = float(input(\"Enter third side: \"))\n    equilateral = is_equilateral(a, b, c)\n    if equilateral:\n        print(\"Triangle is equilateral.\")\n    else:\n        print(\"Triangle is not equilateral.\")",
    "def equilateral(a,b,c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    if (a+b+c) == 0:\n        return False\n    if (a+b+c) == 1:\n        return True\n    return False\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(\"{0} is equilateral\".format(equilateral(a,b,c)))\n\nif __name__ == '__main__':\n    main()",
    "from math import sqrt\n\n\ndef is_equilateral(p1, p2, p3):\n    \"\"\"\n    Check if the given points are equilateral.\n    \"\"\"\n    if (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 == (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2:\n        return True\n    else:\n        return False\n\n\ndef check_equilateral(p1, p2, p3):\n    \"\"\"\n    Check if the given points are equilateral.\n    \"\"\"\n    if (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 == (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2:\n        return True\n    else:\n        return False\n\n\ndef check_triangle(p1, p2, p3):\n    \"\"\"\n    Check if the given points are equilateral.\n    \"\"\"\n    if (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 == (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2:\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    Main function to run the program.\n    \"\"\"\n    p1 = (1, 2)\n    p2 = (2, 3)\n    p3 = (3, 4)\n    print(is_equilateral(p1, p2, p3))\n    print(check_equilateral(p1, p2, p3))\n    print(check_triangle(p1, p2, p3))\n\n\nif __name__ == '__main__':\n    main()",
    "# https://www.hackerrank.com/challenges/equilateral-triangle/problem\n\n# Initialize a variable for triangle\n# triangle = [ [0, 1], [1, 1], [1, 0] ]\ntriangle = [[1, 2], [2, 2], [1, 1]]\n\n# Check if the triangle is equilateral or not\nequilateral = False\n\nfor i in range(0, 3):\n    for j in range(0, 3):\n        if triangle[i][j] == triangle[i][j + 1] and triangle[i][j] == triangle[i + 1][j]:\n            equilateral = True\n            break\n\nif equilateral:\n    print('The triangle is equilateral')\nelse:\n    print('The triangle is not equilateral')",
    "# check if the triangle is equilateral\ndef is_equilateral(a, b, c):\n    return a * b == c * c\n\n# check if the triangle is equilateral or not\ndef is_equilateral_or_not(a, b, c):\n    if is_equilateral(a, b, c):\n        return True\n    else:\n        return False\n\n# test\nassert is_equilateral(3, 4, 5)\nassert is_equilateral_or_not(3, 4, 5)\nassert is_equilateral_or_not(3, 4, 2)\nassert is_equilateral_or_not(1, 4, 6)",
    "# https://www.geeksforgeeks.org/check-if-a-triangle-is-equilateral-or-not/\ndef is_equilateral(a, b, c):\n    return abs(a + b + c) / 2.0 == abs(a + b + c) / 3.0\n\n# https://www.geeksforgeeks.org/check-if-a-triangle-is-equilateral-or-not/\ndef is_equilateral2(a, b, c):\n    return abs(a + b + c) / 2.0 == abs(a + b + c) / 3.0 and a + b + c == a * b * c\n\ndef main():\n    a = float(input(\"Enter a value for a: \"))\n    b = float(input(\"Enter a value for b: \"))\n    c = float(input(\"Enter a value for c: \"))\n    is_equilateral(a, b, c)\n    is_equilateral2(a, b, c)\n\nif __name__ == \"__main__\":\n    main()",
    "def equilateral(triangle):\n    \"\"\"\n    Check if the triangle is equilateral or not.\n    \"\"\"\n    return True if sum(triangle) == (len(triangle) - 1) * (triangle[0] + triangle[1]) else False\n\nif __name__ == \"__main__\":\n    triangle = [1, 2, 3]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    equilateral(triangle)\n    triangle = [1, 2, 3, 4, 5, 6, 7, 8, 9,",
    "def is_equilateral(p1, p2, p3):\n    '''\n    p1, p2, p3 are points of a triangle\n    '''\n    \n    a = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    b = (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2\n    c = (p2[0] - p3[0]) ** 2 + (p2[1] - p3[1]) ** 2\n\n    return (a == b) and (a == c)\n\n\nif __name__ == \"__main__\":\n    print(is_equilateral([1, 1], [2, 2], [3, 3]))\n    print(is_equilateral([1, 1], [2, 2], [2, 2]))\n    print(is_equilateral([1, 1], [2, 2], [3, 3]))",
    "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isEquilateral(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: bool\n        \"\"\"\n        # a and b are the same\n        a = p1.a\n        b = p1.b\n        c = p1.c\n        # b is the same\n        if p2.a == p3.a and p2.b == p3.b:\n            return True\n        # b is the same\n        if p2.b == p3.b and p2.c == p3.c:\n            return True\n        # c is the same\n        if p2.c == p3.c and p2.a == p3.a:\n            return True\n        # a is the same\n        if p2.a == p3.a and p2.b == p3.b:\n            return False\n        # a and c are the same\n        if p2.a == p3.c and p2.b == p3.b:\n            return False\n        # b and c are the same\n        if p2.b == p3.a and p2.c == p3.a:\n            return False\n        # a is the same\n        if p2.a == p3.b and p2.b == p3.c:\n            return False\n        # b is the same\n        if p2.b == p3.c and p2.c == p3.a:\n            return False\n        # c is the same\n        if p2.c == p3.b and p2.b == p3.a:\n            return False\n        # a and b are the same\n        if p2.a == p3.c and p2.b == p3.b:\n            return False\n        # a is the same\n        if p"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}