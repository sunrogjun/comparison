{
  "problem": {
    "task_id": "MBPP/295",
    "prompt": "Write a function to return the sum of all divisors of a number.",
    "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
    "test_list": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ],
    "challenge_test_list": [],
    "problem_id": 284
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def sumOfDivisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return sum([i for i in xrange(1, num+1) if num % i == 0])\n\nprint sumOfDivisors(100)",
    "def sum_divisors(number):\n    \"\"\"\n    :param number: int\n    :return: int\n    \"\"\"\n    return sum(divisors(number))\n\ndef divisors(n):\n    \"\"\"\n    :param n: int\n    :return: list of int\n    \"\"\"\n    if n < 2:\n        return [1]\n    return [i for i in range(2, n+1) if n % i == 0]",
    "def sum_divisors(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    divisors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    return sum(divisors)\n\n\n# Test Cases\n\nassert sum_divisors(1) == 1\nassert sum_divisors(2) == 2\nassert sum_divisors(3) == 6\nassert sum_divisors(4) == 12\nassert sum_divisors(5) == 20\nassert sum_divisors(6) == 30\nassert sum_divisors(7) == 42\nassert sum_divisors(8) == 56\nassert sum_divisors(9) == 84",
    "# The function should return a list with the sum of all divisors of the number.\n# For example, the sum of the divisors of 28 is 1 + 2 + 4 + 7 + 14 = 28.\n# The sum of the divisors of 28**3 is 1 + 2 + 4 + 7 + 8 + 16 + 21 + 28 = 56.\n\n# Note:\n# The solution should be in O(log n) time complexity.\n# The input n will be a non-negative integer.\n\n# Example 1:\n# Input: n = 28\n# Output: [1, 2, 4, 7, 14]\n# Example 2:\n# Input: n = 0\n# Output: [0]\n# Example 3:\n# Input: n = 1\n# Output: [1]\n# Example 4:\n# Input: n = 6\n# Output: [1, 2, 3, 4, 5, 6]\n\n# time:O(logn)\n# space:O(1)\n\nclass Solution(object):\n    def getDivisors(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        if n < 0:\n            return []\n        if n == 0:\n            return [0]\n        if n == 1:\n            return [1]\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(n / i)\n                divisors.append(n / i * i)\n        return divisors\n\nif __name__ == \"__main__\":\n    assert Solution().getDivisors(28) == [1, 2, 4, 7, 14]\n    assert Solution().getDivisors(0) == []\n    assert Solution().getDivisors(1) == [1]\n    assert Solution().getDivisors(6) == [1, 2, 3, 4, 5, 6]",
    "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> Returns the sum of all divisors of num.\n    \"\"\"\n    result = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            result += i\n    return result",
    "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    s = [1]\n    for i in range(2, n+1):\n        s.append(i)\n        for j in range(i, 0, -1):\n            if i % j == 0:\n                s.remove(i)\n                break\n    return s\n\nif __name__ == \"__main__\":\n    print sum_divisors(12)",
    "def get_divisors(num):\n    if num == 0:\n        return []\n\n    divisors = []\n    for i in range(2, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors += get_divisors(num / i)\n    return divisors\n\nif __name__ == '__main__':\n    num = 5\n\n    print get_divisors(num)",
    "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n < 2:\n        return 0\n\n    # we can use the algorithm to get the sum of all divisors of n\n    # since the number of divisors of a number is equal to the number of its\n    # divisors divided by the number itself.\n    return sum_divisors(n - 1) + sum_divisors(n / 2) + sum_divisors(n / 3) + sum_divisors(n / 4) + sum_divisors(n / 5) + sum_divisors(n / 6) + sum_divisors(n / 7) + sum_divisors(n / 8) + sum_divisors(n / 9)\n\n\n# time limit test\n# 3 hours\n# memory limit test\n# 3 GB\nif __name__ == '__main__':\n    print(sum_divisors(1))",
    "def sum_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    for i in range(2, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n    return sum(divisors)\n\n#print sum_divisors(28)",
    "class Solution(object):\n    def sumOfDivisors(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return sum([i for i in xrange(1, num + 1) if num % i == 0])",
    "def sumDivisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n\n    return sum(divisors)",
    "",
    "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> int\n\n    Returns the sum of all divisors of num.\n    \"\"\"\n    # Base case\n    if num == 1:\n        return 1\n    # Base case\n    if num % 2 == 0:\n        return sum_divisors(num / 2) + num\n\n    # Recursive case\n    return sum_divisors(num - 1) + sum_divisors(num + 1)\n\nif __name__ == '__main__':\n    # Test cases\n    print sum_divisors(1)\n    print sum_divisors(2)\n    print sum_divisors(3)\n    print sum_divisors(4)\n    print sum_divisors(5)\n    print sum_divisors(6)\n    print sum_divisors(7)\n    print sum_divisors(8)\n    print sum_divisors(9)\n    print sum_divisors(10)\n    print sum_divisors(12)\n    print sum_divisors(100)",
    "def sum_divisors(n):\n    divisor_set = set(range(1, n + 1))\n    return sum(divisor_set.remove(d) for d in divisor_set if n % d == 0)\n\ndef main():\n    print(sum_divisors(100))\n    print(sum_divisors(20))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://www.hackerearth.com/practice/basic-introduction-to-algorithms/algorithms/data-structures/practice-problems/algorithms/divisors/solutions/solution-1/\n\ndef sum_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    \n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nif __name__ == \"__main__\":\n    number = int(input())\n    print(sum_divisors(number))",
    "def get_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of num.\n\n    >>> get_divisors(0)\n    1\n    >>> get_divisors(1)\n    1\n    >>> get_divisors(2)\n    2\n    >>> get_divisors(3)\n    1\n    >>> get_divisors(4)\n    3\n    >>> get_divisors(5)\n    2\n    >>> get_divisors(6)\n    5\n    >>> get_divisors(7)\n    5\n    >>> get_divisors(8)\n    13\n    >>> get_divisors(9)\n    7\n    >>> get_divisors(10)\n    10\n    \"\"\"\n    if num < 0:\n        return 0\n    if num == 0:\n        return 1\n    divisors = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num // i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# Note:\n# There are only positive numbers that can be divided.\n# A divisor of 0 is not a divisor.\n# A divisor of 1 is not a divisor.\n# A divisor of the number itself is not a divisor.\n# A divisor of 1 is also not a divisor.\n# If there are multiple divisors, the answer should be the sum of all these.\n\ndef sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    return sum_divisors(n//2) + sum_divisors(n//3) + sum_divisors(n//4) + sum_divisors(n//5) + sum_divisors(n//6) + sum_divisors(n//7) + sum_divisors(n//8)\n\nprint(sum_divisors(100))",
    "def sumDivisors(n):\n    return sum(divisors(n))\n\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    else:\n        return [1] + [n//i for i in range(2,int(n**0.5)+1) if n % i == 0]\n\nprint(sumDivisors(100))",
    "from collections import Counter\n\ndef sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            while n % i == 0:\n                n /= i\n    return divisors\n\ndef sum_divisors_recursive(n):\n    \"\"\"\n    >>> sum_divisors_recursive(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    if n == 1:\n        return [1]\n    divisors = [1]\n    while n > 1:\n        if n % 2 == 0:\n            divisors.append(2)\n            n /= 2\n        else:\n            if n % 3 == 0:\n                divisors.append(3)\n                n /= 3\n            else:\n                while n % 5 == 0:\n                    divisors.append(5)\n                    n /= 5\n    return divisors\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "def sum_divisors(n):\n    if n == 1:\n        return 1\n    else:\n        return sum(n//i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\nif __name__ == \"__main__\":\n    print(sum_divisors(5))\n    print(sum_divisors(10))\n    print(sum_divisors(100))",
    "def sum_of_divisors(num):\n    divisors = [i for i in range(1, num+1)]\n    for i in range(2, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_of_divisors(20))",
    "def get_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of num\n    \"\"\"\n    result = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            result += i\n    return result\n\nnum = int(input())\n\nprint(get_divisors(num))",
    "def sum_divisors(num):\n    \"\"\"\n    >>> sum_divisors(10)\n    44\n    >>> sum_divisors(8)\n    16\n    >>> sum_divisors(6)\n    24\n    >>> sum_divisors(14)\n    44\n    \"\"\"\n    if num == 1:\n        return 1\n    elif num == 0:\n        return 0\n    else:\n        return sum_divisors(num / 2) + sum_divisors(num / 2 - 1)\n\n\ndef main():\n    print sum_divisors(10)\n    print sum_divisors(8)\n    print sum_divisors(6)\n    print sum_divisors(14)\n\nif __name__ == '__main__':\n    main()",
    "def get_divisors(num):\n    divisors = [1]\n    for i in range(2, num/2 + 1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num/i)\n    return divisors\n\nif __name__ == \"__main__\":\n    print get_divisors(10)\n    print get_divisors(14)",
    "def divisors(n):\n    \"\"\"\n    >>> divisors(10) == sum(divisors(i) for i in range(1, 11))\n    True\n    >>> divisors(0)\n    0\n    \"\"\"\n    divisor_count = [1]\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            divisor_count.append(i)\n            n //= i\n    return sum(divisor_count)\n\nprint(divisors(10))",
    "from collections import Counter\n\n\ndef sum_divisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    c = Counter(num)\n    sum = 0\n    for d in c:\n        sum += 1 + sum_divisors(d)\n    return sum\n\n\nif __name__ == '__main__':\n    assert sum_divisors(0) == 0\n    assert sum_divisors(1) == 1\n    assert sum_divisors(2) == 2\n    assert sum_divisors(3) == 3\n    assert sum_divisors(4) == 2\n    assert sum_divisors(5) == 5\n    assert sum_divisors(6) == 3\n    assert sum_divisors(7) == 2\n    assert sum_divisors(8) == 4\n    assert sum_divisors(9) == 9\n    assert sum_divisors(10) == 10",
    "def sumOfDivisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # 1. Initialize the sum to 0.\n    sum = 0\n    # 2. Loop over all divisors.\n    for i in range(1, n + 1):\n        # 3. If the current divisor is not 1 or n, add it to the sum.\n        if i!= 1 and i!= n:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print(sumOfDivisors(9))",
    "def sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    3\n    >>> sum_divisors(3)\n    6\n    >>> sum_divisors(4)\n    12\n    >>> sum_divisors(5)\n    20\n    >>> sum_divisors(6)\n    36\n    >>> sum_divisors(7)\n    50\n    >>> sum_divisors(8)\n    72\n    >>> sum_divisors(9)\n    136\n    \"\"\"\n    if n == 0:\n        return 0\n    res = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            res += i\n    return res",
    "def get_divisors(number):\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.extend(get_divisors(number // i))\n    return divisors\n\nprint(get_divisors(10))",
    "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # We'll start with the trivial fact that n is 0\n    # if n is 0, we'll return 0\n    if n == 0:\n        return 0\n    # We'll add the number of divisors of 1\n    # this will be the sum of the divisors of 0\n    # and the sum of the divisors of 1\n    # (which is 0)\n    return 1 + sum_divisors(n - 1)\n\nif __name__ == \"__main__\":\n    print sum_divisors(10)\n    print sum_divisors(12)\n    print sum_divisors(13)\n    print sum_divisors(24)\n    print sum_divisors(25)",
    "# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1\n    else:\n        return sum_divisors(number / 2) + sum_divisors(number % 2)\n\n# Recursion\ndef sum_divisors(number):\n    if number == 1:\n        return 1",
    "# https://www.hackerrank.com/challenges/divisor-sum/problem\n\ndef divisor_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    \n    divisor_sum_list = []\n    i = 2\n    while i < num:\n        if num % i == 0:\n            divisor_sum_list.append(i)\n            divisor_sum_list.append(num / i)\n        i += 1\n    return sum(divisor_sum_list)\n\n\nif __name__ == '__main__':\n    num = int(input())\n    print(divisor_sum(num))",
    "def sum_divisors(number):\n    \"\"\"\n    For a given number n, return the sum of all divisors of n.\n    If n is a prime number, return 0.\n    If n is an even number, return the sum of all divisors of n.\n    If n is an odd number, return the sum of all divisors of n-1 and the divisor of n-1.\n    \"\"\"\n    return 0\n\nif __name__ == '__main__':\n    assert sum_divisors(20) == 6\n    assert sum_divisors(10) == 6\n    assert sum_divisors(6) == 6\n    assert sum_divisors(15) == 15\n    assert sum_divisors(25) == 24\n    assert sum_divisors(24) == 24\n    assert sum_divisors(29) == 26\n    assert sum_divisors(36) == 26\n    assert sum_divisors(36) == 36\n    assert sum_divisors(42) == 28\n    assert sum_divisors(49) == 34\n    assert sum_divisors(50) == 34\n    assert sum_divisors(51) == 35\n    assert sum_divisors(61) == 35\n    assert sum_divisors(62) == 36\n    assert sum_divisors(63) == 37\n    assert sum_divisors(64) == 37\n    assert sum_divisors(65) == 37\n    assert sum_divisors(69) == 38\n    assert sum_divisors(70) == 39\n    assert sum_divisors(71) == 38\n    assert sum_divisors(72) == 39\n    assert sum_divisors(73) == 41\n    assert sum_divisors(74) == 41\n    assert sum_divisors(75) == 42\n    assert sum_divisors(76) == 42\n    assert sum_divisors(77) == 42\n    assert sum_divisors(78) == 42\n    assert sum_divisors(79) == 42\n    assert sum_divisors(80) == 42\n    assert sum_divisors",
    "# sum of divisors\ndef sum_divisors(n):\n    return sum(divisors(n))\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    return [x for x in range(1, n+1) if n % x == 0]",
    "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> 0\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum of all divisors of num\n    sum_divisors(num) -> sum",
    "def sum_divisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    return sum_divisors(num // 2) + sum_divisors(num - 1)\n\nif __name__ == \"__main__\":\n    print(sum_divisors(1))\n    print(sum_divisors(2))\n    print(sum_divisors(3))\n    print(sum_divisors(4))\n    print(sum_divisors(5))\n    print(sum_divisors(6))\n    print(sum_divisors(7))\n    print(sum_divisors(8))\n    print(sum_divisors(9))\n    print(sum_divisors(10))\n    print(sum_divisors(11))\n    print(sum_divisors(12))\n    print(sum_divisors(13))\n    print(sum_divisors(14))\n    print(sum_divisors(15))\n    print(sum_divisors(16))\n    print(sum_divisors(17))\n    print(sum_divisors(18))\n    print(sum_divisors(19))\n    print(sum_divisors(20))\n    print(sum_divisors(21))\n    print(sum_divisors(22))\n    print(sum_divisors(23))\n    print(sum_divisors(24))\n    print(sum_divisors(25))\n    print(sum_divisors(26))\n    print(sum_divisors(27))\n    print(sum_divisors(28))\n    print(sum_divisors(29))\n    print(sum_divisors(30))\n    print(sum_divisors(31))\n    print(sum_divisors(32))\n    print(sum_divisors(33))\n    print(sum_divisors(34))\n    print(sum_divisors(35))\n    print(",
    "def sum_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    i = 2\n    while i * i <= number:\n        if number % i == 0:\n            divisors.append(i)\n            if i == number / i:\n                divisors.append(number)\n        i += 1\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print(sum_divisors(11))\n    print(sum_divisors(4))\n    print(sum_divisors(100))\n    print(sum_divisors(100))\n    print(sum_divisors(1000))\n    print(sum_divisors(1000))",
    "# https://projecteuler.net/problem=13\n\nimport itertools\nimport math\n\n\ndef get_divisors(number):\n    divisors = set()\n\n    for i in xrange(1, number + 1):\n        if number % i == 0:\n            divisors.add(i)\n            divisors.add(number / i)\n\n    return divisors\n\n\ndef get_divisors_iter(number):\n    divisors = []\n\n    for i in xrange(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n\n    return divisors\n\n\ndef get_divisors_rec(number):\n    if number == 1:\n        return []\n\n    divisors = []\n    for i in xrange(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n\n    return divisors\n\n\ndef get_divisors_rec2(number):\n    if number == 1:\n        return []\n\n    divisors = []\n    for i in xrange(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n\n    return divisors\n\n\ndef get_divisors_iter2(number):\n    divisors = []\n\n    for i in xrange(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n\n    return divisors\n\n\ndef get_divisors_rec3(number):\n    if number == 1:\n        return []\n\n    divisors = []\n    for i in xrange(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n\n    return divisors\n\n\ndef get_",
    "def sum_divisors(n):\n    return sum(i for i in xrange(1, n) if n % i == 0)\n\nif __name__ == \"__main__\":\n    print sum_divisors(10)",
    "def sum_of_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return sum(divisor for divisor in range(1, number) if number % divisor == 0)\n\n\nif __name__ == '__main__':\n    assert sum_of_divisors(0) == 0,'sum_of_divisors(0) should be 0'\n    assert sum_of_divisors(1) == 1,'sum_of_divisors(1) should be 1'\n    assert sum_of_divisors(2) == 2,'sum_of_divisors(2) should be 2'\n    assert sum_of_divisors(3) == 1,'sum_of_divisors(3) should be 1'\n    assert sum_of_divisors(4) == 2,'sum_of_divisors(4) should be 2'\n    assert sum_of_divisors(5) == 2,'sum_of_divisors(5) should be 2'\n    assert sum_of_divisors(6) == 3,'sum_of_divisors(6) should be 3'\n    assert sum_of_divisors(8) == 2,'sum_of_divisors(8) should be 2'\n    assert sum_of_divisors(12) == 3,'sum_of_divisors(12) should be 3'\n    assert sum_of_divisors(18) == 3,'sum_of_divisors(18) should be 3'\n    assert sum_of_divisors(20) == 4,'sum_of_divisors(20) should be 4'\n    assert sum_of_divisors(21) == 5,'sum_of_divisors(21) should be 5'\n    assert sum_of_divisors(22) == 5,'sum_of_divisors(22) should be 5'\n    assert sum_of_divisors(23) == 6,'sum_of_divisors(23) should be 6'\n    assert sum_of",
    "def sum_divisors(num):\n    return sum([i for i in range(1, int(num)+1) if num%i == 0])\n\ndef sum_divisors_recursive(num):\n    \"\"\"\n    Write a recursive function to return the sum of all divisors of a number.\n\n    :param num: an integer\n    :return: the sum of all divisors of num\n    \"\"\"\n\n    if num == 1:\n        return 1\n    else:\n        return sum_divisors_recursive(num-1) + sum_divisors_recursive(num/2)\n\nprint sum_divisors(5)\n#>>> 3\nprint sum_divisors_recursive(5)\n#>>> 3",
    "def sumOfDivisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([i for i in range(1, int(n ** 0.5) + 1) if n % i == 0])\n\nif __name__ == '__main__':\n    assert sumOfDivisors(17) == 15\n    assert sumOfDivisors(26) == 23\n    assert sumOfDivisors(28) == 14\n    assert sumOfDivisors(30) == 21\n    assert sumOfDivisors(31) == 22\n    assert sumOfDivisors(32) == 23\n    assert sumOfDivisors(33) == 23\n    assert sumOfDivisors(34) == 24\n    assert sumOfDivisors(35) == 25\n    assert sumOfDivisors(36) == 26\n    assert sumOfDivisors(37) == 27\n    assert sumOfDivisors(38) == 28\n    assert sumOfDivisors(39) == 29\n    assert sumOfDivisors(40) == 30\n    assert sumOfDivisors(41) == 31\n    assert sumOfDivisors(42) == 32\n    assert sumOfDivisors(43) == 33\n    assert sumOfDivisors(44) == 34\n    assert sumOfDivisors(45) == 35\n    assert sumOfDivisors(46) == 36\n    assert sumOfDivisors(47) == 37\n    assert sumOfDivisors(48) == 38\n    assert sumOfDivisors(49) == 39\n    assert sumOfDivisors(50) == 40\n    assert sumOfDivisors(51) == 41\n    assert sumOfDivisors(52) == 42\n    assert sumOfDivisors(53) == 43\n    assert sumOfDivisors(54) == 44\n    assert sumOfDivisors(55) == 45\n    assert sumOfDivisors(56) == 46\n    assert sumOfDivisors(57) == 47\n    assert sumOfDivisors(58) == 48\n    assert sumOfDivisors(59) == 49\n    assert sumOfDivisors(60",
    "def sum_divisors(num):\n    if num == 0:\n        return 1\n\n    s = 0\n    for i in range(1, num):\n        if num % i == 0:\n            s += i + sum_divisors(num / i)\n    return s\n\nprint sum_divisors(10)",
    "def sum_of_divisors(n):\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    Return a list of the divisors of n.\n    \"\"\"\n    divisor_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_list.append(i)\n            divisor_list.append(n//i)\n    return divisor_list\n\nif __name__ == '__main__':\n    print(sum_of_divisors(28))",
    "def sum_of_divisors(n):\n    return sum([i for i in range(1, n) if n % i == 0])\n\nprint(sum_of_divisors(100))",
    "# Function definition\ndef sum_divisors(n):\n    # Your code here\n    return sum(i for i in range(1, n+1) if n % i == 0)\n\n\n# Test cases\nprint sum_divisors(6)\nprint sum_divisors(4)\nprint sum_divisors(12)",
    "def sum_divisors(number):\n    result = 0\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n    return result\n\n\nprint sum_divisors(13)",
    "def sum_divisors(num):\n    # write your code here\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 6\n    elif num == 4:\n        return 6\n    elif num == 5:\n        return 20\n    elif num == 6:\n        return 42\n    elif num == 7:\n        return 84\n    elif num == 8:\n        return 84\n    elif num == 9:\n        return 84\n    elif num == 10:\n        return 210\n    elif num == 11:\n        return 504\n    elif num == 12:\n        return 504\n    elif num == 13:\n        return 504\n    elif num == 14:\n        return 504\n    elif num == 15:\n        return 1542\n    elif num == 16:\n        return 1542\n    elif num == 17:\n        return 1542\n    elif num == 18:\n        return 1542\n    elif num == 19:\n        return 1542\n    elif num == 20:\n        return 5040\n    elif num == 21:\n        return 21120\n    elif num == 22:\n        return 21120\n    elif num == 23:\n        return 21120\n    elif num == 24:\n        return 21120\n    elif num == 25:\n        return 25200\n    elif num == 26:\n        return 25200\n    elif num == 27:\n        return 25200\n    elif num == 28:\n        return 25200\n    elif num == 29:\n        return 25200\n    elif num == 30:\n        return 30240\n    elif num == 31:\n        return 30240\n    elif num == 32:\n        return 30240\n    elif num == 33:\n        return 30240\n    elif num == 34:\n        return 30240\n    elif num == 35:\n        return 35280\n    elif num == 36:\n        return 35280\n    elif num == 37:\n        return 35280\n    elif num == 38:\n        return 35280\n    elif num == 39:\n        return 35280\n    el",
    "def sum_divisors(n):\n\t# write your code here\n\treturn sum(divisors(n))\n\ndef divisors(n):\n\tdivisors = []\n\tfor i in range(1, n):\n\t\tif n % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tdivisors.append(n/i)\n\treturn divisors",
    "def sum_divisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return sum(divisors(num))\n\ndef divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    return [i for i in range(1,n+1) if n % i == 0]",
    "def sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    3\n    >>> sum_divisors(4)\n    8\n    >>> sum_divisors(6)\n    24\n    >>> sum_divisors(100)\n    931\n    >>> sum_divisors(1000)\n    1,000,001,956\n    \"\"\"\n    if n < 2:\n        return n\n    result = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            result += i\n            result += n/i\n    return result\n\ndef main():\n    import timeit\n\n    print(timeit.timeit(stmt=\"sum_divisors(1)\", setup=\"from __main__ import sum_divisors\", number=1))\n    print(timeit.timeit(stmt=\"sum_divisors(100)\", setup=\"from __main__ import sum_divisors\", number=1))\n\nif __name__ == '__main__':\n    main()",
    "def sum_divisors(n):\n    d = {1: 1}\n    for i in range(2, n):\n        for j in range(i, n, i):\n            d[j] += 1\n    return sum(d.values())\n\n\"\"\"\nProblem #2\nWrite a function that takes an integer and returns the number of\ndivisors.\n\"\"\"\ndef divisors(n):\n    d = {1: 1}\n    for i in range(2, n):\n        d[i] += 1\n    return sum(d.values())\n\n\"\"\"\nProblem #3\nWrite a function that takes a list of numbers and returns a list of\nthe numbers' reciprocals.\n\"\"\"\ndef reciprocals(numbers):\n    recip = [1] * len(numbers)\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if j!= i:\n                recip[j] = recip[j] * numbers[i] / numbers[j]\n    return recip\n\n\"\"\"\nProblem #4\nWrite a function that takes a positive integer and returns the\nnumber of digits in its decimal representation.\n\"\"\"\ndef decimal_digits(n):\n    return decimal(n).digits\n\n\"\"\"\nProblem #5\nWrite a function that takes a positive integer and returns the\nnumber of digits in its binary representation.\n\"\"\"\ndef binary_digits(n):\n    return bin(n).count(\"1\")\n\n\"\"\"\nProblem #6\nWrite a function that takes a positive integer and returns the\nnumber of digits in its octal representation.\n\"\"\"\ndef octal_digits(n):\n    return oct(n).count(\"1\")\n\n\"\"\"\nProblem #7\nWrite a function that takes a positive integer and returns the\nnumber of digits in its hexadecimal representation.\n\"\"\"\ndef hex_digits(n):\n    return hex(n).count(\"1\")\n\n\"\"\"\nProblem #8\nWrite a function that takes a positive integer and returns the\nnumber of digits in its binary representation.\n\"\"\"\ndef binary_digits_2(n):\n    return len(bin(n)) - 1\n\n\"\"\"\nProblem #9\nWrite a function that takes a",
    "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nprint sum_divisors(12)",
    "def divisors(n):\n    divisors = [1]\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    return sum(divisors)\n\ndef main():\n    print(divisors(20))\n\nif __name__ == '__main__':\n    main()",
    "def sumOfDivisors(num):\n    divisors = [1]\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                divisors.append(i)\n    return sum(divisors)\n\nprint sumOfDivisors(10)",
    "# Note:\n# Use a recursive solution.\n# It can be done without using any loops.\n\ndef sum_divisors(n):\n    if n == 1:\n        return 1\n    else:\n        return n * sum_divisors(n // 2) + sum_divisors(n // 3) + sum_divisors(n // 5) + sum_divisors(n // 7)\n\n\nif __name__ == '__main__':\n    assert sum_divisors(2) == 1\n    assert sum_divisors(3) == 6\n    assert sum_divisors(10) == 28\n    assert sum_divisors(15) == 252\n    assert sum_divisors(20) == 1040\n    assert sum_divisors(100) == 393216",
    "from functools import reduce\n\ndef sum_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of num.\n\n    >>> sum_divisors(6)\n    6\n    >>> sum_divisors(4)\n    4\n    >>> sum_divisors(2)\n    2\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(0)\n    0\n    \"\"\"\n    return reduce(lambda x, y: x * y, divisors(num))\n\ndef divisors(num):\n    \"\"\"\n    Return the list of divisors of num.\n\n    >>> divisors(6)\n    [1, 2, 3, 6]\n    >>> divisors(4)\n    [1, 2, 4]\n    >>> divisors(2)\n    [1, 2]\n    >>> divisors(1)\n    [1]\n    >>> divisors(0)\n    []\n    \"\"\"\n    if num == 0:\n        return []\n    divisors = [1]\n    for i in range(2, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num / i)\n    return divisors\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_of_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    d = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            d += i\n    return d",
    "# https://www.hackerrank.com/challenges/divisor-sum/problem\n\ndef sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([x for x in range(1, n+1) if n % x == 0])\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (0, 0),\n        (1, 1),\n        (2, 2),\n        (3, 3),\n        (4, 6),\n        (5, 10),\n        (6, 15),\n        (7, 21),\n        (8, 28),\n        (9, 36),\n        (10, 45),\n        (11, 56),\n        (12, 67),\n        (13, 78),\n        (14, 90),\n        (15, 105),\n        (16, 120),\n        (17, 134),\n        (18, 147),\n        (19, 160),\n        (20, 174),\n        (21, 189),\n        (22, 204),\n        (23, 219),\n        (24, 234),\n        (25, 249),\n        (26, 264),\n        (27, 279),\n        (28, 294),\n        (29, 309),\n        (30, 324),\n        (31, 339),\n        (32, 354),\n        (33, 369),\n        (34, 384),\n        (35, 399),\n        (36, 414),\n        (37, 429),\n        (38, 444),\n        (39, 459),\n        (40, 474),\n        (41, 489),\n        (42, 504),\n        (43, 519),\n        (44, 534),\n        (45, 549),\n        (46, 564),\n        (47, 579),\n        (48, 594),\n        (49, 609),\n        (50, 624),\n        (51, 639),\n        (52, 654),\n        (53, 669),\n        (54, 684),\n        (55, 699),\n        (56, 714),",
    "def sumDivisors(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\nprint(sumDivisors(20))",
    "def divisors(n):\n    \"\"\"\n    >>> divisors(1)\n    []\n    >>> divisors(2)\n    [1, 2]\n    >>> divisors(3)\n    [1, 2, 3]\n    >>> divisors(4)\n    [1, 2, 3, 4]\n    >>> divisors(5)\n    [1, 2, 3, 5]\n    >>> divisors(6)\n    [1, 2, 3, 6]\n    >>> divisors(7)\n    [1, 2, 3, 7]\n    >>> divisors(8)\n    [1, 2, 3, 8]\n    >>> divisors(9)\n    [1, 2, 3, 9]\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(100)\n    [1, 2, 5, 10, 25, 100]\n    >>> divisors(101)\n    [1, 2, 5, 10, 25, 101]\n    >>> divisors(1000)\n    [1, 2, 5, 10, 25, 100, 250, 1000]\n    >>> divisors(10000)\n    [1, 2, 5, 10, 25, 100, 250, 1000, 5000]\n    >>> divisors(1000000)\n    [1, 2, 5, 10, 25, 100, 250, 1000, 5000, 10000]\n    \"\"\"\n    if n < 2:\n        return []\n    divisors = [1]\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            divisors.append(i)\n            n //= i\n    divisors.append(n)\n    return divisors\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
    "def divisors(n):\n    divisors = [1]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    assert(divisors(0) == 0)\n    assert(divisors(1) == 1)\n    assert(divisors(2) == 2)\n    assert(divisors(3) == 1)\n    assert(divisors(4) == 2)\n    assert(divisors(5) == 2)\n    assert(divisors(6) == 2)\n    assert(divisors(7) == 2)\n    assert(divisors(8) == 2)\n    assert(divisors(9) == 3)\n    assert(divisors(10) == 2)\n    assert(divisors(11) == 3)\n    assert(divisors(12) == 2)\n    assert(divisors(13) == 3)\n    assert(divisors(14) == 2)\n    assert(divisors(15) == 3)\n    assert(divisors(16) == 2)\n    assert(divisors(17) == 3)\n    assert(divisors(18) == 2)\n    assert(divisors(19) == 3)\n    assert(divisors(20) == 2)\n    assert(divisors(21) == 3)\n    assert(divisors(22) == 2)\n    assert(divisors(23) == 3)\n    assert(divisors(24) == 2)\n    assert(divisors(25) == 3)\n    assert(divisors(26) == 2)\n    assert(divisors(27) == 3)\n    assert(divisors(28) == 2)\n    assert(divisors(29) == 3)\n    assert(divisors(30) == 2)\n    assert(divisors(31) == 3)\n    assert(divisors(32) == 2)",
    "#!/usr/bin/python\n\n#!/usr/bin/python\n\ndef get_divisors(num):\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num/i)\n    return divisors\n\nif __name__ == \"__main__\":\n    print get_divisors(5)",
    "import math\nimport time\n\ndef sumDivisors(n):\n    # This is a recursive function.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum(sumDivisors(i) for i in range(3, int(math.sqrt(n)) + 1, 2) if n % i == 0)\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print(sumDivisors(100))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
    "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result += i\n            if i * i!= n:\n                result += sum_divisors(n / i)\n    return result\n\nif __name__ == '__main__':\n    print(sum_divisors(7))\n    print(sum_divisors(24))",
    "def sumDivisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            res += i\n            while n % i == 0:\n                n /= i\n    if n > 1:\n        res += n\n    return res\n\nif __name__ == \"__main__\":\n    print sumDivisors(30)",
    "def sum_of_divisors(number):\n    if number == 0:\n        return 1\n\n    divisors = [1]\n    for i in range(2, number+1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number/i)\n    return sum(divisors)\n\nprint sum_of_divisors(7)",
    "def divisors(num):\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num/i)\n    return sum(divisors)\n\nprint(divisors(12))",
    "def get_divisors(n):\n    \"\"\"\n    Get the divisors of n.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return get_divisors(n // 2) + get_divisors(n - n // 2)\n\nif __name__ == '__main__':\n    n = 5\n    print(get_divisors(n))",
    "def get_divisors(number):\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n            if i!= number / i:\n                divisors.append(number / i)\n    return sum(divisors)\n\nprint(get_divisors(12))",
    "def sum_divisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 1\n\n    if num == 1:\n        return 2\n\n    if num % 2 == 0:\n        return num / 2\n\n    divisors = [1]\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    assert sum_divisors(6) == 3\n    assert sum_divisors(12) == 6\n    assert sum_divisors(20) == 20\n    assert sum_divisors(100) == 4\n    assert sum_divisors(123) == 22\n    assert sum_divisors(12345) == 39\n    assert sum_divisors(1234567) == 714\n    assert sum_divisors(123456789) == 942\n    assert sum_divisors(12345678901) == 1315\n    assert sum_divisors(1234567890123) == 2430",
    "def divisors(n):\n    \"\"\"\n    >>> divisors(10)\n    [1, 2, 3, 5, 7, 10, 15, 20, 30, 40]\n    >>> divisors(11)\n    [1, 2, 3, 5, 7, 11, 11, 11, 11, 11, 11]\n    >>> divisors(12)\n    [1, 2, 3, 5, 7, 11, 11, 11, 11, 11, 11, 11]\n    \"\"\"\n    return [i for i in range(1,n+1) if n%i==0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sum_divisors(num):\n    '''\n    sum_divisors(num)\n    '''\n    if num < 2:\n        return num\n    else:\n        return sum_divisors(num/2) + sum_divisors(num/2)\n\ndef main():\n    '''\n    main()\n    '''\n    num = 15\n    print(sum_divisors(num))\n\nif __name__ == '__main__':\n    main()",
    "def sum_divisors(num):\n    \"\"\"\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    3\n    >>> sum_divisors(6)\n    6\n    >>> sum_divisors(12)\n    12\n    \"\"\"\n    divisors = 1\n    for i in range(2, num):\n        if num % i == 0:\n            divisors += i\n    return divisors\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def getSumOfDivisors(self, num):\n        if num == 0:\n            return 0\n        res = [num]\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                res.append(i)\n                res.append(num / i)\n        return sum(res)",
    "#!/usr/bin/env python\n\n# @include\ndef sum_divisors(n):\n    s = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n    return s\n# @exclude\n\ndef test_sum_divisors():\n    assert sum_divisors(0) == 0\n    assert sum_divisors(1) == 1\n    assert sum_divisors(2) == 2\n    assert sum_divisors(3) == 3\n    assert sum_divisors(4) == 6\n    assert sum_divisors(5) == 15\n    assert sum_divisors(6) == 42\n    assert sum_divisors(7) == 70\n    assert sum_divisors(8) == 126\n    assert sum_divisors(9) == 252\n    assert sum_divisors(10) == 630\n    assert sum_divisors(11) == 1716\n    assert sum_divisors(12) == 5042\n    assert sum_divisors(13) == 13042\n    assert sum_divisors(14) == 43306\n    assert sum_divisors(15) == 146210\n    assert sum_divisors(16) == 514462\n    assert sum_divisors(17) == 171606\n    assert sum_divisors(18) == 562126\n    assert sum_divisors(19) == 195126\n    assert sum_divisors(20) == 584126\n    assert sum_divisors(21) == 217826\n    assert sum_divisors(22) == 636126\n    assert sum_divisors(23) == 2467826\n    assert sum_divisors(24) == 7906126\n    assert sum_divisors(25) == 28654126\n    assert sum_divisors(26) == 93036126\n    assert sum_divisors(27) == 32466126\n    assert sum_divisors(28) == 109866126\n    assert sum_divisors(29) == 37866126\n    assert sum_divisors(30)",
    "def sum_divisors(num):\n    s = [1]\n    for i in range(2, num+1):\n        s.append(i)\n        for j in range(i, num+1, i):\n            s.append(j)\n    return sum(s)\n\nprint sum_divisors(7)",
    "def sumDivisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    \n    divisorSum = 0\n    \n    # check if num is prime\n    if num % 2 == 0:\n        # if num is even\n        if num == 2:\n            return 2\n        # if num is odd\n        else:\n            # if num is divisible by 3\n            if num % 3 == 0:\n                divisorSum += 3\n            # if num is divisible by 5\n            if num % 5 == 0:\n                divisorSum += 5\n            # if num is divisible by 7\n            if num % 7 == 0:\n                divisorSum += 7\n            # if num is divisible by 11\n            if num % 11 == 0:\n                divisorSum += 11\n            # if num is divisible by 13\n            if num % 13 == 0:\n                divisorSum += 13\n            # if num is divisible by 17\n            if num % 17 == 0:\n                divisorSum += 17\n            # if num is divisible by 19\n            if num % 19 == 0:\n                divisorSum += 19\n            # if num is divisible by 23\n            if num % 23 == 0:\n                divisorSum += 23\n            # if num is divisible by 29\n            if num % 29 == 0:\n                divisorSum += 29\n            # if num is divisible by 31\n            if num % 31 == 0:\n                divisorSum += 31\n            # if num is divisible by 37\n            if num % 37 == 0:\n                divisorSum += 37\n            # if num is divisible by 41\n            if num % 41 == 0:\n                divisorSum += 41\n            # if num is divisible by 43\n            if num % 43 == 0:\n                divisorSum += 43\n            # if num is divisible by 47\n            if num % 47 == 0:\n                divisorSum += 47\n            # if num is divisible by 53\n            if num % 53 == 0:\n                divisorSum += 53\n            # if num is divisible by 59\n            if num % 59 == 0:",
    "#!/usr/bin/python\n\ndef sum_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of num.\n    \"\"\"\n    return sum([i for i in range(1, num+1) if num % i == 0])\n\nif __name__ == '__main__':\n    assert(sum_divisors(1) == 1)\n    assert(sum_divisors(2) == 2)\n    assert(sum_divisors(3) == 6)\n    assert(sum_divisors(4) == 8)\n    assert(sum_divisors(5) == 15)\n    assert(sum_divisors(6) == 22)\n    assert(sum_divisors(7) == 28)\n    assert(sum_divisors(8) == 36)\n    assert(sum_divisors(9) == 45)\n    assert(sum_divisors(10) == 55)\n    assert(sum_divisors(100) == 3430)\n    assert(sum_divisors(1000) == 78896)\n    assert(sum_divisors(10000) == 258043)\n    assert(sum_divisors(100000) == 929084)\n    assert(sum_divisors(1000000) == 10691109)\n    assert(sum_divisors(10000000) == 4986774)\n    assert(sum_divisors(100000000) == 9788238)\n    assert(sum_divisors(1000000000) == 51425881)",
    "def sum_of_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print sum_of_divisors(10)",
    "def sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(10)\n    28\n    >>> sum_divisors(5)\n    28\n    >>> sum_divisors(3)\n    4\n    \"\"\"\n    divisors = [1]\n    for i in range(2, n+1):\n        divisors.append(i)\n        for j in range(2, i):\n            divisors[i] += divisors[j]\n    return sum(divisors)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from math import sqrt\n\ndef sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n <= 0:\n        return []\n\n    result = [1]\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            result.append(i)\n            n = n // i\n        else:\n            i += 1\n    return result\n\n\ndef test():\n    assert sum_divisors(1) == 1\n    assert sum_divisors(2) == 2\n    assert sum_divisors(3) == 3\n    assert sum_divisors(4) == 6\n    assert sum_divisors(5) == 10\n    assert sum_divisors(6) == 15\n    assert sum_divisors(7) == 28\n    assert sum_divisors(8) == 56\n    assert sum_divisors(9) == 126\n    assert sum_divisors(10) == 210\n    assert sum_divisors(11) == 363\n    assert sum_divisors(12) == 630\n    assert sum_divisors(13) == 1323\n    assert sum_divisors(14) == 2821\n    assert sum_divisors(15) == 6561\n    assert sum_divisors(16) == 16289\n    assert sum_divisors(17) == 39729\n    assert sum_divisors(18) == 108863\n    assert sum_divisors(19) == 262189\n    assert sum_divisors(20) == 515887\n    assert sum_divisors(21) == 1223459\n    assert sum_divisors(22) == 2968761\n    assert sum_divisors(23) == 5910161\n    assert sum_divisors(24) == 14461529\n    assert sum_divisors(25) == 29306877\n    assert sum_divisors(26)",
    "def sum_divisors(n):\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return sum(divisors)\n\n\"\"\"\nTest cases\n\"\"\"\nfor n in range(1, 10):\n    print \"sum_divisors({0}) = {1}\".format(n, sum_divisors(n))",
    "def sum_divisors(number):\n    divisor_sum = 0\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef main():\n    print(sum_divisors(1))\n    print(sum_divisors(2))\n    print(sum_divisors(3))\n    print(sum_divisors(4))\n    print(sum_divisors(5))\n    print(sum_divisors(6))\n    print(sum_divisors(7))\n    print(sum_divisors(8))\n    print(sum_divisors(9))\n    print(sum_divisors(10))\n    print(sum_divisors(100))\n    print(sum_divisors(1000))\n    print(sum_divisors(10000))\n    print(sum_divisors(100000))\n    print(sum_divisors(1000000))\n    print(sum_divisors(10000000))\n    print(sum_divisors(100000000))\n\nif __name__ == \"__main__\":\n    main()",
    "def sum_divisors(n):\n    # @include\n    # The algorithm is to sum all the divisors of n.\n    # For example, if n is 10, the sum of divisors is\n    # 11, 21, 22, 23, 42, 43, 44, 55, 56, 57, 66,\n    # 67, 68, 79, 81, 82, 83, 84, 85, 96, 97, 98,\n    # 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\n    # 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\n    # 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n    # 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\n    # 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n    # 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,\n    # 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    # 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\n    # 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,\n    # 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,\n    # 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\n    # 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,\n    # 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,\n    # 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,\n    # 239, 240, 241, 242, 243, 244, 245, 246, 247, 248,\n    # 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,\n    # 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,\n    # 269, 270, 271, 272, 273, 274, 275, 276, 277, 278",
    "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += i\n    return s\n\nif __name__ == '__main__':\n    print sum_divisors(10)",
    "def sum_divisors(number):\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print sum_divisors(12)",
    "# write your code below\ndef sum_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # Create a list of the divisors.\n    divisor_list = [i for i in range(1, number + 1) if number % i == 0]\n    # Sum up the divisors.\n    return sum(divisor_list)",
    "def sum_divisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    for i in range(2, num+1):\n        if num % i == 0:\n            divisors.append(i)\n            while num % i == 0:\n                num /= i\n            if num == 1:\n                break\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    assert sum_divisors(6) == 3\n    assert sum_divisors(4) == 4\n    assert sum_divisors(12) == 3 + 2 + 4 + 6\n    assert sum_divisors(24) == 4 + 2 + 3 + 6 + 2\n    assert sum_divisors(123) == 3 + 2 + 23\n    assert sum_divisors(2434) == 3 + 2 + 23 + 34\n    assert sum_divisors(1234) == 3 + 2 + 23 + 34 + 12\n    assert sum_divisors(12345) == 3 + 2 + 23 + 34 + 12 + 5\n    assert sum_divisors(1234567) == 3 + 2 + 23 + 34 + 12 + 5 + 7\n    assert sum_divisors(12345678) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8\n    assert sum_divisors(123456789) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8 + 9\n    assert sum_divisors(1234567890) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8 + 9 + 10\n    assert sum_divisors(12345678901) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8 + 9 + 10 + 11\n    assert sum_divisors(123456789012) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8 + 9 + 10 + 11 + 12\n    assert sum_divisors(1234567890123) == 3 + 2 + 23 + 34 + 12 + 5 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n    assert sum_div",
    "def sumOfDivisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nprint sumOfDivisors(13)",
    "def sum_divisors(n):\n    divisors = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors += i\n    return divisors\n\nprint sum_divisors(5)",
    "from math import sqrt\n\ndef sum_divisors(n):\n    return sum(1 for i in xrange(1, n) if n % i == 0)\n\ndef sum_divisors_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return sum_divisors_recursive(n-1) + sum_divisors_recursive(n//2)\n\ndef sum_divisors_recursive_simple(n):\n    return sum(i for i in xrange(1, n+1) if n % i == 0)\n\ndef sum_divisors_iterative(n):\n    return sum(1 for i in xrange(2, n+1) if n % i == 0)\n\ndef sum_divisors_iterative_simple(n):\n    return sum(i for i in xrange(2, n+1) if n % i == 0)\n\ndef sum_divisors_iterative_recursive(n):\n    return sum(i for i in xrange(2, n+1) if n % i == 0)\n\ndef sum_divisors_iterative_recursive_simple(n):\n    return sum(i for i in xrange(2, n+1) if n % i == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "# Definition for a divisor.\nclass Divisor:\n    def __init__(self, n):\n        self.n = n\n\n    def __lt__(self, other):\n        return self.n < other.n\n\n    def __repr__(self):\n        return str(self.n)\n\n    def __str__(self):\n        return str(self.n)\n\n\nclass Solution(object):\n    def divisors(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[Divisor]\n        \"\"\"\n        d = [Divisor(1)]\n        for i in range(2, n):\n            d.append(Divisor(i))\n            for j in range(2, i):\n                d[i] += d[j]\n        return d\n\n\nif __name__ == \"__main__\":\n    assert Solution().divisors(9) == [Divisor(1), Divisor(3), Divisor(5), Divisor(7)]",
    "def sumDivisors(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    # Recursive method\n    if num == 1:\n        return 1\n    else:\n        return sumDivisors(num - 1) + num\n\n\nif __name__ == '__main__':\n    assert sumDivisors(1) == 1\n    assert sumDivisors(2) == 2\n    assert sumDivisors(3) == 3\n    assert sumDivisors(4) == 6\n    assert sumDivisors(5) == 10\n    assert sumDivisors(6) == 15\n    assert sumDivisors(7) == 21\n    assert sumDivisors(8) == 28\n    assert sumDivisors(9) == 36\n    assert sumDivisors(10) == 45\n    assert sumDivisors(11) == 55\n    assert sumDivisors(12) == 66\n    assert sumDivisors(13) == 78\n    assert sumDivisors(14) == 90\n    assert sumDivisors(15) == 105\n    assert sumDivisors(16) == 120\n    assert sumDivisors(17) == 135\n    assert sumDivisors(18) == 150\n    assert sumDivisors(19) == 165\n    assert sumDivisors(20) == 180\n    assert sumDivisors(21) == 195\n    assert sumDivisors(22) == 210\n    assert sumDivisors(23) == 225\n    assert sumDivisors(24) == 240\n    assert sumDivisors(25) == 255\n    assert sumDivisors(26) == 260\n    assert sumDivisors(27) == 270\n    assert sumDivisors(28) == 280\n    assert sumDivisors(29) == 285\n    assert sumDivisors(30) == 300\n    assert sumDivisors(31) == 315\n    assert sumDivisors(32) == 320\n    assert sumDivisors(33) == 325\n    assert sumDivisors(34) == 340\n    assert sumDivisors(35) == 355\n    assert sumDivisors(36) == 360\n    assert sum",
    "from math import ceil\n\n\ndef sum_divisors(n):\n    divisors = [1]\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n            i += 1\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    print(sum_divisors(100))",
    "def sumOfDivisors(number):\n    divisors = []\n    if number <= 1:\n        return number\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            divisors.append(i)\n            if number/i > 1:\n                divisors.append(number/i)\n    return sum(divisors)\n\nprint sumOfDivisors(13)",
    "# This is a sample of the solution\n# The function to be written is:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(divisors(number))\n\n# This is a sample of the solution:\n# def sum_divisors(number)\n#   return sum(div",
    "def sum_divisors(n):\n    divisors = [1]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n            while n % i == 0:\n                n /= i\n            if n == 1:\n                return sum(divisors)\n    return sum(divisors)\n\ndef main():\n    print sum_divisors(6)\n\nif __name__ == '__main__':\n    main()",
    "def sum_divisors(n):\n    return sum(divisors(n))\n\n\ndef divisors(n):\n    divisor_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_list.append(i)\n            divisor_list.append(n / i)\n    return divisor_list\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_divisors(n))",
    "def sum_divisors(number):\n    divisors = [1]\n    for i in range(2, number):\n        for j in range(2, i):\n            divisors.append(i)\n            if i % j == 0:\n                divisors.append(j)\n    return sum(divisors)\n\nprint(sum_divisors(9))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}