{
  "problem": {
    "task_id": "MBPP/501",
    "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
    "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
    "test_list": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ],
    "challenge_test_list": [],
    "problem_id": 490
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "def find_common_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == b:\n        return a\n    if a < b:\n        return find_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    else:\n        return find_common_divisor(a, b % a)\n\n\ndef main():\n    \"\"\"\n    Use find_common_divisor to find the common divisor between two numbers.\n    \"\"\"\n    a = 10\n    b = 20\n    print(find_common_divisor(a, b))\n\nif __name__ == '__main__':\n    main()",
    "# Complete the findCommonDivisor function below.\ndef findCommonDivisor(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return findCommonDivisor(b, a)\n    else:\n        return findCommonDivisor(a, b)\n\nif __name__ == \"__main__\":\n    print(findCommonDivisor(2, 3))\n    print(findCommonDivisor(3, 2))\n    print(findCommonDivisor(6, 5))\n    print(findCommonDivisor(5, 6))\n    print(findCommonDivisor(5, 5))\n    print(findCommonDivisor(5, 10))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 10))\n    print(findCommonDivisor(10, 10))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDivisor(10, 5))\n    print(findCommonDiv",
    "import math\n\ndef find_common_divisor(a, b):\n    return math.gcd(a, b)\n\n\n# test\nprint(find_common_divisor(10, 10))\nprint(find_common_divisor(10, 20))\nprint(find_common_divisor(10, 50))\nprint(find_common_divisor(10, 100))\nprint(find_common_divisor(10, 200))",
    "def common_divisor(a, b):\n    \"\"\"\n    a: integer\n    b: integer\n    Returns: integer\n    \"\"\"\n    if a % b == 0 or b % a == 0:\n        return a % b\n    return common_divisor(b, a % b)\n\na = input()\nb = input()\n\nprint(common_divisor(a, b))",
    "def find_common_divisor(a, b):\n\treturn a * b / max(a, b)\n\na = input().strip()\nb = input().strip()\n\nprint(find_common_divisor(int(a), int(b)))",
    "import math\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :return: common divisor\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return math.gcd(a, b)\n\ndef test_find_common_divisor():\n    assert find_common_divisor(0, 0) == 0\n    assert find_common_divisor(3, 4) == 1\n    assert find_common_divisor(6, 7) == 2\n    assert find_common_divisor(2, 8) == 2\n    assert find_common_divisor(10, 12) == 2\n    assert find_common_divisor(5, 10) == 5\n    assert find_common_divisor(4, 14) == 2\n    assert find_common_divisor(3, 15) == 3\n    assert find_common_divisor(4, 16) == 4\n\nif __name__ == \"__main__\":\n    test_find_common_divisor()",
    "def find_common_divisor(num1, num2):\n    \"\"\"\n    Return the common divisor of num1 and num2.\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 % num2 == 0:\n        return num1 % num2\n    return find_common_divisor(num2, num1 % num2)\n\nnum1 = int(input())\nnum2 = int(input())\nprint(find_common_divisor(num1, num2))",
    "# Common divisor is the smallest number that divides both numbers.\n\n# Example\n# For n = 12, the common divisor is 3\n# For n = 14, the common divisor is 4\n\ndef find_common_divisor(n):\n    return n\n\nif __name__ == '__main__':\n    assert find_common_divisor(12) == 3, \"Common divisor of 12 and 14 is 3\"\n    assert find_common_divisor(14) == 4, \"Common divisor of 14 and 12 is 4\"",
    "def common_divisor(a, b):\n    \"\"\"\n    a: first number\n    b: second number\n    return: common divisor\n    \"\"\"\n    return a % b\n\ndef main():\n    print common_divisor(10, 6)\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/find-common-divisor-between-two-numbers/discuss/147027/Python-solution-using-math-function\ndef findCommonDivisor(x, y):\n    return gcd(x, y)\n\ndef gcd(x, y):\n    if x < y:\n        return gcd(y, x)\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\nif __name__ == '__main__':\n    print(findCommonDivisor(9, 12))\n    print(findCommonDivisor(9, 14))",
    "def find_common_divisor(a, b):\n    if a == b:\n        return a\n    if a == 0 or b == 0:\n        return 0\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n\ndef main():\n    a = 1\n    b = 2\n    print(find_common_divisor(a, b))\n\nif __name__ == '__main__':\n    main()",
    "from math import gcd\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    Find common divisor of two numbers.\n    \"\"\"\n    return gcd(a, b)\n\nprint(find_common_divisor(1, 2))\n# Output: 2\n\nprint(find_common_divisor(1, 3))\n# Output: 1",
    "def common_divisor(n1, n2):\n    while n1:\n        n1, n2 = n2, n1 % n2\n    return n2\n\ndef main():\n    print(common_divisor(1, 2))\n    print(common_divisor(2, 3))\n    print(common_divisor(5, 7))\n\nif __name__ == \"__main__\":\n    main()",
    "# https://leetcode.com/problems/common-divisor/\n\nclass Solution:\n    # @return an integer\n    def commonDivisor(self, a, b):\n        if a == 0 or b == 0:\n            return 0\n        if a > b:\n            return self.commonDivisor(b, a)\n        l, r = a, b\n        while l % r!= 0:\n            l, r = r, l % r\n        return r\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.commonDivisor(2, 6))\n    print(s.commonDivisor(2, 4))\n    print(s.commonDivisor(2, 5))",
    "def findCommonDivisor(a, b):\n    \"\"\"\n    a and b are both integers.\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        a, b = b, a\n    ret = 1\n    while a!= 0:\n        ret = ret * a % b\n        a = a - 1\n    return ret\n\nif __name__ == \"__main__\":\n    print findCommonDivisor(2, 3)\n    print findCommonDivisor(9, 13)",
    "def find_common_divisor(x, y):\n    if x == 0:\n        return 0\n    elif y == 0:\n        return 0\n    else:\n        return 1\n\n    return 1",
    "def find_common_divisor(n1, n2):\n    \"\"\"\n    Given two numbers, return their common divisor.\n    \"\"\"\n    return n1 * n2 // gcd(n1, n2)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    n1 = int(input('Enter number 1: '))\n    n2 = int(input('Enter number 2: '))\n    print(find_common_divisor(n1, n2))",
    "from math import gcd\n\ndef find_common_divisor(a, b):\n    return gcd(a, b)\n\na = 4\nb = 6\n\nprint(find_common_divisor(a, b))",
    "def find_common_divisor(a, b):\n    \"\"\"\n    Write a python function to find common divisor between two numbers in a given pair.\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a % b\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_common_divisor(a, b))",
    "def common_divisor(a, b):\n    \"\"\"\n    a: int, number to be compared\n    b: int, number to be compared\n    return: int, common divisor\n    \"\"\"\n    # If a and b are equal, then return a\n    if a == b:\n        return a\n\n    # If a is greater than b, then return a\n    if a > b:\n        return common_divisor(a, b % a)\n\n    # If b is greater than a, then return a\n    if b > a:\n        return common_divisor(b, a % b)\n\n    # Else if a and b are equal, then return a\n    return a\n\ndef main():\n    a = 5\n    b = 7\n    c = common_divisor(a, b)\n    print(\"Common divisor between {} and {} is {}\".format(a, b, c))\n\nif __name__ == '__main__':\n    main()",
    "def common_divisor(x, y):\n    # write your code here\n    if x == 0 or y == 0:\n        return 0\n    if x == y:\n        return x\n    if x % y == 0:\n        return y\n    if y % x == 0:\n        return x\n    return common_divisor(x % y, y % x)\n\nprint common_divisor(7, 18)",
    "def common_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\nif __name__ == '__main__':\n    print common_divisor(7, 8)\n    print common_divisor(2, 3)\n    print common_divisor(0, 2)\n    print common_divisor(0, -2)\n    print common_divisor(0, -4)\n    print common_divisor(-3, 3)\n    print common_divisor(10, 10)\n    print common_divisor(10, 15)\n    print common_divisor(10, 20)\n    print common_divisor(10, -5)\n    print common_divisor(10, -10)\n    print common_divisor(10, -15)\n    print common_divisor(10, -20)\n    print common_divisor(10, -25)\n    print common_divisor(10, -30)\n    print common_divisor(10, -35)\n    print common_divisor(10, -40)\n    print common_divisor(10, -45)\n    print common_divisor(10, -50)\n    print common_divisor(10, -55)",
    "def get_common_divisor(num1, num2):\n    while num1!= num2:\n        if num1 < num2:\n            num1 += num2\n        else:\n            num2 += num1\n    return num1\n\ndef get_common_divisor_recursive(num1, num2):\n    if num1 == num2:\n        return num1\n    if num1 < num2:\n        return get_common_divisor_recursive(num1, num2 - num1)\n    else:\n        return get_common_divisor_recursive(num2, num1 - num2)\n\ndef get_common_divisor_iterative(num1, num2):\n    divisor = 0\n    while num1!= num2:\n        if num1 < num2:\n            num1 += num2\n        else:\n            num2 += num1\n        divisor += 1\n    return divisor\n\ndef main():\n    num1 = 4\n    num2 = 6\n    num3 = 10\n    print(get_common_divisor(num1, num2))\n    print(get_common_divisor(num1, num3))\n    print(get_common_divisor(num3, num2))\n    print(get_common_divisor_recursive(num1, num2))\n    print(get_common_divisor_iterative(num1, num2))\n    print(get_common_divisor_recursive(num3, num2))\n    print(get_common_divisor_iterative(num3, num2))\n\nif __name__ == \"__main__\":\n    main()",
    "from itertools import combinations\n\ndef find_common_divisor(num1, num2):\n    \"\"\"\n    Find common divisor for num1 and num2.\n    :param num1:\n    :param num2:\n    :return:\n    \"\"\"\n    # check if one of the number is zero\n    if num1 == 0 or num2 == 0:\n        return 0\n    # if both numbers are not same, then return 0\n    if num1!= num2:\n        return 0\n\n    # get all possible combinations of two numbers\n    # this is done by iterating through all possible combinations of two numbers\n    # and then taking the common divisor of all the combinations\n    # the common divisor is the smallest number that can be divided by both the numbers\n    # hence we can use the common divisor as the common divisor of both the numbers\n    return reduce(lambda x, y: x*y, [int(comb) for comb in combinations(str(num1), 2)])\n\n\nif __name__ == \"__main__\":\n    num1 = int(input())\n    num2 = int(input())\n    common_divisor = find_common_divisor(num1, num2)\n    print(common_divisor)",
    "def findCommonDivisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return findCommonDivisor(b, a)\n    if b < a:\n        return findCommonDivisor(a, b)\n    return findCommonDivisor(a % b, b)\n\ndef test():\n    assert findCommonDivisor(1, 2) == 1\n    assert findCommonDivisor(1, 3) == 1\n    assert findCommonDivisor(2, 3) == 2\n    assert findCommonDivisor(4, 6) == 2\n    assert findCommonDivisor(6, 4) == 2\n    assert findCommonDivisor(6, 7) == 2\n    assert findCommonDivisor(7, 6) == 2\n    assert findCommonDivisor(7, 11) == 2\n    assert findCommonDivisor(11, 7) == 2\n    assert findCommonDivisor(11, 7) == 2\n    assert findCommonDivisor(11, 11) == 1\n    assert findCommonDivisor(7, 3) == 1\n    assert findCommonDivisor(7, 11) == 1\n    assert findCommonDivisor(7, 7) == 1\n    assert findCommonDivisor(7, 13) == 1\n    assert findCommonDivisor(13, 7) == 1\n    assert findCommonDivisor(13, 13) == 1\n    assert findCommonDivisor(13, 17) == 1\n    assert findCommonDivisor(17, 13) == 1\n    assert findCommonDivisor(17, 17) == 1\n    assert findCommonDivisor(17, 19) == 1\n    assert findCommonDivisor(19, 17) == 1\n    assert findCommonDivisor(19, 19) == 1\n    assert findCommonDivisor(19, 23) == 1\n    assert findCommonDivisor(23, 19) == 1\n    assert findCommonDivisor(23, 23) == 1",
    "import math\n\n\ndef get_common_divisor(a, b):\n    \"\"\"\n    Return the common divisor of two numbers.\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    Find the common divisor of two numbers.\n    \"\"\"\n    return get_common_divisor(a, b)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_common_divisor(5, 7))\n    print(find_common_divisor(10, 20))\n    print(find_common_divisor(6, 4))\n    print(find_common_divisor(6, 5))\n\n\nif __name__ == '__main__':\n    main()",
    "def findCommonDivisor(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    if n1 == n2:\n        return n1\n    elif n1 > n2:\n        return findCommonDivisor(n2, n1)\n    elif n2 > n1:\n        return findCommonDivisor(n1, n2)\n    else:\n        return n1\n\nif __name__ == '__main__':\n    n1 = int(input(\"Enter first number:\"))\n    n2 = int(input(\"Enter second number:\"))\n    print(findCommonDivisor(n1, n2))",
    "def get_common_divisor(num1, num2):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    return 1\n\nif __name__ == \"__main__\":\n    print get_common_divisor(12, 15)",
    "def common_divisor(num1, num2):\n    return 0 if num1 == num2 else num1 if num1 % num2 == 0 else num2 if num2 % num1 == 0 else num1 if num1 % num2 == 0 else num2\n\nif __name__ == '__main__':\n    num1 = int(input())\n    num2 = int(input())\n    print(common_divisor(num1, num2))",
    "# https://www.hackerrank.com/challenges/common-divisor/problem\n\ndef find_common_divisor(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return find_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(find_common_divisor(a, b))",
    "import timeit\n\n\ndef get_common_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a > b:\n        return get_common_divisor(b, a)\n    return 1\n\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    print(get_common_divisor(10, 7))\n    print(timeit.default_timer() - start)",
    "def find_common_divisor(n1, n2):\n    \"\"\"\n    Find common divisor between two numbers in a given pair.\n    :param n1: First number\n    :param n2: Second number\n    :return: Common divisor between the two numbers\n    \"\"\"\n    # Use binary search to find the position of the number in the pair\n    # For example:\n    # Given n1 = 3, n2 = 4\n    # If n1 is the first number in the pair, then the binary search will return -1\n    # If n1 is the second number in the pair, then the binary search will return 0\n    # If n1 is the third number in the pair, then the binary search will return 1\n    # If n1 is the fourth number in the pair, then the binary search will return 2\n    # If n1 is the fifth number in the pair, then the binary search will return 3\n    # If n1 is the sixth number in the pair, then the binary search will return 4\n    # If n1 is the seventh number in the pair, then the binary search will return 5\n    # If n1 is the eighth number in the pair, then the binary search will return 6\n    # If n1 is the ninth number in the pair, then the binary search will return 7\n    # If n1 is the tenth number in the pair, then the binary search will return 8\n    # If n1 is the eleventh number in the pair, then the binary search will return 9\n    # If n1 is the twelfth number in the pair, then the binary search will return 10\n    # If n1 is the thirteenth number in the pair, then the binary search will return 11\n    # If n1 is the fourteenth number in the pair, then the binary search will return 12\n    # If n1 is the fifteenth number in the pair, then the binary search will return 13\n    # If n1 is the sixteenth number in the pair, then the binary search will return 14\n    # If n1 is the seventeenth number in the pair, then the binary search will return 15\n    # If n1 is the eighteenth number in the pair, then the binary search will return 16\n    # If n1 is the nineteenth number in the pair, then the binary search will return 17",
    "def find_common_divisor(n1, n2):\n    \"\"\"\n    Find the common divisor between two numbers in a given pair.\n    :param n1: First number\n    :param n2: Second number\n    :return: Common divisor\n    \"\"\"\n    if n1 < n2:\n        return find_common_divisor(n2, n1)\n    elif n1 == n2:\n        return n1\n    elif n1 > n2:\n        return find_common_divisor(n1, n2)\n    else:\n        while n1!= n2:\n            if n1 % n2 == 0:\n                return n2\n            else:\n                n1 = n1 - n2\n    return n1\n\n\nif __name__ == '__main__':\n    print(find_common_divisor(10, 5))\n    print(find_common_divisor(5, 15))\n    print(find_common_divisor(5, 15))\n    print(find_common_divisor(15, 5))\n    print(find_common_divisor(15, 15))",
    "# https://www.hackerrank.com/challenges/python-divisor/problem\n\ndef find_common_divisor(a, b):\n    # write your code here\n    return common_divisor(a, b)\n\n\ndef common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a % b\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(find_common_divisor(a, b))",
    "def find_common_divisor(n1, n2):\n    \"\"\"\n    Find the common divisor of two numbers.\n    Input:\n        n1: integer\n        n2: integer\n    Output:\n        The common divisor of n1 and n2.\n    \"\"\"\n    n1 = abs(n1)\n    n2 = abs(n2)\n    if n1 > n2:\n        n1, n2 = n2, n1\n    for i in range(1, n1):\n        if n1 % i == 0:\n            n1 = n1 / i\n            n2 = n2 / i\n    return n1\n\nif __name__ == \"__main__\":\n    n1 = int(input())\n    n2 = int(input())\n    print(find_common_divisor(n1, n2))",
    "def getCommonDivisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\nif __name__ == '__main__':\n    print(getCommonDivisor(100, 20))\n    print(getCommonDivisor(20, 100))",
    "# Common divisor between two numbers in a given pair.\n#\n# For example,\n#\n# Given n1 = 14, n2 = 24, return 6.\n#\n# Given n1 = 14, n2 = 24, return 0.\n#\n# Given n1 = 14, n2 = 14, return 0.\n#\n# Given n1 = 14, n2 = 23, return 6.\n#\n# Note:\n# The given numbers in the pair (n1, n2) are always positive integers.\n#\n# Follow up:\n# Could you optimize your algorithm to use only O(log n) extra space?\n#\n# Companies\n# Amazon Microsoft\n# Related Topics\n# Math\n# Similar Questions\n#\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def commonDivisor(self, n1, n2):\n        \"\"\"\n        :type n1: int\n        :type n2: int\n        :rtype: int\n        \"\"\"\n        if n1 == n2:\n            return 1\n        if n1 == 0:\n            return 0\n        if n2 == 0:\n            return 0\n        if n1 > n2:\n            return self.commonDivisor(n2, n1)\n        # O(log n)\n        l = n1\n        r = n2\n        while l > r:\n            mid = l + (r - l) / 2\n            if n1 % mid == 0 and n2 % mid == 0:\n                return mid\n            elif n1 % mid > 0:\n                r = mid\n            else:\n                l = mid + 1\n        return n1 % r",
    "#!/bin/python\n\n# Write your code here\ndef find_common_divisor(a, b):\n    return a*b/gcd(a, b)\n\n# Write a test function to test your code\ndef test():\n    assert find_common_divisor(2, 4) == 2\n    assert find_common_divisor(4, 2) == 2\n    assert find_common_divisor(2, 2) == 1\n    assert find_common_divisor(4, 4) == 1\n\n# Run the test function if the file is run directly\nif __name__ == \"__main__\":\n    test()",
    "def find_common_divisor(n, m):\n    \"\"\"\n    Find common divisor between two numbers in a given pair.\n\n    For example,\n    n = 3, m = 7\n    find_common_divisor(n, m) returns 3.\n\n    n = 3, m = 3\n    find_common_divisor(n, m) returns 1.\n\n    n = 3, m = 2\n    find_common_divisor(n, m) returns 2.\n    \"\"\"\n    if n == 0 or m == 0:\n        return 0\n\n    divisor = 1\n    while n > 0 and m > 0:\n        while n % m == 0:\n            divisor = m\n            n = n / m\n            m = m / divisor\n        m = m - 1\n    return divisor\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    print(find_common_divisor(n, m))\n\n\nif __name__ == '__main__':\n    main()",
    "def getCommonDivisor(num1, num2):\n    '''\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    '''\n    # return 1 if either of the two numbers is zero\n    if num1 == 0 or num2 == 0:\n        return 1\n\n    # if the first number is greater than the second number, return 1\n    if num1 > num2:\n        return 1\n\n    # if the first number is less than the second number, return 1\n    if num1 < num2:\n        return 1\n\n    # if the first number is equal to the second number, return 1\n    if num1 == num2:\n        return 1\n\n    # if the numbers are equal, return the smallest common divisor\n    while num1 > 0 and num2 > 0:\n        num1, num2 = num2, num1 % num2\n\n    return num1\n\nif __name__ == '__main__':\n    print(getCommonDivisor(2, 3))\n    print(getCommonDivisor(3, 2))\n    print(getCommonDivisor(5, 7))\n    print(getCommonDivisor(7, 5))\n    print(getCommonDivisor(13, 17))\n    print(getCommonDivisor(17, 13))",
    "def find_common_divisor(a, b):\n    if a % b == 0:\n        return b\n    elif b % a == 0:\n        return a\n    else:\n        return find_common_divisor(b, a)\n\ndef test():\n    assert(find_common_divisor(8, 6) == 2)\n    assert(find_common_divisor(4, 10) == 2)\n    assert(find_common_divisor(1, 2) == 1)\n    assert(find_common_divisor(4, 8) == 2)\n    assert(find_common_divisor(2, 7) == 1)\n    assert(find_common_divisor(6, 9) == 1)\n\ntest()",
    "def commonDivisor(a, b):\n    return a * b\n\n\"\"\"\nWrite a python function to find the common divisor between two numbers in a given pair.\n\nExample\nGiven [5, 7] and [3, 9], return 6.\n\"\"\"\n\ndef commonDivisor(a, b):\n    if a < b:\n        a, b = b, a\n    return a % b\n\n\"\"\"\nExample\nGiven [5, 7] and [3, 9], return 6.\n\"\"\"\n\ndef commonDivisor(a, b):\n    return a % b",
    "# 1. Find common divisor using the following method\n#   1.a) Find the largest common divisor between two numbers.\n#   1.b) Find the smallest common divisor between two numbers.\n#   1.c) Find the sum of all common divisors between two numbers.\n#   1.d) Find the maximum common divisor between two numbers.\n#   1.e) Find the minimum common divisor between two numbers.\n#\n# 2. Find common divisor using the following method\n#   2.a) Find the smallest common divisor between two numbers.\n#   2.b) Find the maximum common divisor between two numbers.\n#   2.c) Find the sum of all common divisors between two numbers.\n#   2.d) Find the largest common divisor between two numbers.\n#   2.e) Find the sum of all common divisors between two numbers.\n#   2.f) Find the largest common divisor between two numbers.\n#\n# 3. Find common divisor using the following method\n#   3.a) Find the smallest common divisor between two numbers.\n#   3.b) Find the maximum common divisor between two numbers.\n#   3.c) Find the sum of all common divisors between two numbers.\n#   3.d) Find the largest common divisor between two numbers.\n#   3.e) Find the sum of all common divisors between two numbers.\n#   3.f) Find the largest common divisor between two numbers.\n\n# 1. Find common divisor using the following method\n#   1.a) Find the largest common divisor between two numbers.\n#   1.b) Find the smallest common divisor between two numbers.\n#   1.c) Find the sum of all common divisors between two numbers.\n#   1.d) Find the largest common divisor between two numbers.\n#   1.e) Find the sum of all common divisors between two numbers.\n#   1.f) Find the smallest common divisor between two numbers.\n\n# 2. Find common divisor using the following method\n#   2.a) Find the smallest common divis",
    "from math import gcd\n\ndef common_divisor(num1, num2):\n    if gcd(num1, num2)!= 1:\n        return 0\n    else:\n        return num1\n\ndef main():\n    print(common_divisor(10, 20))\n\nif __name__ == '__main__':\n    main()",
    "def get_common_divisor(a, b):\n    \"\"\"\n    Write a python function to find common divisor between two numbers in a given pair.\n\n    Input:\n    a, b -- two numbers\n    \"\"\"\n\n    # a is the smaller number\n    if a < b:\n        return get_common_divisor(b, a)\n    elif a == b:\n        return a\n\n    # a is the larger number\n    else:\n        return get_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n\n    common_divisor = get_common_divisor(a, b)\n    print(\"Common divisor is: \", common_divisor)",
    "# https://www.hackerrank.com/challenges/common-divisor\ndef common_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a > b:\n        return common_divisor(b, a)\n    if a == b:\n        return a\n    else:\n        return common_divisor(a, b % a)\n\nif __name__ == '__main__':\n    test_cases = [\n        ([1, 5, 10], 1),\n        ([1, 5, 10], 2),\n        ([1, 5, 10], 3),\n        ([1, 5, 10], 4),\n        ([1, 5, 10], 5),\n        ([1, 5, 10], 6),\n        ([1, 5, 10], 7),\n        ([1, 5, 10], 8),\n        ([1, 5, 10], 9),\n        ([1, 5, 10], 10),\n        ([1, 5, 10], 11),\n        ([1, 5, 10], 12),\n        ([1, 5, 10], 13),\n        ([1, 5, 10], 14),\n        ([1, 5, 10], 15),\n        ([1, 5, 10], 16),\n        ([1, 5, 10], 17),\n        ([1, 5, 10], 18),\n        ([1, 5, 10], 19),\n        ([1, 5, 10], 20),\n        ([1, 5, 10], 21),\n        ([1, 5, 10], 22),\n        ([1, 5, 10], 23),\n        ([1, 5, 10], 24),\n        ([1, 5, 10], 25),\n        ([1, 5, 10], 26),\n        ([1, 5, 10], 27),\n        ([1, 5, 10], 28),\n        ([1, 5, 10], 29),\n        ([1, 5, 10], 30),\n        ([1, 5, 10], 31),\n        ([1, 5, 10], 32),\n        ([1, 5, 10], 33),\n        ([1, 5, 10], 34),\n        ([1, 5, 10], 35",
    "def find_common_divisor(n1, n2):\n    return 1\n\n\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\nInput:\nn1 = 4\nn2 = 2\n\"\"\"\n\ndef find_common_divisor(n1, n2):\n    return n1 & n2\n\n\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\nInput:\nn1 = 4\nn2 = 2\n\"\"\"\n\ndef find_common_divisor(n1, n2):\n    return n1 & n2\n\n\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\nInput:\nn1 = 4\nn2 = 2\n\"\"\"\n\ndef find_common_divisor(n1, n2):\n    return n1 & n2",
    "def common_divisor(a, b):\n    return a if a < b else b if a > b else a\n\nif __name__ == '__main__':\n    print common_divisor(8, 12)\n    print common_divisor(6, 8)\n    print common_divisor(8, 6)\n    print common_divisor(8, 3)",
    "# Write your code below\ndef find_common_divisor(a, b):\n    return a % b\n\nprint find_common_divisor(1, 6)\nprint find_common_divisor(2, 3)",
    "def gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\n\ndef findCommonDivisor(numbers):\n    \"\"\"\n    numbers is a list of integers.\n    Returns the common divisor of all numbers in the list.\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return findCommonDivisor(numbers[1:])\n\nif __name__ == '__main__':\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 1)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 2)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 3)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 4)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 5)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 6)\n    assert(findCommonDivisor([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,",
    "def commonDivisor(n1, n2):\n\t\"\"\"\n\tFind common divisor between two numbers in a given pair.\n\t\"\"\"\n\twhile n1 % n2!= 0:\n\t\tn1, n2 = n2, n1 % n2\n\treturn n1\n\nif __name__ == \"__main__\":\n\t# These \"asserts\" using only for self-checking and not necessary for auto-testing\n\tassert commonDivisor(2, 4) == 2, \"Common divisor of 2 and 4 is 2\"\n\tassert commonDivisor(20, 20) == 1, \"Common divisor of 20 and 20 is 1\"\n\tassert commonDivisor(4, 8) == 2, \"Common divisor of 4 and 8 is 2\"\n\tassert commonDivisor(20, 40) == 2, \"Common divisor of 20 and 40 is 2\"\n\tassert commonDivisor(4, 16) == 2, \"Common divisor of 4 and 16 is 2\"\n\tassert commonDivisor(20, 40) == 2, \"Common divisor of 20 and 40 is 2\"\n\tassert commonDivisor(3, 3) == 1, \"Common divisor of 3 and 3 is 1\"\n\tassert commonDivisor(3, 7) == 1, \"Common divisor of 3 and 7 is 1\"\n\tassert commonDivisor(3, 27) == 1, \"Common divisor of 3 and 27 is 1\"\n\tassert commonDivisor(3, 49) == 1, \"Common divisor of 3 and 49 is 1\"\n\tassert commonDivisor(3, 70) == 1, \"Common divisor of 3 and 70 is 1\"\n\tassert commonDivisor(4, 4) == 1, \"Common divisor of 4 and 4 is 1\"\n\tassert commonDivisor(4, 8) == 2, \"Common divisor of 4 and 8 is 2\"\n\tassert commonDivisor(4, 16) == 2, \"Common divisor of 4 and 16 is 2\"\n\tassert commonDivisor(4, 32) == 2, \"Common divisor of 4 and 32 is 2\"\n\tassert commonDivisor(",
    "def findCommonDivisor(a, b):\n\t\"\"\"\n\tFind common divisor between two numbers in a given pair.\n\t:param a:\n\t:param b:\n\t:return:\n\t\"\"\"\n\tif a == b:\n\t\treturn a\n\tif a == 0:\n\t\treturn b\n\tif b == 0:\n\t\treturn a\n\twhile b!= 0:\n\t\ta, b = a % b, a / b\n\treturn a\n\n\ndef main():\n\t\"\"\"\n\tWrite a python function to find common divisor between two numbers in a given pair.\n\t:return:\n\t\"\"\"\n\ta = int(input())\n\tb = int(input())\n\tprint(findCommonDivisor(a, b))\n\n\nif __name__ == \"__main__\":\n\tmain()",
    "def common_divisor(a, b):\n    # if a < b, swap a and b\n    if a < b:\n        a, b = b, a\n    # if a == b, return 0\n    if a == b:\n        return 0\n    # if a and b are both positive, return the largest one\n    if a > 0 and b > 0:\n        return max(a, b)\n    # if a and b are both negative, return the smallest one\n    if a < 0 and b < 0:\n        return min(abs(a), abs(b))\n    # if a is positive, b must be positive, return the smallest one\n    if a > 0 and b < 0:\n        return min(abs(a), abs(b))\n    # if a is negative, b must be negative, return the largest one\n    if a < 0 and b > 0:\n        return max(abs(a), abs(b))\n    # if a is zero and b is negative, return zero\n    if a == 0 and b < 0:\n        return 0\n    # if a is zero and b is positive, return zero\n    if a == 0 and b > 0:\n        return 0\n    # if a is negative and b is zero, return zero\n    if a < 0 and b == 0:\n        return 0\n    # if a is positive and b is zero, return zero\n    if a > 0 and b == 0:\n        return 0\n    # if a is zero and b is zero, return zero\n    if a == 0 and b == 0:\n        return 0\n    # otherwise, return the largest common divisor\n    return max(a, b)\n\na = int(input())\nb = int(input())\nprint(common_divisor(a, b))",
    "def find_common_divisor(a, b):\n    \"\"\"\n    Find the common divisor of two numbers.\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    return a if a == b else find_common_divisor(b, a)\n\n\ndef test_find_common_divisor():\n    assert find_common_divisor(10, 20) == 2\n    assert find_common_divisor(6, 7) == 2\n    assert find_common_divisor(10, 20) == 10\n    assert find_common_divisor(10, 20) == 10\n\nif __name__ == '__main__':\n    test_find_common_divisor()",
    "def gcd(x,y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\n\ndef find_gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print(find_gcd(20,4))\n    print(gcd(20,4))",
    "import math\n\ndef find_common_divisor(a, b):\n    common_divisor = 1\n    while a % common_divisor!= 0 and b % common_divisor!= 0:\n        common_divisor += 1\n    return common_divisor\n\ndef test():\n    assert find_common_divisor(8, 9) == 2\n    assert find_common_divisor(9, 8) == 2\n    assert find_common_divisor(10, 11) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21) == 2\n    assert find_common_divisor(20, 21)",
    "def common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return common_divisor(b, a / b)\n    return common_divisor(b, a % b)\n\n\nif __name__ == '__main__':\n    print(common_divisor(3, 6))\n    print(common_divisor(3, 2))\n    print(common_divisor(5, 9))",
    "def common_divisor(n1, n2):\n    if n1 == n2:\n        return n1\n    if n1 == 0 or n2 == 0:\n        return 0\n    if n1 < n2:\n        return common_divisor(n2, n1)\n    if n2 % n1 == 0:\n        return n2\n    return common_divisor(n2, n1 % n2)\n\ndef main():\n    n1 = int(input())\n    n2 = int(input())\n    print(common_divisor(n1, n2))\n\nif __name__ == '__main__':\n    main()",
    "def find_common_divisor(a, b):\n    if a == b:\n        return a\n    if a == 0 or b == 0:\n        return 0\n    common_divisor = 1\n    while common_divisor!= 0:\n        if a % common_divisor == 0 and b % common_divisor == 0:\n            common_divisor = common_divisor + 1\n        elif a % common_divisor!= 0 and b % common_divisor!= 0:\n            common_divisor = common_divisor - 1\n        else:\n            common_divisor = common_divisor - 1\n    return common_divisor\n\n\nif __name__ == '__main__':\n    print(find_common_divisor(4, 2))\n    print(find_common_divisor(10, 7))",
    "def common_divisor(n1, n2):\n    \"\"\"\n    Return the common divisor of two numbers.\n\n    Time Complexity: O(log(max(n1, n2)))\n    Space Complexity: O(1)\n    \"\"\"\n    return n1 if n1 % n2 == 0 else n2\n\ndef main():\n    n1, n2 = raw_input().split()\n    n1 = int(n1)\n    n2 = int(n2)\n    print common_divisor(n1, n2)\n\nif __name__ == '__main__':\n    main()",
    "def find_common_divisor(a, b):\n\t# if a and b are both positive, return the lowest common multiple of them\n\tif a < 0 or b < 0:\n\t\treturn 0\n\telif a == 0 or b == 0:\n\t\treturn 0\n\telse:\n\t\t# if a and b are both positive, return the lowest common multiple of them\n\t\treturn (a * b) / gcd(a, b)\n\ndef gcd(a, b):\n\t# if a and b are both negative, return the absolute value of the greatest common divisor\n\tif a < 0 and b < 0:\n\t\treturn abs(a + b)\n\telif a < 0 and b > 0:\n\t\treturn gcd(abs(a + b), b)\n\telif a > 0 and b < 0:\n\t\treturn gcd(a, abs(b + a))\n\telse:\n\t\treturn gcd(a, b)\n\ndef main():\n\ta = int(input())\n\tb = int(input())\n\tprint(find_common_divisor(a, b))\n\nif __name__ == '__main__':\n\tmain()",
    "def find_common_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        a, b = b, a\n    common_divisor = 0\n    while a > 0:\n        if a % b == 0:\n            common_divisor = b\n            break\n        a = a - 1\n    return common_divisor\n\nif __name__ == '__main__':\n    assert find_common_divisor(10, 20) == 2\n    assert find_common_divisor(50, 70) == 5\n    assert find_common_divisor(20, 80) == 4\n    assert find_common_divisor(10, 100) == 10\n    assert find_common_divisor(100, 200) == 50\n    assert find_common_divisor(10, 11) == 1\n    assert find_common_divisor(20, 21) == 1",
    "def findCommonDivisor(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    if n1 == 0 or n2 == 0:\n        return 0\n    elif n1 == n2:\n        return n1\n    elif n1 > n2:\n        return findCommonDivisor(n2, n1)\n    else:\n        # n1 > n2\n        return findCommonDivisor(n1, n2) + n1 % n2",
    "import math\n\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return math.gcd(a, b)\n\nif __name__ == '__main__':\n    print find_common_divisor(2, 5)\n    print find_common_divisor(3, 4)\n    print find_common_divisor(3, 6)\n    print find_common_divisor(9, 11)",
    "def common_divisor(a, b):\n    while a!= b:\n        if a < b:\n            a = a + b\n        else:\n            b = b + a\n    return a\n\nprint common_divisor(1, 3)\nprint common_divisor(2, 3)\nprint common_divisor(2, 4)\nprint common_divisor(3, 4)\nprint common_divisor(3, 6)\nprint common_divisor(3, 8)\nprint common_divisor(3, 12)\nprint common_divisor(3, 16)\nprint common_divisor(3, 20)",
    "def findCommonDivisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return 0",
    "def commonDivisor(n1, n2):\n    if n1 == n2:\n        return n1\n    if n1 == 0:\n        return 1\n    if n2 == 0:\n        return 1\n    if n1 == 1:\n        return n2\n    if n2 == 1:\n        return n1\n    if n1 % n2 == 0:\n        return commonDivisor(n1 / n2, n2)\n    else:\n        return commonDivisor(n2, n1 % n2)\n\nprint(commonDivisor(8, 18))",
    "def common_divisor(a, b):\n    \"\"\"\n    Write a python function to find common divisor between two numbers in a given pair.\n    Input:\n    a = first number\n    b = second number\n    Output:\n    The common divisor of a and b.\n    \"\"\"\n    return a % b\n\nprint(common_divisor(10, 20))\n\nprint(common_divisor(2, 3))",
    "def findCommonDivisor(num1, num2):\n    return 1\n    # return reduce(lambda x,y: x % y, (num1, num2))",
    "def common_divisor(a, b):\n    # write your code here\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    # write your code here\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(common_divisor(a, b))\n\nif __name__ == '__main__':\n    main()",
    "import math\n\ndef find_common_divisor(a, b):\n    return math.gcd(a, b)\n\nif __name__ == '__main__':\n    print find_common_divisor(10, 25)",
    "from __future__ import print_function\nfrom fractions import gcd\n\ndef common_divisor(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return gcd(a, b)\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    print(common_divisor(a, b))",
    "def find_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if b == a:\n        return a\n    return find_common_divisor(a - b, b)\n\nprint find_common_divisor(5, 3)",
    "def findCommonDivisor(n1, n2):\n    return n1 if n1 % n2 == 0 else n2\n\nif __name__ == \"__main__\":\n    print(findCommonDivisor(5, 3))\n    print(findCommonDivisor(5, 4))\n    print(findCommonDivisor(5, 6))\n    print(findCommonDivisor(7, 4))\n    print(findCommonDivisor(7, 7))\n    print(findCommonDivisor(3, 7))",
    "# https://leetcode.com/problems/common-divisor/\n\nclass Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def findCommonDivisor(self, x, y):\n        if x == 0 or y == 0:\n            return 0\n        if x == y:\n            return x\n        if x > y:\n            x, y = y, x\n        div = 1\n        while x!= 1:\n            div = div * x % y\n            x = x - 1\n        return div",
    "# http://www.geeksforgeeks.org/find-common-divisor-between-two-numbers/\ndef find_common_divisor(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 == num2:\n        return num1\n    if num1 % num2 == 0:\n        return num2\n    if num2 % num1 == 0:\n        return num1\n    return find_common_divisor(num2, num1 % num2)\n\n# https://www.hackerearth.com/practice/algorithms/implementation/divisors/python/\ndef find_common_divisor_2(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 == num2:\n        return num1\n    if num1 % num2 == 0:\n        return num2\n    if num2 % num1 == 0:\n        return num1\n    return find_common_divisor_2(num2, num1 % num2)\n\n# http://www.geeksforgeeks.org/divisors-of-a-number/\ndef find_common_divisor_3(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num % 2 == 0:\n        return find_common_divisor_3(num / 2)\n    if num % 3 == 0:\n        return find_common_divisor_3(num / 3)\n    return find_common_divisor_3(num - 1)\n\n# https://www.hackerearth.com/practice/algorithms/implementation/divisors/python/\ndef find_common_divisor_4(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num",
    "# http://www.geeksforgeeks.org/find-the-common-divisor-of-two-numbers/\n# http://www.geeksforgeeks.org/find-the-common-divisor-of-two-numbers-using-divisor-sieve/\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    Find common divisor between two numbers.\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    elif a < b:\n        return find_common_divisor(b, a)\n    else:\n        divisor = 1\n        while divisor < min(a, b):\n            divisor *= 2\n        return divisor\n\n\nif __name__ == \"__main__\":\n    print(find_common_divisor(5, 6))",
    "from math import gcd\n\ndef commonDivisor(n1, n2):\n    return gcd(n1, n2)",
    "def find_common_divisor(a, b):\n    while a % b:\n        a = a - b\n    return a\n\nif __name__ == \"__main__\":\n    print(find_common_divisor(6, 4))",
    "def getCommonDivisor(a,b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return getCommonDivisor(b,a)\n    if a % b == 0:\n        return b\n    if b % a == 0:\n        return a\n    return getCommonDivisor(b,a%b)\n\ndef main():\n    num1 = input(\"Enter a number: \")\n    num2 = input(\"Enter another number: \")\n    print(\"Common divisor is: \", getCommonDivisor(int(num1), int(num2)))\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findCommonDivisor(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        m = len(nums1)\n        n = len(nums2)\n        if m > n:\n            return self.findCommonDivisor(nums2, nums1)\n        if m == 0:\n            return 1\n        if n == 0:\n            return 1\n        if m == 1:\n            return nums1[0]\n        if n == 1:\n            return nums2[0]\n        if nums1[0] == nums2[0]:\n            return self.findCommonDivisor(nums1[1:], nums2[1:])\n        return self.findCommonDivisor(nums1[1:], self.findCommonDivisor(nums1[1:], nums2[1:]))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    assert sol.findCommonDivisor([2, 4, 5], [2, 3, 5]) == 2\n    assert sol.findCommonDivisor([1, 2, 3, 4], [1, 2, 3, 4]) == 1",
    "def find_common_divisor(n1, n2):\n    \"\"\"\n    n1, n2: two numbers\n    return: a common divisor of the two numbers\n    \"\"\"\n    return n1 * n2 // max(n1, n2)\n\nif __name__ == \"__main__\":\n    print(find_common_divisor(8, 12))\n    print(find_common_divisor(16, 12))\n    print(find_common_divisor(12, 16))\n    print(find_common_divisor(12, 20))",
    "def findCommonDivisor(a, b):\n    #Write your code here\n    return 1\n\n# test cases\nprint findCommonDivisor(5, 7)\nprint findCommonDivisor(3, 5)\nprint findCommonDivisor(1, 2)\nprint findCommonDivisor(1, 5)\nprint findCommonDivisor(5, 4)\nprint findCommonDivisor(6, 8)\nprint findCommonDivisor(3, 4)\nprint findCommonDivisor(1, 6)\nprint findCommonDivisor(5, 2)\nprint findCommonDivisor(2, 6)\nprint findCommonDivisor(3, 4)\nprint findCommonDivisor(2, 5)",
    "from math import gcd\n\n\ndef find_gcd(a, b):\n    return gcd(a, b)\n\n\ndef main():\n    print(find_gcd(7, 3))\n    print(find_gcd(7, -3))\n    print(find_gcd(3, 7))\n    print(find_gcd(3, -7))\n    print(find_gcd(-3, 7))\n    print(find_gcd(-3, -7))\n\n\nif __name__ == \"__main__\":\n    main()",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def commonDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        d = 1\n        for i in range(1, len(nums)):\n            if nums[i] % nums[i - 1] == 0:\n                d *= nums[i]\n            else:\n                d = d % nums[i]\n        return d",
    "from math import sqrt\n\ndef find_common_divisor(a, b):\n    \"\"\"\n    Find common divisor between two numbers\n    \"\"\"\n    # check if a and b are integer\n    if not a % 1 == 0 and not b % 1 == 0:\n        return a % b\n    elif a % 1 == 0:\n        return find_common_divisor(b, a)\n    elif b % 1 == 0:\n        return find_common_divisor(a, b)\n    elif a % 1 == 0:\n        return a % b\n    else:\n        return b % a\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(find_common_divisor(6, 9))\n    print(find_common_divisor(6, 7))\n    print(find_common_divisor(6, 10))\n    print(find_common_divisor(10, 10))\n    print(find_common_divisor(10, 6))\n    print(find_common_divisor(10, 7))\n    print(find_common_divisor(10, 9))\n\nif __name__ == \"__main__\":\n    main()",
    "def get_common_divisor(x, y):\n    while y!= 0:\n        x, y = y, x % y\n    return x\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_common_divisor(3, 3) == 1, \"3 should be a common divisor of 3 and 3\"\n    assert get_common_divisor(4, 6) == 2, \"6 should be a common divisor of 4 and 6\"\n    assert get_common_divisor(20, 21) == 1, \"20 should be a common divisor of 20 and 21\"\n    assert get_common_divisor(6, 21) == 3, \"6 should be a common divisor of 6 and 21\"\n    assert get_common_divisor(6, 7) == 2, \"6 should be a common divisor of 6 and 7\"\n    assert get_common_divisor(6, 6) == 1, \"6 should be a common divisor of 6 and 6\"\n    assert get_common_divisor(6, 5) == 2, \"6 should be a common divisor of 6 and 5\"\n    assert get_common_divisor(10, 14) == 2, \"10 should be a common divisor of 10 and 14\"\n\nif __name__ == '__main__':\n    main()",
    "def find_common_divisor(a, b):\n    \"\"\"\n    Write a function to find common divisor between two numbers in a given pair.\n    \"\"\"\n    return a if a == b else None\n\nif __name__ == '__main__':\n    print(find_common_divisor(2, 3))\n    print(find_common_divisor(4, 4))\n    print(find_common_divisor(5, 8))\n    print(find_common_divisor(7, 13))",
    "def common_divisor(num1, num2):\n\t\"\"\"\n\tFind common divisor of two numbers in a given pair.\n\tInput:\n\t\tnum1 and num2: two numbers in a given pair.\n\tOutput:\n\t\tcommon_divisor: common divisor of num1 and num2.\n\t\"\"\"\n\tif num1 == 0 or num2 == 0:\n\t\treturn 0\n\n\tdivisor = num1\n\twhile divisor <= num2:\n\t\tdivisor += num1\n\treturn divisor\n\ndef main():\n\t\"\"\"\n\tTest cases\n\t\"\"\"\n\tnum1 = 2\n\tnum2 = 3\n\tcommon_divisor(num1, num2)\n\n\tnum1 = 2\n\tnum2 = 2\n\tcommon_divisor(num1, num2)\n\n\tnum1 = 2\n\tnum2 = 4\n\tcommon_divisor(num1, num2)\n\n\tnum1 = 2\n\tnum2 = 5\n\tcommon_divisor(num1, num2)\n\n\tnum1 = 3\n\tnum2 = 6\n\tcommon_divisor(num1, num2)\n\nif __name__ == \"__main__\":\n\tmain()",
    "def common_divisor(n1, n2):\n    \"\"\"\n    Returns the common divisor of two numbers in a pair.\n    \"\"\"\n    if n1 == 0 or n2 == 0:\n        return 0\n    if n1 % n2 == 0:\n        return n1 // n2\n    return common_divisor(n2, n1 % n2)\n\nif __name__ == \"__main__\":\n    print(common_divisor(123, 456))\n    print(common_divisor(123, 567))\n    print(common_divisor(123, 789))\n    print(common_divisor(123, 1111))",
    "def findCommonDivisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    return findCommonDivisor(b, a % b)\n\n\nif __name__ == '__main__':\n    assert findCommonDivisor(5, 7) == 2, \"Test Case 1\"\n    assert findCommonDivisor(8, 10) == 2, \"Test Case 2\"\n    assert findCommonDivisor(12, 15) == 3, \"Test Case 3\"\n    assert findCommonDivisor(15, 12) == 3, \"Test Case 4\"\n    assert findCommonDivisor(17, 15) == 5, \"Test Case 5\"\n    assert findCommonDivisor(12, 21) == 3, \"Test Case 6\"\n    assert findCommonDivisor(14, 21) == 3, \"Test Case 7\"\n    assert findCommonDivisor(21, 14) == 3, \"Test Case 8\"\n    assert findCommonDivisor(13, 21) == 5, \"Test Case 9\"\n    assert findCommonDivisor(10, 20) == 2, \"Test Case 10\"\n    assert findCommonDivisor(12, 15) == 3, \"Test Case 11\"\n    assert findCommonDivisor(8, 10) == 2, \"Test Case 12\"\n    assert findCommonDivisor(12, 21) == 3, \"Test Case 13\"\n    assert findCommonDivisor(12, 24) == 3, \"Test Case 14\"\n    assert findCommonDivisor(12, 20) == 3, \"Test Case 15\"\n    assert findCommonDivisor(12, 25) == 5, \"Test Case 16\"",
    "#!/usr/bin/python\n\ndef common_divisor(n1, n2):\n    if n1 == 0 or n2 == 0:\n        return 0\n\n    while n1 % n2!= 0:\n        n1, n2 = n2, n1 % n2\n\n    return n1\n\nprint common_divisor(14, 23)",
    "def common_divisor(a, b):\n    \"\"\"\n    Find the common divisor of a and b.\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\nif __name__ == '__main__':\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(\"Common divisor of {} and {} is {}\".format(a, b, common_divisor(a, b)))",
    "import math\n\ndef find_common_divisor(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 < num2:\n        return find_common_divisor(num2, num1)\n    if num1 % num2 == 0:\n        return num2\n    return find_common_divisor(num1, num2 - 1)\n\nif __name__ == '__main__':\n    print(find_common_divisor(12, 15))\n    print(find_common_divisor(15, 12))",
    "# https://www.hackerrank.com/challenges/divisible-sum-pairs/problem\n# http://www.tutorialspoint.com/python_basic_programming/python_basic_programming_how_to_do_divide_two_numbers_in_python.html\n# https://www.geeksforgeeks.org/find-common-divisor-pairs-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor/\n# https://www.geeksforgeeks.org/find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two-numbers/\n# https://www.geeksforgeeks.org/divide-two-numbers-find-common-divisor-of-two",
    "from math import gcd\n\ndef find_common_divisor(x, y):\n    return gcd(x, y)\n\nif __name__ == '__main__':\n    print find_common_divisor(6, 5)\n    print find_common_divisor(6, 7)\n    print find_common_divisor(6, 8)\n    print find_common_divisor(6, 9)\n    print find_common_divisor(6, 10)\n    print find_common_divisor(6, 11)\n    print find_common_divisor(6, 12)\n    print find_common_divisor(6, 13)\n    print find_common_divisor(6, 14)\n    print find_common_divisor(6, 15)\n    print find_common_divisor(6, 16)\n    print find_common_divisor(6, 17)\n    print find_common_divisor(6, 18)\n    print find_common_divisor(6, 19)\n    print find_common_divisor(6, 20)\n    print find_common_divisor(6, 21)\n    print find_common_divisor(6, 22)\n    print find_common_divisor(6, 23)\n    print find_common_divisor(6, 24)\n    print find_common_divisor(6, 25)\n    print find_common_divisor(6, 26)\n    print find_common_divisor(6, 27)\n    print find_common_divisor(6, 28)\n    print find_common_divisor(6, 29)\n    print find_common_divisor(6, 30)\n    print find_common_divisor(6, 31)\n    print find_common_divisor(6, 32)\n    print find_common_divisor(6, 33)\n    print find_common_divisor(6, 34)\n    print find_common_divisor(6, 35)\n    print find_common_divisor(6, 36)\n    print find",
    "# https://www.hackerrank.com/challenges/common-divisor-of-two-numbers/problem\n\ndef findCommonDivisor(a, b):\n    return a if a == b else None\n\n\n# Test Cases\nprint(findCommonDivisor(1, 2))\nprint(findCommonDivisor(2, 3))\nprint(findCommonDivisor(3, 4))\nprint(findCommonDivisor(2, 3))\nprint(findCommonDivisor(4, 5))",
    "def findCommonDivisor(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return findCommonDivisor(b, a % b)\n\nprint(findCommonDivisor(5, 10))",
    "def find_common_divisor(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: common divisor\n    \"\"\"\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\nif __name__ == '__main__':\n    print(find_common_divisor(4, 6))\n    print(find_common_divisor(5, 10))\n    print(find_common_divisor(9, 15))\n    print(find_common_divisor(7, 2))\n    print(find_common_divisor(2, 3))\n    print(find_common_divisor(4, 2))\n    print(find_common_divisor(4, 4))\n    print(find_common_divisor(2, 2))",
    "def find_common_divisor(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    return find_common_divisor(b, a % b)\n\nif __name__ == \"__main__\":\n    print find_common_divisor(1, 2)"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}