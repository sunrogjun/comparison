{
  "problem": {
    "task_id": "MBPP/349",
    "prompt": "Write a python function to check whether the given string is a binary string or not.",
    "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
    "test_list": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ],
    "challenge_test_list": [],
    "problem_id": 338
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "num_candidates": 100,
  "candidates": [
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # check for each digit\n        for i in range(len(s)):\n            if s[i]!= '0' and s[i]!= '1':\n                return False\n        return True",
    "def isBinary(str):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    :param str:\n    :return:\n    \"\"\"\n    if len(str) > 1:\n        for i in range(1, len(str)):\n            if str[i] == str[i - 1]:\n                return False\n    return True\n\nif __name__ == '__main__':\n    print isBinary('11')",
    "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isBinary(self, s):\n        return self.isBinaryHelper(s, 0, s.length()-1)\n\n    def isBinaryHelper(self, s, i, j):\n        if i >= j:\n            return True\n        \n        # if the current char is '1'\n        if s[i] == '1':\n            return self.isBinaryHelper(s, i+1, j) or self.isBinaryHelper(s, i, j-1)\n\n        # if the current char is '0'\n        if s[i] == '0':\n            return False\n        \n        # if the current char is neither '0' or '1'\n        return self.isBinaryHelper(s, i+1, j) or self.isBinaryHelper(s, i, j-1)",
    "import sys\nimport os\n\ndef check_binary(string):\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        if string in '0 1':\n            return True\n        else:\n            return False\n    if len(string) == 2:\n        if string in '0 1':\n            return True\n        else:\n            return False\n    if len(string) > 2:\n        if string[0] == '0' and string[1] == '1':\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print \"Usage: python binary_check.py <string>\"\n        sys.exit(1)\n    string = sys.argv[1]\n    print check_binary(string)",
    "def is_binary(s):\n    if len(s) == 0:\n        return False\n    if s[0] == '0':\n        return True\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            return True\n    return False\n\nprint is_binary(\"1011\")",
    "class Solution:\n    \"\"\"\n    @param s, a string\n    @return a boolean\n    \"\"\"\n    def isBinary(self, s):\n        if len(s) == 0:\n            return False\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        return self.isBinary(s[1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isBinary(\"0\")\n    print s.isBinary(\"1\")\n    print s.isBinary(\"11\")\n    print s.isBinary(\"1011\")\n    print s.isBinary(\"11001\")\n    print s.isBinary(\"110010\")\n    print s.isBinary(\"100000001\")\n    print s.isBinary(\"1010010101101101\")\n    print s.isBinary(\"1010010110110110\")",
    "def is_binary(string):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    :param string:\n    :return:\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == '1':\n            return False\n    return True\n\nprint(is_binary(\"11111\"))\nprint(is_binary(\"0000\"))\nprint(is_binary(\"10101\"))\nprint(is_binary(\"1010\"))",
    "#!/bin/python\n# -*- coding: utf-8 -*-\n# File: bst.py\n# Created on: Wed May 20 15:21:19 2017\n# Last Change: Mon Aug 31 12:14:57 2017\n# Purpose of script:\n#    To check whether a given string is a binary string or not.\n#    A binary string is a string of only '0' or '1' characters.\n#    For example, \"101\" is a binary string, \"10101\" is not a binary string.\n#\n# @author: anand\n\ndef is_binary(s):\n    \"\"\"\n    check whether a string is a binary string or not.\n    :param s:\n    :return:\n    \"\"\"\n    if len(s) == 0:\n        return False\n\n    for i in range(len(s)):\n        if s[i] not in ['0', '1']:\n            return False\n\n    return True\n\ndef main():\n    # Test Cases\n    print is_binary(\"101\")\n    print is_binary(\"10101\")\n    print is_binary(\"0\")\n    print is_binary(\"1\")\n    print is_binary(\"1011\")\n    print is_binary(\"0\")\n\nif __name__ == '__main__':\n    main()",
    "import sys\n\ndef is_binary(s):\n    return all(ord(x) > 127 for x in s)\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python3 {} <input_string>'.format(sys.argv[0]))\n        sys.exit(1)\n    input_string = sys.argv[1]\n    print('{} is a binary string? {}'.format(input_string, is_binary(input_string)))",
    "import unittest\n\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertTrue(is_binary(\"101\"))\n    def test_case_2(self):\n        self.assertFalse(is_binary(\"1010101\"))\n    def test_case_3(self):\n        self.assertFalse(is_binary(\"101010101\"))\n    def test_case_4(self):\n        self.assertFalse(is_binary
    "def is_binary(s):\n    if len(s) == 0:\n        return False\n    for i in range(0, len(s)):\n        if s[i] == '1' or s[i] == '0':\n            continue\n        else:\n            return False\n    return True\n\ndef main():\n    s = '101'\n    print(is_binary(s))\n    s = '0111001'\n    print(is_binary(s))\n    s = '10111'\n    print(is_binary(s))\n    s
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return s.find('1') >= 0\n        \n        if len(s) == 2:\n            return s[0] == '0' and s[1] == '1'\n        \n        for i in range(len(s)-1):\n            if not (s[i] == '1' and s[i+1] == '0'):\n                return False\n        return True",
    "class Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isBinary(self, s):\n        return s.find(\"1\")!= -1\n\n\nif __name__ == \"__main__\":\n    assert Solution().isBinary(\"11\") == False\n    assert Solution().isBinary(\"11\") == False\n    assert Solution().isBinary(\"11\") == False\n    assert Solution().isBinary(\"11\") == False",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # Check the length of s\n        if len(s) > 1:\n            return False\n        \n        # Check whether it is a binary string\n        # and return True if it is\n        if s[0] == '1':\n            return True\n        \n        # Otherwise, return False\n        return False",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBinary(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if root.left and root.right:\n            return False\n        return self.isBinary(root.left) and self.isBinary(root.right)",
    "import sys\n\ndef isBinary(s):\n    for i in range(len(s)):\n        if s[i] < '0' or s[i] > '1':\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = sys.argv[1]\n    if isBinary(s):\n        print s, \"is binary\"\n    else:\n        print s, \"is not binary\"",
    "# https://oj.leetcode.com/problems/valid-binary-number/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isValidBinary(self, s):\n        if not s:\n            return True\n        if s[0] == '0':\n            return False\n        l = len(s)\n        if l % 2 == 1:\n            return False\n        i = 0\n        while i < l:\n            if s[i] == '0':\n                i += 1\n            else:\n                break\n        if i == l:\n            return False\n        if s[i] == '1':\n            return True\n        return False",
    "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        for i in xrange(len(s)):\n            if s[i] == '1':\n                if i+1 < len(s) and s[i+1] == '1':\n                    return False\n                elif i+2 < len(s) and s[i+2] == '1':\n                    return False\n                else:\n                    return True\n            elif s[i] == '0':\n                return False\n        return True\n\n    def checkValid2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        for i in xrange(len(s)):\n            if s[i] == '1':\n                if i+1 < len(s) and s[i+1] == '1':\n                    return False\n                elif i+2 < len(s) and s[i+2] == '1':\n                    return False\n                else:\n                    return True\n            elif s[i] == '0':\n                return True\n        return True",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == '':\n            return False\n\n        bin_str = ''\n        for i in range(len(s)):\n            if s[i] == '1':\n                bin_str += '1'\n            elif s[i] == '0':\n                bin_str += '0'\n            else:\n                return False\n        return bin_str == '1'",
    "# https://leetcode.com/problems/valid-binary-string/description/\n\n# 1. write a function to check whether the given string is a binary string or not.\n# 2. if the string is binary, return 1. Otherwise return 0.\n\nimport sys\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s or len(s) < 1:\n            return 0\n        \n        count = 0\n        for i in range(0, len(s)):\n            if s[i] == '1':\n                count += 1\n            else:\n                count -= 1\n            \n            if count < 0:\n                return 0\n        \n        return 1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isBinary(\"11\")\n    print s.isBinary(\"11101\")\n    print s.isBinary(\"101101\")",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n\n        # check whether the first char is '1'\n        if s[0] == '1':\n            return True\n        else:\n            # check whether the first char is '0'\n            if s[0] == '0':\n                return False\n\n        # check whether the first char is '1' or '0'\n        if s[0] == '1' or s[0] == '0':\n            # check whether the first char is '0' or '1'\n            if s[1] == '1' or s[1] == '0':\n                # check whether the second char is '1' or '0'\n                if s[2] == '1' or s[2] == '0':\n                    # check whether the third char is '1' or '0'\n                    if s[3] == '1' or s[3] == '0':\n                        # check whether the fourth char is '1' or '0'\n                        if s[4] == '1' or s[4] == '0':\n                            # check whether the fifth char is '1' or '0'\n                            if s[5] == '1' or s[5] == '0':\n                                # check whether the sixth char is '1' or '0'\n                                if s[6] == '1' or s[6] == '0':\n                                    # check whether the seventh char is '1' or '0'\n                                    if s[7] == '1' or s[7] == '0':\n                                        # check whether the eighth char is '1' or '0'\n                                        if s[8] == '1' or s[8] == '0':\n                                            # check whether the ninth char is '1' or '0'\n                                            if s[9] == '1' or s[9] == '0':\n                                                # check whether the tenth char is '1' or '0'\n                                                if s[10] == '",
    "def is_binary(s):\n    '''\n    check whether the string is binary or not.\n    '''\n    binary_dict = {'0': '0b0', '1': '0b1', '2': '0b10', '3': '0b11', '4': '0b100', '5': '0b101', '6': '0b110', '7': '0b111'}\n    binary = ''\n    for i in s:\n        if i in binary_dict:\n            binary += binary_dict[i]\n        else:\n            return False\n    return binary\n\n\nif __name__ == '__main__':\n    s = '0b101'\n    print(is_binary(s))",
    "def is_binary(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    :param s: The given string.\n    :return: True if the given string is a binary string, otherwise False.\n    \"\"\"\n    # Check whether the given string is a binary string or not.\n    return (len(s) > 1 and s[0] == '1' and s[-1] == '1') or (len(s) > 1 and s[0] == '0' and s[-1] == '0')\n\n\ndef main():\n    \"\"\"\n    Main function to run the problem.\n    \"\"\"\n    # Sample Input\n    # 00000111\n    # Sample Output\n    # True\n    # False\n    assert is_binary('00000111') == True\n    assert is_binary('11111111') == False\n\nif __name__ == '__main__':\n    main()",
    "import re\n\ndef is_binary(s):\n    return re.search(r'[1-9]', s) is not None\n\n# Test Cases\n# Input\n# \"Hello, world\"\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world\"\n# \"a\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello, world\"\n# \"Hello,",
    "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: A boolean\n    \"\"\"\n    def isBinary(self, s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        for i in range(len(s) - 1):\n            if s[i] == '1' and s[i+1]!= '0':\n                return False\n            if s[i] == '0' and s[i+1]!= '1':\n                return False\n        return True",
    "def check_binary(string):\n    \"\"\"\n    Write a function to check whether the given string is a binary string or not.\n    :param string: The string to be checked\n    :return: True if the string is binary, otherwise return False\n    \"\"\"\n    binary_string = ['0', '1']\n    for i in range(len(string)):\n        if string[i] in binary_string:\n            if string[i] == '1':\n                binary_string.remove('1')\n            else:\n                binary_string.remove('0')\n        else:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(check_binary('11101'))\n    print(check_binary('110101'))\n    print(check_binary('11010111'))\n    print(check_binary('111011111'))\n    print(check_binary('11101111111'))\n    print(check_binary('1'))\n    print(check_binary('01010101'))\n    print(check_binary('010101010101010101'))",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        if not s[0].isdigit():\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) % 2:\n            return False\n        for i in range(0, len(s), 2):\n            if s[i]!= '0' and s[i]!= '1':\n                return False\n        return True",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBinary(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        return self.isBinary(root.left) and self.isBinary(root.right)",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return s == '0' or s == '1'\n\n\nif __name__ == '__main__':\n    print Solution().isBinary('1')",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBinary(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        # Use a stack to store the result of the recursive calls.\n        stack = []\n        \n        # Check whether the current number is a binary string.\n        if num == '':\n            return False\n        \n        # Check the first character.\n        if num[0]!= '0' and num[0]!= '1':\n            return False\n        \n        # Check the rest of the characters.\n        for i in range(1, len(num)):\n            # Check whether the current character is a binary number.\n            if num[i]!= '0' and num[i]!= '1':\n                return False\n            \n            # Check whether the current character is a binary number.\n            if num[i] == '0' and num[i-1] == '1':\n                # Pop the previous node and push the current node.\n                stack.pop()\n                stack.append(TreeNode(num[i-1]))\n            elif num[i] == '1' and num[i-1] == '0':\n                # Pop the previous node and push the current node.\n                stack.pop()\n                stack.append(TreeNode(num[i-1]))\n            else:\n                return False\n        \n        # The stack should be empty at the end.\n        if len(stack) > 0:\n            return False\n        \n        return True",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isBinary(self, s):\n        return self.recursive_is_binary(s, 0)\n\n    def recursive_is_binary(self, s, i):\n        if i == len(s):\n            return True\n        elif i == len(s) - 1:\n            return s[i] == '1'\n        elif s[i] == '1':\n            return self.recursive_is_binary(s, i + 1) or self.recursive_is_binary(s, i + 2)\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    print Solution().isBinary(\"11\")",
    "# https://leetcode.com/problems/check-binary-string/\n\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        count = 0\n        for c in s:\n            if c == '0' or c == '1':\n                count += 1\n        return count == len(s)",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # return s[0] == '0' and s[1] == '1'\n        # return '1' in s and '0' in s\n        return '0' in s and '1' in s\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isBinary('0')\n    assert s.isBinary('1')\n    assert not s.isBinary('0')\n    assert not s.isBinary('1')\n    assert s.isBinary('101')\n    assert not s.isBinary('1010')\n    assert s.isBinary('1010101')\n    assert not s.isBinary('10101010')\n    assert s.isBinary
    "def isBinary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Note: we assume all digits are binary digits, not decimal digits\n    #\n    # binary digits are 0 and 1 only\n    #\n    # We also assume all strings are binary strings, and not binary numbers\n    #\n    # For example:\n    #\n    # 1. a = '1'\n    # 2. b = '0'\n    # 3. c = '11'\n    # 4. d = '10'\n    # 5. e = '01'\n    # 6. f = '100'\n    # 7. g = '101'\n    # 8. h = '111'\n    # 9. i = '1010'\n    # 10. j = '1011'\n    # 11. k = '101100'\n    # 12. l = '101101'\n    # 13. m = '1011010'\n    # 14. n = '10110101'\n    # 15. o = '101101101'\n    # 16. p = '1011011101'\n    # 17. q = '10110111111'\n    # 18. r = '101101111101'\n    # 19. s = '101101111111'\n    # 20. t = '1011011111111'\n    # 21. u = '10110111111111'\n    # 22. v = '101101111111111'\n    # 23. w = '1011011111111101'\n    # 24. x = '10110111111111101'\n    # 25. y = '101101111111111101'\n    # 26. z = '1011011111111111111'\n    # 27. aa = '1011101011110110111'\n    # 28. ab = '10111010111101101111'\n    # 29. ac = '101110101111011011111'\n    # 30. ad = '1011101011110110111111'\n    # 31. ae = '10111010111101101110111'\n    # 32. af = '101110101111011011101111'\n    # 33.",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBinary(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        \n        ret = self.isBinary(root.left) or self.isBinary(root.right)\n        return ret\n\nif __name__ == \"__main__\":\n    s = Solution()\n    #print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(-1))\n    print s.isBinary(TreeNode(-1))\n    print s.isBinary(TreeNode(-1))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(1))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0))\n    print s.isBinary(TreeNode(0",
    "def is_binary(s):\n    \"\"\"\n    check whether the given string is a binary string or not.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # return True if there is a binary digit in the string\n    for c in s:\n        if c == '1' or c == '0':\n            return True\n    return False\n\nif __name__ == '__main__':\n    s = '10101'\n    print is_binary(s)",
    "class Solution(object):\n    def checkIsBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # if not isinstance(s, str):\n        #     return False\n        if len(s) == 0:\n            return False\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        return self.checkIsBinary(s[1:]) or self.checkIsBinary(s[-1:])",
    "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isBinary(self, s):\n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return s in ['0', '1']\n        \n        # convert to binary string\n        s = ''.join(map(lambda x: '1' if x == '1' else '0', s))\n        \n        # check whether the string is binary\n        for i in range(0, len(s)):\n            if s[i] == '1':\n                return False\n            else:\n                if i > 0 and s[i]!= s[i-1]:\n                    return False\n        return True\n\ns = Solution()\nprint s.isBinary('10100101')\nprint s.isBinary('11')\nprint s.isBinary('110000')\nprint s.isBinary('1010011')",
    "#!/usr/bin/python\n\ndef isBinary(s):\n    \"\"\"\n    s: string\n    Returns True if s is a binary string, False otherwise.\n    \"\"\"\n    # check for '1'\n    for c in s:\n        if c not in '01':\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = '1'\n    print isBinary(s)",
    "def isBinary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return len(s) == len(bin(int(s)))\n\nprint(isBinary(\"1\"))\nprint(isBinary(\"10\"))\nprint(isBinary(\"100\"))\nprint(isBinary(\"1010\"))",
    "import os\n\ndef is_binary(string):\n    \"\"\"\n    :param string: a string to be checked\n    :return: whether the given string is binary or not\n    \"\"\"\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            return False\n        if string[i] == '1':\n            return True\n    return False\n\ndef is_binary_file(file_name):\n    \"\"\"\n    :param file_name: a file name to be checked\n    :return: whether the given file is binary or not\n    \"\"\"\n    with open(file_name) as f:\n        string = f.read()\n        return is_binary(string)\n\nif __name__ == '__main__':\n    file_name = 'b'\n    if os.path.exists(file_name):\n        print(is_binary_file(file_name))\n    else:\n        print('File does not exist')",
    "def isBinary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) > 1:\n        if s[0] == '0' and s[1] == 'b':\n            return True\n    return False\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        if s[0] == '0' and s[1] == 'b':\n            return True\n        if len(s) == 1:\n            return False\n        return self.isBinary(s[1:])\n\nif __name__ == '__main__':\n    print Solution().isBinary(\"10101\")",
    "import string\n\ndef check(s):\n    return all(c in string.printable for c in s)\n\nif __name__ == '__main__':\n    print(check('1'))\n    print(check('01'))\n    print(check('0101'))\n    print(check
    "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: True if s is a binary string, otherwise false\n    \"\"\"\n    def isBinary(self, s):\n        return len(s) == len(s.replace(\"0\", \"1\"))\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.isBinary(\"101\")\n    print solution.isBinary(\"11\")\n    print solution.isBinary
    "import string\n\ndef check_binary_string(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(s.count(c) for c in string.ascii_lowercase) == 1\n\nif __name__ == '__main__':\n    assert check_binary_string('a') is True, \"a is a binary string\"\n    assert check_binary_string('ab') is False, \"ab is not a binary string\"\n    assert check_binary_string('abc') is False, \"abc is not a binary string\"\n    assert check_binary_string('abcd') is False, \"abcd is not a binary string\"\n    assert check_binary_string('abcd' * 2) is True, \"abcd*2 is a binary string\"",
    "def is_binary(s):\n    \"\"\"\n    Write a python function to check whether the given string is a binary string or not.\n    \"\"\"\n    if len(s) > 0:\n        for i in range(0, len(s) - 1):\n            if s[i]!= '0' and s[i]!= '1':\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    s = '111'\n    print is_binary(s)\n    s = '0'\n    print is_binary(s)\n    s = '1'\n    print is_binary(s)\n    s = '0101'\n    print is_binary(s)\n    s = '1111'\n    print is_binary(s)\n    s = '0111'\n    print is_binary(s)\n    s = '1101'\n    print is_binary(s)\n    s = '1110'\n    print is_binary(s)\n    s = '1011'\n    print is_binary(s)\n    s = '1111'\n    print is_binary(s)\n    s = '1110'\n    print is_binary(s)\n    s = '1111'\n    print is_binary(s)\n    s = '1110'\n    print is_binary(s)\n    s = '1111'\n    print is_binary(s)\n    s = '1111'\n    print is_binary(s)",
    "import re\n\n\ndef isBinary(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    if re.search(r'[^01]', string):\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    assert isBinary('1011')\n    assert isBinary('0101')\n    assert not isBinary('1010')\n    assert not isBinary('0011')\n    assert not isBinary('1111')",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef isBinary(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    \n    @param s: The string to be checked.\n    @return: True if the given string is a binary string, otherwise False.\n    \"\"\"\n    \n    # Check whether the given string is a binary string or not.\n    binary_str = \"\"\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            binary_str += \"1\"\n        else:\n            binary_str += \"0\"\n    \n    if len(binary_str) % 2 == 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print \"Usage: %s <string>\" % sys.argv[0]\n        exit(-1)\n    \n    print isBinary(sys.argv[1])",
    "import re\n\ndef is_binary(s):\n    \"\"\"\n    Checks whether the given string is a binary string or not.\n    :param s: string to check\n    :return: True if the string is binary, otherwise False\n    \"\"\"\n    if len(s) > 2 and s[0] == s[1] and s[0] == '1':\n        return True\n    else:\n        return False\n\n# test cases\nprint(is_binary('11'))\nprint(is_binary('0101'))\nprint(is_binary('111'))\nprint(is_binary('111111'))\nprint(is_binary('0111'))\nprint(is_binary('11101'))\nprint(is_binary('1'))\nprint(is_binary('01'))\nprint(is_binary('0'))",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isBinarySearchTree(self, s):\n        if not s:\n            return True\n        else:\n            return self.helper(s)\n\n    def helper(self, s):\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s[0] == '#'\n        if s[0] == '#':\n            return self.helper(s[1:])\n        if s[0] == '0':\n            return self.helper(s[1:])\n        if s[0] == '1':\n            return self.helper(s[1:])\n\n        # get the leftmost node\n        l = 0\n        r = len(s) - 1\n        while l <= r:\n            # find the leftmost node\n            mid = (l + r) // 2\n            if s[mid] == '#':\n                return self.helper(s[:mid])\n            elif s[mid] == '0':\n                r = mid - 1\n            else:\n                l = mid + 1\n\n        return self.helper(s[l + 1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isBinarySearchTree('#')\n    print s.isBinarySearchTree('#0')\n    print s.isBinarySearchTree('0#1')\n    print s.isBinarySearchTree('1#0')\n    print s.isBinarySearchTree('#1')\n    print s.isBinarySearchTree('1#1')\n    print s.isBinarySearchTree('0#0')",
    "import re\n\ndef is_binary(string):\n    \"\"\"\n    string: a string to be checked\n    returns: whether the given string is a binary string or not\n    \"\"\"\n    return re.search(r'(?i)[0-1]{1,}', string) is not None\n\nif __name__ == '__main__':\n    string = '01110110'\n    print is_binary(string)",
    "def is_binary(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] not in ['0', '1']:\n            return False\n    return True\n\nif __name__ == '__main__':\n    assert is_binary('110101') == False\n    assert is_binary('110111') == False\n    assert is_binary('110110') == True",
    "class Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isBinary(self, s):\n        l = len(s)\n        if l == 0:\n            return True\n        for i in range(0, l-1):\n            if s[i]!= '0' and s[i]!= '1':\n                return False\n        return True\n\ns = Solution()\nprint(s.isBinary(\"1010\"))\nprint(s.isBinary(\"1011\"))\nprint(s.isBinary(\"11\"))\nprint(s.isBinary(\"1\"))\nprint(s.isBinary(\"0\"))\nprint(s.isBinary(\"\"))\nprint(s.isBinary(\"101100000000\"))\nprint(s.isBinary(\"110101010101\"))\nprint(s.isBinary
    "def checkBinary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s[0] == '1'\n    if s[0] == '0':\n        return checkBinary(s[1:])\n    return checkBinary(s[1:]) or checkBinary(s[:-1])\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return checkBinary(s)",
    "def is_binary(string):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    >>> is_binary(\"1\")\n    True\n    >>> is_binary(\"01\")\n    False\n    >>> is_binary(\"0001\")\n    False\n    >>> is_binary(\"0\")\n    False\n    >>> is_binary(\"0b\")\n    False\n    >>> is_binary(\"0b1\")\n    True\n    >>> is_binary(\"0b01\")\n    True\n    >>> is_binary(\"0b001\")\n    True\n    >>> is_binary(\"0b0001\")\n    True\n    >>> is_binary(\"0b0000\")\n    False\n    >>> is_binary(\"0b000001\")\n    False\n    >>> is_binary(\"0b00000101\")\n    False\n    \"\"\"\n    # Check whether the given string is a binary string or not.\n    if string.startswith(\"0b\"):\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import string\n\ndef is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(c in string.hexdigits for c in s)\n\n# Your Solution here.",
    "# write your code here\ndef is_binary(str):\n\treturn str.isalpha() and all(ord(c) < 128 for c in str)\n\nprint is_binary('abc')\nprint is_binary('abcd')\nprint is_binary('abcde')\nprint is_binary('123456')\nprint is_binary('1234567')\nprint is_binary('12345678')",
    "def is_binary(s):\n\t\"\"\"\n\tInput:\n\t\ts: a string\n\tOutput:\n\t\tTrue if the string is binary, False otherwise.\n\t\"\"\"\n\treturn s.count('1') >= len(s)/2\n\nprint(is_binary('1111111111111111111111111111111111111111111111111111111111111111'))\nprint(is_binary('11'))\nprint(is_binary('11101'))\nprint(is_binary('1101101'))\nprint(is_binary('1101'))",
    "def is_binary(string):\n    \"\"\"\n    Write a function is_binary that takes a string and returns a boolean.\n    \"\"\"\n    return all(ord(c) >= 0x80 for c in string)\n\n# TEST\nprint(is_binary('1234'))\nprint(is_binary('abcd'))\nprint(is_binary('1234'))\nprint(is_binary('abcd'))\nprint(is_binary('abcd'))\nprint(is_binary('abcd'))\nprint(is_binary('abcd'))\nprint(is_binary('abcd'))\nprint(is_binary('abcd'))",
    "def isBinary(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    return all(map(lambda x: x == '1', string))\n\n\ndef main():\n    print isBinary
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n\n        if len(s) == 1:\n            return s.isdigit()\n        \n        if s[0] == '0':\n            return self.isBinary(s[1:]) or self.isBinary(s[:-1])\n        else:\n            return self.isBinary(s[1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isBinary('1')\n    print s.isBinary('11')\n    print s.isBinary('1101')\n    print s.isBinary('11000101')\n    print s.isBinary
    "def is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return False\n    if len(s) % 2 == 1:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(is_binary('abcd'))\n    print(is_binary('abcd'))\n    print(is_binary('010101'))\n    print(is_binary('010101'))\n    print(is_binary('01010101'))\n    print(is_binary('01010101'))\n    print(is_binary('0101010101'))\n    print(is_binary('0101010101'))\n    print(is_binary('010101010101'))\n    print(is_binary('01010101010101'))\n    print(is_binary('0101010101010101'))\n    print(is_binary('010101010101010101'))\n    print(is_binary('01010101010101010101'))\n    print(is_binary('0101010101010101010101'))\n    print(is_binary('010101010101010101010101'))\n    print(is_binary('01010101010101010101010101'))\n    print(is_binary('0101010101010101010101010101'))\n    print(is_binary('010101010101010101010101010101'))\n    print(is_binary('01010101010101010101010101010101'))\n    print(is_binary('0101010101010101010101010101010101'))\n    print(is_binary('010101010101010101010101010101010101'))\n    print(is_binary('01010101010101010101010101010101010101'))\n    print(is_binary('01010101010101",
    "def isBinary(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n    :param s: string\n    :return: boolean\n    \"\"\"\n    # Check whether the string is empty.\n    if not s:\n        return False\n\n    # Check whether the string is an integer.\n    if not s.isdigit():\n        return False\n\n    # Check whether the string is a binary string.\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n\n\"\"\"\nTest Cases:\n1.\ns = \"111\"\n>>> isBinary(s)\nFalse\n\n2.\ns = \"1\"\n>>> isBinary(s)\nTrue\n\n3.\ns = \"10\"\n>>> isBinary(s)\nTrue\n\n4.\ns = \"01\"\n>>> isBinary(s)\nFalse\n\n5.\ns = \"000\"\n>>> isBinary(s)\nTrue\n\"\"\"",
    "def is_binary(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    # http://stackoverflow.com/questions/182827/how-to-check-if-a-string-is-binary-in-python\n    return string.__class__ is bytes",
    "def is_binary(s):\n    if len(s) == 0:\n        return False\n    \n    for i in range(0, len(s)):\n        if s[i] == '0' or s[i] == '1':\n            continue\n        else:\n            return False\n    \n    return True\n\nprint is_binary('10100')\nprint is_binary('11101101')\nprint is_binary('1110110111101101101')\nprint is_binary('111011011110110110111101101101111011011110110110110110110111101101101101101101111011011011011011110110110110110110111101101101101101101111011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111101101101101101101111011011011011011011110110110110110110111",
    "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def isBinarySearchTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.helper(root, 0)\n\n    def helper(self, root, level):\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if level >= 1000:\n            return False\n        if root.left and self.helper(root.left, level+1):\n            return True\n        if root.right and self.helper(root.right, level+1):\n            return True\n        return False",
    "import string\n\ndef is_binary(s):\n    \"\"\"\n    :param s: a string\n    :return: whether the given string is a binary string\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 1):\n        if (s[i] == s[i+1]) and (s[i] == s[i+2]):\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = 'abc'\n    print(is_binary(s))",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n\n        count = 0\n        for i in range(len(s)):\n            if s[i].isalpha():\n                count += 1\n            elif s[i] == '0':\n                count += 1\n            elif s[i] == '1':\n                count -= 1\n            else:\n                return False\n        if count < 0:\n            return False\n        return True\n\n\ndef main():\n    s = Solution()\n    s.isBinary(\"111011111\")\n    s.isBinary(\"1\")\n    s.isBinary(\"101110111\")\n    s.isBinary(\"111011011\")\n\nif __name__ == '__main__':\n    main()",
    "#\n# Below is the code I have written.\n#\n\ndef is_binary_string(s):\n    \"\"\"\n    Check whether the given string is a binary string or not.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    #\n    # We start with checking if the string is binary. If yes, then\n    # return true. Otherwise, return false.\n    #\n    # We can also check the string for empty or all spaces. If the string\n    # is all spaces or empty, then return false.\n    #\n    # We can also check the string for '0' or '1'. If the string has the\n    # character '0' or '1' at the beginning or end, then return true.\n    #\n    # For example, if the string is \"0\" or \"1\", then return true.\n    #\n    # If the string is a binary string, then return true.\n    #\n    # If the string is not a binary string, then return false.\n    #\n    # We can also check if the string is a binary string by checking if\n    # the string is a binary string or not.\n    #\n    # The logic is as follows:\n    #\n    # 1. If the string is a binary string, then return true.\n    # 2. If the string is not a binary string, then return false.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #",
    "def is_binary(s):\n    \"\"\"\n    A binary string is a string that is made up of 0s and 1s.\n    \"\"\"\n    if len(s) % 8!= 0:\n        return False\n    result = 0\n    for c in s:\n        result = (result << 1) | int(c)\n    return result == 0\n\ndef test():\n    assert is_binary(\"\") == False\n    assert is_binary(\"0\") == True\n    assert is_binary(\"01\") == True\n    assert is_binary(\"001\") == True\n    assert is_binary(\"101\") == True\n    assert is_binary(\"11\") == False\n    assert is_binary(\"1011\") == False\n\nif __name__ == \"__main__\":\n    test()",
    "# https://leetcode.com/problems/check-binary-string/\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        # 0b0 and 0b01 are binary\n        # 0b00 is not binary\n        # 0b110 is binary\n        # 0b1010 is binary\n        # 0b1011 is binary\n        # 0b0110 is binary\n        # 0b0101 is binary\n        # 0b0111 is binary\n        # 0b1000 is binary\n        # 0b1001 is binary\n        # 0b1011 is binary\n        # 0b1110 is binary\n        # 0b1111 is binary\n        count = 0\n        for i in range(0, len(s)):\n            if s[i] == '0' or s[i] == '1':\n                count += 1\n            else:\n                return False\n        return count == 1",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        # the first and last char of the string is '1'\n        if s[0] == '1' and s[-1] == '1':\n            return True\n        \n        # check whether the string is a binary string\n        if s.count('1') == len(s):\n            return True\n        \n        return False",
    "# https://oj.leetcode.com/problems/check-binary-search-tree/\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        return self.isBST(root.left) and self.isBST(root.right) and self.isBST(root.left, root.right)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isBST(None)\n    print s.isBST(TreeNode(1))\n    print s.isBST(TreeNode(2))\n    print s.isBST(TreeNode(3))\n    print s.isBST(TreeNode(4))\n    print s.isBST(TreeNode(5))\n    print s.isBST(TreeNode(6))\n    print s.isBST(TreeNode(7))\n    print s.isBST(TreeNode(8))\n    print s.isBST(TreeNode(9))\n    print s.isBST(TreeNode(10))\n    print s.isBST(TreeNode(11))\n    print s.isBST(TreeNode(12))\n    print s.isBST(TreeNode(13))\n    print s.isBST(TreeNode(14))\n    print s.isBST(TreeNode(15))\n    print s.isBST(TreeNode(16))\n    print s.isBST(TreeNode(17))\n    print s.isBST(TreeNode(18))\n    print s.isBST(TreeNode(19))\n    print s.isBST(TreeNode(20))\n    print s.isBST(TreeNode(21))\n    print s.isBST(TreeNode(22))\n    print s.isBST(TreeNode(23))",
    "import re\n\n\ndef is_binary(string):\n    \"\"\"\n    :param string: a string\n    :return: True if the string is binary, else False\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return False\n    if string[0] == '0':\n        return False\n    if string[-1] == '1':\n        return False\n    if string[-1] == '0':\n        return False\n    return True\n\n\ndef is_binary_regex(string):\n    \"\"\"\n    :param string: a string\n    :return: True if the string is binary, else False\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return False\n    if string[0] == '0':\n        return False\n    if string[-1] == '1':\n        return False\n    if string[-1] == '0':\n        return False\n    if string[-1] == '1':\n        return False\n    return True\n\n\ndef is_binary_regex_2(string):\n    \"\"\"\n    :param string: a string\n    :return: True if the string is binary, else False\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return False\n    if string[0] == '0':\n        return False\n    if string[-1] == '1':\n        return False\n    if string[-1] == '0':\n        return False\n    if string[-1] == '1':\n        return False\n    return True\n\n\ndef is_binary_regex_3(string):\n    \"\"\"\n    :param string: a string\n    :return: True if the string is binary, else False\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    if len(string) == 0:\n        return False\n    if len(",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.upper() in ['0', '1']\n        if s[0] == '0':\n            return self.isBinary(s[1:])\n        if s[-1] == '0':\n            return self.isBinary(s[:-1])\n        return self.isBinary(s[1:-1])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isBinary(\"11\")\n    print s.isBinary(\"10111\")\n    print s.isBinary(\"01\")\n    print s.isBinary(\"1101\")\n    print s.isBinary(\"0\")\n    print s.isBinary(\"1\")\n    print s.isBinary(\"11101\")\n    print s.isBinary(\"111010\")\n    print s.isBinary(\"101110111\")",
    "import string\n\n\ndef is_binary(str):\n    \"\"\"\n    Check whether a given string is a binary string or not.\n    :param str: a string\n    :return: True if str is a binary string, otherwise return False\n    \"\"\"\n    if str.__len__() < 3:\n        return False\n    if str[0] in string.digits and str[1] in string.digits and str[2] in string.digits:\n        return False\n    for i in range(3, str.__len__()):\n        if str[i] not in string.digits:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_binary(\"11\"))\n    print(is_binary(\"111\"))\n    print(is_binary(\"11111\"))\n    print(is_binary(\"11111111\"))\n    print(is_binary(\"111111111\"))\n    print(is_binary(\"111111111111\"))\n    print(is_binary(\"1111111111111111\"))\n    print(is_binary(\"11111111111111111111\"))\n    print(is_binary(\"111111111111111111111111\"))",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.upper() == '1'\n\n        if s[0] == '1' and len(s) > 1:\n            return False\n        if s[0] == '0' and len(s) > 1:\n            return False\n        \n        if len(s) < 2:\n            return True\n        \n        if s[0] == '0' and s[1] == '1':\n            return False\n        \n        return True",
    "import os\n\ndef is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    try:\n        return s.encode(\"hex\") == s.encode(\"hex\")\n    except:\n        return False\n\ndef is_binary_file(f):\n    \"\"\"\n    :type f: file\n    :rtype: bool\n    \"\"\"\n    try:\n        return f.read(0) == f.read(0)\n    except:\n        return False\n\ndef is_binary_dir(d):\n    \"\"\"\n    :type d: str\n    :rtype: bool\n    \"\"\"\n    if os.path.isdir(d):\n        for root, dirs, files in os.walk(d):\n            for f in files:\n                if is_binary_file(open(os.path.join(root, f), \"rb\")):\n                    return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print is_binary(\"aabbcc\")\n    print is_binary_file(open(\"test.bin\", \"rb\"))\n    print is_binary_dir(\"test\")",
    "def isBinary(str):\n    \"\"\"\n    :type str: str\n    :rtype: bool\n    \"\"\"\n    if not str:\n        return False\n    \n    if str[0] == '0':\n        return True\n    \n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            return False\n    \n    return True",
    "def is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) % 2!= 0:\n        return False\n    for i in range(0, len(s), 2):\n        if int(s[i:i+2], 2) > 255:\n            return False\n    return True\n\nif __name__ == '__main__':\n    assert is_binary('1')\n    assert is_binary('11')\n    assert is_binary('1111111111111111111111111111111111111111111111111111111111111111')\n    assert is_binary('1111111111111111111111111111111111111111111111111111111111111111')\n    assert is_binary('111111111111111111111111111111111111111111111111111111111111111111')\n    assert is_binary('111111111111111111111111111111111111111111111111111111111111111111')",
    "class Solution:\n    # @return a boolean\n    def isBinary(self, s):\n        return self.isBinaryHelper(s, 0, len(s))\n\n    def isBinaryHelper(self, s, start, end):\n        if end - start == 0:\n            return False\n        if end - start == 1:\n            return (s[start] == '0' or s[start] == '1')\n        if s[start] == '0' or s[start] == '1':\n            return self.isBinaryHelper(s, start + 1, end) or self.isBinaryHelper(s, start, end - 1)\n        return False\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.isBinary(\"1010\")\n    print solution.isBinary(\"11\")\n    print solution.isBinary(\"1\")\n    print solution.isBinary(\"1\")\n    print solution.isBinary(\"1\")\n    print solution.isBinary(\"11\")\n    print solution.isBinary(\"11\")\n    print solution.isBinary(\"111\")\n    print solution.isBinary(\"11\")\n    print solution.isBinary(\"01\")",
    "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: True if s is a binary string, otherwise false\n    \"\"\"\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        return all(map(lambda x: x in '01', s))",
    "def isBinary(str):\n    \"\"\"\n    :type str: str\n    :rtype: bool\n    \"\"\"\n    # if str == '': return True\n    # if str.find('0')!= -1: return True\n    # if str.find('1')!= -1: return True\n    return False\n\n# print(isBinary('11'))\n# print(isBinary('101'))\n# print(isBinary('10101'))\n# print(isBinary('1010101'))\n# print(isBinary('0110101'))\n# print(isBinary
    "def is_binary_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(ord(c) > 126 for c in s)\n\ndef main():\n    print(is_binary_string(\"hello\"))\n    print(is_binary_string(\"1\"))\n    print(is_binary_string(\"a\"))\n    print(is_binary_string(\"a1\"))\n    print(is_binary_string(\"1a\"))\n    print(is_binary_string(\"1a1\"))\n    print(is_binary_string(\"11\"))\n    print(is_binary_string(\"a11\"))\n    print(is_binary_string(\"11a\"))\n    print(is_binary_string(\"11a1\"))\n    print(is_binary_string(\"01\"))\n    print(is_binary_string(\"0a\"))\n    print(is_binary_string(\"0a1\"))\n    print(is_binary_string(\"01a\"))\n    print(is_binary_string(\"01a1\"))\n    print(is_binary_string(\"0111\"))\n    print(is_binary_string(\"0111a\"))\n    print(is_binary_string(\"0111a1\"))\n    print(is_binary_string(\"01111\"))\n    print(is_binary_string(\"01111a\"))\n    print(is_binary_string(\"01111a1\"))\n\nif __name__ == '__main__':\n    main()",
    "def is_binary(s):\n    \"\"\"\n    Returns True if the given string is a binary string, otherwise returns False.\n\n    >>> is_binary(\"abc\")\n    False\n    >>> is_binary(\"0\")\n    True\n    >>> is_binary(\"1\")\n    True\n    >>> is_binary(\"11\")\n    True\n    >>> is_binary(\"100\")\n    True\n    >>> is_binary(\"1011\")\n    False\n    \"\"\"\n    s = \"\".join(s.split())\n    return \"0\" not in s and \"1\" not in s\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
    "#!/usr/bin/python\n\ndef isBinary(s):\n    \"\"\"\n    check whether the given string is a binary string or not.\n    return True if it is a binary string.\n    return False if it is not a binary string.\n    \"\"\"\n    if len(s) < 1:\n        return False\n    s = s.upper()\n    for i in range(len(s)):\n        if not s[i] in ['0', '1']:\n            return False\n    return True\n\nprint isBinary(\"0101\")\nprint isBinary(\"11\")\nprint isBinary(\"11101\")\nprint isBinary(\"111011\")",
    "def is_binary(s):\n    \"\"\"\n    check whether the given string is a binary string or not.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return False\n    for i in range(len(s)):\n        if s[i]!= '0' and s[i]!= '1':\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = '111011'\n    print(is_binary(s))",
    "import string\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        if self:\n            return \"{}({!r}, {!r}, {!r})\".format(self.__class__.__name__, self.val, self.left, self.right)\n        else:\n            return \"{!r}()\".format(self.__class__.__name__)\n\nclass Solution:\n    def isBinary(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        for i in range(len(num)):\n            if not (num[i] in string.digits or num[i] in string.ascii_uppercase):\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    print Solution().isBinary(\"101\")",
    "def is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]!= '0' and s[i]!= '1':\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = '1101'\n    print is_binary(s)",
    "def is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return s.find('0') == -1 and s.find('1') == -1\n\nclass Solution(object):\n    def isBinary(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        return all(is_binary(num[i]) for i in xrange(len(num)))",
    "# https://leetcode.com/problems/is-binary-string/discuss/93960/Python-solution-with-O(1)-space-complexity\n\nclass Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        s = s.upper()\n        if len(s) == 1:\n            return s in '01'\n        if len(s) == 2:\n            return s[0] == '1' and s[1] == '0'\n        return False",
    "import sys\n\ndef is_binary(s):\n    '''\n    Check whether the given string is a binary string or not.\n\n    :param s: The given string\n    :return: True if the given string is a binary string, else False\n    '''\n    # We will use the following function to convert the string to binary string.\n    # We will assume the given string is a string, otherwise we will just return False.\n    def to_binary(s):\n        '''\n        Convert the given string to binary string.\n\n        :param s: The given string\n        :return: The converted string\n        '''\n        # We use the following algorithm to convert the given string to binary string.\n        # 1. If the given string is empty or None, then return False.\n        if not s:\n            return False\n        # 2. If the given string is a single character, then return True.\n        elif len(s) == 1:\n            return True\n        # 3. If the given string is a multiple character, then convert it to a binary string.\n        else:\n            return ''.join([to_binary(c) for c in s])\n\n    # We will use the following function to check whether the given string is a binary string or not.\n    # We will assume the given string is a string, otherwise we will just return False.\n    def check_binary(s):\n        '''\n        Check whether the given string is a binary string or not.\n\n        :param s: The given string\n        :return: True if the given string is a binary string, else False\n        '''\n        # We use the following algorithm to check whether the given string is a binary string or not.\n        # 1. If the given string is empty or None, then return False.\n        if not s:\n            return False\n        # 2. If the given string is a single character, then return True.\n        elif len(s) == 1:\n            return True\n        # 3. If the given string is a multiple character, then convert it to a binary string.\n        else:\n            return to_binary(s) == s\n\n    # We will use the following function to check whether the given string is a binary string or not.\n    # We will assume the given",
    "# Define a function to check whether the given string is a binary string or not.\ndef is_binary(s):\n    if len(s) == 0:\n        return False\n    # s.lower() is used to convert the string to lower case\n    if s.lower() in ['0b', '0B', '0b1', '0B1', '0b01', '0B01']:\n        return True\n    else:\n        return False\n\nprint is_binary('0b')\nprint is_binary('0b1')\nprint is_binary('0b01')\nprint is_binary('0B')\nprint is_binary('0B1')\nprint is_binary('0B01')\nprint is_binary('0b')\nprint is_binary('0B')\nprint is_binary('0B1')\nprint is_binary('0B01')\n\n# Test Case\n\n\"\"\"\nTest case 1:\nInput: '0b'\nOutput: True\n\nTest case 2:\nInput: '0b1'\nOutput: True\n\nTest case 3:\nInput: '0b01'\nOutput: False\n\nTest case 4:\nInput: '0B'\nOutput: False\n\nTest case 5:\nInput: '0B1'\nOutput: False\n\nTest case 6:\nInput: '0B01'\nOutput: True\n\nTest case 7:\nInput: '0b'\nOutput: False\n\nTest case 8:\nInput: '0B'\nOutput: False\n\nTest case 9:\nInput: '0B1'\nOutput: False\n\nTest case 10:\nInput: '0B01'\nOutput: True\n\"\"\"\n\n# Sample Input\ns = '0b'\n\n# Sample Output\nprint is_binary(s)",
    "def is_binary(s):\n    \"\"\"\n    >>> is_binary(\"a\")\n    True\n    >>> is_binary(\"1\")\n    False\n    >>> is_binary(\"a1\")\n    False\n    >>> is_binary(\"1a\")\n    False\n    >>> is_binary(\"1a1\")\n    False\n    >>> is_binary(\"1a1b\")\n    True\n    >>> is_binary(\"1a1b1\")\n    True\n    \"\"\"\n\n    # Check whether it is a binary string\n    if len(s) == 0:\n        return False\n\n    # Check whether it is a binary string\n    if s[0] == \"0\" or s[0] == \"1\":\n        return False\n\n    # Check whether it is a binary string\n    if s[0] == \"a\" or s[0] == \"b\":\n        return False\n\n    # Check whether it is a binary string\n    if s[0] == \"1\" and len(s) > 1:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "import re\n\n# Returns true if the string is a binary string.\ndef isBinary(str):\n    # Check for non-alphanumeric characters.\n    if not str.isalpha():\n        return False\n\n    # Check for odd number of '1's.\n    if str.count('1') % 2!= 0:\n        return False\n\n    # Check for even number of '0's.\n    if str.count('0') % 2!= 0:\n        return False\n\n    return True\n\n# Returns true if the given string is a binary string.\ndef isBinary(str):\n    # Check for non-alphanumeric characters.\n    if not str.isalpha():\n        return False\n\n    # Check for odd number of '1's.\n    if str.count('1') % 2!= 0:\n        return False\n\n    # Check for even number of '0's.\n    if str.count('0') % 2!= 0:\n        return False\n\n    return True\n\n# Returns true if the given string is a binary string.\ndef isBinary(str):\n    # Check for non-alphanumeric characters.\n    if not str.isalpha():\n        return False\n\n    # Check for odd number of '1's.\n    if str.count('1') % 2!= 0:\n        return False\n\n    # Check for even number of '0's.\n    if str.count('0') % 2!= 0:\n        return False\n\n    return True\n\n# Returns true if the given string is a binary string.\ndef isBinary(str):\n    # Check for non-alphanumeric characters.\n    if not str.isalpha():\n        return False\n\n    # Check for odd number of '1's.\n    if str.count('1') % 2!= 0:\n        return False\n\n    # Check for even number of '0's.\n    if str.count('0') % 2!= 0:\n        return False\n\n    return True\n\n# Returns true if the given string is a binary string.\ndef isBinary(str):\n    # Check for non-alphanumeric characters.\n    if not str.isalpha():\n        return False\n\n    # Check for odd number of '1's.\n    if str.count('",
    "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isBinary(self, s):\n        if not s:\n            return True\n        l = len(s)\n        if l & 1:\n            return False\n        # s is even\n        if l % 2 == 0:\n            return self.isBinary(s[0]) and self.isBinary(s[1:])\n        else:\n            return self.isBinary(s[0]) or self.isBinary(s[1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isBinary('101')\n    assert s.isBinary('11')\n    assert s.isBinary('1')\n    assert s.isBinary('0')\n    assert s.isBinary('01')\n    assert s.isBinary('001')\n    assert s.isBinary('1101')\n    assert s.isBinary('11001')\n    assert not s.isBinary('0')\n    assert not s.isBinary('110111')\n    assert not s.isBinary('11010111')",
    "import re\n\ndef is_binary(s):\n    \"\"\"\n    :param s: string\n    :return: boolean\n    \"\"\"\n    return bool(re.match(r'^[0-1]+$', s))",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == \"0\" or s == \"1\":\n            return True\n        if len(s) % 2!= 0:\n            return False\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == \"1\":\n                if s[i + 1] == \"0\":\n                    return False\n                if s[i + 1] == \"1\":\n                    return True\n        return False",
    "class Solution(object):\n    def isBinary(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False",
    "def is_binary(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Check whether it's a binary string\n    binary = s.find('1')!= -1 or s.find('0')!= -1\n    return binary\n\nif __name__ == '__main__':\n    s = '111111'\n    print(is_binary(s))"
  ],
  "generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}