{
  "task_id": "APPS/484",
  "problem_id": 484,
  "prompt": "One very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n\n-----Examples-----\nInput\n2 2 2\n1 2\n2 1\n\nOutput\n4\n\nInput\n4 10 9\n2 3\n1 1\n5 10\n9 11\n\nOutput\n56\n\nInput\n3 10 10\n6 6\n7 7\n20 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can rotate the second seal by 90 degrees. Then put impression of it right under the impression of the first seal. This will occupy all the piece of paper.\n\nIn the second example you can't choose the last seal because it doesn't fit. By choosing the first and the third seals you occupy the largest area.\n\nIn the third example there is no such pair of seals that they both can fit on a piece of paper.",
  "solutions": "[\"R=lambda:list(map(int,input().split()))\\nn,a,b=R()\\nxy = [R() for _ in range(n)]\\nans = 0\\ndef f(xy1, xy2):\\n    tans = 0\\n    for _ in range(2):\\n        for __ in range(2):\\n            if (xy1[0]+xy2[0]<=a and max(xy1[1], xy2[1])<=b) or\\\\\\n                (max(xy1[0], xy2[0])<=a and xy1[1]+xy2[1]<=b):\\n                tans=max(tans, xy1[0]*xy1[1] + xy2[0]*xy2[1])\\n            xy2[0], xy2[1] = xy2[1], xy2[0]\\n        xy1[0], xy1[1] = xy1[1], xy1[0]\\n    return tans\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        ans=max(ans, f(xy[i], xy[j]))\\nprint(ans)\\n\", \"import sys\\n\\nn, a, b = list(map(int, input().split()))\\nx = []\\ny = []\\nfor i in range(n):\\n    x1, y1 = list(map(int, input().split()))\\n    x.append(x1)\\n    y.append(y1)\\nans = 0\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        s = x[i] * y[i] + x[j] * y[j]\\n        if x[i] + x[j] <= a and max(y[i], y[j]) <= b:\\n            ans = max(ans, s)\\n        if x[i] + x[j] <= b and max(y[i], y[j]) <= a:\\n            ans = max(ans, s)\\n        if x[i] + y[j] <= a and max(y[i], x[j]) <= b:\\n            ans = max(ans, s)\\n        if x[i] + y[j] <= b and max(y[i], x[j]) <= a:\\n            ans = max(ans, s)\\n        if y[i] + y[j] <= a and max(x[i], x[j]) <= b:\\n            ans = max(ans, s)\\n        if y[i] + y[j] <= b and max(x[i], x[j]) <= a:\\n            ans = max(ans, s)\\n        if y[i] + x[j] <= a and max(x[i], y[j]) <= b:\\n            ans = max(ans, s)\\n        if y[i] + x[j] <= b and max(x[i], y[j]) <= a:\\n            ans = max(ans, s)\\nprint(ans)\\n\", \"#! /usr/bin/env python3\\n\\n\\ndef check(x, y, a, b):\\n    return min(x, y) <= min(a, b) and max(x, y) <= max(a, b)\\n\\n\\nn, a, b = list(map(int, input().split()))\\np = []\\n\\nfor i in range(n):\\n    xi, yi = list(map(int, input().split()))\\n    p.append((xi, yi))\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i):\\n        x1, y1 = p[i]\\n        x2, y2 = p[j]\\n        if (check(max(x1, x2), y1 + y2, a, b) or check(max(x1, y2), x2 + y1, a, b) or\\n                check(max(y1, x2), x1 + y2, a, b) or check(max(y1, y2), x1 + x2, a, b)):\\n            ans = max(ans, x1 * y1 + x2 * y2)\\nprint(ans)\\n\", \"n, a, b = list(map(int, input().split()))\\nps = []\\nfor i in range(n):\\n\\tps.append(tuple(map(int, input().split())))\\n\\nres = 0\\n\\ndef is_ok(p, a, b):\\n\\treturn (p[0] <= a and p[1] <= b) or (p[0] <= b and p[1] <= a)\\n\\n\\ndef is_pair_ok(p1, p2):\\n\\tan = a - p1[0]\\n\\tbn = b - p1[1]\\n\\tif an < 0 or bn < 0:\\n\\t\\treturn False\\n\\treturn is_ok(p2, bn, a) or is_ok(p2, an, b)\\n\\n\\nfor i1, p1 in enumerate(ps):\\n\\tfor i2, p2 in enumerate(ps):\\n\\t\\tif i1 == i2:\\n\\t\\t\\tcontinue\\n\\t\\tcres = p1[0] * p1[1] + p2[0] * p2[1]\\n\\t\\tif is_pair_ok(p1, p2) or is_pair_ok((p1[1], p1[0]), p2):\\n\\t\\t\\tres = max(cres, res)\\n\\nprint(res)\\n\", \"def try_fit(X, Y, x1, y1, x2, y2):\\n    if x1 > X or y1 > Y:\\n        return False\\n    newX = X - x1\\n    newY = Y - y1\\n    return (x2 <= newX and y2 <= Y) or (x2 <= X and y2 <= newY)\\n\\n\\nn, a, b = map(int, input().split())\\nl = []\\nfor i in range(n):\\n    x, y = map(int, input().split())\\n    l.append((x, y))\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        x1, y1 = l[i]\\n        x2, y2 = l[j]\\n        if try_fit(a, b, x1, y1, x2, y2) or try_fit(a, b, y1, x1, x2, y2) or \\\\\\n           try_fit(a, b, x1, y1, y2, x2) or try_fit(a, b, y1, x1, y2, x2):\\n            ans = max(ans, x1 * y1 + x2 * y2)\\nprint(ans)\", \"import sys\\n\\n\\ndef check(a, b, x, y, q, w):\\n    if x + q <= a and max(y, w) <= b:\\n        return True\\n    if y + w <= b and max(x, q) <= a:\\n        return True\\n    return False\\n\\n\\ndef main():\\n    n, a, b = list(map(int, sys.stdin.readline().split()))\\n    t = []\\n    for i in range(n):\\n        x, y = list(map(int, sys.stdin.readline().split()))\\n        if (x > a or y > b) and (x > b or y > a):\\n            pass\\n        else:\\n            t.append((x, y))\\n\\n    ans = 0\\n    for i in range(len(t)):\\n        for j in range(i + 1, len(t)):\\n            if check(a, b, t[i][0], t[i][1], t[j][0], t[j][1]) or check(a, b, t[i][0], t[i][1], t[j][1], t[j][0]) \\\\\\n                    or check(a, b, t[i][1], t[i][0], t[j][1], t[j][0]) or check(a, b, t[i][1], t[i][0], t[j][0],\\n                                                                                t[j][1]):\\n                c = t[i][0] * t[i][1] + t[j][0] * t[j][1]\\n                if c > ans:\\n                    ans = c\\n\\n    print(ans)\\n\\n\\nmain()\\n\", \"n, a, b = list(map(int, input().split()))\\n\\nd = [list(map(int, input().split())) for i in range(n)]\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(n):\\n        if i != j:\\n            tmp = d[i][0] * d[i][1] + d[j][0] * d[j][1]\\n            for x1 in range(2):\\n                for x2 in range(2):\\n                    #print(i, j, max(d[i][x1], d[j][x2]), d[i][1 - x1] + d[j][1 - x2])\\n                    if max(d[i][x1], d[j][x2]) <= b and d[i][1 - x1] + d[j][1 - x2] <= a:\\n                        ans = max(ans, tmp)\\n                    if max(d[i][x1], d[j][x2]) <= a and d[i][1 - x1] + d[j][1 - x2] <= b:\\n                        ans = max(ans, tmp)\\nprint(ans)\\n\", \"import re, sys\\n\\nn, a, b = list(map(int, input().split()))\\n\\nd = [tuple(map(int, input().split())) for i in range(n)]\\n\\ndef f(a, b, d):\\n    ans = []\\n    if a <= d[0] and b <= d[1]:\\n        ans.append((d[0] - a, d[1]))\\n        ans.append((d[0], d[1] - b))\\n    a, b = b, a\\n    if a <= d[0] and b <= d[1]:\\n        ans.append((d[0] - a, d[1]))\\n        ans.append((d[0], d[1] - b))\\n    return ans\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        for t in f(d[i][0], d[i][1], (a, b)):\\n            if len(f(d[j][0], d[j][1], t)):\\n                ans = max(ans, d[i][0] * d[i][1] + d[j][0] * d[j][1])\\n\\nprint(ans)\\n\", \"n, a, b = map(int, input().split())\\ns = []\\nfor i in range(n):\\n    x, y = map(int, input().split())\\n    s.append((x, y, x*y))\\nt = 0\\nfor i in range(n):\\n    for j in range(i):\\n        if (s[i][0]+s[j][0]<=a and s[i][1]<=b and s[j][1] <=b) or (s[i][1]+s[j][0]<=a and s[i][0]<=b and s[j][1] <=b) or (s[i][0]+s[j][1]<=a and s[i][1]<=b and s[j][0] <=b) or (s[i][1]+s[j][1]<=a and s[i][0]<=b and s[j][0] <=b):\\n            t = max(t, s[i][2]+s[j][2])\\n        a, b = b, a\\n        if (s[i][0]+s[j][0]<=a and s[i][1]<=b and s[j][1] <=b) or (s[i][1]+s[j][0]<=a and s[i][0]<=b and s[j][1] <=b) or (s[i][0]+s[j][1]<=a and s[i][1]<=b and s[j][0] <=b) or (s[i][1]+s[j][1]<=a and s[i][0]<=b and s[j][0] <=b):\\n            t = max(t, s[i][2]+s[j][2])\\n        a,b = b, a\\nprint(t)\", \"n, a, b = list(map(int, input().split()))\\nmas = [[0, 0] for i in range(n)]\\nfor i in range(n):\\n  mas[i] = list(map(int, input().split()))\\n\\ndef f(i1, j1, i2, j2):\\n  if (i1 <= a and j1 <= b and i2 <= a and j2 <= b):\\n    if (j1 + j2 > b and i1 + i2 > a):\\n      return 0\\n    return i1 * j1 + i2 * j2\\n  return 0\\nans = 0\\nfor i in range(n):\\n  for j in range(n):\\n    if (i != j):\\n      ans = max(ans, f(mas[i][0], mas[i][1], mas[j][0], mas[j][1]))\\n      ans = max(ans, f(mas[i][1], mas[i][0], mas[j][0], mas[j][1]))\\n      ans = max(ans, f(mas[i][0], mas[i][1], mas[j][1], mas[j][0]))\\n      ans = max(ans, f(mas[i][1], mas[i][0], mas[j][1], mas[j][0]))\\n\\nprint(ans)\\n\", \"n,A,B=list(map(int,input().split()))\\narr=[]\\nfor x in range(n):\\n    i,j=list(map(int,input().split()))\\n    arr.append([i,j])\\nans=int(0)\\ni=int(0)\\nj=int(0)\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        a=arr[i][0]\\n        b=arr[i][1]\\n        c=arr[j][0]\\n        d=arr[j][1]\\n        temp=a*b+c*d\\n        if(temp<=ans):\\n            continue\\n        if((b+d<=B and max(a,c)<=A) or(max(b,d)<=B and a+c<=A)or (b+c<=B and max(a,d)<=A)or (max(b,c)<=B and a+d<=A)or (a+d<=B and max(c,b)<=A)or(max(a,d)<=B and c+b<=A)or(a+c<=B and max(b,d)<=A)or(max(a,c)<=B and b+d<=A)):\\n            ans=max(ans,temp)\\nprint(ans)\\n\", \"n, a, b = map(int, input().split(' '))\\nseals = []\\nfor i in range(n): seals.append(list(map(int, input().split(' '))))\\n\\ndef canFit(rect, a, b):\\n\\tx1, x2 = max(a, b), min(a, b)\\n\\ty1, y2 = max(rect[0], rect[1]), min(rect[0], rect[1])\\n\\treturn x1 >= y1 and x2 >= y2;\\n\\nseals.sort(key = lambda x: -x[0]*x[1])\\nbest = 0\\n#Rects not squares\\nfor i in range(n):\\n\\tfor j in range(i+1, n):\\n\\t\\tfirst = [seals[i][0] + seals[j][0], max(seals[i][1], seals[j][1])]\\n\\t\\tsecond = [seals[i][0] + seals[j][1], max(seals[i][1], seals[j][0])]\\n\\t\\tthird = [max(seals[i][0], seals[j][0]), seals[i][1] + seals[j][1]]\\n\\t\\tfourth = [max(seals[i][0], seals[j][1]), seals[i][1] + seals[j][0]]\\n\\t\\tif canFit(first, a, b) or canFit(second, a, b) or canFit(third, a, b) or canFit(fourth, a, b):\\n\\t\\t\\tbest = max(best, seals[i][0]*seals[i][1] + seals[j][0]*seals[j][1])\\n\\nprint(best)\", \"def main():\\n    n, a, b = [int(t) for t in input().split()]\\n\\n    points = []\\n    for _ in range(n):\\n        point = [int(t) for t in input().split()]\\n        points.append(point)\\n\\n    largest_area = 0\\n    for i, (x1, y1) in enumerate(points):\\n        for j, (x2, y2) in enumerate(points):\\n            if i == j:\\n                continue\\n            if satisfy(x1, y1, x2, y2, a, b):\\n                area = x1 * y1 + x2 * y2\\n                largest_area = max(area, largest_area)\\n\\n    print(largest_area)\\n\\n\\ndef satisfy(x1, y1, x2, y2, a, b):\\n    if satisfy_single(max((x1, x2)), sum((y1, y2)), a, b):\\n        return True\\n    if satisfy_single(sum((x1, x2)), max((y1, y2)), a, b):\\n        return True\\n    if satisfy_single(max((x1, y2)), sum((y1, x2)), a, b):\\n        return True\\n    if satisfy_single(sum((x1, y2)), max((y1, x2)), a, b):\\n        return True\\n    if satisfy_single(max((y1, x2)), sum((x1, y2)), a, b):\\n        return True\\n    if satisfy_single(sum((y1, x2)), max((x1, y2)), a, b):\\n        return True\\n\\n    return False\\n\\n\\ndef satisfy_single(x, y, a, b):\\n    if x <= a and y <= b:\\n        return True\\n    if x <= b and y <= a:\\n        return True\\n\\n    return False\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def check(l):\\n    nonlocal a, b, s, ans\\n    if min(l) <= min(a, b) and max(l) <= max(a, b):\\n        ans = max(ans, s)\\n\\n\\nans = 0\\nx = []\\ny = []\\nn, a, b = list(map(int, input().split()))\\nfor _ in range(n):\\n    xi, yi = list(map(int, input().split()))\\n    x.append(xi)\\n    y.append(yi)\\n\\nans = 0\\nfor i in range(n - 1):\\n    for j in range(i + 1, n):\\n        s = x[i] * y[i] + x[j] * y[j]\\n        check([max(x[i], x[j]), y[i] + y[j]])\\n        check([max(x[i], y[j]), y[i] + x[j]])\\n        check([max(y[i], x[j]), x[i] + y[j]])\\n        check([max(y[i], y[j]), x[i] + x[j]])\\n        check([x[i] + x[j], y[i] + y[j]])\\n        check([x[i] + y[j], y[i] + x[j]])\\n\\nprint(ans)\\n\", \"n, a, b = map(int, input().split())\\nA = []\\nfor i in range(n):\\n    A.append(list(map(int, input().split())))\\n\\n\\ndef sqr(f, s):\\n\\n    for i in range(3):\\n        if (a >= f[0] + s[0] and b >= max(f[1], s[1])) or (b >= f[0] + s[0] and a >= max(f[1], s[1])):\\n            return f[0]*f[1] + s[0]*s[1]\\n        elif (a >= max(f[0], s[0]) and b >= f[1] + s[1]) or (b >= max(f[0], s[0]) and a >= f[1] + s[1]):\\n            return f[0] * f[1] + s[0] * s[1]\\n\\n        elif(i == 0):\\n            f[0], f[1] = f[1], f[0]\\n        elif (i == 1):\\n            f[0], f[1] = f[1], f[0]\\n            s[0], s[1] = s[1], s[0]\\n\\n    return 0\\n\\nmaxi = 0\\nfor i in range(n):\\n    for j in range(n):\\n        if i != j:\\n            maxi = max(maxi, sqr(A[i], A[j]))\\nprint(maxi)\", \"n, a, b = map(int, input().split())\\nl = [[int(j) for j in input().split()] for i in range(n)]\\nms = 0\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        if l[i][0] + l[j][0] <= a and max(l[i][1], l[j][1]) <= b:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][1] + l[j][1] <= a and max(l[i][0], l[j][0]) <= b:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][0] + l[j][1] <= a and max(l[i][1], l[j][0]) <= b:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][1] + l[j][0] <= a and max(l[i][0], l[j][1]) <= b:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][0] + l[j][0] <= b and max(l[i][1], l[j][1]) <= a:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][1] + l[j][1] <= b and max(l[i][0], l[j][0]) <= a:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][0] + l[j][1] <= b and max(l[i][1], l[j][0]) <= a:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\n        if l[i][1] + l[j][0] <= b and max(l[i][0], l[j][1]) <= a:\\n            ms = max(ms, l[i][0] * l[i][1] + l[j][0] * l[j][1])\\nprint(ms)\", \"n, a, b = list(map(int, input().split()))\\nx = list(range(n))\\ny = list(range(n))\\nfor i in range(n):\\n\\tx[i], y[i] = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\tfor j in range(i + 1, n):\\n\\t\\t# 4 ways of rotating\\n\\t\\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\\n\\t\\t\\tans = max(ans, x[i] * y[i] + x[j] * y[j])\\n\\t\\tx[i], y[i] = y[i], x[i]\\n\\t\\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\\n\\t\\t\\tans = max(ans, x[i] * y[i] + x[j] * y[j])\\n\\t\\tx[j], y[j] = y[j], x[j]\\n\\t\\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\\n\\t\\t\\tans = max(ans, x[i] * y[i] + x[j] * y[j])\\n\\t\\tx[i], y[i] = y[i], x[i]\\n\\t\\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\\n\\t\\t\\tans = max(ans, x[i] * y[i] + x[j] * y[j])\\n\\t\\tx[j], y[j] = y[j], x[j]\\nprint(ans)\\n\", \"def check_fit_seal(grid, seal):\\n    if grid[0] >= seal[0] and grid[1] >= seal[1]:\\n        return True\\n    else:\\n        return False\\n\\n\\ndef check_fit_seals(grid, seal1, seal2):\\n    ans = False\\n    if check_fit_seal(grid, seal1):\\n        ans = ans or check_fit_seal((grid[0] - seal1[0], grid[1]), seal2)\\n        ans = ans or check_fit_seal((grid[0], grid[1] - seal1[1]), seal2)\\n        ans = ans or check_fit_seal((grid[0] - seal1[0], grid[1]), (seal2[1], seal2[0]))\\n        ans = ans or check_fit_seal((grid[0], grid[1] - seal1[1]), (seal2[1], seal2[0]))\\n\\n    seal1 = (seal1[1], seal1[0])\\n    if check_fit_seal(grid, seal1):\\n        ans = ans or check_fit_seal((grid[0] - seal1[0], grid[1]), seal2)\\n        ans = ans or check_fit_seal((grid[0], grid[1] - seal1[1]), seal2)\\n        ans = ans or check_fit_seal((grid[0] - seal1[0], grid[1]), (seal2[1], seal2[0]))\\n        ans = ans or check_fit_seal((grid[0], grid[1] - seal1[1]), (seal2[1], seal2[0]))\\n\\n    return ans\\n\\n\\nn, a, b = [int(i) for i in input().strip().split(' ')]\\n\\nseals = []\\nfor _ in range(n):\\n    seals.append([int(i) for i in input().strip().split(' ')])\\n\\nmax_area = 0\\nfor i, seal1 in enumerate(seals):\\n    for j, seal2 in enumerate(seals):\\n        if i != j:\\n            if check_fit_seals((a, b), seal1, seal2):\\n                max_area = max(max_area, seal1[0] * seal1[1] + seal2[0] * seal2[1])\\n\\nprint(max_area)\\n\", \"from sys import stdin as fin\\n# fin = open(\\\"ecr26c.in\\\", \\\"r\\\")\\n\\ndef check_place(x1, y1, x2, y2, x, y):\\n    return (\\n        # (x1 + x2 <= x and y1 + y2 >= y) or\\n        (x1 + x2 <= x and max(y1, y2) <= y) or\\n        (max(x1, x2) <= x and y1 + y2 <= y)\\n        )\\n\\nn, a, b = map(int, fin.readline().split())\\n# m = int(fin.readline())\\nmaxs = 0\\nrects = tuple(tuple(map(int, fin.readline().split())) for i in range(n))\\nfor i in range(n):\\n    for j in range(n):\\n        if i != j:\\n            (x1, y1), (x2, y2) = rects[i], rects[j]\\n            if (\\n                check_place(x1, y1, x2, y2, a, b) or\\n                check_place(x1, y1, y2, x2, a, b) or\\n                check_place(y1, x1, x2, y2, a, b) or\\n                check_place(y1, x1, y2, x2, a, b)\\n            ):\\n                maxs = max(maxs, x1*y1 + x2*y2)\\n                pass\\nprint(maxs)\", \"n, a, b = list(map(int, input().split()))\\ncachet = [list(map(int, input().split())) for i in range(n)]\\ncachet.sort(key = lambda el: el[0] * el[1])\\ncachet.reverse()\\nmaxim = 0\\nfor i in range(n - 1):\\n    for j in range(i + 1, n):\\n        p1 = cachet[i]\\n        p2 = cachet[j]\\n        s = p1[0] * p1[1] + p2[0] * p2[1]\\n        if (p1[0] + p2[0] <= a and max(p1[1], p2[1]) <= b) or (p1[0] + p2[0] <= b and max(p1[1], p2[1]) <= a):\\n            if s > maxim:\\n                maxim = s\\n            break\\n        elif (p1[1] + p2[0] <= a and max(p1[0], p2[1]) <= b) or (p1[1] + p2[0] <= b and max(p1[0], p2[1]) <= a):\\n            if s > maxim:\\n                maxim = s\\n            break\\n        elif (p1[0] + p2[1] <= a and max(p1[1], p2[0]) <= b) or (p1[0] + p2[1] <= b and max(p1[1], p2[0]) <= a):\\n            if s > maxim:\\n                maxim = s\\n            break\\n        elif (p1[1] + p2[1] <= a and max(p1[0], p2[0]) <= b) or (p1[1] + p2[1] <= b and max(p1[0], p2[0]) <= a):\\n            if s > maxim:\\n                maxim = s\\n            break\\nprint(maxim)\\n   \\n\", \"n, a, b = map(int, input().split())\\n\\ns = [0] * n\\n\\nfor i in range(n):\\n    s[i] = tuple(map(int, input().split()))\\n\\n\\nans = 0\\n\\nfor i in range(n):\\n    if s[i][0] > a and s[i][1] > b and\\\\\\n       s[i][0] > b and s[i][1] > a:\\n        continue\\n\\n    cur = [s[i][0], s[i][1]]\\n    \\n    for orientation in range(2):\\n        cur[0], cur[1] = cur[1], cur[0]\\n        rest = [(a - cur[0], b), (a, b - cur[1])]\\n        \\n        if cur[0] <= a and cur[1] <= b:\\n            for j in range(i + 1, n):\\n                cur2 = [s[j][0], s[j][1]]\\n                \\n                for orientation2 in range(2):\\n                    cur2[0], cur2[1] = cur2[1], cur2[0]\\n                    for pair in rest:\\n                        if cur2[0] <= pair[0] and cur2[1] <= pair[1]:\\n                            res = cur[0] * cur[1] + cur2[0] * cur2[1]\\n                            ans = max(ans, res)\\n\\nprint(ans)\", \"n, A, B = map(int, input().split())\\nl = []\\nfor i in range(n):\\n    x, y = map(int, input().split())\\n    l.append((x, y))\\n\\ndef checkList(a, b):\\n    return (a <= A and  b <= B) or (b <= A and a <= B)\\n\\ndef checkPear(ax, ay, bx, by):\\n    return (checkList(ax + bx, max(ay, by)) or\\n            checkList(ax + by, max(ay, bx)) or\\n            checkList(ay + by, max(ax, bx)) or\\n            checkList(ay + bx, max(ax, by))\\n    )\\nmaxs = 0\\n\\nfor i in range(n-1):\\n    for j in range(i+1, n):\\n        if checkPear(*l[i],*l[j]):\\n            if l[i][0]*l[i][1] + l[j][0]*l[j][1] > maxs:\\n                maxs = l[i][0]*l[i][1] + l[j][0]*l[j][1]\\n\\nprint(maxs)\", \"import sys, math\\n\\nn, a, b = map(int, input().split())\\nx=[0 for i in range(n)]\\ny=[0 for i in range(n)]\\n\\nfor i in range(n):\\n    u,v = map(int, input().split())\\n    x[i]=u\\n    y[i]=v\\n\\nm=0\\nfor i in range(n):\\n    for j in range (n):\\n        if i!=j:\\n            if (x[i]+x[j]<=a and max(y[i],y[j])<=b) or (x[i]+y[j]<=a and max(y[i],x[j])<=b) or (y[i]+x[j]<=a and max(x[i],y[j])<=b) or (y[i]+y[j]<=a and max(x[i],x[j])<=b) or (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (x[i] + y[j] <= b and max(y[i], x[j]) <= a) or (y[i] + x[j] <= b and max(x[i], y[j]) <= a) or (y[i] + y[j] <= b and max(x[i], x[j]) <= a):\\n                if m<x[i]*y[i]+x[j]*y[j]: m=x[i]*y[i]+x[j]*y[j]\\nprint(m)\", \"n, a, b = list(map(int, input().split(' ')))\\nseals = []\\nfor x in range(n):\\n    seals.append(list(map(int, input().split(' '))))\\nmaxt = 0\\nls = [a, b]\\ndef condition(x, y):\\n    for i in [0, 1]:\\n        for j in [0, 1]:\\n            for k in [0, 1]:\\n                if x[i]+y[j] <= ls[k] and x[1-i] <= ls[1-k] and y[1-j] <= ls[1-k]:\\n                    return True\\n    return False\\nfor x in seals:\\n    for y in seals:\\n        if x is not y and condition(x, y):\\n            total = x[0]*x[1] + y[0]*y[1]\\n            maxt = max(maxt, total)\\nprint(maxt)\\n\", \"n,w,h=list(map(int,input().split()))\\n\\ndef chk(w1,h1,w2,h2):\\n    if w1<=w and h1<=h:\\n        if w-w1>=w2 and h>=h2 or w-w1>=h2 and h>=w2 or w>=w2 and h-h1>=h2 or w>=h2 and h-h1>=w2:\\n            return True\\n    if h1<=w and w1<=h:\\n        if w-h1>=w2 and h>=h2 or w-h1>=h2 and h>=w2 or w>=w2 and h-w1>=h2 or w>=h2 and h-w1>=w2:\\n            return True\\n    return False\\n    \\n\\n\\na,ans=[],0\\nfor i in range(n):\\n    x,y=list(map(int, input().split()))\\n    a.append([x,y])\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        if a[i][0]*a[i][1]+a[j][1]*a[j][0]>ans and chk(a[i][0],a[i][1],a[j][0],a[j][1]):\\n            ans=a[i][0]*a[i][1]+a[j][1]*a[j][0]\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2 2\\n1 2\\n2 1\\n\",\n    \"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\\n\",\n    \"3 10 10\\n6 6\\n7 7\\n20 5\\n\",\n    \"2 1 1\\n1 1\\n1 1\\n\",\n    \"2 1 2\\n1 1\\n1 1\\n\",\n    \"2 100 100\\n100 100\\n1 1\\n\",\n    \"2 100 100\\n50 100\\n100 50\\n\",\n    \"2 100 100\\n100 100\\n87 72\\n\",\n    \"5 100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n\",\n    \"15 50 50\\n9 36\\n28 14\\n77 74\\n35 2\\n20 32\\n83 85\\n47 3\\n41 50\\n21 7\\n38 46\\n17 6\\n79 90\\n91 83\\n9 33\\n24 11\\n\",\n    \"15 100 100\\n100 100\\n100 100\\n100 100\\n42 58\\n80 22\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n48 42\\n100 100\\n100 100\\n100 100\\n100 100\\n\",\n    \"30 100 100\\n60 34\\n29 82\\n89 77\\n39 1\\n100 100\\n82 12\\n57 87\\n93 43\\n78 50\\n38 55\\n37 9\\n67 5\\n100 100\\n100 100\\n82 47\\n3 71\\n100 100\\n19 26\\n25 94\\n89 5\\n100 100\\n32 1\\n100 100\\n34 3\\n40 99\\n100 100\\n36 12\\n100 100\\n100 100\\n100 100\\n\",\n    \"3 100 1\\n1 50\\n1 60\\n1 30\\n\",\n    \"3 1 60\\n1 40\\n2 2\\n20 1\\n\",\n    \"4 1 100\\n1 25\\n25 1\\n1 25\\n2 100\\n\",\n    \"1 100 50\\n4 20\\n\",\n    \"2 2 4\\n3 1\\n2 2\\n\",\n    \"2 2 4\\n2 3\\n2 1\\n\",\n    \"2 4 2\\n1 2\\n2 3\\n\",\n    \"2 1 4\\n1 2\\n1 2\\n\",\n    \"2 4 5\\n2 4\\n4 3\\n\",\n    \"2 1 4\\n1 1\\n3 3\\n\",\n    \"6 9 5\\n4 5\\n6 2\\n1 4\\n5 6\\n3 7\\n6 5\\n\",\n    \"6 8 5\\n4 1\\n3 3\\n5 3\\n6 7\\n2 2\\n5 4\\n\",\n    \"6 7 5\\n6 4\\n5 7\\n4 7\\n5 4\\n1 1\\n3 6\\n\",\n    \"6 9 7\\n1 2\\n1 5\\n4 3\\n4 7\\n3 5\\n6 7\\n\",\n    \"6 5 9\\n2 3\\n7 4\\n1 5\\n1 7\\n2 5\\n7 1\\n\",\n    \"2 4 2\\n2 2\\n1 3\\n\",\n    \"2 3 2\\n3 2\\n1 1\\n\",\n    \"6 7 5\\n6 6\\n4 7\\n6 1\\n4 1\\n4 6\\n1 5\\n\",\n    \"2 2 3\\n1 2\\n2 3\\n\",\n    \"2 2 2\\n2 1\\n1 1\\n\",\n    \"5 9 7\\n6 7\\n4 5\\n2 7\\n4 2\\n5 8\\n\",\n    \"2 11 51\\n1 10\\n11 50\\n\",\n    \"5 9 7\\n3 8\\n7 6\\n4 1\\n5 8\\n7 8\\n\",\n    \"2 4 6\\n4 4\\n4 2\\n\",\n    \"5 9 7\\n1 6\\n7 9\\n1 5\\n1 5\\n7 3\\n\",\n    \"5 9 7\\n5 2\\n6 9\\n1 4\\n7 7\\n6 4\\n\",\n    \"5 9 7\\n6 7\\n4 1\\n1 2\\n4 7\\n5 6\\n\",\n    \"5 9 7\\n2 8\\n3 8\\n2 8\\n4 4\\n2 2\\n\",\n    \"2 2 3\\n1 4\\n2 1\\n\",\n    \"5 9 7\\n4 7\\n3 9\\n5 4\\n3 4\\n3 8\\n\",\n    \"5 9 7\\n7 4\\n6 9\\n4 3\\n7 5\\n2 3\\n\",\n    \"2 2 3\\n1 2\\n2 2\\n\",\n    \"2 4 3\\n2 1\\n1 2\\n\",\n    \"2 4 6\\n4 2\\n4 4\\n\",\n    \"2 1 4\\n3 2\\n3 3\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"56\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"10000\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2374\\n\",\n    \"4452\\n\",\n    \"8958\\n\",\n    \"90\\n\",\n    \"60\\n\",\n    \"50\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"34\\n\",\n    \"35\\n\",\n    \"29\\n\",\n    \"57\\n\",\n    \"38\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"34\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"56\\n\",\n    \"560\\n\",\n    \"60\\n\",\n    \"24\\n\",\n    \"27\\n\",\n    \"59\\n\",\n    \"58\\n\",\n    \"40\\n\",\n    \"0\\n\",\n    \"55\\n\",\n    \"63\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"24\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/837/C",
  "starter_code": ""
}