{
  "task_id": "APPS/348",
  "problem_id": 348,
  "prompt": "Alice has got addicted to a game called Sirtet recently.\n\nIn Sirtet, player is given an $n \\times m$ grid. Initially $a_{i,j}$ cubes are stacked up in the cell $(i,j)$. Two cells are called adjacent if they share a side. Player can perform the following operations:   stack up one cube in two adjacent cells;  stack up two cubes in one cell. \n\nCubes mentioned above are identical in height.\n\nHere is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation. [Image] \n\nPlayer's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. \n\nAlice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that   $L \\le a_{i,j} \\le R$ for all $1 \\le i \\le n$, $1 \\le j \\le m$;  player can reach the goal using above operations. \n\nPlease help Alice with it. Notice that the answer might be large, please output the desired value modulo $998,244,353$.\n\n\n-----Input-----\n\nThe only line contains four integers $n$, $m$, $L$ and $R$ ($1\\le n,m,L,R \\le 10^9$, $L \\le R$, $n \\cdot m \\ge 2$).\n\n\n-----Output-----\n\nOutput one integer, representing the desired answer modulo $998,244,353$.\n\n\n-----Examples-----\nInput\n2 2 1 1\n\nOutput\n1\n\nInput\n1 2 1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample, the only initial grid that satisfies the requirements is $a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1$. Thus the answer should be $1$.\n\nIn the second sample, initial grids that satisfy the requirements are $a_{1,1}=a_{1,2}=1$ and $a_{1,1}=a_{1,2}=2$. Thus the answer should be $2$.",
  "solutions": "[\"n,m,L,R = list(map(int,input().split()))\\np = 998244353*2\\npp = p//2\\n#liczba pokryc n x m ze jest parzyscie wiele zer albo parzyscie wiele jedynek\\ndef pow(a,w):\\n\\twyn = 1\\n\\tmn = a\\n\\twhile w > 0:\\n\\t\\tif w%2 == 1:\\n\\t\\t\\twyn = (wyn * mn)%p\\n\\t\\tmn = (mn*mn)%p\\n\\t\\tw //= 2\\n\\treturn wyn\\ndupsko = pow((R-L+1), m*n)\\nif L == R:\\n\\tprint(1)  \\nelse:\\n\\tif (m*n)%2 == 1:\\n\\t\\tprint(dupsko%pp)\\n\\telse:\\n\\t\\tprint((dupsko - dupsko//2)%pp)\\n\", \"n, m, L, R = map(int, input().split())\\nmod = 998244353\\nif n*m % 2:\\n  print(pow(R-L+1, n*m, mod))\\nelse:\\n  print((pow(R-L+1, n*m, mod) + 1 - (R-L) % 2) * pow(2, mod-2, mod) % mod)\", \"import sys\\nreadline = sys.stdin.readline\\n\\ndef mat_dot(A, B, mod):\\n    assert len(A[0]) == len(B), 'invalid_size'\\n    \\n    L = len(A)\\n    M = len(A[0])\\n    N = len(B[0])\\n    \\n    res = [[0]*N for _ in range(L)]\\n    \\n    for i in range(L):\\n        for j in range(N):\\n            a = 0\\n            for k in range(M):\\n                a = (a+A[i][k]*B[k][j]) % mod\\n            res[i][j] = a\\n            \\n    return res\\n\\ndef mat_pow(A, x, mod):\\n    N = len(A)\\n    res = [[0]*N for _ in range(N)]\\n    for i in range(N):\\n        res[i][i] = 1\\n    for i in range(x.bit_length()):\\n        if 2**i & x:\\n            res = mat_dot(res, A, mod)\\n        A = mat_dot(A, A, mod)\\n    return res\\n\\nMOD = 998244353 \\nN, M, L, R = map(int, readline().split())\\nR -= L\\nif N&1 and M&1:\\n    ans = pow(R+1, N*M, MOD)\\nelse:\\n    Bl = N*M//2\\n    even = (R+1)//2\\n    odd = R+1 - even\\n    Mat = [[even, odd], [odd, even]]\\n    xy = mat_dot(mat_pow(Mat, Bl, MOD), [[1], [0]], MOD)\\n    x, y = xy[0][0], xy[1][0]\\n    ans = (x*x + y*y) % MOD\\n    \\nprint(ans)\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,m,L,R=list(map(int,input().split()))\\nmod=998244353\\n\\nANS=pow(R-L+1,n*m,mod)\\nif n*m%2==1:\\n    print(ANS)\\n\\nelif (R-L+1)%2==0:\\n    print(ANS*pow(2,mod-2,mod)%mod)\\nelse:\\n    print((ANS+1)*pow(2,mod-2,mod)%mod)\\n    \\n    \\n\\n\\n    \\n\", \"MOD = 998244353\\nn, m, l, r = map(int, input().split())\\nk = r-l\\nif (n*m) % 2 == 1:\\n\\tprint(pow(k+1, n*m, MOD))\\nelif k%2 == 1:\\n\\tprint((pow(k+1, n*m, MOD) * 499122177) % MOD)\\nelse:\\n\\tprint(((pow(k+1, n*m, MOD) + 1) * 499122177) % MOD)\", \"n, m, L, R = list(map(int, input().split()))\\nmod = 998244353\\nif n * m % 2 == 1:\\n    print(pow(R - L + 1, n * m, mod))\\nelse:\\n    val = pow(R - L + 1, n * m, mod)\\n    if pow(R - L + 1, n * m, 2) == 0:\\n        print(val * pow(2, mod - 2, mod) % mod)\\n    else:\\n        print(((val - 1) * pow(2, mod - 2, mod) + 1) % mod)\\n\", \"MOD = 998244353\\n\\nn, m, L, R = map(int, input().split())\\n\\ndx = R - L + 1\\n\\nif n * m % 2:\\n\\tprint(pow(dx, n * m, MOD))\\n\\nelse:\\n\\tprint((pow(dx, n * m, MOD) + dx % 2) * pow(2, MOD - 2, MOD) % MOD)\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n\\n    N, M, L, R = list(map(int, input().split()))\\n    mod = 998244353\\n\\n    ans = pow((R-L+1)%mod, N*M, mod)\\n    if N&1 and M&1:\\n        print(ans)\\n    else:\\n        if (R-L+1)&1:\\n            print(((ans + 1) * pow(2, mod - 2, mod)) % mod)\\n        else:\\n            print((ans * pow(2, mod-2, mod))%mod)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\ninput=lambda: sys.stdin.readline().rstrip()\\nn,m,l,r=list(map(int,input().split()))\\nmod=998244353\\nif (n*m)%2==1:\\n  b,w=(n*m)//2+1,(n*m)//2\\nelse:\\n  b,w=(n*m)//2,(n*m)//2\\n\\nif (r-l+1)%2==0:\\n  e,o=(r-l+1)//2,(r-l+1)//2\\nelse:\\n  if l%2==1:\\n    e,o=(r-l+1)//2,(r-l+1)//2+1\\n  else:\\n    e,o=(r-l+1)//2+1,(r-l+1)//2\\n\\nbe=(pow(e+o,b,mod)+pow(e-o,b,mod))*pow(2,mod-2,mod)\\nbo=(pow(e+o,b,mod)-pow(e-o,b,mod))*pow(2,mod-2,mod)\\nwe=(pow(e+o,w,mod)+pow(e-o,w,mod))*pow(2,mod-2,mod)\\nwo=(pow(e+o,w,mod)-pow(e-o,w,mod))*pow(2,mod-2,mod)\\n\\nif (n*m)%2==1:\\n  print(pow(r-l+1,n*m,mod))\\nelse:\\n  print((be*we+bo*wo)%mod)\\n\\n\", \"mod = 998244353\\nn,m,l,r = list(map(int,input().split()))\\n\\nif (n * m) % 2 == 1:\\n    res = pow(r - l + 1, n * m, mod)\\n    print(res)\\n    return\\n\\ndef f(p):\\n    return p // 2\\n\\ndef g(p):\\n    return (p + 1) // 2\\n\\n# \\u5076\\u6570\\neven = f(r) - f(l - 1)\\nodd = g(r) - g(l - 1)\\n\\nres = (pow(even - odd, n * m, mod) + pow(even + odd, n * m, mod)) * pow(2, mod - 2, mod)\\nres %= mod\\nprint(res)\\n\", \"from bisect import bisect_left, bisect_right\\nfrom sys import stdin, stdout, setrecursionlimit\\nfrom collections import Counter\\ninput = lambda: stdin.readline().strip()\\nprint = stdout.write\\n\\nmod = 998244353\\n\\nn, m, L, R = map(int, input().split())\\n# odd\\nif (n*m)%2:\\n    print(str(pow(R-L+1, n*m, mod))+'\\\\n')\\nelse:\\n    nm = n*m\\n    # both odd\\n    if L%2 and R%2:\\n        even = (R-L)//2\\n    # R even\\n    elif L%2 and not R%2:\\n        even = (R-L+1)//2\\n    # L even\\n    elif not L%2 and R%2:\\n        even = (R-L+1)//2\\n    # both even\\n    else:\\n        even = (R-L)//2+1\\n    odd = (R-L+1)-even\\n    N = (pow(odd+even, nm, mod)+pow(abs(odd-even), nm, mod))%mod\\n    print(str((pow(2, mod-2, mod)*N)%mod)+'\\\\n')\\n\", \"n,m,L,R=map(int,input().split())\\nk=R-L+1\\nif (n*m)%2:\\n    print(pow(k,n*m,998244353))\\nelse:\\n    r=pow(k,n*m,998244353)\\n    if k%2:\\n        if r%2:print(((r+1)//2)%998244353)\\n        else:print(((r+1+998244353)//2)%998244353)\\n    else:\\n        if r%2==0:print(r//2)\\n        else:print((r+998244353)//2)\", \"#!/usr/bin/env python3\\nimport sys\\ninput = sys.stdin.readline\\nMOD = 998244353\\n\\nn, m, l, r = map(int, input().split())\\nh = r - l + 1\\n\\ns = n * m\\nif s % 2 == 1:\\n    ans = pow(h, s, MOD)\\n    print(ans)\\nelse:\\n    ans = pow(h, s, MOD)\\n    if h % 2 == 1:\\n        ans += 1\\n    ans *= pow(2, MOD-2, MOD)\\n    ans %= MOD\\n    print(ans)\", \"def expo(a,n):\\n    #print(a)\\n    #print(n)\\n    if n>0:\\n        ha = expo(a,n//2)\\n        if n%2==1:\\n            return (ha*ha*a)%MOD\\n        else:\\n            return (ha*ha)%MOD\\n    else:\\n        return 1\\nMOD = 998244353\\ndef f():\\n    n,m,L,R = list(map(int,input().split(\\\" \\\")))\\n    height = R-L+1\\n    area = n*m\\n    ans = expo(height,area)\\n    #print(ans)\\n    if(area%2==1):\\n        print(ans)\\n    else:\\n        if(height%2==0):\\n            if ans%2==1:\\n                ans+=MOD\\n            ans//=2\\n            print(ans%MOD)\\n        else:\\n            if ans%2==0:\\n                ans+=MOD\\n            ans = (ans+1)//2\\n            print(ans%MOD)\\nf()\\n\", \"mod = 119 << 23 | 1\\nn, m, l, r = list(map(int, input().split()))\\na = (r + 1) // 2 - l // 2\\nb = r - l + 1 - a\\nif a > b: a, b = b, a\\nt = n * m\\nif t % 2:\\n    print(pow(a + b, t, mod))\\nelif a == b:\\n    print(pow(a, t, mod) * pow(2, t - 1, mod) % mod)\\nelse:\\n    print(pow(2, mod - 2, mod) * (1 + pow(2 * a + 1, t, mod)) % mod)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2 1 1\\n\",\n    \"1 2 1 2\\n\",\n    \"485 117 386829368 748204956\\n\",\n    \"564 558 305171115 960941497\\n\",\n    \"692 210 44175861 843331069\\n\",\n    \"741 806 424647372 965259389\\n\",\n    \"461 650 18427925 104278996\\n\",\n    \"589 790 462465375 766499149\\n\",\n    \"13 635 761278633 941090619\\n\",\n    \"140 713 711390561 727285861\\n\",\n    \"494587372 852064625 134519483 167992226\\n\",\n    \"672670796 425613469 728300037 940234946\\n\",\n    \"850754220 853938121 172337487 490664825\\n\",\n    \"28837644 722454262 471150744 905552093\\n\",\n    \"911953772 296003106 210155490 889555498\\n\",\n    \"795069900 869551950 803936044 964554424\\n\",\n    \"268120620 443100795 102749301 604856694\\n\",\n    \"151236748 16649639 841754047 855153000\\n\",\n    \"329320172 739941588 435534601 986184053\\n\",\n    \"1000000000 1 1000000000 1000000000\\n\",\n    \"1 1000000000 1 1000000000\\n\",\n    \"407070359 971940670 264302148 270591105\\n\",\n    \"290186487 840456810 858082702 987072033\\n\",\n    \"763237207 414005655 302120151 421405724\\n\",\n    \"646353335 282521795 600933409 772270276\\n\",\n    \"824436759 415879151 194713963 293553316\\n\",\n    \"707552887 989427996 933718708 955125306\\n\",\n    \"885636311 857944136 232531966 493119835\\n\",\n    \"63719735 431492981 971536712 994663491\\n\",\n    \"946835863 300009121 565317265 947272048\\n\",\n    \"124919287 578590669 9354715 32571540\\n\",\n    \"202669473 255300152 987865366 994537507\\n\",\n    \"2 2 1 998244353\\n\",\n    \"2 3 1 998244353\\n\",\n    \"3 3 1 998244353\\n\",\n    \"1000000000 1000000000 1 998244353\\n\",\n    \"999999999 999999999 1 998244353\\n\",\n    \"999999999 1000000000 1755648 1000000000\\n\",\n    \"1 2 1 86583718\\n\",\n    \"1 2 1 911660635\\n\",\n    \"2 2 2 4\\n\",\n    \"2 2 2 5\\n\",\n    \"2 2 3 4\\n\",\n    \"2 2 3 5\\n\",\n    \"2 3 2 4\\n\",\n    \"2 3 2 5\\n\",\n    \"2 3 3 4\\n\",\n    \"2 3 3 5\\n\",\n    \"3 2 2 4\\n\",\n    \"3 2 2 5\\n\",\n    \"3 2 3 4\\n\",\n    \"3 2 3 5\\n\",\n    \"3 3 2 4\\n\",\n    \"3 3 2 5\\n\",\n    \"3 3 3 4\\n\",\n    \"3 3 3 5\\n\",\n    \"998244352 2 1 998244353\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"2\\n\",\n    \"735420370\\n\",\n    \"880111542\\n\",\n    \"714028205\\n\",\n    \"861647194\\n\",\n    \"936348652\\n\",\n    \"374887989\\n\",\n    \"893955177\\n\",\n    \"641355762\\n\",\n    \"552905694\\n\",\n    \"779704132\\n\",\n    \"237240423\\n\",\n    \"740846915\\n\",\n    \"225799480\\n\",\n    \"884379548\\n\",\n    \"834319192\\n\",\n    \"108988868\\n\",\n    \"425887732\\n\",\n    \"1\\n\",\n    \"285141888\\n\",\n    \"992759231\\n\",\n    \"366829057\\n\",\n    \"193545831\\n\",\n    \"13680108\\n\",\n    \"453443939\\n\",\n    \"355610620\\n\",\n    \"779245677\\n\",\n    \"97582142\\n\",\n    \"337235143\\n\",\n    \"263200129\\n\",\n    \"926661352\\n\",\n    \"499122177\\n\",\n    \"499122177\\n\",\n    \"0\\n\",\n    \"499122177\\n\",\n    \"0\\n\",\n    \"499122177\\n\",\n    \"499122176\\n\",\n    \"0\\n\",\n    \"41\\n\",\n    \"128\\n\",\n    \"8\\n\",\n    \"41\\n\",\n    \"365\\n\",\n    \"2048\\n\",\n    \"32\\n\",\n    \"365\\n\",\n    \"365\\n\",\n    \"2048\\n\",\n    \"32\\n\",\n    \"365\\n\",\n    \"19683\\n\",\n    \"262144\\n\",\n    \"512\\n\",\n    \"19683\\n\",\n    \"499122177\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1332/E",
  "starter_code": ""
}