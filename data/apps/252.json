{
  "task_id": "APPS/252",
  "problem_id": 252,
  "prompt": "Alice and Bob are playing yet another card game. This time the rules are the following. There are $n$ cards lying in a row in front of them. The $i$-th card has value $a_i$. \n\nFirst, Alice chooses a non-empty consecutive segment of cards $[l; r]$ ($l \\le r$). After that Bob removes a single card $j$ from that segment $(l \\le j \\le r)$. The score of the game is the total value of the remaining cards on the segment $(a_l + a_{l + 1} + \\dots + a_{j - 1} + a_{j + 1} + \\dots + a_{r - 1} + a_r)$. In particular, if Alice chooses a segment with just one element, then the score after Bob removes the only card is $0$.\n\nAlice wants to make the score as big as possible. Bob takes such a card that the score is as small as possible.\n\nWhat segment should Alice choose so that the score is maximum possible? Output the maximum score.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of cards.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-30 \\le a_i \\le 30$) \u2014 the values on the cards.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the final score of the game.\n\n\n-----Examples-----\nInput\n5\n5 -2 10 -1 4\n\nOutput\n6\n\nInput\n8\n5 2 5 3 -30 -30 6 9\n\nOutput\n10\n\nInput\n3\n-10 6 -15\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Alice chooses a segment $[1;5]$ \u2014 the entire row of cards. Bob removes card $3$ with the value $10$ from the segment. Thus, the final score is $5 + (-2) + (-1) + 4 = 6$.\n\nIn the second example Alice chooses a segment $[1;4]$, so that Bob removes either card $1$ or $3$ with the value $5$, making the answer $5 + 2 + 3 = 10$.\n\nIn the third example Alice can choose any of the segments of length $1$: $[1;1]$, $[2;2]$ or $[3;3]$. Bob removes the only card, so the score is $0$. If Alice chooses some other segment then the answer will be less than $0$.",
  "solutions": "[\"n = int(input())\\nl = list(map(int,input().split()))\\n\\ncurr = 0\\nbest = 0\\nprevs = [0] * 31\\nfor v in l:\\n    curr += v\\n    if v >= 0:\\n        for i in range(0, v):\\n            prevs[i] = curr\\n        for i in range(v, 31):\\n            best = max(curr - prevs[i] - i, best)\\n    else:\\n        for i in range(31):\\n            prevs[i] = min(prevs[i], curr)\\nprint(best)\\n\", \"from bisect import bisect_left as lower_bound, bisect_right as upper_bound\\nfrom sys import stdin, stdout\\nfrom collections import defaultdict\\n\\nN = 10**5 + 7\\n\\nminn = [0 for _ in range(2*N)]\\nmaxx = [0 for _ in range(2*N)]\\n\\ndef build(p, n):\\n    for i in range(n): \\n        maxx[n+i] = p[i]\\n        minn[n+i] = p[i]\\n\\n    for i in range(n-1, 0, -1):\\n        maxx[i] = max(maxx[i<<1], maxx[i<<1|1])\\n        minn[i] = min(minn[i<<1], minn[i<<1|1])\\n\\ndef query(l, r, n):\\n    l += n\\n    r += n\\n\\n    retminn, retmaxx = float('inf'), -float('inf')\\n\\n    while l < r:\\n        if l&1:\\n            retminn = min(retminn, minn[l])\\n            retmaxx = max(retmaxx, maxx[l])\\n            l += 1\\n\\n        if r&1:\\n            r -= 1\\n            retminn = min(retminn, minn[r])\\n            retmaxx = max(retmaxx, maxx[r])\\n\\n        l >>= 1\\n        r >>= 1\\n\\n    return retminn, retmaxx\\n\\n\\ndef main():\\n    n = int(input())\\n    a = list(map(int, input().strip().split()))\\n\\n    left = [-1]*n\\n    right = [n]*n\\n\\n    p = [a[i] for i in range(n)]\\n    for i in range(1, n): p[i] += p[i-1]\\n\\n    build(p, n)\\n\\n    st = [0]\\n    for i in range(1, n):\\n        while st and a[st[-1]] <= a[i]: st.pop()\\n\\n        if st: left[i] = st[-1]\\n        st.append(i)\\n\\n    st = [n-1]\\n    for i in range(n-2, -1, -1):\\n        while st and a[st[-1]] < a[i]: st.pop()\\n\\n        if st: right[i] = st[-1]\\n        st.append(i)\\n\\n    #print(left, right, p)\\n    #\\n    \\n    if max(a) <= 0:\\n        print(0)\\n        return None\\n\\n    ret = -float('inf')\\n\\n    for i in range(n):\\n        l, r = left[i], right[i]\\n\\n        _, rmaxx = query(i, r, n)\\n        lminn, _ = query(max(0, l), i, n)\\n\\n        if l < 0: lminn = min(lminn, 0)\\n\\n        s = rmaxx - lminn\\n        #print(i, s, a[i], l, r)\\n\\n        ret = max(ret, s-a[i])\\n\\n    print(ret)\\n\\n\\n\\ndef __starting_point(): main()\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n5 -2 10 -1 4\\n\",\n    \"8\\n5 2 5 3 -30 -30 6 9\\n\",\n    \"3\\n-10 6 -15\\n\",\n    \"1\\n6\\n\",\n    \"5\\n0 5 -4 3 -1\\n\",\n    \"15\\n1 -26 -6 26 7 10 -2 -4 -6 14 -9 25 9 -12 -28\\n\",\n    \"11\\n3 0 1 -2 5 -5 -1 0 3 2 2\\n\",\n    \"7\\n25 -13 17 -23 12 12 9\\n\",\n    \"8\\n4 -10 13 -13 2 2 -11 6\\n\",\n    \"7\\n30 -20 5 1 3 -20 30\\n\",\n    \"7\\n5 -4 1 1 1 -4 5\\n\",\n    \"10\\n-5 28 -18 -10 9 -2 11 -6 -19 30\\n\",\n    \"7\\n30 -25 0 6 9 -2 10\\n\",\n    \"6\\n8 -7 7 -6 5 5\\n\",\n    \"2\\n1 1\\n\",\n    \"4\\n1 1 -4 10\\n\",\n    \"5\\n17 -16 12 -11 15\\n\",\n    \"7\\n15 -14 10 10 10 -14 15\\n\",\n    \"7\\n30 -29 10 10 10 -29 30\\n\",\n    \"4\\n2 2 -3 4\\n\",\n    \"7\\n25 -17 13 13 -25 25 -24\\n\",\n    \"5\\n30 -29 4 -3 4\\n\",\n    \"6\\n10 -8 3 3 -8 10\\n\",\n    \"9\\n11 -5 -5 1 2 3 -5 -5 11\\n\",\n    \"7\\n5 -4 3 -1 3 -4 4\\n\",\n    \"10\\n-1 2 0 -1 2 -1 4 3 -5 1\\n\",\n    \"6\\n30 -29 5 5 -29 30\\n\",\n    \"10\\n4 -2 -2 -2 2 0 1 0 -4 -1\\n\",\n    \"10\\n3 -3 2 1 -4 -2 3 -2 -3 0\\n\",\n    \"10\\n4 -3 1 -2 1 1 0 -4 4 -2\\n\",\n    \"17\\n15 -13 7 8 8 1 -19 12 8 -23 -4 16 -13 -28 10 -30 -14\\n\",\n    \"10\\n-5 -5 -3 1 -2 2 0 2 -3 4\\n\",\n    \"35\\n-23 -22 23 4 -22 29 -4 -6 -28 18 -5 21 -7 -8 -11 -7 30 -25 -1 12 19 5 -8 12 -1 10 -24 -19 24 -17 -7 24 20 -22 16\\n\",\n    \"10\\n4 -2 1 0 1 -5 -2 1 0 -5\\n\",\n    \"10\\n1 -4 -4 4 -2 -3 3 0 -2 3\\n\",\n    \"10\\n-3 4 -4 1 1 -4 -5 3 -4 -2\\n\",\n    \"10\\n4 -4 3 -2 3 -4 -2 0 1 0\\n\",\n    \"10\\n-2 -3 -1 4 -3 2 0 1 -5 4\\n\",\n    \"11\\n3 -2 1 1 1 1 1 1 1 -3 4\\n\",\n    \"10\\n4 -5 0 4 0 0 -3 1 1 -4\\n\",\n    \"10\\n0 -1 4 -2 3 -2 -1 -5 -5 2\\n\",\n    \"10\\n-4 -5 4 -3 2 -2 2 1 -1 0\\n\",\n    \"10\\n-4 4 0 -2 3 0 1 2 3 -4\\n\",\n    \"10\\n1 0 -4 3 -5 3 -1 2 2 -5\\n\",\n    \"5\\n30 -29 10 -1 10\\n\",\n    \"10\\n-5 2 -3 -3 -4 3 3 0 2 4\\n\",\n    \"10\\n2 -4 -2 3 1 1 -2 -1 -3 4\\n\",\n    \"11\\n-11 -7 -2 -24 30 -26 24 9 -8 -9 23\\n\",\n    \"31\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -29 30\\n\",\n    \"6\\n30 -29 10 10 -29 30\\n\",\n    \"6\\n30 -22 6 7 -22 30\\n\",\n    \"10\\n3 0 0 -4 3 1 -2 -1 -1 4\\n\",\n    \"10\\n0 4 4 1 -3 4 2 1 4 -1\\n\",\n    \"6\\n5 -4 2 -1 2 -2\\n\",\n    \"4\\n1 -10 1 10\\n\",\n    \"7\\n5 -5 3 4 3 -5 5\\n\",\n    \"5\\n10 -3 -5 3 5\\n\",\n    \"4\\n2 3 -10 11\\n\",\n    \"10\\n16 -15 13 -1 10 -2 -20 26 5 -30\\n\",\n    \"10\\n27 -17 15 -22 18 17 -6 2 16 -14\\n\",\n    \"9\\n7 2 -1 1 1 -10 6 -1 6\\n\",\n    \"10\\n-9 -6 -1 9 -2 0 0 -1 5 0\\n\",\n    \"131\\n30 -29 29 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 28 -28 27 -26 27\\n\",\n    \"2\\n3 9\\n\",\n    \"10\\n8 9 -10 -10 -4 -3 5 9 -9 9\\n\",\n    \"10\\n-2 -8 5 4 -1 -6 -9 6 1 -6\\n\",\n    \"24\\n-8 -6 6 -11 -15 -7 10 -19 -6 21 14 -4 -21 -10 12 17 1 -1 5 19 2 0 -4 -23\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"44\\n\",\n    \"4\\n\",\n    \"21\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"13\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"20\\n\",\n    \"20\\n\",\n    \"2\\n\",\n    \"13\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"16\\n\",\n    \"2\\n\",\n    \"30\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"15\\n\",\n    \"28\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"13\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"9\\n\",\n    \"29\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"36\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1359/D",
  "starter_code": ""
}