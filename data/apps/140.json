{
  "task_id": "APPS/140",
  "problem_id": 140,
  "prompt": "The mayor of the Central Town wants to modernize Central Street, represented in this problem by the $(Ox)$ axis.\n\nOn this street, there are $n$ antennas, numbered from $1$ to $n$. The $i$-th antenna lies on the position $x_i$ and has an initial scope of $s_i$: it covers all integer positions inside the interval $[x_i - s_i; x_i + s_i]$.\n\nIt is possible to increment the scope of any antenna by $1$, this operation costs $1$ coin. We can do this operation as much as we want (multiple times on the same antenna if we want).\n\nTo modernize the street, we need to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna. Note that it is authorized to cover positions outside $[1; m]$, even if it's not required.\n\nWhat is the minimum amount of coins needed to achieve this modernization?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 80$ and $n \\le m \\le 100\\ 000$).\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $s_i$ ($1 \\le x_i \\le m$ and $0 \\le s_i \\le m$).\n\nOn each position, there is at most one antenna (values $x_i$ are pairwise distinct).\n\n\n-----Output-----\n\nYou have to output a single integer: the minimum amount of coins required to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna.\n\n\n-----Examples-----\nInput\n3 595\n43 2\n300 4\n554 10\n\nOutput\n281\n\nInput\n1 1\n1 1\n\nOutput\n0\n\nInput\n2 50\n20 0\n3 1\n\nOutput\n30\n\nInput\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n\nOutput\n26\n\n\n\n-----Note-----\n\nIn the first example, here is a possible strategy:\n\n  Increase the scope of the first antenna by $40$, so that it becomes $2 + 40 = 42$. This antenna will cover interval $[43 - 42; 43 + 42]$ which is $[1; 85]$  Increase the scope of the second antenna by $210$, so that it becomes $4 + 210 = 214$. This antenna will cover interval $[300 - 214; 300 + 214]$, which is $[86; 514]$  Increase the scope of the third antenna by $31$, so that it becomes $10 + 31 = 41$. This antenna will cover interval $[554 - 41; 554 + 41]$, which is $[513; 595]$ \n\nTotal cost is $40 + 210 + 31 = 281$. We can prove that it's the minimum cost required to make all positions from $1$ to $595$ covered by at least one antenna.\n\nNote that positions $513$ and $514$ are in this solution covered by two different antennas, but it's not important.\n\n\u2014\n\nIn the second example, the first antenna already covers an interval $[0; 2]$ so we have nothing to do.\n\nNote that the only position that we needed to cover was position $1$; positions $0$ and $2$ are covered, but it's not important.",
  "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn,m=list(map(int,input().split()))\\n\\nA=[]\\nCOVERED=[0]*(m+1)\\n\\nfor i in range(n):\\n    x,y=list(map(int,input().split()))\\n    A.append((x-y,x+y))\\n\\n    for j in range(max(0,x-y),min(m+1,x+y+1)):\\n        COVERED[j]=1\\n\\nif min(COVERED[1:])==1:\\n    print(0)\\n    return\\n\\nA.sort()\\n\\nDP=[m]*(m+2)\\nDP[1]=0\\n\\ncovind=1\\n\\nwhile COVERED[covind]==1:\\n    DP[covind]=0\\n    covind+=1\\nDP[covind]=0\\n\\nNEXT=[i+1 for i in range(m+1)]\\nfor j in range(m-1,-1,-1):\\n    if COVERED[j+1]==1:\\n        NEXT[j]=NEXT[j+1]\\n\\ndef nex(i):\\n    if i<=m:\\n        return NEXT[i]\\n    else:\\n        return m+1\\n\\n\\nfor i in range(1,m+1):\\n    if COVERED[i]==1:\\n        continue\\n\\n    for x,y in A:\\n        if x<i:\\n            continue\\n        DP[nex(y+(x-i))]=min(DP[i]+(x-i),DP[nex(y+(x-i))])\\n\\n#print(DP)\\nANS=DP[-1]\\nfor i in range(m,-1,-1):\\n    if DP[i]!=m+1:\\n        ANS=(min(ANS,DP[i]+(m+1-i)))\\n\\nprint(ANS)\\n\\n        \\n        \\n    \\n\", \"import sys\\nfrom operator import itemgetter\\ninput = sys.stdin.readline\\n\\n\\nn, m = map(int, input().split())\\ninfo = [list(map(int, input().split())) for i in range(n)]\\nINF = 10**9\\n\\n\\nnew_info = []\\nfor pos, width in info:\\n    tmp = [max(pos-width-1, 0), min(pos+width, m)]\\n    new_info.append(tmp)\\n\\npos = 0\\nnew_info = sorted(new_info, key = itemgetter(1))\\ndp = [[0]*(m+2) for i in range(n+1)]\\n\\nfor i in range(m+2):\\n    dp[0][i] = i\\n\\nfor i in range(n):\\n    begin, end = new_info[i]\\n    for j in range(m+2):\\n        if j <= end:\\n            dp[i+1][j] = min(dp[i][begin], dp[i][j])\\n        else:\\n            dp[i+1][j] = min((j - end) + dp[i][max(begin - (j-end), 0)], dp[i][j])\\n\\nprint(dp[n][m])    \", \"3\\n\\nimport os\\nimport sys\\n\\n\\ndef main():\\n    N, M = read_ints()\\n    A = [tuple(read_ints()) for _ in range(N)]\\n    print(solve(N, M, A))\\n\\n\\ndef solve(N, M, A):\\n    A.sort()\\n\\n    D = {0: 0}\\n    for x, s in A:\\n        #dprint(x, s)\\n        #dprint(D)\\n        d = D.copy()\\n        for x0, c in d.items():\\n            if x - s <= x0 + 1:\\n                nx = x + s\\n                #dprint('  ', nx, '=>', c, '(x0=', x0, 'c=', c, ')')\\n                if nx not in D:\\n                    D[nx] = c\\n                else:\\n                    D[nx] = min(D[nx], c)\\n            else:\\n                nc = c + (x - s - x0 - 1)\\n                nx = x + s + nc - c\\n                #dprint('  ', nx, '=>', nc, '(x0=', x0, 'c=', c, ')')\\n                if nx not in D:\\n                    D[nx] = nc\\n                else:\\n                    D[nx] = min(D[nx], nc)\\n        #dprint(D)\\n\\n    best = M * 2\\n    for x, c in D.items():\\n        if x == 0:\\n            continue\\n        if x < M:\\n            c += M - x\\n        best = min(best, c)\\n    return best\\n\\n\\n###############################################################################\\n\\nDEBUG = 'DEBUG' in os.environ\\n\\n\\ndef inp():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef read_int():\\n    return int(inp())\\n\\n\\ndef read_ints():\\n    return [int(e) for e in inp().split()]\\n\\n\\ndef dprint(*value, sep=' ', end='\\\\n'):\\n    if DEBUG:\\n        print(*value, sep=sep, end=end)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\nfrom operator import itemgetter\\nreadline = sys.stdin.readline\\nN, M = map(int, readline().split())\\n \\ninf = 10**9+7\\n\\n \\nXS = [(0, 0)] + [tuple(map(int, readline().split())) for _ in range(N)]\\nXS.sort(key = lambda x: x[0]-x[1])\\nx, s = XS[0]\\n\\ndp1 = [0] + [max(0, x-s-1, j-x-s) for j in range(1, M+2)]\\nfor x, s in XS[1:]:\\n    \\n    dp1n = dp1[:]\\n    \\n    dp1n[min(M, x+s)] = min(dp1n[min(M, x+s)], dp1[max(0, x-s-1)])\\n    for j in range(M):\\n        if x + s + j > M:\\n            break\\n        dp1n[x+s+j] = min(dp1n[x+s+j], j + dp1[max(0, x-s-1-j)])\\n   \\n    dp1 = dp1n[:]\\n    \\n    for i in range(M, -1, -1):\\n        dp1[i] = min(dp1[i], dp1[i+1])\\nprint(dp1[M]) \", \"import sys\\ninput = sys.stdin.readline\\n\\nn,m = map(int,input().split())\\ndg = 10**10\\n\\ns = [0]\\nt = [0]\\n\\ntank = []\\nfor _ in [0]*n:\\n    X,d = map(int,input().split())\\n    tank.append((X+d)*dg + X)\\ntank.sort()\\n\\nfor e in tank:\\n    X_d = e//dg\\n    X = e%dg\\n    d = X_d-X\\n    s.append(max(1,X_d-d*2))\\n    t.append(min(m,X_d))\\n\\n\\nn += 1\\n\\ndp = [[0]*(m+1) for i in range(2)]\\nfor j in range(1,t[0]+1):\\n    dp[0][j] = s[0]-1\\nfor j in range(t[0]+1,m+1):\\n    dp[0][j] = max(s[0]-1,j-t[0])\\n\\nfor i in range(1,n):\\n    for j in range(1,m+1):\\n        tmp = dp[(i+1)%2][j]\\n        if j <= t[i]:\\n            tmp = min(tmp,dp[(i+1)%2][s[i]-1])\\n        else:\\n            tmp = min(tmp,dp[(i+1)%2][max(0,s[i]+t[i]-j-1)]+j-t[i])\\n        dp[i%2][j] = tmp\\n\\nprint(dp[(n+1)%2][-1])\", \"# Antennas coverage\\n\\nimport sys\\nfrom bisect import bisect_right\\n\\n\\ndef upgrade_minCost(n, m, antennas):\\n    covered = [False] * (m + 1)\\n    intervals = []\\n    for x, s in antennas:\\n        L = max(1, x - s)\\n        R = min(m, x + s)\\n        intervals.append((L, R))\\n        for i in range(L, R + 1):\\n            covered[i] = True\\n    intervals.sort()\\n            \\n    d = [(m - i) for i in range(m + 1)]\\n    for i in range(m - 1, -1, -1):\\n        if covered[i + 1]:\\n            d[i] = d[i + 1]\\n        else:\\n            ant_idx = bisect_right(intervals, (i, m))\\n            for L, R in intervals[ant_idx:]:\\n                u = L - i - 1\\n                prev = min(m, R + u)\\n                d[i] = min(d[i], u + d[prev])\\n    return d[0]\\n\\ndef main():\\n    # inf = open('input.txt', 'r')\\n    # reader = (map(int, line.split()) for line in inf)\\n    reader = (map(int, s.split()) for s in sys.stdin)\\n\\n    n, m = next(reader)\\n    antennas = [list(next(reader)) for _ in range(n)]\\n    ans = upgrade_minCost(n, m, antennas)\\n    print(ans)\\n    \\n    # inf.close()\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"def dp(ind, max_covered):\\n\\tmax_covered = min(m, max_covered)\\n\\n\\tif ind not in cache:\\n\\t\\tcache[ind] = {}\\n\\n\\td = cache[ind]\\n\\tif max_covered in d:\\n\\t\\treturn d[max_covered]\\n\\n\\tans = blah(ind, max_covered)\\n\\n\\td[max_covered] = ans\\n\\treturn ans\\n\\n\\n# path = {}\\n\\nclass Node:\\n\\tdef __init__(self, key, val, next=None):\\n\\t\\tself.key = key\\n\\t\\tself.val = val\\n\\t\\tself.next = next\\n\\ndef blah(ind, max_covered):\\n\\tx, s = antenna[ind]\\n\\t# key = (ind, max_covered)\\n\\n\\tif max_covered >= m:\\n\\t\\t# path[key] = Node(key, 0)\\n\\t\\treturn 0\\n\\n\\tif ind == len(antenna) - 1:\\n\\t\\tif max_covered < x - s - 1:\\n\\t\\t\\tleft_needed = x - s - (max_covered + 1)\\n\\t\\t\\tright_needed = max(m - (x + s), 0)\\n\\t\\t\\tans = max(left_needed, right_needed)\\n\\t\\t\\t# path[key] = Node(key, ans)\\n\\t\\t\\treturn ans\\n\\t\\telse:\\n\\t\\t\\tright_boundary = max(max_covered, x + s)\\n\\t\\t\\tans = max(0, m - right_boundary)\\n\\t\\t\\t# path[key] = Node(key, ans)\\n\\t\\t\\treturn ans\\n\\n\\tif max_covered < x - s - 1:\\n\\t\\tnum_needed = x - s - (max_covered + 1)\\n\\t\\tnew_boundary = min(x + s + num_needed, m)\\n\\t\\tuse_i = num_needed + dp(ind + 1, new_boundary)\\n\\t\\tdont_use_i = dp(ind + 1, max_covered)\\n\\n\\t\\t# if use_i < dont_use_i:\\n\\t\\t# \\tpath[key] = Node(key, num_needed, path[(ind + 1, new_boundary)])\\n\\t\\t# else:\\n\\t\\t# \\tpath[key] = Node(key, 0, path[(ind + 1, max_covered)])\\n\\n\\t\\treturn min(use_i, dont_use_i)\\n\\telse:\\n\\t\\tnew_boundary = min(max(max_covered, x + s), m)\\n\\t\\tans = dp(ind + 1, new_boundary)\\n\\t\\t# path[key] = Node(key, 0, path[(ind + 1, new_boundary)])\\n\\t\\treturn ans\\n\\nimport sys\\n\\ncache = {}\\n\\n\\nn, m = [int(x) for x in sys.stdin.readline().split(\\\" \\\")]\\n\\nantenna = []\\n\\nfor i in range(n):\\n\\tx, s = [int(x) for x in sys.stdin.readline().split(\\\" \\\")]\\n\\n\\tantenna.append((x, s))\\n\\nantenna.sort(key=lambda a: a[0])\\n\\nprint(dp(0, 0))\\n\", \"     \\nA = [(0, 0)]\\ninf = 999999999999\\nn, m = map(int, input().split())\\n \\nfor i in range(1, n+1):\\n    x, s = map(int, input().split())\\n    A.append((max(0, x-s), min(m, x+s)))\\ndp = [inf] * (m+1)\\ndp[0] = 0\\nA = sorted(A)\\n \\nfor p in range(1, m+1):    \\n    for i in range(1, n+1):\\n \\n        a, b = A[i]\\n \\n        if p >= a and p <= b:\\n            dp[p] = dp[p-1]\\n        elif p < a:\\n            pwr = a - p\\n            dp[p] = min(dp[p], pwr + dp[max(0,a-pwr-1)], p)\\n        elif p > b:\\n            pwr = p - b\\n            dp[p] = min(dp[p], pwr + dp[max(a-pwr-1,0)], p)\\n \\nprint(dp[m])\", \"     \\nA = []\\nn, m = map(int, input().split())\\n \\nfor i in range(1, n+1):\\n    x, s = map(int, input().split())\\n    A.append((max(0, x-s), min(m, x+s)))\\ndp = [9999999] * (m+1)\\ndp[0] = 0\\n\\nfor p in range(1, m+1):    \\n    for i in range(n): \\n        a, b = A[i]\\n \\n        if p >= a and p <= b:\\n            dp[p] = dp[p-1]\\n        elif p < a:\\n            pwr = a - p\\n            dp[p] = min(dp[p], pwr + dp[max(0,a-pwr-1)], p)\\n        elif p > b:\\n            pwr = p - b\\n            dp[p] = min(dp[p], pwr + dp[max(a-pwr-1,0)], p)\\n \\nprint(dp[m])\", \"import sys\\nreader = (s.rstrip() for s in sys.stdin)\\ninput = reader.__next__\\n\\nn,m = map(int, input().split())\\nantena = [list(map(int, input().split())) for i in range(n)]\\nDP = [float(\\\"inf\\\")]*(m+1)\\nDP[0] = 0\\n\\nfor i in range(1, m+1):\\n    DP[i] = i\\n    for x, s in antena:\\n        l = max(1, x-s)\\n        r = min(m, x+s)\\n        if l<=i<=r:\\n            DP[i] = DP[i-1]\\n            break\\n        elif r<i:\\n            cost = i-r\\n            DP[i] = min(DP[i], DP[max(0, l-cost-1)] + cost)\\nprint(DP[-1])\", \"n , m  = list(map(int,input().split()))\\na=[]\\nfor i in range(n):\\n    b , c = list(map(int,input().split()))\\n    a.append((max(0,b-c),min(b+c,m)))\\ndp=[0]*(m+1)\\nfor i in range(1,m+1):\\n    dp[i]=i\\n    for j in range(n):\\n        c,d=a[j]\\n        if c<=i and i<=d:\\n            dp[i]=dp[i-1]\\n        elif i<c:\\n            cost=c-i\\n            dp[i]=min(dp[i],cost+dp[max(0,c-cost-1)])\\n        elif i>d:\\n            cost=i-d\\n            dp[i]=min(dp[i],cost+dp[max(0,c-cost-1)])\\nprint(dp[m])            \\n\\n\\n\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nN, M = map(int, input().split())\\nSt = [list(map(int, input().split())) for _ in range(N)]\\n\\n\\ndp = [M-i for i in range(M+1)]\\n\\nfor m in reversed(range(M)):\\n    covered = False\\n    for x, s in St:\\n        if x-s <= m+1 <= x+s:\\n            covered = True\\n            break\\n        if m < x-s:\\n            u = x-s-m-1\\n            dp[m] = min(dp[m], u+dp[min(M, x+s+u)])\\n    if covered:\\n        dp[m] = dp[m+1]\\n\\nprint(dp[0])\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nimport heapq\\nimport math\\nfrom collections import *\\nfrom functools import reduce,cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\n\\n# M = mod = 10**9 + 7\\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\\n# def inv_mod(n):return pow(n, mod - 2, mod)\\n \\ndef li():return [int(i) for i in input().rstrip('\\\\n').split(' ')]\\ndef st():return input().rstrip('\\\\n')\\ndef val():return int(input().rstrip('\\\\n'))\\ndef li2():return [i for i in input().rstrip('\\\\n').split(' ')]\\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\\n\\n\\nn, m = li()\\nl = []\\nfor i in range(n):\\n    x, y = li()\\n    l.append([x-y,x+y])\\n\\ndp = [m for i in range(m+1)]\\ndp[0] = 0\\nfor i in range(1,m+1):\\n    dp[i] = min(dp[i-1] + 1,dp[i])\\n    for j in l:\\n        x = max(0,j[0] - i)\\n        y = min(m,j[1] + x)\\n        dp[y] = min(dp[y],dp[i - 1] + x)\\n\\nprint(dp[-1])\", \"n, m = list(map(int,input().split(' ')))\\nl = []\\nfor i in range(n):\\n    x, y = list(map(int,input().split(' ')))\\n    l.append([x-y,x+y])\\n\\ndp = [m for i in range(m+1)]\\ndp[0] = 0\\nfor i in range(1,m+1):\\n    dp[i] = min(dp[i-1] + 1,dp[i])\\n    for j in l:\\n        x = max(0,j[0] - i)\\n        y = min(m,j[1] + x)\\n        dp[y] = min(dp[y],dp[i - 1] + x)\\n\\nprint(dp[-1])\", \"n, m, l = list(map(int,input().split(' '))) + [[]]\\nfor i in range(n):l.append(list(map(int,input().split(' '))))\\ndp = [0] + [m for i in range(m)]\\nfor i in range(1,m+1):\\n    dp[i] = min(dp[i-1] + 1,dp[i])\\n    for j in l:\\n        x = max(0,j[0] - j[1] - i)\\n        y = min(m,j[0] + j[1] + x)\\n        dp[y] = min(dp[y],dp[i - 1] + x)\\nprint(dp[-1])\", \"def readint():\\n  return int(input())\\n\\ndef readlistint():\\n  return list(map(int, input().split()))\\n\\ndef readgridint(rows):\\n  grid = []\\n  for idx in range(rows):\\n    col = list(map(int, input().split()))\\n    grid.append(col)\\n  \\n  return grid\\n\\nantennas = []\\ntotal_len = -1\\nmemo = {}\\ndef solve(left, idx):\\n  if(left > total_len):\\n    return 0\\n  key = (left, idx)\\n  if(key in memo):\\n    return memo[key]\\n  if(idx == len(antennas) - 1):\\n    ret = max(0, max(antennas[idx][0] - left, total_len - antennas[idx][1]))\\n    #print(left, idx, ret)\\n    memo[key] = ret\\n    return ret\\n  else:\\n    best = solve(left, idx + 1)\\n    best = min(best, max(0, max(antennas[idx][0] - left, total_len - antennas[idx][1])))\\n    added = max(antennas[idx][0] - left, 0)\\n    best = min(best, added + solve(antennas[idx][1] + added + 1, idx+1))\\n    memo[key] = best\\n    return best\\n    \\ndef main():\\n  nonlocal total_len\\n  N, L = readlistint()\\n  total_len = L\\n  for idx in range(N):\\n    pos, R = readlistint()\\n    antennas.append([pos-R, pos + R])\\n  \\n  antennas.sort()\\n  #print(total_len, antennas)\\n  #ret = solve(1, 0)\\n  #print(ret)\\n  \\n  INF = 100000000000\\n  dp = [INF]*(total_len + 10)\\n  dp[0] = 0\\n  for ant in antennas:\\n    ant_left, ant_right = ant\\n    for idx in range(0, total_len + 1):\\n      if(dp[idx] == INF):\\n        continue\\n      dp[total_len] = min(dp[total_len], dp[idx] + max(0, max(ant_left - idx - 1, total_len - ant_right)))\\n      added = max(ant_left - idx - 1, 0)\\n      right_point = min(total_len, ant_right + added)\\n      dp[right_point] = min(dp[right_point], dp[idx] + added)\\n  \\n  print(dp[total_len])\\n  \\n\\n\\nmain()\", \"#watu\\nimport sys\\ninput = sys.stdin.readline\\n\\nN, M = map(int, input().split())\\nSt = [list(map(int, input().split())) for _ in range(N)]\\n\\n\\ndp = [M-i for i in range(M+1)]\\n\\nfor m in reversed(range(M)):\\n    covered = False\\n    for x, s in St:\\n        if x-s <= m+1 <= x+s:\\n            covered = True\\n            break\\n        if m < x-s:\\n            u = x-s-m-1\\n            dp[m] = min(dp[m], u+dp[min(M, x+s+u)])\\n    if covered:\\n        dp[m] = dp[m+1]\\n\\nprint(dp[0])\", \"import os\\nimport sys\\n\\n\\ndef solve(xs, m):\\n    xs = [(0, 0)] + xs\\n    dp = [0] * (m + 1)\\n    for i in range(1, m + 1):\\n        dp[i] = dp[i - 1] + 1\\n        for idx, (x, s) in enumerate(xs):\\n            if x - s <= i <= x + s:\\n                dp[i] = dp[i - 1]\\n                break\\n\\n            if x + s < i:\\n                c = i - x - s\\n                dp[i] = min(c + dp[max(x - c - s - 1, 0)], dp[i])\\n\\n    return dp[-1]\\n\\n\\ndef pp(input):\\n    n, m = list(map(int, input().split()))\\n    xs = [tuple(map(int, input().split())) for _ in range(n)]\\n    print(solve(xs, m))\\n\\n\\nif \\\"paalto\\\" in os.getcwd():\\n    from string_source import string_source\\n\\n    pp(\\n        string_source(\\n            \\\"\\\"\\\"2 50\\n20 0\\n3 1\\n\\\"\\\"\\\"\\n        )\\n    )\\n\\n    pp(\\n        string_source(\\n            \\\"\\\"\\\"3 595\\n43 2\\n300 4\\n554 10\\n\\\"\\\"\\\"\\n        )\\n    )\\n\\n    pp(\\n        string_source(\\n            \\\"\\\"\\\"1 1\\n1 1\\n\\\"\\\"\\\"\\n        )\\n    )\\n\\n    pp(\\n        string_source(\\n            \\\"\\\"\\\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\\\"\\\"\\\"\\n        )\\n    )\\n\\nelse:\\n    pp(sys.stdin.readline)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 595\\n43 2\\n300 4\\n554 10\\n\",\n    \"1 1\\n1 1\\n\",\n    \"2 50\\n20 0\\n3 1\\n\",\n    \"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\",\n    \"1 100000\\n99998 0\\n\",\n    \"1 100000\\n100000 0\\n\",\n    \"1 100000\\n1 0\\n\",\n    \"2 100000\\n1 0\\n100000 0\\n\",\n    \"7 300\\n50 8\\n49 6\\n246 1\\n123 3\\n227 2\\n183 5\\n158 7\\n\",\n    \"7 300\\n262 17\\n97 27\\n108 30\\n45 28\\n126 18\\n299 28\\n120 30\\n\",\n    \"7 300\\n163 21\\n111 27\\n210 61\\n183 53\\n237 25\\n275 9\\n80 6\\n\",\n    \"25 100000\\n69213 4\\n76932 3\\n84327 3\\n93894 2\\n64725 1\\n87331 1\\n58612 3\\n79789 1\\n93768 3\\n59583 5\\n50523 3\\n97497 4\\n3051 1\\n79960 0\\n776 5\\n36189 1\\n15585 5\\n6881 0\\n54720 0\\n30083 4\\n4470 3\\n77336 2\\n96150 1\\n59705 3\\n59300 1\\n\",\n    \"25 100000\\n1003 26\\n32756 9\\n93227 12\\n51400 17\\n36812 10\\n84422 35\\n76490 19\\n1740 10\\n54632 29\\n12367 32\\n18339 34\\n41068 34\\n65607 23\\n14131 23\\n54870 4\\n23147 3\\n47036 5\\n88376 9\\n93195 5\\n54299 13\\n49172 20\\n23718 17\\n68635 38\\n15559 40\\n34105 25\\n\",\n    \"25 100000\\n2397 163\\n59750 898\\n5833 905\\n79846 911\\n57098 569\\n21028 1367\\n32857 1352\\n72624 1434\\n44720 70\\n77542 444\\n92200 39\\n51088 366\\n34147 317\\n80149 1401\\n54988 344\\n67064 474\\n70805 464\\n28718 409\\n51331 1453\\n90984 670\\n18438 457\\n56734 1419\\n46141 370\\n70406 1275\\n92283 124\\n\",\n    \"25 100000\\n3174 736\\n88732 1969\\n61424 1015\\n77143 1483\\n56805 2063\\n25558 249\\n48637 2511\\n68912 63\\n27671 733\\n60995 2972\\n6179 2108\\n8416 702\\n50179 1554\\n37107 2862\\n21129 2673\\n45776 2144\\n67145 1674\\n94506 1588\\n25711 345\\n46646 2072\\n86481 2761\\n60011 2644\\n20236 2068\\n52333 1034\\n60023 2496\\n\",\n    \"25 100000\\n37809 0\\n26927 0\\n73733 0\\n3508 1\\n94260 1\\n23325 1\\n41305 1\\n23520 1\\n52508 0\\n69475 1\\n48923 1\\n70614 1\\n31179 1\\n57324 1\\n42182 1\\n38945 1\\n9973 1\\n32264 0\\n49874 0\\n63512 0\\n6361 1\\n55979 1\\n67515 0\\n65894 1\\n77805 0\\n\",\n    \"25 100000\\n67601 52855\\n66459 75276\\n53190 93454\\n5275 6122\\n32094 97379\\n17446 70386\\n56808 9614\\n55202 88461\\n92365 45788\\n2628 72300\\n9441 59772\\n9639 14290\\n58057 92489\\n97535 38675\\n32763 11599\\n33911 80066\\n57681 95815\\n68874 34661\\n7976 42928\\n95943 72831\\n50029 47657\\n99199 86401\\n12561 24225\\n23715 50617\\n81108 29201\\n\",\n    \"2 100000\\n66809 5\\n78732 1939\\n\",\n    \"2 100000\\n77287 0\\n83316 3414\\n\",\n    \"2 100000\\n35991 7\\n80242 6536\\n\",\n    \"6 100000\\n27838 4\\n90673 9\\n57946 7\\n99524 213\\n53425 2780\\n87008 2622\\n\",\n    \"6 100000\\n99736 10\\n33892 1\\n81001 5\\n5905 7\\n33908 611\\n5214 2632\\n\",\n    \"6 100000\\n27886 7\\n77187 4\\n9738 6\\n96734 9\\n16855 6\\n49676 2337\\n\",\n    \"25 100000\\n53612 0\\n66075 2\\n8932 3\\n7833 2\\n37244 1\\n63538 0\\n50612 3\\n74352 3\\n97233 3\\n95687 3\\n52621 0\\n90354 0\\n31586 2\\n90526 2\\n47695 0\\n8865 8069\\n27202 2921\\n1257 10197\\n5010 3753\\n11629 9377\\n35282 21983\\n64622 12777\\n80868 16988\\n1749 8264\\n35995 22668\\n\",\n    \"5 100000\\n52050 4\\n29238 4\\n44565 1\\n45433 3\\n44324 2\\n\",\n    \"10 100000\\n11743 1\\n8885 3\\n81551 3\\n1155 1\\n98002 2\\n67313 2\\n86920 4\\n31643 2\\n10059 3\\n34150 3\\n\",\n    \"20 100000\\n24699 3\\n6009 2\\n9602 4\\n53413 1\\n35177 3\\n53750 4\\n13364 4\\n48839 3\\n35504 3\\n69424 1\\n76044 1\\n17849 2\\n50355 1\\n7354 3\\n21986 4\\n75971 4\\n64508 4\\n24995 2\\n42227 1\\n53574 2\\n\",\n    \"40 100000\\n7969 3\\n37169 1\\n41741 2\\n67002 1\\n90862 2\\n64649 2\\n16209 3\\n73780 1\\n21884 2\\n68703 1\\n34726 3\\n48184 1\\n91305 4\\n81813 2\\n63415 3\\n55828 3\\n8107 2\\n34478 3\\n45085 1\\n75184 3\\n55945 2\\n17811 2\\n6071 3\\n39736 2\\n61691 1\\n32048 4\\n92316 1\\n67014 4\\n1653 1\\n74500 3\\n37485 1\\n14969 2\\n66752 2\\n9979 3\\n64317 2\\n8879 2\\n49018 1\\n27012 2\\n52171 4\\n34163 2\\n\",\n    \"5 100000\\n43626 2\\n13034 2\\n64492 2\\n10136 4\\n79129 1\\n\",\n    \"10 100000\\n17014 7\\n53882 3\\n18443 3\\n53503 2\\n56680 8\\n87349 4\\n84815 4\\n78531 8\\n6275 1\\n37670 2\\n\",\n    \"20 100000\\n38470 3\\n47432 1\\n58503 3\\n5373 4\\n35996 2\\n3486 7\\n45511 2\\n99630 5\\n52747 6\\n9906 2\\n20924 8\\n53193 2\\n39577 2\\n7813 2\\n89583 6\\n6600 6\\n3596 1\\n11860 2\\n26607 2\\n75001 1\\n\",\n    \"40 100000\\n42798 2\\n54533 2\\n515 3\\n85575 1\\n10710 6\\n96647 1\\n41385 4\\n22031 3\\n95479 2\\n36936 8\\n75970 5\\n50569 3\\n40085 1\\n545 4\\n79766 4\\n7705 3\\n98717 2\\n98492 1\\n60058 2\\n18385 3\\n82164 2\\n62091 6\\n24621 8\\n86841 7\\n38419 2\\n31588 1\\n45307 1\\n81328 8\\n2012 7\\n33914 3\\n11834 8\\n35316 2\\n41871 2\\n51727 5\\n93223 7\\n39536 8\\n81006 3\\n64163 2\\n58846 2\\n54803 1\\n\",\n    \"5 100000\\n72890 3\\n6854 1\\n943 3\\n71191 2\\n93457 1\\n\",\n    \"10 100000\\n94219 1\\n71825 1\\n99448 2\\n61315 4\\n69817 15\\n21753 16\\n94006 11\\n53877 1\\n28419 10\\n20564 12\\n\",\n    \"20 100000\\n5086 2\\n36539 1\\n71556 11\\n58140 8\\n65788 13\\n96162 4\\n17309 9\\n53576 8\\n64003 16\\n6754 3\\n8130 16\\n32836 2\\n5623 2\\n49613 4\\n44487 4\\n83608 4\\n22645 14\\n4509 2\\n92784 2\\n28021 2\\n\",\n    \"40 100000\\n83643 2\\n40674 2\\n37656 3\\n76252 1\\n81854 14\\n78210 2\\n63394 14\\n67188 6\\n24556 5\\n30841 11\\n91521 16\\n61626 2\\n77040 9\\n85555 3\\n68349 2\\n76270 2\\n56711 13\\n60381 6\\n74757 11\\n58602 12\\n83014 11\\n10344 2\\n18259 14\\n41836 4\\n26770 2\\n8245 8\\n82226 8\\n68545 2\\n13026 15\\n95537 7\\n6463 1\\n89800 1\\n16070 2\\n9389 5\\n98033 3\\n19102 11\\n84955 4\\n61018 13\\n751 4\\n68501 5\\n\",\n    \"5 100000\\n25350 21\\n96944 27\\n39618 10\\n41361 5\\n6591 1\\n\",\n    \"10 100000\\n74302 10\\n38566 27\\n30455 11\\n1678 4\\n3938 24\\n59873 6\\n90244 29\\n93429 6\\n43547 28\\n55198 20\\n\",\n    \"20 100000\\n86420 1\\n47113 13\\n64472 1\\n53043 9\\n13420 14\\n76914 4\\n94265 5\\n58960 32\\n37738 2\\n62910 8\\n84632 13\\n12139 1\\n7152 29\\n88101 6\\n7610 6\\n26751 3\\n20745 14\\n18315 8\\n28921 1\\n21476 2\\n\",\n    \"40 100000\\n52994 2\\n23288 15\\n81416 16\\n81533 16\\n34292 16\\n33769 9\\n83905 26\\n66312 5\\n68536 27\\n25739 4\\n47063 28\\n52941 13\\n32163 1\\n73306 14\\n95733 16\\n88459 2\\n1439 4\\n81112 6\\n7142 8\\n22978 17\\n40445 4\\n35423 2\\n30283 5\\n89053 6\\n45961 16\\n47050 8\\n69093 2\\n697 7\\n56337 23\\n48408 20\\n43287 18\\n454 11\\n954 4\\n45261 3\\n82023 2\\n21357 5\\n57677 2\\n36910 2\\n59441 3\\n85506 3\\n\",\n    \"5 100000\\n79901 42\\n54923 2\\n62869 4\\n65551 27\\n87048 4\\n\",\n    \"10 100000\\n40506 6\\n34059 5\\n38905 34\\n83603 11\\n66381 8\\n93554 4\\n7544 19\\n86566 4\\n25352 4\\n96048 16\\n\",\n    \"20 100000\\n95468 23\\n90408 16\\n87565 4\\n75513 4\\n20971 2\\n25009 29\\n33037 29\\n40038 2\\n58148 19\\n8408 2\\n60320 15\\n42740 3\\n44945 2\\n21695 8\\n59723 38\\n73068 2\\n72608 19\\n91778 12\\n53661 4\\n77225 46\\n\",\n    \"40 100000\\n34512 2\\n28710 30\\n42353 20\\n28138 11\\n818 42\\n40056 1\\n68439 8\\n43563 42\\n3766 14\\n19516 25\\n54016 62\\n93742 41\\n98921 3\\n50948 8\\n58432 2\\n58209 7\\n55704 18\\n77002 8\\n82500 16\\n498 2\\n88306 12\\n17568 3\\n88313 1\\n93767 7\\n12186 2\\n79225 2\\n1910 8\\n60198 29\\n89693 2\\n49128 2\\n40818 8\\n34413 12\\n20499 1\\n3649 3\\n21079 3\\n9349 2\\n32774 38\\n14759 26\\n79319 6\\n44325 37\\n\",\n    \"5 100000\\n95719 2\\n83337 69\\n17427 124\\n73738 1\\n59503 41\\n\",\n    \"10 100000\\n72759 89\\n31969 4\\n84006 24\\n7486 45\\n1600 5\\n54176 2\\n59014 6\\n76704 119\\n59238 1\\n29271 2\\n\",\n    \"20 100000\\n50897 12\\n82689 22\\n55442 28\\n32615 6\\n48930 81\\n25243 5\\n38752 110\\n45025 16\\n43729 2\\n82637 1\\n89951 10\\n58373 1\\n1389 7\\n20683 2\\n12366 127\\n66021 4\\n17264 27\\n55759 12\\n13239 1\\n18370 53\\n\",\n    \"40 100000\\n67499 128\\n18678 3\\n32621 61\\n46926 107\\n41174 20\\n90207 127\\n25076 18\\n78735 14\\n68443 8\\n28831 2\\n83000 75\\n52968 115\\n58919 4\\n77318 18\\n78727 55\\n19986 59\\n85666 95\\n75610 11\\n55390 23\\n59376 12\\n87643 63\\n55139 42\\n38661 80\\n457 21\\n1886 9\\n61516 71\\n14324 103\\n28627 2\\n64006 3\\n47570 7\\n71651 17\\n34118 107\\n45277 14\\n31144 4\\n70921 74\\n8388 4\\n32174 11\\n22012 6\\n67839 5\\n51280 10\\n\",\n    \"5 100000\\n2742 8\\n53984 236\\n69767 231\\n45509 2\\n39889 59\\n\",\n    \"10 100000\\n54735 2\\n98665 153\\n17472 2\\n26292 12\\n44348 22\\n54855 15\\n28437 98\\n94916 4\\n10408 23\\n99667 189\\n\",\n    \"20 100000\\n11672 105\\n94527 8\\n83821 4\\n37084 55\\n60655 24\\n16189 4\\n34135 85\\n34867 2\\n55552 7\\n52666 49\\n66146 74\\n6273 2\\n13905 59\\n20381 4\\n59843 83\\n53964 38\\n24508 4\\n77118 4\\n15930 3\\n62737 1\\n\",\n    \"40 100000\\n68637 250\\n15718 58\\n26714 15\\n49786 15\\n13359 8\\n28367 2\\n62024 97\\n46061 52\\n61112 96\\n72226 233\\n70981 28\\n45379 1\\n28398 4\\n41275 8\\n12280 133\\n75146 9\\n62439 214\\n26526 32\\n44676 3\\n19031 2\\n14260 195\\n19053 45\\n58423 3\\n89174 4\\n36613 8\\n58708 32\\n19140 2\\n34072 219\\n99129 5\\n7006 80\\n87999 8\\n38558 7\\n50309 238\\n77671 1\\n17665 73\\n95834 12\\n72684 9\\n23193 81\\n57013 53\\n58594 9\\n\",\n    \"5 100000\\n63303 72\\n97883 4\\n12457 96\\n66892 6\\n92884 6\\n\",\n    \"10 100000\\n57437 57\\n78480 2\\n30047 2\\n22974 16\\n19579 201\\n25666 152\\n77014 398\\n94142 2\\n65837 442\\n69836 23\\n\",\n    \"20 100000\\n29764 28\\n87214 24\\n43812 151\\n22119 512\\n36641 38\\n52113 29\\n56955 155\\n13605 14\\n99224 7\\n48614 2\\n64555 215\\n71439 8\\n78995 60\\n84075 103\\n7907 15\\n79915 237\\n69409 4\\n98226 154\\n23889 4\\n91844 100\\n\",\n    \"40 100000\\n96037 20\\n46624 124\\n376 24\\n21579 329\\n30814 16\\n93353 2\\n37876 5\\n31134 15\\n91879 101\\n56921 3\\n60149 1\\n32051 12\\n87665 1\\n43512 6\\n99773 2\\n93817 8\\n4019 448\\n21051 1\\n41295 98\\n9402 89\\n6576 498\\n37085 50\\n8593 3\\n611 17\\n4320 411\\n72688 30\\n81747 8\\n9120 147\\n70791 95\\n29492 43\\n11656 162\\n37753 105\\n19543 72\\n86959 2\\n17301 2\\n49114 152\\n76580 19\\n27610 10\\n81365 2\\n31055 159\\n\",\n    \"5 100000\\n86592 146\\n14936 12\\n74772 251\\n14953 2\\n82726 247\\n\",\n    \"10 100000\\n36153 5\\n75526 126\\n70668 438\\n84951 4\\n66650 1\\n13780 312\\n70504 798\\n1119 395\\n41802 2\\n69442 106\\n\",\n    \"20 100000\\n60719 128\\n50622 18\\n63673 358\\n54655 4\\n29105 1\\n63976 7\\n96998 334\\n65216 723\\n52540 12\\n1268 666\\n8242 2\\n86941 140\\n99111 27\\n2965 11\\n25870 135\\n29573 339\\n99204 13\\n36279 30\\n86150 232\\n67144 76\\n\",\n    \"40 100000\\n46403 17\\n54955 61\\n74185 12\\n5141 2\\n48606 729\\n68203 73\\n73631 118\\n79515 577\\n51004 20\\n68430 16\\n82547 4\\n39436 56\\n59971 2\\n13164 543\\n16471 7\\n86520 42\\n47054 264\\n69354 8\\n84857 8\\n71801 45\\n41099 8\\n94095 8\\n24142 1\\n25537 6\\n59382 3\\n62270 32\\n2989 48\\n14329 354\\n152 8\\n450 10\\n91698 20\\n17145 6\\n37249 63\\n96026 20\\n24555 2\\n99362 588\\n21434 3\\n29806 217\\n57636 5\\n24354 22\\n\",\n    \"5 100000\\n88825 16\\n42009 4\\n12536 6\\n27456 2\\n97947 64\\n\",\n    \"10 100000\\n1635 8\\n33823 61\\n5721 646\\n48628 1504\\n74630 49\\n75538 1163\\n57979 176\\n10592 6\\n49836 8\\n13039 1427\\n\",\n    \"20 100000\\n96994 121\\n52505 16\\n39110 4\\n550 203\\n60219 6\\n19241 443\\n33570 7\\n48536 1\\n42760 61\\n45069 4\\n38141 17\\n60419 50\\n98857 9\\n73167 66\\n17284 96\\n38049 1061\\n12937 15\\n8136 2\\n29734 185\\n31184 19\\n\",\n    \"40 100000\\n97514 53\\n80797 379\\n84354 292\\n79244 2\\n50047 431\\n44535 1989\\n55021 15\\n73792 98\\n6532 185\\n24440 1986\\n11045 54\\n95293 24\\n83588 1129\\n80713 4\\n36999 837\\n33125 1\\n81815 4\\n6354 2\\n11472 2\\n47815 178\\n24587 339\\n44181 2\\n52337 521\\n76224 47\\n51300 241\\n45542 87\\n38184 1398\\n92802 8\\n60559 70\\n6458 54\\n35620 3\\n57750 11\\n57175 4\\n65095 8\\n10390 387\\n13810 182\\n88779 1\\n30393 1\\n67934 35\\n65584 11\\n\",\n    \"5 100000\\n66409 12\\n63802 2\\n95034 9\\n82818 1288\\n45078 227\\n\",\n    \"10 100000\\n3219 7\\n12223 56\\n90921 27\\n71142 1398\\n87964 839\\n16499 8\\n72444 32\\n67739 130\\n93403 4\\n3846 3\\n\",\n    \"20 100000\\n55345 8\\n65637 356\\n70322 88\\n16632 31\\n10631 854\\n76026 12\\n38962 8\\n26462 1\\n11676 122\\n76312 4\\n89117 687\\n57003 11\\n70170 266\\n64422 46\\n16054 2\\n93472 877\\n15206 24\\n39406 1149\\n99456 889\\n76963 2\\n\",\n    \"40 100000\\n82729 23\\n20257 23\\n35728 2\\n25011 12\\n4960 71\\n21761 33\\n44761 14\\n71668 843\\n98965 53\\n80881 535\\n28561 404\\n61276 999\\n97500 851\\n19183 245\\n78699 876\\n63107 4\\n2802 478\\n62470 148\\n28013 26\\n350 1529\\n70579 8\\n71417 797\\n33173 1\\n19413 25\\n38142 191\\n72645 260\\n35515 2\\n28804 16\\n41640 2\\n21600 16\\n893 437\\n7071 368\\n75545 395\\n98218 1005\\n97927 3\\n43976 1\\n76398 2\\n10460 632\\n36563 38\\n37813 1254\\n\",\n    \"5 100000\\n13264 13\\n67967 581\\n9017 12\\n22564 4\\n75202 981\\n\",\n    \"10 100000\\n31514 7\\n43285 4660\\n39669 3899\\n60022 838\\n33584 643\\n78825 16\\n824 32\\n51664 31\\n15433 476\\n14295 591\\n\",\n    \"20 100000\\n76900 749\\n4459 3\\n94269 2\\n82747 213\\n4707 2\\n25269 4510\\n20680 975\\n76445 105\\n69770 26\\n98437 138\\n9149 1727\\n542 1\\n4528 956\\n99559 3050\\n16375 86\\n2140 1295\\n59410 15\\n25894 7727\\n48176 1251\\n75691 962\\n\",\n    \"40 100000\\n97318 1810\\n83374 13\\n5633 437\\n88352 47\\n95345 59\\n17545 249\\n24102 22\\n51457 1\\n76529 1\\n37126 18\\n49452 16\\n57843 23\\n9831 18\\n1455 3\\n11806 86\\n37145 2\\n88995 14\\n68601 14\\n43229 6\\n1611 3\\n30150 1479\\n55553 2\\n13132 50\\n16914 13\\n25556 63\\n89903 6883\\n56210 1\\n53913 3747\\n21131 798\\n46002 13\\n95645 2\\n87403 3155\\n34836 8\\n12090 61\\n13655 25\\n33060 54\\n42493 258\\n90629 3899\\n30302 2\\n95065 78\\n\",\n    \"5 100000\\n37011 9701\\n74984 679\\n18318 55\\n92053 173\\n26429 12487\\n\",\n    \"10 100000\\n11670 1339\\n79595 481\\n53274 401\\n14356 102\\n96605 13\\n2355 233\\n54983 6904\\n47863 49\\n27611 11\\n96114 336\\n\",\n    \"20 100000\\n61697 2\\n97163 1\\n45531 2964\\n41121 1\\n55732 4965\\n12614 10451\\n48412 185\\n834 4\\n53784 337\\n27676 61\\n31448 120\\n73540 9753\\n51358 3568\\n31327 4576\\n69903 2048\\n48288 8116\\n54268 41\\n89314 10612\\n32624 16\\n83135 62\\n\",\n    \"40 100000\\n3459 2\\n86272 5148\\n24317 160\\n44251 1415\\n26597 1\\n1319 256\\n92116 4\\n38907 3\\n60128 6673\\n71018 2\\n35857 936\\n97060 2\\n4950 6165\\n63923 4\\n75390 2346\\n83335 2\\n57524 6\\n99812 3\\n32248 206\\n48786 3185\\n69204 16143\\n55261 7\\n67356 2\\n86284 148\\n19119 3\\n45733 369\\n85011 73\\n73772 106\\n64294 33\\n53040 26\\n86208 12520\\n77019 1573\\n52972 2928\\n9979 352\\n39446 303\\n51300 3353\\n49439 639\\n53349 620\\n37475 1303\\n53218 12257\\n\",\n    \"5 100000\\n89743 8\\n64030 13\\n33057 439\\n69697 34\\n28568 11302\\n\",\n    \"10 100000\\n308 1\\n27837 235\\n74223 8762\\n25432 10\\n62498 5795\\n65172 3223\\n39762 48\\n74347 1\\n6364 1523\\n73376 8\\n\",\n    \"20 100000\\n32216 25\\n1771 1876\\n29601 4397\\n65385 2\\n75865 1\\n97013 28\\n60770 1816\\n17137 32\\n32943 15\\n5320 5\\n10846 7383\\n77785 13\\n62852 369\\n78343 7\\n86849 14387\\n80901 546\\n42168 3254\\n99786 32092\\n93242 24\\n14005 53\\n\",\n    \"40 100000\\n8644 429\\n97881 2766\\n98955 25663\\n8679 187\\n54897 23213\\n64306 4647\\n46280 23471\\n31464 3\\n35532 2\\n95998 1352\\n28824 3\\n99405 3856\\n47271 13832\\n66959 7\\n50599 11\\n70318 293\\n84159 236\\n10893 1914\\n54437 15065\\n4468 3\\n91940 32106\\n87980 50\\n81589 378\\n8783 23\\n11417 690\\n2733 259\\n84915 26\\n15315 2880\\n60017 3214\\n58220 1\\n17160 185\\n60640 10496\\n46075 143\\n12251 2938\\n6582 12\\n7234 827\\n32344 830\\n3330 18\\n48612 290\\n47531 14241\\n\",\n    \"5 100000\\n54710 49\\n23118 497\\n25124 113\\n8533 204\\n6259 78\\n\",\n    \"10 100000\\n17296 29\\n91310 2\\n57522 122\\n3226 3493\\n56545 798\\n34449 65176\\n52982 57\\n63054 20\\n85401 26\\n35366 40\\n\",\n    \"20 100000\\n48315 147\\n18844 54412\\n53410 113\\n47381 299\\n47399 4\\n43189 2182\\n44092 269\\n86931 4\\n69501 21297\\n7463 152\\n748 3195\\n21275 2\\n91263 2853\\n70156 4\\n94007 11073\\n73642 27\\n10505 88\\n48437 56\\n45377 3297\\n44125 328\\n\",\n    \"40 100000\\n97613 14\\n21950 98\\n79071 6\\n17398 4\\n52818 26\\n86382 74\\n45221 20\\n34027 4550\\n37075 16\\n64440 15989\\n16227 277\\n55118 887\\n89050 678\\n14236 3\\n23333 24\\n95767 7042\\n76449 294\\n34947 62\\n93092 3916\\n10791 1852\\n10371 84\\n11819 36794\\n3774 22\\n20470 574\\n69834 216\\n86866 21\\n48346 11\\n79493 27990\\n54723 4\\n7406 963\\n21932 18679\\n98450 13060\\n28964 915\\n86494 14\\n6303 392\\n865 3624\\n31750 23\\n65411 241\\n8209 312\\n15896 17139\\n\",\n    \"3 100000\\n3 1200\\n1205 0\\n80000 78793\\n\",\n    \"3 100000\\n20001 78793\\n98796 0\\n99998 1200\\n\",\n    \"8 100000\\n1217 0\\n1208 0\\n1220 0\\n3 1200\\n1205 0\\n1214 0\\n1211 0\\n80000 78778\\n\",\n    \"8 100000\\n98796 0\\n20001 78778\\n98790 0\\n98781 0\\n98787 0\\n98793 0\\n98784 0\\n99998 1200\\n\"\n  ],\n  \"outputs\": [\n    \"281\\n\",\n    \"0\\n\",\n    \"30\\n\",\n    \"26\\n\",\n    \"99997\\n\",\n    \"99999\\n\",\n    \"99999\\n\",\n    \"99998\\n\",\n    \"126\\n\",\n    \"94\\n\",\n    \"89\\n\",\n    \"49963\\n\",\n    \"49765\\n\",\n    \"40507\\n\",\n    \"26632\\n\",\n    \"49992\\n\",\n    \"0\\n\",\n    \"66803\\n\",\n    \"77286\\n\",\n    \"49205\\n\",\n    \"50644\\n\",\n    \"49057\\n\",\n    \"47987\\n\",\n    \"2144\\n\",\n    \"52045\\n\",\n    \"50084\\n\",\n    \"49985\\n\",\n    \"49936\\n\",\n    \"51453\\n\",\n    \"50085\\n\",\n    \"49970\\n\",\n    \"49894\\n\",\n    \"64333\\n\",\n    \"50054\\n\",\n    \"49922\\n\",\n    \"49811\\n\",\n    \"55550\\n\",\n    \"50083\\n\",\n    \"49883\\n\",\n    \"49732\\n\",\n    \"54920\\n\",\n    \"49985\\n\",\n    \"49854\\n\",\n    \"49554\\n\",\n    \"53474\\n\",\n    \"50444\\n\",\n    \"49715\\n\",\n    \"48822\\n\",\n    \"50997\\n\",\n    \"50425\\n\",\n    \"49678\\n\",\n    \"48168\\n\",\n    \"50677\\n\",\n    \"49615\\n\",\n    \"48450\\n\",\n    \"48015\\n\",\n    \"59565\\n\",\n    \"49678\\n\",\n    \"47933\\n\",\n    \"46585\\n\",\n    \"51045\\n\",\n    \"46506\\n\",\n    \"47971\\n\",\n    \"41284\\n\",\n    \"49807\\n\",\n    \"51101\\n\",\n    \"45965\\n\",\n    \"43774\\n\",\n    \"51652\\n\",\n    \"44144\\n\",\n    \"34689\\n\",\n    \"35469\\n\",\n    \"38278\\n\",\n    \"41632\\n\",\n    \"7753\\n\",\n    \"15210\\n\",\n    \"40041\\n\",\n    \"41919\\n\",\n    \"20505\\n\",\n    \"7924\\n\",\n    \"51421\\n\",\n    \"375\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"6\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1253/E",
  "starter_code": ""
}