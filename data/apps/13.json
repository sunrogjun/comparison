{
  "task_id": "APPS/13",
  "problem_id": 13,
  "prompt": "Now you can take online courses in the Berland State University! Polycarp needs to pass k main online courses of his specialty to get a diploma. In total n courses are availiable for the passage.\n\nThe situation is complicated by the dependence of online courses, for each course there is a list of those that must be passed before starting this online course (the list can be empty, it means that there is no limitation).\n\nHelp Polycarp to pass the least number of courses in total to get the specialty (it means to pass all main and necessary courses). Write a program which prints the order of courses. \n\nPolycarp passes courses consistently, he starts the next course when he finishes the previous one. Each course can't be passed more than once. \n\n\n-----Input-----\n\nThe first line contains n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of online-courses and the number of main courses of Polycarp's specialty. \n\nThe second line contains k distinct integers from 1 to n \u2014 numbers of main online-courses of Polycarp's specialty. \n\nThen n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer t_{i} (0 \u2264 t_{i} \u2264 n - 1) \u2014 the number of courses on which the i-th depends. Then there follows the sequence of t_{i} distinct integers from 1 to n \u2014 numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. \n\nIt is guaranteed that the sum of all values t_{i} doesn't exceed 10^5. \n\n\n-----Output-----\n\nPrint -1, if there is no the way to get a specialty. \n\nOtherwise, in the first line print the integer m \u2014 the minimum number of online-courses which it is necessary to pass to get a specialty. In the second line print m distinct integers \u2014 numbers of courses which it is necessary to pass in the chronological order of their passage. If there are several answers it is allowed to print any of them.\n\n\n-----Examples-----\nInput\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n\nOutput\n5\n1 2 3 4 5 \n\nInput\n9 3\n3 9 5\n0\n0\n3 9 4 5\n0\n0\n1 8\n1 6\n1 2\n2 1 2\n\nOutput\n6\n1 2 9 4 5 3 \n\nInput\n3 3\n1 2 3\n1 2\n1 3\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first test firstly you can take courses number 1 and 2, after that you can take the course number 4, then you can take the course number 5, which is the main. After that you have to take only the course number 3, which is the last not passed main course.",
  "solutions": "[\"#This code is dedicated to Vlada S.\\n\\nclass Course:\\n\\tdef __init__(self, reqs, number):\\n\\t\\tself.reqs = list(map(int, reqs.split()[1:]))\\n\\t\\tself.available = False\\n\\t\\tself.in_stack = False\\n\\t\\tself.number = number\\n\\nn, k = list(map(int, input().split()))\\nrequirements = list(map(int, input().split()))\\ncourses = {}\\n\\nanswer = \\\"\\\"\\n\\nfor i in range(n):\\n\\tcourses[i + 1]= Course(input(), i + 1)\\n\\nfor i in range(len(requirements)):\\n\\trequirements[i] = courses[requirements[i]]\\n\\nwhile requirements:\\n\\tdata = {}\\n\\n\\tcourse = requirements.pop()\\n\\n\\tif not course.available:\\n\\t\\trequirements.append(course)\\n\\n\\t\\tdone = True\\n\\n\\t\\tfor c in course.reqs:\\n\\t\\t\\tc = courses[c]\\n\\n\\t\\t\\tif not c.available:\\n\\t\\t\\t\\trequirements.append(c)\\n\\t\\t\\t\\tdone = False\\n\\n\\t\\tif done:\\n\\t\\t\\tanswer += \\\" \\\" + str(course.number)\\n\\t\\t\\tcourse.available = True\\n\\t\\telse:\\n\\t\\t\\tif course.in_stack:\\n\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tcourse.in_stack = True\\nelse:\\n\\tprint(answer.count(\\\" \\\"))\\n\\tprint(answer[1:])\", \"import sys\\n\\ndef main():\\n\\n    n,k = map(int,sys.stdin.readline().split())\\n    courses = list(map(int,sys.stdin.readline().split()))\\n    courses = [x-1 for x in courses] \\n\\n    visited = [False]*n\\n    used = [False]*n\\n\\n    ans = []\\n    t = []\\n\\n    for i in range(n):\\n        temp = list(map(int,sys.stdin.readline().split()))\\n        temp = [x-1 for x in temp] \\n        t.append(temp[1:])\\n        \\n    for i in range(k):\\n        c = courses[i]\\n        if used[c]:\\n            continue\\n        \\n        q = [c]        \\n        visited[c]=True\\n        while len(q)>0:\\n            cur = q[-1]\\n            if len(t[cur])!=0:\\n                s = t[cur].pop()\\n                if visited[s] and not used[s]:                    \\n                    print(-1)\\n                    return\\n                if used[s]:\\n                    continue                \\n                q.append(s)\\n                visited[s]=True\\n            else:\\n                ans.append(cur)\\n                q.pop()\\n                used[cur] = True\\n\\n    ans = [str(x+1) for x in ans] \\n    print(len(ans))\\n    print(\\\" \\\".join(ans))\\n\\nmain()\", \"import collections as col\\nimport itertools as its\\nimport sys\\nimport operator\\nfrom copy import copy, deepcopy\\n\\n\\nclass Solver:\\n    def __init__(self):\\n        pass\\n    \\n    def solve(self):\\n        n, k = list(map(int, input().split()))\\n        q = list([int(x) - 1 for x in input().split()])\\n        used = [False] * n\\n        for e in q:\\n            used[e] = True\\n        edges = [[] for _ in range(n)]\\n        redges = [[] for _ in range(n)]\\n        for i in range(n):\\n            l = list([int(x) - 1 for x in input().split()])[1:]\\n            edges[i] = l\\n            for e in l:\\n                redges[e].append(i)\\n        degs = [len(edges[i]) for i in range(n)]\\n        d = 0\\n        while d < len(q):\\n            v = q[d]\\n            d += 1\\n            for e in edges[v]:\\n                if not used[e]:\\n                    used[e] = True\\n                    q.append(e)\\n        q = q[::-1]\\n        nq = []\\n        for v in q:\\n            if degs[v] == 0:\\n                nq.append(v)\\n        d = 0\\n        while d < len(nq):\\n            v = nq[d]\\n            d += 1\\n            for e in redges[v]:\\n                if not used[e]:\\n                    continue\\n                degs[e] -= 1\\n                if degs[e] == 0:\\n                    nq.append(e)\\n        #print(nq)\\n        if len(q) != len(nq):\\n            print(-1)\\n            return\\n        print(len(nq))\\n        print(' '.join([str(x + 1) for x in nq]))\\n        \\n\\n\\ndef __starting_point():\\n    s = Solver()\\n    s.solve()\\n\\n__starting_point()\", \"\\nline1 = input().split(\\\" \\\")\\nn = int(line1[0])\\nk = int(line1[1])\\n\\nmain = list(map(int, input().split(\\\" \\\")))\\n\\nreqs = [None] * (n + 1) # [course_number : [dependency1, dependecy2, ...]]\\n\\nfor i in range(n):\\n    line = input().split(\\\" \\\")\\n    if int(line[0]) == 0:\\n        reqs[1 + i] = []\\n    else:\\n        curr_reqs = []\\n        for req in line[1:]:\\n            curr_reqs += [int(req)]\\n        reqs[1 + i] = curr_reqs\\n\\nres = []\\n\\n# print(reqs)\\nto_exit = False  # \\u0447\\u0442\\u043e\\u0431\\u044b \\u043f\\u043e \\u0444\\u0430\\u0441\\u0442\\u0443 \\u0432\\u044b\\u0445\\u043e\\u0434\\u0438\\u0442\\u044c \\u0438\\u0437 \\u0446\\u0438\\u043a\\u043b\\u043e\\u0432\\n\\ndef traverse(main_courses): # \\u0441\\u044e\\u0434\\u0430 \\u043f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441\\u0440\\u0430\\u0437\\u0443 \\u043c\\u0430\\u0441\\u0441\\u0438\\u0432\\n    nonlocal res,to_exit\\n    roots =[False] * (n+1)\\n    while main_courses and not to_exit: # \\u043f\\u043e\\u043a\\u0430 \\u043c\\u044d\\u0438\\u043d \\u043d\\u0435 \\u043f\\u0443\\u0441\\u0442\\u043e\\u0439 \\u0438 \\u043d\\u0435 \\u043d\\u0443\\u0436\\u043d\\u043e \\u043b\\u0438\\u0432\\u0430\\u0442\\u044c \\u0438\\u0437 \\u0446\\u0438\\u043a\\u043b\\u0430\\n        main_to_trav = main_courses.pop()\\n        if reqs[main_to_trav] == None:\\n            continue\\n        stack = [main_to_trav] # \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0435\\u043c \\u043a\\u043e\\u0440\\u0435\\u043d\\u044c \\u0434\\u0435\\u0440\\u0435\\u0432\\u0430 \\u0432 \\u0441\\u0442\\u044d\\u043a\\n        while len(stack) > 0 and not to_exit:\\n            to_traverse = stack.pop() # \\u0434\\u043e\\u0441\\u0442\\u0430\\u0435\\u043c \\u0438\\u0437 \\u0441\\u0442\\u044d\\u043a\\u0430 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443 \\u043a\\u043e\\u0442\\u043e\\u0440\\u0443\\u044e \\u0445\\u043e\\u0442\\u0438\\u043c \\u043e\\u0431\\u043e\\u0439\\u0442\\u0438\\n            if reqs[to_traverse] is not None: # \\u0435\\u0441\\u043b\\u0438 \\u0435\\u0435 \\u0435\\u0449\\u0435 \\u043d\\u0435 \\u043e\\u0431\\u043e\\u0448\\u043b\\u0438\\n                childs = reqs[to_traverse]  # \\u0431\\u0435\\u0440\\u0435\\u043c \\u0434\\u0435\\u0442\\u0435\\u0439\\n                if len(childs) == 0: # \\u0435\\u0441\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0435\\u0439 \\u043d\\u0435\\u0442 - \\u043e\\u0431\\u0445\\u043e\\u0434\\u0438\\u043c \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443\\n                    roots[to_traverse] = False\\n                    res.append(to_traverse)\\n                    reqs[to_traverse] = None # \\u043f\\u043e\\u043c\\u0435\\u0447\\u0430\\u0435\\u043c \\u0447\\u0442\\u043e \\u043f\\u0440\\u043e\\u0448\\u043b\\u0438 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443\\n                else:\\n                    roots[to_traverse] = True\\n                    # print (roots)\\n                    stack.append(to_traverse) # \\u0435\\u0441\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0438 \\u0435\\u0441\\u0442\\u044c - \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0435\\u043c \\u0441\\u043d\\u0430\\u0447\\u0430\\u043b\\u0430 \\u0441\\u0435\\u0431\\u044f \\u0432 \\u0441\\u0442\\u044d\\u043a(\\u0447\\u0442\\u043e\\u0431\\u044b \\u043e\\u0431\\u043e\\u0439\\u0442\\u0438 \\u043f\\u043e\\u0442\\u043e\\u043c), \\u043f\\u043e\\u0442\\u043e\\u043c \\u0434\\u0435\\u0442\\u0435\\u0439\\n\\n                    for child in childs:\\n                        if roots[child] == True:\\n                            print(-1)\\n                            to_exit = True\\n                            break\\n\\n                    stack += childs\\n                    reqs[to_traverse] = [] # \\u043f\\u043e\\u0441\\u043b\\u0435 \\u0442\\u043e\\u0433\\u043e \\u043a\\u0430\\u043a \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0435\\u0439 - \\u043e\\u0431\\u043d\\u0443\\u043b\\u044f\\u0435\\u043c \\u0438\\u0445, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0431\\u043e\\u043b\\u044c\\u0448\\u0435 \\u043d\\u0435 \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0442\\u044c\\n\\ntraverse(main)\\n\\nif not to_exit:\\n    print(len(res))\\n    print(' '.join(map(str, res)))\", \"def dfs(start_node, edges, colors, result):\\n    stack = [start_node]\\n    while stack:\\n        current_node = stack[-1]\\n        if colors[current_node] == 2:\\n            stack.pop()\\n            continue\\n        colors[current_node] = 1\\n        children = edges[current_node]\\n        if not children:\\n            colors[current_node] = 2\\n            result.append(stack.pop())\\n        else:\\n            child = children.pop()\\n            if colors[child] == 1:\\n                return False\\n            stack.append(child)\\n    return True\\n\\n\\ndef find_courses_sequence(member_of_node, find_nodes, edges):\\n    colors = [0] * member_of_node\\n    result = []\\n    for node in find_nodes:\\n        if not dfs(node, edges, colors, result):\\n            return []\\n    return result\\n\\n\\ndef __starting_point():\\n    n, k = map(int, input().split())\\n    main_courses = [int(c)-1 for c in input().split()]\\n    courses = dict()\\n    for index in range(n):\\n        courses[index] = [int(d)-1 for d in input().split()[1:]]\\n\\n    result = find_courses_sequence(n, main_courses, courses)\\n\\n    if result:\\n        print(len(result))\\n        for v in result:\\n            print(v+1, end=\\\" \\\")\\n    else:\\n        print(-1)\\n\\n__starting_point()\", \"f = lambda: map(int, input().split())\\ng = lambda: [[] for x in range(n)]\\nn, k = f()\\nn += 1\\n\\ns, p = [], list(f())\\nc, d = [0] * n, [0] * n\\nu, v = g(), g()\\n\\nfor x in range(1, n):\\n    t = list(f())\\n    m = t.pop(0)\\n    if m:\\n        c[x] = m\\n        v[x] = t\\n        for y in t: u[y].append(x)\\n    else:\\n        s.append(x)\\n        d[x] = 1\\nwhile s:\\n    x = s.pop()\\n    for y in u[x]:\\n        c[y] -= 1\\n        d[y] = max(d[y], d[x] + 1)\\n        if c[y] == 0: s.append(y)\\n\\nif any(c[x] for x in p):\\n    print(-1)\\n    return\\n\\nq = [0] * n\\nwhile p:\\n    x = p.pop()\\n    if q[x] == 0:\\n        p += v[x]\\n        q[x] = 1\\n\\np = sorted((d[x], x) for x in range(n) if q[x])\\nprint(len(p))\\nfor d, x in p: print(x)\", \"#This code is dedicated to Vlada S.\\n\\nclass Course:\\n\\tdef __init__(self, reqs, number):\\n\\t\\tself.reqs = list(map(int, reqs.split()[1:]))\\n\\t\\tself.available = False\\n\\t\\tself.in_stack = False\\n\\t\\tself.number = number\\n\\nn, k = list(map(int, input().split()))\\nrequirements = list(map(int, input().split()))\\ncourses = {}\\n\\nanswer = \\\"\\\"\\n\\nfor i in range(n):\\n\\tcourses[i + 1]= Course(input(), i + 1)\\n\\nfor i in range(len(requirements)):\\n\\trequirements[i] = courses[requirements[i]]\\n\\nwhile requirements:\\n\\tdata = {}\\n\\n\\tcourse = requirements.pop()\\n\\n\\tif not course.available:\\n\\t\\trequirements.append(course)\\n\\n\\t\\tdone = True\\n\\n\\t\\tfor c in course.reqs:\\n\\t\\t\\tc = courses[c]\\n\\n\\t\\t\\tif not c.available:\\n\\t\\t\\t\\trequirements.append(c)\\n\\t\\t\\t\\tdone = False\\n\\n\\t\\tif done:\\n\\t\\t\\tanswer += \\\" \\\" + str(course.number)\\n\\t\\t\\tcourse.available = True\\n\\t\\telse:\\n\\t\\t\\tif course.in_stack:\\n\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tcourse.in_stack = True\\nelse:\\n\\tprint(answer.count(\\\" \\\"))\\n\\tprint(answer[1:])\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import sys\\nflag=True\\nsys.setrecursionlimit(2000000000)\\nc=[];st=[];\\ncur_adj=[]\\ndef topo(s):#Traversing the array and storing the vertices\\n    nonlocal c,st,flag;\\n    stack = [s]\\n    while(stack):\\n        s = stack[-1]\\n        c[s]=1; #Being Visited\\n        if(cur_adj[s] < len(adjli[s])):\\n            cur = adjli[s][cur_adj[s]]\\n            if(c[cur]==0):\\n                stack.append(cur)\\n            if(c[cur]==1):\\n                flag=False# If Back Edge , Then Not Possible\\n            cur_adj[s]+=1\\n        else:\\n            c[s]=2\\n            st.append(str(s))\\n            del stack[-1]\\n\\ntry:\\n    n,k=map(int,input().split(' '))\\n    main=list(map(int,input().split(' ')))\\n    depen=[]\\n    for i in range(n):\\n    \\tdepen.append(list(map(int,input().split(' ')))[1:]);c.append(0)\\n    \\tcur_adj.append(0)\\n    c.append(0)\\n    cur_adj.append(0)\\n    adjli=[]\\n    adjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n    for i in range(len(depen)):\\n        adjli.append(depen[i])#Appending Other Dependencies\\n    topo(0)#TopoLogical Sort Order\\n    st.pop(-1)#popping the assumed Main Couse\\n    if flag:# IF possible then print\\n        print(len(st))\\n        print(' '.join(st))\\n    else:\\n        print(-1)\\nexcept Exception as e:\\n    print(e,\\\"error\\\")\", \"'''import sys\\nflag=True\\nsys.setrecursionlimit(2000000)\\nc=[];st=[];\\ndef topo(s):#Traversing the array and storing the vertices\\n\\tnonlocal c,st,flag;\\n\\tc[s]=1; #Being Visited\\n\\tfor i in adjli[s]:#visiting neighbors\\n\\t\\tif c[i]==0:\\n\\t\\t\\ttopo(i)\\n\\t\\tif c[i]==1:\\n\\t\\t\\tflag=False# If Back Edge , Then Not Possible\\n\\tst.append(str(s))\\n\\tc[s]=2 # Visited\\n\\ntry:\\n\\tn,k=map(int,input().split(' '))#Number Of Courses,Dependencies\\n\\tmain=list(map(int,input().split(' ')))#Main Dependencies\\n\\tdepen=[]#Dependencies List\\n\\tfor i in range(n):\\n\\t\\tdepen.append(list(map(int,input().split(' ')))[1:]);c.append(0)#Append Input To Dependencies List, Marking Visited as 0(False)\\n\\tc.append(0)\\n\\tadjli=[]\\n\\tadjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n\\tfor i in range(len(depen)):\\n\\t\\tadjli.append(depen[i])#Appending Other Dependencies\\n\\ttopo(0)#TopoLogical Sort Order\\n\\tst.pop(-1)#popping the assumed Main Couse\\n\\tif flag:# IF possible then print\\n\\t\\tprint(len(st))\\n\\t\\tprint(' '.join(st))\\n\\telse:\\n\\t\\tprint(-1)\\nexcept Exception as e:\\n\\tprint(e,\\\"error\\\")'''\\n\\nimport sys\\nflag=True\\nsys.setrecursionlimit(2000000000)\\nc=[];st=[];\\ncur_adj=[]\\ndef topo(s):#Traversing the array and storing the vertices\\n    nonlocal c,st,flag;\\n    stack = [s]\\n    while(stack):\\n        s = stack[-1]\\n        c[s]=1; #Being Visited\\n        if(cur_adj[s] < len(adjli[s])):\\n            cur = adjli[s][cur_adj[s]]\\n            if(c[cur]==0):\\n                stack.append(cur)\\n            if(c[cur]==1):\\n                flag=False# If Back Edge , Then Not Possible\\n            cur_adj[s]+=1\\n        else:\\n            c[s]=2\\n            st.append(str(s))\\n            del stack[-1]\\n\\ntry:\\n    n,k=map(int,input().split(' '))\\n    main=list(map(int,input().split(' ')))\\n    depen=[]\\n    for i in range(n):\\n        depen.append(list(map(int,input().split(' ')))[1:]);c.append(0)\\n        cur_adj.append(0)\\n    c.append(0)\\n    cur_adj.append(0)\\n    adjli=[]\\n    adjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n    for i in range(len(depen)):\\n        adjli.append(depen[i])#Appending Other Dependencies\\n    topo(0)#TopoLogical Sort Order\\n    st.pop(-1)#popping the assumed Main Couse\\n    if flag:# IF possible then print\\n        print(len(st))\\n        print(' '.join(st))\\n    else:\\n        print(-1)\\nexcept Exception as e:\\n    print(e,\\\"error\\\")\", \"# https://codeforces.com/problemset/problem/770/C\\nn, k = list(map(int, input().split()))\\nK    = set(list(map(int, input().split())))\\ng    = {}\\nrg   = {}\\ndeg  = {}\\n\\ndef push_d(deg, u, val):\\n    if u not in deg:\\n        deg[u] = 0\\n    deg[u] += val\\n\\ndef push_g(g, u, v):\\n    if u not in g:\\n        g[u] = []\\n    g[u].append(v)\\n    \\nfor u in range(1, n+1):\\n    list_v = list(map(int, input().split()))[1:]\\n    deg[u] = 0\\n    \\n    for v in list_v:\\n        push_d(deg, u, 1)\\n        push_g(g,  v, u)\\n        push_g(rg, u, v)\\n        \\nS    = [x for x in K]\\nused = [0] * (n+1) \\ni = 0\\nwhile i<len(S):\\n    u = S[i]\\n    if u in rg:\\n        for v in rg[u]:\\n            if used[v] == 0:\\n                used[v] = 1\\n                S.append(v)\\n    i+=1\\n    \\nS    = {x:1 for x in S}    \\ndeg0 = [x for x in S if deg[x]==0]\\nans  = []\\n\\ndef process(g, deg, deg0, u):\\n    if u in g:\\n        for v in g[u]:\\n            if v in S:\\n                push_d(deg, v, -1)\\n        \\n                if deg[v] == 0:\\n                    deg0.append(v)\\n    \\nwhile len(deg0) > 0 and len(K) > 0:\\n    u = deg0.pop()\\n    ans.append(u)\\n    \\n    if u in K:\\n        K.remove(u)\\n        \\n    process(g, deg, deg0, u)    \\n    \\nif len(K) > 0:\\n    print(-1)\\nelse:\\n    print(len(ans))\\n    print(' '.join([str(x) for x in ans])) \\n    \\n#6 2\\n#5 6\\n#0\\n#1 1\\n#1 4 5\\n#2 2 1\\n#1 4\\n#2 5 3    \\n\", \"n,k=list(map(lambda x: int(x), input().split()))\\nm=list(map(lambda x: int(x), input().split()))\\nfrom types import GeneratorType\\ndef bootstrap(f, stack=[]):\\n    def wrappedfunc(*args, **kwargs):\\n        if stack:\\n            return f(*args, **kwargs)\\n        else:\\n            to = f(*args, **kwargs)\\n            while True:\\n                if type(to) is GeneratorType:\\n                    stack.append(to)\\n                    to = next(to)\\n                else:\\n                    stack.pop()\\n                    if not stack:\\n                        break\\n                    to = stack[-1].send(to)\\n            return to\\n\\n    return wrappedfunc\\nclass Graph:\\n\\n    def __init__(self, V):\\n        self.V = V\\n        self.adj = [[] for i in range(V)]\\n    @bootstrap\\n    def DFSUtil(self, temp, v, visited):\\n\\n        visited[v] = True\\n\\n\\n\\n        for i in self.adj[v]:\\n            if visited[i] == False:\\n                yield self.DFSUtil(temp, i, visited)\\n\\n        temp.append(v)\\n        yield temp\\n\\n    def addEdge(self, v, w):\\n        self.adj[v].append(w)\\n        # self.adj[w].append(v)\\n    @bootstrap\\n    def isCyclicUtil(self, v, visited, recStack):\\n\\n        # Mark current node as visited and\\n        # adds to recursion stack\\n        visited[v] = True\\n        recStack[v] = True\\n\\n        # Recur for all neighbours\\n        # if any neighbour is visited and in\\n        # recStack then graph is cyclic\\n        for neighbour in self.adj[v]:\\n            if visited[neighbour] == False:\\n                ans =yield self.isCyclicUtil(neighbour, visited, recStack)\\n                if  ans == True:\\n                    yield True\\n            elif recStack[neighbour] == True:\\n                yield True\\n\\n        # The node needs to be poped from\\n        # recursion stack before function ends\\n        recStack[v] = False\\n        yield False\\n\\n    # Returns true if graph is cyclic else false\\n    def isCyclic(self,nodes):\\n        visited = [False] * self.V\\n        recStack = [False] * self.V\\n        for node in nodes:\\n            if visited[node] == False:\\n                if self.isCyclicUtil(node, visited, recStack) == True:\\n                    return True\\n        return False\\n\\n\\nG=Graph(n)\\n\\nfor i in range(0,n):\\n\\n    x=list(map(lambda x: int(x), input().split()))\\n    if x[0]==0:\\n        continue\\n    else:\\n        for k in range(1,x[0]+1):\\n            G.addEdge(i,x[k]-1)\\nvisited=[False for _ in range(n)]\\n\\npath=[]\\n# print(G.adj)\\nfor subj in m:\\n    temp = []\\n    if visited[subj-1]==False:\\n\\n        G.DFSUtil(temp,subj-1,visited)\\n\\n        path.extend(temp)\\nif G.isCyclic([x-1 for x in m]):\\n    print(-1)\\nelse:\\n    print(len(path))\\n    for p in path:\\n        print(p+1,end=\\\" \\\")\\n    print()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n\",\n    \"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\",\n    \"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\",\n    \"5 3\\n2 1 4\\n0\\n0\\n1 5\\n0\\n0\\n\",\n    \"5 2\\n4 1\\n0\\n1 4\\n1 5\\n0\\n2 1 2\\n\",\n    \"5 2\\n4 5\\n2 3 4\\n1 4\\n1 4\\n0\\n0\\n\",\n    \"6 6\\n5 4 3 2 6 1\\n1 4\\n0\\n2 2 6\\n2 3 6\\n3 3 4 6\\n0\\n\",\n    \"6 6\\n4 1 6 3 2 5\\n2 3 5\\n4 1 3 4 5\\n1 5\\n2 3 5\\n0\\n2 1 5\\n\",\n    \"6 5\\n2 4 1 3 5\\n0\\n0\\n0\\n1 1\\n0\\n1 3\\n\",\n    \"7 6\\n4 3 2 1 6 5\\n0\\n2 4 5\\n1 6\\n1 7\\n1 6\\n0\\n1 4\\n\",\n    \"7 2\\n1 5\\n5 2 3 4 5 6\\n2 1 7\\n0\\n3 1 2 7\\n0\\n2 5 7\\n0\\n\",\n    \"7 6\\n2 5 3 1 7 6\\n1 7\\n2 3 7\\n0\\n0\\n0\\n1 3\\n1 2\\n\",\n    \"3 3\\n1 3 2\\n0\\n1 3\\n1 1\\n\",\n    \"10 1\\n1\\n1 5\\n1 3\\n0\\n1 10\\n0\\n1 8\\n1 1\\n2 7 4\\n2 6 2\\n0\\n\",\n    \"1 1\\n1\\n0\\n\",\n    \"2 2\\n1 2\\n0\\n0\\n\",\n    \"2 2\\n2 1\\n0\\n0\\n\",\n    \"2 1\\n1\\n1 2\\n0\\n\",\n    \"2 1\\n1\\n0\\n0\\n\",\n    \"2 1\\n2\\n0\\n1 1\\n\",\n    \"2 1\\n2\\n0\\n0\\n\",\n    \"3 1\\n1\\n2 2 3\\n0\\n1 2\\n\",\n    \"3 3\\n2 1 3\\n0\\n2 1 3\\n1 2\\n\",\n    \"10 3\\n8 4 1\\n1 3\\n0\\n0\\n0\\n1 1\\n2 10 9\\n1 4\\n3 5 1 2\\n2 2 7\\n2 8 4\\n\",\n    \"6 6\\n1 2 3 4 5 6\\n2 2 6\\n1 3\\n2 4 5\\n0\\n1 4\\n1 2\\n\",\n    \"3 2\\n1 3\\n0\\n0\\n1 1\\n\",\n    \"3 1\\n1\\n2 2 3\\n0\\n0\\n\",\n    \"3 3\\n3 1 2\\n0\\n0\\n0\\n\",\n    \"3 3\\n1 2 3\\n0\\n0\\n0\\n\",\n    \"3 2\\n2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 1 2\\n0\\n0\\n0\\n\",\n    \"3 2\\n3 2\\n0\\n1 3\\n1 1\\n\",\n    \"3 3\\n2 1 3\\n0\\n1 1\\n0\\n\",\n    \"3 2\\n3 1\\n1 3\\n0\\n0\\n\",\n    \"3 1\\n3\\n0\\n0\\n1 2\\n\",\n    \"3 1\\n1\\n0\\n1 1\\n0\\n\",\n    \"3 2\\n3 2\\n0\\n1 1\\n1 2\\n\",\n    \"3 3\\n1 2 3\\n0\\n1 1\\n2 1 2\\n\",\n    \"4 2\\n2 3\\n2 3 4\\n1 1\\n0\\n0\\n\",\n    \"4 4\\n3 2 1 4\\n2 2 3\\n1 1\\n1 2\\n1 3\\n\",\n    \"4 2\\n4 3\\n0\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n2 2 3\\n0\\n2 2 4\\n0\\n\",\n    \"4 1\\n2\\n0\\n0\\n2 1 4\\n2 1 2\\n\",\n    \"4 4\\n3 1 4 2\\n1 2\\n1 3\\n1 2\\n0\\n\",\n    \"4 4\\n1 3 2 4\\n1 3\\n1 3\\n0\\n1 2\\n\",\n    \"4 1\\n4\\n2 2 4\\n0\\n1 2\\n0\\n\",\n    \"4 2\\n3 1\\n0\\n0\\n0\\n0\\n\",\n    \"4 4\\n3 1 4 2\\n1 4\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n1 4\\n2 1 3\\n1 4\\n1 3\\n\",\n    \"4 2\\n3 2\\n0\\n1 4\\n1 1\\n0\\n\",\n    \"4 4\\n2 3 1 4\\n0\\n2 1 3\\n2 1 4\\n0\\n\",\n    \"4 4\\n4 1 2 3\\n2 2 4\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n0\\n1 1\\n0\\n0\\n\",\n    \"5 1\\n5\\n0\\n1 1\\n2 2 5\\n0\\n0\\n\",\n    \"5 5\\n1 2 4 3 5\\n0\\n0\\n2 1 2\\n1 5\\n0\\n\",\n    \"5 5\\n2 1 5 4 3\\n1 4\\n0\\n0\\n0\\n1 2\\n\",\n    \"5 2\\n2 4\\n1 2\\n0\\n1 2\\n1 2\\n0\\n\",\n    \"5 2\\n2 1\\n1 3\\n1 3\\n1 1\\n3 1 2 3\\n1 3\\n\",\n    \"5 4\\n5 2 1 3\\n2 3 5\\n1 3\\n0\\n0\\n2 2 4\\n\",\n    \"5 4\\n5 1 4 2\\n0\\n0\\n1 5\\n1 1\\n0\\n\",\n    \"5 2\\n1 3\\n0\\n2 4 5\\n0\\n1 2\\n2 1 2\\n\",\n    \"5 1\\n5\\n1 4\\n2 1 4\\n2 4 5\\n2 2 5\\n1 1\\n\",\n    \"5 4\\n3 2 1 4\\n1 2\\n0\\n0\\n0\\n0\\n\",\n    \"5 1\\n2\\n3 2 3 4\\n0\\n2 2 4\\n0\\n4 1 2 3 4\\n\",\n    \"5 3\\n5 2 4\\n1 4\\n0\\n0\\n0\\n0\\n\",\n    \"5 1\\n3\\n2 4 5\\n0\\n0\\n0\\n1 3\\n\",\n    \"5 3\\n2 5 1\\n1 2\\n0\\n0\\n1 5\\n0\\n\",\n    \"5 3\\n4 2 3\\n0\\n0\\n1 2\\n0\\n1 4\\n\",\n    \"6 4\\n2 1 4 3\\n3 3 4 5\\n1 4\\n0\\n1 3\\n4 2 3 4 6\\n1 3\\n\",\n    \"6 2\\n3 6\\n2 2 3\\n0\\n1 1\\n1 6\\n0\\n0\\n\",\n    \"6 1\\n2\\n0\\n0\\n1 6\\n0\\n1 2\\n0\\n\",\n    \"6 3\\n6 5 1\\n0\\n1 1\\n0\\n1 3\\n0\\n1 5\\n\",\n    \"6 6\\n1 3 6 5 4 2\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"6 5\\n3 4 1 6 5\\n2 2 6\\n2 4 5\\n1 1\\n0\\n1 4\\n0\\n\",\n    \"6 2\\n5 2\\n1 4\\n0\\n1 2\\n0\\n0\\n1 5\\n\",\n    \"6 6\\n4 5 1 6 3 2\\n0\\n1 6\\n1 1\\n2 1 3\\n1 1\\n2 1 3\\n\",\n    \"6 6\\n3 2 4 1 5 6\\n1 6\\n1 1\\n0\\n1 5\\n0\\n0\\n\",\n    \"6 1\\n3\\n2 4 6\\n2 4 6\\n2 1 2\\n1 2\\n1 2\\n1 5\\n\",\n    \"6 6\\n5 1 2 3 6 4\\n0\\n0\\n0\\n0\\n1 4\\n1 1\\n\",\n    \"6 5\\n3 6 2 4 1\\n1 4\\n1 3\\n0\\n0\\n0\\n2 1 5\\n\",\n    \"6 4\\n4 3 6 5\\n0\\n0\\n3 1 4 5\\n1 6\\n1 6\\n0\\n\",\n    \"6 1\\n1\\n0\\n0\\n1 5\\n0\\n0\\n1 5\\n\",\n    \"6 6\\n4 2 5 6 1 3\\n1 3\\n0\\n2 5 6\\n2 2 6\\n1 2\\n1 4\\n\",\n    \"7 7\\n1 7 6 2 5 4 3\\n0\\n2 5 6\\n1 5\\n1 2\\n0\\n1 1\\n1 1\\n\",\n    \"7 6\\n6 3 5 1 4 7\\n0\\n0\\n0\\n0\\n1 1\\n1 2\\n1 1\\n\",\n    \"7 2\\n2 3\\n0\\n0\\n0\\n0\\n0\\n1 4\\n0\\n\",\n    \"7 4\\n7 5 4 2\\n0\\n2 6 7\\n0\\n1 3\\n2 2 6\\n0\\n2 3 4\\n\",\n    \"7 6\\n5 4 2 1 6 7\\n2 2 7\\n1 5\\n0\\n0\\n1 3\\n1 2\\n0\\n\",\n    \"7 4\\n2 1 6 7\\n0\\n2 3 6\\n1 6\\n0\\n2 1 3\\n1 7\\n0\\n\",\n    \"7 2\\n5 1\\n4 2 5 6 7\\n1 5\\n5 1 2 5 6 7\\n1 2\\n0\\n0\\n4 2 4 5 6\\n\",\n    \"7 1\\n5\\n2 2 5\\n0\\n2 5 7\\n0\\n1 6\\n0\\n0\\n\",\n    \"7 6\\n5 7 2 4 3 6\\n2 5 7\\n0\\n3 2 5 7\\n2 2 6\\n0\\n0\\n2 2 5\\n\",\n    \"7 4\\n6 4 7 3\\n0\\n0\\n2 2 5\\n1 6\\n2 1 7\\n2 1 2\\n0\\n\",\n    \"7 5\\n1 5 4 7 2\\n1 4\\n4 1 4 6 7\\n2 1 4\\n1 6\\n3 3 4 7\\n0\\n0\\n\",\n    \"2 1\\n1\\n0\\n1 1\\n\",\n    \"2 1\\n1\\n1 2\\n1 1\\n\",\n    \"2 1\\n2\\n1 2\\n0\\n\",\n    \"2 1\\n2\\n1 2\\n1 1\\n\",\n    \"2 2\\n1 2\\n1 2\\n0\\n\",\n    \"2 2\\n2 1\\n0\\n1 1\\n\",\n    \"2 2\\n2 1\\n1 2\\n1 1\\n\",\n    \"7 1\\n4\\n0\\n6 1 3 4 5 6 7\\n4 1 4 6 7\\n2 1 7\\n4 1 3 6 7\\n2 3 4\\n0\\n\",\n    \"7 2\\n1 2\\n0\\n0\\n3 2 4 6\\n1 3\\n1 6\\n1 5\\n0\\n\",\n    \"7 4\\n1 7 6 2\\n1 7\\n0\\n0\\n0\\n1 1\\n0\\n0\\n\",\n    \"7 6\\n3 7 4 1 6 2\\n2 4 6\\n0\\n0\\n3 2 3 5\\n1 3\\n1 2\\n3 1 5 6\\n\",\n    \"8 5\\n7 1 2 8 3\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"8 3\\n4 8 7\\n0\\n1 3\\n0\\n1 2\\n0\\n0\\n1 1\\n0\\n\",\n    \"8 2\\n2 6\\n0\\n0\\n0\\n2 5 7\\n0\\n2 1 2\\n0\\n3 1 2 3\\n\",\n    \"8 6\\n8 3 6 4 7 5\\n0\\n1 4\\n1 4\\n1 8\\n1 7\\n1 4\\n0\\n0\\n\",\n    \"8 7\\n2 5 3 6 4 8 1\\n3 3 5 6\\n1 3\\n2 4 5\\n4 1 2 5 6\\n2 1 2\\n2 2 8\\n1 2\\n2 6 7\\n\",\n    \"8 5\\n2 5 8 3 1\\n3 2 5 6\\n1 5\\n1 4\\n5 1 5 6 7 8\\n0\\n2 2 8\\n4 1 3 5 6\\n1 2\\n\",\n    \"8 5\\n6 4 7 5 1\\n1 7\\n1 6\\n1 1\\n0\\n0\\n0\\n1 5\\n1 7\\n\",\n    \"8 3\\n3 1 8\\n0\\n3 4 6 7\\n2 6 7\\n2 3 6\\n2 4 6\\n1 1\\n1 1\\n1 3\\n\",\n    \"8 8\\n6 3 1 2 4 8 5 7\\n0\\n0\\n0\\n2 5 7\\n0\\n1 5\\n0\\n1 1\\n\",\n    \"8 5\\n2 1 5 7 6\\n1 8\\n3 3 4 6\\n0\\n0\\n1 6\\n0\\n0\\n0\\n\",\n    \"8 8\\n3 1 2 7 8 4 5 6\\n2 4 8\\n2 3 8\\n1 6\\n0\\n2 4 6\\n0\\n5 2 3 4 5 8\\n2 3 4\\n\",\n    \"8 3\\n4 3 1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"8 1\\n3\\n0\\n3 1 3 6\\n0\\n0\\n1 1\\n0\\n1 6\\n1 7\\n\",\n    \"8 8\\n5 8 7 2 1 3 4 6\\n1 3\\n3 1 3 4\\n0\\n0\\n1 1\\n1 5\\n0\\n2 4 6\\n\",\n    \"8 7\\n6 3 7 8 1 5 4\\n0\\n2 1 5\\n0\\n2 7 8\\n1 4\\n0\\n0\\n0\\n\",\n    \"9 9\\n6 3 1 4 2 9 5 7 8\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"9 3\\n5 7 3\\n3 3 4 5\\n4 4 6 7 9\\n2 1 2\\n2 3 5\\n1 3\\n4 4 5 7 8\\n3 1 4 5\\n3 1 3 4\\n7 1 2 4 5 6 7 8\\n\",\n    \"9 6\\n1 6 7 4 5 3\\n2 2 6\\n3 5 6 8\\n5 2 4 5 6 9\\n3 5 6 8\\n0\\n0\\n5 2 3 5 6 9\\n4 1 3 5 6\\n5 1 2 4 6 8\\n\",\n    \"9 8\\n4 2 9 1 8 3 7 6\\n0\\n2 1 8\\n0\\n0\\n1 1\\n2 1 8\\n2 6 8\\n3 4 5 9\\n5 1 2 5 7 8\\n\",\n    \"9 2\\n6 9\\n2 3 9\\n0\\n1 8\\n1 6\\n3 3 6 7\\n1 2\\n1 9\\n0\\n0\\n\",\n    \"9 6\\n5 4 3 2 6 7\\n3 4 5 9\\n1 6\\n4 1 5 8 9\\n3 3 5 6\\n0\\n0\\n2 3 8\\n1 3\\n0\\n\",\n    \"9 8\\n2 8 4 7 3 6 9 5\\n0\\n1 4\\n0\\n0\\n0\\n1 8\\n0\\n3 2 3 7\\n0\\n\",\n    \"9 6\\n6 7 1 5 9 2\\n0\\n0\\n0\\n0\\n1 4\\n0\\n0\\n2 1 3\\n1 6\\n\",\n    \"9 4\\n5 1 2 3\\n1 7\\n0\\n1 8\\n0\\n0\\n3 1 5 8\\n1 6\\n2 5 7\\n2 1 4\\n\",\n    \"9 8\\n4 8 6 9 5 7 2 3\\n0\\n1 4\\n0\\n3 2 6 8\\n1 6\\n1 7\\n0\\n0\\n2 3 6\\n\",\n    \"9 3\\n8 5 3\\n3 3 6 9\\n1 5\\n1 5\\n1 8\\n1 2\\n1 3\\n1 9\\n1 5\\n0\\n\",\n    \"9 6\\n7 3 1 6 4 2\\n1 3\\n0\\n1 7\\n1 8\\n1 4\\n1 7\\n1 8\\n0\\n2 1 7\\n\",\n    \"9 2\\n7 4\\n1 2\\n0\\n1 7\\n0\\n1 1\\n0\\n0\\n2 2 6\\n1 5\\n\",\n    \"9 5\\n3 8 2 5 1\\n1 5\\n3 1 6 7\\n3 4 6 8\\n3 2 6 9\\n2 7 9\\n2 5 7\\n1 2\\n2 4 5\\n2 1 6\\n\",\n    \"9 4\\n6 9 7 8\\n3 5 8 9\\n1 3\\n1 4\\n0\\n2 4 9\\n2 4 9\\n5 2 3 4 8 9\\n0\\n1 7\\n\",\n    \"10 1\\n7\\n2 4 10\\n1 8\\n2 4 8\\n0\\n1 3\\n1 2\\n2 3 5\\n1 7\\n0\\n1 1\\n\",\n    \"10 2\\n9 4\\n0\\n0\\n0\\n0\\n1 7\\n0\\n0\\n1 9\\n0\\n0\\n\",\n    \"10 3\\n7 5 3\\n3 3 4 5\\n1 10\\n1 7\\n3 2 6 7\\n1 7\\n0\\n0\\n3 1 4 6\\n3 2 3 5\\n1 6\\n\",\n    \"10 1\\n1\\n1 5\\n1 1\\n3 4 6 10\\n1 1\\n0\\n4 1 2 5 9\\n4 1 6 9 10\\n6 1 2 3 6 9 10\\n2 2 5\\n4 1 2 5 9\\n\",\n    \"10 1\\n4\\n0\\n0\\n0\\n0\\n1 10\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"10 10\\n6 2 4 5 8 1 9 3 10 7\\n4 2 7 8 9\\n2 7 9\\n5 1 6 8 9 10\\n2 7 9\\n6 1 4 6 7 8 9\\n1 8\\n0\\n2 4 9\\n0\\n4 2 4 7 9\\n\",\n    \"10 5\\n2 1 10 4 9\\n2 3 6\\n5 1 6 7 8 10\\n3 4 6 7\\n2 1 6\\n2 6 7\\n1 3\\n1 4\\n3 5 6 10\\n4 1 2 8 10\\n4 1 5 6 7\\n\",\n    \"10 5\\n4 8 3 1 6\\n0\\n1 10\\n0\\n0\\n1 3\\n2 3 5\\n1 3\\n1 10\\n2 1 6\\n0\\n\",\n    \"10 8\\n1 5 4 10 6 2 3 9\\n7 3 4 5 6 7 8 10\\n1 5\\n4 2 5 7 10\\n3 2 5 6\\n0\\n3 2 5 7\\n1 2\\n8 1 2 3 5 6 7 9 10\\n4 2 4 6 7\\n3 4 6 7\\n\",\n    \"10 5\\n6 9 8 5 2\\n2 7 9\\n4 4 5 6 7\\n2 6 7\\n2 5 8\\n2 6 9\\n1 9\\n2 2 6\\n3 1 2 7\\n3 3 5 6\\n6 1 2 5 6 8 9\\n\",\n    \"10 7\\n7 10 5 1 9 4 3\\n4 2 4 9 10\\n5 1 4 6 8 9\\n7 2 4 5 6 7 8 10\\n3 3 5 10\\n2 7 10\\n3 4 5 9\\n6 1 2 3 4 6 8\\n4 1 3 4 10\\n1 5\\n1 1\\n\",\n    \"10 9\\n5 1 3 6 10 8 2 9 7\\n0\\n0\\n2 1 6\\n1 3\\n1 4\\n2 5 7\\n1 6\\n0\\n1 8\\n0\\n\",\n    \"10 4\\n2 5 10 9\\n2 2 4\\n5 3 4 6 7 10\\n2 7 10\\n4 1 3 8 10\\n2 6 10\\n2 7 10\\n1 1\\n3 6 7 10\\n1 7\\n3 1 7 8\\n\",\n    \"10 8\\n6 8 2 1 7 10 3 4\\n0\\n2 1 4\\n2 6 7\\n0\\n3 1 8 9\\n3 1 8 9\\n0\\n0\\n1 6\\n1 8\\n\",\n    \"10 3\\n1 6 3\\n1 4\\n1 4\\n0\\n0\\n2 3 10\\n1 2\\n0\\n1 4\\n0\\n1 2\\n\",\n    \"11 2\\n10 7\\n5 2 3 6 10 11\\n0\\n1 8\\n5 1 3 6 9 10\\n4 1 2 3 6\\n1 5\\n5 2 6 9 10 11\\n5 2 3 4 7 11\\n3 3 6 8\\n6 2 4 5 6 8 9\\n3 2 3 5\\n\",\n    \"11 11\\n3 2 1 7 8 4 10 11 9 6 5\\n3 2 7 11\\n0\\n0\\n1 11\\n1 1\\n1 8\\n2 4 5\\n0\\n1 4\\n0\\n0\\n\",\n    \"11 7\\n11 2 1 7 9 8 6\\n0\\n7 3 4 5 6 8 10 11\\n3 1 5 8\\n1 11\\n3 1 7 8\\n7 1 3 4 5 7 8 10\\n3 4 6 8\\n1 5\\n2 8 10\\n4 1 4 5 7\\n5 1 4 6 8 10\\n\",\n    \"11 6\\n7 1 10 3 2 11\\n0\\n1 11\\n0\\n0\\n1 9\\n1 5\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"11 7\\n6 9 7 3 4 10 11\\n4 3 6 8 11\\n3 3 5 9\\n2 6 7\\n1 6\\n1 4\\n0\\n0\\n2 7 9\\n0\\n2 4 11\\n3 6 7 9\\n\",\n    \"11 5\\n10 11 8 2 7\\n1 9\\n1 3\\n0\\n1 6\\n1 1\\n0\\n0\\n1 2\\n2 4 8\\n0\\n0\\n\",\n    \"11 6\\n6 3 11 1 9 4\\n6 2 3 6 7 8 9\\n4 5 6 8 10\\n4 1 2 6 8\\n7 1 3 5 6 7 9 11\\n4 3 6 7 8\\n1 8\\n2 3 9\\n0\\n0\\n5 1 5 7 8 9\\n5 1 2 3 7 8\\n\",\n    \"11 6\\n4 2 9 7 3 1\\n1 11\\n0\\n1 10\\n1 11\\n3 7 8 10\\n1 11\\n1 11\\n1 11\\n0\\n1 2\\n1 2\\n\",\n    \"11 5\\n3 2 5 7 6\\n4 3 5 7 9\\n2 7 9\\n3 7 9 11\\n5 5 6 7 9 10\\n3 7 9 11\\n6 2 3 5 7 10 11\\n0\\n2 7 10\\n0\\n2 2 11\\n2 7 9\\n\",\n    \"11 11\\n11 6 4 7 8 5 1 3 2 9 10\\n5 3 4 7 9 11\\n0\\n1 2\\n1 3\\n2 3 4\\n6 1 3 4 8 10 11\\n1 3\\n2 2 4\\n3 2 4 11\\n5 4 5 7 9 11\\n4 2 3 4 7\\n\",\n    \"11 6\\n7 1 6 4 3 8\\n0\\n0\\n1 2\\n1 1\\n0\\n0\\n1 8\\n0\\n0\\n1 1\\n0\\n\",\n    \"11 3\\n9 11 5\\n0\\n0\\n0\\n0\\n1 8\\n0\\n2 1 11\\n0\\n1 2\\n0\\n0\\n\",\n    \"11 11\\n5 4 2 1 6 10 3 7 11 8 9\\n0\\n1 3\\n0\\n0\\n0\\n2 9 11\\n1 9\\n0\\n0\\n0\\n0\\n\",\n    \"11 10\\n9 6 10 3 2 8 4 7 11 5\\n1 2\\n0\\n5 1 8 9 10 11\\n4 1 7 8 11\\n3 2 7 11\\n3 1 7 10\\n0\\n2 6 11\\n6 1 2 6 7 10 11\\n2 1 11\\n2 1 7\\n\",\n    \"11 10\\n5 8 7 6 1 4 9 3 2 11\\n3 3 8 10\\n2 4 8\\n1 5\\n2 1 11\\n1 4\\n3 4 8 9\\n2 3 11\\n1 5\\n3 1 5 8\\n2 3 5\\n0\\n\",\n    \"12 9\\n9 2 5 7 6 1 10 12 11\\n0\\n3 6 7 12\\n1 4\\n1 7\\n1 3\\n1 1\\n0\\n0\\n2 1 4\\n1 3\\n0\\n2 2 10\\n\",\n    \"12 10\\n2 6 1 5 7 9 10 8 12 3\\n1 10\\n1 9\\n1 11\\n0\\n1 10\\n0\\n1 3\\n1 7\\n1 6\\n1 11\\n0\\n0\\n\",\n    \"12 10\\n9 11 3 6 4 12 2 7 10 8\\n1 7\\n3 7 8 9\\n3 1 8 11\\n4 1 7 9 10\\n1 4\\n1 12\\n1 2\\n1 2\\n0\\n2 1 9\\n1 7\\n1 7\\n\",\n    \"12 3\\n8 10 11\\n4 2 5 6 7\\n5 4 7 8 10 11\\n6 2 4 5 6 8 10\\n2 6 8\\n0\\n3 5 7 8\\n0\\n2 3 7\\n8 2 4 5 6 8 10 11 12\\n2 4 7\\n6 2 3 5 6 7 12\\n5 1 3 6 7 8\\n\",\n    \"12 1\\n8\\n2 2 4\\n1 9\\n1 10\\n1 12\\n4 6 10 11 12\\n0\\n0\\n1 9\\n0\\n1 8\\n0\\n0\\n\",\n    \"12 10\\n4 10 9 6 7 2 1 11 3 8\\n1 4\\n0\\n7 2 4 5 6 7 8 11\\n3 1 10 11\\n3 4 8 12\\n6 4 7 8 10 11 12\\n2 2 11\\n1 11\\n6 3 4 8 10 11 12\\n1 12\\n1 1\\n0\\n\",\n    \"12 3\\n4 7 8\\n2 11 12\\n0\\n0\\n2 3 9\\n3 7 11 12\\n5 1 3 7 8 10\\n1 3\\n0\\n2 2 8\\n1 11\\n0\\n2 8 11\\n\",\n    \"12 9\\n2 10 6 3 4 12 7 1 5\\n0\\n0\\n0\\n1 8\\n0\\n1 8\\n0\\n1 3\\n0\\n0\\n0\\n1 8\\n\",\n    \"12 1\\n10\\n0\\n1 12\\n2 2 9\\n0\\n2 1 2\\n3 1 7 8\\n3 8 9 10\\n0\\n0\\n3 5 11 12\\n0\\n0\\n\",\n    \"12 4\\n5 1 7 3\\n0\\n3 4 5 12\\n0\\n1 10\\n1 12\\n1 9\\n3 3 4 9\\n1 1\\n1 11\\n1 5\\n2 1 4\\n0\\n\",\n    \"12 2\\n11 4\\n0\\n0\\n0\\n1 5\\n0\\n0\\n0\\n0\\n1 2\\n0\\n0\\n0\\n\",\n    \"12 2\\n6 8\\n6 2 4 5 7 9 11\\n4 8 9 11 12\\n0\\n2 8 9\\n2 8 12\\n4 2 3 5 9\\n2 9 12\\n0\\n0\\n4 3 4 7 9\\n2 7 8\\n0\\n\",\n    \"12 10\\n8 7 9 5 10 6 4 12 3 11\\n1 5\\n1 10\\n1 1\\n1 5\\n1 7\\n1 11\\n1 10\\n2 1 3\\n0\\n1 1\\n1 8\\n0\\n\",\n    \"12 1\\n4\\n2 4 11\\n1 8\\n2 2 5\\n0\\n0\\n1 3\\n0\\n0\\n1 2\\n1 9\\n2 2 6\\n0\\n\",\n    \"12 2\\n10 5\\n0\\n0\\n3 1 5 11\\n1 3\\n0\\n1 1\\n2 5 9\\n2 5 7\\n1 8\\n2 6 9\\n0\\n1 1\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n1 2 3 4 5 \\n\",\n    \"6\\n1 2 9 4 5 3 \\n\",\n    \"-1\\n\",\n    \"3\\n1 2 4 \\n\",\n    \"2\\n1 4 \\n\",\n    \"2\\n4 5 \\n\",\n    \"6\\n2 6 3 4 1 5 \\n\",\n    \"6\\n5 3 1 4 2 6 \\n\",\n    \"5\\n1 2 3 4 5 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n1 3 2 \\n\",\n    \"2\\n5 1 \\n\",\n    \"1\\n1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n2 1 \\n\",\n    \"1\\n1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"1\\n2 \\n\",\n    \"3\\n2 3 1 \\n\",\n    \"-1\\n\",\n    \"6\\n3 1 2 4 5 8 \\n\",\n    \"6\\n4 5 3 2 6 1 \\n\",\n    \"2\\n1 3 \\n\",\n    \"3\\n2 3 1 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n1 2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 3 2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n3 1 \\n\",\n    \"2\\n2 3 \\n\",\n    \"1\\n1 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"4\\n3 4 1 2 \\n\",\n    \"-1\\n\",\n    \"2\\n3 4 \\n\",\n    \"4\\n2 4 3 1 \\n\",\n    \"1\\n2 \\n\",\n    \"-1\\n\",\n    \"4\\n3 1 2 4 \\n\",\n    \"1\\n4 \\n\",\n    \"2\\n1 3 \\n\",\n    \"4\\n4 1 2 3 \\n\",\n    \"-1\\n\",\n    \"4\\n1 4 2 3 \\n\",\n    \"4\\n1 4 3 2 \\n\",\n    \"4\\n2 4 1 3 \\n\",\n    \"1\\n1 \\n\",\n    \"1\\n5 \\n\",\n    \"5\\n1 2 3 5 4 \\n\",\n    \"5\\n4 1 2 3 5 \\n\",\n    \"2\\n2 4 \\n\",\n    \"-1\\n\",\n    \"5\\n3 2 4 5 1 \\n\",\n    \"4\\n1 2 4 5 \\n\",\n    \"2\\n1 3 \\n\",\n    \"-1\\n\",\n    \"4\\n2 1 3 4 \\n\",\n    \"1\\n2 \\n\",\n    \"3\\n2 4 5 \\n\",\n    \"1\\n3 \\n\",\n    \"3\\n2 1 5 \\n\",\n    \"3\\n2 3 4 \\n\",\n    \"6\\n3 4 2 6 5 1 \\n\",\n    \"-1\\n\",\n    \"1\\n2 \\n\",\n    \"3\\n1 5 6 \\n\",\n    \"6\\n1 2 3 4 5 6 \\n\",\n    \"6\\n4 5 2 6 1 3 \\n\",\n    \"2\\n2 5 \\n\",\n    \"6\\n1 3 6 2 4 5 \\n\",\n    \"6\\n6 1 2 3 5 4 \\n\",\n    \"-1\\n\",\n    \"6\\n1 2 3 4 5 6 \\n\",\n    \"6\\n4 1 3 2 5 6 \\n\",\n    \"5\\n1 6 4 5 3 \\n\",\n    \"1\\n1 \\n\",\n    \"-1\\n\",\n    \"7\\n1 5 6 2 3 4 7 \\n\",\n    \"7\\n1 2 3 4 5 6 7 \\n\",\n    \"2\\n2 3 \\n\",\n    \"6\\n6 3 4 7 2 5 \\n\",\n    \"7\\n3 5 2 7 1 4 6 \\n\",\n    \"5\\n1 7 6 3 2 \\n\",\n    \"6\\n5 2 6 4 7 1 \\n\",\n    \"2\\n6 5 \\n\",\n    \"6\\n2 5 7 3 6 4 \\n\",\n    \"7\\n1 2 7 5 3 6 4 \\n\",\n    \"7\\n6 4 1 7 2 3 5 \\n\",\n    \"1\\n1 \\n\",\n    \"-1\\n\",\n    \"1\\n2 \\n\",\n    \"-1\\n\",\n    \"2\\n2 1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"-1\\n\",\n    \"3\\n1 7 4 \\n\",\n    \"2\\n1 2 \\n\",\n    \"4\\n7 1 2 6 \\n\",\n    \"7\\n2 3 5 4 6 1 7 \\n\",\n    \"5\\n1 2 3 7 8 \\n\",\n    \"6\\n1 3 2 4 7 8 \\n\",\n    \"3\\n1 2 6 \\n\",\n    \"6\\n8 4 3 7 5 6 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5\\n5 7 1 4 6 \\n\",\n    \"5\\n1 6 7 3 8 \\n\",\n    \"8\\n1 2 3 5 7 4 6 8 \\n\",\n    \"8\\n8 1 3 4 6 2 5 7 \\n\",\n    \"8\\n4 6 3 8 1 2 5 7 \\n\",\n    \"3\\n1 3 4 \\n\",\n    \"1\\n3 \\n\",\n    \"8\\n3 1 4 2 5 6 7 8 \\n\",\n    \"7\\n1 3 7 8 4 5 6 \\n\",\n    \"9\\n1 2 3 4 5 6 7 8 9 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n2 6 9 \\n\",\n    \"-1\\n\",\n    \"8\\n4 2 3 5 7 8 6 9 \\n\",\n    \"7\\n1 2 4 5 6 7 9 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"7\\n8 7 3 1 2 4 6 \\n\",\n    \"2\\n4 7 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n4 9 \\n\",\n    \"3\\n7 3 5 \\n\",\n    \"2\\n5 1 \\n\",\n    \"1\\n4 \\n\",\n    \"10\\n7 9 2 4 8 1 6 10 3 5 \\n\",\n    \"-1\\n\",\n    \"7\\n1 3 4 5 6 10 8 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5\\n4 1 2 3 6 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"6\\n1 11 2 3 7 10 \\n\",\n    \"7\\n6 7 3 4 9 11 10 \\n\",\n    \"6\\n3 2 7 8 10 11 \\n\",\n    \"-1\\n\",\n    \"8\\n2 11 1 10 3 4 7 9 \\n\",\n    \"8\\n7 9 2 11 3 5 10 6 \\n\",\n    \"11\\n2 3 4 7 11 9 1 5 8 10 6 \\n\",\n    \"7\\n1 2 3 4 6 8 7 \\n\",\n    \"5\\n2 8 5 9 11 \\n\",\n    \"11\\n1 3 2 4 5 9 11 6 7 8 10 \\n\",\n    \"11\\n2 1 7 11 10 6 8 9 3 4 5 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"11\\n11 10 1 6 9 2 3 5 7 8 12 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n9 8 \\n\",\n    \"-1\\n\",\n    \"6\\n2 3 8 9 4 7 \\n\",\n    \"10\\n1 2 3 8 4 5 6 7 10 12 \\n\",\n    \"6\\n1 12 2 5 11 10 \\n\",\n    \"9\\n1 3 12 5 10 4 11 9 7 \\n\",\n    \"3\\n5 4 11 \\n\",\n    \"9\\n8 9 12 7 11 2 3 5 6 \\n\",\n    \"-1\\n\",\n    \"1\\n4 \\n\",\n    \"-1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/770/C",
  "starter_code": ""
}