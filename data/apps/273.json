{
  "task_id": "APPS/273",
  "problem_id": 273,
  "prompt": "The preferred way to generate user login in Polygon is to concatenate a prefix of the user's first name and a prefix of their last name, in that order. Each prefix must be non-empty, and any of the prefixes can be the full name. Typically there are multiple possible logins for each person.\n\nYou are given the first and the last name of a user. Return the alphabetically earliest login they can get (regardless of other potential Polygon users).\n\nAs a reminder, a prefix of a string s is its substring which occurs at the beginning of s: \"a\", \"ab\", \"abc\" etc. are prefixes of string \"{abcdef}\" but \"b\" and 'bc\" are not. A string a is alphabetically earlier than a string b, if a is a prefix of b, or a and b coincide up to some position, and then a has a letter that is alphabetically earlier than the corresponding letter in b: \"a\" and \"ab\" are alphabetically earlier than \"ac\" but \"b\" and \"ba\" are alphabetically later than \"ac\".\n\n\n-----Input-----\n\nThe input consists of a single line containing two space-separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive. \n\n\n-----Output-----\n\nOutput a single string\u00a0\u2014 alphabetically earliest possible login formed from these names. The output should be given in lowercase as well.\n\n\n-----Examples-----\nInput\nharry potter\n\nOutput\nhap\n\nInput\ntom riddle\n\nOutput\ntomr",
  "solutions": "[\"from collections import *\\nimport itertools\\nimport sys\\n\\ndef main():\\n    a, b = input().split()\\n    ans = a + b\\n    n = len(a)\\n    m = len(b)\\n    for i in range(1, n + 1):\\n        for j in range(1, m + 1):\\n            c = a[:i] + b[:j]\\n            # print(c)\\n            ans = min(ans, c)\\n    print(ans)\\n\\nmain()\\n\", \"import sys\\na, b = list(map(str, input().split()))\\narr = []\\nfor i in range(1, len(a) + 1):\\n    for j in range(1, len(b) + 1):\\n        arr.append(a[:i] + b[:j])\\narr.sort()\\nprint(arr[0])\\n\", \"s = input().split()\\nd = set()\\nfor i in range(1, len(s[0]) + 1):\\n\\tfor j in range(1, len(s[1]) + 1):\\n\\t\\td.add(s[0][:i] + s[1][:j])\\nprint(sorted(d)[0])\", \"a, b = input().split()\\n\\nl = []\\n\\nfor i in range(1, len(a) + 1):\\n    for j in range(1, len(b) + 1):\\n        l.append(a[:i] + b[:j])\\n\\nl.sort()\\n\\nprint(l[0])\\n\", \"a,b = input().split()\\nn=len(a)\\nm=len(b)\\nnames = []\\nfor i in range(n):\\n    for j in range(m):\\n        names.append(a[:i+1]+b[:j+1])\\nprint(min(names))\\n\", \"a, b = input().split()\\n\\nbest = None\\nfor i in range(1, len(a) + 1):\\n    for j in range(1, len(b) + 1):\\n        username = a[:i] + b[:j]\\n        if best is None or username < best:\\n            best = username\\n\\nprint(best)\\n\", \"a,b=input().split()\\nans=[]\\nfor x in range(1,len(a)+1):\\n    for y in range(1,len(b)+1):\\n        ans.append(a[:x]+b[:y])\\nans=sorted(ans)\\nprint(ans[0])\", \"a,b = input().split()\\nprint(min(a[:i+1]+b[:j+1] for i in range(len(a)) for j in range(len(b))))\\n\", \"a, b = input().split()\\nans = a[0]\\nfor i in range(1, len(a)):\\n    if a[i] < b[0]:\\n        ans += a[i]\\n    else:\\n        break\\nans += b[0]\\nprint(ans)\", \"s1, s2 = input().split()\\na = []\\nfor i in range(1, len(s1) + 1):\\n    for j in range(1, len(s2) + 1):\\n        a.append(s1[:i] + s2[:j])\\na.sort()\\nprint(a[0])\\n\", \"s, t = input().split()\\n\\nl = []\\nfor i in range(len(s)):\\n\\tfor j in range(len(t)):\\n\\t\\tl.append(s[:i+1] + t[:j+1])\\nl.sort()\\n\\nprint(l[0])\\n\", \"q,w=input().split()\\ns=q[0]\\nq=q[1:]\\nwhile len(q)>0:\\n    if q[0]<w[0]:\\n        s+=q[0]\\n        q=q[1:]\\n    else:\\n        q=''\\nprint(s+w[0])\\n\", \"name, fam = input().split()\\nans = name[0]\\nfor ch in name[1:]:\\n    if ch < fam[0]:\\n        ans += ch\\n    else:\\n        break\\nans += fam[0]\\nprint(ans)\\n\", \"a, b = input().split()\\nk = 1\\nfor i in range(1, len(a)):\\n    if a[i] < b[0]:\\n        k += 1\\n    else:\\n        break\\nans = a[:k] + b[0]\\nprint(ans)\", \"a, b = input().split()\\nans = \\\"z\\\" * 100\\nfor i in range(1, len(a) + 1):\\n    for j in range(1, len(b) + 1):\\n        if a[:i] + b[:j] < ans:\\n            ans = a[:i] + b[:j]\\nprint(ans)\", \"s1,s2=input().split()\\nminn='zzzzzzzzzzzzzzzzz'\\nfor i in range(1,len(s1)+1):\\n  for j in range(1,len(s2)+1):\\n    if s1[:i]+s2[:j] <minn:\\n      minn=s1[:i]+s2[:j]\\nprint(minn)\", \"n, ln = [i for i in input().split(' ')]\\n\\nans = n[0]\\n\\ni = 1\\n\\nwhile i < len(n) and n[i] < ln[0]:\\n    ans += n[i]\\n    i += 1\\n\\nans += ln[0]\\nprint(ans)\\n\", \"a,b = input().split()\\nans = a[0]\\nfor i in range(1, len(a)):\\n\\tif(a[i] < b[0]):\\n\\t\\tans += a[i]\\n\\telse:\\n\\t\\tbreak\\nans += b[0]\\nprint(ans)\", \"name, surname = input().split()\\n\\nans = name[0] + surname[0]\\nfor i in range(len(name)):\\n    cur_ans = name[:i + 1]\\n    for j in range(len(surname)):\\n        cur_ans += surname[:j + 1]\\n        ans = min(ans, cur_ans)\\n\\nprint(ans)\", \"name, surname = input().split()\\nans = name[0]\\nfor i in name[1:]:\\n    if i < surname[0]:\\n        ans += i\\n    else:\\n        break\\nans += surname[0]\\nprint(ans)\", \"(st1,st2) = (input().split())\\nd = 0\\nfor i in st1:\\n\\tif i<st2[0] or not d:\\n\\t\\td = 1\\n\\t\\tprint(i, end='')\\n\\telse:\\n\\t\\tbreak\\nprint(st2[0])\", \"n, s = input().split()\\nlast = s[0]\\nans = n[0]\\nfor x in n[1:]:\\n    if x<last:\\n        ans+=x\\n    else:\\n        break\\nprint(ans+last)\", \"s1,s2=input().split()\\na=[]\\nfor i in range(1,len(s1)+1):\\n    for j in range(1,len(s2)+1):\\n        a.append(s1[:i]+s2[:j])\\nprint(min(a))\\n\", \"a, b = list(map(str, input().split()))\\nan = -1\\nfor i in range(len(a)):\\n    for j in range(len(b)):\\n        c = int(i == -1) + int(j == -1)\\n        if (an == -1 or a[0:i + 1] + b[0: j + 1] < an):\\n            an = a[0:i + 1] + b[0: j + 1]\\nprint(an)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"harry potter\\n\",\n    \"tom riddle\\n\",\n    \"a qdpinbmcrf\\n\",\n    \"wixjzniiub ssdfodfgap\\n\",\n    \"z z\\n\",\n    \"ertuyivhfg v\\n\",\n    \"asdfghjkli ware\\n\",\n    \"udggmyop ze\\n\",\n    \"fapkdme rtzxovx\\n\",\n    \"mybiqxmnqq l\\n\",\n    \"dtbqya fyyymv\\n\",\n    \"fyclu zokbxiahao\\n\",\n    \"qngatnviv rdych\\n\",\n    \"ttvnhrnng lqkfulhrn\\n\",\n    \"fya fgx\\n\",\n    \"nuis zvjjqlre\\n\",\n    \"ly qtsmze\\n\",\n    \"d kgfpjsurfw\\n\",\n    \"lwli ewrpu\\n\",\n    \"rr wldsfubcs\\n\",\n    \"h qart\\n\",\n    \"vugvblnzx kqdwdulm\\n\",\n    \"xohesmku ef\\n\",\n    \"twvvsl wtcyawv\\n\",\n    \"obljndajv q\\n\",\n    \"jjxwj kxccwx\\n\",\n    \"sk fftzmv\\n\",\n    \"cgpegngs aufzxkyyrw\\n\",\n    \"reyjzjdvq skuch\\n\",\n    \"ardaae mxgdulijf\\n\",\n    \"bgopsdfji uaps\\n\",\n    \"amolfed pun\\n\",\n    \"badkiln yort\\n\",\n    \"aaaaaaaaaz york\\n\",\n    \"bbbbcbbbbd c\\n\",\n    \"aa ab\\n\",\n    \"ab b\\n\",\n    \"aaaaa ab\\n\",\n    \"aa a\\n\",\n    \"aba b\\n\",\n    \"aaaaaaa aaaaaa\\n\",\n    \"a a\\n\",\n    \"a aa\\n\",\n    \"a b\\n\",\n    \"b a\\n\",\n    \"z a\\n\",\n    \"aaa a\\n\",\n    \"aa aa\\n\",\n    \"a aaa\\n\",\n    \"aaaaaaaaaa aaaaaaaaaa\\n\",\n    \"aaaaaaaaaa a\\n\",\n    \"a aaaaaaaaaa\\n\",\n    \"zzaa b\\n\",\n    \"ca cf\\n\",\n    \"abhi ia\\n\",\n    \"aaaa aaaab\\n\",\n    \"aar raa\\n\",\n    \"harry hotter\\n\",\n    \"aaaaaaa a\\n\",\n    \"apple pie\\n\",\n    \"aaa aaa\\n\",\n    \"kabc buba\\n\",\n    \"asd ss\\n\",\n    \"bbb b\\n\"\n  ],\n  \"outputs\": [\n    \"hap\\n\",\n    \"tomr\\n\",\n    \"aq\\n\",\n    \"wis\\n\",\n    \"zz\\n\",\n    \"ertuv\\n\",\n    \"asdfghjkliw\\n\",\n    \"udggmyopz\\n\",\n    \"fapkdmer\\n\",\n    \"ml\\n\",\n    \"df\\n\",\n    \"fycluz\\n\",\n    \"qngar\\n\",\n    \"tl\\n\",\n    \"ff\\n\",\n    \"nuisz\\n\",\n    \"lq\\n\",\n    \"dk\\n\",\n    \"le\\n\",\n    \"rrw\\n\",\n    \"hq\\n\",\n    \"vk\\n\",\n    \"xe\\n\",\n    \"tw\\n\",\n    \"obljndajq\\n\",\n    \"jjk\\n\",\n    \"sf\\n\",\n    \"ca\\n\",\n    \"res\\n\",\n    \"am\\n\",\n    \"bgopsdfjiu\\n\",\n    \"amolfedp\\n\",\n    \"badkilny\\n\",\n    \"aaaaaaaaay\\n\",\n    \"bbbbc\\n\",\n    \"aa\\n\",\n    \"ab\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"ab\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"ab\\n\",\n    \"ba\\n\",\n    \"za\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"zb\\n\",\n    \"cac\\n\",\n    \"abhi\\n\",\n    \"aa\\n\",\n    \"aar\\n\",\n    \"hah\\n\",\n    \"aa\\n\",\n    \"ap\\n\",\n    \"aa\\n\",\n    \"kab\\n\",\n    \"as\\n\",\n    \"bb\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/909/A",
  "starter_code": ""
}