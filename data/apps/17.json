{
  "task_id": "APPS/17",
  "problem_id": 17,
  "prompt": "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 n, 1 \u2264 t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0\u2002 ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1\u2002 ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2\u2002 ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3\u2002 ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4\u2002 ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5\u2002 ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6\u2002 -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7\u2002 --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8\u2002 ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9\u2002 ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
  "solutions": "[\"def read_ints():\\n\\treturn [int(i) for i in input().split()]\\n\\nn, k, t = read_ints()\\nif t <= k:\\n\\tprint(t)\\nelif t > n:\\n\\tprint(k + n - t)\\nelse:\\n\\tprint(k)\", \"def list_input():\\n    return list(map(int,input().split()))\\ndef map_input():\\n    return map(int,input().split())\\ndef map_string():\\n    return input().split()\\n    \\nn,k,t = map_input()\\nif t <= k:\\n  print(t)\\nelif t <= n:\\n  print(k)\\nelse:\\n  print(k+n-t)\", \"n,k,t = map(int,input().split())\\nif(t <= k):\\n\\tprint(t)\\nelif(t >= n+1):\\n\\tprint(n+k-t)\\nelse:\\n\\tprint(k)\", \"n, k, t = list(map(int, input().split()))\\nif t <= k:\\n\\tprint(t)\\nelif k < t <= n:\\n\\tprint(k)\\nelse:\\n\\tprint(k - t + n)\", \"n, k, t = map(int, input().split())\\nif t <= n:\\n    print(min(t, k))\\nelse:\\n    print(k - t + n)\", \"n,k,t = [int(i) for i in input().split()]\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(k-t+n)\\nelse:\\n    print(k)\", \"n, k, t = map(int, input().split())\\nif t < k:\\n    print(t)\\nelse:\\n    print(k - max(t - n, 0))\", \"n,k,t = map(int, input().split())\\nif t >= k and t <= n:\\n    print(k)\\nelif t < k:\\n    print(t)\\nelse:\\n    print(k - (t - n))\", \"from sys import stdin, stdout\\n\\nn,k,t = list(map(int,stdin.readline().rstrip().split()))\\n\\nprint(max([min([n,t])-max([0,t-k]),0]))\\n\", \"import sys\\n\\nn, k, t = [int(d) for d in sys.stdin.readline().split()]\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(n+k-t)\\nelse:\\n    print(k)\\n\", \"n, k, t = [int(i) for i in input().split()]\\nif t < k:\\n    print(t)\\n    return\\nif n + 1 <= t:\\n    print(n + k - t)\\n    return\\nprint(k)\", \"n, k, t = map(int, input().split())\\n\\nif t <= k:\\n\\tprint(t)\\nelif t >= n:\\n\\tprint(n+k-t)\\nelse:\\n\\tprint(k)\", \"N, K, T = list(map(int, input().split()))\\n\\nif T < K:\\n    print(T)\\nelif N < T:\\n    print(N+K-T)\\nelse:\\n    print(K)\\n\", \"n,k,t=list(map(int,input().split()))\\nif (t<=k):\\n    print(t)\\nelse:\\n    if (t <=n):\\n        print(k)\\n    else:\\n        print(n+k-t)\\n\", \"n,k,t=list(map(int,input().split()))\\nif t>=k and t<=n:\\n    print(k)\\nelse:\\n    if t<k:\\n        print(t)\\n    else:\\n        print(k-(t-n))\\n\", \"n, k, t = list(map(int, input().split()))\\n\\nif t < k:\\n    print(t)\\nelif t >= k and t <= n:\\n    print(k)\\nelse:\\n    print(k - t + n)\\n\", \"n, k, t = map(int, input().split())\\nif t <= k:\\n    print(t)\\nelif t <= n:\\n    print(k)\\nelse:\\n    print(k - (t - n))\", \"n,k,t = map(int,input().split())\\nif t <= k:\\n  res = t\\nelif t <= n:\\n  res = k\\nelse:\\n  res = (n+k) - t\\nprint(res)\", \"n,k,t=map(int, input().split())\\nif(t<k):\\n  print(t)\\nelif(t<=n and t>=k):\\n  print(k)\\nelse:\\n  print(k-(t-n))\", \"n, k, t = list(map(int, input().split(' ')))\\n\\ndef main():\\n    if t < k:\\n        return t\\n    elif k <= t <= n:\\n        return k\\n    else:\\n        return n + k - t\\n\\nprint(main())\\n\", \"n, k, t = map(int, input().split())\\nif t <= k :\\n    print(t)\\nelif t > n:\\n    print(k - t + n)\\nelse:\\n    print(k)\", \"n,k,t = list(map(int, input().split()))\\nif t < k:\\n  print(t)\\nelif t > n:\\n  print(max(0, k-t+n))\\nelse:\\n  print(k)\\n\\n\", \"n, k, t = map(int, input().split())\\n\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(max(0, k - (t - n)))\\nelse:\\n    print(k)\", \"n, k, t = list(map(int, input().split()))\\nif t<=k:\\n    print(t)\\nelif t<=n:\\n    print(k)\\nelse:\\n    print(k - (t - n))\\n\", \"n,t,k = map(int,input().split())\\n\\nif(t>k):\\n    print(k)\\nelif(k>n):\\n    print(t-(k-n))\\nelse:\\n    print(t)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10 5 3\\n\",\n    \"10 5 7\\n\",\n    \"10 5 12\\n\",\n    \"840585600 770678331 788528791\\n\",\n    \"25462281 23343504 8024619\\n\",\n    \"723717988 205757169 291917494\\n\",\n    \"27462087 20831796 15492397\\n\",\n    \"966696824 346707476 1196846860\\n\",\n    \"290274403 41153108 327683325\\n\",\n    \"170963478 151220598 222269210\\n\",\n    \"14264008 309456 11132789\\n\",\n    \"886869816 281212106 52891064\\n\",\n    \"330543750 243917820 205522400\\n\",\n    \"457658451 18625039 157624558\\n\",\n    \"385908940 143313325 509731380\\n\",\n    \"241227633 220621961 10025257\\n\",\n    \"474139818 268918981 388282504\\n\",\n    \"25963410 3071034 820199\\n\",\n    \"656346757 647995766 75748423\\n\",\n    \"588568132 411878522 521753621\\n\",\n    \"735788762 355228487 139602545\\n\",\n    \"860798593 463398487 506871376\\n\",\n    \"362624055 110824996 194551217\\n\",\n    \"211691721 195866131 313244576\\n\",\n    \"45661815 26072719 9643822\\n\",\n    \"757183104 590795077 709609355\\n\",\n    \"418386749 1915035 197248338\\n\",\n    \"763782282 297277890 246562421\\n\",\n    \"893323188 617630677 607049638\\n\",\n    \"506708261 356545583 296093684\\n\",\n    \"984295813 427551190 84113823\\n\",\n    \"774984967 61373612 96603505\\n\",\n    \"774578969 342441237 91492393\\n\",\n    \"76495801 8780305 56447339\\n\",\n    \"48538385 582843 16805978\\n\",\n    \"325794610 238970909 553089099\\n\",\n    \"834925315 316928679 711068031\\n\",\n    \"932182199 454838315 267066713\\n\",\n    \"627793782 552043394 67061810\\n\",\n    \"24317170 17881607 218412\\n\",\n    \"1000000000 1000 1\\n\",\n    \"1000000000 1000 2\\n\",\n    \"1000000000 1 1000\\n\",\n    \"100 100 100\\n\",\n    \"100 100 99\\n\",\n    \"100 100 101\\n\",\n    \"100 100 199\\n\",\n    \"1000000000 1000000000 1999999999\\n\",\n    \"10 5 5\\n\",\n    \"5 3 5\\n\",\n    \"10 3 3\\n\",\n    \"10 5 6\\n\",\n    \"3 2 4\\n\",\n    \"10 5 14\\n\",\n    \"6 1 4\\n\",\n    \"10 10 19\\n\",\n    \"10 4 11\\n\",\n    \"2 2 3\\n\",\n    \"10 5 11\\n\",\n    \"600 200 700\\n\",\n    \"2000 1000 2001\\n\",\n    \"1000 1000 1001\\n\",\n    \"5 4 6\\n\",\n    \"2 1 2\\n\",\n    \"10 3 10\\n\",\n    \"15 10 10\\n\",\n    \"10 5 13\\n\",\n    \"2 2 2\\n\",\n    \"5 5 6\\n\",\n    \"10 6 12\\n\",\n    \"7 5 8\\n\",\n    \"10 4 9\\n\",\n    \"9 2 6\\n\",\n    \"5 2 6\\n\",\n    \"6 2 6\\n\",\n    \"5 5 8\\n\",\n    \"3 3 5\\n\",\n    \"10 2 5\\n\",\n    \"5 3 7\\n\",\n    \"5 4 8\\n\",\n    \"10 6 11\\n\",\n    \"5 3 6\\n\",\n    \"10 6 14\\n\",\n    \"10 10 10\\n\",\n    \"1000000000 1 1000000000\\n\",\n    \"20 4 22\\n\",\n    \"5 4 4\\n\",\n    \"4 3 6\\n\",\n    \"12 8 18\\n\",\n    \"10 5 10\\n\",\n    \"100 50 149\\n\",\n    \"4 4 4\\n\",\n    \"7 6 9\\n\",\n    \"16 10 21\\n\",\n    \"10 2 11\\n\",\n    \"600 200 500\\n\",\n    \"100 30 102\\n\",\n    \"10 10 18\\n\",\n    \"15 3 10\\n\",\n    \"1000000000 1000000000 1000000000\\n\",\n    \"5 5 5\\n\",\n    \"10 3 12\\n\",\n    \"747 457 789\\n\",\n    \"5 4 7\\n\",\n    \"15 5 11\\n\",\n    \"3 2 2\\n\",\n    \"7 6 8\\n\",\n    \"7 4 8\\n\",\n    \"10 4 13\\n\",\n    \"10 3 9\\n\",\n    \"20 2 21\\n\",\n    \"6 5 9\\n\",\n    \"10 9 18\\n\",\n    \"12 4 9\\n\",\n    \"10 7 15\\n\",\n    \"999999999 999999998 1500000000\\n\",\n    \"20 5 20\\n\",\n    \"4745 4574 4757\\n\",\n    \"10 7 12\\n\",\n    \"17 15 18\\n\",\n    \"3 1 3\\n\",\n    \"100 3 7\\n\",\n    \"6 2 7\\n\",\n    \"8 5 10\\n\",\n    \"3 3 3\\n\",\n    \"9 5 10\\n\",\n    \"10 6 13\\n\",\n    \"13 10 14\\n\",\n    \"13 12 15\\n\",\n    \"10 4 12\\n\",\n    \"41 3 3\\n\",\n    \"1000000000 1000000000 1400000000\\n\",\n    \"10 3 11\\n\",\n    \"12 7 18\\n\",\n    \"15 3 17\\n\",\n    \"10 2 8\\n\",\n    \"1000000000 1000 1000000999\\n\",\n    \"5 5 9\\n\",\n    \"100 3 6\\n\",\n    \"100 5 50\\n\",\n    \"10000 10 10000\\n\",\n    \"1 1 1\\n\",\n    \"6 4 4\\n\",\n    \"9979797 555554 10101010\\n\",\n    \"13 5 12\\n\",\n    \"9 4 10\\n\",\n    \"7 5 10\\n\",\n    \"100000000 10000000 100005000\\n\",\n    \"100000 50000 100001\\n\",\n    \"15 10 20\\n\",\n    \"4 4 5\\n\",\n    \"5 3 3\\n\",\n    \"30 5 30\\n\",\n    \"200000 10 200005\\n\",\n    \"10 9 12\\n\",\n    \"10 6 15\\n\",\n    \"1000000000 10 1000000000\\n\",\n    \"7 5 11\\n\",\n    \"9 4 4\\n\",\n    \"14 3 15\\n\",\n    \"1000000000 100000000 1000000000\\n\",\n    \"40 10 22\\n\",\n    \"50 10 51\\n\",\n    \"999999997 999999995 1999999991\\n\",\n    \"92 79 144\\n\",\n    \"8 4 4\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"770678331\\n\",\n    \"8024619\\n\",\n    \"205757169\\n\",\n    \"15492397\\n\",\n    \"116557440\\n\",\n    \"3744186\\n\",\n    \"99914866\\n\",\n    \"309456\\n\",\n    \"52891064\\n\",\n    \"205522400\\n\",\n    \"18625039\\n\",\n    \"19490885\\n\",\n    \"10025257\\n\",\n    \"268918981\\n\",\n    \"820199\\n\",\n    \"75748423\\n\",\n    \"411878522\\n\",\n    \"139602545\\n\",\n    \"463398487\\n\",\n    \"110824996\\n\",\n    \"94313276\\n\",\n    \"9643822\\n\",\n    \"590795077\\n\",\n    \"1915035\\n\",\n    \"246562421\\n\",\n    \"607049638\\n\",\n    \"296093684\\n\",\n    \"84113823\\n\",\n    \"61373612\\n\",\n    \"91492393\\n\",\n    \"8780305\\n\",\n    \"582843\\n\",\n    \"11676420\\n\",\n    \"316928679\\n\",\n    \"267066713\\n\",\n    \"67061810\\n\",\n    \"218412\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"99\\n\",\n    \"99\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"100\\n\",\n    \"999\\n\",\n    \"999\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"200\\n\",\n    \"28\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1000000000\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"415\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"499999997\\n\",\n    \"5\\n\",\n    \"4562\\n\",\n    \"5\\n\",\n    \"14\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"600000000\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"434341\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"9995000\\n\",\n    \"49999\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"100000000\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"27\\n\",\n    \"4\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/851/A",
  "starter_code": ""
}