{
  "task_id": "APPS/307",
  "problem_id": 307,
  "prompt": "Recently Anton found a box with digits in his room. There are k_2 digits 2, k_3 digits 3, k_5 digits 5 and k_6 digits 6.\n\nAnton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!\n\nEach digit can be used no more than once, i.e. the composed integers should contain no more than k_2 digits 2, k_3 digits 3 and so on. Of course, unused digits are not counted in the sum.\n\n\n-----Input-----\n\nThe only line of the input contains four integers k_2, k_3, k_5 and k_6\u00a0\u2014 the number of digits 2, 3, 5 and 6 respectively (0 \u2264 k_2, k_3, k_5, k_6 \u2264 5\u00b710^6).\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 maximum possible sum of Anton's favorite integers that can be composed using digits from the box.\n\n\n-----Examples-----\nInput\n5 1 3 4\n\nOutput\n800\n\nInput\n1 1 1 1\n\nOutput\n256\n\n\n\n-----Note-----\n\nIn the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.\n\nIn the second sample, the optimal answer is to create on integer 256, thus the answer is 256.",
  "solutions": "[\"k2, k3, k5, k6 = list(map(int, input().split()))\\nc = min(k2, k5, k6)\\nk2 -= c\\nans = 256 * c\\nans += 32 * min(k3, k2)\\nprint(ans)\\n\", \"k2, k3, k5, k6 = list(map(int, input().split()))\\nk256 = min(k2, k5, k6)\\nk2 -= k256\\nk5 -= k256\\nk6 -= k256\\nk32 = min(k2, k3)\\nprint(k256 * 256 + 32 * k32)\\n\", \"read = lambda: list(map(int, input().split()))\\nk2, k3, k5, k6 = read()\\ncnt1 = min(k2, k5, k6)\\ncnt2 = min(k2 - cnt1, k3)\\nans = cnt1 * 256 + cnt2 * 32\\nprint(ans)\\n\", \"k2, k3, k5, k6 = map(int, input().split())\\nn = min(k2, k5, k6)\\nm = min(k2 - n, k3)\\nprint(n * 256 + m * 32)\", \"k2, k3, k5, k6 = list(map(int, input().split()))\\n\\nmn_56 = min(k5, k6)\\nmn_256 = min(mn_56, k2)\\n\\nrest_k2 = k2 - mn_256\\nk32 = min(k3, rest_k2)\\n\\nprint(mn_256 * 256 + k32 * 32)\\n\", \"a, b, c, d = map(int, input().split())\\nx = min(a, c, d)\\nans = x * 256\\na-=x\\nc-=x\\nd-=x\\nans += min(a, b) * 32\\nprint(ans)\", \"k2, k3, k5, k6 = list(map(int, input().split()))\\n\\ns = min(k2, k5, k6) * 256\\nk2 -= min(k2, k5, k6)\\ns += min(k2, k3) * 32\\n\\nprint(s)\\n\", \"a2,a3,a5,a6 = map(int,input().split())\\ns256 = min(a2,a5,a6)\\na2 -= s256\\na5 -= s256\\na6 -= s256\\ns32 = min(a2,a3)\\nprint(s256*256+s32*32)\", \"k2, k3, k5, k6 = map(int, input().split(' '))\\nnum256 = min(k2, k5, k6)\\nans = 256 * num256\\nk2 -= num256\\nnum32 = min(k2, k3)\\nans += 32 * num32\\nprint(ans)\", \"a = list(map(int, input().split()))\\nw = min(a[0], a[2], a[3])\\nam = 256 * w\\nam += 32 * min(a[0] - w, a[1])\\nprint(am)\", \"a, b, c, d = map(int, input().split())\\nmini = min(a, c, d)\\nans = 0\\nans += mini * 256\\na -= mini\\nc -= mini\\nd -= mini\\nmini = min(a, b)\\nans += mini * 32\\nprint(ans)\", \"k2,k3,k5,k6=map(int,input().split())\\ns=min(k2,k5,k6)*256\\nk2=k2-min(k2,k5,k6)\\nprint(s+min(k2,k3)*32)\", \"a, b, c, d = map(int, input().split())\\nmx = min(a, c, d)\\nans = mx * 256 + min(a - mx, b) * 32\\nprint(ans)\", \"a, b, c, d = list(map(int, input().split()))\\nm = min(a, c, d)\\na -= m\\nc -= m\\nd -= m\\nans = 256 * m\\nans += 32 * min(a,b )\\nprint(ans)\\n\", \"a, b, c, d = map(int, input().split())\\nans = 0\\nans += 256 * min(a, min(c, d))\\nleft = a - ans // 256\\nans += 32 * min(b, left)\\nprint(ans)\", \"from math import *\\nfrom sys import *\\nfrom queue import *\\n\\na,b,c,d=(int(z) for z in input().split())\\nans=0\\nans+=256*min(a,c,d)\\na-=min(a,c,d)\\nans+=32*min(a,b)\\nprint(ans)\", \"k2, k3, k5, k6 = map(int, input().split())\\n\\na = min(k2, k5, k6)\\nb = min(k3, k2-a)\\nprint(256*a+32*b)\", \"k2, k3, k5, k6 = list(map(int, input().split()))\\nk = min(k2, min(k5, k6))\\nans = k * 256\\nk2 -= k\\nans += 32 * min(k2, k3)\\nprint(ans)\\n\", \"k2, k3, k5, k6 = map(int, input().split())\\ns = 0\\ns += 256 * min(k2, k5, k6)\\nk2 -= min(k2, k5, k6)\\ns += 32 * min(k2, k3)\\nprint(s)\", \"k2, k3, k5, k6 = [int(x) for x in input().split()]\\nc1 = min(k2, k5, k6)\\nans = c1*256\\nk2 -= c1\\nif k2 > 0:\\n    ans += 32*(min(k2,k3))\\nprint(ans)\", \"__author__ = 'Think'\\nk2, k3, k5, k6=[int(i) for i in input().split()]\\nr=min(k5, k6)\\nif r>k2:\\n\\tprint(256*k2)\\nelse:\\n\\tprint(256*r+32*min(k3, k2-r))\", \"#!/usr/bin/env python3\\n\\n\\ndef lmap(f, x):\\n    return list(map(f, x))\\n\\n\\ndef read_ints():\\n    return lmap(int, input().strip().split())\\n\\n\\ndef main():\\n    res = 0\\n    a2, a3, a5, a6 = read_ints()\\n    n256 = min(a2, a5, a6)\\n    res += n256 * 256\\n    a2 -= n256\\n    a5 -= n256\\n    a6 -= n256\\n    n32 = min(a3, a2)\\n    res += n32 * 32\\n    return res\\n\\n\\nprint(main())\\n\", \"l = [int(x) for x in input().split()]\\nk = min(l[0],l[2],l[3])\\na = l[0] - k\\nj = min(a,l[1])\\nprint(256*k + 32*j)\", \"k2, k3, k5, k6 = list(map(int, input().split()))\\n\\nn = min(k2, k5, k6)\\ns = n * 256\\nk2 -= n\\nif k2 > 0:\\n    s += min(k2, k3) * 32\\nprint(s)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5 1 3 4\\n\",\n    \"1 1 1 1\\n\",\n    \"10 2 1 5\\n\",\n    \"4 2 7 2\\n\",\n    \"489 292 127 263\\n\",\n    \"9557 5242 1190 7734\\n\",\n    \"1480320 1969946 1158387 3940412\\n\",\n    \"0 0 0 0\\n\",\n    \"5000000 5000000 5000000 5000000\\n\",\n    \"1048576 256 1048576 1048576\\n\",\n    \"2073144 2073145 0 0\\n\",\n    \"1000000 0 0 1\\n\",\n    \"2 1 1 1\\n\",\n    \"0 5000000 5000000 5000000\\n\",\n    \"4494839 1140434 3336818 4921605\\n\",\n    \"2363223 3835613 926184 3190201\\n\",\n    \"198044 2268164 2811743 1458798\\n\",\n    \"5 5 1 0\\n\",\n    \"1 1 1 4\\n\",\n    \"3 3 4 4\\n\",\n    \"1 2 0 5\\n\",\n    \"1207814 1649617 2347252 3136345\\n\",\n    \"78025 2308643 78025 4943733\\n\",\n    \"3046068 2548438 2676145 4789979\\n\",\n    \"4755258 2724358 2030900 4801065\\n\",\n    \"1359689 3792971 4451626 4497236\\n\",\n    \"3484483 3995744 87159 4941393\\n\",\n    \"1273630 1273630 980163 1711706\\n\",\n    \"2010798 1111442 4014004 4430228\\n\",\n    \"1714940 133067 3346537 3346537\\n\",\n    \"3731658 4548347 3731658 3731658\\n\",\n    \"601597 2632066 450558 450558\\n\",\n    \"726573 158002 568571 568571\\n\",\n    \"407729 4510137 3425929 3425929\\n\",\n    \"1781608 3826276 4384744 4384744\\n\",\n    \"4486284 4486284 3249460 3249460\\n\",\n    \"4759823 3520376 4743363 4743363\\n\",\n    \"386719 4643763 2749163 1701105\\n\",\n    \"3173901 1042250 4102237 3173901\\n\",\n    \"2681845 4558270 4388852 13014\\n\",\n    \"1152975 910150 2776412 242825\\n\",\n    \"2005366 3807065 4174270 2471686\\n\",\n    \"2092196 2406694 3664886 85601\\n\",\n    \"4542228 4542228 3992410 1039690\\n\",\n    \"3093105 2256347 675644 570209\\n\",\n    \"0 1 1 1\\n\",\n    \"10 20 10 20\\n\",\n    \"0 0 5 1\\n\",\n    \"10 0 10 11\\n\",\n    \"2 1 32768 65536\\n\",\n    \"2 3 5 6\\n\",\n    \"5 3 2 2\\n\",\n    \"1 0 2 3\\n\",\n    \"1 0 1 1\\n\",\n    \"2 0 3 3\\n\",\n    \"2 2 2 0\\n\",\n    \"0 0 1 1\\n\",\n    \"1 0 2 2\\n\",\n    \"4 3 4 4\\n\",\n    \"5 1 5 6100\\n\"\n  ],\n  \"outputs\": [\n    \"800\\n\",\n    \"256\\n\",\n    \"320\\n\",\n    \"576\\n\",\n    \"41856\\n\",\n    \"472384\\n\",\n    \"306848928\\n\",\n    \"0\\n\",\n    \"1280000000\\n\",\n    \"268435456\\n\",\n    \"66340608\\n\",\n    \"0\\n\",\n    \"288\\n\",\n    \"0\\n\",\n    \"890719296\\n\",\n    \"283088352\\n\",\n    \"50699264\\n\",\n    \"160\\n\",\n    \"256\\n\",\n    \"768\\n\",\n    \"32\\n\",\n    \"309200384\\n\",\n    \"19974400\\n\",\n    \"696930656\\n\",\n    \"607089856\\n\",\n    \"348080384\\n\",\n    \"131027072\\n\",\n    \"260312672\\n\",\n    \"514764288\\n\",\n    \"439024640\\n\",\n    \"955304448\\n\",\n    \"120176096\\n\",\n    \"150610240\\n\",\n    \"104378624\\n\",\n    \"456091648\\n\",\n    \"871440128\\n\",\n    \"1214827648\\n\",\n    \"99000064\\n\",\n    \"812518656\\n\",\n    \"88734176\\n\",\n    \"91288000\\n\",\n    \"513373696\\n\",\n    \"86124896\\n\",\n    \"378241856\\n\",\n    \"218176608\\n\",\n    \"0\\n\",\n    \"2560\\n\",\n    \"0\\n\",\n    \"2560\\n\",\n    \"512\\n\",\n    \"512\\n\",\n    \"608\\n\",\n    \"256\\n\",\n    \"256\\n\",\n    \"512\\n\",\n    \"64\\n\",\n    \"0\\n\",\n    \"256\\n\",\n    \"1024\\n\",\n    \"1280\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/734/B",
  "starter_code": ""
}